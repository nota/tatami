(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
module.exports=require("core-js/library/fn/array/from");

},{"core-js/library/fn/array/from":21}],2:[function(require,module,exports){
module.exports=require("core-js/library/fn/array/is-array");

},{"core-js/library/fn/array/is-array":22}],3:[function(require,module,exports){
module.exports=require("core-js/library/fn/object/assign");

},{"core-js/library/fn/object/assign":23}],4:[function(require,module,exports){
module.exports=require("core-js/library/fn/object/create");

},{"core-js/library/fn/object/create":24}],5:[function(require,module,exports){
module.exports=require("core-js/library/fn/object/define-property");

},{"core-js/library/fn/object/define-property":25}],6:[function(require,module,exports){
module.exports=require("core-js/library/fn/object/entries");

},{"core-js/library/fn/object/entries":26}],7:[function(require,module,exports){
module.exports=require("core-js/library/fn/object/get-own-property-descriptor");

},{"core-js/library/fn/object/get-own-property-descriptor":27}],8:[function(require,module,exports){
module.exports=require("core-js/library/fn/object/keys");

},{"core-js/library/fn/object/keys":28}],9:[function(require,module,exports){
module.exports=require("core-js/library/fn/object/values");

},{"core-js/library/fn/object/values":29}],10:[function(require,module,exports){
module.exports=require("core-js/library/fn/parse-int");

},{"core-js/library/fn/parse-int":30}],11:[function(require,module,exports){
function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}module.exports=_assertThisInitialized;

},{}],12:[function(require,module,exports){
var _Object$assign=require("../core-js/object/assign");function _extends(){return module.exports=_extends=_Object$assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},_extends.apply(this,arguments)}module.exports=_extends;

},{"../core-js/object/assign":3}],13:[function(require,module,exports){
var _Object$create=require("../core-js/object/create");function _inheritsLoose(e,o){e.prototype=_Object$create(o.prototype),e.prototype.constructor=e,e.__proto__=o}module.exports=_inheritsLoose;

},{"../core-js/object/create":4}],14:[function(require,module,exports){
function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}module.exports=_interopRequireDefault;

},{}],15:[function(require,module,exports){
var _Object$getOwnPropertyDescriptor=require("../core-js/object/get-own-property-descriptor"),_Object$defineProperty=require("../core-js/object/define-property");function _interopRequireWildcard(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t)){var o=_Object$defineProperty&&_Object$getOwnPropertyDescriptor?_Object$getOwnPropertyDescriptor(e,t):{};o.get||o.set?_Object$defineProperty(r,t,o):r[t]=e[t]}return r.default=e,r}module.exports=_interopRequireWildcard;

},{"../core-js/object/define-property":5,"../core-js/object/get-own-property-descriptor":7}],16:[function(require,module,exports){
var _Object$keys=require("../core-js/object/keys");function _objectWithoutPropertiesLoose(e,o){if(null==e)return{};var t,r,s={},i=_Object$keys(e);for(r=0;r<i.length;r++)t=i[r],o.indexOf(t)>=0||(s[t]=e[t]);return s}module.exports=_objectWithoutPropertiesLoose;

},{"../core-js/object/keys":8}],17:[function(require,module,exports){
(function (global){
"use strict";if(require("core-js/shim"),require("regenerator-runtime/runtime"),require("core-js/fn/regexp/escape"),global._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");global._babelPolyfill=!0;var DEFINE_PROPERTY="defineProperty";function define(e,i,r){e[i]||Object[DEFINE_PROPERTY](e,i,{writable:!0,configurable:!0,value:r})}define(String.prototype,"padLeft","".padStart),define(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function(e){[][e]&&define(Array,e,Function.call.bind([][e]))});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"core-js/fn/regexp/escape":20,"core-js/shim":423,"regenerator-runtime/runtime":18}],18:[function(require,module,exports){
(function (global){
!function(t){"use strict";var e,r=Object.prototype,n=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag",u="object"==typeof module,h=t.regeneratorRuntime;if(h)u&&(module.exports=h);else{(h=t.regeneratorRuntime=u?module.exports:{}).wrap=wrap;var s="suspendedStart",l="suspendedYield",f="executing",y="completed",p={},d={};d[i]=function(){return this};var v=Object.getPrototypeOf,g=v&&v(v(values([])));g&&g!==r&&n.call(g,i)&&(d=g);var m=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(d);GeneratorFunction.prototype=m.constructor=GeneratorFunctionPrototype,GeneratorFunctionPrototype.constructor=GeneratorFunction,GeneratorFunctionPrototype[c]=GeneratorFunction.displayName="GeneratorFunction",h.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===GeneratorFunction||"GeneratorFunction"===(e.displayName||e.name))},h.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,GeneratorFunctionPrototype):(t.__proto__=GeneratorFunctionPrototype,c in t||(t[c]="GeneratorFunction")),t.prototype=Object.create(m),t},h.awrap=function(t){return{__await:t}},defineIteratorMethods(AsyncIterator.prototype),AsyncIterator.prototype[a]=function(){return this},h.AsyncIterator=AsyncIterator,h.async=function(t,e,r,n){var o=new AsyncIterator(wrap(t,e,r,n));return h.isGeneratorFunction(e)?o:o.next().then(function(t){return t.done?t.value:o.next()})},defineIteratorMethods(m),m[c]="Generator",m[i]=function(){return this},m.toString=function(){return"[object Generator]"},h.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function next(){for(;e.length;){var r=e.pop();if(r in t)return next.value=r,next.done=!1,next}return next.done=!0,next}},h.values=values,Context.prototype={constructor:Context,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(resetTryEntry),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function handle(n,o){return a.type="throw",a.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return handle("end");if(i.tryLoc<=this.prev){var c=n.call(i,"catchLoc"),u=n.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return handle(i.catchLoc,!0);if(this.prev<i.finallyLoc)return handle(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return handle(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return handle(i.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,p):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),p},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),resetTryEntry(r),p}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;resetTryEntry(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:values(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),p}}}function wrap(t,e,r,n){var o=e&&e.prototype instanceof Generator?e:Generator,i=Object.create(o.prototype),a=new Context(n||[]);return i._invoke=function makeInvokeMethod(t,e,r){var n=s;return function invoke(o,i){if(n===f)throw new Error("Generator is already running");if(n===y){if("throw"===o)throw i;return doneResult()}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var c=maybeInvokeDelegate(a,r);if(c){if(c===p)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===s)throw n=y,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=f;var u=tryCatch(t,e,r);if("normal"===u.type){if(n=r.done?y:l,u.arg===p)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(n=y,r.method="throw",r.arg=u.arg)}}}(t,r,a),i}function tryCatch(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}function defineIteratorMethods(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function AsyncIterator(e){function invoke(t,r,o,i){var a=tryCatch(e[t],e,r);if("throw"!==a.type){var c=a.arg,u=c.value;return u&&"object"==typeof u&&n.call(u,"__await")?Promise.resolve(u.__await).then(function(t){invoke("next",t,o,i)},function(t){invoke("throw",t,o,i)}):Promise.resolve(u).then(function(t){c.value=t,o(c)},i)}i(a.arg)}var r;"object"==typeof t.process&&t.process.domain&&(invoke=t.process.domain.bind(invoke)),this._invoke=function enqueue(t,e){function callInvokeWithMethodAndArg(){return new Promise(function(r,n){invoke(t,e,r,n)})}return r=r?r.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg()}}function maybeInvokeDelegate(t,r){var n=t.iterator[r.method];if(n===e){if(r.delegate=null,"throw"===r.method){if(t.iterator.return&&(r.method="return",r.arg=e,maybeInvokeDelegate(t,r),"throw"===r.method))return p;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return p}var o=tryCatch(n,t.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,p;var i=o.arg;return i?i.done?(r[t.resultName]=i.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,p):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,p)}function pushTryEntry(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function resetTryEntry(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function Context(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(pushTryEntry,this),this.reset(!0)}function values(t){if(t){var r=t[i];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function next(){for(;++o<t.length;)if(n.call(t,o))return next.value=t[o],next.done=!1,next;return next.value=e,next.done=!0,next};return a.next=a}}return{next:doneResult}}function doneResult(){return{value:e,done:!0}}}("object"==typeof global?global:"object"==typeof window?window:"object"==typeof self?self:this);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],19:[function(require,module,exports){
!function(){"use strict";var e={}.hasOwnProperty;function classNames(){for(var s=[],a=0;a<arguments.length;a++){var n=arguments[a];if(n){var r=typeof n;if("string"===r||"number"===r)s.push(n);else if(Array.isArray(n)&&n.length){var l=classNames.apply(null,n);l&&s.push(l)}else if("object"===r)for(var t in n)e.call(n,t)&&n[t]&&s.push(t)}}return s.join(" ")}"undefined"!=typeof module&&module.exports?(classNames.default=classNames,module.exports=classNames):"function"==typeof define&&"object"==typeof define.amd&&define.amd?define("classnames",[],function(){return classNames}):window.classNames=classNames}();

},{}],20:[function(require,module,exports){
require("../../modules/core.regexp.escape"),module.exports=require("../../modules/_core").RegExp.escape;

},{"../../modules/_core":121,"../../modules/core.regexp.escape":226}],21:[function(require,module,exports){
require("../../modules/es6.string.iterator"),require("../../modules/es6.array.from"),module.exports=require("../../modules/_core").Array.from;

},{"../../modules/_core":36,"../../modules/es6.array.from":90,"../../modules/es6.string.iterator":98}],22:[function(require,module,exports){
require("../../modules/es6.array.is-array"),module.exports=require("../../modules/_core").Array.isArray;

},{"../../modules/_core":36,"../../modules/es6.array.is-array":91}],23:[function(require,module,exports){
require("../../modules/es6.object.assign"),module.exports=require("../../modules/_core").Object.assign;

},{"../../modules/_core":36,"../../modules/es6.object.assign":92}],24:[function(require,module,exports){
require("../../modules/es6.object.create");var $Object=require("../../modules/_core").Object;module.exports=function create(e,r){return $Object.create(e,r)};

},{"../../modules/_core":36,"../../modules/es6.object.create":93}],25:[function(require,module,exports){
require("../../modules/es6.object.define-property");var $Object=require("../../modules/_core").Object;module.exports=function defineProperty(e,r,o){return $Object.defineProperty(e,r,o)};

},{"../../modules/_core":36,"../../modules/es6.object.define-property":94}],26:[function(require,module,exports){
require("../../modules/es7.object.entries"),module.exports=require("../../modules/_core").Object.entries;

},{"../../modules/_core":36,"../../modules/es7.object.entries":99}],27:[function(require,module,exports){
require("../../modules/es6.object.get-own-property-descriptor");var $Object=require("../../modules/_core").Object;module.exports=function getOwnPropertyDescriptor(e,r){return $Object.getOwnPropertyDescriptor(e,r)};

},{"../../modules/_core":36,"../../modules/es6.object.get-own-property-descriptor":95}],28:[function(require,module,exports){
require("../../modules/es6.object.keys"),module.exports=require("../../modules/_core").Object.keys;

},{"../../modules/_core":36,"../../modules/es6.object.keys":96}],29:[function(require,module,exports){
require("../../modules/es7.object.values"),module.exports=require("../../modules/_core").Object.values;

},{"../../modules/_core":36,"../../modules/es7.object.values":100}],30:[function(require,module,exports){
require("../modules/es6.parse-int"),module.exports=require("../modules/_core").parseInt;

},{"../modules/_core":36,"../modules/es6.parse-int":97}],31:[function(require,module,exports){
module.exports=function(o){if("function"!=typeof o)throw TypeError(o+" is not a function!");return o};

},{}],32:[function(require,module,exports){
var isObject=require("./_is-object");module.exports=function(e){if(!isObject(e))throw TypeError(e+" is not an object!");return e};

},{"./_is-object":53}],33:[function(require,module,exports){
var toIObject=require("./_to-iobject"),toLength=require("./_to-length"),toAbsoluteIndex=require("./_to-absolute-index");module.exports=function(e){return function(t,o,r){var n,u=toIObject(t),i=toLength(u.length),f=toAbsoluteIndex(r,i);if(e&&o!=o){for(;i>f;)if((n=u[f++])!=n)return!0}else for(;i>f;f++)if((e||f in u)&&u[f]===o)return e||f||0;return!e&&-1}};

},{"./_to-absolute-index":81,"./_to-iobject":83,"./_to-length":84}],34:[function(require,module,exports){
var cof=require("./_cof"),TAG=require("./_wks")("toStringTag"),ARG="Arguments"==cof(function(){return arguments}()),tryGet=function(t,e){try{return t[e]}catch(t){}};module.exports=function(t){var e,r,n;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=tryGet(e=Object(t),TAG))?r:ARG?cof(e):"Object"==(n=cof(e))&&"function"==typeof e.callee?"Arguments":n};

},{"./_cof":35,"./_wks":88}],35:[function(require,module,exports){
var toString={}.toString;module.exports=function(t){return toString.call(t).slice(8,-1)};

},{}],36:[function(require,module,exports){
var core=module.exports={version:"2.5.7"};"number"==typeof __e&&(__e=core);

},{}],37:[function(require,module,exports){
"use strict";var $defineProperty=require("./_object-dp"),createDesc=require("./_property-desc");module.exports=function(e,r,t){r in e?$defineProperty.f(e,r,createDesc(0,t)):e[r]=t};

},{"./_object-dp":62,"./_property-desc":73}],38:[function(require,module,exports){
var aFunction=require("./_a-function");module.exports=function(n,r,t){if(aFunction(n),void 0===r)return n;switch(t){case 1:return function(t){return n.call(r,t)};case 2:return function(t,u){return n.call(r,t,u)};case 3:return function(t,u,e){return n.call(r,t,u,e)}}return function(){return n.apply(r,arguments)}};

},{"./_a-function":31}],39:[function(require,module,exports){
module.exports=function(o){if(null==o)throw TypeError("Can't call method on  "+o);return o};

},{}],40:[function(require,module,exports){
module.exports=!require("./_fails")(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a});

},{"./_fails":44}],41:[function(require,module,exports){
var isObject=require("./_is-object"),document=require("./_global").document,is=isObject(document)&&isObject(document.createElement);module.exports=function(e){return is?document.createElement(e):{}};

},{"./_global":45,"./_is-object":53}],42:[function(require,module,exports){
module.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",");

},{}],43:[function(require,module,exports){
var global=require("./_global"),core=require("./_core"),ctx=require("./_ctx"),hide=require("./_hide"),has=require("./_has"),PROTOTYPE="prototype",$export=function(e,r,t){var o,n,p,i=e&$export.F,x=e&$export.G,c=e&$export.S,a=e&$export.P,u=e&$export.B,l=e&$export.W,$=x?core:core[r]||(core[r]={}),P=$[PROTOTYPE],s=x?global:c?global[r]:(global[r]||{})[PROTOTYPE];for(o in x&&(t=r),t)(n=!i&&s&&void 0!==s[o])&&has($,o)||(p=n?s[o]:t[o],$[o]=x&&"function"!=typeof s[o]?t[o]:u&&n?ctx(p,global):l&&s[o]==p?function(e){var r=function(r,t,o){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(r);case 2:return new e(r,t)}return new e(r,t,o)}return e.apply(this,arguments)};return r[PROTOTYPE]=e[PROTOTYPE],r}(p):a&&"function"==typeof p?ctx(Function.call,p):p,a&&(($.virtual||($.virtual={}))[o]=p,e&$export.R&&P&&!P[o]&&hide(P,o,p)))};$export.F=1,$export.G=2,$export.S=4,$export.P=8,$export.B=16,$export.W=32,$export.U=64,$export.R=128,module.exports=$export;

},{"./_core":36,"./_ctx":38,"./_global":45,"./_has":46,"./_hide":47}],44:[function(require,module,exports){
module.exports=function(r){try{return!!r()}catch(r){return!0}};

},{}],45:[function(require,module,exports){
var global=module.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=global);

},{}],46:[function(require,module,exports){
var hasOwnProperty={}.hasOwnProperty;module.exports=function(r,e){return hasOwnProperty.call(r,e)};

},{}],47:[function(require,module,exports){
var dP=require("./_object-dp"),createDesc=require("./_property-desc");module.exports=require("./_descriptors")?function(e,r,t){return dP.f(e,r,createDesc(1,t))}:function(e,r,t){return e[r]=t,e};

},{"./_descriptors":40,"./_object-dp":62,"./_property-desc":73}],48:[function(require,module,exports){
var document=require("./_global").document;module.exports=document&&document.documentElement;

},{"./_global":45}],49:[function(require,module,exports){
module.exports=!require("./_descriptors")&&!require("./_fails")(function(){return 7!=Object.defineProperty(require("./_dom-create")("div"),"a",{get:function(){return 7}}).a});

},{"./_descriptors":40,"./_dom-create":41,"./_fails":44}],50:[function(require,module,exports){
var cof=require("./_cof");module.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==cof(e)?e.split(""):Object(e)};

},{"./_cof":35}],51:[function(require,module,exports){
var Iterators=require("./_iterators"),ITERATOR=require("./_wks")("iterator"),ArrayProto=Array.prototype;module.exports=function(r){return void 0!==r&&(Iterators.Array===r||ArrayProto[ITERATOR]===r)};

},{"./_iterators":58,"./_wks":88}],52:[function(require,module,exports){
var cof=require("./_cof");module.exports=Array.isArray||function isArray(r){return"Array"==cof(r)};

},{"./_cof":35}],53:[function(require,module,exports){
module.exports=function(o){return"object"==typeof o?null!==o:"function"==typeof o};

},{}],54:[function(require,module,exports){
var anObject=require("./_an-object");module.exports=function(r,t,e,a){try{return a?t(anObject(e)[0],e[1]):t(e)}catch(t){var c=r.return;throw void 0!==c&&anObject(c.call(r)),t}};

},{"./_an-object":32}],55:[function(require,module,exports){
"use strict";var create=require("./_object-create"),descriptor=require("./_property-desc"),setToStringTag=require("./_set-to-string-tag"),IteratorPrototype={};require("./_hide")(IteratorPrototype,require("./_wks")("iterator"),function(){return this}),module.exports=function(r,t,e){r.prototype=create(IteratorPrototype,{next:descriptor(1,e)}),setToStringTag(r,t+" Iterator")};

},{"./_hide":47,"./_object-create":61,"./_property-desc":73,"./_set-to-string-tag":75,"./_wks":88}],56:[function(require,module,exports){
"use strict";var LIBRARY=require("./_library"),$export=require("./_export"),redefine=require("./_redefine"),hide=require("./_hide"),Iterators=require("./_iterators"),$iterCreate=require("./_iter-create"),setToStringTag=require("./_set-to-string-tag"),getPrototypeOf=require("./_object-gpo"),ITERATOR=require("./_wks")("iterator"),BUGGY=!([].keys&&"next"in[].keys()),FF_ITERATOR="@@iterator",KEYS="keys",VALUES="values",returnThis=function(){return this};module.exports=function(e,r,t,i,n,o,s){$iterCreate(t,r,i);var u,a,T,R=function(e){if(!BUGGY&&e in E)return E[e];switch(e){case KEYS:return function keys(){return new t(this,e)};case VALUES:return function values(){return new t(this,e)}}return function entries(){return new t(this,e)}},f=r+" Iterator",c=n==VALUES,A=!1,E=e.prototype,I=E[ITERATOR]||E[FF_ITERATOR]||n&&E[n],p=I||R(n),h=n?c?R("entries"):p:void 0,y="Array"==r&&E.entries||I;if(y&&(T=getPrototypeOf(y.call(new e)))!==Object.prototype&&T.next&&(setToStringTag(T,f,!0),LIBRARY||"function"==typeof T[ITERATOR]||hide(T,ITERATOR,returnThis)),c&&I&&I.name!==VALUES&&(A=!0,p=function values(){return I.call(this)}),LIBRARY&&!s||!BUGGY&&!A&&E[ITERATOR]||hide(E,ITERATOR,p),Iterators[r]=p,Iterators[f]=returnThis,n)if(u={values:c?p:R(VALUES),keys:o?p:R(KEYS),entries:h},s)for(a in u)a in E||redefine(E,a,u[a]);else $export($export.P+$export.F*(BUGGY||A),r,u);return u};

},{"./_export":43,"./_hide":47,"./_iter-create":55,"./_iterators":58,"./_library":59,"./_object-gpo":66,"./_redefine":74,"./_set-to-string-tag":75,"./_wks":88}],57:[function(require,module,exports){
var ITERATOR=require("./_wks")("iterator"),SAFE_CLOSING=!1;try{var riter=[7][ITERATOR]();riter.return=function(){SAFE_CLOSING=!0},Array.from(riter,function(){throw 2})}catch(r){}module.exports=function(r,t){if(!t&&!SAFE_CLOSING)return!1;var n=!1;try{var e=[7],u=e[ITERATOR]();u.next=function(){return{done:n=!0}},e[ITERATOR]=function(){return u},r(e)}catch(r){}return n};

},{"./_wks":88}],58:[function(require,module,exports){
module.exports={};

},{}],59:[function(require,module,exports){
module.exports=!0;

},{}],60:[function(require,module,exports){
"use strict";var getKeys=require("./_object-keys"),gOPS=require("./_object-gops"),pIE=require("./_object-pie"),toObject=require("./_to-object"),IObject=require("./_iobject"),$assign=Object.assign;module.exports=!$assign||require("./_fails")(function(){var e={},t={},r=Symbol(),s="abcdefghijklmnopqrst";return e[r]=7,s.split("").forEach(function(e){t[e]=e}),7!=$assign({},e)[r]||Object.keys($assign({},t)).join("")!=s})?function assign(e,t){for(var r=toObject(e),s=arguments.length,i=1,o=gOPS.f,c=pIE.f;s>i;)for(var n,a=IObject(arguments[i++]),g=o?getKeys(a).concat(o(a)):getKeys(a),b=g.length,j=0;b>j;)c.call(a,n=g[j++])&&(r[n]=a[n]);return r}:$assign;

},{"./_fails":44,"./_iobject":50,"./_object-gops":65,"./_object-keys":68,"./_object-pie":69,"./_to-object":85}],61:[function(require,module,exports){
var anObject=require("./_an-object"),dPs=require("./_object-dps"),enumBugKeys=require("./_enum-bug-keys"),IE_PROTO=require("./_shared-key")("IE_PROTO"),Empty=function(){},PROTOTYPE="prototype",createDict=function(){var e,t=require("./_dom-create")("iframe"),r=enumBugKeys.length;for(t.style.display="none",require("./_html").appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),createDict=e.F;r--;)delete createDict[PROTOTYPE][enumBugKeys[r]];return createDict()};module.exports=Object.create||function create(e,t){var r;return null!==e?(Empty[PROTOTYPE]=anObject(e),r=new Empty,Empty[PROTOTYPE]=null,r[IE_PROTO]=e):r=createDict(),void 0===t?r:dPs(r,t)};

},{"./_an-object":32,"./_dom-create":41,"./_enum-bug-keys":42,"./_html":48,"./_object-dps":63,"./_shared-key":76}],62:[function(require,module,exports){
var anObject=require("./_an-object"),IE8_DOM_DEFINE=require("./_ie8-dom-define"),toPrimitive=require("./_to-primitive"),dP=Object.defineProperty;exports.f=require("./_descriptors")?Object.defineProperty:function defineProperty(e,r,t){if(anObject(e),r=toPrimitive(r,!0),anObject(t),IE8_DOM_DEFINE)try{return dP(e,r,t)}catch(e){}if("get"in t||"set"in t)throw TypeError("Accessors not supported!");return"value"in t&&(e[r]=t.value),e};

},{"./_an-object":32,"./_descriptors":40,"./_ie8-dom-define":49,"./_to-primitive":86}],63:[function(require,module,exports){
var dP=require("./_object-dp"),anObject=require("./_an-object"),getKeys=require("./_object-keys");module.exports=require("./_descriptors")?Object.defineProperties:function defineProperties(e,r){anObject(e);for(var t,i=getKeys(r),o=i.length,n=0;o>n;)dP.f(e,t=i[n++],r[t]);return e};

},{"./_an-object":32,"./_descriptors":40,"./_object-dp":62,"./_object-keys":68}],64:[function(require,module,exports){
var pIE=require("./_object-pie"),createDesc=require("./_property-desc"),toIObject=require("./_to-iobject"),toPrimitive=require("./_to-primitive"),has=require("./_has"),IE8_DOM_DEFINE=require("./_ie8-dom-define"),gOPD=Object.getOwnPropertyDescriptor;exports.f=require("./_descriptors")?gOPD:function getOwnPropertyDescriptor(e,r){if(e=toIObject(e),r=toPrimitive(r,!0),IE8_DOM_DEFINE)try{return gOPD(e,r)}catch(e){}if(has(e,r))return createDesc(!pIE.f.call(e,r),e[r])};

},{"./_descriptors":40,"./_has":46,"./_ie8-dom-define":49,"./_object-pie":69,"./_property-desc":73,"./_to-iobject":83,"./_to-primitive":86}],65:[function(require,module,exports){
exports.f=Object.getOwnPropertySymbols;

},{}],66:[function(require,module,exports){
var has=require("./_has"),toObject=require("./_to-object"),IE_PROTO=require("./_shared-key")("IE_PROTO"),ObjectProto=Object.prototype;module.exports=Object.getPrototypeOf||function(t){return t=toObject(t),has(t,IE_PROTO)?t[IE_PROTO]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?ObjectProto:null};

},{"./_has":46,"./_shared-key":76,"./_to-object":85}],67:[function(require,module,exports){
var has=require("./_has"),toIObject=require("./_to-iobject"),arrayIndexOf=require("./_array-includes")(!1),IE_PROTO=require("./_shared-key")("IE_PROTO");module.exports=function(r,e){var a,t=toIObject(r),u=0,O=[];for(a in t)a!=IE_PROTO&&has(t,a)&&O.push(a);for(;e.length>u;)has(t,a=e[u++])&&(~arrayIndexOf(O,a)||O.push(a));return O};

},{"./_array-includes":33,"./_has":46,"./_shared-key":76,"./_to-iobject":83}],68:[function(require,module,exports){
var $keys=require("./_object-keys-internal"),enumBugKeys=require("./_enum-bug-keys");module.exports=Object.keys||function keys(e){return $keys(e,enumBugKeys)};

},{"./_enum-bug-keys":42,"./_object-keys-internal":67}],69:[function(require,module,exports){
exports.f={}.propertyIsEnumerable;

},{}],70:[function(require,module,exports){
var $export=require("./_export"),core=require("./_core"),fails=require("./_fails");module.exports=function(e,r){var o=(core.Object||{})[e]||Object[e],t={};t[e]=r(o),$export($export.S+$export.F*fails(function(){o(1)}),"Object",t)};

},{"./_core":36,"./_export":43,"./_fails":44}],71:[function(require,module,exports){
var getKeys=require("./_object-keys"),toIObject=require("./_to-iobject"),isEnum=require("./_object-pie").f;module.exports=function(e){return function(t){for(var r,o=toIObject(t),u=getKeys(o),i=u.length,n=0,c=[];i>n;)isEnum.call(o,r=u[n++])&&c.push(e?[r,o[r]]:o[r]);return c}};

},{"./_object-keys":68,"./_object-pie":69,"./_to-iobject":83}],72:[function(require,module,exports){
var $parseInt=require("./_global").parseInt,$trim=require("./_string-trim").trim,ws=require("./_string-ws"),hex=/^[-+]?0[xX]/;module.exports=8!==$parseInt(ws+"08")||22!==$parseInt(ws+"0x16")?function parseInt(r,e){var t=$trim(String(r),3);return $parseInt(t,e>>>0||(hex.test(t)?16:10))}:$parseInt;

},{"./_global":45,"./_string-trim":79,"./_string-ws":80}],73:[function(require,module,exports){
module.exports=function(e,r){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:r}};

},{}],74:[function(require,module,exports){
module.exports=require("./_hide");

},{"./_hide":47}],75:[function(require,module,exports){
var def=require("./_object-dp").f,has=require("./_has"),TAG=require("./_wks")("toStringTag");module.exports=function(e,r,o){e&&!has(e=o?e:e.prototype,TAG)&&def(e,TAG,{configurable:!0,value:r})};

},{"./_has":46,"./_object-dp":62,"./_wks":88}],76:[function(require,module,exports){
var shared=require("./_shared")("keys"),uid=require("./_uid");module.exports=function(e){return shared[e]||(shared[e]=uid(e))};

},{"./_shared":77,"./_uid":87}],77:[function(require,module,exports){
var core=require("./_core"),global=require("./_global"),SHARED="__core-js_shared__",store=global[SHARED]||(global[SHARED]={});(module.exports=function(r,e){return store[r]||(store[r]=void 0!==e?e:{})})("versions",[]).push({version:core.version,mode:require("./_library")?"pure":"global",copyright:"© 2018 Denis Pushkarev (zloirock.ru)"});

},{"./_core":36,"./_global":45,"./_library":59}],78:[function(require,module,exports){
var toInteger=require("./_to-integer"),defined=require("./_defined");module.exports=function(e){return function(r,t){var n,i,d=String(defined(r)),o=toInteger(t),u=d.length;return o<0||o>=u?e?"":void 0:(n=d.charCodeAt(o))<55296||n>56319||o+1===u||(i=d.charCodeAt(o+1))<56320||i>57343?e?d.charAt(o):n:e?d.slice(o,o+2):i-56320+(n-55296<<10)+65536}};

},{"./_defined":39,"./_to-integer":82}],79:[function(require,module,exports){
var $export=require("./_export"),defined=require("./_defined"),fails=require("./_fails"),spaces=require("./_string-ws"),space="["+spaces+"]",non="​",ltrim=RegExp("^"+space+space+"*"),rtrim=RegExp(space+space+"*$"),exporter=function(e,r,t){var i={},p=fails(function(){return!!spaces[e]()||non[e]()!=non}),n=i[e]=p?r(trim):spaces[e];t&&(i[t]=n),$export($export.P+$export.F*p,"String",i)},trim=exporter.trim=function(e,r){return e=String(defined(e)),1&r&&(e=e.replace(ltrim,"")),2&r&&(e=e.replace(rtrim,"")),e};module.exports=exporter;

},{"./_defined":39,"./_export":43,"./_fails":44,"./_string-ws":80}],80:[function(require,module,exports){
module.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff";

},{}],81:[function(require,module,exports){
var toInteger=require("./_to-integer"),max=Math.max,min=Math.min;module.exports=function(e,t){return(e=toInteger(e))<0?max(e+t,0):min(e,t)};

},{"./_to-integer":82}],82:[function(require,module,exports){
var ceil=Math.ceil,floor=Math.floor;module.exports=function(o){return isNaN(o=+o)?0:(o>0?floor:ceil)(o)};

},{}],83:[function(require,module,exports){
var IObject=require("./_iobject"),defined=require("./_defined");module.exports=function(e){return IObject(defined(e))};

},{"./_defined":39,"./_iobject":50}],84:[function(require,module,exports){
var toInteger=require("./_to-integer"),min=Math.min;module.exports=function(e){return e>0?min(toInteger(e),9007199254740991):0};

},{"./_to-integer":82}],85:[function(require,module,exports){
var defined=require("./_defined");module.exports=function(e){return Object(defined(e))};

},{"./_defined":39}],86:[function(require,module,exports){
var isObject=require("./_is-object");module.exports=function(t,e){if(!isObject(t))return t;var r,i;if(e&&"function"==typeof(r=t.toString)&&!isObject(i=r.call(t)))return i;if("function"==typeof(r=t.valueOf)&&!isObject(i=r.call(t)))return i;if(!e&&"function"==typeof(r=t.toString)&&!isObject(i=r.call(t)))return i;throw TypeError("Can't convert object to primitive value")};

},{"./_is-object":53}],87:[function(require,module,exports){
var id=0,px=Math.random();module.exports=function(o){return"Symbol(".concat(void 0===o?"":o,")_",(++id+px).toString(36))};

},{}],88:[function(require,module,exports){
var store=require("./_shared")("wks"),uid=require("./_uid"),Symbol=require("./_global").Symbol,USE_SYMBOL="function"==typeof Symbol,$exports=module.exports=function(o){return store[o]||(store[o]=USE_SYMBOL&&Symbol[o]||(USE_SYMBOL?Symbol:uid)("Symbol."+o))};$exports.store=store;

},{"./_global":45,"./_shared":77,"./_uid":87}],89:[function(require,module,exports){
var classof=require("./_classof"),ITERATOR=require("./_wks")("iterator"),Iterators=require("./_iterators");module.exports=require("./_core").getIteratorMethod=function(r){if(null!=r)return r[ITERATOR]||r["@@iterator"]||Iterators[classof(r)]};

},{"./_classof":34,"./_core":36,"./_iterators":58,"./_wks":88}],90:[function(require,module,exports){
"use strict";var ctx=require("./_ctx"),$export=require("./_export"),toObject=require("./_to-object"),call=require("./_iter-call"),isArrayIter=require("./_is-array-iter"),toLength=require("./_to-length"),createProperty=require("./_create-property"),getIterFn=require("./core.get-iterator-method");$export($export.S+$export.F*!require("./_iter-detect")(function(e){Array.from(e)}),"Array",{from:function from(e){var r,t,o,i,a=toObject(e),c="function"==typeof this?this:Array,n=arguments.length,l=n>1?arguments[1]:void 0,u=void 0!==l,y=0,p=getIterFn(a);if(u&&(l=ctx(l,n>2?arguments[2]:void 0,2)),null==p||c==Array&&isArrayIter(p))for(t=new c(r=toLength(a.length));r>y;y++)createProperty(t,y,u?l(a[y],y):a[y]);else for(i=p.call(a),t=new c;!(o=i.next()).done;y++)createProperty(t,y,u?call(i,l,[o.value,y],!0):o.value);return t.length=y,t}});

},{"./_create-property":37,"./_ctx":38,"./_export":43,"./_is-array-iter":51,"./_iter-call":54,"./_iter-detect":57,"./_to-length":84,"./_to-object":85,"./core.get-iterator-method":89}],91:[function(require,module,exports){
var $export=require("./_export");$export($export.S,"Array",{isArray:require("./_is-array")});

},{"./_export":43,"./_is-array":52}],92:[function(require,module,exports){
var $export=require("./_export");$export($export.S+$export.F,"Object",{assign:require("./_object-assign")});

},{"./_export":43,"./_object-assign":60}],93:[function(require,module,exports){
var $export=require("./_export");$export($export.S,"Object",{create:require("./_object-create")});

},{"./_export":43,"./_object-create":61}],94:[function(require,module,exports){
var $export=require("./_export");$export($export.S+$export.F*!require("./_descriptors"),"Object",{defineProperty:require("./_object-dp").f});

},{"./_descriptors":40,"./_export":43,"./_object-dp":62}],95:[function(require,module,exports){
var toIObject=require("./_to-iobject"),$getOwnPropertyDescriptor=require("./_object-gopd").f;require("./_object-sap")("getOwnPropertyDescriptor",function(){return function getOwnPropertyDescriptor(r,e){return $getOwnPropertyDescriptor(toIObject(r),e)}});

},{"./_object-gopd":64,"./_object-sap":70,"./_to-iobject":83}],96:[function(require,module,exports){
var toObject=require("./_to-object"),$keys=require("./_object-keys");require("./_object-sap")("keys",function(){return function keys(e){return $keys(toObject(e))}});

},{"./_object-keys":68,"./_object-sap":70,"./_to-object":85}],97:[function(require,module,exports){
var $export=require("./_export"),$parseInt=require("./_parse-int");$export($export.G+$export.F*(parseInt!=$parseInt),{parseInt:$parseInt});

},{"./_export":43,"./_parse-int":72}],98:[function(require,module,exports){
"use strict";var $at=require("./_string-at")(!0);require("./_iter-define")(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,i=this._t,e=this._i;return e>=i.length?{value:void 0,done:!0}:(t=$at(i,e),this._i+=t.length,{value:t,done:!1})});

},{"./_iter-define":56,"./_string-at":78}],99:[function(require,module,exports){
var $export=require("./_export"),$entries=require("./_object-to-array")(!0);$export($export.S,"Object",{entries:function entries(e){return $entries(e)}});

},{"./_export":43,"./_object-to-array":71}],100:[function(require,module,exports){
var $export=require("./_export"),$values=require("./_object-to-array")(!1);$export($export.S,"Object",{values:function values(e){return $values(e)}});

},{"./_export":43,"./_object-to-array":71}],101:[function(require,module,exports){
module.exports=function(o){if("function"!=typeof o)throw TypeError(o+" is not a function!");return o};

},{}],102:[function(require,module,exports){
var cof=require("./_cof");module.exports=function(r,e){if("number"!=typeof r&&"Number"!=cof(r))throw TypeError(e);return+r};

},{"./_cof":116}],103:[function(require,module,exports){
var UNSCOPABLES=require("./_wks")("unscopables"),ArrayProto=Array.prototype;null==ArrayProto[UNSCOPABLES]&&require("./_hide")(ArrayProto,UNSCOPABLES,{}),module.exports=function(r){ArrayProto[UNSCOPABLES][r]=!0};

},{"./_hide":140,"./_wks":224}],104:[function(require,module,exports){
module.exports=function(o,n,r,i){if(!(o instanceof n)||void 0!==i&&i in o)throw TypeError(r+": incorrect invocation!");return o};

},{}],105:[function(require,module,exports){
var isObject=require("./_is-object");module.exports=function(e){if(!isObject(e))throw TypeError(e+" is not an object!");return e};

},{"./_is-object":149}],106:[function(require,module,exports){
"use strict";var toObject=require("./_to-object"),toAbsoluteIndex=require("./_to-absolute-index"),toLength=require("./_to-length");module.exports=[].copyWithin||function copyWithin(t,e){var o=toObject(this),n=toLength(o.length),i=toAbsoluteIndex(t,n),r=toAbsoluteIndex(e,n),u=arguments.length>2?arguments[2]:void 0,l=Math.min((void 0===u?n:toAbsoluteIndex(u,n))-r,n-i),d=1;for(r<i&&i<r+l&&(d=-1,r+=l-1,i+=l-1);l-- >0;)r in o?o[i]=o[r]:delete o[i],i+=d,r+=d;return o};

},{"./_to-absolute-index":209,"./_to-length":213,"./_to-object":214}],107:[function(require,module,exports){
"use strict";var toObject=require("./_to-object"),toAbsoluteIndex=require("./_to-absolute-index"),toLength=require("./_to-length");module.exports=function fill(t){for(var e=toObject(this),o=toLength(e.length),r=arguments.length,n=toAbsoluteIndex(r>1?arguments[1]:void 0,o),i=r>2?arguments[2]:void 0,u=void 0===i?o:toAbsoluteIndex(i,o);u>n;)e[n++]=t;return e};

},{"./_to-absolute-index":209,"./_to-length":213,"./_to-object":214}],108:[function(require,module,exports){
var forOf=require("./_for-of");module.exports=function(r,f){var o=[];return forOf(r,!1,o.push,o,f),o};

},{"./_for-of":137}],109:[function(require,module,exports){
var toIObject=require("./_to-iobject"),toLength=require("./_to-length"),toAbsoluteIndex=require("./_to-absolute-index");module.exports=function(e){return function(t,o,r){var n,u=toIObject(t),i=toLength(u.length),f=toAbsoluteIndex(r,i);if(e&&o!=o){for(;i>f;)if((n=u[f++])!=n)return!0}else for(;i>f;f++)if((e||f in u)&&u[f]===o)return e||f||0;return!e&&-1}};

},{"./_to-absolute-index":209,"./_to-iobject":212,"./_to-length":213}],110:[function(require,module,exports){
var ctx=require("./_ctx"),IObject=require("./_iobject"),toObject=require("./_to-object"),toLength=require("./_to-length"),asc=require("./_array-species-create");module.exports=function(e,r){var t=1==e,c=2==e,i=3==e,n=4==e,u=6==e,o=5==e||u,s=r||asc;return function(r,a,f){for(var b,h,j=toObject(r),l=IObject(j),q=ctx(a,f,3),_=toLength(l.length),g=0,v=t?s(r,_):c?s(r,0):void 0;_>g;g++)if((o||g in l)&&(h=q(b=l[g],g,j),e))if(t)v[g]=h;else if(h)switch(e){case 3:return!0;case 5:return b;case 6:return g;case 2:v.push(b)}else if(n)return!1;return u?-1:i||n?n:v}};

},{"./_array-species-create":113,"./_ctx":123,"./_iobject":145,"./_to-length":213,"./_to-object":214}],111:[function(require,module,exports){
var aFunction=require("./_a-function"),toObject=require("./_to-object"),IObject=require("./_iobject"),toLength=require("./_to-length");module.exports=function(e,t,r,o,i){aFunction(t);var n=toObject(e),u=IObject(n),c=toLength(n.length),a=i?c-1:0,f=i?-1:1;if(r<2)for(;;){if(a in u){o=u[a],a+=f;break}if(a+=f,i?a<0:c<=a)throw TypeError("Reduce of empty array with no initial value")}for(;i?a>=0:c>a;a+=f)a in u&&(o=t(o,u[a],a,n));return o};

},{"./_a-function":101,"./_iobject":145,"./_to-length":213,"./_to-object":214}],112:[function(require,module,exports){
var isObject=require("./_is-object"),isArray=require("./_is-array"),SPECIES=require("./_wks")("species");module.exports=function(r){var e;return isArray(r)&&("function"!=typeof(e=r.constructor)||e!==Array&&!isArray(e.prototype)||(e=void 0),isObject(e)&&null===(e=e[SPECIES])&&(e=void 0)),void 0===e?Array:e};

},{"./_is-array":147,"./_is-object":149,"./_wks":224}],113:[function(require,module,exports){
var speciesConstructor=require("./_array-species-constructor");module.exports=function(r,e){return new(speciesConstructor(r))(e)};

},{"./_array-species-constructor":112}],114:[function(require,module,exports){
"use strict";var aFunction=require("./_a-function"),isObject=require("./_is-object"),invoke=require("./_invoke"),arraySlice=[].slice,factories={},construct=function(t,r,i){if(!(r in factories)){for(var n=[],e=0;e<r;e++)n[e]="a["+e+"]";factories[r]=Function("F,a","return new F("+n.join(",")+")")}return factories[r](t,i)};module.exports=Function.bind||function bind(t){var r=aFunction(this),i=arraySlice.call(arguments,1),n=function(){var e=i.concat(arraySlice.call(arguments));return this instanceof n?construct(r,e.length,e):invoke(r,e,t)};return isObject(r.prototype)&&(n.prototype=r.prototype),n};

},{"./_a-function":101,"./_invoke":144,"./_is-object":149}],115:[function(require,module,exports){
var cof=require("./_cof"),TAG=require("./_wks")("toStringTag"),ARG="Arguments"==cof(function(){return arguments}()),tryGet=function(t,e){try{return t[e]}catch(t){}};module.exports=function(t){var e,r,n;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=tryGet(e=Object(t),TAG))?r:ARG?cof(e):"Object"==(n=cof(e))&&"function"==typeof e.callee?"Arguments":n};

},{"./_cof":116,"./_wks":224}],116:[function(require,module,exports){
var toString={}.toString;module.exports=function(t){return toString.call(t).slice(8,-1)};

},{}],117:[function(require,module,exports){
"use strict";var dP=require("./_object-dp").f,create=require("./_object-create"),redefineAll=require("./_redefine-all"),ctx=require("./_ctx"),anInstance=require("./_an-instance"),forOf=require("./_for-of"),$iterDefine=require("./_iter-define"),step=require("./_iter-step"),setSpecies=require("./_set-species"),DESCRIPTORS=require("./_descriptors"),fastKey=require("./_meta").fastKey,validate=require("./_validate-collection"),SIZE=DESCRIPTORS?"_s":"size",getEntry=function(e,t){var r,i=fastKey(t);if("F"!==i)return e._i[i];for(r=e._f;r;r=r.n)if(r.k==t)return r};module.exports={getConstructor:function(e,t,r,i){var n=e(function(e,f){anInstance(e,n,t,"_i"),e._t=t,e._i=create(null),e._f=void 0,e._l=void 0,e[SIZE]=0,null!=f&&forOf(f,r,e[i],e)});return redefineAll(n.prototype,{clear:function clear(){for(var e=validate(this,t),r=e._i,i=e._f;i;i=i.n)i.r=!0,i.p&&(i.p=i.p.n=void 0),delete r[i.i];e._f=e._l=void 0,e[SIZE]=0},delete:function(e){var r=validate(this,t),i=getEntry(r,e);if(i){var n=i.n,f=i.p;delete r._i[i.i],i.r=!0,f&&(f.n=n),n&&(n.p=f),r._f==i&&(r._f=n),r._l==i&&(r._l=f),r[SIZE]--}return!!i},forEach:function forEach(e){validate(this,t);for(var r,i=ctx(e,arguments.length>1?arguments[1]:void 0,3);r=r?r.n:this._f;)for(i(r.v,r.k,this);r&&r.r;)r=r.p},has:function has(e){return!!getEntry(validate(this,t),e)}}),DESCRIPTORS&&dP(n.prototype,"size",{get:function(){return validate(this,t)[SIZE]}}),n},def:function(e,t,r){var i,n,f=getEntry(e,t);return f?f.v=r:(e._l=f={i:n=fastKey(t,!0),k:t,v:r,p:i=e._l,n:void 0,r:!1},e._f||(e._f=f),i&&(i.n=f),e[SIZE]++,"F"!==n&&(e._i[n]=f)),e},getEntry:getEntry,setStrong:function(e,t,r){$iterDefine(e,t,function(e,r){this._t=validate(e,t),this._k=r,this._l=void 0},function(){for(var e=this._k,t=this._l;t&&t.r;)t=t.p;return this._t&&(this._l=t=t?t.n:this._t._f)?step(0,"keys"==e?t.k:"values"==e?t.v:[t.k,t.v]):(this._t=void 0,step(1))},r?"entries":"values",!r,!0),setSpecies(t)}};

},{"./_an-instance":104,"./_ctx":123,"./_descriptors":127,"./_for-of":137,"./_iter-define":153,"./_iter-step":155,"./_meta":163,"./_object-create":168,"./_object-dp":169,"./_redefine-all":188,"./_set-species":195,"./_validate-collection":221}],118:[function(require,module,exports){
var classof=require("./_classof"),from=require("./_array-from-iterable");module.exports=function(r){return function toJSON(){if(classof(this)!=r)throw TypeError(r+"#toJSON isn't generic");return from(this)}};

},{"./_array-from-iterable":108,"./_classof":115}],119:[function(require,module,exports){
"use strict";var redefineAll=require("./_redefine-all"),getWeak=require("./_meta").getWeak,anObject=require("./_an-object"),isObject=require("./_is-object"),anInstance=require("./_an-instance"),forOf=require("./_for-of"),createArrayMethod=require("./_array-methods"),$has=require("./_has"),validate=require("./_validate-collection"),arrayFind=createArrayMethod(5),arrayFindIndex=createArrayMethod(6),id=0,uncaughtFrozenStore=function(e){return e._l||(e._l=new UncaughtFrozenStore)},UncaughtFrozenStore=function(){this.a=[]},findUncaughtFrozen=function(e,t){return arrayFind(e.a,function(e){return e[0]===t})};UncaughtFrozenStore.prototype={get:function(e){var t=findUncaughtFrozen(this,e);if(t)return t[1]},has:function(e){return!!findUncaughtFrozen(this,e)},set:function(e,t){var r=findUncaughtFrozen(this,e);r?r[1]=t:this.a.push([e,t])},delete:function(e){var t=arrayFindIndex(this.a,function(t){return t[0]===e});return~t&&this.a.splice(t,1),!!~t}},module.exports={getConstructor:function(e,t,r,n){var a=e(function(e,i){anInstance(e,a,t,"_i"),e._t=t,e._i=id++,e._l=void 0,null!=i&&forOf(i,r,e[n],e)});return redefineAll(a.prototype,{delete:function(e){if(!isObject(e))return!1;var r=getWeak(e);return!0===r?uncaughtFrozenStore(validate(this,t)).delete(e):r&&$has(r,this._i)&&delete r[this._i]},has:function has(e){if(!isObject(e))return!1;var r=getWeak(e);return!0===r?uncaughtFrozenStore(validate(this,t)).has(e):r&&$has(r,this._i)}}),a},def:function(e,t,r){var n=getWeak(anObject(t),!0);return!0===n?uncaughtFrozenStore(e).set(t,r):n[e._i]=r,e},ufstore:uncaughtFrozenStore};

},{"./_an-instance":104,"./_an-object":105,"./_array-methods":110,"./_for-of":137,"./_has":139,"./_is-object":149,"./_meta":163,"./_redefine-all":188,"./_validate-collection":221}],120:[function(require,module,exports){
"use strict";var global=require("./_global"),$export=require("./_export"),redefine=require("./_redefine"),redefineAll=require("./_redefine-all"),meta=require("./_meta"),forOf=require("./_for-of"),anInstance=require("./_an-instance"),isObject=require("./_is-object"),fails=require("./_fails"),$iterDetect=require("./_iter-detect"),setToStringTag=require("./_set-to-string-tag"),inheritIfRequired=require("./_inherit-if-required");module.exports=function(e,t,r,i,n,o){var a=global[e],u=a,s=n?"set":"add",f=u&&u.prototype,c={},l=function(e){var t=f[e];redefine(f,e,"delete"==e?function(e){return!(o&&!isObject(e))&&t.call(this,0===e?0:e)}:"has"==e?function has(e){return!(o&&!isObject(e))&&t.call(this,0===e?0:e)}:"get"==e?function get(e){return o&&!isObject(e)?void 0:t.call(this,0===e?0:e)}:"add"==e?function add(e){return t.call(this,0===e?0:e),this}:function set(e,r){return t.call(this,0===e?0:e,r),this})};if("function"==typeof u&&(o||f.forEach&&!fails(function(){(new u).entries().next()}))){var d=new u,h=d[s](o?{}:-0,1)!=d,q=fails(function(){d.has(1)}),g=$iterDetect(function(e){new u(e)}),p=!o&&fails(function(){for(var e=new u,t=5;t--;)e[s](t,t);return!e.has(-0)});g||((u=t(function(t,r){anInstance(t,u,e);var i=inheritIfRequired(new a,t,u);return null!=r&&forOf(r,n,i[s],i),i})).prototype=f,f.constructor=u),(q||p)&&(l("delete"),l("has"),n&&l("get")),(p||h)&&l(s),o&&f.clear&&delete f.clear}else u=i.getConstructor(t,e,n,s),redefineAll(u.prototype,r),meta.NEED=!0;return setToStringTag(u,e),c[e]=u,$export($export.G+$export.W+$export.F*(u!=a),c),o||i.setStrong(u,e,n),u};

},{"./_an-instance":104,"./_export":131,"./_fails":133,"./_for-of":137,"./_global":138,"./_inherit-if-required":143,"./_is-object":149,"./_iter-detect":154,"./_meta":163,"./_redefine":189,"./_redefine-all":188,"./_set-to-string-tag":196}],121:[function(require,module,exports){
var core=module.exports={version:"2.5.7"};"number"==typeof __e&&(__e=core);

},{}],122:[function(require,module,exports){
"use strict";var $defineProperty=require("./_object-dp"),createDesc=require("./_property-desc");module.exports=function(e,r,t){r in e?$defineProperty.f(e,r,createDesc(0,t)):e[r]=t};

},{"./_object-dp":169,"./_property-desc":187}],123:[function(require,module,exports){
var aFunction=require("./_a-function");module.exports=function(n,r,t){if(aFunction(n),void 0===r)return n;switch(t){case 1:return function(t){return n.call(r,t)};case 2:return function(t,u){return n.call(r,t,u)};case 3:return function(t,u,e){return n.call(r,t,u,e)}}return function(){return n.apply(r,arguments)}};

},{"./_a-function":101}],124:[function(require,module,exports){
"use strict";var fails=require("./_fails"),getTime=Date.prototype.getTime,$toISOString=Date.prototype.toISOString,lz=function(t){return t>9?t:"0"+t};module.exports=fails(function(){return"0385-07-25T07:06:39.999Z"!=$toISOString.call(new Date(-5e13-1))})||!fails(function(){$toISOString.call(new Date(NaN))})?function toISOString(){if(!isFinite(getTime.call(this)))throw RangeError("Invalid time value");var t=this,e=t.getUTCFullYear(),i=t.getUTCMilliseconds(),n=e<0?"-":e>9999?"+":"";return n+("00000"+Math.abs(e)).slice(n?-6:-4)+"-"+lz(t.getUTCMonth()+1)+"-"+lz(t.getUTCDate())+"T"+lz(t.getUTCHours())+":"+lz(t.getUTCMinutes())+":"+lz(t.getUTCSeconds())+"."+(i>99?i:"0"+lz(i))+"Z"}:$toISOString;

},{"./_fails":133}],125:[function(require,module,exports){
"use strict";var anObject=require("./_an-object"),toPrimitive=require("./_to-primitive"),NUMBER="number";module.exports=function(r){if("string"!==r&&r!==NUMBER&&"default"!==r)throw TypeError("Incorrect hint");return toPrimitive(anObject(this),r!=NUMBER)};

},{"./_an-object":105,"./_to-primitive":215}],126:[function(require,module,exports){
module.exports=function(o){if(null==o)throw TypeError("Can't call method on  "+o);return o};

},{}],127:[function(require,module,exports){
module.exports=!require("./_fails")(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a});

},{"./_fails":133}],128:[function(require,module,exports){
var isObject=require("./_is-object"),document=require("./_global").document,is=isObject(document)&&isObject(document.createElement);module.exports=function(e){return is?document.createElement(e):{}};

},{"./_global":138,"./_is-object":149}],129:[function(require,module,exports){
module.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",");

},{}],130:[function(require,module,exports){
var getKeys=require("./_object-keys"),gOPS=require("./_object-gops"),pIE=require("./_object-pie");module.exports=function(e){var r=getKeys(e),t=gOPS.f;if(t)for(var o,u=t(e),g=pIE.f,i=0;u.length>i;)g.call(e,o=u[i++])&&r.push(o);return r};

},{"./_object-gops":175,"./_object-keys":178,"./_object-pie":179}],131:[function(require,module,exports){
var global=require("./_global"),core=require("./_core"),hide=require("./_hide"),redefine=require("./_redefine"),ctx=require("./_ctx"),PROTOTYPE="prototype",$export=function(e,o,r){var t,x,p,l,i=e&$export.F,$=e&$export.G,c=e&$export.S,a=e&$export.P,n=e&$export.B,P=$?global:c?global[o]||(global[o]={}):(global[o]||{})[PROTOTYPE],u=$?core:core[o]||(core[o]={}),b=u[PROTOTYPE]||(u[PROTOTYPE]={});for(t in $&&(r=o),r)p=((x=!i&&P&&void 0!==P[t])?P:r)[t],l=n&&x?ctx(p,global):a&&"function"==typeof p?ctx(Function.call,p):p,P&&redefine(P,t,p,e&$export.U),u[t]!=p&&hide(u,t,l),a&&b[t]!=p&&(b[t]=p)};global.core=core,$export.F=1,$export.G=2,$export.S=4,$export.P=8,$export.B=16,$export.W=32,$export.U=64,$export.R=128,module.exports=$export;

},{"./_core":121,"./_ctx":123,"./_global":138,"./_hide":140,"./_redefine":189}],132:[function(require,module,exports){
var MATCH=require("./_wks")("match");module.exports=function(r){var t=/./;try{"/./"[r](t)}catch(c){try{return t[MATCH]=!1,!"/./"[r](t)}catch(r){}}return!0};

},{"./_wks":224}],133:[function(require,module,exports){
module.exports=function(r){try{return!!r()}catch(r){return!0}};

},{}],134:[function(require,module,exports){
"use strict";var hide=require("./_hide"),redefine=require("./_redefine"),fails=require("./_fails"),defined=require("./_defined"),wks=require("./_wks");module.exports=function(e,r,i){var n=wks(e),t=i(defined,n,""[e]),u=t[0],f=t[1];fails(function(){var r={};return r[n]=function(){return 7},7!=""[e](r)})&&(redefine(String.prototype,e,u),hide(RegExp.prototype,n,2==r?function(e,r){return f.call(e,this,r)}:function(e){return f.call(e,this)}))};

},{"./_defined":126,"./_fails":133,"./_hide":140,"./_redefine":189,"./_wks":224}],135:[function(require,module,exports){
"use strict";var anObject=require("./_an-object");module.exports=function(){var e=anObject(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t};

},{"./_an-object":105}],136:[function(require,module,exports){
"use strict";var isArray=require("./_is-array"),isObject=require("./_is-object"),toLength=require("./_to-length"),ctx=require("./_ctx"),IS_CONCAT_SPREADABLE=require("./_wks")("isConcatSpreadable");function flattenIntoArray(r,e,t,i,a,n,o,s){for(var A,c,u=a,_=0,f=!!o&&ctx(o,s,3);_<i;){if(_ in t){if(A=f?f(t[_],_,e):t[_],c=!1,isObject(A)&&(c=void 0!==(c=A[IS_CONCAT_SPREADABLE])?!!c:isArray(A)),c&&n>0)u=flattenIntoArray(r,e,A,toLength(A.length),u,n-1)-1;else{if(u>=9007199254740991)throw TypeError();r[u]=A}u++}_++}return u}module.exports=flattenIntoArray;

},{"./_ctx":123,"./_is-array":147,"./_is-object":149,"./_to-length":213,"./_wks":224}],137:[function(require,module,exports){
var ctx=require("./_ctx"),call=require("./_iter-call"),isArrayIter=require("./_is-array-iter"),anObject=require("./_an-object"),toLength=require("./_to-length"),getIterFn=require("./core.get-iterator-method"),BREAK={},RETURN={},exports=module.exports=function(e,r,t,o,i){var n,a,R,c,l=i?function(){return e}:getIterFn(e),u=ctx(t,o,r?2:1),E=0;if("function"!=typeof l)throw TypeError(e+" is not iterable!");if(isArrayIter(l)){for(n=toLength(e.length);n>E;E++)if((c=r?u(anObject(a=e[E])[0],a[1]):u(e[E]))===BREAK||c===RETURN)return c}else for(R=l.call(e);!(a=R.next()).done;)if((c=call(R,u,a.value,r))===BREAK||c===RETURN)return c};exports.BREAK=BREAK,exports.RETURN=RETURN;

},{"./_an-object":105,"./_ctx":123,"./_is-array-iter":146,"./_iter-call":151,"./_to-length":213,"./core.get-iterator-method":225}],138:[function(require,module,exports){
var global=module.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=global);

},{}],139:[function(require,module,exports){
var hasOwnProperty={}.hasOwnProperty;module.exports=function(r,e){return hasOwnProperty.call(r,e)};

},{}],140:[function(require,module,exports){
var dP=require("./_object-dp"),createDesc=require("./_property-desc");module.exports=require("./_descriptors")?function(e,r,t){return dP.f(e,r,createDesc(1,t))}:function(e,r,t){return e[r]=t,e};

},{"./_descriptors":127,"./_object-dp":169,"./_property-desc":187}],141:[function(require,module,exports){
var document=require("./_global").document;module.exports=document&&document.documentElement;

},{"./_global":138}],142:[function(require,module,exports){
module.exports=!require("./_descriptors")&&!require("./_fails")(function(){return 7!=Object.defineProperty(require("./_dom-create")("div"),"a",{get:function(){return 7}}).a});

},{"./_descriptors":127,"./_dom-create":128,"./_fails":133}],143:[function(require,module,exports){
var isObject=require("./_is-object"),setPrototypeOf=require("./_set-proto").set;module.exports=function(t,e,o){var r,p=e.constructor;return p!==o&&"function"==typeof p&&(r=p.prototype)!==o.prototype&&isObject(r)&&setPrototypeOf&&setPrototypeOf(t,r),t};

},{"./_is-object":149,"./_set-proto":194}],144:[function(require,module,exports){
module.exports=function(e,r,l){var a=void 0===l;switch(r.length){case 0:return a?e():e.call(l);case 1:return a?e(r[0]):e.call(l,r[0]);case 2:return a?e(r[0],r[1]):e.call(l,r[0],r[1]);case 3:return a?e(r[0],r[1],r[2]):e.call(l,r[0],r[1],r[2]);case 4:return a?e(r[0],r[1],r[2],r[3]):e.call(l,r[0],r[1],r[2],r[3])}return e.apply(l,r)};

},{}],145:[function(require,module,exports){
var cof=require("./_cof");module.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==cof(e)?e.split(""):Object(e)};

},{"./_cof":116}],146:[function(require,module,exports){
var Iterators=require("./_iterators"),ITERATOR=require("./_wks")("iterator"),ArrayProto=Array.prototype;module.exports=function(r){return void 0!==r&&(Iterators.Array===r||ArrayProto[ITERATOR]===r)};

},{"./_iterators":156,"./_wks":224}],147:[function(require,module,exports){
var cof=require("./_cof");module.exports=Array.isArray||function isArray(r){return"Array"==cof(r)};

},{"./_cof":116}],148:[function(require,module,exports){
var isObject=require("./_is-object"),floor=Math.floor;module.exports=function isInteger(e){return!isObject(e)&&isFinite(e)&&floor(e)===e};

},{"./_is-object":149}],149:[function(require,module,exports){
module.exports=function(o){return"object"==typeof o?null!==o:"function"==typeof o};

},{}],150:[function(require,module,exports){
var isObject=require("./_is-object"),cof=require("./_cof"),MATCH=require("./_wks")("match");module.exports=function(e){var r;return isObject(e)&&(void 0!==(r=e[MATCH])?!!r:"RegExp"==cof(e))};

},{"./_cof":116,"./_is-object":149,"./_wks":224}],151:[function(require,module,exports){
var anObject=require("./_an-object");module.exports=function(r,t,e,a){try{return a?t(anObject(e)[0],e[1]):t(e)}catch(t){var c=r.return;throw void 0!==c&&anObject(c.call(r)),t}};

},{"./_an-object":105}],152:[function(require,module,exports){
"use strict";var create=require("./_object-create"),descriptor=require("./_property-desc"),setToStringTag=require("./_set-to-string-tag"),IteratorPrototype={};require("./_hide")(IteratorPrototype,require("./_wks")("iterator"),function(){return this}),module.exports=function(r,t,e){r.prototype=create(IteratorPrototype,{next:descriptor(1,e)}),setToStringTag(r,t+" Iterator")};

},{"./_hide":140,"./_object-create":168,"./_property-desc":187,"./_set-to-string-tag":196,"./_wks":224}],153:[function(require,module,exports){
"use strict";var LIBRARY=require("./_library"),$export=require("./_export"),redefine=require("./_redefine"),hide=require("./_hide"),Iterators=require("./_iterators"),$iterCreate=require("./_iter-create"),setToStringTag=require("./_set-to-string-tag"),getPrototypeOf=require("./_object-gpo"),ITERATOR=require("./_wks")("iterator"),BUGGY=!([].keys&&"next"in[].keys()),FF_ITERATOR="@@iterator",KEYS="keys",VALUES="values",returnThis=function(){return this};module.exports=function(e,r,t,i,n,o,s){$iterCreate(t,r,i);var u,a,T,R=function(e){if(!BUGGY&&e in E)return E[e];switch(e){case KEYS:return function keys(){return new t(this,e)};case VALUES:return function values(){return new t(this,e)}}return function entries(){return new t(this,e)}},f=r+" Iterator",c=n==VALUES,A=!1,E=e.prototype,I=E[ITERATOR]||E[FF_ITERATOR]||n&&E[n],p=I||R(n),h=n?c?R("entries"):p:void 0,y="Array"==r&&E.entries||I;if(y&&(T=getPrototypeOf(y.call(new e)))!==Object.prototype&&T.next&&(setToStringTag(T,f,!0),LIBRARY||"function"==typeof T[ITERATOR]||hide(T,ITERATOR,returnThis)),c&&I&&I.name!==VALUES&&(A=!0,p=function values(){return I.call(this)}),LIBRARY&&!s||!BUGGY&&!A&&E[ITERATOR]||hide(E,ITERATOR,p),Iterators[r]=p,Iterators[f]=returnThis,n)if(u={values:c?p:R(VALUES),keys:o?p:R(KEYS),entries:h},s)for(a in u)a in E||redefine(E,a,u[a]);else $export($export.P+$export.F*(BUGGY||A),r,u);return u};

},{"./_export":131,"./_hide":140,"./_iter-create":152,"./_iterators":156,"./_library":157,"./_object-gpo":176,"./_redefine":189,"./_set-to-string-tag":196,"./_wks":224}],154:[function(require,module,exports){
var ITERATOR=require("./_wks")("iterator"),SAFE_CLOSING=!1;try{var riter=[7][ITERATOR]();riter.return=function(){SAFE_CLOSING=!0},Array.from(riter,function(){throw 2})}catch(r){}module.exports=function(r,t){if(!t&&!SAFE_CLOSING)return!1;var n=!1;try{var e=[7],u=e[ITERATOR]();u.next=function(){return{done:n=!0}},e[ITERATOR]=function(){return u},r(e)}catch(r){}return n};

},{"./_wks":224}],155:[function(require,module,exports){
module.exports=function(e,n){return{value:n,done:!!e}};

},{}],156:[function(require,module,exports){
module.exports={};

},{}],157:[function(require,module,exports){
module.exports=!1;

},{}],158:[function(require,module,exports){
var $expm1=Math.expm1;module.exports=!$expm1||$expm1(10)>22025.465794806718||$expm1(10)<22025.465794806718||-2e-17!=$expm1(-2e-17)?function expm1(e){return 0==(e=+e)?e:e>-1e-6&&e<1e-6?e+e*e/2:Math.exp(e)-1}:$expm1;

},{}],159:[function(require,module,exports){
var sign=require("./_math-sign"),pow=Math.pow,EPSILON=pow(2,-52),EPSILON32=pow(2,-23),MAX32=pow(2,127)*(2-EPSILON32),MIN32=pow(2,-126),roundTiesToEven=function(o){return o+1/EPSILON-1/EPSILON};module.exports=Math.fround||function fround(o){var n,r,I=Math.abs(o),N=sign(o);return I<MIN32?N*roundTiesToEven(I/MIN32/EPSILON32)*MIN32*EPSILON32:(r=(n=(1+EPSILON32/EPSILON)*I)-(n-I))>MAX32||r!=r?N*(1/0):N*r};

},{"./_math-sign":162}],160:[function(require,module,exports){
module.exports=Math.log1p||function log1p(o){return(o=+o)>-1e-8&&o<1e-8?o-o*o/2:Math.log(1+o)};

},{}],161:[function(require,module,exports){
module.exports=Math.scale||function scale(e,t,a,l,n){return 0===arguments.length||e!=e||t!=t||a!=a||l!=l||n!=n?NaN:e===1/0||e===-1/0?e:(e-t)*(n-l)/(a-t)+l};

},{}],162:[function(require,module,exports){
module.exports=Math.sign||function sign(n){return 0==(n=+n)||n!=n?n:n<0?-1:1};

},{}],163:[function(require,module,exports){
var META=require("./_uid")("meta"),isObject=require("./_is-object"),has=require("./_has"),setDesc=require("./_object-dp").f,id=0,isExtensible=Object.isExtensible||function(){return!0},FREEZE=!require("./_fails")(function(){return isExtensible(Object.preventExtensions({}))}),setMeta=function(e){setDesc(e,META,{value:{i:"O"+ ++id,w:{}}})},fastKey=function(e,t){if(!isObject(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!has(e,META)){if(!isExtensible(e))return"F";if(!t)return"E";setMeta(e)}return e[META].i},getWeak=function(e,t){if(!has(e,META)){if(!isExtensible(e))return!0;if(!t)return!1;setMeta(e)}return e[META].w},onFreeze=function(e){return FREEZE&&meta.NEED&&isExtensible(e)&&!has(e,META)&&setMeta(e),e},meta=module.exports={KEY:META,NEED:!1,fastKey:fastKey,getWeak:getWeak,onFreeze:onFreeze};

},{"./_fails":133,"./_has":139,"./_is-object":149,"./_object-dp":169,"./_uid":219}],164:[function(require,module,exports){
var Map=require("./es6.map"),$export=require("./_export"),shared=require("./_shared")("metadata"),store=shared.store||(shared.store=new(require("./es6.weak-map"))),getOrCreateMetadataMap=function(e,a,t){var r=store.get(e);if(!r){if(!t)return;store.set(e,r=new Map)}var n=r.get(a);if(!n){if(!t)return;r.set(a,n=new Map)}return n},ordinaryHasOwnMetadata=function(e,a,t){var r=getOrCreateMetadataMap(a,t,!1);return void 0!==r&&r.has(e)},ordinaryGetOwnMetadata=function(e,a,t){var r=getOrCreateMetadataMap(a,t,!1);return void 0===r?void 0:r.get(e)},ordinaryDefineOwnMetadata=function(e,a,t,r){getOrCreateMetadataMap(t,r,!0).set(e,a)},ordinaryOwnMetadataKeys=function(e,a){var t=getOrCreateMetadataMap(e,a,!1),r=[];return t&&t.forEach(function(e,a){r.push(a)}),r},toMetaKey=function(e){return void 0===e||"symbol"==typeof e?e:String(e)},exp=function(e){$export($export.S,"Reflect",e)};module.exports={store:store,map:getOrCreateMetadataMap,has:ordinaryHasOwnMetadata,get:ordinaryGetOwnMetadata,set:ordinaryDefineOwnMetadata,keys:ordinaryOwnMetadataKeys,key:toMetaKey,exp:exp};

},{"./_export":131,"./_shared":198,"./es6.map":256,"./es6.weak-map":362}],165:[function(require,module,exports){
var global=require("./_global"),macrotask=require("./_task").set,Observer=global.MutationObserver||global.WebKitMutationObserver,process=global.process,Promise=global.Promise,isNode="process"==require("./_cof")(process);module.exports=function(){var e,o,r,a=function(){var a,s;for(isNode&&(a=process.domain)&&a.exit();e;){s=e.fn,e=e.next;try{s()}catch(a){throw e?r():o=void 0,a}}o=void 0,a&&a.enter()};if(isNode)r=function(){process.nextTick(a)};else if(!Observer||global.navigator&&global.navigator.standalone)if(Promise&&Promise.resolve){var s=Promise.resolve(void 0);r=function(){s.then(a)}}else r=function(){macrotask.call(global,a)};else{var t=!0,i=document.createTextNode("");new Observer(a).observe(i,{characterData:!0}),r=function(){i.data=t=!t}}return function(a){var s={fn:a,next:void 0};o&&(o.next=s),e||(e=s,r()),o=s}};

},{"./_cof":116,"./_global":138,"./_task":208}],166:[function(require,module,exports){
"use strict";var aFunction=require("./_a-function");function PromiseCapability(i){var o,r;this.promise=new i(function(i,t){if(void 0!==o||void 0!==r)throw TypeError("Bad Promise constructor");o=i,r=t}),this.resolve=aFunction(o),this.reject=aFunction(r)}module.exports.f=function(i){return new PromiseCapability(i)};

},{"./_a-function":101}],167:[function(require,module,exports){
"use strict";var getKeys=require("./_object-keys"),gOPS=require("./_object-gops"),pIE=require("./_object-pie"),toObject=require("./_to-object"),IObject=require("./_iobject"),$assign=Object.assign;module.exports=!$assign||require("./_fails")(function(){var e={},t={},r=Symbol(),s="abcdefghijklmnopqrst";return e[r]=7,s.split("").forEach(function(e){t[e]=e}),7!=$assign({},e)[r]||Object.keys($assign({},t)).join("")!=s})?function assign(e,t){for(var r=toObject(e),s=arguments.length,i=1,o=gOPS.f,c=pIE.f;s>i;)for(var n,a=IObject(arguments[i++]),g=o?getKeys(a).concat(o(a)):getKeys(a),b=g.length,j=0;b>j;)c.call(a,n=g[j++])&&(r[n]=a[n]);return r}:$assign;

},{"./_fails":133,"./_iobject":145,"./_object-gops":175,"./_object-keys":178,"./_object-pie":179,"./_to-object":214}],168:[function(require,module,exports){
var anObject=require("./_an-object"),dPs=require("./_object-dps"),enumBugKeys=require("./_enum-bug-keys"),IE_PROTO=require("./_shared-key")("IE_PROTO"),Empty=function(){},PROTOTYPE="prototype",createDict=function(){var e,t=require("./_dom-create")("iframe"),r=enumBugKeys.length;for(t.style.display="none",require("./_html").appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),createDict=e.F;r--;)delete createDict[PROTOTYPE][enumBugKeys[r]];return createDict()};module.exports=Object.create||function create(e,t){var r;return null!==e?(Empty[PROTOTYPE]=anObject(e),r=new Empty,Empty[PROTOTYPE]=null,r[IE_PROTO]=e):r=createDict(),void 0===t?r:dPs(r,t)};

},{"./_an-object":105,"./_dom-create":128,"./_enum-bug-keys":129,"./_html":141,"./_object-dps":170,"./_shared-key":197}],169:[function(require,module,exports){
var anObject=require("./_an-object"),IE8_DOM_DEFINE=require("./_ie8-dom-define"),toPrimitive=require("./_to-primitive"),dP=Object.defineProperty;exports.f=require("./_descriptors")?Object.defineProperty:function defineProperty(e,r,t){if(anObject(e),r=toPrimitive(r,!0),anObject(t),IE8_DOM_DEFINE)try{return dP(e,r,t)}catch(e){}if("get"in t||"set"in t)throw TypeError("Accessors not supported!");return"value"in t&&(e[r]=t.value),e};

},{"./_an-object":105,"./_descriptors":127,"./_ie8-dom-define":142,"./_to-primitive":215}],170:[function(require,module,exports){
var dP=require("./_object-dp"),anObject=require("./_an-object"),getKeys=require("./_object-keys");module.exports=require("./_descriptors")?Object.defineProperties:function defineProperties(e,r){anObject(e);for(var t,i=getKeys(r),o=i.length,n=0;o>n;)dP.f(e,t=i[n++],r[t]);return e};

},{"./_an-object":105,"./_descriptors":127,"./_object-dp":169,"./_object-keys":178}],171:[function(require,module,exports){
"use strict";module.exports=require("./_library")||!require("./_fails")(function(){var e=Math.random();__defineSetter__.call(null,e,function(){}),delete require("./_global")[e]});

},{"./_fails":133,"./_global":138,"./_library":157}],172:[function(require,module,exports){
var pIE=require("./_object-pie"),createDesc=require("./_property-desc"),toIObject=require("./_to-iobject"),toPrimitive=require("./_to-primitive"),has=require("./_has"),IE8_DOM_DEFINE=require("./_ie8-dom-define"),gOPD=Object.getOwnPropertyDescriptor;exports.f=require("./_descriptors")?gOPD:function getOwnPropertyDescriptor(e,r){if(e=toIObject(e),r=toPrimitive(r,!0),IE8_DOM_DEFINE)try{return gOPD(e,r)}catch(e){}if(has(e,r))return createDesc(!pIE.f.call(e,r),e[r])};

},{"./_descriptors":127,"./_has":139,"./_ie8-dom-define":142,"./_object-pie":179,"./_property-desc":187,"./_to-iobject":212,"./_to-primitive":215}],173:[function(require,module,exports){
var toIObject=require("./_to-iobject"),gOPN=require("./_object-gopn").f,toString={}.toString,windowNames="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],getWindowNames=function(e){try{return gOPN(e)}catch(e){return windowNames.slice()}};module.exports.f=function getOwnPropertyNames(e){return windowNames&&"[object Window]"==toString.call(e)?getWindowNames(e):gOPN(toIObject(e))};

},{"./_object-gopn":174,"./_to-iobject":212}],174:[function(require,module,exports){
var $keys=require("./_object-keys-internal"),hiddenKeys=require("./_enum-bug-keys").concat("length","prototype");exports.f=Object.getOwnPropertyNames||function getOwnPropertyNames(e){return $keys(e,hiddenKeys)};

},{"./_enum-bug-keys":129,"./_object-keys-internal":177}],175:[function(require,module,exports){
exports.f=Object.getOwnPropertySymbols;

},{}],176:[function(require,module,exports){
var has=require("./_has"),toObject=require("./_to-object"),IE_PROTO=require("./_shared-key")("IE_PROTO"),ObjectProto=Object.prototype;module.exports=Object.getPrototypeOf||function(t){return t=toObject(t),has(t,IE_PROTO)?t[IE_PROTO]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?ObjectProto:null};

},{"./_has":139,"./_shared-key":197,"./_to-object":214}],177:[function(require,module,exports){
var has=require("./_has"),toIObject=require("./_to-iobject"),arrayIndexOf=require("./_array-includes")(!1),IE_PROTO=require("./_shared-key")("IE_PROTO");module.exports=function(r,e){var a,t=toIObject(r),u=0,O=[];for(a in t)a!=IE_PROTO&&has(t,a)&&O.push(a);for(;e.length>u;)has(t,a=e[u++])&&(~arrayIndexOf(O,a)||O.push(a));return O};

},{"./_array-includes":109,"./_has":139,"./_shared-key":197,"./_to-iobject":212}],178:[function(require,module,exports){
var $keys=require("./_object-keys-internal"),enumBugKeys=require("./_enum-bug-keys");module.exports=Object.keys||function keys(e){return $keys(e,enumBugKeys)};

},{"./_enum-bug-keys":129,"./_object-keys-internal":177}],179:[function(require,module,exports){
exports.f={}.propertyIsEnumerable;

},{}],180:[function(require,module,exports){
var $export=require("./_export"),core=require("./_core"),fails=require("./_fails");module.exports=function(e,r){var o=(core.Object||{})[e]||Object[e],t={};t[e]=r(o),$export($export.S+$export.F*fails(function(){o(1)}),"Object",t)};

},{"./_core":121,"./_export":131,"./_fails":133}],181:[function(require,module,exports){
var getKeys=require("./_object-keys"),toIObject=require("./_to-iobject"),isEnum=require("./_object-pie").f;module.exports=function(e){return function(t){for(var r,o=toIObject(t),u=getKeys(o),i=u.length,n=0,c=[];i>n;)isEnum.call(o,r=u[n++])&&c.push(e?[r,o[r]]:o[r]);return c}};

},{"./_object-keys":178,"./_object-pie":179,"./_to-iobject":212}],182:[function(require,module,exports){
var gOPN=require("./_object-gopn"),gOPS=require("./_object-gops"),anObject=require("./_an-object"),Reflect=require("./_global").Reflect;module.exports=Reflect&&Reflect.ownKeys||function ownKeys(e){var r=gOPN.f(anObject(e)),t=gOPS.f;return t?r.concat(t(e)):r};

},{"./_an-object":105,"./_global":138,"./_object-gopn":174,"./_object-gops":175}],183:[function(require,module,exports){
var $parseFloat=require("./_global").parseFloat,$trim=require("./_string-trim").trim;module.exports=1/$parseFloat(require("./_string-ws")+"-0")!=-1/0?function parseFloat(r){var t=$trim(String(r),3),a=$parseFloat(t);return 0===a&&"-"==t.charAt(0)?-0:a}:$parseFloat;

},{"./_global":138,"./_string-trim":206,"./_string-ws":207}],184:[function(require,module,exports){
var $parseInt=require("./_global").parseInt,$trim=require("./_string-trim").trim,ws=require("./_string-ws"),hex=/^[-+]?0[xX]/;module.exports=8!==$parseInt(ws+"08")||22!==$parseInt(ws+"0x16")?function parseInt(r,e){var t=$trim(String(r),3);return $parseInt(t,e>>>0||(hex.test(t)?16:10))}:$parseInt;

},{"./_global":138,"./_string-trim":206,"./_string-ws":207}],185:[function(require,module,exports){
module.exports=function(e){try{return{e:!1,v:e()}}catch(e){return{e:!0,v:e}}};

},{}],186:[function(require,module,exports){
var anObject=require("./_an-object"),isObject=require("./_is-object"),newPromiseCapability=require("./_new-promise-capability");module.exports=function(e,r){if(anObject(e),isObject(r)&&r.constructor===e)return r;var i=newPromiseCapability.f(e);return(0,i.resolve)(r),i.promise};

},{"./_an-object":105,"./_is-object":149,"./_new-promise-capability":166}],187:[function(require,module,exports){
module.exports=function(e,r){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:r}};

},{}],188:[function(require,module,exports){
var redefine=require("./_redefine");module.exports=function(e,r,n){for(var i in r)redefine(e,i,r[i],n);return e};

},{"./_redefine":189}],189:[function(require,module,exports){
var global=require("./_global"),hide=require("./_hide"),has=require("./_has"),SRC=require("./_uid")("src"),TO_STRING="toString",$toString=Function[TO_STRING],TPL=(""+$toString).split(TO_STRING);require("./_core").inspectSource=function(t){return $toString.call(t)},(module.exports=function(t,i,e,r){var n="function"==typeof e;n&&(has(e,"name")||hide(e,"name",i)),t[i]!==e&&(n&&(has(e,SRC)||hide(e,SRC,t[i]?""+t[i]:TPL.join(String(i)))),t===global?t[i]=e:r?t[i]?t[i]=e:hide(t,i,e):(delete t[i],hide(t,i,e)))})(Function.prototype,TO_STRING,function toString(){return"function"==typeof this&&this[SRC]||$toString.call(this)});

},{"./_core":121,"./_global":138,"./_has":139,"./_hide":140,"./_uid":219}],190:[function(require,module,exports){
module.exports=function(n,r){var t=r===Object(r)?function(n){return r[n]}:r;return function(r){return String(r).replace(n,t)}};

},{}],191:[function(require,module,exports){
module.exports=Object.is||function is(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t};

},{}],192:[function(require,module,exports){
"use strict";var $export=require("./_export"),aFunction=require("./_a-function"),ctx=require("./_ctx"),forOf=require("./_for-of");module.exports=function(r){$export($export.S,r,{from:function from(r){var o,t,e,n,u=arguments[1];return aFunction(this),(o=void 0!==u)&&aFunction(u),null==r?new this:(t=[],o?(e=0,n=ctx(u,arguments[2],2),forOf(r,!1,function(r){t.push(n(r,e++))})):forOf(r,!1,t.push,t),new this(t))}})};

},{"./_a-function":101,"./_ctx":123,"./_export":131,"./_for-of":137}],193:[function(require,module,exports){
"use strict";var $export=require("./_export");module.exports=function(r){$export($export.S,r,{of:function of(){for(var r=arguments.length,e=new Array(r);r--;)e[r]=arguments[r];return new this(e)}})};

},{"./_export":131}],194:[function(require,module,exports){
var isObject=require("./_is-object"),anObject=require("./_an-object"),check=function(t,e){if(anObject(t),!isObject(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};module.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,o){try{(o=require("./_ctx")(Function.call,require("./_object-gopd").f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function setPrototypeOf(t,r){return check(t,r),e?t.__proto__=r:o(t,r),t}}({},!1):void 0),check:check};

},{"./_an-object":105,"./_ctx":123,"./_is-object":149,"./_object-gopd":172}],195:[function(require,module,exports){
"use strict";var global=require("./_global"),dP=require("./_object-dp"),DESCRIPTORS=require("./_descriptors"),SPECIES=require("./_wks")("species");module.exports=function(e){var r=global[e];DESCRIPTORS&&r&&!r[SPECIES]&&dP.f(r,SPECIES,{configurable:!0,get:function(){return this}})};

},{"./_descriptors":127,"./_global":138,"./_object-dp":169,"./_wks":224}],196:[function(require,module,exports){
var def=require("./_object-dp").f,has=require("./_has"),TAG=require("./_wks")("toStringTag");module.exports=function(e,r,o){e&&!has(e=o?e:e.prototype,TAG)&&def(e,TAG,{configurable:!0,value:r})};

},{"./_has":139,"./_object-dp":169,"./_wks":224}],197:[function(require,module,exports){
var shared=require("./_shared")("keys"),uid=require("./_uid");module.exports=function(e){return shared[e]||(shared[e]=uid(e))};

},{"./_shared":198,"./_uid":219}],198:[function(require,module,exports){
var core=require("./_core"),global=require("./_global"),SHARED="__core-js_shared__",store=global[SHARED]||(global[SHARED]={});(module.exports=function(r,e){return store[r]||(store[r]=void 0!==e?e:{})})("versions",[]).push({version:core.version,mode:require("./_library")?"pure":"global",copyright:"© 2018 Denis Pushkarev (zloirock.ru)"});

},{"./_core":121,"./_global":138,"./_library":157}],199:[function(require,module,exports){
var anObject=require("./_an-object"),aFunction=require("./_a-function"),SPECIES=require("./_wks")("species");module.exports=function(e,n){var r,t=anObject(e).constructor;return void 0===t||null==(r=anObject(t)[SPECIES])?n:aFunction(r)};

},{"./_a-function":101,"./_an-object":105,"./_wks":224}],200:[function(require,module,exports){
"use strict";var fails=require("./_fails");module.exports=function(l,n){return!!l&&fails(function(){n?l.call(null,function(){},1):l.call(null)})};

},{"./_fails":133}],201:[function(require,module,exports){
var toInteger=require("./_to-integer"),defined=require("./_defined");module.exports=function(e){return function(r,t){var n,i,d=String(defined(r)),o=toInteger(t),u=d.length;return o<0||o>=u?e?"":void 0:(n=d.charCodeAt(o))<55296||n>56319||o+1===u||(i=d.charCodeAt(o+1))<56320||i>57343?e?d.charAt(o):n:e?d.slice(o,o+2):i-56320+(n-55296<<10)+65536}};

},{"./_defined":126,"./_to-integer":211}],202:[function(require,module,exports){
var isRegExp=require("./_is-regexp"),defined=require("./_defined");module.exports=function(e,r,i){if(isRegExp(r))throw TypeError("String#"+i+" doesn't accept regex!");return String(defined(e))};

},{"./_defined":126,"./_is-regexp":150}],203:[function(require,module,exports){
var $export=require("./_export"),fails=require("./_fails"),defined=require("./_defined"),quot=/"/g,createHTML=function(e,r,t,i){var n=String(defined(e)),o="<"+r;return""!==t&&(o+=" "+t+'="'+String(i).replace(quot,"&quot;")+'"'),o+">"+n+"</"+r+">"};module.exports=function(e,r){var t={};t[e]=r(createHTML),$export($export.P+$export.F*fails(function(){var r=""[e]('"');return r!==r.toLowerCase()||r.split('"').length>3}),"String",t)};

},{"./_defined":126,"./_export":131,"./_fails":133}],204:[function(require,module,exports){
var toLength=require("./_to-length"),repeat=require("./_string-repeat"),defined=require("./_defined");module.exports=function(e,r,t,n){var i=String(defined(e)),g=i.length,l=void 0===t?" ":String(t),a=toLength(r);if(a<=g||""==l)return i;var d=a-g,h=repeat.call(l,Math.ceil(d/l.length));return h.length>d&&(h=h.slice(0,d)),n?h+i:i+h};

},{"./_defined":126,"./_string-repeat":205,"./_to-length":213}],205:[function(require,module,exports){
"use strict";var toInteger=require("./_to-integer"),defined=require("./_defined");module.exports=function repeat(e){var r=String(defined(this)),t="",n=toInteger(e);if(n<0||n==1/0)throw RangeError("Count can't be negative");for(;n>0;(n>>>=1)&&(r+=r))1&n&&(t+=r);return t};

},{"./_defined":126,"./_to-integer":211}],206:[function(require,module,exports){
var $export=require("./_export"),defined=require("./_defined"),fails=require("./_fails"),spaces=require("./_string-ws"),space="["+spaces+"]",non="​",ltrim=RegExp("^"+space+space+"*"),rtrim=RegExp(space+space+"*$"),exporter=function(e,r,t){var i={},p=fails(function(){return!!spaces[e]()||non[e]()!=non}),n=i[e]=p?r(trim):spaces[e];t&&(i[t]=n),$export($export.P+$export.F*p,"String",i)},trim=exporter.trim=function(e,r){return e=String(defined(e)),1&r&&(e=e.replace(ltrim,"")),2&r&&(e=e.replace(rtrim,"")),e};module.exports=exporter;

},{"./_defined":126,"./_export":131,"./_fails":133,"./_string-ws":207}],207:[function(require,module,exports){
module.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff";

},{}],208:[function(require,module,exports){
var defer,channel,port,ctx=require("./_ctx"),invoke=require("./_invoke"),html=require("./_html"),cel=require("./_dom-create"),global=require("./_global"),process=global.process,setTask=global.setImmediate,clearTask=global.clearImmediate,MessageChannel=global.MessageChannel,Dispatch=global.Dispatch,counter=0,queue={},ONREADYSTATECHANGE="onreadystatechange",run=function(){var e=+this;if(queue.hasOwnProperty(e)){var t=queue[e];delete queue[e],t()}},listener=function(e){run.call(e.data)};setTask&&clearTask||(setTask=function setImmediate(e){for(var t=[],n=1;arguments.length>n;)t.push(arguments[n++]);return queue[++counter]=function(){invoke("function"==typeof e?e:Function(e),t)},defer(counter),counter},clearTask=function clearImmediate(e){delete queue[e]},"process"==require("./_cof")(process)?defer=function(e){process.nextTick(ctx(run,e,1))}:Dispatch&&Dispatch.now?defer=function(e){Dispatch.now(ctx(run,e,1))}:MessageChannel?(port=(channel=new MessageChannel).port2,channel.port1.onmessage=listener,defer=ctx(port.postMessage,port,1)):global.addEventListener&&"function"==typeof postMessage&&!global.importScripts?(defer=function(e){global.postMessage(e+"","*")},global.addEventListener("message",listener,!1)):defer=ONREADYSTATECHANGE in cel("script")?function(e){html.appendChild(cel("script"))[ONREADYSTATECHANGE]=function(){html.removeChild(this),run.call(e)}}:function(e){setTimeout(ctx(run,e,1),0)}),module.exports={set:setTask,clear:clearTask};

},{"./_cof":116,"./_ctx":123,"./_dom-create":128,"./_global":138,"./_html":141,"./_invoke":144}],209:[function(require,module,exports){
var toInteger=require("./_to-integer"),max=Math.max,min=Math.min;module.exports=function(e,t){return(e=toInteger(e))<0?max(e+t,0):min(e,t)};

},{"./_to-integer":211}],210:[function(require,module,exports){
var toInteger=require("./_to-integer"),toLength=require("./_to-length");module.exports=function(e){if(void 0===e)return 0;var r=toInteger(e),t=toLength(r);if(r!==t)throw RangeError("Wrong length!");return t};

},{"./_to-integer":211,"./_to-length":213}],211:[function(require,module,exports){
var ceil=Math.ceil,floor=Math.floor;module.exports=function(o){return isNaN(o=+o)?0:(o>0?floor:ceil)(o)};

},{}],212:[function(require,module,exports){
var IObject=require("./_iobject"),defined=require("./_defined");module.exports=function(e){return IObject(defined(e))};

},{"./_defined":126,"./_iobject":145}],213:[function(require,module,exports){
var toInteger=require("./_to-integer"),min=Math.min;module.exports=function(e){return e>0?min(toInteger(e),9007199254740991):0};

},{"./_to-integer":211}],214:[function(require,module,exports){
var defined=require("./_defined");module.exports=function(e){return Object(defined(e))};

},{"./_defined":126}],215:[function(require,module,exports){
var isObject=require("./_is-object");module.exports=function(t,e){if(!isObject(t))return t;var r,i;if(e&&"function"==typeof(r=t.toString)&&!isObject(i=r.call(t)))return i;if("function"==typeof(r=t.valueOf)&&!isObject(i=r.call(t)))return i;if(!e&&"function"==typeof(r=t.toString)&&!isObject(i=r.call(t)))return i;throw TypeError("Can't convert object to primitive value")};

},{"./_is-object":149}],216:[function(require,module,exports){
"use strict";if(require("./_descriptors")){var LIBRARY=require("./_library"),global=require("./_global"),fails=require("./_fails"),$export=require("./_export"),$typed=require("./_typed"),$buffer=require("./_typed-buffer"),ctx=require("./_ctx"),anInstance=require("./_an-instance"),propertyDesc=require("./_property-desc"),hide=require("./_hide"),redefineAll=require("./_redefine-all"),toInteger=require("./_to-integer"),toLength=require("./_to-length"),toIndex=require("./_to-index"),toAbsoluteIndex=require("./_to-absolute-index"),toPrimitive=require("./_to-primitive"),has=require("./_has"),classof=require("./_classof"),isObject=require("./_is-object"),toObject=require("./_to-object"),isArrayIter=require("./_is-array-iter"),create=require("./_object-create"),getPrototypeOf=require("./_object-gpo"),gOPN=require("./_object-gopn").f,getIterFn=require("./core.get-iterator-method"),uid=require("./_uid"),wks=require("./_wks"),createArrayMethod=require("./_array-methods"),createArrayIncludes=require("./_array-includes"),speciesConstructor=require("./_species-constructor"),ArrayIterators=require("./es6.array.iterator"),Iterators=require("./_iterators"),$iterDetect=require("./_iter-detect"),setSpecies=require("./_set-species"),arrayFill=require("./_array-fill"),arrayCopyWithin=require("./_array-copy-within"),$DP=require("./_object-dp"),$GOPD=require("./_object-gopd"),dP=$DP.f,gOPD=$GOPD.f,RangeError=global.RangeError,TypeError=global.TypeError,Uint8Array=global.Uint8Array,ARRAY_BUFFER="ArrayBuffer",SHARED_BUFFER="Shared"+ARRAY_BUFFER,BYTES_PER_ELEMENT="BYTES_PER_ELEMENT",PROTOTYPE="prototype",ArrayProto=Array[PROTOTYPE],$ArrayBuffer=$buffer.ArrayBuffer,$DataView=$buffer.DataView,arrayForEach=createArrayMethod(0),arrayFilter=createArrayMethod(2),arraySome=createArrayMethod(3),arrayEvery=createArrayMethod(4),arrayFind=createArrayMethod(5),arrayFindIndex=createArrayMethod(6),arrayIncludes=createArrayIncludes(!0),arrayIndexOf=createArrayIncludes(!1),arrayValues=ArrayIterators.values,arrayKeys=ArrayIterators.keys,arrayEntries=ArrayIterators.entries,arrayLastIndexOf=ArrayProto.lastIndexOf,arrayReduce=ArrayProto.reduce,arrayReduceRight=ArrayProto.reduceRight,arrayJoin=ArrayProto.join,arraySort=ArrayProto.sort,arraySlice=ArrayProto.slice,arrayToString=ArrayProto.toString,arrayToLocaleString=ArrayProto.toLocaleString,ITERATOR=wks("iterator"),TAG=wks("toStringTag"),TYPED_CONSTRUCTOR=uid("typed_constructor"),DEF_CONSTRUCTOR=uid("def_constructor"),ALL_CONSTRUCTORS=$typed.CONSTR,TYPED_ARRAY=$typed.TYPED,VIEW=$typed.VIEW,WRONG_LENGTH="Wrong length!",$map=createArrayMethod(1,function(r,e){return allocate(speciesConstructor(r,r[DEF_CONSTRUCTOR]),e)}),LITTLE_ENDIAN=fails(function(){return 1===new Uint8Array(new Uint16Array([1]).buffer)[0]}),FORCED_SET=!!Uint8Array&&!!Uint8Array[PROTOTYPE].set&&fails(function(){new Uint8Array(1).set({})}),toOffset=function(r,e){var t=toInteger(r);if(t<0||t%e)throw RangeError("Wrong offset!");return t},validate=function(r){if(isObject(r)&&TYPED_ARRAY in r)return r;throw TypeError(r+" is not a typed array!")},allocate=function(r,e){if(!(isObject(r)&&TYPED_CONSTRUCTOR in r))throw TypeError("It is not a typed array constructor!");return new r(e)},speciesFromList=function(r,e){return fromList(speciesConstructor(r,r[DEF_CONSTRUCTOR]),e)},fromList=function(r,e){for(var t=0,a=e.length,i=allocate(r,a);a>t;)i[t]=e[t++];return i},addGetter=function(r,e,t){dP(r,e,{get:function(){return this._d[t]}})},$from=function from(r){var e,t,a,i,o,n,s=toObject(r),c=arguments.length,u=c>1?arguments[1]:void 0,l=void 0!==u,f=getIterFn(s);if(null!=f&&!isArrayIter(f)){for(n=f.call(s),a=[],e=0;!(o=n.next()).done;e++)a.push(o.value);s=a}for(l&&c>2&&(u=ctx(u,arguments[2],2)),e=0,t=toLength(s.length),i=allocate(this,t);t>e;e++)i[e]=l?u(s[e],e):s[e];return i},$of=function of(){for(var r=0,e=arguments.length,t=allocate(this,e);e>r;)t[r]=arguments[r++];return t},TO_LOCALE_BUG=!!Uint8Array&&fails(function(){arrayToLocaleString.call(new Uint8Array(1))}),$toLocaleString=function toLocaleString(){return arrayToLocaleString.apply(TO_LOCALE_BUG?arraySlice.call(validate(this)):validate(this),arguments)},proto={copyWithin:function copyWithin(r,e){return arrayCopyWithin.call(validate(this),r,e,arguments.length>2?arguments[2]:void 0)},every:function every(r){return arrayEvery(validate(this),r,arguments.length>1?arguments[1]:void 0)},fill:function fill(r){return arrayFill.apply(validate(this),arguments)},filter:function filter(r){return speciesFromList(this,arrayFilter(validate(this),r,arguments.length>1?arguments[1]:void 0))},find:function find(r){return arrayFind(validate(this),r,arguments.length>1?arguments[1]:void 0)},findIndex:function findIndex(r){return arrayFindIndex(validate(this),r,arguments.length>1?arguments[1]:void 0)},forEach:function forEach(r){arrayForEach(validate(this),r,arguments.length>1?arguments[1]:void 0)},indexOf:function indexOf(r){return arrayIndexOf(validate(this),r,arguments.length>1?arguments[1]:void 0)},includes:function includes(r){return arrayIncludes(validate(this),r,arguments.length>1?arguments[1]:void 0)},join:function join(r){return arrayJoin.apply(validate(this),arguments)},lastIndexOf:function lastIndexOf(r){return arrayLastIndexOf.apply(validate(this),arguments)},map:function map(r){return $map(validate(this),r,arguments.length>1?arguments[1]:void 0)},reduce:function reduce(r){return arrayReduce.apply(validate(this),arguments)},reduceRight:function reduceRight(r){return arrayReduceRight.apply(validate(this),arguments)},reverse:function reverse(){for(var r,e=validate(this).length,t=Math.floor(e/2),a=0;a<t;)r=this[a],this[a++]=this[--e],this[e]=r;return this},some:function some(r){return arraySome(validate(this),r,arguments.length>1?arguments[1]:void 0)},sort:function sort(r){return arraySort.call(validate(this),r)},subarray:function subarray(r,e){var t=validate(this),a=t.length,i=toAbsoluteIndex(r,a);return new(speciesConstructor(t,t[DEF_CONSTRUCTOR]))(t.buffer,t.byteOffset+i*t.BYTES_PER_ELEMENT,toLength((void 0===e?a:toAbsoluteIndex(e,a))-i))}},$slice=function slice(r,e){return speciesFromList(this,arraySlice.call(validate(this),r,e))},$set=function set(r){validate(this);var e=toOffset(arguments[1],1),t=this.length,a=toObject(r),i=toLength(a.length),o=0;if(i+e>t)throw RangeError(WRONG_LENGTH);for(;o<i;)this[e+o]=a[o++]},$iterators={entries:function entries(){return arrayEntries.call(validate(this))},keys:function keys(){return arrayKeys.call(validate(this))},values:function values(){return arrayValues.call(validate(this))}},isTAIndex=function(r,e){return isObject(r)&&r[TYPED_ARRAY]&&"symbol"!=typeof e&&e in r&&String(+e)==String(e)},$getDesc=function getOwnPropertyDescriptor(r,e){return isTAIndex(r,e=toPrimitive(e,!0))?propertyDesc(2,r[e]):gOPD(r,e)},$setDesc=function defineProperty(r,e,t){return!(isTAIndex(r,e=toPrimitive(e,!0))&&isObject(t)&&has(t,"value"))||has(t,"get")||has(t,"set")||t.configurable||has(t,"writable")&&!t.writable||has(t,"enumerable")&&!t.enumerable?dP(r,e,t):(r[e]=t.value,r)};ALL_CONSTRUCTORS||($GOPD.f=$getDesc,$DP.f=$setDesc),$export($export.S+$export.F*!ALL_CONSTRUCTORS,"Object",{getOwnPropertyDescriptor:$getDesc,defineProperty:$setDesc}),fails(function(){arrayToString.call({})})&&(arrayToString=arrayToLocaleString=function toString(){return arrayJoin.call(this)});var $TypedArrayPrototype$=redefineAll({},proto);redefineAll($TypedArrayPrototype$,$iterators),hide($TypedArrayPrototype$,ITERATOR,$iterators.values),redefineAll($TypedArrayPrototype$,{slice:$slice,set:$set,constructor:function(){},toString:arrayToString,toLocaleString:$toLocaleString}),addGetter($TypedArrayPrototype$,"buffer","b"),addGetter($TypedArrayPrototype$,"byteOffset","o"),addGetter($TypedArrayPrototype$,"byteLength","l"),addGetter($TypedArrayPrototype$,"length","e"),dP($TypedArrayPrototype$,TAG,{get:function(){return this[TYPED_ARRAY]}}),module.exports=function(r,e,t,a){var i=r+((a=!!a)?"Clamped":"")+"Array",o="get"+r,n="set"+r,s=global[i],c=s||{},u=s&&getPrototypeOf(s),l=!s||!$typed.ABV,f={},y=s&&s[PROTOTYPE],d=function(r,t){dP(r,t,{get:function(){return function(r,t){var a=r._d;return a.v[o](t*e+a.o,LITTLE_ENDIAN)}(this,t)},set:function(r){return function(r,t,i){var o=r._d;a&&(i=(i=Math.round(i))<0?0:i>255?255:255&i),o.v[n](t*e+o.o,i,LITTLE_ENDIAN)}(this,t,r)},enumerable:!0})};l?(s=t(function(r,t,a,o){anInstance(r,s,i,"_d");var n,c,u,l,f=0,y=0;if(isObject(t)){if(!(t instanceof $ArrayBuffer||(l=classof(t))==ARRAY_BUFFER||l==SHARED_BUFFER))return TYPED_ARRAY in t?fromList(s,t):$from.call(s,t);n=t,y=toOffset(a,e);var p=t.byteLength;if(void 0===o){if(p%e)throw RangeError(WRONG_LENGTH);if((c=p-y)<0)throw RangeError(WRONG_LENGTH)}else if((c=toLength(o)*e)+y>p)throw RangeError(WRONG_LENGTH);u=c/e}else u=toIndex(t),n=new $ArrayBuffer(c=u*e);for(hide(r,"_d",{b:n,o:y,l:c,e:u,v:new $DataView(n)});f<u;)d(r,f++)}),y=s[PROTOTYPE]=create($TypedArrayPrototype$),hide(y,"constructor",s)):fails(function(){s(1)})&&fails(function(){new s(-1)})&&$iterDetect(function(r){new s,new s(null),new s(1.5),new s(r)},!0)||(s=t(function(r,t,a,o){var n;return anInstance(r,s,i),isObject(t)?t instanceof $ArrayBuffer||(n=classof(t))==ARRAY_BUFFER||n==SHARED_BUFFER?void 0!==o?new c(t,toOffset(a,e),o):void 0!==a?new c(t,toOffset(a,e)):new c(t):TYPED_ARRAY in t?fromList(s,t):$from.call(s,t):new c(toIndex(t))}),arrayForEach(u!==Function.prototype?gOPN(c).concat(gOPN(u)):gOPN(c),function(r){r in s||hide(s,r,c[r])}),s[PROTOTYPE]=y,LIBRARY||(y.constructor=s));var p=y[ITERATOR],h=!!p&&("values"==p.name||null==p.name),T=$iterators.values;hide(s,TYPED_CONSTRUCTOR,!0),hide(y,TYPED_ARRAY,i),hide(y,VIEW,!0),hide(y,DEF_CONSTRUCTOR,s),(a?new s(1)[TAG]==i:TAG in y)||dP(y,TAG,{get:function(){return i}}),f[i]=s,$export($export.G+$export.W+$export.F*(s!=c),f),$export($export.S,i,{BYTES_PER_ELEMENT:e}),$export($export.S+$export.F*fails(function(){c.of.call(s,1)}),i,{from:$from,of:$of}),BYTES_PER_ELEMENT in y||hide(y,BYTES_PER_ELEMENT,e),$export($export.P,i,proto),setSpecies(i),$export($export.P+$export.F*FORCED_SET,i,{set:$set}),$export($export.P+$export.F*!h,i,$iterators),LIBRARY||y.toString==arrayToString||(y.toString=arrayToString),$export($export.P+$export.F*fails(function(){new s(1).slice()}),i,{slice:$slice}),$export($export.P+$export.F*(fails(function(){return[1,2].toLocaleString()!=new s([1,2]).toLocaleString()})||!fails(function(){y.toLocaleString.call([1,2])})),i,{toLocaleString:$toLocaleString}),Iterators[i]=h?p:T,LIBRARY||h||hide(y,ITERATOR,T)}}else module.exports=function(){};

},{"./_an-instance":104,"./_array-copy-within":106,"./_array-fill":107,"./_array-includes":109,"./_array-methods":110,"./_classof":115,"./_ctx":123,"./_descriptors":127,"./_export":131,"./_fails":133,"./_global":138,"./_has":139,"./_hide":140,"./_is-array-iter":146,"./_is-object":149,"./_iter-detect":154,"./_iterators":156,"./_library":157,"./_object-create":168,"./_object-dp":169,"./_object-gopd":172,"./_object-gopn":174,"./_object-gpo":176,"./_property-desc":187,"./_redefine-all":188,"./_set-species":195,"./_species-constructor":199,"./_to-absolute-index":209,"./_to-index":210,"./_to-integer":211,"./_to-length":213,"./_to-object":214,"./_to-primitive":215,"./_typed":218,"./_typed-buffer":217,"./_uid":219,"./_wks":224,"./core.get-iterator-method":225,"./es6.array.iterator":237}],217:[function(require,module,exports){
"use strict";var global=require("./_global"),DESCRIPTORS=require("./_descriptors"),LIBRARY=require("./_library"),$typed=require("./_typed"),hide=require("./_hide"),redefineAll=require("./_redefine-all"),fails=require("./_fails"),anInstance=require("./_an-instance"),toInteger=require("./_to-integer"),toLength=require("./_to-length"),toIndex=require("./_to-index"),gOPN=require("./_object-gopn").f,dP=require("./_object-dp").f,arrayFill=require("./_array-fill"),setToStringTag=require("./_set-to-string-tag"),ARRAY_BUFFER="ArrayBuffer",DATA_VIEW="DataView",PROTOTYPE="prototype",WRONG_LENGTH="Wrong length!",WRONG_INDEX="Wrong index!",$ArrayBuffer=global[ARRAY_BUFFER],$DataView=global[DATA_VIEW],Math=global.Math,RangeError=global.RangeError,Infinity=global.Infinity,BaseBuffer=$ArrayBuffer,abs=Math.abs,pow=Math.pow,floor=Math.floor,log=Math.log,LN2=Math.LN2,BUFFER="buffer",BYTE_LENGTH="byteLength",BYTE_OFFSET="byteOffset",$BUFFER=DESCRIPTORS?"_b":BUFFER,$LENGTH=DESCRIPTORS?"_l":BYTE_LENGTH,$OFFSET=DESCRIPTORS?"_o":BYTE_OFFSET;function packIEEE754(t,e,r){var n,a,i,f=new Array(r),o=8*r-e-1,u=(1<<o)-1,s=u>>1,E=23===e?pow(2,-24)-pow(2,-77):0,c=0,I=t<0||0===t&&1/t<0?1:0;for((t=abs(t))!=t||t===Infinity?(a=t!=t?1:0,n=u):(n=floor(log(t)/LN2),t*(i=pow(2,-n))<1&&(n--,i*=2),(t+=n+s>=1?E/i:E*pow(2,1-s))*i>=2&&(n++,i/=2),n+s>=u?(a=0,n=u):n+s>=1?(a=(t*i-1)*pow(2,e),n+=s):(a=t*pow(2,s-1)*pow(2,e),n=0));e>=8;f[c++]=255&a,a/=256,e-=8);for(n=n<<e|a,o+=e;o>0;f[c++]=255&n,n/=256,o-=8);return f[--c]|=128*I,f}function unpackIEEE754(t,e,r){var n,a=8*r-e-1,i=(1<<a)-1,f=i>>1,o=a-7,u=r-1,s=t[u--],E=127&s;for(s>>=7;o>0;E=256*E+t[u],u--,o-=8);for(n=E&(1<<-o)-1,E>>=-o,o+=e;o>0;n=256*n+t[u],u--,o-=8);if(0===E)E=1-f;else{if(E===i)return n?NaN:s?-Infinity:Infinity;n+=pow(2,e),E-=f}return(s?-1:1)*n*pow(2,E-e)}function unpackI32(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function packI8(t){return[255&t]}function packI16(t){return[255&t,t>>8&255]}function packI32(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function packF64(t){return packIEEE754(t,52,8)}function packF32(t){return packIEEE754(t,23,4)}function addGetter(t,e,r){dP(t[PROTOTYPE],e,{get:function(){return this[r]}})}function get(t,e,r,n){var a=toIndex(+r);if(a+e>t[$LENGTH])throw RangeError(WRONG_INDEX);var i=t[$BUFFER]._b,f=a+t[$OFFSET],o=i.slice(f,f+e);return n?o:o.reverse()}function set(t,e,r,n,a,i){var f=toIndex(+r);if(f+e>t[$LENGTH])throw RangeError(WRONG_INDEX);for(var o=t[$BUFFER]._b,u=f+t[$OFFSET],s=n(+a),E=0;E<e;E++)o[u+E]=s[i?E:e-E-1]}if($typed.ABV){if(!fails(function(){$ArrayBuffer(1)})||!fails(function(){new $ArrayBuffer(-1)})||fails(function(){return new $ArrayBuffer,new $ArrayBuffer(1.5),new $ArrayBuffer(NaN),$ArrayBuffer.name!=ARRAY_BUFFER})){for(var key,ArrayBufferProto=($ArrayBuffer=function ArrayBuffer(t){return anInstance(this,$ArrayBuffer),new BaseBuffer(toIndex(t))})[PROTOTYPE]=BaseBuffer[PROTOTYPE],keys=gOPN(BaseBuffer),j=0;keys.length>j;)(key=keys[j++])in $ArrayBuffer||hide($ArrayBuffer,key,BaseBuffer[key]);LIBRARY||(ArrayBufferProto.constructor=$ArrayBuffer)}var view=new $DataView(new $ArrayBuffer(2)),$setInt8=$DataView[PROTOTYPE].setInt8;view.setInt8(0,2147483648),view.setInt8(1,2147483649),!view.getInt8(0)&&view.getInt8(1)||redefineAll($DataView[PROTOTYPE],{setInt8:function setInt8(t,e){$setInt8.call(this,t,e<<24>>24)},setUint8:function setUint8(t,e){$setInt8.call(this,t,e<<24>>24)}},!0)}else $ArrayBuffer=function ArrayBuffer(t){anInstance(this,$ArrayBuffer,ARRAY_BUFFER);var e=toIndex(t);this._b=arrayFill.call(new Array(e),0),this[$LENGTH]=e},$DataView=function DataView(t,e,r){anInstance(this,$DataView,DATA_VIEW),anInstance(t,$ArrayBuffer,DATA_VIEW);var n=t[$LENGTH],a=toInteger(e);if(a<0||a>n)throw RangeError("Wrong offset!");if(a+(r=void 0===r?n-a:toLength(r))>n)throw RangeError(WRONG_LENGTH);this[$BUFFER]=t,this[$OFFSET]=a,this[$LENGTH]=r},DESCRIPTORS&&(addGetter($ArrayBuffer,BYTE_LENGTH,"_l"),addGetter($DataView,BUFFER,"_b"),addGetter($DataView,BYTE_LENGTH,"_l"),addGetter($DataView,BYTE_OFFSET,"_o")),redefineAll($DataView[PROTOTYPE],{getInt8:function getInt8(t){return get(this,1,t)[0]<<24>>24},getUint8:function getUint8(t){return get(this,1,t)[0]},getInt16:function getInt16(t){var e=get(this,2,t,arguments[1]);return(e[1]<<8|e[0])<<16>>16},getUint16:function getUint16(t){var e=get(this,2,t,arguments[1]);return e[1]<<8|e[0]},getInt32:function getInt32(t){return unpackI32(get(this,4,t,arguments[1]))},getUint32:function getUint32(t){return unpackI32(get(this,4,t,arguments[1]))>>>0},getFloat32:function getFloat32(t){return unpackIEEE754(get(this,4,t,arguments[1]),23,4)},getFloat64:function getFloat64(t){return unpackIEEE754(get(this,8,t,arguments[1]),52,8)},setInt8:function setInt8(t,e){set(this,1,t,packI8,e)},setUint8:function setUint8(t,e){set(this,1,t,packI8,e)},setInt16:function setInt16(t,e){set(this,2,t,packI16,e,arguments[2])},setUint16:function setUint16(t,e){set(this,2,t,packI16,e,arguments[2])},setInt32:function setInt32(t,e){set(this,4,t,packI32,e,arguments[2])},setUint32:function setUint32(t,e){set(this,4,t,packI32,e,arguments[2])},setFloat32:function setFloat32(t,e){set(this,4,t,packF32,e,arguments[2])},setFloat64:function setFloat64(t,e){set(this,8,t,packF64,e,arguments[2])}});setToStringTag($ArrayBuffer,ARRAY_BUFFER),setToStringTag($DataView,DATA_VIEW),hide($DataView[PROTOTYPE],$typed.VIEW,!0),exports[ARRAY_BUFFER]=$ArrayBuffer,exports[DATA_VIEW]=$DataView;

},{"./_an-instance":104,"./_array-fill":107,"./_descriptors":127,"./_fails":133,"./_global":138,"./_hide":140,"./_library":157,"./_object-dp":169,"./_object-gopn":174,"./_redefine-all":188,"./_set-to-string-tag":196,"./_to-index":210,"./_to-integer":211,"./_to-length":213,"./_typed":218}],218:[function(require,module,exports){
for(var Typed,global=require("./_global"),hide=require("./_hide"),uid=require("./_uid"),TYPED=uid("typed_array"),VIEW=uid("view"),ABV=!(!global.ArrayBuffer||!global.DataView),CONSTR=ABV,i=0,l=9,TypedArrayConstructors="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");i<l;)(Typed=global[TypedArrayConstructors[i++]])?(hide(Typed.prototype,TYPED,!0),hide(Typed.prototype,VIEW,!0)):CONSTR=!1;module.exports={ABV:ABV,CONSTR:CONSTR,TYPED:TYPED,VIEW:VIEW};

},{"./_global":138,"./_hide":140,"./_uid":219}],219:[function(require,module,exports){
var id=0,px=Math.random();module.exports=function(o){return"Symbol(".concat(void 0===o?"":o,")_",(++id+px).toString(36))};

},{}],220:[function(require,module,exports){
var global=require("./_global"),navigator=global.navigator;module.exports=navigator&&navigator.userAgent||"";

},{"./_global":138}],221:[function(require,module,exports){
var isObject=require("./_is-object");module.exports=function(e,r){if(!isObject(e)||e._t!==r)throw TypeError("Incompatible receiver, "+r+" required!");return e};

},{"./_is-object":149}],222:[function(require,module,exports){
var global=require("./_global"),core=require("./_core"),LIBRARY=require("./_library"),wksExt=require("./_wks-ext"),defineProperty=require("./_object-dp").f;module.exports=function(e){var r=core.Symbol||(core.Symbol=LIBRARY?{}:global.Symbol||{});"_"==e.charAt(0)||e in r||defineProperty(r,e,{value:wksExt.f(e)})};

},{"./_core":121,"./_global":138,"./_library":157,"./_object-dp":169,"./_wks-ext":223}],223:[function(require,module,exports){
exports.f=require("./_wks");

},{"./_wks":224}],224:[function(require,module,exports){
var store=require("./_shared")("wks"),uid=require("./_uid"),Symbol=require("./_global").Symbol,USE_SYMBOL="function"==typeof Symbol,$exports=module.exports=function(o){return store[o]||(store[o]=USE_SYMBOL&&Symbol[o]||(USE_SYMBOL?Symbol:uid)("Symbol."+o))};$exports.store=store;

},{"./_global":138,"./_shared":198,"./_uid":219}],225:[function(require,module,exports){
var classof=require("./_classof"),ITERATOR=require("./_wks")("iterator"),Iterators=require("./_iterators");module.exports=require("./_core").getIteratorMethod=function(r){if(null!=r)return r[ITERATOR]||r["@@iterator"]||Iterators[classof(r)]};

},{"./_classof":115,"./_core":121,"./_iterators":156,"./_wks":224}],226:[function(require,module,exports){
var $export=require("./_export"),$re=require("./_replacer")(/[\\^$*+?.()|[\]{}]/g,"\\$&");$export($export.S,"RegExp",{escape:function escape(e){return $re(e)}});

},{"./_export":131,"./_replacer":190}],227:[function(require,module,exports){
var $export=require("./_export");$export($export.P,"Array",{copyWithin:require("./_array-copy-within")}),require("./_add-to-unscopables")("copyWithin");

},{"./_add-to-unscopables":103,"./_array-copy-within":106,"./_export":131}],228:[function(require,module,exports){
"use strict";var $export=require("./_export"),$every=require("./_array-methods")(4);$export($export.P+$export.F*!require("./_strict-method")([].every,!0),"Array",{every:function every(e){return $every(this,e,arguments[1])}});

},{"./_array-methods":110,"./_export":131,"./_strict-method":200}],229:[function(require,module,exports){
var $export=require("./_export");$export($export.P,"Array",{fill:require("./_array-fill")}),require("./_add-to-unscopables")("fill");

},{"./_add-to-unscopables":103,"./_array-fill":107,"./_export":131}],230:[function(require,module,exports){
"use strict";var $export=require("./_export"),$filter=require("./_array-methods")(2);$export($export.P+$export.F*!require("./_strict-method")([].filter,!0),"Array",{filter:function filter(r){return $filter(this,r,arguments[1])}});

},{"./_array-methods":110,"./_export":131,"./_strict-method":200}],231:[function(require,module,exports){
"use strict";var $export=require("./_export"),$find=require("./_array-methods")(6),KEY="findIndex",forced=!0;KEY in[]&&Array(1)[KEY](function(){forced=!1}),$export($export.P+$export.F*forced,"Array",{findIndex:function findIndex(r){return $find(this,r,arguments.length>1?arguments[1]:void 0)}}),require("./_add-to-unscopables")(KEY);

},{"./_add-to-unscopables":103,"./_array-methods":110,"./_export":131}],232:[function(require,module,exports){
"use strict";var $export=require("./_export"),$find=require("./_array-methods")(5),KEY="find",forced=!0;KEY in[]&&Array(1)[KEY](function(){forced=!1}),$export($export.P+$export.F*forced,"Array",{find:function find(r){return $find(this,r,arguments.length>1?arguments[1]:void 0)}}),require("./_add-to-unscopables")(KEY);

},{"./_add-to-unscopables":103,"./_array-methods":110,"./_export":131}],233:[function(require,module,exports){
"use strict";var $export=require("./_export"),$forEach=require("./_array-methods")(0),STRICT=require("./_strict-method")([].forEach,!0);$export($export.P+$export.F*!STRICT,"Array",{forEach:function forEach(r){return $forEach(this,r,arguments[1])}});

},{"./_array-methods":110,"./_export":131,"./_strict-method":200}],234:[function(require,module,exports){
"use strict";var ctx=require("./_ctx"),$export=require("./_export"),toObject=require("./_to-object"),call=require("./_iter-call"),isArrayIter=require("./_is-array-iter"),toLength=require("./_to-length"),createProperty=require("./_create-property"),getIterFn=require("./core.get-iterator-method");$export($export.S+$export.F*!require("./_iter-detect")(function(e){Array.from(e)}),"Array",{from:function from(e){var r,t,o,i,a=toObject(e),c="function"==typeof this?this:Array,n=arguments.length,l=n>1?arguments[1]:void 0,u=void 0!==l,y=0,p=getIterFn(a);if(u&&(l=ctx(l,n>2?arguments[2]:void 0,2)),null==p||c==Array&&isArrayIter(p))for(t=new c(r=toLength(a.length));r>y;y++)createProperty(t,y,u?l(a[y],y):a[y]);else for(i=p.call(a),t=new c;!(o=i.next()).done;y++)createProperty(t,y,u?call(i,l,[o.value,y],!0):o.value);return t.length=y,t}});

},{"./_create-property":122,"./_ctx":123,"./_export":131,"./_is-array-iter":146,"./_iter-call":151,"./_iter-detect":154,"./_to-length":213,"./_to-object":214,"./core.get-iterator-method":225}],235:[function(require,module,exports){
"use strict";var $export=require("./_export"),$indexOf=require("./_array-includes")(!1),$native=[].indexOf,NEGATIVE_ZERO=!!$native&&1/[1].indexOf(1,-0)<0;$export($export.P+$export.F*(NEGATIVE_ZERO||!require("./_strict-method")($native)),"Array",{indexOf:function indexOf(e){return NEGATIVE_ZERO?$native.apply(this,arguments)||0:$indexOf(this,e,arguments[1])}});

},{"./_array-includes":109,"./_export":131,"./_strict-method":200}],236:[function(require,module,exports){
var $export=require("./_export");$export($export.S,"Array",{isArray:require("./_is-array")});

},{"./_export":131,"./_is-array":147}],237:[function(require,module,exports){
"use strict";var addToUnscopables=require("./_add-to-unscopables"),step=require("./_iter-step"),Iterators=require("./_iterators"),toIObject=require("./_to-iobject");module.exports=require("./_iter-define")(Array,"Array",function(e,t){this._t=toIObject(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,s=this._i++;return!e||s>=e.length?(this._t=void 0,step(1)):step(0,"keys"==t?s:"values"==t?e[s]:[s,e[s]])},"values"),Iterators.Arguments=Iterators.Array,addToUnscopables("keys"),addToUnscopables("values"),addToUnscopables("entries");

},{"./_add-to-unscopables":103,"./_iter-define":153,"./_iter-step":155,"./_iterators":156,"./_to-iobject":212}],238:[function(require,module,exports){
"use strict";var $export=require("./_export"),toIObject=require("./_to-iobject"),arrayJoin=[].join;$export($export.P+$export.F*(require("./_iobject")!=Object||!require("./_strict-method")(arrayJoin)),"Array",{join:function join(r){return arrayJoin.call(toIObject(this),void 0===r?",":r)}});

},{"./_export":131,"./_iobject":145,"./_strict-method":200,"./_to-iobject":212}],239:[function(require,module,exports){
"use strict";var $export=require("./_export"),toIObject=require("./_to-iobject"),toInteger=require("./_to-integer"),toLength=require("./_to-length"),$native=[].lastIndexOf,NEGATIVE_ZERO=!!$native&&1/[1].lastIndexOf(1,-0)<0;$export($export.P+$export.F*(NEGATIVE_ZERO||!require("./_strict-method")($native)),"Array",{lastIndexOf:function lastIndexOf(t){if(NEGATIVE_ZERO)return $native.apply(this,arguments)||0;var e=toIObject(this),r=toLength(e.length),n=r-1;for(arguments.length>1&&(n=Math.min(n,toInteger(arguments[1]))),n<0&&(n=r+n);n>=0;n--)if(n in e&&e[n]===t)return n||0;return-1}});

},{"./_export":131,"./_strict-method":200,"./_to-integer":211,"./_to-iobject":212,"./_to-length":213}],240:[function(require,module,exports){
"use strict";var $export=require("./_export"),$map=require("./_array-methods")(1);$export($export.P+$export.F*!require("./_strict-method")([].map,!0),"Array",{map:function map(r){return $map(this,r,arguments[1])}});

},{"./_array-methods":110,"./_export":131,"./_strict-method":200}],241:[function(require,module,exports){
"use strict";var $export=require("./_export"),createProperty=require("./_create-property");$export($export.S+$export.F*require("./_fails")(function(){function F(){}return!(Array.of.call(F)instanceof F)}),"Array",{of:function of(){for(var r=0,e=arguments.length,t=new("function"==typeof this?this:Array)(e);e>r;)createProperty(t,r,arguments[r++]);return t.length=e,t}});

},{"./_create-property":122,"./_export":131,"./_fails":133}],242:[function(require,module,exports){
"use strict";var $export=require("./_export"),$reduce=require("./_array-reduce");$export($export.P+$export.F*!require("./_strict-method")([].reduceRight,!0),"Array",{reduceRight:function reduceRight(e){return $reduce(this,e,arguments.length,arguments[1],!0)}});

},{"./_array-reduce":111,"./_export":131,"./_strict-method":200}],243:[function(require,module,exports){
"use strict";var $export=require("./_export"),$reduce=require("./_array-reduce");$export($export.P+$export.F*!require("./_strict-method")([].reduce,!0),"Array",{reduce:function reduce(e){return $reduce(this,e,arguments.length,arguments[1],!1)}});

},{"./_array-reduce":111,"./_export":131,"./_strict-method":200}],244:[function(require,module,exports){
"use strict";var $export=require("./_export"),html=require("./_html"),cof=require("./_cof"),toAbsoluteIndex=require("./_to-absolute-index"),toLength=require("./_to-length"),arraySlice=[].slice;$export($export.P+$export.F*require("./_fails")(function(){html&&arraySlice.call(html)}),"Array",{slice:function slice(e,r){var t=toLength(this.length),i=cof(this);if(r=void 0===r?t:r,"Array"==i)return arraySlice.call(this,e,r);for(var o=toAbsoluteIndex(e,t),l=toAbsoluteIndex(r,t),a=toLength(l-o),n=new Array(a),c=0;c<a;c++)n[c]="String"==i?this.charAt(o+c):this[o+c];return n}});

},{"./_cof":116,"./_export":131,"./_fails":133,"./_html":141,"./_to-absolute-index":209,"./_to-length":213}],245:[function(require,module,exports){
"use strict";var $export=require("./_export"),$some=require("./_array-methods")(3);$export($export.P+$export.F*!require("./_strict-method")([].some,!0),"Array",{some:function some(e){return $some(this,e,arguments[1])}});

},{"./_array-methods":110,"./_export":131,"./_strict-method":200}],246:[function(require,module,exports){
"use strict";var $export=require("./_export"),aFunction=require("./_a-function"),toObject=require("./_to-object"),fails=require("./_fails"),$sort=[].sort,test=[1,2,3];$export($export.P+$export.F*(fails(function(){test.sort(void 0)})||!fails(function(){test.sort(null)})||!require("./_strict-method")($sort)),"Array",{sort:function sort(t){return void 0===t?$sort.call(toObject(this)):$sort.call(toObject(this),aFunction(t))}});

},{"./_a-function":101,"./_export":131,"./_fails":133,"./_strict-method":200,"./_to-object":214}],247:[function(require,module,exports){
require("./_set-species")("Array");

},{"./_set-species":195}],248:[function(require,module,exports){
var $export=require("./_export");$export($export.S,"Date",{now:function(){return(new Date).getTime()}});

},{"./_export":131}],249:[function(require,module,exports){
var $export=require("./_export"),toISOString=require("./_date-to-iso-string");$export($export.P+$export.F*(Date.prototype.toISOString!==toISOString),"Date",{toISOString:toISOString});

},{"./_date-to-iso-string":124,"./_export":131}],250:[function(require,module,exports){
"use strict";var $export=require("./_export"),toObject=require("./_to-object"),toPrimitive=require("./_to-primitive");$export($export.P+$export.F*require("./_fails")(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function toJSON(t){var e=toObject(this),r=toPrimitive(e);return"number"!=typeof r||isFinite(r)?e.toISOString():null}});

},{"./_export":131,"./_fails":133,"./_to-object":214,"./_to-primitive":215}],251:[function(require,module,exports){
var TO_PRIMITIVE=require("./_wks")("toPrimitive"),proto=Date.prototype;TO_PRIMITIVE in proto||require("./_hide")(proto,TO_PRIMITIVE,require("./_date-to-primitive"));

},{"./_date-to-primitive":125,"./_hide":140,"./_wks":224}],252:[function(require,module,exports){
var DateProto=Date.prototype,INVALID_DATE="Invalid Date",TO_STRING="toString",$toString=DateProto[TO_STRING],getTime=DateProto.getTime;new Date(NaN)+""!=INVALID_DATE&&require("./_redefine")(DateProto,TO_STRING,function toString(){var t=getTime.call(this);return t==t?$toString.call(this):INVALID_DATE});

},{"./_redefine":189}],253:[function(require,module,exports){
var $export=require("./_export");$export($export.P,"Function",{bind:require("./_bind")});

},{"./_bind":114,"./_export":131}],254:[function(require,module,exports){
"use strict";var isObject=require("./_is-object"),getPrototypeOf=require("./_object-gpo"),HAS_INSTANCE=require("./_wks")("hasInstance"),FunctionProto=Function.prototype;HAS_INSTANCE in FunctionProto||require("./_object-dp").f(FunctionProto,HAS_INSTANCE,{value:function(t){if("function"!=typeof this||!isObject(t))return!1;if(!isObject(this.prototype))return t instanceof this;for(;t=getPrototypeOf(t);)if(this.prototype===t)return!0;return!1}});

},{"./_is-object":149,"./_object-dp":169,"./_object-gpo":176,"./_wks":224}],255:[function(require,module,exports){
var dP=require("./_object-dp").f,FProto=Function.prototype,nameRE=/^\s*function ([^ (]*)/,NAME="name";NAME in FProto||require("./_descriptors")&&dP(FProto,NAME,{configurable:!0,get:function(){try{return(""+this).match(nameRE)[1]}catch(r){return""}}});

},{"./_descriptors":127,"./_object-dp":169}],256:[function(require,module,exports){
"use strict";var strong=require("./_collection-strong"),validate=require("./_validate-collection"),MAP="Map";module.exports=require("./_collection")(MAP,function(t){return function Map(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function get(t){var e=strong.getEntry(validate(this,MAP),t);return e&&e.v},set:function set(t,e){return strong.def(validate(this,MAP),0===t?0:t,e)}},strong,!0);

},{"./_collection":120,"./_collection-strong":117,"./_validate-collection":221}],257:[function(require,module,exports){
var $export=require("./_export"),log1p=require("./_math-log1p"),sqrt=Math.sqrt,$acosh=Math.acosh;$export($export.S+$export.F*!($acosh&&710==Math.floor($acosh(Number.MAX_VALUE))&&$acosh(1/0)==1/0),"Math",{acosh:function acosh(o){return(o=+o)<1?NaN:o>94906265.62425156?Math.log(o)+Math.LN2:log1p(o-1+sqrt(o-1)*sqrt(o+1))}});

},{"./_export":131,"./_math-log1p":160}],258:[function(require,module,exports){
var $export=require("./_export"),$asinh=Math.asinh;function asinh(a){return isFinite(a=+a)&&0!=a?a<0?-asinh(-a):Math.log(a+Math.sqrt(a*a+1)):a}$export($export.S+$export.F*!($asinh&&1/$asinh(0)>0),"Math",{asinh:asinh});

},{"./_export":131}],259:[function(require,module,exports){
var $export=require("./_export"),$atanh=Math.atanh;$export($export.S+$export.F*!($atanh&&1/$atanh(-0)<0),"Math",{atanh:function atanh(a){return 0==(a=+a)?a:Math.log((1+a)/(1-a))/2}});

},{"./_export":131}],260:[function(require,module,exports){
var $export=require("./_export"),sign=require("./_math-sign");$export($export.S,"Math",{cbrt:function cbrt(r){return sign(r=+r)*Math.pow(Math.abs(r),1/3)}});

},{"./_export":131,"./_math-sign":162}],261:[function(require,module,exports){
var $export=require("./_export");$export($export.S,"Math",{clz32:function clz32(r){return(r>>>=0)?31-Math.floor(Math.log(r+.5)*Math.LOG2E):32}});

},{"./_export":131}],262:[function(require,module,exports){
var $export=require("./_export"),exp=Math.exp;$export($export.S,"Math",{cosh:function cosh(e){return(exp(e=+e)+exp(-e))/2}});

},{"./_export":131}],263:[function(require,module,exports){
var $export=require("./_export"),$expm1=require("./_math-expm1");$export($export.S+$export.F*($expm1!=Math.expm1),"Math",{expm1:$expm1});

},{"./_export":131,"./_math-expm1":158}],264:[function(require,module,exports){
var $export=require("./_export");$export($export.S,"Math",{fround:require("./_math-fround")});

},{"./_export":131,"./_math-fround":159}],265:[function(require,module,exports){
var $export=require("./_export"),abs=Math.abs;$export($export.S,"Math",{hypot:function hypot(t,r){for(var a,e,o=0,h=0,p=arguments.length,n=0;h<p;)n<(a=abs(arguments[h++]))?(o=o*(e=n/a)*e+1,n=a):o+=a>0?(e=a/n)*e:a;return n===1/0?1/0:n*Math.sqrt(o)}});

},{"./_export":131}],266:[function(require,module,exports){
var $export=require("./_export"),$imul=Math.imul;$export($export.S+$export.F*require("./_fails")(function(){return-5!=$imul(4294967295,5)||2!=$imul.length}),"Math",{imul:function imul(r,e){var t=+r,u=+e,i=65535&t,l=65535&u;return 0|i*l+((65535&t>>>16)*l+i*(65535&u>>>16)<<16>>>0)}});

},{"./_export":131,"./_fails":133}],267:[function(require,module,exports){
var $export=require("./_export");$export($export.S,"Math",{log10:function log10(r){return Math.log(r)*Math.LOG10E}});

},{"./_export":131}],268:[function(require,module,exports){
var $export=require("./_export");$export($export.S,"Math",{log1p:require("./_math-log1p")});

},{"./_export":131,"./_math-log1p":160}],269:[function(require,module,exports){
var $export=require("./_export");$export($export.S,"Math",{log2:function log2(r){return Math.log(r)/Math.LN2}});

},{"./_export":131}],270:[function(require,module,exports){
var $export=require("./_export");$export($export.S,"Math",{sign:require("./_math-sign")});

},{"./_export":131,"./_math-sign":162}],271:[function(require,module,exports){
var $export=require("./_export"),expm1=require("./_math-expm1"),exp=Math.exp;$export($export.S+$export.F*require("./_fails")(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function sinh(e){return Math.abs(e=+e)<1?(expm1(e)-expm1(-e))/2:(exp(e-1)-exp(-e-1))*(Math.E/2)}});

},{"./_export":131,"./_fails":133,"./_math-expm1":158}],272:[function(require,module,exports){
var $export=require("./_export"),expm1=require("./_math-expm1"),exp=Math.exp;$export($export.S,"Math",{tanh:function tanh(e){var p=expm1(e=+e),r=expm1(-e);return p==1/0?1:r==1/0?-1:(p-r)/(exp(e)+exp(-e))}});

},{"./_export":131,"./_math-expm1":158}],273:[function(require,module,exports){
var $export=require("./_export");$export($export.S,"Math",{trunc:function trunc(r){return(r>0?Math.floor:Math.ceil)(r)}});

},{"./_export":131}],274:[function(require,module,exports){
"use strict";var global=require("./_global"),has=require("./_has"),cof=require("./_cof"),inheritIfRequired=require("./_inherit-if-required"),toPrimitive=require("./_to-primitive"),fails=require("./_fails"),gOPN=require("./_object-gopn").f,gOPD=require("./_object-gopd").f,dP=require("./_object-dp").f,$trim=require("./_string-trim").trim,NUMBER="Number",$Number=global[NUMBER],Base=$Number,proto=$Number.prototype,BROKEN_COF=cof(require("./_object-create")(proto))==NUMBER,TRIM="trim"in String.prototype,toNumber=function(e){var r=toPrimitive(e,!1);if("string"==typeof r&&r.length>2){var t,i,o,u=(r=TRIM?r.trim():$trim(r,3)).charCodeAt(0);if(43===u||45===u){if(88===(t=r.charCodeAt(2))||120===t)return NaN}else if(48===u){switch(r.charCodeAt(1)){case 66:case 98:i=2,o=49;break;case 79:case 111:i=8,o=55;break;default:return+r}for(var a,N=r.slice(2),s=0,n=N.length;s<n;s++)if((a=N.charCodeAt(s))<48||a>o)return NaN;return parseInt(N,i)}}return+r};if(!$Number(" 0o1")||!$Number("0b1")||$Number("+0x1")){$Number=function Number(e){var r=arguments.length<1?0:e,t=this;return t instanceof $Number&&(BROKEN_COF?fails(function(){proto.valueOf.call(t)}):cof(t)!=NUMBER)?inheritIfRequired(new Base(toNumber(r)),t,$Number):toNumber(r)};for(var key,keys=require("./_descriptors")?gOPN(Base):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),j=0;keys.length>j;j++)has(Base,key=keys[j])&&!has($Number,key)&&dP($Number,key,gOPD(Base,key));$Number.prototype=proto,proto.constructor=$Number,require("./_redefine")(global,NUMBER,$Number)}

},{"./_cof":116,"./_descriptors":127,"./_fails":133,"./_global":138,"./_has":139,"./_inherit-if-required":143,"./_object-create":168,"./_object-dp":169,"./_object-gopd":172,"./_object-gopn":174,"./_redefine":189,"./_string-trim":206,"./_to-primitive":215}],275:[function(require,module,exports){
var $export=require("./_export");$export($export.S,"Number",{EPSILON:Math.pow(2,-52)});

},{"./_export":131}],276:[function(require,module,exports){
var $export=require("./_export"),_isFinite=require("./_global").isFinite;$export($export.S,"Number",{isFinite:function isFinite(i){return"number"==typeof i&&_isFinite(i)}});

},{"./_export":131,"./_global":138}],277:[function(require,module,exports){
var $export=require("./_export");$export($export.S,"Number",{isInteger:require("./_is-integer")});

},{"./_export":131,"./_is-integer":148}],278:[function(require,module,exports){
var $export=require("./_export");$export($export.S,"Number",{isNaN:function isNaN(r){return r!=r}});

},{"./_export":131}],279:[function(require,module,exports){
var $export=require("./_export"),isInteger=require("./_is-integer"),abs=Math.abs;$export($export.S,"Number",{isSafeInteger:function isSafeInteger(e){return isInteger(e)&&abs(e)<=9007199254740991}});

},{"./_export":131,"./_is-integer":148}],280:[function(require,module,exports){
var $export=require("./_export");$export($export.S,"Number",{MAX_SAFE_INTEGER:9007199254740991});

},{"./_export":131}],281:[function(require,module,exports){
var $export=require("./_export");$export($export.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991});

},{"./_export":131}],282:[function(require,module,exports){
var $export=require("./_export"),$parseFloat=require("./_parse-float");$export($export.S+$export.F*(Number.parseFloat!=$parseFloat),"Number",{parseFloat:$parseFloat});

},{"./_export":131,"./_parse-float":183}],283:[function(require,module,exports){
var $export=require("./_export"),$parseInt=require("./_parse-int");$export($export.S+$export.F*(Number.parseInt!=$parseInt),"Number",{parseInt:$parseInt});

},{"./_export":131,"./_parse-int":184}],284:[function(require,module,exports){
"use strict";var $export=require("./_export"),toInteger=require("./_to-integer"),aNumberValue=require("./_a-number-value"),repeat=require("./_string-repeat"),$toFixed=1..toFixed,floor=Math.floor,data=[0,0,0,0,0,0],ERROR="Number.toFixed: incorrect invocation!",ZERO="0",multiply=function(e,r){for(var t=-1,i=r;++t<6;)i+=e*data[t],data[t]=i%1e7,i=floor(i/1e7)},divide=function(e){for(var r=6,t=0;--r>=0;)t+=data[r],data[r]=floor(t/e),t=t%e*1e7},numToString=function(){for(var e=6,r="";--e>=0;)if(""!==r||0===e||0!==data[e]){var t=String(data[e]);r=""===r?t:r+repeat.call(ZERO,7-t.length)+t}return r},pow=function(e,r,t){return 0===r?t:r%2==1?pow(e,r-1,t*e):pow(e*e,r/2,t)},log=function(e){for(var r=0,t=e;t>=4096;)r+=12,t/=4096;for(;t>=2;)r+=1,t/=2;return r};$export($export.P+$export.F*(!!$toFixed&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!require("./_fails")(function(){$toFixed.call({})})),"Number",{toFixed:function toFixed(e){var r,t,i,o,a=aNumberValue(this,ERROR),n=toInteger(e),l="",u=ZERO;if(n<0||n>20)throw RangeError(ERROR);if(a!=a)return"NaN";if(a<=-1e21||a>=1e21)return String(a);if(a<0&&(l="-",a=-a),a>1e-21)if(t=(r=log(a*pow(2,69,1))-69)<0?a*pow(2,-r,1):a/pow(2,r,1),t*=4503599627370496,(r=52-r)>0){for(multiply(0,t),i=n;i>=7;)multiply(1e7,0),i-=7;for(multiply(pow(10,i,1),0),i=r-1;i>=23;)divide(1<<23),i-=23;divide(1<<i),multiply(1,1),divide(2),u=numToString()}else multiply(0,t),multiply(1<<-r,0),u=numToString()+repeat.call(ZERO,n);return u=n>0?l+((o=u.length)<=n?"0."+repeat.call(ZERO,n-o)+u:u.slice(0,o-n)+"."+u.slice(o-n)):l+u}});

},{"./_a-number-value":102,"./_export":131,"./_fails":133,"./_string-repeat":205,"./_to-integer":211}],285:[function(require,module,exports){
"use strict";var $export=require("./_export"),$fails=require("./_fails"),aNumberValue=require("./_a-number-value"),$toPrecision=1..toPrecision;$export($export.P+$export.F*($fails(function(){return"1"!==$toPrecision.call(1,void 0)})||!$fails(function(){$toPrecision.call({})})),"Number",{toPrecision:function toPrecision(i){var r=aNumberValue(this,"Number#toPrecision: incorrect invocation!");return void 0===i?$toPrecision.call(r):$toPrecision.call(r,i)}});

},{"./_a-number-value":102,"./_export":131,"./_fails":133}],286:[function(require,module,exports){
var $export=require("./_export");$export($export.S+$export.F,"Object",{assign:require("./_object-assign")});

},{"./_export":131,"./_object-assign":167}],287:[function(require,module,exports){
var $export=require("./_export");$export($export.S,"Object",{create:require("./_object-create")});

},{"./_export":131,"./_object-create":168}],288:[function(require,module,exports){
var $export=require("./_export");$export($export.S+$export.F*!require("./_descriptors"),"Object",{defineProperties:require("./_object-dps")});

},{"./_descriptors":127,"./_export":131,"./_object-dps":170}],289:[function(require,module,exports){
var $export=require("./_export");$export($export.S+$export.F*!require("./_descriptors"),"Object",{defineProperty:require("./_object-dp").f});

},{"./_descriptors":127,"./_export":131,"./_object-dp":169}],290:[function(require,module,exports){
var isObject=require("./_is-object"),meta=require("./_meta").onFreeze;require("./_object-sap")("freeze",function(e){return function freeze(r){return e&&isObject(r)?e(meta(r)):r}});

},{"./_is-object":149,"./_meta":163,"./_object-sap":180}],291:[function(require,module,exports){
var toIObject=require("./_to-iobject"),$getOwnPropertyDescriptor=require("./_object-gopd").f;require("./_object-sap")("getOwnPropertyDescriptor",function(){return function getOwnPropertyDescriptor(r,e){return $getOwnPropertyDescriptor(toIObject(r),e)}});

},{"./_object-gopd":172,"./_object-sap":180,"./_to-iobject":212}],292:[function(require,module,exports){
require("./_object-sap")("getOwnPropertyNames",function(){return require("./_object-gopn-ext").f});

},{"./_object-gopn-ext":173,"./_object-sap":180}],293:[function(require,module,exports){
var toObject=require("./_to-object"),$getPrototypeOf=require("./_object-gpo");require("./_object-sap")("getPrototypeOf",function(){return function getPrototypeOf(t){return $getPrototypeOf(toObject(t))}});

},{"./_object-gpo":176,"./_object-sap":180,"./_to-object":214}],294:[function(require,module,exports){
var isObject=require("./_is-object");require("./_object-sap")("isExtensible",function(e){return function isExtensible(i){return!!isObject(i)&&(!e||e(i))}});

},{"./_is-object":149,"./_object-sap":180}],295:[function(require,module,exports){
var isObject=require("./_is-object");require("./_object-sap")("isFrozen",function(e){return function isFrozen(r){return!isObject(r)||!!e&&e(r)}});

},{"./_is-object":149,"./_object-sap":180}],296:[function(require,module,exports){
var isObject=require("./_is-object");require("./_object-sap")("isSealed",function(e){return function isSealed(i){return!isObject(i)||!!e&&e(i)}});

},{"./_is-object":149,"./_object-sap":180}],297:[function(require,module,exports){
var $export=require("./_export");$export($export.S,"Object",{is:require("./_same-value")});

},{"./_export":131,"./_same-value":191}],298:[function(require,module,exports){
var toObject=require("./_to-object"),$keys=require("./_object-keys");require("./_object-sap")("keys",function(){return function keys(e){return $keys(toObject(e))}});

},{"./_object-keys":178,"./_object-sap":180,"./_to-object":214}],299:[function(require,module,exports){
var isObject=require("./_is-object"),meta=require("./_meta").onFreeze;require("./_object-sap")("preventExtensions",function(e){return function preventExtensions(t){return e&&isObject(t)?e(meta(t)):t}});

},{"./_is-object":149,"./_meta":163,"./_object-sap":180}],300:[function(require,module,exports){
var isObject=require("./_is-object"),meta=require("./_meta").onFreeze;require("./_object-sap")("seal",function(e){return function seal(r){return e&&isObject(r)?e(meta(r)):r}});

},{"./_is-object":149,"./_meta":163,"./_object-sap":180}],301:[function(require,module,exports){
var $export=require("./_export");$export($export.S,"Object",{setPrototypeOf:require("./_set-proto").set});

},{"./_export":131,"./_set-proto":194}],302:[function(require,module,exports){
"use strict";var classof=require("./_classof"),test={};test[require("./_wks")("toStringTag")]="z",test+""!="[object z]"&&require("./_redefine")(Object.prototype,"toString",function toString(){return"[object "+classof(this)+"]"},!0);

},{"./_classof":115,"./_redefine":189,"./_wks":224}],303:[function(require,module,exports){
var $export=require("./_export"),$parseFloat=require("./_parse-float");$export($export.G+$export.F*(parseFloat!=$parseFloat),{parseFloat:$parseFloat});

},{"./_export":131,"./_parse-float":183}],304:[function(require,module,exports){
var $export=require("./_export"),$parseInt=require("./_parse-int");$export($export.G+$export.F*(parseInt!=$parseInt),{parseInt:$parseInt});

},{"./_export":131,"./_parse-int":184}],305:[function(require,module,exports){
"use strict";var Internal,newGenericPromiseCapability,OwnPromiseCapability,Wrapper,LIBRARY=require("./_library"),global=require("./_global"),ctx=require("./_ctx"),classof=require("./_classof"),$export=require("./_export"),isObject=require("./_is-object"),aFunction=require("./_a-function"),anInstance=require("./_an-instance"),forOf=require("./_for-of"),speciesConstructor=require("./_species-constructor"),task=require("./_task").set,microtask=require("./_microtask")(),newPromiseCapabilityModule=require("./_new-promise-capability"),perform=require("./_perform"),userAgent=require("./_user-agent"),promiseResolve=require("./_promise-resolve"),PROMISE="Promise",TypeError=global.TypeError,process=global.process,versions=process&&process.versions,v8=versions&&versions.v8||"",$Promise=global[PROMISE],isNode="process"==classof(process),empty=function(){},newPromiseCapability=newGenericPromiseCapability=newPromiseCapabilityModule.f,USE_NATIVE=!!function(){try{var e=$Promise.resolve(1),r=(e.constructor={})[require("./_wks")("species")]=function(e){e(empty,empty)};return(isNode||"function"==typeof PromiseRejectionEvent)&&e.then(empty)instanceof r&&0!==v8.indexOf("6.6")&&-1===userAgent.indexOf("Chrome/66")}catch(e){}}(),isThenable=function(e){var r;return!(!isObject(e)||"function"!=typeof(r=e.then))&&r},notify=function(e,r){if(!e._n){e._n=!0;var i=e._c;microtask(function(){for(var o=e._v,t=1==e._s,n=0,s=function(r){var i,n,s,a=t?r.ok:r.fail,c=r.resolve,l=r.reject,p=r.domain;try{a?(t||(2==e._h&&onHandleUnhandled(e),e._h=1),!0===a?i=o:(p&&p.enter(),i=a(o),p&&(p.exit(),s=!0)),i===r.promise?l(TypeError("Promise-chain cycle")):(n=isThenable(i))?n.call(i,c,l):c(i)):l(o)}catch(e){p&&!s&&p.exit(),l(e)}};i.length>n;)s(i[n++]);e._c=[],e._n=!1,r&&!e._h&&onUnhandled(e)})}},onUnhandled=function(e){task.call(global,function(){var r,i,o,t=e._v,n=isUnhandled(e);if(n&&(r=perform(function(){isNode?process.emit("unhandledRejection",t,e):(i=global.onunhandledrejection)?i({promise:e,reason:t}):(o=global.console)&&o.error&&o.error("Unhandled promise rejection",t)}),e._h=isNode||isUnhandled(e)?2:1),e._a=void 0,n&&r.e)throw r.v})},isUnhandled=function(e){return 1!==e._h&&0===(e._a||e._c).length},onHandleUnhandled=function(e){task.call(global,function(){var r;isNode?process.emit("rejectionHandled",e):(r=global.onrejectionhandled)&&r({promise:e,reason:e._v})})},$reject=function(e){var r=this;r._d||(r._d=!0,(r=r._w||r)._v=e,r._s=2,r._a||(r._a=r._c.slice()),notify(r,!0))},$resolve=function(e){var r,i=this;if(!i._d){i._d=!0,i=i._w||i;try{if(i===e)throw TypeError("Promise can't be resolved itself");(r=isThenable(e))?microtask(function(){var o={_w:i,_d:!1};try{r.call(e,ctx($resolve,o,1),ctx($reject,o,1))}catch(e){$reject.call(o,e)}}):(i._v=e,i._s=1,notify(i,!1))}catch(e){$reject.call({_w:i,_d:!1},e)}}};USE_NATIVE||($Promise=function Promise(e){anInstance(this,$Promise,PROMISE,"_h"),aFunction(e),Internal.call(this);try{e(ctx($resolve,this,1),ctx($reject,this,1))}catch(e){$reject.call(this,e)}},(Internal=function Promise(e){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=require("./_redefine-all")($Promise.prototype,{then:function then(e,r){var i=newPromiseCapability(speciesConstructor(this,$Promise));return i.ok="function"!=typeof e||e,i.fail="function"==typeof r&&r,i.domain=isNode?process.domain:void 0,this._c.push(i),this._a&&this._a.push(i),this._s&&notify(this,!1),i.promise},catch:function(e){return this.then(void 0,e)}}),OwnPromiseCapability=function(){var e=new Internal;this.promise=e,this.resolve=ctx($resolve,e,1),this.reject=ctx($reject,e,1)},newPromiseCapabilityModule.f=newPromiseCapability=function(e){return e===$Promise||e===Wrapper?new OwnPromiseCapability(e):newGenericPromiseCapability(e)}),$export($export.G+$export.W+$export.F*!USE_NATIVE,{Promise:$Promise}),require("./_set-to-string-tag")($Promise,PROMISE),require("./_set-species")(PROMISE),Wrapper=require("./_core")[PROMISE],$export($export.S+$export.F*!USE_NATIVE,PROMISE,{reject:function reject(e){var r=newPromiseCapability(this);return(0,r.reject)(e),r.promise}}),$export($export.S+$export.F*(LIBRARY||!USE_NATIVE),PROMISE,{resolve:function resolve(e){return promiseResolve(LIBRARY&&this===Wrapper?$Promise:this,e)}}),$export($export.S+$export.F*!(USE_NATIVE&&require("./_iter-detect")(function(e){$Promise.all(e).catch(empty)})),PROMISE,{all:function all(e){var r=this,i=newPromiseCapability(r),o=i.resolve,t=i.reject,n=perform(function(){var i=[],n=0,s=1;forOf(e,!1,function(e){var a=n++,c=!1;i.push(void 0),s++,r.resolve(e).then(function(e){c||(c=!0,i[a]=e,--s||o(i))},t)}),--s||o(i)});return n.e&&t(n.v),i.promise},race:function race(e){var r=this,i=newPromiseCapability(r),o=i.reject,t=perform(function(){forOf(e,!1,function(e){r.resolve(e).then(i.resolve,o)})});return t.e&&o(t.v),i.promise}});

},{"./_a-function":101,"./_an-instance":104,"./_classof":115,"./_core":121,"./_ctx":123,"./_export":131,"./_for-of":137,"./_global":138,"./_is-object":149,"./_iter-detect":154,"./_library":157,"./_microtask":165,"./_new-promise-capability":166,"./_perform":185,"./_promise-resolve":186,"./_redefine-all":188,"./_set-species":195,"./_set-to-string-tag":196,"./_species-constructor":199,"./_task":208,"./_user-agent":220,"./_wks":224}],306:[function(require,module,exports){
var $export=require("./_export"),aFunction=require("./_a-function"),anObject=require("./_an-object"),rApply=(require("./_global").Reflect||{}).apply,fApply=Function.apply;$export($export.S+$export.F*!require("./_fails")(function(){rApply(function(){})}),"Reflect",{apply:function apply(p,e,r){var n=aFunction(p),t=anObject(r);return rApply?rApply(n,e,t):fApply.call(n,e,t)}});

},{"./_a-function":101,"./_an-object":105,"./_export":131,"./_fails":133,"./_global":138}],307:[function(require,module,exports){
var $export=require("./_export"),create=require("./_object-create"),aFunction=require("./_a-function"),anObject=require("./_an-object"),isObject=require("./_is-object"),fails=require("./_fails"),bind=require("./_bind"),rConstruct=(require("./_global").Reflect||{}).construct,NEW_TARGET_BUG=fails(function(){function F(){}return!(rConstruct(function(){},[],F)instanceof F)}),ARGS_BUG=!fails(function(){rConstruct(function(){})});$export($export.S+$export.F*(NEW_TARGET_BUG||ARGS_BUG),"Reflect",{construct:function construct(e,t){aFunction(e),anObject(t);var r=arguments.length<3?e:aFunction(arguments[2]);if(ARGS_BUG&&!NEW_TARGET_BUG)return rConstruct(e,t,r);if(e==r){switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3])}var n=[null];return n.push.apply(n,t),new(bind.apply(e,n))}var c=r.prototype,u=create(isObject(c)?c:Object.prototype),i=Function.apply.call(e,u,t);return isObject(i)?i:u}});

},{"./_a-function":101,"./_an-object":105,"./_bind":114,"./_export":131,"./_fails":133,"./_global":138,"./_is-object":149,"./_object-create":168}],308:[function(require,module,exports){
var dP=require("./_object-dp"),$export=require("./_export"),anObject=require("./_an-object"),toPrimitive=require("./_to-primitive");$export($export.S+$export.F*require("./_fails")(function(){Reflect.defineProperty(dP.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function defineProperty(e,r,t){anObject(e),r=toPrimitive(r,!0),anObject(t);try{return dP.f(e,r,t),!0}catch(e){return!1}}});

},{"./_an-object":105,"./_export":131,"./_fails":133,"./_object-dp":169,"./_to-primitive":215}],309:[function(require,module,exports){
var $export=require("./_export"),gOPD=require("./_object-gopd").f,anObject=require("./_an-object");$export($export.S,"Reflect",{deleteProperty:function deleteProperty(e,r){var t=gOPD(anObject(e),r);return!(t&&!t.configurable)&&delete e[r]}});

},{"./_an-object":105,"./_export":131,"./_object-gopd":172}],310:[function(require,module,exports){
"use strict";var $export=require("./_export"),anObject=require("./_an-object"),Enumerate=function(e){this._t=anObject(e),this._i=0;var t,r=this._k=[];for(t in e)r.push(t)};require("./_iter-create")(Enumerate,"Object",function(){var e,t=this._k;do{if(this._i>=t.length)return{value:void 0,done:!0}}while(!((e=t[this._i++])in this._t));return{value:e,done:!1}}),$export($export.S,"Reflect",{enumerate:function enumerate(e){return new Enumerate(e)}});

},{"./_an-object":105,"./_export":131,"./_iter-create":152}],311:[function(require,module,exports){
var gOPD=require("./_object-gopd"),$export=require("./_export"),anObject=require("./_an-object");$export($export.S,"Reflect",{getOwnPropertyDescriptor:function getOwnPropertyDescriptor(e,r){return gOPD.f(anObject(e),r)}});

},{"./_an-object":105,"./_export":131,"./_object-gopd":172}],312:[function(require,module,exports){
var $export=require("./_export"),getProto=require("./_object-gpo"),anObject=require("./_an-object");$export($export.S,"Reflect",{getPrototypeOf:function getPrototypeOf(e){return getProto(anObject(e))}});

},{"./_an-object":105,"./_export":131,"./_object-gpo":176}],313:[function(require,module,exports){
var gOPD=require("./_object-gopd"),getPrototypeOf=require("./_object-gpo"),has=require("./_has"),$export=require("./_export"),isObject=require("./_is-object"),anObject=require("./_an-object");function get(e,t){var r,o,g=arguments.length<3?e:arguments[2];return anObject(e)===g?e[t]:(r=gOPD.f(e,t))?has(r,"value")?r.value:void 0!==r.get?r.get.call(g):void 0:isObject(o=getPrototypeOf(e))?get(o,t,g):void 0}$export($export.S,"Reflect",{get:get});

},{"./_an-object":105,"./_export":131,"./_has":139,"./_is-object":149,"./_object-gopd":172,"./_object-gpo":176}],314:[function(require,module,exports){
var $export=require("./_export");$export($export.S,"Reflect",{has:function has(e,r){return r in e}});

},{"./_export":131}],315:[function(require,module,exports){
var $export=require("./_export"),anObject=require("./_an-object"),$isExtensible=Object.isExtensible;$export($export.S,"Reflect",{isExtensible:function isExtensible(e){return anObject(e),!$isExtensible||$isExtensible(e)}});

},{"./_an-object":105,"./_export":131}],316:[function(require,module,exports){
var $export=require("./_export");$export($export.S,"Reflect",{ownKeys:require("./_own-keys")});

},{"./_export":131,"./_own-keys":182}],317:[function(require,module,exports){
var $export=require("./_export"),anObject=require("./_an-object"),$preventExtensions=Object.preventExtensions;$export($export.S,"Reflect",{preventExtensions:function preventExtensions(e){anObject(e);try{return $preventExtensions&&$preventExtensions(e),!0}catch(e){return!1}}});

},{"./_an-object":105,"./_export":131}],318:[function(require,module,exports){
var $export=require("./_export"),setProto=require("./_set-proto");setProto&&$export($export.S,"Reflect",{setPrototypeOf:function setPrototypeOf(t,e){setProto.check(t,e);try{return setProto.set(t,e),!0}catch(t){return!1}}});

},{"./_export":131,"./_set-proto":194}],319:[function(require,module,exports){
var dP=require("./_object-dp"),gOPD=require("./_object-gopd"),getPrototypeOf=require("./_object-gpo"),has=require("./_has"),$export=require("./_export"),createDesc=require("./_property-desc"),anObject=require("./_an-object"),isObject=require("./_is-object");function set(e,t,r){var i,c,s=arguments.length<4?e:arguments[3],o=gOPD.f(anObject(e),t);if(!o){if(isObject(c=getPrototypeOf(e)))return set(c,t,r,s);o=createDesc(0)}if(has(o,"value")){if(!1===o.writable||!isObject(s))return!1;if(i=gOPD.f(s,t)){if(i.get||i.set||!1===i.writable)return!1;i.value=r,dP.f(s,t,i)}else dP.f(s,t,createDesc(0,r));return!0}return void 0!==o.set&&(o.set.call(s,r),!0)}$export($export.S,"Reflect",{set:set});

},{"./_an-object":105,"./_export":131,"./_has":139,"./_is-object":149,"./_object-dp":169,"./_object-gopd":172,"./_object-gpo":176,"./_property-desc":187}],320:[function(require,module,exports){
var global=require("./_global"),inheritIfRequired=require("./_inherit-if-required"),dP=require("./_object-dp").f,gOPN=require("./_object-gopn").f,isRegExp=require("./_is-regexp"),$flags=require("./_flags"),$RegExp=global.RegExp,Base=$RegExp,proto=$RegExp.prototype,re1=/a/g,re2=/a/g,CORRECT_NEW=new $RegExp(re1)!==re1;if(require("./_descriptors")&&(!CORRECT_NEW||require("./_fails")(function(){return re2[require("./_wks")("match")]=!1,$RegExp(re1)!=re1||$RegExp(re2)==re2||"/a/i"!=$RegExp(re1,"i")}))){$RegExp=function RegExp(e,r){var i=this instanceof $RegExp,g=isRegExp(e),o=void 0===r;return!i&&g&&e.constructor===$RegExp&&o?e:inheritIfRequired(CORRECT_NEW?new Base(g&&!o?e.source:e,r):Base((g=e instanceof $RegExp)?e.source:e,g&&o?$flags.call(e):r),i?this:proto,$RegExp)};for(var proxy=function(e){e in $RegExp||dP($RegExp,e,{configurable:!0,get:function(){return Base[e]},set:function(r){Base[e]=r}})},keys=gOPN(Base),i=0;keys.length>i;)proxy(keys[i++]);proto.constructor=$RegExp,$RegExp.prototype=proto,require("./_redefine")(global,"RegExp",$RegExp)}require("./_set-species")("RegExp");

},{"./_descriptors":127,"./_fails":133,"./_flags":135,"./_global":138,"./_inherit-if-required":143,"./_is-regexp":150,"./_object-dp":169,"./_object-gopn":174,"./_redefine":189,"./_set-species":195,"./_wks":224}],321:[function(require,module,exports){
require("./_descriptors")&&"g"!=/./g.flags&&require("./_object-dp").f(RegExp.prototype,"flags",{configurable:!0,get:require("./_flags")});

},{"./_descriptors":127,"./_flags":135,"./_object-dp":169}],322:[function(require,module,exports){
require("./_fix-re-wks")("match",1,function(r,t,i){return[function match(i){"use strict";var n=r(this),e=null==i?void 0:i[t];return void 0!==e?e.call(i,n):new RegExp(i)[t](String(n))},i]});

},{"./_fix-re-wks":134}],323:[function(require,module,exports){
require("./_fix-re-wks")("replace",2,function(r,e,i){return[function replace(l,n){"use strict";var t=r(this),c=null==l?void 0:l[e];return void 0!==c?c.call(l,t,n):i.call(String(t),l,n)},i]});

},{"./_fix-re-wks":134}],324:[function(require,module,exports){
require("./_fix-re-wks")("search",1,function(r,e,i){return[function search(i){"use strict";var n=r(this),t=null==i?void 0:i[e];return void 0!==t?t.call(i,n):new RegExp(i)[e](String(n))},i]});

},{"./_fix-re-wks":134}],325:[function(require,module,exports){
require("./_fix-re-wks")("split",2,function(e,i,t){"use strict";var l=require("./_is-regexp"),n=t,s=[].push;if("c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length){var r=void 0===/()??/.exec("")[1];t=function(e,i){var t=String(this);if(void 0===e&&0===i)return[];if(!l(e))return n.call(t,e,i);var u,c,g,h,o,p=[],a=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),d=0,v=void 0===i?4294967295:i>>>0,x=new RegExp(e.source,a+"g");for(r||(u=new RegExp("^"+x.source+"$(?!\\s)",a));(c=x.exec(t))&&!((g=c.index+c[0].length)>d&&(p.push(t.slice(d,c.index)),!r&&c.length>1&&c[0].replace(u,function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(c[o]=void 0)}),c.length>1&&c.index<t.length&&s.apply(p,c.slice(1)),h=c[0].length,d=g,p.length>=v));)x.lastIndex===c.index&&x.lastIndex++;return d===t.length?!h&&x.test("")||p.push(""):p.push(t.slice(d)),p.length>v?p.slice(0,v):p}}else"0".split(void 0,0).length&&(t=function(e,i){return void 0===e&&0===i?[]:n.call(this,e,i)});return[function split(l,n){var s=e(this),r=null==l?void 0:l[i];return void 0!==r?r.call(l,s,n):t.call(String(s),l,n)},t]});

},{"./_fix-re-wks":134,"./_is-regexp":150}],326:[function(require,module,exports){
"use strict";require("./es6.regexp.flags");var anObject=require("./_an-object"),$flags=require("./_flags"),DESCRIPTORS=require("./_descriptors"),TO_STRING="toString",$toString=/./[TO_STRING],define=function(e){require("./_redefine")(RegExp.prototype,TO_STRING,e,!0)};require("./_fails")(function(){return"/a/b"!=$toString.call({source:"a",flags:"b"})})?define(function toString(){var e=anObject(this);return"/".concat(e.source,"/","flags"in e?e.flags:!DESCRIPTORS&&e instanceof RegExp?$flags.call(e):void 0)}):$toString.name!=TO_STRING&&define(function toString(){return $toString.call(this)});

},{"./_an-object":105,"./_descriptors":127,"./_fails":133,"./_flags":135,"./_redefine":189,"./es6.regexp.flags":321}],327:[function(require,module,exports){
"use strict";var strong=require("./_collection-strong"),validate=require("./_validate-collection"),SET="Set";module.exports=require("./_collection")(SET,function(t){return function Set(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function add(t){return strong.def(validate(this,SET),t=0===t?0:t,t)}},strong);

},{"./_collection":120,"./_collection-strong":117,"./_validate-collection":221}],328:[function(require,module,exports){
"use strict";require("./_string-html")("anchor",function(n){return function anchor(r){return n(this,"a","name",r)}});

},{"./_string-html":203}],329:[function(require,module,exports){
"use strict";require("./_string-html")("big",function(i){return function big(){return i(this,"big","","")}});

},{"./_string-html":203}],330:[function(require,module,exports){
"use strict";require("./_string-html")("blink",function(n){return function blink(){return n(this,"blink","","")}});

},{"./_string-html":203}],331:[function(require,module,exports){
"use strict";require("./_string-html")("bold",function(t){return function bold(){return t(this,"b","","")}});

},{"./_string-html":203}],332:[function(require,module,exports){
"use strict";var $export=require("./_export"),$at=require("./_string-at")(!1);$export($export.P,"String",{codePointAt:function codePointAt(t){return $at(this,t)}});

},{"./_export":131,"./_string-at":201}],333:[function(require,module,exports){
"use strict";var $export=require("./_export"),toLength=require("./_to-length"),context=require("./_string-context"),ENDS_WITH="endsWith",$endsWith=""[ENDS_WITH];$export($export.P+$export.F*require("./_fails-is-regexp")(ENDS_WITH),"String",{endsWith:function endsWith(t){var e=context(this,t,ENDS_WITH),n=arguments.length>1?arguments[1]:void 0,i=toLength(e.length),r=void 0===n?i:Math.min(toLength(n),i),h=String(t);return $endsWith?$endsWith.call(e,h,r):e.slice(r-h.length,r)===h}});

},{"./_export":131,"./_fails-is-regexp":132,"./_string-context":202,"./_to-length":213}],334:[function(require,module,exports){
"use strict";require("./_string-html")("fixed",function(t){return function fixed(){return t(this,"tt","","")}});

},{"./_string-html":203}],335:[function(require,module,exports){
"use strict";require("./_string-html")("fontcolor",function(t){return function fontcolor(o){return t(this,"font","color",o)}});

},{"./_string-html":203}],336:[function(require,module,exports){
"use strict";require("./_string-html")("fontsize",function(t){return function fontsize(n){return t(this,"font","size",n)}});

},{"./_string-html":203}],337:[function(require,module,exports){
var $export=require("./_export"),toAbsoluteIndex=require("./_to-absolute-index"),fromCharCode=String.fromCharCode,$fromCodePoint=String.fromCodePoint;$export($export.S+$export.F*(!!$fromCodePoint&&1!=$fromCodePoint.length),"String",{fromCodePoint:function fromCodePoint(o){for(var r,e=[],t=arguments.length,n=0;t>n;){if(r=+arguments[n++],toAbsoluteIndex(r,1114111)!==r)throw RangeError(r+" is not a valid code point");e.push(r<65536?fromCharCode(r):fromCharCode(55296+((r-=65536)>>10),r%1024+56320))}return e.join("")}});

},{"./_export":131,"./_to-absolute-index":209}],338:[function(require,module,exports){
"use strict";var $export=require("./_export"),context=require("./_string-context"),INCLUDES="includes";$export($export.P+$export.F*require("./_fails-is-regexp")(INCLUDES),"String",{includes:function includes(e){return!!~context(this,e,INCLUDES).indexOf(e,arguments.length>1?arguments[1]:void 0)}});

},{"./_export":131,"./_fails-is-regexp":132,"./_string-context":202}],339:[function(require,module,exports){
"use strict";require("./_string-html")("italics",function(i){return function italics(){return i(this,"i","","")}});

},{"./_string-html":203}],340:[function(require,module,exports){
"use strict";var $at=require("./_string-at")(!0);require("./_iter-define")(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,i=this._t,e=this._i;return e>=i.length?{value:void 0,done:!0}:(t=$at(i,e),this._i+=t.length,{value:t,done:!1})});

},{"./_iter-define":153,"./_string-at":201}],341:[function(require,module,exports){
"use strict";require("./_string-html")("link",function(n){return function link(r){return n(this,"a","href",r)}});

},{"./_string-html":203}],342:[function(require,module,exports){
var $export=require("./_export"),toIObject=require("./_to-iobject"),toLength=require("./_to-length");$export($export.S,"String",{raw:function raw(t){for(var r=toIObject(t.raw),e=toLength(r.length),o=arguments.length,n=[],i=0;e>i;)n.push(String(r[i++])),i<o&&n.push(String(arguments[i]));return n.join("")}});

},{"./_export":131,"./_to-iobject":212,"./_to-length":213}],343:[function(require,module,exports){
var $export=require("./_export");$export($export.P,"String",{repeat:require("./_string-repeat")});

},{"./_export":131,"./_string-repeat":205}],344:[function(require,module,exports){
"use strict";require("./_string-html")("small",function(t){return function small(){return t(this,"small","","")}});

},{"./_string-html":203}],345:[function(require,module,exports){
"use strict";var $export=require("./_export"),toLength=require("./_to-length"),context=require("./_string-context"),STARTS_WITH="startsWith",$startsWith=""[STARTS_WITH];$export($export.P+$export.F*require("./_fails-is-regexp")(STARTS_WITH),"String",{startsWith:function startsWith(t){var r=context(this,t,STARTS_WITH),e=toLength(Math.min(arguments.length>1?arguments[1]:void 0,r.length)),i=String(t);return $startsWith?$startsWith.call(r,i,e):r.slice(e,e+i.length)===i}});

},{"./_export":131,"./_fails-is-regexp":132,"./_string-context":202,"./_to-length":213}],346:[function(require,module,exports){
"use strict";require("./_string-html")("strike",function(t){return function strike(){return t(this,"strike","","")}});

},{"./_string-html":203}],347:[function(require,module,exports){
"use strict";require("./_string-html")("sub",function(t){return function sub(){return t(this,"sub","","")}});

},{"./_string-html":203}],348:[function(require,module,exports){
"use strict";require("./_string-html")("sup",function(t){return function sup(){return t(this,"sup","","")}});

},{"./_string-html":203}],349:[function(require,module,exports){
"use strict";require("./_string-trim")("trim",function(r){return function trim(){return r(this,3)}});

},{"./_string-trim":206}],350:[function(require,module,exports){
"use strict";var global=require("./_global"),has=require("./_has"),DESCRIPTORS=require("./_descriptors"),$export=require("./_export"),redefine=require("./_redefine"),META=require("./_meta").KEY,$fails=require("./_fails"),shared=require("./_shared"),setToStringTag=require("./_set-to-string-tag"),uid=require("./_uid"),wks=require("./_wks"),wksExt=require("./_wks-ext"),wksDefine=require("./_wks-define"),enumKeys=require("./_enum-keys"),isArray=require("./_is-array"),anObject=require("./_an-object"),isObject=require("./_is-object"),toIObject=require("./_to-iobject"),toPrimitive=require("./_to-primitive"),createDesc=require("./_property-desc"),_create=require("./_object-create"),gOPNExt=require("./_object-gopn-ext"),$GOPD=require("./_object-gopd"),$DP=require("./_object-dp"),$keys=require("./_object-keys"),gOPD=$GOPD.f,dP=$DP.f,gOPN=gOPNExt.f,$Symbol=global.Symbol,$JSON=global.JSON,_stringify=$JSON&&$JSON.stringify,PROTOTYPE="prototype",HIDDEN=wks("_hidden"),TO_PRIMITIVE=wks("toPrimitive"),isEnum={}.propertyIsEnumerable,SymbolRegistry=shared("symbol-registry"),AllSymbols=shared("symbols"),OPSymbols=shared("op-symbols"),ObjectProto=Object[PROTOTYPE],USE_NATIVE="function"==typeof $Symbol,QObject=global.QObject,setter=!QObject||!QObject[PROTOTYPE]||!QObject[PROTOTYPE].findChild,setSymbolDesc=DESCRIPTORS&&$fails(function(){return 7!=_create(dP({},"a",{get:function(){return dP(this,"a",{value:7}).a}})).a})?function(e,r,t){var o=gOPD(ObjectProto,r);o&&delete ObjectProto[r],dP(e,r,t),o&&e!==ObjectProto&&dP(ObjectProto,r,o)}:dP,wrap=function(e){var r=AllSymbols[e]=_create($Symbol[PROTOTYPE]);return r._k=e,r},isSymbol=USE_NATIVE&&"symbol"==typeof $Symbol.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof $Symbol},$defineProperty=function defineProperty(e,r,t){return e===ObjectProto&&$defineProperty(OPSymbols,r,t),anObject(e),r=toPrimitive(r,!0),anObject(t),has(AllSymbols,r)?(t.enumerable?(has(e,HIDDEN)&&e[HIDDEN][r]&&(e[HIDDEN][r]=!1),t=_create(t,{enumerable:createDesc(0,!1)})):(has(e,HIDDEN)||dP(e,HIDDEN,createDesc(1,{})),e[HIDDEN][r]=!0),setSymbolDesc(e,r,t)):dP(e,r,t)},$defineProperties=function defineProperties(e,r){anObject(e);for(var t,o=enumKeys(r=toIObject(r)),i=0,s=o.length;s>i;)$defineProperty(e,t=o[i++],r[t]);return e},$create=function create(e,r){return void 0===r?_create(e):$defineProperties(_create(e),r)},$propertyIsEnumerable=function propertyIsEnumerable(e){var r=isEnum.call(this,e=toPrimitive(e,!0));return!(this===ObjectProto&&has(AllSymbols,e)&&!has(OPSymbols,e))&&(!(r||!has(this,e)||!has(AllSymbols,e)||has(this,HIDDEN)&&this[HIDDEN][e])||r)},$getOwnPropertyDescriptor=function getOwnPropertyDescriptor(e,r){if(e=toIObject(e),r=toPrimitive(r,!0),e!==ObjectProto||!has(AllSymbols,r)||has(OPSymbols,r)){var t=gOPD(e,r);return!t||!has(AllSymbols,r)||has(e,HIDDEN)&&e[HIDDEN][r]||(t.enumerable=!0),t}},$getOwnPropertyNames=function getOwnPropertyNames(e){for(var r,t=gOPN(toIObject(e)),o=[],i=0;t.length>i;)has(AllSymbols,r=t[i++])||r==HIDDEN||r==META||o.push(r);return o},$getOwnPropertySymbols=function getOwnPropertySymbols(e){for(var r,t=e===ObjectProto,o=gOPN(t?OPSymbols:toIObject(e)),i=[],s=0;o.length>s;)!has(AllSymbols,r=o[s++])||t&&!has(ObjectProto,r)||i.push(AllSymbols[r]);return i};USE_NATIVE||(redefine(($Symbol=function Symbol(){if(this instanceof $Symbol)throw TypeError("Symbol is not a constructor!");var e=uid(arguments.length>0?arguments[0]:void 0),r=function(t){this===ObjectProto&&r.call(OPSymbols,t),has(this,HIDDEN)&&has(this[HIDDEN],e)&&(this[HIDDEN][e]=!1),setSymbolDesc(this,e,createDesc(1,t))};return DESCRIPTORS&&setter&&setSymbolDesc(ObjectProto,e,{configurable:!0,set:r}),wrap(e)})[PROTOTYPE],"toString",function toString(){return this._k}),$GOPD.f=$getOwnPropertyDescriptor,$DP.f=$defineProperty,require("./_object-gopn").f=gOPNExt.f=$getOwnPropertyNames,require("./_object-pie").f=$propertyIsEnumerable,require("./_object-gops").f=$getOwnPropertySymbols,DESCRIPTORS&&!require("./_library")&&redefine(ObjectProto,"propertyIsEnumerable",$propertyIsEnumerable,!0),wksExt.f=function(e){return wrap(wks(e))}),$export($export.G+$export.W+$export.F*!USE_NATIVE,{Symbol:$Symbol});for(var es6Symbols="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),j=0;es6Symbols.length>j;)wks(es6Symbols[j++]);for(var wellKnownSymbols=$keys(wks.store),k=0;wellKnownSymbols.length>k;)wksDefine(wellKnownSymbols[k++]);$export($export.S+$export.F*!USE_NATIVE,"Symbol",{for:function(e){return has(SymbolRegistry,e+="")?SymbolRegistry[e]:SymbolRegistry[e]=$Symbol(e)},keyFor:function keyFor(e){if(!isSymbol(e))throw TypeError(e+" is not a symbol!");for(var r in SymbolRegistry)if(SymbolRegistry[r]===e)return r},useSetter:function(){setter=!0},useSimple:function(){setter=!1}}),$export($export.S+$export.F*!USE_NATIVE,"Object",{create:$create,defineProperty:$defineProperty,defineProperties:$defineProperties,getOwnPropertyDescriptor:$getOwnPropertyDescriptor,getOwnPropertyNames:$getOwnPropertyNames,getOwnPropertySymbols:$getOwnPropertySymbols}),$JSON&&$export($export.S+$export.F*(!USE_NATIVE||$fails(function(){var e=$Symbol();return"[null]"!=_stringify([e])||"{}"!=_stringify({a:e})||"{}"!=_stringify(Object(e))})),"JSON",{stringify:function stringify(e){for(var r,t,o=[e],i=1;arguments.length>i;)o.push(arguments[i++]);if(t=r=o[1],(isObject(r)||void 0!==e)&&!isSymbol(e))return isArray(r)||(r=function(e,r){if("function"==typeof t&&(r=t.call(this,e,r)),!isSymbol(r))return r}),o[1]=r,_stringify.apply($JSON,o)}}),$Symbol[PROTOTYPE][TO_PRIMITIVE]||require("./_hide")($Symbol[PROTOTYPE],TO_PRIMITIVE,$Symbol[PROTOTYPE].valueOf),setToStringTag($Symbol,"Symbol"),setToStringTag(Math,"Math",!0),setToStringTag(global.JSON,"JSON",!0);

},{"./_an-object":105,"./_descriptors":127,"./_enum-keys":130,"./_export":131,"./_fails":133,"./_global":138,"./_has":139,"./_hide":140,"./_is-array":147,"./_is-object":149,"./_library":157,"./_meta":163,"./_object-create":168,"./_object-dp":169,"./_object-gopd":172,"./_object-gopn":174,"./_object-gopn-ext":173,"./_object-gops":175,"./_object-keys":178,"./_object-pie":179,"./_property-desc":187,"./_redefine":189,"./_set-to-string-tag":196,"./_shared":198,"./_to-iobject":212,"./_to-primitive":215,"./_uid":219,"./_wks":224,"./_wks-define":222,"./_wks-ext":223}],351:[function(require,module,exports){
"use strict";var $export=require("./_export"),$typed=require("./_typed"),buffer=require("./_typed-buffer"),anObject=require("./_an-object"),toAbsoluteIndex=require("./_to-absolute-index"),toLength=require("./_to-length"),isObject=require("./_is-object"),ArrayBuffer=require("./_global").ArrayBuffer,speciesConstructor=require("./_species-constructor"),$ArrayBuffer=buffer.ArrayBuffer,$DataView=buffer.DataView,$isView=$typed.ABV&&ArrayBuffer.isView,$slice=$ArrayBuffer.prototype.slice,VIEW=$typed.VIEW,ARRAY_BUFFER="ArrayBuffer";$export($export.G+$export.W+$export.F*(ArrayBuffer!==$ArrayBuffer),{ArrayBuffer:$ArrayBuffer}),$export($export.S+$export.F*!$typed.CONSTR,ARRAY_BUFFER,{isView:function isView(e){return $isView&&$isView(e)||isObject(e)&&VIEW in e}}),$export($export.P+$export.U+$export.F*require("./_fails")(function(){return!new $ArrayBuffer(2).slice(1,void 0).byteLength}),ARRAY_BUFFER,{slice:function slice(e,r){if(void 0!==$slice&&void 0===r)return $slice.call(anObject(this),e);for(var t=anObject(this).byteLength,i=toAbsoluteIndex(e,t),o=toAbsoluteIndex(void 0===r?t:r,t),u=new(speciesConstructor(this,$ArrayBuffer))(toLength(o-i)),f=new $DataView(this),s=new $DataView(u),n=0;i<o;)s.setUint8(n++,f.getUint8(i++));return u}}),require("./_set-species")(ARRAY_BUFFER);

},{"./_an-object":105,"./_export":131,"./_fails":133,"./_global":138,"./_is-object":149,"./_set-species":195,"./_species-constructor":199,"./_to-absolute-index":209,"./_to-length":213,"./_typed":218,"./_typed-buffer":217}],352:[function(require,module,exports){
var $export=require("./_export");$export($export.G+$export.W+$export.F*!require("./_typed").ABV,{DataView:require("./_typed-buffer").DataView});

},{"./_export":131,"./_typed":218,"./_typed-buffer":217}],353:[function(require,module,exports){
require("./_typed-array")("Float32",4,function(r){return function Float32Array(t,n,a){return r(this,t,n,a)}});

},{"./_typed-array":216}],354:[function(require,module,exports){
require("./_typed-array")("Float64",8,function(r){return function Float64Array(t,n,a){return r(this,t,n,a)}});

},{"./_typed-array":216}],355:[function(require,module,exports){
require("./_typed-array")("Int16",2,function(r){return function Int16Array(n,t,e){return r(this,n,t,e)}});

},{"./_typed-array":216}],356:[function(require,module,exports){
require("./_typed-array")("Int32",4,function(r){return function Int32Array(n,t,e){return r(this,n,t,e)}});

},{"./_typed-array":216}],357:[function(require,module,exports){
require("./_typed-array")("Int8",1,function(r){return function Int8Array(n,t,e){return r(this,n,t,e)}});

},{"./_typed-array":216}],358:[function(require,module,exports){
require("./_typed-array")("Uint16",2,function(r){return function Uint16Array(n,t,i){return r(this,n,t,i)}});

},{"./_typed-array":216}],359:[function(require,module,exports){
require("./_typed-array")("Uint32",4,function(r){return function Uint32Array(n,t,i){return r(this,n,t,i)}});

},{"./_typed-array":216}],360:[function(require,module,exports){
require("./_typed-array")("Uint8",1,function(r){return function Uint8Array(n,t,i){return r(this,n,t,i)}});

},{"./_typed-array":216}],361:[function(require,module,exports){
require("./_typed-array")("Uint8",1,function(r){return function Uint8ClampedArray(n,t,e){return r(this,n,t,e)}},!0);

},{"./_typed-array":216}],362:[function(require,module,exports){
"use strict";var InternalMap,each=require("./_array-methods")(0),redefine=require("./_redefine"),meta=require("./_meta"),assign=require("./_object-assign"),weak=require("./_collection-weak"),isObject=require("./_is-object"),fails=require("./_fails"),validate=require("./_validate-collection"),WEAK_MAP="WeakMap",getWeak=meta.getWeak,isExtensible=Object.isExtensible,uncaughtFrozenStore=weak.ufstore,tmp={},wrapper=function(e){return function WeakMap(){return e(this,arguments.length>0?arguments[0]:void 0)}},methods={get:function get(e){if(isObject(e)){var t=getWeak(e);return!0===t?uncaughtFrozenStore(validate(this,WEAK_MAP)).get(e):t?t[this._i]:void 0}},set:function set(e,t){return weak.def(validate(this,WEAK_MAP),e,t)}},$WeakMap=module.exports=require("./_collection")(WEAK_MAP,wrapper,methods,weak,!0,!0);fails(function(){return 7!=(new $WeakMap).set((Object.freeze||Object)(tmp),7).get(tmp)})&&(assign((InternalMap=weak.getConstructor(wrapper,WEAK_MAP)).prototype,methods),meta.NEED=!0,each(["delete","has","get","set"],function(e){var t=$WeakMap.prototype,r=t[e];redefine(t,e,function(t,a){if(isObject(t)&&!isExtensible(t)){this._f||(this._f=new InternalMap);var i=this._f[e](t,a);return"set"==e?this:i}return r.call(this,t,a)})}));

},{"./_array-methods":110,"./_collection":120,"./_collection-weak":119,"./_fails":133,"./_is-object":149,"./_meta":163,"./_object-assign":167,"./_redefine":189,"./_validate-collection":221}],363:[function(require,module,exports){
"use strict";var weak=require("./_collection-weak"),validate=require("./_validate-collection"),WEAK_SET="WeakSet";require("./_collection")(WEAK_SET,function(e){return function WeakSet(){return e(this,arguments.length>0?arguments[0]:void 0)}},{add:function add(e){return weak.def(validate(this,WEAK_SET),e,!0)}},weak,!1,!0);

},{"./_collection":120,"./_collection-weak":119,"./_validate-collection":221}],364:[function(require,module,exports){
"use strict";var $export=require("./_export"),flattenIntoArray=require("./_flatten-into-array"),toObject=require("./_to-object"),toLength=require("./_to-length"),aFunction=require("./_a-function"),arraySpeciesCreate=require("./_array-species-create");$export($export.P,"Array",{flatMap:function flatMap(e){var t,r,a=toObject(this);return aFunction(e),t=toLength(a.length),r=arraySpeciesCreate(a,0),flattenIntoArray(r,a,a,t,0,1,e,arguments[1]),r}}),require("./_add-to-unscopables")("flatMap");

},{"./_a-function":101,"./_add-to-unscopables":103,"./_array-species-create":113,"./_export":131,"./_flatten-into-array":136,"./_to-length":213,"./_to-object":214}],365:[function(require,module,exports){
"use strict";var $export=require("./_export"),flattenIntoArray=require("./_flatten-into-array"),toObject=require("./_to-object"),toLength=require("./_to-length"),toInteger=require("./_to-integer"),arraySpeciesCreate=require("./_array-species-create");$export($export.P,"Array",{flatten:function flatten(){var e=arguments[0],t=toObject(this),r=toLength(t.length),a=arraySpeciesCreate(t,0);return flattenIntoArray(a,t,t,r,0,void 0===e?1:toInteger(e)),a}}),require("./_add-to-unscopables")("flatten");

},{"./_add-to-unscopables":103,"./_array-species-create":113,"./_export":131,"./_flatten-into-array":136,"./_to-integer":211,"./_to-length":213,"./_to-object":214}],366:[function(require,module,exports){
"use strict";var $export=require("./_export"),$includes=require("./_array-includes")(!0);$export($export.P,"Array",{includes:function includes(e){return $includes(this,e,arguments.length>1?arguments[1]:void 0)}}),require("./_add-to-unscopables")("includes");

},{"./_add-to-unscopables":103,"./_array-includes":109,"./_export":131}],367:[function(require,module,exports){
var $export=require("./_export"),microtask=require("./_microtask")(),process=require("./_global").process,isNode="process"==require("./_cof")(process);$export($export.G,{asap:function asap(r){var e=isNode&&process.domain;microtask(e?e.bind(r):r)}});

},{"./_cof":116,"./_export":131,"./_global":138,"./_microtask":165}],368:[function(require,module,exports){
var $export=require("./_export"),cof=require("./_cof");$export($export.S,"Error",{isError:function isError(r){return"Error"===cof(r)}});

},{"./_cof":116,"./_export":131}],369:[function(require,module,exports){
var $export=require("./_export");$export($export.G,{global:require("./_global")});

},{"./_export":131,"./_global":138}],370:[function(require,module,exports){
require("./_set-collection-from")("Map");

},{"./_set-collection-from":192}],371:[function(require,module,exports){
require("./_set-collection-of")("Map");

},{"./_set-collection-of":193}],372:[function(require,module,exports){
var $export=require("./_export");$export($export.P+$export.R,"Map",{toJSON:require("./_collection-to-json")("Map")});

},{"./_collection-to-json":118,"./_export":131}],373:[function(require,module,exports){
var $export=require("./_export");$export($export.S,"Math",{clamp:function clamp(r,t,a){return Math.min(a,Math.max(t,r))}});

},{"./_export":131}],374:[function(require,module,exports){
var $export=require("./_export");$export($export.S,"Math",{DEG_PER_RAD:Math.PI/180});

},{"./_export":131}],375:[function(require,module,exports){
var $export=require("./_export"),RAD_PER_DEG=180/Math.PI;$export($export.S,"Math",{degrees:function degrees(e){return e*RAD_PER_DEG}});

},{"./_export":131}],376:[function(require,module,exports){
var $export=require("./_export"),scale=require("./_math-scale"),fround=require("./_math-fround");$export($export.S,"Math",{fscale:function fscale(e,r,a,t,o){return fround(scale(e,r,a,t,o))}});

},{"./_export":131,"./_math-fround":159,"./_math-scale":161}],377:[function(require,module,exports){
var $export=require("./_export");$export($export.S,"Math",{iaddh:function iaddh(r,e,t,a){var o=r>>>0,d=t>>>0;return(e>>>0)+(a>>>0)+((o&d|(o|d)&~(o+d>>>0))>>>31)|0}});

},{"./_export":131}],378:[function(require,module,exports){
var $export=require("./_export");$export($export.S,"Math",{imulh:function imulh(r,e){var t=+r,o=+e,u=65535&t,i=65535&o,p=t>>16,x=o>>16,a=(p*i>>>0)+(u*i>>>16);return p*x+(a>>16)+((u*x>>>0)+(65535&a)>>16)}});

},{"./_export":131}],379:[function(require,module,exports){
var $export=require("./_export");$export($export.S,"Math",{isubh:function isubh(r,e,t,o){var u=r>>>0,i=t>>>0;return(e>>>0)-(o>>>0)-((~u&i|~(u^i)&u-i>>>0)>>>31)|0}});

},{"./_export":131}],380:[function(require,module,exports){
var $export=require("./_export");$export($export.S,"Math",{RAD_PER_DEG:180/Math.PI});

},{"./_export":131}],381:[function(require,module,exports){
var $export=require("./_export"),DEG_PER_RAD=Math.PI/180;$export($export.S,"Math",{radians:function radians(r){return r*DEG_PER_RAD}});

},{"./_export":131}],382:[function(require,module,exports){
var $export=require("./_export");$export($export.S,"Math",{scale:require("./_math-scale")});

},{"./_export":131,"./_math-scale":161}],383:[function(require,module,exports){
var $export=require("./_export");$export($export.S,"Math",{signbit:function signbit(r){return(r=+r)!=r?r:0==r?1/r==1/0:r>0}});

},{"./_export":131}],384:[function(require,module,exports){
var $export=require("./_export");$export($export.S,"Math",{umulh:function umulh(r,e){var t=+r,u=+e,o=65535&t,p=65535&u,x=t>>>16,a=u>>>16,h=(x*p>>>0)+(o*p>>>16);return x*a+(h>>>16)+((o*a>>>0)+(65535&h)>>>16)}});

},{"./_export":131}],385:[function(require,module,exports){
"use strict";var $export=require("./_export"),toObject=require("./_to-object"),aFunction=require("./_a-function"),$defineProperty=require("./_object-dp");require("./_descriptors")&&$export($export.P+require("./_object-forced-pam"),"Object",{__defineGetter__:function __defineGetter__(e,r){$defineProperty.f(toObject(this),e,{get:aFunction(r),enumerable:!0,configurable:!0})}});

},{"./_a-function":101,"./_descriptors":127,"./_export":131,"./_object-dp":169,"./_object-forced-pam":171,"./_to-object":214}],386:[function(require,module,exports){
"use strict";var $export=require("./_export"),toObject=require("./_to-object"),aFunction=require("./_a-function"),$defineProperty=require("./_object-dp");require("./_descriptors")&&$export($export.P+require("./_object-forced-pam"),"Object",{__defineSetter__:function __defineSetter__(e,r){$defineProperty.f(toObject(this),e,{set:aFunction(r),enumerable:!0,configurable:!0})}});

},{"./_a-function":101,"./_descriptors":127,"./_export":131,"./_object-dp":169,"./_object-forced-pam":171,"./_to-object":214}],387:[function(require,module,exports){
var $export=require("./_export"),$entries=require("./_object-to-array")(!0);$export($export.S,"Object",{entries:function entries(e){return $entries(e)}});

},{"./_export":131,"./_object-to-array":181}],388:[function(require,module,exports){
var $export=require("./_export"),ownKeys=require("./_own-keys"),toIObject=require("./_to-iobject"),gOPD=require("./_object-gopd"),createProperty=require("./_create-property");$export($export.S,"Object",{getOwnPropertyDescriptors:function getOwnPropertyDescriptors(e){for(var r,t,o=toIObject(e),p=gOPD.f,c=ownKeys(o),i={},n=0;c.length>n;)void 0!==(t=p(o,r=c[n++]))&&createProperty(i,r,t);return i}});

},{"./_create-property":122,"./_export":131,"./_object-gopd":172,"./_own-keys":182,"./_to-iobject":212}],389:[function(require,module,exports){
"use strict";var $export=require("./_export"),toObject=require("./_to-object"),toPrimitive=require("./_to-primitive"),getPrototypeOf=require("./_object-gpo"),getOwnPropertyDescriptor=require("./_object-gopd").f;require("./_descriptors")&&$export($export.P+require("./_object-forced-pam"),"Object",{__lookupGetter__:function __lookupGetter__(e){var t,r=toObject(this),o=toPrimitive(e,!0);do{if(t=getOwnPropertyDescriptor(r,o))return t.get}while(r=getPrototypeOf(r))}});

},{"./_descriptors":127,"./_export":131,"./_object-forced-pam":171,"./_object-gopd":172,"./_object-gpo":176,"./_to-object":214,"./_to-primitive":215}],390:[function(require,module,exports){
"use strict";var $export=require("./_export"),toObject=require("./_to-object"),toPrimitive=require("./_to-primitive"),getPrototypeOf=require("./_object-gpo"),getOwnPropertyDescriptor=require("./_object-gopd").f;require("./_descriptors")&&$export($export.P+require("./_object-forced-pam"),"Object",{__lookupSetter__:function __lookupSetter__(e){var t,r=toObject(this),o=toPrimitive(e,!0);do{if(t=getOwnPropertyDescriptor(r,o))return t.set}while(r=getPrototypeOf(r))}});

},{"./_descriptors":127,"./_export":131,"./_object-forced-pam":171,"./_object-gopd":172,"./_object-gpo":176,"./_to-object":214,"./_to-primitive":215}],391:[function(require,module,exports){
var $export=require("./_export"),$values=require("./_object-to-array")(!1);$export($export.S,"Object",{values:function values(e){return $values(e)}});

},{"./_export":131,"./_object-to-array":181}],392:[function(require,module,exports){
"use strict";var $export=require("./_export"),global=require("./_global"),core=require("./_core"),microtask=require("./_microtask")(),OBSERVABLE=require("./_wks")("observable"),aFunction=require("./_a-function"),anObject=require("./_an-object"),anInstance=require("./_an-instance"),redefineAll=require("./_redefine-all"),hide=require("./_hide"),forOf=require("./_for-of"),RETURN=forOf.RETURN,getMethod=function(r){return null==r?void 0:aFunction(r)},cleanupSubscription=function(r){var e=r._c;e&&(r._c=void 0,e())},subscriptionClosed=function(r){return void 0===r._o},closeSubscription=function(r){subscriptionClosed(r)||(r._o=void 0,cleanupSubscription(r))},Subscription=function(r,e){anObject(r),this._c=void 0,this._o=r,r=new SubscriptionObserver(this);try{var t=e(r),n=t;null!=t&&("function"==typeof t.unsubscribe?t=function(){n.unsubscribe()}:aFunction(t),this._c=t)}catch(e){return void r.error(e)}subscriptionClosed(this)&&cleanupSubscription(this)};Subscription.prototype=redefineAll({},{unsubscribe:function unsubscribe(){closeSubscription(this)}});var SubscriptionObserver=function(r){this._s=r};SubscriptionObserver.prototype=redefineAll({},{next:function next(r){var e=this._s;if(!subscriptionClosed(e)){var t=e._o;try{var n=getMethod(t.next);if(n)return n.call(t,r)}catch(r){try{closeSubscription(e)}finally{throw r}}}},error:function error(r){var e=this._s;if(subscriptionClosed(e))throw r;var t=e._o;e._o=void 0;try{var n=getMethod(t.error);if(!n)throw r;r=n.call(t,r)}catch(r){try{cleanupSubscription(e)}finally{throw r}}return cleanupSubscription(e),r},complete:function complete(r){var e=this._s;if(!subscriptionClosed(e)){var t=e._o;e._o=void 0;try{var n=getMethod(t.complete);r=n?n.call(t,r):void 0}catch(r){try{cleanupSubscription(e)}finally{throw r}}return cleanupSubscription(e),r}}});var $Observable=function Observable(r){anInstance(this,$Observable,"Observable","_f")._f=aFunction(r)};redefineAll($Observable.prototype,{subscribe:function subscribe(r){return new Subscription(r,this._f)},forEach:function forEach(r){var e=this;return new(core.Promise||global.Promise)(function(t,n){aFunction(r);var i=e.subscribe({next:function(e){try{return r(e)}catch(r){n(r),i.unsubscribe()}},error:n,complete:t})})}}),redefineAll($Observable,{from:function from(r){var e="function"==typeof this?this:$Observable,t=getMethod(anObject(r)[OBSERVABLE]);if(t){var n=anObject(t.call(r));return n.constructor===e?n:new e(function(r){return n.subscribe(r)})}return new e(function(e){var t=!1;return microtask(function(){if(!t){try{if(forOf(r,!1,function(r){if(e.next(r),t)return RETURN})===RETURN)return}catch(r){if(t)throw r;return void e.error(r)}e.complete()}}),function(){t=!0}})},of:function of(){for(var r=0,e=arguments.length,t=new Array(e);r<e;)t[r]=arguments[r++];return new("function"==typeof this?this:$Observable)(function(r){var e=!1;return microtask(function(){if(!e){for(var n=0;n<t.length;++n)if(r.next(t[n]),e)return;r.complete()}}),function(){e=!0}})}}),hide($Observable.prototype,OBSERVABLE,function(){return this}),$export($export.G,{Observable:$Observable}),require("./_set-species")("Observable");

},{"./_a-function":101,"./_an-instance":104,"./_an-object":105,"./_core":121,"./_export":131,"./_for-of":137,"./_global":138,"./_hide":140,"./_microtask":165,"./_redefine-all":188,"./_set-species":195,"./_wks":224}],393:[function(require,module,exports){
"use strict";var $export=require("./_export"),core=require("./_core"),global=require("./_global"),speciesConstructor=require("./_species-constructor"),promiseResolve=require("./_promise-resolve");$export($export.P+$export.R,"Promise",{finally:function(e){var r=speciesConstructor(this,core.Promise||global.Promise),o="function"==typeof e;return this.then(o?function(o){return promiseResolve(r,e()).then(function(){return o})}:e,o?function(o){return promiseResolve(r,e()).then(function(){throw o})}:e)}});

},{"./_core":121,"./_export":131,"./_global":138,"./_promise-resolve":186,"./_species-constructor":199}],394:[function(require,module,exports){
"use strict";var $export=require("./_export"),newPromiseCapability=require("./_new-promise-capability"),perform=require("./_perform");$export($export.S,"Promise",{try:function(r){var e=newPromiseCapability.f(this),i=perform(r);return(i.e?e.reject:e.resolve)(i.v),e.promise}});

},{"./_export":131,"./_new-promise-capability":166,"./_perform":185}],395:[function(require,module,exports){
var metadata=require("./_metadata"),anObject=require("./_an-object"),toMetaKey=metadata.key,ordinaryDefineOwnMetadata=metadata.set;metadata.exp({defineMetadata:function defineMetadata(a,e,t,d){ordinaryDefineOwnMetadata(a,e,anObject(t),toMetaKey(d))}});

},{"./_an-object":105,"./_metadata":164}],396:[function(require,module,exports){
var metadata=require("./_metadata"),anObject=require("./_an-object"),toMetaKey=metadata.key,getOrCreateMetadataMap=metadata.map,store=metadata.store;metadata.exp({deleteMetadata:function deleteMetadata(e,t){var a=arguments.length<3?void 0:toMetaKey(arguments[2]),r=getOrCreateMetadataMap(anObject(t),a,!1);if(void 0===r||!r.delete(e))return!1;if(r.size)return!0;var d=store.get(t);return d.delete(a),!!d.size||store.delete(t)}});

},{"./_an-object":105,"./_metadata":164}],397:[function(require,module,exports){
var Set=require("./es6.set"),from=require("./_array-from-iterable"),metadata=require("./_metadata"),anObject=require("./_an-object"),getPrototypeOf=require("./_object-gpo"),ordinaryOwnMetadataKeys=metadata.keys,toMetaKey=metadata.key,ordinaryMetadataKeys=function(e,a){var t=ordinaryOwnMetadataKeys(e,a),r=getPrototypeOf(e);if(null===r)return t;var n=ordinaryMetadataKeys(r,a);return n.length?t.length?from(new Set(t.concat(n))):n:t};metadata.exp({getMetadataKeys:function getMetadataKeys(e){return ordinaryMetadataKeys(anObject(e),arguments.length<2?void 0:toMetaKey(arguments[1]))}});

},{"./_an-object":105,"./_array-from-iterable":108,"./_metadata":164,"./_object-gpo":176,"./es6.set":327}],398:[function(require,module,exports){
var metadata=require("./_metadata"),anObject=require("./_an-object"),getPrototypeOf=require("./_object-gpo"),ordinaryHasOwnMetadata=metadata.has,ordinaryGetOwnMetadata=metadata.get,toMetaKey=metadata.key,ordinaryGetMetadata=function(a,t,e){if(ordinaryHasOwnMetadata(a,t,e))return ordinaryGetOwnMetadata(a,t,e);var r=getPrototypeOf(t);return null!==r?ordinaryGetMetadata(a,r,e):void 0};metadata.exp({getMetadata:function getMetadata(a,t){return ordinaryGetMetadata(a,anObject(t),arguments.length<3?void 0:toMetaKey(arguments[2]))}});

},{"./_an-object":105,"./_metadata":164,"./_object-gpo":176}],399:[function(require,module,exports){
var metadata=require("./_metadata"),anObject=require("./_an-object"),ordinaryOwnMetadataKeys=metadata.keys,toMetaKey=metadata.key;metadata.exp({getOwnMetadataKeys:function getOwnMetadataKeys(a){return ordinaryOwnMetadataKeys(anObject(a),arguments.length<2?void 0:toMetaKey(arguments[1]))}});

},{"./_an-object":105,"./_metadata":164}],400:[function(require,module,exports){
var metadata=require("./_metadata"),anObject=require("./_an-object"),ordinaryGetOwnMetadata=metadata.get,toMetaKey=metadata.key;metadata.exp({getOwnMetadata:function getOwnMetadata(a,t){return ordinaryGetOwnMetadata(a,anObject(t),arguments.length<3?void 0:toMetaKey(arguments[2]))}});

},{"./_an-object":105,"./_metadata":164}],401:[function(require,module,exports){
var metadata=require("./_metadata"),anObject=require("./_an-object"),getPrototypeOf=require("./_object-gpo"),ordinaryHasOwnMetadata=metadata.has,toMetaKey=metadata.key,ordinaryHasMetadata=function(a,t,e){if(ordinaryHasOwnMetadata(a,t,e))return!0;var r=getPrototypeOf(t);return null!==r&&ordinaryHasMetadata(a,r,e)};metadata.exp({hasMetadata:function hasMetadata(a,t){return ordinaryHasMetadata(a,anObject(t),arguments.length<3?void 0:toMetaKey(arguments[2]))}});

},{"./_an-object":105,"./_metadata":164,"./_object-gpo":176}],402:[function(require,module,exports){
var metadata=require("./_metadata"),anObject=require("./_an-object"),ordinaryHasOwnMetadata=metadata.has,toMetaKey=metadata.key;metadata.exp({hasOwnMetadata:function hasOwnMetadata(a,t){return ordinaryHasOwnMetadata(a,anObject(t),arguments.length<3?void 0:toMetaKey(arguments[2]))}});

},{"./_an-object":105,"./_metadata":164}],403:[function(require,module,exports){
var $metadata=require("./_metadata"),anObject=require("./_an-object"),aFunction=require("./_a-function"),toMetaKey=$metadata.key,ordinaryDefineOwnMetadata=$metadata.set;$metadata.exp({metadata:function metadata(a,t){return function decorator(e,n){ordinaryDefineOwnMetadata(a,t,(void 0!==n?anObject:aFunction)(e),toMetaKey(n))}}});

},{"./_a-function":101,"./_an-object":105,"./_metadata":164}],404:[function(require,module,exports){
require("./_set-collection-from")("Set");

},{"./_set-collection-from":192}],405:[function(require,module,exports){
require("./_set-collection-of")("Set");

},{"./_set-collection-of":193}],406:[function(require,module,exports){
var $export=require("./_export");$export($export.P+$export.R,"Set",{toJSON:require("./_collection-to-json")("Set")});

},{"./_collection-to-json":118,"./_export":131}],407:[function(require,module,exports){
"use strict";var $export=require("./_export"),$at=require("./_string-at")(!0);$export($export.P,"String",{at:function at(t){return $at(this,t)}});

},{"./_export":131,"./_string-at":201}],408:[function(require,module,exports){
"use strict";var $export=require("./_export"),defined=require("./_defined"),toLength=require("./_to-length"),isRegExp=require("./_is-regexp"),getFlags=require("./_flags"),RegExpProto=RegExp.prototype,$RegExpStringIterator=function(e,r){this._r=e,this._s=r};require("./_iter-create")($RegExpStringIterator,"RegExp String",function next(){var e=this._r.exec(this._s);return{value:e,done:null===e}}),$export($export.P,"String",{matchAll:function matchAll(e){if(defined(this),!isRegExp(e))throw TypeError(e+" is not a regexp!");var r=String(this),t="flags"in RegExpProto?String(e.flags):getFlags.call(e),i=new RegExp(e.source,~t.indexOf("g")?t:"g"+t);return i.lastIndex=toLength(e.lastIndex),new $RegExpStringIterator(i,r)}});

},{"./_defined":126,"./_export":131,"./_flags":135,"./_is-regexp":150,"./_iter-create":152,"./_to-length":213}],409:[function(require,module,exports){
"use strict";var $export=require("./_export"),$pad=require("./_string-pad"),userAgent=require("./_user-agent");$export($export.P+$export.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent),"String",{padEnd:function padEnd(e){return $pad(this,e,arguments.length>1?arguments[1]:void 0,!1)}});

},{"./_export":131,"./_string-pad":204,"./_user-agent":220}],410:[function(require,module,exports){
"use strict";var $export=require("./_export"),$pad=require("./_string-pad"),userAgent=require("./_user-agent");$export($export.P+$export.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent),"String",{padStart:function padStart(r){return $pad(this,r,arguments.length>1?arguments[1]:void 0,!0)}});

},{"./_export":131,"./_string-pad":204,"./_user-agent":220}],411:[function(require,module,exports){
"use strict";require("./_string-trim")("trimLeft",function(t){return function trimLeft(){return t(this,1)}},"trimStart");

},{"./_string-trim":206}],412:[function(require,module,exports){
"use strict";require("./_string-trim")("trimRight",function(t){return function trimRight(){return t(this,2)}},"trimEnd");

},{"./_string-trim":206}],413:[function(require,module,exports){
require("./_wks-define")("asyncIterator");

},{"./_wks-define":222}],414:[function(require,module,exports){
require("./_wks-define")("observable");

},{"./_wks-define":222}],415:[function(require,module,exports){
var $export=require("./_export");$export($export.S,"System",{global:require("./_global")});

},{"./_export":131,"./_global":138}],416:[function(require,module,exports){
require("./_set-collection-from")("WeakMap");

},{"./_set-collection-from":192}],417:[function(require,module,exports){
require("./_set-collection-of")("WeakMap");

},{"./_set-collection-of":193}],418:[function(require,module,exports){
require("./_set-collection-from")("WeakSet");

},{"./_set-collection-from":192}],419:[function(require,module,exports){
require("./_set-collection-of")("WeakSet");

},{"./_set-collection-of":193}],420:[function(require,module,exports){
for(var $iterators=require("./es6.array.iterator"),getKeys=require("./_object-keys"),redefine=require("./_redefine"),global=require("./_global"),hide=require("./_hide"),Iterators=require("./_iterators"),wks=require("./_wks"),ITERATOR=wks("iterator"),TO_STRING_TAG=wks("toStringTag"),ArrayValues=Iterators.Array,DOMIterables={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},collections=getKeys(DOMIterables),i=0;i<collections.length;i++){var key,NAME=collections[i],explicit=DOMIterables[NAME],Collection=global[NAME],proto=Collection&&Collection.prototype;if(proto&&(proto[ITERATOR]||hide(proto,ITERATOR,ArrayValues),proto[TO_STRING_TAG]||hide(proto,TO_STRING_TAG,NAME),Iterators[NAME]=ArrayValues,explicit))for(key in $iterators)proto[key]||redefine(proto,key,$iterators[key],!0)}

},{"./_global":138,"./_hide":140,"./_iterators":156,"./_object-keys":178,"./_redefine":189,"./_wks":224,"./es6.array.iterator":237}],421:[function(require,module,exports){
var $export=require("./_export"),$task=require("./_task");$export($export.G+$export.B,{setImmediate:$task.set,clearImmediate:$task.clear});

},{"./_export":131,"./_task":208}],422:[function(require,module,exports){
var global=require("./_global"),$export=require("./_export"),userAgent=require("./_user-agent"),slice=[].slice,MSIE=/MSIE .\./.test(userAgent),wrap=function(e){return function(t,r){var n=arguments.length>2,o=!!n&&slice.call(arguments,2);return e(n?function(){("function"==typeof t?t:Function(t)).apply(this,o)}:t,r)}};$export($export.G+$export.B+$export.F*MSIE,{setTimeout:wrap(global.setTimeout),setInterval:wrap(global.setInterval)});

},{"./_export":131,"./_global":138,"./_user-agent":220}],423:[function(require,module,exports){
require("./modules/es6.symbol"),require("./modules/es6.object.create"),require("./modules/es6.object.define-property"),require("./modules/es6.object.define-properties"),require("./modules/es6.object.get-own-property-descriptor"),require("./modules/es6.object.get-prototype-of"),require("./modules/es6.object.keys"),require("./modules/es6.object.get-own-property-names"),require("./modules/es6.object.freeze"),require("./modules/es6.object.seal"),require("./modules/es6.object.prevent-extensions"),require("./modules/es6.object.is-frozen"),require("./modules/es6.object.is-sealed"),require("./modules/es6.object.is-extensible"),require("./modules/es6.object.assign"),require("./modules/es6.object.is"),require("./modules/es6.object.set-prototype-of"),require("./modules/es6.object.to-string"),require("./modules/es6.function.bind"),require("./modules/es6.function.name"),require("./modules/es6.function.has-instance"),require("./modules/es6.parse-int"),require("./modules/es6.parse-float"),require("./modules/es6.number.constructor"),require("./modules/es6.number.to-fixed"),require("./modules/es6.number.to-precision"),require("./modules/es6.number.epsilon"),require("./modules/es6.number.is-finite"),require("./modules/es6.number.is-integer"),require("./modules/es6.number.is-nan"),require("./modules/es6.number.is-safe-integer"),require("./modules/es6.number.max-safe-integer"),require("./modules/es6.number.min-safe-integer"),require("./modules/es6.number.parse-float"),require("./modules/es6.number.parse-int"),require("./modules/es6.math.acosh"),require("./modules/es6.math.asinh"),require("./modules/es6.math.atanh"),require("./modules/es6.math.cbrt"),require("./modules/es6.math.clz32"),require("./modules/es6.math.cosh"),require("./modules/es6.math.expm1"),require("./modules/es6.math.fround"),require("./modules/es6.math.hypot"),require("./modules/es6.math.imul"),require("./modules/es6.math.log10"),require("./modules/es6.math.log1p"),require("./modules/es6.math.log2"),require("./modules/es6.math.sign"),require("./modules/es6.math.sinh"),require("./modules/es6.math.tanh"),require("./modules/es6.math.trunc"),require("./modules/es6.string.from-code-point"),require("./modules/es6.string.raw"),require("./modules/es6.string.trim"),require("./modules/es6.string.iterator"),require("./modules/es6.string.code-point-at"),require("./modules/es6.string.ends-with"),require("./modules/es6.string.includes"),require("./modules/es6.string.repeat"),require("./modules/es6.string.starts-with"),require("./modules/es6.string.anchor"),require("./modules/es6.string.big"),require("./modules/es6.string.blink"),require("./modules/es6.string.bold"),require("./modules/es6.string.fixed"),require("./modules/es6.string.fontcolor"),require("./modules/es6.string.fontsize"),require("./modules/es6.string.italics"),require("./modules/es6.string.link"),require("./modules/es6.string.small"),require("./modules/es6.string.strike"),require("./modules/es6.string.sub"),require("./modules/es6.string.sup"),require("./modules/es6.date.now"),require("./modules/es6.date.to-json"),require("./modules/es6.date.to-iso-string"),require("./modules/es6.date.to-string"),require("./modules/es6.date.to-primitive"),require("./modules/es6.array.is-array"),require("./modules/es6.array.from"),require("./modules/es6.array.of"),require("./modules/es6.array.join"),require("./modules/es6.array.slice"),require("./modules/es6.array.sort"),require("./modules/es6.array.for-each"),require("./modules/es6.array.map"),require("./modules/es6.array.filter"),require("./modules/es6.array.some"),require("./modules/es6.array.every"),require("./modules/es6.array.reduce"),require("./modules/es6.array.reduce-right"),require("./modules/es6.array.index-of"),require("./modules/es6.array.last-index-of"),require("./modules/es6.array.copy-within"),require("./modules/es6.array.fill"),require("./modules/es6.array.find"),require("./modules/es6.array.find-index"),require("./modules/es6.array.species"),require("./modules/es6.array.iterator"),require("./modules/es6.regexp.constructor"),require("./modules/es6.regexp.to-string"),require("./modules/es6.regexp.flags"),require("./modules/es6.regexp.match"),require("./modules/es6.regexp.replace"),require("./modules/es6.regexp.search"),require("./modules/es6.regexp.split"),require("./modules/es6.promise"),require("./modules/es6.map"),require("./modules/es6.set"),require("./modules/es6.weak-map"),require("./modules/es6.weak-set"),require("./modules/es6.typed.array-buffer"),require("./modules/es6.typed.data-view"),require("./modules/es6.typed.int8-array"),require("./modules/es6.typed.uint8-array"),require("./modules/es6.typed.uint8-clamped-array"),require("./modules/es6.typed.int16-array"),require("./modules/es6.typed.uint16-array"),require("./modules/es6.typed.int32-array"),require("./modules/es6.typed.uint32-array"),require("./modules/es6.typed.float32-array"),require("./modules/es6.typed.float64-array"),require("./modules/es6.reflect.apply"),require("./modules/es6.reflect.construct"),require("./modules/es6.reflect.define-property"),require("./modules/es6.reflect.delete-property"),require("./modules/es6.reflect.enumerate"),require("./modules/es6.reflect.get"),require("./modules/es6.reflect.get-own-property-descriptor"),require("./modules/es6.reflect.get-prototype-of"),require("./modules/es6.reflect.has"),require("./modules/es6.reflect.is-extensible"),require("./modules/es6.reflect.own-keys"),require("./modules/es6.reflect.prevent-extensions"),require("./modules/es6.reflect.set"),require("./modules/es6.reflect.set-prototype-of"),require("./modules/es7.array.includes"),require("./modules/es7.array.flat-map"),require("./modules/es7.array.flatten"),require("./modules/es7.string.at"),require("./modules/es7.string.pad-start"),require("./modules/es7.string.pad-end"),require("./modules/es7.string.trim-left"),require("./modules/es7.string.trim-right"),require("./modules/es7.string.match-all"),require("./modules/es7.symbol.async-iterator"),require("./modules/es7.symbol.observable"),require("./modules/es7.object.get-own-property-descriptors"),require("./modules/es7.object.values"),require("./modules/es7.object.entries"),require("./modules/es7.object.define-getter"),require("./modules/es7.object.define-setter"),require("./modules/es7.object.lookup-getter"),require("./modules/es7.object.lookup-setter"),require("./modules/es7.map.to-json"),require("./modules/es7.set.to-json"),require("./modules/es7.map.of"),require("./modules/es7.set.of"),require("./modules/es7.weak-map.of"),require("./modules/es7.weak-set.of"),require("./modules/es7.map.from"),require("./modules/es7.set.from"),require("./modules/es7.weak-map.from"),require("./modules/es7.weak-set.from"),require("./modules/es7.global"),require("./modules/es7.system.global"),require("./modules/es7.error.is-error"),require("./modules/es7.math.clamp"),require("./modules/es7.math.deg-per-rad"),require("./modules/es7.math.degrees"),require("./modules/es7.math.fscale"),require("./modules/es7.math.iaddh"),require("./modules/es7.math.isubh"),require("./modules/es7.math.imulh"),require("./modules/es7.math.rad-per-deg"),require("./modules/es7.math.radians"),require("./modules/es7.math.scale"),require("./modules/es7.math.umulh"),require("./modules/es7.math.signbit"),require("./modules/es7.promise.finally"),require("./modules/es7.promise.try"),require("./modules/es7.reflect.define-metadata"),require("./modules/es7.reflect.delete-metadata"),require("./modules/es7.reflect.get-metadata"),require("./modules/es7.reflect.get-metadata-keys"),require("./modules/es7.reflect.get-own-metadata"),require("./modules/es7.reflect.get-own-metadata-keys"),require("./modules/es7.reflect.has-metadata"),require("./modules/es7.reflect.has-own-metadata"),require("./modules/es7.reflect.metadata"),require("./modules/es7.asap"),require("./modules/es7.observable"),require("./modules/web.timers"),require("./modules/web.immediate"),require("./modules/web.dom.iterable"),module.exports=require("./modules/_core");

},{"./modules/_core":121,"./modules/es6.array.copy-within":227,"./modules/es6.array.every":228,"./modules/es6.array.fill":229,"./modules/es6.array.filter":230,"./modules/es6.array.find":232,"./modules/es6.array.find-index":231,"./modules/es6.array.for-each":233,"./modules/es6.array.from":234,"./modules/es6.array.index-of":235,"./modules/es6.array.is-array":236,"./modules/es6.array.iterator":237,"./modules/es6.array.join":238,"./modules/es6.array.last-index-of":239,"./modules/es6.array.map":240,"./modules/es6.array.of":241,"./modules/es6.array.reduce":243,"./modules/es6.array.reduce-right":242,"./modules/es6.array.slice":244,"./modules/es6.array.some":245,"./modules/es6.array.sort":246,"./modules/es6.array.species":247,"./modules/es6.date.now":248,"./modules/es6.date.to-iso-string":249,"./modules/es6.date.to-json":250,"./modules/es6.date.to-primitive":251,"./modules/es6.date.to-string":252,"./modules/es6.function.bind":253,"./modules/es6.function.has-instance":254,"./modules/es6.function.name":255,"./modules/es6.map":256,"./modules/es6.math.acosh":257,"./modules/es6.math.asinh":258,"./modules/es6.math.atanh":259,"./modules/es6.math.cbrt":260,"./modules/es6.math.clz32":261,"./modules/es6.math.cosh":262,"./modules/es6.math.expm1":263,"./modules/es6.math.fround":264,"./modules/es6.math.hypot":265,"./modules/es6.math.imul":266,"./modules/es6.math.log10":267,"./modules/es6.math.log1p":268,"./modules/es6.math.log2":269,"./modules/es6.math.sign":270,"./modules/es6.math.sinh":271,"./modules/es6.math.tanh":272,"./modules/es6.math.trunc":273,"./modules/es6.number.constructor":274,"./modules/es6.number.epsilon":275,"./modules/es6.number.is-finite":276,"./modules/es6.number.is-integer":277,"./modules/es6.number.is-nan":278,"./modules/es6.number.is-safe-integer":279,"./modules/es6.number.max-safe-integer":280,"./modules/es6.number.min-safe-integer":281,"./modules/es6.number.parse-float":282,"./modules/es6.number.parse-int":283,"./modules/es6.number.to-fixed":284,"./modules/es6.number.to-precision":285,"./modules/es6.object.assign":286,"./modules/es6.object.create":287,"./modules/es6.object.define-properties":288,"./modules/es6.object.define-property":289,"./modules/es6.object.freeze":290,"./modules/es6.object.get-own-property-descriptor":291,"./modules/es6.object.get-own-property-names":292,"./modules/es6.object.get-prototype-of":293,"./modules/es6.object.is":297,"./modules/es6.object.is-extensible":294,"./modules/es6.object.is-frozen":295,"./modules/es6.object.is-sealed":296,"./modules/es6.object.keys":298,"./modules/es6.object.prevent-extensions":299,"./modules/es6.object.seal":300,"./modules/es6.object.set-prototype-of":301,"./modules/es6.object.to-string":302,"./modules/es6.parse-float":303,"./modules/es6.parse-int":304,"./modules/es6.promise":305,"./modules/es6.reflect.apply":306,"./modules/es6.reflect.construct":307,"./modules/es6.reflect.define-property":308,"./modules/es6.reflect.delete-property":309,"./modules/es6.reflect.enumerate":310,"./modules/es6.reflect.get":313,"./modules/es6.reflect.get-own-property-descriptor":311,"./modules/es6.reflect.get-prototype-of":312,"./modules/es6.reflect.has":314,"./modules/es6.reflect.is-extensible":315,"./modules/es6.reflect.own-keys":316,"./modules/es6.reflect.prevent-extensions":317,"./modules/es6.reflect.set":319,"./modules/es6.reflect.set-prototype-of":318,"./modules/es6.regexp.constructor":320,"./modules/es6.regexp.flags":321,"./modules/es6.regexp.match":322,"./modules/es6.regexp.replace":323,"./modules/es6.regexp.search":324,"./modules/es6.regexp.split":325,"./modules/es6.regexp.to-string":326,"./modules/es6.set":327,"./modules/es6.string.anchor":328,"./modules/es6.string.big":329,"./modules/es6.string.blink":330,"./modules/es6.string.bold":331,"./modules/es6.string.code-point-at":332,"./modules/es6.string.ends-with":333,"./modules/es6.string.fixed":334,"./modules/es6.string.fontcolor":335,"./modules/es6.string.fontsize":336,"./modules/es6.string.from-code-point":337,"./modules/es6.string.includes":338,"./modules/es6.string.italics":339,"./modules/es6.string.iterator":340,"./modules/es6.string.link":341,"./modules/es6.string.raw":342,"./modules/es6.string.repeat":343,"./modules/es6.string.small":344,"./modules/es6.string.starts-with":345,"./modules/es6.string.strike":346,"./modules/es6.string.sub":347,"./modules/es6.string.sup":348,"./modules/es6.string.trim":349,"./modules/es6.symbol":350,"./modules/es6.typed.array-buffer":351,"./modules/es6.typed.data-view":352,"./modules/es6.typed.float32-array":353,"./modules/es6.typed.float64-array":354,"./modules/es6.typed.int16-array":355,"./modules/es6.typed.int32-array":356,"./modules/es6.typed.int8-array":357,"./modules/es6.typed.uint16-array":358,"./modules/es6.typed.uint32-array":359,"./modules/es6.typed.uint8-array":360,"./modules/es6.typed.uint8-clamped-array":361,"./modules/es6.weak-map":362,"./modules/es6.weak-set":363,"./modules/es7.array.flat-map":364,"./modules/es7.array.flatten":365,"./modules/es7.array.includes":366,"./modules/es7.asap":367,"./modules/es7.error.is-error":368,"./modules/es7.global":369,"./modules/es7.map.from":370,"./modules/es7.map.of":371,"./modules/es7.map.to-json":372,"./modules/es7.math.clamp":373,"./modules/es7.math.deg-per-rad":374,"./modules/es7.math.degrees":375,"./modules/es7.math.fscale":376,"./modules/es7.math.iaddh":377,"./modules/es7.math.imulh":378,"./modules/es7.math.isubh":379,"./modules/es7.math.rad-per-deg":380,"./modules/es7.math.radians":381,"./modules/es7.math.scale":382,"./modules/es7.math.signbit":383,"./modules/es7.math.umulh":384,"./modules/es7.object.define-getter":385,"./modules/es7.object.define-setter":386,"./modules/es7.object.entries":387,"./modules/es7.object.get-own-property-descriptors":388,"./modules/es7.object.lookup-getter":389,"./modules/es7.object.lookup-setter":390,"./modules/es7.object.values":391,"./modules/es7.observable":392,"./modules/es7.promise.finally":393,"./modules/es7.promise.try":394,"./modules/es7.reflect.define-metadata":395,"./modules/es7.reflect.delete-metadata":396,"./modules/es7.reflect.get-metadata":398,"./modules/es7.reflect.get-metadata-keys":397,"./modules/es7.reflect.get-own-metadata":400,"./modules/es7.reflect.get-own-metadata-keys":399,"./modules/es7.reflect.has-metadata":401,"./modules/es7.reflect.has-own-metadata":402,"./modules/es7.reflect.metadata":403,"./modules/es7.set.from":404,"./modules/es7.set.of":405,"./modules/es7.set.to-json":406,"./modules/es7.string.at":407,"./modules/es7.string.match-all":408,"./modules/es7.string.pad-end":409,"./modules/es7.string.pad-start":410,"./modules/es7.string.trim-left":411,"./modules/es7.string.trim-right":412,"./modules/es7.symbol.async-iterator":413,"./modules/es7.symbol.observable":414,"./modules/es7.system.global":415,"./modules/es7.weak-map.from":416,"./modules/es7.weak-map.of":417,"./modules/es7.weak-set.from":418,"./modules/es7.weak-set.of":419,"./modules/web.dom.iterable":420,"./modules/web.immediate":421,"./modules/web.timers":422}],424:[function(require,module,exports){
(function (process){
"use strict";var _assign=require("object-assign"),emptyObject=require("fbjs/lib/emptyObject"),_invariant=require("fbjs/lib/invariant");if("production"!==process.env.NODE_ENV)var warning=require("fbjs/lib/warning");var ReactPropTypeLocationNames,MIXINS_KEY="mixins";function identity(e){return e}function factory(e,t,n){var o=[],i={mixins:"DEFINE_MANY",statics:"DEFINE_MANY",propTypes:"DEFINE_MANY",contextTypes:"DEFINE_MANY",childContextTypes:"DEFINE_MANY",getDefaultProps:"DEFINE_MANY_MERGED",getInitialState:"DEFINE_MANY_MERGED",getChildContext:"DEFINE_MANY_MERGED",render:"DEFINE_ONCE",componentWillMount:"DEFINE_MANY",componentDidMount:"DEFINE_MANY",componentWillReceiveProps:"DEFINE_MANY",shouldComponentUpdate:"DEFINE_ONCE",componentWillUpdate:"DEFINE_MANY",componentDidUpdate:"DEFINE_MANY",componentWillUnmount:"DEFINE_MANY",UNSAFE_componentWillMount:"DEFINE_MANY",UNSAFE_componentWillReceiveProps:"DEFINE_MANY",UNSAFE_componentWillUpdate:"DEFINE_MANY",updateComponent:"OVERRIDE_BASE"},a={getDerivedStateFromProps:"DEFINE_MANY_MERGED"},r={displayName:function(e,t){e.displayName=t},mixins:function(e,t){if(t)for(var n=0;n<t.length;n++)mixSpecIntoComponent(e,t[n])},childContextTypes:function(e,t){"production"!==process.env.NODE_ENV&&validateTypeDef(e,t,"childContext"),e.childContextTypes=_assign({},e.childContextTypes,t)},contextTypes:function(e,t){"production"!==process.env.NODE_ENV&&validateTypeDef(e,t,"context"),e.contextTypes=_assign({},e.contextTypes,t)},getDefaultProps:function(e,t){e.getDefaultProps?e.getDefaultProps=createMergedResultFunction(e.getDefaultProps,t):e.getDefaultProps=t},propTypes:function(e,t){"production"!==process.env.NODE_ENV&&validateTypeDef(e,t,"prop"),e.propTypes=_assign({},e.propTypes,t)},statics:function(e,t){!function mixStaticSpecIntoComponent(e,t){if(!t)return;for(var n in t){var o=t[n];if(t.hasOwnProperty(n)){var i=n in r;_invariant(!i,'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.',n);var s=n in e;if(s){var c=a.hasOwnProperty(n)?a[n]:null;return _invariant("DEFINE_MANY_MERGED"===c,"ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",n),void(e[n]=createMergedResultFunction(e[n],o))}e[n]=o}}}(e,t)},autobind:function(){}};function validateTypeDef(e,t,n){for(var o in t)t.hasOwnProperty(o)&&"production"!==process.env.NODE_ENV&&warning("function"==typeof t[o],"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",e.displayName||"ReactClass",ReactPropTypeLocationNames[n],o)}function validateMethodOverride(e,t){var n=i.hasOwnProperty(t)?i[t]:null;p.hasOwnProperty(t)&&_invariant("OVERRIDE_BASE"===n,"ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.",t),e&&_invariant("DEFINE_MANY"===n||"DEFINE_MANY_MERGED"===n,"ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",t)}function mixSpecIntoComponent(e,n){if(n){_invariant("function"!=typeof n,"ReactClass: You're attempting to use a component class or function as a mixin. Instead, just use a regular object."),_invariant(!t(n),"ReactClass: You're attempting to use a component as a mixin. Instead, just use a regular object.");var o=e.prototype,a=o.__reactAutoBindPairs;for(var s in n.hasOwnProperty(MIXINS_KEY)&&r.mixins(e,n.mixins),n)if(n.hasOwnProperty(s)&&s!==MIXINS_KEY){var c=n[s],p=o.hasOwnProperty(s);if(validateMethodOverride(p,s),r.hasOwnProperty(s))r[s](e,c);else{var u=i.hasOwnProperty(s);if("function"==typeof c&&!u&&!p&&!1!==n.autobind)a.push(s,c),o[s]=c;else if(p){var l=i[s];_invariant(u&&("DEFINE_MANY_MERGED"===l||"DEFINE_MANY"===l),"ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.",l,s),"DEFINE_MANY_MERGED"===l?o[s]=createMergedResultFunction(o[s],c):"DEFINE_MANY"===l&&(o[s]=createChainedFunction(o[s],c))}else o[s]=c,"production"!==process.env.NODE_ENV&&"function"==typeof c&&n.displayName&&(o[s].displayName=n.displayName+"_"+s)}}}else if("production"!==process.env.NODE_ENV){var d=typeof n,m="object"===d&&null!==n;"production"!==process.env.NODE_ENV&&warning(m,"%s: You're attempting to include a mixin that is either null or not an object. Check the mixins included by the component, as well as any mixins they include themselves. Expected object but got %s.",e.displayName||"ReactClass",null===n?null:d)}}function mergeIntoWithNoDuplicateKeys(e,t){for(var n in _invariant(e&&t&&"object"==typeof e&&"object"==typeof t,"mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects."),t)t.hasOwnProperty(n)&&(_invariant(void 0===e[n],"mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.",n),e[n]=t[n]);return e}function createMergedResultFunction(e,t){return function mergedResult(){var n=e.apply(this,arguments),o=t.apply(this,arguments);if(null==n)return o;if(null==o)return n;var i={};return mergeIntoWithNoDuplicateKeys(i,n),mergeIntoWithNoDuplicateKeys(i,o),i}}function createChainedFunction(e,t){return function chainedFunction(){e.apply(this,arguments),t.apply(this,arguments)}}function bindAutoBindMethod(e,t){var n=t.bind(e);if("production"!==process.env.NODE_ENV){n.__reactBoundContext=e,n.__reactBoundMethod=t,n.__reactBoundArguments=null;var o=e.constructor.displayName,i=n.bind;n.bind=function(a){for(var r=arguments.length,s=Array(r>1?r-1:0),c=1;c<r;c++)s[c-1]=arguments[c];if(a!==e&&null!==a)"production"!==process.env.NODE_ENV&&warning(!1,"bind(): React component methods may only be bound to the component instance. See %s",o);else if(!s.length)return"production"!==process.env.NODE_ENV&&warning(!1,"bind(): You are binding a component method to the component. React does this for you automatically in a high-performance way, so you can safely remove this call. See %s",o),n;var p=i.apply(n,arguments);return p.__reactBoundContext=e,p.__reactBoundMethod=t,p.__reactBoundArguments=s,p}}return n}var s={componentDidMount:function(){this.__isMounted=!0}},c={componentWillUnmount:function(){this.__isMounted=!1}},p={replaceState:function(e,t){this.updater.enqueueReplaceState(this,e,t)},isMounted:function(){return"production"!==process.env.NODE_ENV&&(warning(this.__didWarnIsMounted,"%s: isMounted is deprecated. Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks.",this.constructor&&this.constructor.displayName||this.name||"Component"),this.__didWarnIsMounted=!0),!!this.__isMounted}},u=function(){};return _assign(u.prototype,e.prototype,p),function createClass(e){var t=identity(function(e,o,i){"production"!==process.env.NODE_ENV&&warning(this instanceof t,"Something is calling a React component directly. Use a factory or JSX instead. See: https://fb.me/react-legacyfactory"),this.__reactAutoBindPairs.length&&function bindAutoBindMethods(e){for(var t=e.__reactAutoBindPairs,n=0;n<t.length;n+=2){var o=t[n],i=t[n+1];e[o]=bindAutoBindMethod(e,i)}}(this),this.props=e,this.context=o,this.refs=emptyObject,this.updater=i||n,this.state=null;var a=this.getInitialState?this.getInitialState():null;"production"!==process.env.NODE_ENV&&void 0===a&&this.getInitialState._isMockFunction&&(a=null),_invariant("object"==typeof a&&!Array.isArray(a),"%s.getInitialState(): must return an object or null",t.displayName||"ReactCompositeComponent"),this.state=a});for(var a in t.prototype=new u,t.prototype.constructor=t,t.prototype.__reactAutoBindPairs=[],o.forEach(mixSpecIntoComponent.bind(null,t)),mixSpecIntoComponent(t,s),mixSpecIntoComponent(t,e),mixSpecIntoComponent(t,c),t.getDefaultProps&&(t.defaultProps=t.getDefaultProps()),"production"!==process.env.NODE_ENV&&(t.getDefaultProps&&(t.getDefaultProps.isReactClassApproved={}),t.prototype.getInitialState&&(t.prototype.getInitialState.isReactClassApproved={})),_invariant(t.prototype.render,"createClass(...): Class specification must implement a `render` method."),"production"!==process.env.NODE_ENV&&(warning(!t.prototype.componentShouldUpdate,"%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",e.displayName||"A component"),warning(!t.prototype.componentWillRecieveProps,"%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",e.displayName||"A component"),warning(!t.prototype.UNSAFE_componentWillRecieveProps,"%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?",e.displayName||"A component")),i)t.prototype[a]||(t.prototype[a]=null);return t}}ReactPropTypeLocationNames="production"!==process.env.NODE_ENV?{prop:"prop",context:"context",childContext:"child context"}:{},module.exports=factory;

}).call(this,require('_process'))

},{"_process":484,"fbjs/lib/emptyObject":465,"fbjs/lib/invariant":472,"fbjs/lib/warning":479,"object-assign":483}],425:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=activeElement;var _ownerDocument=require("./ownerDocument"),_ownerDocument2=_interopRequireDefault(_ownerDocument);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function activeElement(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:(0,_ownerDocument2.default)();try{return e.activeElement}catch(e){}}module.exports=exports.default;

},{"./ownerDocument":435}],426:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=addClass;var _hasClass=require("./hasClass"),_hasClass2=_interopRequireDefault(_hasClass);function _interopRequireDefault(s){return s&&s.__esModule?s:{default:s}}function addClass(s,e){s.classList?s.classList.add(e):(0,_hasClass2.default)(s,e)||("string"==typeof s.className?s.className=s.className+" "+e:s.setAttribute("class",(s.className&&s.className.baseVal||"")+" "+e))}module.exports=exports.default;

},{"./hasClass":427}],427:[function(require,module,exports){
"use strict";function hasClass(s,e){return s.classList?!!e&&s.classList.contains(e):-1!==(" "+(s.className.baseVal||s.className)+" ").indexOf(" "+e+" ")}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=hasClass,module.exports=exports.default;

},{}],428:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.hasClass=exports.removeClass=exports.addClass=void 0;var _addClass=require("./addClass"),_addClass2=_interopRequireDefault(_addClass),_removeClass=require("./removeClass"),_removeClass2=_interopRequireDefault(_removeClass),_hasClass=require("./hasClass"),_hasClass2=_interopRequireDefault(_hasClass);function _interopRequireDefault(s){return s&&s.__esModule?s:{default:s}}exports.addClass=_addClass2.default,exports.removeClass=_removeClass2.default,exports.hasClass=_hasClass2.default,exports.default={addClass:_addClass2.default,removeClass:_removeClass2.default,hasClass:_hasClass2.default};

},{"./addClass":426,"./hasClass":427,"./removeClass":429}],429:[function(require,module,exports){
"use strict";function replaceClassName(s,e){return s.replace(new RegExp("(^|\\s)"+e+"(?:\\s|$)","g"),"$1").replace(/\s+/g," ").replace(/^\s*|\s*$/g,"")}module.exports=function removeClass(s,e){s.classList?s.classList.remove(e):"string"==typeof s.className?s.className=replaceClassName(s.className,e):s.setAttribute("class",replaceClassName(s.className&&s.className.baseVal||"",e))};

},{}],430:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=filterEvents;var _contains=require("../query/contains"),_contains2=_interopRequireDefault(_contains),_querySelectorAll=require("../query/querySelectorAll"),_querySelectorAll2=_interopRequireDefault(_querySelectorAll);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function filterEvents(e,t){return function filterHandler(r){var l=r.currentTarget,u=r.target;(0,_querySelectorAll2.default)(l,e).some(function(e){return(0,_contains2.default)(e,u)})&&t.call(this,r)}}module.exports=exports.default;

},{"../query/contains":436,"../query/querySelectorAll":441}],431:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.listen=exports.filter=exports.off=exports.on=void 0;var _on=require("./on"),_on2=_interopRequireDefault(_on),_off=require("./off"),_off2=_interopRequireDefault(_off),_filter=require("./filter"),_filter2=_interopRequireDefault(_filter),_listen=require("./listen"),_listen2=_interopRequireDefault(_listen);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}exports.on=_on2.default,exports.off=_off2.default,exports.filter=_filter2.default,exports.listen=_listen2.default,exports.default={on:_on2.default,off:_off2.default,filter:_filter2.default,listen:_listen2.default};

},{"./filter":430,"./listen":432,"./off":433,"./on":434}],432:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _inDOM=require("../util/inDOM"),_inDOM2=_interopRequireDefault(_inDOM),_on=require("./on"),_on2=_interopRequireDefault(_on),_off=require("./off"),_off2=_interopRequireDefault(_off);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}var listen=function listen(){};_inDOM2.default&&(listen=function listen(e,t,n,u){return(0,_on2.default)(e,t,n,u),function(){(0,_off2.default)(e,t,n,u)}}),exports.default=listen,module.exports=exports.default;

},{"../util/inDOM":455,"./off":433,"./on":434}],433:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _inDOM=require("../util/inDOM"),_inDOM2=_interopRequireDefault(_inDOM);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}var off=function off(){};_inDOM2.default&&(off=document.addEventListener?function(e,t,n,r){return e.removeEventListener(t,n,r||!1)}:document.attachEvent?function(e,t,n){return e.detachEvent("on"+t,n)}:void 0),exports.default=off,module.exports=exports.default;

},{"../util/inDOM":455}],434:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _inDOM=require("../util/inDOM"),_inDOM2=_interopRequireDefault(_inDOM);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}var on=function on(){};_inDOM2.default&&(on=document.addEventListener?function(e,t,n,r){return e.addEventListener(t,n,r||!1)}:document.attachEvent?function(e,t,n){return e.attachEvent("on"+t,function(t){(t=t||window.event).target=t.target||t.srcElement,t.currentTarget=e,n.call(e,t)})}:void 0),exports.default=on,module.exports=exports.default;

},{"../util/inDOM":455}],435:[function(require,module,exports){
"use strict";function ownerDocument(e){return e&&e.ownerDocument||document}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=ownerDocument,module.exports=exports.default;

},{}],436:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _inDOM=require("../util/inDOM"),_inDOM2=_interopRequireDefault(_inDOM);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function fallback(e,t){if(t)do{if(t===e)return!0}while(t=t.parentNode);return!1}exports.default=_inDOM2.default?function(e,t){return e.contains?e.contains(t):e.compareDocumentPosition?e===t||!!(16&e.compareDocumentPosition(t)):fallback(e,t)}:fallback,module.exports=exports.default;

},{"../util/inDOM":455}],437:[function(require,module,exports){
"use strict";function getWindow(e){return e===e.window?e:9===e.nodeType&&(e.defaultView||e.parentWindow)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=getWindow,module.exports=exports.default;

},{}],438:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=offset;var _contains=require("./contains"),_contains2=_interopRequireDefault(_contains),_isWindow=require("./isWindow"),_isWindow2=_interopRequireDefault(_isWindow),_ownerDocument=require("../ownerDocument"),_ownerDocument2=_interopRequireDefault(_ownerDocument);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function offset(e){var t=(0,_ownerDocument2.default)(e),o=(0,_isWindow2.default)(t),i=t&&t.documentElement,n={top:0,left:0,height:0,width:0};if(t)return(0,_contains2.default)(i,e)?(void 0!==e.getBoundingClientRect&&(n=e.getBoundingClientRect()),n={top:n.top+(o.pageYOffset||i.scrollTop)-(i.clientTop||0),left:n.left+(o.pageXOffset||i.scrollLeft)-(i.clientLeft||0),width:(null==n.width?e.offsetWidth:n.width)||0,height:(null==n.height?e.offsetHeight:n.height)||0}):n}module.exports=exports.default;

},{"../ownerDocument":435,"./contains":436,"./isWindow":437}],439:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=offsetParent;var _ownerDocument=require("../ownerDocument"),_ownerDocument2=_interopRequireDefault(_ownerDocument),_style=require("../style"),_style2=_interopRequireDefault(_style);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function nodeName(e){return e.nodeName&&e.nodeName.toLowerCase()}function offsetParent(e){for(var t=(0,_ownerDocument2.default)(e),o=e&&e.offsetParent;o&&"html"!==nodeName(e)&&"static"===(0,_style2.default)(o,"position");)o=o.offsetParent;return o||t.documentElement}module.exports=exports.default;

},{"../ownerDocument":435,"../style":445}],440:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(e[o]=r[o])}return e};exports.default=position;var _offset=require("./offset"),_offset2=_interopRequireDefault(_offset),_offsetParent=require("./offsetParent"),_offsetParent2=_interopRequireDefault(_offsetParent),_scrollTop=require("./scrollTop"),_scrollTop2=_interopRequireDefault(_scrollTop),_scrollLeft=require("./scrollLeft"),_scrollLeft2=_interopRequireDefault(_scrollLeft),_style=require("../style"),_style2=_interopRequireDefault(_style);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function nodeName(e){return e.nodeName&&e.nodeName.toLowerCase()}function position(e,t){var r,o={top:0,left:0};return"fixed"===(0,_style2.default)(e,"position")?r=e.getBoundingClientRect():(t=t||(0,_offsetParent2.default)(e),r=(0,_offset2.default)(e),"html"!==nodeName(t)&&(o=(0,_offset2.default)(t)),o.top+=parseInt((0,_style2.default)(t,"borderTopWidth"),10)-(0,_scrollTop2.default)(t)||0,o.left+=parseInt((0,_style2.default)(t,"borderLeftWidth"),10)-(0,_scrollLeft2.default)(t)||0),_extends({},r,{top:r.top-o.top-(parseInt((0,_style2.default)(e,"marginTop"),10)||0),left:r.left-o.left-(parseInt((0,_style2.default)(e,"marginLeft"),10)||0)})}module.exports=exports.default;

},{"../style":445,"./offset":438,"./offsetParent":439,"./scrollLeft":442,"./scrollTop":443}],441:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=qsa;var simpleSelectorRE=/^[\w-]*$/,toArray=Function.prototype.bind.call(Function.prototype.call,[].slice);function qsa(e,t){var l,r="#"===t[0],o="."===t[0],s=r||o?t.slice(1):t;return simpleSelectorRE.test(s)?r?(l=(e=e.getElementById?e:document).getElementById(s))?[l]:[]:e.getElementsByClassName&&o?toArray(e.getElementsByClassName(s)):toArray(e.getElementsByTagName(t)):toArray(e.querySelectorAll(t))}module.exports=exports.default;

},{}],442:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=scrollTop;var _isWindow=require("./isWindow"),_isWindow2=_interopRequireDefault(_isWindow);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function scrollTop(e,o){var t=(0,_isWindow2.default)(e);if(void 0===o)return t?"pageXOffset"in t?t.pageXOffset:t.document.documentElement.scrollLeft:e.scrollLeft;t?t.scrollTo(o,"pageYOffset"in t?t.pageYOffset:t.document.documentElement.scrollTop):e.scrollLeft=o}module.exports=exports.default;

},{"./isWindow":437}],443:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=scrollTop;var _isWindow=require("./isWindow"),_isWindow2=_interopRequireDefault(_isWindow);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function scrollTop(e,o){var t=(0,_isWindow2.default)(e);if(void 0===o)return t?"pageYOffset"in t?t.pageYOffset:t.document.documentElement.scrollTop:e.scrollTop;t?t.scrollTo("pageXOffset"in t?t.pageXOffset:t.document.documentElement.scrollLeft,o):e.scrollTop=o}module.exports=exports.default;

},{"./isWindow":437}],444:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=_getComputedStyle;var _camelizeStyle=require("../util/camelizeStyle"),_camelizeStyle2=_interopRequireDefault(_camelizeStyle);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}var rposition=/^(top|right|bottom|left)$/,rnumnonpx=/^([+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|))(?!px)[a-z%]+$/i;function _getComputedStyle(e){if(!e)throw new TypeError("No Element passed to `getComputedStyle()`");var t=e.ownerDocument;return"defaultView"in t?t.defaultView.opener?e.ownerDocument.defaultView.getComputedStyle(e,null):window.getComputedStyle(e,null):{getPropertyValue:function getPropertyValue(t){var l=e.style;"float"==(t=(0,_camelizeStyle2.default)(t))&&(t="styleFloat");var r=e.currentStyle[t]||null;if(null==r&&l&&l[t]&&(r=l[t]),rnumnonpx.test(r)&&!rposition.test(t)){var o=l.left,u=e.runtimeStyle,n=u&&u.left;n&&(u.left=e.currentStyle.left),l.left="fontSize"===t?"1em":r,r=l.pixelLeft+"px",l.left=o,n&&(u.left=n)}return r}}}module.exports=exports.default;

},{"../util/camelizeStyle":452}],445:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=style;var _camelizeStyle=require("../util/camelizeStyle"),_camelizeStyle2=_interopRequireDefault(_camelizeStyle),_hyphenateStyle=require("../util/hyphenateStyle"),_hyphenateStyle2=_interopRequireDefault(_hyphenateStyle),_getComputedStyle2=require("./getComputedStyle"),_getComputedStyle3=_interopRequireDefault(_getComputedStyle2),_removeStyle=require("./removeStyle"),_removeStyle2=_interopRequireDefault(_removeStyle),_properties=require("../transition/properties"),_isTransform=require("../transition/isTransform"),_isTransform2=_interopRequireDefault(_isTransform);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function style(e,t,r){var l="",i="",u=t;if("string"==typeof t){if(void 0===r)return e.style[(0,_camelizeStyle2.default)(t)]||(0,_getComputedStyle3.default)(e).getPropertyValue((0,_hyphenateStyle2.default)(t));(u={})[t]=r}Object.keys(u).forEach(function(t){var r=u[t];r||0===r?(0,_isTransform2.default)(t)?i+=t+"("+r+") ":l+=(0,_hyphenateStyle2.default)(t)+": "+r+";":(0,_removeStyle2.default)(e,(0,_hyphenateStyle2.default)(t))}),i&&(l+=_properties.transform+": "+i+";"),e.style.cssText+=";"+l}module.exports=exports.default;

},{"../transition/isTransform":449,"../transition/properties":450,"../util/camelizeStyle":452,"../util/hyphenateStyle":454,"./getComputedStyle":444,"./removeStyle":446}],446:[function(require,module,exports){
"use strict";function removeStyle(e,t){return"removeProperty"in e.style?e.style.removeProperty(t):e.style.removeAttribute(t)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=removeStyle,module.exports=exports.default;

},{}],447:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _properties=require("./properties"),_properties2=_interopRequireDefault(_properties),_style=require("../style"),_style2=_interopRequireDefault(_style);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function onEnd(e,t,r){var n,o={target:e,currentTarget:e};function done(e){e.target===e.currentTarget&&(clearTimeout(n),e.target.removeEventListener(_properties2.default.end,done),t.call(this))}_properties2.default.end?null==r&&(r=parseDuration(e)||0):r=0,_properties2.default.end?(e.addEventListener(_properties2.default.end,done,!1),n=setTimeout(function(){return done(o)},1.5*(r||100))):setTimeout(done.bind(null,o),0)}function parseDuration(e){var t=(0,_style2.default)(e,_properties2.default.duration),r=-1===t.indexOf("ms")?1e3:1;return parseFloat(t)*r}onEnd._parseDuration=parseDuration,exports.default=onEnd,module.exports=exports.default;

},{"../style":445,"./properties":450}],448:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.properties=exports.end=void 0;var _end=require("./end"),_end2=_interopRequireDefault(_end),_properties=require("./properties"),_properties2=_interopRequireDefault(_properties);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}exports.end=_end2.default,exports.properties=_properties2.default,exports.default={end:_end2.default,properties:_properties2.default};

},{"./end":447,"./properties":450}],449:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=isTransform;var supportedTransforms=/^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;function isTransform(e){return!(!e||!supportedTransforms.test(e))}module.exports=exports.default;

},{}],450:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.animationEnd=exports.animationDelay=exports.animationTiming=exports.animationDuration=exports.animationName=exports.transitionEnd=exports.transitionDuration=exports.transitionDelay=exports.transitionTiming=exports.transitionProperty=exports.transform=void 0;var _inDOM=require("../util/inDOM"),_inDOM2=_interopRequireDefault(_inDOM);function _interopRequireDefault(i){return i&&i.__esModule?i:{default:i}}var transform="transform",prefix=void 0,transitionEnd=void 0,animationEnd=void 0,transitionProperty=void 0,transitionDuration=void 0,transitionTiming=void 0,transitionDelay=void 0,animationName=void 0,animationDuration=void 0,animationTiming=void 0,animationDelay=void 0;if(_inDOM2.default){var _getTransitionPropert=getTransitionProperties();prefix=_getTransitionPropert.prefix,exports.transitionEnd=transitionEnd=_getTransitionPropert.transitionEnd,exports.animationEnd=animationEnd=_getTransitionPropert.animationEnd,exports.transform=transform=prefix+"-"+transform,exports.transitionProperty=transitionProperty=prefix+"-transition-property",exports.transitionDuration=transitionDuration=prefix+"-transition-duration",exports.transitionDelay=transitionDelay=prefix+"-transition-delay",exports.transitionTiming=transitionTiming=prefix+"-transition-timing-function",exports.animationName=animationName=prefix+"-animation-name",exports.animationDuration=animationDuration=prefix+"-animation-duration",exports.animationTiming=animationTiming=prefix+"-animation-delay",exports.animationDelay=animationDelay=prefix+"-animation-timing-function"}function getTransitionProperties(){for(var i=document.createElement("div").style,n={O:function O(i){return"o"+i.toLowerCase()},Moz:function Moz(i){return i.toLowerCase()},Webkit:function Webkit(i){return"webkit"+i},ms:function ms(i){return"MS"+i}},t=Object.keys(n),o=void 0,r=void 0,a="",e=0;e<t.length;e++){var s=t[e];if(s+"TransitionProperty"in i){a="-"+s.toLowerCase(),o=n[s]("TransitionEnd"),r=n[s]("AnimationEnd");break}}return!o&&"transitionProperty"in i&&(o="transitionend"),!r&&"animationName"in i&&(r="animationend"),i=null,{animationEnd:r,transitionEnd:o,prefix:a}}exports.transform=transform,exports.transitionProperty=transitionProperty,exports.transitionTiming=transitionTiming,exports.transitionDelay=transitionDelay,exports.transitionDuration=transitionDuration,exports.transitionEnd=transitionEnd,exports.animationName=animationName,exports.animationDuration=animationDuration,exports.animationTiming=animationTiming,exports.animationDelay=animationDelay,exports.animationEnd=animationEnd,exports.default={transform:transform,end:transitionEnd,property:transitionProperty,timing:transitionTiming,delay:transitionDelay,duration:transitionDuration};

},{"../util/inDOM":455}],451:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=camelize;var rHyphen=/-(.)/g;function camelize(e){return e.replace(rHyphen,function(e,r){return r.toUpperCase()})}module.exports=exports.default;

},{}],452:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=camelizeStyleName;var _camelize=require("./camelize"),_camelize2=_interopRequireDefault(_camelize);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}var msPattern=/^-ms-/;function camelizeStyleName(e){return(0,_camelize2.default)(e.replace(msPattern,"ms-"))}module.exports=exports.default;

},{"./camelize":451}],453:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=hyphenate;var rUpper=/([A-Z])/g;function hyphenate(e){return e.replace(rUpper,"-$1").toLowerCase()}module.exports=exports.default;

},{}],454:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=hyphenateStyleName;var _hyphenate=require("./hyphenate"),_hyphenate2=_interopRequireDefault(_hyphenate);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}var msPattern=/^ms-/;function hyphenateStyleName(e){return(0,_hyphenate2.default)(e).replace(msPattern,"-ms-")}module.exports=exports.default;

},{"./hyphenate":453}],455:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=!("undefined"==typeof window||!window.document||!window.document.createElement),module.exports=exports.default;

},{}],456:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(e){if((!size&&0!==size||e)&&_inDOM2.default){var t=document.createElement("div");t.style.position="absolute",t.style.top="-9999px",t.style.width="50px",t.style.height="50px",t.style.overflow="scroll",document.body.appendChild(t),size=t.offsetWidth-t.clientWidth,document.body.removeChild(t)}return size};var _inDOM=require("./inDOM"),_inDOM2=_interopRequireDefault(_inDOM);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}var size=void 0;module.exports=exports.default;

},{"./inDOM":455}],457:[function(require,module,exports){
(function (process){
"use strict";var emptyFunction=require("./emptyFunction"),EventListener={listen:function listen(e,t,n){return e.addEventListener?(e.addEventListener(t,n,!1),{remove:function remove(){e.removeEventListener(t,n,!1)}}):e.attachEvent?(e.attachEvent("on"+t,n),{remove:function remove(){e.detachEvent("on"+t,n)}}):void 0},capture:function capture(e,t,n){return e.addEventListener?(e.addEventListener(t,n,!0),{remove:function remove(){e.removeEventListener(t,n,!0)}}):("production"!==process.env.NODE_ENV&&console.error("Attempted to listen to events during the capture phase on a browser that does not support the capture phase. Your application will not receive some events."),{remove:emptyFunction})},registerDefault:function registerDefault(){}};module.exports=EventListener;

}).call(this,require('_process'))

},{"./emptyFunction":464,"_process":484}],458:[function(require,module,exports){
"use strict";var canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement),ExecutionEnvironment={canUseDOM:canUseDOM,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:canUseDOM&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:canUseDOM&&!!window.screen,isInWorker:!canUseDOM};module.exports=ExecutionEnvironment;

},{}],459:[function(require,module,exports){
"use strict";var _hyphenPattern=/-(.)/g;function camelize(e){return e.replace(_hyphenPattern,function(e,t){return t.toUpperCase()})}module.exports=camelize;

},{}],460:[function(require,module,exports){
"use strict";var camelize=require("./camelize"),msPattern=/^-ms-/;function camelizeStyleName(e){return camelize(e.replace(msPattern,"ms-"))}module.exports=camelizeStyleName;

},{"./camelize":459}],461:[function(require,module,exports){
"use strict";var isTextNode=require("./isTextNode");function containsNode(o,e){return!(!o||!e)&&(o===e||!isTextNode(o)&&(isTextNode(e)?containsNode(o,e.parentNode):"contains"in o?o.contains(e):!!o.compareDocumentPosition&&!!(16&o.compareDocumentPosition(e))))}module.exports=containsNode;

},{"./isTextNode":474}],462:[function(require,module,exports){
(function (process){
"use strict";var invariant=require("./invariant");function toArray(r){var e=r.length;if((Array.isArray(r)||"object"!=typeof r&&"function"!=typeof r)&&("production"!==process.env.NODE_ENV?invariant(!1,"toArray: Array-like object expected"):invariant(!1)),"number"!=typeof e&&("production"!==process.env.NODE_ENV?invariant(!1,"toArray: Object needs a length property"):invariant(!1)),0===e||e-1 in r||("production"!==process.env.NODE_ENV?invariant(!1,"toArray: Object should have keys for indices"):invariant(!1)),"function"==typeof r.callee&&("production"!==process.env.NODE_ENV?invariant(!1,"toArray: Object can't be `arguments`. Use rest params (function(...args) {}) or Array.from() instead."):invariant(!1)),r.hasOwnProperty)try{return Array.prototype.slice.call(r)}catch(r){}for(var t=Array(e),n=0;n<e;n++)t[n]=r[n];return t}function hasArrayNature(r){return!!r&&("object"==typeof r||"function"==typeof r)&&"length"in r&&!("setInterval"in r)&&"number"!=typeof r.nodeType&&(Array.isArray(r)||"callee"in r||"item"in r)}function createArrayFromMixed(r){return hasArrayNature(r)?Array.isArray(r)?r.slice():toArray(r):[r]}module.exports=createArrayFromMixed;

}).call(this,require('_process'))

},{"./invariant":472,"_process":484}],463:[function(require,module,exports){
(function (process){
"use strict";var ExecutionEnvironment=require("./ExecutionEnvironment"),createArrayFromMixed=require("./createArrayFromMixed"),getMarkupWrap=require("./getMarkupWrap"),invariant=require("./invariant"),dummyNode=ExecutionEnvironment.canUseDOM?document.createElement("div"):null,nodeNamePattern=/^\s*<(\w+)/;function getNodeName(e){var r=e.match(nodeNamePattern);return r&&r[1].toLowerCase()}function createNodesFromMarkup(e,r){var a=dummyNode;dummyNode||("production"!==process.env.NODE_ENV?invariant(!1,"createNodesFromMarkup dummy not initialized"):invariant(!1));var t=getNodeName(e),n=t&&getMarkupWrap(t);if(n){a.innerHTML=n[1]+e+n[2];for(var i=n[0];i--;)a=a.lastChild}else a.innerHTML=e;var o=a.getElementsByTagName("script");o.length&&(r||("production"!==process.env.NODE_ENV?invariant(!1,"createNodesFromMarkup(...): Unexpected <script> element rendered."):invariant(!1)),createArrayFromMixed(o).forEach(r));for(var d=Array.from(a.childNodes);a.lastChild;)a.removeChild(a.lastChild);return d}module.exports=createNodesFromMarkup;

}).call(this,require('_process'))

},{"./ExecutionEnvironment":458,"./createArrayFromMixed":462,"./getMarkupWrap":468,"./invariant":472,"_process":484}],464:[function(require,module,exports){
"use strict";function makeEmptyFunction(t){return function(){return t}}var emptyFunction=function emptyFunction(){};emptyFunction.thatReturns=makeEmptyFunction,emptyFunction.thatReturnsFalse=makeEmptyFunction(!1),emptyFunction.thatReturnsTrue=makeEmptyFunction(!0),emptyFunction.thatReturnsNull=makeEmptyFunction(null),emptyFunction.thatReturnsThis=function(){return this},emptyFunction.thatReturnsArgument=function(t){return t},module.exports=emptyFunction;

},{}],465:[function(require,module,exports){
(function (process){
"use strict";var emptyObject={};"production"!==process.env.NODE_ENV&&Object.freeze(emptyObject),module.exports=emptyObject;

}).call(this,require('_process'))

},{"_process":484}],466:[function(require,module,exports){
"use strict";function focusNode(o){try{o.focus()}catch(o){}}module.exports=focusNode;

},{}],467:[function(require,module,exports){
"use strict";function getActiveElement(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}module.exports=getActiveElement;

},{}],468:[function(require,module,exports){
(function (process){
"use strict";var ExecutionEnvironment=require("./ExecutionEnvironment"),invariant=require("./invariant"),dummyNode=ExecutionEnvironment.canUseDOM?document.createElement("div"):null,shouldWrap={},selectWrap=[1,'<select multiple="true">',"</select>"],tableWrap=[1,"<table>","</table>"],trWrap=[3,"<table><tbody><tr>","</tr></tbody></table>"],svgWrap=[1,'<svg xmlns="http://www.w3.org/2000/svg">',"</svg>"],markupWrap={"*":[1,"?<div>","</div>"],area:[1,"<map>","</map>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],legend:[1,"<fieldset>","</fieldset>"],param:[1,"<object>","</object>"],tr:[2,"<table><tbody>","</tbody></table>"],optgroup:selectWrap,option:selectWrap,caption:tableWrap,colgroup:tableWrap,tbody:tableWrap,tfoot:tableWrap,thead:tableWrap,td:trWrap,th:trWrap},svgElements=["circle","clipPath","defs","ellipse","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","text","tspan"];function getMarkupWrap(t){return dummyNode||("production"!==process.env.NODE_ENV?invariant(!1,"Markup wrapping node not initialized"):invariant(!1)),markupWrap.hasOwnProperty(t)||(t="*"),shouldWrap.hasOwnProperty(t)||(dummyNode.innerHTML="*"===t?"<link />":"<"+t+"></"+t+">",shouldWrap[t]=!dummyNode.firstChild),shouldWrap[t]?markupWrap[t]:null}svgElements.forEach(function(t){markupWrap[t]=svgWrap,shouldWrap[t]=!0}),module.exports=getMarkupWrap;

}).call(this,require('_process'))

},{"./ExecutionEnvironment":458,"./invariant":472,"_process":484}],469:[function(require,module,exports){
"use strict";function getUnboundedScrollPosition(o){return o.Window&&o instanceof o.Window?{x:o.pageXOffset||o.document.documentElement.scrollLeft,y:o.pageYOffset||o.document.documentElement.scrollTop}:{x:o.scrollLeft,y:o.scrollTop}}module.exports=getUnboundedScrollPosition;

},{}],470:[function(require,module,exports){
"use strict";var _uppercasePattern=/([A-Z])/g;function hyphenate(e){return e.replace(_uppercasePattern,"-$1").toLowerCase()}module.exports=hyphenate;

},{}],471:[function(require,module,exports){
"use strict";var hyphenate=require("./hyphenate"),msPattern=/^ms-/;function hyphenateStyleName(e){return hyphenate(e).replace(msPattern,"-ms-")}module.exports=hyphenateStyleName;

},{"./hyphenate":470}],472:[function(require,module,exports){
(function (process){
"use strict";var validateFormat=function validateFormat(r){};function invariant(r,e,a,n,i,o,t,v){if(validateFormat(e),!r){var d;if(void 0===e)d=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[a,n,i,o,t,v],l=0;(d=new Error(e.replace(/%s/g,function(){return s[l++]}))).name="Invariant Violation"}throw d.framesToPop=1,d}}"production"!==process.env.NODE_ENV&&(validateFormat=function validateFormat(r){if(void 0===r)throw new Error("invariant requires an error message argument")}),module.exports=invariant;

}).call(this,require('_process'))

},{"_process":484}],473:[function(require,module,exports){
"use strict";function isNode(e){var o=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof o.Node?e instanceof o.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}module.exports=isNode;

},{}],474:[function(require,module,exports){
"use strict";var isNode=require("./isNode");function isTextNode(e){return isNode(e)&&3==e.nodeType}module.exports=isTextNode;

},{"./isNode":473}],475:[function(require,module,exports){
"use strict";function memoizeStringOnly(n){var r={};return function(t){return r.hasOwnProperty(t)||(r[t]=n.call(this,t)),r[t]}}module.exports=memoizeStringOnly;

},{}],476:[function(require,module,exports){
"use strict";var performance,ExecutionEnvironment=require("./ExecutionEnvironment");ExecutionEnvironment.canUseDOM&&(performance=window.performance||window.msPerformance||window.webkitPerformance),module.exports=performance||{};

},{"./ExecutionEnvironment":458}],477:[function(require,module,exports){
"use strict";var performanceNow,performance=require("./performance");performanceNow=performance.now?function performanceNow(){return performance.now()}:function performanceNow(){return Date.now()},module.exports=performanceNow;

},{"./performance":476}],478:[function(require,module,exports){
"use strict";var hasOwnProperty=Object.prototype.hasOwnProperty;function is(t,e){return t===e?0!==t||0!==e||1/t==1/e:t!=t&&e!=e}function shallowEqual(t,e){if(is(t,e))return!0;if("object"!=typeof t||null===t||"object"!=typeof e||null===e)return!1;var r=Object.keys(t),n=Object.keys(e);if(r.length!==n.length)return!1;for(var l=0;l<r.length;l++)if(!hasOwnProperty.call(e,r[l])||!is(t[r[l]],e[r[l]]))return!1;return!0}module.exports=shallowEqual;

},{}],479:[function(require,module,exports){
(function (process){
"use strict";var emptyFunction=require("./emptyFunction"),warning=emptyFunction;if("production"!==process.env.NODE_ENV){var printWarning=function printWarning(n){for(var r=arguments.length,i=Array(r>1?r-1:0),e=1;e<r;e++)i[e-1]=arguments[e];var o=0,t="Warning: "+n.replace(/%s/g,function(){return i[o++]});"undefined"!=typeof console&&console.error(t);try{throw new Error(t)}catch(n){}};warning=function warning(n,r){if(void 0===r)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");if(0!==r.indexOf("Failed Composite propType: ")&&!n){for(var i=arguments.length,e=Array(i>2?i-2:0),o=2;o<i;o++)e[o-2]=arguments[o];printWarning.apply(void 0,[r].concat(e))}}}module.exports=warning;

}).call(this,require('_process'))

},{"./emptyFunction":464,"_process":484}],480:[function(require,module,exports){
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t():"function"==typeof define&&define.amd?define(t):t()}(0,function(){"use strict";"undefined"!=typeof document&&function onDOMReady(e){var t;function load(){t||(t=!0,e())}["interactive","complete"].indexOf(document.readyState)>=0?e():(t=!1,document.addEventListener("DOMContentLoaded",load,!1),window.addEventListener("load",load,!1))}(function init(){var e=!0,t=!1,n=null,o={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function isValidFocusTarget(e){return!!(e&&e!==document&&"HTML"!==e.nodeName&&"BODY"!==e.nodeName&&"classList"in e&&"contains"in e.classList)}function addFocusVisibleClass(e){e.classList.contains("focus-visible")||(e.classList.add("focus-visible"),e.setAttribute("data-focus-visible-added",""))}function onPointerDown(t){e=!1}function addInitialPointerMoveListeners(){document.addEventListener("mousemove",onInitialPointerMove),document.addEventListener("mousedown",onInitialPointerMove),document.addEventListener("mouseup",onInitialPointerMove),document.addEventListener("pointermove",onInitialPointerMove),document.addEventListener("pointerdown",onInitialPointerMove),document.addEventListener("pointerup",onInitialPointerMove),document.addEventListener("touchmove",onInitialPointerMove),document.addEventListener("touchstart",onInitialPointerMove),document.addEventListener("touchend",onInitialPointerMove)}function onInitialPointerMove(t){"html"!==t.target.nodeName.toLowerCase()&&(e=!1,function removeInitialPointerMoveListeners(){document.removeEventListener("mousemove",onInitialPointerMove),document.removeEventListener("mousedown",onInitialPointerMove),document.removeEventListener("mouseup",onInitialPointerMove),document.removeEventListener("pointermove",onInitialPointerMove),document.removeEventListener("pointerdown",onInitialPointerMove),document.removeEventListener("pointerup",onInitialPointerMove),document.removeEventListener("touchmove",onInitialPointerMove),document.removeEventListener("touchstart",onInitialPointerMove),document.removeEventListener("touchend",onInitialPointerMove)}())}document.addEventListener("keydown",function onKeyDown(t){isValidFocusTarget(document.activeElement)&&addFocusVisibleClass(document.activeElement),e=!0},!0),document.addEventListener("mousedown",onPointerDown,!0),document.addEventListener("pointerdown",onPointerDown,!0),document.addEventListener("touchstart",onPointerDown,!0),document.addEventListener("focus",function onFocus(t){isValidFocusTarget(t.target)&&(e||function focusTriggersKeyboardModality(e){var t=e.type,n=e.tagName;return!("INPUT"!=n||!o[t]||e.readOnly)||"TEXTAREA"==n&&!e.readOnly||!!e.isContentEditable}(t.target))&&addFocusVisibleClass(t.target)},!0),document.addEventListener("blur",function onBlur(e){isValidFocusTarget(e.target)&&(e.target.classList.contains("focus-visible")||e.target.hasAttribute("data-focus-visible-added"))&&(t=!0,window.clearTimeout(n),n=window.setTimeout(function(){t=!1,window.clearTimeout(n)},100),function removeFocusVisibleClass(e){e.hasAttribute("data-focus-visible-added")&&(e.classList.remove("focus-visible"),e.removeAttribute("data-focus-visible-added"))}(e.target))},!0),document.addEventListener("visibilitychange",function onVisibilityChange(n){"hidden"==document.visibilityState&&(t&&(e=!0),addInitialPointerMoveListeners())},!0),addInitialPointerMoveListeners(),document.body.classList.add("js-focus-visible")})});

},{}],481:[function(require,module,exports){
(function (process){
"use strict";var invariant=function(r,e,n,i,o,a,t,s){if("production"!==process.env.NODE_ENV&&void 0===e)throw new Error("invariant requires an error message argument");if(!r){var u;if(void 0===e)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var v=[n,i,o,a,t,s],d=0;(u=new Error(e.replace(/%s/g,function(){return v[d++]}))).name="Invariant Violation"}throw u.framesToPop=1,u}};module.exports=invariant;

}).call(this,require('_process'))

},{"_process":484}],482:[function(require,module,exports){
function keyCode(e){if(e&&"object"==typeof e){var o=e.which||e.keyCode||e.charCode;o&&(e=o)}if("number"==typeof e)return names[e];var a,r=String(e);return(a=codes[r.toLowerCase()])?a:(a=aliases[r.toLowerCase()])||(1===r.length?r.charCodeAt(0):void 0)}keyCode.isEventKey=function isEventKey(e,o){if(e&&"object"==typeof e){var a=e.which||e.keyCode||e.charCode;if(null==a)return!1;if("string"==typeof o){var r;if(r=codes[o.toLowerCase()])return r===a;if(r=aliases[o.toLowerCase()])return r===a}else if("number"==typeof o)return o===a;return!1}},exports=module.exports=keyCode;var codes=exports.code=exports.codes={backspace:8,tab:9,enter:13,shift:16,ctrl:17,alt:18,"pause/break":19,"caps lock":20,esc:27,space:32,"page up":33,"page down":34,end:35,home:36,left:37,up:38,right:39,down:40,insert:45,delete:46,command:91,"left command":91,"right command":93,"numpad *":106,"numpad +":107,"numpad -":109,"numpad .":110,"numpad /":111,"num lock":144,"scroll lock":145,"my computer":182,"my calculator":183,";":186,"=":187,",":188,"-":189,".":190,"/":191,"`":192,"[":219,"\\":220,"]":221,"'":222},aliases=exports.aliases={windows:91,"⇧":16,"⌥":18,"⌃":17,"⌘":91,ctl:17,control:17,option:18,pause:19,break:19,caps:20,return:13,escape:27,spc:32,spacebar:32,pgup:33,pgdn:34,ins:45,del:46,cmd:91};for(i=97;i<123;i++)codes[String.fromCharCode(i)]=i-32;for(var i=48;i<58;i++)codes[i-48]=i;for(i=1;i<13;i++)codes["f"+i]=i+111;for(i=0;i<10;i++)codes["numpad "+i]=i+96;var names=exports.names=exports.title={};for(i in codes)names[codes[i]]=i;for(var alias in aliases)codes[alias]=aliases[alias];

},{}],483:[function(require,module,exports){
"use strict";var getOwnPropertySymbols=Object.getOwnPropertySymbols,hasOwnProperty=Object.prototype.hasOwnProperty,propIsEnumerable=Object.prototype.propertyIsEnumerable;function toObject(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}function shouldUseNative(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var r={},t=0;t<10;t++)r["_"+String.fromCharCode(t)]=t;if("0123456789"!==Object.getOwnPropertyNames(r).map(function(e){return r[e]}).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach(function(e){n[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(e){return!1}}module.exports=shouldUseNative()?Object.assign:function(e,r){for(var t,n,o=toObject(e),a=1;a<arguments.length;a++){for(var s in t=Object(arguments[a]))hasOwnProperty.call(t,s)&&(o[s]=t[s]);if(getOwnPropertySymbols){n=getOwnPropertySymbols(t);for(var c=0;c<n.length;c++)propIsEnumerable.call(t,n[c])&&(o[n[c]]=t[n[c]])}}return o};

},{}],484:[function(require,module,exports){
var cachedSetTimeout,cachedClearTimeout,process=module.exports={};function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}function runTimeout(e){if(cachedSetTimeout===setTimeout)return setTimeout(e,0);if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout)return cachedSetTimeout=setTimeout,setTimeout(e,0);try{return cachedSetTimeout(e,0)}catch(t){try{return cachedSetTimeout.call(null,e,0)}catch(t){return cachedSetTimeout.call(this,e,0)}}}function runClearTimeout(e){if(cachedClearTimeout===clearTimeout)return clearTimeout(e);if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout)return cachedClearTimeout=clearTimeout,clearTimeout(e);try{return cachedClearTimeout(e)}catch(t){try{return cachedClearTimeout.call(null,e)}catch(t){return cachedClearTimeout.call(this,e)}}}!function(){try{cachedSetTimeout="function"==typeof setTimeout?setTimeout:defaultSetTimout}catch(e){cachedSetTimeout=defaultSetTimout}try{cachedClearTimeout="function"==typeof clearTimeout?clearTimeout:defaultClearTimeout}catch(e){cachedClearTimeout=defaultClearTimeout}}();var currentQueue,queue=[],draining=!1,queueIndex=-1;function cleanUpNextTick(){draining&&currentQueue&&(draining=!1,currentQueue.length?queue=currentQueue.concat(queue):queueIndex=-1,queue.length&&drainQueue())}function drainQueue(){if(!draining){var e=runTimeout(cleanUpNextTick);draining=!0;for(var t=queue.length;t;){for(currentQueue=queue,queue=[];++queueIndex<t;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,t=queue.length}currentQueue=null,draining=!1,runClearTimeout(e)}}function Item(e,t){this.fun=e,this.array=t}function noop(){}process.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];queue.push(new Item(e,t)),1!==queue.length||draining||runTimeout(drainQueue)},Item.prototype.run=function(){this.fun.apply(null,this.array)},process.title="browser",process.browser=!0,process.env={},process.argv=[],process.version="",process.versions={},process.on=noop,process.addListener=noop,process.once=noop,process.off=noop,process.removeListener=noop,process.removeAllListeners=noop,process.emit=noop,process.prependListener=noop,process.prependOnceListener=noop,process.listeners=function(e){return[]},process.binding=function(e){throw new Error("process.binding is not supported")},process.cwd=function(){return"/"},process.chdir=function(e){throw new Error("process.chdir is not supported")},process.umask=function(){return 0};

},{}],485:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=all;var _createChainableTypeChecker=require("./utils/createChainableTypeChecker"),_createChainableTypeChecker2=_interopRequireDefault(_createChainableTypeChecker);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function all(){for(var e=arguments.length,r=Array(e),a=0;a<e;a++)r[a]=arguments[a];return(0,_createChainableTypeChecker2.default)(function allPropTypes(){for(var e=arguments.length,a=Array(e),l=0;l<e;l++)a[l]=arguments[l];var t=null;return r.forEach(function(e){if(null==t){var r=e.apply(void 0,a);null!=r&&(t=r)}}),t})}module.exports=exports.default;

},{"./utils/createChainableTypeChecker":490}],486:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_react=require("react"),_react2=_interopRequireDefault(_react),_createChainableTypeChecker=require("./utils/createChainableTypeChecker"),_createChainableTypeChecker2=_interopRequireDefault(_createChainableTypeChecker);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function validate(e,t,o,r,a){var n=e[t],l=void 0===n?"undefined":_typeof(n);return _react2.default.isValidElement(n)?new Error("Invalid "+r+" `"+a+"` of type ReactElement supplied to `"+o+"`, expected a ReactComponent or a DOMElement. You can usually obtain a ReactComponent or DOMElement from a ReactElement by attaching a ref to it."):"object"===l&&"function"==typeof n.render||1===n.nodeType?null:new Error("Invalid "+r+" `"+a+"` of value `"+n+"` supplied to `"+o+"`, expected a ReactComponent or a DOMElement.")}exports.default=(0,_createChainableTypeChecker2.default)(validate),module.exports=exports.default;

},{"./utils/createChainableTypeChecker":490,"react":777}],487:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=deprecated;var _warning=require("warning"),_warning2=_interopRequireDefault(_warning);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}var warned={};function deprecated(e,r){return function validate(n,a,t,d,u){var i=t||"<<anonymous>>",o=u||a;if(null!=n[a]){var l=t+"."+a;(0,_warning2.default)(warned[l],"The "+d+" `"+o+"` of `"+i+"` is deprecated. "+r+"."),warned[l]=!0}for(var f=arguments.length,p=Array(f>5?f-5:0),s=5;s<f;s++)p[s-5]=arguments[s];return e.apply(void 0,[n,a,t,d,u].concat(p))}}function _resetWarned(){warned={}}deprecated._resetWarned=_resetWarned,module.exports=exports.default;

},{"warning":780}],488:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _react=require("react"),_react2=_interopRequireDefault(_react),_reactIs=require("react-is"),_createChainableTypeChecker=require("./utils/createChainableTypeChecker"),_createChainableTypeChecker2=_interopRequireDefault(_createChainableTypeChecker);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function elementType(e,t,r,a,n){var l=e[t];return _react2.default.isValidElement(l)?new Error("Invalid "+a+" `"+n+"` of type ReactElement supplied to `"+r+"`,expected an element type (a string , component class, or function component)."):(0,_reactIs.isValidElementType)(l)?null:new Error("Invalid "+a+" `"+n+"` of value `"+l+"` supplied to `"+r+"`, expected an element type (a string , component class, or function component).")}exports.default=(0,_createChainableTypeChecker2.default)(elementType),module.exports=exports.default;

},{"./utils/createChainableTypeChecker":490,"react":777,"react-is":731}],489:[function(require,module,exports){
"use strict";function isRequiredForA11y(e){return function validate(r,s,o,t,u){var i=o||"<<anonymous>>",a=u||s;if(null==r[s])return new Error("The "+t+" `"+a+"` is required to make `"+i+"` accessible for users of assistive technologies such as screen readers.");for(var n=arguments.length,l=Array(n>5?n-5:0),c=5;c<n;c++)l[c-5]=arguments[c];return e.apply(void 0,[r,s,o,t,u].concat(l))}}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=isRequiredForA11y,module.exports=exports.default;

},{}],490:[function(require,module,exports){
"use strict";function createChainableTypeChecker(e){function checkType(r,n,t,u,a,c){var l=u||"<<anonymous>>",i=c||t;if(null==n[t])return r?new Error("Required "+a+" `"+i+"` was not specified in `"+l+"`."):null;for(var o=arguments.length,p=Array(o>6?o-6:0),d=6;d<o;d++)p[d-6]=arguments[d];return e.apply(void 0,[n,t,l,a,i].concat(p))}var r=checkType.bind(null,!1);return r.isRequired=checkType.bind(null,!0),r}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=createChainableTypeChecker,module.exports=exports.default;

},{}],491:[function(require,module,exports){
(function (process){
"use strict";var printWarning=function(){};if("production"!==process.env.NODE_ENV){var ReactPropTypesSecret=require("./lib/ReactPropTypesSecret"),loggedTypeFailures={};printWarning=function(e){var r="Warning: "+e;"undefined"!=typeof console&&console.error(r);try{throw new Error(r)}catch(e){}}}function checkPropTypes(e,r,n,t,a){if("production"!==process.env.NODE_ENV)for(var o in e)if(e.hasOwnProperty(o)){var i;try{if("function"!=typeof e[o]){var c=Error((t||"React class")+": "+n+" type `"+o+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+typeof e[o]+"`.");throw c.name="Invariant Violation",c}i=e[o](r,o,t,n,null,ReactPropTypesSecret)}catch(e){i=e}if(!i||i instanceof Error||printWarning((t||"React class")+": type specification of "+n+" `"+o+"` is invalid; the type checker function must return `null` or an `Error` but returned a "+typeof i+". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."),i instanceof Error&&!(i.message in loggedTypeFailures)){loggedTypeFailures[i.message]=!0;var s=a?a():"";printWarning("Failed "+n+" type: "+i.message+(null!=s?s:""))}}}module.exports=checkPropTypes;

}).call(this,require('_process'))

},{"./lib/ReactPropTypesSecret":496,"_process":484}],492:[function(require,module,exports){
"use strict";var factory=require("./factoryWithTypeCheckers");module.exports=function(r){return factory(r,!1)};

},{"./factoryWithTypeCheckers":494}],493:[function(require,module,exports){
"use strict";var ReactPropTypesSecret=require("./lib/ReactPropTypesSecret");function emptyFunction(){}module.exports=function(){function shim(e,t,i,r,s,o){if(o!==ReactPropTypesSecret){var m=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw m.name="Invariant Violation",m}}function getShim(){return shim}shim.isRequired=shim;var e={array:shim,bool:shim,func:shim,number:shim,object:shim,string:shim,symbol:shim,any:shim,arrayOf:getShim,element:shim,instanceOf:getShim,node:shim,objectOf:getShim,oneOf:getShim,oneOfType:getShim,shape:getShim,exact:getShim};return e.checkPropTypes=emptyFunction,e.PropTypes=e,e};

},{"./lib/ReactPropTypesSecret":496}],494:[function(require,module,exports){
(function (process){
"use strict";var assign=require("object-assign"),ReactPropTypesSecret=require("./lib/ReactPropTypesSecret"),checkPropTypes=require("./checkPropTypes"),printWarning=function(){};function emptyFunctionThatReturnsNull(){return null}"production"!==process.env.NODE_ENV&&(printWarning=function(e){var r="Warning: "+e;"undefined"!=typeof console&&console.error(r);try{throw new Error(r)}catch(e){}}),module.exports=function(e,r){var n="function"==typeof Symbol&&Symbol.iterator,t="@@iterator";var a="<<anonymous>>",o={array:createPrimitiveTypeChecker("array"),bool:createPrimitiveTypeChecker("boolean"),func:createPrimitiveTypeChecker("function"),number:createPrimitiveTypeChecker("number"),object:createPrimitiveTypeChecker("object"),string:createPrimitiveTypeChecker("string"),symbol:createPrimitiveTypeChecker("symbol"),any:function createAnyTypeChecker(){return createChainableTypeChecker(emptyFunctionThatReturnsNull)}(),arrayOf:function createArrayOfTypeChecker(e){return createChainableTypeChecker(function validate(r,n,t,a,o){if("function"!=typeof e)return new PropTypeError("Property `"+o+"` of component `"+t+"` has invalid PropType notation inside arrayOf.");var i=r[n];if(!Array.isArray(i)){var p=getPropType(i);return new PropTypeError("Invalid "+a+" `"+o+"` of type `"+p+"` supplied to `"+t+"`, expected an array.")}for(var c=0;c<i.length;c++){var u=e(i,c,t,a,o+"["+c+"]",ReactPropTypesSecret);if(u instanceof Error)return u}return null})},element:function createElementTypeChecker(){return createChainableTypeChecker(function validate(r,n,t,a,o){var i=r[n];if(!e(i)){var p=getPropType(i);return new PropTypeError("Invalid "+a+" `"+o+"` of type `"+p+"` supplied to `"+t+"`, expected a single ReactElement.")}return null})}(),instanceOf:function createInstanceTypeChecker(e){return createChainableTypeChecker(function validate(r,n,t,o,i){if(!(r[n]instanceof e)){var p=e.name||a,c=function getClassName(e){if(!e.constructor||!e.constructor.name)return a;return e.constructor.name}(r[n]);return new PropTypeError("Invalid "+o+" `"+i+"` of type `"+c+"` supplied to `"+t+"`, expected instance of `"+p+"`.")}return null})},node:function createNodeChecker(){return createChainableTypeChecker(function validate(e,r,n,t,a){if(!isNode(e[r]))return new PropTypeError("Invalid "+t+" `"+a+"` supplied to `"+n+"`, expected a ReactNode.");return null})}(),objectOf:function createObjectOfTypeChecker(e){return createChainableTypeChecker(function validate(r,n,t,a,o){if("function"!=typeof e)return new PropTypeError("Property `"+o+"` of component `"+t+"` has invalid PropType notation inside objectOf.");var i=r[n],p=getPropType(i);if("object"!==p)return new PropTypeError("Invalid "+a+" `"+o+"` of type `"+p+"` supplied to `"+t+"`, expected an object.");for(var c in i)if(i.hasOwnProperty(c)){var u=e(i,c,t,a,o+"."+c,ReactPropTypesSecret);if(u instanceof Error)return u}return null})},oneOf:function createEnumTypeChecker(e){if(!Array.isArray(e))return"production"!==process.env.NODE_ENV&&printWarning("Invalid argument supplied to oneOf, expected an instance of array."),emptyFunctionThatReturnsNull;return createChainableTypeChecker(function validate(r,n,t,a,o){for(var i=r[n],p=0;p<e.length;p++)if(is(i,e[p]))return null;var c=JSON.stringify(e);return new PropTypeError("Invalid "+a+" `"+o+"` of value `"+i+"` supplied to `"+t+"`, expected one of "+c+".")})},oneOfType:function createUnionTypeChecker(e){if(!Array.isArray(e))return"production"!==process.env.NODE_ENV&&printWarning("Invalid argument supplied to oneOfType, expected an instance of array."),emptyFunctionThatReturnsNull;for(var r=0;r<e.length;r++){var n=e[r];if("function"!=typeof n)return printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received "+getPostfixForTypeWarning(n)+" at index "+r+"."),emptyFunctionThatReturnsNull}return createChainableTypeChecker(function validate(r,n,t,a,o){for(var i=0;i<e.length;i++){var p=e[i];if(null==p(r,n,t,a,o,ReactPropTypesSecret))return null}return new PropTypeError("Invalid "+a+" `"+o+"` supplied to `"+t+"`.")})},shape:function createShapeTypeChecker(e){return createChainableTypeChecker(function validate(r,n,t,a,o){var i=r[n],p=getPropType(i);if("object"!==p)return new PropTypeError("Invalid "+a+" `"+o+"` of type `"+p+"` supplied to `"+t+"`, expected `object`.");for(var c in e){var u=e[c];if(u){var l=u(i,c,t,a,o+"."+c,ReactPropTypesSecret);if(l)return l}}return null})},exact:function createStrictShapeTypeChecker(e){return createChainableTypeChecker(function validate(r,n,t,a,o){var i=r[n],p=getPropType(i);if("object"!==p)return new PropTypeError("Invalid "+a+" `"+o+"` of type `"+p+"` supplied to `"+t+"`, expected `object`.");var c=assign({},r[n],e);for(var u in c){var l=e[u];if(!l)return new PropTypeError("Invalid "+a+" `"+o+"` key `"+u+"` supplied to `"+t+"`.\nBad object: "+JSON.stringify(r[n],null,"  ")+"\nValid keys: "+JSON.stringify(Object.keys(e),null,"  "));var y=l(i,u,t,a,o+"."+u,ReactPropTypesSecret);if(y)return y}return null})}};function is(e,r){return e===r?0!==e||1/e==1/r:e!=e&&r!=r}function PropTypeError(e){this.message=e,this.stack=""}function createChainableTypeChecker(e){if("production"!==process.env.NODE_ENV)var n={},t=0;function checkType(o,i,p,c,u,l,y){if(c=c||a,l=l||p,y!==ReactPropTypesSecret){if(r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}if("production"!==process.env.NODE_ENV&&"undefined"!=typeof console){var f=c+":"+p;!n[f]&&t<3&&(printWarning("You are manually calling a React.PropTypes validation function for the `"+l+"` prop on `"+c+"`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."),n[f]=!0,t++)}}return null==i[p]?o?null===i[p]?new PropTypeError("The "+u+" `"+l+"` is marked as required in `"+c+"`, but its value is `null`."):new PropTypeError("The "+u+" `"+l+"` is marked as required in `"+c+"`, but its value is `undefined`."):null:e(i,p,c,u,l)}var o=checkType.bind(null,!1);return o.isRequired=checkType.bind(null,!0),o}function createPrimitiveTypeChecker(e){return createChainableTypeChecker(function validate(r,n,t,a,o,i){var p=r[n];return getPropType(p)!==e?new PropTypeError("Invalid "+a+" `"+o+"` of type `"+getPreciseType(p)+"` supplied to `"+t+"`, expected `"+e+"`."):null})}function isNode(r){switch(typeof r){case"number":case"string":case"undefined":return!0;case"boolean":return!r;case"object":if(Array.isArray(r))return r.every(isNode);if(null===r||e(r))return!0;var a=function getIteratorFn(e){var r=e&&(n&&e[n]||e[t]);if("function"==typeof r)return r}(r);if(!a)return!1;var o,i=a.call(r);if(a!==r.entries){for(;!(o=i.next()).done;)if(!isNode(o.value))return!1}else for(;!(o=i.next()).done;){var p=o.value;if(p&&!isNode(p[1]))return!1}return!0;default:return!1}}function getPropType(e){var r=typeof e;return Array.isArray(e)?"array":e instanceof RegExp?"object":function isSymbol(e,r){return"symbol"===e||"Symbol"===r["@@toStringTag"]||"function"==typeof Symbol&&r instanceof Symbol}(r,e)?"symbol":r}function getPreciseType(e){if(null==e)return""+e;var r=getPropType(e);if("object"===r){if(e instanceof Date)return"date";if(e instanceof RegExp)return"regexp"}return r}function getPostfixForTypeWarning(e){var r=getPreciseType(e);switch(r){case"array":case"object":return"an "+r;case"boolean":case"date":case"regexp":return"a "+r;default:return r}}return PropTypeError.prototype=Error.prototype,o.checkPropTypes=checkPropTypes,o.PropTypes=o,o};

}).call(this,require('_process'))

},{"./checkPropTypes":491,"./lib/ReactPropTypesSecret":496,"_process":484,"object-assign":483}],495:[function(require,module,exports){
(function (process){
if("production"!==process.env.NODE_ENV){var REACT_ELEMENT_TYPE="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,isValidElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===REACT_ELEMENT_TYPE},throwOnDirectAccess=!0;module.exports=require("./factoryWithTypeCheckers")(isValidElement,throwOnDirectAccess)}else module.exports=require("./factoryWithThrowingShims")();

}).call(this,require('_process'))

},{"./factoryWithThrowingShims":493,"./factoryWithTypeCheckers":494,"_process":484}],496:[function(require,module,exports){
"use strict";var ReactPropTypesSecret="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";module.exports=ReactPropTypesSecret;

},{}],497:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_react=_interopRequireDefault(require("react")),_PanelGroup=_interopRequireDefault(require("./PanelGroup")),Accordion=function(e){function Accordion(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(Accordion,e),Accordion.prototype.render=function render(){return _react.default.createElement(_PanelGroup.default,(0,_extends2.default)({},this.props,{accordion:!0}),this.props.children)},Accordion}(_react.default.Component),_default=Accordion;exports.default=_default,module.exports=exports.default;

},{"./PanelGroup":569,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"react":777}],498:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _values=_interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/values")),_extends3=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_bootstrapUtils=require("./utils/bootstrapUtils"),_StyleConfig=require("./utils/StyleConfig"),_CloseButton=_interopRequireDefault(require("./CloseButton")),propTypes={onDismiss:_propTypes.default.func,closeLabel:_propTypes.default.string},defaultProps={closeLabel:"Close alert"},Alert=function(e){function Alert(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(Alert,e),Alert.prototype.render=function render(){var e,t=this.props,r=t.onDismiss,s=t.closeLabel,l=t.className,o=t.children,i=(0,_objectWithoutPropertiesLoose2.default)(t,["onDismiss","closeLabel","className","children"]),a=(0,_bootstrapUtils.splitBsProps)(i),u=a[0],p=a[1],n=!!r,_=(0,_extends3.default)({},(0,_bootstrapUtils.getClassSet)(u),((e={})[(0,_bootstrapUtils.prefix)(u,"dismissable")]=n,e));return _react.default.createElement("div",(0,_extends3.default)({},p,{role:"alert",className:(0,_classnames.default)(l,_)}),n&&_react.default.createElement(_CloseButton.default,{onClick:r,label:s}),o)},Alert}(_react.default.Component);Alert.propTypes=propTypes,Alert.defaultProps=defaultProps;var _default=(0,_bootstrapUtils.bsStyles)((0,_values.default)(_StyleConfig.State),_StyleConfig.State.INFO,(0,_bootstrapUtils.bsClass)("alert",Alert));exports.default=_default,module.exports=exports.default;

},{"./CloseButton":510,"./utils/StyleConfig":594,"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/core-js/object/values":9,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"react":777}],499:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_bootstrapUtils=require("./utils/bootstrapUtils"),propTypes={pullRight:_propTypes.default.bool},defaultProps={pullRight:!1},Badge=function(e){function Badge(){return e.apply(this,arguments)||this}(0,_inheritsLoose2.default)(Badge,e);var t=Badge.prototype;return t.hasContent=function hasContent(e){var t=!1;return _react.default.Children.forEach(e,function(e){t||(e||0===e)&&(t=!0)}),t},t.render=function render(){var e=this.props,t=e.pullRight,r=e.className,s=e.children,o=(0,_objectWithoutPropertiesLoose2.default)(e,["pullRight","className","children"]),a=(0,_bootstrapUtils.splitBsProps)(o),i=a[0],l=a[1],u=(0,_extends2.default)({},(0,_bootstrapUtils.getClassSet)(i),{"pull-right":t,hidden:!this.hasContent(s)});return _react.default.createElement("span",(0,_extends2.default)({},l,{className:(0,_classnames.default)(r,u)}),s)},Badge}(_react.default.Component);Badge.propTypes=propTypes,Badge.defaultProps=defaultProps;var _default=(0,_bootstrapUtils.bsClass)("badge",Badge);exports.default=_default,module.exports=exports.default;

},{"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"react":777}],500:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_BreadcrumbItem=_interopRequireDefault(require("./BreadcrumbItem")),_bootstrapUtils=require("./utils/bootstrapUtils"),Breadcrumb=function(e){function Breadcrumb(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(Breadcrumb,e),Breadcrumb.prototype.render=function render(){var e=this.props,r=e.className,t=(0,_objectWithoutPropertiesLoose2.default)(e,["className"]),a=(0,_bootstrapUtils.splitBsProps)(t),s=a[0],u=a[1],o=(0,_bootstrapUtils.getClassSet)(s);return _react.default.createElement("ol",(0,_extends2.default)({},u,{role:"navigation","aria-label":"breadcrumbs",className:(0,_classnames.default)(r,o)}))},Breadcrumb}(_react.default.Component);Breadcrumb.Item=_BreadcrumbItem.default;var _default=(0,_bootstrapUtils.bsClass)("breadcrumb",Breadcrumb);exports.default=_default,module.exports=exports.default;

},{"./BreadcrumbItem":501,"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"react":777}],501:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_SafeAnchor=_interopRequireDefault(require("./SafeAnchor")),propTypes={active:_propTypes.default.bool,href:_propTypes.default.string,title:_propTypes.default.node,target:_propTypes.default.string},defaultProps={active:!1},BreadcrumbItem=function(e){function BreadcrumbItem(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(BreadcrumbItem,e),BreadcrumbItem.prototype.render=function render(){var e=this.props,r=e.active,t=e.href,a=e.title,u=e.target,o=e.className,s=(0,_objectWithoutPropertiesLoose2.default)(e,["active","href","title","target","className"]),i={href:t,title:a,target:u};return _react.default.createElement("li",{className:(0,_classnames.default)(o,{active:r})},r?_react.default.createElement("span",s):_react.default.createElement(_SafeAnchor.default,(0,_extends2.default)({},s,i)))},BreadcrumbItem}(_react.default.Component);BreadcrumbItem.propTypes=propTypes,BreadcrumbItem.defaultProps=defaultProps;var _default=BreadcrumbItem;exports.default=_default,module.exports=exports.default;

},{"./SafeAnchor":578,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"react":777}],502:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _values=_interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/values")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_extends3=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_elementType=_interopRequireDefault(require("prop-types-extra/lib/elementType")),_bootstrapUtils=require("./utils/bootstrapUtils"),_StyleConfig=require("./utils/StyleConfig"),_SafeAnchor=_interopRequireDefault(require("./SafeAnchor")),propTypes={active:_propTypes.default.bool,disabled:_propTypes.default.bool,block:_propTypes.default.bool,onClick:_propTypes.default.func,componentClass:_elementType.default,href:_propTypes.default.string,type:_propTypes.default.oneOf(["button","reset","submit"])},defaultProps={active:!1,block:!1,disabled:!1},Button=function(e){function Button(){return e.apply(this,arguments)||this}(0,_inheritsLoose2.default)(Button,e);var t=Button.prototype;return t.renderAnchor=function renderAnchor(e,t){return _react.default.createElement(_SafeAnchor.default,(0,_extends3.default)({},e,{className:(0,_classnames.default)(t,e.disabled&&"disabled")}))},t.renderButton=function renderButton(e,t){var r=e.componentClass,o=(0,_objectWithoutPropertiesLoose2.default)(e,["componentClass"]),s=r||"button";return _react.default.createElement(s,(0,_extends3.default)({},o,{type:o.type||"button",className:t}))},t.render=function render(){var e,t=this.props,r=t.active,o=t.block,s=t.className,l=(0,_objectWithoutPropertiesLoose2.default)(t,["active","block","className"]),a=(0,_bootstrapUtils.splitBsProps)(l),u=a[0],i=a[1],n=(0,_extends3.default)({},(0,_bootstrapUtils.getClassSet)(u),((e={active:r})[(0,_bootstrapUtils.prefix)(u,"block")]=o,e)),p=(0,_classnames.default)(s,n);return i.href?this.renderAnchor(i,p):this.renderButton(i,p)},Button}(_react.default.Component);Button.propTypes=propTypes,Button.defaultProps=defaultProps;var _default=(0,_bootstrapUtils.bsClass)("btn",(0,_bootstrapUtils.bsSizes)([_StyleConfig.Size.LARGE,_StyleConfig.Size.SMALL,_StyleConfig.Size.XSMALL],(0,_bootstrapUtils.bsStyles)((0,_values.default)(_StyleConfig.State).concat([_StyleConfig.Style.DEFAULT,_StyleConfig.Style.PRIMARY,_StyleConfig.Style.LINK]),_StyleConfig.Style.DEFAULT,Button)));exports.default=_default,module.exports=exports.default;

},{"./SafeAnchor":578,"./utils/StyleConfig":594,"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/core-js/object/values":9,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"prop-types-extra/lib/elementType":488,"react":777}],503:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends3=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_all=_interopRequireDefault(require("prop-types-extra/lib/all")),_Button=_interopRequireDefault(require("./Button")),_bootstrapUtils=require("./utils/bootstrapUtils"),propTypes={vertical:_propTypes.default.bool,justified:_propTypes.default.bool,block:(0,_all.default)(_propTypes.default.bool,function(e){var t=e.block,r=e.vertical;return t&&!r?new Error("`block` requires `vertical` to be set to have any effect"):null})},defaultProps={block:!1,justified:!1,vertical:!1},ButtonGroup=function(e){function ButtonGroup(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(ButtonGroup,e),ButtonGroup.prototype.render=function render(){var e,t=this.props,r=t.block,o=t.justified,s=t.vertical,u=t.className,i=(0,_objectWithoutPropertiesLoose2.default)(t,["block","justified","vertical","className"]),l=(0,_bootstrapUtils.splitBsProps)(i),p=l[0],a=l[1],n=(0,_extends3.default)({},(0,_bootstrapUtils.getClassSet)(p),((e={})[(0,_bootstrapUtils.prefix)(p)]=!s,e[(0,_bootstrapUtils.prefix)(p,"vertical")]=s,e[(0,_bootstrapUtils.prefix)(p,"justified")]=o,e[(0,_bootstrapUtils.prefix)(_Button.default.defaultProps,"block")]=r,e));return _react.default.createElement("div",(0,_extends3.default)({},a,{className:(0,_classnames.default)(u,n)}))},ButtonGroup}(_react.default.Component);ButtonGroup.propTypes=propTypes,ButtonGroup.defaultProps=defaultProps;var _default=(0,_bootstrapUtils.bsClass)("btn-group",ButtonGroup);exports.default=_default,module.exports=exports.default;

},{"./Button":502,"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"prop-types-extra/lib/all":485,"react":777}],504:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_bootstrapUtils=require("./utils/bootstrapUtils"),ButtonToolbar=function(e){function ButtonToolbar(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(ButtonToolbar,e),ButtonToolbar.prototype.render=function render(){var e=this.props,t=e.className,r=(0,_objectWithoutPropertiesLoose2.default)(e,["className"]),o=(0,_bootstrapUtils.splitBsProps)(r),s=o[0],a=o[1],u=(0,_bootstrapUtils.getClassSet)(s);return _react.default.createElement("div",(0,_extends2.default)({},a,{role:"toolbar",className:(0,_classnames.default)(t,u)}))},ButtonToolbar}(_react.default.Component),_default=(0,_bootstrapUtils.bsClass)("btn-toolbar",ButtonToolbar);exports.default=_default,module.exports=exports.default;

},{"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"react":777}],505:[function(require,module,exports){
"use strict";var _interopRequireWildcard=require("@babel/runtime-corejs2/helpers/interopRequireWildcard"),_interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_assertThisInitialized2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireWildcard(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_CarouselCaption=_interopRequireDefault(require("./CarouselCaption")),_CarouselItem=_interopRequireDefault(require("./CarouselItem")),_Glyphicon=_interopRequireDefault(require("./Glyphicon")),_SafeAnchor=_interopRequireDefault(require("./SafeAnchor")),_bootstrapUtils=require("./utils/bootstrapUtils"),_ValidComponentChildren=_interopRequireDefault(require("./utils/ValidComponentChildren")),propTypes={slide:_propTypes.default.bool,indicators:_propTypes.default.bool,interval:_propTypes.default.number,controls:_propTypes.default.bool,pauseOnHover:_propTypes.default.bool,wrap:_propTypes.default.bool,onSelect:_propTypes.default.func,onSlideEnd:_propTypes.default.func,activeIndex:_propTypes.default.number,defaultActiveIndex:_propTypes.default.number,direction:_propTypes.default.oneOf(["prev","next"]),prevIcon:_propTypes.default.node,prevLabel:_propTypes.default.string,nextIcon:_propTypes.default.node,nextLabel:_propTypes.default.string},defaultProps={slide:!0,interval:5e3,pauseOnHover:!0,wrap:!0,indicators:!0,controls:!0,prevIcon:_react.default.createElement(_Glyphicon.default,{glyph:"chevron-left"}),prevLabel:"Previous",nextIcon:_react.default.createElement(_Glyphicon.default,{glyph:"chevron-right"}),nextLabel:"Next"},Carousel=function(e){function Carousel(t,i){var n;(n=e.call(this,t,i)||this).handleMouseOver=n.handleMouseOver.bind((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(n))),n.handleMouseOut=n.handleMouseOut.bind((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(n))),n.handlePrev=n.handlePrev.bind((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(n))),n.handleNext=n.handleNext.bind((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(n))),n.handleItemAnimateOutEnd=n.handleItemAnimateOutEnd.bind((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(n)));var r=t.defaultActiveIndex;return n.state={activeIndex:null!=r?r:0,previousActiveIndex:null,direction:null},n.isUnmounted=!1,n}(0,_inheritsLoose2.default)(Carousel,e);var t=Carousel.prototype;return t.componentDidMount=function componentDidMount(){this.waitForNext()},t.componentWillReceiveProps=function componentWillReceiveProps(e){var t=this.getActiveIndex();null!=e.activeIndex&&e.activeIndex!==t&&(clearTimeout(this.timeout),this.setState({previousActiveIndex:t,direction:null!=e.direction?e.direction:this.getDirection(t,e.activeIndex)})),null==e.activeIndex&&this.state.activeIndex>=e.children.length&&this.setState({activeIndex:0,previousActiveIndex:null,direction:null})},t.componentWillUnmount=function componentWillUnmount(){clearTimeout(this.timeout),this.isUnmounted=!0},t.getActiveIndex=function getActiveIndex(){var e=this.props.activeIndex;return null!=e?e:this.state.activeIndex},t.getDirection=function getDirection(e,t){return e===t?null:e>t?"prev":"next"},t.handleItemAnimateOutEnd=function handleItemAnimateOutEnd(){var e=this;this.setState({previousActiveIndex:null,direction:null},function(){e.waitForNext(),e.props.onSlideEnd&&e.props.onSlideEnd()})},t.handleMouseOut=function handleMouseOut(){this.isPaused&&this.play()},t.handleMouseOver=function handleMouseOver(){this.props.pauseOnHover&&this.pause()},t.handleNext=function handleNext(e){var t=this.getActiveIndex()+1;if(t>_ValidComponentChildren.default.count(this.props.children)-1){if(!this.props.wrap)return;t=0}this.select(t,e,"next")},t.handlePrev=function handlePrev(e){var t=this.getActiveIndex()-1;if(t<0){if(!this.props.wrap)return;t=_ValidComponentChildren.default.count(this.props.children)-1}this.select(t,e,"prev")},t.pause=function pause(){this.isPaused=!0,clearTimeout(this.timeout)},t.play=function play(){this.isPaused=!1,this.waitForNext()},t.select=function select(e,t,i){if(clearTimeout(this.timeout),!this.isUnmounted){var n=this.props.slide?this.getActiveIndex():null;i=i||this.getDirection(n,e);var r=this.props.onSelect;if(r&&(r.length>1?(t?(t.persist(),t.direction=i):t={direction:i},r(e,t)):r(e)),null==this.props.activeIndex&&e!==n){if(null!=this.state.previousActiveIndex)return;this.setState({activeIndex:e,previousActiveIndex:n,direction:i})}}},t.waitForNext=function waitForNext(){var e=this.props,t=e.slide,i=e.interval,n=e.activeIndex;!this.isPaused&&t&&i&&null==n&&(this.timeout=setTimeout(this.handleNext,i))},t.renderControls=function renderControls(e){var t=e.wrap,i=e.children,n=e.activeIndex,r=e.prevIcon,a=e.nextIcon,l=e.bsProps,s=e.prevLabel,o=e.nextLabel,u=(0,_bootstrapUtils.prefix)(l,"control"),d=_ValidComponentChildren.default.count(i);return[(t||0!==n)&&_react.default.createElement(_SafeAnchor.default,{key:"prev",className:(0,_classnames.default)(u,"left"),onClick:this.handlePrev},r,s&&_react.default.createElement("span",{className:"sr-only"},s)),(t||n!==d-1)&&_react.default.createElement(_SafeAnchor.default,{key:"next",className:(0,_classnames.default)(u,"right"),onClick:this.handleNext},a,o&&_react.default.createElement("span",{className:"sr-only"},o))]},t.renderIndicators=function renderIndicators(e,t,i){var n=this,r=[];return _ValidComponentChildren.default.forEach(e,function(e,i){r.push(_react.default.createElement("li",{key:i,className:i===t?"active":null,onClick:function onClick(e){return n.select(i,e)}})," ")}),_react.default.createElement("ol",{className:(0,_bootstrapUtils.prefix)(i,"indicators")},r)},t.render=function render(){var e=this,t=this.props,i=t.slide,n=t.indicators,r=t.controls,a=t.wrap,l=t.prevIcon,s=t.prevLabel,o=t.nextIcon,u=t.nextLabel,d=t.className,p=t.children,c=(0,_objectWithoutPropertiesLoose2.default)(t,["slide","indicators","controls","wrap","prevIcon","prevLabel","nextIcon","nextLabel","className","children"]),h=this.state,f=h.previousActiveIndex,v=h.direction,_=(0,_bootstrapUtils.splitBsPropsAndOmit)(c,["interval","pauseOnHover","onSelect","onSlideEnd","activeIndex","defaultActiveIndex","direction"]),m=_[0],x=_[1],I=this.getActiveIndex(),b=(0,_extends2.default)({},(0,_bootstrapUtils.getClassSet)(m),{slide:i});return _react.default.createElement("div",(0,_extends2.default)({},x,{className:(0,_classnames.default)(d,b),onMouseOver:this.handleMouseOver,onMouseOut:this.handleMouseOut}),n&&this.renderIndicators(p,I,m),_react.default.createElement("div",{className:(0,_bootstrapUtils.prefix)(m,"inner")},_ValidComponentChildren.default.map(p,function(t,n){var r=n===I,a=i&&n===f;return(0,_react.cloneElement)(t,{active:r,index:n,animateOut:a,animateIn:r&&null!=f&&i,direction:v,onAnimateOutEnd:a?e.handleItemAnimateOutEnd:null})})),r&&this.renderControls({wrap:a,children:p,activeIndex:I,prevIcon:l,prevLabel:s,nextIcon:o,nextLabel:u,bsProps:m}))},Carousel}(_react.default.Component);Carousel.propTypes=propTypes,Carousel.defaultProps=defaultProps,Carousel.Caption=_CarouselCaption.default,Carousel.Item=_CarouselItem.default;var _default=(0,_bootstrapUtils.bsClass)("carousel",Carousel);exports.default=_default,module.exports=exports.default;

},{"./CarouselCaption":506,"./CarouselItem":507,"./Glyphicon":524,"./SafeAnchor":578,"./utils/ValidComponentChildren":595,"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/assertThisInitialized":11,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/interopRequireWildcard":15,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"react":777}],506:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_elementType=_interopRequireDefault(require("prop-types-extra/lib/elementType")),_bootstrapUtils=require("./utils/bootstrapUtils"),propTypes={componentClass:_elementType.default},defaultProps={componentClass:"div"},CarouselCaption=function(e){function CarouselCaption(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(CarouselCaption,e),CarouselCaption.prototype.render=function render(){var e=this.props,t=e.componentClass,r=e.className,o=(0,_objectWithoutPropertiesLoose2.default)(e,["componentClass","className"]),s=(0,_bootstrapUtils.splitBsProps)(o),a=s[0],l=s[1],i=(0,_bootstrapUtils.getClassSet)(a);return _react.default.createElement(t,(0,_extends2.default)({},l,{className:(0,_classnames.default)(r,i)}))},CarouselCaption}(_react.default.Component);CarouselCaption.propTypes=propTypes,CarouselCaption.defaultProps=defaultProps;var _default=(0,_bootstrapUtils.bsClass)("carousel-caption",CarouselCaption);exports.default=_default,module.exports=exports.default;

},{"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types-extra/lib/elementType":488,"react":777}],507:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_assertThisInitialized2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_reactDom=_interopRequireDefault(require("react-dom")),_transition=_interopRequireDefault(require("dom-helpers/transition")),propTypes={direction:_propTypes.default.oneOf(["prev","next"]),onAnimateOutEnd:_propTypes.default.func,active:_propTypes.default.bool,animateIn:_propTypes.default.bool,animateOut:_propTypes.default.bool,index:_propTypes.default.number},defaultProps={active:!1,animateIn:!1,animateOut:!1},CarouselItem=function(e){function CarouselItem(t,i){var r;return(r=e.call(this,t,i)||this).handleAnimateOutEnd=r.handleAnimateOutEnd.bind((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(r))),r.state={direction:null},r.isUnmounted=!1,r}(0,_inheritsLoose2.default)(CarouselItem,e);var t=CarouselItem.prototype;return t.componentWillReceiveProps=function componentWillReceiveProps(e){this.props.active!==e.active&&this.setState({direction:null})},t.componentDidUpdate=function componentDidUpdate(e){var t=this,i=this.props.active,r=e.active;!i&&r&&_transition.default.end(_reactDom.default.findDOMNode(this),this.handleAnimateOutEnd),i!==r&&setTimeout(function(){return t.startAnimation()},20)},t.componentWillUnmount=function componentWillUnmount(){this.isUnmounted=!0},t.handleAnimateOutEnd=function handleAnimateOutEnd(){this.isUnmounted||this.props.onAnimateOutEnd&&this.props.onAnimateOutEnd(this.props.index)},t.startAnimation=function startAnimation(){this.isUnmounted||this.setState({direction:"prev"===this.props.direction?"right":"left"})},t.render=function render(){var e=this.props,t=e.direction,i=e.active,r=e.animateIn,n=e.animateOut,a=e.className,o=(0,_objectWithoutPropertiesLoose2.default)(e,["direction","active","animateIn","animateOut","className"]);delete o.onAnimateOutEnd,delete o.index;var s={item:!0,active:i&&!r||n};return t&&i&&r&&(s[t]=!0),this.state.direction&&(r||n)&&(s[this.state.direction]=!0),_react.default.createElement("div",(0,_extends2.default)({},o,{className:(0,_classnames.default)(a,s)}))},CarouselItem}(_react.default.Component);CarouselItem.propTypes=propTypes,CarouselItem.defaultProps=defaultProps;var _default=CarouselItem;exports.default=_default,module.exports=exports.default;

},{"@babel/runtime-corejs2/helpers/assertThisInitialized":11,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"dom-helpers/transition":448,"prop-types":495,"react":777,"react-dom":602}],508:[function(require,module,exports){
(function (process){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_warning=_interopRequireDefault(require("warning")),_bootstrapUtils=require("./utils/bootstrapUtils"),propTypes={inline:_propTypes.default.bool,disabled:_propTypes.default.bool,title:_propTypes.default.string,validationState:_propTypes.default.oneOf(["success","warning","error",null]),inputRef:_propTypes.default.func},defaultProps={inline:!1,disabled:!1,title:""},Checkbox=function(e){function Checkbox(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(Checkbox,e),Checkbox.prototype.render=function render(){var e=this.props,t=e.inline,r=e.disabled,a=e.validationState,i=e.inputRef,s=e.className,o=e.style,l=e.title,n=e.children,p=(0,_objectWithoutPropertiesLoose2.default)(e,["inline","disabled","validationState","inputRef","className","style","title","children"]),u=(0,_bootstrapUtils.splitBsProps)(p),d=u[0],c=u[1],f=_react.default.createElement("input",(0,_extends2.default)({},c,{ref:i,type:"checkbox",disabled:r}));if(t){var _,b=((_={})[(0,_bootstrapUtils.prefix)(d,"inline")]=!0,_.disabled=r,_);return"production"!==process.env.NODE_ENV&&(0,_warning.default)(!a,"`validationState` is ignored on `<Checkbox inline>`. To display validation state on an inline checkbox, set `validationState` on a parent `<FormGroup>` or other element instead."),_react.default.createElement("label",{className:(0,_classnames.default)(s,b),style:o,title:l},f,n)}var h=(0,_extends2.default)({},(0,_bootstrapUtils.getClassSet)(d),{disabled:r});return a&&(h["has-"+a]=!0),_react.default.createElement("div",{className:(0,_classnames.default)(s,h),style:o},_react.default.createElement("label",{title:l},f,n))},Checkbox}(_react.default.Component);Checkbox.propTypes=propTypes,Checkbox.defaultProps=defaultProps;var _default=(0,_bootstrapUtils.bsClass)("checkbox",Checkbox);exports.default=_default,module.exports=exports.default;

}).call(this,require('_process'))

},{"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"_process":484,"classnames":19,"prop-types":495,"react":777,"warning":780}],509:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_elementType=_interopRequireDefault(require("prop-types-extra/lib/elementType")),_bootstrapUtils=require("./utils/bootstrapUtils"),_capitalize=_interopRequireDefault(require("./utils/capitalize")),_StyleConfig=require("./utils/StyleConfig"),propTypes={componentClass:_elementType.default,visibleXsBlock:_propTypes.default.bool,visibleSmBlock:_propTypes.default.bool,visibleMdBlock:_propTypes.default.bool,visibleLgBlock:_propTypes.default.bool},defaultProps={componentClass:"div"},Clearfix=function(e){function Clearfix(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(Clearfix,e),Clearfix.prototype.render=function render(){var e=this.props,t=e.componentClass,r=e.className,o=(0,_objectWithoutPropertiesLoose2.default)(e,["componentClass","className"]),l=(0,_bootstrapUtils.splitBsProps)(o),s=l[0],i=l[1],a=(0,_bootstrapUtils.getClassSet)(s);return _StyleConfig.DEVICE_SIZES.forEach(function(e){var t="visible"+(0,_capitalize.default)(e)+"Block";i[t]&&(a["visible-"+e+"-block"]=!0),delete i[t]}),_react.default.createElement(t,(0,_extends2.default)({},i,{className:(0,_classnames.default)(r,a)}))},Clearfix}(_react.default.Component);Clearfix.propTypes=propTypes,Clearfix.defaultProps=defaultProps;var _default=(0,_bootstrapUtils.bsClass)("clearfix",Clearfix);exports.default=_default,module.exports=exports.default;

},{"./utils/StyleConfig":594,"./utils/bootstrapUtils":596,"./utils/capitalize":597,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"prop-types-extra/lib/elementType":488,"react":777}],510:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_propTypes=_interopRequireDefault(require("prop-types")),_react=_interopRequireDefault(require("react")),propTypes={label:_propTypes.default.string.isRequired,onClick:_propTypes.default.func},defaultProps={label:"Close"},CloseButton=function(e){function CloseButton(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(CloseButton,e),CloseButton.prototype.render=function render(){var e=this.props,t=e.label,r=e.onClick;return _react.default.createElement("button",{type:"button",className:"close",onClick:r},_react.default.createElement("span",{"aria-hidden":"true"},"×"),_react.default.createElement("span",{className:"sr-only"},t))},CloseButton}(_react.default.Component);CloseButton.propTypes=propTypes,CloseButton.defaultProps=defaultProps;var _default=CloseButton;exports.default=_default,module.exports=exports.default;

},{"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"prop-types":495,"react":777}],511:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_elementType=_interopRequireDefault(require("prop-types-extra/lib/elementType")),_bootstrapUtils=require("./utils/bootstrapUtils"),_StyleConfig=require("./utils/StyleConfig"),propTypes={componentClass:_elementType.default,xs:_propTypes.default.number,sm:_propTypes.default.number,md:_propTypes.default.number,lg:_propTypes.default.number,xsHidden:_propTypes.default.bool,smHidden:_propTypes.default.bool,mdHidden:_propTypes.default.bool,lgHidden:_propTypes.default.bool,xsOffset:_propTypes.default.number,smOffset:_propTypes.default.number,mdOffset:_propTypes.default.number,lgOffset:_propTypes.default.number,xsPush:_propTypes.default.number,smPush:_propTypes.default.number,mdPush:_propTypes.default.number,lgPush:_propTypes.default.number,xsPull:_propTypes.default.number,smPull:_propTypes.default.number,mdPull:_propTypes.default.number,lgPull:_propTypes.default.number},defaultProps={componentClass:"div"},Col=function(e){function Col(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(Col,e),Col.prototype.render=function render(){var e=this.props,r=e.componentClass,p=e.className,t=(0,_objectWithoutPropertiesLoose2.default)(e,["componentClass","className"]),o=(0,_bootstrapUtils.splitBsProps)(t),s=o[0],l=o[1],u=[];return _StyleConfig.DEVICE_SIZES.forEach(function(e){function popProp(r,p){var t=""+e+r,o=l[t];null!=o&&u.push((0,_bootstrapUtils.prefix)(s,""+e+p+"-"+o)),delete l[t]}popProp("",""),popProp("Offset","-offset"),popProp("Push","-push"),popProp("Pull","-pull");var r=e+"Hidden";l[r]&&u.push("hidden-"+e),delete l[r]}),_react.default.createElement(r,(0,_extends2.default)({},l,{className:(0,_classnames.default)(p,u)}))},Col}(_react.default.Component);Col.propTypes=propTypes,Col.defaultProps=defaultProps;var _default=(0,_bootstrapUtils.bsClass)("col",Col);exports.default=_default,module.exports=exports.default;

},{"./utils/StyleConfig":594,"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"prop-types-extra/lib/elementType":488,"react":777}],512:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault"),_interopRequireWildcard=require("@babel/runtime-corejs2/helpers/interopRequireWildcard");exports.__esModule=!0,exports.default=void 0;var _collapseStyles,_extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_parseInt2=_interopRequireDefault(require("@babel/runtime-corejs2/core-js/parse-int")),_classnames=_interopRequireDefault(require("classnames")),_style=_interopRequireDefault(require("dom-helpers/style")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_Transition=_interopRequireWildcard(require("react-transition-group/Transition")),_capitalize=_interopRequireDefault(require("./utils/capitalize")),_createChainedFunction=_interopRequireDefault(require("./utils/createChainedFunction")),MARGINS={height:["marginTop","marginBottom"],width:["marginLeft","marginRight"]};function triggerBrowserReflow(e){e.offsetHeight}function getDimensionValue(e,t){var n=t["offset"+(0,_capitalize.default)(e)],i=MARGINS[e];return n+(0,_parseInt2.default)((0,_style.default)(t,i[0]),10)+(0,_parseInt2.default)((0,_style.default)(t,i[1]),10)}var collapseStyles=((_collapseStyles={})[_Transition.EXITED]="collapse",_collapseStyles[_Transition.EXITING]="collapsing",_collapseStyles[_Transition.ENTERING]="collapsing",_collapseStyles[_Transition.ENTERED]="collapse in",_collapseStyles),propTypes={in:_propTypes.default.bool,mountOnEnter:_propTypes.default.bool,unmountOnExit:_propTypes.default.bool,appear:_propTypes.default.bool,timeout:_propTypes.default.number,onEnter:_propTypes.default.func,onEntering:_propTypes.default.func,onEntered:_propTypes.default.func,onExit:_propTypes.default.func,onExiting:_propTypes.default.func,onExited:_propTypes.default.func,dimension:_propTypes.default.oneOfType([_propTypes.default.oneOf(["height","width"]),_propTypes.default.func]),getDimensionValue:_propTypes.default.func,role:_propTypes.default.string},defaultProps={in:!1,timeout:300,mountOnEnter:!1,unmountOnExit:!1,appear:!1,dimension:"height",getDimensionValue:getDimensionValue},Collapse=function(e){function Collapse(){for(var t,n=arguments.length,i=new Array(n),r=0;r<n;r++)i[r]=arguments[r];return(t=e.call.apply(e,[this].concat(i))||this).handleEnter=function(e){e.style[t.getDimension()]="0"},t.handleEntering=function(e){var n=t.getDimension();e.style[n]=t._getScrollDimensionValue(e,n)},t.handleEntered=function(e){e.style[t.getDimension()]=null},t.handleExit=function(e){var n=t.getDimension();e.style[n]=t.props.getDimensionValue(n,e)+"px",triggerBrowserReflow(e)},t.handleExiting=function(e){e.style[t.getDimension()]="0"},t}(0,_inheritsLoose2.default)(Collapse,e);var t=Collapse.prototype;return t.getDimension=function getDimension(){return"function"==typeof this.props.dimension?this.props.dimension():this.props.dimension},t._getScrollDimensionValue=function _getScrollDimensionValue(e,t){return e["scroll"+(0,_capitalize.default)(t)]+"px"},t.render=function render(){var e=this,t=this.props,n=t.onEnter,i=t.onEntering,r=t.onEntered,o=t.onExit,l=t.onExiting,a=t.className,s=t.children,u=(0,_objectWithoutPropertiesLoose2.default)(t,["onEnter","onEntering","onEntered","onExit","onExiting","className","children"]);delete u.dimension,delete u.getDimensionValue;var p=(0,_createChainedFunction.default)(this.handleEnter,n),d=(0,_createChainedFunction.default)(this.handleEntering,i),c=(0,_createChainedFunction.default)(this.handleEntered,r),f=(0,_createChainedFunction.default)(this.handleExit,o),_=(0,_createChainedFunction.default)(this.handleExiting,l);return _react.default.createElement(_Transition.default,(0,_extends2.default)({},u,{"aria-expanded":u.role?u.in:null,onEnter:p,onEntering:d,onEntered:c,onExit:f,onExiting:_}),function(t,n){return _react.default.cloneElement(s,(0,_extends2.default)({},n,{className:(0,_classnames.default)(a,s.props.className,collapseStyles[t],"width"===e.getDimension()&&"width")}))})},Collapse}(_react.default.Component);Collapse.propTypes=propTypes,Collapse.defaultProps=defaultProps;var _default=Collapse;exports.default=_default,module.exports=exports.default;

},{"./utils/capitalize":597,"./utils/createChainedFunction":598,"@babel/runtime-corejs2/core-js/parse-int":10,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/interopRequireWildcard":15,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"dom-helpers/style":445,"prop-types":495,"react":777,"react-transition-group/Transition":750}],513:[function(require,module,exports){
(function (process){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_warning=_interopRequireDefault(require("warning")),_bootstrapUtils=require("./utils/bootstrapUtils"),propTypes={htmlFor:_propTypes.default.string,srOnly:_propTypes.default.bool},defaultProps={srOnly:!1},contextTypes={$bs_formGroup:_propTypes.default.object},ControlLabel=function(e){function ControlLabel(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(ControlLabel,e),ControlLabel.prototype.render=function render(){var e=this.context.$bs_formGroup,r=e&&e.controlId,t=this.props,o=t.htmlFor,s=void 0===o?r:o,l=t.srOnly,a=t.className,n=(0,_objectWithoutPropertiesLoose2.default)(t,["htmlFor","srOnly","className"]),i=(0,_bootstrapUtils.splitBsProps)(n),p=i[0],u=i[1];"production"!==process.env.NODE_ENV&&(0,_warning.default)(null==r||s===r,"`controlId` is ignored on `<ControlLabel>` when `htmlFor` is specified.");var _=(0,_extends2.default)({},(0,_bootstrapUtils.getClassSet)(p),{"sr-only":l});return _react.default.createElement("label",(0,_extends2.default)({},u,{htmlFor:s,className:(0,_classnames.default)(a,_)}))},ControlLabel}(_react.default.Component);ControlLabel.propTypes=propTypes,ControlLabel.defaultProps=defaultProps,ControlLabel.contextTypes=contextTypes;var _default=(0,_bootstrapUtils.bsClass)("control-label",ControlLabel);exports.default=_default,module.exports=exports.default;

}).call(this,require('_process'))

},{"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"_process":484,"classnames":19,"prop-types":495,"react":777,"warning":780}],514:[function(require,module,exports){
(function (process){
"use strict";var _interopRequireWildcard=require("@babel/runtime-corejs2/helpers/interopRequireWildcard"),_interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_assertThisInitialized2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized")),_classnames=_interopRequireDefault(require("classnames")),_activeElement=_interopRequireDefault(require("dom-helpers/activeElement")),_contains=_interopRequireDefault(require("dom-helpers/query/contains")),_keycode=_interopRequireDefault(require("keycode")),_react=_interopRequireWildcard(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_reactDom=_interopRequireDefault(require("react-dom")),_all=_interopRequireDefault(require("prop-types-extra/lib/all")),_elementType=_interopRequireDefault(require("prop-types-extra/lib/elementType")),_isRequiredForA11y=_interopRequireDefault(require("prop-types-extra/lib/isRequiredForA11y")),_uncontrollable=_interopRequireDefault(require("uncontrollable")),_warning=_interopRequireDefault(require("warning")),_ButtonGroup=_interopRequireDefault(require("./ButtonGroup")),_DropdownMenu=_interopRequireDefault(require("./DropdownMenu")),_DropdownToggle=_interopRequireDefault(require("./DropdownToggle")),_bootstrapUtils=require("./utils/bootstrapUtils"),_createChainedFunction=_interopRequireDefault(require("./utils/createChainedFunction")),_PropTypes=require("./utils/PropTypes"),_ValidComponentChildren=_interopRequireDefault(require("./utils/ValidComponentChildren")),TOGGLE_ROLE=_DropdownToggle.default.defaultProps.bsRole,MENU_ROLE=_DropdownMenu.default.defaultProps.bsRole,propTypes={dropup:_propTypes.default.bool,id:(0,_isRequiredForA11y.default)(_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.number])),componentClass:_elementType.default,children:(0,_all.default)((0,_PropTypes.requiredRoles)(TOGGLE_ROLE,MENU_ROLE),(0,_PropTypes.exclusiveRoles)(MENU_ROLE)),disabled:_propTypes.default.bool,pullRight:_propTypes.default.bool,open:_propTypes.default.bool,defaultOpen:_propTypes.default.bool,onToggle:_propTypes.default.func,onSelect:_propTypes.default.func,role:_propTypes.default.string,rootCloseEvent:_propTypes.default.oneOf(["click","mousedown"]),onMouseEnter:_propTypes.default.func,onMouseLeave:_propTypes.default.func},defaultProps={componentClass:_ButtonGroup.default},Dropdown=function(e){function Dropdown(o,t){var r;return(r=e.call(this,o,t)||this).handleClick=r.handleClick.bind((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(r))),r.handleKeyDown=r.handleKeyDown.bind((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(r))),r.handleClose=r.handleClose.bind((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(r))),r._focusInDropdown=!1,r.lastOpenEventType=null,r}(0,_inheritsLoose2.default)(Dropdown,e);var o=Dropdown.prototype;return o.componentDidMount=function componentDidMount(){this.focusNextOnOpen()},o.componentWillUpdate=function componentWillUpdate(e){!e.open&&this.props.open&&(this._focusInDropdown=(0,_contains.default)(_reactDom.default.findDOMNode(this.menu),(0,_activeElement.default)(document)))},o.componentDidUpdate=function componentDidUpdate(e){var o=this.props.open,t=e.open;o&&!t&&this.focusNextOnOpen(),!o&&t&&this._focusInDropdown&&(this._focusInDropdown=!1,this.focus())},o.focus=function focus(){var e=_reactDom.default.findDOMNode(this.toggle);e&&e.focus&&e.focus()},o.focusNextOnOpen=function focusNextOnOpen(){var e=this.menu;e&&e.focusNext&&("keydown"!==this.lastOpenEventType&&"menuitem"!==this.props.role||e.focusNext())},o.handleClick=function handleClick(e){this.props.disabled||this.toggleOpen(e,{source:"click"})},o.handleClose=function handleClose(e,o){this.props.open&&this.toggleOpen(e,o)},o.handleKeyDown=function handleKeyDown(e){if(!this.props.disabled)switch(e.keyCode){case _keycode.default.codes.down:this.props.open?this.menu.focusNext&&this.menu.focusNext():this.toggleOpen(e,{source:"keydown"}),e.preventDefault();break;case _keycode.default.codes.esc:case _keycode.default.codes.tab:this.handleClose(e,{source:"keydown"})}},o.toggleOpen=function toggleOpen(e,o){var t=!this.props.open;t&&(this.lastOpenEventType=o.source),this.props.onToggle&&this.props.onToggle(t,e,o)},o.renderMenu=function renderMenu(e,o){var t=this,r=o.id,n=o.onSelect,l=o.rootCloseEvent,s=(0,_objectWithoutPropertiesLoose2.default)(o,["id","onSelect","rootCloseEvent"]),i=function ref(e){t.menu=e};return"string"==typeof e.ref?"production"!==process.env.NODE_ENV&&(0,_warning.default)(!1,"String refs are not supported on `<Dropdown.Menu>` components. To apply a ref to the component use the callback signature:\n\n https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute"):i=(0,_createChainedFunction.default)(e.ref,i),(0,_react.cloneElement)(e,(0,_extends2.default)({},s,{ref:i,labelledBy:r,bsClass:(0,_bootstrapUtils.prefix)(s,"menu"),onClose:(0,_createChainedFunction.default)(e.props.onClose,this.handleClose),onSelect:(0,_createChainedFunction.default)(e.props.onSelect,n,function(e,o){return t.handleClose(o,{source:"select"})}),rootCloseEvent:l}))},o.renderToggle=function renderToggle(e,o){var t=this,r=function ref(e){t.toggle=e};return"string"==typeof e.ref?"production"!==process.env.NODE_ENV&&(0,_warning.default)(!1,"String refs are not supported on `<Dropdown.Toggle>` components. To apply a ref to the component use the callback signature:\n\n https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute"):r=(0,_createChainedFunction.default)(e.ref,r),(0,_react.cloneElement)(e,(0,_extends2.default)({},o,{ref:r,bsClass:(0,_bootstrapUtils.prefix)(o,"toggle"),onClick:(0,_createChainedFunction.default)(e.props.onClick,this.handleClick),onKeyDown:(0,_createChainedFunction.default)(e.props.onKeyDown,this.handleKeyDown)}))},o.render=function render(){var e,o=this,t=this.props,r=t.componentClass,n=t.id,l=t.dropup,s=t.disabled,i=t.pullRight,p=t.open,u=t.onSelect,a=t.role,d=t.bsClass,c=t.className,f=t.rootCloseEvent,_=t.children,h=(0,_objectWithoutPropertiesLoose2.default)(t,["componentClass","id","dropup","disabled","pullRight","open","onSelect","role","bsClass","className","rootCloseEvent","children"]);delete h.onToggle;var b=((e={})[d]=!0,e.open=p,e.disabled=s,e);return l&&(b[d]=!1,b.dropup=!0),_react.default.createElement(r,(0,_extends2.default)({},h,{className:(0,_classnames.default)(c,b)}),_ValidComponentChildren.default.map(_,function(e){switch(e.props.bsRole){case TOGGLE_ROLE:return o.renderToggle(e,{id:n,disabled:s,open:p,role:a,bsClass:d});case MENU_ROLE:return o.renderMenu(e,{id:n,open:p,pullRight:i,bsClass:d,onSelect:u,rootCloseEvent:f});default:return e}}))},Dropdown}(_react.default.Component);Dropdown.propTypes=propTypes,Dropdown.defaultProps=defaultProps,(0,_bootstrapUtils.bsClass)("dropdown",Dropdown);var UncontrolledDropdown=(0,_uncontrollable.default)(Dropdown,{open:"onToggle"});UncontrolledDropdown.Toggle=_DropdownToggle.default,UncontrolledDropdown.Menu=_DropdownMenu.default;var _default=UncontrolledDropdown;exports.default=_default,module.exports=exports.default;

}).call(this,require('_process'))

},{"./ButtonGroup":503,"./DropdownMenu":516,"./DropdownToggle":517,"./utils/PropTypes":593,"./utils/ValidComponentChildren":595,"./utils/bootstrapUtils":596,"./utils/createChainedFunction":598,"@babel/runtime-corejs2/helpers/assertThisInitialized":11,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/interopRequireWildcard":15,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"_process":484,"classnames":19,"dom-helpers/activeElement":425,"dom-helpers/query/contains":436,"keycode":482,"prop-types":495,"prop-types-extra/lib/all":485,"prop-types-extra/lib/elementType":488,"prop-types-extra/lib/isRequiredForA11y":489,"react":777,"react-dom":602,"uncontrollable":778,"warning":780}],515:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_Dropdown=_interopRequireDefault(require("./Dropdown")),_splitComponentProps2=_interopRequireDefault(require("./utils/splitComponentProps")),propTypes=(0,_extends2.default)({},_Dropdown.default.propTypes,{bsStyle:_propTypes.default.string,bsSize:_propTypes.default.string,title:_propTypes.default.node.isRequired,noCaret:_propTypes.default.bool,children:_propTypes.default.node}),DropdownButton=function(e){function DropdownButton(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(DropdownButton,e),DropdownButton.prototype.render=function render(){var e=this.props,t=e.bsSize,r=e.bsStyle,o=e.title,p=e.children,u=(0,_objectWithoutPropertiesLoose2.default)(e,["bsSize","bsStyle","title","children"]),n=(0,_splitComponentProps2.default)(u,_Dropdown.default.ControlledComponent),i=n[0],l=n[1];return _react.default.createElement(_Dropdown.default,(0,_extends2.default)({},i,{bsSize:t,bsStyle:r}),_react.default.createElement(_Dropdown.default.Toggle,(0,_extends2.default)({},l,{bsSize:t,bsStyle:r}),o),_react.default.createElement(_Dropdown.default.Menu,null,p))},DropdownButton}(_react.default.Component);DropdownButton.propTypes=propTypes;var _default=DropdownButton;exports.default=_default,module.exports=exports.default;

},{"./Dropdown":514,"./utils/splitComponentProps":601,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"prop-types":495,"react":777}],516:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends3=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_from=_interopRequireDefault(require("@babel/runtime-corejs2/core-js/array/from")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_assertThisInitialized2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized")),_classnames=_interopRequireDefault(require("classnames")),_keycode=_interopRequireDefault(require("keycode")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_reactDom=_interopRequireDefault(require("react-dom")),_RootCloseWrapper=_interopRequireDefault(require("react-overlays/lib/RootCloseWrapper")),_bootstrapUtils=require("./utils/bootstrapUtils"),_createChainedFunction=_interopRequireDefault(require("./utils/createChainedFunction")),_ValidComponentChildren=_interopRequireDefault(require("./utils/ValidComponentChildren")),propTypes={open:_propTypes.default.bool,pullRight:_propTypes.default.bool,onClose:_propTypes.default.func,labelledBy:_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.number]),onSelect:_propTypes.default.func,rootCloseEvent:_propTypes.default.oneOf(["click","mousedown"])},defaultProps={bsRole:"menu",pullRight:!1},DropdownMenu=function(e){function DropdownMenu(t){var o;return(o=e.call(this,t)||this).handleRootClose=o.handleRootClose.bind((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(o))),o.handleKeyDown=o.handleKeyDown.bind((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(o))),o}(0,_inheritsLoose2.default)(DropdownMenu,e);var t=DropdownMenu.prototype;return t.getFocusableMenuItems=function getFocusableMenuItems(){var e=_reactDom.default.findDOMNode(this);return e?(0,_from.default)(e.querySelectorAll('[tabIndex="-1"]')):[]},t.getItemsAndActiveIndex=function getItemsAndActiveIndex(){var e=this.getFocusableMenuItems(),t=e.indexOf(document.activeElement);return{items:e,activeIndex:t}},t.focusNext=function focusNext(){var e=this.getItemsAndActiveIndex(),t=e.items,o=e.activeIndex;0!==t.length&&t[o===t.length-1?0:o+1].focus()},t.focusPrevious=function focusPrevious(){var e=this.getItemsAndActiveIndex(),t=e.items,o=e.activeIndex;0!==t.length&&t[0===o?t.length-1:o-1].focus()},t.handleKeyDown=function handleKeyDown(e){switch(e.keyCode){case _keycode.default.codes.down:this.focusNext(),e.preventDefault();break;case _keycode.default.codes.up:this.focusPrevious(),e.preventDefault();break;case _keycode.default.codes.esc:case _keycode.default.codes.tab:this.props.onClose(e,{source:"keydown"})}},t.handleRootClose=function handleRootClose(e){this.props.onClose(e,{source:"rootClose"})},t.render=function render(){var e,t=this,o=this.props,r=o.open,n=o.pullRight,s=o.labelledBy,l=o.onSelect,i=o.className,a=o.rootCloseEvent,u=o.children,d=(0,_objectWithoutPropertiesLoose2.default)(o,["open","pullRight","labelledBy","onSelect","className","rootCloseEvent","children"]),p=(0,_bootstrapUtils.splitBsPropsAndOmit)(d,["onClose"]),c=p[0],f=p[1],_=(0,_extends3.default)({},(0,_bootstrapUtils.getClassSet)(c),((e={})[(0,_bootstrapUtils.prefix)(c,"right")]=n,e));return _react.default.createElement(_RootCloseWrapper.default,{disabled:!r,onRootClose:this.handleRootClose,event:a},_react.default.createElement("ul",(0,_extends3.default)({},f,{role:"menu",className:(0,_classnames.default)(i,_),"aria-labelledby":s}),_ValidComponentChildren.default.map(u,function(e){return _react.default.cloneElement(e,{onKeyDown:(0,_createChainedFunction.default)(e.props.onKeyDown,t.handleKeyDown),onSelect:(0,_createChainedFunction.default)(e.props.onSelect,l)})})))},DropdownMenu}(_react.default.Component);DropdownMenu.propTypes=propTypes,DropdownMenu.defaultProps=defaultProps;var _default=(0,_bootstrapUtils.bsClass)("dropdown-menu",DropdownMenu);exports.default=_default,module.exports=exports.default;

},{"./utils/ValidComponentChildren":595,"./utils/bootstrapUtils":596,"./utils/createChainedFunction":598,"@babel/runtime-corejs2/core-js/array/from":1,"@babel/runtime-corejs2/helpers/assertThisInitialized":11,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"keycode":482,"prop-types":495,"react":777,"react-dom":602,"react-overlays/lib/RootCloseWrapper":740}],517:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_classnames=_interopRequireDefault(require("classnames")),_Button=_interopRequireDefault(require("./Button")),_SafeAnchor=_interopRequireDefault(require("./SafeAnchor")),_bootstrapUtils=require("./utils/bootstrapUtils"),propTypes={noCaret:_propTypes.default.bool,open:_propTypes.default.bool,title:_propTypes.default.string,useAnchor:_propTypes.default.bool},defaultProps={open:!1,useAnchor:!1,bsRole:"toggle"},DropdownToggle=function(e){function DropdownToggle(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(DropdownToggle,e),DropdownToggle.prototype.render=function render(){var e=this.props,r=e.noCaret,o=e.open,t=e.useAnchor,s=e.bsClass,a=e.className,p=e.children,l=(0,_objectWithoutPropertiesLoose2.default)(e,["noCaret","open","useAnchor","bsClass","className","children"]);delete l.bsRole;var u=t?_SafeAnchor.default:_Button.default,n=!r;return _react.default.createElement(u,(0,_extends2.default)({},l,{role:"button",className:(0,_classnames.default)(a,s),"aria-haspopup":!0,"aria-expanded":o}),p||l.title,n&&" ",n&&_react.default.createElement("span",{className:"caret"}))},DropdownToggle}(_react.default.Component);DropdownToggle.propTypes=propTypes,DropdownToggle.defaultProps=defaultProps;var _default=(0,_bootstrapUtils.bsClass)("dropdown-toggle",DropdownToggle);exports.default=_default,module.exports=exports.default;

},{"./Button":502,"./SafeAnchor":578,"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"react":777}],518:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault"),_interopRequireWildcard=require("@babel/runtime-corejs2/helpers/interopRequireWildcard");exports.__esModule=!0,exports.default=void 0;var _fadeStyles,_extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_Transition=_interopRequireWildcard(require("react-transition-group/Transition")),propTypes={in:_propTypes.default.bool,mountOnEnter:_propTypes.default.bool,unmountOnExit:_propTypes.default.bool,appear:_propTypes.default.bool,timeout:_propTypes.default.number,onEnter:_propTypes.default.func,onEntering:_propTypes.default.func,onEntered:_propTypes.default.func,onExit:_propTypes.default.func,onExiting:_propTypes.default.func,onExited:_propTypes.default.func},defaultProps={in:!1,timeout:300,mountOnEnter:!1,unmountOnExit:!1,appear:!1},fadeStyles=((_fadeStyles={})[_Transition.ENTERING]="in",_fadeStyles[_Transition.ENTERED]="in",_fadeStyles),Fade=function(e){function Fade(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(Fade,e),Fade.prototype.render=function render(){var e=this.props,r=e.className,t=e.children,o=(0,_objectWithoutPropertiesLoose2.default)(e,["className","children"]);return _react.default.createElement(_Transition.default,o,function(e,o){return _react.default.cloneElement(t,(0,_extends2.default)({},o,{className:(0,_classnames.default)("fade",r,t.props.className,fadeStyles[e])}))})},Fade}(_react.default.Component);Fade.propTypes=propTypes,Fade.defaultProps=defaultProps;var _default=Fade;exports.default=_default,module.exports=exports.default;

},{"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/interopRequireWildcard":15,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"react":777,"react-transition-group/Transition":750}],519:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_elementType=_interopRequireDefault(require("prop-types-extra/lib/elementType")),_bootstrapUtils=require("./utils/bootstrapUtils"),propTypes={horizontal:_propTypes.default.bool,inline:_propTypes.default.bool,componentClass:_elementType.default},defaultProps={horizontal:!1,inline:!1,componentClass:"form"},Form=function(e){function Form(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(Form,e),Form.prototype.render=function render(){var e=this.props,r=e.horizontal,t=e.inline,o=e.componentClass,s=e.className,i=(0,_objectWithoutPropertiesLoose2.default)(e,["horizontal","inline","componentClass","className"]),p=(0,_bootstrapUtils.splitBsProps)(i),l=p[0],a=p[1],u=[];return r&&u.push((0,_bootstrapUtils.prefix)(l,"horizontal")),t&&u.push((0,_bootstrapUtils.prefix)(l,"inline")),_react.default.createElement(o,(0,_extends2.default)({},a,{className:(0,_classnames.default)(s,u)}))},Form}(_react.default.Component);Form.propTypes=propTypes,Form.defaultProps=defaultProps;var _default=(0,_bootstrapUtils.bsClass)("form",Form);exports.default=_default,module.exports=exports.default;

},{"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"prop-types-extra/lib/elementType":488,"react":777}],520:[function(require,module,exports){
(function (process){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_elementType=_interopRequireDefault(require("prop-types-extra/lib/elementType")),_warning=_interopRequireDefault(require("warning")),_FormControlFeedback=_interopRequireDefault(require("./FormControlFeedback")),_FormControlStatic=_interopRequireDefault(require("./FormControlStatic")),_bootstrapUtils=require("./utils/bootstrapUtils"),_StyleConfig=require("./utils/StyleConfig"),propTypes={componentClass:_elementType.default,type:_propTypes.default.string,id:_propTypes.default.string,inputRef:_propTypes.default.func},defaultProps={componentClass:"input"},contextTypes={$bs_formGroup:_propTypes.default.object},FormControl=function(e){function FormControl(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(FormControl,e),FormControl.prototype.render=function render(){var e,t=this.context.$bs_formGroup,r=t&&t.controlId,o=this.props,s=o.componentClass,i=o.type,l=o.id,n=void 0===l?r:l,p=o.inputRef,a=o.className,u=o.bsSize,f=(0,_objectWithoutPropertiesLoose2.default)(o,["componentClass","type","id","inputRef","className","bsSize"]),_=(0,_bootstrapUtils.splitBsProps)(f),c=_[0],d=_[1];if("production"!==process.env.NODE_ENV&&(0,_warning.default)(null==r||n===r,"`controlId` is ignored on `<FormControl>` when `id` is specified."),"file"!==i&&(e=(0,_bootstrapUtils.getClassSet)(c)),u){var m=_StyleConfig.SIZE_MAP[u]||u;e[(0,_bootstrapUtils.prefix)({bsClass:"input"},m)]=!0}return _react.default.createElement(s,(0,_extends2.default)({},d,{type:i,id:n,ref:p,className:(0,_classnames.default)(a,e)}))},FormControl}(_react.default.Component);FormControl.propTypes=propTypes,FormControl.defaultProps=defaultProps,FormControl.contextTypes=contextTypes,FormControl.Feedback=_FormControlFeedback.default,FormControl.Static=_FormControlStatic.default;var _default=(0,_bootstrapUtils.bsClass)("form-control",(0,_bootstrapUtils.bsSizes)([_StyleConfig.Size.SMALL,_StyleConfig.Size.LARGE],FormControl));exports.default=_default,module.exports=exports.default;

}).call(this,require('_process'))

},{"./FormControlFeedback":521,"./FormControlStatic":522,"./utils/StyleConfig":594,"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"_process":484,"classnames":19,"prop-types":495,"prop-types-extra/lib/elementType":488,"react":777,"warning":780}],521:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_Glyphicon=_interopRequireDefault(require("./Glyphicon")),_bootstrapUtils=require("./utils/bootstrapUtils"),defaultProps={bsRole:"feedback"},contextTypes={$bs_formGroup:_propTypes.default.object},FormControlFeedback=function(e){function FormControlFeedback(){return e.apply(this,arguments)||this}(0,_inheritsLoose2.default)(FormControlFeedback,e);var r=FormControlFeedback.prototype;return r.getGlyph=function getGlyph(e){switch(e){case"success":return"ok";case"warning":return"warning-sign";case"error":return"remove";default:return null}},r.renderDefaultFeedback=function renderDefaultFeedback(e,r,t,o){var s=this.getGlyph(e&&e.validationState);return s?_react.default.createElement(_Glyphicon.default,(0,_extends2.default)({},o,{glyph:s,className:(0,_classnames.default)(r,t)})):null},r.render=function render(){var e=this.props,r=e.className,t=e.children,o=(0,_objectWithoutPropertiesLoose2.default)(e,["className","children"]),s=(0,_bootstrapUtils.splitBsProps)(o),a=s[0],l=s[1],n=(0,_bootstrapUtils.getClassSet)(a);if(!t)return this.renderDefaultFeedback(this.context.$bs_formGroup,r,n,l);var u=_react.default.Children.only(t);return _react.default.cloneElement(u,(0,_extends2.default)({},l,{className:(0,_classnames.default)(u.props.className,r,n)}))},FormControlFeedback}(_react.default.Component);FormControlFeedback.defaultProps=defaultProps,FormControlFeedback.contextTypes=contextTypes;var _default=(0,_bootstrapUtils.bsClass)("form-control-feedback",FormControlFeedback);exports.default=_default,module.exports=exports.default;

},{"./Glyphicon":524,"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"react":777}],522:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_elementType=_interopRequireDefault(require("prop-types-extra/lib/elementType")),_bootstrapUtils=require("./utils/bootstrapUtils"),propTypes={componentClass:_elementType.default},defaultProps={componentClass:"p"},FormControlStatic=function(e){function FormControlStatic(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(FormControlStatic,e),FormControlStatic.prototype.render=function render(){var e=this.props,t=e.componentClass,r=e.className,o=(0,_objectWithoutPropertiesLoose2.default)(e,["componentClass","className"]),s=(0,_bootstrapUtils.splitBsProps)(o),a=s[0],l=s[1],i=(0,_bootstrapUtils.getClassSet)(a);return _react.default.createElement(t,(0,_extends2.default)({},l,{className:(0,_classnames.default)(r,i)}))},FormControlStatic}(_react.default.Component);FormControlStatic.propTypes=propTypes,FormControlStatic.defaultProps=defaultProps;var _default=(0,_bootstrapUtils.bsClass)("form-control-static",FormControlStatic);exports.default=_default,module.exports=exports.default;

},{"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types-extra/lib/elementType":488,"react":777}],523:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_bootstrapUtils=require("./utils/bootstrapUtils"),_StyleConfig=require("./utils/StyleConfig"),_ValidComponentChildren=_interopRequireDefault(require("./utils/ValidComponentChildren")),propTypes={controlId:_propTypes.default.string,validationState:_propTypes.default.oneOf(["success","warning","error",null])},childContextTypes={$bs_formGroup:_propTypes.default.object.isRequired},FormGroup=function(e){function FormGroup(){return e.apply(this,arguments)||this}(0,_inheritsLoose2.default)(FormGroup,e);var t=FormGroup.prototype;return t.getChildContext=function getChildContext(){var e=this.props;return{$bs_formGroup:{controlId:e.controlId,validationState:e.validationState}}},t.hasFeedback=function hasFeedback(e){var t=this;return _ValidComponentChildren.default.some(e,function(e){return"feedback"===e.props.bsRole||e.props.children&&t.hasFeedback(e.props.children)})},t.render=function render(){var e=this.props,t=e.validationState,r=e.className,o=e.children,s=(0,_objectWithoutPropertiesLoose2.default)(e,["validationState","className","children"]),i=(0,_bootstrapUtils.splitBsPropsAndOmit)(s,["controlId"]),a=i[0],l=i[1],p=(0,_extends2.default)({},(0,_bootstrapUtils.getClassSet)(a),{"has-feedback":this.hasFeedback(o)});return t&&(p["has-"+t]=!0),_react.default.createElement("div",(0,_extends2.default)({},l,{className:(0,_classnames.default)(r,p)}),o)},FormGroup}(_react.default.Component);FormGroup.propTypes=propTypes,FormGroup.childContextTypes=childContextTypes;var _default=(0,_bootstrapUtils.bsClass)("form-group",(0,_bootstrapUtils.bsSizes)([_StyleConfig.Size.LARGE,_StyleConfig.Size.SMALL],FormGroup));exports.default=_default,module.exports=exports.default;

},{"./utils/StyleConfig":594,"./utils/ValidComponentChildren":595,"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"react":777}],524:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends3=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_bootstrapUtils=require("./utils/bootstrapUtils"),propTypes={glyph:_propTypes.default.string.isRequired},Glyphicon=function(e){function Glyphicon(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(Glyphicon,e),Glyphicon.prototype.render=function render(){var e,t=this.props,r=t.glyph,s=t.className,o=(0,_objectWithoutPropertiesLoose2.default)(t,["glyph","className"]),i=(0,_bootstrapUtils.splitBsProps)(o),p=i[0],l=i[1],a=(0,_extends3.default)({},(0,_bootstrapUtils.getClassSet)(p),((e={})[(0,_bootstrapUtils.prefix)(p,r)]=!0,e));return _react.default.createElement("span",(0,_extends3.default)({},l,{className:(0,_classnames.default)(s,a)}))},Glyphicon}(_react.default.Component);Glyphicon.propTypes=propTypes;var _default=(0,_bootstrapUtils.bsClass)("glyphicon",Glyphicon);exports.default=_default,module.exports=exports.default;

},{"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"react":777}],525:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_elementType=_interopRequireDefault(require("prop-types-extra/lib/elementType")),_bootstrapUtils=require("./utils/bootstrapUtils"),propTypes={fluid:_propTypes.default.bool,componentClass:_elementType.default},defaultProps={componentClass:"div",fluid:!1},Grid=function(e){function Grid(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(Grid,e),Grid.prototype.render=function render(){var e=this.props,r=e.fluid,t=e.componentClass,s=e.className,o=(0,_objectWithoutPropertiesLoose2.default)(e,["fluid","componentClass","className"]),i=(0,_bootstrapUtils.splitBsProps)(o),p=i[0],l=i[1],u=(0,_bootstrapUtils.prefix)(p,r&&"fluid");return _react.default.createElement(t,(0,_extends2.default)({},l,{className:(0,_classnames.default)(s,u)}))},Grid}(_react.default.Component);Grid.propTypes=propTypes,Grid.defaultProps=defaultProps;var _default=(0,_bootstrapUtils.bsClass)("container",Grid);exports.default=_default,module.exports=exports.default;

},{"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"prop-types-extra/lib/elementType":488,"react":777}],526:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_bootstrapUtils=require("./utils/bootstrapUtils"),HelpBlock=function(e){function HelpBlock(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(HelpBlock,e),HelpBlock.prototype.render=function render(){var e=this.props,t=e.className,r=(0,_objectWithoutPropertiesLoose2.default)(e,["className"]),s=(0,_bootstrapUtils.splitBsProps)(r),o=s[0],l=s[1],i=(0,_bootstrapUtils.getClassSet)(o);return _react.default.createElement("span",(0,_extends2.default)({},l,{className:(0,_classnames.default)(t,i)}))},HelpBlock}(_react.default.Component),_default=(0,_bootstrapUtils.bsClass)("help-block",HelpBlock);exports.default=_default,module.exports=exports.default;

},{"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"react":777}],527:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_bootstrapUtils=require("./utils/bootstrapUtils"),propTypes={responsive:_propTypes.default.bool,rounded:_propTypes.default.bool,circle:_propTypes.default.bool,thumbnail:_propTypes.default.bool},defaultProps={responsive:!1,rounded:!1,circle:!1,thumbnail:!1},Image=function(e){function Image(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(Image,e),Image.prototype.render=function render(){var e,r=this.props,t=r.responsive,o=r.rounded,s=r.circle,i=r.thumbnail,p=r.className,a=(0,_objectWithoutPropertiesLoose2.default)(r,["responsive","rounded","circle","thumbnail","className"]),l=(0,_bootstrapUtils.splitBsProps)(a),u=l[0],n=l[1],d=((e={})[(0,_bootstrapUtils.prefix)(u,"responsive")]=t,e[(0,_bootstrapUtils.prefix)(u,"rounded")]=o,e[(0,_bootstrapUtils.prefix)(u,"circle")]=s,e[(0,_bootstrapUtils.prefix)(u,"thumbnail")]=i,e);return _react.default.createElement("img",(0,_extends2.default)({},n,{className:(0,_classnames.default)(p,d)}))},Image}(_react.default.Component);Image.propTypes=propTypes,Image.defaultProps=defaultProps;var _default=(0,_bootstrapUtils.bsClass)("img",Image);exports.default=_default,module.exports=exports.default;

},{"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"react":777}],528:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_InputGroupAddon=_interopRequireDefault(require("./InputGroupAddon")),_InputGroupButton=_interopRequireDefault(require("./InputGroupButton")),_bootstrapUtils=require("./utils/bootstrapUtils"),_StyleConfig=require("./utils/StyleConfig"),InputGroup=function(e){function InputGroup(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(InputGroup,e),InputGroup.prototype.render=function render(){var e=this.props,t=e.className,r=(0,_objectWithoutPropertiesLoose2.default)(e,["className"]),u=(0,_bootstrapUtils.splitBsProps)(r),o=u[0],s=u[1],i=(0,_bootstrapUtils.getClassSet)(o);return _react.default.createElement("span",(0,_extends2.default)({},s,{className:(0,_classnames.default)(t,i)}))},InputGroup}(_react.default.Component);InputGroup.Addon=_InputGroupAddon.default,InputGroup.Button=_InputGroupButton.default;var _default=(0,_bootstrapUtils.bsClass)("input-group",(0,_bootstrapUtils.bsSizes)([_StyleConfig.Size.LARGE,_StyleConfig.Size.SMALL],InputGroup));exports.default=_default,module.exports=exports.default;

},{"./InputGroupAddon":529,"./InputGroupButton":530,"./utils/StyleConfig":594,"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"react":777}],529:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_bootstrapUtils=require("./utils/bootstrapUtils"),InputGroupAddon=function(e){function InputGroupAddon(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(InputGroupAddon,e),InputGroupAddon.prototype.render=function render(){var e=this.props,t=e.className,r=(0,_objectWithoutPropertiesLoose2.default)(e,["className"]),o=(0,_bootstrapUtils.splitBsProps)(r),s=o[0],u=o[1],i=(0,_bootstrapUtils.getClassSet)(s);return _react.default.createElement("span",(0,_extends2.default)({},u,{className:(0,_classnames.default)(t,i)}))},InputGroupAddon}(_react.default.Component),_default=(0,_bootstrapUtils.bsClass)("input-group-addon",InputGroupAddon);exports.default=_default,module.exports=exports.default;

},{"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"react":777}],530:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_bootstrapUtils=require("./utils/bootstrapUtils"),InputGroupButton=function(e){function InputGroupButton(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(InputGroupButton,e),InputGroupButton.prototype.render=function render(){var e=this.props,t=e.className,r=(0,_objectWithoutPropertiesLoose2.default)(e,["className"]),o=(0,_bootstrapUtils.splitBsProps)(r),s=o[0],u=o[1],i=(0,_bootstrapUtils.getClassSet)(s);return _react.default.createElement("span",(0,_extends2.default)({},u,{className:(0,_classnames.default)(t,i)}))},InputGroupButton}(_react.default.Component),_default=(0,_bootstrapUtils.bsClass)("input-group-btn",InputGroupButton);exports.default=_default,module.exports=exports.default;

},{"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"react":777}],531:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_react=_interopRequireDefault(require("react")),_classnames=_interopRequireDefault(require("classnames")),_elementType=_interopRequireDefault(require("prop-types-extra/lib/elementType")),_bootstrapUtils=require("./utils/bootstrapUtils"),propTypes={componentClass:_elementType.default},defaultProps={componentClass:"div"},Jumbotron=function(e){function Jumbotron(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(Jumbotron,e),Jumbotron.prototype.render=function render(){var e=this.props,t=e.componentClass,r=e.className,o=(0,_objectWithoutPropertiesLoose2.default)(e,["componentClass","className"]),s=(0,_bootstrapUtils.splitBsProps)(o),u=s[0],a=s[1],l=(0,_bootstrapUtils.getClassSet)(u);return _react.default.createElement(t,(0,_extends2.default)({},a,{className:(0,_classnames.default)(r,l)}))},Jumbotron}(_react.default.Component);Jumbotron.propTypes=propTypes,Jumbotron.defaultProps=defaultProps;var _default=(0,_bootstrapUtils.bsClass)("jumbotron",Jumbotron);exports.default=_default,module.exports=exports.default;

},{"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types-extra/lib/elementType":488,"react":777}],532:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _values=_interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/values")),_extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_bootstrapUtils=require("./utils/bootstrapUtils"),_StyleConfig=require("./utils/StyleConfig"),Label=function(e){function Label(){return e.apply(this,arguments)||this}(0,_inheritsLoose2.default)(Label,e);var t=Label.prototype;return t.hasContent=function hasContent(e){var t=!1;return _react.default.Children.forEach(e,function(e){t||(e||0===e)&&(t=!0)}),t},t.render=function render(){var e=this.props,t=e.className,r=e.children,s=(0,_objectWithoutPropertiesLoose2.default)(e,["className","children"]),o=(0,_bootstrapUtils.splitBsProps)(s),a=o[0],l=o[1],i=(0,_extends2.default)({},(0,_bootstrapUtils.getClassSet)(a),{hidden:!this.hasContent(r)});return _react.default.createElement("span",(0,_extends2.default)({},l,{className:(0,_classnames.default)(t,i)}),r)},Label}(_react.default.Component),_default=(0,_bootstrapUtils.bsClass)("label",(0,_bootstrapUtils.bsStyles)((0,_values.default)(_StyleConfig.State).concat([_StyleConfig.Style.DEFAULT,_StyleConfig.Style.PRIMARY]),_StyleConfig.Style.DEFAULT,Label));exports.default=_default,module.exports=exports.default;

},{"./utils/StyleConfig":594,"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/core-js/object/values":9,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"react":777}],533:[function(require,module,exports){
"use strict";var _interopRequireWildcard=require("@babel/runtime-corejs2/helpers/interopRequireWildcard"),_interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireWildcard(require("react")),_elementType=_interopRequireDefault(require("prop-types-extra/lib/elementType")),_ListGroupItem=_interopRequireDefault(require("./ListGroupItem")),_bootstrapUtils=require("./utils/bootstrapUtils"),_ValidComponentChildren=_interopRequireDefault(require("./utils/ValidComponentChildren")),propTypes={componentClass:_elementType.default};function getDefaultComponent(e){return e?_ValidComponentChildren.default.some(e,function(e){return e.type!==_ListGroupItem.default||e.props.href||e.props.onClick})?"div":"ul":"div"}var ListGroup=function(e){function ListGroup(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(ListGroup,e),ListGroup.prototype.render=function render(){var e=this.props,t=e.children,r=e.componentClass,o=void 0===r?getDefaultComponent(t):r,i=e.className,s=(0,_objectWithoutPropertiesLoose2.default)(e,["children","componentClass","className"]),u=(0,_bootstrapUtils.splitBsProps)(s),l=u[0],n=u[1],p=(0,_bootstrapUtils.getClassSet)(l),a="ul"===o&&_ValidComponentChildren.default.every(t,function(e){return e.type===_ListGroupItem.default});return _react.default.createElement(o,(0,_extends2.default)({},n,{className:(0,_classnames.default)(i,p)}),a?_ValidComponentChildren.default.map(t,function(e){return(0,_react.cloneElement)(e,{listItem:!0})}):t)},ListGroup}(_react.default.Component);ListGroup.propTypes=propTypes;var _default=(0,_bootstrapUtils.bsClass)("list-group",ListGroup);exports.default=_default,module.exports=exports.default;

},{"./ListGroupItem":534,"./utils/ValidComponentChildren":595,"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/interopRequireWildcard":15,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types-extra/lib/elementType":488,"react":777}],534:[function(require,module,exports){
"use strict";var _interopRequireWildcard=require("@babel/runtime-corejs2/helpers/interopRequireWildcard"),_interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _values=_interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/values")),_extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireWildcard(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_bootstrapUtils=require("./utils/bootstrapUtils"),_StyleConfig=require("./utils/StyleConfig"),propTypes={active:_propTypes.default.any,disabled:_propTypes.default.any,header:_propTypes.default.node,listItem:_propTypes.default.bool,onClick:_propTypes.default.func,href:_propTypes.default.string,type:_propTypes.default.string},defaultProps={listItem:!1},ListGroupItem=function(e){function ListGroupItem(){return e.apply(this,arguments)||this}(0,_inheritsLoose2.default)(ListGroupItem,e);var t=ListGroupItem.prototype;return t.renderHeader=function renderHeader(e,t){return _react.default.isValidElement(e)?(0,_react.cloneElement)(e,{className:(0,_classnames.default)(e.props.className,t)}):_react.default.createElement("h4",{className:t},e)},t.render=function render(){var e,t=this.props,r=t.active,s=t.disabled,a=t.className,i=t.header,o=t.listItem,l=t.children,p=(0,_objectWithoutPropertiesLoose2.default)(t,["active","disabled","className","header","listItem","children"]),u=(0,_bootstrapUtils.splitBsProps)(p),n=u[0],d=u[1],c=(0,_extends2.default)({},(0,_bootstrapUtils.getClassSet)(n),{active:r,disabled:s});return d.href?e="a":d.onClick?(e="button",d.type=d.type||"button"):e=o?"li":"span",d.className=(0,_classnames.default)(a,c),i?_react.default.createElement(e,d,this.renderHeader(i,(0,_bootstrapUtils.prefix)(n,"heading")),_react.default.createElement("p",{className:(0,_bootstrapUtils.prefix)(n,"text")},l)):_react.default.createElement(e,d,l)},ListGroupItem}(_react.default.Component);ListGroupItem.propTypes=propTypes,ListGroupItem.defaultProps=defaultProps;var _default=(0,_bootstrapUtils.bsClass)("list-group-item",(0,_bootstrapUtils.bsStyles)((0,_values.default)(_StyleConfig.State),ListGroupItem));exports.default=_default,module.exports=exports.default;

},{"./utils/StyleConfig":594,"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/core-js/object/values":9,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/interopRequireWildcard":15,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"react":777}],535:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_elementType=_interopRequireDefault(require("prop-types-extra/lib/elementType")),_MediaBody=_interopRequireDefault(require("./MediaBody")),_MediaHeading=_interopRequireDefault(require("./MediaHeading")),_MediaLeft=_interopRequireDefault(require("./MediaLeft")),_MediaList=_interopRequireDefault(require("./MediaList")),_MediaListItem=_interopRequireDefault(require("./MediaListItem")),_MediaRight=_interopRequireDefault(require("./MediaRight")),_bootstrapUtils=require("./utils/bootstrapUtils"),propTypes={componentClass:_elementType.default},defaultProps={componentClass:"div"},Media=function(e){function Media(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(Media,e),Media.prototype.render=function render(){var e=this.props,t=e.componentClass,i=e.className,r=(0,_objectWithoutPropertiesLoose2.default)(e,["componentClass","className"]),a=(0,_bootstrapUtils.splitBsProps)(r),s=a[0],o=a[1],u=(0,_bootstrapUtils.getClassSet)(s);return _react.default.createElement(t,(0,_extends2.default)({},o,{className:(0,_classnames.default)(i,u)}))},Media}(_react.default.Component);Media.propTypes=propTypes,Media.defaultProps=defaultProps,Media.Heading=_MediaHeading.default,Media.Body=_MediaBody.default,Media.Left=_MediaLeft.default,Media.Right=_MediaRight.default,Media.List=_MediaList.default,Media.ListItem=_MediaListItem.default;var _default=(0,_bootstrapUtils.bsClass)("media",Media);exports.default=_default,module.exports=exports.default;

},{"./MediaBody":536,"./MediaHeading":537,"./MediaLeft":538,"./MediaList":539,"./MediaListItem":540,"./MediaRight":541,"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types-extra/lib/elementType":488,"react":777}],536:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_elementType=_interopRequireDefault(require("prop-types-extra/lib/elementType")),_Media=_interopRequireDefault(require("./Media")),_bootstrapUtils=require("./utils/bootstrapUtils"),propTypes={align:_propTypes.default.oneOf(["top","middle","bottom"]),componentClass:_elementType.default},defaultProps={componentClass:"div"},MediaBody=function(e){function MediaBody(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(MediaBody,e),MediaBody.prototype.render=function render(){var e=this.props,t=e.componentClass,r=e.align,o=e.className,s=(0,_objectWithoutPropertiesLoose2.default)(e,["componentClass","align","className"]),a=(0,_bootstrapUtils.splitBsProps)(s),i=a[0],p=a[1],l=(0,_bootstrapUtils.getClassSet)(i);return r&&(l[(0,_bootstrapUtils.prefix)(_Media.default.defaultProps,r)]=!0),_react.default.createElement(t,(0,_extends2.default)({},p,{className:(0,_classnames.default)(o,l)}))},MediaBody}(_react.default.Component);MediaBody.propTypes=propTypes,MediaBody.defaultProps=defaultProps;var _default=(0,_bootstrapUtils.bsClass)("media-body",MediaBody);exports.default=_default,module.exports=exports.default;

},{"./Media":535,"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"prop-types-extra/lib/elementType":488,"react":777}],537:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_elementType=_interopRequireDefault(require("prop-types-extra/lib/elementType")),_bootstrapUtils=require("./utils/bootstrapUtils"),propTypes={componentClass:_elementType.default},defaultProps={componentClass:"h4"},MediaHeading=function(e){function MediaHeading(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(MediaHeading,e),MediaHeading.prototype.render=function render(){var e=this.props,t=e.componentClass,r=e.className,s=(0,_objectWithoutPropertiesLoose2.default)(e,["componentClass","className"]),a=(0,_bootstrapUtils.splitBsProps)(s),o=a[0],i=a[1],l=(0,_bootstrapUtils.getClassSet)(o);return _react.default.createElement(t,(0,_extends2.default)({},i,{className:(0,_classnames.default)(r,l)}))},MediaHeading}(_react.default.Component);MediaHeading.propTypes=propTypes,MediaHeading.defaultProps=defaultProps;var _default=(0,_bootstrapUtils.bsClass)("media-heading",MediaHeading);exports.default=_default,module.exports=exports.default;

},{"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types-extra/lib/elementType":488,"react":777}],538:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_Media=_interopRequireDefault(require("./Media")),_bootstrapUtils=require("./utils/bootstrapUtils"),propTypes={align:_propTypes.default.oneOf(["top","middle","bottom"])},MediaLeft=function(e){function MediaLeft(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(MediaLeft,e),MediaLeft.prototype.render=function render(){var e=this.props,t=e.align,r=e.className,s=(0,_objectWithoutPropertiesLoose2.default)(e,["align","className"]),i=(0,_bootstrapUtils.splitBsProps)(s),o=i[0],a=i[1],u=(0,_bootstrapUtils.getClassSet)(o);return t&&(u[(0,_bootstrapUtils.prefix)(_Media.default.defaultProps,t)]=!0),_react.default.createElement("div",(0,_extends2.default)({},a,{className:(0,_classnames.default)(r,u)}))},MediaLeft}(_react.default.Component);MediaLeft.propTypes=propTypes;var _default=(0,_bootstrapUtils.bsClass)("media-left",MediaLeft);exports.default=_default,module.exports=exports.default;

},{"./Media":535,"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"react":777}],539:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_bootstrapUtils=require("./utils/bootstrapUtils"),MediaList=function(e){function MediaList(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(MediaList,e),MediaList.prototype.render=function render(){var e=this.props,t=e.className,r=(0,_objectWithoutPropertiesLoose2.default)(e,["className"]),s=(0,_bootstrapUtils.splitBsProps)(r),i=s[0],o=s[1],a=(0,_bootstrapUtils.getClassSet)(i);return _react.default.createElement("ul",(0,_extends2.default)({},o,{className:(0,_classnames.default)(t,a)}))},MediaList}(_react.default.Component),_default=(0,_bootstrapUtils.bsClass)("media-list",MediaList);exports.default=_default,module.exports=exports.default;

},{"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"react":777}],540:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_bootstrapUtils=require("./utils/bootstrapUtils"),MediaListItem=function(e){function MediaListItem(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(MediaListItem,e),MediaListItem.prototype.render=function render(){var e=this.props,t=e.className,r=(0,_objectWithoutPropertiesLoose2.default)(e,["className"]),s=(0,_bootstrapUtils.splitBsProps)(r),i=s[0],o=s[1],a=(0,_bootstrapUtils.getClassSet)(i);return _react.default.createElement("li",(0,_extends2.default)({},o,{className:(0,_classnames.default)(t,a)}))},MediaListItem}(_react.default.Component),_default=(0,_bootstrapUtils.bsClass)("media",MediaListItem);exports.default=_default,module.exports=exports.default;

},{"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"react":777}],541:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_Media=_interopRequireDefault(require("./Media")),_bootstrapUtils=require("./utils/bootstrapUtils"),propTypes={align:_propTypes.default.oneOf(["top","middle","bottom"])},MediaRight=function(e){function MediaRight(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(MediaRight,e),MediaRight.prototype.render=function render(){var e=this.props,t=e.align,r=e.className,i=(0,_objectWithoutPropertiesLoose2.default)(e,["align","className"]),s=(0,_bootstrapUtils.splitBsProps)(i),o=s[0],a=s[1],u=(0,_bootstrapUtils.getClassSet)(o);return t&&(u[(0,_bootstrapUtils.prefix)(_Media.default.defaultProps,t)]=!0),_react.default.createElement("div",(0,_extends2.default)({},a,{className:(0,_classnames.default)(r,u)}))},MediaRight}(_react.default.Component);MediaRight.propTypes=propTypes;var _default=(0,_bootstrapUtils.bsClass)("media-right",MediaRight);exports.default=_default,module.exports=exports.default;

},{"./Media":535,"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"react":777}],542:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_assertThisInitialized2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_all=_interopRequireDefault(require("prop-types-extra/lib/all")),_SafeAnchor=_interopRequireDefault(require("./SafeAnchor")),_bootstrapUtils=require("./utils/bootstrapUtils"),_createChainedFunction=_interopRequireDefault(require("./utils/createChainedFunction")),propTypes={active:_propTypes.default.bool,disabled:_propTypes.default.bool,divider:(0,_all.default)(_propTypes.default.bool,function(e){var t=e.divider,r=e.children;return t&&r?new Error("Children will not be rendered for dividers"):null}),eventKey:_propTypes.default.any,header:_propTypes.default.bool,href:_propTypes.default.string,onClick:_propTypes.default.func,onSelect:_propTypes.default.func},defaultProps={divider:!1,disabled:!1,header:!1},MenuItem=function(e){function MenuItem(t,r){var a;return(a=e.call(this,t,r)||this).handleClick=a.handleClick.bind((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(a))),a}(0,_inheritsLoose2.default)(MenuItem,e);var t=MenuItem.prototype;return t.handleClick=function handleClick(e){var t=this.props,r=t.href,a=t.disabled,i=t.onSelect,l=t.eventKey;r&&!a||e.preventDefault(),a||i&&i(l,e)},t.render=function render(){var e=this.props,t=e.active,r=e.disabled,a=e.divider,i=e.header,l=e.onClick,s=e.className,o=e.style,n=(0,_objectWithoutPropertiesLoose2.default)(e,["active","disabled","divider","header","onClick","className","style"]),u=(0,_bootstrapUtils.splitBsPropsAndOmit)(n,["eventKey","onSelect"]),d=u[0],p=u[1];return a?(p.children=void 0,_react.default.createElement("li",(0,_extends2.default)({},p,{role:"separator",className:(0,_classnames.default)(s,"divider"),style:o}))):i?_react.default.createElement("li",(0,_extends2.default)({},p,{role:"heading",className:(0,_classnames.default)(s,(0,_bootstrapUtils.prefix)(d,"header")),style:o})):_react.default.createElement("li",{role:"presentation",className:(0,_classnames.default)(s,{active:t,disabled:r}),style:o},_react.default.createElement(_SafeAnchor.default,(0,_extends2.default)({},p,{role:"menuitem",tabIndex:"-1",onClick:(0,_createChainedFunction.default)(l,this.handleClick)})))},MenuItem}(_react.default.Component);MenuItem.propTypes=propTypes,MenuItem.defaultProps=defaultProps;var _default=(0,_bootstrapUtils.bsClass)("dropdown",MenuItem);exports.default=_default,module.exports=exports.default;

},{"./SafeAnchor":578,"./utils/bootstrapUtils":596,"./utils/createChainedFunction":598,"@babel/runtime-corejs2/helpers/assertThisInitialized":11,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"prop-types-extra/lib/all":485,"react":777}],543:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_assertThisInitialized2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized")),_extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_classnames=_interopRequireDefault(require("classnames")),_events=_interopRequireDefault(require("dom-helpers/events")),_ownerDocument=_interopRequireDefault(require("dom-helpers/ownerDocument")),_inDOM=_interopRequireDefault(require("dom-helpers/util/inDOM")),_scrollbarSize=_interopRequireDefault(require("dom-helpers/util/scrollbarSize")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_reactDom=_interopRequireDefault(require("react-dom")),_Modal=_interopRequireDefault(require("react-overlays/lib/Modal")),_isOverflowing=_interopRequireDefault(require("react-overlays/lib/utils/isOverflowing")),_elementType=_interopRequireDefault(require("prop-types-extra/lib/elementType")),_Fade=_interopRequireDefault(require("./Fade")),_ModalBody=_interopRequireDefault(require("./ModalBody")),_ModalDialog=_interopRequireDefault(require("./ModalDialog")),_ModalFooter=_interopRequireDefault(require("./ModalFooter")),_ModalHeader=_interopRequireDefault(require("./ModalHeader")),_ModalTitle=_interopRequireDefault(require("./ModalTitle")),_bootstrapUtils=require("./utils/bootstrapUtils"),_createChainedFunction=_interopRequireDefault(require("./utils/createChainedFunction")),_splitComponentProps2=_interopRequireDefault(require("./utils/splitComponentProps")),_StyleConfig=require("./utils/StyleConfig"),propTypes=(0,_extends2.default)({},_Modal.default.propTypes,_ModalDialog.default.propTypes,{backdrop:_propTypes.default.oneOf(["static",!0,!1]),backdropClassName:_propTypes.default.string,keyboard:_propTypes.default.bool,animation:_propTypes.default.bool,dialogComponentClass:_elementType.default,autoFocus:_propTypes.default.bool,enforceFocus:_propTypes.default.bool,restoreFocus:_propTypes.default.bool,show:_propTypes.default.bool,onHide:_propTypes.default.func,onEnter:_propTypes.default.func,onEntering:_propTypes.default.func,onEntered:_propTypes.default.func,onExit:_propTypes.default.func,onExiting:_propTypes.default.func,onExited:_propTypes.default.func,container:_Modal.default.propTypes.container}),defaultProps=(0,_extends2.default)({},_Modal.default.defaultProps,{animation:!0,dialogComponentClass:_ModalDialog.default}),childContextTypes={$bs_modal:_propTypes.default.shape({onHide:_propTypes.default.func})};function DialogTransition(e){return _react.default.createElement(_Fade.default,(0,_extends2.default)({},e,{timeout:Modal.TRANSITION_DURATION}))}function BackdropTransition(e){return _react.default.createElement(_Fade.default,(0,_extends2.default)({},e,{timeout:Modal.BACKDROP_TRANSITION_DURATION}))}var Modal=function(e){function Modal(t,a){var o;return(o=e.call(this,t,a)||this).handleEntering=o.handleEntering.bind((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(o))),o.handleExited=o.handleExited.bind((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(o))),o.handleWindowResize=o.handleWindowResize.bind((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(o))),o.handleDialogClick=o.handleDialogClick.bind((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(o))),o.setModalRef=o.setModalRef.bind((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(o))),o.state={style:{}},o}(0,_inheritsLoose2.default)(Modal,e);var t=Modal.prototype;return t.getChildContext=function getChildContext(){return{$bs_modal:{onHide:this.props.onHide}}},t.componentWillUnmount=function componentWillUnmount(){this.handleExited()},t.setModalRef=function setModalRef(e){this._modal=e},t.handleDialogClick=function handleDialogClick(e){e.target===e.currentTarget&&this.props.onHide()},t.handleEntering=function handleEntering(){_events.default.on(window,"resize",this.handleWindowResize),this.updateStyle()},t.handleExited=function handleExited(){_events.default.off(window,"resize",this.handleWindowResize)},t.handleWindowResize=function handleWindowResize(){this.updateStyle()},t.updateStyle=function updateStyle(){if(_inDOM.default){var e=this._modal.getDialogElement(),t=e.scrollHeight,a=(0,_ownerDocument.default)(e),o=(0,_isOverflowing.default)(_reactDom.default.findDOMNode(this.props.container||a.body)),i=t>a.documentElement.clientHeight;this.setState({style:{paddingRight:o&&!i?(0,_scrollbarSize.default)():void 0,paddingLeft:!o&&i?(0,_scrollbarSize.default)():void 0}})}},t.render=function render(){var e=this.props,t=e.backdrop,a=e.backdropClassName,o=e.animation,i=e.show,l=e.dialogComponentClass,r=e.className,n=e.style,d=e.children,s=e.onEntering,u=e.onExited,p=(0,_objectWithoutPropertiesLoose2.default)(e,["backdrop","backdropClassName","animation","show","dialogComponentClass","className","style","children","onEntering","onExited"]),f=(0,_splitComponentProps2.default)(p,_Modal.default),_=f[0],c=f[1],h=i&&!o&&"in";return _react.default.createElement(_Modal.default,(0,_extends2.default)({},_,{ref:this.setModalRef,show:i,containerClassName:(0,_bootstrapUtils.prefix)(p,"open"),transition:o?DialogTransition:void 0,backdrop:t,backdropTransition:o?BackdropTransition:void 0,backdropClassName:(0,_classnames.default)((0,_bootstrapUtils.prefix)(p,"backdrop"),a,h),onEntering:(0,_createChainedFunction.default)(s,this.handleEntering),onExited:(0,_createChainedFunction.default)(u,this.handleExited)}),_react.default.createElement(l,(0,_extends2.default)({},c,{style:(0,_extends2.default)({},this.state.style,n),className:(0,_classnames.default)(r,h),onClick:!0===t?this.handleDialogClick:null}),d))},Modal}(_react.default.Component);Modal.propTypes=propTypes,Modal.defaultProps=defaultProps,Modal.childContextTypes=childContextTypes,Modal.Body=_ModalBody.default,Modal.Header=_ModalHeader.default,Modal.Title=_ModalTitle.default,Modal.Footer=_ModalFooter.default,Modal.Dialog=_ModalDialog.default,Modal.TRANSITION_DURATION=300,Modal.BACKDROP_TRANSITION_DURATION=150;var _default=(0,_bootstrapUtils.bsClass)("modal",(0,_bootstrapUtils.bsSizes)([_StyleConfig.Size.LARGE,_StyleConfig.Size.SMALL],Modal));exports.default=_default,module.exports=exports.default;

},{"./Fade":518,"./ModalBody":544,"./ModalDialog":545,"./ModalFooter":546,"./ModalHeader":547,"./ModalTitle":548,"./utils/StyleConfig":594,"./utils/bootstrapUtils":596,"./utils/createChainedFunction":598,"./utils/splitComponentProps":601,"@babel/runtime-corejs2/helpers/assertThisInitialized":11,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"dom-helpers/events":431,"dom-helpers/ownerDocument":435,"dom-helpers/util/inDOM":455,"dom-helpers/util/scrollbarSize":456,"prop-types":495,"prop-types-extra/lib/elementType":488,"react":777,"react-dom":602,"react-overlays/lib/Modal":734,"react-overlays/lib/utils/isOverflowing":745}],544:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_elementType=_interopRequireDefault(require("prop-types-extra/lib/elementType")),_bootstrapUtils=require("./utils/bootstrapUtils"),propTypes={componentClass:_elementType.default},defaultProps={componentClass:"div"},ModalBody=function(e){function ModalBody(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(ModalBody,e),ModalBody.prototype.render=function render(){var e=this.props,t=e.componentClass,r=e.className,o=(0,_objectWithoutPropertiesLoose2.default)(e,["componentClass","className"]),s=(0,_bootstrapUtils.splitBsProps)(o),a=s[0],l=s[1],i=(0,_bootstrapUtils.getClassSet)(a);return _react.default.createElement(t,(0,_extends2.default)({},l,{className:(0,_classnames.default)(r,i)}))},ModalBody}(_react.default.Component);ModalBody.propTypes=propTypes,ModalBody.defaultProps=defaultProps;var _default=(0,_bootstrapUtils.bsClass)("modal-body",ModalBody);exports.default=_default,module.exports=exports.default;

},{"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types-extra/lib/elementType":488,"react":777}],545:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends3=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_bootstrapUtils=require("./utils/bootstrapUtils"),_StyleConfig=require("./utils/StyleConfig"),propTypes={dialogClassName:_propTypes.default.string},ModalDialog=function(e){function ModalDialog(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(ModalDialog,e),ModalDialog.prototype.render=function render(){var e,t=this.props,r=t.dialogClassName,s=t.className,o=t.style,a=t.children,l=(0,_objectWithoutPropertiesLoose2.default)(t,["dialogClassName","className","style","children"]),i=(0,_bootstrapUtils.splitBsProps)(l),u=i[0],p=i[1],n=(0,_bootstrapUtils.prefix)(u),d=(0,_extends3.default)({display:"block"},o),_=(0,_extends3.default)({},(0,_bootstrapUtils.getClassSet)(u),((e={})[n]=!1,e[(0,_bootstrapUtils.prefix)(u,"dialog")]=!0,e));return _react.default.createElement("div",(0,_extends3.default)({},p,{tabIndex:"-1",role:"dialog",style:d,className:(0,_classnames.default)(s,n)}),_react.default.createElement("div",{className:(0,_classnames.default)(r,_)},_react.default.createElement("div",{className:(0,_bootstrapUtils.prefix)(u,"content"),role:"document"},a)))},ModalDialog}(_react.default.Component);ModalDialog.propTypes=propTypes;var _default=(0,_bootstrapUtils.bsClass)("modal",(0,_bootstrapUtils.bsSizes)([_StyleConfig.Size.LARGE,_StyleConfig.Size.SMALL],ModalDialog));exports.default=_default,module.exports=exports.default;

},{"./utils/StyleConfig":594,"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"react":777}],546:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_elementType=_interopRequireDefault(require("prop-types-extra/lib/elementType")),_bootstrapUtils=require("./utils/bootstrapUtils"),propTypes={componentClass:_elementType.default},defaultProps={componentClass:"div"},ModalFooter=function(e){function ModalFooter(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(ModalFooter,e),ModalFooter.prototype.render=function render(){var e=this.props,t=e.componentClass,r=e.className,o=(0,_objectWithoutPropertiesLoose2.default)(e,["componentClass","className"]),s=(0,_bootstrapUtils.splitBsProps)(o),a=s[0],l=s[1],i=(0,_bootstrapUtils.getClassSet)(a);return _react.default.createElement(t,(0,_extends2.default)({},l,{className:(0,_classnames.default)(r,i)}))},ModalFooter}(_react.default.Component);ModalFooter.propTypes=propTypes,ModalFooter.defaultProps=defaultProps;var _default=(0,_bootstrapUtils.bsClass)("modal-footer",ModalFooter);exports.default=_default,module.exports=exports.default;

},{"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types-extra/lib/elementType":488,"react":777}],547:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_propTypes=_interopRequireDefault(require("prop-types")),_react=_interopRequireDefault(require("react")),_bootstrapUtils=require("./utils/bootstrapUtils"),_createChainedFunction=_interopRequireDefault(require("./utils/createChainedFunction")),_CloseButton=_interopRequireDefault(require("./CloseButton")),propTypes={closeLabel:_propTypes.default.string,closeButton:_propTypes.default.bool,onHide:_propTypes.default.func},defaultProps={closeLabel:"Close",closeButton:!1},contextTypes={$bs_modal:_propTypes.default.shape({onHide:_propTypes.default.func})},ModalHeader=function(e){function ModalHeader(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(ModalHeader,e),ModalHeader.prototype.render=function render(){var e=this.props,t=e.closeLabel,r=e.closeButton,o=e.onHide,s=e.className,a=e.children,l=(0,_objectWithoutPropertiesLoose2.default)(e,["closeLabel","closeButton","onHide","className","children"]),u=this.context.$bs_modal,i=(0,_bootstrapUtils.splitBsProps)(l),p=i[0],n=i[1],d=(0,_bootstrapUtils.getClassSet)(p);return _react.default.createElement("div",(0,_extends2.default)({},n,{className:(0,_classnames.default)(s,d)}),r&&_react.default.createElement(_CloseButton.default,{label:t,onClick:(0,_createChainedFunction.default)(u&&u.onHide,o)}),a)},ModalHeader}(_react.default.Component);ModalHeader.propTypes=propTypes,ModalHeader.defaultProps=defaultProps,ModalHeader.contextTypes=contextTypes;var _default=(0,_bootstrapUtils.bsClass)("modal-header",ModalHeader);exports.default=_default,module.exports=exports.default;

},{"./CloseButton":510,"./utils/bootstrapUtils":596,"./utils/createChainedFunction":598,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"react":777}],548:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_elementType=_interopRequireDefault(require("prop-types-extra/lib/elementType")),_bootstrapUtils=require("./utils/bootstrapUtils"),propTypes={componentClass:_elementType.default},defaultProps={componentClass:"h4"},ModalTitle=function(e){function ModalTitle(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(ModalTitle,e),ModalTitle.prototype.render=function render(){var e=this.props,t=e.componentClass,r=e.className,o=(0,_objectWithoutPropertiesLoose2.default)(e,["componentClass","className"]),s=(0,_bootstrapUtils.splitBsProps)(o),l=s[0],a=s[1],i=(0,_bootstrapUtils.getClassSet)(l);return _react.default.createElement(t,(0,_extends2.default)({},a,{className:(0,_classnames.default)(r,i)}))},ModalTitle}(_react.default.Component);ModalTitle.propTypes=propTypes,ModalTitle.defaultProps=defaultProps;var _default=(0,_bootstrapUtils.bsClass)("modal-title",ModalTitle);exports.default=_default,module.exports=exports.default;

},{"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types-extra/lib/elementType":488,"react":777}],549:[function(require,module,exports){
(function (process){
"use strict";var _interopRequireWildcard=require("@babel/runtime-corejs2/helpers/interopRequireWildcard"),_interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends3=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_keycode=_interopRequireDefault(require("keycode")),_react=_interopRequireWildcard(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_reactDom=_interopRequireDefault(require("react-dom")),_all=_interopRequireDefault(require("prop-types-extra/lib/all")),_warning=_interopRequireDefault(require("warning")),_bootstrapUtils=require("./utils/bootstrapUtils"),_createChainedFunction=_interopRequireDefault(require("./utils/createChainedFunction")),_ValidComponentChildren=_interopRequireDefault(require("./utils/ValidComponentChildren")),propTypes={activeKey:_propTypes.default.any,activeHref:_propTypes.default.string,stacked:_propTypes.default.bool,justified:(0,_all.default)(_propTypes.default.bool,function(e){var t=e.justified,r=e.navbar;return t&&r?Error("justified navbar `Nav`s are not supported"):null}),onSelect:_propTypes.default.func,role:_propTypes.default.string,navbar:_propTypes.default.bool,pullRight:_propTypes.default.bool,pullLeft:_propTypes.default.bool},defaultProps={justified:!1,pullRight:!1,pullLeft:!1,stacked:!1},contextTypes={$bs_navbar:_propTypes.default.shape({bsClass:_propTypes.default.string,onSelect:_propTypes.default.func}),$bs_tabContainer:_propTypes.default.shape({activeKey:_propTypes.default.any,onSelect:_propTypes.default.func.isRequired,getTabId:_propTypes.default.func.isRequired,getPaneId:_propTypes.default.func.isRequired})},Nav=function(e){function Nav(){return e.apply(this,arguments)||this}(0,_inheritsLoose2.default)(Nav,e);var t=Nav.prototype;return t.componentDidUpdate=function componentDidUpdate(){var e=this;if(this._needsRefocus){this._needsRefocus=!1;var t=this.props.children,r=this.getActiveProps(),i=r.activeKey,a=r.activeHref,o=_ValidComponentChildren.default.find(t,function(t){return e.isActive(t,i,a)}),n=_ValidComponentChildren.default.toArray(t).indexOf(o),s=_reactDom.default.findDOMNode(this).children,l=s&&s[n];l&&l.firstChild&&l.firstChild.focus()}},t.getActiveProps=function getActiveProps(){var e=this.context.$bs_tabContainer;return e?("production"!==process.env.NODE_ENV&&(0,_warning.default)(null==this.props.activeKey&&!this.props.activeHref,"Specifying a `<Nav>` `activeKey` or `activeHref` in the context of a `<TabContainer>` is not supported. Instead use `<TabContainer activeKey={"+this.props.activeKey+"} />`."),e):this.props},t.getNextActiveChild=function getNextActiveChild(e){var t=this,r=this.props.children,i=r.filter(function(e){return null!=e.props.eventKey&&!e.props.disabled}),a=this.getActiveProps(),o=a.activeKey,n=a.activeHref,s=_ValidComponentChildren.default.find(r,function(e){return t.isActive(e,o,n)}),l=i.indexOf(s);if(-1===l)return i[0];var p=l+e,u=i.length;return p>=u?p=0:p<0&&(p=u-1),i[p]},t.getTabProps=function getTabProps(e,t,r,i,a){var o=this;if(!t&&"tablist"!==r)return null;var n=e.props,s=n.id,l=n["aria-controls"],p=n.eventKey,u=n.role,d=n.onKeyDown,c=n.tabIndex;return t&&("production"!==process.env.NODE_ENV&&(0,_warning.default)(!s&&!l,"In the context of a `<TabContainer>`, `<NavItem>`s are given generated `id` and `aria-controls` attributes for the sake of proper component accessibility. Any provided ones will be ignored. To control these attributes directly, provide a `generateChildId` prop to the parent `<TabContainer>`."),s=t.getTabId(p),l=t.getPaneId(p)),"tablist"===r&&(u=u||"tab",d=(0,_createChainedFunction.default)(function(e){return o.handleTabKeyDown(a,e)},d),c=i?c:-1),{id:s,role:u,onKeyDown:d,"aria-controls":l,tabIndex:c}},t.handleTabKeyDown=function handleTabKeyDown(e,t){var r;switch(t.keyCode){case _keycode.default.codes.left:case _keycode.default.codes.up:r=this.getNextActiveChild(-1);break;case _keycode.default.codes.right:case _keycode.default.codes.down:r=this.getNextActiveChild(1);break;default:return}t.preventDefault(),e&&r&&null!=r.props.eventKey&&e(r.props.eventKey),this._needsRefocus=!0},t.isActive=function isActive(e,t,r){var i=e.props;return!!(i.active||null!=t&&i.eventKey===t||r&&i.href===r)||i.active},t.render=function render(){var e,t=this,r=this.props,i=r.stacked,a=r.justified,o=r.onSelect,n=r.role,s=r.navbar,l=r.pullRight,p=r.pullLeft,u=r.className,d=r.children,c=(0,_objectWithoutPropertiesLoose2.default)(r,["stacked","justified","onSelect","role","navbar","pullRight","pullLeft","className","children"]),f=this.context.$bs_tabContainer,_=n||(f?"tablist":null),v=this.getActiveProps(),h=v.activeKey,b=v.activeHref;delete c.activeKey,delete c.activeHref;var y,g,T=(0,_bootstrapUtils.splitBsProps)(c),C=T[0],q=T[1],x=(0,_extends3.default)({},(0,_bootstrapUtils.getClassSet)(C),((e={})[(0,_bootstrapUtils.prefix)(C,"stacked")]=i,e[(0,_bootstrapUtils.prefix)(C,"justified")]=a,e)),m=null!=s?s:this.context.$bs_navbar;if(m){var D=this.context.$bs_navbar||{bsClass:"navbar"};x[(0,_bootstrapUtils.prefix)(D,"nav")]=!0,g=(0,_bootstrapUtils.prefix)(D,"right"),y=(0,_bootstrapUtils.prefix)(D,"left")}else g="pull-right",y="pull-left";return x[g]=l,x[y]=p,_react.default.createElement("ul",(0,_extends3.default)({},q,{role:_,className:(0,_classnames.default)(u,x)}),_ValidComponentChildren.default.map(d,function(e){var r=t.isActive(e,h,b),i=(0,_createChainedFunction.default)(e.props.onSelect,o,m&&m.onSelect,f&&f.onSelect);return(0,_react.cloneElement)(e,(0,_extends3.default)({},t.getTabProps(e,f,_,r,i),{active:r,activeKey:h,activeHref:b,onSelect:i}))}))},Nav}(_react.default.Component);Nav.propTypes=propTypes,Nav.defaultProps=defaultProps,Nav.contextTypes=contextTypes;var _default=(0,_bootstrapUtils.bsClass)("nav",(0,_bootstrapUtils.bsStyles)(["tabs","pills"],Nav));exports.default=_default,module.exports=exports.default;

}).call(this,require('_process'))

},{"./utils/ValidComponentChildren":595,"./utils/bootstrapUtils":596,"./utils/createChainedFunction":598,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/interopRequireWildcard":15,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"_process":484,"classnames":19,"keycode":482,"prop-types":495,"prop-types-extra/lib/all":485,"react":777,"react-dom":602,"warning":780}],550:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_Dropdown=_interopRequireDefault(require("./Dropdown")),_splitComponentProps2=_interopRequireDefault(require("./utils/splitComponentProps")),_ValidComponentChildren=_interopRequireDefault(require("./utils/ValidComponentChildren")),propTypes=(0,_extends2.default)({},_Dropdown.default.propTypes,{title:_propTypes.default.node.isRequired,noCaret:_propTypes.default.bool,active:_propTypes.default.bool,activeKey:_propTypes.default.any,activeHref:_propTypes.default.string,children:_propTypes.default.node}),NavDropdown=function(e){function NavDropdown(){return e.apply(this,arguments)||this}(0,_inheritsLoose2.default)(NavDropdown,e);var t=NavDropdown.prototype;return t.isActive=function isActive(e,t,r){var o=this,i=e.props;return!!(i.active||null!=t&&i.eventKey===t||r&&i.href===r)||(!!_ValidComponentChildren.default.some(i.children,function(e){return o.isActive(e,t,r)})||i.active)},t.render=function render(){var e=this,t=this.props,r=t.title,o=t.activeKey,i=t.activeHref,n=t.className,a=t.style,l=t.children,p=(0,_objectWithoutPropertiesLoose2.default)(t,["title","activeKey","activeHref","className","style","children"]),s=this.isActive(this,o,i);delete p.active,delete p.eventKey;var u=(0,_splitComponentProps2.default)(p,_Dropdown.default.ControlledComponent),d=u[0],c=u[1];return _react.default.createElement(_Dropdown.default,(0,_extends2.default)({},d,{componentClass:"li",className:(0,_classnames.default)(n,{active:s}),style:a}),_react.default.createElement(_Dropdown.default.Toggle,(0,_extends2.default)({},c,{useAnchor:!0}),r),_react.default.createElement(_Dropdown.default.Menu,null,_ValidComponentChildren.default.map(l,function(t){return _react.default.cloneElement(t,{active:e.isActive(t,o,i)})})))},NavDropdown}(_react.default.Component);NavDropdown.propTypes=propTypes;var _default=NavDropdown;exports.default=_default,module.exports=exports.default;

},{"./Dropdown":514,"./utils/ValidComponentChildren":595,"./utils/splitComponentProps":601,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"react":777}],551:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_assertThisInitialized2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_SafeAnchor=_interopRequireDefault(require("./SafeAnchor")),_createChainedFunction=_interopRequireDefault(require("./utils/createChainedFunction")),propTypes={active:_propTypes.default.bool,disabled:_propTypes.default.bool,role:_propTypes.default.string,href:_propTypes.default.string,onClick:_propTypes.default.func,onSelect:_propTypes.default.func,eventKey:_propTypes.default.any},defaultProps={active:!1,disabled:!1},NavItem=function(e){function NavItem(t,r){var a;return(a=e.call(this,t,r)||this).handleClick=a.handleClick.bind((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(a))),a}(0,_inheritsLoose2.default)(NavItem,e);var t=NavItem.prototype;return t.handleClick=function handleClick(e){this.props.disabled?e.preventDefault():this.props.onSelect&&this.props.onSelect(this.props.eventKey,e)},t.render=function render(){var e=this.props,t=e.active,r=e.disabled,a=e.onClick,i=e.className,l=e.style,s=(0,_objectWithoutPropertiesLoose2.default)(e,["active","disabled","onClick","className","style"]);return delete s.onSelect,delete s.eventKey,delete s.activeKey,delete s.activeHref,s.role?"tab"===s.role&&(s["aria-selected"]=t):"#"===s.href&&(s.role="button"),_react.default.createElement("li",{role:"presentation",className:(0,_classnames.default)(i,{active:t,disabled:r}),style:l},_react.default.createElement(_SafeAnchor.default,(0,_extends2.default)({},s,{disabled:r,onClick:(0,_createChainedFunction.default)(a,this.handleClick)})))},NavItem}(_react.default.Component);NavItem.propTypes=propTypes,NavItem.defaultProps=defaultProps;var _default=NavItem;exports.default=_default,module.exports=exports.default;

},{"./SafeAnchor":578,"./utils/createChainedFunction":598,"@babel/runtime-corejs2/helpers/assertThisInitialized":11,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"react":777}],552:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends3=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_assertThisInitialized2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_elementType=_interopRequireDefault(require("prop-types-extra/lib/elementType")),_uncontrollable=_interopRequireDefault(require("uncontrollable")),_Grid=_interopRequireDefault(require("./Grid")),_NavbarBrand=_interopRequireDefault(require("./NavbarBrand")),_NavbarCollapse=_interopRequireDefault(require("./NavbarCollapse")),_NavbarHeader=_interopRequireDefault(require("./NavbarHeader")),_NavbarToggle=_interopRequireDefault(require("./NavbarToggle")),_bootstrapUtils=require("./utils/bootstrapUtils"),_StyleConfig=require("./utils/StyleConfig"),_createChainedFunction=_interopRequireDefault(require("./utils/createChainedFunction")),propTypes={fixedTop:_propTypes.default.bool,fixedBottom:_propTypes.default.bool,staticTop:_propTypes.default.bool,inverse:_propTypes.default.bool,fluid:_propTypes.default.bool,componentClass:_elementType.default,onToggle:_propTypes.default.func,onSelect:_propTypes.default.func,collapseOnSelect:_propTypes.default.bool,expanded:_propTypes.default.bool,role:_propTypes.default.string},defaultProps={componentClass:"nav",fixedTop:!1,fixedBottom:!1,staticTop:!1,inverse:!1,fluid:!1,collapseOnSelect:!1},childContextTypes={$bs_navbar:_propTypes.default.shape({bsClass:_propTypes.default.string,expanded:_propTypes.default.bool,onToggle:_propTypes.default.func.isRequired,onSelect:_propTypes.default.func})},Navbar=function(e){function Navbar(t,a){var l;return(l=e.call(this,t,a)||this).handleToggle=l.handleToggle.bind((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(l))),l.handleCollapse=l.handleCollapse.bind((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(l))),l}(0,_inheritsLoose2.default)(Navbar,e);var t=Navbar.prototype;return t.getChildContext=function getChildContext(){var e=this.props,t=e.bsClass,a=e.expanded,l=e.onSelect,r=e.collapseOnSelect;return{$bs_navbar:{bsClass:t,expanded:a,onToggle:this.handleToggle,onSelect:(0,_createChainedFunction.default)(l,r?this.handleCollapse:null)}}},t.handleCollapse=function handleCollapse(){var e=this.props,t=e.onToggle;e.expanded&&t(!1)},t.handleToggle=function handleToggle(){var e=this.props;(0,e.onToggle)(!e.expanded)},t.render=function render(){var e,t=this.props,a=t.componentClass,l=t.fixedTop,r=t.fixedBottom,o=t.staticTop,s=t.inverse,p=t.fluid,i=t.className,n=t.children,u=(0,_objectWithoutPropertiesLoose2.default)(t,["componentClass","fixedTop","fixedBottom","staticTop","inverse","fluid","className","children"]),d=(0,_bootstrapUtils.splitBsPropsAndOmit)(u,["expanded","onToggle","onSelect","collapseOnSelect"]),f=d[0],b=d[1];void 0===b.role&&"nav"!==a&&(b.role="navigation"),s&&(f.bsStyle=_StyleConfig.Style.INVERSE);var _=(0,_extends3.default)({},(0,_bootstrapUtils.getClassSet)(f),((e={})[(0,_bootstrapUtils.prefix)(f,"fixed-top")]=l,e[(0,_bootstrapUtils.prefix)(f,"fixed-bottom")]=r,e[(0,_bootstrapUtils.prefix)(f,"static-top")]=o,e));return _react.default.createElement(a,(0,_extends3.default)({},b,{className:(0,_classnames.default)(i,_)}),_react.default.createElement(_Grid.default,{fluid:p},n))},Navbar}(_react.default.Component);Navbar.propTypes=propTypes,Navbar.defaultProps=defaultProps,Navbar.childContextTypes=childContextTypes,(0,_bootstrapUtils.bsClass)("navbar",Navbar);var UncontrollableNavbar=(0,_uncontrollable.default)(Navbar,{expanded:"onToggle"});function createSimpleWrapper(e,t,a){var l=function Wrapper(e,a){var l=e.componentClass,r=e.className,o=e.pullRight,s=e.pullLeft,p=(0,_objectWithoutPropertiesLoose2.default)(e,["componentClass","className","pullRight","pullLeft"]),i=a.$bs_navbar,n=void 0===i?{bsClass:"navbar"}:i;return _react.default.createElement(l,(0,_extends3.default)({},p,{className:(0,_classnames.default)(r,(0,_bootstrapUtils.prefix)(n,t),o&&(0,_bootstrapUtils.prefix)(n,"right"),s&&(0,_bootstrapUtils.prefix)(n,"left"))}))};return l.displayName=a,l.propTypes={componentClass:_elementType.default,pullRight:_propTypes.default.bool,pullLeft:_propTypes.default.bool},l.defaultProps={componentClass:e,pullRight:!1,pullLeft:!1},l.contextTypes={$bs_navbar:_propTypes.default.shape({bsClass:_propTypes.default.string})},l}UncontrollableNavbar.Brand=_NavbarBrand.default,UncontrollableNavbar.Header=_NavbarHeader.default,UncontrollableNavbar.Toggle=_NavbarToggle.default,UncontrollableNavbar.Collapse=_NavbarCollapse.default,UncontrollableNavbar.Form=createSimpleWrapper("div","form","NavbarForm"),UncontrollableNavbar.Text=createSimpleWrapper("p","text","NavbarText"),UncontrollableNavbar.Link=createSimpleWrapper("a","link","NavbarLink");var _default=(0,_bootstrapUtils.bsStyles)([_StyleConfig.Style.DEFAULT,_StyleConfig.Style.INVERSE],_StyleConfig.Style.DEFAULT,UncontrollableNavbar);exports.default=_default,module.exports=exports.default;

},{"./Grid":525,"./NavbarBrand":553,"./NavbarCollapse":554,"./NavbarHeader":555,"./NavbarToggle":556,"./utils/StyleConfig":594,"./utils/bootstrapUtils":596,"./utils/createChainedFunction":598,"@babel/runtime-corejs2/helpers/assertThisInitialized":11,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"prop-types-extra/lib/elementType":488,"react":777,"uncontrollable":778}],553:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_bootstrapUtils=require("./utils/bootstrapUtils"),contextTypes={$bs_navbar:_propTypes.default.shape({bsClass:_propTypes.default.string})},NavbarBrand=function(e){function NavbarBrand(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(NavbarBrand,e),NavbarBrand.prototype.render=function render(){var e=this.props,r=e.className,t=e.children,a=(0,_objectWithoutPropertiesLoose2.default)(e,["className","children"]),s=this.context.$bs_navbar||{bsClass:"navbar"},o=(0,_bootstrapUtils.prefix)(s,"brand");return _react.default.isValidElement(t)?_react.default.cloneElement(t,{className:(0,_classnames.default)(t.props.className,r,o)}):_react.default.createElement("span",(0,_extends2.default)({},a,{className:(0,_classnames.default)(r,o)}),t)},NavbarBrand}(_react.default.Component);NavbarBrand.contextTypes=contextTypes;var _default=NavbarBrand;exports.default=_default,module.exports=exports.default;

},{"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"react":777}],554:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_Collapse=_interopRequireDefault(require("./Collapse")),_bootstrapUtils=require("./utils/bootstrapUtils"),contextTypes={$bs_navbar:_propTypes.default.shape({bsClass:_propTypes.default.string,expanded:_propTypes.default.bool})},NavbarCollapse=function(e){function NavbarCollapse(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(NavbarCollapse,e),NavbarCollapse.prototype.render=function render(){var e=this.props,r=e.children,t=(0,_objectWithoutPropertiesLoose2.default)(e,["children"]),a=this.context.$bs_navbar||{bsClass:"navbar"},o=(0,_bootstrapUtils.prefix)(a,"collapse");return _react.default.createElement(_Collapse.default,(0,_extends2.default)({in:a.expanded},t),_react.default.createElement("div",{className:o},r))},NavbarCollapse}(_react.default.Component);NavbarCollapse.contextTypes=contextTypes;var _default=NavbarCollapse;exports.default=_default,module.exports=exports.default;

},{"./Collapse":512,"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"prop-types":495,"react":777}],555:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_bootstrapUtils=require("./utils/bootstrapUtils"),contextTypes={$bs_navbar:_propTypes.default.shape({bsClass:_propTypes.default.string})},NavbarHeader=function(e){function NavbarHeader(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(NavbarHeader,e),NavbarHeader.prototype.render=function render(){var e=this.props,r=e.className,t=(0,_objectWithoutPropertiesLoose2.default)(e,["className"]),a=this.context.$bs_navbar||{bsClass:"navbar"},s=(0,_bootstrapUtils.prefix)(a,"header");return _react.default.createElement("div",(0,_extends2.default)({},t,{className:(0,_classnames.default)(r,s)}))},NavbarHeader}(_react.default.Component);NavbarHeader.contextTypes=contextTypes;var _default=NavbarHeader;exports.default=_default,module.exports=exports.default;

},{"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"react":777}],556:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_bootstrapUtils=require("./utils/bootstrapUtils"),_createChainedFunction=_interopRequireDefault(require("./utils/createChainedFunction")),propTypes={onClick:_propTypes.default.func,children:_propTypes.default.node},contextTypes={$bs_navbar:_propTypes.default.shape({bsClass:_propTypes.default.string,expanded:_propTypes.default.bool,onToggle:_propTypes.default.func.isRequired})},NavbarToggle=function(e){function NavbarToggle(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(NavbarToggle,e),NavbarToggle.prototype.render=function render(){var e=this.props,t=e.onClick,r=e.className,a=e.children,o=(0,_objectWithoutPropertiesLoose2.default)(e,["onClick","className","children"]),s=this.context.$bs_navbar||{bsClass:"navbar"},l=(0,_extends2.default)({type:"button"},o,{onClick:(0,_createChainedFunction.default)(t,s.onToggle),className:(0,_classnames.default)(r,(0,_bootstrapUtils.prefix)(s,"toggle"),!s.expanded&&"collapsed")});return a?_react.default.createElement("button",l,a):_react.default.createElement("button",l,_react.default.createElement("span",{className:"sr-only"},"Toggle navigation"),_react.default.createElement("span",{className:"icon-bar"}),_react.default.createElement("span",{className:"icon-bar"}),_react.default.createElement("span",{className:"icon-bar"}))},NavbarToggle}(_react.default.Component);NavbarToggle.propTypes=propTypes,NavbarToggle.contextTypes=contextTypes;var _default=NavbarToggle;exports.default=_default,module.exports=exports.default;

},{"./utils/bootstrapUtils":596,"./utils/createChainedFunction":598,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"react":777}],557:[function(require,module,exports){
"use strict";var _interopRequireWildcard=require("@babel/runtime-corejs2/helpers/interopRequireWildcard"),_interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireWildcard(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_Overlay=_interopRequireDefault(require("react-overlays/lib/Overlay")),_elementType=_interopRequireDefault(require("prop-types-extra/lib/elementType")),_Fade=_interopRequireDefault(require("./Fade")),propTypes=(0,_extends2.default)({},_Overlay.default.propTypes,{show:_propTypes.default.bool,rootClose:_propTypes.default.bool,onHide:_propTypes.default.func,animation:_propTypes.default.oneOfType([_propTypes.default.bool,_elementType.default]),onEnter:_propTypes.default.func,onEntering:_propTypes.default.func,onEntered:_propTypes.default.func,onExit:_propTypes.default.func,onExiting:_propTypes.default.func,onExited:_propTypes.default.func,placement:_propTypes.default.oneOf(["top","right","bottom","left"])}),defaultProps={animation:_Fade.default,rootClose:!1,show:!1,placement:"right"},Overlay=function(e){function Overlay(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(Overlay,e),Overlay.prototype.render=function render(){var e,r=this.props,t=r.animation,o=r.children,p=(0,_objectWithoutPropertiesLoose2.default)(r,["animation","children"]),a=!0===t?_Fade.default:t||null;return e=a?o:(0,_react.cloneElement)(o,{className:(0,_classnames.default)(o.props.className,"in")}),_react.default.createElement(_Overlay.default,(0,_extends2.default)({},p,{transition:a}),e)},Overlay}(_react.default.Component);Overlay.propTypes=propTypes,Overlay.defaultProps=defaultProps;var _default=Overlay;exports.default=_default,module.exports=exports.default;

},{"./Fade":518,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/interopRequireWildcard":15,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"prop-types-extra/lib/elementType":488,"react":777,"react-overlays/lib/Overlay":736}],558:[function(require,module,exports){
(function (process){
"use strict";var _interopRequireWildcard=require("@babel/runtime-corejs2/helpers/interopRequireWildcard"),_interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_assertThisInitialized2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized")),_extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_isArray=_interopRequireDefault(require("@babel/runtime-corejs2/core-js/array/is-array")),_contains=_interopRequireDefault(require("dom-helpers/query/contains")),_react=_interopRequireWildcard(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_reactDom=_interopRequireDefault(require("react-dom")),_warning=_interopRequireDefault(require("warning")),_Overlay=_interopRequireDefault(require("./Overlay")),_createChainedFunction=_interopRequireDefault(require("./utils/createChainedFunction"));function isOneOf(e,t){return(0,_isArray.default)(t)?t.indexOf(e)>=0:e===t}var triggerType=_propTypes.default.oneOf(["click","hover","focus"]),propTypes=(0,_extends2.default)({},_Overlay.default.propTypes,{trigger:_propTypes.default.oneOfType([triggerType,_propTypes.default.arrayOf(triggerType)]),delay:_propTypes.default.number,delayShow:_propTypes.default.number,delayHide:_propTypes.default.number,defaultOverlayShown:_propTypes.default.bool,overlay:_propTypes.default.node.isRequired,onBlur:_propTypes.default.func,onClick:_propTypes.default.func,onFocus:_propTypes.default.func,onMouseOut:_propTypes.default.func,onMouseOver:_propTypes.default.func,target:_propTypes.default.oneOf([null]),onHide:_propTypes.default.oneOf([null]),show:_propTypes.default.oneOf([null])}),defaultProps={defaultOverlayShown:!1,trigger:["hover","focus"]},OverlayTrigger=function(e){function OverlayTrigger(t,r){var o;return(o=e.call(this,t,r)||this).handleToggle=o.handleToggle.bind((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(o))),o.handleDelayedShow=o.handleDelayedShow.bind((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(o))),o.handleDelayedHide=o.handleDelayedHide.bind((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(o))),o.handleHide=o.handleHide.bind((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(o))),o.handleMouseOver=function(e){return o.handleMouseOverOut(o.handleDelayedShow,e,"fromElement")},o.handleMouseOut=function(e){return o.handleMouseOverOut(o.handleDelayedHide,e,"toElement")},o._mountNode=null,o.state={show:t.defaultOverlayShown},o}(0,_inheritsLoose2.default)(OverlayTrigger,e);var t=OverlayTrigger.prototype;return t.componentDidMount=function componentDidMount(){this._mountNode=document.createElement("div"),this.renderOverlay()},t.componentDidUpdate=function componentDidUpdate(){this.renderOverlay()},t.componentWillUnmount=function componentWillUnmount(){_reactDom.default.unmountComponentAtNode(this._mountNode),this._mountNode=null,clearTimeout(this._hoverShowDelay),clearTimeout(this._hoverHideDelay)},t.handleDelayedHide=function handleDelayedHide(){var e=this;if(null!=this._hoverShowDelay)return clearTimeout(this._hoverShowDelay),void(this._hoverShowDelay=null);if(this.state.show&&null==this._hoverHideDelay){var t=null!=this.props.delayHide?this.props.delayHide:this.props.delay;t?this._hoverHideDelay=setTimeout(function(){e._hoverHideDelay=null,e.hide()},t):this.hide()}},t.handleDelayedShow=function handleDelayedShow(){var e=this;if(null!=this._hoverHideDelay)return clearTimeout(this._hoverHideDelay),void(this._hoverHideDelay=null);if(!this.state.show&&null==this._hoverShowDelay){var t=null!=this.props.delayShow?this.props.delayShow:this.props.delay;t?this._hoverShowDelay=setTimeout(function(){e._hoverShowDelay=null,e.show()},t):this.show()}},t.handleHide=function handleHide(){this.hide()},t.handleMouseOverOut=function handleMouseOverOut(e,t,r){var o=t.currentTarget,i=t.relatedTarget||t.nativeEvent[r];i&&i===o||(0,_contains.default)(o,i)||e(t)},t.handleToggle=function handleToggle(){this.state.show?this.hide():this.show()},t.hide=function hide(){this.setState({show:!1})},t.makeOverlay=function makeOverlay(e,t){return _react.default.createElement(_Overlay.default,(0,_extends2.default)({},t,{show:this.state.show,onHide:this.handleHide,target:this}),e)},t.show=function show(){this.setState({show:!0})},t.renderOverlay=function renderOverlay(){_reactDom.default.unstable_renderSubtreeIntoContainer(this,this._overlay,this._mountNode)},t.render=function render(){var e=this.props,t=e.trigger,r=e.overlay,o=e.children,i=e.onBlur,n=e.onClick,a=e.onFocus,l=e.onMouseOut,u=e.onMouseOver,s=(0,_objectWithoutPropertiesLoose2.default)(e,["trigger","overlay","children","onBlur","onClick","onFocus","onMouseOut","onMouseOver"]);delete s.delay,delete s.delayShow,delete s.delayHide,delete s.defaultOverlayShown;var d=_react.default.Children.only(o),h=d.props,p={};return this.state.show&&(p["aria-describedby"]=r.props.id),p.onClick=(0,_createChainedFunction.default)(h.onClick,n),isOneOf("click",t)&&(p.onClick=(0,_createChainedFunction.default)(p.onClick,this.handleToggle)),isOneOf("hover",t)&&("production"!==process.env.NODE_ENV&&(0,_warning.default)(!("hover"===t),'[react-bootstrap] Specifying only the `"hover"` trigger limits the visibility of the overlay to just mouse users. Consider also including the `"focus"` trigger so that touch and keyboard only users can see the overlay as well.'),p.onMouseOver=(0,_createChainedFunction.default)(h.onMouseOver,u,this.handleMouseOver),p.onMouseOut=(0,_createChainedFunction.default)(h.onMouseOut,l,this.handleMouseOut)),isOneOf("focus",t)&&(p.onFocus=(0,_createChainedFunction.default)(h.onFocus,a,this.handleDelayedShow),p.onBlur=(0,_createChainedFunction.default)(h.onBlur,i,this.handleDelayedHide)),this._overlay=this.makeOverlay(r,s),(0,_react.cloneElement)(d,p)},OverlayTrigger}(_react.default.Component);OverlayTrigger.propTypes=propTypes,OverlayTrigger.defaultProps=defaultProps;var _default=OverlayTrigger;exports.default=_default,module.exports=exports.default;

}).call(this,require('_process'))

},{"./Overlay":557,"./utils/createChainedFunction":598,"@babel/runtime-corejs2/core-js/array/is-array":2,"@babel/runtime-corejs2/helpers/assertThisInitialized":11,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/interopRequireWildcard":15,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"_process":484,"dom-helpers/query/contains":436,"prop-types":495,"react":777,"react-dom":602,"warning":780}],559:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_bootstrapUtils=require("./utils/bootstrapUtils"),PageHeader=function(e){function PageHeader(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(PageHeader,e),PageHeader.prototype.render=function render(){var e=this.props,t=e.className,r=e.children,s=(0,_objectWithoutPropertiesLoose2.default)(e,["className","children"]),a=(0,_bootstrapUtils.splitBsProps)(s),o=a[0],i=a[1],l=(0,_bootstrapUtils.getClassSet)(o);return _react.default.createElement("div",(0,_extends2.default)({},i,{className:(0,_classnames.default)(t,l)}),_react.default.createElement("h1",null,r))},PageHeader}(_react.default.Component),_default=(0,_bootstrapUtils.bsClass)("page-header",PageHeader);exports.default=_default,module.exports=exports.default;

},{"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"react":777}],560:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _PagerItem=_interopRequireDefault(require("./PagerItem")),_deprecationWarning=_interopRequireDefault(require("./utils/deprecationWarning")),_default=_deprecationWarning.default.wrapper(_PagerItem.default,"`<PageItem>`","`<Pager.Item>`");exports.default=_default,module.exports=exports.default;

},{"./PagerItem":562,"./utils/deprecationWarning":599,"@babel/runtime-corejs2/helpers/interopRequireDefault":14}],561:[function(require,module,exports){
"use strict";var _interopRequireWildcard=require("@babel/runtime-corejs2/helpers/interopRequireWildcard"),_interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireWildcard(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_PagerItem=_interopRequireDefault(require("./PagerItem")),_bootstrapUtils=require("./utils/bootstrapUtils"),_createChainedFunction=_interopRequireDefault(require("./utils/createChainedFunction")),_ValidComponentChildren=_interopRequireDefault(require("./utils/ValidComponentChildren")),propTypes={onSelect:_propTypes.default.func},Pager=function(e){function Pager(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(Pager,e),Pager.prototype.render=function render(){var e=this.props,r=e.onSelect,t=e.className,i=e.children,o=(0,_objectWithoutPropertiesLoose2.default)(e,["onSelect","className","children"]),a=(0,_bootstrapUtils.splitBsProps)(o),s=a[0],u=a[1],l=(0,_bootstrapUtils.getClassSet)(s);return _react.default.createElement("ul",(0,_extends2.default)({},u,{className:(0,_classnames.default)(t,l)}),_ValidComponentChildren.default.map(i,function(e){return(0,_react.cloneElement)(e,{onSelect:(0,_createChainedFunction.default)(e.props.onSelect,r)})}))},Pager}(_react.default.Component);Pager.propTypes=propTypes,Pager.Item=_PagerItem.default;var _default=(0,_bootstrapUtils.bsClass)("pager",Pager);exports.default=_default,module.exports=exports.default;

},{"./PagerItem":562,"./utils/ValidComponentChildren":595,"./utils/bootstrapUtils":596,"./utils/createChainedFunction":598,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/interopRequireWildcard":15,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"react":777}],562:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_assertThisInitialized2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_SafeAnchor=_interopRequireDefault(require("./SafeAnchor")),_createChainedFunction=_interopRequireDefault(require("./utils/createChainedFunction")),propTypes={disabled:_propTypes.default.bool,previous:_propTypes.default.bool,next:_propTypes.default.bool,onClick:_propTypes.default.func,onSelect:_propTypes.default.func,eventKey:_propTypes.default.any},defaultProps={disabled:!1,previous:!1,next:!1},PagerItem=function(e){function PagerItem(t,r){var a;return(a=e.call(this,t,r)||this).handleSelect=a.handleSelect.bind((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(a))),a}(0,_inheritsLoose2.default)(PagerItem,e);var t=PagerItem.prototype;return t.handleSelect=function handleSelect(e){var t=this.props,r=t.disabled,a=t.onSelect,i=t.eventKey;r?e.preventDefault():a&&a(i,e)},t.render=function render(){var e=this.props,t=e.disabled,r=e.previous,a=e.next,i=e.onClick,l=e.className,s=e.style,o=(0,_objectWithoutPropertiesLoose2.default)(e,["disabled","previous","next","onClick","className","style"]);return delete o.onSelect,delete o.eventKey,_react.default.createElement("li",{className:(0,_classnames.default)(l,{disabled:t,previous:r,next:a}),style:s},_react.default.createElement(_SafeAnchor.default,(0,_extends2.default)({},o,{disabled:t,onClick:(0,_createChainedFunction.default)(i,this.handleSelect)})))},PagerItem}(_react.default.Component);PagerItem.propTypes=propTypes,PagerItem.defaultProps=defaultProps;var _default=PagerItem;exports.default=_default,module.exports=exports.default;

},{"./SafeAnchor":578,"./utils/createChainedFunction":598,"@babel/runtime-corejs2/helpers/assertThisInitialized":11,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"react":777}],563:[function(require,module,exports){
"use strict";var _interopRequireWildcard=require("@babel/runtime-corejs2/helpers/interopRequireWildcard"),_interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_PaginationItem=_interopRequireWildcard(require("./PaginationItem")),_bootstrapUtils=require("./utils/bootstrapUtils"),Pagination=function(e){function Pagination(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(Pagination,e),Pagination.prototype.render=function render(){var e=this.props,t=e.className,i=e.children,r=(0,_objectWithoutPropertiesLoose2.default)(e,["className","children"]),a=(0,_bootstrapUtils.splitBsProps)(r),o=a[0],n=a[1],s=(0,_bootstrapUtils.getClassSet)(o);return _react.default.createElement("ul",(0,_extends2.default)({},n,{className:(0,_classnames.default)(t,s)}),i)},Pagination}(_react.default.Component);(0,_bootstrapUtils.bsClass)("pagination",Pagination),Pagination.First=_PaginationItem.First,Pagination.Prev=_PaginationItem.Prev,Pagination.Ellipsis=_PaginationItem.Ellipsis,Pagination.Item=_PaginationItem.default,Pagination.Next=_PaginationItem.Next,Pagination.Last=_PaginationItem.Last;var _default=Pagination;exports.default=_default,module.exports=exports.default;

},{"./PaginationItem":564,"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/interopRequireWildcard":15,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"react":777}],564:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=PaginationItem,exports.Last=exports.Next=exports.Ellipsis=exports.Prev=exports.First=void 0;var _inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_classnames=_interopRequireDefault(require("classnames")),_propTypes=_interopRequireDefault(require("prop-types")),_react=_interopRequireDefault(require("react")),_SafeAnchor=_interopRequireDefault(require("./SafeAnchor")),propTypes={eventKey:_propTypes.default.any,className:_propTypes.default.string,onSelect:_propTypes.default.func,disabled:_propTypes.default.bool,active:_propTypes.default.bool,activeLabel:_propTypes.default.string.isRequired},defaultProps={active:!1,disabled:!1,activeLabel:"(current)"};function PaginationItem(e){var t=e.active,r=e.disabled,a=e.className,s=e.style,i=e.activeLabel,l=e.children,o=(0,_objectWithoutPropertiesLoose2.default)(e,["active","disabled","className","style","activeLabel","children"]),p=t||r?"span":_SafeAnchor.default;return _react.default.createElement("li",{style:s,className:(0,_classnames.default)(a,{active:t,disabled:r})},_react.default.createElement(p,(0,_extends2.default)({disabled:r},o),l,t&&_react.default.createElement("span",{className:"sr-only"},i)))}function createButton(e,t,r){var a,s;return void 0===r&&(r=e),s=a=function(e){function _class(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(_class,e),_class.prototype.render=function render(){var e=this.props,a=e.disabled,s=e.children,i=e.className,l=(0,_objectWithoutPropertiesLoose2.default)(e,["disabled","children","className"]),o=a?"span":_SafeAnchor.default;return _react.default.createElement("li",(0,_extends2.default)({"aria-label":r,className:(0,_classnames.default)(i,{disabled:a})},l),_react.default.createElement(o,null,s||t))},_class}(_react.default.Component),a.displayName=e,a.propTypes={disabled:_propTypes.default.bool},s}PaginationItem.propTypes=propTypes,PaginationItem.defaultProps=defaultProps;var First=createButton("First","«");exports.First=First;var Prev=createButton("Prev","‹");exports.Prev=Prev;var Ellipsis=createButton("Ellipsis","…","More");exports.Ellipsis=Ellipsis;var Next=createButton("Next","›");exports.Next=Next;var Last=createButton("Last","»");exports.Last=Last;

},{"./SafeAnchor":578,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"react":777}],565:[function(require,module,exports){
(function (process){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _assign=_interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/assign")),_values=_interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/values")),_extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_propTypes=_interopRequireDefault(require("prop-types")),_react=_interopRequireDefault(require("react")),_uncontrollable=_interopRequireDefault(require("uncontrollable")),_warning=_interopRequireDefault(require("warning")),_bootstrapUtils=require("./utils/bootstrapUtils"),_StyleConfig=require("./utils/StyleConfig"),_PanelBody=_interopRequireDefault(require("./PanelBody")),_PanelHeading=_interopRequireDefault(require("./PanelHeading")),_PanelTitle=_interopRequireDefault(require("./PanelTitle")),_PanelFooter=_interopRequireDefault(require("./PanelFooter")),_PanelToggle=_interopRequireDefault(require("./PanelToggle")),_PanelCollapse=_interopRequireDefault(require("./PanelCollapse")),has=Object.prototype.hasOwnProperty,defaultGetId=function defaultGetId(e,t){return e?e+"--"+t:null},propTypes={expanded:_propTypes.default.bool,onToggle:_propTypes.default.func,eventKey:_propTypes.default.any,id:_propTypes.default.string},contextTypes={$bs_panelGroup:_propTypes.default.shape({getId:_propTypes.default.func,activeKey:_propTypes.default.any,onToggle:_propTypes.default.func})},childContextTypes={$bs_panel:_propTypes.default.shape({headingId:_propTypes.default.string,bodyId:_propTypes.default.string,bsClass:_propTypes.default.string,onToggle:_propTypes.default.func,expanded:_propTypes.default.bool})},Panel=function(e){function Panel(){for(var t,l=arguments.length,n=new Array(l),r=0;r<l;r++)n[r]=arguments[r];return(t=e.call.apply(e,[this].concat(n))||this).handleToggle=function(e){var l=t.context.$bs_panelGroup,n=!t.getExpanded();l&&l.onToggle?l.onToggle(t.props.eventKey,n,e):t.props.onToggle(n,e)},t}(0,_inheritsLoose2.default)(Panel,e);var t=Panel.prototype;return t.getChildContext=function getChildContext(){var e,t=this.props,l=t.eventKey,n=t.id,r=null==l?n:l;if(null!==r){var a=this.context.$bs_panelGroup,o=a&&a.getId||defaultGetId;e={headingId:o(r,"heading"),bodyId:o(r,"body")}}return{$bs_panel:(0,_extends2.default)({},e,{bsClass:this.props.bsClass,expanded:this.getExpanded(),onToggle:this.handleToggle})}},t.getExpanded=function getExpanded(){var e=this.context.$bs_panelGroup;return e&&has.call(e,"activeKey")?("production"!==process.env.NODE_ENV&&(0,_warning.default)(null==this.props.expanded,"Specifying `<Panel>` `expanded` in the context of an accordion `<PanelGroup>` is not supported. Set `activeKey` on the `<PanelGroup>` instead."),e.activeKey===this.props.eventKey):!!this.props.expanded},t.render=function render(){var e=this.props,t=e.className,l=e.children,n=(0,_bootstrapUtils.splitBsPropsAndOmit)(this.props,["onToggle","eventKey","expanded"]),r=n[0],a=n[1];return _react.default.createElement("div",(0,_extends2.default)({},a,{className:(0,_classnames.default)(t,(0,_bootstrapUtils.getClassSet)(r))}),l)},Panel}(_react.default.Component);Panel.propTypes=propTypes,Panel.contextTypes=contextTypes,Panel.childContextTypes=childContextTypes;var UncontrolledPanel=(0,_uncontrollable.default)((0,_bootstrapUtils.bsClass)("panel",(0,_bootstrapUtils.bsStyles)((0,_values.default)(_StyleConfig.State).concat([_StyleConfig.Style.DEFAULT,_StyleConfig.Style.PRIMARY]),_StyleConfig.Style.DEFAULT,Panel)),{expanded:"onToggle"});(0,_assign.default)(UncontrolledPanel,{Heading:_PanelHeading.default,Title:_PanelTitle.default,Body:_PanelBody.default,Footer:_PanelFooter.default,Toggle:_PanelToggle.default,Collapse:_PanelCollapse.default});var _default=UncontrolledPanel;exports.default=_default,module.exports=exports.default;

}).call(this,require('_process'))

},{"./PanelBody":566,"./PanelCollapse":567,"./PanelFooter":568,"./PanelHeading":570,"./PanelTitle":571,"./PanelToggle":572,"./utils/StyleConfig":594,"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/core-js/object/assign":3,"@babel/runtime-corejs2/core-js/object/values":9,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"_process":484,"classnames":19,"prop-types":495,"react":777,"uncontrollable":778,"warning":780}],566:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_propTypes=_interopRequireDefault(require("prop-types")),_react=_interopRequireDefault(require("react")),_classnames=_interopRequireDefault(require("classnames")),_bootstrapUtils=require("./utils/bootstrapUtils"),_PanelCollapse=_interopRequireDefault(require("./PanelCollapse")),propTypes={collapsible:_propTypes.default.bool.isRequired},defaultProps={collapsible:!1},contextTypes={$bs_panel:_propTypes.default.shape({bsClass:_propTypes.default.string})},PanelBody=function(e){function PanelBody(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(PanelBody,e),PanelBody.prototype.render=function render(){var e=this.props,t=e.children,s=e.className,r=e.collapsible,l=(this.context.$bs_panel||{}).bsClass,a=(0,_bootstrapUtils.splitBsPropsAndOmit)(this.props,["collapsible"]),o=a[0],p=a[1];o.bsClass=l||o.bsClass;var i=_react.default.createElement("div",(0,_extends2.default)({},p,{className:(0,_classnames.default)(s,(0,_bootstrapUtils.prefix)(o,"body"))}),t);return r&&(i=_react.default.createElement(_PanelCollapse.default,null,i)),i},PanelBody}(_react.default.Component);PanelBody.propTypes=propTypes,PanelBody.defaultProps=defaultProps,PanelBody.contextTypes=contextTypes;var _default=(0,_bootstrapUtils.bsClass)("panel",PanelBody);exports.default=_default,module.exports=exports.default;

},{"./PanelCollapse":567,"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"classnames":19,"prop-types":495,"react":777}],567:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_propTypes=_interopRequireDefault(require("prop-types")),_react=_interopRequireDefault(require("react")),_bootstrapUtils=require("./utils/bootstrapUtils"),_Collapse=_interopRequireDefault(require("./Collapse")),propTypes={onEnter:_propTypes.default.func,onEntering:_propTypes.default.func,onEntered:_propTypes.default.func,onExit:_propTypes.default.func,onExiting:_propTypes.default.func,onExited:_propTypes.default.func},contextTypes={$bs_panel:_propTypes.default.shape({headingId:_propTypes.default.string,bodyId:_propTypes.default.string,bsClass:_propTypes.default.string,expanded:_propTypes.default.bool})},PanelCollapse=function(e){function PanelCollapse(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(PanelCollapse,e),PanelCollapse.prototype.render=function render(){var e=this.props.children,t=this.context.$bs_panel||{},r=t.headingId,p=t.bodyId,s=t.bsClass,l=t.expanded,a=(0,_bootstrapUtils.splitBsProps)(this.props),o=a[0],n=a[1];return o.bsClass=s||o.bsClass,r&&p&&(n.id=p,n.role=n.role||"tabpanel",n["aria-labelledby"]=r),_react.default.createElement(_Collapse.default,(0,_extends2.default)({in:l},n),_react.default.createElement("div",{className:(0,_bootstrapUtils.prefix)(o,"collapse")},e))},PanelCollapse}(_react.default.Component);PanelCollapse.propTypes=propTypes,PanelCollapse.contextTypes=contextTypes;var _default=(0,_bootstrapUtils.bsClass)("panel",PanelCollapse);exports.default=_default,module.exports=exports.default;

},{"./Collapse":512,"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"prop-types":495,"react":777}],568:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_propTypes=_interopRequireDefault(require("prop-types")),_react=_interopRequireDefault(require("react")),_classnames=_interopRequireDefault(require("classnames")),_bootstrapUtils=require("./utils/bootstrapUtils"),contextTypes={$bs_panel:_propTypes.default.shape({bsClass:_propTypes.default.string})},PanelFooter=function(e){function PanelFooter(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(PanelFooter,e),PanelFooter.prototype.render=function render(){var e=this.props,t=e.children,r=e.className,s=(this.context.$bs_panel||{}).bsClass,o=(0,_bootstrapUtils.splitBsProps)(this.props),a=o[0],l=o[1];return a.bsClass=s||a.bsClass,_react.default.createElement("div",(0,_extends2.default)({},l,{className:(0,_classnames.default)(r,(0,_bootstrapUtils.prefix)(a,"footer"))}),t)},PanelFooter}(_react.default.Component);PanelFooter.contextTypes=contextTypes;var _default=(0,_bootstrapUtils.bsClass)("panel",PanelFooter);exports.default=_default,module.exports=exports.default;

},{"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"classnames":19,"prop-types":495,"react":777}],569:[function(require,module,exports){
"use strict";var _interopRequireWildcard=require("@babel/runtime-corejs2/helpers/interopRequireWildcard"),_interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_propTypes=_interopRequireDefault(require("prop-types")),_react=_interopRequireWildcard(require("react")),_uncontrollable=_interopRequireDefault(require("uncontrollable")),_bootstrapUtils=require("./utils/bootstrapUtils"),_ValidComponentChildren=_interopRequireDefault(require("./utils/ValidComponentChildren")),_PropTypes=require("./utils/PropTypes"),propTypes={accordion:_propTypes.default.bool,activeKey:_propTypes.default.any,onSelect:_propTypes.default.func,role:_propTypes.default.string,generateChildId:_propTypes.default.func,id:(0,_PropTypes.generatedId)("PanelGroup")},defaultProps={accordion:!1},childContextTypes={$bs_panelGroup:_propTypes.default.shape({getId:_propTypes.default.func,headerRole:_propTypes.default.string,panelRole:_propTypes.default.string,activeKey:_propTypes.default.any,onToggle:_propTypes.default.func})},PanelGroup=function(e){function PanelGroup(){for(var r,t=arguments.length,o=new Array(t),l=0;l<t;l++)o[l]=arguments[l];return(r=e.call.apply(e,[this].concat(o))||this).handleSelect=function(e,t,o){t?r.props.onSelect(e,o):r.props.activeKey===e&&r.props.onSelect(null,o)},r}(0,_inheritsLoose2.default)(PanelGroup,e);var r=PanelGroup.prototype;return r.getChildContext=function getChildContext(){var e=this.props,r=e.activeKey,t=e.accordion,o=e.generateChildId,l=e.id,p=null;return t&&(p=o||function(e,r){return l?l+"-"+r+"-"+e:null}),{$bs_panelGroup:(0,_extends2.default)({getId:p,headerRole:"tab",panelRole:"tabpanel"},t&&{activeKey:r,onToggle:this.handleSelect})}},r.render=function render(){var e=this.props,r=e.accordion,t=e.className,o=e.children,l=(0,_objectWithoutPropertiesLoose2.default)(e,["accordion","className","children"]),p=(0,_bootstrapUtils.splitBsPropsAndOmit)(l,["onSelect","activeKey"]),a=p[0],n=p[1];r&&(n.role=n.role||"tablist");var s=(0,_bootstrapUtils.getClassSet)(a);return _react.default.createElement("div",(0,_extends2.default)({},n,{className:(0,_classnames.default)(t,s)}),_ValidComponentChildren.default.map(o,function(e){return(0,_react.cloneElement)(e,{bsStyle:e.props.bsStyle||a.bsStyle})}))},PanelGroup}(_react.default.Component);PanelGroup.propTypes=propTypes,PanelGroup.defaultProps=defaultProps,PanelGroup.childContextTypes=childContextTypes;var _default=(0,_uncontrollable.default)((0,_bootstrapUtils.bsClass)("panel-group",PanelGroup),{activeKey:"onSelect"});exports.default=_default,module.exports=exports.default;

},{"./utils/PropTypes":593,"./utils/ValidComponentChildren":595,"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/interopRequireWildcard":15,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"react":777,"uncontrollable":778}],570:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_propTypes=_interopRequireDefault(require("prop-types")),_react=_interopRequireDefault(require("react")),_classnames=_interopRequireDefault(require("classnames")),_elementType=_interopRequireDefault(require("react-prop-types/lib/elementType")),_bootstrapUtils=require("./utils/bootstrapUtils"),propTypes={componentClass:_elementType.default},defaultProps={componentClass:"div"},contextTypes={$bs_panel:_propTypes.default.shape({headingId:_propTypes.default.string,bsClass:_propTypes.default.string})},PanelHeading=function(e){function PanelHeading(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(PanelHeading,e),PanelHeading.prototype.render=function render(){var e=this.props,t=e.children,r=e.className,s=e.componentClass,a=(0,_objectWithoutPropertiesLoose2.default)(e,["children","className","componentClass"]),o=this.context.$bs_panel||{},l=o.headingId,p=o.bsClass,i=(0,_bootstrapUtils.splitBsProps)(a),n=i[0],u=i[1];return n.bsClass=p||n.bsClass,l&&(u.role=u.role||"tab",u.id=l),_react.default.createElement(s,(0,_extends2.default)({},u,{className:(0,_classnames.default)(r,(0,_bootstrapUtils.prefix)(n,"heading"))}),t)},PanelHeading}(_react.default.Component);PanelHeading.propTypes=propTypes,PanelHeading.defaultProps=defaultProps,PanelHeading.contextTypes=contextTypes;var _default=(0,_bootstrapUtils.bsClass)("panel",PanelHeading);exports.default=_default,module.exports=exports.default;

},{"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"react":777,"react-prop-types/lib/elementType":748}],571:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_propTypes=_interopRequireDefault(require("prop-types")),_react=_interopRequireDefault(require("react")),_elementType=_interopRequireDefault(require("react-prop-types/lib/elementType")),_bootstrapUtils=require("./utils/bootstrapUtils"),_PanelToggle=_interopRequireDefault(require("./PanelToggle")),propTypes={componentClass:_elementType.default,toggle:_propTypes.default.bool},contextTypes={$bs_panel:_propTypes.default.shape({bsClass:_propTypes.default.string})},defaultProps={componentClass:"div"},PanelTitle=function(e){function PanelTitle(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(PanelTitle,e),PanelTitle.prototype.render=function render(){var e=this.props,t=e.children,r=e.className,s=e.toggle,l=e.componentClass,o=(0,_objectWithoutPropertiesLoose2.default)(e,["children","className","toggle","componentClass"]),a=(this.context.$bs_panel||{}).bsClass,p=(0,_bootstrapUtils.splitBsProps)(o),i=p[0],n=p[1];return i.bsClass=a||i.bsClass,s&&(t=_react.default.createElement(_PanelToggle.default,null,t)),_react.default.createElement(l,(0,_extends2.default)({},n,{className:(0,_classnames.default)(r,(0,_bootstrapUtils.prefix)(i,"title"))}),t)},PanelTitle}(_react.default.Component);PanelTitle.propTypes=propTypes,PanelTitle.defaultProps=defaultProps,PanelTitle.contextTypes=contextTypes;var _default=(0,_bootstrapUtils.bsClass)("panel",PanelTitle);exports.default=_default,module.exports=exports.default;

},{"./PanelToggle":572,"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"react":777,"react-prop-types/lib/elementType":748}],572:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_assertThisInitialized2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized")),_propTypes=_interopRequireDefault(require("prop-types")),_react=_interopRequireDefault(require("react")),_classnames=_interopRequireDefault(require("classnames")),_elementType=_interopRequireDefault(require("react-prop-types/lib/elementType")),_SafeAnchor=_interopRequireDefault(require("./SafeAnchor")),_createChainedFunction=_interopRequireDefault(require("./utils/createChainedFunction")),propTypes={onClick:_propTypes.default.func,componentClass:_elementType.default},defaultProps={componentClass:_SafeAnchor.default},contextTypes={$bs_panel:_propTypes.default.shape({bodyId:_propTypes.default.string,onToggle:_propTypes.default.func,expanded:_propTypes.default.bool})},PanelToggle=function(e){function PanelToggle(){for(var t,r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=e.call.apply(e,[this].concat(o))||this).handleToggle=t.handleToggle.bind((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(t))),t}(0,_inheritsLoose2.default)(PanelToggle,e);var t=PanelToggle.prototype;return t.handleToggle=function handleToggle(e){var t=(this.context.$bs_panel||{}).onToggle;t&&t(e)},t.render=function render(){var e=this.props,t=e.onClick,r=e.className,o=e.componentClass,a=(0,_objectWithoutPropertiesLoose2.default)(e,["onClick","className","componentClass"]),l=this.context.$bs_panel||{},n=l.expanded,s=l.bodyId,i=o;return a.onClick=(0,_createChainedFunction.default)(t,this.handleToggle),a["aria-expanded"]=n,a.className=(0,_classnames.default)(r,!n&&"collapsed"),s&&(a["aria-controls"]=s),_react.default.createElement(i,a)},PanelToggle}(_react.default.Component);PanelToggle.propTypes=propTypes,PanelToggle.defaultProps=defaultProps,PanelToggle.contextTypes=contextTypes;var _default=PanelToggle;exports.default=_default,module.exports=exports.default;

},{"./SafeAnchor":578,"./utils/createChainedFunction":598,"@babel/runtime-corejs2/helpers/assertThisInitialized":11,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"react":777,"react-prop-types/lib/elementType":748}],573:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends3=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_isRequiredForA11y=_interopRequireDefault(require("prop-types-extra/lib/isRequiredForA11y")),_bootstrapUtils=require("./utils/bootstrapUtils"),propTypes={id:(0,_isRequiredForA11y.default)(_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.number])),placement:_propTypes.default.oneOf(["top","right","bottom","left"]),positionTop:_propTypes.default.oneOfType([_propTypes.default.number,_propTypes.default.string]),positionLeft:_propTypes.default.oneOfType([_propTypes.default.number,_propTypes.default.string]),arrowOffsetTop:_propTypes.default.oneOfType([_propTypes.default.number,_propTypes.default.string]),arrowOffsetLeft:_propTypes.default.oneOfType([_propTypes.default.number,_propTypes.default.string]),title:_propTypes.default.node},defaultProps={placement:"right"},Popover=function(e){function Popover(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(Popover,e),Popover.prototype.render=function render(){var e,t=this.props,r=t.placement,o=t.positionTop,p=t.positionLeft,s=t.arrowOffsetTop,a=t.arrowOffsetLeft,l=t.title,i=t.className,u=t.style,f=t.children,n=(0,_objectWithoutPropertiesLoose2.default)(t,["placement","positionTop","positionLeft","arrowOffsetTop","arrowOffsetLeft","title","className","style","children"]),d=(0,_bootstrapUtils.splitBsProps)(n),_=d[0],c=d[1],y=(0,_extends3.default)({},(0,_bootstrapUtils.getClassSet)(_),((e={})[r]=!0,e)),T=(0,_extends3.default)({display:"block",top:o,left:p},u),m={top:s,left:a};return _react.default.createElement("div",(0,_extends3.default)({},c,{role:"tooltip",className:(0,_classnames.default)(i,y),style:T}),_react.default.createElement("div",{className:"arrow",style:m}),l&&_react.default.createElement("h3",{className:(0,_bootstrapUtils.prefix)(_,"title")},l),_react.default.createElement("div",{className:(0,_bootstrapUtils.prefix)(_,"content")},f))},Popover}(_react.default.Component);Popover.propTypes=propTypes,Popover.defaultProps=defaultProps;var _default=(0,_bootstrapUtils.bsClass)("popover",Popover);exports.default=_default,module.exports=exports.default;

},{"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"prop-types-extra/lib/isRequiredForA11y":489,"react":777}],574:[function(require,module,exports){
"use strict";var _interopRequireWildcard=require("@babel/runtime-corejs2/helpers/interopRequireWildcard"),_interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _values=_interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/values")),_extends3=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireWildcard(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_bootstrapUtils=require("./utils/bootstrapUtils"),_StyleConfig=require("./utils/StyleConfig"),_ValidComponentChildren=_interopRequireDefault(require("./utils/ValidComponentChildren")),ROUND_PRECISION=1e3;function onlyProgressBar(e,r,t){var s=e[r];if(!s)return null;var a=null;return _react.default.Children.forEach(s,function(e){if(!a){var r=_react.default.createElement(ProgressBar,null);if(e.type!==r.type){var s=_react.default.isValidElement(e)?e.type.displayName||e.type.name||e.type:e;a=new Error("Children of "+t+" can contain only ProgressBar components. Found "+s+".")}}}),a}var propTypes={min:_propTypes.default.number,now:_propTypes.default.number,max:_propTypes.default.number,label:_propTypes.default.node,srOnly:_propTypes.default.bool,striped:_propTypes.default.bool,active:_propTypes.default.bool,children:onlyProgressBar,isChild:_propTypes.default.bool},defaultProps={min:0,max:100,active:!1,isChild:!1,srOnly:!1,striped:!1};function getPercentage(e,r,t){var s=(e-r)/(t-r)*100;return Math.round(s*ROUND_PRECISION)/ROUND_PRECISION}var ProgressBar=function(e){function ProgressBar(){return e.apply(this,arguments)||this}(0,_inheritsLoose2.default)(ProgressBar,e);var r=ProgressBar.prototype;return r.renderProgressBar=function renderProgressBar(e){var r,t=e.min,s=e.now,a=e.max,l=e.label,o=e.srOnly,i=e.striped,n=e.active,u=e.className,p=e.style,d=(0,_objectWithoutPropertiesLoose2.default)(e,["min","now","max","label","srOnly","striped","active","className","style"]),c=(0,_bootstrapUtils.splitBsProps)(d),f=c[0],_=c[1],m=(0,_extends3.default)({},(0,_bootstrapUtils.getClassSet)(f),((r={active:n})[(0,_bootstrapUtils.prefix)(f,"striped")]=n||i,r));return _react.default.createElement("div",(0,_extends3.default)({},_,{role:"progressbar",className:(0,_classnames.default)(u,m),style:(0,_extends3.default)({width:getPercentage(s,t,a)+"%"},p),"aria-valuenow":s,"aria-valuemin":t,"aria-valuemax":a}),o?_react.default.createElement("span",{className:"sr-only"},l):l)},r.render=function render(){var e=this.props,r=e.isChild,t=(0,_objectWithoutPropertiesLoose2.default)(e,["isChild"]);if(r)return this.renderProgressBar(t);var s=t.min,a=t.now,l=t.max,o=t.label,i=t.srOnly,n=t.striped,u=t.active,p=t.bsClass,d=t.bsStyle,c=t.className,f=t.children,_=(0,_objectWithoutPropertiesLoose2.default)(t,["min","now","max","label","srOnly","striped","active","bsClass","bsStyle","className","children"]);return _react.default.createElement("div",(0,_extends3.default)({},_,{className:(0,_classnames.default)(c,"progress")}),f?_ValidComponentChildren.default.map(f,function(e){return(0,_react.cloneElement)(e,{isChild:!0})}):this.renderProgressBar({min:s,now:a,max:l,label:o,srOnly:i,striped:n,active:u,bsClass:p,bsStyle:d}))},ProgressBar}(_react.default.Component);ProgressBar.propTypes=propTypes,ProgressBar.defaultProps=defaultProps;var _default=(0,_bootstrapUtils.bsClass)("progress-bar",(0,_bootstrapUtils.bsStyles)((0,_values.default)(_StyleConfig.State),ProgressBar));exports.default=_default,module.exports=exports.default;

},{"./utils/StyleConfig":594,"./utils/ValidComponentChildren":595,"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/core-js/object/values":9,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/interopRequireWildcard":15,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"react":777}],575:[function(require,module,exports){
(function (process){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_warning=_interopRequireDefault(require("warning")),_bootstrapUtils=require("./utils/bootstrapUtils"),propTypes={inline:_propTypes.default.bool,disabled:_propTypes.default.bool,title:_propTypes.default.string,validationState:_propTypes.default.oneOf(["success","warning","error",null]),inputRef:_propTypes.default.func},defaultProps={inline:!1,disabled:!1,title:""},Radio=function(e){function Radio(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(Radio,e),Radio.prototype.render=function render(){var e=this.props,t=e.inline,r=e.disabled,a=e.validationState,i=e.inputRef,s=e.className,o=e.style,l=e.title,n=e.children,p=(0,_objectWithoutPropertiesLoose2.default)(e,["inline","disabled","validationState","inputRef","className","style","title","children"]),u=(0,_bootstrapUtils.splitBsProps)(p),d=u[0],f=u[1],_=_react.default.createElement("input",(0,_extends2.default)({},f,{ref:i,type:"radio",disabled:r}));if(t){var c,b=((c={})[(0,_bootstrapUtils.prefix)(d,"inline")]=!0,c.disabled=r,c);return"production"!==process.env.NODE_ENV&&(0,_warning.default)(!a,"`validationState` is ignored on `<Radio inline>`. To display validation state on an inline radio, set `validationState` on a parent `<FormGroup>` or other element instead."),_react.default.createElement("label",{className:(0,_classnames.default)(s,b),style:o,title:l},_,n)}var R=(0,_extends2.default)({},(0,_bootstrapUtils.getClassSet)(d),{disabled:r});return a&&(R["has-"+a]=!0),_react.default.createElement("div",{className:(0,_classnames.default)(s,R),style:o},_react.default.createElement("label",{title:l},_,n))},Radio}(_react.default.Component);Radio.propTypes=propTypes,Radio.defaultProps=defaultProps;var _default=(0,_bootstrapUtils.bsClass)("radio",Radio);exports.default=_default,module.exports=exports.default;

}).call(this,require('_process'))

},{"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"_process":484,"classnames":19,"prop-types":495,"react":777,"warning":780}],576:[function(require,module,exports){
(function (process){
"use strict";var _interopRequireWildcard=require("@babel/runtime-corejs2/helpers/interopRequireWildcard"),_interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends3=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireWildcard(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_warning=_interopRequireDefault(require("warning")),_bootstrapUtils=require("./utils/bootstrapUtils"),propTypes={children:_propTypes.default.element.isRequired,a16by9:_propTypes.default.bool,a4by3:_propTypes.default.bool},defaultProps={a16by9:!1,a4by3:!1},ResponsiveEmbed=function(e){function ResponsiveEmbed(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(ResponsiveEmbed,e),ResponsiveEmbed.prototype.render=function render(){var e,r=this.props,t=r.a16by9,s=r.a4by3,o=r.className,i=r.children,a=(0,_objectWithoutPropertiesLoose2.default)(r,["a16by9","a4by3","className","children"]),p=(0,_bootstrapUtils.splitBsProps)(a),l=p[0],u=p[1];"production"!==process.env.NODE_ENV&&(0,_warning.default)(t||s,"Either `a16by9` or `a4by3` must be set."),"production"!==process.env.NODE_ENV&&(0,_warning.default)(!(t&&s),"Only one of `a16by9` or `a4by3` can be set.");var n=(0,_extends3.default)({},(0,_bootstrapUtils.getClassSet)(l),((e={})[(0,_bootstrapUtils.prefix)(l,"16by9")]=t,e[(0,_bootstrapUtils.prefix)(l,"4by3")]=s,e));return _react.default.createElement("div",{className:(0,_classnames.default)(n)},(0,_react.cloneElement)(i,(0,_extends3.default)({},u,{className:(0,_classnames.default)(o,(0,_bootstrapUtils.prefix)(l,"item"))})))},ResponsiveEmbed}(_react.default.Component);ResponsiveEmbed.propTypes=propTypes,ResponsiveEmbed.defaultProps=defaultProps;var _default=(0,_bootstrapUtils.bsClass)("embed-responsive",ResponsiveEmbed);exports.default=_default,module.exports=exports.default;

}).call(this,require('_process'))

},{"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/interopRequireWildcard":15,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"_process":484,"classnames":19,"prop-types":495,"react":777,"warning":780}],577:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_elementType=_interopRequireDefault(require("prop-types-extra/lib/elementType")),_bootstrapUtils=require("./utils/bootstrapUtils"),propTypes={componentClass:_elementType.default},defaultProps={componentClass:"div"},Row=function(e){function Row(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(Row,e),Row.prototype.render=function render(){var e=this.props,t=e.componentClass,r=e.className,o=(0,_objectWithoutPropertiesLoose2.default)(e,["componentClass","className"]),s=(0,_bootstrapUtils.splitBsProps)(o),a=s[0],l=s[1],i=(0,_bootstrapUtils.getClassSet)(a);return _react.default.createElement(t,(0,_extends2.default)({},l,{className:(0,_classnames.default)(r,i)}))},Row}(_react.default.Component);Row.propTypes=propTypes,Row.defaultProps=defaultProps;var _default=(0,_bootstrapUtils.bsClass)("row",Row);exports.default=_default,module.exports=exports.default;

},{"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types-extra/lib/elementType":488,"react":777}],578:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_assertThisInitialized2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_elementType=_interopRequireDefault(require("prop-types-extra/lib/elementType")),_createChainedFunction=_interopRequireDefault(require("./utils/createChainedFunction")),propTypes={href:_propTypes.default.string,onClick:_propTypes.default.func,onKeyDown:_propTypes.default.func,disabled:_propTypes.default.bool,role:_propTypes.default.string,tabIndex:_propTypes.default.oneOfType([_propTypes.default.number,_propTypes.default.string]),componentClass:_elementType.default},defaultProps={componentClass:"a"};function isTrivialHref(e){return!e||"#"===e.trim()}var SafeAnchor=function(e){function SafeAnchor(r,t){var i;return(i=e.call(this,r,t)||this).handleClick=i.handleClick.bind((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(i))),i.handleKeyDown=i.handleKeyDown.bind((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(i))),i}(0,_inheritsLoose2.default)(SafeAnchor,e);var r=SafeAnchor.prototype;return r.handleClick=function handleClick(e){var r=this.props,t=r.disabled,i=r.href,n=r.onClick;(t||isTrivialHref(i))&&e.preventDefault(),t?e.stopPropagation():n&&n(e)},r.handleKeyDown=function handleKeyDown(e){" "===e.key&&(e.preventDefault(),this.handleClick(e))},r.render=function render(){var e=this.props,r=e.componentClass,t=e.disabled,i=e.onKeyDown,n=(0,_objectWithoutPropertiesLoose2.default)(e,["componentClass","disabled","onKeyDown"]);return isTrivialHref(n.href)&&(n.role=n.role||"button",n.href=n.href||"#"),t&&(n.tabIndex=-1,n.style=(0,_extends2.default)({pointerEvents:"none"},n.style)),_react.default.createElement(r,(0,_extends2.default)({},n,{onClick:this.handleClick,onKeyDown:(0,_createChainedFunction.default)(this.handleKeyDown,i)}))},SafeAnchor}(_react.default.Component);SafeAnchor.propTypes=propTypes,SafeAnchor.defaultProps=defaultProps;var _default=SafeAnchor;exports.default=_default,module.exports=exports.default;

},{"./utils/createChainedFunction":598,"@babel/runtime-corejs2/helpers/assertThisInitialized":11,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"prop-types":495,"prop-types-extra/lib/elementType":488,"react":777}],579:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_Button=_interopRequireDefault(require("./Button")),_Dropdown=_interopRequireDefault(require("./Dropdown")),_SplitToggle=_interopRequireDefault(require("./SplitToggle")),_splitComponentProps2=_interopRequireDefault(require("./utils/splitComponentProps")),propTypes=(0,_extends2.default)({},_Dropdown.default.propTypes,{bsStyle:_propTypes.default.string,bsSize:_propTypes.default.string,href:_propTypes.default.string,onClick:_propTypes.default.func,title:_propTypes.default.node.isRequired,toggleLabel:_propTypes.default.string,children:_propTypes.default.node}),SplitButton=function(e){function SplitButton(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(SplitButton,e),SplitButton.prototype.render=function render(){var e=this.props,t=e.bsSize,r=e.bsStyle,o=e.title,l=e.toggleLabel,p=e.children,i=(0,_objectWithoutPropertiesLoose2.default)(e,["bsSize","bsStyle","title","toggleLabel","children"]),u=(0,_splitComponentProps2.default)(i,_Dropdown.default.ControlledComponent),n=u[0],s=u[1];return _react.default.createElement(_Dropdown.default,(0,_extends2.default)({},n,{bsSize:t,bsStyle:r}),_react.default.createElement(_Button.default,(0,_extends2.default)({},s,{disabled:i.disabled,bsSize:t,bsStyle:r}),o),_react.default.createElement(_SplitToggle.default,{"aria-label":l||o,bsSize:t,bsStyle:r}),_react.default.createElement(_Dropdown.default.Menu,null,p))},SplitButton}(_react.default.Component);SplitButton.propTypes=propTypes,SplitButton.Toggle=_SplitToggle.default;var _default=SplitButton;exports.default=_default,module.exports=exports.default;

},{"./Button":502,"./Dropdown":514,"./SplitToggle":580,"./utils/splitComponentProps":601,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"prop-types":495,"react":777}],580:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_react=_interopRequireDefault(require("react")),_DropdownToggle=_interopRequireDefault(require("./DropdownToggle")),SplitToggle=function(e){function SplitToggle(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(SplitToggle,e),SplitToggle.prototype.render=function render(){return _react.default.createElement(_DropdownToggle.default,(0,_extends2.default)({},this.props,{useAnchor:!1,noCaret:!1}))},SplitToggle}(_react.default.Component);SplitToggle.defaultProps=_DropdownToggle.default.defaultProps;var _default=SplitToggle;exports.default=_default,module.exports=exports.default;

},{"./DropdownToggle":517,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"react":777}],581:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_TabContainer=_interopRequireDefault(require("./TabContainer")),_TabContent=_interopRequireDefault(require("./TabContent")),_TabPane=_interopRequireDefault(require("./TabPane")),propTypes=(0,_extends2.default)({},_TabPane.default.propTypes,{disabled:_propTypes.default.bool,title:_propTypes.default.node,tabClassName:_propTypes.default.string}),Tab=function(e){function Tab(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(Tab,e),Tab.prototype.render=function render(){var e=(0,_extends2.default)({},this.props);return delete e.title,delete e.disabled,delete e.tabClassName,_react.default.createElement(_TabPane.default,e)},Tab}(_react.default.Component);Tab.propTypes=propTypes,Tab.Container=_TabContainer.default,Tab.Content=_TabContent.default,Tab.Pane=_TabPane.default;var _default=Tab;exports.default=_default,module.exports=exports.default;

},{"./TabContainer":582,"./TabContent":583,"./TabPane":584,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"prop-types":495,"react":777}],582:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_uncontrollable=_interopRequireDefault(require("uncontrollable")),TAB="tab",PANE="pane",idPropType=_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.number]),propTypes={id:function id(e){var t=null;if(!e.generateChildId){for(var r=arguments.length,n=new Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];(t=idPropType.apply(void 0,[e].concat(n)))||e.id||(t=new Error("In order to properly initialize Tabs in a way that is accessible to assistive technologies (such as screen readers) an `id` or a `generateChildId` prop to TabContainer is required"))}return t},generateChildId:_propTypes.default.func,onSelect:_propTypes.default.func,activeKey:_propTypes.default.any},childContextTypes={$bs_tabContainer:_propTypes.default.shape({activeKey:_propTypes.default.any,onSelect:_propTypes.default.func.isRequired,getTabId:_propTypes.default.func.isRequired,getPaneId:_propTypes.default.func.isRequired})},TabContainer=function(e){function TabContainer(){return e.apply(this,arguments)||this}(0,_inheritsLoose2.default)(TabContainer,e);var t=TabContainer.prototype;return t.getChildContext=function getChildContext(){var e=this.props,t=e.activeKey,r=e.onSelect,n=e.generateChildId,o=e.id,a=n||function(e,t){return o?o+"-"+t+"-"+e:null};return{$bs_tabContainer:{activeKey:t,onSelect:r,getTabId:function getTabId(e){return a(e,TAB)},getPaneId:function getPaneId(e){return a(e,PANE)}}}},t.render=function render(){var e=this.props,t=e.children,r=(0,_objectWithoutPropertiesLoose2.default)(e,["children"]);return delete r.generateChildId,delete r.onSelect,delete r.activeKey,_react.default.cloneElement(_react.default.Children.only(t),r)},TabContainer}(_react.default.Component);TabContainer.propTypes=propTypes,TabContainer.childContextTypes=childContextTypes;var _default=(0,_uncontrollable.default)(TabContainer,{activeKey:"onSelect"});exports.default=_default,module.exports=exports.default;

},{"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"prop-types":495,"react":777,"uncontrollable":778}],583:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_assertThisInitialized2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_elementType=_interopRequireDefault(require("prop-types-extra/lib/elementType")),_bootstrapUtils=require("./utils/bootstrapUtils"),propTypes={componentClass:_elementType.default,animation:_propTypes.default.oneOfType([_propTypes.default.bool,_elementType.default]),mountOnEnter:_propTypes.default.bool,unmountOnExit:_propTypes.default.bool},defaultProps={componentClass:"div",animation:!0,mountOnEnter:!1,unmountOnExit:!1},contextTypes={$bs_tabContainer:_propTypes.default.shape({activeKey:_propTypes.default.any})},childContextTypes={$bs_tabContent:_propTypes.default.shape({bsClass:_propTypes.default.string,animation:_propTypes.default.oneOfType([_propTypes.default.bool,_elementType.default]),activeKey:_propTypes.default.any,mountOnEnter:_propTypes.default.bool,unmountOnExit:_propTypes.default.bool,onPaneEnter:_propTypes.default.func.isRequired,onPaneExited:_propTypes.default.func.isRequired,exiting:_propTypes.default.bool.isRequired})},TabContent=function(e){function TabContent(t,n){var i;return(i=e.call(this,t,n)||this).handlePaneEnter=i.handlePaneEnter.bind((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(i))),i.handlePaneExited=i.handlePaneExited.bind((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(i))),i.state={activeKey:null,activeChild:null},i}(0,_inheritsLoose2.default)(TabContent,e);var t=TabContent.prototype;return t.getChildContext=function getChildContext(){var e=this.props,t=e.bsClass,n=e.animation,i=e.mountOnEnter,a=e.unmountOnExit,o=this.state.activeKey,s=this.getContainerActiveKey(),r=null!=o&&o!==s;return{$bs_tabContent:{bsClass:t,animation:n,activeKey:null!=o?o:s,mountOnEnter:i,unmountOnExit:a,onPaneEnter:this.handlePaneEnter,onPaneExited:this.handlePaneExited,exiting:r}}},t.componentWillReceiveProps=function componentWillReceiveProps(e){!e.animation&&this.state.activeChild&&this.setState({activeKey:null,activeChild:null})},t.componentWillUnmount=function componentWillUnmount(){this.isUnmounted=!0},t.getContainerActiveKey=function getContainerActiveKey(){var e=this.context.$bs_tabContainer;return e&&e.activeKey},t.handlePaneEnter=function handlePaneEnter(e,t){return!!this.props.animation&&(t===this.getContainerActiveKey()&&(this.setState({activeKey:t,activeChild:e}),!0))},t.handlePaneExited=function handlePaneExited(e){this.isUnmounted||this.setState(function(t){return t.activeChild!==e?null:{activeKey:null,activeChild:null}})},t.render=function render(){var e=this.props,t=e.componentClass,n=e.className,i=(0,_objectWithoutPropertiesLoose2.default)(e,["componentClass","className"]),a=(0,_bootstrapUtils.splitBsPropsAndOmit)(i,["animation","mountOnEnter","unmountOnExit"]),o=a[0],s=a[1];return _react.default.createElement(t,(0,_extends2.default)({},s,{className:(0,_classnames.default)(n,(0,_bootstrapUtils.prefix)(o,"content"))}))},TabContent}(_react.default.Component);TabContent.propTypes=propTypes,TabContent.defaultProps=defaultProps,TabContent.contextTypes=contextTypes,TabContent.childContextTypes=childContextTypes;var _default=(0,_bootstrapUtils.bsClass)("tab",TabContent);exports.default=_default,module.exports=exports.default;

},{"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/assertThisInitialized":11,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"prop-types-extra/lib/elementType":488,"react":777}],584:[function(require,module,exports){
(function (process){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_assertThisInitialized2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_elementType=_interopRequireDefault(require("prop-types-extra/lib/elementType")),_warning=_interopRequireDefault(require("warning")),_bootstrapUtils=require("./utils/bootstrapUtils"),_createChainedFunction=_interopRequireDefault(require("./utils/createChainedFunction")),_Fade=_interopRequireDefault(require("./Fade")),propTypes={eventKey:_propTypes.default.any,animation:_propTypes.default.oneOfType([_propTypes.default.bool,_elementType.default]),id:_propTypes.default.string,"aria-labelledby":_propTypes.default.string,bsClass:_propTypes.default.string,onEnter:_propTypes.default.func,onEntering:_propTypes.default.func,onEntered:_propTypes.default.func,onExit:_propTypes.default.func,onExiting:_propTypes.default.func,onExited:_propTypes.default.func,mountOnEnter:_propTypes.default.bool,unmountOnExit:_propTypes.default.bool},contextTypes={$bs_tabContainer:_propTypes.default.shape({getTabId:_propTypes.default.func,getPaneId:_propTypes.default.func}),$bs_tabContent:_propTypes.default.shape({bsClass:_propTypes.default.string,animation:_propTypes.default.oneOfType([_propTypes.default.bool,_elementType.default]),activeKey:_propTypes.default.any,mountOnEnter:_propTypes.default.bool,unmountOnExit:_propTypes.default.bool,onPaneEnter:_propTypes.default.func.isRequired,onPaneExited:_propTypes.default.func.isRequired,exiting:_propTypes.default.bool.isRequired})},childContextTypes={$bs_tabContainer:_propTypes.default.oneOf([null])},TabPane=function(e){function TabPane(t,n){var i;return(i=e.call(this,t,n)||this).handleEnter=i.handleEnter.bind((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(i))),i.handleExited=i.handleExited.bind((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(i))),i.in=!1,i}(0,_inheritsLoose2.default)(TabPane,e);var t=TabPane.prototype;return t.getChildContext=function getChildContext(){return{$bs_tabContainer:null}},t.componentDidMount=function componentDidMount(){this.shouldBeIn()&&this.handleEnter()},t.componentDidUpdate=function componentDidUpdate(){this.in?this.shouldBeIn()||this.handleExited():this.shouldBeIn()&&this.handleEnter()},t.componentWillUnmount=function componentWillUnmount(){this.in&&this.handleExited()},t.getAnimation=function getAnimation(){if(null!=this.props.animation)return this.props.animation;var e=this.context.$bs_tabContent;return e&&e.animation},t.handleEnter=function handleEnter(){var e=this.context.$bs_tabContent;e&&(this.in=e.onPaneEnter(this,this.props.eventKey))},t.handleExited=function handleExited(){var e=this.context.$bs_tabContent;e&&(e.onPaneExited(this),this.in=!1)},t.isActive=function isActive(){var e=this.context.$bs_tabContent,t=e&&e.activeKey;return this.props.eventKey===t},t.shouldBeIn=function shouldBeIn(){return this.getAnimation()&&this.isActive()},t.render=function render(){var e=this.props,t=e.eventKey,n=e.className,i=e.onEnter,a=e.onEntering,o=e.onEntered,r=e.onExit,s=e.onExiting,p=e.onExited,l=e.mountOnEnter,u=e.unmountOnExit,d=(0,_objectWithoutPropertiesLoose2.default)(e,["eventKey","className","onEnter","onEntering","onEntered","onExit","onExiting","onExited","mountOnEnter","unmountOnExit"]),f=this.context,_=f.$bs_tabContent,c=f.$bs_tabContainer,h=(0,_bootstrapUtils.splitBsPropsAndOmit)(d,["animation"]),b=h[0],T=h[1],y=this.isActive(),E=this.getAnimation(),x=null!=l?l:_&&_.mountOnEnter,m=null!=u?u:_&&_.unmountOnExit;if(!y&&!E&&m)return null;var g=!0===E?_Fade.default:E||null;_&&(b.bsClass=(0,_bootstrapUtils.prefix)(_,"pane"));var v=(0,_extends2.default)({},(0,_bootstrapUtils.getClassSet)(b),{active:y});c&&("production"!==process.env.NODE_ENV&&(0,_warning.default)(!T.id&&!T["aria-labelledby"],"In the context of a `<TabContainer>`, `<TabPanes>` are given generated `id` and `aria-labelledby` attributes for the sake of proper component accessibility. Any provided ones will be ignored. To control these attributes directly provide a `generateChildId` prop to the parent `<TabContainer>`."),T.id=c.getPaneId(t),T["aria-labelledby"]=c.getTabId(t));var C=_react.default.createElement("div",(0,_extends2.default)({},T,{role:"tabpanel","aria-hidden":!y,className:(0,_classnames.default)(n,v)}));if(g){var q=_&&_.exiting;return _react.default.createElement(g,{in:y&&!q,onEnter:(0,_createChainedFunction.default)(this.handleEnter,i),onEntering:a,onEntered:o,onExit:r,onExiting:s,onExited:(0,_createChainedFunction.default)(this.handleExited,p),mountOnEnter:x,unmountOnExit:m},C)}return C},TabPane}(_react.default.Component);TabPane.propTypes=propTypes,TabPane.contextTypes=contextTypes,TabPane.childContextTypes=childContextTypes;var _default=(0,_bootstrapUtils.bsClass)("tab-pane",TabPane);exports.default=_default,module.exports=exports.default;

}).call(this,require('_process'))

},{"./Fade":518,"./utils/bootstrapUtils":596,"./utils/createChainedFunction":598,"@babel/runtime-corejs2/helpers/assertThisInitialized":11,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"_process":484,"classnames":19,"prop-types":495,"prop-types-extra/lib/elementType":488,"react":777,"warning":780}],585:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends3=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_bootstrapUtils=require("./utils/bootstrapUtils"),propTypes={striped:_propTypes.default.bool,bordered:_propTypes.default.bool,condensed:_propTypes.default.bool,hover:_propTypes.default.bool,responsive:_propTypes.default.bool},defaultProps={bordered:!1,condensed:!1,hover:!1,responsive:!1,striped:!1},Table=function(e){function Table(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(Table,e),Table.prototype.render=function render(){var e,r=this.props,t=r.striped,s=r.bordered,o=r.condensed,p=r.hover,a=r.responsive,l=r.className,i=(0,_objectWithoutPropertiesLoose2.default)(r,["striped","bordered","condensed","hover","responsive","className"]),u=(0,_bootstrapUtils.splitBsProps)(i),d=u[0],n=u[1],b=(0,_extends3.default)({},(0,_bootstrapUtils.getClassSet)(d),((e={})[(0,_bootstrapUtils.prefix)(d,"striped")]=t,e[(0,_bootstrapUtils.prefix)(d,"bordered")]=s,e[(0,_bootstrapUtils.prefix)(d,"condensed")]=o,e[(0,_bootstrapUtils.prefix)(d,"hover")]=p,e)),_=_react.default.createElement("table",(0,_extends3.default)({},n,{className:(0,_classnames.default)(l,b)}));return a?_react.default.createElement("div",{className:(0,_bootstrapUtils.prefix)(d,"responsive")},_):_},Table}(_react.default.Component);Table.propTypes=propTypes,Table.defaultProps=defaultProps;var _default=(0,_bootstrapUtils.bsClass)("table",Table);exports.default=_default,module.exports=exports.default;

},{"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"react":777}],586:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_isRequiredForA11y=_interopRequireDefault(require("prop-types-extra/lib/isRequiredForA11y")),_uncontrollable=_interopRequireDefault(require("uncontrollable")),_elementType=_interopRequireDefault(require("prop-types-extra/lib/elementType")),_Nav=_interopRequireDefault(require("./Nav")),_NavItem=_interopRequireDefault(require("./NavItem")),_TabContainer=_interopRequireDefault(require("./TabContainer")),_TabContent=_interopRequireDefault(require("./TabContent")),_bootstrapUtils=require("./utils/bootstrapUtils"),_ValidComponentChildren=_interopRequireDefault(require("./utils/ValidComponentChildren")),TabContainer=_TabContainer.default.ControlledComponent,propTypes={activeKey:_propTypes.default.any,bsStyle:_propTypes.default.oneOf(["tabs","pills"]),animation:_propTypes.default.oneOfType([_propTypes.default.bool,_elementType.default]),id:(0,_isRequiredForA11y.default)(_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.number])),onSelect:_propTypes.default.func,mountOnEnter:_propTypes.default.bool,unmountOnExit:_propTypes.default.bool},defaultProps={bsStyle:"tabs",animation:!0,mountOnEnter:!1,unmountOnExit:!1};function getDefaultActiveKey(e){var t;return _ValidComponentChildren.default.forEach(e,function(e){null==t&&(t=e.props.eventKey)}),t}var Tabs=function(e){function Tabs(){return e.apply(this,arguments)||this}(0,_inheritsLoose2.default)(Tabs,e);var t=Tabs.prototype;return t.renderTab=function renderTab(e){var t=e.props,r=t.title,a=t.eventKey,n=t.disabled,o=t.tabClassName;return null==r?null:_react.default.createElement(_NavItem.default,{eventKey:a,disabled:n,className:o},r)},t.render=function render(){var e=this.props,t=e.id,r=e.onSelect,a=e.animation,n=e.mountOnEnter,o=e.unmountOnExit,l=e.bsClass,i=e.className,u=e.style,s=e.children,p=e.activeKey,d=void 0===p?getDefaultActiveKey(s):p,f=(0,_objectWithoutPropertiesLoose2.default)(e,["id","onSelect","animation","mountOnEnter","unmountOnExit","bsClass","className","style","children","activeKey"]);return _react.default.createElement(TabContainer,{id:t,activeKey:d,onSelect:r,className:i,style:u},_react.default.createElement("div",null,_react.default.createElement(_Nav.default,(0,_extends2.default)({},f,{role:"tablist"}),_ValidComponentChildren.default.map(s,this.renderTab)),_react.default.createElement(_TabContent.default,{bsClass:l,animation:a,mountOnEnter:n,unmountOnExit:o},s)))},Tabs}(_react.default.Component);Tabs.propTypes=propTypes,Tabs.defaultProps=defaultProps,(0,_bootstrapUtils.bsClass)("tab",Tabs);var _default=(0,_uncontrollable.default)(Tabs,{activeKey:"onSelect"});exports.default=_default,module.exports=exports.default;

},{"./Nav":549,"./NavItem":551,"./TabContainer":582,"./TabContent":583,"./utils/ValidComponentChildren":595,"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"prop-types":495,"prop-types-extra/lib/elementType":488,"prop-types-extra/lib/isRequiredForA11y":489,"react":777,"uncontrollable":778}],587:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_SafeAnchor=_interopRequireDefault(require("./SafeAnchor")),_bootstrapUtils=require("./utils/bootstrapUtils"),propTypes={src:_propTypes.default.string,alt:_propTypes.default.string,href:_propTypes.default.string,onError:_propTypes.default.func,onLoad:_propTypes.default.func},Thumbnail=function(e){function Thumbnail(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(Thumbnail,e),Thumbnail.prototype.render=function render(){var e=this.props,r=e.src,t=e.alt,o=e.onError,s=e.onLoad,a=e.className,i=e.children,u=(0,_objectWithoutPropertiesLoose2.default)(e,["src","alt","onError","onLoad","className","children"]),l=(0,_bootstrapUtils.splitBsProps)(u),p=l[0],n=l[1],c=n.href?_SafeAnchor.default:"div",f=(0,_bootstrapUtils.getClassSet)(p);return _react.default.createElement(c,(0,_extends2.default)({},n,{className:(0,_classnames.default)(a,f)}),_react.default.createElement("img",{src:r,alt:t,onError:o,onLoad:s}),i&&_react.default.createElement("div",{className:"caption"},i))},Thumbnail}(_react.default.Component);Thumbnail.propTypes=propTypes;var _default=(0,_bootstrapUtils.bsClass)("thumbnail",Thumbnail);exports.default=_default,module.exports=exports.default;

},{"./SafeAnchor":578,"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"react":777}],588:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_propTypes=_interopRequireDefault(require("prop-types")),_react=_interopRequireDefault(require("react")),_Button=_interopRequireDefault(require("./Button")),propTypes={type:_propTypes.default.oneOf(["checkbox","radio"]),name:_propTypes.default.string,checked:_propTypes.default.bool,disabled:_propTypes.default.bool,onChange:_propTypes.default.func,value:_propTypes.default.any.isRequired},ToggleButton=function(e){function ToggleButton(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(ToggleButton,e),ToggleButton.prototype.render=function render(){var e=this.props,t=e.children,r=e.name,o=e.checked,u=e.type,p=e.onChange,n=e.value,a=(0,_objectWithoutPropertiesLoose2.default)(e,["children","name","checked","type","onChange","value"]),l=a.disabled;return _react.default.createElement(_Button.default,(0,_extends2.default)({},a,{active:!!o,componentClass:"label"}),_react.default.createElement("input",{name:r,type:u,autoComplete:"off",value:n,checked:!!o,disabled:!!l,onChange:p}),t)},ToggleButton}(_react.default.Component);ToggleButton.propTypes=propTypes;var _default=ToggleButton;exports.default=_default,module.exports=exports.default;

},{"./Button":502,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"prop-types":495,"react":777}],589:[function(require,module,exports){
(function (process){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_propTypes=_interopRequireDefault(require("prop-types")),_react=_interopRequireDefault(require("react")),_invariant=_interopRequireDefault(require("invariant")),_uncontrollable=_interopRequireDefault(require("uncontrollable")),_createChainedFunction=_interopRequireDefault(require("./utils/createChainedFunction")),_ValidComponentChildren=_interopRequireDefault(require("./utils/ValidComponentChildren")),_ButtonGroup=_interopRequireDefault(require("./ButtonGroup")),_ToggleButton=_interopRequireDefault(require("./ToggleButton")),propTypes={name:_propTypes.default.string,value:_propTypes.default.any,onChange:_propTypes.default.func,type:_propTypes.default.oneOf(["checkbox","radio"]).isRequired},defaultProps={type:"radio"},ToggleButtonGroup=function(e){function ToggleButtonGroup(){return e.apply(this,arguments)||this}(0,_inheritsLoose2.default)(ToggleButtonGroup,e);var t=ToggleButtonGroup.prototype;return t.getValues=function getValues(){var e=this.props.value;return null==e?[]:[].concat(e)},t.handleToggle=function handleToggle(e){var t=this.props,r=t.type,o=t.onChange,n=this.getValues(),u=-1!==n.indexOf(e);"radio"!==r?o(u?n.filter(function(t){return t!==e}):n.concat([e])):u||o(e)},t.render=function render(){var e=this,t=this.props,r=t.children,o=t.type,n=t.name,u=(0,_objectWithoutPropertiesLoose2.default)(t,["children","type","name"]),a=this.getValues();return"radio"!==o||n||("production"!==process.env.NODE_ENV?(0,_invariant.default)(!1,'A `name` is required to group the toggle buttons when the `type` is set to "radio"'):invariant(!1)),delete u.onChange,delete u.value,_react.default.createElement(_ButtonGroup.default,(0,_extends2.default)({},u,{"data-toggle":"buttons"}),_ValidComponentChildren.default.map(r,function(t){var r=t.props,u=r.value,l=r.onChange;return _react.default.cloneElement(t,{type:o,name:t.name||n,checked:-1!==a.indexOf(u),onChange:(0,_createChainedFunction.default)(l,function handler(){return e.handleToggle(u)})})}))},ToggleButtonGroup}(_react.default.Component);ToggleButtonGroup.propTypes=propTypes,ToggleButtonGroup.defaultProps=defaultProps;var UncontrolledToggleButtonGroup=(0,_uncontrollable.default)(ToggleButtonGroup,{value:"onChange"});UncontrolledToggleButtonGroup.Button=_ToggleButton.default;var _default=UncontrolledToggleButtonGroup;exports.default=_default,module.exports=exports.default;

}).call(this,require('_process'))

},{"./ButtonGroup":503,"./ToggleButton":588,"./utils/ValidComponentChildren":595,"./utils/createChainedFunction":598,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"_process":484,"invariant":481,"prop-types":495,"react":777,"uncontrollable":778}],590:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends3=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_isRequiredForA11y=_interopRequireDefault(require("prop-types-extra/lib/isRequiredForA11y")),_bootstrapUtils=require("./utils/bootstrapUtils"),propTypes={id:(0,_isRequiredForA11y.default)(_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.number])),placement:_propTypes.default.oneOf(["top","right","bottom","left"]),positionTop:_propTypes.default.oneOfType([_propTypes.default.number,_propTypes.default.string]),positionLeft:_propTypes.default.oneOfType([_propTypes.default.number,_propTypes.default.string]),arrowOffsetTop:_propTypes.default.oneOfType([_propTypes.default.number,_propTypes.default.string]),arrowOffsetLeft:_propTypes.default.oneOfType([_propTypes.default.number,_propTypes.default.string])},defaultProps={placement:"right"},Tooltip=function(e){function Tooltip(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(Tooltip,e),Tooltip.prototype.render=function render(){var e,t=this.props,r=t.placement,o=t.positionTop,p=t.positionLeft,s=t.arrowOffsetTop,i=t.arrowOffsetLeft,l=t.className,a=t.style,u=t.children,f=(0,_objectWithoutPropertiesLoose2.default)(t,["placement","positionTop","positionLeft","arrowOffsetTop","arrowOffsetLeft","className","style","children"]),n=(0,_bootstrapUtils.splitBsProps)(f),d=n[0],_=n[1],T=(0,_extends3.default)({},(0,_bootstrapUtils.getClassSet)(d),((e={})[r]=!0,e)),y=(0,_extends3.default)({top:o,left:p},a),c={top:s,left:i};return _react.default.createElement("div",(0,_extends3.default)({},_,{role:"tooltip",className:(0,_classnames.default)(l,T),style:y}),_react.default.createElement("div",{className:(0,_bootstrapUtils.prefix)(d,"arrow"),style:c}),_react.default.createElement("div",{className:(0,_bootstrapUtils.prefix)(d,"inner")},u))},Tooltip}(_react.default.Component);Tooltip.propTypes=propTypes,Tooltip.defaultProps=defaultProps;var _default=(0,_bootstrapUtils.bsClass)("tooltip",Tooltip);exports.default=_default,module.exports=exports.default;

},{"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"prop-types":495,"prop-types-extra/lib/isRequiredForA11y":489,"react":777}],591:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose")),_inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_bootstrapUtils=require("./utils/bootstrapUtils"),_StyleConfig=require("./utils/StyleConfig"),Well=function(e){function Well(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(Well,e),Well.prototype.render=function render(){var e=this.props,t=e.className,r=(0,_objectWithoutPropertiesLoose2.default)(e,["className"]),s=(0,_bootstrapUtils.splitBsProps)(r),l=s[0],o=s[1],i=(0,_bootstrapUtils.getClassSet)(l);return _react.default.createElement("div",(0,_extends2.default)({},o,{className:(0,_classnames.default)(t,i)}))},Well}(_react.default.Component),_default=(0,_bootstrapUtils.bsClass)("well",(0,_bootstrapUtils.bsSizes)([_StyleConfig.Size.LARGE,_StyleConfig.Size.SMALL],Well));exports.default=_default,module.exports=exports.default;

},{"./utils/StyleConfig":594,"./utils/bootstrapUtils":596,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose":16,"classnames":19,"react":777}],592:[function(require,module,exports){
"use strict";var _interopRequireWildcard=require("@babel/runtime-corejs2/helpers/interopRequireWildcard"),_interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.utils=void 0;var _Accordion2=_interopRequireDefault(require("./Accordion"));exports.Accordion=_Accordion2.default;var _Alert2=_interopRequireDefault(require("./Alert"));exports.Alert=_Alert2.default;var _Badge2=_interopRequireDefault(require("./Badge"));exports.Badge=_Badge2.default;var _Breadcrumb2=_interopRequireDefault(require("./Breadcrumb"));exports.Breadcrumb=_Breadcrumb2.default;var _BreadcrumbItem2=_interopRequireDefault(require("./BreadcrumbItem"));exports.BreadcrumbItem=_BreadcrumbItem2.default;var _Button2=_interopRequireDefault(require("./Button"));exports.Button=_Button2.default;var _ButtonGroup2=_interopRequireDefault(require("./ButtonGroup"));exports.ButtonGroup=_ButtonGroup2.default;var _ButtonToolbar2=_interopRequireDefault(require("./ButtonToolbar"));exports.ButtonToolbar=_ButtonToolbar2.default;var _Carousel2=_interopRequireDefault(require("./Carousel"));exports.Carousel=_Carousel2.default;var _CarouselItem2=_interopRequireDefault(require("./CarouselItem"));exports.CarouselItem=_CarouselItem2.default;var _Checkbox2=_interopRequireDefault(require("./Checkbox"));exports.Checkbox=_Checkbox2.default;var _Clearfix2=_interopRequireDefault(require("./Clearfix"));exports.Clearfix=_Clearfix2.default;var _CloseButton2=_interopRequireDefault(require("./CloseButton"));exports.CloseButton=_CloseButton2.default;var _ControlLabel2=_interopRequireDefault(require("./ControlLabel"));exports.ControlLabel=_ControlLabel2.default;var _Col2=_interopRequireDefault(require("./Col"));exports.Col=_Col2.default;var _Collapse2=_interopRequireDefault(require("./Collapse"));exports.Collapse=_Collapse2.default;var _Dropdown2=_interopRequireDefault(require("./Dropdown"));exports.Dropdown=_Dropdown2.default;var _DropdownButton2=_interopRequireDefault(require("./DropdownButton"));exports.DropdownButton=_DropdownButton2.default;var _Fade2=_interopRequireDefault(require("./Fade"));exports.Fade=_Fade2.default;var _Form2=_interopRequireDefault(require("./Form"));exports.Form=_Form2.default;var _FormControl2=_interopRequireDefault(require("./FormControl"));exports.FormControl=_FormControl2.default;var _FormGroup2=_interopRequireDefault(require("./FormGroup"));exports.FormGroup=_FormGroup2.default;var _Glyphicon2=_interopRequireDefault(require("./Glyphicon"));exports.Glyphicon=_Glyphicon2.default;var _Grid2=_interopRequireDefault(require("./Grid"));exports.Grid=_Grid2.default;var _HelpBlock2=_interopRequireDefault(require("./HelpBlock"));exports.HelpBlock=_HelpBlock2.default;var _Image2=_interopRequireDefault(require("./Image"));exports.Image=_Image2.default;var _InputGroup2=_interopRequireDefault(require("./InputGroup"));exports.InputGroup=_InputGroup2.default;var _Jumbotron2=_interopRequireDefault(require("./Jumbotron"));exports.Jumbotron=_Jumbotron2.default;var _Label2=_interopRequireDefault(require("./Label"));exports.Label=_Label2.default;var _ListGroup2=_interopRequireDefault(require("./ListGroup"));exports.ListGroup=_ListGroup2.default;var _ListGroupItem2=_interopRequireDefault(require("./ListGroupItem"));exports.ListGroupItem=_ListGroupItem2.default;var _Media2=_interopRequireDefault(require("./Media"));exports.Media=_Media2.default;var _MenuItem2=_interopRequireDefault(require("./MenuItem"));exports.MenuItem=_MenuItem2.default;var _Modal2=_interopRequireDefault(require("./Modal"));exports.Modal=_Modal2.default;var _ModalBody2=_interopRequireDefault(require("./ModalBody"));exports.ModalBody=_ModalBody2.default;var _ModalDialog2=_interopRequireDefault(require("./ModalDialog"));exports.ModalDialog=_ModalDialog2.default;var _ModalFooter2=_interopRequireDefault(require("./ModalFooter"));exports.ModalFooter=_ModalFooter2.default;var _ModalHeader2=_interopRequireDefault(require("./ModalHeader"));exports.ModalHeader=_ModalHeader2.default;var _ModalTitle2=_interopRequireDefault(require("./ModalTitle"));exports.ModalTitle=_ModalTitle2.default;var _Nav2=_interopRequireDefault(require("./Nav"));exports.Nav=_Nav2.default;var _Navbar2=_interopRequireDefault(require("./Navbar"));exports.Navbar=_Navbar2.default;var _NavbarBrand2=_interopRequireDefault(require("./NavbarBrand"));exports.NavbarBrand=_NavbarBrand2.default;var _NavDropdown2=_interopRequireDefault(require("./NavDropdown"));exports.NavDropdown=_NavDropdown2.default;var _NavItem2=_interopRequireDefault(require("./NavItem"));exports.NavItem=_NavItem2.default;var _Overlay2=_interopRequireDefault(require("./Overlay"));exports.Overlay=_Overlay2.default;var _OverlayTrigger2=_interopRequireDefault(require("./OverlayTrigger"));exports.OverlayTrigger=_OverlayTrigger2.default;var _PageHeader2=_interopRequireDefault(require("./PageHeader"));exports.PageHeader=_PageHeader2.default;var _PageItem2=_interopRequireDefault(require("./PageItem"));exports.PageItem=_PageItem2.default;var _Pager2=_interopRequireDefault(require("./Pager"));exports.Pager=_Pager2.default;var _Pagination2=_interopRequireDefault(require("./Pagination"));exports.Pagination=_Pagination2.default;var _Panel2=_interopRequireDefault(require("./Panel"));exports.Panel=_Panel2.default;var _PanelGroup2=_interopRequireDefault(require("./PanelGroup"));exports.PanelGroup=_PanelGroup2.default;var _Popover2=_interopRequireDefault(require("./Popover"));exports.Popover=_Popover2.default;var _ProgressBar2=_interopRequireDefault(require("./ProgressBar"));exports.ProgressBar=_ProgressBar2.default;var _Radio2=_interopRequireDefault(require("./Radio"));exports.Radio=_Radio2.default;var _ResponsiveEmbed2=_interopRequireDefault(require("./ResponsiveEmbed"));exports.ResponsiveEmbed=_ResponsiveEmbed2.default;var _Row2=_interopRequireDefault(require("./Row"));exports.Row=_Row2.default;var _SafeAnchor2=_interopRequireDefault(require("./SafeAnchor"));exports.SafeAnchor=_SafeAnchor2.default;var _SplitButton2=_interopRequireDefault(require("./SplitButton"));exports.SplitButton=_SplitButton2.default;var _Tab2=_interopRequireDefault(require("./Tab"));exports.Tab=_Tab2.default;var _TabContainer2=_interopRequireDefault(require("./TabContainer"));exports.TabContainer=_TabContainer2.default;var _TabContent2=_interopRequireDefault(require("./TabContent"));exports.TabContent=_TabContent2.default;var _Table2=_interopRequireDefault(require("./Table"));exports.Table=_Table2.default;var _TabPane2=_interopRequireDefault(require("./TabPane"));exports.TabPane=_TabPane2.default;var _Tabs2=_interopRequireDefault(require("./Tabs"));exports.Tabs=_Tabs2.default;var _Thumbnail2=_interopRequireDefault(require("./Thumbnail"));exports.Thumbnail=_Thumbnail2.default;var _ToggleButton2=_interopRequireDefault(require("./ToggleButton"));exports.ToggleButton=_ToggleButton2.default;var _ToggleButtonGroup2=_interopRequireDefault(require("./ToggleButtonGroup"));exports.ToggleButtonGroup=_ToggleButtonGroup2.default;var _Tooltip2=_interopRequireDefault(require("./Tooltip"));exports.Tooltip=_Tooltip2.default;var _Well2=_interopRequireDefault(require("./Well"));exports.Well=_Well2.default;var _utils=_interopRequireWildcard(require("./utils"));exports.utils=_utils;

},{"./Accordion":497,"./Alert":498,"./Badge":499,"./Breadcrumb":500,"./BreadcrumbItem":501,"./Button":502,"./ButtonGroup":503,"./ButtonToolbar":504,"./Carousel":505,"./CarouselItem":507,"./Checkbox":508,"./Clearfix":509,"./CloseButton":510,"./Col":511,"./Collapse":512,"./ControlLabel":513,"./Dropdown":514,"./DropdownButton":515,"./Fade":518,"./Form":519,"./FormControl":520,"./FormGroup":523,"./Glyphicon":524,"./Grid":525,"./HelpBlock":526,"./Image":527,"./InputGroup":528,"./Jumbotron":531,"./Label":532,"./ListGroup":533,"./ListGroupItem":534,"./Media":535,"./MenuItem":542,"./Modal":543,"./ModalBody":544,"./ModalDialog":545,"./ModalFooter":546,"./ModalHeader":547,"./ModalTitle":548,"./Nav":549,"./NavDropdown":550,"./NavItem":551,"./Navbar":552,"./NavbarBrand":553,"./Overlay":557,"./OverlayTrigger":558,"./PageHeader":559,"./PageItem":560,"./Pager":561,"./Pagination":563,"./Panel":565,"./PanelGroup":569,"./Popover":573,"./ProgressBar":574,"./Radio":575,"./ResponsiveEmbed":576,"./Row":577,"./SafeAnchor":578,"./SplitButton":579,"./Tab":581,"./TabContainer":582,"./TabContent":583,"./TabPane":584,"./Table":585,"./Tabs":586,"./Thumbnail":587,"./ToggleButton":588,"./ToggleButtonGroup":589,"./Tooltip":590,"./Well":591,"./utils":600,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/interopRequireWildcard":15}],593:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.generatedId=generatedId,exports.requiredRoles=requiredRoles,exports.exclusiveRoles=exclusiveRoles;var _propTypes=_interopRequireDefault(require("prop-types")),_createChainableTypeChecker=_interopRequireDefault(require("prop-types-extra/lib/utils/createChainableTypeChecker")),_ValidComponentChildren=_interopRequireDefault(require("./ValidComponentChildren")),idPropType=_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.number]);function generatedId(e){return function(r){var n=null;if(!r.generateChildId){for(var t=arguments.length,i=new Array(t>1?t-1:0),o=1;o<t;o++)i[o-1]=arguments[o];(n=idPropType.apply(void 0,[r].concat(i)))||r.id||(n=new Error("In order to properly initialize the "+e+" in a way that is accessible to assistive technologies (such as screen readers) an `id` or a `generateChildId` prop to "+e+" is required"))}return n}}function requiredRoles(){for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return(0,_createChainableTypeChecker.default)(function(e,n,t){var i;return r.every(function(r){return!!_ValidComponentChildren.default.some(e.children,function(e){return e.props.bsRole===r})||(i=r,!1)}),i?new Error("(children) "+t+" - Missing a required child with bsRole: "+i+". "+t+" must have at least one child of each of the following bsRoles: "+r.join(", ")):null})}function exclusiveRoles(){for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return(0,_createChainableTypeChecker.default)(function(e,n,t){var i;return r.every(function(r){return!(_ValidComponentChildren.default.filter(e.children,function(e){return e.props.bsRole===r}).length>1)||(i=r,!1)}),i?new Error("(children) "+t+" - Duplicate children detected of bsRole: "+i+". Only one child each allowed with the following bsRoles: "+r.join(", ")):null})}

},{"./ValidComponentChildren":595,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"prop-types":495,"prop-types-extra/lib/utils/createChainableTypeChecker":490}],594:[function(require,module,exports){
"use strict";exports.__esModule=!0,exports.Style=exports.State=exports.DEVICE_SIZES=exports.SIZE_MAP=exports.Size=void 0;var Size={LARGE:"large",SMALL:"small",XSMALL:"xsmall"};exports.Size=Size;var SIZE_MAP={large:"lg",medium:"md",small:"sm",xsmall:"xs",lg:"lg",md:"md",sm:"sm",xs:"xs"};exports.SIZE_MAP=SIZE_MAP;var DEVICE_SIZES=["lg","md","sm","xs"];exports.DEVICE_SIZES=DEVICE_SIZES;var State={SUCCESS:"success",WARNING:"warning",DANGER:"danger",INFO:"info"};exports.State=State;var Style={DEFAULT:"default",PRIMARY:"primary",LINK:"link",INVERSE:"inverse"};exports.Style=Style;

},{}],595:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=void 0;var _react=_interopRequireDefault(require("react"));function map(e,r,t){var a=0;return _react.default.Children.map(e,function(e){return _react.default.isValidElement(e)?r.call(t,e,a++):e})}function forEach(e,r,t){var a=0;_react.default.Children.forEach(e,function(e){_react.default.isValidElement(e)&&r.call(t,e,a++)})}function count(e){var r=0;return _react.default.Children.forEach(e,function(e){_react.default.isValidElement(e)&&++r}),r}function filter(e,r,t){var a=0,l=[];return _react.default.Children.forEach(e,function(e){_react.default.isValidElement(e)&&r.call(t,e,a++)&&l.push(e)}),l}function find(e,r,t){var a,l=0;return _react.default.Children.forEach(e,function(e){a||_react.default.isValidElement(e)&&r.call(t,e,l++)&&(a=e)}),a}function every(e,r,t){var a=0,l=!0;return _react.default.Children.forEach(e,function(e){l&&_react.default.isValidElement(e)&&(r.call(t,e,a++)||(l=!1))}),l}function some(e,r,t){var a=0,l=!1;return _react.default.Children.forEach(e,function(e){l||_react.default.isValidElement(e)&&r.call(t,e,a++)&&(l=!0)}),l}function toArray(e){var r=[];return _react.default.Children.forEach(e,function(e){_react.default.isValidElement(e)&&r.push(e)}),r}var _default={map:map,forEach:forEach,count:count,find:find,filter:filter,every:every,some:some,toArray:toArray};exports.default=_default,module.exports=exports.default;

},{"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"react":777}],596:[function(require,module,exports){
(function (process){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.prefix=prefix,exports.getClassSet=getClassSet,exports.splitBsProps=splitBsProps,exports.splitBsPropsAndOmit=splitBsPropsAndOmit,exports.addStyle=addStyle,exports._curry=exports.bsSizes=exports.bsStyles=exports.bsClass=void 0;var _entries=_interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/entries")),_extends2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends")),_invariant=_interopRequireDefault(require("invariant")),_propTypes=_interopRequireDefault(require("prop-types")),_StyleConfig=require("./StyleConfig");function curry(e){return function(){for(var r=arguments.length,s=new Array(r),t=0;t<r;t++)s[t]=arguments[t];return"function"==typeof s[s.length-1]?e.apply(void 0,s):function(r){return e.apply(void 0,s.concat([r]))}}}function prefix(e,r){var s=(e.bsClass||"").trim();return null==s&&("production"!==process.env.NODE_ENV?(0,_invariant.default)(!1,"A `bsClass` prop is required for this component"):invariant(!1)),s+(r?"-"+r:"")}var bsClass=curry(function(e,r){var s=r.propTypes||(r.propTypes={}),t=r.defaultProps||(r.defaultProps={});return s.bsClass=_propTypes.default.string,t.bsClass=e,r});exports.bsClass=bsClass;var bsStyles=curry(function(e,r,s){"string"!=typeof r&&(s=r,r=void 0);var t=s.STYLES||[],o=s.propTypes||{};e.forEach(function(e){-1===t.indexOf(e)&&t.push(e)});var i=_propTypes.default.oneOf(t);(s.STYLES=t,i._values=t,s.propTypes=(0,_extends2.default)({},o,{bsStyle:i}),void 0!==r)&&((s.defaultProps||(s.defaultProps={})).bsStyle=r);return s});exports.bsStyles=bsStyles;var bsSizes=curry(function(e,r,s){"string"!=typeof r&&(s=r,r=void 0);var t=s.SIZES||[],o=s.propTypes||{};e.forEach(function(e){-1===t.indexOf(e)&&t.push(e)});var i=[];t.forEach(function(e){var r=_StyleConfig.SIZE_MAP[e];r&&r!==e&&i.push(r),i.push(e)});var n=_propTypes.default.oneOf(i);return n._values=i,s.SIZES=t,s.propTypes=(0,_extends2.default)({},o,{bsSize:n}),void 0!==r&&(s.defaultProps||(s.defaultProps={}),s.defaultProps.bsSize=r),s});function getClassSet(e){var r,s=((r={})[prefix(e)]=!0,r);e.bsSize&&(s[prefix(e,_StyleConfig.SIZE_MAP[e.bsSize]||e.bsSize)]=!0);return e.bsStyle&&(s[prefix(e,e.bsStyle)]=!0),s}function getBsProps(e){return{bsClass:e.bsClass,bsSize:e.bsSize,bsStyle:e.bsStyle,bsRole:e.bsRole}}function isBsProp(e){return"bsClass"===e||"bsSize"===e||"bsStyle"===e||"bsRole"===e}function splitBsProps(e){var r={};return(0,_entries.default)(e).forEach(function(e){var s=e[0],t=e[1];isBsProp(s)||(r[s]=t)}),[getBsProps(e),r]}function splitBsPropsAndOmit(e,r){var s={};r.forEach(function(e){s[e]=!0});var t={};return(0,_entries.default)(e).forEach(function(e){var r=e[0],o=e[1];isBsProp(r)||s[r]||(t[r]=o)}),[getBsProps(e),t]}function addStyle(e){for(var r=arguments.length,s=new Array(r>1?r-1:0),t=1;t<r;t++)s[t-1]=arguments[t];bsStyles(s,e)}exports.bsSizes=bsSizes;var _curry=curry;exports._curry=_curry;

}).call(this,require('_process'))

},{"./StyleConfig":594,"@babel/runtime-corejs2/core-js/object/entries":6,"@babel/runtime-corejs2/helpers/extends":12,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"_process":484,"invariant":481,"prop-types":495}],597:[function(require,module,exports){
"use strict";function capitalize(e){return""+e.charAt(0).toUpperCase()+e.slice(1)}exports.__esModule=!0,exports.default=capitalize,module.exports=exports.default;

},{}],598:[function(require,module,exports){
"use strict";function createChainedFunction(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];return n.filter(function(e){return null!=e}).reduce(function(e,n){if("function"!=typeof n)throw new Error("Invalid Argument Type, must only provide functions, undefined, or null.");return null===e?n:function chainedFunction(){for(var t=arguments.length,r=new Array(t),u=0;u<t;u++)r[u]=arguments[u];e.apply(this,r),n.apply(this,r)}},null)}exports.__esModule=!0,exports.default=void 0;var _default=createChainedFunction;exports.default=_default,module.exports=exports.default;

},{}],599:[function(require,module,exports){
(function (process){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports._resetWarned=_resetWarned,exports.default=void 0;var _inheritsLoose2=_interopRequireDefault(require("@babel/runtime-corejs2/helpers/inheritsLoose")),_warning=_interopRequireDefault(require("warning")),warned={};function deprecationWarning(e,r,n){var t;"object"==typeof e?t=e.message:(t=e+" is deprecated. Use "+r+" instead.",n&&(t+="\nYou can read more about it at "+n)),warned[t]||("production"!==process.env.NODE_ENV&&(0,_warning.default)(!1,t),warned[t]=!0)}deprecationWarning.wrapper=function(e){for(var r=arguments.length,n=new Array(r>1?r-1:0),t=1;t<r;t++)n[t-1]=arguments[t];return function(e){function DeprecatedComponent(){return e.apply(this,arguments)||this}return(0,_inheritsLoose2.default)(DeprecatedComponent,e),DeprecatedComponent.prototype.componentWillMount=function componentWillMount(){if(deprecationWarning.apply(void 0,n),e.prototype.componentWillMount){for(var r,t=arguments.length,o=new Array(t),a=0;a<t;a++)o[a]=arguments[a];(r=e.prototype.componentWillMount).call.apply(r,[this].concat(o))}},DeprecatedComponent}(e)};var _default=deprecationWarning;function _resetWarned(){warned={}}exports.default=_default;

}).call(this,require('_process'))

},{"@babel/runtime-corejs2/helpers/inheritsLoose":13,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"_process":484,"warning":780}],600:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault"),_interopRequireWildcard=require("@babel/runtime-corejs2/helpers/interopRequireWildcard");exports.__esModule=!0,exports.bootstrapUtils=void 0;var _bootstrapUtils=_interopRequireWildcard(require("./bootstrapUtils"));exports.bootstrapUtils=_bootstrapUtils;var _createChainedFunction2=_interopRequireDefault(require("./createChainedFunction"));exports.createChainedFunction=_createChainedFunction2.default;var _ValidComponentChildren2=_interopRequireDefault(require("./ValidComponentChildren"));exports.ValidComponentChildren=_ValidComponentChildren2.default;

},{"./ValidComponentChildren":595,"./bootstrapUtils":596,"./createChainedFunction":598,"@babel/runtime-corejs2/helpers/interopRequireDefault":14,"@babel/runtime-corejs2/helpers/interopRequireWildcard":15}],601:[function(require,module,exports){
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault");exports.__esModule=!0,exports.default=splitComponentProps;var _entries=_interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/entries"));function splitComponentProps(e,r){var t=r.propTypes,o={},s={};return(0,_entries.default)(e).forEach(function(e){var r=e[0],u=e[1];t[r]?o[r]=u:s[r]=u}),[o,s]}module.exports=exports.default;

},{"@babel/runtime-corejs2/core-js/object/entries":6,"@babel/runtime-corejs2/helpers/interopRequireDefault":14}],602:[function(require,module,exports){
"use strict";module.exports=require("./lib/ReactDOM");

},{"./lib/ReactDOM":632}],603:[function(require,module,exports){
"use strict";var ARIADOMPropertyConfig={Properties:{"aria-current":0,"aria-details":0,"aria-disabled":0,"aria-hidden":0,"aria-invalid":0,"aria-keyshortcuts":0,"aria-label":0,"aria-roledescription":0,"aria-autocomplete":0,"aria-checked":0,"aria-expanded":0,"aria-haspopup":0,"aria-level":0,"aria-modal":0,"aria-multiline":0,"aria-multiselectable":0,"aria-orientation":0,"aria-placeholder":0,"aria-pressed":0,"aria-readonly":0,"aria-required":0,"aria-selected":0,"aria-sort":0,"aria-valuemax":0,"aria-valuemin":0,"aria-valuenow":0,"aria-valuetext":0,"aria-atomic":0,"aria-busy":0,"aria-live":0,"aria-relevant":0,"aria-dropeffect":0,"aria-grabbed":0,"aria-activedescendant":0,"aria-colcount":0,"aria-colindex":0,"aria-colspan":0,"aria-controls":0,"aria-describedby":0,"aria-errormessage":0,"aria-flowto":0,"aria-labelledby":0,"aria-owns":0,"aria-posinset":0,"aria-rowcount":0,"aria-rowindex":0,"aria-rowspan":0,"aria-setsize":0},DOMAttributeNames:{},DOMPropertyNames:{}};module.exports=ARIADOMPropertyConfig;

},{}],604:[function(require,module,exports){
"use strict";var ReactDOMComponentTree=require("./ReactDOMComponentTree"),focusNode=require("fbjs/lib/focusNode"),AutoFocusUtils={focusDOMComponent:function(){focusNode(ReactDOMComponentTree.getNodeFromInstance(this))}};module.exports=AutoFocusUtils;

},{"./ReactDOMComponentTree":635,"fbjs/lib/focusNode":466}],605:[function(require,module,exports){
"use strict";var EventPropagators=require("./EventPropagators"),ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),FallbackCompositionState=require("./FallbackCompositionState"),SyntheticCompositionEvent=require("./SyntheticCompositionEvent"),SyntheticInputEvent=require("./SyntheticInputEvent"),END_KEYCODES=[9,13,27,32],START_KEYCODE=229,canUseCompositionEvent=ExecutionEnvironment.canUseDOM&&"CompositionEvent"in window,documentMode=null;ExecutionEnvironment.canUseDOM&&"documentMode"in document&&(documentMode=document.documentMode);var canUseTextInputEvent=ExecutionEnvironment.canUseDOM&&"TextEvent"in window&&!documentMode&&!isPresto(),useFallbackCompositionData=ExecutionEnvironment.canUseDOM&&(!canUseCompositionEvent||documentMode&&documentMode>8&&documentMode<=11);function isPresto(){var t=window.opera;return"object"==typeof t&&"function"==typeof t.version&&parseInt(t.version(),10)<=12}var SPACEBAR_CODE=32,SPACEBAR_CHAR=String.fromCharCode(SPACEBAR_CODE),eventTypes={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:["topBlur","topCompositionEnd","topKeyDown","topKeyPress","topKeyUp","topMouseDown"]},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:["topBlur","topCompositionStart","topKeyDown","topKeyPress","topKeyUp","topMouseDown"]},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:["topBlur","topCompositionUpdate","topKeyDown","topKeyPress","topKeyUp","topMouseDown"]}},hasSpaceKeypress=!1;function isKeypressCommand(t){return(t.ctrlKey||t.altKey||t.metaKey)&&!(t.ctrlKey&&t.altKey)}function getCompositionEventType(t){switch(t){case"topCompositionStart":return eventTypes.compositionStart;case"topCompositionEnd":return eventTypes.compositionEnd;case"topCompositionUpdate":return eventTypes.compositionUpdate}}function isFallbackCompositionStart(t,e){return"topKeyDown"===t&&e.keyCode===START_KEYCODE}function isFallbackCompositionEnd(t,e){switch(t){case"topKeyUp":return-1!==END_KEYCODES.indexOf(e.keyCode);case"topKeyDown":return e.keyCode!==START_KEYCODE;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function getDataFromCustomEvent(t){var e=t.detail;return"object"==typeof e&&"data"in e?e.data:null}var currentComposition=null;function extractCompositionEvent(t,e,o,n){var i,r;if(canUseCompositionEvent?i=getCompositionEventType(t):currentComposition?isFallbackCompositionEnd(t,o)&&(i=eventTypes.compositionEnd):isFallbackCompositionStart(t,o)&&(i=eventTypes.compositionStart),!i)return null;useFallbackCompositionData&&(currentComposition||i!==eventTypes.compositionStart?i===eventTypes.compositionEnd&&currentComposition&&(r=currentComposition.getData()):currentComposition=FallbackCompositionState.getPooled(n));var s=SyntheticCompositionEvent.getPooled(i,e,o,n);if(r)s.data=r;else{var a=getDataFromCustomEvent(o);null!==a&&(s.data=a)}return EventPropagators.accumulateTwoPhaseDispatches(s),s}function getNativeBeforeInputChars(t,e){switch(t){case"topCompositionEnd":return getDataFromCustomEvent(e);case"topKeyPress":return e.which!==SPACEBAR_CODE?null:(hasSpaceKeypress=!0,SPACEBAR_CHAR);case"topTextInput":var o=e.data;return o===SPACEBAR_CHAR&&hasSpaceKeypress?null:o;default:return null}}function getFallbackBeforeInputChars(t,e){if(currentComposition){if("topCompositionEnd"===t||!canUseCompositionEvent&&isFallbackCompositionEnd(t,e)){var o=currentComposition.getData();return FallbackCompositionState.release(currentComposition),currentComposition=null,o}return null}switch(t){case"topPaste":return null;case"topKeyPress":return e.which&&!isKeypressCommand(e)?String.fromCharCode(e.which):null;case"topCompositionEnd":return useFallbackCompositionData?null:e.data;default:return null}}function extractBeforeInputEvent(t,e,o,n){var i;if(!(i=canUseTextInputEvent?getNativeBeforeInputChars(t,o):getFallbackBeforeInputChars(t,o)))return null;var r=SyntheticInputEvent.getPooled(eventTypes.beforeInput,e,o,n);return r.data=i,EventPropagators.accumulateTwoPhaseDispatches(r),r}var BeforeInputEventPlugin={eventTypes:eventTypes,extractEvents:function(t,e,o,n){return[extractCompositionEvent(t,e,o,n),extractBeforeInputEvent(t,e,o,n)]}};module.exports=BeforeInputEventPlugin;

},{"./EventPropagators":621,"./FallbackCompositionState":622,"./SyntheticCompositionEvent":686,"./SyntheticInputEvent":690,"fbjs/lib/ExecutionEnvironment":458}],606:[function(require,module,exports){
"use strict";var isUnitlessNumber={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0};function prefixKey(o,r){return o+r.charAt(0).toUpperCase()+r.substring(1)}var prefixes=["Webkit","ms","Moz","O"];Object.keys(isUnitlessNumber).forEach(function(o){prefixes.forEach(function(r){isUnitlessNumber[prefixKey(r,o)]=isUnitlessNumber[o]})});var shorthandPropertyExpansions={background:{backgroundAttachment:!0,backgroundColor:!0,backgroundImage:!0,backgroundPositionX:!0,backgroundPositionY:!0,backgroundRepeat:!0},backgroundPosition:{backgroundPositionX:!0,backgroundPositionY:!0},border:{borderWidth:!0,borderStyle:!0,borderColor:!0},borderBottom:{borderBottomWidth:!0,borderBottomStyle:!0,borderBottomColor:!0},borderLeft:{borderLeftWidth:!0,borderLeftStyle:!0,borderLeftColor:!0},borderRight:{borderRightWidth:!0,borderRightStyle:!0,borderRightColor:!0},borderTop:{borderTopWidth:!0,borderTopStyle:!0,borderTopColor:!0},font:{fontStyle:!0,fontVariant:!0,fontWeight:!0,fontSize:!0,lineHeight:!0,fontFamily:!0},outline:{outlineWidth:!0,outlineStyle:!0,outlineColor:!0}},CSSProperty={isUnitlessNumber:isUnitlessNumber,shorthandPropertyExpansions:shorthandPropertyExpansions};module.exports=CSSProperty;

},{}],607:[function(require,module,exports){
(function (process){
"use strict";var CSSProperty=require("./CSSProperty"),ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),ReactInstrumentation=require("./ReactInstrumentation"),camelizeStyleName=require("fbjs/lib/camelizeStyleName"),dangerousStyleValue=require("./dangerousStyleValue"),hyphenateStyleName=require("fbjs/lib/hyphenateStyleName"),memoizeStringOnly=require("fbjs/lib/memoizeStringOnly"),warning=require("fbjs/lib/warning"),processStyleName=memoizeStringOnly(function(e){return hyphenateStyleName(e)}),hasShorthandPropertyBug=!1,styleFloatAccessor="cssFloat";if(ExecutionEnvironment.canUseDOM){var tempStyle=document.createElement("div").style;try{tempStyle.font=""}catch(e){hasShorthandPropertyBug=!0}void 0===document.documentElement.style.cssFloat&&(styleFloatAccessor="styleFloat")}if("production"!==process.env.NODE_ENV)var badVendoredStyleNamePattern=/^(?:webkit|moz|o)[A-Z]/,badStyleValueWithSemicolonPattern=/;\s*$/,warnedStyleNames={},warnedStyleValues={},warnedForNaNValue=!1,warnHyphenatedStyleName=function(e,r){warnedStyleNames.hasOwnProperty(e)&&warnedStyleNames[e]||(warnedStyleNames[e]=!0,"production"!==process.env.NODE_ENV&&warning(!1,"Unsupported style property %s. Did you mean %s?%s",e,camelizeStyleName(e),checkRenderMessage(r)))},warnBadVendoredStyleName=function(e,r){warnedStyleNames.hasOwnProperty(e)&&warnedStyleNames[e]||(warnedStyleNames[e]=!0,"production"!==process.env.NODE_ENV&&warning(!1,"Unsupported vendor-prefixed style property %s. Did you mean %s?%s",e,e.charAt(0).toUpperCase()+e.slice(1),checkRenderMessage(r)))},warnStyleValueWithSemicolon=function(e,r,t){warnedStyleValues.hasOwnProperty(r)&&warnedStyleValues[r]||(warnedStyleValues[r]=!0,"production"!==process.env.NODE_ENV&&warning(!1,'Style property values shouldn\'t contain a semicolon.%s Try "%s: %s" instead.',checkRenderMessage(t),e,r.replace(badStyleValueWithSemicolonPattern,"")))},warnStyleValueIsNaN=function(e,r,t){warnedForNaNValue||(warnedForNaNValue=!0,"production"!==process.env.NODE_ENV&&warning(!1,"`NaN` is an invalid value for the `%s` css style property.%s",e,checkRenderMessage(t)))},checkRenderMessage=function(e){if(e){var r=e.getName();if(r)return" Check the render method of `"+r+"`."}return""},warnValidStyle=function(e,r,t){var n;t&&(n=t._currentElement._owner),e.indexOf("-")>-1?warnHyphenatedStyleName(e,n):badVendoredStyleNamePattern.test(e)?warnBadVendoredStyleName(e,n):badStyleValueWithSemicolonPattern.test(r)&&warnStyleValueWithSemicolon(e,r,n),"number"==typeof r&&isNaN(r)&&warnStyleValueIsNaN(e,r,n)};var CSSPropertyOperations={createMarkupForStyles:function(e,r){var t="";for(var n in e)if(e.hasOwnProperty(n)){var a=0===n.indexOf("--"),o=e[n];"production"!==process.env.NODE_ENV&&(a||warnValidStyle(n,o,r)),null!=o&&(t+=processStyleName(n)+":",t+=dangerousStyleValue(n,o,r,a)+";")}return t||null},setValueForStyles:function(e,r,t){"production"!==process.env.NODE_ENV&&ReactInstrumentation.debugTool.onHostOperation({instanceID:t._debugID,type:"update styles",payload:r});var n=e.style;for(var a in r)if(r.hasOwnProperty(a)){var o=0===a.indexOf("--");"production"!==process.env.NODE_ENV&&(o||warnValidStyle(a,r[a],t));var s=dangerousStyleValue(a,r[a],t,o);if("float"!==a&&"cssFloat"!==a||(a=styleFloatAccessor),o)n.setProperty(a,s);else if(s)n[a]=s;else{var l=hasShorthandPropertyBug&&CSSProperty.shorthandPropertyExpansions[a];if(l)for(var i in l)n[i]="";else n[a]=""}}}};module.exports=CSSPropertyOperations;

}).call(this,require('_process'))

},{"./CSSProperty":606,"./ReactInstrumentation":664,"./dangerousStyleValue":703,"_process":484,"fbjs/lib/ExecutionEnvironment":458,"fbjs/lib/camelizeStyleName":460,"fbjs/lib/hyphenateStyleName":471,"fbjs/lib/memoizeStringOnly":475,"fbjs/lib/warning":479}],608:[function(require,module,exports){
(function (process){
"use strict";var _prodInvariant=require("./reactProdInvariant");function _classCallCheck(t,l){if(!(t instanceof l))throw new TypeError("Cannot call a class as a function")}var PooledClass=require("./PooledClass"),invariant=require("fbjs/lib/invariant"),CallbackQueue=function(){function CallbackQueue(t){_classCallCheck(this,CallbackQueue),this._callbacks=null,this._contexts=null,this._arg=t}return CallbackQueue.prototype.enqueue=function enqueue(t,l){this._callbacks=this._callbacks||[],this._callbacks.push(t),this._contexts=this._contexts||[],this._contexts.push(l)},CallbackQueue.prototype.notifyAll=function notifyAll(){var t=this._callbacks,l=this._contexts,e=this._arg;if(t&&l){t.length!==l.length&&("production"!==process.env.NODE_ENV?invariant(!1,"Mismatched list of contexts in callback queue"):_prodInvariant("24")),this._callbacks=null,this._contexts=null;for(var a=0;a<t.length;a++)t[a].call(l[a],e);t.length=0,l.length=0}},CallbackQueue.prototype.checkpoint=function checkpoint(){return this._callbacks?this._callbacks.length:0},CallbackQueue.prototype.rollback=function rollback(t){this._callbacks&&this._contexts&&(this._callbacks.length=t,this._contexts.length=t)},CallbackQueue.prototype.reset=function reset(){this._callbacks=null,this._contexts=null},CallbackQueue.prototype.destructor=function destructor(){this.reset()},CallbackQueue}();module.exports=PooledClass.addPoolingTo(CallbackQueue);

}).call(this,require('_process'))

},{"./PooledClass":626,"./reactProdInvariant":722,"_process":484,"fbjs/lib/invariant":472}],609:[function(require,module,exports){
"use strict";var EventPluginHub=require("./EventPluginHub"),EventPropagators=require("./EventPropagators"),ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),ReactDOMComponentTree=require("./ReactDOMComponentTree"),ReactUpdates=require("./ReactUpdates"),SyntheticEvent=require("./SyntheticEvent"),inputValueTracking=require("./inputValueTracking"),getEventTarget=require("./getEventTarget"),isEventSupported=require("./isEventSupported"),isTextInputElement=require("./isTextInputElement"),eventTypes={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:["topBlur","topChange","topClick","topFocus","topInput","topKeyDown","topKeyUp","topSelectionChange"]}};function createAndAccumulateChangeEvent(e,t,n){var a=SyntheticEvent.getPooled(eventTypes.change,e,t,n);return a.type="change",EventPropagators.accumulateTwoPhaseDispatches(a),a}var activeElement=null,activeElementInst=null;function shouldUseChangeEvent(e){var t=e.nodeName&&e.nodeName.toLowerCase();return"select"===t||"input"===t&&"file"===e.type}var doesChangeEventBubble=!1;function manualDispatchChangeEvent(e){var t=createAndAccumulateChangeEvent(activeElementInst,e,getEventTarget(e));ReactUpdates.batchedUpdates(runEventInBatch,t)}function runEventInBatch(e){EventPluginHub.enqueueEvents(e),EventPluginHub.processEventQueue(!1)}function startWatchingForChangeEventIE8(e,t){activeElementInst=t,(activeElement=e).attachEvent("onchange",manualDispatchChangeEvent)}function stopWatchingForChangeEventIE8(){activeElement&&(activeElement.detachEvent("onchange",manualDispatchChangeEvent),activeElement=null,activeElementInst=null)}function getInstIfValueChanged(e,t){var n=inputValueTracking.updateValueIfChanged(e),a=!0===t.simulated&&ChangeEventPlugin._allowSimulatedPassThrough;if(n||a)return e}function getTargetInstForChangeEvent(e,t){if("topChange"===e)return t}function handleEventsForChangeEventIE8(e,t,n){"topFocus"===e?(stopWatchingForChangeEventIE8(),startWatchingForChangeEventIE8(t,n)):"topBlur"===e&&stopWatchingForChangeEventIE8()}ExecutionEnvironment.canUseDOM&&(doesChangeEventBubble=isEventSupported("change")&&(!document.documentMode||document.documentMode>8));var isInputEventSupported=!1;function startWatchingForValueChange(e,t){activeElementInst=t,(activeElement=e).attachEvent("onpropertychange",handlePropertyChange)}function stopWatchingForValueChange(){activeElement&&(activeElement.detachEvent("onpropertychange",handlePropertyChange),activeElement=null,activeElementInst=null)}function handlePropertyChange(e){"value"===e.propertyName&&getInstIfValueChanged(activeElementInst,e)&&manualDispatchChangeEvent(e)}function handleEventsForInputEventPolyfill(e,t,n){"topFocus"===e?(stopWatchingForValueChange(),startWatchingForValueChange(t,n)):"topBlur"===e&&stopWatchingForValueChange()}function getTargetInstForInputEventPolyfill(e,t,n){if("topSelectionChange"===e||"topKeyUp"===e||"topKeyDown"===e)return getInstIfValueChanged(activeElementInst,n)}function shouldUseClickEvent(e){var t=e.nodeName;return t&&"input"===t.toLowerCase()&&("checkbox"===e.type||"radio"===e.type)}function getTargetInstForClickEvent(e,t,n){if("topClick"===e)return getInstIfValueChanged(t,n)}function getTargetInstForInputOrChangeEvent(e,t,n){if("topInput"===e||"topChange"===e)return getInstIfValueChanged(t,n)}function handleControlledInputBlur(e,t){if(null!=e){var n=e._wrapperState||t._wrapperState;if(n&&n.controlled&&"number"===t.type){var a=""+t.value;t.getAttribute("value")!==a&&t.setAttribute("value",a)}}}ExecutionEnvironment.canUseDOM&&(isInputEventSupported=isEventSupported("input")&&(!document.documentMode||document.documentMode>9));var ChangeEventPlugin={eventTypes:eventTypes,_allowSimulatedPassThrough:!0,_isInputEventSupported:isInputEventSupported,extractEvents:function(e,t,n,a){var o,u,r=t?ReactDOMComponentTree.getNodeFromInstance(t):window;if(shouldUseChangeEvent(r)?doesChangeEventBubble?o=getTargetInstForChangeEvent:u=handleEventsForChangeEventIE8:isTextInputElement(r)?isInputEventSupported?o=getTargetInstForInputOrChangeEvent:(o=getTargetInstForInputEventPolyfill,u=handleEventsForInputEventPolyfill):shouldUseClickEvent(r)&&(o=getTargetInstForClickEvent),o){var i=o(e,t,n);if(i)return createAndAccumulateChangeEvent(i,n,a)}u&&u(e,r,t),"topBlur"===e&&handleControlledInputBlur(t,r)}};module.exports=ChangeEventPlugin;

},{"./EventPluginHub":618,"./EventPropagators":621,"./ReactDOMComponentTree":635,"./ReactUpdates":679,"./SyntheticEvent":688,"./getEventTarget":711,"./inputValueTracking":717,"./isEventSupported":719,"./isTextInputElement":720,"fbjs/lib/ExecutionEnvironment":458}],610:[function(require,module,exports){
(function (process){
"use strict";var DOMLazyTree=require("./DOMLazyTree"),Danger=require("./Danger"),ReactDOMComponentTree=require("./ReactDOMComponentTree"),ReactInstrumentation=require("./ReactInstrumentation"),createMicrosoftUnsafeLocalFunction=require("./createMicrosoftUnsafeLocalFunction"),setInnerHTML=require("./setInnerHTML"),setTextContent=require("./setTextContent");function getNodeAfter(e,t){return Array.isArray(t)&&(t=t[1]),t?t.nextSibling:e.firstChild}var insertChildAt=createMicrosoftUnsafeLocalFunction(function(e,t,n){e.insertBefore(t,n)});function insertLazyTreeChildAt(e,t,n){DOMLazyTree.insertTreeBefore(e,t,n)}function moveChild(e,t,n){Array.isArray(t)?moveDelimitedText(e,t[0],t[1],n):insertChildAt(e,t,n)}function removeChild(e,t){if(Array.isArray(t)){var n=t[1];removeDelimitedText(e,t=t[0],n),e.removeChild(n)}e.removeChild(t)}function moveDelimitedText(e,t,n,o){for(var r=t;;){var a=r.nextSibling;if(insertChildAt(e,r,o),r===n)break;r=a}}function removeDelimitedText(e,t,n){for(;;){var o=t.nextSibling;if(o===n)break;e.removeChild(o)}}function replaceDelimitedText(e,t,n){var o=e.parentNode,r=e.nextSibling;r===t?n&&insertChildAt(o,document.createTextNode(n),r):n?(setTextContent(r,n),removeDelimitedText(o,r,t)):removeDelimitedText(o,e,t),"production"!==process.env.NODE_ENV&&ReactInstrumentation.debugTool.onHostOperation({instanceID:ReactDOMComponentTree.getInstanceFromNode(e)._debugID,type:"replace text",payload:n})}var dangerouslyReplaceNodeWithMarkup=Danger.dangerouslyReplaceNodeWithMarkup;"production"!==process.env.NODE_ENV&&(dangerouslyReplaceNodeWithMarkup=function(e,t,n){if(Danger.dangerouslyReplaceNodeWithMarkup(e,t),0!==n._debugID)ReactInstrumentation.debugTool.onHostOperation({instanceID:n._debugID,type:"replace with",payload:t.toString()});else{var o=ReactDOMComponentTree.getInstanceFromNode(t.node);0!==o._debugID&&ReactInstrumentation.debugTool.onHostOperation({instanceID:o._debugID,type:"mount",payload:t.toString()})}});var DOMChildrenOperations={dangerouslyReplaceNodeWithMarkup:dangerouslyReplaceNodeWithMarkup,replaceDelimitedText:replaceDelimitedText,processUpdates:function(e,t){if("production"!==process.env.NODE_ENV)var n=ReactDOMComponentTree.getInstanceFromNode(e)._debugID;for(var o=0;o<t.length;o++){var r=t[o];switch(r.type){case"INSERT_MARKUP":insertLazyTreeChildAt(e,r.content,getNodeAfter(e,r.afterNode)),"production"!==process.env.NODE_ENV&&ReactInstrumentation.debugTool.onHostOperation({instanceID:n,type:"insert child",payload:{toIndex:r.toIndex,content:r.content.toString()}});break;case"MOVE_EXISTING":moveChild(e,r.fromNode,getNodeAfter(e,r.afterNode)),"production"!==process.env.NODE_ENV&&ReactInstrumentation.debugTool.onHostOperation({instanceID:n,type:"move child",payload:{fromIndex:r.fromIndex,toIndex:r.toIndex}});break;case"SET_MARKUP":setInnerHTML(e,r.content),"production"!==process.env.NODE_ENV&&ReactInstrumentation.debugTool.onHostOperation({instanceID:n,type:"replace children",payload:r.content.toString()});break;case"TEXT_CONTENT":setTextContent(e,r.content),"production"!==process.env.NODE_ENV&&ReactInstrumentation.debugTool.onHostOperation({instanceID:n,type:"replace text",payload:r.content.toString()});break;case"REMOVE_NODE":removeChild(e,r.fromNode),"production"!==process.env.NODE_ENV&&ReactInstrumentation.debugTool.onHostOperation({instanceID:n,type:"remove child",payload:{fromIndex:r.fromIndex}})}}}};module.exports=DOMChildrenOperations;

}).call(this,require('_process'))

},{"./DOMLazyTree":611,"./Danger":615,"./ReactDOMComponentTree":635,"./ReactInstrumentation":664,"./createMicrosoftUnsafeLocalFunction":702,"./setInnerHTML":724,"./setTextContent":725,"_process":484}],611:[function(require,module,exports){
"use strict";var DOMNamespaces=require("./DOMNamespaces"),setInnerHTML=require("./setInnerHTML"),createMicrosoftUnsafeLocalFunction=require("./createMicrosoftUnsafeLocalFunction"),setTextContent=require("./setTextContent"),ELEMENT_NODE_TYPE=1,DOCUMENT_FRAGMENT_NODE_TYPE=11,enableLazy="undefined"!=typeof document&&"number"==typeof document.documentMode||"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent&&/\bEdge\/\d/.test(navigator.userAgent);function insertTreeChildren(e){if(enableLazy){var n=e.node,t=e.children;if(t.length)for(var r=0;r<t.length;r++)insertTreeBefore(n,t[r],null);else null!=e.html?setInnerHTML(n,e.html):null!=e.text&&setTextContent(n,e.text)}}var insertTreeBefore=createMicrosoftUnsafeLocalFunction(function(e,n,t){n.node.nodeType===DOCUMENT_FRAGMENT_NODE_TYPE||n.node.nodeType===ELEMENT_NODE_TYPE&&"object"===n.node.nodeName.toLowerCase()&&(null==n.node.namespaceURI||n.node.namespaceURI===DOMNamespaces.html)?(insertTreeChildren(n),e.insertBefore(n.node,t)):(e.insertBefore(n.node,t),insertTreeChildren(n))});function replaceChildWithTree(e,n){e.parentNode.replaceChild(n.node,e),insertTreeChildren(n)}function queueChild(e,n){enableLazy?e.children.push(n):e.node.appendChild(n.node)}function queueHTML(e,n){enableLazy?e.html=n:setInnerHTML(e.node,n)}function queueText(e,n){enableLazy?e.text=n:setTextContent(e.node,n)}function toString(){return this.node.nodeName}function DOMLazyTree(e){return{node:e,children:[],html:null,text:null,toString:toString}}DOMLazyTree.insertTreeBefore=insertTreeBefore,DOMLazyTree.replaceChildWithTree=replaceChildWithTree,DOMLazyTree.queueChild=queueChild,DOMLazyTree.queueHTML=queueHTML,DOMLazyTree.queueText=queueText,module.exports=DOMLazyTree;

},{"./DOMNamespaces":612,"./createMicrosoftUnsafeLocalFunction":702,"./setInnerHTML":724,"./setTextContent":725}],612:[function(require,module,exports){
"use strict";var DOMNamespaces={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};module.exports=DOMNamespaces;

},{}],613:[function(require,module,exports){
(function (process){
"use strict";var _prodInvariant=require("./reactProdInvariant"),invariant=require("fbjs/lib/invariant");function checkMask(e,t){return(e&t)===t}var DOMPropertyInjection={MUST_USE_PROPERTY:1,HAS_BOOLEAN_VALUE:4,HAS_NUMERIC_VALUE:8,HAS_POSITIVE_NUMERIC_VALUE:24,HAS_OVERLOADED_BOOLEAN_VALUE:32,injectDOMPropertyConfig:function(e){var t=DOMPropertyInjection,r=e.Properties||{},o=e.DOMAttributeNamespaces||{},a=e.DOMAttributeNames||{},n=e.DOMPropertyNames||{},u=e.DOMMutationMethods||{};for(var i in e.isCustomAttribute&&DOMProperty._isCustomAttributeFunctions.push(e.isCustomAttribute),r){DOMProperty.properties.hasOwnProperty(i)&&("production"!==process.env.NODE_ENV?invariant(!1,"injectDOMPropertyConfig(...): You're trying to inject DOM property '%s' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.",i):_prodInvariant("48",i));var s=i.toLowerCase(),c=r[i],p={attributeName:s,attributeNamespace:null,propertyName:i,mutationMethod:null,mustUseProperty:checkMask(c,t.MUST_USE_PROPERTY),hasBooleanValue:checkMask(c,t.HAS_BOOLEAN_VALUE),hasNumericValue:checkMask(c,t.HAS_NUMERIC_VALUE),hasPositiveNumericValue:checkMask(c,t.HAS_POSITIVE_NUMERIC_VALUE),hasOverloadedBooleanValue:checkMask(c,t.HAS_OVERLOADED_BOOLEAN_VALUE)};if(p.hasBooleanValue+p.hasNumericValue+p.hasOverloadedBooleanValue<=1||("production"!==process.env.NODE_ENV?invariant(!1,"DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s",i):_prodInvariant("50",i)),"production"!==process.env.NODE_ENV&&(DOMProperty.getPossibleStandardName[s]=i),a.hasOwnProperty(i)){var A=a[i];p.attributeName=A,"production"!==process.env.NODE_ENV&&(DOMProperty.getPossibleStandardName[A]=i)}o.hasOwnProperty(i)&&(p.attributeNamespace=o[i]),n.hasOwnProperty(i)&&(p.propertyName=n[i]),u.hasOwnProperty(i)&&(p.mutationMethod=u[i]),DOMProperty.properties[i]=p}}},ATTRIBUTE_NAME_START_CHAR=":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD",DOMProperty={ID_ATTRIBUTE_NAME:"data-reactid",ROOT_ATTRIBUTE_NAME:"data-reactroot",ATTRIBUTE_NAME_START_CHAR:ATTRIBUTE_NAME_START_CHAR,ATTRIBUTE_NAME_CHAR:ATTRIBUTE_NAME_START_CHAR+"\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040",properties:{},getPossibleStandardName:"production"!==process.env.NODE_ENV?{autofocus:"autoFocus"}:null,_isCustomAttributeFunctions:[],isCustomAttribute:function(e){for(var t=0;t<DOMProperty._isCustomAttributeFunctions.length;t++){if((0,DOMProperty._isCustomAttributeFunctions[t])(e))return!0}return!1},injection:DOMPropertyInjection};module.exports=DOMProperty;

}).call(this,require('_process'))

},{"./reactProdInvariant":722,"_process":484,"fbjs/lib/invariant":472}],614:[function(require,module,exports){
(function (process){
"use strict";var DOMProperty=require("./DOMProperty"),ReactDOMComponentTree=require("./ReactDOMComponentTree"),ReactInstrumentation=require("./ReactInstrumentation"),quoteAttributeValueForBrowser=require("./quoteAttributeValueForBrowser"),warning=require("fbjs/lib/warning"),VALID_ATTRIBUTE_NAME_REGEX=new RegExp("^["+DOMProperty.ATTRIBUTE_NAME_START_CHAR+"]["+DOMProperty.ATTRIBUTE_NAME_CHAR+"]*$"),illegalAttributeNameCache={},validatedAttributeNameCache={};function isAttributeNameSafe(e){return!!validatedAttributeNameCache.hasOwnProperty(e)||!illegalAttributeNameCache.hasOwnProperty(e)&&(VALID_ATTRIBUTE_NAME_REGEX.test(e)?(validatedAttributeNameCache[e]=!0,!0):(illegalAttributeNameCache[e]=!0,"production"!==process.env.NODE_ENV&&warning(!1,"Invalid attribute name: `%s`",e),!1))}function shouldIgnoreValue(e,t){return null==t||e.hasBooleanValue&&!t||e.hasNumericValue&&isNaN(t)||e.hasPositiveNumericValue&&t<1||e.hasOverloadedBooleanValue&&!1===t}var DOMPropertyOperations={createMarkupForID:function(e){return DOMProperty.ID_ATTRIBUTE_NAME+"="+quoteAttributeValueForBrowser(e)},setAttributeForID:function(e,t){e.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME,t)},createMarkupForRoot:function(){return DOMProperty.ROOT_ATTRIBUTE_NAME+'=""'},setAttributeForRoot:function(e){e.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME,"")},createMarkupForProperty:function(e,t){var r=DOMProperty.properties.hasOwnProperty(e)?DOMProperty.properties[e]:null;if(r){if(shouldIgnoreValue(r,t))return"";var o=r.attributeName;return r.hasBooleanValue||r.hasOverloadedBooleanValue&&!0===t?o+'=""':o+"="+quoteAttributeValueForBrowser(t)}return DOMProperty.isCustomAttribute(e)?null==t?"":e+"="+quoteAttributeValueForBrowser(t):null},createMarkupForCustomAttribute:function(e,t){return isAttributeNameSafe(e)&&null!=t?e+"="+quoteAttributeValueForBrowser(t):""},setValueForProperty:function(e,t,r){var o=DOMProperty.properties.hasOwnProperty(t)?DOMProperty.properties[t]:null;if(o){var a=o.mutationMethod;if(a)a(e,r);else{if(shouldIgnoreValue(o,r))return void this.deleteValueForProperty(e,t);if(o.mustUseProperty)e[o.propertyName]=r;else{var u=o.attributeName,n=o.attributeNamespace;n?e.setAttributeNS(n,u,""+r):o.hasBooleanValue||o.hasOverloadedBooleanValue&&!0===r?e.setAttribute(u,""):e.setAttribute(u,""+r)}}}else if(DOMProperty.isCustomAttribute(t))return void DOMPropertyOperations.setValueForAttribute(e,t,r);if("production"!==process.env.NODE_ENV){var i={};i[t]=r,ReactInstrumentation.debugTool.onHostOperation({instanceID:ReactDOMComponentTree.getInstanceFromNode(e)._debugID,type:"update attribute",payload:i})}},setValueForAttribute:function(e,t,r){if(isAttributeNameSafe(t)&&(null==r?e.removeAttribute(t):e.setAttribute(t,""+r),"production"!==process.env.NODE_ENV)){var o={};o[t]=r,ReactInstrumentation.debugTool.onHostOperation({instanceID:ReactDOMComponentTree.getInstanceFromNode(e)._debugID,type:"update attribute",payload:o})}},deleteValueForAttribute:function(e,t){e.removeAttribute(t),"production"!==process.env.NODE_ENV&&ReactInstrumentation.debugTool.onHostOperation({instanceID:ReactDOMComponentTree.getInstanceFromNode(e)._debugID,type:"remove attribute",payload:t})},deleteValueForProperty:function(e,t){var r=DOMProperty.properties.hasOwnProperty(t)?DOMProperty.properties[t]:null;if(r){var o=r.mutationMethod;if(o)o(e,void 0);else if(r.mustUseProperty){var a=r.propertyName;r.hasBooleanValue?e[a]=!1:e[a]=""}else e.removeAttribute(r.attributeName)}else DOMProperty.isCustomAttribute(t)&&e.removeAttribute(t);"production"!==process.env.NODE_ENV&&ReactInstrumentation.debugTool.onHostOperation({instanceID:ReactDOMComponentTree.getInstanceFromNode(e)._debugID,type:"remove attribute",payload:t})}};module.exports=DOMPropertyOperations;

}).call(this,require('_process'))

},{"./DOMProperty":613,"./ReactDOMComponentTree":635,"./ReactInstrumentation":664,"./quoteAttributeValueForBrowser":721,"_process":484,"fbjs/lib/warning":479}],615:[function(require,module,exports){
(function (process){
"use strict";var _prodInvariant=require("./reactProdInvariant"),DOMLazyTree=require("./DOMLazyTree"),ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),createNodesFromMarkup=require("fbjs/lib/createNodesFromMarkup"),emptyFunction=require("fbjs/lib/emptyFunction"),invariant=require("fbjs/lib/invariant"),Danger={dangerouslyReplaceNodeWithMarkup:function(e,r){if(ExecutionEnvironment.canUseDOM||("production"!==process.env.NODE_ENV?invariant(!1,"dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering."):_prodInvariant("56")),r||("production"!==process.env.NODE_ENV?invariant(!1,"dangerouslyReplaceNodeWithMarkup(...): Missing markup."):_prodInvariant("57")),"HTML"===e.nodeName&&("production"!==process.env.NODE_ENV?invariant(!1,"dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString()."):_prodInvariant("58")),"string"==typeof r){var n=createNodesFromMarkup(r,emptyFunction)[0];e.parentNode.replaceChild(n,e)}else DOMLazyTree.replaceChildWithTree(e,r)}};module.exports=Danger;

}).call(this,require('_process'))

},{"./DOMLazyTree":611,"./reactProdInvariant":722,"_process":484,"fbjs/lib/ExecutionEnvironment":458,"fbjs/lib/createNodesFromMarkup":463,"fbjs/lib/emptyFunction":464,"fbjs/lib/invariant":472}],616:[function(require,module,exports){
"use strict";var DefaultEventPluginOrder=["ResponderEventPlugin","SimpleEventPlugin","TapEventPlugin","EnterLeaveEventPlugin","ChangeEventPlugin","SelectEventPlugin","BeforeInputEventPlugin"];module.exports=DefaultEventPluginOrder;

},{}],617:[function(require,module,exports){
"use strict";var EventPropagators=require("./EventPropagators"),ReactDOMComponentTree=require("./ReactDOMComponentTree"),SyntheticMouseEvent=require("./SyntheticMouseEvent"),eventTypes={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},EnterLeaveEventPlugin={eventTypes:eventTypes,extractEvents:function(e,t,n,o){if("topMouseOver"===e&&(n.relatedTarget||n.fromElement))return null;if("topMouseOut"!==e&&"topMouseOver"!==e)return null;var r,a,u;if(o.window===o)r=o;else{var s=o.ownerDocument;r=s?s.defaultView||s.parentWindow:window}if("topMouseOut"===e){a=t;var v=n.relatedTarget||n.toElement;u=v?ReactDOMComponentTree.getClosestInstanceFromNode(v):null}else a=null,u=t;if(a===u)return null;var l=null==a?r:ReactDOMComponentTree.getNodeFromInstance(a),p=null==u?r:ReactDOMComponentTree.getNodeFromInstance(u),i=SyntheticMouseEvent.getPooled(eventTypes.mouseLeave,a,n,o);i.type="mouseleave",i.target=l,i.relatedTarget=p;var m=SyntheticMouseEvent.getPooled(eventTypes.mouseEnter,u,n,o);return m.type="mouseenter",m.target=p,m.relatedTarget=l,EventPropagators.accumulateEnterLeaveDispatches(i,m,a,u),[i,m]}};module.exports=EnterLeaveEventPlugin;

},{"./EventPropagators":621,"./ReactDOMComponentTree":635,"./SyntheticMouseEvent":692}],618:[function(require,module,exports){
(function (process){
"use strict";var _prodInvariant=require("./reactProdInvariant"),EventPluginRegistry=require("./EventPluginRegistry"),EventPluginUtils=require("./EventPluginUtils"),ReactErrorUtils=require("./ReactErrorUtils"),accumulateInto=require("./accumulateInto"),forEachAccumulated=require("./forEachAccumulated"),invariant=require("fbjs/lib/invariant"),listenerBank={},eventQueue=null,executeDispatchesAndRelease=function(e,t){e&&(EventPluginUtils.executeDispatchesInOrder(e,t),e.isPersistent()||e.constructor.release(e))},executeDispatchesAndReleaseSimulated=function(e){return executeDispatchesAndRelease(e,!0)},executeDispatchesAndReleaseTopLevel=function(e){return executeDispatchesAndRelease(e,!1)},getDictionaryKey=function(e){return"."+e._rootNodeID};function isInteractive(e){return"button"===e||"input"===e||"select"===e||"textarea"===e}function shouldPreventMouseEvent(e,t,n){switch(e){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":return!(!n.disabled||!isInteractive(t));default:return!1}}var EventPluginHub={injection:{injectEventPluginOrder:EventPluginRegistry.injectEventPluginOrder,injectEventPluginsByName:EventPluginRegistry.injectEventPluginsByName},putListener:function(e,t,n){"function"!=typeof n&&("production"!==process.env.NODE_ENV?invariant(!1,"Expected %s listener to be a function, instead got type %s",t,typeof n):_prodInvariant("94",t,typeof n));var r=getDictionaryKey(e);(listenerBank[t]||(listenerBank[t]={}))[r]=n;var i=EventPluginRegistry.registrationNameModules[t];i&&i.didPutListener&&i.didPutListener(e,t,n)},getListener:function(e,t){var n=listenerBank[t];if(shouldPreventMouseEvent(t,e._currentElement.type,e._currentElement.props))return null;var r=getDictionaryKey(e);return n&&n[r]},deleteListener:function(e,t){var n=EventPluginRegistry.registrationNameModules[t];n&&n.willDeleteListener&&n.willDeleteListener(e,t);var r=listenerBank[t];r&&delete r[getDictionaryKey(e)]},deleteAllListeners:function(e){var t=getDictionaryKey(e);for(var n in listenerBank)if(listenerBank.hasOwnProperty(n)&&listenerBank[n][t]){var r=EventPluginRegistry.registrationNameModules[n];r&&r.willDeleteListener&&r.willDeleteListener(e,n),delete listenerBank[n][t]}},extractEvents:function(e,t,n,r){for(var i,u=EventPluginRegistry.plugins,s=0;s<u.length;s++){var a=u[s];if(a){var o=a.extractEvents(e,t,n,r);o&&(i=accumulateInto(i,o))}}return i},enqueueEvents:function(e){e&&(eventQueue=accumulateInto(eventQueue,e))},processEventQueue:function(e){var t=eventQueue;eventQueue=null,forEachAccumulated(t,e?executeDispatchesAndReleaseSimulated:executeDispatchesAndReleaseTopLevel),eventQueue&&("production"!==process.env.NODE_ENV?invariant(!1,"processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented."):_prodInvariant("95")),ReactErrorUtils.rethrowCaughtError()},__purge:function(){listenerBank={}},__getListenerBank:function(){return listenerBank}};module.exports=EventPluginHub;

}).call(this,require('_process'))

},{"./EventPluginRegistry":619,"./EventPluginUtils":620,"./ReactErrorUtils":655,"./accumulateInto":699,"./forEachAccumulated":707,"./reactProdInvariant":722,"_process":484,"fbjs/lib/invariant":472}],619:[function(require,module,exports){
(function (process){
"use strict";var _prodInvariant=require("./reactProdInvariant"),invariant=require("fbjs/lib/invariant"),eventPluginOrder=null,namesToPlugins={};function recomputePluginOrdering(){if(eventPluginOrder)for(var e in namesToPlugins){var n=namesToPlugins[e],i=eventPluginOrder.indexOf(e);if(i>-1||("production"!==process.env.NODE_ENV?invariant(!1,"EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.",e):_prodInvariant("96",e)),!EventPluginRegistry.plugins[i]){n.extractEvents||("production"!==process.env.NODE_ENV?invariant(!1,"EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.",e):_prodInvariant("97",e)),EventPluginRegistry.plugins[i]=n;var t=n.eventTypes;for(var r in t)publishEventForPlugin(t[r],n,r)||("production"!==process.env.NODE_ENV?invariant(!1,"EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.",r,e):_prodInvariant("98",r,e))}}}function publishEventForPlugin(e,n,i){EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(i)&&("production"!==process.env.NODE_ENV?invariant(!1,"EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.",i):_prodInvariant("99",i)),EventPluginRegistry.eventNameDispatchConfigs[i]=e;var t=e.phasedRegistrationNames;if(t){for(var r in t){if(t.hasOwnProperty(r))publishRegistrationName(t[r],n,i)}return!0}return!!e.registrationName&&(publishRegistrationName(e.registrationName,n,i),!0)}function publishRegistrationName(e,n,i){if(EventPluginRegistry.registrationNameModules[e]&&("production"!==process.env.NODE_ENV?invariant(!1,"EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.",e):_prodInvariant("100",e)),EventPluginRegistry.registrationNameModules[e]=n,EventPluginRegistry.registrationNameDependencies[e]=n.eventTypes[i].dependencies,"production"!==process.env.NODE_ENV){var t=e.toLowerCase();EventPluginRegistry.possibleRegistrationNames[t]=e,"onDoubleClick"===e&&(EventPluginRegistry.possibleRegistrationNames.ondblclick=e)}}var EventPluginRegistry={plugins:[],eventNameDispatchConfigs:{},registrationNameModules:{},registrationNameDependencies:{},possibleRegistrationNames:"production"!==process.env.NODE_ENV?{}:null,injectEventPluginOrder:function(e){eventPluginOrder&&("production"!==process.env.NODE_ENV?invariant(!1,"EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React."):_prodInvariant("101")),eventPluginOrder=Array.prototype.slice.call(e),recomputePluginOrdering()},injectEventPluginsByName:function(e){var n=!1;for(var i in e)if(e.hasOwnProperty(i)){var t=e[i];namesToPlugins.hasOwnProperty(i)&&namesToPlugins[i]===t||(namesToPlugins[i]&&("production"!==process.env.NODE_ENV?invariant(!1,"EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.",i):_prodInvariant("102",i)),namesToPlugins[i]=t,n=!0)}n&&recomputePluginOrdering()},getPluginModuleForEvent:function(e){var n=e.dispatchConfig;if(n.registrationName)return EventPluginRegistry.registrationNameModules[n.registrationName]||null;if(void 0!==n.phasedRegistrationNames){var i=n.phasedRegistrationNames;for(var t in i)if(i.hasOwnProperty(t)){var r=EventPluginRegistry.registrationNameModules[i[t]];if(r)return r}}return null},_resetEventPlugins:function(){for(var e in eventPluginOrder=null,namesToPlugins)namesToPlugins.hasOwnProperty(e)&&delete namesToPlugins[e];EventPluginRegistry.plugins.length=0;var n=EventPluginRegistry.eventNameDispatchConfigs;for(var i in n)n.hasOwnProperty(i)&&delete n[i];var t=EventPluginRegistry.registrationNameModules;for(var r in t)t.hasOwnProperty(r)&&delete t[r];if("production"!==process.env.NODE_ENV){var s=EventPluginRegistry.possibleRegistrationNames;for(var a in s)s.hasOwnProperty(a)&&delete s[a]}}};module.exports=EventPluginRegistry;

}).call(this,require('_process'))

},{"./reactProdInvariant":722,"_process":484,"fbjs/lib/invariant":472}],620:[function(require,module,exports){
(function (process){
"use strict";var ComponentTree,TreeTraversal,validateEventDispatches,_prodInvariant=require("./reactProdInvariant"),ReactErrorUtils=require("./ReactErrorUtils"),invariant=require("fbjs/lib/invariant"),warning=require("fbjs/lib/warning"),injection={injectComponentTree:function(e){ComponentTree=e,"production"!==process.env.NODE_ENV&&"production"!==process.env.NODE_ENV&&warning(e&&e.getNodeFromInstance&&e.getInstanceFromNode,"EventPluginUtils.injection.injectComponentTree(...): Injected module is missing getNodeFromInstance or getInstanceFromNode.")},injectTreeTraversal:function(e){TreeTraversal=e,"production"!==process.env.NODE_ENV&&"production"!==process.env.NODE_ENV&&warning(e&&e.isAncestor&&e.getLowestCommonAncestor,"EventPluginUtils.injection.injectTreeTraversal(...): Injected module is missing isAncestor or getLowestCommonAncestor.")}};function isEndish(e){return"topMouseUp"===e||"topTouchEnd"===e||"topTouchCancel"===e}function isMoveish(e){return"topMouseMove"===e||"topTouchMove"===e}function isStartish(e){return"topMouseDown"===e||"topTouchStart"===e}function executeDispatch(e,t,n,r){var s=e.type||"unknown-event";e.currentTarget=EventPluginUtils.getNodeFromInstance(r),t?ReactErrorUtils.invokeGuardedCallbackWithCatch(s,n,e):ReactErrorUtils.invokeGuardedCallback(s,n,e),e.currentTarget=null}function executeDispatchesInOrder(e,t){var n=e._dispatchListeners,r=e._dispatchInstances;if("production"!==process.env.NODE_ENV&&validateEventDispatches(e),Array.isArray(n))for(var s=0;s<n.length&&!e.isPropagationStopped();s++)executeDispatch(e,t,n[s],r[s]);else n&&executeDispatch(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null}function executeDispatchesInOrderStopAtTrueImpl(e){var t=e._dispatchListeners,n=e._dispatchInstances;if("production"!==process.env.NODE_ENV&&validateEventDispatches(e),Array.isArray(t)){for(var r=0;r<t.length&&!e.isPropagationStopped();r++)if(t[r](e,n[r]))return n[r]}else if(t&&t(e,n))return n;return null}function executeDispatchesInOrderStopAtTrue(e){var t=executeDispatchesInOrderStopAtTrueImpl(e);return e._dispatchInstances=null,e._dispatchListeners=null,t}function executeDirectDispatch(e){"production"!==process.env.NODE_ENV&&validateEventDispatches(e);var t=e._dispatchListeners,n=e._dispatchInstances;Array.isArray(t)&&("production"!==process.env.NODE_ENV?invariant(!1,"executeDirectDispatch(...): Invalid `event`."):_prodInvariant("103")),e.currentTarget=t?EventPluginUtils.getNodeFromInstance(n):null;var r=t?t(e):null;return e.currentTarget=null,e._dispatchListeners=null,e._dispatchInstances=null,r}function hasDispatches(e){return!!e._dispatchListeners}"production"!==process.env.NODE_ENV&&(validateEventDispatches=function(e){var t=e._dispatchListeners,n=e._dispatchInstances,r=Array.isArray(t),s=r?t.length:t?1:0,i=Array.isArray(n),a=i?n.length:n?1:0;"production"!==process.env.NODE_ENV&&warning(i===r&&a===s,"EventPluginUtils: Invalid `event`.")});var EventPluginUtils={isEndish:isEndish,isMoveish:isMoveish,isStartish:isStartish,executeDirectDispatch:executeDirectDispatch,executeDispatchesInOrder:executeDispatchesInOrder,executeDispatchesInOrderStopAtTrue:executeDispatchesInOrderStopAtTrue,hasDispatches:hasDispatches,getInstanceFromNode:function(e){return ComponentTree.getInstanceFromNode(e)},getNodeFromInstance:function(e){return ComponentTree.getNodeFromInstance(e)},isAncestor:function(e,t){return TreeTraversal.isAncestor(e,t)},getLowestCommonAncestor:function(e,t){return TreeTraversal.getLowestCommonAncestor(e,t)},getParentInstance:function(e){return TreeTraversal.getParentInstance(e)},traverseTwoPhase:function(e,t,n){return TreeTraversal.traverseTwoPhase(e,t,n)},traverseEnterLeave:function(e,t,n,r,s){return TreeTraversal.traverseEnterLeave(e,t,n,r,s)},injection:injection};module.exports=EventPluginUtils;

}).call(this,require('_process'))

},{"./ReactErrorUtils":655,"./reactProdInvariant":722,"_process":484,"fbjs/lib/invariant":472,"fbjs/lib/warning":479}],621:[function(require,module,exports){
(function (process){
"use strict";var EventPluginHub=require("./EventPluginHub"),EventPluginUtils=require("./EventPluginUtils"),accumulateInto=require("./accumulateInto"),forEachAccumulated=require("./forEachAccumulated"),warning=require("fbjs/lib/warning"),getListener=EventPluginHub.getListener;function listenerAtPhase(e,t,a){var c=t.dispatchConfig.phasedRegistrationNames[a];return getListener(e,c)}function accumulateDirectionalDispatches(e,t,a){"production"!==process.env.NODE_ENV&&"production"!==process.env.NODE_ENV&&warning(e,"Dispatching inst must not be null");var c=listenerAtPhase(e,a,t);c&&(a._dispatchListeners=accumulateInto(a._dispatchListeners,c),a._dispatchInstances=accumulateInto(a._dispatchInstances,e))}function accumulateTwoPhaseDispatchesSingle(e){e&&e.dispatchConfig.phasedRegistrationNames&&EventPluginUtils.traverseTwoPhase(e._targetInst,accumulateDirectionalDispatches,e)}function accumulateTwoPhaseDispatchesSingleSkipTarget(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst,a=t?EventPluginUtils.getParentInstance(t):null;EventPluginUtils.traverseTwoPhase(a,accumulateDirectionalDispatches,e)}}function accumulateDispatches(e,t,a){if(a&&a.dispatchConfig.registrationName){var c=a.dispatchConfig.registrationName,s=getListener(e,c);s&&(a._dispatchListeners=accumulateInto(a._dispatchListeners,s),a._dispatchInstances=accumulateInto(a._dispatchInstances,e))}}function accumulateDirectDispatchesSingle(e){e&&e.dispatchConfig.registrationName&&accumulateDispatches(e._targetInst,null,e)}function accumulateTwoPhaseDispatches(e){forEachAccumulated(e,accumulateTwoPhaseDispatchesSingle)}function accumulateTwoPhaseDispatchesSkipTarget(e){forEachAccumulated(e,accumulateTwoPhaseDispatchesSingleSkipTarget)}function accumulateEnterLeaveDispatches(e,t,a,c){EventPluginUtils.traverseEnterLeave(a,c,accumulateDispatches,e,t)}function accumulateDirectDispatches(e){forEachAccumulated(e,accumulateDirectDispatchesSingle)}var EventPropagators={accumulateTwoPhaseDispatches:accumulateTwoPhaseDispatches,accumulateTwoPhaseDispatchesSkipTarget:accumulateTwoPhaseDispatchesSkipTarget,accumulateDirectDispatches:accumulateDirectDispatches,accumulateEnterLeaveDispatches:accumulateEnterLeaveDispatches};module.exports=EventPropagators;

}).call(this,require('_process'))

},{"./EventPluginHub":618,"./EventPluginUtils":620,"./accumulateInto":699,"./forEachAccumulated":707,"_process":484,"fbjs/lib/warning":479}],622:[function(require,module,exports){
"use strict";var _assign=require("object-assign"),PooledClass=require("./PooledClass"),getTextContentAccessor=require("./getTextContentAccessor");function FallbackCompositionState(t){this._root=t,this._startText=this.getText(),this._fallbackText=null}_assign(FallbackCompositionState.prototype,{destructor:function(){this._root=null,this._startText=null,this._fallbackText=null},getText:function(){return"value"in this._root?this._root.value:this._root[getTextContentAccessor()]},getData:function(){if(this._fallbackText)return this._fallbackText;var t,e,o=this._startText,s=o.length,a=this.getText(),l=a.length;for(t=0;t<s&&o[t]===a[t];t++);var i=s-t;for(e=1;e<=i&&o[s-e]===a[l-e];e++);var r=e>1?1-e:void 0;return this._fallbackText=a.slice(t,r),this._fallbackText}}),PooledClass.addPoolingTo(FallbackCompositionState),module.exports=FallbackCompositionState;

},{"./PooledClass":626,"./getTextContentAccessor":715,"object-assign":483}],623:[function(require,module,exports){
"use strict";var DOMProperty=require("./DOMProperty"),MUST_USE_PROPERTY=DOMProperty.injection.MUST_USE_PROPERTY,HAS_BOOLEAN_VALUE=DOMProperty.injection.HAS_BOOLEAN_VALUE,HAS_NUMERIC_VALUE=DOMProperty.injection.HAS_NUMERIC_VALUE,HAS_POSITIVE_NUMERIC_VALUE=DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE,HAS_OVERLOADED_BOOLEAN_VALUE=DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE,HTMLDOMPropertyConfig={isCustomAttribute:RegExp.prototype.test.bind(new RegExp("^(data|aria)-["+DOMProperty.ATTRIBUTE_NAME_CHAR+"]*$")),Properties:{accept:0,acceptCharset:0,accessKey:0,action:0,allowFullScreen:HAS_BOOLEAN_VALUE,allowTransparency:0,alt:0,as:0,async:HAS_BOOLEAN_VALUE,autoComplete:0,autoPlay:HAS_BOOLEAN_VALUE,capture:HAS_BOOLEAN_VALUE,cellPadding:0,cellSpacing:0,charSet:0,challenge:0,checked:MUST_USE_PROPERTY|HAS_BOOLEAN_VALUE,cite:0,classID:0,className:0,cols:HAS_POSITIVE_NUMERIC_VALUE,colSpan:0,content:0,contentEditable:0,contextMenu:0,controls:HAS_BOOLEAN_VALUE,controlsList:0,coords:0,crossOrigin:0,data:0,dateTime:0,default:HAS_BOOLEAN_VALUE,defer:HAS_BOOLEAN_VALUE,dir:0,disabled:HAS_BOOLEAN_VALUE,download:HAS_OVERLOADED_BOOLEAN_VALUE,draggable:0,encType:0,form:0,formAction:0,formEncType:0,formMethod:0,formNoValidate:HAS_BOOLEAN_VALUE,formTarget:0,frameBorder:0,headers:0,height:0,hidden:HAS_BOOLEAN_VALUE,high:0,href:0,hrefLang:0,htmlFor:0,httpEquiv:0,icon:0,id:0,inputMode:0,integrity:0,is:0,keyParams:0,keyType:0,kind:0,label:0,lang:0,list:0,loop:HAS_BOOLEAN_VALUE,low:0,manifest:0,marginHeight:0,marginWidth:0,max:0,maxLength:0,media:0,mediaGroup:0,method:0,min:0,minLength:0,multiple:MUST_USE_PROPERTY|HAS_BOOLEAN_VALUE,muted:MUST_USE_PROPERTY|HAS_BOOLEAN_VALUE,name:0,nonce:0,noValidate:HAS_BOOLEAN_VALUE,open:HAS_BOOLEAN_VALUE,optimum:0,pattern:0,placeholder:0,playsInline:HAS_BOOLEAN_VALUE,poster:0,preload:0,profile:0,radioGroup:0,readOnly:HAS_BOOLEAN_VALUE,referrerPolicy:0,rel:0,required:HAS_BOOLEAN_VALUE,reversed:HAS_BOOLEAN_VALUE,role:0,rows:HAS_POSITIVE_NUMERIC_VALUE,rowSpan:HAS_NUMERIC_VALUE,sandbox:0,scope:0,scoped:HAS_BOOLEAN_VALUE,scrolling:0,seamless:HAS_BOOLEAN_VALUE,selected:MUST_USE_PROPERTY|HAS_BOOLEAN_VALUE,shape:0,size:HAS_POSITIVE_NUMERIC_VALUE,sizes:0,span:HAS_POSITIVE_NUMERIC_VALUE,spellCheck:0,src:0,srcDoc:0,srcLang:0,srcSet:0,start:HAS_NUMERIC_VALUE,step:0,style:0,summary:0,tabIndex:0,target:0,title:0,type:0,useMap:0,value:0,width:0,wmode:0,wrap:0,about:0,datatype:0,inlist:0,prefix:0,property:0,resource:0,typeof:0,vocab:0,autoCapitalize:0,autoCorrect:0,autoSave:0,color:0,itemProp:0,itemScope:HAS_BOOLEAN_VALUE,itemType:0,itemID:0,itemRef:0,results:0,security:0,unselectable:0},DOMAttributeNames:{acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"},DOMPropertyNames:{},DOMMutationMethods:{value:function(e,t){if(null==t)return e.removeAttribute("value");"number"!==e.type||!1===e.hasAttribute("value")?e.setAttribute("value",""+t):e.validity&&!e.validity.badInput&&e.ownerDocument.activeElement!==e&&e.setAttribute("value",""+t)}}};module.exports=HTMLDOMPropertyConfig;

},{"./DOMProperty":613}],624:[function(require,module,exports){
"use strict";function escape(e){var n={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return n[e]})}function unescape(e){var n={"=0":"=","=2":":"};return(""+("."===e[0]&&"$"===e[1]?e.substring(2):e.substring(1))).replace(/(=0|=2)/g,function(e){return n[e]})}var KeyEscapeUtils={escape:escape,unescape:unescape};module.exports=KeyEscapeUtils;

},{}],625:[function(require,module,exports){
(function (process){
"use strict";var _prodInvariant=require("./reactProdInvariant"),ReactPropTypesSecret=require("./ReactPropTypesSecret"),propTypesFactory=require("prop-types/factory"),React=require("react/lib/React"),PropTypes=propTypesFactory(React.isValidElement),invariant=require("fbjs/lib/invariant"),warning=require("fbjs/lib/warning"),hasReadOnlyValue={button:!0,checkbox:!0,image:!0,hidden:!0,radio:!0,reset:!0,submit:!0};function _assertSingleLink(e){null!=e.checkedLink&&null!=e.valueLink&&("production"!==process.env.NODE_ENV?invariant(!1,"Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don't want to use valueLink and vice versa."):_prodInvariant("87"))}function _assertValueLink(e){_assertSingleLink(e),(null!=e.value||null!=e.onChange)&&("production"!==process.env.NODE_ENV?invariant(!1,"Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don't want to use valueLink."):_prodInvariant("88"))}function _assertCheckedLink(e){_assertSingleLink(e),(null!=e.checked||null!=e.onChange)&&("production"!==process.env.NODE_ENV?invariant(!1,"Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don't want to use checkedLink"):_prodInvariant("89"))}var propTypes={value:function(e,n,a){return!e[n]||hasReadOnlyValue[e.type]||e.onChange||e.readOnly||e.disabled?null:new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.")},checked:function(e,n,a){return!e[n]||e.onChange||e.readOnly||e.disabled?null:new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.")},onChange:PropTypes.func},loggedTypeFailures={};function getDeclarationErrorAddendum(e){if(e){var n=e.getName();if(n)return" Check the render method of `"+n+"`."}return""}var LinkedValueUtils={checkPropTypes:function(e,n,a){for(var r in propTypes){if(propTypes.hasOwnProperty(r))var o=propTypes[r](n,r,e,"prop",null,ReactPropTypesSecret);if(o instanceof Error&&!(o.message in loggedTypeFailures)){loggedTypeFailures[o.message]=!0;var t=getDeclarationErrorAddendum(a);"production"!==process.env.NODE_ENV&&warning(!1,"Failed form propType: %s%s",o.message,t)}}},getValue:function(e){return e.valueLink?(_assertValueLink(e),e.valueLink.value):e.value},getChecked:function(e){return e.checkedLink?(_assertCheckedLink(e),e.checkedLink.value):e.checked},executeOnChange:function(e,n){return e.valueLink?(_assertValueLink(e),e.valueLink.requestChange(n.target.value)):e.checkedLink?(_assertCheckedLink(e),e.checkedLink.requestChange(n.target.checked)):e.onChange?e.onChange.call(void 0,n):void 0}};module.exports=LinkedValueUtils;

}).call(this,require('_process'))

},{"./ReactPropTypesSecret":672,"./reactProdInvariant":722,"_process":484,"fbjs/lib/invariant":472,"fbjs/lib/warning":479,"prop-types/factory":492,"react/lib/React":754}],626:[function(require,module,exports){
(function (process){
"use strict";var _prodInvariant=require("./reactProdInvariant"),invariant=require("fbjs/lib/invariant"),oneArgumentPooler=function(o){if(this.instancePool.length){var e=this.instancePool.pop();return this.call(e,o),e}return new this(o)},twoArgumentPooler=function(o,e){if(this.instancePool.length){var n=this.instancePool.pop();return this.call(n,o,e),n}return new this(o,e)},threeArgumentPooler=function(o,e,n){if(this.instancePool.length){var t=this.instancePool.pop();return this.call(t,o,e,n),t}return new this(o,e,n)},fourArgumentPooler=function(o,e,n,t){if(this.instancePool.length){var r=this.instancePool.pop();return this.call(r,o,e,n,t),r}return new this(o,e,n,t)},standardReleaser=function(o){o instanceof this||("production"!==process.env.NODE_ENV?invariant(!1,"Trying to release an instance into a pool of a different type."):_prodInvariant("25")),o.destructor(),this.instancePool.length<this.poolSize&&this.instancePool.push(o)},DEFAULT_POOL_SIZE=10,DEFAULT_POOLER=oneArgumentPooler,addPoolingTo=function(o,e){var n=o;return n.instancePool=[],n.getPooled=e||DEFAULT_POOLER,n.poolSize||(n.poolSize=DEFAULT_POOL_SIZE),n.release=standardReleaser,n},PooledClass={addPoolingTo:addPoolingTo,oneArgumentPooler:oneArgumentPooler,twoArgumentPooler:twoArgumentPooler,threeArgumentPooler:threeArgumentPooler,fourArgumentPooler:fourArgumentPooler};module.exports=PooledClass;

}).call(this,require('_process'))

},{"./reactProdInvariant":722,"_process":484,"fbjs/lib/invariant":472}],627:[function(require,module,exports){
"use strict";var hasEventPageXY,_assign=require("object-assign"),EventPluginRegistry=require("./EventPluginRegistry"),ReactEventEmitterMixin=require("./ReactEventEmitterMixin"),ViewportMetrics=require("./ViewportMetrics"),getVendorPrefixedEventName=require("./getVendorPrefixedEventName"),isEventSupported=require("./isEventSupported"),alreadyListeningTo={},isMonitoringScrollValue=!1,reactTopListenersCounter=0,topEventMapping={topAbort:"abort",topAnimationEnd:getVendorPrefixedEventName("animationend")||"animationend",topAnimationIteration:getVendorPrefixedEventName("animationiteration")||"animationiteration",topAnimationStart:getVendorPrefixedEventName("animationstart")||"animationstart",topBlur:"blur",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topChange:"change",topClick:"click",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topScroll:"scroll",topSeeked:"seeked",topSeeking:"seeking",topSelectionChange:"selectionchange",topStalled:"stalled",topSuspend:"suspend",topTextInput:"textInput",topTimeUpdate:"timeupdate",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:getVendorPrefixedEventName("transitionend")||"transitionend",topVolumeChange:"volumechange",topWaiting:"waiting",topWheel:"wheel"},topListenersIDKey="_reactListenersID"+String(Math.random()).slice(2);function getListeningForDocument(e){return Object.prototype.hasOwnProperty.call(e,topListenersIDKey)||(e[topListenersIDKey]=reactTopListenersCounter++,alreadyListeningTo[e[topListenersIDKey]]={}),alreadyListeningTo[e[topListenersIDKey]]}var ReactBrowserEventEmitter=_assign({},ReactEventEmitterMixin,{ReactEventListener:null,injection:{injectReactEventListener:function(e){e.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel),ReactBrowserEventEmitter.ReactEventListener=e}},setEnabled:function(e){ReactBrowserEventEmitter.ReactEventListener&&ReactBrowserEventEmitter.ReactEventListener.setEnabled(e)},isEnabled:function(){return!(!ReactBrowserEventEmitter.ReactEventListener||!ReactBrowserEventEmitter.ReactEventListener.isEnabled())},listenTo:function(e,t){for(var n=t,o=getListeningForDocument(n),r=EventPluginRegistry.registrationNameDependencies[e],a=0;a<r.length;a++){var i=r[a];o.hasOwnProperty(i)&&o[i]||("topWheel"===i?isEventSupported("wheel")?ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent("topWheel","wheel",n):isEventSupported("mousewheel")?ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent("topWheel","mousewheel",n):ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent("topWheel","DOMMouseScroll",n):"topScroll"===i?isEventSupported("scroll",!0)?ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent("topScroll","scroll",n):ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent("topScroll","scroll",ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE):"topFocus"===i||"topBlur"===i?(isEventSupported("focus",!0)?(ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent("topFocus","focus",n),ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent("topBlur","blur",n)):isEventSupported("focusin")&&(ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent("topFocus","focusin",n),ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent("topBlur","focusout",n)),o.topBlur=!0,o.topFocus=!0):topEventMapping.hasOwnProperty(i)&&ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(i,topEventMapping[i],n),o[i]=!0)}},trapBubbledEvent:function(e,t,n){return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(e,t,n)},trapCapturedEvent:function(e,t,n){return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(e,t,n)},supportsEventPageXY:function(){if(!document.createEvent)return!1;var e=document.createEvent("MouseEvent");return null!=e&&"pageX"in e},ensureScrollValueMonitoring:function(){if(void 0===hasEventPageXY&&(hasEventPageXY=ReactBrowserEventEmitter.supportsEventPageXY()),!hasEventPageXY&&!isMonitoringScrollValue){var e=ViewportMetrics.refreshScrollValues;ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(e),isMonitoringScrollValue=!0}}});module.exports=ReactBrowserEventEmitter;

},{"./EventPluginRegistry":619,"./ReactEventEmitterMixin":656,"./ViewportMetrics":698,"./getVendorPrefixedEventName":716,"./isEventSupported":719,"object-assign":483}],628:[function(require,module,exports){
(function (process){
"use strict";var ReactComponentTreeHook,ReactReconciler=require("./ReactReconciler"),instantiateReactComponent=require("./instantiateReactComponent"),KeyEscapeUtils=require("./KeyEscapeUtils"),shouldUpdateReactComponent=require("./shouldUpdateReactComponent"),traverseAllChildren=require("./traverseAllChildren"),warning=require("fbjs/lib/warning");function instantiateChild(e,n,t,o){var r=void 0===e[t];"production"!==process.env.NODE_ENV&&(ReactComponentTreeHook||(ReactComponentTreeHook=require("react/lib/ReactComponentTreeHook")),r||"production"!==process.env.NODE_ENV&&warning(!1,"flattenChildren(...): Encountered two children with the same key, `%s`. Child keys must be unique; when two children share a key, only the first child will be used.%s",KeyEscapeUtils.unescape(t),ReactComponentTreeHook.getStackAddendumByID(o))),null!=n&&r&&(e[t]=instantiateReactComponent(n,!0))}"undefined"!=typeof process&&process.env&&"test"===process.env.NODE_ENV&&(ReactComponentTreeHook=require("react/lib/ReactComponentTreeHook"));var ReactChildReconciler={instantiateChildren:function(e,n,t,o){if(null==e)return null;var r={};return"production"!==process.env.NODE_ENV?traverseAllChildren(e,function(e,n,t){return instantiateChild(e,n,t,o)},r):traverseAllChildren(e,instantiateChild,r),r},updateChildren:function(e,n,t,o,r,i,a,c,l){if(n||e){var s,u;for(s in n)if(n.hasOwnProperty(s)){var p=(u=e&&e[s])&&u._currentElement,d=n[s];if(null!=u&&shouldUpdateReactComponent(p,d))ReactReconciler.receiveComponent(u,d,r,c),n[s]=u;else{u&&(o[s]=ReactReconciler.getHostNode(u),ReactReconciler.unmountComponent(u,!1));var R=instantiateReactComponent(d,!0);n[s]=R;var C=ReactReconciler.mountComponent(R,r,i,a,c,l);t.push(C)}}for(s in e)!e.hasOwnProperty(s)||n&&n.hasOwnProperty(s)||(u=e[s],o[s]=ReactReconciler.getHostNode(u),ReactReconciler.unmountComponent(u,!1))}},unmountChildren:function(e,n){for(var t in e)if(e.hasOwnProperty(t)){var o=e[t];ReactReconciler.unmountComponent(o,n)}}};module.exports=ReactChildReconciler;

}).call(this,require('_process'))

},{"./KeyEscapeUtils":624,"./ReactReconciler":674,"./instantiateReactComponent":718,"./shouldUpdateReactComponent":726,"./traverseAllChildren":727,"_process":484,"fbjs/lib/warning":479,"react/lib/ReactComponentTreeHook":757}],629:[function(require,module,exports){
"use strict";var DOMChildrenOperations=require("./DOMChildrenOperations"),ReactDOMIDOperations=require("./ReactDOMIDOperations"),ReactComponentBrowserEnvironment={processChildrenUpdates:ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,replaceNodeWithMarkup:DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup};module.exports=ReactComponentBrowserEnvironment;

},{"./DOMChildrenOperations":610,"./ReactDOMIDOperations":639}],630:[function(require,module,exports){
(function (process){
"use strict";var _prodInvariant=require("./reactProdInvariant"),invariant=require("fbjs/lib/invariant"),injected=!1,ReactComponentEnvironment={replaceNodeWithMarkup:null,processChildrenUpdates:null,injection:{injectEnvironment:function(n){injected&&("production"!==process.env.NODE_ENV?invariant(!1,"ReactCompositeComponent: injectEnvironment() can only be called once."):_prodInvariant("104")),ReactComponentEnvironment.replaceNodeWithMarkup=n.replaceNodeWithMarkup,ReactComponentEnvironment.processChildrenUpdates=n.processChildrenUpdates,injected=!0}}};module.exports=ReactComponentEnvironment;

}).call(this,require('_process'))

},{"./reactProdInvariant":722,"_process":484,"fbjs/lib/invariant":472}],631:[function(require,module,exports){
(function (process){
"use strict";var _prodInvariant=require("./reactProdInvariant"),_assign=require("object-assign"),React=require("react/lib/React"),ReactComponentEnvironment=require("./ReactComponentEnvironment"),ReactCurrentOwner=require("react/lib/ReactCurrentOwner"),ReactErrorUtils=require("./ReactErrorUtils"),ReactInstanceMap=require("./ReactInstanceMap"),ReactInstrumentation=require("./ReactInstrumentation"),ReactNodeTypes=require("./ReactNodeTypes"),ReactReconciler=require("./ReactReconciler");if("production"!==process.env.NODE_ENV)var checkReactTypeSpec=require("./checkReactTypeSpec");var emptyObject=require("fbjs/lib/emptyObject"),invariant=require("fbjs/lib/invariant"),shallowEqual=require("fbjs/lib/shallowEqual"),shouldUpdateReactComponent=require("./shouldUpdateReactComponent"),warning=require("fbjs/lib/warning"),CompositeTypes={ImpureClass:0,PureClass:1,StatelessFunctional:2};function StatelessComponent(e){}function warnIfInvalidElement(e,t){"production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV&&warning(null===t||!1===t||React.isValidElement(t),"%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.",e.displayName||e.name||"Component"),"production"!==process.env.NODE_ENV&&warning(!e.childContextTypes,"%s(...): childContextTypes cannot be defined on a functional component.",e.displayName||e.name||"Component"))}function shouldConstruct(e){return!(!e.prototype||!e.prototype.isReactComponent)}function isPureComponent(e){return!(!e.prototype||!e.prototype.isPureReactComponent)}function measureLifeCyclePerf(e,t,n){if(0===t)return e();ReactInstrumentation.debugTool.onBeginLifeCycleTimer(t,n);try{return e()}finally{ReactInstrumentation.debugTool.onEndLifeCycleTimer(t,n)}}StatelessComponent.prototype.render=function(){var e=ReactInstanceMap.get(this)._currentElement.type,t=e(this.props,this.context,this.updater);return warnIfInvalidElement(e,t),t};var nextMountID=1,ReactCompositeComponent={construct:function(e){this._currentElement=e,this._rootNodeID=0,this._compositeType=null,this._instance=null,this._hostParent=null,this._hostContainerInfo=null,this._updateBatchNumber=null,this._pendingElement=null,this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,this._renderedNodeType=null,this._renderedComponent=null,this._context=null,this._mountOrder=0,this._topLevelWrapper=null,this._pendingCallbacks=null,this._calledComponentWillUnmount=!1,"production"!==process.env.NODE_ENV&&(this._warnedAboutRefsInRender=!1)},mountComponent:function(e,t,n,o){var i=this;this._context=o,this._mountOrder=nextMountID++,this._hostParent=t,this._hostContainerInfo=n;var r,s=this._currentElement.props,a=this._processContext(o),c=this._currentElement.type,p=e.getUpdateQueue(),u=shouldConstruct(c),l=this._constructComponent(u,s,a,p);if(u||null!=l&&null!=l.render?isPureComponent(c)?this._compositeType=CompositeTypes.PureClass:this._compositeType=CompositeTypes.ImpureClass:(warnIfInvalidElement(c,r=l),null===l||!1===l||React.isValidElement(l)||("production"!==process.env.NODE_ENV?invariant(!1,"%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.",c.displayName||c.name||"Component"):_prodInvariant("105",c.displayName||c.name||"Component")),l=new StatelessComponent(c),this._compositeType=CompositeTypes.StatelessFunctional),"production"!==process.env.NODE_ENV){null==l.render&&"production"!==process.env.NODE_ENV&&warning(!1,"%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.",c.displayName||c.name||"Component");var d=l.props!==s,m=c.displayName||c.name||"Component";"production"!==process.env.NODE_ENV&&warning(void 0===l.props||!d,"%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.",m,m)}l.props=s,l.context=a,l.refs=emptyObject,l.updater=p,this._instance=l,ReactInstanceMap.set(l,this),"production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV&&warning(!l.getInitialState||l.getInitialState.isReactClassApproved||l.state,"getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?",this.getName()||"a component"),"production"!==process.env.NODE_ENV&&warning(!l.getDefaultProps||l.getDefaultProps.isReactClassApproved,"getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.",this.getName()||"a component"),"production"!==process.env.NODE_ENV&&warning(!l.propTypes,"propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.",this.getName()||"a component"),"production"!==process.env.NODE_ENV&&warning(!l.contextTypes,"contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.",this.getName()||"a component"),"production"!==process.env.NODE_ENV&&warning("function"!=typeof l.componentShouldUpdate,"%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",this.getName()||"A component"),"production"!==process.env.NODE_ENV&&warning("function"!=typeof l.componentDidUnmount,"%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?",this.getName()||"A component"),"production"!==process.env.NODE_ENV&&warning("function"!=typeof l.componentWillRecieveProps,"%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",this.getName()||"A component"));var h,_=l.state;return void 0===_&&(l.state=_=null),("object"!=typeof _||Array.isArray(_))&&("production"!==process.env.NODE_ENV?invariant(!1,"%s.state: must be set to an object or null",this.getName()||"ReactCompositeComponent"):_prodInvariant("106",this.getName()||"ReactCompositeComponent")),this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,h=l.unstable_handleError?this.performInitialMountWithErrorHandling(r,t,n,e,o):this.performInitialMount(r,t,n,e,o),l.componentDidMount&&("production"!==process.env.NODE_ENV?e.getReactMountReady().enqueue(function(){measureLifeCyclePerf(function(){return l.componentDidMount()},i._debugID,"componentDidMount")}):e.getReactMountReady().enqueue(l.componentDidMount,l)),h},_constructComponent:function(e,t,n,o){if("production"===process.env.NODE_ENV||e)return this._constructComponentWithoutOwner(e,t,n,o);ReactCurrentOwner.current=this;try{return this._constructComponentWithoutOwner(e,t,n,o)}finally{ReactCurrentOwner.current=null}},_constructComponentWithoutOwner:function(e,t,n,o){var i=this._currentElement.type;return e?"production"!==process.env.NODE_ENV?measureLifeCyclePerf(function(){return new i(t,n,o)},this._debugID,"ctor"):new i(t,n,o):"production"!==process.env.NODE_ENV?measureLifeCyclePerf(function(){return i(t,n,o)},this._debugID,"render"):i(t,n,o)},performInitialMountWithErrorHandling:function(e,t,n,o,i){var r,s=o.checkpoint();try{r=this.performInitialMount(e,t,n,o,i)}catch(a){o.rollback(s),this._instance.unstable_handleError(a),this._pendingStateQueue&&(this._instance.state=this._processPendingState(this._instance.props,this._instance.context)),s=o.checkpoint(),this._renderedComponent.unmountComponent(!0),o.rollback(s),r=this.performInitialMount(e,t,n,o,i)}return r},performInitialMount:function(e,t,n,o,i){var r=this._instance,s=0;"production"!==process.env.NODE_ENV&&(s=this._debugID),r.componentWillMount&&("production"!==process.env.NODE_ENV?measureLifeCyclePerf(function(){return r.componentWillMount()},s,"componentWillMount"):r.componentWillMount(),this._pendingStateQueue&&(r.state=this._processPendingState(r.props,r.context))),void 0===e&&(e=this._renderValidatedComponent());var a=ReactNodeTypes.getType(e);this._renderedNodeType=a;var c=this._instantiateReactComponent(e,a!==ReactNodeTypes.EMPTY);this._renderedComponent=c;var p=ReactReconciler.mountComponent(c,o,t,n,this._processChildContext(i),s);if("production"!==process.env.NODE_ENV&&0!==s){var u=0!==c._debugID?[c._debugID]:[];ReactInstrumentation.debugTool.onSetChildren(s,u)}return p},getHostNode:function(){return ReactReconciler.getHostNode(this._renderedComponent)},unmountComponent:function(e){if(this._renderedComponent){var t=this._instance;if(t.componentWillUnmount&&!t._calledComponentWillUnmount)if(t._calledComponentWillUnmount=!0,e){var n=this.getName()+".componentWillUnmount()";ReactErrorUtils.invokeGuardedCallback(n,t.componentWillUnmount.bind(t))}else"production"!==process.env.NODE_ENV?measureLifeCyclePerf(function(){return t.componentWillUnmount()},this._debugID,"componentWillUnmount"):t.componentWillUnmount();this._renderedComponent&&(ReactReconciler.unmountComponent(this._renderedComponent,e),this._renderedNodeType=null,this._renderedComponent=null,this._instance=null),this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,this._pendingCallbacks=null,this._pendingElement=null,this._context=null,this._rootNodeID=0,this._topLevelWrapper=null,ReactInstanceMap.remove(t)}},_maskContext:function(e){var t=this._currentElement.type.contextTypes;if(!t)return emptyObject;var n={};for(var o in t)n[o]=e[o];return n},_processContext:function(e){var t=this._maskContext(e);if("production"!==process.env.NODE_ENV){var n=this._currentElement.type;n.contextTypes&&this._checkContextTypes(n.contextTypes,t,"context")}return t},_processChildContext:function(e){var t,n=this._currentElement.type,o=this._instance;if(o.getChildContext)if("production"!==process.env.NODE_ENV){ReactInstrumentation.debugTool.onBeginProcessingChildContext();try{t=o.getChildContext()}finally{ReactInstrumentation.debugTool.onEndProcessingChildContext()}}else t=o.getChildContext();if(t){for(var i in"object"!=typeof n.childContextTypes&&("production"!==process.env.NODE_ENV?invariant(!1,"%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().",this.getName()||"ReactCompositeComponent"):_prodInvariant("107",this.getName()||"ReactCompositeComponent")),"production"!==process.env.NODE_ENV&&this._checkContextTypes(n.childContextTypes,t,"child context"),t)i in n.childContextTypes||("production"!==process.env.NODE_ENV?invariant(!1,'%s.getChildContext(): key "%s" is not defined in childContextTypes.',this.getName()||"ReactCompositeComponent",i):_prodInvariant("108",this.getName()||"ReactCompositeComponent",i));return _assign({},e,t)}return e},_checkContextTypes:function(e,t,n){"production"!==process.env.NODE_ENV&&checkReactTypeSpec(e,t,n,this.getName(),null,this._debugID)},receiveComponent:function(e,t,n){var o=this._currentElement,i=this._context;this._pendingElement=null,this.updateComponent(t,o,e,i,n)},performUpdateIfNecessary:function(e){null!=this._pendingElement?ReactReconciler.receiveComponent(this,this._pendingElement,e,this._context):null!==this._pendingStateQueue||this._pendingForceUpdate?this.updateComponent(e,this._currentElement,this._currentElement,this._context,this._context):this._updateBatchNumber=null},updateComponent:function(e,t,n,o,i){var r=this._instance;null==r&&("production"!==process.env.NODE_ENV?invariant(!1,"Attempted to update component `%s` that has already been unmounted (or failed to mount).",this.getName()||"ReactCompositeComponent"):_prodInvariant("136",this.getName()||"ReactCompositeComponent"));var s,a=!1;this._context===i?s=r.context:(s=this._processContext(i),a=!0);var c=t.props,p=n.props;t!==n&&(a=!0),a&&r.componentWillReceiveProps&&("production"!==process.env.NODE_ENV?measureLifeCyclePerf(function(){return r.componentWillReceiveProps(p,s)},this._debugID,"componentWillReceiveProps"):r.componentWillReceiveProps(p,s));var u=this._processPendingState(p,s),l=!0;this._pendingForceUpdate||(r.shouldComponentUpdate?l="production"!==process.env.NODE_ENV?measureLifeCyclePerf(function(){return r.shouldComponentUpdate(p,u,s)},this._debugID,"shouldComponentUpdate"):r.shouldComponentUpdate(p,u,s):this._compositeType===CompositeTypes.PureClass&&(l=!shallowEqual(c,p)||!shallowEqual(r.state,u))),"production"!==process.env.NODE_ENV&&"production"!==process.env.NODE_ENV&&warning(void 0!==l,"%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.",this.getName()||"ReactCompositeComponent"),this._updateBatchNumber=null,l?(this._pendingForceUpdate=!1,this._performComponentUpdate(n,p,u,s,e,i)):(this._currentElement=n,this._context=i,r.props=p,r.state=u,r.context=s)},_processPendingState:function(e,t){var n=this._instance,o=this._pendingStateQueue,i=this._pendingReplaceState;if(this._pendingReplaceState=!1,this._pendingStateQueue=null,!o)return n.state;if(i&&1===o.length)return o[0];for(var r=_assign({},i?o[0]:n.state),s=i?1:0;s<o.length;s++){var a=o[s];_assign(r,"function"==typeof a?a.call(n,r,e,t):a)}return r},_performComponentUpdate:function(e,t,n,o,i,r){var s,a,c,p=this,u=this._instance,l=Boolean(u.componentDidUpdate);l&&(s=u.props,a=u.state,c=u.context),u.componentWillUpdate&&("production"!==process.env.NODE_ENV?measureLifeCyclePerf(function(){return u.componentWillUpdate(t,n,o)},this._debugID,"componentWillUpdate"):u.componentWillUpdate(t,n,o)),this._currentElement=e,this._context=r,u.props=t,u.state=n,u.context=o,this._updateRenderedComponent(i,r),l&&("production"!==process.env.NODE_ENV?i.getReactMountReady().enqueue(function(){measureLifeCyclePerf(u.componentDidUpdate.bind(u,s,a,c),p._debugID,"componentDidUpdate")}):i.getReactMountReady().enqueue(u.componentDidUpdate.bind(u,s,a,c),u))},_updateRenderedComponent:function(e,t){var n=this._renderedComponent,o=n._currentElement,i=this._renderValidatedComponent(),r=0;if("production"!==process.env.NODE_ENV&&(r=this._debugID),shouldUpdateReactComponent(o,i))ReactReconciler.receiveComponent(n,i,e,this._processChildContext(t));else{var s=ReactReconciler.getHostNode(n);ReactReconciler.unmountComponent(n,!1);var a=ReactNodeTypes.getType(i);this._renderedNodeType=a;var c=this._instantiateReactComponent(i,a!==ReactNodeTypes.EMPTY);this._renderedComponent=c;var p=ReactReconciler.mountComponent(c,e,this._hostParent,this._hostContainerInfo,this._processChildContext(t),r);if("production"!==process.env.NODE_ENV&&0!==r){var u=0!==c._debugID?[c._debugID]:[];ReactInstrumentation.debugTool.onSetChildren(r,u)}this._replaceNodeWithMarkup(s,p,n)}},_replaceNodeWithMarkup:function(e,t,n){ReactComponentEnvironment.replaceNodeWithMarkup(e,t,n)},_renderValidatedComponentWithoutOwnerOrContext:function(){var e,t=this._instance;return e="production"!==process.env.NODE_ENV?measureLifeCyclePerf(function(){return t.render()},this._debugID,"render"):t.render(),"production"!==process.env.NODE_ENV&&void 0===e&&t.render._isMockFunction&&(e=null),e},_renderValidatedComponent:function(){var e;if("production"!==process.env.NODE_ENV||this._compositeType!==CompositeTypes.StatelessFunctional){ReactCurrentOwner.current=this;try{e=this._renderValidatedComponentWithoutOwnerOrContext()}finally{ReactCurrentOwner.current=null}}else e=this._renderValidatedComponentWithoutOwnerOrContext();return null===e||!1===e||React.isValidElement(e)||("production"!==process.env.NODE_ENV?invariant(!1,"%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.",this.getName()||"ReactCompositeComponent"):_prodInvariant("109",this.getName()||"ReactCompositeComponent")),e},attachRef:function(e,t){var n=this.getPublicInstance();null==n&&("production"!==process.env.NODE_ENV?invariant(!1,"Stateless function components cannot have refs."):_prodInvariant("110"));var o=t.getPublicInstance();if("production"!==process.env.NODE_ENV){var i=t&&t.getName?t.getName():"a component";"production"!==process.env.NODE_ENV&&warning(null!=o||t._compositeType!==CompositeTypes.StatelessFunctional,'Stateless function components cannot be given refs (See ref "%s" in %s created by %s). Attempts to access this ref will fail.',e,i,this.getName())}(n.refs===emptyObject?n.refs={}:n.refs)[e]=o},detachRef:function(e){delete this.getPublicInstance().refs[e]},getName:function(){var e=this._currentElement.type,t=this._instance&&this._instance.constructor;return e.displayName||t&&t.displayName||e.name||t&&t.name||null},getPublicInstance:function(){var e=this._instance;return this._compositeType===CompositeTypes.StatelessFunctional?null:e},_instantiateReactComponent:null};module.exports=ReactCompositeComponent;

}).call(this,require('_process'))

},{"./ReactComponentEnvironment":630,"./ReactErrorUtils":655,"./ReactInstanceMap":663,"./ReactInstrumentation":664,"./ReactNodeTypes":669,"./ReactReconciler":674,"./checkReactTypeSpec":701,"./reactProdInvariant":722,"./shouldUpdateReactComponent":726,"_process":484,"fbjs/lib/emptyObject":465,"fbjs/lib/invariant":472,"fbjs/lib/shallowEqual":478,"fbjs/lib/warning":479,"object-assign":483,"react/lib/React":754,"react/lib/ReactCurrentOwner":758}],632:[function(require,module,exports){
(function (process){
"use strict";var ReactDOMComponentTree=require("./ReactDOMComponentTree"),ReactDefaultInjection=require("./ReactDefaultInjection"),ReactMount=require("./ReactMount"),ReactReconciler=require("./ReactReconciler"),ReactUpdates=require("./ReactUpdates"),ReactVersion=require("./ReactVersion"),findDOMNode=require("./findDOMNode"),getHostComponentFromComposite=require("./getHostComponentFromComposite"),renderSubtreeIntoContainer=require("./renderSubtreeIntoContainer"),warning=require("fbjs/lib/warning");ReactDefaultInjection.inject();var ReactDOM={findDOMNode:findDOMNode,render:ReactMount.render,unmountComponentAtNode:ReactMount.unmountComponentAtNode,version:ReactVersion,unstable_batchedUpdates:ReactUpdates.batchedUpdates,unstable_renderSubtreeIntoContainer:renderSubtreeIntoContainer};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject&&__REACT_DEVTOOLS_GLOBAL_HOOK__.inject({ComponentTree:{getClosestInstanceFromNode:ReactDOMComponentTree.getClosestInstanceFromNode,getNodeFromInstance:function(e){return e._renderedComponent&&(e=getHostComponentFromComposite(e)),e?ReactDOMComponentTree.getNodeFromInstance(e):null}},Mount:ReactMount,Reconciler:ReactReconciler}),"production"!==process.env.NODE_ENV){var ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment");if(ExecutionEnvironment.canUseDOM&&window.top===window.self){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&(navigator.userAgent.indexOf("Chrome")>-1&&-1===navigator.userAgent.indexOf("Edge")||navigator.userAgent.indexOf("Firefox")>-1)){var showFileUrlMessage=-1===window.location.protocol.indexOf("http")&&-1===navigator.userAgent.indexOf("Firefox");console.debug("Download the React DevTools "+(showFileUrlMessage?"and use an HTTP server (instead of a file: URL) ":"")+"for a better development experience: https://fb.me/react-devtools")}var testFunc=function testFn(){};"production"!==process.env.NODE_ENV&&warning(-1!==(testFunc.name||testFunc.toString()).indexOf("testFn"),"It looks like you're using a minified copy of the development build of React. When deploying React apps to production, make sure to use the production build which skips development warnings and is faster. See https://fb.me/react-minification for more details.");var ieCompatibilityMode=document.documentMode&&document.documentMode<8;"production"!==process.env.NODE_ENV&&warning(!ieCompatibilityMode,'Internet Explorer is running in compatibility mode; please add the following tag to your HTML to prevent this from happening: <meta http-equiv="X-UA-Compatible" content="IE=edge" />');for(var expectedFeatures=[Array.isArray,Array.prototype.every,Array.prototype.forEach,Array.prototype.indexOf,Array.prototype.map,Date.now,Function.prototype.bind,Object.keys,String.prototype.trim],i=0;i<expectedFeatures.length;i++)if(!expectedFeatures[i]){"production"!==process.env.NODE_ENV&&warning(!1,"One or more ES5 shims expected by React are not available: https://fb.me/react-warning-polyfills");break}}}if("production"!==process.env.NODE_ENV){var ReactInstrumentation=require("./ReactInstrumentation"),ReactDOMUnknownPropertyHook=require("./ReactDOMUnknownPropertyHook"),ReactDOMNullInputValuePropHook=require("./ReactDOMNullInputValuePropHook"),ReactDOMInvalidARIAHook=require("./ReactDOMInvalidARIAHook");ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook),ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook),ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook)}module.exports=ReactDOM;

}).call(this,require('_process'))

},{"./ReactDOMComponentTree":635,"./ReactDOMInvalidARIAHook":641,"./ReactDOMNullInputValuePropHook":642,"./ReactDOMUnknownPropertyHook":649,"./ReactDefaultInjection":652,"./ReactInstrumentation":664,"./ReactMount":667,"./ReactReconciler":674,"./ReactUpdates":679,"./ReactVersion":680,"./findDOMNode":705,"./getHostComponentFromComposite":712,"./renderSubtreeIntoContainer":723,"_process":484,"fbjs/lib/ExecutionEnvironment":458,"fbjs/lib/warning":479}],633:[function(require,module,exports){
(function (process){
"use strict";var _prodInvariant=require("./reactProdInvariant"),_assign=require("object-assign"),AutoFocusUtils=require("./AutoFocusUtils"),CSSPropertyOperations=require("./CSSPropertyOperations"),DOMLazyTree=require("./DOMLazyTree"),DOMNamespaces=require("./DOMNamespaces"),DOMProperty=require("./DOMProperty"),DOMPropertyOperations=require("./DOMPropertyOperations"),EventPluginHub=require("./EventPluginHub"),EventPluginRegistry=require("./EventPluginRegistry"),ReactBrowserEventEmitter=require("./ReactBrowserEventEmitter"),ReactDOMComponentFlags=require("./ReactDOMComponentFlags"),ReactDOMComponentTree=require("./ReactDOMComponentTree"),ReactDOMInput=require("./ReactDOMInput"),ReactDOMOption=require("./ReactDOMOption"),ReactDOMSelect=require("./ReactDOMSelect"),ReactDOMTextarea=require("./ReactDOMTextarea"),ReactInstrumentation=require("./ReactInstrumentation"),ReactMultiChild=require("./ReactMultiChild"),ReactServerRenderingTransaction=require("./ReactServerRenderingTransaction"),emptyFunction=require("fbjs/lib/emptyFunction"),escapeTextContentForBrowser=require("./escapeTextContentForBrowser"),invariant=require("fbjs/lib/invariant"),isEventSupported=require("./isEventSupported"),shallowEqual=require("fbjs/lib/shallowEqual"),inputValueTracking=require("./inputValueTracking"),validateDOMNesting=require("./validateDOMNesting"),warning=require("fbjs/lib/warning"),Flags=ReactDOMComponentFlags,deleteListener=EventPluginHub.deleteListener,getNode=ReactDOMComponentTree.getNodeFromInstance,listenTo=ReactBrowserEventEmitter.listenTo,registrationNameModules=EventPluginRegistry.registrationNameModules,CONTENT_TYPES={string:!0,number:!0},STYLE="style",HTML="__html",RESERVED_PROPS={children:null,dangerouslySetInnerHTML:null,suppressContentEditableWarning:null},DOC_FRAGMENT_TYPE=11;function getDeclarationErrorAddendum(e){if(e){var t=e._currentElement._owner||null;if(t){var n=t.getName();if(n)return" This DOM node was rendered by `"+n+"`."}}return""}function friendlyStringify(e){if("object"==typeof e){if(Array.isArray(e))return"["+e.map(friendlyStringify).join(", ")+"]";var t=[];for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=/^[a-z$_][\w$_]*$/i.test(n)?n:JSON.stringify(n);t.push(r+": "+friendlyStringify(e[n]))}return"{"+t.join(", ")+"}"}return"string"==typeof e?JSON.stringify(e):"function"==typeof e?"[function object]":String(e)}var styleMutationWarning={};function checkAndWarnForMutatedStyle(e,t,n){if(null!=e&&null!=t&&!shallowEqual(e,t)){var r,o=n._tag,a=n._currentElement._owner;a&&(r=a.getName());var s=r+"|"+o;styleMutationWarning.hasOwnProperty(s)||(styleMutationWarning[s]=!0,"production"!==process.env.NODE_ENV&&warning(!1,"`%s` was passed a style object that has previously been mutated. Mutating `style` is deprecated. Consider cloning it beforehand. Check the `render` %s. Previous style: %s. Mutated style: %s.",o,a?"of `"+r+"`":"using <"+o+">",friendlyStringify(e),friendlyStringify(t)))}}function assertValidProps(e,t){t&&(voidElementTags[e._tag]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&("production"!==process.env.NODE_ENV?invariant(!1,"%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s",e._tag,e._currentElement._owner?" Check the render method of "+e._currentElement._owner.getName()+".":""):_prodInvariant("137",e._tag,e._currentElement._owner?" Check the render method of "+e._currentElement._owner.getName()+".":"")),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&("production"!==process.env.NODE_ENV?invariant(!1,"Can only set one of `children` or `props.dangerouslySetInnerHTML`."):_prodInvariant("60")),"object"==typeof t.dangerouslySetInnerHTML&&HTML in t.dangerouslySetInnerHTML||("production"!==process.env.NODE_ENV?invariant(!1,"`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information."):_prodInvariant("61"))),"production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV&&warning(null==t.innerHTML,"Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."),"production"!==process.env.NODE_ENV&&warning(t.suppressContentEditableWarning||!t.contentEditable||null==t.children,"A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."),"production"!==process.env.NODE_ENV&&warning(null==t.onFocusIn&&null==t.onFocusOut,"React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.")),null!=t.style&&"object"!=typeof t.style&&("production"!==process.env.NODE_ENV?invariant(!1,"The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.%s",getDeclarationErrorAddendum(e)):_prodInvariant("62",getDeclarationErrorAddendum(e))))}function enqueuePutListener(e,t,n,r){if(!(r instanceof ReactServerRenderingTransaction)){"production"!==process.env.NODE_ENV&&"production"!==process.env.NODE_ENV&&warning("onScroll"!==t||isEventSupported("scroll",!0),"This browser doesn't support the `onScroll` event");var o=e._hostContainerInfo,a=o._node&&o._node.nodeType===DOC_FRAGMENT_TYPE?o._node:o._ownerDocument;listenTo(t,a),r.getReactMountReady().enqueue(putListener,{inst:e,registrationName:t,listener:n})}}function putListener(){EventPluginHub.putListener(this.inst,this.registrationName,this.listener)}function inputPostMount(){ReactDOMInput.postMountWrapper(this)}function textareaPostMount(){ReactDOMTextarea.postMountWrapper(this)}function optionPostMount(){ReactDOMOption.postMountWrapper(this)}var setAndValidateContentChildDev=emptyFunction;"production"!==process.env.NODE_ENV&&(setAndValidateContentChildDev=function(e){var t=null!=this._contentDebugID,n=this._debugID,r=-n;if(null==e)return t&&ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID),void(this._contentDebugID=null);validateDOMNesting(null,String(e),this,this._ancestorInfo),this._contentDebugID=r,t?(ReactInstrumentation.debugTool.onBeforeUpdateComponent(r,e),ReactInstrumentation.debugTool.onUpdateComponent(r)):(ReactInstrumentation.debugTool.onBeforeMountComponent(r,e,n),ReactInstrumentation.debugTool.onMountComponent(r),ReactInstrumentation.debugTool.onSetChildren(n,[r]))});var mediaEvents={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"};function trackInputValue(){inputValueTracking.track(this)}function trapBubbledEventsLocal(){this._rootNodeID||("production"!==process.env.NODE_ENV?invariant(!1,"Must be mounted to trap events"):_prodInvariant("63"));var e=getNode(this);switch(e||("production"!==process.env.NODE_ENV?invariant(!1,"trapBubbledEvent(...): Requires node to be rendered."):_prodInvariant("64")),this._tag){case"iframe":case"object":this._wrapperState.listeners=[ReactBrowserEventEmitter.trapBubbledEvent("topLoad","load",e)];break;case"video":case"audio":for(var t in this._wrapperState.listeners=[],mediaEvents)mediaEvents.hasOwnProperty(t)&&this._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(t,mediaEvents[t],e));break;case"source":this._wrapperState.listeners=[ReactBrowserEventEmitter.trapBubbledEvent("topError","error",e)];break;case"img":this._wrapperState.listeners=[ReactBrowserEventEmitter.trapBubbledEvent("topError","error",e),ReactBrowserEventEmitter.trapBubbledEvent("topLoad","load",e)];break;case"form":this._wrapperState.listeners=[ReactBrowserEventEmitter.trapBubbledEvent("topReset","reset",e),ReactBrowserEventEmitter.trapBubbledEvent("topSubmit","submit",e)];break;case"input":case"select":case"textarea":this._wrapperState.listeners=[ReactBrowserEventEmitter.trapBubbledEvent("topInvalid","invalid",e)]}}function postUpdateSelectWrapper(){ReactDOMSelect.postUpdateWrapper(this)}var omittedCloseTags={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},newlineEatingTags={listing:!0,pre:!0,textarea:!0},voidElementTags=_assign({menuitem:!0},omittedCloseTags),VALID_TAG_REGEX=/^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,validatedTagCache={},hasOwnProperty={}.hasOwnProperty;function validateDangerousTag(e){hasOwnProperty.call(validatedTagCache,e)||(VALID_TAG_REGEX.test(e)||("production"!==process.env.NODE_ENV?invariant(!1,"Invalid tag: %s",e):_prodInvariant("65",e)),validatedTagCache[e]=!0)}function isCustomComponent(e,t){return e.indexOf("-")>=0||null!=t.is}var globalIdCounter=1;function ReactDOMComponent(e){var t=e.type;validateDangerousTag(t),this._currentElement=e,this._tag=t.toLowerCase(),this._namespaceURI=null,this._renderedChildren=null,this._previousStyle=null,this._previousStyleCopy=null,this._hostNode=null,this._hostParent=null,this._rootNodeID=0,this._domID=0,this._hostContainerInfo=null,this._wrapperState=null,this._topLevelWrapper=null,this._flags=0,"production"!==process.env.NODE_ENV&&(this._ancestorInfo=null,setAndValidateContentChildDev.call(this,null))}ReactDOMComponent.displayName="ReactDOMComponent",ReactDOMComponent.Mixin={mountComponent:function(e,t,n,r){this._rootNodeID=globalIdCounter++,this._domID=n._idCounter++,this._hostParent=t,this._hostContainerInfo=n;var o,a,s,i,u=this._currentElement.props;switch(this._tag){case"audio":case"form":case"iframe":case"img":case"link":case"object":case"source":case"video":this._wrapperState={listeners:null},e.getReactMountReady().enqueue(trapBubbledEventsLocal,this);break;case"input":ReactDOMInput.mountWrapper(this,u,t),u=ReactDOMInput.getHostProps(this,u),e.getReactMountReady().enqueue(trackInputValue,this),e.getReactMountReady().enqueue(trapBubbledEventsLocal,this);break;case"option":ReactDOMOption.mountWrapper(this,u,t),u=ReactDOMOption.getHostProps(this,u);break;case"select":ReactDOMSelect.mountWrapper(this,u,t),u=ReactDOMSelect.getHostProps(this,u),e.getReactMountReady().enqueue(trapBubbledEventsLocal,this);break;case"textarea":ReactDOMTextarea.mountWrapper(this,u,t),u=ReactDOMTextarea.getHostProps(this,u),e.getReactMountReady().enqueue(trackInputValue,this),e.getReactMountReady().enqueue(trapBubbledEventsLocal,this)}(assertValidProps(this,u),null!=t?(o=t._namespaceURI,a=t._tag):n._tag&&(o=n._namespaceURI,a=n._tag),(null==o||o===DOMNamespaces.svg&&"foreignobject"===a)&&(o=DOMNamespaces.html),o===DOMNamespaces.html&&("svg"===this._tag?o=DOMNamespaces.svg:"math"===this._tag&&(o=DOMNamespaces.mathml)),this._namespaceURI=o,"production"!==process.env.NODE_ENV)&&(null!=t?s=t._ancestorInfo:n._tag&&(s=n._ancestorInfo),s&&validateDOMNesting(this._tag,null,this,s),this._ancestorInfo=validateDOMNesting.updatedAncestorInfo(s,this._tag,this));if(e.useCreateElement){var l,p=n._ownerDocument;if(o===DOMNamespaces.html)if("script"===this._tag){var c=p.createElement("div"),d=this._currentElement.type;c.innerHTML="<"+d+"></"+d+">",l=c.removeChild(c.firstChild)}else l=u.is?p.createElement(this._currentElement.type,u.is):p.createElement(this._currentElement.type);else l=p.createElementNS(o,this._currentElement.type);ReactDOMComponentTree.precacheNode(this,l),this._flags|=Flags.hasCachedChildNodes,this._hostParent||DOMPropertyOperations.setAttributeForRoot(l),this._updateDOMProperties(null,u,e);var h=DOMLazyTree(l);this._createInitialChildren(e,u,r,h),i=h}else{var g=this._createOpenTagMarkupAndPutListeners(e,u),m=this._createContentMarkup(e,u,r);i=!m&&omittedCloseTags[this._tag]?g+"/>":g+">"+m+"</"+this._currentElement.type+">"}switch(this._tag){case"input":e.getReactMountReady().enqueue(inputPostMount,this),u.autoFocus&&e.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent,this);break;case"textarea":e.getReactMountReady().enqueue(textareaPostMount,this),u.autoFocus&&e.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent,this);break;case"select":case"button":u.autoFocus&&e.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent,this);break;case"option":e.getReactMountReady().enqueue(optionPostMount,this)}return i},_createOpenTagMarkupAndPutListeners:function(e,t){var n="<"+this._currentElement.type;for(var r in t)if(t.hasOwnProperty(r)){var o=t[r];if(null!=o)if(registrationNameModules.hasOwnProperty(r))o&&enqueuePutListener(this,r,o,e);else{r===STYLE&&(o&&("production"!==process.env.NODE_ENV&&(this._previousStyle=o),o=this._previousStyleCopy=_assign({},t.style)),o=CSSPropertyOperations.createMarkupForStyles(o,this));var a=null;null!=this._tag&&isCustomComponent(this._tag,t)?RESERVED_PROPS.hasOwnProperty(r)||(a=DOMPropertyOperations.createMarkupForCustomAttribute(r,o)):a=DOMPropertyOperations.createMarkupForProperty(r,o),a&&(n+=" "+a)}}return e.renderToStaticMarkup?n:(this._hostParent||(n+=" "+DOMPropertyOperations.createMarkupForRoot()),n+=" "+DOMPropertyOperations.createMarkupForID(this._domID))},_createContentMarkup:function(e,t,n){var r="",o=t.dangerouslySetInnerHTML;if(null!=o)null!=o.__html&&(r=o.__html);else{var a=CONTENT_TYPES[typeof t.children]?t.children:null,s=null!=a?null:t.children;if(null!=a)r=escapeTextContentForBrowser(a),"production"!==process.env.NODE_ENV&&setAndValidateContentChildDev.call(this,a);else if(null!=s){r=this.mountChildren(s,e,n).join("")}}return newlineEatingTags[this._tag]&&"\n"===r.charAt(0)?"\n"+r:r},_createInitialChildren:function(e,t,n,r){var o=t.dangerouslySetInnerHTML;if(null!=o)null!=o.__html&&DOMLazyTree.queueHTML(r,o.__html);else{var a=CONTENT_TYPES[typeof t.children]?t.children:null,s=null!=a?null:t.children;if(null!=a)""!==a&&("production"!==process.env.NODE_ENV&&setAndValidateContentChildDev.call(this,a),DOMLazyTree.queueText(r,a));else if(null!=s)for(var i=this.mountChildren(s,e,n),u=0;u<i.length;u++)DOMLazyTree.queueChild(r,i[u])}},receiveComponent:function(e,t,n){var r=this._currentElement;this._currentElement=e,this.updateComponent(t,r,e,n)},updateComponent:function(e,t,n,r){var o=t.props,a=this._currentElement.props;switch(this._tag){case"input":o=ReactDOMInput.getHostProps(this,o),a=ReactDOMInput.getHostProps(this,a);break;case"option":o=ReactDOMOption.getHostProps(this,o),a=ReactDOMOption.getHostProps(this,a);break;case"select":o=ReactDOMSelect.getHostProps(this,o),a=ReactDOMSelect.getHostProps(this,a);break;case"textarea":o=ReactDOMTextarea.getHostProps(this,o),a=ReactDOMTextarea.getHostProps(this,a)}switch(assertValidProps(this,a),this._updateDOMProperties(o,a,e),this._updateDOMChildren(o,a,e,r),this._tag){case"input":ReactDOMInput.updateWrapper(this),inputValueTracking.updateValueIfChanged(this);break;case"textarea":ReactDOMTextarea.updateWrapper(this);break;case"select":e.getReactMountReady().enqueue(postUpdateSelectWrapper,this)}},_updateDOMProperties:function(e,t,n){var r,o,a;for(r in e)if(!t.hasOwnProperty(r)&&e.hasOwnProperty(r)&&null!=e[r])if(r===STYLE){var s=this._previousStyleCopy;for(o in s)s.hasOwnProperty(o)&&((a=a||{})[o]="");this._previousStyleCopy=null}else registrationNameModules.hasOwnProperty(r)?e[r]&&deleteListener(this,r):isCustomComponent(this._tag,e)?RESERVED_PROPS.hasOwnProperty(r)||DOMPropertyOperations.deleteValueForAttribute(getNode(this),r):(DOMProperty.properties[r]||DOMProperty.isCustomAttribute(r))&&DOMPropertyOperations.deleteValueForProperty(getNode(this),r);for(r in t){var i=t[r],u=r===STYLE?this._previousStyleCopy:null!=e?e[r]:void 0;if(t.hasOwnProperty(r)&&i!==u&&(null!=i||null!=u))if(r===STYLE)if(i?("production"!==process.env.NODE_ENV&&(checkAndWarnForMutatedStyle(this._previousStyleCopy,this._previousStyle,this),this._previousStyle=i),i=this._previousStyleCopy=_assign({},i)):this._previousStyleCopy=null,u){for(o in u)!u.hasOwnProperty(o)||i&&i.hasOwnProperty(o)||((a=a||{})[o]="");for(o in i)i.hasOwnProperty(o)&&u[o]!==i[o]&&((a=a||{})[o]=i[o])}else a=i;else if(registrationNameModules.hasOwnProperty(r))i?enqueuePutListener(this,r,i,n):u&&deleteListener(this,r);else if(isCustomComponent(this._tag,t))RESERVED_PROPS.hasOwnProperty(r)||DOMPropertyOperations.setValueForAttribute(getNode(this),r,i);else if(DOMProperty.properties[r]||DOMProperty.isCustomAttribute(r)){var l=getNode(this);null!=i?DOMPropertyOperations.setValueForProperty(l,r,i):DOMPropertyOperations.deleteValueForProperty(l,r)}}a&&CSSPropertyOperations.setValueForStyles(getNode(this),a,this)},_updateDOMChildren:function(e,t,n,r){var o=CONTENT_TYPES[typeof e.children]?e.children:null,a=CONTENT_TYPES[typeof t.children]?t.children:null,s=e.dangerouslySetInnerHTML&&e.dangerouslySetInnerHTML.__html,i=t.dangerouslySetInnerHTML&&t.dangerouslySetInnerHTML.__html,u=null!=o?null:e.children,l=null!=a?null:t.children,p=null!=o||null!=s,c=null!=a||null!=i;null!=u&&null==l?this.updateChildren(null,n,r):p&&!c&&(this.updateTextContent(""),"production"!==process.env.NODE_ENV&&ReactInstrumentation.debugTool.onSetChildren(this._debugID,[])),null!=a?o!==a&&(this.updateTextContent(""+a),"production"!==process.env.NODE_ENV&&setAndValidateContentChildDev.call(this,a)):null!=i?(s!==i&&this.updateMarkup(""+i),"production"!==process.env.NODE_ENV&&ReactInstrumentation.debugTool.onSetChildren(this._debugID,[])):null!=l&&("production"!==process.env.NODE_ENV&&setAndValidateContentChildDev.call(this,null),this.updateChildren(l,n,r))},getHostNode:function(){return getNode(this)},unmountComponent:function(e){switch(this._tag){case"audio":case"form":case"iframe":case"img":case"link":case"object":case"source":case"video":var t=this._wrapperState.listeners;if(t)for(var n=0;n<t.length;n++)t[n].remove();break;case"input":case"textarea":inputValueTracking.stopTracking(this);break;case"html":case"head":case"body":"production"!==process.env.NODE_ENV?invariant(!1,"<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.",this._tag):_prodInvariant("66",this._tag)}this.unmountChildren(e),ReactDOMComponentTree.uncacheNode(this),EventPluginHub.deleteAllListeners(this),this._rootNodeID=0,this._domID=0,this._wrapperState=null,"production"!==process.env.NODE_ENV&&setAndValidateContentChildDev.call(this,null)},getPublicInstance:function(){return getNode(this)}},_assign(ReactDOMComponent.prototype,ReactDOMComponent.Mixin,ReactMultiChild.Mixin),module.exports=ReactDOMComponent;

}).call(this,require('_process'))

},{"./AutoFocusUtils":604,"./CSSPropertyOperations":607,"./DOMLazyTree":611,"./DOMNamespaces":612,"./DOMProperty":613,"./DOMPropertyOperations":614,"./EventPluginHub":618,"./EventPluginRegistry":619,"./ReactBrowserEventEmitter":627,"./ReactDOMComponentFlags":634,"./ReactDOMComponentTree":635,"./ReactDOMInput":640,"./ReactDOMOption":643,"./ReactDOMSelect":644,"./ReactDOMTextarea":647,"./ReactInstrumentation":664,"./ReactMultiChild":668,"./ReactServerRenderingTransaction":676,"./escapeTextContentForBrowser":704,"./inputValueTracking":717,"./isEventSupported":719,"./reactProdInvariant":722,"./validateDOMNesting":728,"_process":484,"fbjs/lib/emptyFunction":464,"fbjs/lib/invariant":472,"fbjs/lib/shallowEqual":478,"fbjs/lib/warning":479,"object-assign":483}],634:[function(require,module,exports){
"use strict";var ReactDOMComponentFlags={hasCachedChildNodes:1};module.exports=ReactDOMComponentFlags;

},{}],635:[function(require,module,exports){
(function (process){
"use strict";var _prodInvariant=require("./reactProdInvariant"),DOMProperty=require("./DOMProperty"),ReactDOMComponentFlags=require("./ReactDOMComponentFlags"),invariant=require("fbjs/lib/invariant"),ATTR_NAME=DOMProperty.ID_ATTRIBUTE_NAME,Flags=ReactDOMComponentFlags,internalInstanceKey="__reactInternalInstance$"+Math.random().toString(36).slice(2);function shouldPrecacheNode(e,n){return 1===e.nodeType&&e.getAttribute(ATTR_NAME)===String(n)||8===e.nodeType&&e.nodeValue===" react-text: "+n+" "||8===e.nodeType&&e.nodeValue===" react-empty: "+n+" "}function getRenderedHostOrTextFromComponent(e){for(var n;n=e._renderedComponent;)e=n;return e}function precacheNode(e,n){var t=getRenderedHostOrTextFromComponent(e);t._hostNode=n,n[internalInstanceKey]=t}function uncacheNode(e){var n=e._hostNode;n&&(delete n[internalInstanceKey],e._hostNode=null)}function precacheChildNodes(e,n){if(!(e._flags&Flags.hasCachedChildNodes)){var t=e._renderedChildren,o=n.firstChild;e:for(var r in t)if(t.hasOwnProperty(r)){var a=t[r],d=getRenderedHostOrTextFromComponent(a)._domID;if(0!==d){for(;null!==o;o=o.nextSibling)if(shouldPrecacheNode(o,d)){precacheNode(a,o);continue e}"production"!==process.env.NODE_ENV?invariant(!1,"Unable to find element with ID %s.",d):_prodInvariant("32",d)}}e._flags|=Flags.hasCachedChildNodes}}function getClosestInstanceFromNode(e){if(e[internalInstanceKey])return e[internalInstanceKey];for(var n,t,o=[];!e[internalInstanceKey];){if(o.push(e),!e.parentNode)return null;e=e.parentNode}for(;e&&(t=e[internalInstanceKey]);e=o.pop())n=t,o.length&&precacheChildNodes(t,e);return n}function getInstanceFromNode(e){var n=getClosestInstanceFromNode(e);return null!=n&&n._hostNode===e?n:null}function getNodeFromInstance(e){if(void 0===e._hostNode&&("production"!==process.env.NODE_ENV?invariant(!1,"getNodeFromInstance: Invalid argument."):_prodInvariant("33")),e._hostNode)return e._hostNode;for(var n=[];!e._hostNode;)n.push(e),e._hostParent||("production"!==process.env.NODE_ENV?invariant(!1,"React DOM tree root should always have a node reference."):_prodInvariant("34")),e=e._hostParent;for(;n.length;e=n.pop())precacheChildNodes(e,e._hostNode);return e._hostNode}var ReactDOMComponentTree={getClosestInstanceFromNode:getClosestInstanceFromNode,getInstanceFromNode:getInstanceFromNode,getNodeFromInstance:getNodeFromInstance,precacheChildNodes:precacheChildNodes,precacheNode:precacheNode,uncacheNode:uncacheNode};module.exports=ReactDOMComponentTree;

}).call(this,require('_process'))

},{"./DOMProperty":613,"./ReactDOMComponentFlags":634,"./reactProdInvariant":722,"_process":484,"fbjs/lib/invariant":472}],636:[function(require,module,exports){
(function (process){
"use strict";var validateDOMNesting=require("./validateDOMNesting"),DOC_NODE_TYPE=9;function ReactDOMContainerInfo(e,n){var t={_topLevelWrapper:e,_idCounter:1,_ownerDocument:n?n.nodeType===DOC_NODE_TYPE?n:n.ownerDocument:null,_node:n,_tag:n?n.nodeName.toLowerCase():null,_namespaceURI:n?n.namespaceURI:null};return"production"!==process.env.NODE_ENV&&(t._ancestorInfo=n?validateDOMNesting.updatedAncestorInfo(null,t._tag,null):null),t}module.exports=ReactDOMContainerInfo;

}).call(this,require('_process'))

},{"./validateDOMNesting":728,"_process":484}],637:[function(require,module,exports){
"use strict";var _assign=require("object-assign"),DOMLazyTree=require("./DOMLazyTree"),ReactDOMComponentTree=require("./ReactDOMComponentTree"),ReactDOMEmptyComponent=function(e){this._currentElement=null,this._hostNode=null,this._hostParent=null,this._hostContainerInfo=null,this._domID=0};_assign(ReactDOMEmptyComponent.prototype,{mountComponent:function(e,t,n,o){var r=n._idCounter++;this._domID=r,this._hostParent=t,this._hostContainerInfo=n;var a=" react-empty: "+this._domID+" ";if(e.useCreateElement){var i=n._ownerDocument.createComment(a);return ReactDOMComponentTree.precacheNode(this,i),DOMLazyTree(i)}return e.renderToStaticMarkup?"":"\x3c!--"+a+"--\x3e"},receiveComponent:function(){},getHostNode:function(){return ReactDOMComponentTree.getNodeFromInstance(this)},unmountComponent:function(){ReactDOMComponentTree.uncacheNode(this)}}),module.exports=ReactDOMEmptyComponent;

},{"./DOMLazyTree":611,"./ReactDOMComponentTree":635,"object-assign":483}],638:[function(require,module,exports){
"use strict";var ReactDOMFeatureFlags={useCreateElement:!0,useFiber:!1};module.exports=ReactDOMFeatureFlags;

},{}],639:[function(require,module,exports){
"use strict";var DOMChildrenOperations=require("./DOMChildrenOperations"),ReactDOMComponentTree=require("./ReactDOMComponentTree"),ReactDOMIDOperations={dangerouslyProcessChildrenUpdates:function(e,r){var t=ReactDOMComponentTree.getNodeFromInstance(e);DOMChildrenOperations.processUpdates(t,r)}};module.exports=ReactDOMIDOperations;

},{"./DOMChildrenOperations":610,"./ReactDOMComponentTree":635}],640:[function(require,module,exports){
(function (process){
"use strict";var _prodInvariant=require("./reactProdInvariant"),_assign=require("object-assign"),DOMPropertyOperations=require("./DOMPropertyOperations"),LinkedValueUtils=require("./LinkedValueUtils"),ReactDOMComponentTree=require("./ReactDOMComponentTree"),ReactUpdates=require("./ReactUpdates"),invariant=require("fbjs/lib/invariant"),warning=require("fbjs/lib/warning"),didWarnValueLink=!1,didWarnCheckedLink=!1,didWarnValueDefaultValue=!1,didWarnCheckedDefaultChecked=!1,didWarnControlledToUncontrolled=!1,didWarnUncontrolledToControlled=!1;function forceUpdateIfMounted(){this._rootNodeID&&ReactDOMInput.updateWrapper(this)}function isControlled(e){return"checkbox"===e.type||"radio"===e.type?null!=e.checked:null!=e.value}var ReactDOMInput={getHostProps:function(e,n){var t=LinkedValueUtils.getValue(n),o=LinkedValueUtils.getChecked(n);return _assign({type:void 0,step:void 0,min:void 0,max:void 0},n,{defaultChecked:void 0,defaultValue:void 0,value:null!=t?t:e._wrapperState.initialValue,checked:null!=o?o:e._wrapperState.initialChecked,onChange:e._wrapperState.onChange})},mountWrapper:function(e,n){if("production"!==process.env.NODE_ENV){LinkedValueUtils.checkPropTypes("input",n,e._currentElement._owner);var t=e._currentElement._owner;void 0===n.valueLink||didWarnValueLink||("production"!==process.env.NODE_ENV&&warning(!1,"`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead."),didWarnValueLink=!0),void 0===n.checkedLink||didWarnCheckedLink||("production"!==process.env.NODE_ENV&&warning(!1,"`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead."),didWarnCheckedLink=!0),void 0===n.checked||void 0===n.defaultChecked||didWarnCheckedDefaultChecked||("production"!==process.env.NODE_ENV&&warning(!1,"%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://fb.me/react-controlled-components",t&&t.getName()||"A component",n.type),didWarnCheckedDefaultChecked=!0),void 0===n.value||void 0===n.defaultValue||didWarnValueDefaultValue||("production"!==process.env.NODE_ENV&&warning(!1,"%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://fb.me/react-controlled-components",t&&t.getName()||"A component",n.type),didWarnValueDefaultValue=!0)}var o=n.defaultValue;e._wrapperState={initialChecked:null!=n.checked?n.checked:n.defaultChecked,initialValue:null!=n.value?n.value:o,listeners:null,onChange:_handleChange.bind(e),controlled:isControlled(n)}},updateWrapper:function(e){var n=e._currentElement.props;if("production"!==process.env.NODE_ENV){var t=isControlled(n),o=e._currentElement._owner;e._wrapperState.controlled||!t||didWarnUncontrolledToControlled||("production"!==process.env.NODE_ENV&&warning(!1,"%s is changing an uncontrolled input of type %s to be controlled. Input elements should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://fb.me/react-controlled-components",o&&o.getName()||"A component",n.type),didWarnUncontrolledToControlled=!0),!e._wrapperState.controlled||t||didWarnControlledToUncontrolled||("production"!==process.env.NODE_ENV&&warning(!1,"%s is changing a controlled input of type %s to be uncontrolled. Input elements should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://fb.me/react-controlled-components",o&&o.getName()||"A component",n.type),didWarnControlledToUncontrolled=!0)}var a=n.checked;null!=a&&DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(e),"checked",a||!1);var r=ReactDOMComponentTree.getNodeFromInstance(e),l=LinkedValueUtils.getValue(n);if(null!=l)if(0===l&&""===r.value)r.value="0";else if("number"===n.type){var d=parseFloat(r.value,10)||0;(l!=d||l==d&&r.value!=l)&&(r.value=""+l)}else r.value!==""+l&&(r.value=""+l);else null==n.value&&null!=n.defaultValue&&r.defaultValue!==""+n.defaultValue&&(r.defaultValue=""+n.defaultValue),null==n.checked&&null!=n.defaultChecked&&(r.defaultChecked=!!n.defaultChecked)},postMountWrapper:function(e){var n=e._currentElement.props,t=ReactDOMComponentTree.getNodeFromInstance(e);switch(n.type){case"submit":case"reset":break;case"color":case"date":case"datetime":case"datetime-local":case"month":case"time":case"week":t.value="",t.value=t.defaultValue;break;default:t.value=t.value}var o=t.name;""!==o&&(t.name=""),t.defaultChecked=!t.defaultChecked,t.defaultChecked=!t.defaultChecked,""!==o&&(t.name=o)}};function _handleChange(e){var n=this._currentElement.props,t=LinkedValueUtils.executeOnChange(n,e);ReactUpdates.asap(forceUpdateIfMounted,this);var o=n.name;if("radio"===n.type&&null!=o){for(var a=ReactDOMComponentTree.getNodeFromInstance(this),r=a;r.parentNode;)r=r.parentNode;for(var l=r.querySelectorAll("input[name="+JSON.stringify(""+o)+'][type="radio"]'),d=0;d<l.length;d++){var i=l[d];if(i!==a&&i.form===a.form){var c=ReactDOMComponentTree.getInstanceFromNode(i);c||("production"!==process.env.NODE_ENV?invariant(!1,"ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported."):_prodInvariant("90")),ReactUpdates.asap(forceUpdateIfMounted,c)}}}return t}module.exports=ReactDOMInput;

}).call(this,require('_process'))

},{"./DOMPropertyOperations":614,"./LinkedValueUtils":625,"./ReactDOMComponentTree":635,"./ReactUpdates":679,"./reactProdInvariant":722,"_process":484,"fbjs/lib/invariant":472,"fbjs/lib/warning":479,"object-assign":483}],641:[function(require,module,exports){
(function (process){
"use strict";var DOMProperty=require("./DOMProperty"),ReactComponentTreeHook=require("react/lib/ReactComponentTreeHook"),warning=require("fbjs/lib/warning"),warnedProperties={},rARIA=new RegExp("^(aria)-["+DOMProperty.ATTRIBUTE_NAME_CHAR+"]*$");function validateProperty(e,r,n){if(warnedProperties.hasOwnProperty(r)&&warnedProperties[r])return!0;if(rARIA.test(r)){var o=r.toLowerCase(),t=DOMProperty.getPossibleStandardName.hasOwnProperty(o)?DOMProperty.getPossibleStandardName[o]:null;if(null==t)return warnedProperties[r]=!0,!1;if(r!==t)return"production"!==process.env.NODE_ENV&&warning(!1,"Unknown ARIA attribute %s. Did you mean %s?%s",r,t,ReactComponentTreeHook.getStackAddendumByID(n)),warnedProperties[r]=!0,!0}return!0}function warnInvalidARIAProps(e,r){var n=[];for(var o in r.props){validateProperty(r.type,o,e)||n.push(o)}var t=n.map(function(e){return"`"+e+"`"}).join(", ");1===n.length?"production"!==process.env.NODE_ENV&&warning(!1,"Invalid aria prop %s on <%s> tag. For details, see https://fb.me/invalid-aria-prop%s",t,r.type,ReactComponentTreeHook.getStackAddendumByID(e)):n.length>1&&"production"!==process.env.NODE_ENV&&warning(!1,"Invalid aria props %s on <%s> tag. For details, see https://fb.me/invalid-aria-prop%s",t,r.type,ReactComponentTreeHook.getStackAddendumByID(e))}function handleElement(e,r){null!=r&&"string"==typeof r.type&&(r.type.indexOf("-")>=0||r.props.is||warnInvalidARIAProps(e,r))}var ReactDOMInvalidARIAHook={onBeforeMountComponent:function(e,r){"production"!==process.env.NODE_ENV&&handleElement(e,r)},onBeforeUpdateComponent:function(e,r){"production"!==process.env.NODE_ENV&&handleElement(e,r)}};module.exports=ReactDOMInvalidARIAHook;

}).call(this,require('_process'))

},{"./DOMProperty":613,"_process":484,"fbjs/lib/warning":479,"react/lib/ReactComponentTreeHook":757}],642:[function(require,module,exports){
(function (process){
"use strict";var ReactComponentTreeHook=require("react/lib/ReactComponentTreeHook"),warning=require("fbjs/lib/warning"),didWarnValueNull=!1;function handleElement(e,n){null!=n&&("input"!==n.type&&"textarea"!==n.type&&"select"!==n.type||null==n.props||null!==n.props.value||didWarnValueNull||("production"!==process.env.NODE_ENV&&warning(!1,"`value` prop on `%s` should not be null. Consider using the empty string to clear the component or `undefined` for uncontrolled components.%s",n.type,ReactComponentTreeHook.getStackAddendumByID(e)),didWarnValueNull=!0))}var ReactDOMNullInputValuePropHook={onBeforeMountComponent:function(e,n){handleElement(e,n)},onBeforeUpdateComponent:function(e,n){handleElement(e,n)}};module.exports=ReactDOMNullInputValuePropHook;

}).call(this,require('_process'))

},{"_process":484,"fbjs/lib/warning":479,"react/lib/ReactComponentTreeHook":757}],643:[function(require,module,exports){
(function (process){
"use strict";var _assign=require("object-assign"),React=require("react/lib/React"),ReactDOMComponentTree=require("./ReactDOMComponentTree"),ReactDOMSelect=require("./ReactDOMSelect"),warning=require("fbjs/lib/warning"),didWarnInvalidOptionChildren=!1;function flattenChildren(e){var t="";return React.Children.forEach(e,function(e){null!=e&&("string"==typeof e||"number"==typeof e?t+=e:didWarnInvalidOptionChildren||(didWarnInvalidOptionChildren=!0,"production"!==process.env.NODE_ENV&&warning(!1,"Only strings and numbers are supported as <option> children.")))}),t}var ReactDOMOption={mountWrapper:function(e,t,n){"production"!==process.env.NODE_ENV&&"production"!==process.env.NODE_ENV&&warning(null==t.selected,"Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");var r=null;if(null!=n){var a=n;"optgroup"===a._tag&&(a=a._hostParent),null!=a&&"select"===a._tag&&(r=ReactDOMSelect.getSelectValueContext(a))}var l,i=null;if(null!=r)if(l=null!=t.value?t.value+"":flattenChildren(t.children),i=!1,Array.isArray(r)){for(var o=0;o<r.length;o++)if(""+r[o]===l){i=!0;break}}else i=""+r===l;e._wrapperState={selected:i}},postMountWrapper:function(e){var t=e._currentElement.props;null!=t.value&&ReactDOMComponentTree.getNodeFromInstance(e).setAttribute("value",t.value)},getHostProps:function(e,t){var n=_assign({selected:void 0,children:void 0},t);null!=e._wrapperState.selected&&(n.selected=e._wrapperState.selected);var r=flattenChildren(t.children);return r&&(n.children=r),n}};module.exports=ReactDOMOption;

}).call(this,require('_process'))

},{"./ReactDOMComponentTree":635,"./ReactDOMSelect":644,"_process":484,"fbjs/lib/warning":479,"object-assign":483,"react/lib/React":754}],644:[function(require,module,exports){
(function (process){
"use strict";var _assign=require("object-assign"),LinkedValueUtils=require("./LinkedValueUtils"),ReactDOMComponentTree=require("./ReactDOMComponentTree"),ReactUpdates=require("./ReactUpdates"),warning=require("fbjs/lib/warning"),didWarnValueLink=!1,didWarnValueDefaultValue=!1;function updateOptionsIfPendingUpdateAndMounted(){if(this._rootNodeID&&this._wrapperState.pendingUpdate){this._wrapperState.pendingUpdate=!1;var e=this._currentElement.props,t=LinkedValueUtils.getValue(e);null!=t&&updateOptions(this,Boolean(e.multiple),t)}}function getDeclarationErrorAddendum(e){if(e){var t=e.getName();if(t)return" Check the render method of `"+t+"`."}return""}var valuePropNames=["value","defaultValue"];function checkSelectPropTypes(e,t){var a=e._currentElement._owner;LinkedValueUtils.checkPropTypes("select",t,a),void 0===t.valueLink||didWarnValueLink||("production"!==process.env.NODE_ENV&&warning(!1,"`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead."),didWarnValueLink=!0);for(var n=0;n<valuePropNames.length;n++){var r=valuePropNames[n];if(null!=t[r]){var l=Array.isArray(t[r]);t.multiple&&!l?"production"!==process.env.NODE_ENV&&warning(!1,"The `%s` prop supplied to <select> must be an array if `multiple` is true.%s",r,getDeclarationErrorAddendum(a)):!t.multiple&&l&&"production"!==process.env.NODE_ENV&&warning(!1,"The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s",r,getDeclarationErrorAddendum(a))}}}function updateOptions(e,t,a){var n,r,l=ReactDOMComponentTree.getNodeFromInstance(e).options;if(t){for(n={},r=0;r<a.length;r++)n[""+a[r]]=!0;for(r=0;r<l.length;r++){var i=n.hasOwnProperty(l[r].value);l[r].selected!==i&&(l[r].selected=i)}}else{for(n=""+a,r=0;r<l.length;r++)if(l[r].value===n)return void(l[r].selected=!0);l.length&&(l[0].selected=!0)}}var ReactDOMSelect={getHostProps:function(e,t){return _assign({},t,{onChange:e._wrapperState.onChange,value:void 0})},mountWrapper:function(e,t){"production"!==process.env.NODE_ENV&&checkSelectPropTypes(e,t);var a=LinkedValueUtils.getValue(t);e._wrapperState={pendingUpdate:!1,initialValue:null!=a?a:t.defaultValue,listeners:null,onChange:_handleChange.bind(e),wasMultiple:Boolean(t.multiple)},void 0===t.value||void 0===t.defaultValue||didWarnValueDefaultValue||("production"!==process.env.NODE_ENV&&warning(!1,"Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://fb.me/react-controlled-components"),didWarnValueDefaultValue=!0)},getSelectValueContext:function(e){return e._wrapperState.initialValue},postUpdateWrapper:function(e){var t=e._currentElement.props;e._wrapperState.initialValue=void 0;var a=e._wrapperState.wasMultiple;e._wrapperState.wasMultiple=Boolean(t.multiple);var n=LinkedValueUtils.getValue(t);null!=n?(e._wrapperState.pendingUpdate=!1,updateOptions(e,Boolean(t.multiple),n)):a!==Boolean(t.multiple)&&(null!=t.defaultValue?updateOptions(e,Boolean(t.multiple),t.defaultValue):updateOptions(e,Boolean(t.multiple),t.multiple?[]:""))}};function _handleChange(e){var t=this._currentElement.props,a=LinkedValueUtils.executeOnChange(t,e);return this._rootNodeID&&(this._wrapperState.pendingUpdate=!0),ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted,this),a}module.exports=ReactDOMSelect;

}).call(this,require('_process'))

},{"./LinkedValueUtils":625,"./ReactDOMComponentTree":635,"./ReactUpdates":679,"_process":484,"fbjs/lib/warning":479,"object-assign":483}],645:[function(require,module,exports){
"use strict";var ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),getNodeForCharacterOffset=require("./getNodeForCharacterOffset"),getTextContentAccessor=require("./getTextContentAccessor");function isCollapsed(e,t,n,o){return e===n&&t===o}function getIEOffsets(e){var t=document.selection.createRange(),n=t.text.length,o=t.duplicate();o.moveToElementText(e),o.setEndPoint("EndToStart",t);var s=o.text.length;return{start:s,end:s+n}}function getModernOffsets(e){var t=window.getSelection&&window.getSelection();if(!t||0===t.rangeCount)return null;var n=t.anchorNode,o=t.anchorOffset,s=t.focusNode,r=t.focusOffset,a=t.getRangeAt(0);try{a.startContainer.nodeType,a.endContainer.nodeType}catch(e){return null}var f=isCollapsed(t.anchorNode,t.anchorOffset,t.focusNode,t.focusOffset)?0:a.toString().length,d=a.cloneRange();d.selectNodeContents(e),d.setEnd(a.startContainer,a.startOffset);var c=isCollapsed(d.startContainer,d.startOffset,d.endContainer,d.endOffset)?0:d.toString().length,i=c+f,l=document.createRange();l.setStart(n,o),l.setEnd(s,r);var g=l.collapsed;return{start:g?i:c,end:g?c:i}}function setIEOffsets(e,t){var n,o,s=document.selection.createRange().duplicate();void 0===t.end?o=n=t.start:t.start>t.end?(n=t.end,o=t.start):(n=t.start,o=t.end),s.moveToElementText(e),s.moveStart("character",n),s.setEndPoint("EndToStart",s),s.moveEnd("character",o-n),s.select()}function setModernOffsets(e,t){if(window.getSelection){var n=window.getSelection(),o=e[getTextContentAccessor()].length,s=Math.min(t.start,o),r=void 0===t.end?s:Math.min(t.end,o);if(!n.extend&&s>r){var a=r;r=s,s=a}var f=getNodeForCharacterOffset(e,s),d=getNodeForCharacterOffset(e,r);if(f&&d){var c=document.createRange();c.setStart(f.node,f.offset),n.removeAllRanges(),s>r?(n.addRange(c),n.extend(d.node,d.offset)):(c.setEnd(d.node,d.offset),n.addRange(c))}}}var useIEOffsets=ExecutionEnvironment.canUseDOM&&"selection"in document&&!("getSelection"in window),ReactDOMSelection={getOffsets:useIEOffsets?getIEOffsets:getModernOffsets,setOffsets:useIEOffsets?setIEOffsets:setModernOffsets};module.exports=ReactDOMSelection;

},{"./getNodeForCharacterOffset":714,"./getTextContentAccessor":715,"fbjs/lib/ExecutionEnvironment":458}],646:[function(require,module,exports){
(function (process){
"use strict";var _prodInvariant=require("./reactProdInvariant"),_assign=require("object-assign"),DOMChildrenOperations=require("./DOMChildrenOperations"),DOMLazyTree=require("./DOMLazyTree"),ReactDOMComponentTree=require("./ReactDOMComponentTree"),escapeTextContentForBrowser=require("./escapeTextContentForBrowser"),invariant=require("fbjs/lib/invariant"),validateDOMNesting=require("./validateDOMNesting"),ReactDOMTextComponent=function(e){this._currentElement=e,this._stringText=""+e,this._hostNode=null,this._hostParent=null,this._domID=0,this._mountIndex=0,this._closingComment=null,this._commentNodes=null};_assign(ReactDOMTextComponent.prototype,{mountComponent:function(e,t,n,r){var o;"production"!==process.env.NODE_ENV&&(null!=t?o=t._ancestorInfo:null!=n&&(o=n._ancestorInfo),o&&validateDOMNesting(null,this._stringText,this,o));var i=n._idCounter++,s=" react-text: "+i+" ";if(this._domID=i,this._hostParent=t,e.useCreateElement){var a=n._ownerDocument,c=a.createComment(s),m=a.createComment(" /react-text "),u=DOMLazyTree(a.createDocumentFragment());return DOMLazyTree.queueChild(u,DOMLazyTree(c)),this._stringText&&DOMLazyTree.queueChild(u,DOMLazyTree(a.createTextNode(this._stringText))),DOMLazyTree.queueChild(u,DOMLazyTree(m)),ReactDOMComponentTree.precacheNode(this,c),this._closingComment=m,u}var l=escapeTextContentForBrowser(this._stringText);return e.renderToStaticMarkup?l:"\x3c!--"+s+"--\x3e"+l+"\x3c!-- /react-text --\x3e"},receiveComponent:function(e,t){if(e!==this._currentElement){this._currentElement=e;var n=""+e;if(n!==this._stringText){this._stringText=n;var r=this.getHostNode();DOMChildrenOperations.replaceDelimitedText(r[0],r[1],n)}}},getHostNode:function(){var e=this._commentNodes;if(e)return e;if(!this._closingComment)for(var t=ReactDOMComponentTree.getNodeFromInstance(this).nextSibling;;){if(null==t&&("production"!==process.env.NODE_ENV?invariant(!1,"Missing closing comment for text component %s",this._domID):_prodInvariant("67",this._domID)),8===t.nodeType&&" /react-text "===t.nodeValue){this._closingComment=t;break}t=t.nextSibling}return e=[this._hostNode,this._closingComment],this._commentNodes=e,e},unmountComponent:function(){this._closingComment=null,this._commentNodes=null,ReactDOMComponentTree.uncacheNode(this)}}),module.exports=ReactDOMTextComponent;

}).call(this,require('_process'))

},{"./DOMChildrenOperations":610,"./DOMLazyTree":611,"./ReactDOMComponentTree":635,"./escapeTextContentForBrowser":704,"./reactProdInvariant":722,"./validateDOMNesting":728,"_process":484,"fbjs/lib/invariant":472,"object-assign":483}],647:[function(require,module,exports){
(function (process){
"use strict";var _prodInvariant=require("./reactProdInvariant"),_assign=require("object-assign"),LinkedValueUtils=require("./LinkedValueUtils"),ReactDOMComponentTree=require("./ReactDOMComponentTree"),ReactUpdates=require("./ReactUpdates"),invariant=require("fbjs/lib/invariant"),warning=require("fbjs/lib/warning"),didWarnValueLink=!1,didWarnValDefaultVal=!1;function forceUpdateIfMounted(){this._rootNodeID&&ReactDOMTextarea.updateWrapper(this)}var ReactDOMTextarea={getHostProps:function(e,a){return null!=a.dangerouslySetInnerHTML&&("production"!==process.env.NODE_ENV?invariant(!1,"`dangerouslySetInnerHTML` does not make sense on <textarea>."):_prodInvariant("91")),_assign({},a,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue,onChange:e._wrapperState.onChange})},mountWrapper:function(e,a){"production"!==process.env.NODE_ENV&&(LinkedValueUtils.checkPropTypes("textarea",a,e._currentElement._owner),void 0===a.valueLink||didWarnValueLink||("production"!==process.env.NODE_ENV&&warning(!1,"`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead."),didWarnValueLink=!0),void 0===a.value||void 0===a.defaultValue||didWarnValDefaultVal||("production"!==process.env.NODE_ENV&&warning(!1,"Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://fb.me/react-controlled-components"),didWarnValDefaultVal=!0));var n=LinkedValueUtils.getValue(a),t=n;if(null==n){var r=a.defaultValue,o=a.children;null!=o&&("production"!==process.env.NODE_ENV&&"production"!==process.env.NODE_ENV&&warning(!1,"Use the `defaultValue` or `value` props instead of setting children on <textarea>."),null!=r&&("production"!==process.env.NODE_ENV?invariant(!1,"If you supply `defaultValue` on a <textarea>, do not pass children."):_prodInvariant("92")),Array.isArray(o)&&(o.length<=1||("production"!==process.env.NODE_ENV?invariant(!1,"<textarea> can only have at most one child."):_prodInvariant("93")),o=o[0]),r=""+o),null==r&&(r=""),t=r}e._wrapperState={initialValue:""+t,listeners:null,onChange:_handleChange.bind(e)}},updateWrapper:function(e){var a=e._currentElement.props,n=ReactDOMComponentTree.getNodeFromInstance(e),t=LinkedValueUtils.getValue(a);if(null!=t){var r=""+t;r!==n.value&&(n.value=r),null==a.defaultValue&&(n.defaultValue=r)}null!=a.defaultValue&&(n.defaultValue=a.defaultValue)},postMountWrapper:function(e){var a=ReactDOMComponentTree.getNodeFromInstance(e),n=a.textContent;n===e._wrapperState.initialValue&&(a.value=n)}};function _handleChange(e){var a=this._currentElement.props,n=LinkedValueUtils.executeOnChange(a,e);return ReactUpdates.asap(forceUpdateIfMounted,this),n}module.exports=ReactDOMTextarea;

}).call(this,require('_process'))

},{"./LinkedValueUtils":625,"./ReactDOMComponentTree":635,"./ReactUpdates":679,"./reactProdInvariant":722,"_process":484,"fbjs/lib/invariant":472,"fbjs/lib/warning":479,"object-assign":483}],648:[function(require,module,exports){
(function (process){
"use strict";var _prodInvariant=require("./reactProdInvariant"),invariant=require("fbjs/lib/invariant");function getLowestCommonAncestor(n,r){"_hostNode"in n||("production"!==process.env.NODE_ENV?invariant(!1,"getNodeFromInstance: Invalid argument."):_prodInvariant("33")),"_hostNode"in r||("production"!==process.env.NODE_ENV?invariant(!1,"getNodeFromInstance: Invalid argument."):_prodInvariant("33"));for(var t=0,e=n;e;e=e._hostParent)t++;for(var o=0,a=r;a;a=a._hostParent)o++;for(;t-o>0;)n=n._hostParent,t--;for(;o-t>0;)r=r._hostParent,o--;for(var s=t;s--;){if(n===r)return n;n=n._hostParent,r=r._hostParent}return null}function isAncestor(n,r){"_hostNode"in n||("production"!==process.env.NODE_ENV?invariant(!1,"isAncestor: Invalid argument."):_prodInvariant("35")),"_hostNode"in r||("production"!==process.env.NODE_ENV?invariant(!1,"isAncestor: Invalid argument."):_prodInvariant("35"));for(;r;){if(r===n)return!0;r=r._hostParent}return!1}function getParentInstance(n){return"_hostNode"in n||("production"!==process.env.NODE_ENV?invariant(!1,"getParentInstance: Invalid argument."):_prodInvariant("36")),n._hostParent}function traverseTwoPhase(n,r,t){for(var e,o=[];n;)o.push(n),n=n._hostParent;for(e=o.length;e-- >0;)r(o[e],"captured",t);for(e=0;e<o.length;e++)r(o[e],"bubbled",t)}function traverseEnterLeave(n,r,t,e,o){for(var a=n&&r?getLowestCommonAncestor(n,r):null,s=[];n&&n!==a;)s.push(n),n=n._hostParent;for(var i,v=[];r&&r!==a;)v.push(r),r=r._hostParent;for(i=0;i<s.length;i++)t(s[i],"bubbled",e);for(i=v.length;i-- >0;)t(v[i],"captured",o)}module.exports={isAncestor:isAncestor,getLowestCommonAncestor:getLowestCommonAncestor,getParentInstance:getParentInstance,traverseTwoPhase:traverseTwoPhase,traverseEnterLeave:traverseEnterLeave};

}).call(this,require('_process'))

},{"./reactProdInvariant":722,"_process":484,"fbjs/lib/invariant":472}],649:[function(require,module,exports){
(function (process){
"use strict";var DOMProperty=require("./DOMProperty"),EventPluginRegistry=require("./EventPluginRegistry"),ReactComponentTreeHook=require("react/lib/ReactComponentTreeHook"),warning=require("fbjs/lib/warning");if("production"!==process.env.NODE_ENV)var reactProps={children:!0,dangerouslySetInnerHTML:!0,key:!0,ref:!0,autoFocus:!0,defaultValue:!0,valueLink:!0,defaultChecked:!0,checkedLink:!0,innerHTML:!0,suppressContentEditableWarning:!0,onFocusIn:!0,onFocusOut:!0},warnedProperties={},validateProperty=function(e,n,r){if(DOMProperty.properties.hasOwnProperty(n)||DOMProperty.isCustomAttribute(n))return!0;if(reactProps.hasOwnProperty(n)&&reactProps[n]||warnedProperties.hasOwnProperty(n)&&warnedProperties[n])return!0;if(EventPluginRegistry.registrationNameModules.hasOwnProperty(n))return!0;warnedProperties[n]=!0;var t=n.toLowerCase(),o=DOMProperty.isCustomAttribute(t)?t:DOMProperty.getPossibleStandardName.hasOwnProperty(t)?DOMProperty.getPossibleStandardName[t]:null,s=EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(t)?EventPluginRegistry.possibleRegistrationNames[t]:null;return null!=o?("production"!==process.env.NODE_ENV&&warning(!1,"Unknown DOM property %s. Did you mean %s?%s",n,o,ReactComponentTreeHook.getStackAddendumByID(r)),!0):null!=s&&("production"!==process.env.NODE_ENV&&warning(!1,"Unknown event handler property %s. Did you mean `%s`?%s",n,s,ReactComponentTreeHook.getStackAddendumByID(r)),!0)};var warnUnknownProperties=function(e,n){var r=[];for(var t in n.props){validateProperty(n.type,t,e)||r.push(t)}var o=r.map(function(e){return"`"+e+"`"}).join(", ");1===r.length?"production"!==process.env.NODE_ENV&&warning(!1,"Unknown prop %s on <%s> tag. Remove this prop from the element. For details, see https://fb.me/react-unknown-prop%s",o,n.type,ReactComponentTreeHook.getStackAddendumByID(e)):r.length>1&&"production"!==process.env.NODE_ENV&&warning(!1,"Unknown props %s on <%s> tag. Remove these props from the element. For details, see https://fb.me/react-unknown-prop%s",o,n.type,ReactComponentTreeHook.getStackAddendumByID(e))};function handleElement(e,n){null!=n&&"string"==typeof n.type&&(n.type.indexOf("-")>=0||n.props.is||warnUnknownProperties(e,n))}var ReactDOMUnknownPropertyHook={onBeforeMountComponent:function(e,n){handleElement(e,n)},onBeforeUpdateComponent:function(e,n){handleElement(e,n)}};module.exports=ReactDOMUnknownPropertyHook;

}).call(this,require('_process'))

},{"./DOMProperty":613,"./EventPluginRegistry":619,"_process":484,"fbjs/lib/warning":479,"react/lib/ReactComponentTreeHook":757}],650:[function(require,module,exports){
(function (process){
"use strict";var ReactInvalidSetStateWarningHook=require("./ReactInvalidSetStateWarningHook"),ReactHostOperationHistoryHook=require("./ReactHostOperationHistoryHook"),ReactComponentTreeHook=require("react/lib/ReactComponentTreeHook"),ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),performanceNow=require("fbjs/lib/performanceNow"),warning=require("fbjs/lib/warning"),hooks=[],didHookThrowForEvent={};function callHook(e,n,r,t,o,i,u,a){try{n.call(r,t,o,i,u,a)}catch(n){"production"!==process.env.NODE_ENV&&warning(didHookThrowForEvent[e],"Exception thrown by hook while handling %s: %s",e,n+"\n"+n.stack),didHookThrowForEvent[e]=!0}}function emitEvent(e,n,r,t,o,i){for(var u=0;u<hooks.length;u++){var a=hooks[u],c=a[e];c&&callHook(e,c,a,n,r,t,o,i)}}var isProfiling=!1,flushHistory=[],lifeCycleTimerStack=[],currentFlushNesting=0,currentFlushMeasurements=[],currentFlushStartTime=0,currentTimerDebugID=null,currentTimerStartTime=0,currentTimerNestedFlushDuration=0,currentTimerType=null,lifeCycleTimerHasWarned=!1;function clearHistory(){ReactComponentTreeHook.purgeUnmountedComponents(),ReactHostOperationHistoryHook.clearHistory()}function getTreeSnapshot(e){return e.reduce(function(e,n){var r=ReactComponentTreeHook.getOwnerID(n),t=ReactComponentTreeHook.getParentID(n);return e[n]={displayName:ReactComponentTreeHook.getDisplayName(n),text:ReactComponentTreeHook.getText(n),updateCount:ReactComponentTreeHook.getUpdateCount(n),childIDs:ReactComponentTreeHook.getChildIDs(n),ownerID:r||t&&ReactComponentTreeHook.getOwnerID(t)||0,parentID:t},e},{})}function resetMeasurements(){var e=currentFlushStartTime,n=currentFlushMeasurements,r=ReactHostOperationHistoryHook.getHistory();if(0===currentFlushNesting)return currentFlushStartTime=0,currentFlushMeasurements=[],void clearHistory();if(n.length||r.length){var t=ReactComponentTreeHook.getRegisteredIDs();flushHistory.push({duration:performanceNow()-e,measurements:n||[],operations:r||[],treeSnapshot:getTreeSnapshot(t)})}clearHistory(),currentFlushStartTime=performanceNow(),currentFlushMeasurements=[]}function checkDebugID(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1]&&0===e||e||"production"!==process.env.NODE_ENV&&warning(!1,"ReactDebugTool: debugID may not be empty.")}function beginLifeCycleTimer(e,n){0!==currentFlushNesting&&(currentTimerType&&!lifeCycleTimerHasWarned&&("production"!==process.env.NODE_ENV&&warning(!1,"There is an internal error in the React performance measurement code. Did not expect %s timer to start while %s timer is still in progress for %s instance.",n,currentTimerType||"no",e===currentTimerDebugID?"the same":"another"),lifeCycleTimerHasWarned=!0),currentTimerStartTime=performanceNow(),currentTimerNestedFlushDuration=0,currentTimerDebugID=e,currentTimerType=n)}function endLifeCycleTimer(e,n){0!==currentFlushNesting&&(currentTimerType===n||lifeCycleTimerHasWarned||("production"!==process.env.NODE_ENV&&warning(!1,"There is an internal error in the React performance measurement code. We did not expect %s timer to stop while %s timer is still in progress for %s instance. Please report this as a bug in React.",n,currentTimerType||"no",e===currentTimerDebugID?"the same":"another"),lifeCycleTimerHasWarned=!0),isProfiling&&currentFlushMeasurements.push({timerType:n,instanceID:e,duration:performanceNow()-currentTimerStartTime-currentTimerNestedFlushDuration}),currentTimerStartTime=0,currentTimerNestedFlushDuration=0,currentTimerDebugID=null,currentTimerType=null)}function pauseCurrentLifeCycleTimer(){var e={startTime:currentTimerStartTime,nestedFlushStartTime:performanceNow(),debugID:currentTimerDebugID,timerType:currentTimerType};lifeCycleTimerStack.push(e),currentTimerStartTime=0,currentTimerNestedFlushDuration=0,currentTimerDebugID=null,currentTimerType=null}function resumeCurrentLifeCycleTimer(){var e=lifeCycleTimerStack.pop(),n=e.startTime,r=e.nestedFlushStartTime,t=e.debugID,o=e.timerType,i=performanceNow()-r;currentTimerStartTime=n,currentTimerNestedFlushDuration+=i,currentTimerDebugID=t,currentTimerType=o}var lastMarkTimeStamp=0,canUsePerformanceMeasure="undefined"!=typeof performance&&"function"==typeof performance.mark&&"function"==typeof performance.clearMarks&&"function"==typeof performance.measure&&"function"==typeof performance.clearMeasures;function shouldMark(e){if(!isProfiling||!canUsePerformanceMeasure)return!1;var n=ReactComponentTreeHook.getElement(e);return null!=n&&"object"==typeof n&&!("string"==typeof n.type)}function markBegin(e,n){if(shouldMark(e)){var r=e+"::"+n;lastMarkTimeStamp=performanceNow(),performance.mark(r)}}function markEnd(e,n){if(shouldMark(e)){var r=e+"::"+n,t=ReactComponentTreeHook.getDisplayName(e)||"Unknown";if(performanceNow()-lastMarkTimeStamp>.1){var o=t+" ["+n+"]";performance.measure(o,r)}performance.clearMarks(r),o&&performance.clearMeasures(o)}}var ReactDebugTool={addHook:function(e){hooks.push(e)},removeHook:function(e){for(var n=0;n<hooks.length;n++)hooks[n]===e&&(hooks.splice(n,1),n--)},isProfiling:function(){return isProfiling},beginProfiling:function(){isProfiling||(isProfiling=!0,flushHistory.length=0,resetMeasurements(),ReactDebugTool.addHook(ReactHostOperationHistoryHook))},endProfiling:function(){isProfiling&&(isProfiling=!1,resetMeasurements(),ReactDebugTool.removeHook(ReactHostOperationHistoryHook))},getFlushHistory:function(){return flushHistory},onBeginFlush:function(){currentFlushNesting++,resetMeasurements(),pauseCurrentLifeCycleTimer(),emitEvent("onBeginFlush")},onEndFlush:function(){resetMeasurements(),currentFlushNesting--,resumeCurrentLifeCycleTimer(),emitEvent("onEndFlush")},onBeginLifeCycleTimer:function(e,n){checkDebugID(e),emitEvent("onBeginLifeCycleTimer",e,n),markBegin(e,n),beginLifeCycleTimer(e,n)},onEndLifeCycleTimer:function(e,n){checkDebugID(e),endLifeCycleTimer(e,n),markEnd(e,n),emitEvent("onEndLifeCycleTimer",e,n)},onBeginProcessingChildContext:function(){emitEvent("onBeginProcessingChildContext")},onEndProcessingChildContext:function(){emitEvent("onEndProcessingChildContext")},onHostOperation:function(e){checkDebugID(e.instanceID),emitEvent("onHostOperation",e)},onSetState:function(){emitEvent("onSetState")},onSetChildren:function(e,n){checkDebugID(e),n.forEach(checkDebugID),emitEvent("onSetChildren",e,n)},onBeforeMountComponent:function(e,n,r){checkDebugID(e),checkDebugID(r,!0),emitEvent("onBeforeMountComponent",e,n,r),markBegin(e,"mount")},onMountComponent:function(e){checkDebugID(e),markEnd(e,"mount"),emitEvent("onMountComponent",e)},onBeforeUpdateComponent:function(e,n){checkDebugID(e),emitEvent("onBeforeUpdateComponent",e,n),markBegin(e,"update")},onUpdateComponent:function(e){checkDebugID(e),markEnd(e,"update"),emitEvent("onUpdateComponent",e)},onBeforeUnmountComponent:function(e){checkDebugID(e),emitEvent("onBeforeUnmountComponent",e),markBegin(e,"unmount")},onUnmountComponent:function(e){checkDebugID(e),markEnd(e,"unmount"),emitEvent("onUnmountComponent",e)},onTestEvent:function(){emitEvent("onTestEvent")}};ReactDebugTool.addDevtool=ReactDebugTool.addHook,ReactDebugTool.removeDevtool=ReactDebugTool.removeHook,ReactDebugTool.addHook(ReactInvalidSetStateWarningHook),ReactDebugTool.addHook(ReactComponentTreeHook);var url=ExecutionEnvironment.canUseDOM&&window.location.href||"";/[?&]react_perf\b/.test(url)&&ReactDebugTool.beginProfiling(),module.exports=ReactDebugTool;

}).call(this,require('_process'))

},{"./ReactHostOperationHistoryHook":660,"./ReactInvalidSetStateWarningHook":665,"_process":484,"fbjs/lib/ExecutionEnvironment":458,"fbjs/lib/performanceNow":477,"fbjs/lib/warning":479,"react/lib/ReactComponentTreeHook":757}],651:[function(require,module,exports){
"use strict";var _assign=require("object-assign"),ReactUpdates=require("./ReactUpdates"),Transaction=require("./Transaction"),emptyFunction=require("fbjs/lib/emptyFunction"),RESET_BATCHED_UPDATES={initialize:emptyFunction,close:function(){ReactDefaultBatchingStrategy.isBatchingUpdates=!1}},FLUSH_BATCHED_UPDATES={initialize:emptyFunction,close:ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)},TRANSACTION_WRAPPERS=[FLUSH_BATCHED_UPDATES,RESET_BATCHED_UPDATES];function ReactDefaultBatchingStrategyTransaction(){this.reinitializeTransaction()}_assign(ReactDefaultBatchingStrategyTransaction.prototype,Transaction,{getTransactionWrappers:function(){return TRANSACTION_WRAPPERS}});var transaction=new ReactDefaultBatchingStrategyTransaction,ReactDefaultBatchingStrategy={isBatchingUpdates:!1,batchedUpdates:function(t,a,e,n,i,c){var r=ReactDefaultBatchingStrategy.isBatchingUpdates;return ReactDefaultBatchingStrategy.isBatchingUpdates=!0,r?t(a,e,n,i,c):transaction.perform(t,null,a,e,n,i,c)}};module.exports=ReactDefaultBatchingStrategy;

},{"./ReactUpdates":679,"./Transaction":697,"fbjs/lib/emptyFunction":464,"object-assign":483}],652:[function(require,module,exports){
"use strict";var ARIADOMPropertyConfig=require("./ARIADOMPropertyConfig"),BeforeInputEventPlugin=require("./BeforeInputEventPlugin"),ChangeEventPlugin=require("./ChangeEventPlugin"),DefaultEventPluginOrder=require("./DefaultEventPluginOrder"),EnterLeaveEventPlugin=require("./EnterLeaveEventPlugin"),HTMLDOMPropertyConfig=require("./HTMLDOMPropertyConfig"),ReactComponentBrowserEnvironment=require("./ReactComponentBrowserEnvironment"),ReactDOMComponent=require("./ReactDOMComponent"),ReactDOMComponentTree=require("./ReactDOMComponentTree"),ReactDOMEmptyComponent=require("./ReactDOMEmptyComponent"),ReactDOMTreeTraversal=require("./ReactDOMTreeTraversal"),ReactDOMTextComponent=require("./ReactDOMTextComponent"),ReactDefaultBatchingStrategy=require("./ReactDefaultBatchingStrategy"),ReactEventListener=require("./ReactEventListener"),ReactInjection=require("./ReactInjection"),ReactReconcileTransaction=require("./ReactReconcileTransaction"),SVGDOMPropertyConfig=require("./SVGDOMPropertyConfig"),SelectEventPlugin=require("./SelectEventPlugin"),SimpleEventPlugin=require("./SimpleEventPlugin"),alreadyInjected=!1;function inject(){alreadyInjected||(alreadyInjected=!0,ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener),ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder),ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree),ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal),ReactInjection.EventPluginHub.injectEventPluginsByName({SimpleEventPlugin:SimpleEventPlugin,EnterLeaveEventPlugin:EnterLeaveEventPlugin,ChangeEventPlugin:ChangeEventPlugin,SelectEventPlugin:SelectEventPlugin,BeforeInputEventPlugin:BeforeInputEventPlugin}),ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent),ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent),ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig),ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig),ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig),ReactInjection.EmptyComponent.injectEmptyComponentFactory(function(e){return new ReactDOMEmptyComponent(e)}),ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction),ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy),ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment))}module.exports={inject:inject};

},{"./ARIADOMPropertyConfig":603,"./BeforeInputEventPlugin":605,"./ChangeEventPlugin":609,"./DefaultEventPluginOrder":616,"./EnterLeaveEventPlugin":617,"./HTMLDOMPropertyConfig":623,"./ReactComponentBrowserEnvironment":629,"./ReactDOMComponent":633,"./ReactDOMComponentTree":635,"./ReactDOMEmptyComponent":637,"./ReactDOMTextComponent":646,"./ReactDOMTreeTraversal":648,"./ReactDefaultBatchingStrategy":651,"./ReactEventListener":657,"./ReactInjection":661,"./ReactReconcileTransaction":673,"./SVGDOMPropertyConfig":681,"./SelectEventPlugin":682,"./SimpleEventPlugin":683}],653:[function(require,module,exports){
"use strict";var REACT_ELEMENT_TYPE="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103;module.exports=REACT_ELEMENT_TYPE;

},{}],654:[function(require,module,exports){
"use strict";var emptyComponentFactory,ReactEmptyComponentInjection={injectEmptyComponentFactory:function(t){emptyComponentFactory=t}},ReactEmptyComponent={create:function(t){return emptyComponentFactory(t)}};ReactEmptyComponent.injection=ReactEmptyComponentInjection,module.exports=ReactEmptyComponent;

},{}],655:[function(require,module,exports){
(function (process){
"use strict";var caughtError=null;function invokeGuardedCallback(e,r,t){try{r(t)}catch(e){null===caughtError&&(caughtError=e)}}var ReactErrorUtils={invokeGuardedCallback:invokeGuardedCallback,invokeGuardedCallbackWithCatch:invokeGuardedCallback,rethrowCaughtError:function(){if(caughtError){var e=caughtError;throw caughtError=null,e}}};if("production"!==process.env.NODE_ENV&&"undefined"!=typeof window&&"function"==typeof window.dispatchEvent&&"undefined"!=typeof document&&"function"==typeof document.createEvent){var fakeNode=document.createElement("react");ReactErrorUtils.invokeGuardedCallback=function(e,r,t){var a=function(){r(t)},n="react-"+e;fakeNode.addEventListener(n,a,!1);var o=document.createEvent("Event");o.initEvent(n,!1,!1),fakeNode.dispatchEvent(o),fakeNode.removeEventListener(n,a,!1)}}module.exports=ReactErrorUtils;

}).call(this,require('_process'))

},{"_process":484}],656:[function(require,module,exports){
"use strict";var EventPluginHub=require("./EventPluginHub");function runEventQueueInBatch(e){EventPluginHub.enqueueEvents(e),EventPluginHub.processEventQueue(!1)}var ReactEventEmitterMixin={handleTopLevel:function(e,n,t,u){runEventQueueInBatch(EventPluginHub.extractEvents(e,n,t,u))}};module.exports=ReactEventEmitterMixin;

},{"./EventPluginHub":618}],657:[function(require,module,exports){
"use strict";var _assign=require("object-assign"),EventListener=require("fbjs/lib/EventListener"),ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),PooledClass=require("./PooledClass"),ReactDOMComponentTree=require("./ReactDOMComponentTree"),ReactUpdates=require("./ReactUpdates"),getEventTarget=require("./getEventTarget"),getUnboundedScrollPosition=require("fbjs/lib/getUnboundedScrollPosition");function findParent(e){for(;e._hostParent;)e=e._hostParent;var n=ReactDOMComponentTree.getNodeFromInstance(e).parentNode;return ReactDOMComponentTree.getClosestInstanceFromNode(n)}function TopLevelCallbackBookKeeping(e,n){this.topLevelType=e,this.nativeEvent=n,this.ancestors=[]}function handleTopLevelImpl(e){var n=getEventTarget(e.nativeEvent),t=ReactDOMComponentTree.getClosestInstanceFromNode(n),o=t;do{e.ancestors.push(o),o=o&&findParent(o)}while(o);for(var l=0;l<e.ancestors.length;l++)t=e.ancestors[l],ReactEventListener._handleTopLevel(e.topLevelType,t,e.nativeEvent,getEventTarget(e.nativeEvent))}function scrollValueMonitor(e){e(getUnboundedScrollPosition(window))}_assign(TopLevelCallbackBookKeeping.prototype,{destructor:function(){this.topLevelType=null,this.nativeEvent=null,this.ancestors.length=0}}),PooledClass.addPoolingTo(TopLevelCallbackBookKeeping,PooledClass.twoArgumentPooler);var ReactEventListener={_enabled:!0,_handleTopLevel:null,WINDOW_HANDLE:ExecutionEnvironment.canUseDOM?window:null,setHandleTopLevel:function(e){ReactEventListener._handleTopLevel=e},setEnabled:function(e){ReactEventListener._enabled=!!e},isEnabled:function(){return ReactEventListener._enabled},trapBubbledEvent:function(e,n,t){return t?EventListener.listen(t,n,ReactEventListener.dispatchEvent.bind(null,e)):null},trapCapturedEvent:function(e,n,t){return t?EventListener.capture(t,n,ReactEventListener.dispatchEvent.bind(null,e)):null},monitorScrollValue:function(e){var n=scrollValueMonitor.bind(null,e);EventListener.listen(window,"scroll",n)},dispatchEvent:function(e,n){if(ReactEventListener._enabled){var t=TopLevelCallbackBookKeeping.getPooled(e,n);try{ReactUpdates.batchedUpdates(handleTopLevelImpl,t)}finally{TopLevelCallbackBookKeeping.release(t)}}}};module.exports=ReactEventListener;

},{"./PooledClass":626,"./ReactDOMComponentTree":635,"./ReactUpdates":679,"./getEventTarget":711,"fbjs/lib/EventListener":457,"fbjs/lib/ExecutionEnvironment":458,"fbjs/lib/getUnboundedScrollPosition":469,"object-assign":483}],658:[function(require,module,exports){
"use strict";var ReactFeatureFlags={logTopLevelRenders:!1};module.exports=ReactFeatureFlags;

},{}],659:[function(require,module,exports){
(function (process){
"use strict";var _prodInvariant=require("./reactProdInvariant"),invariant=require("fbjs/lib/invariant"),genericComponentClass=null,textComponentClass=null,ReactHostComponentInjection={injectGenericComponentClass:function(n){genericComponentClass=n},injectTextComponentClass:function(n){textComponentClass=n}};function createInternalComponent(n){return genericComponentClass||("production"!==process.env.NODE_ENV?invariant(!1,"There is no registered component for the tag %s",n.type):_prodInvariant("111",n.type)),new genericComponentClass(n)}function createInstanceForText(n){return new textComponentClass(n)}function isTextComponent(n){return n instanceof textComponentClass}var ReactHostComponent={createInternalComponent:createInternalComponent,createInstanceForText:createInstanceForText,isTextComponent:isTextComponent,injection:ReactHostComponentInjection};module.exports=ReactHostComponent;

}).call(this,require('_process'))

},{"./reactProdInvariant":722,"_process":484,"fbjs/lib/invariant":472}],660:[function(require,module,exports){
"use strict";var history=[],ReactHostOperationHistoryHook={onHostOperation:function(o){history.push(o)},clearHistory:function(){ReactHostOperationHistoryHook._preventClearing||(history=[])},getHistory:function(){return history}};module.exports=ReactHostOperationHistoryHook;

},{}],661:[function(require,module,exports){
"use strict";var DOMProperty=require("./DOMProperty"),EventPluginHub=require("./EventPluginHub"),EventPluginUtils=require("./EventPluginUtils"),ReactComponentEnvironment=require("./ReactComponentEnvironment"),ReactEmptyComponent=require("./ReactEmptyComponent"),ReactBrowserEventEmitter=require("./ReactBrowserEventEmitter"),ReactHostComponent=require("./ReactHostComponent"),ReactUpdates=require("./ReactUpdates"),ReactInjection={Component:ReactComponentEnvironment.injection,DOMProperty:DOMProperty.injection,EmptyComponent:ReactEmptyComponent.injection,EventPluginHub:EventPluginHub.injection,EventPluginUtils:EventPluginUtils.injection,EventEmitter:ReactBrowserEventEmitter.injection,HostComponent:ReactHostComponent.injection,Updates:ReactUpdates.injection};module.exports=ReactInjection;

},{"./DOMProperty":613,"./EventPluginHub":618,"./EventPluginUtils":620,"./ReactBrowserEventEmitter":627,"./ReactComponentEnvironment":630,"./ReactEmptyComponent":654,"./ReactHostComponent":659,"./ReactUpdates":679}],662:[function(require,module,exports){
"use strict";var ReactDOMSelection=require("./ReactDOMSelection"),containsNode=require("fbjs/lib/containsNode"),focusNode=require("fbjs/lib/focusNode"),getActiveElement=require("fbjs/lib/getActiveElement");function isInDocument(e){return containsNode(document.documentElement,e)}var ReactInputSelection={hasSelectionCapabilities:function(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)},getSelectionInformation:function(){var e=getActiveElement();return{focusedElem:e,selectionRange:ReactInputSelection.hasSelectionCapabilities(e)?ReactInputSelection.getSelection(e):null}},restoreSelection:function(e){var t=getActiveElement(),n=e.focusedElem,o=e.selectionRange;t!==n&&isInDocument(n)&&(ReactInputSelection.hasSelectionCapabilities(n)&&ReactInputSelection.setSelection(n,o),focusNode(n))},getSelection:function(e){var t;if("selectionStart"in e)t={start:e.selectionStart,end:e.selectionEnd};else if(document.selection&&e.nodeName&&"input"===e.nodeName.toLowerCase()){var n=document.selection.createRange();n.parentElement()===e&&(t={start:-n.moveStart("character",-e.value.length),end:-n.moveEnd("character",-e.value.length)})}else t=ReactDOMSelection.getOffsets(e);return t||{start:0,end:0}},setSelection:function(e,t){var n=t.start,o=t.end;if(void 0===o&&(o=n),"selectionStart"in e)e.selectionStart=n,e.selectionEnd=Math.min(o,e.value.length);else if(document.selection&&e.nodeName&&"input"===e.nodeName.toLowerCase()){var c=e.createTextRange();c.collapse(!0),c.moveStart("character",n),c.moveEnd("character",o-n),c.select()}else ReactDOMSelection.setOffsets(e,t)}};module.exports=ReactInputSelection;

},{"./ReactDOMSelection":645,"fbjs/lib/containsNode":461,"fbjs/lib/focusNode":466,"fbjs/lib/getActiveElement":467}],663:[function(require,module,exports){
"use strict";var ReactInstanceMap={remove:function(n){n._reactInternalInstance=void 0},get:function(n){return n._reactInternalInstance},has:function(n){return void 0!==n._reactInternalInstance},set:function(n,t){n._reactInternalInstance=t}};module.exports=ReactInstanceMap;

},{}],664:[function(require,module,exports){
(function (process){
"use strict";var debugTool=null;if("production"!==process.env.NODE_ENV){var ReactDebugTool=require("./ReactDebugTool");debugTool=ReactDebugTool}module.exports={debugTool:debugTool};

}).call(this,require('_process'))

},{"./ReactDebugTool":650,"_process":484}],665:[function(require,module,exports){
(function (process){
"use strict";var warning=require("fbjs/lib/warning");if("production"!==process.env.NODE_ENV)var processingChildContext=!1,warnInvalidSetState=function(){"production"!==process.env.NODE_ENV&&warning(!processingChildContext,"setState(...): Cannot call setState() inside getChildContext()")};var ReactInvalidSetStateWarningHook={onBeginProcessingChildContext:function(){processingChildContext=!0},onEndProcessingChildContext:function(){processingChildContext=!1},onSetState:function(){warnInvalidSetState()}};module.exports=ReactInvalidSetStateWarningHook;

}).call(this,require('_process'))

},{"_process":484,"fbjs/lib/warning":479}],666:[function(require,module,exports){
"use strict";var adler32=require("./adler32"),TAG_END=/\/?>/,COMMENT_START=/^<\!\-\-/,ReactMarkupChecksum={CHECKSUM_ATTR_NAME:"data-react-checksum",addChecksumToMarkup:function(e){var r=adler32(e);return COMMENT_START.test(e)?e:e.replace(TAG_END," "+ReactMarkupChecksum.CHECKSUM_ATTR_NAME+'="'+r+'"$&')},canReuseMarkup:function(e,r){var a=r.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);return a=a&&parseInt(a,10),adler32(e)===a}};module.exports=ReactMarkupChecksum;

},{"./adler32":700}],667:[function(require,module,exports){
(function (process){
"use strict";var _prodInvariant=require("./reactProdInvariant"),DOMLazyTree=require("./DOMLazyTree"),DOMProperty=require("./DOMProperty"),React=require("react/lib/React"),ReactBrowserEventEmitter=require("./ReactBrowserEventEmitter"),ReactCurrentOwner=require("react/lib/ReactCurrentOwner"),ReactDOMComponentTree=require("./ReactDOMComponentTree"),ReactDOMContainerInfo=require("./ReactDOMContainerInfo"),ReactDOMFeatureFlags=require("./ReactDOMFeatureFlags"),ReactFeatureFlags=require("./ReactFeatureFlags"),ReactInstanceMap=require("./ReactInstanceMap"),ReactInstrumentation=require("./ReactInstrumentation"),ReactMarkupChecksum=require("./ReactMarkupChecksum"),ReactReconciler=require("./ReactReconciler"),ReactUpdateQueue=require("./ReactUpdateQueue"),ReactUpdates=require("./ReactUpdates"),emptyObject=require("fbjs/lib/emptyObject"),instantiateReactComponent=require("./instantiateReactComponent"),invariant=require("fbjs/lib/invariant"),setInnerHTML=require("./setInnerHTML"),shouldUpdateReactComponent=require("./shouldUpdateReactComponent"),warning=require("fbjs/lib/warning"),ATTR_NAME=DOMProperty.ID_ATTRIBUTE_NAME,ROOT_ATTR_NAME=DOMProperty.ROOT_ATTRIBUTE_NAME,ELEMENT_NODE_TYPE=1,DOC_NODE_TYPE=9,DOCUMENT_FRAGMENT_NODE_TYPE=11,instancesByReactRootID={};function firstDifferenceIndex(e,n){for(var t=Math.min(e.length,n.length),r=0;r<t;r++)if(e.charAt(r)!==n.charAt(r))return r;return e.length===n.length?-1:t}function getReactRootElementInContainer(e){return e?e.nodeType===DOC_NODE_TYPE?e.documentElement:e.firstChild:null}function internalGetID(e){return e.getAttribute&&e.getAttribute(ATTR_NAME)||""}function mountComponentIntoNode(e,n,t,r,o){var a;if(ReactFeatureFlags.logTopLevelRenders){var i=e._currentElement.props.child.type;a="React mount: "+("string"==typeof i?i:i.displayName||i.name),console.time(a)}var c=ReactReconciler.mountComponent(e,t,null,ReactDOMContainerInfo(e,n),o,0);a&&console.timeEnd(a),e._renderedComponent._topLevelWrapper=e,ReactMount._mountImageIntoNode(c,n,e,r,t)}function batchedMountComponentIntoNode(e,n,t,r){var o=ReactUpdates.ReactReconcileTransaction.getPooled(!t&&ReactDOMFeatureFlags.useCreateElement);o.perform(mountComponentIntoNode,null,e,n,o,t,r),ReactUpdates.ReactReconcileTransaction.release(o)}function unmountComponentFromNode(e,n,t){for("production"!==process.env.NODE_ENV&&ReactInstrumentation.debugTool.onBeginFlush(),ReactReconciler.unmountComponent(e,t),"production"!==process.env.NODE_ENV&&ReactInstrumentation.debugTool.onEndFlush(),n.nodeType===DOC_NODE_TYPE&&(n=n.documentElement);n.lastChild;)n.removeChild(n.lastChild)}function hasNonRootReactChild(e){var n=getReactRootElementInContainer(e);if(n){var t=ReactDOMComponentTree.getInstanceFromNode(n);return!(!t||!t._hostParent)}}function nodeIsRenderedByOtherInstance(e){var n=getReactRootElementInContainer(e);return!(!n||!isReactNode(n)||ReactDOMComponentTree.getInstanceFromNode(n))}function isValidContainer(e){return!(!e||e.nodeType!==ELEMENT_NODE_TYPE&&e.nodeType!==DOC_NODE_TYPE&&e.nodeType!==DOCUMENT_FRAGMENT_NODE_TYPE)}function isReactNode(e){return isValidContainer(e)&&(e.hasAttribute(ROOT_ATTR_NAME)||e.hasAttribute(ATTR_NAME))}function getHostRootInstanceInContainer(e){var n=getReactRootElementInContainer(e),t=n&&ReactDOMComponentTree.getInstanceFromNode(n);return t&&!t._hostParent?t:null}function getTopLevelWrapperInContainer(e){var n=getHostRootInstanceInContainer(e);return n?n._hostContainerInfo._topLevelWrapper:null}var topLevelRootCounter=1,TopLevelWrapper=function(){this.rootID=topLevelRootCounter++};TopLevelWrapper.prototype.isReactComponent={},"production"!==process.env.NODE_ENV&&(TopLevelWrapper.displayName="TopLevelWrapper"),TopLevelWrapper.prototype.render=function(){return this.props.child},TopLevelWrapper.isReactTopLevelWrapper=!0;var ReactMount={TopLevelWrapper:TopLevelWrapper,_instancesByReactRootID:instancesByReactRootID,scrollMonitor:function(e,n){n()},_updateRootComponent:function(e,n,t,r,o){return ReactMount.scrollMonitor(r,function(){ReactUpdateQueue.enqueueElementInternal(e,n,t),o&&ReactUpdateQueue.enqueueCallbackInternal(e,o)}),e},_renderNewRootComponent:function(e,n,t,r){"production"!==process.env.NODE_ENV&&warning(null==ReactCurrentOwner.current,"_renderNewRootComponent(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate. Check the render method of %s.",ReactCurrentOwner.current&&ReactCurrentOwner.current.getName()||"ReactCompositeComponent"),isValidContainer(n)||("production"!==process.env.NODE_ENV?invariant(!1,"_registerComponent(...): Target container is not a DOM element."):_prodInvariant("37")),ReactBrowserEventEmitter.ensureScrollValueMonitoring();var o=instantiateReactComponent(e,!1);ReactUpdates.batchedUpdates(batchedMountComponentIntoNode,o,n,t,r);var a=o._instance.rootID;return instancesByReactRootID[a]=o,o},renderSubtreeIntoContainer:function(e,n,t,r){return null!=e&&ReactInstanceMap.has(e)||("production"!==process.env.NODE_ENV?invariant(!1,"parentComponent must be a valid React Component"):_prodInvariant("38")),ReactMount._renderSubtreeIntoContainer(e,n,t,r)},_renderSubtreeIntoContainer:function(e,n,t,r){ReactUpdateQueue.validateCallback(r,"ReactDOM.render"),React.isValidElement(n)||("production"!==process.env.NODE_ENV?invariant(!1,"ReactDOM.render(): Invalid component element.%s","string"==typeof n?" Instead of passing a string like 'div', pass React.createElement('div') or <div />.":"function"==typeof n?" Instead of passing a class like Foo, pass React.createElement(Foo) or <Foo />.":null!=n&&void 0!==n.props?" This may be caused by unintentionally loading two independent copies of React.":""):_prodInvariant("39","string"==typeof n?" Instead of passing a string like 'div', pass React.createElement('div') or <div />.":"function"==typeof n?" Instead of passing a class like Foo, pass React.createElement(Foo) or <Foo />.":null!=n&&void 0!==n.props?" This may be caused by unintentionally loading two independent copies of React.":"")),"production"!==process.env.NODE_ENV&&warning(!t||!t.tagName||"BODY"!==t.tagName.toUpperCase(),"render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");var o,a=React.createElement(TopLevelWrapper,{child:n});if(e){var i=ReactInstanceMap.get(e);o=i._processChildContext(i._context)}else o=emptyObject;var c=getTopLevelWrapperInContainer(t);if(c){var s=c._currentElement.props.child;if(shouldUpdateReactComponent(s,n)){var u=c._renderedComponent.getPublicInstance(),d=r&&function(){r.call(u)};return ReactMount._updateRootComponent(c,a,o,t,d),u}ReactMount.unmountComponentAtNode(t)}var p=getReactRootElementInContainer(t),l=p&&!!internalGetID(p),m=hasNonRootReactChild(t);if("production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV&&warning(!m,"render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render."),!l||p.nextSibling))for(var R=p;R;){if(internalGetID(R)){"production"!==process.env.NODE_ENV&&warning(!1,"render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");break}R=R.nextSibling}var v=l&&!c&&!m,E=ReactMount._renderNewRootComponent(a,t,v,o)._renderedComponent.getPublicInstance();return r&&r.call(E),E},render:function(e,n,t){return ReactMount._renderSubtreeIntoContainer(null,e,n,t)},unmountComponentAtNode:function(e){"production"!==process.env.NODE_ENV&&warning(null==ReactCurrentOwner.current,"unmountComponentAtNode(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate. Check the render method of %s.",ReactCurrentOwner.current&&ReactCurrentOwner.current.getName()||"ReactCompositeComponent"),isValidContainer(e)||("production"!==process.env.NODE_ENV?invariant(!1,"unmountComponentAtNode(...): Target container is not a DOM element."):_prodInvariant("40")),"production"!==process.env.NODE_ENV&&"production"!==process.env.NODE_ENV&&warning(!nodeIsRenderedByOtherInstance(e),"unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");var n=getTopLevelWrapperInContainer(e);if(!n){var t=hasNonRootReactChild(e),r=1===e.nodeType&&e.hasAttribute(ROOT_ATTR_NAME);return"production"!==process.env.NODE_ENV&&"production"!==process.env.NODE_ENV&&warning(!t,"unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s",r?"You may have accidentally passed in a React root node instead of its container.":"Instead, have the parent component update its state and rerender in order to remove this component."),!1}return delete instancesByReactRootID[n._instance.rootID],ReactUpdates.batchedUpdates(unmountComponentFromNode,n,e,!1),!0},_mountImageIntoNode:function(e,n,t,r,o){if(isValidContainer(n)||("production"!==process.env.NODE_ENV?invariant(!1,"mountComponentIntoNode(...): Target container is not valid."):_prodInvariant("41")),r){var a=getReactRootElementInContainer(n);if(ReactMarkupChecksum.canReuseMarkup(e,a))return void ReactDOMComponentTree.precacheNode(t,a);var i=a.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);a.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);var c=a.outerHTML;a.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME,i);var s,u=e;"production"!==process.env.NODE_ENV&&(n.nodeType===ELEMENT_NODE_TYPE?((s=document.createElement("div")).innerHTML=e,u=s.innerHTML):(s=document.createElement("iframe"),document.body.appendChild(s),s.contentDocument.write(e),u=s.contentDocument.documentElement.outerHTML,document.body.removeChild(s)));var d=firstDifferenceIndex(u,c),p=" (client) "+u.substring(d-20,d+20)+"\n (server) "+c.substring(d-20,d+20);n.nodeType===DOC_NODE_TYPE&&("production"!==process.env.NODE_ENV?invariant(!1,"You're trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s",p):_prodInvariant("42",p)),"production"!==process.env.NODE_ENV&&"production"!==process.env.NODE_ENV&&warning(!1,"React attempted to reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server:\n%s",p)}if(n.nodeType===DOC_NODE_TYPE&&("production"!==process.env.NODE_ENV?invariant(!1,"You're trying to render a component to the document but you didn't use server rendering. We can't do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering."):_prodInvariant("43")),o.useCreateElement){for(;n.lastChild;)n.removeChild(n.lastChild);DOMLazyTree.insertTreeBefore(n,e,null)}else setInnerHTML(n,e),ReactDOMComponentTree.precacheNode(t,n.firstChild);if("production"!==process.env.NODE_ENV){var l=ReactDOMComponentTree.getInstanceFromNode(n.firstChild);0!==l._debugID&&ReactInstrumentation.debugTool.onHostOperation({instanceID:l._debugID,type:"mount",payload:e.toString()})}}};module.exports=ReactMount;

}).call(this,require('_process'))

},{"./DOMLazyTree":611,"./DOMProperty":613,"./ReactBrowserEventEmitter":627,"./ReactDOMComponentTree":635,"./ReactDOMContainerInfo":636,"./ReactDOMFeatureFlags":638,"./ReactFeatureFlags":658,"./ReactInstanceMap":663,"./ReactInstrumentation":664,"./ReactMarkupChecksum":666,"./ReactReconciler":674,"./ReactUpdateQueue":678,"./ReactUpdates":679,"./instantiateReactComponent":718,"./reactProdInvariant":722,"./setInnerHTML":724,"./shouldUpdateReactComponent":726,"_process":484,"fbjs/lib/emptyObject":465,"fbjs/lib/invariant":472,"fbjs/lib/warning":479,"react/lib/React":754,"react/lib/ReactCurrentOwner":758}],668:[function(require,module,exports){
(function (process){
"use strict";var _prodInvariant=require("./reactProdInvariant"),ReactComponentEnvironment=require("./ReactComponentEnvironment"),ReactInstanceMap=require("./ReactInstanceMap"),ReactInstrumentation=require("./ReactInstrumentation"),ReactCurrentOwner=require("react/lib/ReactCurrentOwner"),ReactReconciler=require("./ReactReconciler"),ReactChildReconciler=require("./ReactChildReconciler"),emptyFunction=require("fbjs/lib/emptyFunction"),flattenChildren=require("./flattenChildren"),invariant=require("fbjs/lib/invariant");function makeInsertMarkup(e,n,t){return{type:"INSERT_MARKUP",content:e,fromIndex:null,fromNode:null,toIndex:t,afterNode:n}}function makeMove(e,n,t){return{type:"MOVE_EXISTING",content:null,fromIndex:e._mountIndex,fromNode:ReactReconciler.getHostNode(e),toIndex:t,afterNode:n}}function makeRemove(e,n){return{type:"REMOVE_NODE",content:null,fromIndex:e._mountIndex,fromNode:n,toIndex:null,afterNode:null}}function makeSetMarkup(e){return{type:"SET_MARKUP",content:e,fromIndex:null,fromNode:null,toIndex:null,afterNode:null}}function makeTextContent(e){return{type:"TEXT_CONTENT",content:e,fromIndex:null,fromNode:null,toIndex:null,afterNode:null}}function enqueue(e,n){return n&&(e=e||[]).push(n),e}function processQueue(e,n){ReactComponentEnvironment.processChildrenUpdates(e,n)}var setChildrenForInstrumentation=emptyFunction;if("production"!==process.env.NODE_ENV){var getDebugID=function(e){var n;e._debugID||(n=ReactInstanceMap.get(e))&&(e=n);return e._debugID};setChildrenForInstrumentation=function(e){var n=getDebugID(this);0!==n&&ReactInstrumentation.debugTool.onSetChildren(n,e?Object.keys(e).map(function(n){return e[n]._debugID}):[])}}var ReactMultiChild={Mixin:{_reconcilerInstantiateChildren:function(e,n,t){if("production"!==process.env.NODE_ENV){var r=getDebugID(this);if(this._currentElement)try{return ReactCurrentOwner.current=this._currentElement._owner,ReactChildReconciler.instantiateChildren(e,n,t,r)}finally{ReactCurrentOwner.current=null}}return ReactChildReconciler.instantiateChildren(e,n,t)},_reconcilerUpdateChildren:function(e,n,t,r,i,o){var u,a=0;if("production"!==process.env.NODE_ENV&&(a=getDebugID(this),this._currentElement)){try{ReactCurrentOwner.current=this._currentElement._owner,u=flattenChildren(n,a)}finally{ReactCurrentOwner.current=null}return ReactChildReconciler.updateChildren(e,u,t,r,i,this,this._hostContainerInfo,o,a),u}return u=flattenChildren(n,a),ReactChildReconciler.updateChildren(e,u,t,r,i,this,this._hostContainerInfo,o,a),u},mountChildren:function(e,n,t){var r=this._reconcilerInstantiateChildren(e,n,t);this._renderedChildren=r;var i=[],o=0;for(var u in r)if(r.hasOwnProperty(u)){var a=r[u],c=0;"production"!==process.env.NODE_ENV&&(c=getDebugID(this));var l=ReactReconciler.mountComponent(a,n,this,this._hostContainerInfo,t,c);a._mountIndex=o++,i.push(l)}return"production"!==process.env.NODE_ENV&&setChildrenForInstrumentation.call(this,r),i},updateTextContent:function(e){var n=this._renderedChildren;for(var t in ReactChildReconciler.unmountChildren(n,!1),n)n.hasOwnProperty(t)&&("production"!==process.env.NODE_ENV?invariant(!1,"updateTextContent called on non-empty component."):_prodInvariant("118"));processQueue(this,[makeTextContent(e)])},updateMarkup:function(e){var n=this._renderedChildren;for(var t in ReactChildReconciler.unmountChildren(n,!1),n)n.hasOwnProperty(t)&&("production"!==process.env.NODE_ENV?invariant(!1,"updateTextContent called on non-empty component."):_prodInvariant("118"));processQueue(this,[makeSetMarkup(e)])},updateChildren:function(e,n,t){this._updateChildren(e,n,t)},_updateChildren:function(e,n,t){var r=this._renderedChildren,i={},o=[],u=this._reconcilerUpdateChildren(r,e,o,i,n,t);if(u||r){var a,c=null,l=0,d=0,h=0,s=null;for(a in u)if(u.hasOwnProperty(a)){var m=r&&r[a],C=u[a];m===C?(c=enqueue(c,this.moveChild(m,s,l,d)),d=Math.max(m._mountIndex,d),m._mountIndex=l):(m&&(d=Math.max(m._mountIndex,d)),c=enqueue(c,this._mountChildAtIndex(C,o[h],s,l,n,t)),h++),l++,s=ReactReconciler.getHostNode(C)}for(a in i)i.hasOwnProperty(a)&&(c=enqueue(c,this._unmountChild(r[a],i[a])));c&&processQueue(this,c),this._renderedChildren=u,"production"!==process.env.NODE_ENV&&setChildrenForInstrumentation.call(this,u)}},unmountChildren:function(e){var n=this._renderedChildren;ReactChildReconciler.unmountChildren(n,e),this._renderedChildren=null},moveChild:function(e,n,t,r){if(e._mountIndex<r)return makeMove(e,n,t)},createChild:function(e,n,t){return makeInsertMarkup(t,n,e._mountIndex)},removeChild:function(e,n){return makeRemove(e,n)},_mountChildAtIndex:function(e,n,t,r,i,o){return e._mountIndex=r,this.createChild(e,t,n)},_unmountChild:function(e,n){var t=this.removeChild(e,n);return e._mountIndex=null,t}}};module.exports=ReactMultiChild;

}).call(this,require('_process'))

},{"./ReactChildReconciler":628,"./ReactComponentEnvironment":630,"./ReactInstanceMap":663,"./ReactInstrumentation":664,"./ReactReconciler":674,"./flattenChildren":706,"./reactProdInvariant":722,"_process":484,"fbjs/lib/emptyFunction":464,"fbjs/lib/invariant":472,"react/lib/ReactCurrentOwner":758}],669:[function(require,module,exports){
(function (process){
"use strict";var _prodInvariant=require("./reactProdInvariant"),React=require("react/lib/React"),invariant=require("fbjs/lib/invariant"),ReactNodeTypes={HOST:0,COMPOSITE:1,EMPTY:2,getType:function(e){return null===e||!1===e?ReactNodeTypes.EMPTY:React.isValidElement(e)?"function"==typeof e.type?ReactNodeTypes.COMPOSITE:ReactNodeTypes.HOST:void("production"!==process.env.NODE_ENV?invariant(!1,"Unexpected node: %s",e):_prodInvariant("26",e))}};module.exports=ReactNodeTypes;

}).call(this,require('_process'))

},{"./reactProdInvariant":722,"_process":484,"fbjs/lib/invariant":472,"react/lib/React":754}],670:[function(require,module,exports){
(function (process){
"use strict";var _prodInvariant=require("./reactProdInvariant"),invariant=require("fbjs/lib/invariant");function isValidOwner(e){return!(!e||"function"!=typeof e.attachRef||"function"!=typeof e.detachRef)}var ReactOwner={addComponentAsRefTo:function(e,n,t){isValidOwner(t)||("production"!==process.env.NODE_ENV?invariant(!1,"addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component's `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner)."):_prodInvariant("119")),t.attachRef(n,e)},removeComponentAsRefFrom:function(e,n,t){isValidOwner(t)||("production"!==process.env.NODE_ENV?invariant(!1,"removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component's `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner)."):_prodInvariant("120"));var a=t.getPublicInstance();a&&a.refs[n]===e.getPublicInstance()&&t.detachRef(n)}};module.exports=ReactOwner;

}).call(this,require('_process'))

},{"./reactProdInvariant":722,"_process":484,"fbjs/lib/invariant":472}],671:[function(require,module,exports){
(function (process){
"use strict";var ReactPropTypeLocationNames={};"production"!==process.env.NODE_ENV&&(ReactPropTypeLocationNames={prop:"prop",context:"context",childContext:"child context"}),module.exports=ReactPropTypeLocationNames;

}).call(this,require('_process'))

},{"_process":484}],672:[function(require,module,exports){
"use strict";var ReactPropTypesSecret="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";module.exports=ReactPropTypesSecret;

},{}],673:[function(require,module,exports){
(function (process){
"use strict";var _assign=require("object-assign"),CallbackQueue=require("./CallbackQueue"),PooledClass=require("./PooledClass"),ReactBrowserEventEmitter=require("./ReactBrowserEventEmitter"),ReactInputSelection=require("./ReactInputSelection"),ReactInstrumentation=require("./ReactInstrumentation"),Transaction=require("./Transaction"),ReactUpdateQueue=require("./ReactUpdateQueue"),SELECTION_RESTORATION={initialize:ReactInputSelection.getSelectionInformation,close:ReactInputSelection.restoreSelection},EVENT_SUPPRESSION={initialize:function(){var e=ReactBrowserEventEmitter.isEnabled();return ReactBrowserEventEmitter.setEnabled(!1),e},close:function(e){ReactBrowserEventEmitter.setEnabled(e)}},ON_DOM_READY_QUEUEING={initialize:function(){this.reactMountReady.reset()},close:function(){this.reactMountReady.notifyAll()}},TRANSACTION_WRAPPERS=[SELECTION_RESTORATION,EVENT_SUPPRESSION,ON_DOM_READY_QUEUEING];function ReactReconcileTransaction(e){this.reinitializeTransaction(),this.renderToStaticMarkup=!1,this.reactMountReady=CallbackQueue.getPooled(null),this.useCreateElement=e}"production"!==process.env.NODE_ENV&&TRANSACTION_WRAPPERS.push({initialize:ReactInstrumentation.debugTool.onBeginFlush,close:ReactInstrumentation.debugTool.onEndFlush});var Mixin={getTransactionWrappers:function(){return TRANSACTION_WRAPPERS},getReactMountReady:function(){return this.reactMountReady},getUpdateQueue:function(){return ReactUpdateQueue},checkpoint:function(){return this.reactMountReady.checkpoint()},rollback:function(e){this.reactMountReady.rollback(e)},destructor:function(){CallbackQueue.release(this.reactMountReady),this.reactMountReady=null}};_assign(ReactReconcileTransaction.prototype,Transaction,Mixin),PooledClass.addPoolingTo(ReactReconcileTransaction),module.exports=ReactReconcileTransaction;

}).call(this,require('_process'))

},{"./CallbackQueue":608,"./PooledClass":626,"./ReactBrowserEventEmitter":627,"./ReactInputSelection":662,"./ReactInstrumentation":664,"./ReactUpdateQueue":678,"./Transaction":697,"_process":484,"object-assign":483}],674:[function(require,module,exports){
(function (process){
"use strict";var ReactRef=require("./ReactRef"),ReactInstrumentation=require("./ReactInstrumentation"),warning=require("fbjs/lib/warning");function attachRefs(){ReactRef.attachRefs(this,this._currentElement)}var ReactReconciler={mountComponent:function(e,t,n,o,u,r){"production"!==process.env.NODE_ENV&&0!==e._debugID&&ReactInstrumentation.debugTool.onBeforeMountComponent(e._debugID,e._currentElement,r);var c=e.mountComponent(t,n,o,u,r);return e._currentElement&&null!=e._currentElement.ref&&t.getReactMountReady().enqueue(attachRefs,e),"production"!==process.env.NODE_ENV&&0!==e._debugID&&ReactInstrumentation.debugTool.onMountComponent(e._debugID),c},getHostNode:function(e){return e.getHostNode()},unmountComponent:function(e,t){"production"!==process.env.NODE_ENV&&0!==e._debugID&&ReactInstrumentation.debugTool.onBeforeUnmountComponent(e._debugID),ReactRef.detachRefs(e,e._currentElement),e.unmountComponent(t),"production"!==process.env.NODE_ENV&&0!==e._debugID&&ReactInstrumentation.debugTool.onUnmountComponent(e._debugID)},receiveComponent:function(e,t,n,o){var u=e._currentElement;if(t!==u||o!==e._context){"production"!==process.env.NODE_ENV&&0!==e._debugID&&ReactInstrumentation.debugTool.onBeforeUpdateComponent(e._debugID,t);var r=ReactRef.shouldUpdateRefs(u,t);r&&ReactRef.detachRefs(e,u),e.receiveComponent(t,n,o),r&&e._currentElement&&null!=e._currentElement.ref&&n.getReactMountReady().enqueue(attachRefs,e),"production"!==process.env.NODE_ENV&&0!==e._debugID&&ReactInstrumentation.debugTool.onUpdateComponent(e._debugID)}},performUpdateIfNecessary:function(e,t,n){e._updateBatchNumber===n?("production"!==process.env.NODE_ENV&&0!==e._debugID&&ReactInstrumentation.debugTool.onBeforeUpdateComponent(e._debugID,e._currentElement),e.performUpdateIfNecessary(t),"production"!==process.env.NODE_ENV&&0!==e._debugID&&ReactInstrumentation.debugTool.onUpdateComponent(e._debugID)):"production"!==process.env.NODE_ENV&&warning(null==e._updateBatchNumber||e._updateBatchNumber===n+1,"performUpdateIfNecessary: Unexpected batch number (current %s, pending %s)",n,e._updateBatchNumber)}};module.exports=ReactReconciler;

}).call(this,require('_process'))

},{"./ReactInstrumentation":664,"./ReactRef":675,"_process":484,"fbjs/lib/warning":479}],675:[function(require,module,exports){
"use strict";var ReactOwner=require("./ReactOwner"),ReactRef={};function attachRef(e,t,n){"function"==typeof e?e(t.getPublicInstance()):ReactOwner.addComponentAsRefTo(t,e,n)}function detachRef(e,t,n){"function"==typeof e?e(null):ReactOwner.removeComponentAsRefFrom(t,e,n)}ReactRef.attachRefs=function(e,t){if(null!==t&&"object"==typeof t){var n=t.ref;null!=n&&attachRef(n,e,t._owner)}},ReactRef.shouldUpdateRefs=function(e,t){var n=null,f=null;null!==e&&"object"==typeof e&&(n=e.ref,f=e._owner);var o=null,c=null;return null!==t&&"object"==typeof t&&(o=t.ref,c=t._owner),n!==o||"string"==typeof o&&c!==f},ReactRef.detachRefs=function(e,t){if(null!==t&&"object"==typeof t){var n=t.ref;null!=n&&detachRef(n,e,t._owner)}},module.exports=ReactRef;

},{"./ReactOwner":670}],676:[function(require,module,exports){
(function (process){
"use strict";var _assign=require("object-assign"),PooledClass=require("./PooledClass"),Transaction=require("./Transaction"),ReactInstrumentation=require("./ReactInstrumentation"),ReactServerUpdateQueue=require("./ReactServerUpdateQueue"),TRANSACTION_WRAPPERS=[];"production"!==process.env.NODE_ENV&&TRANSACTION_WRAPPERS.push({initialize:ReactInstrumentation.debugTool.onBeginFlush,close:ReactInstrumentation.debugTool.onEndFlush});var noopCallbackQueue={enqueue:function(){}};function ReactServerRenderingTransaction(e){this.reinitializeTransaction(),this.renderToStaticMarkup=e,this.useCreateElement=!1,this.updateQueue=new ReactServerUpdateQueue(this)}var Mixin={getTransactionWrappers:function(){return TRANSACTION_WRAPPERS},getReactMountReady:function(){return noopCallbackQueue},getUpdateQueue:function(){return this.updateQueue},destructor:function(){},checkpoint:function(){},rollback:function(){}};_assign(ReactServerRenderingTransaction.prototype,Transaction,Mixin),PooledClass.addPoolingTo(ReactServerRenderingTransaction),module.exports=ReactServerRenderingTransaction;

}).call(this,require('_process'))

},{"./PooledClass":626,"./ReactInstrumentation":664,"./ReactServerUpdateQueue":677,"./Transaction":697,"_process":484,"object-assign":483}],677:[function(require,module,exports){
(function (process){
"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var ReactUpdateQueue=require("./ReactUpdateQueue"),warning=require("fbjs/lib/warning");function warnNoop(e,t){if("production"!==process.env.NODE_ENV){var a=e.constructor;"production"!==process.env.NODE_ENV&&warning(!1,"%s(...): Can only update a mounting component. This usually means you called %s() outside componentWillMount() on the server. This is a no-op. Please check the code for the %s component.",t,t,a&&(a.displayName||a.name)||"ReactClass")}}var ReactServerUpdateQueue=function(){function ReactServerUpdateQueue(e){_classCallCheck(this,ReactServerUpdateQueue),this.transaction=e}return ReactServerUpdateQueue.prototype.isMounted=function isMounted(e){return!1},ReactServerUpdateQueue.prototype.enqueueCallback=function enqueueCallback(e,t,a){this.transaction.isInTransaction()&&ReactUpdateQueue.enqueueCallback(e,t,a)},ReactServerUpdateQueue.prototype.enqueueForceUpdate=function enqueueForceUpdate(e){this.transaction.isInTransaction()?ReactUpdateQueue.enqueueForceUpdate(e):warnNoop(e,"forceUpdate")},ReactServerUpdateQueue.prototype.enqueueReplaceState=function enqueueReplaceState(e,t){this.transaction.isInTransaction()?ReactUpdateQueue.enqueueReplaceState(e,t):warnNoop(e,"replaceState")},ReactServerUpdateQueue.prototype.enqueueSetState=function enqueueSetState(e,t){this.transaction.isInTransaction()?ReactUpdateQueue.enqueueSetState(e,t):warnNoop(e,"setState")},ReactServerUpdateQueue}();module.exports=ReactServerUpdateQueue;

}).call(this,require('_process'))

},{"./ReactUpdateQueue":678,"_process":484,"fbjs/lib/warning":479}],678:[function(require,module,exports){
(function (process){
"use strict";var _prodInvariant=require("./reactProdInvariant"),ReactCurrentOwner=require("react/lib/ReactCurrentOwner"),ReactInstanceMap=require("./ReactInstanceMap"),ReactInstrumentation=require("./ReactInstrumentation"),ReactUpdates=require("./ReactUpdates"),invariant=require("fbjs/lib/invariant"),warning=require("fbjs/lib/warning");function enqueueUpdate(e){ReactUpdates.enqueueUpdate(e)}function formatUnexpectedArgument(e){var n=typeof e;if("object"!==n)return n;var t=e.constructor&&e.constructor.name||n,a=Object.keys(e);return a.length>0&&a.length<20?t+" (keys: "+a.join(", ")+")":t}function getInternalInstanceReadyForUpdate(e,n){var t=ReactInstanceMap.get(e);if(!t){if("production"!==process.env.NODE_ENV){var a=e.constructor;"production"!==process.env.NODE_ENV&&warning(!n,"%s(...): Can only update a mounted or mounting component. This usually means you called %s() on an unmounted component. This is a no-op. Please check the code for the %s component.",n,n,a&&(a.displayName||a.name)||"ReactClass")}return null}return"production"!==process.env.NODE_ENV&&"production"!==process.env.NODE_ENV&&warning(null==ReactCurrentOwner.current,"%s(...): Cannot update during an existing state transition (such as within `render` or another component's constructor). Render methods should be a pure function of props and state; constructor side-effects are an anti-pattern, but can be moved to `componentWillMount`.",n),t}var ReactUpdateQueue={isMounted:function(e){if("production"!==process.env.NODE_ENV){var n=ReactCurrentOwner.current;null!==n&&("production"!==process.env.NODE_ENV&&warning(n._warnedAboutRefsInRender,"%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.",n.getName()||"A component"),n._warnedAboutRefsInRender=!0)}var t=ReactInstanceMap.get(e);return!!t&&!!t._renderedComponent},enqueueCallback:function(e,n,t){ReactUpdateQueue.validateCallback(n,t);var a=getInternalInstanceReadyForUpdate(e);if(!a)return null;a._pendingCallbacks?a._pendingCallbacks.push(n):a._pendingCallbacks=[n],enqueueUpdate(a)},enqueueCallbackInternal:function(e,n){e._pendingCallbacks?e._pendingCallbacks.push(n):e._pendingCallbacks=[n],enqueueUpdate(e)},enqueueForceUpdate:function(e){var n=getInternalInstanceReadyForUpdate(e,"forceUpdate");n&&(n._pendingForceUpdate=!0,enqueueUpdate(n))},enqueueReplaceState:function(e,n,t){var a=getInternalInstanceReadyForUpdate(e,"replaceState");a&&(a._pendingStateQueue=[n],a._pendingReplaceState=!0,null!=t&&(ReactUpdateQueue.validateCallback(t,"replaceState"),a._pendingCallbacks?a._pendingCallbacks.push(t):a._pendingCallbacks=[t]),enqueueUpdate(a))},enqueueSetState:function(e,n){"production"!==process.env.NODE_ENV&&(ReactInstrumentation.debugTool.onSetState(),"production"!==process.env.NODE_ENV&&warning(null!=n,"setState(...): You passed an undefined or null state object; instead, use forceUpdate()."));var t=getInternalInstanceReadyForUpdate(e,"setState");t&&((t._pendingStateQueue||(t._pendingStateQueue=[])).push(n),enqueueUpdate(t))},enqueueElementInternal:function(e,n,t){e._pendingElement=n,e._context=t,enqueueUpdate(e)},validateCallback:function(e,n){e&&"function"!=typeof e&&("production"!==process.env.NODE_ENV?invariant(!1,"%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.",n,formatUnexpectedArgument(e)):_prodInvariant("122",n,formatUnexpectedArgument(e)))}};module.exports=ReactUpdateQueue;

}).call(this,require('_process'))

},{"./ReactInstanceMap":663,"./ReactInstrumentation":664,"./ReactUpdates":679,"./reactProdInvariant":722,"_process":484,"fbjs/lib/invariant":472,"fbjs/lib/warning":479,"react/lib/ReactCurrentOwner":758}],679:[function(require,module,exports){
(function (process){
"use strict";var _prodInvariant=require("./reactProdInvariant"),_assign=require("object-assign"),CallbackQueue=require("./CallbackQueue"),PooledClass=require("./PooledClass"),ReactFeatureFlags=require("./ReactFeatureFlags"),ReactReconciler=require("./ReactReconciler"),Transaction=require("./Transaction"),invariant=require("fbjs/lib/invariant"),dirtyComponents=[],updateBatchNumber=0,asapCallbackQueue=CallbackQueue.getPooled(),asapEnqueued=!1,batchingStrategy=null;function ensureInjected(){ReactUpdates.ReactReconcileTransaction&&batchingStrategy||("production"!==process.env.NODE_ENV?invariant(!1,"ReactUpdates: must inject a reconcile transaction class and batching strategy"):_prodInvariant("123"))}var NESTED_UPDATES={initialize:function(){this.dirtyComponentsLength=dirtyComponents.length},close:function(){this.dirtyComponentsLength!==dirtyComponents.length?(dirtyComponents.splice(0,this.dirtyComponentsLength),flushBatchedUpdates()):dirtyComponents.length=0}},UPDATE_QUEUEING={initialize:function(){this.callbackQueue.reset()},close:function(){this.callbackQueue.notifyAll()}},TRANSACTION_WRAPPERS=[NESTED_UPDATES,UPDATE_QUEUEING];function ReactUpdatesFlushTransaction(){this.reinitializeTransaction(),this.dirtyComponentsLength=null,this.callbackQueue=CallbackQueue.getPooled(),this.reconcileTransaction=ReactUpdates.ReactReconcileTransaction.getPooled(!0)}function batchedUpdates(e,t,a,n,c,r){return ensureInjected(),batchingStrategy.batchedUpdates(e,t,a,n,c,r)}function mountOrderComparator(e,t){return e._mountOrder-t._mountOrder}function runBatchedUpdates(e){var t=e.dirtyComponentsLength;t!==dirtyComponents.length&&("production"!==process.env.NODE_ENV?invariant(!1,"Expected flush transaction's stored dirty-components length (%s) to match dirty-components array length (%s).",t,dirtyComponents.length):_prodInvariant("124",t,dirtyComponents.length)),dirtyComponents.sort(mountOrderComparator),updateBatchNumber++;for(var a=0;a<t;a++){var n,c=dirtyComponents[a],r=c._pendingCallbacks;if(c._pendingCallbacks=null,ReactFeatureFlags.logTopLevelRenders){var i=c;c._currentElement.type.isReactTopLevelWrapper&&(i=c._renderedComponent),n="React update: "+i.getName(),console.time(n)}if(ReactReconciler.performUpdateIfNecessary(c,e.reconcileTransaction,updateBatchNumber),n&&console.timeEnd(n),r)for(var o=0;o<r.length;o++)e.callbackQueue.enqueue(r[o],c.getPublicInstance())}}_assign(ReactUpdatesFlushTransaction.prototype,Transaction,{getTransactionWrappers:function(){return TRANSACTION_WRAPPERS},destructor:function(){this.dirtyComponentsLength=null,CallbackQueue.release(this.callbackQueue),this.callbackQueue=null,ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction),this.reconcileTransaction=null},perform:function(e,t,a){return Transaction.perform.call(this,this.reconcileTransaction.perform,this.reconcileTransaction,e,t,a)}}),PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);var flushBatchedUpdates=function(){for(;dirtyComponents.length||asapEnqueued;){if(dirtyComponents.length){var e=ReactUpdatesFlushTransaction.getPooled();e.perform(runBatchedUpdates,null,e),ReactUpdatesFlushTransaction.release(e)}if(asapEnqueued){asapEnqueued=!1;var t=asapCallbackQueue;asapCallbackQueue=CallbackQueue.getPooled(),t.notifyAll(),CallbackQueue.release(t)}}};function enqueueUpdate(e){ensureInjected(),batchingStrategy.isBatchingUpdates?(dirtyComponents.push(e),null==e._updateBatchNumber&&(e._updateBatchNumber=updateBatchNumber+1)):batchingStrategy.batchedUpdates(enqueueUpdate,e)}function asap(e,t){invariant(batchingStrategy.isBatchingUpdates,"ReactUpdates.asap: Can't enqueue an asap callback in a context whereupdates are not being batched."),asapCallbackQueue.enqueue(e,t),asapEnqueued=!0}var ReactUpdatesInjection={injectReconcileTransaction:function(e){e||("production"!==process.env.NODE_ENV?invariant(!1,"ReactUpdates: must provide a reconcile transaction class"):_prodInvariant("126")),ReactUpdates.ReactReconcileTransaction=e},injectBatchingStrategy:function(e){e||("production"!==process.env.NODE_ENV?invariant(!1,"ReactUpdates: must provide a batching strategy"):_prodInvariant("127")),"function"!=typeof e.batchedUpdates&&("production"!==process.env.NODE_ENV?invariant(!1,"ReactUpdates: must provide a batchedUpdates() function"):_prodInvariant("128")),"boolean"!=typeof e.isBatchingUpdates&&("production"!==process.env.NODE_ENV?invariant(!1,"ReactUpdates: must provide an isBatchingUpdates boolean attribute"):_prodInvariant("129")),batchingStrategy=e}},ReactUpdates={ReactReconcileTransaction:null,batchedUpdates:batchedUpdates,enqueueUpdate:enqueueUpdate,flushBatchedUpdates:flushBatchedUpdates,injection:ReactUpdatesInjection,asap:asap};module.exports=ReactUpdates;

}).call(this,require('_process'))

},{"./CallbackQueue":608,"./PooledClass":626,"./ReactFeatureFlags":658,"./ReactReconciler":674,"./Transaction":697,"./reactProdInvariant":722,"_process":484,"fbjs/lib/invariant":472,"object-assign":483}],680:[function(require,module,exports){
"use strict";module.exports="15.6.2";

},{}],681:[function(require,module,exports){
"use strict";var NS={xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace"},ATTRS={accentHeight:"accent-height",accumulate:0,additive:0,alignmentBaseline:"alignment-baseline",allowReorder:"allowReorder",alphabetic:0,amplitude:0,arabicForm:"arabic-form",ascent:0,attributeName:"attributeName",attributeType:"attributeType",autoReverse:"autoReverse",azimuth:0,baseFrequency:"baseFrequency",baseProfile:"baseProfile",baselineShift:"baseline-shift",bbox:0,begin:0,bias:0,by:0,calcMode:"calcMode",capHeight:"cap-height",clip:0,clipPath:"clip-path",clipRule:"clip-rule",clipPathUnits:"clipPathUnits",colorInterpolation:"color-interpolation",colorInterpolationFilters:"color-interpolation-filters",colorProfile:"color-profile",colorRendering:"color-rendering",contentScriptType:"contentScriptType",contentStyleType:"contentStyleType",cursor:0,cx:0,cy:0,d:0,decelerate:0,descent:0,diffuseConstant:"diffuseConstant",direction:0,display:0,divisor:0,dominantBaseline:"dominant-baseline",dur:0,dx:0,dy:0,edgeMode:"edgeMode",elevation:0,enableBackground:"enable-background",end:0,exponent:0,externalResourcesRequired:"externalResourcesRequired",fill:0,fillOpacity:"fill-opacity",fillRule:"fill-rule",filter:0,filterRes:"filterRes",filterUnits:"filterUnits",floodColor:"flood-color",floodOpacity:"flood-opacity",focusable:0,fontFamily:"font-family",fontSize:"font-size",fontSizeAdjust:"font-size-adjust",fontStretch:"font-stretch",fontStyle:"font-style",fontVariant:"font-variant",fontWeight:"font-weight",format:0,from:0,fx:0,fy:0,g1:0,g2:0,glyphName:"glyph-name",glyphOrientationHorizontal:"glyph-orientation-horizontal",glyphOrientationVertical:"glyph-orientation-vertical",glyphRef:"glyphRef",gradientTransform:"gradientTransform",gradientUnits:"gradientUnits",hanging:0,horizAdvX:"horiz-adv-x",horizOriginX:"horiz-origin-x",ideographic:0,imageRendering:"image-rendering",in:0,in2:0,intercept:0,k:0,k1:0,k2:0,k3:0,k4:0,kernelMatrix:"kernelMatrix",kernelUnitLength:"kernelUnitLength",kerning:0,keyPoints:"keyPoints",keySplines:"keySplines",keyTimes:"keyTimes",lengthAdjust:"lengthAdjust",letterSpacing:"letter-spacing",lightingColor:"lighting-color",limitingConeAngle:"limitingConeAngle",local:0,markerEnd:"marker-end",markerMid:"marker-mid",markerStart:"marker-start",markerHeight:"markerHeight",markerUnits:"markerUnits",markerWidth:"markerWidth",mask:0,maskContentUnits:"maskContentUnits",maskUnits:"maskUnits",mathematical:0,mode:0,numOctaves:"numOctaves",offset:0,opacity:0,operator:0,order:0,orient:0,orientation:0,origin:0,overflow:0,overlinePosition:"overline-position",overlineThickness:"overline-thickness",paintOrder:"paint-order",panose1:"panose-1",pathLength:"pathLength",patternContentUnits:"patternContentUnits",patternTransform:"patternTransform",patternUnits:"patternUnits",pointerEvents:"pointer-events",points:0,pointsAtX:"pointsAtX",pointsAtY:"pointsAtY",pointsAtZ:"pointsAtZ",preserveAlpha:"preserveAlpha",preserveAspectRatio:"preserveAspectRatio",primitiveUnits:"primitiveUnits",r:0,radius:0,refX:"refX",refY:"refY",renderingIntent:"rendering-intent",repeatCount:"repeatCount",repeatDur:"repeatDur",requiredExtensions:"requiredExtensions",requiredFeatures:"requiredFeatures",restart:0,result:0,rotate:0,rx:0,ry:0,scale:0,seed:0,shapeRendering:"shape-rendering",slope:0,spacing:0,specularConstant:"specularConstant",specularExponent:"specularExponent",speed:0,spreadMethod:"spreadMethod",startOffset:"startOffset",stdDeviation:"stdDeviation",stemh:0,stemv:0,stitchTiles:"stitchTiles",stopColor:"stop-color",stopOpacity:"stop-opacity",strikethroughPosition:"strikethrough-position",strikethroughThickness:"strikethrough-thickness",string:0,stroke:0,strokeDasharray:"stroke-dasharray",strokeDashoffset:"stroke-dashoffset",strokeLinecap:"stroke-linecap",strokeLinejoin:"stroke-linejoin",strokeMiterlimit:"stroke-miterlimit",strokeOpacity:"stroke-opacity",strokeWidth:"stroke-width",surfaceScale:"surfaceScale",systemLanguage:"systemLanguage",tableValues:"tableValues",targetX:"targetX",targetY:"targetY",textAnchor:"text-anchor",textDecoration:"text-decoration",textRendering:"text-rendering",textLength:"textLength",to:0,transform:0,u1:0,u2:0,underlinePosition:"underline-position",underlineThickness:"underline-thickness",unicode:0,unicodeBidi:"unicode-bidi",unicodeRange:"unicode-range",unitsPerEm:"units-per-em",vAlphabetic:"v-alphabetic",vHanging:"v-hanging",vIdeographic:"v-ideographic",vMathematical:"v-mathematical",values:0,vectorEffect:"vector-effect",version:0,vertAdvY:"vert-adv-y",vertOriginX:"vert-origin-x",vertOriginY:"vert-origin-y",viewBox:"viewBox",viewTarget:"viewTarget",visibility:0,widths:0,wordSpacing:"word-spacing",writingMode:"writing-mode",x:0,xHeight:"x-height",x1:0,x2:0,xChannelSelector:"xChannelSelector",xlinkActuate:"xlink:actuate",xlinkArcrole:"xlink:arcrole",xlinkHref:"xlink:href",xlinkRole:"xlink:role",xlinkShow:"xlink:show",xlinkTitle:"xlink:title",xlinkType:"xlink:type",xmlBase:"xml:base",xmlns:0,xmlnsXlink:"xmlns:xlink",xmlLang:"xml:lang",xmlSpace:"xml:space",y:0,y1:0,y2:0,yChannelSelector:"yChannelSelector",z:0,zoomAndPan:"zoomAndPan"},SVGDOMPropertyConfig={Properties:{},DOMAttributeNamespaces:{xlinkActuate:NS.xlink,xlinkArcrole:NS.xlink,xlinkHref:NS.xlink,xlinkRole:NS.xlink,xlinkShow:NS.xlink,xlinkTitle:NS.xlink,xlinkType:NS.xlink,xmlBase:NS.xml,xmlLang:NS.xml,xmlSpace:NS.xml},DOMAttributeNames:{}};Object.keys(ATTRS).forEach(function(e){SVGDOMPropertyConfig.Properties[e]=0,ATTRS[e]&&(SVGDOMPropertyConfig.DOMAttributeNames[e]=ATTRS[e])}),module.exports=SVGDOMPropertyConfig;

},{}],682:[function(require,module,exports){
"use strict";var EventPropagators=require("./EventPropagators"),ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),ReactDOMComponentTree=require("./ReactDOMComponentTree"),ReactInputSelection=require("./ReactInputSelection"),SyntheticEvent=require("./SyntheticEvent"),getActiveElement=require("fbjs/lib/getActiveElement"),isTextInputElement=require("./isTextInputElement"),shallowEqual=require("fbjs/lib/shallowEqual"),skipSelectionChangeEvent=ExecutionEnvironment.canUseDOM&&"documentMode"in document&&document.documentMode<=11,eventTypes={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:["topBlur","topContextMenu","topFocus","topKeyDown","topKeyUp","topMouseDown","topMouseUp","topSelectionChange"]}},activeElement=null,activeElementInst=null,lastSelection=null,mouseDown=!1,hasListener=!1;function getSelection(e){if("selectionStart"in e&&ReactInputSelection.hasSelectionCapabilities(e))return{start:e.selectionStart,end:e.selectionEnd};if(window.getSelection){var t=window.getSelection();return{anchorNode:t.anchorNode,anchorOffset:t.anchorOffset,focusNode:t.focusNode,focusOffset:t.focusOffset}}if(document.selection){var n=document.selection.createRange();return{parentElement:n.parentElement(),text:n.text,top:n.boundingTop,left:n.boundingLeft}}}function constructSelectEvent(e,t){if(mouseDown||null==activeElement||activeElement!==getActiveElement())return null;var n=getSelection(activeElement);if(!lastSelection||!shallowEqual(lastSelection,n)){lastSelection=n;var o=SyntheticEvent.getPooled(eventTypes.select,activeElementInst,e,t);return o.type="select",o.target=activeElement,EventPropagators.accumulateTwoPhaseDispatches(o),o}return null}var SelectEventPlugin={eventTypes:eventTypes,extractEvents:function(e,t,n,o){if(!hasListener)return null;var c=t?ReactDOMComponentTree.getNodeFromInstance(t):window;switch(e){case"topFocus":(isTextInputElement(c)||"true"===c.contentEditable)&&(activeElement=c,activeElementInst=t,lastSelection=null);break;case"topBlur":activeElement=null,activeElementInst=null,lastSelection=null;break;case"topMouseDown":mouseDown=!0;break;case"topContextMenu":case"topMouseUp":return mouseDown=!1,constructSelectEvent(n,o);case"topSelectionChange":if(skipSelectionChangeEvent)break;case"topKeyDown":case"topKeyUp":return constructSelectEvent(n,o)}return null},didPutListener:function(e,t,n){"onSelect"===t&&(hasListener=!0)}};module.exports=SelectEventPlugin;

},{"./EventPropagators":621,"./ReactDOMComponentTree":635,"./ReactInputSelection":662,"./SyntheticEvent":688,"./isTextInputElement":720,"fbjs/lib/ExecutionEnvironment":458,"fbjs/lib/getActiveElement":467,"fbjs/lib/shallowEqual":478}],683:[function(require,module,exports){
(function (process){
"use strict";var _prodInvariant=require("./reactProdInvariant"),EventListener=require("fbjs/lib/EventListener"),EventPropagators=require("./EventPropagators"),ReactDOMComponentTree=require("./ReactDOMComponentTree"),SyntheticAnimationEvent=require("./SyntheticAnimationEvent"),SyntheticClipboardEvent=require("./SyntheticClipboardEvent"),SyntheticEvent=require("./SyntheticEvent"),SyntheticFocusEvent=require("./SyntheticFocusEvent"),SyntheticKeyboardEvent=require("./SyntheticKeyboardEvent"),SyntheticMouseEvent=require("./SyntheticMouseEvent"),SyntheticDragEvent=require("./SyntheticDragEvent"),SyntheticTouchEvent=require("./SyntheticTouchEvent"),SyntheticTransitionEvent=require("./SyntheticTransitionEvent"),SyntheticUIEvent=require("./SyntheticUIEvent"),SyntheticWheelEvent=require("./SyntheticWheelEvent"),emptyFunction=require("fbjs/lib/emptyFunction"),getEventCharCode=require("./getEventCharCode"),invariant=require("fbjs/lib/invariant"),eventTypes={},topLevelEventsToDispatchConfig={};["abort","animationEnd","animationIteration","animationStart","blur","canPlay","canPlayThrough","click","contextMenu","copy","cut","doubleClick","drag","dragEnd","dragEnter","dragExit","dragLeave","dragOver","dragStart","drop","durationChange","emptied","encrypted","ended","error","focus","input","invalid","keyDown","keyPress","keyUp","load","loadedData","loadedMetadata","loadStart","mouseDown","mouseMove","mouseOut","mouseOver","mouseUp","paste","pause","play","playing","progress","rateChange","reset","scroll","seeked","seeking","stalled","submit","suspend","timeUpdate","touchCancel","touchEnd","touchMove","touchStart","transitionEnd","volumeChange","waiting","wheel"].forEach(function(e){var t=e[0].toUpperCase()+e.slice(1),n="on"+t,a="top"+t,o={phasedRegistrationNames:{bubbled:n,captured:n+"Capture"},dependencies:[a]};eventTypes[e]=o,topLevelEventsToDispatchConfig[a]=o});var onClickListeners={};function getDictionaryKey(e){return"."+e._rootNodeID}function isInteractive(e){return"button"===e||"input"===e||"select"===e||"textarea"===e}var SimpleEventPlugin={eventTypes:eventTypes,extractEvents:function(e,t,n,a){var o,i=topLevelEventsToDispatchConfig[e];if(!i)return null;switch(e){case"topAbort":case"topCanPlay":case"topCanPlayThrough":case"topDurationChange":case"topEmptied":case"topEncrypted":case"topEnded":case"topError":case"topInput":case"topInvalid":case"topLoad":case"topLoadedData":case"topLoadedMetadata":case"topLoadStart":case"topPause":case"topPlay":case"topPlaying":case"topProgress":case"topRateChange":case"topReset":case"topSeeked":case"topSeeking":case"topStalled":case"topSubmit":case"topSuspend":case"topTimeUpdate":case"topVolumeChange":case"topWaiting":o=SyntheticEvent;break;case"topKeyPress":if(0===getEventCharCode(n))return null;case"topKeyDown":case"topKeyUp":o=SyntheticKeyboardEvent;break;case"topBlur":case"topFocus":o=SyntheticFocusEvent;break;case"topClick":if(2===n.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":o=SyntheticMouseEvent;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":o=SyntheticDragEvent;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":o=SyntheticTouchEvent;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":o=SyntheticAnimationEvent;break;case"topTransitionEnd":o=SyntheticTransitionEvent;break;case"topScroll":o=SyntheticUIEvent;break;case"topWheel":o=SyntheticWheelEvent;break;case"topCopy":case"topCut":case"topPaste":o=SyntheticClipboardEvent}o||("production"!==process.env.NODE_ENV?invariant(!1,"SimpleEventPlugin: Unhandled event type, `%s`.",e):_prodInvariant("86",e));var r=o.getPooled(i,t,n,a);return EventPropagators.accumulateTwoPhaseDispatches(r),r},didPutListener:function(e,t,n){if("onClick"===t&&!isInteractive(e._tag)){var a=getDictionaryKey(e),o=ReactDOMComponentTree.getNodeFromInstance(e);onClickListeners[a]||(onClickListeners[a]=EventListener.listen(o,"click",emptyFunction))}},willDeleteListener:function(e,t){if("onClick"===t&&!isInteractive(e._tag)){var n=getDictionaryKey(e);onClickListeners[n].remove(),delete onClickListeners[n]}}};module.exports=SimpleEventPlugin;

}).call(this,require('_process'))

},{"./EventPropagators":621,"./ReactDOMComponentTree":635,"./SyntheticAnimationEvent":684,"./SyntheticClipboardEvent":685,"./SyntheticDragEvent":687,"./SyntheticEvent":688,"./SyntheticFocusEvent":689,"./SyntheticKeyboardEvent":691,"./SyntheticMouseEvent":692,"./SyntheticTouchEvent":693,"./SyntheticTransitionEvent":694,"./SyntheticUIEvent":695,"./SyntheticWheelEvent":696,"./getEventCharCode":708,"./reactProdInvariant":722,"_process":484,"fbjs/lib/EventListener":457,"fbjs/lib/emptyFunction":464,"fbjs/lib/invariant":472}],684:[function(require,module,exports){
"use strict";var SyntheticEvent=require("./SyntheticEvent"),AnimationEventInterface={animationName:null,elapsedTime:null,pseudoElement:null};function SyntheticAnimationEvent(t,n,e,i){return SyntheticEvent.call(this,t,n,e,i)}SyntheticEvent.augmentClass(SyntheticAnimationEvent,AnimationEventInterface),module.exports=SyntheticAnimationEvent;

},{"./SyntheticEvent":688}],685:[function(require,module,exports){
"use strict";var SyntheticEvent=require("./SyntheticEvent"),ClipboardEventInterface={clipboardData:function(t){return"clipboardData"in t?t.clipboardData:window.clipboardData}};function SyntheticClipboardEvent(t,e,n,a){return SyntheticEvent.call(this,t,e,n,a)}SyntheticEvent.augmentClass(SyntheticClipboardEvent,ClipboardEventInterface),module.exports=SyntheticClipboardEvent;

},{"./SyntheticEvent":688}],686:[function(require,module,exports){
"use strict";var SyntheticEvent=require("./SyntheticEvent"),CompositionEventInterface={data:null};function SyntheticCompositionEvent(t,n,e,i){return SyntheticEvent.call(this,t,n,e,i)}SyntheticEvent.augmentClass(SyntheticCompositionEvent,CompositionEventInterface),module.exports=SyntheticCompositionEvent;

},{"./SyntheticEvent":688}],687:[function(require,module,exports){
"use strict";var SyntheticMouseEvent=require("./SyntheticMouseEvent"),DragEventInterface={dataTransfer:null};function SyntheticDragEvent(t,e,n,r){return SyntheticMouseEvent.call(this,t,e,n,r)}SyntheticMouseEvent.augmentClass(SyntheticDragEvent,DragEventInterface),module.exports=SyntheticDragEvent;

},{"./SyntheticMouseEvent":692}],688:[function(require,module,exports){
(function (process){
"use strict";var _assign=require("object-assign"),PooledClass=require("./PooledClass"),emptyFunction=require("fbjs/lib/emptyFunction"),warning=require("fbjs/lib/warning"),didWarnForAddedNewProperty=!1,isProxySupported="function"==typeof Proxy,shouldBeReleasedProperties=["dispatchConfig","_targetInst","nativeEvent","isDefaultPrevented","isPropagationStopped","_dispatchListeners","_dispatchInstances"],EventInterface={type:null,target:null,currentTarget:emptyFunction.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function SyntheticEvent(e,t,n,r){"production"!==process.env.NODE_ENV&&(delete this.nativeEvent,delete this.preventDefault,delete this.stopPropagation),this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n;var o=this.constructor.Interface;for(var i in o)if(o.hasOwnProperty(i)){"production"!==process.env.NODE_ENV&&delete this[i];var s=o[i];s?this[i]=s(n):"target"===i?this.target=r:this[i]=n[i]}var a=null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue;return this.isDefaultPrevented=a?emptyFunction.thatReturnsTrue:emptyFunction.thatReturnsFalse,this.isPropagationStopped=emptyFunction.thatReturnsFalse,this}function getPooledWarningPropertyDefinition(e,t){var n="function"==typeof t;return{configurable:!0,set:function set(e){return warn(n?"setting the method":"setting the property","This is effectively a no-op"),e},get:function get(){return warn(n?"accessing the method":"accessing the property",n?"This is a no-op function":"This is set to null"),t}};function warn(t,n){"production"!==process.env.NODE_ENV&&warning(!1,"This synthetic event is reused for performance reasons. If you're seeing this, you're %s `%s` on a released/nullified synthetic event. %s. If you must keep the original synthetic event around, use event.persist(). See https://fb.me/react-event-pooling for more information.",t,e,n)}}_assign(SyntheticEvent.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=emptyFunction.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=emptyFunction.thatReturnsTrue)},persist:function(){this.isPersistent=emptyFunction.thatReturnsTrue},isPersistent:emptyFunction.thatReturnsFalse,destructor:function(){var e=this.constructor.Interface;for(var t in e)"production"!==process.env.NODE_ENV?Object.defineProperty(this,t,getPooledWarningPropertyDefinition(t,e[t])):this[t]=null;for(var n=0;n<shouldBeReleasedProperties.length;n++)this[shouldBeReleasedProperties[n]]=null;"production"!==process.env.NODE_ENV&&(Object.defineProperty(this,"nativeEvent",getPooledWarningPropertyDefinition("nativeEvent",null)),Object.defineProperty(this,"preventDefault",getPooledWarningPropertyDefinition("preventDefault",emptyFunction)),Object.defineProperty(this,"stopPropagation",getPooledWarningPropertyDefinition("stopPropagation",emptyFunction)))}}),SyntheticEvent.Interface=EventInterface,SyntheticEvent.augmentClass=function(e,t){var n=function(){};n.prototype=this.prototype;var r=new n;_assign(r,e.prototype),e.prototype=r,e.prototype.constructor=e,e.Interface=_assign({},this.Interface,t),e.augmentClass=this.augmentClass,PooledClass.addPoolingTo(e,PooledClass.fourArgumentPooler)},"production"!==process.env.NODE_ENV&&isProxySupported&&(SyntheticEvent=new Proxy(SyntheticEvent,{construct:function(e,t){return this.apply(e,Object.create(e.prototype),t)},apply:function(e,t,n){return new Proxy(e.apply(t,n),{set:function(e,t,n){return"isPersistent"===t||e.constructor.Interface.hasOwnProperty(t)||-1!==shouldBeReleasedProperties.indexOf(t)||("production"!==process.env.NODE_ENV&&warning(didWarnForAddedNewProperty||e.isPersistent(),"This synthetic event is reused for performance reasons. If you're seeing this, you're adding a new property in the synthetic event object. The property is never released. See https://fb.me/react-event-pooling for more information."),didWarnForAddedNewProperty=!0),e[t]=n,!0}})}})),PooledClass.addPoolingTo(SyntheticEvent,PooledClass.fourArgumentPooler),module.exports=SyntheticEvent;

}).call(this,require('_process'))

},{"./PooledClass":626,"_process":484,"fbjs/lib/emptyFunction":464,"fbjs/lib/warning":479,"object-assign":483}],689:[function(require,module,exports){
"use strict";var SyntheticUIEvent=require("./SyntheticUIEvent"),FocusEventInterface={relatedTarget:null};function SyntheticFocusEvent(t,e,n,c){return SyntheticUIEvent.call(this,t,e,n,c)}SyntheticUIEvent.augmentClass(SyntheticFocusEvent,FocusEventInterface),module.exports=SyntheticFocusEvent;

},{"./SyntheticUIEvent":695}],690:[function(require,module,exports){
"use strict";var SyntheticEvent=require("./SyntheticEvent"),InputEventInterface={data:null};function SyntheticInputEvent(t,n,e,c){return SyntheticEvent.call(this,t,n,e,c)}SyntheticEvent.augmentClass(SyntheticInputEvent,InputEventInterface),module.exports=SyntheticInputEvent;

},{"./SyntheticEvent":688}],691:[function(require,module,exports){
"use strict";var SyntheticUIEvent=require("./SyntheticUIEvent"),getEventCharCode=require("./getEventCharCode"),getEventKey=require("./getEventKey"),getEventModifierState=require("./getEventModifierState"),KeyboardEventInterface={key:getEventKey,location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:getEventModifierState,charCode:function(e){return"keypress"===e.type?getEventCharCode(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?getEventCharCode(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}};function SyntheticKeyboardEvent(e,t,n,r){return SyntheticUIEvent.call(this,e,t,n,r)}SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent,KeyboardEventInterface),module.exports=SyntheticKeyboardEvent;

},{"./SyntheticUIEvent":695,"./getEventCharCode":708,"./getEventKey":709,"./getEventModifierState":710}],692:[function(require,module,exports){
"use strict";var SyntheticUIEvent=require("./SyntheticUIEvent"),ViewportMetrics=require("./ViewportMetrics"),getEventModifierState=require("./getEventModifierState"),MouseEventInterface={screenX:null,screenY:null,clientX:null,clientY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:getEventModifierState,button:function(e){var t=e.button;return"which"in e?t:2===t?2:4===t?1:0},buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},pageX:function(e){return"pageX"in e?e.pageX:e.clientX+ViewportMetrics.currentScrollLeft},pageY:function(e){return"pageY"in e?e.pageY:e.clientY+ViewportMetrics.currentScrollTop}};function SyntheticMouseEvent(e,t,n,r){return SyntheticUIEvent.call(this,e,t,n,r)}SyntheticUIEvent.augmentClass(SyntheticMouseEvent,MouseEventInterface),module.exports=SyntheticMouseEvent;

},{"./SyntheticUIEvent":695,"./ViewportMetrics":698,"./getEventModifierState":710}],693:[function(require,module,exports){
"use strict";var SyntheticUIEvent=require("./SyntheticUIEvent"),getEventModifierState=require("./getEventModifierState"),TouchEventInterface={touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:getEventModifierState};function SyntheticTouchEvent(e,t,n,c){return SyntheticUIEvent.call(this,e,t,n,c)}SyntheticUIEvent.augmentClass(SyntheticTouchEvent,TouchEventInterface),module.exports=SyntheticTouchEvent;

},{"./SyntheticUIEvent":695,"./getEventModifierState":710}],694:[function(require,module,exports){
"use strict";var SyntheticEvent=require("./SyntheticEvent"),TransitionEventInterface={propertyName:null,elapsedTime:null,pseudoElement:null};function SyntheticTransitionEvent(t,n,e,i){return SyntheticEvent.call(this,t,n,e,i)}SyntheticEvent.augmentClass(SyntheticTransitionEvent,TransitionEventInterface),module.exports=SyntheticTransitionEvent;

},{"./SyntheticEvent":688}],695:[function(require,module,exports){
"use strict";var SyntheticEvent=require("./SyntheticEvent"),getEventTarget=require("./getEventTarget"),UIEventInterface={view:function(e){if(e.view)return e.view;var t=getEventTarget(e);if(t.window===t)return t;var n=t.ownerDocument;return n?n.defaultView||n.parentWindow:window},detail:function(e){return e.detail||0}};function SyntheticUIEvent(e,t,n,r){return SyntheticEvent.call(this,e,t,n,r)}SyntheticEvent.augmentClass(SyntheticUIEvent,UIEventInterface),module.exports=SyntheticUIEvent;

},{"./SyntheticEvent":688,"./getEventTarget":711}],696:[function(require,module,exports){
"use strict";var SyntheticMouseEvent=require("./SyntheticMouseEvent"),WheelEventInterface={deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null};function SyntheticWheelEvent(e,t,n,l){return SyntheticMouseEvent.call(this,e,t,n,l)}SyntheticMouseEvent.augmentClass(SyntheticWheelEvent,WheelEventInterface),module.exports=SyntheticWheelEvent;

},{"./SyntheticMouseEvent":692}],697:[function(require,module,exports){
(function (process){
"use strict";var _prodInvariant=require("./reactProdInvariant"),invariant=require("fbjs/lib/invariant"),OBSERVED_ERROR={},TransactionImpl={reinitializeTransaction:function(){this.transactionWrappers=this.getTransactionWrappers(),this.wrapperInitData?this.wrapperInitData.length=0:this.wrapperInitData=[],this._isInTransaction=!1},_isInTransaction:!1,getTransactionWrappers:null,isInTransaction:function(){return!!this._isInTransaction},perform:function(i,a,n,t,r,s,e,l){var o,c;this.isInTransaction()&&("production"!==process.env.NODE_ENV?invariant(!1,"Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction."):_prodInvariant("27"));try{this._isInTransaction=!0,o=!0,this.initializeAll(0),c=i.call(a,n,t,r,s,e,l),o=!1}finally{try{if(o)try{this.closeAll(0)}catch(i){}else this.closeAll(0)}finally{this._isInTransaction=!1}}return c},initializeAll:function(i){for(var a=this.transactionWrappers,n=i;n<a.length;n++){var t=a[n];try{this.wrapperInitData[n]=OBSERVED_ERROR,this.wrapperInitData[n]=t.initialize?t.initialize.call(this):null}finally{if(this.wrapperInitData[n]===OBSERVED_ERROR)try{this.initializeAll(n+1)}catch(i){}}}},closeAll:function(i){this.isInTransaction()||("production"!==process.env.NODE_ENV?invariant(!1,"Transaction.closeAll(): Cannot close transaction when none are open."):_prodInvariant("28"));for(var a=this.transactionWrappers,n=i;n<a.length;n++){var t,r=a[n],s=this.wrapperInitData[n];try{t=!0,s!==OBSERVED_ERROR&&r.close&&r.close.call(this,s),t=!1}finally{if(t)try{this.closeAll(n+1)}catch(i){}}}this.wrapperInitData.length=0}};module.exports=TransactionImpl;

}).call(this,require('_process'))

},{"./reactProdInvariant":722,"_process":484,"fbjs/lib/invariant":472}],698:[function(require,module,exports){
"use strict";var ViewportMetrics={currentScrollLeft:0,currentScrollTop:0,refreshScrollValues:function(r){ViewportMetrics.currentScrollLeft=r.x,ViewportMetrics.currentScrollTop=r.y}};module.exports=ViewportMetrics;

},{}],699:[function(require,module,exports){
(function (process){
"use strict";var _prodInvariant=require("./reactProdInvariant"),invariant=require("fbjs/lib/invariant");function accumulateInto(r,a){return null==a&&("production"!==process.env.NODE_ENV?invariant(!1,"accumulateInto(...): Accumulated items must not be null or undefined."):_prodInvariant("30")),null==r?a:Array.isArray(r)?Array.isArray(a)?(r.push.apply(r,a),r):(r.push(a),r):Array.isArray(a)?[r].concat(a):[r,a]}module.exports=accumulateInto;

}).call(this,require('_process'))

},{"./reactProdInvariant":722,"_process":484,"fbjs/lib/invariant":472}],700:[function(require,module,exports){
"use strict";var MOD=65521;function adler32(r){for(var e=1,t=0,a=0,o=r.length,d=-4&o;a<d;){for(var c=Math.min(a+4096,d);a<c;a+=4)t+=(e+=r.charCodeAt(a))+(e+=r.charCodeAt(a+1))+(e+=r.charCodeAt(a+2))+(e+=r.charCodeAt(a+3));e%=MOD,t%=MOD}for(;a<o;a++)t+=e+=r.charCodeAt(a);return(e%=MOD)|(t%=MOD)<<16}module.exports=adler32;

},{}],701:[function(require,module,exports){
(function (process){
"use strict";var ReactComponentTreeHook,_prodInvariant=require("./reactProdInvariant"),ReactPropTypeLocationNames=require("./ReactPropTypeLocationNames"),ReactPropTypesSecret=require("./ReactPropTypesSecret"),invariant=require("fbjs/lib/invariant"),warning=require("fbjs/lib/warning");"undefined"!=typeof process&&process.env&&"test"===process.env.NODE_ENV&&(ReactComponentTreeHook=require("react/lib/ReactComponentTreeHook"));var loggedTypeFailures={};function checkReactTypeSpec(e,r,o,t,a,n){for(var c in e)if(e.hasOwnProperty(c)){var s;try{"function"!=typeof e[c]&&("production"!==process.env.NODE_ENV?invariant(!1,"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",t||"React class",ReactPropTypeLocationNames[o],c):_prodInvariant("84",t||"React class",ReactPropTypeLocationNames[o],c)),s=e[c](r,c,t,o,null,ReactPropTypesSecret)}catch(e){s=e}if("production"!==process.env.NODE_ENV&&warning(!s||s instanceof Error,"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",t||"React class",ReactPropTypeLocationNames[o],c,typeof s),s instanceof Error&&!(s.message in loggedTypeFailures)){loggedTypeFailures[s.message]=!0;var i="";"production"!==process.env.NODE_ENV&&(ReactComponentTreeHook||(ReactComponentTreeHook=require("react/lib/ReactComponentTreeHook")),null!==n?i=ReactComponentTreeHook.getStackAddendumByID(n):null!==a&&(i=ReactComponentTreeHook.getCurrentStackAddendum(a))),"production"!==process.env.NODE_ENV&&warning(!1,"Failed %s type: %s%s",o,s.message,i)}}}module.exports=checkReactTypeSpec;

}).call(this,require('_process'))

},{"./ReactPropTypeLocationNames":671,"./ReactPropTypesSecret":672,"./reactProdInvariant":722,"_process":484,"fbjs/lib/invariant":472,"fbjs/lib/warning":479,"react/lib/ReactComponentTreeHook":757}],702:[function(require,module,exports){
"use strict";var createMicrosoftUnsafeLocalFunction=function(n){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,c,o,t){MSApp.execUnsafeLocalFunction(function(){return n(e,c,o,t)})}:n};module.exports=createMicrosoftUnsafeLocalFunction;

},{}],703:[function(require,module,exports){
(function (process){
"use strict";var CSSProperty=require("./CSSProperty"),warning=require("fbjs/lib/warning"),isUnitlessNumber=CSSProperty.isUnitlessNumber,styleWarnings={};function dangerousStyleValue(e,r,n,s){if(null==r||"boolean"==typeof r||""===r)return"";var t=isNaN(r);if(s||t||0===r||isUnitlessNumber.hasOwnProperty(e)&&isUnitlessNumber[e])return""+r;if("string"==typeof r){if("production"!==process.env.NODE_ENV&&n&&"0"!==r){var i=n._currentElement._owner,a=i?i.getName():null;a&&!styleWarnings[a]&&(styleWarnings[a]={});var u=!1;if(a){var l=styleWarnings[a];(u=l[e])||(l[e]=!0)}u||"production"!==process.env.NODE_ENV&&warning(!1,"a `%s` tag (owner: `%s`) was passed a numeric string value for CSS property `%s` (value: `%s`) which will be treated as a unitless number in a future version of React.",n._currentElement.type,a||"unknown",e,r)}r=r.trim()}return r+"px"}module.exports=dangerousStyleValue;

}).call(this,require('_process'))

},{"./CSSProperty":606,"_process":484,"fbjs/lib/warning":479}],704:[function(require,module,exports){
"use strict";var matchHtmlRegExp=/["'&<>]/;function escapeHtml(e){var t,r=""+e,a=matchHtmlRegExp.exec(r);if(!a)return r;var n="",s=0,c=0;for(s=a.index;s<r.length;s++){switch(r.charCodeAt(s)){case 34:t="&quot;";break;case 38:t="&amp;";break;case 39:t="&#x27;";break;case 60:t="&lt;";break;case 62:t="&gt;";break;default:continue}c!==s&&(n+=r.substring(c,s)),c=s+1,n+=t}return c!==s?n+r.substring(c,s):n}function escapeTextContentForBrowser(e){return"boolean"==typeof e||"number"==typeof e?""+e:escapeHtml(e)}module.exports=escapeTextContentForBrowser;

},{}],705:[function(require,module,exports){
(function (process){
"use strict";var _prodInvariant=require("./reactProdInvariant"),ReactCurrentOwner=require("react/lib/ReactCurrentOwner"),ReactDOMComponentTree=require("./ReactDOMComponentTree"),ReactInstanceMap=require("./ReactInstanceMap"),getHostComponentFromComposite=require("./getHostComponentFromComposite"),invariant=require("fbjs/lib/invariant"),warning=require("fbjs/lib/warning");function findDOMNode(e){if("production"!==process.env.NODE_ENV){var n=ReactCurrentOwner.current;null!==n&&("production"!==process.env.NODE_ENV&&warning(n._warnedAboutRefsInRender,"%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.",n.getName()||"A component"),n._warnedAboutRefsInRender=!0)}if(null==e)return null;if(1===e.nodeType)return e;var r=ReactInstanceMap.get(e);if(r)return(r=getHostComponentFromComposite(r))?ReactDOMComponentTree.getNodeFromInstance(r):null;"function"==typeof e.render?"production"!==process.env.NODE_ENV?invariant(!1,"findDOMNode was called on an unmounted component."):_prodInvariant("44"):"production"!==process.env.NODE_ENV?invariant(!1,"Element appears to be neither ReactComponent nor DOMNode (keys: %s)",Object.keys(e)):_prodInvariant("45",Object.keys(e))}module.exports=findDOMNode;

}).call(this,require('_process'))

},{"./ReactDOMComponentTree":635,"./ReactInstanceMap":663,"./getHostComponentFromComposite":712,"./reactProdInvariant":722,"_process":484,"fbjs/lib/invariant":472,"fbjs/lib/warning":479,"react/lib/ReactCurrentOwner":758}],706:[function(require,module,exports){
(function (process){
"use strict";var ReactComponentTreeHook,KeyEscapeUtils=require("./KeyEscapeUtils"),traverseAllChildren=require("./traverseAllChildren"),warning=require("fbjs/lib/warning");function flattenSingleChildIntoContext(e,n,t,r){if(e&&"object"==typeof e){var o=e,i=void 0===o[t];"production"!==process.env.NODE_ENV&&(ReactComponentTreeHook||(ReactComponentTreeHook=require("react/lib/ReactComponentTreeHook")),i||"production"!==process.env.NODE_ENV&&warning(!1,"flattenChildren(...): Encountered two children with the same key, `%s`. Child keys must be unique; when two children share a key, only the first child will be used.%s",KeyEscapeUtils.unescape(t),ReactComponentTreeHook.getStackAddendumByID(r))),i&&null!=n&&(o[t]=n)}}function flattenChildren(e,n){if(null==e)return e;var t={};return"production"!==process.env.NODE_ENV?traverseAllChildren(e,function(e,t,r){return flattenSingleChildIntoContext(e,t,r,n)},t):traverseAllChildren(e,flattenSingleChildIntoContext,t),t}"undefined"!=typeof process&&process.env&&"test"===process.env.NODE_ENV&&(ReactComponentTreeHook=require("react/lib/ReactComponentTreeHook")),module.exports=flattenChildren;

}).call(this,require('_process'))

},{"./KeyEscapeUtils":624,"./traverseAllChildren":727,"_process":484,"fbjs/lib/warning":479,"react/lib/ReactComponentTreeHook":757}],707:[function(require,module,exports){
"use strict";function forEachAccumulated(c,r,a){Array.isArray(c)?c.forEach(r,a):c&&r.call(a,c)}module.exports=forEachAccumulated;

},{}],708:[function(require,module,exports){
"use strict";function getEventCharCode(e){var r,t=e.keyCode;return"charCode"in e?0===(r=e.charCode)&&13===t&&(r=13):r=t,r>=32||13===r?r:0}module.exports=getEventCharCode;

},{}],709:[function(require,module,exports){
"use strict";var getEventCharCode=require("./getEventCharCode"),normalizeKey={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},translateToKey={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"};function getEventKey(e){if(e.key){var r=normalizeKey[e.key]||e.key;if("Unidentified"!==r)return r}if("keypress"===e.type){var t=getEventCharCode(e);return 13===t?"Enter":String.fromCharCode(t)}return"keydown"===e.type||"keyup"===e.type?translateToKey[e.keyCode]||"Unidentified":""}module.exports=getEventKey;

},{"./getEventCharCode":708}],710:[function(require,module,exports){
"use strict";var modifierKeyToProp={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function modifierStateGetter(t){var e=this.nativeEvent;if(e.getModifierState)return e.getModifierState(t);var r=modifierKeyToProp[t];return!!r&&!!e[r]}function getEventModifierState(t){return modifierStateGetter}module.exports=getEventModifierState;

},{}],711:[function(require,module,exports){
"use strict";function getEventTarget(e){var t=e.target||e.srcElement||window;return t.correspondingUseElement&&(t=t.correspondingUseElement),3===t.nodeType?t.parentNode:t}module.exports=getEventTarget;

},{}],712:[function(require,module,exports){
"use strict";var ReactNodeTypes=require("./ReactNodeTypes");function getHostComponentFromComposite(e){for(var o;(o=e._renderedNodeType)===ReactNodeTypes.COMPOSITE;)e=e._renderedComponent;return o===ReactNodeTypes.HOST?e._renderedComponent:o===ReactNodeTypes.EMPTY?null:void 0}module.exports=getHostComponentFromComposite;

},{"./ReactNodeTypes":669}],713:[function(require,module,exports){
"use strict";var ITERATOR_SYMBOL="function"==typeof Symbol&&Symbol.iterator,FAUX_ITERATOR_SYMBOL="@@iterator";function getIteratorFn(t){var r=t&&(ITERATOR_SYMBOL&&t[ITERATOR_SYMBOL]||t[FAUX_ITERATOR_SYMBOL]);if("function"==typeof r)return r}module.exports=getIteratorFn;

},{}],714:[function(require,module,exports){
"use strict";function getLeafNode(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function getSiblingNode(e){for(;e;){if(e.nextSibling)return e.nextSibling;e=e.parentNode}}function getNodeForCharacterOffset(e,t){for(var o=getLeafNode(e),n=0,r=0;o;){if(3===o.nodeType){if(r=n+o.textContent.length,n<=t&&r>=t)return{node:o,offset:t-n};n=r}o=getLeafNode(getSiblingNode(o))}}module.exports=getNodeForCharacterOffset;

},{}],715:[function(require,module,exports){
"use strict";var ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),contentKey=null;function getTextContentAccessor(){return!contentKey&&ExecutionEnvironment.canUseDOM&&(contentKey="textContent"in document.documentElement?"textContent":"innerText"),contentKey}module.exports=getTextContentAccessor;

},{"fbjs/lib/ExecutionEnvironment":458}],716:[function(require,module,exports){
"use strict";var ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment");function makePrefixMap(e,n){var i={};return i[e.toLowerCase()]=n.toLowerCase(),i["Webkit"+e]="webkit"+n,i["Moz"+e]="moz"+n,i["ms"+e]="MS"+n,i["O"+e]="o"+n.toLowerCase(),i}var vendorPrefixes={animationend:makePrefixMap("Animation","AnimationEnd"),animationiteration:makePrefixMap("Animation","AnimationIteration"),animationstart:makePrefixMap("Animation","AnimationStart"),transitionend:makePrefixMap("Transition","TransitionEnd")},prefixedEventNames={},style={};function getVendorPrefixedEventName(e){if(prefixedEventNames[e])return prefixedEventNames[e];if(!vendorPrefixes[e])return e;var n=vendorPrefixes[e];for(var i in n)if(n.hasOwnProperty(i)&&i in style)return prefixedEventNames[e]=n[i];return""}ExecutionEnvironment.canUseDOM&&(style=document.createElement("div").style,"AnimationEvent"in window||(delete vendorPrefixes.animationend.animation,delete vendorPrefixes.animationiteration.animation,delete vendorPrefixes.animationstart.animation),"TransitionEvent"in window||delete vendorPrefixes.transitionend.transition),module.exports=getVendorPrefixedEventName;

},{"fbjs/lib/ExecutionEnvironment":458}],717:[function(require,module,exports){
"use strict";var ReactDOMComponentTree=require("./ReactDOMComponentTree");function isCheckable(e){var t=e.type,r=e.nodeName;return r&&"input"===r.toLowerCase()&&("checkbox"===t||"radio"===t)}function getTracker(e){return e._wrapperState.valueTracker}function attachTracker(e,t){e._wrapperState.valueTracker=t}function detachTracker(e){e._wrapperState.valueTracker=null}function getValueFromNode(e){var t;return e&&(t=isCheckable(e)?""+e.checked:e.value),t}var inputValueTracking={_getTrackerFromNode:function(e){return getTracker(ReactDOMComponentTree.getInstanceFromNode(e))},track:function(e){if(!getTracker(e)){var t=ReactDOMComponentTree.getNodeFromInstance(e),r=isCheckable(t)?"checked":"value",a=Object.getOwnPropertyDescriptor(t.constructor.prototype,r),n=""+t[r];t.hasOwnProperty(r)||"function"!=typeof a.get||"function"!=typeof a.set||(Object.defineProperty(t,r,{enumerable:a.enumerable,configurable:!0,get:function(){return a.get.call(this)},set:function(e){n=""+e,a.set.call(this,e)}}),attachTracker(e,{getValue:function(){return n},setValue:function(e){n=""+e},stopTracking:function(){detachTracker(e),delete t[r]}}))}},updateValueIfChanged:function(e){if(!e)return!1;var t=getTracker(e);if(!t)return inputValueTracking.track(e),!0;var r=t.getValue(),a=getValueFromNode(ReactDOMComponentTree.getNodeFromInstance(e));return a!==r&&(t.setValue(a),!0)},stopTracking:function(e){var t=getTracker(e);t&&t.stopTracking()}};module.exports=inputValueTracking;

},{"./ReactDOMComponentTree":635}],718:[function(require,module,exports){
(function (process){
"use strict";var _prodInvariant=require("./reactProdInvariant"),_assign=require("object-assign"),ReactCompositeComponent=require("./ReactCompositeComponent"),ReactEmptyComponent=require("./ReactEmptyComponent"),ReactHostComponent=require("./ReactHostComponent"),getNextDebugID=require("react/lib/getNextDebugID"),invariant=require("fbjs/lib/invariant"),warning=require("fbjs/lib/warning"),ReactCompositeComponentWrapper=function(e){this.construct(e)};function getDeclarationErrorAddendum(e){if(e){var t=e.getName();if(t)return" Check the render method of `"+t+"`."}return""}function isInternalComponentType(e){return"function"==typeof e&&void 0!==e.prototype&&"function"==typeof e.prototype.mountComponent&&"function"==typeof e.prototype.receiveComponent}function instantiateReactComponent(e,t){var n;if(null===e||!1===e)n=ReactEmptyComponent.create(instantiateReactComponent);else if("object"==typeof e){var o=e,r=o.type;if("function"!=typeof r&&"string"!=typeof r){var p="";"production"!==process.env.NODE_ENV&&(void 0===r||"object"==typeof r&&null!==r&&0===Object.keys(r).length)&&(p+=" You likely forgot to export your component from the file it's defined in."),p+=getDeclarationErrorAddendum(o._owner),"production"!==process.env.NODE_ENV?invariant(!1,"Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s",null==r?r:typeof r,p):_prodInvariant("130",null==r?r:typeof r,p)}"string"==typeof o.type?n=ReactHostComponent.createInternalComponent(o):isInternalComponentType(o.type)?(n=new o.type(o)).getHostNode||(n.getHostNode=n.getNativeNode):n=new ReactCompositeComponentWrapper(o)}else"string"==typeof e||"number"==typeof e?n=ReactHostComponent.createInstanceForText(e):"production"!==process.env.NODE_ENV?invariant(!1,"Encountered invalid React node of type %s",typeof e):_prodInvariant("131",typeof e);return"production"!==process.env.NODE_ENV&&"production"!==process.env.NODE_ENV&&warning("function"==typeof n.mountComponent&&"function"==typeof n.receiveComponent&&"function"==typeof n.getHostNode&&"function"==typeof n.unmountComponent,"Only React Components can be mounted."),n._mountIndex=0,n._mountImage=null,"production"!==process.env.NODE_ENV&&(n._debugID=t?getNextDebugID():0),"production"!==process.env.NODE_ENV&&Object.preventExtensions&&Object.preventExtensions(n),n}_assign(ReactCompositeComponentWrapper.prototype,ReactCompositeComponent,{_instantiateReactComponent:instantiateReactComponent}),module.exports=instantiateReactComponent;

}).call(this,require('_process'))

},{"./ReactCompositeComponent":631,"./ReactEmptyComponent":654,"./ReactHostComponent":659,"./reactProdInvariant":722,"_process":484,"fbjs/lib/invariant":472,"fbjs/lib/warning":479,"object-assign":483,"react/lib/getNextDebugID":772}],719:[function(require,module,exports){
"use strict";var useHasFeature,ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment");function isEventSupported(e,t){if(!ExecutionEnvironment.canUseDOM||t&&!("addEventListener"in document))return!1;var n="on"+e,u=n in document;if(!u){var i=document.createElement("div");i.setAttribute(n,"return;"),u="function"==typeof i[n]}return!u&&useHasFeature&&"wheel"===e&&(u=document.implementation.hasFeature("Events.wheel","3.0")),u}ExecutionEnvironment.canUseDOM&&(useHasFeature=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("","")),module.exports=isEventSupported;

},{"fbjs/lib/ExecutionEnvironment":458}],720:[function(require,module,exports){
"use strict";var supportedInputTypes={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function isTextInputElement(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!supportedInputTypes[e.type]:"textarea"===t}module.exports=isTextInputElement;

},{}],721:[function(require,module,exports){
"use strict";var escapeTextContentForBrowser=require("./escapeTextContentForBrowser");function quoteAttributeValueForBrowser(e){return'"'+escapeTextContentForBrowser(e)+'"'}module.exports=quoteAttributeValueForBrowser;

},{"./escapeTextContentForBrowser":704}],722:[function(require,module,exports){
"use strict";function reactProdInvariant(r){for(var e=arguments.length-1,o="Minified React error #"+r+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+r,n=0;n<e;n++)o+="&args[]="+encodeURIComponent(arguments[n+1]);o+=" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";var t=new Error(o);throw t.name="Invariant Violation",t.framesToPop=1,t}module.exports=reactProdInvariant;

},{}],723:[function(require,module,exports){
"use strict";var ReactMount=require("./ReactMount");module.exports=ReactMount.renderSubtreeIntoContainer;

},{"./ReactMount":667}],724:[function(require,module,exports){
"use strict";var reusableSVGContainer,ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),DOMNamespaces=require("./DOMNamespaces"),WHITESPACE_TEST=/^[ \r\n\t\f]/,NONVISIBLE_TEST=/<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/,createMicrosoftUnsafeLocalFunction=require("./createMicrosoftUnsafeLocalFunction"),setInnerHTML=createMicrosoftUnsafeLocalFunction(function(e,n){if(e.namespaceURI!==DOMNamespaces.svg||"innerHTML"in e)e.innerHTML=n;else{(reusableSVGContainer=reusableSVGContainer||document.createElement("div")).innerHTML="<svg>"+n+"</svg>";for(var t=reusableSVGContainer.firstChild;t.firstChild;)e.appendChild(t.firstChild)}});if(ExecutionEnvironment.canUseDOM){var testElement=document.createElement("div");testElement.innerHTML=" ",""===testElement.innerHTML&&(setInnerHTML=function(e,n){if(e.parentNode&&e.parentNode.replaceChild(e,e),WHITESPACE_TEST.test(n)||"<"===n[0]&&NONVISIBLE_TEST.test(n)){e.innerHTML=String.fromCharCode(65279)+n;var t=e.firstChild;1===t.data.length?e.removeChild(t):t.deleteData(0,1)}else e.innerHTML=n}),testElement=null}module.exports=setInnerHTML;

},{"./DOMNamespaces":612,"./createMicrosoftUnsafeLocalFunction":702,"fbjs/lib/ExecutionEnvironment":458}],725:[function(require,module,exports){
"use strict";var ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),escapeTextContentForBrowser=require("./escapeTextContentForBrowser"),setInnerHTML=require("./setInnerHTML"),setTextContent=function(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t};ExecutionEnvironment.canUseDOM&&("textContent"in document.documentElement||(setTextContent=function(e,t){3!==e.nodeType?setInnerHTML(e,escapeTextContentForBrowser(t)):e.nodeValue=t})),module.exports=setTextContent;

},{"./escapeTextContentForBrowser":704,"./setInnerHTML":724,"fbjs/lib/ExecutionEnvironment":458}],726:[function(require,module,exports){
"use strict";function shouldUpdateReactComponent(e,t){var n=null===e||!1===e,o=null===t||!1===t;if(n||o)return n===o;var r=typeof e,u=typeof t;return"string"===r||"number"===r?"string"===u||"number"===u:"object"===u&&e.type===t.type&&e.key===t.key}module.exports=shouldUpdateReactComponent;

},{}],727:[function(require,module,exports){
(function (process){
"use strict";var _prodInvariant=require("./reactProdInvariant"),ReactCurrentOwner=require("react/lib/ReactCurrentOwner"),REACT_ELEMENT_TYPE=require("./ReactElementSymbol"),getIteratorFn=require("./getIteratorFn"),invariant=require("fbjs/lib/invariant"),KeyEscapeUtils=require("./KeyEscapeUtils"),warning=require("fbjs/lib/warning"),SEPARATOR=".",SUBSEPARATOR=":",didWarnAboutMaps=!1;function getComponentKey(e,r){return e&&"object"==typeof e&&null!=e.key?KeyEscapeUtils.escape(e.key):r.toString(36)}function traverseAllChildrenImpl(e,r,t,n){var a,o=typeof e;if("undefined"!==o&&"boolean"!==o||(e=null),null===e||"string"===o||"number"===o||"object"===o&&e.$$typeof===REACT_ELEMENT_TYPE)return t(n,e,""===r?SEPARATOR+getComponentKey(e,0):r),1;var i=0,l=""===r?SEPARATOR:r+SUBSEPARATOR;if(Array.isArray(e))for(var s=0;s<e.length;s++)i+=traverseAllChildrenImpl(a=e[s],l+getComponentKey(a,s),t,n);else{var c=getIteratorFn(e);if(c){var u,d=c.call(e);if(c!==e.entries)for(var p=0;!(u=d.next()).done;)i+=traverseAllChildrenImpl(a=u.value,l+getComponentKey(a,p++),t,n);else{if("production"!==process.env.NODE_ENV){var v="";if(ReactCurrentOwner.current){var f=ReactCurrentOwner.current.getName();f&&(v=" Check the render method of `"+f+"`.")}"production"!==process.env.NODE_ENV&&warning(didWarnAboutMaps,"Using Maps as children is not yet fully supported. It is an experimental feature that might be removed. Convert it to a sequence / iterable of keyed ReactElements instead.%s",v),didWarnAboutMaps=!0}for(;!(u=d.next()).done;){var E=u.value;E&&(i+=traverseAllChildrenImpl(a=E[1],l+KeyEscapeUtils.escape(E[0])+SUBSEPARATOR+getComponentKey(a,0),t,n))}}}else if("object"===o){var y="";if("production"!==process.env.NODE_ENV&&(y=" If you meant to render a collection of children, use an array instead or wrap the object using createFragment(object) from the React add-ons.",e._isReactElement&&(y=" It looks like you're using an element created by a different version of React. Make sure to use only one copy of React."),ReactCurrentOwner.current)){var b=ReactCurrentOwner.current.getName();b&&(y+=" Check the render method of `"+b+"`.")}var m=String(e);"production"!==process.env.NODE_ENV?invariant(!1,"Objects are not valid as a React child (found: %s).%s","[object Object]"===m?"object with keys {"+Object.keys(e).join(", ")+"}":m,y):_prodInvariant("31","[object Object]"===m?"object with keys {"+Object.keys(e).join(", ")+"}":m,y)}}return i}function traverseAllChildren(e,r,t){return null==e?0:traverseAllChildrenImpl(e,"",r,t)}module.exports=traverseAllChildren;

}).call(this,require('_process'))

},{"./KeyEscapeUtils":624,"./ReactElementSymbol":653,"./getIteratorFn":713,"./reactProdInvariant":722,"_process":484,"fbjs/lib/invariant":472,"fbjs/lib/warning":479,"react/lib/ReactCurrentOwner":758}],728:[function(require,module,exports){
(function (process){
"use strict";var _assign=require("object-assign"),emptyFunction=require("fbjs/lib/emptyFunction"),warning=require("fbjs/lib/warning"),validateDOMNesting=emptyFunction;if("production"!==process.env.NODE_ENV){var specialTags=["address","applet","area","article","aside","base","basefont","bgsound","blockquote","body","br","button","caption","center","col","colgroup","dd","details","dir","div","dl","dt","embed","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","iframe","img","input","isindex","li","link","listing","main","marquee","menu","menuitem","meta","nav","noembed","noframes","noscript","object","ol","p","param","plaintext","pre","script","section","select","source","style","summary","table","tbody","td","template","textarea","tfoot","th","thead","title","tr","track","ul","wbr","xmp"],inScopeTags=["applet","caption","html","table","td","th","marquee","object","template","foreignObject","desc","title"],buttonScopeTags=inScopeTags.concat(["button"]),impliedEndTags=["dd","dt","li","option","optgroup","p","rp","rt"],emptyAncestorInfo={current:null,formTag:null,aTagInScope:null,buttonTagInScope:null,nobrTagInScope:null,pTagInButtonScope:null,listItemTagAutoclosing:null,dlItemTagAutoclosing:null},updatedAncestorInfo=function(e,t,a){var n=_assign({},e||emptyAncestorInfo),o={tag:t,instance:a};return-1!==inScopeTags.indexOf(t)&&(n.aTagInScope=null,n.buttonTagInScope=null,n.nobrTagInScope=null),-1!==buttonScopeTags.indexOf(t)&&(n.pTagInButtonScope=null),-1!==specialTags.indexOf(t)&&"address"!==t&&"div"!==t&&"p"!==t&&(n.listItemTagAutoclosing=null,n.dlItemTagAutoclosing=null),n.current=o,"form"===t&&(n.formTag=o),"a"===t&&(n.aTagInScope=o),"button"===t&&(n.buttonTagInScope=o),"nobr"===t&&(n.nobrTagInScope=o),"p"===t&&(n.pTagInButtonScope=o),"li"===t&&(n.listItemTagAutoclosing=o),"dd"!==t&&"dt"!==t||(n.dlItemTagAutoclosing=o),n},isTagValidWithParent=function(e,t){switch(t){case"select":return"option"===e||"optgroup"===e||"#text"===e;case"optgroup":return"option"===e||"#text"===e;case"option":return"#text"===e;case"tr":return"th"===e||"td"===e||"style"===e||"script"===e||"template"===e;case"tbody":case"thead":case"tfoot":return"tr"===e||"style"===e||"script"===e||"template"===e;case"colgroup":return"col"===e||"template"===e;case"table":return"caption"===e||"colgroup"===e||"tbody"===e||"tfoot"===e||"thead"===e||"style"===e||"script"===e||"template"===e;case"head":return"base"===e||"basefont"===e||"bgsound"===e||"link"===e||"meta"===e||"title"===e||"noscript"===e||"noframes"===e||"style"===e||"script"===e||"template"===e;case"html":return"head"===e||"body"===e;case"#document":return"html"===e}switch(e){case"h1":case"h2":case"h3":case"h4":case"h5":case"h6":return"h1"!==t&&"h2"!==t&&"h3"!==t&&"h4"!==t&&"h5"!==t&&"h6"!==t;case"rp":case"rt":return-1===impliedEndTags.indexOf(t);case"body":case"caption":case"col":case"colgroup":case"frame":case"head":case"html":case"tbody":case"td":case"tfoot":case"th":case"thead":case"tr":return null==t}return!0},findInvalidAncestorForTag=function(e,t){switch(e){case"address":case"article":case"aside":case"blockquote":case"center":case"details":case"dialog":case"dir":case"div":case"dl":case"fieldset":case"figcaption":case"figure":case"footer":case"header":case"hgroup":case"main":case"menu":case"nav":case"ol":case"p":case"section":case"summary":case"ul":case"pre":case"listing":case"table":case"hr":case"xmp":case"h1":case"h2":case"h3":case"h4":case"h5":case"h6":return t.pTagInButtonScope;case"form":return t.formTag||t.pTagInButtonScope;case"li":return t.listItemTagAutoclosing;case"dd":case"dt":return t.dlItemTagAutoclosing;case"button":return t.buttonTagInScope;case"a":return t.aTagInScope;case"nobr":return t.nobrTagInScope}return null},findOwnerStack=function(e){if(!e)return[];var t=[];do{t.push(e)}while(e=e._currentElement._owner);return t.reverse(),t},didWarn={};(validateDOMNesting=function(e,t,a,n){var o=(n=n||emptyAncestorInfo).current,r=o&&o.tag;null!=t&&("production"!==process.env.NODE_ENV&&warning(null==e,"validateDOMNesting: when childText is passed, childTag should be null"),e="#text");var s=isTagValidWithParent(e,r)?null:o,c=s?null:findInvalidAncestorForTag(e,n),i=s||c;if(i){var l,u=i.tag,d=i.instance,p=a&&a._currentElement._owner,g=d&&d._currentElement._owner,m=findOwnerStack(p),h=findOwnerStack(g),f=Math.min(m.length,h.length),b=-1;for(l=0;l<f&&m[l]===h[l];l++)b=l;var T=m.slice(b+1).map(function(e){return e.getName()||"(unknown)"}),I=h.slice(b+1).map(function(e){return e.getName()||"(unknown)"}),v=[].concat(-1!==b?m[b].getName()||"(unknown)":[],I,u,c?["..."]:[],T,e).join(" > "),S=!!s+"|"+e+"|"+u+"|"+v;if(didWarn[S])return;didWarn[S]=!0;var y=e,w="";if("#text"===e?/\S/.test(t)?y="Text nodes":(y="Whitespace text nodes",w=" Make sure you don't have any extra whitespace between tags on each line of your source code."):y="<"+e+">",s){var x="";"table"===u&&"tr"===e&&(x+=" Add a <tbody> to your code to match the DOM tree generated by the browser."),"production"!==process.env.NODE_ENV&&warning(!1,"validateDOMNesting(...): %s cannot appear as a child of <%s>.%s See %s.%s",y,u,w,v,x)}else"production"!==process.env.NODE_ENV&&warning(!1,"validateDOMNesting(...): %s cannot appear as a descendant of <%s>. See %s.",y,u,v)}}).updatedAncestorInfo=updatedAncestorInfo,validateDOMNesting.isTagValidInContext=function(e,t){var a=(t=t||emptyAncestorInfo).current,n=a&&a.tag;return isTagValidWithParent(e,n)&&!findInvalidAncestorForTag(e,t)}}module.exports=validateDOMNesting;

}).call(this,require('_process'))

},{"_process":484,"fbjs/lib/emptyFunction":464,"fbjs/lib/warning":479,"object-assign":483}],729:[function(require,module,exports){
(function (process){
"use strict";"production"!==process.env.NODE_ENV&&function(){Object.defineProperty(exports,"__esModule",{value:!0});var e="function"==typeof Symbol&&Symbol.for,t=e?Symbol.for("react.element"):60103,r=e?Symbol.for("react.portal"):60106,o=e?Symbol.for("react.fragment"):60107,n=e?Symbol.for("react.strict_mode"):60108,s=e?Symbol.for("react.profiler"):60114,f=e?Symbol.for("react.provider"):60109,i=e?Symbol.for("react.context"):60110,p=e?Symbol.for("react.async_mode"):60111,c=e?Symbol.for("react.forward_ref"):60112,y=e?Symbol.for("react.placeholder"):60113;function typeOf(e){if("object"==typeof e&&null!==e){var y=e.$$typeof;switch(y){case t:var a=e.type;switch(a){case p:case o:case s:case n:return a;default:var u=a&&a.$$typeof;switch(u){case i:case c:case f:return u;default:return y}}case r:return y}}}var a=p,u=i,l=f,x=t,m=c,d=o,b=s,S=r,O=n;exports.typeOf=typeOf,exports.AsyncMode=a,exports.ContextConsumer=u,exports.ContextProvider=l,exports.Element=x,exports.ForwardRef=m,exports.Fragment=d,exports.Profiler=b,exports.Portal=S,exports.StrictMode=O,exports.isValidElementType=function isValidElementType(e){return"string"==typeof e||"function"==typeof e||e===o||e===p||e===s||e===n||e===y||"object"==typeof e&&null!==e&&("function"==typeof e.then||e.$$typeof===f||e.$$typeof===i||e.$$typeof===c)},exports.isAsyncMode=function isAsyncMode(e){return typeOf(e)===p},exports.isContextConsumer=function isContextConsumer(e){return typeOf(e)===i},exports.isContextProvider=function isContextProvider(e){return typeOf(e)===f},exports.isElement=function isElement(e){return"object"==typeof e&&null!==e&&e.$$typeof===t},exports.isForwardRef=function isForwardRef(e){return typeOf(e)===c},exports.isFragment=function isFragment(e){return typeOf(e)===o},exports.isProfiler=function isProfiler(e){return typeOf(e)===s},exports.isPortal=function isPortal(e){return typeOf(e)===r},exports.isStrictMode=function isStrictMode(e){return typeOf(e)===n}}();

}).call(this,require('_process'))

},{"_process":484}],730:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var b="function"==typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.forward_ref"):60112,n=b?Symbol.for("react.placeholder"):60113;function q(t){if("object"==typeof t&&null!==t){var r=t.$$typeof;switch(r){case c:switch(t=t.type){case l:case e:case g:case f:return t;default:switch(t=t&&t.$$typeof){case k:case m:case h:return t;default:return r}}case d:return r}}}exports.typeOf=q,exports.AsyncMode=l,exports.ContextConsumer=k,exports.ContextProvider=h,exports.Element=c,exports.ForwardRef=m,exports.Fragment=e,exports.Profiler=g,exports.Portal=d,exports.StrictMode=f,exports.isValidElementType=function(t){return"string"==typeof t||"function"==typeof t||t===e||t===l||t===g||t===f||t===n||"object"==typeof t&&null!==t&&("function"==typeof t.then||t.$$typeof===h||t.$$typeof===k||t.$$typeof===m)},exports.isAsyncMode=function(e){return q(e)===l},exports.isContextConsumer=function(e){return q(e)===k},exports.isContextProvider=function(e){return q(e)===h},exports.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===c},exports.isForwardRef=function(e){return q(e)===m},exports.isFragment=function(t){return q(t)===e},exports.isProfiler=function(e){return q(e)===g},exports.isPortal=function(e){return q(e)===d},exports.isStrictMode=function(e){return q(e)===f};

},{}],731:[function(require,module,exports){
(function (process){
"use strict";"production"===process.env.NODE_ENV?module.exports=require("./cjs/react-is.production.min.js"):module.exports=require("./cjs/react-is.development.js");

}).call(this,require('_process'))

},{"./cjs/react-is.development.js":729,"./cjs/react-is.production.min.js":730,"_process":484}],732:[function(require,module,exports){
"use strict";function componentWillMount(){var e=this.constructor.getDerivedStateFromProps(this.props,this.state);null!=e&&this.setState(e)}function componentWillReceiveProps(e){this.setState(function updater(t){var o=this.constructor.getDerivedStateFromProps(e,t);return null!=o?o:null}.bind(this))}function componentWillUpdate(e,t){try{var o=this.props,n=this.state;this.props=e,this.state=t,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(o,n)}finally{this.props=o,this.state=n}}function polyfill(e){var t=e.prototype;if(!t||!t.isReactComponent)throw new Error("Can only polyfill class components");if("function"!=typeof e.getDerivedStateFromProps&&"function"!=typeof t.getSnapshotBeforeUpdate)return e;var o=null,n=null,l=null;if("function"==typeof t.componentWillMount?o="componentWillMount":"function"==typeof t.UNSAFE_componentWillMount&&(o="UNSAFE_componentWillMount"),"function"==typeof t.componentWillReceiveProps?n="componentWillReceiveProps":"function"==typeof t.UNSAFE_componentWillReceiveProps&&(n="UNSAFE_componentWillReceiveProps"),"function"==typeof t.componentWillUpdate?l="componentWillUpdate":"function"==typeof t.UNSAFE_componentWillUpdate&&(l="UNSAFE_componentWillUpdate"),null!==o||null!==n||null!==l){var p=e.displayName||e.name,i="function"==typeof e.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+p+" uses "+i+" but also contains the following legacy lifecycles:"+(null!==o?"\n  "+o:"")+(null!==n?"\n  "+n:"")+(null!==l?"\n  "+l:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks")}if("function"==typeof e.getDerivedStateFromProps&&(t.componentWillMount=componentWillMount,t.componentWillReceiveProps=componentWillReceiveProps),"function"==typeof t.getSnapshotBeforeUpdate){if("function"!=typeof t.componentDidUpdate)throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");t.componentWillUpdate=componentWillUpdate;var r=t.componentDidUpdate;t.componentDidUpdate=function componentDidUpdatePolyfill(e,t,o){var n=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:o;r.call(this,e,t,n)}}return e}Object.defineProperty(exports,"__esModule",{value:!0}),componentWillMount.__suppressDeprecationWarning=!0,componentWillReceiveProps.__suppressDeprecationWarning=!0,componentWillUpdate.__suppressDeprecationWarning=!0,exports.polyfill=polyfill;

},{}],733:[function(require,module,exports){
"use strict";exports.__esModule=!0;var _propTypes=require("prop-types"),_propTypes2=_interopRequireDefault(_propTypes),_componentOrElement=require("prop-types-extra/lib/componentOrElement"),_componentOrElement2=_interopRequireDefault(_componentOrElement),_react=require("react"),_react2=_interopRequireDefault(_react),_reactDom=require("react-dom"),_reactDom2=_interopRequireDefault(_reactDom),_getContainer=require("./utils/getContainer"),_getContainer2=_interopRequireDefault(_getContainer),_ownerDocument=require("./utils/ownerDocument"),_ownerDocument2=_interopRequireDefault(_ownerDocument);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var Portal=function(e){function Portal(){var t,r;_classCallCheck(this,Portal);for(var o=arguments.length,n=Array(o),a=0;a<o;a++)n[a]=arguments[a];return t=r=_possibleConstructorReturn(this,e.call.apply(e,[this].concat(n))),r._mountOverlayTarget=function(){r._overlayTarget||(r._overlayTarget=document.createElement("div"),r._portalContainerNode=(0,_getContainer2.default)(r.props.container,(0,_ownerDocument2.default)(r).body),r._portalContainerNode.appendChild(r._overlayTarget))},r._unmountOverlayTarget=function(){r._overlayTarget&&(r._portalContainerNode.removeChild(r._overlayTarget),r._overlayTarget=null),r._portalContainerNode=null},r._renderOverlay=function(){var e=r.props.children?_react2.default.Children.only(r.props.children):null;if(null!==e){r._mountOverlayTarget();var t=!r._overlayInstance;r._overlayInstance=_reactDom2.default.unstable_renderSubtreeIntoContainer(r,e,r._overlayTarget,function(){t&&r.props.onRendered&&r.props.onRendered()})}else r._unrenderOverlay(),r._unmountOverlayTarget()},r._unrenderOverlay=function(){r._overlayTarget&&(_reactDom2.default.unmountComponentAtNode(r._overlayTarget),r._overlayInstance=null)},r.getMountNode=function(){return r._overlayTarget},_possibleConstructorReturn(r,t)}return _inherits(Portal,e),Portal.prototype.componentDidMount=function componentDidMount(){this._isMounted=!0,this._renderOverlay()},Portal.prototype.componentDidUpdate=function componentDidUpdate(){this._renderOverlay()},Portal.prototype.componentWillReceiveProps=function componentWillReceiveProps(e){this._overlayTarget&&e.container!==this.props.container&&(this._portalContainerNode.removeChild(this._overlayTarget),this._portalContainerNode=(0,_getContainer2.default)(e.container,(0,_ownerDocument2.default)(this).body),this._portalContainerNode.appendChild(this._overlayTarget))},Portal.prototype.componentWillUnmount=function componentWillUnmount(){this._isMounted=!1,this._unrenderOverlay(),this._unmountOverlayTarget()},Portal.prototype.render=function render(){return null},Portal}(_react2.default.Component);Portal.displayName="Portal",Portal.propTypes={container:_propTypes2.default.oneOfType([_componentOrElement2.default,_propTypes2.default.func]),onRendered:_propTypes2.default.func},exports.default=Portal,module.exports=exports.default;

},{"./utils/getContainer":744,"./utils/ownerDocument":747,"prop-types":495,"prop-types-extra/lib/componentOrElement":486,"react":777,"react-dom":602}],734:[function(require,module,exports){
"use strict";exports.__esModule=!0;var _extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var n in o)Object.prototype.hasOwnProperty.call(o,n)&&(e[n]=o[n])}return e},_activeElement=require("dom-helpers/activeElement"),_activeElement2=_interopRequireDefault(_activeElement),_contains=require("dom-helpers/query/contains"),_contains2=_interopRequireDefault(_contains),_inDOM=require("dom-helpers/util/inDOM"),_inDOM2=_interopRequireDefault(_inDOM),_propTypes=require("prop-types"),_propTypes2=_interopRequireDefault(_propTypes),_componentOrElement=require("prop-types-extra/lib/componentOrElement"),_componentOrElement2=_interopRequireDefault(_componentOrElement),_deprecated=require("prop-types-extra/lib/deprecated"),_deprecated2=_interopRequireDefault(_deprecated),_elementType=require("prop-types-extra/lib/elementType"),_elementType2=_interopRequireDefault(_elementType),_react=require("react"),_react2=_interopRequireDefault(_react),_reactDom=require("react-dom"),_reactDom2=_interopRequireDefault(_reactDom),_warning=require("warning"),_warning2=_interopRequireDefault(_warning),_ModalManager=require("./ModalManager"),_ModalManager2=_interopRequireDefault(_ModalManager),_Portal=require("./Portal"),_Portal2=_interopRequireDefault(_Portal),_RefHolder=require("./RefHolder"),_RefHolder2=_interopRequireDefault(_RefHolder),_addEventListener=require("./utils/addEventListener"),_addEventListener2=_interopRequireDefault(_addEventListener),_addFocusListener=require("./utils/addFocusListener"),_addFocusListener2=_interopRequireDefault(_addFocusListener),_getContainer=require("./utils/getContainer"),_getContainer2=_interopRequireDefault(_getContainer),_ownerDocument=require("./utils/ownerDocument"),_ownerDocument2=_interopRequireDefault(_ownerDocument);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var modalManager=new _ModalManager2.default,Modal=function(e){function Modal(){var t,o;_classCallCheck(this,Modal);for(var n=arguments.length,r=Array(n),a=0;a<n;a++)r[a]=arguments[a];return t=o=_possibleConstructorReturn(this,e.call.apply(e,[this].concat(r))),_initialiseProps.call(o),_possibleConstructorReturn(o,t)}return _inherits(Modal,e),Modal.prototype.omitProps=function omitProps(e,t){var o=Object.keys(e),n={};return o.map(function(o){Object.prototype.hasOwnProperty.call(t,o)||(n[o]=e[o])}),n},Modal.prototype.render=function render(){var e=this.props,t=e.show,o=e.container,n=e.children,r=e.transition,a=e.backdrop,i=e.className,s=e.style,p=e.onExit,u=e.onExiting,l=e.onEnter,d=e.onEntering,c=e.onEntered,f=_react2.default.Children.only(n),_=this.omitProps(this.props,Modal.propTypes);if(!(t||r&&!this.state.exited))return null;var h=f.props,y=h.role,m=h.tabIndex;return void 0!==y&&void 0!==m||(f=(0,_react.cloneElement)(f,{role:void 0===y?"document":y,tabIndex:null==m?"-1":m})),r&&(f=_react2.default.createElement(r,{appear:!0,unmountOnExit:!0,in:t,onExit:p,onExiting:u,onExited:this.handleHidden,onEnter:l,onEntering:d,onEntered:c},f)),_react2.default.createElement(_Portal2.default,{ref:this.setMountNode,container:o,onRendered:this.onPortalRendered},_react2.default.createElement("div",_extends({ref:this.setModalNodeRef,role:y||"dialog"},_,{style:s,className:i}),a&&this.renderBackdrop(),_react2.default.createElement(_RefHolder2.default,{ref:this.setDialogRef},f)))},Modal.prototype.componentWillReceiveProps=function componentWillReceiveProps(e){e.show?this.setState({exited:!1}):e.transition||this.setState({exited:!0})},Modal.prototype.componentWillUpdate=function componentWillUpdate(e){!this.props.show&&e.show&&this.checkForFocus()},Modal.prototype.componentDidMount=function componentDidMount(){this._isMounted=!0,this.props.show&&this.onShow()},Modal.prototype.componentDidUpdate=function componentDidUpdate(e){var t=this.props.transition;!e.show||this.props.show||t?!e.show&&this.props.show&&this.onShow():this.onHide()},Modal.prototype.componentWillUnmount=function componentWillUnmount(){var e=this.props,t=e.show,o=e.transition;this._isMounted=!1,(t||o&&!this.state.exited)&&this.onHide()},Modal.prototype.autoFocus=function autoFocus(){if(this.props.autoFocus){var e=this.getDialogElement(),t=(0,_activeElement2.default)((0,_ownerDocument2.default)(this));e&&!(0,_contains2.default)(e,t)&&(this.lastFocus=t,e.hasAttribute("tabIndex")||((0,_warning2.default)(!1,'The modal content node does not accept focus. For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".'),e.setAttribute("tabIndex",-1)),e.focus())}},Modal.prototype.restoreLastFocus=function restoreLastFocus(){this.lastFocus&&this.lastFocus.focus&&(this.lastFocus.focus(),this.lastFocus=null)},Modal.prototype.getDialogElement=function getDialogElement(){return _reactDom2.default.findDOMNode(this.dialog)},Modal.prototype.isTopModal=function isTopModal(){return this.props.manager.isTopModal(this)},Modal}(_react2.default.Component);Modal.propTypes=_extends({},_Portal2.default.propTypes,{show:_propTypes2.default.bool,container:_propTypes2.default.oneOfType([_componentOrElement2.default,_propTypes2.default.func]),onShow:_propTypes2.default.func,onHide:_propTypes2.default.func,backdrop:_propTypes2.default.oneOfType([_propTypes2.default.bool,_propTypes2.default.oneOf(["static"])]),renderBackdrop:_propTypes2.default.func,onEscapeKeyDown:_propTypes2.default.func,onEscapeKeyUp:(0,_deprecated2.default)(_propTypes2.default.func,"Please use onEscapeKeyDown instead for consistency"),onBackdropClick:_propTypes2.default.func,backdropStyle:_propTypes2.default.object,backdropClassName:_propTypes2.default.string,containerClassName:_propTypes2.default.string,keyboard:_propTypes2.default.bool,transition:_elementType2.default,backdropTransition:_elementType2.default,autoFocus:_propTypes2.default.bool,enforceFocus:_propTypes2.default.bool,restoreFocus:_propTypes2.default.bool,onEnter:_propTypes2.default.func,onEntering:_propTypes2.default.func,onEntered:_propTypes2.default.func,onExit:_propTypes2.default.func,onExiting:_propTypes2.default.func,onExited:_propTypes2.default.func,manager:_propTypes2.default.object.isRequired}),Modal.defaultProps={show:!1,backdrop:!0,keyboard:!0,autoFocus:!0,enforceFocus:!0,restoreFocus:!0,onHide:function onHide(){},manager:modalManager,renderBackdrop:function renderBackdrop(e){return _react2.default.createElement("div",e)}};var _initialiseProps=function _initialiseProps(){var e=this;this.state={exited:!this.props.show},this.renderBackdrop=function(){var t=e.props,o=t.backdropStyle,n=t.backdropClassName,r=t.renderBackdrop,a=t.backdropTransition,i=r({ref:function backdropRef(t){return e.backdrop=t},style:o,className:n,onClick:e.handleBackdropClick});return a&&(i=_react2.default.createElement(a,{appear:!0,in:e.props.show},i)),i},this.onPortalRendered=function(){e.autoFocus(),e.props.onShow&&e.props.onShow()},this.onShow=function(){var t=(0,_ownerDocument2.default)(e),o=(0,_getContainer2.default)(e.props.container,t.body);e.props.manager.add(e,o,e.props.containerClassName),e._onDocumentKeydownListener=(0,_addEventListener2.default)(t,"keydown",e.handleDocumentKeyDown),e._onDocumentKeyupListener=(0,_addEventListener2.default)(t,"keyup",e.handleDocumentKeyUp),e._onFocusinListener=(0,_addFocusListener2.default)(e.enforceFocus)},this.onHide=function(){e.props.manager.remove(e),e._onDocumentKeydownListener.remove(),e._onDocumentKeyupListener.remove(),e._onFocusinListener.remove(),e.props.restoreFocus&&e.restoreLastFocus()},this.setMountNode=function(t){e.mountNode=t?t.getMountNode():t},this.setModalNodeRef=function(t){e.modalNode=t},this.setDialogRef=function(t){e.dialog=t},this.handleHidden=function(){var t;(e.setState({exited:!0}),e.onHide(),e.props.onExited)&&(t=e.props).onExited.apply(t,arguments)},this.handleBackdropClick=function(t){t.target===t.currentTarget&&(e.props.onBackdropClick&&e.props.onBackdropClick(t),!0===e.props.backdrop&&e.props.onHide())},this.handleDocumentKeyDown=function(t){e.props.keyboard&&27===t.keyCode&&e.isTopModal()&&(e.props.onEscapeKeyDown&&e.props.onEscapeKeyDown(t),e.props.onHide())},this.handleDocumentKeyUp=function(t){e.props.keyboard&&27===t.keyCode&&e.isTopModal()&&e.props.onEscapeKeyUp&&e.props.onEscapeKeyUp(t)},this.checkForFocus=function(){_inDOM2.default&&(e.lastFocus=(0,_activeElement2.default)())},this.enforceFocus=function(){if(e.props.enforceFocus&&e._isMounted&&e.isTopModal()){var t=e.getDialogElement(),o=(0,_activeElement2.default)((0,_ownerDocument2.default)(e));t&&!(0,_contains2.default)(t,o)&&t.focus()}}};Modal.Manager=_ModalManager2.default,exports.default=Modal,module.exports=exports.default;

},{"./ModalManager":735,"./Portal":737,"./RefHolder":739,"./utils/addEventListener":741,"./utils/addFocusListener":742,"./utils/getContainer":744,"./utils/ownerDocument":747,"dom-helpers/activeElement":425,"dom-helpers/query/contains":436,"dom-helpers/util/inDOM":455,"prop-types":495,"prop-types-extra/lib/componentOrElement":486,"prop-types-extra/lib/deprecated":487,"prop-types-extra/lib/elementType":488,"react":777,"react-dom":602,"warning":780}],735:[function(require,module,exports){
"use strict";exports.__esModule=!0;var _class=require("dom-helpers/class"),_class2=_interopRequireDefault(_class),_style=require("dom-helpers/style"),_style2=_interopRequireDefault(_style),_scrollbarSize=require("dom-helpers/util/scrollbarSize"),_scrollbarSize2=_interopRequireDefault(_scrollbarSize),_isOverflowing=require("./utils/isOverflowing"),_isOverflowing2=_interopRequireDefault(_isOverflowing),_manageAriaHidden=require("./utils/manageAriaHidden");function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,i){if(!(e instanceof i))throw new TypeError("Cannot call a class as a function")}function findIndexOf(e,i){var n=-1;return e.some(function(e,a){if(i(e,a))return n=a,!0}),n}function findContainer(e,i){return findIndexOf(e,function(e){return-1!==e.modals.indexOf(i)})}function setContainerStyle(e,i){var n={overflow:"hidden"};e.style={overflow:i.style.overflow,paddingRight:i.style.paddingRight},e.overflowing&&(n.paddingRight=parseInt((0,_style2.default)(i,"paddingRight")||0,10)+(0,_scrollbarSize2.default)()+"px"),(0,_style2.default)(i,n)}function removeContainerStyle(e,i){var n=e.style;Object.keys(n).forEach(function(e){return i.style[e]=n[e]})}var ModalManager=function ModalManager(){var e=this,i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=i.hideSiblingNodes,a=void 0===n||n,l=i.handleContainerOverflow,s=void 0===l||l;_classCallCheck(this,ModalManager),this.add=function(i,n,a){var l=e.modals.indexOf(i),s=e.containers.indexOf(n);if(-1!==l)return l;if(l=e.modals.length,e.modals.push(i),e.hideSiblingNodes&&(0,_manageAriaHidden.hideSiblings)(n,i.mountNode),-1!==s)return e.data[s].modals.push(i),l;var r={modals:[i],classes:a?a.split(/\s+/):[],overflowing:(0,_isOverflowing2.default)(n)};return e.handleContainerOverflow&&setContainerStyle(r,n),r.classes.forEach(_class2.default.addClass.bind(null,n)),e.containers.push(n),e.data.push(r),l},this.remove=function(i){var n=e.modals.indexOf(i);if(-1!==n){var a=findContainer(e.data,i),l=e.data[a],s=e.containers[a];l.modals.splice(l.modals.indexOf(i),1),e.modals.splice(n,1),0===l.modals.length?(l.classes.forEach(_class2.default.removeClass.bind(null,s)),e.handleContainerOverflow&&removeContainerStyle(l,s),e.hideSiblingNodes&&(0,_manageAriaHidden.showSiblings)(s,i.mountNode),e.containers.splice(a,1),e.data.splice(a,1)):e.hideSiblingNodes&&(0,_manageAriaHidden.ariaHidden)(!1,l.modals[l.modals.length-1].mountNode)}},this.isTopModal=function(i){return!!e.modals.length&&e.modals[e.modals.length-1]===i},this.hideSiblingNodes=a,this.handleContainerOverflow=s,this.modals=[],this.containers=[],this.data=[]};exports.default=ModalManager,module.exports=exports.default;

},{"./utils/isOverflowing":745,"./utils/manageAriaHidden":746,"dom-helpers/class":428,"dom-helpers/style":445,"dom-helpers/util/scrollbarSize":456}],736:[function(require,module,exports){
"use strict";exports.__esModule=!0;var _extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var r in o)Object.prototype.hasOwnProperty.call(o,r)&&(e[r]=o[r])}return e},_propTypes=require("prop-types"),_propTypes2=_interopRequireDefault(_propTypes),_elementType=require("prop-types-extra/lib/elementType"),_elementType2=_interopRequireDefault(_elementType),_react=require("react"),_react2=_interopRequireDefault(_react),_Portal=require("./Portal"),_Portal2=_interopRequireDefault(_Portal),_Position=require("./Position"),_Position2=_interopRequireDefault(_Position),_RootCloseWrapper=require("./RootCloseWrapper"),_RootCloseWrapper2=_interopRequireDefault(_RootCloseWrapper);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _objectWithoutProperties(e,t){var o={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(o[r]=e[r]);return o}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var Overlay=function(e){function Overlay(t,o){_classCallCheck(this,Overlay);var r=_possibleConstructorReturn(this,e.call(this,t,o));return r.handleHidden=function(){var e;(r.setState({exited:!0}),r.props.onExited)&&(e=r.props).onExited.apply(e,arguments)},r.state={exited:!t.show},r.onHiddenListener=r.handleHidden.bind(r),r}return _inherits(Overlay,e),Overlay.prototype.componentWillReceiveProps=function componentWillReceiveProps(e){e.show?this.setState({exited:!1}):e.transition||this.setState({exited:!0})},Overlay.prototype.render=function render(){var e=this.props,t=e.container,o=e.containerPadding,r=e.target,n=e.placement,i=e.shouldUpdatePosition,a=e.rootClose,p=e.children,l=e.transition,s=_objectWithoutProperties(e,["container","containerPadding","target","placement","shouldUpdatePosition","rootClose","children","transition"]);if(!(s.show||l&&!this.state.exited))return null;var u=p;if(u=_react2.default.createElement(_Position2.default,{container:t,containerPadding:o,target:r,placement:n,shouldUpdatePosition:i},u),l){var c=s.onExit,d=s.onExiting,f=s.onEnter,_=s.onEntering,y=s.onEntered;u=_react2.default.createElement(l,{in:s.show,appear:!0,onExit:c,onExiting:d,onExited:this.onHiddenListener,onEnter:f,onEntering:_,onEntered:y},u)}return a&&(u=_react2.default.createElement(_RootCloseWrapper2.default,{onRootClose:s.onHide},u)),_react2.default.createElement(_Portal2.default,{container:t},u)},Overlay}(_react2.default.Component);Overlay.propTypes=_extends({},_Portal2.default.propTypes,_Position2.default.propTypes,{show:_propTypes2.default.bool,rootClose:_propTypes2.default.bool,onHide:function onHide(e){var t=_propTypes2.default.func;e.rootClose&&(t=t.isRequired);for(var o=arguments.length,r=Array(o>1?o-1:0),n=1;n<o;n++)r[n-1]=arguments[n];return t.apply(void 0,[e].concat(r))},transition:_elementType2.default,onEnter:_propTypes2.default.func,onEntering:_propTypes2.default.func,onEntered:_propTypes2.default.func,onExit:_propTypes2.default.func,onExiting:_propTypes2.default.func,onExited:_propTypes2.default.func}),exports.default=Overlay,module.exports=exports.default;

},{"./Portal":737,"./Position":738,"./RootCloseWrapper":740,"prop-types":495,"prop-types-extra/lib/elementType":488,"react":777}],737:[function(require,module,exports){
"use strict";exports.__esModule=!0;var _propTypes=require("prop-types"),_propTypes2=_interopRequireDefault(_propTypes),_componentOrElement=require("prop-types-extra/lib/componentOrElement"),_componentOrElement2=_interopRequireDefault(_componentOrElement),_react=require("react"),_react2=_interopRequireDefault(_react),_reactDom=require("react-dom"),_reactDom2=_interopRequireDefault(_reactDom),_getContainer=require("./utils/getContainer"),_getContainer2=_interopRequireDefault(_getContainer),_ownerDocument=require("./utils/ownerDocument"),_ownerDocument2=_interopRequireDefault(_ownerDocument),_LegacyPortal=require("./LegacyPortal"),_LegacyPortal2=_interopRequireDefault(_LegacyPortal);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var Portal=function(e){function Portal(){var t,o;_classCallCheck(this,Portal);for(var r=arguments.length,n=Array(r),a=0;a<r;a++)n[a]=arguments[a];return t=o=_possibleConstructorReturn(this,e.call.apply(e,[this].concat(n))),o.setContainer=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:o.props;o._portalContainerNode=(0,_getContainer2.default)(e.container,(0,_ownerDocument2.default)(o).body)},o.getMountNode=function(){return o._portalContainerNode},_possibleConstructorReturn(o,t)}return _inherits(Portal,e),Portal.prototype.componentDidMount=function componentDidMount(){this.setContainer(),this.forceUpdate(this.props.onRendered)},Portal.prototype.componentWillReceiveProps=function componentWillReceiveProps(e){e.container!==this.props.container&&this.setContainer(e)},Portal.prototype.componentWillUnmount=function componentWillUnmount(){this._portalContainerNode=null},Portal.prototype.render=function render(){return this.props.children&&this._portalContainerNode?_reactDom2.default.createPortal(this.props.children,this._portalContainerNode):null},Portal}(_react2.default.Component);Portal.displayName="Portal",Portal.propTypes={container:_propTypes2.default.oneOfType([_componentOrElement2.default,_propTypes2.default.func]),onRendered:_propTypes2.default.func},exports.default=_reactDom2.default.createPortal?Portal:_LegacyPortal2.default,module.exports=exports.default;

},{"./LegacyPortal":733,"./utils/getContainer":744,"./utils/ownerDocument":747,"prop-types":495,"prop-types-extra/lib/componentOrElement":486,"react":777,"react-dom":602}],738:[function(require,module,exports){
"use strict";exports.__esModule=!0;var _extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var n in o)Object.prototype.hasOwnProperty.call(o,n)&&(e[n]=o[n])}return e},_classnames=require("classnames"),_classnames2=_interopRequireDefault(_classnames),_propTypes=require("prop-types"),_propTypes2=_interopRequireDefault(_propTypes),_componentOrElement=require("prop-types-extra/lib/componentOrElement"),_componentOrElement2=_interopRequireDefault(_componentOrElement),_react=require("react"),_react2=_interopRequireDefault(_react),_reactDom=require("react-dom"),_reactDom2=_interopRequireDefault(_reactDom),_calculatePosition=require("./utils/calculatePosition"),_calculatePosition2=_interopRequireDefault(_calculatePosition),_getContainer=require("./utils/getContainer"),_getContainer2=_interopRequireDefault(_getContainer),_ownerDocument=require("./utils/ownerDocument"),_ownerDocument2=_interopRequireDefault(_ownerDocument);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _objectWithoutProperties(e,t){var o={};for(var n in e)t.indexOf(n)>=0||Object.prototype.hasOwnProperty.call(e,n)&&(o[n]=e[n]);return o}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var Position=function(e){function Position(t,o){_classCallCheck(this,Position);var n=_possibleConstructorReturn(this,e.call(this,t,o));return n.getTarget=function(){var e=n.props.target,t="function"==typeof e?e():e;return t&&_reactDom2.default.findDOMNode(t)||null},n.maybeUpdatePosition=function(e){var t=n.getTarget();(n.props.shouldUpdatePosition||t!==n._lastTarget||e)&&n.updatePosition(t)},n.state={positionLeft:0,positionTop:0,arrowOffsetLeft:null,arrowOffsetTop:null},n._needsFlush=!1,n._lastTarget=null,n}return _inherits(Position,e),Position.prototype.componentDidMount=function componentDidMount(){this.updatePosition(this.getTarget())},Position.prototype.componentWillReceiveProps=function componentWillReceiveProps(){this._needsFlush=!0},Position.prototype.componentDidUpdate=function componentDidUpdate(e){this._needsFlush&&(this._needsFlush=!1,this.maybeUpdatePosition(this.props.placement!==e.placement))},Position.prototype.render=function render(){var e=this.props,t=e.children,o=e.className,n=_objectWithoutProperties(e,["children","className"]),r=this.state,i=r.positionLeft,s=r.positionTop,a=_objectWithoutProperties(r,["positionLeft","positionTop"]);delete n.target,delete n.container,delete n.containerPadding,delete n.shouldUpdatePosition;var p=_react2.default.Children.only(t);return(0,_react.cloneElement)(p,_extends({},n,a,{positionLeft:i,positionTop:s,className:(0,_classnames2.default)(o,p.props.className),style:_extends({},p.props.style,{left:i,top:s})}))},Position.prototype.updatePosition=function updatePosition(e){if(this._lastTarget=e,e){var t=_reactDom2.default.findDOMNode(this),o=(0,_getContainer2.default)(this.props.container,(0,_ownerDocument2.default)(this).body);this.setState((0,_calculatePosition2.default)(this.props.placement,t,e,o,this.props.containerPadding))}else this.setState({positionLeft:0,positionTop:0,arrowOffsetLeft:null,arrowOffsetTop:null})},Position}(_react2.default.Component);Position.propTypes={target:_propTypes2.default.oneOfType([_componentOrElement2.default,_propTypes2.default.func]),container:_propTypes2.default.oneOfType([_componentOrElement2.default,_propTypes2.default.func]),containerPadding:_propTypes2.default.number,placement:_propTypes2.default.oneOf(["top","right","bottom","left"]),shouldUpdatePosition:_propTypes2.default.bool},Position.displayName="Position",Position.defaultProps={containerPadding:0,placement:"right",shouldUpdatePosition:!1},exports.default=Position,module.exports=exports.default;

},{"./utils/calculatePosition":743,"./utils/getContainer":744,"./utils/ownerDocument":747,"classnames":19,"prop-types":495,"prop-types-extra/lib/componentOrElement":486,"react":777,"react-dom":602}],739:[function(require,module,exports){
"use strict";exports.__esModule=!0;var _propTypes=require("prop-types"),_propTypes2=_interopRequireDefault(_propTypes),_react=require("react"),_react2=_interopRequireDefault(_react);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,r){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!r||"object"!=typeof r&&"function"!=typeof r?e:r}function _inherits(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function, not "+typeof r);e.prototype=Object.create(r&&r.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),r&&(Object.setPrototypeOf?Object.setPrototypeOf(e,r):e.__proto__=r)}var propTypes={children:_propTypes2.default.node},RefHolder=function(e){function RefHolder(){return _classCallCheck(this,RefHolder),_possibleConstructorReturn(this,e.apply(this,arguments))}return _inherits(RefHolder,e),RefHolder.prototype.render=function render(){return this.props.children},RefHolder}(_react2.default.Component);RefHolder.propTypes=propTypes,exports.default=RefHolder,module.exports=exports.default;

},{"prop-types":495,"react":777}],740:[function(require,module,exports){
"use strict";exports.__esModule=!0;var _contains=require("dom-helpers/query/contains"),_contains2=_interopRequireDefault(_contains),_propTypes=require("prop-types"),_propTypes2=_interopRequireDefault(_propTypes),_react=require("react"),_react2=_interopRequireDefault(_react),_reactDom=require("react-dom"),_reactDom2=_interopRequireDefault(_reactDom),_addEventListener=require("./utils/addEventListener"),_addEventListener2=_interopRequireDefault(_addEventListener),_ownerDocument=require("./utils/ownerDocument"),_ownerDocument2=_interopRequireDefault(_ownerDocument);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var escapeKeyCode=27;function isLeftClickEvent(e){return 0===e.button}function isModifiedEvent(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}var RootCloseWrapper=function(e){function RootCloseWrapper(t,o){_classCallCheck(this,RootCloseWrapper);var r=_possibleConstructorReturn(this,e.call(this,t,o));return r.addEventListeners=function(){var e=r.props.event,t=(0,_ownerDocument2.default)(r);r.documentMouseCaptureListener=(0,_addEventListener2.default)(t,e,r.handleMouseCapture,!0),r.documentMouseListener=(0,_addEventListener2.default)(t,e,r.handleMouse),r.documentKeyupListener=(0,_addEventListener2.default)(t,"keyup",r.handleKeyUp)},r.removeEventListeners=function(){r.documentMouseCaptureListener&&r.documentMouseCaptureListener.remove(),r.documentMouseListener&&r.documentMouseListener.remove(),r.documentKeyupListener&&r.documentKeyupListener.remove()},r.handleMouseCapture=function(e){r.preventMouseRootClose=isModifiedEvent(e)||!isLeftClickEvent(e)||(0,_contains2.default)(_reactDom2.default.findDOMNode(r),e.target)},r.handleMouse=function(e){!r.preventMouseRootClose&&r.props.onRootClose&&r.props.onRootClose(e)},r.handleKeyUp=function(e){e.keyCode===escapeKeyCode&&r.props.onRootClose&&r.props.onRootClose(e)},r.preventMouseRootClose=!1,r}return _inherits(RootCloseWrapper,e),RootCloseWrapper.prototype.componentDidMount=function componentDidMount(){this.props.disabled||this.addEventListeners()},RootCloseWrapper.prototype.componentDidUpdate=function componentDidUpdate(e){!this.props.disabled&&e.disabled?this.addEventListeners():this.props.disabled&&!e.disabled&&this.removeEventListeners()},RootCloseWrapper.prototype.componentWillUnmount=function componentWillUnmount(){this.props.disabled||this.removeEventListeners()},RootCloseWrapper.prototype.render=function render(){return this.props.children},RootCloseWrapper}(_react2.default.Component);RootCloseWrapper.displayName="RootCloseWrapper",RootCloseWrapper.propTypes={onRootClose:_propTypes2.default.func,children:_propTypes2.default.element,disabled:_propTypes2.default.bool,event:_propTypes2.default.oneOf(["click","mousedown"])},RootCloseWrapper.defaultProps={event:"click"},exports.default=RootCloseWrapper,module.exports=exports.default;

},{"./utils/addEventListener":741,"./utils/ownerDocument":747,"dom-helpers/query/contains":436,"prop-types":495,"react":777,"react-dom":602}],741:[function(require,module,exports){
"use strict";exports.__esModule=!0,exports.default=function(e,o,r,t){return(0,_on2.default)(e,o,r,t),{remove:function remove(){(0,_off2.default)(e,o,r,t)}}};var _on=require("dom-helpers/events/on"),_on2=_interopRequireDefault(_on),_off=require("dom-helpers/events/off"),_off2=_interopRequireDefault(_off);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}module.exports=exports.default;

},{"dom-helpers/events/off":433,"dom-helpers/events/on":434}],742:[function(require,module,exports){
"use strict";function addFocusListener(e){var t=void 0;return!document.addEventListener?(document.attachEvent("onfocusin",e),t=function remove(){return document.detachEvent("onfocusin",e)}):(document.addEventListener("focus",e,!0),t=function remove(){return document.removeEventListener("focus",e,!0)}),{remove:t}}exports.__esModule=!0,exports.default=addFocusListener,module.exports=exports.default;

},{}],743:[function(require,module,exports){
"use strict";exports.__esModule=!0,exports.default=calculatePosition;var _offset=require("dom-helpers/query/offset"),_offset2=_interopRequireDefault(_offset),_position=require("dom-helpers/query/position"),_position2=_interopRequireDefault(_position),_scrollTop=require("dom-helpers/query/scrollTop"),_scrollTop2=_interopRequireDefault(_scrollTop),_ownerDocument=require("./ownerDocument"),_ownerDocument2=_interopRequireDefault(_ownerDocument);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function getContainerDimensions(e){var t=void 0,o=void 0,i=void 0;if("BODY"===e.tagName)t=window.innerWidth,o=window.innerHeight,i=(0,_scrollTop2.default)((0,_ownerDocument2.default)(e).documentElement)||(0,_scrollTop2.default)(e);else{var r=(0,_offset2.default)(e);t=r.width,o=r.height,i=(0,_scrollTop2.default)(e)}return{width:t,height:o,scroll:i}}function getTopDelta(e,t,o,i){var r=getContainerDimensions(o),n=r.scroll,l=r.height,f=e-i-n,u=e+i-n+t;return f<0?-f:u>l?l-u:0}function getLeftDelta(e,t,o,i){var r=getContainerDimensions(o).width,n=e-i,l=e+i+t;return n<0?-n:l>r?r-l:0}function calculatePosition(e,t,o,i,r){var n="BODY"===i.tagName?(0,_offset2.default)(o):(0,_position2.default)(o,i),l=(0,_offset2.default)(t),f=l.height,u=l.width,s=void 0,a=void 0,d=void 0,p=void 0;if("left"===e||"right"===e){a=n.top+(n.height-f)/2,s="left"===e?n.left-u:n.left+n.width;var c=getTopDelta(a,f,i,r);a+=c,p=50*(1-2*c/f)+"%",d=void 0}else{if("top"!==e&&"bottom"!==e)throw new Error('calcOverlayPosition(): No such placement of "'+e+'" found.');s=n.left+(n.width-u)/2,a="top"===e?n.top-f:n.top+n.height;var _=getLeftDelta(s,u,i,r);s+=_,d=50*(1-2*_/u)+"%",p=void 0}return{positionLeft:s,positionTop:a,arrowOffsetLeft:d,arrowOffsetTop:p}}module.exports=exports.default;

},{"./ownerDocument":747,"dom-helpers/query/offset":438,"dom-helpers/query/position":440,"dom-helpers/query/scrollTop":443}],744:[function(require,module,exports){
"use strict";exports.__esModule=!0,exports.default=getContainer;var _reactDom=require("react-dom"),_reactDom2=_interopRequireDefault(_reactDom);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function getContainer(e,t){return e="function"==typeof e?e():e,_reactDom2.default.findDOMNode(e)||t}module.exports=exports.default;

},{"react-dom":602}],745:[function(require,module,exports){
"use strict";exports.__esModule=!0,exports.default=isOverflowing;var _isWindow=require("dom-helpers/query/isWindow"),_isWindow2=_interopRequireDefault(_isWindow),_ownerDocument=require("dom-helpers/ownerDocument"),_ownerDocument2=_interopRequireDefault(_ownerDocument);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function isBody(e){return e&&"body"===e.tagName.toLowerCase()}function bodyIsOverflowing(e){var o=(0,_ownerDocument2.default)(e),t=(0,_isWindow2.default)(o).innerWidth;if(!t){var i=o.documentElement.getBoundingClientRect();t=i.right-Math.abs(i.left)}return o.body.clientWidth<t}function isOverflowing(e){return(0,_isWindow2.default)(e)||isBody(e)?bodyIsOverflowing(e):e.scrollHeight>e.clientHeight}module.exports=exports.default;

},{"dom-helpers/ownerDocument":435,"dom-helpers/query/isWindow":437}],746:[function(require,module,exports){
"use strict";exports.__esModule=!0,exports.ariaHidden=ariaHidden,exports.hideSiblings=hideSiblings,exports.showSiblings=showSiblings;var BLACKLIST=["template","script","style"],isHidable=function isHidable(i){var n=i.nodeType,e=i.tagName;return 1===n&&-1===BLACKLIST.indexOf(e.toLowerCase())},siblings=function siblings(i,n,e){n=[].concat(n),[].forEach.call(i.children,function(i){-1===n.indexOf(i)&&isHidable(i)&&e(i)})};function ariaHidden(i,n){n&&(i?n.setAttribute("aria-hidden","true"):n.removeAttribute("aria-hidden"))}function hideSiblings(i,n){siblings(i,n,function(i){return ariaHidden(!0,i)})}function showSiblings(i,n){siblings(i,n,function(i){return ariaHidden(!1,i)})}

},{}],747:[function(require,module,exports){
"use strict";exports.__esModule=!0,exports.default=function(e){return(0,_ownerDocument2.default)(_reactDom2.default.findDOMNode(e))};var _reactDom=require("react-dom"),_reactDom2=_interopRequireDefault(_reactDom),_ownerDocument=require("dom-helpers/ownerDocument"),_ownerDocument2=_interopRequireDefault(_ownerDocument);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}module.exports=exports.default;

},{"dom-helpers/ownerDocument":435,"react-dom":602}],748:[function(require,module,exports){
"use strict";exports.__esModule=!0;var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},_react=require("react"),_react2=_interopRequireDefault(_react),_createChainableTypeChecker=require("./utils/createChainableTypeChecker"),_createChainableTypeChecker2=_interopRequireDefault(_createChainableTypeChecker);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function elementType(e,t,r,a,n){var o=e[t],l=void 0===o?"undefined":_typeof(o);return _react2.default.isValidElement(o)?new Error("Invalid "+a+" `"+n+"` of type ReactElement supplied to `"+r+"`, expected an element type (a string or a ReactClass)."):"function"!==l&&"string"!==l?new Error("Invalid "+a+" `"+n+"` of value `"+o+"` supplied to `"+r+"`, expected an element type (a string or a ReactClass)."):null}exports.default=(0,_createChainableTypeChecker2.default)(elementType);

},{"./utils/createChainableTypeChecker":749,"react":777}],749:[function(require,module,exports){
"use strict";function createChainableTypeChecker(e){function checkType(r,n,c,a,i,t){var u=a||"<<anonymous>>",l=t||c;if(null==n[c])return r?new Error("Required "+i+" `"+l+"` was not specified in `"+u+"`."):null;for(var o=arguments.length,p=Array(o>6?o-6:0),s=6;s<o;s++)p[s-6]=arguments[s];return e.apply(void 0,[n,c,u,i,l].concat(p))}var r=checkType.bind(null,!1);return r.isRequired=checkType.bind(null,!0),r}exports.__esModule=!0,exports.default=createChainableTypeChecker;

},{}],750:[function(require,module,exports){
(function (process){
"use strict";exports.__esModule=!0,exports.default=exports.EXITING=exports.ENTERED=exports.ENTERING=exports.EXITED=exports.UNMOUNTED=void 0;var PropTypes=_interopRequireWildcard(require("prop-types")),_react=_interopRequireDefault(require("react")),_reactDom=_interopRequireDefault(require("react-dom")),_reactLifecyclesCompat=require("react-lifecycles-compat"),_PropTypes=require("./utils/PropTypes");function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}function _interopRequireWildcard(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)if(Object.prototype.hasOwnProperty.call(t,n)){var o=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(t,n):{};o.get||o.set?Object.defineProperty(e,n,o):e[n]=t[n]}return e.default=t,e}function _objectWithoutPropertiesLoose(t,e){if(null==t)return{};var n,o,r={},i=Object.keys(t);for(o=0;o<i.length;o++)n=i[o],e.indexOf(n)>=0||(r[n]=t[n]);return r}function _inheritsLoose(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}var UNMOUNTED="unmounted";exports.UNMOUNTED=UNMOUNTED;var EXITED="exited";exports.EXITED=EXITED;var ENTERING="entering";exports.ENTERING=ENTERING;var ENTERED="entered";exports.ENTERED=ENTERED;var EXITING="exiting";exports.EXITING=EXITING;var Transition=function(t){function Transition(e,n){var o;o=t.call(this,e,n)||this;var r,i=n.transitionGroup,s=i&&!i.isMounting?e.enter:e.appear;return o.appearStatus=null,e.in?s?(r=EXITED,o.appearStatus=ENTERING):r=ENTERED:r=e.unmountOnExit||e.mountOnEnter?UNMOUNTED:EXITED,o.state={status:r},o.nextCallback=null,o}_inheritsLoose(Transition,t);var e=Transition.prototype;return e.getChildContext=function getChildContext(){return{transitionGroup:null}},Transition.getDerivedStateFromProps=function getDerivedStateFromProps(t,e){return t.in&&e.status===UNMOUNTED?{status:EXITED}:null},e.componentDidMount=function componentDidMount(){this.updateStatus(!0,this.appearStatus)},e.componentDidUpdate=function componentDidUpdate(t){var e=null;if(t!==this.props){var n=this.state.status;this.props.in?n!==ENTERING&&n!==ENTERED&&(e=ENTERING):n!==ENTERING&&n!==ENTERED||(e=EXITING)}this.updateStatus(!1,e)},e.componentWillUnmount=function componentWillUnmount(){this.cancelNextCallback()},e.getTimeouts=function getTimeouts(){var t,e,n,o=this.props.timeout;return t=e=n=o,null!=o&&"number"!=typeof o&&(t=o.exit,e=o.enter,n=o.appear),{exit:t,enter:e,appear:n}},e.updateStatus=function updateStatus(t,e){if(void 0===t&&(t=!1),null!==e){this.cancelNextCallback();var n=_reactDom.default.findDOMNode(this);e===ENTERING?this.performEnter(n,t):this.performExit(n)}else this.props.unmountOnExit&&this.state.status===EXITED&&this.setState({status:UNMOUNTED})},e.performEnter=function performEnter(t,e){var n=this,o=this.props.enter,r=this.context.transitionGroup?this.context.transitionGroup.isMounting:e,i=this.getTimeouts();e||o?(this.props.onEnter(t,r),this.safeSetState({status:ENTERING},function(){n.props.onEntering(t,r),n.onTransitionEnd(t,i.enter,function(){n.safeSetState({status:ENTERED},function(){n.props.onEntered(t,r)})})})):this.safeSetState({status:ENTERED},function(){n.props.onEntered(t)})},e.performExit=function performExit(t){var e=this,n=this.props.exit,o=this.getTimeouts();n?(this.props.onExit(t),this.safeSetState({status:EXITING},function(){e.props.onExiting(t),e.onTransitionEnd(t,o.exit,function(){e.safeSetState({status:EXITED},function(){e.props.onExited(t)})})})):this.safeSetState({status:EXITED},function(){e.props.onExited(t)})},e.cancelNextCallback=function cancelNextCallback(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},e.safeSetState=function safeSetState(t,e){e=this.setNextCallback(e),this.setState(t,e)},e.setNextCallback=function setNextCallback(t){var e=this,n=!0;return this.nextCallback=function(o){n&&(n=!1,e.nextCallback=null,t(o))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},e.onTransitionEnd=function onTransitionEnd(t,e,n){this.setNextCallback(n),t?(this.props.addEndListener&&this.props.addEndListener(t,this.nextCallback),null!=e&&setTimeout(this.nextCallback,e)):setTimeout(this.nextCallback,0)},e.render=function render(){var t=this.state.status;if(t===UNMOUNTED)return null;var e=this.props,n=e.children,o=_objectWithoutPropertiesLoose(e,["children"]);if(delete o.in,delete o.mountOnEnter,delete o.unmountOnExit,delete o.appear,delete o.enter,delete o.exit,delete o.timeout,delete o.addEndListener,delete o.onEnter,delete o.onEntering,delete o.onEntered,delete o.onExit,delete o.onExiting,delete o.onExited,"function"==typeof n)return n(t,o);var r=_react.default.Children.only(n);return _react.default.cloneElement(r,o)},Transition}(_react.default.Component);function noop(){}Transition.contextTypes={transitionGroup:PropTypes.object},Transition.childContextTypes={transitionGroup:function transitionGroup(){}},Transition.propTypes="production"!==process.env.NODE_ENV?{children:PropTypes.oneOfType([PropTypes.func.isRequired,PropTypes.element.isRequired]).isRequired,in:PropTypes.bool,mountOnEnter:PropTypes.bool,unmountOnExit:PropTypes.bool,appear:PropTypes.bool,enter:PropTypes.bool,exit:PropTypes.bool,timeout:function timeout(t){var e="production"!==process.env.NODE_ENV?_PropTypes.timeoutsShape:{};t.addEndListener||(e=e.isRequired);for(var n=arguments.length,o=new Array(n>1?n-1:0),r=1;r<n;r++)o[r-1]=arguments[r];return e.apply(void 0,[t].concat(o))},addEndListener:PropTypes.func,onEnter:PropTypes.func,onEntering:PropTypes.func,onEntered:PropTypes.func,onExit:PropTypes.func,onExiting:PropTypes.func,onExited:PropTypes.func}:{},Transition.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:noop,onEntering:noop,onEntered:noop,onExit:noop,onExiting:noop,onExited:noop},Transition.UNMOUNTED=0,Transition.EXITED=1,Transition.ENTERING=2,Transition.ENTERED=3,Transition.EXITING=4;var _default=(0,_reactLifecyclesCompat.polyfill)(Transition);exports.default=_default;

}).call(this,require('_process'))

},{"./utils/PropTypes":751,"_process":484,"prop-types":495,"react":777,"react-dom":602,"react-lifecycles-compat":732}],751:[function(require,module,exports){
"use strict";exports.__esModule=!0,exports.transitionTimeout=transitionTimeout,exports.classNamesShape=exports.timeoutsShape=void 0;var _propTypes=_interopRequireDefault(require("prop-types"));function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function transitionTimeout(e){var t="transition"+e+"Timeout",r="transition"+e;return function(e){if(e[r]){if(null==e[t])return new Error(t+" wasn't supplied to CSSTransitionGroup: this can cause unreliable animations and won't be supported in a future version of React. See https://fb.me/react-animation-transition-group-timeout for more information.");if("number"!=typeof e[t])return new Error(t+" must be a number (in milliseconds)")}return null}}var timeoutsShape=_propTypes.default.oneOfType([_propTypes.default.number,_propTypes.default.shape({enter:_propTypes.default.number,exit:_propTypes.default.number}).isRequired]);exports.timeoutsShape=timeoutsShape;var classNamesShape=_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.shape({enter:_propTypes.default.string,exit:_propTypes.default.string,active:_propTypes.default.string}),_propTypes.default.shape({enter:_propTypes.default.string,enterDone:_propTypes.default.string,enterActive:_propTypes.default.string,exit:_propTypes.default.string,exitDone:_propTypes.default.string,exitActive:_propTypes.default.string})]);exports.classNamesShape=classNamesShape;

},{"prop-types":495}],752:[function(require,module,exports){
"use strict";function escape(e){var n={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return n[e]})}function unescape(e){var n={"=0":"=","=2":":"};return(""+("."===e[0]&&"$"===e[1]?e.substring(2):e.substring(1))).replace(/(=0|=2)/g,function(e){return n[e]})}var KeyEscapeUtils={escape:escape,unescape:unescape};module.exports=KeyEscapeUtils;

},{}],753:[function(require,module,exports){
(function (process){
"use strict";var _prodInvariant=require("./reactProdInvariant"),invariant=require("fbjs/lib/invariant"),oneArgumentPooler=function(o){if(this.instancePool.length){var e=this.instancePool.pop();return this.call(e,o),e}return new this(o)},twoArgumentPooler=function(o,e){if(this.instancePool.length){var n=this.instancePool.pop();return this.call(n,o,e),n}return new this(o,e)},threeArgumentPooler=function(o,e,n){if(this.instancePool.length){var t=this.instancePool.pop();return this.call(t,o,e,n),t}return new this(o,e,n)},fourArgumentPooler=function(o,e,n,t){if(this.instancePool.length){var r=this.instancePool.pop();return this.call(r,o,e,n,t),r}return new this(o,e,n,t)},standardReleaser=function(o){o instanceof this||("production"!==process.env.NODE_ENV?invariant(!1,"Trying to release an instance into a pool of a different type."):_prodInvariant("25")),o.destructor(),this.instancePool.length<this.poolSize&&this.instancePool.push(o)},DEFAULT_POOL_SIZE=10,DEFAULT_POOLER=oneArgumentPooler,addPoolingTo=function(o,e){var n=o;return n.instancePool=[],n.getPooled=e||DEFAULT_POOLER,n.poolSize||(n.poolSize=DEFAULT_POOL_SIZE),n.release=standardReleaser,n},PooledClass={addPoolingTo:addPoolingTo,oneArgumentPooler:oneArgumentPooler,twoArgumentPooler:twoArgumentPooler,threeArgumentPooler:threeArgumentPooler,fourArgumentPooler:fourArgumentPooler};module.exports=PooledClass;

}).call(this,require('_process'))

},{"./reactProdInvariant":775,"_process":484,"fbjs/lib/invariant":472}],754:[function(require,module,exports){
(function (process){
"use strict";var _assign=require("object-assign"),ReactBaseClasses=require("./ReactBaseClasses"),ReactChildren=require("./ReactChildren"),ReactDOMFactories=require("./ReactDOMFactories"),ReactElement=require("./ReactElement"),ReactPropTypes=require("./ReactPropTypes"),ReactVersion=require("./ReactVersion"),createReactClass=require("./createClass"),onlyChild=require("./onlyChild"),createElement=ReactElement.createElement,createFactory=ReactElement.createFactory,cloneElement=ReactElement.cloneElement;if("production"!==process.env.NODE_ENV){var lowPriorityWarning=require("./lowPriorityWarning"),canDefineProperty=require("./canDefineProperty"),ReactElementValidator=require("./ReactElementValidator"),didWarnPropTypesDeprecated=!1;createElement=ReactElementValidator.createElement,createFactory=ReactElementValidator.createFactory,cloneElement=ReactElementValidator.cloneElement}var __spread=_assign,createMixin=function(e){return e};if("production"!==process.env.NODE_ENV){var warnedForSpread=!1,warnedForCreateMixin=!1;__spread=function(){return lowPriorityWarning(warnedForSpread,"React.__spread is deprecated and should not be used. Use Object.assign directly or another helper function with similar semantics. You may be seeing this warning due to your compiler. See https://fb.me/react-spread-deprecation for more details."),warnedForSpread=!0,_assign.apply(null,arguments)},createMixin=function(e){return lowPriorityWarning(warnedForCreateMixin,"React.createMixin is deprecated and should not be used. In React v16.0, it will be removed. You can use this mixin directly instead. See https://fb.me/createmixin-was-never-implemented for more info."),warnedForCreateMixin=!0,e}}var React={Children:{map:ReactChildren.map,forEach:ReactChildren.forEach,count:ReactChildren.count,toArray:ReactChildren.toArray,only:onlyChild},Component:ReactBaseClasses.Component,PureComponent:ReactBaseClasses.PureComponent,createElement:createElement,cloneElement:cloneElement,isValidElement:ReactElement.isValidElement,PropTypes:ReactPropTypes,createClass:createReactClass,createFactory:createFactory,createMixin:createMixin,DOM:ReactDOMFactories,version:ReactVersion,__spread:__spread};if("production"!==process.env.NODE_ENV){var warnedForCreateClass=!1;canDefineProperty&&(Object.defineProperty(React,"PropTypes",{get:function(){return lowPriorityWarning(didWarnPropTypesDeprecated,"Accessing PropTypes via the main React package is deprecated, and will be removed in  React v16.0. Use the latest available v15.* prop-types package from npm instead. For info on usage, compatibility, migration and more, see https://fb.me/prop-types-docs"),didWarnPropTypesDeprecated=!0,ReactPropTypes}}),Object.defineProperty(React,"createClass",{get:function(){return lowPriorityWarning(warnedForCreateClass,"Accessing createClass via the main React package is deprecated, and will be removed in React v16.0. Use a plain JavaScript class instead. If you're not yet ready to migrate, create-react-class v15.* is available on npm as a temporary, drop-in replacement. For more info see https://fb.me/react-create-class"),warnedForCreateClass=!0,createReactClass}})),React.DOM={};var warnedForFactories=!1;Object.keys(ReactDOMFactories).forEach(function(e){React.DOM[e]=function(){return warnedForFactories||(lowPriorityWarning(!1,"Accessing factories like React.DOM.%s has been deprecated and will be removed in v16.0+. Use the react-dom-factories package instead.  Version 1.0 provides a drop-in replacement. For more info, see https://fb.me/react-dom-factories",e),warnedForFactories=!0),ReactDOMFactories[e].apply(ReactDOMFactories,arguments)}})}module.exports=React;

}).call(this,require('_process'))

},{"./ReactBaseClasses":755,"./ReactChildren":756,"./ReactDOMFactories":759,"./ReactElement":760,"./ReactElementValidator":762,"./ReactPropTypes":765,"./ReactVersion":767,"./canDefineProperty":768,"./createClass":770,"./lowPriorityWarning":773,"./onlyChild":774,"_process":484,"object-assign":483}],755:[function(require,module,exports){
(function (process){
"use strict";var _prodInvariant=require("./reactProdInvariant"),_assign=require("object-assign"),ReactNoopUpdateQueue=require("./ReactNoopUpdateQueue"),canDefineProperty=require("./canDefineProperty"),emptyObject=require("fbjs/lib/emptyObject"),invariant=require("fbjs/lib/invariant"),lowPriorityWarning=require("./lowPriorityWarning");function ReactComponent(e,t,o){this.props=e,this.context=t,this.refs=emptyObject,this.updater=o||ReactNoopUpdateQueue}if(ReactComponent.prototype.isReactComponent={},ReactComponent.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&("production"!==process.env.NODE_ENV?invariant(!1,"setState(...): takes an object of state variables to update or a function which returns an object of state variables."):_prodInvariant("85")),this.updater.enqueueSetState(this,e),t&&this.updater.enqueueCallback(this,t,"setState")},ReactComponent.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this),e&&this.updater.enqueueCallback(this,e,"forceUpdate")},"production"!==process.env.NODE_ENV){var deprecatedAPIs={isMounted:["isMounted","Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],replaceState:["replaceState","Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]},defineDeprecationWarning=function(e,t){canDefineProperty&&Object.defineProperty(ReactComponent.prototype,e,{get:function(){lowPriorityWarning(!1,"%s(...) is deprecated in plain JavaScript React classes. %s",t[0],t[1])}})};for(var fnName in deprecatedAPIs)deprecatedAPIs.hasOwnProperty(fnName)&&defineDeprecationWarning(fnName,deprecatedAPIs[fnName])}function ReactPureComponent(e,t,o){this.props=e,this.context=t,this.refs=emptyObject,this.updater=o||ReactNoopUpdateQueue}function ComponentDummy(){}ComponentDummy.prototype=ReactComponent.prototype,ReactPureComponent.prototype=new ComponentDummy,ReactPureComponent.prototype.constructor=ReactPureComponent,_assign(ReactPureComponent.prototype,ReactComponent.prototype),ReactPureComponent.prototype.isPureReactComponent=!0,module.exports={Component:ReactComponent,PureComponent:ReactPureComponent};

}).call(this,require('_process'))

},{"./ReactNoopUpdateQueue":763,"./canDefineProperty":768,"./lowPriorityWarning":773,"./reactProdInvariant":775,"_process":484,"fbjs/lib/emptyObject":465,"fbjs/lib/invariant":472,"object-assign":483}],756:[function(require,module,exports){
"use strict";var PooledClass=require("./PooledClass"),ReactElement=require("./ReactElement"),emptyFunction=require("fbjs/lib/emptyFunction"),traverseAllChildren=require("./traverseAllChildren"),twoArgumentPooler=PooledClass.twoArgumentPooler,fourArgumentPooler=PooledClass.fourArgumentPooler,userProvidedKeyEscapeRegex=/\/+/g;function escapeUserProvidedKey(e){return(""+e).replace(userProvidedKeyEscapeRegex,"$&/")}function ForEachBookKeeping(e,n){this.func=e,this.context=n,this.count=0}function forEachSingleChild(e,n,t){var r=e.func,o=e.context;r.call(o,n,e.count++)}function forEachChildren(e,n,t){if(null==e)return e;var r=ForEachBookKeeping.getPooled(n,t);traverseAllChildren(e,forEachSingleChild,r),ForEachBookKeeping.release(r)}function MapBookKeeping(e,n,t,r){this.result=e,this.keyPrefix=n,this.func=t,this.context=r,this.count=0}function mapSingleChildIntoContext(e,n,t){var r=e.result,o=e.keyPrefix,l=e.func,i=e.context,u=l.call(i,n,e.count++);Array.isArray(u)?mapIntoWithKeyPrefixInternal(u,r,t,emptyFunction.thatReturnsArgument):null!=u&&(ReactElement.isValidElement(u)&&(u=ReactElement.cloneAndReplaceKey(u,o+(!u.key||n&&n.key===u.key?"":escapeUserProvidedKey(u.key)+"/")+t)),r.push(u))}function mapIntoWithKeyPrefixInternal(e,n,t,r,o){var l="";null!=t&&(l=escapeUserProvidedKey(t)+"/");var i=MapBookKeeping.getPooled(n,l,r,o);traverseAllChildren(e,mapSingleChildIntoContext,i),MapBookKeeping.release(i)}function mapChildren(e,n,t){if(null==e)return e;var r=[];return mapIntoWithKeyPrefixInternal(e,r,null,n,t),r}function forEachSingleChildDummy(e,n,t){return null}function countChildren(e,n){return traverseAllChildren(e,forEachSingleChildDummy,null)}function toArray(e){var n=[];return mapIntoWithKeyPrefixInternal(e,n,null,emptyFunction.thatReturnsArgument),n}ForEachBookKeeping.prototype.destructor=function(){this.func=null,this.context=null,this.count=0},PooledClass.addPoolingTo(ForEachBookKeeping,twoArgumentPooler),MapBookKeeping.prototype.destructor=function(){this.result=null,this.keyPrefix=null,this.func=null,this.context=null,this.count=0},PooledClass.addPoolingTo(MapBookKeeping,fourArgumentPooler);var ReactChildren={forEach:forEachChildren,map:mapChildren,mapIntoWithKeyPrefixInternal:mapIntoWithKeyPrefixInternal,count:countChildren,toArray:toArray};module.exports=ReactChildren;

},{"./PooledClass":753,"./ReactElement":760,"./traverseAllChildren":776,"fbjs/lib/emptyFunction":464}],757:[function(require,module,exports){
(function (process){
"use strict";var _prodInvariant=require("./reactProdInvariant"),ReactCurrentOwner=require("./ReactCurrentOwner"),invariant=require("fbjs/lib/invariant"),warning=require("fbjs/lib/warning");function isNative(e){var t=Function.prototype.toString,n=Object.prototype.hasOwnProperty,o=RegExp("^"+t.call(n).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");try{var r=t.call(e);return o.test(r)}catch(e){return!1}}var setItem,getItem,removeItem,getItemIDs,addRoot,removeRoot,getRootIDs,canUseCollections="function"==typeof Array.from&&"function"==typeof Map&&isNative(Map)&&null!=Map.prototype&&"function"==typeof Map.prototype.keys&&isNative(Map.prototype.keys)&&"function"==typeof Set&&isNative(Set)&&null!=Set.prototype&&"function"==typeof Set.prototype.keys&&isNative(Set.prototype.keys);if(canUseCollections){var itemMap=new Map,rootIDSet=new Set;setItem=function(e,t){itemMap.set(e,t)},getItem=function(e){return itemMap.get(e)},removeItem=function(e){itemMap.delete(e)},getItemIDs=function(){return Array.from(itemMap.keys())},addRoot=function(e){rootIDSet.add(e)},removeRoot=function(e){rootIDSet.delete(e)},getRootIDs=function(){return Array.from(rootIDSet.keys())}}else{var itemByKey={},rootByKey={},getKeyFromID=function(e){return"."+e},getIDFromKey=function(e){return parseInt(e.substr(1),10)};setItem=function(e,t){var n=getKeyFromID(e);itemByKey[n]=t},getItem=function(e){var t=getKeyFromID(e);return itemByKey[t]},removeItem=function(e){var t=getKeyFromID(e);delete itemByKey[t]},getItemIDs=function(){return Object.keys(itemByKey).map(getIDFromKey)},addRoot=function(e){var t=getKeyFromID(e);rootByKey[t]=!0},removeRoot=function(e){var t=getKeyFromID(e);delete rootByKey[t]},getRootIDs=function(){return Object.keys(rootByKey).map(getIDFromKey)}}var unmountedIDs=[];function purgeDeep(e){var t=getItem(e);if(t){var n=t.childIDs;removeItem(e),n.forEach(purgeDeep)}}function describeComponentFrame(e,t,n){return"\n    in "+(e||"Unknown")+(t?" (at "+t.fileName.replace(/^.*[\\\/]/,"")+":"+t.lineNumber+")":n?" (created by "+n+")":"")}function getDisplayName(e){return null==e?"#empty":"string"==typeof e||"number"==typeof e?"#text":"string"==typeof e.type?e.type:e.type.displayName||e.type.name||"Unknown"}function describeID(e){var t,n=ReactComponentTreeHook.getDisplayName(e),o=ReactComponentTreeHook.getElement(e),r=ReactComponentTreeHook.getOwnerID(e);return r&&(t=ReactComponentTreeHook.getDisplayName(r)),"production"!==process.env.NODE_ENV&&warning(o,"ReactComponentTreeHook: Missing React element for debugID %s when building stack",e),describeComponentFrame(n,o&&o._source,t)}var ReactComponentTreeHook={onSetChildren:function(e,t){var n=getItem(e);n||("production"!==process.env.NODE_ENV?invariant(!1,"Item must have been set"):_prodInvariant("144")),n.childIDs=t;for(var o=0;o<t.length;o++){var r=t[o],a=getItem(r);a||("production"!==process.env.NODE_ENV?invariant(!1,"Expected hook events to fire for the child before its parent includes it in onSetChildren()."):_prodInvariant("140")),null==a.childIDs&&"object"==typeof a.element&&null!=a.element&&("production"!==process.env.NODE_ENV?invariant(!1,"Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren()."):_prodInvariant("141")),a.isMounted||("production"!==process.env.NODE_ENV?invariant(!1,"Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren()."):_prodInvariant("71")),null==a.parentID&&(a.parentID=e),a.parentID!==e&&("production"!==process.env.NODE_ENV?invariant(!1,"Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).",r,a.parentID,e):_prodInvariant("142",r,a.parentID,e))}},onBeforeMountComponent:function(e,t,n){setItem(e,{element:t,parentID:n,text:null,childIDs:[],isMounted:!1,updateCount:0})},onBeforeUpdateComponent:function(e,t){var n=getItem(e);n&&n.isMounted&&(n.element=t)},onMountComponent:function(e){var t=getItem(e);t||("production"!==process.env.NODE_ENV?invariant(!1,"Item must have been set"):_prodInvariant("144")),t.isMounted=!0,0===t.parentID&&addRoot(e)},onUpdateComponent:function(e){var t=getItem(e);t&&t.isMounted&&t.updateCount++},onUnmountComponent:function(e){var t=getItem(e);t&&(t.isMounted=!1,0===t.parentID&&removeRoot(e));unmountedIDs.push(e)},purgeUnmountedComponents:function(){if(!ReactComponentTreeHook._preventPurging){for(var e=0;e<unmountedIDs.length;e++){purgeDeep(unmountedIDs[e])}unmountedIDs.length=0}},isMounted:function(e){var t=getItem(e);return!!t&&t.isMounted},getCurrentStackAddendum:function(e){var t="";if(e){var n=getDisplayName(e),o=e._owner;t+=describeComponentFrame(n,e._source,o&&o.getName())}var r=ReactCurrentOwner.current,a=r&&r._debugID;return t+=ReactComponentTreeHook.getStackAddendumByID(a)},getStackAddendumByID:function(e){for(var t="";e;)t+=describeID(e),e=ReactComponentTreeHook.getParentID(e);return t},getChildIDs:function(e){var t=getItem(e);return t?t.childIDs:[]},getDisplayName:function(e){var t=ReactComponentTreeHook.getElement(e);return t?getDisplayName(t):null},getElement:function(e){var t=getItem(e);return t?t.element:null},getOwnerID:function(e){var t=ReactComponentTreeHook.getElement(e);return t&&t._owner?t._owner._debugID:null},getParentID:function(e){var t=getItem(e);return t?t.parentID:null},getSource:function(e){var t=getItem(e),n=t?t.element:null;return null!=n?n._source:null},getText:function(e){var t=ReactComponentTreeHook.getElement(e);return"string"==typeof t?t:"number"==typeof t?""+t:null},getUpdateCount:function(e){var t=getItem(e);return t?t.updateCount:0},getRootIDs:getRootIDs,getRegisteredIDs:getItemIDs,pushNonStandardWarningStack:function(e,t){if("function"==typeof console.reactStack){var n=[],o=ReactCurrentOwner.current,r=o&&o._debugID;try{for(e&&n.push({name:r?ReactComponentTreeHook.getDisplayName(r):null,fileName:t?t.fileName:null,lineNumber:t?t.lineNumber:null});r;){var a=ReactComponentTreeHook.getElement(r),i=ReactComponentTreeHook.getParentID(r),u=ReactComponentTreeHook.getOwnerID(r),c=u?ReactComponentTreeHook.getDisplayName(u):null,p=a&&a._source;n.push({name:c,fileName:p?p.fileName:null,lineNumber:p?p.lineNumber:null}),r=i}}catch(e){}console.reactStack(n)}},popNonStandardWarningStack:function(){"function"==typeof console.reactStackEnd&&console.reactStackEnd()}};module.exports=ReactComponentTreeHook;

}).call(this,require('_process'))

},{"./ReactCurrentOwner":758,"./reactProdInvariant":775,"_process":484,"fbjs/lib/invariant":472,"fbjs/lib/warning":479}],758:[function(require,module,exports){
"use strict";var ReactCurrentOwner={current:null};module.exports=ReactCurrentOwner;

},{}],759:[function(require,module,exports){
(function (process){
"use strict";var ReactElement=require("./ReactElement"),createDOMFactory=ReactElement.createFactory;if("production"!==process.env.NODE_ENV){var ReactElementValidator=require("./ReactElementValidator");createDOMFactory=ReactElementValidator.createFactory}var ReactDOMFactories={a:createDOMFactory("a"),abbr:createDOMFactory("abbr"),address:createDOMFactory("address"),area:createDOMFactory("area"),article:createDOMFactory("article"),aside:createDOMFactory("aside"),audio:createDOMFactory("audio"),b:createDOMFactory("b"),base:createDOMFactory("base"),bdi:createDOMFactory("bdi"),bdo:createDOMFactory("bdo"),big:createDOMFactory("big"),blockquote:createDOMFactory("blockquote"),body:createDOMFactory("body"),br:createDOMFactory("br"),button:createDOMFactory("button"),canvas:createDOMFactory("canvas"),caption:createDOMFactory("caption"),cite:createDOMFactory("cite"),code:createDOMFactory("code"),col:createDOMFactory("col"),colgroup:createDOMFactory("colgroup"),data:createDOMFactory("data"),datalist:createDOMFactory("datalist"),dd:createDOMFactory("dd"),del:createDOMFactory("del"),details:createDOMFactory("details"),dfn:createDOMFactory("dfn"),dialog:createDOMFactory("dialog"),div:createDOMFactory("div"),dl:createDOMFactory("dl"),dt:createDOMFactory("dt"),em:createDOMFactory("em"),embed:createDOMFactory("embed"),fieldset:createDOMFactory("fieldset"),figcaption:createDOMFactory("figcaption"),figure:createDOMFactory("figure"),footer:createDOMFactory("footer"),form:createDOMFactory("form"),h1:createDOMFactory("h1"),h2:createDOMFactory("h2"),h3:createDOMFactory("h3"),h4:createDOMFactory("h4"),h5:createDOMFactory("h5"),h6:createDOMFactory("h6"),head:createDOMFactory("head"),header:createDOMFactory("header"),hgroup:createDOMFactory("hgroup"),hr:createDOMFactory("hr"),html:createDOMFactory("html"),i:createDOMFactory("i"),iframe:createDOMFactory("iframe"),img:createDOMFactory("img"),input:createDOMFactory("input"),ins:createDOMFactory("ins"),kbd:createDOMFactory("kbd"),keygen:createDOMFactory("keygen"),label:createDOMFactory("label"),legend:createDOMFactory("legend"),li:createDOMFactory("li"),link:createDOMFactory("link"),main:createDOMFactory("main"),map:createDOMFactory("map"),mark:createDOMFactory("mark"),menu:createDOMFactory("menu"),menuitem:createDOMFactory("menuitem"),meta:createDOMFactory("meta"),meter:createDOMFactory("meter"),nav:createDOMFactory("nav"),noscript:createDOMFactory("noscript"),object:createDOMFactory("object"),ol:createDOMFactory("ol"),optgroup:createDOMFactory("optgroup"),option:createDOMFactory("option"),output:createDOMFactory("output"),p:createDOMFactory("p"),param:createDOMFactory("param"),picture:createDOMFactory("picture"),pre:createDOMFactory("pre"),progress:createDOMFactory("progress"),q:createDOMFactory("q"),rp:createDOMFactory("rp"),rt:createDOMFactory("rt"),ruby:createDOMFactory("ruby"),s:createDOMFactory("s"),samp:createDOMFactory("samp"),script:createDOMFactory("script"),section:createDOMFactory("section"),select:createDOMFactory("select"),small:createDOMFactory("small"),source:createDOMFactory("source"),span:createDOMFactory("span"),strong:createDOMFactory("strong"),style:createDOMFactory("style"),sub:createDOMFactory("sub"),summary:createDOMFactory("summary"),sup:createDOMFactory("sup"),table:createDOMFactory("table"),tbody:createDOMFactory("tbody"),td:createDOMFactory("td"),textarea:createDOMFactory("textarea"),tfoot:createDOMFactory("tfoot"),th:createDOMFactory("th"),thead:createDOMFactory("thead"),time:createDOMFactory("time"),title:createDOMFactory("title"),tr:createDOMFactory("tr"),track:createDOMFactory("track"),u:createDOMFactory("u"),ul:createDOMFactory("ul"),var:createDOMFactory("var"),video:createDOMFactory("video"),wbr:createDOMFactory("wbr"),circle:createDOMFactory("circle"),clipPath:createDOMFactory("clipPath"),defs:createDOMFactory("defs"),ellipse:createDOMFactory("ellipse"),g:createDOMFactory("g"),image:createDOMFactory("image"),line:createDOMFactory("line"),linearGradient:createDOMFactory("linearGradient"),mask:createDOMFactory("mask"),path:createDOMFactory("path"),pattern:createDOMFactory("pattern"),polygon:createDOMFactory("polygon"),polyline:createDOMFactory("polyline"),radialGradient:createDOMFactory("radialGradient"),rect:createDOMFactory("rect"),stop:createDOMFactory("stop"),svg:createDOMFactory("svg"),text:createDOMFactory("text"),tspan:createDOMFactory("tspan")};module.exports=ReactDOMFactories;

}).call(this,require('_process'))

},{"./ReactElement":760,"./ReactElementValidator":762,"_process":484}],760:[function(require,module,exports){
(function (process){
"use strict";var specialPropKeyWarningShown,specialPropRefWarningShown,_assign=require("object-assign"),ReactCurrentOwner=require("./ReactCurrentOwner"),warning=require("fbjs/lib/warning"),canDefineProperty=require("./canDefineProperty"),hasOwnProperty=Object.prototype.hasOwnProperty,REACT_ELEMENT_TYPE=require("./ReactElementSymbol"),RESERVED_PROPS={key:!0,ref:!0,__self:!0,__source:!0};function hasValidRef(e){if("production"!==process.env.NODE_ENV&&hasOwnProperty.call(e,"ref")){var r=Object.getOwnPropertyDescriptor(e,"ref").get;if(r&&r.isReactWarning)return!1}return void 0!==e.ref}function hasValidKey(e){if("production"!==process.env.NODE_ENV&&hasOwnProperty.call(e,"key")){var r=Object.getOwnPropertyDescriptor(e,"key").get;if(r&&r.isReactWarning)return!1}return void 0!==e.key}function defineKeyPropWarningGetter(e,r){var n=function(){specialPropKeyWarningShown||(specialPropKeyWarningShown=!0,"production"!==process.env.NODE_ENV&&warning(!1,"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)",r))};n.isReactWarning=!0,Object.defineProperty(e,"key",{get:n,configurable:!0})}function defineRefPropWarningGetter(e,r){var n=function(){specialPropRefWarningShown||(specialPropRefWarningShown=!0,"production"!==process.env.NODE_ENV&&warning(!1,"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)",r))};n.isReactWarning=!0,Object.defineProperty(e,"ref",{get:n,configurable:!0})}var ReactElement=function(e,r,n,t,o,i,a){var c={$$typeof:REACT_ELEMENT_TYPE,type:e,key:r,ref:n,props:a,_owner:i};return"production"!==process.env.NODE_ENV&&(c._store={},canDefineProperty?(Object.defineProperty(c._store,"validated",{configurable:!1,enumerable:!1,writable:!0,value:!1}),Object.defineProperty(c,"_self",{configurable:!1,enumerable:!1,writable:!1,value:t}),Object.defineProperty(c,"_source",{configurable:!1,enumerable:!1,writable:!1,value:o})):(c._store.validated=!1,c._self=t,c._source=o),Object.freeze&&(Object.freeze(c.props),Object.freeze(c))),c};ReactElement.createElement=function(e,r,n){var t,o={},i=null,a=null,c=null,l=null;if(null!=r)for(t in hasValidRef(r)&&(a=r.ref),hasValidKey(r)&&(i=""+r.key),c=void 0===r.__self?null:r.__self,l=void 0===r.__source?null:r.__source,r)hasOwnProperty.call(r,t)&&!RESERVED_PROPS.hasOwnProperty(t)&&(o[t]=r[t]);var s=arguments.length-2;if(1===s)o.children=n;else if(s>1){for(var p=Array(s),f=0;f<s;f++)p[f]=arguments[f+2];"production"!==process.env.NODE_ENV&&Object.freeze&&Object.freeze(p),o.children=p}if(e&&e.defaultProps){var u=e.defaultProps;for(t in u)void 0===o[t]&&(o[t]=u[t])}if("production"!==process.env.NODE_ENV&&(i||a)&&(void 0===o.$$typeof||o.$$typeof!==REACT_ELEMENT_TYPE)){var y="function"==typeof e?e.displayName||e.name||"Unknown":e;i&&defineKeyPropWarningGetter(o,y),a&&defineRefPropWarningGetter(o,y)}return ReactElement(e,i,a,c,l,ReactCurrentOwner.current,o)},ReactElement.createFactory=function(e){var r=ReactElement.createElement.bind(null,e);return r.type=e,r},ReactElement.cloneAndReplaceKey=function(e,r){return ReactElement(e.type,r,e.ref,e._self,e._source,e._owner,e.props)},ReactElement.cloneElement=function(e,r,n){var t,o,i=_assign({},e.props),a=e.key,c=e.ref,l=e._self,s=e._source,p=e._owner;if(null!=r)for(t in hasValidRef(r)&&(c=r.ref,p=ReactCurrentOwner.current),hasValidKey(r)&&(a=""+r.key),e.type&&e.type.defaultProps&&(o=e.type.defaultProps),r)hasOwnProperty.call(r,t)&&!RESERVED_PROPS.hasOwnProperty(t)&&(void 0===r[t]&&void 0!==o?i[t]=o[t]:i[t]=r[t]);var f=arguments.length-2;if(1===f)i.children=n;else if(f>1){for(var u=Array(f),y=0;y<f;y++)u[y]=arguments[y+2];i.children=u}return ReactElement(e.type,a,c,l,s,p,i)},ReactElement.isValidElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===REACT_ELEMENT_TYPE},module.exports=ReactElement;

}).call(this,require('_process'))

},{"./ReactCurrentOwner":758,"./ReactElementSymbol":761,"./canDefineProperty":768,"_process":484,"fbjs/lib/warning":479,"object-assign":483}],761:[function(require,module,exports){
"use strict";var REACT_ELEMENT_TYPE="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103;module.exports=REACT_ELEMENT_TYPE;

},{}],762:[function(require,module,exports){
(function (process){
"use strict";var ReactCurrentOwner=require("./ReactCurrentOwner"),ReactComponentTreeHook=require("./ReactComponentTreeHook"),ReactElement=require("./ReactElement"),checkReactTypeSpec=require("./checkReactTypeSpec"),canDefineProperty=require("./canDefineProperty"),getIteratorFn=require("./getIteratorFn"),warning=require("fbjs/lib/warning"),lowPriorityWarning=require("./lowPriorityWarning");function getDeclarationErrorAddendum(){if(ReactCurrentOwner.current){var e=ReactCurrentOwner.current.getName();if(e)return" Check the render method of `"+e+"`."}return""}function getSourceInfoErrorAddendum(e){if(null!=e&&void 0!==e.__source){var r=e.__source;return" Check your code at "+r.fileName.replace(/^.*[\\\/]/,"")+":"+r.lineNumber+"."}return""}var ownerHasKeyUseWarning={};function getCurrentComponentErrorInfo(e){var r=getDeclarationErrorAddendum();if(!r){var t="string"==typeof e?e:e.displayName||e.name;t&&(r=" Check the top-level render call using <"+t+">.")}return r}function validateExplicitKey(e,r){if(e._store&&!e._store.validated&&null==e.key){e._store.validated=!0;var t=ownerHasKeyUseWarning.uniqueKey||(ownerHasKeyUseWarning.uniqueKey={}),n=getCurrentComponentErrorInfo(r);if(!t[n]){t[n]=!0;var o="";e&&e._owner&&e._owner!==ReactCurrentOwner.current&&(o=" It was passed a child from "+e._owner.getName()+"."),"production"!==process.env.NODE_ENV&&warning(!1,'Each child in an array or iterator should have a unique "key" prop.%s%s See https://fb.me/react-warning-keys for more information.%s',n,o,ReactComponentTreeHook.getCurrentStackAddendum(e))}}}function validateChildKeys(e,r){if("object"==typeof e)if(Array.isArray(e))for(var t=0;t<e.length;t++){var n=e[t];ReactElement.isValidElement(n)&&validateExplicitKey(n,r)}else if(ReactElement.isValidElement(e))e._store&&(e._store.validated=!0);else if(e){var o=getIteratorFn(e);if(o&&o!==e.entries)for(var a,i=o.call(e);!(a=i.next()).done;)ReactElement.isValidElement(a.value)&&validateExplicitKey(a.value,r)}}function validatePropTypes(e){var r=e.type;if("function"==typeof r){var t=r.displayName||r.name;r.propTypes&&checkReactTypeSpec(r.propTypes,e.props,"prop",t,e,null),"function"==typeof r.getDefaultProps&&"production"!==process.env.NODE_ENV&&warning(r.getDefaultProps.isReactClassApproved,"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.")}}var ReactElementValidator={createElement:function(e,r,t){var n="string"==typeof e||"function"==typeof e;if(!n&&"function"!=typeof e&&"string"!=typeof e){var o="";(void 0===e||"object"==typeof e&&null!==e&&0===Object.keys(e).length)&&(o+=" You likely forgot to export your component from the file it's defined in.");var a=getSourceInfoErrorAddendum(r);o+=a||getDeclarationErrorAddendum(),o+=ReactComponentTreeHook.getCurrentStackAddendum();var i=null!=r&&void 0!==r.__source?r.__source:null;ReactComponentTreeHook.pushNonStandardWarningStack(!0,i),"production"!==process.env.NODE_ENV&&warning(!1,"React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s",null==e?e:typeof e,o),ReactComponentTreeHook.popNonStandardWarningStack()}var c=ReactElement.createElement.apply(this,arguments);if(null==c)return c;if(n)for(var l=2;l<arguments.length;l++)validateChildKeys(arguments[l],e);return validatePropTypes(c),c},createFactory:function(e){var r=ReactElementValidator.createElement.bind(null,e);return r.type=e,"production"!==process.env.NODE_ENV&&canDefineProperty&&Object.defineProperty(r,"type",{enumerable:!1,get:function(){return lowPriorityWarning(!1,"Factory.type is deprecated. Access the class directly before passing it to createFactory."),Object.defineProperty(this,"type",{value:e}),e}}),r},cloneElement:function(e,r,t){for(var n=ReactElement.cloneElement.apply(this,arguments),o=2;o<arguments.length;o++)validateChildKeys(arguments[o],n.type);return validatePropTypes(n),n}};module.exports=ReactElementValidator;

}).call(this,require('_process'))

},{"./ReactComponentTreeHook":757,"./ReactCurrentOwner":758,"./ReactElement":760,"./canDefineProperty":768,"./checkReactTypeSpec":769,"./getIteratorFn":771,"./lowPriorityWarning":773,"_process":484,"fbjs/lib/warning":479}],763:[function(require,module,exports){
(function (process){
"use strict";var warning=require("fbjs/lib/warning");function warnNoop(e,n){if("production"!==process.env.NODE_ENV){var o=e.constructor;"production"!==process.env.NODE_ENV&&warning(!1,"%s(...): Can only update a mounted or mounting component. This usually means you called %s() on an unmounted component. This is a no-op. Please check the code for the %s component.",n,n,o&&(o.displayName||o.name)||"ReactClass")}}var ReactNoopUpdateQueue={isMounted:function(e){return!1},enqueueCallback:function(e,n){},enqueueForceUpdate:function(e){warnNoop(e,"forceUpdate")},enqueueReplaceState:function(e,n){warnNoop(e,"replaceState")},enqueueSetState:function(e,n){warnNoop(e,"setState")}};module.exports=ReactNoopUpdateQueue;

}).call(this,require('_process'))

},{"_process":484,"fbjs/lib/warning":479}],764:[function(require,module,exports){
(function (process){
"use strict";var ReactPropTypeLocationNames={};"production"!==process.env.NODE_ENV&&(ReactPropTypeLocationNames={prop:"prop",context:"context",childContext:"child context"}),module.exports=ReactPropTypeLocationNames;

}).call(this,require('_process'))

},{"_process":484}],765:[function(require,module,exports){
"use strict";var _require=require("./ReactElement"),isValidElement=_require.isValidElement,factory=require("prop-types/factory");module.exports=factory(isValidElement);

},{"./ReactElement":760,"prop-types/factory":492}],766:[function(require,module,exports){
"use strict";var ReactPropTypesSecret="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";module.exports=ReactPropTypesSecret;

},{}],767:[function(require,module,exports){
"use strict";module.exports="15.6.2";

},{}],768:[function(require,module,exports){
(function (process){
"use strict";var canDefineProperty=!1;if("production"!==process.env.NODE_ENV)try{Object.defineProperty({},"x",{get:function(){}}),canDefineProperty=!0}catch(e){}module.exports=canDefineProperty;

}).call(this,require('_process'))

},{"_process":484}],769:[function(require,module,exports){
(function (process){
"use strict";var ReactComponentTreeHook,_prodInvariant=require("./reactProdInvariant"),ReactPropTypeLocationNames=require("./ReactPropTypeLocationNames"),ReactPropTypesSecret=require("./ReactPropTypesSecret"),invariant=require("fbjs/lib/invariant"),warning=require("fbjs/lib/warning");"undefined"!=typeof process&&process.env&&"test"===process.env.NODE_ENV&&(ReactComponentTreeHook=require("./ReactComponentTreeHook"));var loggedTypeFailures={};function checkReactTypeSpec(e,o,r,t,a,n){for(var c in e)if(e.hasOwnProperty(c)){var s;try{"function"!=typeof e[c]&&("production"!==process.env.NODE_ENV?invariant(!1,"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",t||"React class",ReactPropTypeLocationNames[r],c):_prodInvariant("84",t||"React class",ReactPropTypeLocationNames[r],c)),s=e[c](o,c,t,r,null,ReactPropTypesSecret)}catch(e){s=e}if("production"!==process.env.NODE_ENV&&warning(!s||s instanceof Error,"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",t||"React class",ReactPropTypeLocationNames[r],c,typeof s),s instanceof Error&&!(s.message in loggedTypeFailures)){loggedTypeFailures[s.message]=!0;var p="";"production"!==process.env.NODE_ENV&&(ReactComponentTreeHook||(ReactComponentTreeHook=require("./ReactComponentTreeHook")),null!==n?p=ReactComponentTreeHook.getStackAddendumByID(n):null!==a&&(p=ReactComponentTreeHook.getCurrentStackAddendum(a))),"production"!==process.env.NODE_ENV&&warning(!1,"Failed %s type: %s%s",r,s.message,p)}}}module.exports=checkReactTypeSpec;

}).call(this,require('_process'))

},{"./ReactComponentTreeHook":757,"./ReactPropTypeLocationNames":764,"./ReactPropTypesSecret":766,"./reactProdInvariant":775,"_process":484,"fbjs/lib/invariant":472,"fbjs/lib/warning":479}],770:[function(require,module,exports){
"use strict";var _require=require("./ReactBaseClasses"),Component=_require.Component,_require2=require("./ReactElement"),isValidElement=_require2.isValidElement,ReactNoopUpdateQueue=require("./ReactNoopUpdateQueue"),factory=require("create-react-class/factory");module.exports=factory(Component,isValidElement,ReactNoopUpdateQueue);

},{"./ReactBaseClasses":755,"./ReactElement":760,"./ReactNoopUpdateQueue":763,"create-react-class/factory":424}],771:[function(require,module,exports){
"use strict";var ITERATOR_SYMBOL="function"==typeof Symbol&&Symbol.iterator,FAUX_ITERATOR_SYMBOL="@@iterator";function getIteratorFn(t){var r=t&&(ITERATOR_SYMBOL&&t[ITERATOR_SYMBOL]||t[FAUX_ITERATOR_SYMBOL]);if("function"==typeof r)return r}module.exports=getIteratorFn;

},{}],772:[function(require,module,exports){
"use strict";var nextDebugID=1;function getNextDebugID(){return nextDebugID++}module.exports=getNextDebugID;

},{}],773:[function(require,module,exports){
(function (process){
"use strict";var lowPriorityWarning=function(){};if("production"!==process.env.NODE_ENV){var printWarning=function(r){for(var n=arguments.length,o=Array(n>1?n-1:0),i=1;i<n;i++)o[i-1]=arguments[i];var a=0,t="Warning: "+r.replace(/%s/g,function(){return o[a++]});"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(r){}};lowPriorityWarning=function(r,n){if(void 0===n)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");if(!r){for(var o=arguments.length,i=Array(o>2?o-2:0),a=2;a<o;a++)i[a-2]=arguments[a];printWarning.apply(void 0,[n].concat(i))}}}module.exports=lowPriorityWarning;

}).call(this,require('_process'))

},{"_process":484}],774:[function(require,module,exports){
(function (process){
"use strict";var _prodInvariant=require("./reactProdInvariant"),ReactElement=require("./ReactElement"),invariant=require("fbjs/lib/invariant");function onlyChild(e){return ReactElement.isValidElement(e)||("production"!==process.env.NODE_ENV?invariant(!1,"React.Children.only expected to receive a single React element child."):_prodInvariant("143")),e}module.exports=onlyChild;

}).call(this,require('_process'))

},{"./ReactElement":760,"./reactProdInvariant":775,"_process":484,"fbjs/lib/invariant":472}],775:[function(require,module,exports){
"use strict";function reactProdInvariant(r){for(var e=arguments.length-1,o="Minified React error #"+r+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+r,n=0;n<e;n++)o+="&args[]="+encodeURIComponent(arguments[n+1]);o+=" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";var t=new Error(o);throw t.name="Invariant Violation",t.framesToPop=1,t}module.exports=reactProdInvariant;

},{}],776:[function(require,module,exports){
(function (process){
"use strict";var _prodInvariant=require("./reactProdInvariant"),ReactCurrentOwner=require("./ReactCurrentOwner"),REACT_ELEMENT_TYPE=require("./ReactElementSymbol"),getIteratorFn=require("./getIteratorFn"),invariant=require("fbjs/lib/invariant"),KeyEscapeUtils=require("./KeyEscapeUtils"),warning=require("fbjs/lib/warning"),SEPARATOR=".",SUBSEPARATOR=":",didWarnAboutMaps=!1;function getComponentKey(e,r){return e&&"object"==typeof e&&null!=e.key?KeyEscapeUtils.escape(e.key):r.toString(36)}function traverseAllChildrenImpl(e,r,t,n){var a,o=typeof e;if("undefined"!==o&&"boolean"!==o||(e=null),null===e||"string"===o||"number"===o||"object"===o&&e.$$typeof===REACT_ELEMENT_TYPE)return t(n,e,""===r?SEPARATOR+getComponentKey(e,0):r),1;var i=0,l=""===r?SEPARATOR:r+SUBSEPARATOR;if(Array.isArray(e))for(var s=0;s<e.length;s++)i+=traverseAllChildrenImpl(a=e[s],l+getComponentKey(a,s),t,n);else{var c=getIteratorFn(e);if(c){var u,d=c.call(e);if(c!==e.entries)for(var p=0;!(u=d.next()).done;)i+=traverseAllChildrenImpl(a=u.value,l+getComponentKey(a,p++),t,n);else{if("production"!==process.env.NODE_ENV){var v="";if(ReactCurrentOwner.current){var f=ReactCurrentOwner.current.getName();f&&(v=" Check the render method of `"+f+"`.")}"production"!==process.env.NODE_ENV&&warning(didWarnAboutMaps,"Using Maps as children is not yet fully supported. It is an experimental feature that might be removed. Convert it to a sequence / iterable of keyed ReactElements instead.%s",v),didWarnAboutMaps=!0}for(;!(u=d.next()).done;){var E=u.value;E&&(i+=traverseAllChildrenImpl(a=E[1],l+KeyEscapeUtils.escape(E[0])+SUBSEPARATOR+getComponentKey(a,0),t,n))}}}else if("object"===o){var y="";if("production"!==process.env.NODE_ENV&&(y=" If you meant to render a collection of children, use an array instead or wrap the object using createFragment(object) from the React add-ons.",e._isReactElement&&(y=" It looks like you're using an element created by a different version of React. Make sure to use only one copy of React."),ReactCurrentOwner.current)){var b=ReactCurrentOwner.current.getName();b&&(y+=" Check the render method of `"+b+"`.")}var m=String(e);"production"!==process.env.NODE_ENV?invariant(!1,"Objects are not valid as a React child (found: %s).%s","[object Object]"===m?"object with keys {"+Object.keys(e).join(", ")+"}":m,y):_prodInvariant("31","[object Object]"===m?"object with keys {"+Object.keys(e).join(", ")+"}":m,y)}}return i}function traverseAllChildren(e,r,t){return null==e?0:traverseAllChildrenImpl(e,"",r,t)}module.exports=traverseAllChildren;

}).call(this,require('_process'))

},{"./KeyEscapeUtils":752,"./ReactCurrentOwner":758,"./ReactElementSymbol":761,"./getIteratorFn":771,"./reactProdInvariant":775,"_process":484,"fbjs/lib/invariant":472,"fbjs/lib/warning":479}],777:[function(require,module,exports){
"use strict";module.exports=require("./lib/React");

},{"./lib/React":754}],778:[function(require,module,exports){
(function (process){
"use strict";exports.__esModule=!0,exports.default=uncontrollable;var _react=_interopRequireDefault(require("react")),_invariant=_interopRequireDefault(require("invariant")),Utils=_interopRequireWildcard(require("./utils"));function _interopRequireWildcard(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var o=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};o.get||o.set?Object.defineProperty(t,n,o):t[n]=e[n]}return t.default=e,t}function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _extends(){return(_extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}).apply(this,arguments)}function _inheritsLoose(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}function uncontrollable(e,t,n){void 0===n&&(n=[]);var o=e.displayName||e.name||"Component",r=Utils.isReactComponent(e),i=Object.keys(t),a=i.map(Utils.defaultKey);!r&&n.length&&("production"!==process.env.NODE_ENV?(0,_invariant.default)(!1,"[uncontrollable] stateless function components cannot pass through methods because they have no associated instances. Check component: "+o+", attempting to pass through methods: "+n.join(", ")):invariant(!1));var l=function(n){function UncontrolledComponent(){for(var e,o=arguments.length,a=new Array(o),l=0;l<o;l++)a[l]=arguments[l];return(e=n.call.apply(n,[this].concat(a))||this).handlers=Object.create(null),i.forEach(function(n){var o=t[n];e.handlers[o]=function handleChange(t){if(e.props[o]){var r;e._notifying=!0;for(var i=arguments.length,a=new Array(i>1?i-1:0),l=1;l<i;l++)a[l-1]=arguments[l];(r=e.props)[o].apply(r,[t].concat(a)),e._notifying=!1}e._values[n]=t,e.unmounted||e.forceUpdate()}}),r&&(e.attachRef=function(t){e.inner=t}),e}_inheritsLoose(UncontrolledComponent,n);var o=UncontrolledComponent.prototype;return o.shouldComponentUpdate=function shouldComponentUpdate(){return!this._notifying},o.componentWillMount=function componentWillMount(){var e=this,t=this.props;this._values=Object.create(null),i.forEach(function(n){e._values[n]=t[Utils.defaultKey(n)]})},o.componentWillReceiveProps=function componentWillReceiveProps(e){var t=this,n=this.props;i.forEach(function(o){!Utils.isProp(e,o)&&Utils.isProp(n,o)&&(t._values[o]=e[Utils.defaultKey(o)])})},o.componentWillUnmount=function componentWillUnmount(){this.unmounted=!0},o.getControlledInstance=function getControlledInstance(){return this.inner},o.render=function render(){var t=this,n=_extends({},this.props);a.forEach(function(e){delete n[e]});var o={};return i.forEach(function(e){var n=t.props[e];o[e]=void 0!==n?n:t._values[e]}),_react.default.createElement(e,_extends({},n,o,this.handlers,{ref:this.attachRef}))},UncontrolledComponent}(_react.default.Component);return l.displayName="Uncontrolled("+o+")",l.propTypes=Utils.uncontrolledPropTypes(t,o),n.forEach(function(e){l.prototype[e]=function $proxiedMethod(){var t;return(t=this.inner)[e].apply(t,arguments)}}),l.ControlledComponent=e,l.deferControlTo=function(e,n,o){return void 0===n&&(n={}),uncontrollable(e,_extends({},t,n),o)},l}module.exports=exports.default;

}).call(this,require('_process'))

},{"./utils":779,"_process":484,"invariant":481,"react":777}],779:[function(require,module,exports){
(function (process){
"use strict";exports.__esModule=!0,exports.uncontrolledPropTypes=uncontrolledPropTypes,exports.isProp=isProp,exports.defaultKey=defaultKey,exports.isReactComponent=isReactComponent;var _invariant=_interopRequireDefault(require("invariant"));function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}var noop=function noop(){};function readOnlyPropType(e,o){return function(r,t){if(void 0!==r[t]&&!r[e])return new Error("You have provided a `"+t+"` prop to `"+o+"` without an `"+e+"` handler prop. This will render a read-only field. If the field should be mutable use `"+defaultKey(t)+"`. Otherwise, set `"+e+"`.")}}function uncontrolledPropTypes(e,o){var r={};return Object.keys(e).forEach(function(t){if(r[defaultKey(t)]=noop,"production"!==process.env.NODE_ENV){var n=e[t];"string"==typeof n&&n.trim().length||("production"!==process.env.NODE_ENV?(0,_invariant.default)(!1,"Uncontrollable - [%s]: the prop `%s` needs a valid handler key name in order to make it uncontrollable",o,t):invariant(!1)),r[t]=readOnlyPropType(n,o)}}),r}function isProp(e,o){return void 0!==e[o]}function defaultKey(e){return"default"+e.charAt(0).toUpperCase()+e.substr(1)}function isReactComponent(e){return!!(e&&e.prototype&&e.prototype.isReactComponent)}

}).call(this,require('_process'))

},{"_process":484,"invariant":481}],780:[function(require,module,exports){
(function (process){
"use strict";var warning=function(){};"production"!==process.env.NODE_ENV&&(warning=function(r,n,e){var o=arguments.length;e=new Array(o>2?o-2:0);for(var t=2;t<o;t++)e[t-2]=arguments[t];if(void 0===n)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");if(n.length<10||/^[s\W]*$/.test(n))throw new Error("The warning format should be able to uniquely identify this warning. Please, use a more descriptive format than: "+n);if(!r){var i=0,a="Warning: "+n.replace(/%s/g,function(){return e[i++]});"undefined"!=typeof console&&console.error(a);try{throw new Error(a)}catch(r){}}}),module.exports=warning;

}).call(this,require('_process'))

},{"_process":484}],781:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=Alerts;var _react=require("react"),_react2=_interopRequireDefault(_react);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function Alerts(){return _react2.default.createElement("div",null,_react2.default.createElement("h2",null,"Alerts"),_react2.default.createElement("div",{className:"alert alert-success",role:"alert"},_react2.default.createElement("button",{type:"button",className:"close","data-dismiss":"alert","aria-label":"Close"},_react2.default.createElement("span",{"aria-hidden":"true"},"×")),"Well done!"," ",_react2.default.createElement("a",{href:"javascript:;",className:"alert-link"},"Link")),_react2.default.createElement("div",{className:"alert alert-info",role:"alert"},_react2.default.createElement("button",{type:"button",className:"close","data-dismiss":"alert","aria-label":"Close"},_react2.default.createElement("span",{"aria-hidden":"true"},"×")),"Heads up!"," ",_react2.default.createElement("a",{href:"javascript:;",className:"alert-link"},"Link")),_react2.default.createElement("div",{className:"alert alert-warning",role:"alert"},_react2.default.createElement("button",{type:"button",className:"close","data-dismiss":"alert","aria-label":"Close"},_react2.default.createElement("span",{"aria-hidden":"true"},"×")),"Warning!"," ",_react2.default.createElement("a",{href:"javascript:;",className:"alert-link"},"Link")),_react2.default.createElement("div",{className:"alert alert-danger",role:"alert"},_react2.default.createElement("button",{type:"button",className:"close","data-dismiss":"alert","aria-label":"Close"},_react2.default.createElement("span",{"aria-hidden":"true"},"×")),"Oh snap!"," ",_react2.default.createElement("a",{href:"javascript:;",className:"alert-link"},"Link")))}

},{"react":777}],782:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function defineProperties(e,t){for(var a=0;a<t.length;a++){var r=t[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,a){return t&&defineProperties(e.prototype,t),a&&defineProperties(e,a),e}}(),_react=require("react"),_react2=_interopRequireDefault(_react),_sandbox=require("./sandbox"),_sandbox2=_interopRequireDefault(_sandbox),_navbarSample=require("./navbar-sample"),_navbarSample2=_interopRequireDefault(_navbarSample);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var App=function(e){function App(){_classCallCheck(this,App);var e=_possibleConstructorReturn(this,(App.__proto__||Object.getPrototypeOf(App)).call(this));return e.state={hash:""},e}return _inherits(App,_react.Component),_createClass(App,[{key:"componentDidMount",value:function componentDidMount(){window.addEventListener("hashchange",this.onHashChange.bind(this),!1),this.onHashChange()}},{key:"onHashChange",value:function onHashChange(){var e=location.hash;e.length>0&&(e=e.substring(1)),this.setState({component:e})}},{key:"render",value:function render(){var e=this.state.component;return _react2.default.createElement("div",null,_react2.default.createElement(_navbarSample2.default,null),_react2.default.createElement("div",{className:"container",id:"cont"},_react2.default.createElement("div",{className:"row"},_react2.default.createElement("div",{className:"col-md-3"},_react2.default.createElement("ul",{className:"nav nav-pills nav-stacked"},_react2.default.createElement("li",{className:""===e?"active":""},_react2.default.createElement("a",{href:"#"},"Home")),["alerts","buttons","cards","dropdowns","forms","grid","labels","modals","navs","tooltips","type"].map(function(t){return _react2.default.createElement("li",{key:t,className:t===e?"active":""},_react2.default.createElement("a",{href:"#"+t},capitalize(t)))}))),_react2.default.createElement("div",{className:"col-md-9"},!e&&_react2.default.createElement("div",null,_react2.default.createElement("h1",null,_react2.default.createElement("img",{src:"./public/assets/img/skelton.svg",alt:"logo",className:"logoimg",width:"50"}),"Hello, touch device friendly UI components"),_react2.default.createElement("p",null,"特徴",_react2.default.createElement("br",null),"bootstrap 3系の派生なのでcss classやreactはbootstrap互換",_react2.default.createElement("br",null),"ウェブからは離れ、ネイティブアプリに近い動きを実現",_react2.default.createElement("br",null),"単にレスポンシブなだけではない",_react2.default.createElement("br",null),"タッチデバイスで、、ネイティブアプリ風の動きを実現",_react2.default.createElement("br",null),"一方でポインティングデバイスでもちゃんと動く",_react2.default.createElement("br",null)),_react2.default.createElement("hr",null),"url: ",window.location.href,_react2.default.createElement("br",null),_react2.default.createElement("br",null),"Welcome to design system."),_react2.default.createElement(_sandbox2.default,{component:e})))))}}]),App}();function capitalize(e){return e.charAt(0).toUpperCase()+e.slice(1)}exports.default=App;

},{"./navbar-sample":790,"./sandbox":793,"react":777}],783:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=Buttons;var _react=require("react"),_react2=_interopRequireDefault(_react);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function Buttons(){return _react2.default.createElement("div",null,_react2.default.createElement("h2",null,"Buttons"),_react2.default.createElement("h4",null,"Buttons"),_react2.default.createElement("button",{className:"btn btn-default"},"Default")," ",_react2.default.createElement("button",{className:"btn btn-primary"},"Primary")," ",_react2.default.createElement("button",{className:"btn btn-danger"},"Danger")," ",_react2.default.createElement("button",{className:"btn btn-flat"},"Flat"),_react2.default.createElement("br",null),_react2.default.createElement("br",null),_react2.default.createElement("h4",null,"Link Button"),_react2.default.createElement("a",{href:"javascript:;",className:"btn btn-default"},"Default")," ",_react2.default.createElement("a",{href:"javascript:;",className:"btn btn-primary"},"Primary")," ",_react2.default.createElement("a",{href:"javascript:;",className:"btn btn-danger"},"Danger")," ",_react2.default.createElement("a",{href:"javascript:;",className:"btn btn-flat"},"Flat"),_react2.default.createElement("br",null),_react2.default.createElement("br",null),_react2.default.createElement("h3",null,"Sizes"),_react2.default.createElement("p",null,_react2.default.createElement("button",{className:"btn btn-primary btn-lg"},"Large button")," ",_react2.default.createElement("button",{className:"btn btn-default btn-lg"},"Large button")),_react2.default.createElement("p",null,_react2.default.createElement("button",{className:"btn btn-primary"},"Default button")," ",_react2.default.createElement("button",{className:"btn btn-default"},"Default button")),_react2.default.createElement("p",null,_react2.default.createElement("button",{className:"btn btn-primary btn-sm"},"Small button")," ",_react2.default.createElement("button",{className:"btn btn-default btn-sm"},"Small button")),_react2.default.createElement("p",null,_react2.default.createElement("button",{className:"btn btn-primary btn-xs"},"Extra small button")," ",_react2.default.createElement("button",{className:"btn btn-default btn-xs"},"Extra small button")),_react2.default.createElement("br",null),_react2.default.createElement("h4",null,"Block level button"),_react2.default.createElement("a",{href:"javascript:;",className:"btn btn-default btn-lg btn-block"},"Block level button")," ",_react2.default.createElement("a",{href:"javascript:;",className:"btn btn-primary btn-lg btn-block"},"Block level button")," ",_react2.default.createElement("br",null),_react2.default.createElement("br",null),_react2.default.createElement("h3",null,"Disabled state"),_react2.default.createElement("button",{className:"btn btn-default",disabled:!0},"Default")," ",_react2.default.createElement("button",{className:"btn btn-primary",disabled:!0},"Primary")," ",_react2.default.createElement("button",{className:"btn btn-danger",disabled:!0},"Danger"),_react2.default.createElement("br",null),_react2.default.createElement("br",null),_react2.default.createElement("h3",null,"Button groups"),_react2.default.createElement("div",{className:"btn-group",role:"group","aria-label":"..."},_react2.default.createElement("button",{type:"button",className:"btn btn-default"},"Left"),_react2.default.createElement("button",{type:"button",className:"btn btn-default"},"Middle"),_react2.default.createElement("button",{type:"button",className:"btn btn-default"},"Right")),_react2.default.createElement("h4",null,"Vertical"),_react2.default.createElement("div",{className:"btn-group-vertical",role:"group","aria-label":"..."},_react2.default.createElement("button",{type:"button",className:"btn btn-default"},"One"),_react2.default.createElement("button",{type:"button",className:"btn btn-default"},"Two"),_react2.default.createElement("button",{type:"button",className:"btn btn-default"},"Three"),_react2.default.createElement("div",{className:"btn-group",role:"group","aria-label":"..."},_react2.default.createElement("button",{type:"button",className:"btn btn-default dropdown-toggle","data-toggle":"dropdown","aria-haspopup":"true","aria-expanded":"false"},"Dropdown"," ",_react2.default.createElement("span",{className:"caret"})),_react2.default.createElement("ul",{className:"dropdown-menu"},_react2.default.createElement("li",null,_react2.default.createElement("a",{href:"#"},"Dropdown link")),_react2.default.createElement("li",null,_react2.default.createElement("a",{href:"#"},"Dropdown link")))),_react2.default.createElement("button",{type:"button",className:"btn btn-default"},"Four")),_react2.default.createElement("h4",null,"Toolbar"),_react2.default.createElement("div",{className:"btn-toolbar",role:"toolbar","aria-label":"..."},_react2.default.createElement("div",{className:"btn-group",role:"group","aria-label":"..."},_react2.default.createElement("button",{type:"button",className:"btn btn-default"},"1"),_react2.default.createElement("button",{type:"button",className:"btn btn-default"},"2"),_react2.default.createElement("button",{type:"button",className:"btn btn-default"},"3")),_react2.default.createElement("div",{className:"btn-group",role:"group","aria-label":"..."},_react2.default.createElement("div",{className:"btn-group",role:"group"},_react2.default.createElement("button",{type:"button",className:"btn btn-default dropdown-toggle","data-toggle":"dropdown","aria-haspopup":"true","aria-expanded":"false"},"Dropdown"," ",_react2.default.createElement("span",{className:"caret"})),_react2.default.createElement("ul",{className:"dropdown-menu"},_react2.default.createElement("li",null,_react2.default.createElement("a",{href:"#"},"Dropdown link")),_react2.default.createElement("li",null,_react2.default.createElement("a",{href:"#"},"Dropdown link")))),_react2.default.createElement("button",{type:"button",className:"btn btn-default"},"4"),_react2.default.createElement("button",{type:"button",className:"btn btn-default"},"5"),_react2.default.createElement("button",{type:"button",className:"btn btn-default"},"6"))),_react2.default.createElement("h4",null,"Small size"),_react2.default.createElement("div",{className:"btn-group btn-group-sm",role:"group","aria-label":"..."},_react2.default.createElement("button",{type:"button",className:"btn btn-default"},"Left"),_react2.default.createElement("button",{type:"button",className:"btn btn-default"},"Middle"),_react2.default.createElement("button",{type:"button",className:"btn btn-default"},"Right")),_react2.default.createElement("h4",null,"Justified"),_react2.default.createElement("div",{className:"btn-group btn-group-justified",role:"group","aria-label":"..."},_react2.default.createElement("button",{type:"button",className:"btn btn-default"},"Left"),_react2.default.createElement("button",{type:"button",className:"btn btn-default"},"Middle"),_react2.default.createElement("button",{type:"button",className:"btn btn-default"},"Right"),_react2.default.createElement("div",{className:"btn-group",role:"group"},_react2.default.createElement("button",{type:"button",className:"btn btn-default dropdown-toggle","data-toggle":"dropdown","aria-haspopup":"true","aria-expanded":"false"},"Dropdown"," ",_react2.default.createElement("span",{className:"caret"})),_react2.default.createElement("ul",{className:"dropdown-menu"},_react2.default.createElement("li",null,_react2.default.createElement("a",{href:"#"},"Dropdown link")),_react2.default.createElement("li",null,_react2.default.createElement("a",{href:"#"},"Dropdown link"))))))}

},{"react":777}],784:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=Cards;var _react=require("react"),_react2=_interopRequireDefault(_react);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function Cards(){return _react2.default.createElement("div",null,_react2.default.createElement("h2",null,"Cards"),_react2.default.createElement("a",{href:"javascript:;",className:"card"},"Sample Card Link"))}

},{"react":777}],785:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=Dropdowns;var _react=require("react"),_react2=_interopRequireDefault(_react);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function Dropdowns(){return _react2.default.createElement("div",null,_react2.default.createElement("h2",null,"Dropdowns"),_react2.default.createElement("div",{className:"dropdown"},_react2.default.createElement("button",{className:"btn btn-default dropdown-toggle",type:"button",id:"dropdownMenu1","data-toggle":"dropdown","aria-haspopup":"true","aria-expanded":"false"},"Dropdown ",_react2.default.createElement("span",{className:"caret"})),_react2.default.createElement("ul",{className:"dropdown-menu","aria-labelledby":"dropdownMenu1"},_react2.default.createElement("li",null,_react2.default.createElement("a",{href:"javascript:;"},"Action")),_react2.default.createElement("li",null,_react2.default.createElement("a",{href:"javascript:;"},"Another action")),_react2.default.createElement("li",null,_react2.default.createElement("a",{href:"javascript:;"},"Something else here")),_react2.default.createElement("li",{role:"separator",className:"divider"}),_react2.default.createElement("li",{className:"active"},_react2.default.createElement("a",{href:"javascript:;"},"Active link")),_react2.default.createElement("li",{className:"disabled"},_react2.default.createElement("a",{href:"javascript:;"},"Disabled link")))),_react2.default.createElement("hr",null),_react2.default.createElement("div",{className:"dropdown"},_react2.default.createElement("button",{className:"btn btn-flat dropdown-toggle",type:"button",id:"dropdownMenu2",tabIndex:"0","data-toggle":"dropdown","aria-haspopup":"true","aria-expanded":"false"},"Dropdown ",_react2.default.createElement("span",{className:"caret"})),_react2.default.createElement("ul",{className:"dropdown-menu","aria-labelledby":"dropdownMenu2"},_react2.default.createElement("li",null,_react2.default.createElement("a",{href:"javascript:;"},"Action")),_react2.default.createElement("li",null,_react2.default.createElement("a",{href:"javascript:;"},"Another action")),_react2.default.createElement("li",null,_react2.default.createElement("a",{href:"javascript:;"},"Something else here")),_react2.default.createElement("li",{role:"separator",className:"divider"}),_react2.default.createElement("li",{className:"active"},_react2.default.createElement("a",{href:"javascript:;"},"Active link")),_react2.default.createElement("li",{className:"disabled"},_react2.default.createElement("a",{href:"javascript:;"},"Disabled link")))),_react2.default.createElement("br",null),_react2.default.createElement("br",null),_react2.default.createElement("div",{className:"btn-group"},_react2.default.createElement("button",{type:"button",className:"btn btn-danger"},"Action"),_react2.default.createElement("button",{type:"button",className:"btn btn-danger dropdown-toggle","data-toggle":"dropdown","aria-haspopup":"true","aria-expanded":"false"},_react2.default.createElement("span",{className:"caret"}),_react2.default.createElement("span",{className:"sr-only"},"Toggle Dropdown")),_react2.default.createElement("ul",{className:"dropdown-menu"},_react2.default.createElement("li",null,_react2.default.createElement("a",{href:"#"},"Action")),_react2.default.createElement("li",null,_react2.default.createElement("a",{href:"#"},"Another action")),_react2.default.createElement("li",null,_react2.default.createElement("a",{href:"#"},"Something else here")),_react2.default.createElement("li",{role:"separator",className:"divider"}),_react2.default.createElement("li",null,_react2.default.createElement("a",{href:"#"},"Separated link"))))," ",_react2.default.createElement("div",{className:"btn-group dropup"},_react2.default.createElement("button",{type:"button",className:"btn btn-default"},"Dropup"),_react2.default.createElement("button",{type:"button",className:"btn btn-default dropdown-toggle","data-toggle":"dropdown","aria-haspopup":"true","aria-expanded":"false"},_react2.default.createElement("span",{className:"caret"}),_react2.default.createElement("span",{className:"sr-only"},"Toggle Dropdown")),_react2.default.createElement("ul",{className:"dropdown-menu"},_react2.default.createElement("li",null,_react2.default.createElement("a",{href:"#"},"Action")),_react2.default.createElement("li",null,_react2.default.createElement("a",{href:"#"},"Another action")))))}

},{"react":777}],786:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=Forms;var _react=require("react"),_react2=_interopRequireDefault(_react);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function Forms(){return _react2.default.createElement("div",null,_react2.default.createElement("h2",null,"Forms"),_react2.default.createElement("form",null,_react2.default.createElement("div",{className:"form-group"},_react2.default.createElement("div",{className:"input-group"},_react2.default.createElement("div",{className:"input-group-addon"},"https://scrapbox.io/"),_react2.default.createElement("input",{type:"text",className:"form-control"}))),_react2.default.createElement("div",{className:"form-group has-error"},_react2.default.createElement("label",{className:"control-label",htmlFor:"exampleInputEmail1"},"Has error"),_react2.default.createElement("div",{className:"input-group"},_react2.default.createElement("div",{className:"input-group-addon"},"https://scrapbox.io/"),_react2.default.createElement("input",{type:"text",className:"form-control"}))),_react2.default.createElement("div",{className:"form-group"},_react2.default.createElement("label",{className:"control-label",htmlFor:"exampleInputEmail1"},"Email address"),_react2.default.createElement("input",{type:"email",className:"form-control",id:"exampleInputEmail1",placeholder:"Email"})),_react2.default.createElement("div",{className:"form-group"},_react2.default.createElement("label",{className:"control-label",htmlFor:"exampleInputPassword1"},"Password"),_react2.default.createElement("input",{type:"password",className:"form-control",id:"exampleInputPassword1",placeholder:"Password"}),_react2.default.createElement("span",{id:"helpBlock",className:"help-block"},"A block of help text that breaks onto a new line and may extend beyond one line.")),_react2.default.createElement("div",{className:"form-group"},_react2.default.createElement("label",{className:"control-label",htmlFor:"exampleInputEmail1"},"Select"),_react2.default.createElement("select",{className:"form-control"},_react2.default.createElement("option",null,"1"),_react2.default.createElement("option",null,"2"),_react2.default.createElement("option",null,"3"),_react2.default.createElement("option",null,"4"),_react2.default.createElement("option",null,"5"))),_react2.default.createElement("div",{className:"form-group"},_react2.default.createElement("label",{className:"control-label",htmlFor:"disabledTextInput"},"Disabled input"),_react2.default.createElement("input",{type:"text",id:"disabledTextInput",className:"form-control",placeholder:"Disabled input",disabled:!0})),_react2.default.createElement("div",{className:"form-group"},_react2.default.createElement("label",{className:"control-label",htmlFor:"freetext"},"Free text"),_react2.default.createElement("textarea",{className:"form-control",id:"freetext"})),_react2.default.createElement("div",{className:"checkbox"},_react2.default.createElement("label",null,_react2.default.createElement("input",{type:"checkbox"})," Check me out")),_react2.default.createElement("div",{className:"radio"},_react2.default.createElement("label",null,_react2.default.createElement("input",{type:"radio",name:"optionsRadios",id:"optionsRadios1",value:"option1"}),"Option one is this and that—be sure to include why it's great")),_react2.default.createElement("div",{className:"radio"},_react2.default.createElement("label",null,_react2.default.createElement("input",{type:"radio",name:"optionsRadios",id:"optionsRadios2",value:"option2"}),"Option two can be something else and selecting it will deselect option one")),_react2.default.createElement("div",{className:"form-group"},_react2.default.createElement("label",{htmlFor:"slider"},"Process nice score from -20 to +20"),_react2.default.createElement("input",{type:"range",min:"-20",max:"20",defaultValue:"0"})),_react2.default.createElement("div",{className:"form-group"},_react2.default.createElement("label",{htmlFor:"file"},"Upload file"),_react2.default.createElement("input",{type:"file",title:"File"})),_react2.default.createElement("button",{className:"btn btn-default"},"Submit"),_react2.default.createElement("h4",null,"Sizes"),_react2.default.createElement("div",{className:"form-group"},_react2.default.createElement("input",{className:"form-control input-lg",type:"text",placeholder:".input-lg"})),_react2.default.createElement("div",{className:"form-group"},_react2.default.createElement("input",{className:"form-control",type:"text",placeholder:"Default input"})),_react2.default.createElement("div",{className:"form-group"},_react2.default.createElement("input",{className:"form-control input-sm",type:"text",placeholder:".input-sm"})),_react2.default.createElement("h4",null,"Panels"),_react2.default.createElement("div",{className:"panel panel-default"},_react2.default.createElement("div",{className:"panel-body"},"Basic panel example"))))}

},{"react":777}],787:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=Grid;var _react=require("react"),_react2=_interopRequireDefault(_react);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function Grid(){return _react2.default.createElement("div",{className:"grid"},_react2.default.createElement("h2",null,"Grid"),_react2.default.createElement("div",{className:"row"},_react2.default.createElement("div",{className:"col-md-1"},_react2.default.createElement("div",null,"1")),_react2.default.createElement("div",{className:"col-md-1"},_react2.default.createElement("div",null,"1")),_react2.default.createElement("div",{className:"col-md-1"},_react2.default.createElement("div",null,"1")),_react2.default.createElement("div",{className:"col-md-1"},_react2.default.createElement("div",null,"1")),_react2.default.createElement("div",{className:"col-md-1"},_react2.default.createElement("div",null,"1")),_react2.default.createElement("div",{className:"col-md-1"},_react2.default.createElement("div",null,"1")),_react2.default.createElement("div",{className:"col-md-1"},_react2.default.createElement("div",null,"1")),_react2.default.createElement("div",{className:"col-md-1"},_react2.default.createElement("div",null,"1")),_react2.default.createElement("div",{className:"col-md-1"},_react2.default.createElement("div",null,"1")),_react2.default.createElement("div",{className:"col-md-1"},_react2.default.createElement("div",null,"1")),_react2.default.createElement("div",{className:"col-md-1"},_react2.default.createElement("div",null,"1")),_react2.default.createElement("div",{className:"col-md-1"},_react2.default.createElement("div",null,"1"))),_react2.default.createElement("div",{className:"row"},_react2.default.createElement("div",{className:"col-md-2"},_react2.default.createElement("div",null,"2")),_react2.default.createElement("div",{className:"col-md-2"},_react2.default.createElement("div",null,"2")),_react2.default.createElement("div",{className:"col-md-2"},_react2.default.createElement("div",null,"2")),_react2.default.createElement("div",{className:"col-md-2"},_react2.default.createElement("div",null,"2")),_react2.default.createElement("div",{className:"col-md-2"},_react2.default.createElement("div",null,"2")),_react2.default.createElement("div",{className:"col-md-2"},_react2.default.createElement("div",null,"2"))),_react2.default.createElement("div",{className:"row"},_react2.default.createElement("div",{className:"col-md-3"},_react2.default.createElement("div",null,"3")),_react2.default.createElement("div",{className:"col-md-3"},_react2.default.createElement("div",null,"3")),_react2.default.createElement("div",{className:"col-md-3"},_react2.default.createElement("div",null,"3")),_react2.default.createElement("div",{className:"col-md-3"},_react2.default.createElement("div",null,"3"))),_react2.default.createElement("div",{className:"row"},_react2.default.createElement("div",{className:"col-md-4"},_react2.default.createElement("div",null,"4")),_react2.default.createElement("div",{className:"col-md-4"},_react2.default.createElement("div",null,"4")),_react2.default.createElement("div",{className:"col-md-4"},_react2.default.createElement("div",null,"4"))),_react2.default.createElement("div",{className:"row"},_react2.default.createElement("div",{className:"col-md-6"},_react2.default.createElement("div",null,"6")),_react2.default.createElement("div",{className:"col-md-6"},_react2.default.createElement("div",null,"6"))),_react2.default.createElement("div",{className:"row"},_react2.default.createElement("div",{className:"col-md-5"},_react2.default.createElement("div",null,"5")),_react2.default.createElement("div",{className:"col-md-5 col-md-offset-2"},_react2.default.createElement("div",null,"5 offset-2"))),_react2.default.createElement("div",{className:"row"},_react2.default.createElement("div",{className:"col-md-8 col-md-offset-2"},_react2.default.createElement("div",null,"8 offset-2"))))}

},{"react":777}],788:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=Labels;var _react=require("react"),_react2=_interopRequireDefault(_react);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function Labels(){return _react2.default.createElement("div",null,_react2.default.createElement("h2",null,"Labels"),_react2.default.createElement("span",{className:"label label-default"},"Default")," ",_react2.default.createElement("a",{href:"javascript:;",className:"label label-default"},"Link")," ",_react2.default.createElement("span",{className:"label label-primary"},"Primary")," ",_react2.default.createElement("span",{className:"label label-success"},"Success")," ",_react2.default.createElement("span",{className:"label label-info"},"Info")," ",_react2.default.createElement("span",{className:"label label-warning"},"Warning")," ",_react2.default.createElement("span",{className:"label label-danger"},"Danger"))}

},{"react":777}],789:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function defineProperties(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(e,t,r){return t&&defineProperties(e.prototype,t),r&&defineProperties(e,r),e}}(),_react=require("react"),_react2=_interopRequireDefault(_react),_sampleModal=require("./sample-modal"),_sampleModal2=_interopRequireDefault(_sampleModal);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var Modals=function(e){function Modals(){_classCallCheck(this,Modals);var e=_possibleConstructorReturn(this,(Modals.__proto__||Object.getPrototypeOf(Modals)).call(this));return e.state={showModal:!1},e}return _inherits(Modals,_react.Component),_createClass(Modals,[{key:"render",value:function render(){var e=this;return _react2.default.createElement("div",null,_react2.default.createElement("h2",null,"Modals"),_react2.default.createElement(_sampleModal2.default,{show:this.state.showModal,onHide:function onHide(){return e.setState({showModal:!1})}}),_react2.default.createElement("button",{className:"btn btn-default",onClick:function onClick(){return e.setState({showModal:!0})}},"Show Modal"))}}]),Modals}();exports.default=Modals;

},{"./sample-modal":792,"react":777}],790:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=NavbarSample;var _react=require("react"),_react2=_interopRequireDefault(_react);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function NavbarSample(){return _react2.default.createElement("nav",{className:"navbar navbar-inverse navbar-fixed-top"},_react2.default.createElement("div",{className:"container-fluid"},_react2.default.createElement("div",{className:"navbar-header"},_react2.default.createElement("button",{type:"button",className:"navbar-toggle collapsed","data-toggle":"collapse","data-target":"#bs-example-navbar-collapse-1","aria-expanded":"false"},_react2.default.createElement("span",{className:"sr-only"},"Toggle navigation"),_react2.default.createElement("span",{className:"icon-bar"}),_react2.default.createElement("span",{className:"icon-bar"}),_react2.default.createElement("span",{className:"icon-bar"})),_react2.default.createElement("a",{className:"navbar-brand",href:"javascript:;"},"Tatami")),_react2.default.createElement("div",{className:"collapse navbar-collapse",id:"bs-example-navbar-collapse-1"},_react2.default.createElement("ul",{className:"nav navbar-nav"},_react2.default.createElement("li",{className:"active"},_react2.default.createElement("a",{href:"javascript:;"},"Link ",_react2.default.createElement("span",{className:"sr-only"},"(current)"))),_react2.default.createElement("li",null,_react2.default.createElement("a",{href:"javascript:;"},"Link")),_react2.default.createElement("li",{className:"dropdown"},_react2.default.createElement("a",{href:"#",className:"dropdown-toggle","data-toggle":"dropdown",role:"button","aria-haspopup":"true","aria-expanded":"false"},"Dropdown ",_react2.default.createElement("span",{className:"caret"})),_react2.default.createElement("ul",{className:"dropdown-menu"},_react2.default.createElement("li",null,_react2.default.createElement("a",{href:"javascript:;"},"Action")),_react2.default.createElement("li",null,_react2.default.createElement("a",{href:"javascript:;"},"Another action")),_react2.default.createElement("li",null,_react2.default.createElement("a",{href:"javascript:;"},"Something else here")),_react2.default.createElement("li",{role:"separator",className:"divider"}),_react2.default.createElement("li",{className:"active"},_react2.default.createElement("a",{href:"javascript:;"},"Active link")),_react2.default.createElement("li",{className:"disabled"},_react2.default.createElement("a",{href:"javascript:;"},"Disabled link"))))),_react2.default.createElement("form",{className:"navbar-form navbar-left"},_react2.default.createElement("div",{className:"form-group"},_react2.default.createElement("input",{type:"text",className:"form-control",placeholder:"Search"})),_react2.default.createElement("button",{type:"submit",className:"btn btn-default"},"Submit")),_react2.default.createElement("ul",{className:"nav navbar-nav navbar-right"},_react2.default.createElement("li",null,_react2.default.createElement("a",{href:"javascript:;"},"Link")),_react2.default.createElement("li",{className:"dropdown"},_react2.default.createElement("a",{href:"#",className:"dropdown-toggle","data-toggle":"dropdown",role:"button","aria-haspopup":"true","aria-expanded":"false"},"Dropdown ",_react2.default.createElement("span",{className:"caret"})),_react2.default.createElement("ul",{className:"dropdown-menu"},_react2.default.createElement("li",null,_react2.default.createElement("a",{href:"javascript:;"},"Action")),_react2.default.createElement("li",null,_react2.default.createElement("a",{href:"javascript:;"},"Another action")),_react2.default.createElement("li",null,_react2.default.createElement("a",{href:"javascript:;"},"Something else here")),_react2.default.createElement("li",{role:"separator",className:"divider"}),_react2.default.createElement("li",{className:"active"},_react2.default.createElement("a",{href:"javascript:;"},"Active link")),_react2.default.createElement("li",{className:"disabled"},_react2.default.createElement("a",{href:"javascript:;"},"Disabled link"))))))))}

},{"react":777}],791:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=Navs;var _react=require("react"),_react2=_interopRequireDefault(_react);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function Navs(){return _react2.default.createElement("div",null,_react2.default.createElement("h2",null,"Navs"),_react2.default.createElement("h4",null,"Tabs"),_react2.default.createElement("div",null,_react2.default.createElement("ul",{className:"nav nav-tabs",role:"tablist"},_react2.default.createElement("li",{role:"presentation",className:"active"},_react2.default.createElement("a",{href:"#home","aria-controls":"home",role:"tab","data-toggle":"tab"},"Home")),_react2.default.createElement("li",{role:"presentation"},_react2.default.createElement("a",{href:"#profile","aria-controls":"profile",role:"tab","data-toggle":"tab"},"Profile"))),_react2.default.createElement("div",{className:"tab-content"},_react2.default.createElement("div",{role:"tabpanel",className:"tab-pane active",id:"home"},_react2.default.createElement("br",null),"this is home..."),_react2.default.createElement("div",{role:"tabpanel",className:"tab-pane",id:"profile"},_react2.default.createElement("br",null),"this is profile..."))),_react2.default.createElement("br",null),_react2.default.createElement("br",null),_react2.default.createElement("h4",null,"Pills"),_react2.default.createElement("ul",{className:"nav nav-pills"},_react2.default.createElement("li",{role:"presentation",className:"active"},_react2.default.createElement("a",{href:"javascript:;"},"Home")),_react2.default.createElement("li",{role:"presentation"},_react2.default.createElement("a",{href:"javascript:;"},"Profile")),_react2.default.createElement("li",{role:"presentation"},_react2.default.createElement("a",{href:"javascript:;"},"Messages")),_react2.default.createElement("li",{role:"presentation",className:"dropdown"},_react2.default.createElement("a",{className:"dropdown-toggle","data-toggle":"dropdown",href:"#",role:"button","aria-haspopup":"true","aria-expanded":"false"},"Dropdown ",_react2.default.createElement("span",{className:"caret"})),_react2.default.createElement("ul",{className:"dropdown-menu"},_react2.default.createElement("li",null,_react2.default.createElement("a",{href:"javascript:;"},"Action")),_react2.default.createElement("li",null,_react2.default.createElement("a",{href:"javascript:;"},"Another action"))))),_react2.default.createElement("br",null),_react2.default.createElement("br",null),_react2.default.createElement("h4",null,"Stacked pills"),_react2.default.createElement("ul",{className:"nav nav-pills nav-stacked"},_react2.default.createElement("li",{role:"presentation",className:"active"},_react2.default.createElement("a",{href:"javascript:;"},"Home")),_react2.default.createElement("li",{role:"presentation",className:"disabled"},_react2.default.createElement("a",{href:"javascript:;"},"Profile")),_react2.default.createElement("li",{role:"presentation"},_react2.default.createElement("a",{href:"javascript:;"},"Messages"))),_react2.default.createElement("br",null),_react2.default.createElement("br",null),_react2.default.createElement("h4",null,"Justified"),_react2.default.createElement("ul",{className:"nav nav-tabs nav-justified",role:"tablist"},_react2.default.createElement("li",{role:"presentation",className:"active"},_react2.default.createElement("a",{href:"#home","aria-controls":"home",role:"tab","data-toggle":"tab"},"Home")),_react2.default.createElement("li",{role:"presentation"},_react2.default.createElement("a",{href:"#profile","aria-controls":"profile",role:"tab","data-toggle":"tab"},"Profile")),_react2.default.createElement("li",{role:"presentation"},_react2.default.createElement("a",{href:"#messages","aria-controls":"profile",role:"tab","data-toggle":"tab"},"Messages"))),_react2.default.createElement("br",null),_react2.default.createElement("ul",{className:"nav nav-pills nav-justified"},_react2.default.createElement("li",{role:"presentation",className:"active"},_react2.default.createElement("a",{href:"javascript:;"},"Home")),_react2.default.createElement("li",{role:"presentation"},_react2.default.createElement("a",{href:"javascript:;"},"Profile")),_react2.default.createElement("li",{role:"presentation"},_react2.default.createElement("a",{href:"javascript:;"},"Messages"))))}

},{"react":777}],792:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function defineProperties(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(e,t,r){return t&&defineProperties(e.prototype,t),r&&defineProperties(e,r),e}}(),_react=require("react"),_react2=_interopRequireDefault(_react),_propTypes=require("prop-types"),_propTypes2=_interopRequireDefault(_propTypes),_reactBootstrap=require("react-bootstrap");function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var SampleModal=function(e){function SampleModal(){return _classCallCheck(this,SampleModal),_possibleConstructorReturn(this,(SampleModal.__proto__||Object.getPrototypeOf(SampleModal)).apply(this,arguments))}return _inherits(SampleModal,_react.Component),_createClass(SampleModal,[{key:"render",value:function render(){var e=this.props,t=e.show,r=e.onHide;return _react2.default.createElement(_reactBootstrap.Modal,{show:t,onHide:r},_react2.default.createElement(_reactBootstrap.Modal.Header,{closeButton:!0},_react2.default.createElement(_reactBootstrap.Modal.Title,null,"Hellow")),_react2.default.createElement(_reactBootstrap.Modal.Body,null,"A",_react2.default.createElement("br",null),"A",_react2.default.createElement("br",null),"A",_react2.default.createElement("br",null),"A",_react2.default.createElement("br",null),"A",_react2.default.createElement("br",null),"A",_react2.default.createElement("br",null),"A",_react2.default.createElement("br",null),"A",_react2.default.createElement("br",null),"A",_react2.default.createElement("br",null),"A",_react2.default.createElement("br",null),"A",_react2.default.createElement("br",null),"A",_react2.default.createElement("br",null),"A",_react2.default.createElement("br",null),"A",_react2.default.createElement("br",null)))}}],[{key:"propTypes",get:function get(){return{show:_propTypes2.default.bool.isRequired,onHide:_propTypes2.default.func.isRequired}}}]),SampleModal}();exports.default=SampleModal;

},{"prop-types":495,"react":777,"react-bootstrap":592}],793:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=Sandbox;var _react=require("react"),_react2=_interopRequireDefault(_react),_alerts=require("./alerts"),_alerts2=_interopRequireDefault(_alerts),_buttons=require("./buttons"),_buttons2=_interopRequireDefault(_buttons),_cards=require("./cards"),_cards2=_interopRequireDefault(_cards),_dropdowns=require("./dropdowns"),_dropdowns2=_interopRequireDefault(_dropdowns),_forms=require("./forms"),_forms2=_interopRequireDefault(_forms),_grid=require("./grid"),_grid2=_interopRequireDefault(_grid),_labels=require("./labels"),_labels2=_interopRequireDefault(_labels),_modals=require("./modals"),_modals2=_interopRequireDefault(_modals),_navs=require("./navs"),_navs2=_interopRequireDefault(_navs),_tooltips=require("./tooltips"),_tooltips2=_interopRequireDefault(_tooltips),_type=require("./type"),_type2=_interopRequireDefault(_type);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function Sandbox(e){switch(e.component){case"alerts":return _react2.default.createElement(_alerts2.default,null);case"buttons":return _react2.default.createElement(_buttons2.default,null);case"cards":return _react2.default.createElement(_cards2.default,null);case"dropdowns":return _react2.default.createElement(_dropdowns2.default,null);case"forms":return _react2.default.createElement(_forms2.default,null);case"grid":return _react2.default.createElement(_grid2.default,null);case"labels":return _react2.default.createElement(_labels2.default,null);case"modals":return _react2.default.createElement(_modals2.default,null);case"navs":return _react2.default.createElement(_navs2.default,null);case"tooltips":return _react2.default.createElement(_tooltips2.default,null);case"type":return _react2.default.createElement(_type2.default,null)}return null}

},{"./alerts":781,"./buttons":783,"./cards":784,"./dropdowns":785,"./forms":786,"./grid":787,"./labels":788,"./modals":789,"./navs":791,"./tooltips":794,"./type":795,"react":777}],794:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=Tooltips;var _react=require("react"),_react2=_interopRequireDefault(_react),_reactBootstrap=require("react-bootstrap");function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function Tooltips(){var e=_react2.default.createElement(_reactBootstrap.Tooltip,{id:"tooltip"},"Hello");return _react2.default.createElement("div",null,_react2.default.createElement("h2",null,"Tooltips"),_react2.default.createElement(_reactBootstrap.OverlayTrigger,{placement:"top",overlay:e},_react2.default.createElement("a",{href:"javascript:;"},"Hover me")))}

},{"react":777,"react-bootstrap":592}],795:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=Type;var _react=require("react"),_react2=_interopRequireDefault(_react);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function Type(){return _react2.default.createElement("div",null,_react2.default.createElement("h1",null,"h1. Bootstrap heading"),_react2.default.createElement("h2",null,"h2. Bootstrap heading"),_react2.default.createElement("h3",null,"h3. Bootstrap heading"),_react2.default.createElement("h4",null,"h4. Bootstrap heading"),_react2.default.createElement("p",null,"Nullam quis risus eget urna mollis ornare vel eu leo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Nullam id dolor id nibh ultricies vehicula."),_react2.default.createElement("p",null,"Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec ullamcorper nulla non metus auctor fringilla. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Donec ullamcorper nulla non metus auctor fringilla."),_react2.default.createElement("p",null,"Maecenas sed diam eget risus varius blandit sit amet non magna. Donec id elit non mi porta gravida at eget metus. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit."),_react2.default.createElement("div",null,_react2.default.createElement("p",null,_react2.default.createElement("a",{href:"javascript:;"},"Here is a text link")),_react2.default.createElement("p",null,_react2.default.createElement("button",{className:"btn btn-link"},"Button link"))))}

},{"react":777}],796:[function(require,module,exports){
"use strict";require("babel-polyfill");var _react=require("react"),_react2=_interopRequireDefault(_react),_reactDom=require("react-dom"),_app=require("./components/app"),_app2=_interopRequireDefault(_app);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}"/default.html"!==location.pathname&&require("focus-visible");var appContainer=document.getElementById("app-container");appContainer&&(0,_reactDom.render)(_react2.default.createElement(_app2.default,null),appContainer);

},{"./components/app":782,"babel-polyfill":17,"focus-visible":480,"react":777,"react-dom":602}]},{},[796])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9jb3JlLWpzL2FycmF5L2Zyb20uanMiLCJub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9jb3JlLWpzL2FycmF5L2lzLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9vYmplY3QvYXNzaWduLmpzIiwibm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9vYmplY3QvY3JlYXRlLmpzIiwibm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9vYmplY3QvZW50cmllcy5qcyIsIm5vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2NvcmUtanMvb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIm5vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2NvcmUtanMvb2JqZWN0L2tleXMuanMiLCJub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9jb3JlLWpzL29iamVjdC92YWx1ZXMuanMiLCJub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9jb3JlLWpzL3BhcnNlLWludC5qcyIsIm5vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzIiwibm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzLmpzIiwibm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlLmpzIiwibm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanMiLCJub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmQuanMiLCJub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbGliL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3JlZ2V4cC9lc2NhcGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL2FycmF5L2Zyb20uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL2FycmF5L2lzLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvYXNzaWduLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvY3JlYXRlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZW50cmllcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2tleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC92YWx1ZXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL3BhcnNlLWludC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY2xhc3NvZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb3JlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jcmVhdGUtcHJvcGVydHkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2N0eC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2V4cG9ydC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZmFpbHMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2dsb2JhbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGFzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oaWRlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19odG1sLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faW9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1jYWxsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItZGV0ZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2xpYnJhcnkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1hc3NpZ24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1kcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1waWUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1zYXAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC10by1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcGFyc2UtaW50LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19yZWRlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC1rZXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zdHJpbmctdHJpbS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc3RyaW5nLXdzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1vYmplY3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdWlkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5hcnJheS5mcm9tLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnBhcnNlLWludC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLW51bWJlci12YWx1ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLWluc3RhbmNlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktY29weS13aXRoaW4uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1maWxsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktZnJvbS1pdGVyYWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktbWV0aG9kcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXJlZHVjZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2JpbmQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXRvLWpzb24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXdlYWsuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29yZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NyZWF0ZS1wcm9wZXJ0eS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2N0eC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8taXNvLXN0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8tcHJpbWl0aXZlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19leHBvcnQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy1pcy1yZWdleHAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZpeC1yZS13a3MuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGFncy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZsYXR0ZW4taW50by1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Zvci1vZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2dsb2JhbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hhcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hpZGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19odG1sLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW52b2tlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LWl0ZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWludGVnZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1vYmplY3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1yZWdleHAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNhbGwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGVmaW5lLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZXRlY3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19saWJyYXJ5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1leHBtMS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZnJvdW5kLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1sb2cxcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtc2NhbGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLXNpZ24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tZXRhLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWV0YWRhdGEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19taWNyb3Rhc2suanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHBzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWZvcmNlZC1wYW0uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1waWUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qtc2FwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXRvLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb3duLWtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1mbG9hdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BhcnNlLWludC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BlcmZvcm0uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9taXNlLXJlc29sdmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZXBsYWNlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NhbWUtdmFsdWUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtY29sbGVjdGlvbi1mcm9tLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LWNvbGxlY3Rpb24tb2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtcHJvdG8uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtc3BlY2llcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpY3QtbWV0aG9kLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWNvbnRleHQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctaHRtbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1wYWQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcmVwZWF0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXRyaW0uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctd3MuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190YXNrLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tYWJzb2x1dGUtaW5kZXguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWludGVnZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1idWZmZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VpZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VzZXItYWdlbnQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL192YWxpZGF0ZS1jb2xsZWN0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWRlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1leHQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvY29yZS5yZWdleHAuZXNjYXBlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbGwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmpvaW4uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubWFwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkub2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zbGljZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvbWUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb3J0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUubm93LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1qc29uLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLXN0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5oYXMtaW5zdGFuY2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWFwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hY29zaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXNpbmguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmF0YW5oLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jYnJ0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jbHozMi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY29zaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguaHlwb3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmltdWwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzEwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2luaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudGFuaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIudG8tZml4ZWQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtZmxvYXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1pbnQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wcm9taXNlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5zZXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuZmxhZ3MuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2guanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2guanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc2V0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5iaWcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5maXhlZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcubGluay5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yYXcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN0cmlrZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdWIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5kYXRhLXZpZXcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDMyLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQ4LWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDE2LWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1jbGFtcGVkLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1tYXAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi53ZWFrLXNldC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmZsYXQtbWFwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuZmxhdHRlbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXNhcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmVycm9yLmlzLWVycm9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuZ2xvYmFsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLmZyb20uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXAub2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXAudG8tanNvbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguY2xhbXAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmRlZy1wZXItcmFkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5kZWdyZWVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5mc2NhbGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlhZGRoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5pbXVsaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaXN1YmguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnJhZC1wZXItZGVnLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5yYWRpYW5zLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5zY2FsZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguc2lnbmJpdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGgudW11bGguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLWdldHRlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtc2V0dGVyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtZ2V0dGVyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1zZXR0ZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JzZXJ2YWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnByb21pc2UuZmluYWxseS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnByb21pc2UudHJ5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWZpbmUtbWV0YWRhdGEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlbGV0ZS1tZXRhZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLWtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtbWV0YWRhdGEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1vd24tbWV0YWRhdGEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lm1ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0LmZyb20uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zZXQub2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zZXQudG8tanNvbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5hdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5tYXRjaC1hbGwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLWVuZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN5c3RlbS5nbG9iYWwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLW1hcC5mcm9tLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1tYXAub2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLXNldC5mcm9tLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1zZXQub2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5pbW1lZGlhdGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi50aW1lcnMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9zaGltLmpzIiwibm9kZV9tb2R1bGVzL2NyZWF0ZS1yZWFjdC1jbGFzcy9mYWN0b3J5LmpzIiwibm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2FjdGl2ZUVsZW1lbnQuanMiLCJub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvY2xhc3MvYWRkQ2xhc3MuanMiLCJub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvY2xhc3MvaGFzQ2xhc3MuanMiLCJub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvY2xhc3MvaW5kZXguanMiLCJub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvY2xhc3MvcmVtb3ZlQ2xhc3MuanMiLCJub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXZlbnRzL2ZpbHRlci5qcyIsIm5vZGVfbW9kdWxlcy9kb20taGVscGVycy9ldmVudHMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXZlbnRzL2xpc3Rlbi5qcyIsIm5vZGVfbW9kdWxlcy9kb20taGVscGVycy9ldmVudHMvb2ZmLmpzIiwibm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2V2ZW50cy9vbi5qcyIsIm5vZGVfbW9kdWxlcy9kb20taGVscGVycy9vd25lckRvY3VtZW50LmpzIiwibm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3F1ZXJ5L2NvbnRhaW5zLmpzIiwibm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3F1ZXJ5L2lzV2luZG93LmpzIiwibm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3F1ZXJ5L29mZnNldC5qcyIsIm5vZGVfbW9kdWxlcy9kb20taGVscGVycy9xdWVyeS9vZmZzZXRQYXJlbnQuanMiLCJub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvcXVlcnkvcG9zaXRpb24uanMiLCJub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvcXVlcnkvcXVlcnlTZWxlY3RvckFsbC5qcyIsIm5vZGVfbW9kdWxlcy9kb20taGVscGVycy9xdWVyeS9zY3JvbGxMZWZ0LmpzIiwibm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3F1ZXJ5L3Njcm9sbFRvcC5qcyIsIm5vZGVfbW9kdWxlcy9kb20taGVscGVycy9zdHlsZS9nZXRDb21wdXRlZFN0eWxlLmpzIiwibm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3N0eWxlL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3N0eWxlL3JlbW92ZVN0eWxlLmpzIiwibm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3RyYW5zaXRpb24vZW5kLmpzIiwibm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3RyYW5zaXRpb24vaW5kZXguanMiLCJub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdHJhbnNpdGlvbi9pc1RyYW5zZm9ybS5qcyIsIm5vZGVfbW9kdWxlcy9kb20taGVscGVycy90cmFuc2l0aW9uL3Byb3BlcnRpZXMuanMiLCJub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdXRpbC9jYW1lbGl6ZS5qcyIsIm5vZGVfbW9kdWxlcy9kb20taGVscGVycy91dGlsL2NhbWVsaXplU3R5bGUuanMiLCJub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdXRpbC9oeXBoZW5hdGUuanMiLCJub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdXRpbC9oeXBoZW5hdGVTdHlsZS5qcyIsIm5vZGVfbW9kdWxlcy9kb20taGVscGVycy91dGlsL2luRE9NLmpzIiwibm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3V0aWwvc2Nyb2xsYmFyU2l6ZS5qcyIsIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi9FdmVudExpc3RlbmVyLmpzIiwibm9kZV9tb2R1bGVzL2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50LmpzIiwibm9kZV9tb2R1bGVzL2ZianMvbGliL2NhbWVsaXplLmpzIiwibm9kZV9tb2R1bGVzL2ZianMvbGliL2NhbWVsaXplU3R5bGVOYW1lLmpzIiwibm9kZV9tb2R1bGVzL2ZianMvbGliL2NvbnRhaW5zTm9kZS5qcyIsIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi9jcmVhdGVBcnJheUZyb21NaXhlZC5qcyIsIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi9jcmVhdGVOb2Rlc0Zyb21NYXJrdXAuanMiLCJub2RlX21vZHVsZXMvZmJqcy9saWIvZW1wdHlGdW5jdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eU9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi9mb2N1c05vZGUuanMiLCJub2RlX21vZHVsZXMvZmJqcy9saWIvZ2V0QWN0aXZlRWxlbWVudC5qcyIsIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi9nZXRNYXJrdXBXcmFwLmpzIiwibm9kZV9tb2R1bGVzL2ZianMvbGliL2dldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2ZianMvbGliL2h5cGhlbmF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi9oeXBoZW5hdGVTdHlsZU5hbWUuanMiLCJub2RlX21vZHVsZXMvZmJqcy9saWIvaW52YXJpYW50LmpzIiwibm9kZV9tb2R1bGVzL2ZianMvbGliL2lzTm9kZS5qcyIsIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi9pc1RleHROb2RlLmpzIiwibm9kZV9tb2R1bGVzL2ZianMvbGliL21lbW9pemVTdHJpbmdPbmx5LmpzIiwibm9kZV9tb2R1bGVzL2ZianMvbGliL3BlcmZvcm1hbmNlLmpzIiwibm9kZV9tb2R1bGVzL2ZianMvbGliL3BlcmZvcm1hbmNlTm93LmpzIiwibm9kZV9tb2R1bGVzL2ZianMvbGliL3NoYWxsb3dFcXVhbC5qcyIsIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi93YXJuaW5nLmpzIiwibm9kZV9tb2R1bGVzL2ZvY3VzLXZpc2libGUvZGlzdC9mb2N1cy12aXNpYmxlLmpzIiwibm9kZV9tb2R1bGVzL2ludmFyaWFudC9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL2tleWNvZGUvaW5kZXguanMiLCJub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvcHJvcC10eXBlcy1leHRyYS9saWIvYWxsLmpzIiwibm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMtZXh0cmEvbGliL2NvbXBvbmVudE9yRWxlbWVudC5qcyIsIm5vZGVfbW9kdWxlcy9wcm9wLXR5cGVzLWV4dHJhL2xpYi9kZXByZWNhdGVkLmpzIiwibm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlLmpzIiwibm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMtZXh0cmEvbGliL2lzUmVxdWlyZWRGb3JBMTF5LmpzIiwibm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMtZXh0cmEvbGliL3V0aWxzL2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyLmpzIiwibm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvY2hlY2tQcm9wVHlwZXMuanMiLCJub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5LmpzIiwibm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwibm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanMiLCJub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL0FjY29yZGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL0FsZXJ0LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvQmFkZ2UuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9CcmVhZGNydW1iLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvQnJlYWRjcnVtYkl0ZW0uanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9CdXR0b24uanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9CdXR0b25Hcm91cC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL0J1dHRvblRvb2xiYXIuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9DYXJvdXNlbC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL0Nhcm91c2VsQ2FwdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL0Nhcm91c2VsSXRlbS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL0NoZWNrYm94LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvQ2xlYXJmaXguanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9DbG9zZUJ1dHRvbi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL0NvbC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL0NvbGxhcHNlLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvQ29udHJvbExhYmVsLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvRHJvcGRvd24uanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9Ecm9wZG93bkJ1dHRvbi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL0Ryb3Bkb3duTWVudS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL0Ryb3Bkb3duVG9nZ2xlLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvRmFkZS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL0Zvcm0uanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9Gb3JtQ29udHJvbC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL0Zvcm1Db250cm9sRmVlZGJhY2suanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9Gb3JtQ29udHJvbFN0YXRpYy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL0Zvcm1Hcm91cC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL0dseXBoaWNvbi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL0dyaWQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9IZWxwQmxvY2suanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9JbWFnZS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL0lucHV0R3JvdXAuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9JbnB1dEdyb3VwQWRkb24uanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9JbnB1dEdyb3VwQnV0dG9uLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvSnVtYm90cm9uLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvTGFiZWwuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9MaXN0R3JvdXAuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9MaXN0R3JvdXBJdGVtLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvTWVkaWEuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9NZWRpYUJvZHkuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9NZWRpYUhlYWRpbmcuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9NZWRpYUxlZnQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9NZWRpYUxpc3QuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9NZWRpYUxpc3RJdGVtLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvTWVkaWFSaWdodC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL01lbnVJdGVtLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvTW9kYWwuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9Nb2RhbEJvZHkuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9Nb2RhbERpYWxvZy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL01vZGFsRm9vdGVyLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvTW9kYWxIZWFkZXIuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9Nb2RhbFRpdGxlLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvTmF2LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvTmF2RHJvcGRvd24uanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9OYXZJdGVtLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvTmF2YmFyLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvTmF2YmFyQnJhbmQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9OYXZiYXJDb2xsYXBzZS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL05hdmJhckhlYWRlci5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL05hdmJhclRvZ2dsZS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL092ZXJsYXkuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9PdmVybGF5VHJpZ2dlci5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL1BhZ2VIZWFkZXIuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9QYWdlSXRlbS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL1BhZ2VyLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvUGFnZXJJdGVtLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvUGFnaW5hdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL1BhZ2luYXRpb25JdGVtLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvUGFuZWwuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9QYW5lbEJvZHkuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9QYW5lbENvbGxhcHNlLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvUGFuZWxGb290ZXIuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9QYW5lbEdyb3VwLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvUGFuZWxIZWFkaW5nLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvUGFuZWxUaXRsZS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL1BhbmVsVG9nZ2xlLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvUG9wb3Zlci5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL1Byb2dyZXNzQmFyLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvUmFkaW8uanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9SZXNwb25zaXZlRW1iZWQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9Sb3cuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9TYWZlQW5jaG9yLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvU3BsaXRCdXR0b24uanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9TcGxpdFRvZ2dsZS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL1RhYi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL1RhYkNvbnRhaW5lci5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL1RhYkNvbnRlbnQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9UYWJQYW5lLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvVGFibGUuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9UYWJzLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvVGh1bWJuYWlsLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvVG9nZ2xlQnV0dG9uLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvVG9nZ2xlQnV0dG9uR3JvdXAuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi9Ub29sdGlwLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvV2VsbC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvbGliL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvdXRpbHMvUHJvcFR5cGVzLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvdXRpbHMvU3R5bGVDb25maWcuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi91dGlscy9WYWxpZENvbXBvbmVudENoaWxkcmVuLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvdXRpbHMvYm9vdHN0cmFwVXRpbHMuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi91dGlscy9jYXBpdGFsaXplLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvdXRpbHMvZGVwcmVjYXRpb25XYXJuaW5nLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9saWIvdXRpbHMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2xpYi91dGlscy9zcGxpdENvbXBvbmVudFByb3BzLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL0FSSUFET01Qcm9wZXJ0eUNvbmZpZy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL0F1dG9Gb2N1c1V0aWxzLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvQmVmb3JlSW5wdXRFdmVudFBsdWdpbi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL0NTU1Byb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvQ1NTUHJvcGVydHlPcGVyYXRpb25zLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvQ2FsbGJhY2tRdWV1ZS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL0NoYW5nZUV2ZW50UGx1Z2luLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvRE9NQ2hpbGRyZW5PcGVyYXRpb25zLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvRE9NTGF6eVRyZWUuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9ET01OYW1lc3BhY2VzLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvRE9NUHJvcGVydHkuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9ET01Qcm9wZXJ0eU9wZXJhdGlvbnMuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9EYW5nZXIuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9EZWZhdWx0RXZlbnRQbHVnaW5PcmRlci5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL0VudGVyTGVhdmVFdmVudFBsdWdpbi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL0V2ZW50UGx1Z2luSHViLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvRXZlbnRQbHVnaW5SZWdpc3RyeS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL0V2ZW50UGx1Z2luVXRpbHMuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9FdmVudFByb3BhZ2F0b3JzLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvSFRNTERPTVByb3BlcnR5Q29uZmlnLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvS2V5RXNjYXBlVXRpbHMuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9MaW5rZWRWYWx1ZVV0aWxzLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvUG9vbGVkQ2xhc3MuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdENoaWxkUmVjb25jaWxlci5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1JlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvUmVhY3RET00uanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdERPTUNvbXBvbmVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1JlYWN0RE9NQ29tcG9uZW50RmxhZ3MuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdERPTUNvbXBvbmVudFRyZWUuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdERPTUNvbnRhaW5lckluZm8uanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdERPTUVtcHR5Q29tcG9uZW50LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvUmVhY3RET01GZWF0dXJlRmxhZ3MuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdERPTUlET3BlcmF0aW9ucy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1JlYWN0RE9NSW5wdXQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdERPTUludmFsaWRBUklBSG9vay5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1JlYWN0RE9NTnVsbElucHV0VmFsdWVQcm9wSG9vay5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1JlYWN0RE9NT3B0aW9uLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvUmVhY3RET01TZWxlY3QuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdERPTVNlbGVjdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1JlYWN0RE9NVGV4dENvbXBvbmVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1JlYWN0RE9NVGV4dGFyZWEuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdERPTVRyZWVUcmF2ZXJzYWwuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdERPTVVua25vd25Qcm9wZXJ0eUhvb2suanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdERlYnVnVG9vbC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1JlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdERlZmF1bHRJbmplY3Rpb24uanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdEVsZW1lbnRTeW1ib2wuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdEVtcHR5Q29tcG9uZW50LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvUmVhY3RFcnJvclV0aWxzLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvUmVhY3RFdmVudEVtaXR0ZXJNaXhpbi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1JlYWN0RXZlbnRMaXN0ZW5lci5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1JlYWN0RmVhdHVyZUZsYWdzLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvUmVhY3RIb3N0Q29tcG9uZW50LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvUmVhY3RIb3N0T3BlcmF0aW9uSGlzdG9yeUhvb2suanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdEluamVjdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1JlYWN0SW5wdXRTZWxlY3Rpb24uanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdEluc3RhbmNlTWFwLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvUmVhY3RJbnN0cnVtZW50YXRpb24uanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdEludmFsaWRTZXRTdGF0ZVdhcm5pbmdIb29rLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvUmVhY3RNYXJrdXBDaGVja3N1bS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1JlYWN0TW91bnQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdE11bHRpQ2hpbGQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdE5vZGVUeXBlcy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1JlYWN0T3duZXIuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1JlYWN0UmVjb25jaWxlci5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1JlYWN0UmVmLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1JlYWN0U2VydmVyVXBkYXRlUXVldWUuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9SZWFjdFVwZGF0ZVF1ZXVlLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvUmVhY3RVcGRhdGVzLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvUmVhY3RWZXJzaW9uLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvU1ZHRE9NUHJvcGVydHlDb25maWcuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9TZWxlY3RFdmVudFBsdWdpbi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1NpbXBsZUV2ZW50UGx1Z2luLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvU3ludGhldGljQW5pbWF0aW9uRXZlbnQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9TeW50aGV0aWNDbGlwYm9hcmRFdmVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1N5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9TeW50aGV0aWNEcmFnRXZlbnQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9TeW50aGV0aWNFdmVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1N5bnRoZXRpY0ZvY3VzRXZlbnQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9TeW50aGV0aWNJbnB1dEV2ZW50LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvU3ludGhldGljS2V5Ym9hcmRFdmVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1N5bnRoZXRpY01vdXNlRXZlbnQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9TeW50aGV0aWNUb3VjaEV2ZW50LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvU3ludGhldGljVHJhbnNpdGlvbkV2ZW50LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvU3ludGhldGljVUlFdmVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1N5bnRoZXRpY1doZWVsRXZlbnQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9UcmFuc2FjdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL1ZpZXdwb3J0TWV0cmljcy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL2FjY3VtdWxhdGVJbnRvLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvYWRsZXIzMi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL2NoZWNrUmVhY3RUeXBlU3BlYy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL2NyZWF0ZU1pY3Jvc29mdFVuc2FmZUxvY2FsRnVuY3Rpb24uanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9kYW5nZXJvdXNTdHlsZVZhbHVlLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvZmluZERPTU5vZGUuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9mbGF0dGVuQ2hpbGRyZW4uanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9mb3JFYWNoQWNjdW11bGF0ZWQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9nZXRFdmVudENoYXJDb2RlLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvZ2V0RXZlbnRLZXkuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9nZXRFdmVudE1vZGlmaWVyU3RhdGUuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9nZXRFdmVudFRhcmdldC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL2dldEhvc3RDb21wb25lbnRGcm9tQ29tcG9zaXRlLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvZ2V0SXRlcmF0b3JGbi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL2dldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9nZXRUZXh0Q29udGVudEFjY2Vzc29yLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9pbnB1dFZhbHVlVHJhY2tpbmcuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvaXNFdmVudFN1cHBvcnRlZC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL2lzVGV4dElucHV0RWxlbWVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL3F1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvcmVhY3RQcm9kSW52YXJpYW50LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvcmVuZGVyU3VidHJlZUludG9Db250YWluZXIuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9zZXRJbm5lckhUTUwuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2xpYi9zZXRUZXh0Q29udGVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL3Nob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9saWIvdHJhdmVyc2VBbGxDaGlsZHJlbi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1kb20vbGliL3ZhbGlkYXRlRE9NTmVzdGluZy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWxpZmVjeWNsZXMtY29tcGF0L3JlYWN0LWxpZmVjeWNsZXMtY29tcGF0LmNqcy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1vdmVybGF5cy9saWIvTGVnYWN5UG9ydGFsLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL2xpYi9Nb2RhbC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1vdmVybGF5cy9saWIvTW9kYWxNYW5hZ2VyLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL2xpYi9PdmVybGF5LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL2xpYi9Qb3J0YWwuanMiLCJub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvbGliL1Bvc2l0aW9uLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL2xpYi9SZWZIb2xkZXIuanMiLCJub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvbGliL1Jvb3RDbG9zZVdyYXBwZXIuanMiLCJub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvbGliL3V0aWxzL2FkZEV2ZW50TGlzdGVuZXIuanMiLCJub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvbGliL3V0aWxzL2FkZEZvY3VzTGlzdGVuZXIuanMiLCJub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvbGliL3V0aWxzL2NhbGN1bGF0ZVBvc2l0aW9uLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL2xpYi91dGlscy9nZXRDb250YWluZXIuanMiLCJub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvbGliL3V0aWxzL2lzT3ZlcmZsb3dpbmcuanMiLCJub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvbGliL3V0aWxzL21hbmFnZUFyaWFIaWRkZW4uanMiLCJub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvbGliL3V0aWxzL293bmVyRG9jdW1lbnQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtcHJvcC10eXBlcy9saWIvZWxlbWVudFR5cGUuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtcHJvcC10eXBlcy9saWIvdXRpbHMvY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIuanMiLCJub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9UcmFuc2l0aW9uLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvdXRpbHMvUHJvcFR5cGVzLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9LZXlFc2NhcGVVdGlscy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUG9vbGVkQ2xhc3MuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEJhc2VDbGFzc2VzLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdENoaWxkcmVuLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdENvbXBvbmVudFRyZWVIb29rLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEN1cnJlbnRPd25lci5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01GYWN0b3JpZXMuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RWxlbWVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RFbGVtZW50U3ltYm9sLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEVsZW1lbnRWYWxpZGF0b3IuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Tm9vcFVwZGF0ZVF1ZXVlLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RQcm9wVHlwZXMuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFZlcnNpb24uanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL2NhbkRlZmluZVByb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9jaGVja1JlYWN0VHlwZVNwZWMuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL2NyZWF0ZUNsYXNzLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9nZXRJdGVyYXRvckZuLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9nZXROZXh0RGVidWdJRC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvbG93UHJpb3JpdHlXYXJuaW5nLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9vbmx5Q2hpbGQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL3JlYWN0UHJvZEludmFyaWFudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvdHJhdmVyc2VBbGxDaGlsZHJlbi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9yZWFjdC5qcyIsIm5vZGVfbW9kdWxlcy91bmNvbnRyb2xsYWJsZS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy91bmNvbnRyb2xsYWJsZS91dGlscy5qcyIsIm5vZGVfbW9kdWxlcy93YXJuaW5nL2Jyb3dzZXIuanMiLCJzcmMvY2xpZW50L2pzL2NvbXBvbmVudHMvYWxlcnRzLmpzIiwic3JjL2NsaWVudC9qcy9jb21wb25lbnRzL2FwcC5qcyIsInNyYy9jbGllbnQvanMvY29tcG9uZW50cy9idXR0b25zLmpzIiwic3JjL2NsaWVudC9qcy9jb21wb25lbnRzL2NhcmRzLmpzIiwic3JjL2NsaWVudC9qcy9jb21wb25lbnRzL2Ryb3Bkb3ducy5qcyIsInNyYy9jbGllbnQvanMvY29tcG9uZW50cy9mb3Jtcy5qcyIsInNyYy9jbGllbnQvanMvY29tcG9uZW50cy9ncmlkLmpzIiwic3JjL2NsaWVudC9qcy9jb21wb25lbnRzL2xhYmVscy5qcyIsInNyYy9jbGllbnQvanMvY29tcG9uZW50cy9tb2RhbHMuanMiLCJzcmMvY2xpZW50L2pzL2NvbXBvbmVudHMvbmF2YmFyLXNhbXBsZS5qcyIsInNyYy9jbGllbnQvanMvY29tcG9uZW50cy9uYXZzLmpzIiwic3JjL2NsaWVudC9qcy9jb21wb25lbnRzL3NhbXBsZS1tb2RhbC5qcyIsInNyYy9jbGllbnQvanMvY29tcG9uZW50cy9zYW5kYm94LmpzIiwic3JjL2NsaWVudC9qcy9jb21wb25lbnRzL3Rvb2x0aXBzLmpzIiwic3JjL2NsaWVudC9qcy9jb21wb25lbnRzL3R5cGUuanMiLCJzcmMvY2xpZW50L2pzL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBO0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7O0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7OztBQ0ZBO0FBQ0E7QUFDQTs7O29GQ0F3QixPQUZ4QixJQUFBLE9BQUEsUUFBQSx3SEFFZSxTQUFTLFNBQ3RCLE9BQ0UsUUFBQSxRQUFBLGNBQUEsTUFBQSxLQUNFLFFBQUEsUUFBQSxjQUFBLEtBQUEsS0FBQSxVQUNBLFFBQUEsUUFBQSxjQUFBLE1BQUEsQ0FBSyxVQUFVLHNCQUFzQixLQUFLLFNBQ3hDLFFBQUEsUUFBQSxjQUFBLFNBQUEsQ0FBUSxLQUFLLFNBQVMsVUFBVSxRQUFRLGVBQWEsUUFBUSxhQUFXLFNBQ3RFLFFBQUEsUUFBQSxjQUFBLE9BQUEsQ0FBTSxjQUFZLFFBQWxCLE1BRkosYUFLRyxJQUNELFFBQUEsUUFBQSxjQUFBLElBQUEsQ0FBRyxLQUFLLGVBQWUsVUFBVSxjQUFqQyxTQUVGLFFBQUEsUUFBQSxjQUFBLE1BQUEsQ0FBSyxVQUFVLG1CQUFtQixLQUFLLFNBQ3JDLFFBQUEsUUFBQSxjQUFBLFNBQUEsQ0FBUSxLQUFLLFNBQVMsVUFBVSxRQUFRLGVBQWEsUUFBUSxhQUFXLFNBQ3RFLFFBQUEsUUFBQSxjQUFBLE9BQUEsQ0FBTSxjQUFZLFFBQWxCLE1BRkosWUFLRyxJQUNELFFBQUEsUUFBQSxjQUFBLElBQUEsQ0FBRyxLQUFLLGVBQWUsVUFBVSxjQUFqQyxTQUVGLFFBQUEsUUFBQSxjQUFBLE1BQUEsQ0FBSyxVQUFVLHNCQUFzQixLQUFLLFNBQ3hDLFFBQUEsUUFBQSxjQUFBLFNBQUEsQ0FBUSxLQUFLLFNBQVMsVUFBVSxRQUFRLGVBQWEsUUFBUSxhQUFXLFNBQ3RFLFFBQUEsUUFBQSxjQUFBLE9BQUEsQ0FBTSxjQUFZLFFBQWxCLE1BRkosV0FLRyxJQUNELFFBQUEsUUFBQSxjQUFBLElBQUEsQ0FBRyxLQUFLLGVBQWUsVUFBVSxjQUFqQyxTQUVGLFFBQUEsUUFBQSxjQUFBLE1BQUEsQ0FBSyxVQUFVLHFCQUFxQixLQUFLLFNBQ3ZDLFFBQUEsUUFBQSxjQUFBLFNBQUEsQ0FBUSxLQUFLLFNBQVMsVUFBVSxRQUFRLGVBQWEsUUFBUSxhQUFXLFNBQ3RFLFFBQUEsUUFBQSxjQUFBLE9BQUEsQ0FBTSxjQUFZLFFBQWxCLE1BRkosV0FLRyxJQUNELFFBQUEsUUFBQSxjQUFBLElBQUEsQ0FBRyxLQUFLLGVBQWUsVUFBVSxjQUFqQzs7O3FYQ3BDUixPQUFBLFFBQUEsZ0RBQ0EsU0FBQSxRQUFBLHdEQUNBLGNBQUEsUUFBQSwrdkJBRXFCLGdCQUNuQixTQUFBLE1BQWUsZ0JBQUEsS0FBQSxLQUFBLElBQUEsRUFBQSwyQkFBQSxNQUFBLElBQUEsV0FBQSxPQUFBLGVBQUEsTUFBQSxLQUFBLE9BQUEsT0FFYixFQUFLLE1BQVEsQ0FBQyxLQUFNLElBRlAsdUJBRGdCLE9BQUEseUZBTzdCLE9BQU8saUJBQWlCLGFBQWMsS0FBSyxhQUFhLEtBQUssT0FBTyxHQUNwRSxLQUFLLG1FQUlMLElBQUksRUFBWSxTQUFTLEtBQ3JCLEVBQVUsT0FBUyxJQUFHLEVBQVksRUFBVSxVQUFVLElBQzFELEtBQUssU0FBUyxDQUFDLFVBQUEsNENBR1AsSUFDRCxFQUFhLEtBQUssTUFBbEIsVUFnQlAsT0FDRSxRQUFBLFFBQUEsY0FBQSxNQUFBLEtBQ0UsUUFBQSxRQUFBLGNBQUMsZUFBQSxRQUFELE1BQ0EsUUFBQSxRQUFBLGNBQUEsTUFBQSxDQUFLLFVBQVUsWUFBWSxHQUFHLFFBQzVCLFFBQUEsUUFBQSxjQUFBLE1BQUEsQ0FBSyxVQUFVLE9BQ2IsUUFBQSxRQUFBLGNBQUEsTUFBQSxDQUFLLFVBQVUsWUFDYixRQUFBLFFBQUEsY0FBQSxLQUFBLENBQUksVUFBVSw2QkFDWixRQUFBLFFBQUEsY0FBQSxLQUFBLENBQUksVUFBMEIsS0FBZixFQUFvQixTQUFXLElBQzVDLFFBQUEsUUFBQSxjQUFBLElBQUEsQ0FBRyxLQUFLLEtBQVIsU0F0QkssQ0FDakIsU0FDQSxVQUNBLFFBQ0EsWUFDQSxRQUNBLE9BQ0EsU0FDQSxTQUNBLE9BQ0EsV0FDQSxRQWN1QixJQUFJLFNBQUEsR0FDYixPQUNFLFFBQUEsUUFBQSxjQUFBLEtBQUEsQ0FBSSxJQUFLLEVBQUcsVUFBVyxJQUFNLEVBQVksU0FBVyxJQUNsRCxRQUFBLFFBQUEsY0FBQSxJQUFBLENBQUcsS0FBTSxJQUFJLEdBQUksV0FBVyxTQU94QyxRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssVUFBVSxhQUVWLEdBQ0MsUUFBQSxRQUFBLGNBQUEsTUFBQSxLQUNFLFFBQUEsUUFBQSxjQUFBLEtBQUEsS0FDRSxRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssSUFBSSxrQ0FBa0MsSUFBSSxPQUFPLFVBQVUsVUFBVSxNQUFNLE9BRGxGLDhDQUlBLFFBQUEsUUFBQSxjQUFBLElBQUEsS0FBQSxLQUNFLFFBQUEsUUFBQSxjQUFBLEtBQUEsTUFERixnREFFNkMsUUFBQSxRQUFBLGNBQUEsS0FBQSxNQUY3Qyw0QkFHeUIsUUFBQSxRQUFBLGNBQUEsS0FBQSxNQUh6QixrQkFJZSxRQUFBLFFBQUEsY0FBQSxLQUFBLE1BSmYsNEJBS3lCLFFBQUEsUUFBQSxjQUFBLEtBQUEsTUFMekIseUJBTXNCLFFBQUEsUUFBQSxjQUFBLEtBQUEsT0FFdEIsUUFBQSxRQUFBLGNBQUEsS0FBQSxNQWJGLFFBY1EsT0FBTyxTQUFTLEtBQUssUUFBQSxRQUFBLGNBQUEsS0FBQSxNQUMzQixRQUFBLFFBQUEsY0FBQSxLQUFBLE1BZkYsNkJBbUJKLFFBQUEsUUFBQSxjQUFDLFVBQUEsUUFBRCxDQUFTLFVBQVcsbUJBU2xDLFNBQVMsV0FBVyxHQUNsQixPQUFPLEVBQUksT0FBTyxHQUFHLGNBQWdCLEVBQUksTUFBTSxtQkF2RjVCOzs7b0ZDRkcsUUFGeEIsSUFBQSxPQUFBLFFBQUEsd0hBRWUsU0FBUyxVQUN0QixPQUNFLFFBQUEsUUFBQSxjQUFBLE1BQUEsS0FDRSxRQUFBLFFBQUEsY0FBQSxLQUFBLEtBQUEsV0FFQSxRQUFBLFFBQUEsY0FBQSxLQUFBLEtBQUEsV0FDQSxRQUFBLFFBQUEsY0FBQSxTQUFBLENBQVEsVUFBVSxtQkFBbEIsV0FKRixJQUtFLFFBQUEsUUFBQSxjQUFBLFNBQUEsQ0FBUSxVQUFVLG1CQUFsQixXQUxGLElBTUUsUUFBQSxRQUFBLGNBQUEsU0FBQSxDQUFRLFVBQVUsa0JBQWxCLFVBTkYsSUFPRSxRQUFBLFFBQUEsY0FBQSxTQUFBLENBQVEsVUFBVSxnQkFBbEIsUUFFQSxRQUFBLFFBQUEsY0FBQSxLQUFBLE1BQ0EsUUFBQSxRQUFBLGNBQUEsS0FBQSxNQUNBLFFBQUEsUUFBQSxjQUFBLEtBQUEsS0FBQSxlQUNBLFFBQUEsUUFBQSxjQUFBLElBQUEsQ0FBRyxLQUFLLGVBQWUsVUFBVSxtQkFBakMsV0FaRixJQWFFLFFBQUEsUUFBQSxjQUFBLElBQUEsQ0FBRyxLQUFLLGVBQWUsVUFBVSxtQkFBakMsV0FiRixJQWNFLFFBQUEsUUFBQSxjQUFBLElBQUEsQ0FBRyxLQUFLLGVBQWUsVUFBVSxrQkFBakMsVUFkRixJQWVFLFFBQUEsUUFBQSxjQUFBLElBQUEsQ0FBRyxLQUFLLGVBQWUsVUFBVSxnQkFBakMsUUFFQSxRQUFBLFFBQUEsY0FBQSxLQUFBLE1BQ0EsUUFBQSxRQUFBLGNBQUEsS0FBQSxNQUNBLFFBQUEsUUFBQSxjQUFBLEtBQUEsS0FBQSxTQUNBLFFBQUEsUUFBQSxjQUFBLElBQUEsS0FDRSxRQUFBLFFBQUEsY0FBQSxTQUFBLENBQVEsVUFBVSwwQkFBbEIsZ0JBREYsSUFFRSxRQUFBLFFBQUEsY0FBQSxTQUFBLENBQVEsVUFBVSwwQkFBbEIsaUJBRUYsUUFBQSxRQUFBLGNBQUEsSUFBQSxLQUNFLFFBQUEsUUFBQSxjQUFBLFNBQUEsQ0FBUSxVQUFVLG1CQUFsQixrQkFERixJQUVFLFFBQUEsUUFBQSxjQUFBLFNBQUEsQ0FBUSxVQUFVLG1CQUFsQixtQkFFRixRQUFBLFFBQUEsY0FBQSxJQUFBLEtBQ0UsUUFBQSxRQUFBLGNBQUEsU0FBQSxDQUFRLFVBQVUsMEJBQWxCLGdCQURGLElBRUUsUUFBQSxRQUFBLGNBQUEsU0FBQSxDQUFRLFVBQVUsMEJBQWxCLGlCQUVGLFFBQUEsUUFBQSxjQUFBLElBQUEsS0FDRSxRQUFBLFFBQUEsY0FBQSxTQUFBLENBQVEsVUFBVSwwQkFBbEIsc0JBREYsSUFFRSxRQUFBLFFBQUEsY0FBQSxTQUFBLENBQVEsVUFBVSwwQkFBbEIsdUJBR0YsUUFBQSxRQUFBLGNBQUEsS0FBQSxNQUNBLFFBQUEsUUFBQSxjQUFBLEtBQUEsS0FBQSxzQkFDQSxRQUFBLFFBQUEsY0FBQSxJQUFBLENBQUcsS0FBSyxlQUFlLFVBQVUsb0NBQWpDLHNCQXZDRixJQXdDRSxRQUFBLFFBQUEsY0FBQSxJQUFBLENBQUcsS0FBSyxlQUFlLFVBQVUsb0NBQWpDLHNCQXhDRixJQTBDRSxRQUFBLFFBQUEsY0FBQSxLQUFBLE1BQ0EsUUFBQSxRQUFBLGNBQUEsS0FBQSxNQUNBLFFBQUEsUUFBQSxjQUFBLEtBQUEsS0FBQSxrQkFDQSxRQUFBLFFBQUEsY0FBQSxTQUFBLENBQVEsVUFBVSxrQkFBa0IsVUFBQSxHQUFwQyxXQTdDRixJQWlERSxRQUFBLFFBQUEsY0FBQSxTQUFBLENBQVEsVUFBVSxrQkFBa0IsVUFBQSxHQUFwQyxXQWpERixJQXFERSxRQUFBLFFBQUEsY0FBQSxTQUFBLENBQVEsVUFBVSxpQkFBaUIsVUFBQSxHQUFuQyxVQUlBLFFBQUEsUUFBQSxjQUFBLEtBQUEsTUFDQSxRQUFBLFFBQUEsY0FBQSxLQUFBLE1BQ0EsUUFBQSxRQUFBLGNBQUEsS0FBQSxLQUFBLGlCQUNBLFFBQUEsUUFBQSxjQUFBLE1BQUEsQ0FBSyxVQUFVLFlBQVksS0FBSyxRQUFRLGFBQVcsT0FDakQsUUFBQSxRQUFBLGNBQUEsU0FBQSxDQUFRLEtBQUssU0FBUyxVQUFVLG1CQUFoQyxRQUNBLFFBQUEsUUFBQSxjQUFBLFNBQUEsQ0FBUSxLQUFLLFNBQVMsVUFBVSxtQkFBaEMsVUFDQSxRQUFBLFFBQUEsY0FBQSxTQUFBLENBQVEsS0FBSyxTQUFTLFVBQVUsbUJBQWhDLFVBR0YsUUFBQSxRQUFBLGNBQUEsS0FBQSxLQUFBLFlBQ0EsUUFBQSxRQUFBLGNBQUEsTUFBQSxDQUFLLFVBQVUscUJBQXFCLEtBQUssUUFBUSxhQUFXLE9BQzFELFFBQUEsUUFBQSxjQUFBLFNBQUEsQ0FBUSxLQUFLLFNBQVMsVUFBVSxtQkFBaEMsT0FDQSxRQUFBLFFBQUEsY0FBQSxTQUFBLENBQVEsS0FBSyxTQUFTLFVBQVUsbUJBQWhDLE9BQ0EsUUFBQSxRQUFBLGNBQUEsU0FBQSxDQUFRLEtBQUssU0FBUyxVQUFVLG1CQUFoQyxTQUNBLFFBQUEsUUFBQSxjQUFBLE1BQUEsQ0FBSyxVQUFVLFlBQVksS0FBSyxRQUFRLGFBQVcsT0FDakQsUUFBQSxRQUFBLGNBQUEsU0FBQSxDQUFRLEtBQUssU0FBUyxVQUFVLGtDQUFrQyxjQUFZLFdBQVcsZ0JBQWMsT0FBTyxnQkFBYyxTQUE1SCxXQUNXLElBQ1QsUUFBQSxRQUFBLGNBQUEsT0FBQSxDQUFNLFVBQVUsV0FFbEIsUUFBQSxRQUFBLGNBQUEsS0FBQSxDQUFJLFVBQVUsaUJBQ1osUUFBQSxRQUFBLGNBQUEsS0FBQSxLQUFJLFFBQUEsUUFBQSxjQUFBLElBQUEsQ0FBRyxLQUFLLEtBQVIsa0JBQ0osUUFBQSxRQUFBLGNBQUEsS0FBQSxLQUFJLFFBQUEsUUFBQSxjQUFBLElBQUEsQ0FBRyxLQUFLLEtBQVIsb0JBR1IsUUFBQSxRQUFBLGNBQUEsU0FBQSxDQUFRLEtBQUssU0FBUyxVQUFVLG1CQUFoQyxTQUdGLFFBQUEsUUFBQSxjQUFBLEtBQUEsS0FBQSxXQUNBLFFBQUEsUUFBQSxjQUFBLE1BQUEsQ0FBSyxVQUFVLGNBQWMsS0FBSyxVQUFVLGFBQVcsT0FDckQsUUFBQSxRQUFBLGNBQUEsTUFBQSxDQUFLLFVBQVUsWUFBWSxLQUFLLFFBQVEsYUFBVyxPQUNqRCxRQUFBLFFBQUEsY0FBQSxTQUFBLENBQVEsS0FBSyxTQUFTLFVBQVUsbUJBQWhDLEtBQ0EsUUFBQSxRQUFBLGNBQUEsU0FBQSxDQUFRLEtBQUssU0FBUyxVQUFVLG1CQUFoQyxLQUNBLFFBQUEsUUFBQSxjQUFBLFNBQUEsQ0FBUSxLQUFLLFNBQVMsVUFBVSxtQkFBaEMsTUFFRixRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssVUFBVSxZQUFZLEtBQUssUUFBUSxhQUFXLE9BQ2pELFFBQUEsUUFBQSxjQUFBLE1BQUEsQ0FBSyxVQUFVLFlBQVksS0FBSyxTQUM5QixRQUFBLFFBQUEsY0FBQSxTQUFBLENBQVEsS0FBSyxTQUFTLFVBQVUsa0NBQWtDLGNBQVksV0FBVyxnQkFBYyxPQUFPLGdCQUFjLFNBQTVILFdBQ1csSUFDVCxRQUFBLFFBQUEsY0FBQSxPQUFBLENBQU0sVUFBVSxXQUVsQixRQUFBLFFBQUEsY0FBQSxLQUFBLENBQUksVUFBVSxpQkFDWixRQUFBLFFBQUEsY0FBQSxLQUFBLEtBQUksUUFBQSxRQUFBLGNBQUEsSUFBQSxDQUFHLEtBQUssS0FBUixrQkFDSixRQUFBLFFBQUEsY0FBQSxLQUFBLEtBQUksUUFBQSxRQUFBLGNBQUEsSUFBQSxDQUFHLEtBQUssS0FBUixvQkFHUixRQUFBLFFBQUEsY0FBQSxTQUFBLENBQVEsS0FBSyxTQUFTLFVBQVUsbUJBQWhDLEtBQ0EsUUFBQSxRQUFBLGNBQUEsU0FBQSxDQUFRLEtBQUssU0FBUyxVQUFVLG1CQUFoQyxLQUNBLFFBQUEsUUFBQSxjQUFBLFNBQUEsQ0FBUSxLQUFLLFNBQVMsVUFBVSxtQkFBaEMsT0FJSixRQUFBLFFBQUEsY0FBQSxLQUFBLEtBQUEsY0FDQSxRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssVUFBVSx5QkFBeUIsS0FBSyxRQUFRLGFBQVcsT0FDOUQsUUFBQSxRQUFBLGNBQUEsU0FBQSxDQUFRLEtBQUssU0FBUyxVQUFVLG1CQUFoQyxRQUNBLFFBQUEsUUFBQSxjQUFBLFNBQUEsQ0FBUSxLQUFLLFNBQVMsVUFBVSxtQkFBaEMsVUFDQSxRQUFBLFFBQUEsY0FBQSxTQUFBLENBQVEsS0FBSyxTQUFTLFVBQVUsbUJBQWhDLFVBR0YsUUFBQSxRQUFBLGNBQUEsS0FBQSxLQUFBLGFBQ0EsUUFBQSxRQUFBLGNBQUEsTUFBQSxDQUFLLFVBQVUsZ0NBQWdDLEtBQUssUUFBUSxhQUFXLE9BQ3JFLFFBQUEsUUFBQSxjQUFBLFNBQUEsQ0FBUSxLQUFLLFNBQVMsVUFBVSxtQkFBaEMsUUFDQSxRQUFBLFFBQUEsY0FBQSxTQUFBLENBQVEsS0FBSyxTQUFTLFVBQVUsbUJBQWhDLFVBQ0EsUUFBQSxRQUFBLGNBQUEsU0FBQSxDQUFRLEtBQUssU0FBUyxVQUFVLG1CQUFoQyxTQUNBLFFBQUEsUUFBQSxjQUFBLE1BQUEsQ0FBSyxVQUFVLFlBQVksS0FBSyxTQUM5QixRQUFBLFFBQUEsY0FBQSxTQUFBLENBQVEsS0FBSyxTQUFTLFVBQVUsa0NBQWtDLGNBQVksV0FBVyxnQkFBYyxPQUFPLGdCQUFjLFNBQTVILFdBQ1csSUFDVCxRQUFBLFFBQUEsY0FBQSxPQUFBLENBQU0sVUFBVSxXQUVsQixRQUFBLFFBQUEsY0FBQSxLQUFBLENBQUksVUFBVSxpQkFDWixRQUFBLFFBQUEsY0FBQSxLQUFBLEtBQUksUUFBQSxRQUFBLGNBQUEsSUFBQSxDQUFHLEtBQUssS0FBUixrQkFDSixRQUFBLFFBQUEsY0FBQSxLQUFBLEtBQUksUUFBQSxRQUFBLGNBQUEsSUFBQSxDQUFHLEtBQUssS0FBUjs7O29GQ2pJUSxNQUZ4QixJQUFBLE9BQUEsUUFBQSx3SEFFZSxTQUFTLFFBQ3RCLE9BQ0UsUUFBQSxRQUFBLGNBQUEsTUFBQSxLQUNFLFFBQUEsUUFBQSxjQUFBLEtBQUEsS0FBQSxTQUNBLFFBQUEsUUFBQSxjQUFBLElBQUEsQ0FBRyxLQUFLLGVBQWUsVUFBVSxRQUFqQzs7O29GQ0prQixVQUZ4QixJQUFBLE9BQUEsUUFBQSx3SEFFZSxTQUFTLFlBQ3RCLE9BQ0UsUUFBQSxRQUFBLGNBQUEsTUFBQSxLQUNFLFFBQUEsUUFBQSxjQUFBLEtBQUEsS0FBQSxhQUNBLFFBQUEsUUFBQSxjQUFBLE1BQUEsQ0FBSyxVQUFVLFlBQ2IsUUFBQSxRQUFBLGNBQUEsU0FBQSxDQUFRLFVBQVUsa0NBQWtDLEtBQUssU0FBUyxHQUFHLGdCQUNuRSxjQUFZLFdBQVcsZ0JBQWMsT0FBTyxnQkFBYyxTQUQ1RCxZQUVXLFFBQUEsUUFBQSxjQUFBLE9BQUEsQ0FBTSxVQUFVLFdBRTNCLFFBQUEsUUFBQSxjQUFBLEtBQUEsQ0FBSSxVQUFVLGdCQUFnQixrQkFBZ0IsaUJBQzVDLFFBQUEsUUFBQSxjQUFBLEtBQUEsS0FBSSxRQUFBLFFBQUEsY0FBQSxJQUFBLENBQUcsS0FBSyxnQkFBUixXQUNKLFFBQUEsUUFBQSxjQUFBLEtBQUEsS0FBSSxRQUFBLFFBQUEsY0FBQSxJQUFBLENBQUcsS0FBSyxnQkFBUixtQkFDSixRQUFBLFFBQUEsY0FBQSxLQUFBLEtBQUksUUFBQSxRQUFBLGNBQUEsSUFBQSxDQUFHLEtBQUssZ0JBQVIsd0JBQ0osUUFBQSxRQUFBLGNBQUEsS0FBQSxDQUFJLEtBQUssWUFBWSxVQUFVLFlBQy9CLFFBQUEsUUFBQSxjQUFBLEtBQUEsQ0FBSSxVQUFVLFVBQVMsUUFBQSxRQUFBLGNBQUEsSUFBQSxDQUFHLEtBQUssZ0JBQVIsZ0JBQ3ZCLFFBQUEsUUFBQSxjQUFBLEtBQUEsQ0FBSSxVQUFVLFlBQVcsUUFBQSxRQUFBLGNBQUEsSUFBQSxDQUFHLEtBQUssZ0JBQVIsb0JBRzdCLFFBQUEsUUFBQSxjQUFBLEtBQUEsTUFDQSxRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssVUFBVSxZQUNiLFFBQUEsUUFBQSxjQUFBLFNBQUEsQ0FBUSxVQUFVLCtCQUErQixLQUFLLFNBQVMsR0FBRyxnQkFDaEUsU0FBUyxJQUNULGNBQVksV0FBVyxnQkFBYyxPQUFPLGdCQUFjLFNBRjVELFlBR1csUUFBQSxRQUFBLGNBQUEsT0FBQSxDQUFNLFVBQVUsV0FFM0IsUUFBQSxRQUFBLGNBQUEsS0FBQSxDQUFJLFVBQVUsZ0JBQWdCLGtCQUFnQixpQkFDNUMsUUFBQSxRQUFBLGNBQUEsS0FBQSxLQUFJLFFBQUEsUUFBQSxjQUFBLElBQUEsQ0FBRyxLQUFLLGdCQUFSLFdBQ0osUUFBQSxRQUFBLGNBQUEsS0FBQSxLQUFJLFFBQUEsUUFBQSxjQUFBLElBQUEsQ0FBRyxLQUFLLGdCQUFSLG1CQUNKLFFBQUEsUUFBQSxjQUFBLEtBQUEsS0FBSSxRQUFBLFFBQUEsY0FBQSxJQUFBLENBQUcsS0FBSyxnQkFBUix3QkFDSixRQUFBLFFBQUEsY0FBQSxLQUFBLENBQUksS0FBSyxZQUFZLFVBQVUsWUFDL0IsUUFBQSxRQUFBLGNBQUEsS0FBQSxDQUFJLFVBQVUsVUFBUyxRQUFBLFFBQUEsY0FBQSxJQUFBLENBQUcsS0FBSyxnQkFBUixnQkFDdkIsUUFBQSxRQUFBLGNBQUEsS0FBQSxDQUFJLFVBQVUsWUFBVyxRQUFBLFFBQUEsY0FBQSxJQUFBLENBQUcsS0FBSyxnQkFBUixvQkFJN0IsUUFBQSxRQUFBLGNBQUEsS0FBQSxNQUNBLFFBQUEsUUFBQSxjQUFBLEtBQUEsTUFFQSxRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssVUFBVSxhQUNiLFFBQUEsUUFBQSxjQUFBLFNBQUEsQ0FBUSxLQUFLLFNBQVMsVUFBVSxrQkFBaEMsVUFDQSxRQUFBLFFBQUEsY0FBQSxTQUFBLENBQVEsS0FBSyxTQUFTLFVBQVUsaUNBQWlDLGNBQVksV0FBVyxnQkFBYyxPQUFPLGdCQUFjLFNBQ3pILFFBQUEsUUFBQSxjQUFBLE9BQUEsQ0FBTSxVQUFVLFVBQ2hCLFFBQUEsUUFBQSxjQUFBLE9BQUEsQ0FBTSxVQUFVLFdBQWhCLG9CQUVGLFFBQUEsUUFBQSxjQUFBLEtBQUEsQ0FBSSxVQUFVLGlCQUNaLFFBQUEsUUFBQSxjQUFBLEtBQUEsS0FBSSxRQUFBLFFBQUEsY0FBQSxJQUFBLENBQUcsS0FBSyxLQUFSLFdBQ0osUUFBQSxRQUFBLGNBQUEsS0FBQSxLQUFJLFFBQUEsUUFBQSxjQUFBLElBQUEsQ0FBRyxLQUFLLEtBQVIsbUJBQ0osUUFBQSxRQUFBLGNBQUEsS0FBQSxLQUFJLFFBQUEsUUFBQSxjQUFBLElBQUEsQ0FBRyxLQUFLLEtBQVIsd0JBQ0osUUFBQSxRQUFBLGNBQUEsS0FBQSxDQUFJLEtBQUssWUFBWSxVQUFVLFlBQy9CLFFBQUEsUUFBQSxjQUFBLEtBQUEsS0FBSSxRQUFBLFFBQUEsY0FBQSxJQUFBLENBQUcsS0FBSyxLQUFSLHFCQUdQLElBQ0QsUUFBQSxRQUFBLGNBQUEsTUFBQSxDQUFLLFVBQVUsb0JBQ2IsUUFBQSxRQUFBLGNBQUEsU0FBQSxDQUFRLEtBQUssU0FBUyxVQUFVLG1CQUFoQyxVQUNBLFFBQUEsUUFBQSxjQUFBLFNBQUEsQ0FBUSxLQUFLLFNBQVMsVUFBVSxrQ0FBa0MsY0FBWSxXQUFXLGdCQUFjLE9BQU8sZ0JBQWMsU0FDMUgsUUFBQSxRQUFBLGNBQUEsT0FBQSxDQUFNLFVBQVUsVUFDaEIsUUFBQSxRQUFBLGNBQUEsT0FBQSxDQUFNLFVBQVUsV0FBaEIsb0JBRUYsUUFBQSxRQUFBLGNBQUEsS0FBQSxDQUFJLFVBQVUsaUJBQ1osUUFBQSxRQUFBLGNBQUEsS0FBQSxLQUFJLFFBQUEsUUFBQSxjQUFBLElBQUEsQ0FBRyxLQUFLLEtBQVIsV0FDSixRQUFBLFFBQUEsY0FBQSxLQUFBLEtBQUksUUFBQSxRQUFBLGNBQUEsSUFBQSxDQUFHLEtBQUssS0FBUjs7O29GQzdEVSxNQUZ4QixJQUFBLE9BQUEsUUFBQSx3SEFFZSxTQUFTLFFBQ3RCLE9BQ0UsUUFBQSxRQUFBLGNBQUEsTUFBQSxLQUNFLFFBQUEsUUFBQSxjQUFBLEtBQUEsS0FBQSxTQUNBLFFBQUEsUUFBQSxjQUFBLE9BQUEsS0FDRSxRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssVUFBVSxjQUNiLFFBQUEsUUFBQSxjQUFBLE1BQUEsQ0FBSyxVQUFVLGVBQ2IsUUFBQSxRQUFBLGNBQUEsTUFBQSxDQUFLLFVBQVUscUJBQWYsd0JBQ0EsUUFBQSxRQUFBLGNBQUEsUUFBQSxDQUFPLEtBQUssT0FBTyxVQUFVLG1CQUlqQyxRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssVUFBVSx3QkFDYixRQUFBLFFBQUEsY0FBQSxRQUFBLENBQU8sVUFBVSxnQkFBZ0IsUUFBUSxzQkFBekMsYUFDQSxRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssVUFBVSxlQUNiLFFBQUEsUUFBQSxjQUFBLE1BQUEsQ0FBSyxVQUFVLHFCQUFmLHdCQUNBLFFBQUEsUUFBQSxjQUFBLFFBQUEsQ0FBTyxLQUFLLE9BQU8sVUFBVSxtQkFJakMsUUFBQSxRQUFBLGNBQUEsTUFBQSxDQUFLLFVBQVUsY0FDYixRQUFBLFFBQUEsY0FBQSxRQUFBLENBQU8sVUFBVSxnQkFBZ0IsUUFBUSxzQkFBekMsaUJBQ0EsUUFBQSxRQUFBLGNBQUEsUUFBQSxDQUFPLEtBQUssUUFBUSxVQUFVLGVBQWUsR0FBRyxxQkFBcUIsWUFBWSxXQUVuRixRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssVUFBVSxjQUNiLFFBQUEsUUFBQSxjQUFBLFFBQUEsQ0FBTyxVQUFVLGdCQUFnQixRQUFRLHlCQUF6QyxZQUNBLFFBQUEsUUFBQSxjQUFBLFFBQUEsQ0FBTyxLQUFLLFdBQVcsVUFBVSxlQUFlLEdBQUcsd0JBQXdCLFlBQVksYUFDdkYsUUFBQSxRQUFBLGNBQUEsT0FBQSxDQUFNLEdBQUcsWUFBWSxVQUFVLGNBQS9CLHFGQUVGLFFBQUEsUUFBQSxjQUFBLE1BQUEsQ0FBSyxVQUFVLGNBQ2IsUUFBQSxRQUFBLGNBQUEsUUFBQSxDQUFPLFVBQVUsZ0JBQWdCLFFBQVEsc0JBQXpDLFVBQ0EsUUFBQSxRQUFBLGNBQUEsU0FBQSxDQUFRLFVBQVUsZ0JBQ2hCLFFBQUEsUUFBQSxjQUFBLFNBQUEsS0FBQSxLQUNBLFFBQUEsUUFBQSxjQUFBLFNBQUEsS0FBQSxLQUNBLFFBQUEsUUFBQSxjQUFBLFNBQUEsS0FBQSxLQUNBLFFBQUEsUUFBQSxjQUFBLFNBQUEsS0FBQSxLQUNBLFFBQUEsUUFBQSxjQUFBLFNBQUEsS0FBQSxPQUdKLFFBQUEsUUFBQSxjQUFBLE1BQUEsQ0FBSyxVQUFVLGNBQ2IsUUFBQSxRQUFBLGNBQUEsUUFBQSxDQUFPLFVBQVUsZ0JBQWdCLFFBQVEscUJBQXpDLGtCQUNBLFFBQUEsUUFBQSxjQUFBLFFBQUEsQ0FBTyxLQUFLLE9BQU8sR0FBRyxvQkFBb0IsVUFBVSxlQUFlLFlBQVksaUJBQWlCLFVBQUEsS0FFbEcsUUFBQSxRQUFBLGNBQUEsTUFBQSxDQUFLLFVBQVUsY0FDYixRQUFBLFFBQUEsY0FBQSxRQUFBLENBQU8sVUFBVSxnQkFBZ0IsUUFBUSxZQUF6QyxhQUNBLFFBQUEsUUFBQSxjQUFBLFdBQUEsQ0FBVSxVQUFVLGVBQWUsR0FBRyxjQUV4QyxRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssVUFBVSxZQUNiLFFBQUEsUUFBQSxjQUFBLFFBQUEsS0FDRSxRQUFBLFFBQUEsY0FBQSxRQUFBLENBQU8sS0FBSyxhQURkLGtCQUlGLFFBQUEsUUFBQSxjQUFBLE1BQUEsQ0FBSyxVQUFVLFNBQ2IsUUFBQSxRQUFBLGNBQUEsUUFBQSxLQUNFLFFBQUEsUUFBQSxjQUFBLFFBQUEsQ0FBTyxLQUFLLFFBQVEsS0FBSyxnQkFBZ0IsR0FBRyxpQkFBaUIsTUFBTSxZQURyRSxrRUFLRixRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssVUFBVSxTQUNiLFFBQUEsUUFBQSxjQUFBLFFBQUEsS0FDRSxRQUFBLFFBQUEsY0FBQSxRQUFBLENBQU8sS0FBSyxRQUFRLEtBQUssZ0JBQWdCLEdBQUcsaUJBQWlCLE1BQU0sWUFEckUsK0VBTUYsUUFBQSxRQUFBLGNBQUEsTUFBQSxDQUFLLFVBQVUsY0FDYixRQUFBLFFBQUEsY0FBQSxRQUFBLENBQU8sUUFBUSxVQUFmLHNDQUNBLFFBQUEsUUFBQSxjQUFBLFFBQUEsQ0FBTyxLQUFLLFFBQVEsSUFBSSxNQUFNLElBQUksS0FBSyxhQUFhLE9BR3RELFFBQUEsUUFBQSxjQUFBLE1BQUEsQ0FBSyxVQUFVLGNBQ2IsUUFBQSxRQUFBLGNBQUEsUUFBQSxDQUFPLFFBQVEsUUFBZixlQUNBLFFBQUEsUUFBQSxjQUFBLFFBQUEsQ0FBTyxLQUFLLE9BQU8sTUFBTSxVQUczQixRQUFBLFFBQUEsY0FBQSxTQUFBLENBQVEsVUFBVSxtQkFBbEIsVUFFQSxRQUFBLFFBQUEsY0FBQSxLQUFBLEtBQUEsU0FDQSxRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssVUFBVSxjQUNiLFFBQUEsUUFBQSxjQUFBLFFBQUEsQ0FBTyxVQUFVLHdCQUF3QixLQUFLLE9BQU8sWUFBWSxlQUVuRSxRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssVUFBVSxjQUNiLFFBQUEsUUFBQSxjQUFBLFFBQUEsQ0FBTyxVQUFVLGVBQWUsS0FBSyxPQUFPLFlBQVksbUJBRTFELFFBQUEsUUFBQSxjQUFBLE1BQUEsQ0FBSyxVQUFVLGNBQ2IsUUFBQSxRQUFBLGNBQUEsUUFBQSxDQUFPLFVBQVUsd0JBQXdCLEtBQUssT0FBTyxZQUFZLGVBR25FLFFBQUEsUUFBQSxjQUFBLEtBQUEsS0FBQSxVQUNBLFFBQUEsUUFBQSxjQUFBLE1BQUEsQ0FBSyxVQUFVLHVCQUNiLFFBQUEsUUFBQSxjQUFBLE1BQUEsQ0FBSyxVQUFVLGNBQWY7OztvRkMxRmMsS0FGeEIsSUFBQSxPQUFBLFFBQUEsd0hBRWUsU0FBUyxPQUN0QixPQUNFLFFBQUEsUUFBQSxjQUFBLE1BQUEsQ0FBSyxVQUFVLFFBQ2IsUUFBQSxRQUFBLGNBQUEsS0FBQSxLQUFBLFFBQ0EsUUFBQSxRQUFBLGNBQUEsTUFBQSxDQUFLLFVBQVUsT0FDYixRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssVUFBVSxZQUFXLFFBQUEsUUFBQSxjQUFBLE1BQUEsS0FBQSxNQUMxQixRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssVUFBVSxZQUFXLFFBQUEsUUFBQSxjQUFBLE1BQUEsS0FBQSxNQUMxQixRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssVUFBVSxZQUFXLFFBQUEsUUFBQSxjQUFBLE1BQUEsS0FBQSxNQUMxQixRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssVUFBVSxZQUFXLFFBQUEsUUFBQSxjQUFBLE1BQUEsS0FBQSxNQUMxQixRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssVUFBVSxZQUFXLFFBQUEsUUFBQSxjQUFBLE1BQUEsS0FBQSxNQUMxQixRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssVUFBVSxZQUFXLFFBQUEsUUFBQSxjQUFBLE1BQUEsS0FBQSxNQUMxQixRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssVUFBVSxZQUFXLFFBQUEsUUFBQSxjQUFBLE1BQUEsS0FBQSxNQUMxQixRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssVUFBVSxZQUFXLFFBQUEsUUFBQSxjQUFBLE1BQUEsS0FBQSxNQUMxQixRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssVUFBVSxZQUFXLFFBQUEsUUFBQSxjQUFBLE1BQUEsS0FBQSxNQUMxQixRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssVUFBVSxZQUFXLFFBQUEsUUFBQSxjQUFBLE1BQUEsS0FBQSxNQUMxQixRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssVUFBVSxZQUFXLFFBQUEsUUFBQSxjQUFBLE1BQUEsS0FBQSxNQUMxQixRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssVUFBVSxZQUFXLFFBQUEsUUFBQSxjQUFBLE1BQUEsS0FBQSxPQUU1QixRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssVUFBVSxPQUNiLFFBQUEsUUFBQSxjQUFBLE1BQUEsQ0FBSyxVQUFVLFlBQVcsUUFBQSxRQUFBLGNBQUEsTUFBQSxLQUFBLE1BQzFCLFFBQUEsUUFBQSxjQUFBLE1BQUEsQ0FBSyxVQUFVLFlBQVcsUUFBQSxRQUFBLGNBQUEsTUFBQSxLQUFBLE1BQzFCLFFBQUEsUUFBQSxjQUFBLE1BQUEsQ0FBSyxVQUFVLFlBQVcsUUFBQSxRQUFBLGNBQUEsTUFBQSxLQUFBLE1BQzFCLFFBQUEsUUFBQSxjQUFBLE1BQUEsQ0FBSyxVQUFVLFlBQVcsUUFBQSxRQUFBLGNBQUEsTUFBQSxLQUFBLE1BQzFCLFFBQUEsUUFBQSxjQUFBLE1BQUEsQ0FBSyxVQUFVLFlBQVcsUUFBQSxRQUFBLGNBQUEsTUFBQSxLQUFBLE1BQzFCLFFBQUEsUUFBQSxjQUFBLE1BQUEsQ0FBSyxVQUFVLFlBQVcsUUFBQSxRQUFBLGNBQUEsTUFBQSxLQUFBLE9BRTVCLFFBQUEsUUFBQSxjQUFBLE1BQUEsQ0FBSyxVQUFVLE9BQ2IsUUFBQSxRQUFBLGNBQUEsTUFBQSxDQUFLLFVBQVUsWUFBVyxRQUFBLFFBQUEsY0FBQSxNQUFBLEtBQUEsTUFDMUIsUUFBQSxRQUFBLGNBQUEsTUFBQSxDQUFLLFVBQVUsWUFBVyxRQUFBLFFBQUEsY0FBQSxNQUFBLEtBQUEsTUFDMUIsUUFBQSxRQUFBLGNBQUEsTUFBQSxDQUFLLFVBQVUsWUFBVyxRQUFBLFFBQUEsY0FBQSxNQUFBLEtBQUEsTUFDMUIsUUFBQSxRQUFBLGNBQUEsTUFBQSxDQUFLLFVBQVUsWUFBVyxRQUFBLFFBQUEsY0FBQSxNQUFBLEtBQUEsT0FFNUIsUUFBQSxRQUFBLGNBQUEsTUFBQSxDQUFLLFVBQVUsT0FDYixRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssVUFBVSxZQUFXLFFBQUEsUUFBQSxjQUFBLE1BQUEsS0FBQSxNQUMxQixRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssVUFBVSxZQUFXLFFBQUEsUUFBQSxjQUFBLE1BQUEsS0FBQSxNQUMxQixRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssVUFBVSxZQUFXLFFBQUEsUUFBQSxjQUFBLE1BQUEsS0FBQSxPQUU1QixRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssVUFBVSxPQUNiLFFBQUEsUUFBQSxjQUFBLE1BQUEsQ0FBSyxVQUFVLFlBQVcsUUFBQSxRQUFBLGNBQUEsTUFBQSxLQUFBLE1BQzFCLFFBQUEsUUFBQSxjQUFBLE1BQUEsQ0FBSyxVQUFVLFlBQVcsUUFBQSxRQUFBLGNBQUEsTUFBQSxLQUFBLE9BRTVCLFFBQUEsUUFBQSxjQUFBLE1BQUEsQ0FBSyxVQUFVLE9BQ2IsUUFBQSxRQUFBLGNBQUEsTUFBQSxDQUFLLFVBQVUsWUFBVyxRQUFBLFFBQUEsY0FBQSxNQUFBLEtBQUEsTUFDMUIsUUFBQSxRQUFBLGNBQUEsTUFBQSxDQUFLLFVBQVUsNEJBQTJCLFFBQUEsUUFBQSxjQUFBLE1BQUEsS0FBQSxnQkFFNUMsUUFBQSxRQUFBLGNBQUEsTUFBQSxDQUFLLFVBQVUsT0FDYixRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssVUFBVSw0QkFBMkIsUUFBQSxRQUFBLGNBQUEsTUFBQSxLQUFBOzs7b0ZDOUMxQixPQUZ4QixJQUFBLE9BQUEsUUFBQSx3SEFFZSxTQUFTLFNBQ3RCLE9BQ0UsUUFBQSxRQUFBLGNBQUEsTUFBQSxLQUNFLFFBQUEsUUFBQSxjQUFBLEtBQUEsS0FBQSxVQUNBLFFBQUEsUUFBQSxjQUFBLE9BQUEsQ0FBTSxVQUFVLHVCQUFoQixXQUFxRCxJQUNyRCxRQUFBLFFBQUEsY0FBQSxJQUFBLENBQUcsS0FBSyxlQUFlLFVBQVUsdUJBQWpDLFFBQWdFLElBQ2hFLFFBQUEsUUFBQSxjQUFBLE9BQUEsQ0FBTSxVQUFVLHVCQUFoQixXQUFxRCxJQUNyRCxRQUFBLFFBQUEsY0FBQSxPQUFBLENBQU0sVUFBVSx1QkFBaEIsV0FBcUQsSUFDckQsUUFBQSxRQUFBLGNBQUEsT0FBQSxDQUFNLFVBQVUsb0JBQWhCLFFBQStDLElBQy9DLFFBQUEsUUFBQSxjQUFBLE9BQUEsQ0FBTSxVQUFVLHVCQUFoQixXQUFxRCxJQUNyRCxRQUFBLFFBQUEsY0FBQSxPQUFBLENBQU0sVUFBVSxzQkFBaEI7OztxWENaTixPQUFBLFFBQUEsZ0RBQ0EsYUFBQSxRQUFBLDR2QkFHcUIsbUJBQ25CLFNBQUEsU0FBZSxnQkFBQSxLQUFBLFFBQUEsSUFBQSxFQUFBLDJCQUFBLE1BQUEsT0FBQSxXQUFBLE9BQUEsZUFBQSxTQUFBLEtBQUEsT0FBQSxPQUViLEVBQUssTUFBUSxDQUFDLFdBQVcsR0FGWiwwQkFEbUIsT0FBQSxzRUFNeEIsSUFBQSxFQUFBLEtBQ1IsT0FDRSxRQUFBLFFBQUEsY0FBQSxNQUFBLEtBQ0UsUUFBQSxRQUFBLGNBQUEsS0FBQSxLQUFBLFVBQ0EsUUFBQSxRQUFBLGNBQUMsY0FBQSxRQUFELENBQWEsS0FBTSxLQUFLLE1BQU0sVUFBVyxPQUFRLFNBQUEsU0FBQSxPQUFNLEVBQUssU0FBUyxDQUFDLFdBQVcsT0FDakYsUUFBQSxRQUFBLGNBQUEsU0FBQSxDQUFRLFVBQVUsa0JBQWtCLFFBQVMsU0FBQSxVQUFBLE9BQU0sRUFBSyxTQUFTLENBQUMsV0FBVyxNQUE3RSw2Q0FYYTs7O29GQ0ZHLGFBRnhCLElBQUEsT0FBQSxRQUFBLHdIQUVlLFNBQVMsZUFDdEIsT0FDRSxRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssVUFBVSwwQ0FDYixRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssVUFBVSxtQkFDYixRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssVUFBVSxpQkFDYixRQUFBLFFBQUEsY0FBQSxTQUFBLENBQVEsS0FBSyxTQUFTLFVBQVUsMEJBQTBCLGNBQVksV0FBVyxjQUFZLGdDQUFnQyxnQkFBYyxTQUN6SSxRQUFBLFFBQUEsY0FBQSxPQUFBLENBQU0sVUFBVSxXQUFoQixxQkFDQSxRQUFBLFFBQUEsY0FBQSxPQUFBLENBQU0sVUFBVSxhQUNoQixRQUFBLFFBQUEsY0FBQSxPQUFBLENBQU0sVUFBVSxhQUNoQixRQUFBLFFBQUEsY0FBQSxPQUFBLENBQU0sVUFBVSxjQUVsQixRQUFBLFFBQUEsY0FBQSxJQUFBLENBQUcsVUFBVSxlQUFlLEtBQUssZ0JBQWpDLFdBR0YsUUFBQSxRQUFBLGNBQUEsTUFBQSxDQUFLLFVBQVUsMkJBQTJCLEdBQUcsZ0NBQzNDLFFBQUEsUUFBQSxjQUFBLEtBQUEsQ0FBSSxVQUFVLGtCQUNaLFFBQUEsUUFBQSxjQUFBLEtBQUEsQ0FBSSxVQUFVLFVBQVMsUUFBQSxRQUFBLGNBQUEsSUFBQSxDQUFHLEtBQUssZ0JBQVIsUUFBNEIsUUFBQSxRQUFBLGNBQUEsT0FBQSxDQUFNLFVBQVUsV0FBaEIsZUFDbkQsUUFBQSxRQUFBLGNBQUEsS0FBQSxLQUFJLFFBQUEsUUFBQSxjQUFBLElBQUEsQ0FBRyxLQUFLLGdCQUFSLFNBQ0osUUFBQSxRQUFBLGNBQUEsS0FBQSxDQUFJLFVBQVUsWUFDWixRQUFBLFFBQUEsY0FBQSxJQUFBLENBQUcsS0FBSyxJQUFJLFVBQVUsa0JBQWtCLGNBQVksV0FBVyxLQUFLLFNBQVMsZ0JBQWMsT0FBTyxnQkFBYyxTQUFoSCxZQUFpSSxRQUFBLFFBQUEsY0FBQSxPQUFBLENBQU0sVUFBVSxXQUNqSixRQUFBLFFBQUEsY0FBQSxLQUFBLENBQUksVUFBVSxpQkFDWixRQUFBLFFBQUEsY0FBQSxLQUFBLEtBQUksUUFBQSxRQUFBLGNBQUEsSUFBQSxDQUFHLEtBQUssZ0JBQVIsV0FDSixRQUFBLFFBQUEsY0FBQSxLQUFBLEtBQUksUUFBQSxRQUFBLGNBQUEsSUFBQSxDQUFHLEtBQUssZ0JBQVIsbUJBQ0osUUFBQSxRQUFBLGNBQUEsS0FBQSxLQUFJLFFBQUEsUUFBQSxjQUFBLElBQUEsQ0FBRyxLQUFLLGdCQUFSLHdCQUNKLFFBQUEsUUFBQSxjQUFBLEtBQUEsQ0FBSSxLQUFLLFlBQVksVUFBVSxZQUMvQixRQUFBLFFBQUEsY0FBQSxLQUFBLENBQUksVUFBVSxVQUFTLFFBQUEsUUFBQSxjQUFBLElBQUEsQ0FBRyxLQUFLLGdCQUFSLGdCQUN2QixRQUFBLFFBQUEsY0FBQSxLQUFBLENBQUksVUFBVSxZQUFXLFFBQUEsUUFBQSxjQUFBLElBQUEsQ0FBRyxLQUFLLGdCQUFSLHFCQUkvQixRQUFBLFFBQUEsY0FBQSxPQUFBLENBQU0sVUFBVSwyQkFDZCxRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssVUFBVSxjQUNiLFFBQUEsUUFBQSxjQUFBLFFBQUEsQ0FBTyxLQUFLLE9BQU8sVUFBVSxlQUFlLFlBQVksWUFFMUQsUUFBQSxRQUFBLGNBQUEsU0FBQSxDQUFRLEtBQUssU0FBUyxVQUFVLG1CQUFoQyxXQUVGLFFBQUEsUUFBQSxjQUFBLEtBQUEsQ0FBSSxVQUFVLCtCQUNaLFFBQUEsUUFBQSxjQUFBLEtBQUEsS0FBSSxRQUFBLFFBQUEsY0FBQSxJQUFBLENBQUcsS0FBSyxnQkFBUixTQUNKLFFBQUEsUUFBQSxjQUFBLEtBQUEsQ0FBSSxVQUFVLFlBQ1osUUFBQSxRQUFBLGNBQUEsSUFBQSxDQUFHLEtBQUssSUFBSSxVQUFVLGtCQUFrQixjQUFZLFdBQVcsS0FBSyxTQUFTLGdCQUFjLE9BQU8sZ0JBQWMsU0FBaEgsWUFBaUksUUFBQSxRQUFBLGNBQUEsT0FBQSxDQUFNLFVBQVUsV0FDakosUUFBQSxRQUFBLGNBQUEsS0FBQSxDQUFJLFVBQVUsaUJBQ1osUUFBQSxRQUFBLGNBQUEsS0FBQSxLQUFJLFFBQUEsUUFBQSxjQUFBLElBQUEsQ0FBRyxLQUFLLGdCQUFSLFdBQ0osUUFBQSxRQUFBLGNBQUEsS0FBQSxLQUFJLFFBQUEsUUFBQSxjQUFBLElBQUEsQ0FBRyxLQUFLLGdCQUFSLG1CQUNKLFFBQUEsUUFBQSxjQUFBLEtBQUEsS0FBSSxRQUFBLFFBQUEsY0FBQSxJQUFBLENBQUcsS0FBSyxnQkFBUix3QkFDSixRQUFBLFFBQUEsY0FBQSxLQUFBLENBQUksS0FBSyxZQUFZLFVBQVUsWUFDL0IsUUFBQSxRQUFBLGNBQUEsS0FBQSxDQUFJLFVBQVUsVUFBUyxRQUFBLFFBQUEsY0FBQSxJQUFBLENBQUcsS0FBSyxnQkFBUixnQkFDdkIsUUFBQSxRQUFBLGNBQUEsS0FBQSxDQUFJLFVBQVUsWUFBVyxRQUFBLFFBQUEsY0FBQSxJQUFBLENBQUcsS0FBSyxnQkFBUjs7O29GQzlDakIsS0FGeEIsSUFBQSxPQUFBLFFBQUEsd0hBRWUsU0FBUyxPQUN0QixPQUNFLFFBQUEsUUFBQSxjQUFBLE1BQUEsS0FDRSxRQUFBLFFBQUEsY0FBQSxLQUFBLEtBQUEsUUFFQSxRQUFBLFFBQUEsY0FBQSxLQUFBLEtBQUEsUUFDQSxRQUFBLFFBQUEsY0FBQSxNQUFBLEtBQ0UsUUFBQSxRQUFBLGNBQUEsS0FBQSxDQUFJLFVBQVUsZUFBZSxLQUFLLFdBQ2hDLFFBQUEsUUFBQSxjQUFBLEtBQUEsQ0FBSSxLQUFLLGVBQWUsVUFBVSxVQUFTLFFBQUEsUUFBQSxjQUFBLElBQUEsQ0FBRyxLQUFLLFFBQVEsZ0JBQWMsT0FBTyxLQUFLLE1BQU0sY0FBWSxPQUE1RCxTQUMzQyxRQUFBLFFBQUEsY0FBQSxLQUFBLENBQUksS0FBSyxnQkFBZSxRQUFBLFFBQUEsY0FBQSxJQUFBLENBQUcsS0FBSyxXQUFXLGdCQUFjLFVBQVUsS0FBSyxNQUFNLGNBQVksT0FBbEUsYUFFMUIsUUFBQSxRQUFBLGNBQUEsTUFBQSxDQUFLLFVBQVUsZUFDYixRQUFBLFFBQUEsY0FBQSxNQUFBLENBQUssS0FBSyxXQUFXLFVBQVUsa0JBQWtCLEdBQUcsUUFDbEQsUUFBQSxRQUFBLGNBQUEsS0FBQSxNQURGLG1CQUlBLFFBQUEsUUFBQSxjQUFBLE1BQUEsQ0FBSyxLQUFLLFdBQVcsVUFBVSxXQUFXLEdBQUcsV0FDM0MsUUFBQSxRQUFBLGNBQUEsS0FBQSxNQURGLHdCQU9KLFFBQUEsUUFBQSxjQUFBLEtBQUEsTUFDQSxRQUFBLFFBQUEsY0FBQSxLQUFBLE1BRUEsUUFBQSxRQUFBLGNBQUEsS0FBQSxLQUFBLFNBQ0EsUUFBQSxRQUFBLGNBQUEsS0FBQSxDQUFJLFVBQVUsaUJBQ1osUUFBQSxRQUFBLGNBQUEsS0FBQSxDQUFJLEtBQUssZUFBZSxVQUFVLFVBQVMsUUFBQSxRQUFBLGNBQUEsSUFBQSxDQUFHLEtBQUssZ0JBQVIsU0FDM0MsUUFBQSxRQUFBLGNBQUEsS0FBQSxDQUFJLEtBQUssZ0JBQWUsUUFBQSxRQUFBLGNBQUEsSUFBQSxDQUFHLEtBQUssZ0JBQVIsWUFDeEIsUUFBQSxRQUFBLGNBQUEsS0FBQSxDQUFJLEtBQUssZ0JBQWUsUUFBQSxRQUFBLGNBQUEsSUFBQSxDQUFHLEtBQUssZ0JBQVIsYUFDeEIsUUFBQSxRQUFBLGNBQUEsS0FBQSxDQUFJLEtBQUssZUFBZSxVQUFVLFlBQ2hDLFFBQUEsUUFBQSxjQUFBLElBQUEsQ0FBRyxVQUFVLGtCQUFrQixjQUFZLFdBQVcsS0FBSyxJQUFJLEtBQUssU0FBUyxnQkFBYyxPQUFPLGdCQUFjLFNBQWhILFlBQ1csUUFBQSxRQUFBLGNBQUEsT0FBQSxDQUFNLFVBQVUsV0FFM0IsUUFBQSxRQUFBLGNBQUEsS0FBQSxDQUFJLFVBQVUsaUJBQ1osUUFBQSxRQUFBLGNBQUEsS0FBQSxLQUFJLFFBQUEsUUFBQSxjQUFBLElBQUEsQ0FBRyxLQUFLLGdCQUFSLFdBQ0osUUFBQSxRQUFBLGNBQUEsS0FBQSxLQUFJLFFBQUEsUUFBQSxjQUFBLElBQUEsQ0FBRyxLQUFLLGdCQUFSLHNCQUtWLFFBQUEsUUFBQSxjQUFBLEtBQUEsTUFDQSxRQUFBLFFBQUEsY0FBQSxLQUFBLE1BRUEsUUFBQSxRQUFBLGNBQUEsS0FBQSxLQUFBLGlCQUNBLFFBQUEsUUFBQSxjQUFBLEtBQUEsQ0FBSSxVQUFVLDZCQUNaLFFBQUEsUUFBQSxjQUFBLEtBQUEsQ0FBSSxLQUFLLGVBQWUsVUFBVSxVQUFTLFFBQUEsUUFBQSxjQUFBLElBQUEsQ0FBRyxLQUFLLGdCQUFSLFNBQzNDLFFBQUEsUUFBQSxjQUFBLEtBQUEsQ0FBSSxLQUFLLGVBQWUsVUFBVSxZQUFXLFFBQUEsUUFBQSxjQUFBLElBQUEsQ0FBRyxLQUFLLGdCQUFSLFlBQzdDLFFBQUEsUUFBQSxjQUFBLEtBQUEsQ0FBSSxLQUFLLGdCQUFlLFFBQUEsUUFBQSxjQUFBLElBQUEsQ0FBRyxLQUFLLGdCQUFSLGNBRzFCLFFBQUEsUUFBQSxjQUFBLEtBQUEsTUFDQSxRQUFBLFFBQUEsY0FBQSxLQUFBLE1BRUEsUUFBQSxRQUFBLGNBQUEsS0FBQSxLQUFBLGFBQ0EsUUFBQSxRQUFBLGNBQUEsS0FBQSxDQUFJLFVBQVUsNkJBQTZCLEtBQUssV0FDOUMsUUFBQSxRQUFBLGNBQUEsS0FBQSxDQUFJLEtBQUssZUFBZSxVQUFVLFVBQVMsUUFBQSxRQUFBLGNBQUEsSUFBQSxDQUFHLEtBQUssUUFBUSxnQkFBYyxPQUFPLEtBQUssTUFBTSxjQUFZLE9BQTVELFNBQzNDLFFBQUEsUUFBQSxjQUFBLEtBQUEsQ0FBSSxLQUFLLGdCQUFlLFFBQUEsUUFBQSxjQUFBLElBQUEsQ0FBRyxLQUFLLFdBQVcsZ0JBQWMsVUFBVSxLQUFLLE1BQU0sY0FBWSxPQUFsRSxZQUN4QixRQUFBLFFBQUEsY0FBQSxLQUFBLENBQUksS0FBSyxnQkFBZSxRQUFBLFFBQUEsY0FBQSxJQUFBLENBQUcsS0FBSyxZQUFZLGdCQUFjLFVBQVUsS0FBSyxNQUFNLGNBQVksT0FBbkUsY0FFMUIsUUFBQSxRQUFBLGNBQUEsS0FBQSxNQUNBLFFBQUEsUUFBQSxjQUFBLEtBQUEsQ0FBSSxVQUFVLCtCQUNaLFFBQUEsUUFBQSxjQUFBLEtBQUEsQ0FBSSxLQUFLLGVBQWUsVUFBVSxVQUFTLFFBQUEsUUFBQSxjQUFBLElBQUEsQ0FBRyxLQUFLLGdCQUFSLFNBQzNDLFFBQUEsUUFBQSxjQUFBLEtBQUEsQ0FBSSxLQUFLLGdCQUFlLFFBQUEsUUFBQSxjQUFBLElBQUEsQ0FBRyxLQUFLLGdCQUFSLFlBQ3hCLFFBQUEsUUFBQSxjQUFBLEtBQUEsQ0FBSSxLQUFLLGdCQUFlLFFBQUEsUUFBQSxjQUFBLElBQUEsQ0FBRyxLQUFLLGdCQUFSOzs7cVhDakVoQyxPQUFBLFFBQUEsZ0RBQ0EsV0FBQSxRQUFBLDZEQUNBLGdCQUFBLFFBQUEsMHNCQUVxQix3T0FBb0IsT0FBQSwyRUFRN0IsSUFBQSxFQUNlLEtBQUssTUFBckIsRUFEQyxFQUNELEtBQU0sRUFETCxFQUNLLE9BQ2IsT0FDRSxRQUFBLFFBQUEsY0FBQyxnQkFBQSxNQUFELENBQU8sS0FBTSxFQUFNLE9BQVEsR0FDekIsUUFBQSxRQUFBLGNBQUMsZ0JBQUEsTUFBTSxPQUFQLENBQWMsYUFBQSxHQUNaLFFBQUEsUUFBQSxjQUFDLGdCQUFBLE1BQU0sTUFBUCxLQUFBLFdBRUYsUUFBQSxRQUFBLGNBQUMsZ0JBQUEsTUFBTSxLQUFQLEtBQUEsSUFDRyxRQUFBLFFBQUEsY0FBQSxLQUFBLE1BREgsSUFFRyxRQUFBLFFBQUEsY0FBQSxLQUFBLE1BRkgsSUFHRyxRQUFBLFFBQUEsY0FBQSxLQUFBLE1BSEgsSUFJRyxRQUFBLFFBQUEsY0FBQSxLQUFBLE1BSkgsSUFLRyxRQUFBLFFBQUEsY0FBQSxLQUFBLE1BTEgsSUFNRyxRQUFBLFFBQUEsY0FBQSxLQUFBLE1BTkgsSUFPRyxRQUFBLFFBQUEsY0FBQSxLQUFBLE1BUEgsSUFRRyxRQUFBLFFBQUEsY0FBQSxLQUFBLE1BUkgsSUFTRyxRQUFBLFFBQUEsY0FBQSxLQUFBLE1BVEgsSUFVRyxRQUFBLFFBQUEsY0FBQSxLQUFBLE1BVkgsSUFXRyxRQUFBLFFBQUEsY0FBQSxLQUFBLE1BWEgsSUFZRyxRQUFBLFFBQUEsY0FBQSxLQUFBLE1BWkgsSUFhRyxRQUFBLFFBQUEsY0FBQSxLQUFBLE1BYkgsSUFjRyxRQUFBLFFBQUEsY0FBQSxLQUFBLGdEQTNCUCxNQUFPLENBQ0wsS0FBTSxZQUFBLFFBQVUsS0FBSyxXQUNyQixPQUFRLFlBQUEsUUFBVSxLQUFLLCtDQUpSOzs7b0ZDV0csUUFieEIsSUFBQSxPQUFBLFFBQUEsZ0RBQ0EsUUFBQSxRQUFBLHFEQUNBLFNBQUEsUUFBQSx3REFDQSxPQUFBLFFBQUEsa0RBQ0EsV0FBQSxRQUFBLDhEQUNBLE9BQUEsUUFBQSxrREFDQSxNQUFBLFFBQUEsK0NBQ0EsUUFBQSxRQUFBLHFEQUNBLFFBQUEsUUFBQSxxREFDQSxNQUFBLFFBQUEsK0NBQ0EsVUFBQSxRQUFBLDJEQUNBLE1BQUEsUUFBQSx1SEFFZSxTQUFTLFFBQVQsR0FDYixPQUQ0QyxFQUFaLFdBRTlCLElBQUssU0FDSCxPQUFPLFFBQUEsUUFBQSxjQUFDLFNBQUEsUUFBRCxNQUNULElBQUssVUFDSCxPQUFPLFFBQUEsUUFBQSxjQUFDLFVBQUEsUUFBRCxNQUNULElBQUssUUFDSCxPQUFPLFFBQUEsUUFBQSxjQUFDLFFBQUEsUUFBRCxNQUNULElBQUssWUFDSCxPQUFPLFFBQUEsUUFBQSxjQUFDLFlBQUEsUUFBRCxNQUNULElBQUssUUFDSCxPQUFPLFFBQUEsUUFBQSxjQUFDLFFBQUEsUUFBRCxNQUNULElBQUssT0FDSCxPQUFPLFFBQUEsUUFBQSxjQUFDLE9BQUEsUUFBRCxNQUNULElBQUssU0FDSCxPQUFPLFFBQUEsUUFBQSxjQUFDLFNBQUEsUUFBRCxNQUNULElBQUssU0FDSCxPQUFPLFFBQUEsUUFBQSxjQUFDLFNBQUEsUUFBRCxNQUNULElBQUssT0FDSCxPQUFPLFFBQUEsUUFBQSxjQUFDLE9BQUEsUUFBRCxNQUNULElBQUssV0FDSCxPQUFPLFFBQUEsUUFBQSxjQUFDLFdBQUEsUUFBRCxNQUNULElBQUssT0FDSCxPQUFPLFFBQUEsUUFBQSxjQUFDLE9BQUEsUUFBRCxNQUdYLE9BQU87OztvRkN4Q2UsU0FIeEIsSUFBQSxPQUFBLFFBQUEsZ0RBQ0EsZ0JBQUEsUUFBQSwyRkFFZSxTQUFTLFdBQ3RCLElBQU0sRUFDSixRQUFBLFFBQUEsY0FBQyxnQkFBQSxRQUFELENBQVMsR0FBRyxXQUFaLFNBR0YsT0FDRSxRQUFBLFFBQUEsY0FBQSxNQUFBLEtBQ0UsUUFBQSxRQUFBLGNBQUEsS0FBQSxLQUFBLFlBQ0EsUUFBQSxRQUFBLGNBQUMsZ0JBQUEsZUFBRCxDQUFnQixVQUFVLE1BQU0sUUFBUyxHQUN2QyxRQUFBLFFBQUEsY0FBQSxJQUFBLENBQUcsS0FBSyxnQkFBUjs7O29GQ1ZnQixLQUZ4QixJQUFBLE9BQUEsUUFBQSx3SEFFZSxTQUFTLE9BQ3RCLE9BQ0UsUUFBQSxRQUFBLGNBQUEsTUFBQSxLQUNFLFFBQUEsUUFBQSxjQUFBLEtBQUEsS0FBQSx5QkFDQSxRQUFBLFFBQUEsY0FBQSxLQUFBLEtBQUEseUJBQ0EsUUFBQSxRQUFBLGNBQUEsS0FBQSxLQUFBLHlCQUNBLFFBQUEsUUFBQSxjQUFBLEtBQUEsS0FBQSx5QkFDQSxRQUFBLFFBQUEsY0FBQSxJQUFBLEtBQUEsMkxBQ0EsUUFBQSxRQUFBLGNBQUEsSUFBQSxLQUFBLGtTQUNBLFFBQUEsUUFBQSxjQUFBLElBQUEsS0FBQSxzTkFDQSxRQUFBLFFBQUEsY0FBQSxNQUFBLEtBQ0UsUUFBQSxRQUFBLGNBQUEsSUFBQSxLQUFHLFFBQUEsUUFBQSxjQUFBLElBQUEsQ0FBRyxLQUFLLGdCQUFSLHdCQUNILFFBQUEsUUFBQSxjQUFBLElBQUEsS0FBRyxRQUFBLFFBQUEsY0FBQSxTQUFBLENBQVEsVUFBVSxnQkFBbEI7OzthQ1pYLFFBQUEsa0JBSUEsSUFBQSxPQUFBLFFBQUEsZ0RBQ0EsVUFBQSxRQUFBLGFBRUEsS0FBQSxRQUFBLCtIQU4wQixrQkFBdEIsU0FBUyxVQUNYLFFBQVEsaUJBT1YsSUFBTSxhQUFlLFNBQVMsZUFBZSxpQkFDekMsZUFDRixFQUFBLFVBQUEsUUFBUSxRQUFBLFFBQUEsY0FBQyxNQUFBLFFBQUQsTUFBVSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsIm1vZHVsZS5leHBvcnRzPXJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vYXJyYXkvZnJvbVwiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltWnliMjB1YW5NaVhTd2libUZ0WlhNaU9sc2liVzlrZFd4bElpd2laWGh3YjNKMGN5SXNJbkpsY1hWcGNtVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJRU3hQUVVGUFF5eFJRVUZWUXl4UlFVRlJJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwwQmlZV0psYkM5eWRXNTBhVzFsTFdOdmNtVnFjekl2WTI5eVpTMXFjeTloY25KaGVTOW1jbTl0TG1wekluMD0iLCJtb2R1bGUuZXhwb3J0cz1yZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL2FycmF5L2lzLWFycmF5XCIpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1sekxXRnljbUY1TG1weklsMHNJbTVoYldWeklqcGJJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0p5WlhGMWFYSmxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVUVzVDBGQlQwTXNVVUZCVlVNc1VVRkJVU0lzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OUFZbUZpWld3dmNuVnVkR2x0WlMxamIzSmxhbk15TDJOdmNtVXRhbk12WVhKeVlYa3ZhWE10WVhKeVlYa3Vhbk1pZlE9PSIsIm1vZHVsZS5leHBvcnRzPXJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2Fzc2lnblwiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltRnpjMmxuYmk1cWN5SmRMQ0p1WVcxbGN5STZXeUp0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpY21WeGRXbHlaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUZCTEU5QlFVOURMRkZCUVZWRExGRkJRVkVpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZRR0poWW1Wc0wzSjFiblJwYldVdFkyOXlaV3B6TWk5amIzSmxMV3B6TDI5aWFtVmpkQzloYzNOcFoyNHVhbk1pZlE9PSIsIm1vZHVsZS5leHBvcnRzPXJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2NyZWF0ZVwiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltTnlaV0YwWlM1cWN5SmRMQ0p1WVcxbGN5STZXeUp0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpY21WeGRXbHlaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUZCTEU5QlFVOURMRkZCUVZWRExGRkJRVkVpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZRR0poWW1Wc0wzSjFiblJwYldVdFkyOXlaV3B6TWk5amIzSmxMV3B6TDI5aWFtVmpkQzlqY21WaGRHVXVhbk1pZlE9PSIsIm1vZHVsZS5leHBvcnRzPXJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2RlZmluZS1wcm9wZXJ0eVwiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltUmxabWx1WlMxd2NtOXdaWEowZVM1cWN5SmRMQ0p1WVcxbGN5STZXeUp0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpY21WeGRXbHlaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUZCTEU5QlFVOURMRkZCUVZWRExGRkJRVkVpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZRR0poWW1Wc0wzSjFiblJwYldVdFkyOXlaV3B6TWk5amIzSmxMV3B6TDI5aWFtVmpkQzlrWldacGJtVXRjSEp2Y0dWeWRIa3Vhbk1pZlE9PSIsIm1vZHVsZS5leHBvcnRzPXJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2VudHJpZXNcIik7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ1ZEhKcFpYTXVhbk1pWFN3aWJtRnRaWE1pT2xzaWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0luSmxjWFZwY21VaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQlFTeFBRVUZQUXl4UlFVRlZReXhSUVVGUklpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDBCaVlXSmxiQzl5ZFc1MGFXMWxMV052Y21WcWN6SXZZMjl5WlMxcWN5OXZZbXBsWTNRdlpXNTBjbWxsY3k1cWN5SjkiLCJtb2R1bGUuZXhwb3J0cz1yZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JcIik7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbWRsZEMxdmQyNHRjSEp2Y0dWeWRIa3RaR1Z6WTNKcGNIUnZjaTVxY3lKZExDSnVZVzFsY3lJNld5SnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2ljbVZ4ZFdseVpTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRkJMRTlCUVU5RExGRkJRVlZETEZGQlFWRWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlFHSmhZbVZzTDNKMWJuUnBiV1V0WTI5eVpXcHpNaTlqYjNKbExXcHpMMjlpYW1WamRDOW5aWFF0YjNkdUxYQnliM0JsY25SNUxXUmxjMk55YVhCMGIzSXVhbk1pZlE9PSIsIm1vZHVsZS5leHBvcnRzPXJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2tleXNcIik7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbXRsZVhNdWFuTWlYU3dpYm1GdFpYTWlPbHNpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSW5KbGNYVnBjbVVpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCUVN4UFFVRlBReXhSUVVGVlF5eFJRVUZSSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMEJpWVdKbGJDOXlkVzUwYVcxbExXTnZjbVZxY3pJdlkyOXlaUzFxY3k5dlltcGxZM1F2YTJWNWN5NXFjeUo5IiwibW9kdWxlLmV4cG9ydHM9cmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvdmFsdWVzXCIpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5aaGJIVmxjeTVxY3lKZExDSnVZVzFsY3lJNld5SnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2ljbVZ4ZFdseVpTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRkJMRTlCUVU5RExGRkJRVlZETEZGQlFWRWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlFHSmhZbVZzTDNKMWJuUnBiV1V0WTI5eVpXcHpNaTlqYjNKbExXcHpMMjlpYW1WamRDOTJZV3gxWlhNdWFuTWlmUT09IiwibW9kdWxlLmV4cG9ydHM9cmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9wYXJzZS1pbnRcIik7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbkJoY25ObExXbHVkQzVxY3lKZExDSnVZVzFsY3lJNld5SnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2ljbVZ4ZFdseVpTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRkJMRTlCUVU5RExGRkJRVlZETEZGQlFWRWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlFHSmhZbVZzTDNKMWJuUnBiV1V0WTI5eVpXcHpNaTlqYjNKbExXcHpMM0JoY25ObExXbHVkQzVxY3lKOSIsImZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoZSl7aWYodm9pZCAwPT09ZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIGV9bW9kdWxlLmV4cG9ydHM9X2Fzc2VydFRoaXNJbml0aWFsaXplZDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltRnpjMlZ5ZEZSb2FYTkpibWwwYVdGc2FYcGxaQzVxY3lKZExDSnVZVzFsY3lJNld5SmZZWE56WlhKMFZHaHBjMGx1YVhScFlXeHBlbVZrSWl3aWMyVnNaaUlzSWxKbFptVnlaVzVqWlVWeWNtOXlJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzVTBGQlUwRXNkVUpCUVhWQ1F5eEhRVU01UWl4UlFVRmhMRWxCUVZSQkxFVkJRMFlzVFVGQlRTeEpRVUZKUXl4bFFVRmxMRFpFUVVjelFpeFBRVUZQUkN4RlFVZFVSU3hQUVVGUFF5eFJRVUZWU2lJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlBWW1GaVpXd3ZjblZ1ZEdsdFpTMWpiM0psYW5NeUwyaGxiSEJsY25NdllYTnpaWEowVkdocGMwbHVhWFJwWVd4cGVtVmtMbXB6SW4wPSIsInZhciBfT2JqZWN0JGFzc2lnbj1yZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3QvYXNzaWduXCIpO2Z1bmN0aW9uIF9leHRlbmRzKCl7cmV0dXJuIG1vZHVsZS5leHBvcnRzPV9leHRlbmRzPV9PYmplY3QkYXNzaWdufHxmdW5jdGlvbihlKXtmb3IodmFyIHQ9MTt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKXt2YXIgcj1hcmd1bWVudHNbdF07Zm9yKHZhciBuIGluIHIpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHIsbikmJihlW25dPXJbbl0pfXJldHVybiBlfSxfZXh0ZW5kcy5hcHBseSh0aGlzLGFyZ3VtZW50cyl9bW9kdWxlLmV4cG9ydHM9X2V4dGVuZHM7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVY0ZEdWdVpITXVhbk1pWFN3aWJtRnRaWE1pT2xzaVgwOWlhbVZqZENSaGMzTnBaMjRpTENKeVpYRjFhWEpsSWl3aVgyVjRkR1Z1WkhNaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2lkR0Z5WjJWMElpd2lhU0lzSW1GeVozVnRaVzUwY3lJc0lteGxibWQwYUNJc0luTnZkWEpqWlNJc0ltdGxlU0lzSWs5aWFtVmpkQ0lzSW5CeWIzUnZkSGx3WlNJc0ltaGhjMDkzYmxCeWIzQmxjblI1SWl3aVkyRnNiQ0lzSW1Gd2NHeDVJaXdpZEdocGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNTVUZCU1VFc1pVRkJhVUpETEZGQlFWRXNORUpCUlRkQ0xGTkJRVk5ETEZkQlpWQXNUMEZrUVVNc1QwRkJUME1zVVVGQlZVWXNVMEZCVjBZc1owSkJRV3RDTEZOQlFWVkxMRWRCUTNSRUxFbEJRVXNzU1VGQlNVTXNSVUZCU1N4RlFVRkhRU3hGUVVGSlF5eFZRVUZWUXl4UFFVRlJSaXhKUVVGTExFTkJRM3BETEVsQlFVbEhMRVZCUVZOR0xGVkJRVlZFTEVkQlJYWkNMRWxCUVVzc1NVRkJTVWtzUzBGQlQwUXNSVUZEVmtVc1QwRkJUME1zVlVGQlZVTXNaVUZCWlVNc1MwRkJTMHdzUlVGQlVVTXNTMEZETDBOTUxFVkJRVTlMTEVkQlFVOUVMRVZCUVU5RExFbEJTek5DTEU5QlFVOU1MRWRCUjBaSUxGTkJRVk5oTEUxQlFVMURMRXRCUVUxVUxGZEJSemxDU2l4UFFVRlBReXhSUVVGVlJpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5QVltRmlaV3d2Y25WdWRHbHRaUzFqYjNKbGFuTXlMMmhsYkhCbGNuTXZaWGgwWlc1a2N5NXFjeUo5IiwidmFyIF9PYmplY3QkY3JlYXRlPXJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9jcmVhdGVcIik7ZnVuY3Rpb24gX2luaGVyaXRzTG9vc2UoZSxvKXtlLnByb3RvdHlwZT1fT2JqZWN0JGNyZWF0ZShvLnByb3RvdHlwZSksZS5wcm90b3R5cGUuY29uc3RydWN0b3I9ZSxlLl9fcHJvdG9fXz1vfW1vZHVsZS5leHBvcnRzPV9pbmhlcml0c0xvb3NlO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1sdWFHVnlhWFJ6VEc5dmMyVXVhbk1pWFN3aWJtRnRaWE1pT2xzaVgwOWlhbVZqZENSamNtVmhkR1VpTENKeVpYRjFhWEpsSWl3aVgybHVhR1Z5YVhSelRHOXZjMlVpTENKemRXSkRiR0Z6Y3lJc0luTjFjR1Z5UTJ4aGMzTWlMQ0p3Y205MGIzUjVjR1VpTENKamIyNXpkSEoxWTNSdmNpSXNJbDlmY0hKdmRHOWZYeUlzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEVsQlFVbEJMR1ZCUVdsQ1F5eFJRVUZSTERSQ1FVVTNRaXhUUVVGVFF5eGxRVUZsUXl4RlFVRlZReXhIUVVOb1EwUXNSVUZCVTBVc1ZVRkJXVXdzWlVGQlpVa3NSVUZCVjBNc1YwRkRMME5HTEVWQlFWTkZMRlZCUVZWRExGbEJRV05JTEVWQlEycERRU3hGUVVGVFNTeFZRVUZaU0N4RlFVZDJRa2tzVDBGQlQwTXNVVUZCVlZBaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12UUdKaFltVnNMM0oxYm5ScGJXVXRZMjl5Wldwek1pOW9aV3h3WlhKekwybHVhR1Z5YVhSelRHOXZjMlV1YW5NaWZRPT0iLCJmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1tb2R1bGUuZXhwb3J0cz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1sdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDNXFjeUpkTENKdVlXMWxjeUk2V3lKZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBJaXdpYjJKcUlpd2lYMTlsYzAxdlpIVnNaU0lzSW1SbFptRjFiSFFpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4VFFVRlRRU3gxUWtGQmRVSkRMRWRCUXpsQ0xFOUJRVTlCTEVkQlFVOUJMRVZCUVVsRExGZEJRV0ZFTEVWQlFVMHNRMEZEYmtORkxGRkJRVk5HTEVkQlNXSkhMRTlCUVU5RExGRkJRVlZNSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMEJpWVdKbGJDOXlkVzUwYVcxbExXTnZjbVZxY3pJdmFHVnNjR1Z5Y3k5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUXVhbk1pZlE9PSIsInZhciBfT2JqZWN0JGdldE93blByb3BlcnR5RGVzY3JpcHRvcj1yZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yXCIpLF9PYmplY3QkZGVmaW5lUHJvcGVydHk9cmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eVwiKTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChlKXtpZihlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIHI9e307aWYobnVsbCE9ZSlmb3IodmFyIHQgaW4gZSlpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KSl7dmFyIG89X09iamVjdCRkZWZpbmVQcm9wZXJ0eSYmX09iamVjdCRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I/X09iamVjdCRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSx0KTp7fTtvLmdldHx8by5zZXQ/X09iamVjdCRkZWZpbmVQcm9wZXJ0eShyLHQsbyk6clt0XT1lW3RdfXJldHVybiByLmRlZmF1bHQ9ZSxyfW1vZHVsZS5leHBvcnRzPV9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1sdWRHVnliM0JTWlhGMWFYSmxWMmxzWkdOaGNtUXVhbk1pWFN3aWJtRnRaWE1pT2xzaVgwOWlhbVZqZENSblpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0lpTENKeVpYRjFhWEpsSWl3aVgwOWlhbVZqZENSa1pXWnBibVZRY205d1pYSjBlU0lzSWw5cGJuUmxjbTl3VW1WeGRXbHlaVmRwYkdSallYSmtJaXdpYjJKcUlpd2lYMTlsYzAxdlpIVnNaU0lzSW01bGQwOWlhaUlzSW10bGVTSXNJazlpYW1WamRDSXNJbkJ5YjNSdmRIbHdaU0lzSW1oaGMwOTNibEJ5YjNCbGNuUjVJaXdpWTJGc2JDSXNJbVJsYzJNaUxDSm5aWFFpTENKelpYUWlMQ0prWldaaGRXeDBJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzU1VGQlNVRXNhVU5CUVcxRFF5eFJRVUZSTEdsRVFVVXpRME1zZFVKQlFYbENSQ3hSUVVGUkxIRkRRVVZ5UXl4VFFVRlRSU3gzUWtGQmQwSkRMRWRCUXk5Q0xFZEJRVWxCTEVkQlFVOUJMRVZCUVVsRExGZEJRMklzVDBGQlQwUXNSVUZGVUN4SlFVRkpSU3hGUVVGVExFZEJSV0lzUjBGQlZ5eE5RVUZRUml4RlFVTkdMRWxCUVVzc1NVRkJTVWNzUzBGQlQwZ3NSVUZEWkN4SFFVRkpTU3hQUVVGUFF5eFZRVUZWUXl4bFFVRmxReXhMUVVGTFVDeEZRVUZMUnl4SFFVRk5MRU5CUTJ4RUxFbEJRVWxMTEVWQlFVOVdMSGRDUVVFd1FrWXNhVU5CUVcxRFFTeHBRMEZCYVVOSkxFVkJRVXRITEVkQlFVOHNSMEZGYWtoTExFVkJRVXRETEV0QlFVOUVMRVZCUVV0RkxFbEJRMjVDV2l4MVFrRkJkVUpKTEVWQlFWRkRMRVZCUVV0TExFZEJSWEJEVGl4RlFVRlBReXhIUVVGUFNDeEZRVUZKUnl4SFFVOHhRaXhQUVVSQlJDeEZRVUZQVXl4UlFVRlZXQ3hGUVVOV1JTeEZRVWxZVlN4UFFVRlBReXhSUVVGVlpDSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5QVltRmlaV3d2Y25WdWRHbHRaUzFqYjNKbGFuTXlMMmhsYkhCbGNuTXZhVzUwWlhKdmNGSmxjWFZwY21WWGFXeGtZMkZ5WkM1cWN5SjkiLCJ2YXIgX09iamVjdCRrZXlzPXJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9rZXlzXCIpO2Z1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKGUsbyl7aWYobnVsbD09ZSlyZXR1cm57fTt2YXIgdCxyLHM9e30saT1fT2JqZWN0JGtleXMoZSk7Zm9yKHI9MDtyPGkubGVuZ3RoO3IrKyl0PWlbcl0sby5pbmRleE9mKHQpPj0wfHwoc1t0XT1lW3RdKTtyZXR1cm4gc31tb2R1bGUuZXhwb3J0cz1fb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltOWlhbVZqZEZkcGRHaHZkWFJRY205d1pYSjBhV1Z6VEc5dmMyVXVhbk1pWFN3aWJtRnRaWE1pT2xzaVgwOWlhbVZqZENSclpYbHpJaXdpY21WeGRXbHlaU0lzSWw5dlltcGxZM1JYYVhSb2IzVjBVSEp2Y0dWeWRHbGxjMHh2YjNObElpd2ljMjkxY21ObElpd2laWGhqYkhWa1pXUWlMQ0pyWlhraUxDSnBJaXdpZEdGeVoyVjBJaXdpYzI5MWNtTmxTMlY1Y3lJc0lteGxibWQwYUNJc0ltbHVaR1Y0VDJZaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25SeklsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeEpRVUZKUVN4aFFVRmxReXhSUVVGUkxEQkNRVVV6UWl4VFFVRlRReXc0UWtGQk9FSkRMRVZCUVZGRExFZEJRemRETEVkQlFXTXNUVUZCVmtRc1JVRkJaMElzVFVGQlR5eEhRVU16UWl4SlFVbEpSU3hGUVVGTFF5eEZRVXBNUXl4RlFVRlRMRWRCUlZSRExFVkJRV0ZTTEdGQlFXRkhMRWRCU1RsQ0xFbEJRVXRITEVWQlFVa3NSVUZCUjBFc1JVRkJTVVVzUlVGQlYwTXNUMEZCVVVnc1NVRkRha05FTEVWQlFVMUhMRVZCUVZkR0xFZEJRMkpHTEVWQlFWTk5MRkZCUVZGTUxFbEJRVkVzU1VGRE4wSkZMRVZCUVU5R0xFZEJRVTlHTEVWQlFVOUZMRWxCUjNaQ0xFOUJRVTlGTEVWQlIxUkpMRTlCUVU5RExGRkJRVlZXSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMEJpWVdKbGJDOXlkVzUwYVcxbExXTnZjbVZxY3pJdmFHVnNjR1Z5Y3k5dlltcGxZM1JYYVhSb2IzVjBVSEp2Y0dWeWRHbGxjMHh2YjNObExtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7aWYocmVxdWlyZShcImNvcmUtanMvc2hpbVwiKSxyZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lXCIpLHJlcXVpcmUoXCJjb3JlLWpzL2ZuL3JlZ2V4cC9lc2NhcGVcIiksZ2xvYmFsLl9iYWJlbFBvbHlmaWxsKXRocm93IG5ldyBFcnJvcihcIm9ubHkgb25lIGluc3RhbmNlIG9mIGJhYmVsLXBvbHlmaWxsIGlzIGFsbG93ZWRcIik7Z2xvYmFsLl9iYWJlbFBvbHlmaWxsPSEwO3ZhciBERUZJTkVfUFJPUEVSVFk9XCJkZWZpbmVQcm9wZXJ0eVwiO2Z1bmN0aW9uIGRlZmluZShlLGkscil7ZVtpXXx8T2JqZWN0W0RFRklORV9QUk9QRVJUWV0oZSxpLHt3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITAsdmFsdWU6cn0pfWRlZmluZShTdHJpbmcucHJvdG90eXBlLFwicGFkTGVmdFwiLFwiXCIucGFkU3RhcnQpLGRlZmluZShTdHJpbmcucHJvdG90eXBlLFwicGFkUmlnaHRcIixcIlwiLnBhZEVuZCksXCJwb3AscmV2ZXJzZSxzaGlmdCxrZXlzLHZhbHVlcyxlbnRyaWVzLGluZGV4T2YsZXZlcnksc29tZSxmb3JFYWNoLG1hcCxmaWx0ZXIsZmluZCxmaW5kSW5kZXgsaW5jbHVkZXMsam9pbixzbGljZSxjb25jYXQscHVzaCxzcGxpY2UsdW5zaGlmdCxzb3J0LGxhc3RJbmRleE9mLHJlZHVjZSxyZWR1Y2VSaWdodCxjb3B5V2l0aGluLGZpbGxcIi5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbihlKXtbXVtlXSYmZGVmaW5lKEFycmF5LGUsRnVuY3Rpb24uY2FsbC5iaW5kKFtdW2VdKSl9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltbHVaR1Y0TG1weklsMHNJbTVoYldWeklqcGJJbkpsY1hWcGNtVWlMQ0puYkc5aVlXd2lMQ0pmWW1GaVpXeFFiMng1Wm1sc2JDSXNJa1Z5Y205eUlpd2lSRVZHU1U1RlgxQlNUMUJGVWxSWklpd2laR1ZtYVc1bElpd2lUeUlzSW10bGVTSXNJblpoYkhWbElpd2lUMkpxWldOMElpd2lkM0pwZEdGaWJHVWlMQ0pqYjI1bWFXZDFjbUZpYkdVaUxDSlRkSEpwYm1jaUxDSndjbTkwYjNSNWNHVWlMQ0p3WVdSVGRHRnlkQ0lzSW5CaFpFVnVaQ0lzSW5Od2JHbDBJaXdpWm05eVJXRmphQ0lzSWtGeWNtRjVJaXdpUm5WdVkzUnBiMjRpTENKallXeHNJaXdpWW1sdVpDSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZSUVN4SFFVNUJRU3hSUVVGUkxHZENRVVZTUVN4UlFVRlJMQ3RDUVVWU1FTeFJRVUZSTERSQ1FVVktReXhQUVVGUFF5eGxRVU5VTEUxQlFVMHNTVUZCU1VNc1RVRkJUU3hyUkVGRmJFSkdMRTlCUVU5RExHZENRVUZwUWl4RlFVVjRRaXhKUVVGSlJTeG5Ra0ZCYTBJc2FVSkJRM1JDTEZOQlFWTkRMRTlCUVU5RExFVkJRVWRETEVWQlFVdERMRWRCUTNSQ1JpeEZRVUZGUXl4SlFVRlJSU3hQUVVGUFRDeHBRa0ZCYVVKRkxFVkJRVWRETEVWQlFVc3NRMEZEZUVOSExGVkJRVlVzUlVGRFZrTXNZMEZCWXl4RlFVTmtTQ3hOUVVGUFFTeEpRVWxZU0N4UFFVRlBUeXhQUVVGUFF5eFZRVUZYTEZWQlFWY3NSMEZCUjBNc1ZVRkRka05VTEU5QlFVOVBMRTlCUVU5RExGVkJRVmNzVjBGQldTeEhRVUZIUlN4UlFVVjRReXhuVFVGQlowMURMRTFCUVUwc1MwRkJTME1zVVVGQlVTeFRRVUZWVml4SFFVTXpUaXhIUVVGSFFTeEpRVUZSUml4UFFVRlBZU3hOUVVGUFdDeEZRVUZMV1N4VFFVRlRReXhMUVVGTFF5eExRVUZMTEVkQlFVZGtJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhCdmJIbG1hV3hzTDJ4cFlpOXBibVJsZUM1cWN5SjkiLCIhZnVuY3Rpb24odCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGUscj1PYmplY3QucHJvdG90eXBlLG49ci5oYXNPd25Qcm9wZXJ0eSxvPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbD9TeW1ib2w6e30saT1vLml0ZXJhdG9yfHxcIkBAaXRlcmF0b3JcIixhPW8uYXN5bmNJdGVyYXRvcnx8XCJAQGFzeW5jSXRlcmF0b3JcIixjPW8udG9TdHJpbmdUYWd8fFwiQEB0b1N0cmluZ1RhZ1wiLHU9XCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZSxoPXQucmVnZW5lcmF0b3JSdW50aW1lO2lmKGgpdSYmKG1vZHVsZS5leHBvcnRzPWgpO2Vsc2V7KGg9dC5yZWdlbmVyYXRvclJ1bnRpbWU9dT9tb2R1bGUuZXhwb3J0czp7fSkud3JhcD13cmFwO3ZhciBzPVwic3VzcGVuZGVkU3RhcnRcIixsPVwic3VzcGVuZGVkWWllbGRcIixmPVwiZXhlY3V0aW5nXCIseT1cImNvbXBsZXRlZFwiLHA9e30sZD17fTtkW2ldPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9O3ZhciB2PU9iamVjdC5nZXRQcm90b3R5cGVPZixnPXYmJnYodih2YWx1ZXMoW10pKSk7ZyYmZyE9PXImJm4uY2FsbChnLGkpJiYoZD1nKTt2YXIgbT1HZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGU9R2VuZXJhdG9yLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGQpO0dlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZT1tLmNvbnN0cnVjdG9yPUdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yPUdlbmVyYXRvckZ1bmN0aW9uLEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW2NdPUdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lPVwiR2VuZXJhdG9yRnVuY3Rpb25cIixoLmlzR2VuZXJhdG9yRnVuY3Rpb249ZnVuY3Rpb24odCl7dmFyIGU9XCJmdW5jdGlvblwiPT10eXBlb2YgdCYmdC5jb25zdHJ1Y3RvcjtyZXR1cm4hIWUmJihlPT09R2VuZXJhdG9yRnVuY3Rpb258fFwiR2VuZXJhdG9yRnVuY3Rpb25cIj09PShlLmRpc3BsYXlOYW1lfHxlLm5hbWUpKX0saC5tYXJrPWZ1bmN0aW9uKHQpe3JldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHQsR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpOih0Ll9fcHJvdG9fXz1HZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSxjIGluIHR8fCh0W2NdPVwiR2VuZXJhdG9yRnVuY3Rpb25cIikpLHQucHJvdG90eXBlPU9iamVjdC5jcmVhdGUobSksdH0saC5hd3JhcD1mdW5jdGlvbih0KXtyZXR1cm57X19hd2FpdDp0fX0sZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKSxBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfSxoLkFzeW5jSXRlcmF0b3I9QXN5bmNJdGVyYXRvcixoLmFzeW5jPWZ1bmN0aW9uKHQsZSxyLG4pe3ZhciBvPW5ldyBBc3luY0l0ZXJhdG9yKHdyYXAodCxlLHIsbikpO3JldHVybiBoLmlzR2VuZXJhdG9yRnVuY3Rpb24oZSk/bzpvLm5leHQoKS50aGVuKGZ1bmN0aW9uKHQpe3JldHVybiB0LmRvbmU/dC52YWx1ZTpvLm5leHQoKX0pfSxkZWZpbmVJdGVyYXRvck1ldGhvZHMobSksbVtjXT1cIkdlbmVyYXRvclwiLG1baV09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30sbS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiW29iamVjdCBHZW5lcmF0b3JdXCJ9LGgua2V5cz1mdW5jdGlvbih0KXt2YXIgZT1bXTtmb3IodmFyIHIgaW4gdCllLnB1c2gocik7cmV0dXJuIGUucmV2ZXJzZSgpLGZ1bmN0aW9uIG5leHQoKXtmb3IoO2UubGVuZ3RoOyl7dmFyIHI9ZS5wb3AoKTtpZihyIGluIHQpcmV0dXJuIG5leHQudmFsdWU9cixuZXh0LmRvbmU9ITEsbmV4dH1yZXR1cm4gbmV4dC5kb25lPSEwLG5leHR9fSxoLnZhbHVlcz12YWx1ZXMsQ29udGV4dC5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOkNvbnRleHQscmVzZXQ6ZnVuY3Rpb24odCl7aWYodGhpcy5wcmV2PTAsdGhpcy5uZXh0PTAsdGhpcy5zZW50PXRoaXMuX3NlbnQ9ZSx0aGlzLmRvbmU9ITEsdGhpcy5kZWxlZ2F0ZT1udWxsLHRoaXMubWV0aG9kPVwibmV4dFwiLHRoaXMuYXJnPWUsdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSksIXQpZm9yKHZhciByIGluIHRoaXMpXCJ0XCI9PT1yLmNoYXJBdCgwKSYmbi5jYWxsKHRoaXMscikmJiFpc05hTigrci5zbGljZSgxKSkmJih0aGlzW3JdPWUpfSxzdG9wOmZ1bmN0aW9uKCl7dGhpcy5kb25lPSEwO3ZhciB0PXRoaXMudHJ5RW50cmllc1swXS5jb21wbGV0aW9uO2lmKFwidGhyb3dcIj09PXQudHlwZSl0aHJvdyB0LmFyZztyZXR1cm4gdGhpcy5ydmFsfSxkaXNwYXRjaEV4Y2VwdGlvbjpmdW5jdGlvbih0KXtpZih0aGlzLmRvbmUpdGhyb3cgdDt2YXIgcj10aGlzO2Z1bmN0aW9uIGhhbmRsZShuLG8pe3JldHVybiBhLnR5cGU9XCJ0aHJvd1wiLGEuYXJnPXQsci5uZXh0PW4sbyYmKHIubWV0aG9kPVwibmV4dFwiLHIuYXJnPWUpLCEhb31mb3IodmFyIG89dGhpcy50cnlFbnRyaWVzLmxlbmd0aC0xO28+PTA7LS1vKXt2YXIgaT10aGlzLnRyeUVudHJpZXNbb10sYT1pLmNvbXBsZXRpb247aWYoXCJyb290XCI9PT1pLnRyeUxvYylyZXR1cm4gaGFuZGxlKFwiZW5kXCIpO2lmKGkudHJ5TG9jPD10aGlzLnByZXYpe3ZhciBjPW4uY2FsbChpLFwiY2F0Y2hMb2NcIiksdT1uLmNhbGwoaSxcImZpbmFsbHlMb2NcIik7aWYoYyYmdSl7aWYodGhpcy5wcmV2PGkuY2F0Y2hMb2MpcmV0dXJuIGhhbmRsZShpLmNhdGNoTG9jLCEwKTtpZih0aGlzLnByZXY8aS5maW5hbGx5TG9jKXJldHVybiBoYW5kbGUoaS5maW5hbGx5TG9jKX1lbHNlIGlmKGMpe2lmKHRoaXMucHJldjxpLmNhdGNoTG9jKXJldHVybiBoYW5kbGUoaS5jYXRjaExvYywhMCl9ZWxzZXtpZighdSl0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtpZih0aGlzLnByZXY8aS5maW5hbGx5TG9jKXJldHVybiBoYW5kbGUoaS5maW5hbGx5TG9jKX19fX0sYWJydXB0OmZ1bmN0aW9uKHQsZSl7Zm9yKHZhciByPXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTtyPj0wOy0tcil7dmFyIG89dGhpcy50cnlFbnRyaWVzW3JdO2lmKG8udHJ5TG9jPD10aGlzLnByZXYmJm4uY2FsbChvLFwiZmluYWxseUxvY1wiKSYmdGhpcy5wcmV2PG8uZmluYWxseUxvYyl7dmFyIGk9bzticmVha319aSYmKFwiYnJlYWtcIj09PXR8fFwiY29udGludWVcIj09PXQpJiZpLnRyeUxvYzw9ZSYmZTw9aS5maW5hbGx5TG9jJiYoaT1udWxsKTt2YXIgYT1pP2kuY29tcGxldGlvbjp7fTtyZXR1cm4gYS50eXBlPXQsYS5hcmc9ZSxpPyh0aGlzLm1ldGhvZD1cIm5leHRcIix0aGlzLm5leHQ9aS5maW5hbGx5TG9jLHApOnRoaXMuY29tcGxldGUoYSl9LGNvbXBsZXRlOmZ1bmN0aW9uKHQsZSl7aWYoXCJ0aHJvd1wiPT09dC50eXBlKXRocm93IHQuYXJnO3JldHVyblwiYnJlYWtcIj09PXQudHlwZXx8XCJjb250aW51ZVwiPT09dC50eXBlP3RoaXMubmV4dD10LmFyZzpcInJldHVyblwiPT09dC50eXBlPyh0aGlzLnJ2YWw9dGhpcy5hcmc9dC5hcmcsdGhpcy5tZXRob2Q9XCJyZXR1cm5cIix0aGlzLm5leHQ9XCJlbmRcIik6XCJub3JtYWxcIj09PXQudHlwZSYmZSYmKHRoaXMubmV4dD1lKSxwfSxmaW5pc2g6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTtlPj0wOy0tZSl7dmFyIHI9dGhpcy50cnlFbnRyaWVzW2VdO2lmKHIuZmluYWxseUxvYz09PXQpcmV0dXJuIHRoaXMuY29tcGxldGUoci5jb21wbGV0aW9uLHIuYWZ0ZXJMb2MpLHJlc2V0VHJ5RW50cnkocikscH19LGNhdGNoOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLnRyeUVudHJpZXMubGVuZ3RoLTE7ZT49MDstLWUpe3ZhciByPXRoaXMudHJ5RW50cmllc1tlXTtpZihyLnRyeUxvYz09PXQpe3ZhciBuPXIuY29tcGxldGlvbjtpZihcInRocm93XCI9PT1uLnR5cGUpe3ZhciBvPW4uYXJnO3Jlc2V0VHJ5RW50cnkocil9cmV0dXJuIG99fXRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKX0sZGVsZWdhdGVZaWVsZDpmdW5jdGlvbih0LHIsbil7cmV0dXJuIHRoaXMuZGVsZWdhdGU9e2l0ZXJhdG9yOnZhbHVlcyh0KSxyZXN1bHROYW1lOnIsbmV4dExvYzpufSxcIm5leHRcIj09PXRoaXMubWV0aG9kJiYodGhpcy5hcmc9ZSkscH19fWZ1bmN0aW9uIHdyYXAodCxlLHIsbil7dmFyIG89ZSYmZS5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3I/ZTpHZW5lcmF0b3IsaT1PYmplY3QuY3JlYXRlKG8ucHJvdG90eXBlKSxhPW5ldyBDb250ZXh0KG58fFtdKTtyZXR1cm4gaS5faW52b2tlPWZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QodCxlLHIpe3ZhciBuPXM7cmV0dXJuIGZ1bmN0aW9uIGludm9rZShvLGkpe2lmKG49PT1mKXRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7aWYobj09PXkpe2lmKFwidGhyb3dcIj09PW8pdGhyb3cgaTtyZXR1cm4gZG9uZVJlc3VsdCgpfWZvcihyLm1ldGhvZD1vLHIuYXJnPWk7Oyl7dmFyIGE9ci5kZWxlZ2F0ZTtpZihhKXt2YXIgYz1tYXliZUludm9rZURlbGVnYXRlKGEscik7aWYoYyl7aWYoYz09PXApY29udGludWU7cmV0dXJuIGN9fWlmKFwibmV4dFwiPT09ci5tZXRob2Qpci5zZW50PXIuX3NlbnQ9ci5hcmc7ZWxzZSBpZihcInRocm93XCI9PT1yLm1ldGhvZCl7aWYobj09PXMpdGhyb3cgbj15LHIuYXJnO3IuZGlzcGF0Y2hFeGNlcHRpb24oci5hcmcpfWVsc2VcInJldHVyblwiPT09ci5tZXRob2QmJnIuYWJydXB0KFwicmV0dXJuXCIsci5hcmcpO249Zjt2YXIgdT10cnlDYXRjaCh0LGUscik7aWYoXCJub3JtYWxcIj09PXUudHlwZSl7aWYobj1yLmRvbmU/eTpsLHUuYXJnPT09cCljb250aW51ZTtyZXR1cm57dmFsdWU6dS5hcmcsZG9uZTpyLmRvbmV9fVwidGhyb3dcIj09PXUudHlwZSYmKG49eSxyLm1ldGhvZD1cInRocm93XCIsci5hcmc9dS5hcmcpfX19KHQscixhKSxpfWZ1bmN0aW9uIHRyeUNhdGNoKHQsZSxyKXt0cnl7cmV0dXJue3R5cGU6XCJub3JtYWxcIixhcmc6dC5jYWxsKGUscil9fWNhdGNoKHQpe3JldHVybnt0eXBlOlwidGhyb3dcIixhcmc6dH19fWZ1bmN0aW9uIEdlbmVyYXRvcigpe31mdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpe31mdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpe31mdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHModCl7W1wibmV4dFwiLFwidGhyb3dcIixcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3RbZV09ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX2ludm9rZShlLHQpfX0pfWZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZSl7ZnVuY3Rpb24gaW52b2tlKHQscixvLGkpe3ZhciBhPXRyeUNhdGNoKGVbdF0sZSxyKTtpZihcInRocm93XCIhPT1hLnR5cGUpe3ZhciBjPWEuYXJnLHU9Yy52YWx1ZTtyZXR1cm4gdSYmXCJvYmplY3RcIj09dHlwZW9mIHUmJm4uY2FsbCh1LFwiX19hd2FpdFwiKT9Qcm9taXNlLnJlc29sdmUodS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHQpe2ludm9rZShcIm5leHRcIix0LG8saSl9LGZ1bmN0aW9uKHQpe2ludm9rZShcInRocm93XCIsdCxvLGkpfSk6UHJvbWlzZS5yZXNvbHZlKHUpLnRoZW4oZnVuY3Rpb24odCl7Yy52YWx1ZT10LG8oYyl9LGkpfWkoYS5hcmcpfXZhciByO1wib2JqZWN0XCI9PXR5cGVvZiB0LnByb2Nlc3MmJnQucHJvY2Vzcy5kb21haW4mJihpbnZva2U9dC5wcm9jZXNzLmRvbWFpbi5iaW5kKGludm9rZSkpLHRoaXMuX2ludm9rZT1mdW5jdGlvbiBlbnF1ZXVlKHQsZSl7ZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKXtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocixuKXtpbnZva2UodCxlLHIsbil9KX1yZXR1cm4gcj1yP3IudGhlbihjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyk6Y2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKX19ZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZSh0LHIpe3ZhciBuPXQuaXRlcmF0b3Jbci5tZXRob2RdO2lmKG49PT1lKXtpZihyLmRlbGVnYXRlPW51bGwsXCJ0aHJvd1wiPT09ci5tZXRob2Qpe2lmKHQuaXRlcmF0b3IucmV0dXJuJiYoci5tZXRob2Q9XCJyZXR1cm5cIixyLmFyZz1lLG1heWJlSW52b2tlRGVsZWdhdGUodCxyKSxcInRocm93XCI9PT1yLm1ldGhvZCkpcmV0dXJuIHA7ci5tZXRob2Q9XCJ0aHJvd1wiLHIuYXJnPW5ldyBUeXBlRXJyb3IoXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpfXJldHVybiBwfXZhciBvPXRyeUNhdGNoKG4sdC5pdGVyYXRvcixyLmFyZyk7aWYoXCJ0aHJvd1wiPT09by50eXBlKXJldHVybiByLm1ldGhvZD1cInRocm93XCIsci5hcmc9by5hcmcsci5kZWxlZ2F0ZT1udWxsLHA7dmFyIGk9by5hcmc7cmV0dXJuIGk/aS5kb25lPyhyW3QucmVzdWx0TmFtZV09aS52YWx1ZSxyLm5leHQ9dC5uZXh0TG9jLFwicmV0dXJuXCIhPT1yLm1ldGhvZCYmKHIubWV0aG9kPVwibmV4dFwiLHIuYXJnPWUpLHIuZGVsZWdhdGU9bnVsbCxwKTppOihyLm1ldGhvZD1cInRocm93XCIsci5hcmc9bmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpLHIuZGVsZWdhdGU9bnVsbCxwKX1mdW5jdGlvbiBwdXNoVHJ5RW50cnkodCl7dmFyIGU9e3RyeUxvYzp0WzBdfTsxIGluIHQmJihlLmNhdGNoTG9jPXRbMV0pLDIgaW4gdCYmKGUuZmluYWxseUxvYz10WzJdLGUuYWZ0ZXJMb2M9dFszXSksdGhpcy50cnlFbnRyaWVzLnB1c2goZSl9ZnVuY3Rpb24gcmVzZXRUcnlFbnRyeSh0KXt2YXIgZT10LmNvbXBsZXRpb258fHt9O2UudHlwZT1cIm5vcm1hbFwiLGRlbGV0ZSBlLmFyZyx0LmNvbXBsZXRpb249ZX1mdW5jdGlvbiBDb250ZXh0KHQpe3RoaXMudHJ5RW50cmllcz1be3RyeUxvYzpcInJvb3RcIn1dLHQuZm9yRWFjaChwdXNoVHJ5RW50cnksdGhpcyksdGhpcy5yZXNldCghMCl9ZnVuY3Rpb24gdmFsdWVzKHQpe2lmKHQpe3ZhciByPXRbaV07aWYocilyZXR1cm4gci5jYWxsKHQpO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHQubmV4dClyZXR1cm4gdDtpZighaXNOYU4odC5sZW5ndGgpKXt2YXIgbz0tMSxhPWZ1bmN0aW9uIG5leHQoKXtmb3IoOysrbzx0Lmxlbmd0aDspaWYobi5jYWxsKHQsbykpcmV0dXJuIG5leHQudmFsdWU9dFtvXSxuZXh0LmRvbmU9ITEsbmV4dDtyZXR1cm4gbmV4dC52YWx1ZT1lLG5leHQuZG9uZT0hMCxuZXh0fTtyZXR1cm4gYS5uZXh0PWF9fXJldHVybntuZXh0OmRvbmVSZXN1bHR9fWZ1bmN0aW9uIGRvbmVSZXN1bHQoKXtyZXR1cm57dmFsdWU6ZSxkb25lOiEwfX19KFwib2JqZWN0XCI9PXR5cGVvZiBnbG9iYWw/Z2xvYmFsOlwib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3c/d2luZG93Olwib2JqZWN0XCI9PXR5cGVvZiBzZWxmP3NlbGY6dGhpcyk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbkoxYm5ScGJXVXVhbk1pWFN3aWJtRnRaWE1pT2xzaVoyeHZZbUZzSWl3aWRXNWtaV1pwYm1Wa0lpd2lUM0FpTENKUFltcGxZM1FpTENKd2NtOTBiM1I1Y0dVaUxDSm9ZWE5QZDI0aUxDSm9ZWE5QZDI1UWNtOXdaWEowZVNJc0lpUlRlVzFpYjJ3aUxDSlRlVzFpYjJ3aUxDSnBkR1Z5WVhSdmNsTjViV0p2YkNJc0ltbDBaWEpoZEc5eUlpd2lZWE41Ym1OSmRHVnlZWFJ2Y2xONWJXSnZiQ0lzSW1GemVXNWpTWFJsY21GMGIzSWlMQ0owYjFOMGNtbHVaMVJoWjFONWJXSnZiQ0lzSW5SdlUzUnlhVzVuVkdGbklpd2lhVzVOYjJSMWJHVWlMQ0p0YjJSMWJHVWlMQ0p5ZFc1MGFXMWxJaXdpY21WblpXNWxjbUYwYjNKU2RXNTBhVzFsSWl3aVpYaHdiM0owY3lJc0luZHlZWEFpTENKSFpXNVRkR0YwWlZOMWMzQmxibVJsWkZOMFlYSjBJaXdpUjJWdVUzUmhkR1ZUZFhOd1pXNWtaV1JaYVdWc1pDSXNJa2RsYmxOMFlYUmxSWGhsWTNWMGFXNW5JaXdpUjJWdVUzUmhkR1ZEYjIxd2JHVjBaV1FpTENKRGIyNTBhVzUxWlZObGJuUnBibVZzSWl3aVNYUmxjbUYwYjNKUWNtOTBiM1I1Y0dVaUxDSjBhR2x6SWl3aVoyVjBVSEp2ZEc4aUxDSm5aWFJRY205MGIzUjVjR1ZQWmlJc0lrNWhkR2wyWlVsMFpYSmhkRzl5VUhKdmRHOTBlWEJsSWl3aWRtRnNkV1Z6SWl3aVkyRnNiQ0lzSWtkd0lpd2lSMlZ1WlhKaGRHOXlSblZ1WTNScGIyNVFjbTkwYjNSNWNHVWlMQ0pIWlc1bGNtRjBiM0lpTENKamNtVmhkR1VpTENKSFpXNWxjbUYwYjNKR2RXNWpkR2x2YmlJc0ltTnZibk4wY25WamRHOXlJaXdpWkdsemNHeGhlVTVoYldVaUxDSnBjMGRsYm1WeVlYUnZja1oxYm1OMGFXOXVJaXdpWjJWdVJuVnVJaXdpWTNSdmNpSXNJbTVoYldVaUxDSnRZWEpySWl3aWMyVjBVSEp2ZEc5MGVYQmxUMllpTENKZlgzQnliM1J2WDE4aUxDSmhkM0poY0NJc0ltRnlaeUlzSWw5ZllYZGhhWFFpTENKa1pXWnBibVZKZEdWeVlYUnZjazFsZEdodlpITWlMQ0pCYzNsdVkwbDBaWEpoZEc5eUlpd2lZWE41Ym1NaUxDSnBibTVsY2tadUlpd2liM1YwWlhKR2JpSXNJbk5sYkdZaUxDSjBjbmxNYjJOelRHbHpkQ0lzSW1sMFpYSWlMQ0p1WlhoMElpd2lkR2hsYmlJc0luSmxjM1ZzZENJc0ltUnZibVVpTENKMllXeDFaU0lzSW5SdlUzUnlhVzVuSWl3aWEyVjVjeUlzSW05aWFtVmpkQ0lzSW10bGVTSXNJbkIxYzJnaUxDSnlaWFpsY25ObElpd2liR1Z1WjNSb0lpd2ljRzl3SWl3aVEyOXVkR1Y0ZENJc0luSmxjMlYwSWl3aWMydHBjRlJsYlhCU1pYTmxkQ0lzSW5CeVpYWWlMQ0p6Wlc1MElpd2lYM05sYm5RaUxDSmtaV3hsWjJGMFpTSXNJbTFsZEdodlpDSXNJblJ5ZVVWdWRISnBaWE1pTENKbWIzSkZZV05vSWl3aWNtVnpaWFJVY25sRmJuUnllU0lzSW1Ob1lYSkJkQ0lzSW1selRtRk9JaXdpYzJ4cFkyVWlMQ0p6ZEc5d0lpd2ljbTl2ZEZKbFkyOXlaQ0lzSW1OdmJYQnNaWFJwYjI0aUxDSjBlWEJsSWl3aWNuWmhiQ0lzSW1ScGMzQmhkR05vUlhoalpYQjBhVzl1SWl3aVpYaGpaWEIwYVc5dUlpd2lZMjl1ZEdWNGRDSXNJbWhoYm1Sc1pTSXNJbXh2WXlJc0ltTmhkV2RvZENJc0luSmxZMjl5WkNJc0lta2lMQ0psYm5SeWVTSXNJblJ5ZVV4dll5SXNJbWhoYzBOaGRHTm9JaXdpYUdGelJtbHVZV3hzZVNJc0ltTmhkR05vVEc5aklpd2labWx1WVd4c2VVeHZZeUlzSWtWeWNtOXlJaXdpWVdKeWRYQjBJaXdpWm1sdVlXeHNlVVZ1ZEhKNUlpd2lZMjl0Y0d4bGRHVWlMQ0poWm5SbGNreHZZeUlzSW1acGJtbHphQ0lzSW1OaGRHTm9JaXdpZEdoeWIzZHVJaXdpWkdWc1pXZGhkR1ZaYVdWc1pDSXNJbWwwWlhKaFlteGxJaXdpY21WemRXeDBUbUZ0WlNJc0ltNWxlSFJNYjJNaUxDSndjbTkwYjBkbGJtVnlZWFJ2Y2lJc0ltZGxibVZ5WVhSdmNpSXNJbDlwYm5admEyVWlMQ0p0WVd0bFNXNTJiMnRsVFdWMGFHOWtJaXdpYzNSaGRHVWlMQ0pwYm5admEyVWlMQ0prYjI1bFVtVnpkV3gwSWl3aVpHVnNaV2RoZEdWU1pYTjFiSFFpTENKdFlYbGlaVWx1ZG05clpVUmxiR1ZuWVhSbElpd2lkSEo1UTJGMFkyZ2lMQ0ptYmlJc0ltOWlhaUlzSW1WeWNpSXNJbkpsYzI5c2RtVWlMQ0p5WldwbFkzUWlMQ0pRY205dGFYTmxJaXdpZFc1M2NtRndjR1ZrSWl3aWNISmxkbWx2ZFhOUWNtOXRhWE5sSWl3aWNISnZZMlZ6Y3lJc0ltUnZiV0ZwYmlJc0ltSnBibVFpTENKbGJuRjFaWFZsSWl3aVkyRnNiRWx1ZG05clpWZHBkR2hOWlhSb2IyUkJibVJCY21jaUxDSnlaWFIxY200aUxDSlVlWEJsUlhKeWIzSWlMQ0pwYm1adklpd2ljSFZ6YUZSeWVVVnVkSEo1SWl3aWJHOWpjeUlzSW1sMFpYSmhkRzl5VFdWMGFHOWtJaXdpZDJsdVpHOTNJbDBzSW0xaGNIQnBibWR6SWpvaVEwRlZReXhUUVVGVlFTeEhRVU5VTEdGQlJVRXNTVUZGU1VNc1JVRkdRVU1zUlVGQlMwTXNUMEZCVDBNc1ZVRkRXa01zUlVGQlUwZ3NSVUZCUjBrc1pVRkZXa01zUlVGQk5FSXNiVUpCUVZoRExFOUJRWGRDUVN4UFFVRlRMRWRCUTJ4RVF5eEZRVUZwUWtZc1JVRkJVVWNzVlVGQldTeGhRVU55UTBNc1JVRkJjMEpLTEVWQlFWRkxMR1ZCUVdsQ0xHdENRVU12UTBNc1JVRkJiMEpPTEVWQlFWRlBMR0ZCUVdVc1owSkJSVE5EUXl4RlFVRTJRaXhwUWtGQldFTXNUMEZEYkVKRExFVkJRVlZxUWl4RlFVRlBhMElzYlVKQlEzSkNMRWRCUVVsRUxFVkJRMFZHTEVsQlIwWkRMRTlCUVU5SExGRkJRVlZHTEU5QlNuSkNMRVZCWVVGQkxFVkJRVlZxUWl4RlFVRlBhMElzYlVKQlFYRkNTQ3hGUVVGWFF5eFBRVUZQUnl4UlFVRlZMRWxCWXpGRVF5eExRVUZQUVN4TFFXOUNaaXhKUVVGSlF5eEZRVUY1UWl4cFFrRkRla0pETEVWQlFYbENMR2xDUVVONlFrTXNSVUZCYjBJc1dVRkRjRUpETEVWQlFXOUNMRmxCU1hCQ1F5eEZRVUZ0UWl4SFFWbHVRa01zUlVGQmIwSXNSMEZEZUVKQkxFVkJRV3RDYWtJc1IwRkJhMElzVjBGRGJFTXNUMEZCVDJ0Q0xFMUJSMVFzU1VGQlNVTXNSVUZCVjNwQ0xFOUJRVTh3UWl4bFFVTnNRa01zUlVGQk1FSkdMRWRCUVZsQkxFVkJRVk5CTEVWQlFWTkhMRTlCUVU4c1RVRkRMMFJFTEVkQlEwRkJMRWxCUVRSQ05VSXNSMEZETlVKSExFVkJRVTh5UWl4TFFVRkxSaXhGUVVGNVFuSkNMRXRCUjNaRGFVSXNSVUZCYjBKSkxFZEJSM1JDTEVsQlFVbEhMRVZCUVV0RExESkNRVUV5UWpsQ0xGVkJRMnhESzBJc1ZVRkJWUzlDTEZWQlFWbEVMRTlCUVU5cFF5eFBRVUZQVml4SFFVTjBRMWNzYTBKQlFXdENha01zVlVGQldUWkNMRVZCUVVkTExGbEJRV05LTERKQ1FVTXZRMEVzTWtKQlFUSkNTU3haUVVGalJDeHJRa0ZEZWtOSUxESkNRVUV5UW5KQ0xFZEJRM3BDZDBJc2EwSkJRV3RDUlN4WlFVRmpMRzlDUVZsc1EzUkNMRVZCUVZGMVFpeHZRa0ZCYzBJc1UwRkJVME1zUjBGRGNrTXNTVUZCU1VNc1JVRkJlVUlzYlVKQlFWaEVMRWRCUVhsQ1FTeEZRVUZQU0N4WlFVTnNSQ3hSUVVGUFNTeEpRVU5JUVN4SlFVRlRUQ3h0UWtGSE1rSXNkVUpCUVc1RFN5eEZRVUZMU0N4aFFVRmxSeXhGUVVGTFF5eFJRVWxvUXpGQ0xFVkJRVkV5UWl4TFFVRlBMRk5CUVZOSUxFZEJWWFJDTEU5QlZFbDBReXhQUVVGUE1FTXNaVUZEVkRGRExFOUJRVTh3UXl4bFFVRmxTaXhGUVVGUlVDdzJRa0ZGT1VKUExFVkJRVTlMTEZWQlFWbGFMREpDUVVOaWNrSXNTMEZCY1VJMFFpeEpRVU42UWtFc1JVRkJUelZDTEVkQlFYRkNMSE5DUVVkb1F6UkNMRVZCUVU5eVF5eFZRVUZaUkN4UFFVRlBhVU1zVDBGQlQwZ3NSMEZETVVKUkxFZEJUMVI0UWl4RlFVRlJPRUlzVFVGQlVTeFRRVUZUUXl4SFFVTjJRaXhOUVVGUExFTkJRVVZETEZGQlFWTkVMRWxCYTBad1FrVXNjMEpCUVhOQ1F5eGpRVUZqTDBNc1YwRkRjRU1yUXl4alFVRmpMME1zVlVGQlZVOHNSMEZCZFVJc1YwRkROME1zVDBGQlQyZENMRTFCUlZSV0xFVkJRVkZyUXl4alFVRm5Ra0VzWTBGTGVFSnNReXhGUVVGUmJVTXNUVUZCVVN4VFFVRlRReXhGUVVGVFF5eEZRVUZUUXl4RlFVRk5ReXhIUVVNdlF5eEpRVUZKUXl4RlFVRlBMRWxCUVVsT0xHTkJRMkl2UWl4TFFVRkxhVU1zUlVGQlUwTXNSVUZCVTBNc1JVRkJUVU1zU1VGSEwwSXNUMEZCVDNaRExFVkJRVkYxUWl4dlFrRkJiMEpqTEVkQlF5OUNSeXhGUVVOQlFTeEZRVUZMUXl4UFFVRlBReXhMUVVGTExGTkJRVk5ETEVkQlEzaENMRTlCUVU5QkxFVkJRVTlETEV0QlFVOUVMRVZCUVU5RkxFMUJRVkZNTEVWQlFVdERMRlZCYzB0cVJGSXNjMEpCUVhOQ2FrSXNSMEZGZEVKQkxFVkJRVWR3UWl4SFFVRnhRaXhaUVU5NFFtOUNMRVZCUVVkNFFpeEhRVUZyUWl4WFFVTnVRaXhQUVVGUGEwSXNUVUZIVkUwc1JVRkJSemhDTEZOQlFWY3NWMEZEV2l4TlFVRlBMSE5DUVd0RFZEbERMRVZCUVZFclF5eExRVUZQTEZOQlFWTkRMRWRCUTNSQ0xFbEJRVWxFTEVWQlFVOHNSMEZEV0N4SlFVRkxMRWxCUVVsRkxFdEJRVTlFTEVWQlEyUkVMRVZCUVV0SExFdEJRVXRFTEVkQlRWb3NUMEZLUVVZc1JVRkJTMGtzVlVGSlJTeFRRVUZUVml4UFFVTmtMRXRCUVU5TkxFVkJRVXRMTEZGQlFWRXNRMEZEYkVJc1NVRkJTVWdzUlVGQlRVWXNSVUZCUzAwc1RVRkRaaXhIUVVGSlNpeExRVUZQUkN4RlFVZFVMRTlCUmtGUUxFdEJRVXRKTEUxQlFWRkpMRVZCUTJKU0xFdEJRVXRITEUxQlFVOHNSVUZEVEVnc1MwRlJXQ3hQUVVSQlFTeExRVUZMUnl4TlFVRlBMRVZCUTB4SUxFOUJjME5ZZWtNc1JVRkJVV01zVDBGQlUwRXNUMEZOYWtKM1F5eFJRVUZSYmtVc1ZVRkJXU3hEUVVOc1FtdERMRmxCUVdGcFF5eFJRVVZpUXl4TlFVRlBMRk5CUVZORExFZEJZMlFzUjBGaVFUbERMRXRCUVVzclF5eExRVUZQTEVWQlExb3ZReXhMUVVGTEswSXNTMEZCVHl4RlFVZGFMMElzUzBGQlMyZEVMRXRCUVU5b1JDeExRVUZMYVVRc1RVRkJVVE5GTEVWQlEzcENNRUlzUzBGQlMydERMRTFCUVU4c1JVRkRXbXhETEV0QlFVdHJSQ3hUUVVGWExFdEJSV2hDYkVRc1MwRkJTMjFFTEU5QlFWTXNUMEZEWkc1RUxFdEJRVXR4UWl4SlFVRk5MME1zUlVGRldEQkNMRXRCUVV0dlJDeFhRVUZYUXl4UlFVRlJReXhuUWtGRmJrSlNMRVZCUTBnc1NVRkJTeXhKUVVGSk9VSXNTMEZCVVdoQ0xFdEJSVkVzVFVGQmJrSm5RaXhGUVVGTGRVTXNUMEZCVHl4SlFVTmFOMFVzUlVGQlR6SkNMRXRCUVV0TUxFdEJRVTFuUWl4TFFVTnFRbmRETEU5QlFVOTRReXhGUVVGTGVVTXNUVUZCVFN4TlFVTnlRbnBFTEV0QlFVdG5RaXhIUVVGUk1VTXNTVUZOY2tKdlJpeExRVUZOTEZkQlEwb3hSQ3hMUVVGTGEwTXNUVUZCVHl4RlFVVmFMRWxCUTBsNVFpeEZRVVJaTTBRc1MwRkJTMjlFTEZkQlFWY3NSMEZEVEZFc1YwRkRNMElzUjBGQmQwSXNWVUZCY0VKRUxFVkJRVmRGTEV0QlEySXNUVUZCVFVZc1JVRkJWM1JETEVsQlIyNUNMRTlCUVU5eVFpeExRVUZMT0VRc1RVRkhaRU1zYTBKQlFXMUNMRk5CUVZORExFZEJRekZDTEVkQlFVbG9SU3hMUVVGTGEwTXNTMEZEVUN4TlFVRk5PRUlzUlVGSFVpeEpRVUZKUXl4RlFVRlZha1VzUzBGRFpDeFRRVUZUYTBVc1QwRkJUME1zUlVGQlMwTXNSMEZaYmtJc1QwRllRVU1zUlVGQlQxSXNTMEZCVHl4UlFVTmtVU3hGUVVGUGFFUXNTVUZCVFRKRExFVkJRMkpETEVWQlFWRnNReXhMUVVGUGIwTXNSVUZGV0VNc1NVRkhSa2dzUlVGQlVXUXNUMEZCVXl4UFFVTnFRbU1zUlVGQlVUVkRMRWxCUVUwdlF5eExRVWRPT0VZc1JVRkhXaXhKUVVGTExFbEJRVWxGTEVWQlFVbDBSU3hMUVVGTGIwUXNWMEZCVjFZc1QwRkJVeXhGUVVGSE5FSXNSMEZCU3l4SlFVRkxRU3hGUVVGSExFTkJRM0JFTEVsQlFVbERMRVZCUVZGMlJTeExRVUZMYjBRc1YwRkJWMnRDTEVkQlEzaENSQ3hGUVVGVFJTeEZRVUZOV0N4WFFVVnVRaXhIUVVGeFFpeFRRVUZxUWxjc1JVRkJUVU1zVDBGSlVpeFBRVUZQVGl4UFFVRlBMRTlCUjJoQ0xFZEJRVWxMTEVWQlFVMURMRkZCUVZWNFJTeExRVUZMSzBNc1MwRkJUU3hEUVVNM1FpeEpRVUZKTUVJc1JVRkJWeTlHTEVWQlFVOHlRaXhMUVVGTGEwVXNSVUZCVHl4WlFVTTVRa2NzUlVGQllXaEhMRVZCUVU4eVFpeExRVUZMYTBVc1JVRkJUeXhqUVVWd1F5eEhRVUZKUlN4SFFVRlpReXhGUVVGWkxFTkJRekZDTEVkQlFVa3hSU3hMUVVGTEswTXNTMEZCVDNkQ0xFVkJRVTFKTEZOQlEzQkNMRTlCUVU5VUxFOUJRVTlMTEVWQlFVMUpMRlZCUVZVc1IwRkRla0lzUjBGQlNUTkZMRXRCUVVzclF5eExRVUZQZDBJc1JVRkJUVXNzVjBGRE0wSXNUMEZCVDFZc1QwRkJUMHNzUlVGQlRVc3NhVUpCUjJwQ0xFZEJRVWxJTEVkQlExUXNSMEZCU1hwRkxFdEJRVXNyUXl4TFFVRlBkMElzUlVGQlRVa3NVMEZEY0VJc1QwRkJUMVFzVDBGQlQwc3NSVUZCVFVrc1ZVRkJWU3hQUVVjelFpeERRVUZCTEVsQlFVbEVMRVZCVFZRc1RVRkJUU3hKUVVGSlJ5eE5RVUZOTERCRFFVeG9RaXhIUVVGSk4wVXNTMEZCU3l0RExFdEJRVTkzUWl4RlFVRk5TeXhYUVVOd1FpeFBRVUZQVml4UFFVRlBTeXhGUVVGTlN5eG5Ra0ZWT1VKRkxFOUJRVkVzVTBGQlUycENMRVZCUVUxNFF5eEhRVU55UWl4SlFVRkxMRWxCUVVscFJDeEZRVUZKZEVVc1MwRkJTMjlFTEZkQlFWZFdMRTlCUVZNc1JVRkJSelJDTEVkQlFVc3NTVUZCUzBFc1JVRkJSeXhEUVVOd1JDeEpRVUZKUXl4RlFVRlJka1VzUzBGQlMyOUVMRmRCUVZkclFpeEhRVU0xUWl4SFFVRkpReXhGUVVGTlF5eFJRVUZWZUVVc1MwRkJTeXRETEUxQlEzSkNja1VzUlVGQlR6SkNMRXRCUVV0clJTeEZRVUZQTEdWQlEyNUNka1VzUzBGQlN5dERMRXRCUVU5M1FpeEZRVUZOU3l4WFFVRlpMRU5CUTJoRExFbEJRVWxITEVWQlFXVlNMRVZCUTI1Q0xFOUJTVUZSTEVsQlExVXNWVUZCVkd4Q0xFZEJRMU1zWVVGQlZFRXNTVUZEUkd0Q0xFVkJRV0ZRTEZGQlFWVnVSQ3hIUVVOMlFrRXNSMEZCVHpCRUxFVkJRV0ZJTEdGQlIzUkNSeXhGUVVGbExFMUJSMnBDTEVsQlFVbFdMRVZCUVZOVkxFVkJRV1ZCTEVWQlFXRnVRaXhYUVVGaExFZEJTWFJFTEU5QlNFRlRMRVZCUVU5U0xFdEJRVTlCTEVWQlEyUlJMRVZCUVU5b1JDeEpRVUZOUVN4RlFVVlVNRVFzUjBGRFJpOUZMRXRCUVV0dFJDeFBRVUZUTEU5QlEyUnVSQ3hMUVVGTEswSXNTMEZCVDJkRUxFVkJRV0ZJTEZkQlEyeENPVVVzUjBGSFJrVXNTMEZCUzJkR0xGTkJRVk5ZTEVsQlIzWkNWeXhUUVVGVkxGTkJRVk5ZTEVWQlFWRlpMRWRCUTNwQ0xFZEJRVzlDTEZWQlFXaENXaXhGUVVGUFVpeExRVU5VTEUxQlFVMVJMRVZCUVU5b1JDeEpRV05tTEUxQldHOUNMRlZCUVdoQ1owUXNSVUZCVDFJc1RVRkRVeXhoUVVGb1FsRXNSVUZCVDFJc1MwRkRWRGRFTEV0QlFVc3JRaXhMUVVGUGMwTXNSVUZCVDJoRUxFbEJRMDBzVjBGQmFFSm5SQ3hGUVVGUFVpeE5RVU5vUWpkRUxFdEJRVXM0UkN4TFFVRlBPVVFzUzBGQlMzRkNMRWxCUVUxblJDeEZRVUZQYUVRc1NVRkRPVUp5UWl4TFFVRkxiVVFzVDBGQlV5eFRRVU5rYmtRc1MwRkJTeXRDTEV0QlFVOHNUMEZEWVN4WFFVRm9Rbk5ETEVWQlFVOVNMRTFCUVhGQ2IwSXNTVUZEY2tOcVJpeExRVUZMSzBJc1MwRkJUMnRFTEVkQlIxQnVSaXhIUVVkVWIwWXNUMEZCVVN4VFFVRlRUaXhIUVVObUxFbEJRVXNzU1VGQlNVNHNSVUZCU1hSRkxFdEJRVXR2UkN4WFFVRlhWaXhQUVVGVExFVkJRVWMwUWl4SFFVRkxMRWxCUVV0QkxFVkJRVWNzUTBGRGNFUXNTVUZCU1VNc1JVRkJVWFpGTEV0QlFVdHZSQ3hYUVVGWGEwSXNSMEZETlVJc1IwRkJTVU1zUlVGQlRVc3NZVUZCWlVFc1JVRkhka0lzVDBGR1FUVkZMRXRCUVV0blJpeFRRVUZUVkN4RlFVRk5XQ3hYUVVGWlZ5eEZRVUZOVlN4VlFVTjBRek5DTEdOQlFXTnBRaXhIUVVOUWVrVXNTVUZMWW5GR0xFMUJRVk1zVTBGQlUxZ3NSMEZEYUVJc1NVRkJTeXhKUVVGSlJpeEZRVUZKZEVVc1MwRkJTMjlFTEZkQlFWZFdMRTlCUVZNc1JVRkJSelJDTEVkQlFVc3NTVUZCUzBFc1JVRkJSeXhEUVVOd1JDeEpRVUZKUXl4RlFVRlJka1VzUzBGQlMyOUVMRmRCUVZkclFpeEhRVU0xUWl4SFFVRkpReXhGUVVGTlF5eFRRVUZYUVN4RlFVRlJMRU5CUXpOQ0xFbEJRVWxJTEVWQlFWTkZMRVZCUVUxWUxGZEJRMjVDTEVkQlFXOUNMRlZCUVdoQ1V5eEZRVUZQVWl4TFFVRnJRaXhEUVVNelFpeEpRVUZKZFVJc1JVRkJVMllzUlVGQlQyaEVMRWxCUTNCQ2FVTXNZMEZCWTJsQ0xFZEJSV2hDTEU5QlFVOWhMRWRCVFZnc1RVRkJUU3hKUVVGSlVDeE5RVUZOTERCQ1FVZHNRbEVzWTBGQlpTeFRRVUZUUXl4RlFVRlZReXhGUVVGWlF5eEhRV0UxUXl4UFFWcEJlRVlzUzBGQlMydEVMRk5CUVZjc1EwRkRaRzVGTEZOQlFWVnhRaXhQUVVGUGEwWXNSMEZEYWtKRExGZEJRVmxCTEVWQlExcERMRkZCUVZOQkxFZEJSMU1zVTBGQmFFSjRSaXhMUVVGTGJVUXNVMEZIVUc1RUxFdEJRVXR4UWl4SlFVRk5MME1zUjBGSFRuZENMRWxCTDNGQ1dDeFRRVUZUVEN4TFFVRkxhVU1zUlVGQlUwTXNSVUZCVTBNc1JVRkJUVU1zUjBGRmNFTXNTVUZCU1RSRUxFVkJRV2xDT1VRc1IwRkJWMEVzUlVGQlVXeEVMSEZDUVVGeFFpdENMRlZCUVZsdFFpeEZRVUZWYmtJc1ZVRkRMMFZyUml4RlFVRlpiRWdzVDBGQlQybERMRTlCUVU5blJpeEZRVUZsYUVnc1YwRkRla04zUml4RlFVRlZMRWxCUVVseVFpeFJRVUZSWml4SFFVRmxMRWxCVFhwRExFOUJSa0UyUkN4RlFVRlZReXhSUVRoTldpeFRRVUZUUXl4cFFrRkJhVUpzUlN4RlFVRlRSU3hGUVVGTmNVTXNSMEZEZGtNc1NVRkJTVFJDTEVWQlFWRnVSeXhGUVVWYUxFOUJRVThzVTBGQlUyOUhMRTlCUVU4elF5eEZRVUZST1VJc1IwRkROMElzUjBGQlNYZEZMRWxCUVZWcVJ5eEZRVU5hTEUxQlFVMHNTVUZCU1dsR0xFMUJRVTBzWjBOQlIyeENMRWRCUVVsblFpeEpRVUZWYUVjc1JVRkJiVUlzUTBGREwwSXNSMEZCWlN4VlFVRlljMFFzUlVGRFJpeE5RVUZOT1VJc1JVRkxVaXhQUVVGUE1FVXNZVUZOVkN4SlFVaEJPVUlzUlVGQlVXUXNUMEZCVTBFc1JVRkRha0pqTEVWQlFWRTFReXhKUVVGTlFTeEpRVVZFTEVOQlExZ3NTVUZCU1RaQ0xFVkJRVmRsTEVWQlFWRm1MRk5CUTNaQ0xFZEJRVWxCTEVWQlFWVXNRMEZEV2l4SlFVRkpPRU1zUlVGQmFVSkRMRzlDUVVGdlFpOURMRVZCUVZWbExFZEJRMjVFTEVkQlFVa3JRaXhGUVVGblFpeERRVU5zUWl4SFFVRkpRU3hKUVVGdFFteEhMRVZCUVd0Q0xGTkJRM3BETEU5QlFVOXJSeXhIUVVsWUxFZEJRWFZDTEZOQlFXNUNMMElzUlVGQlVXUXNUMEZIVm1Nc1JVRkJVV3BDTEV0QlFVOXBRaXhGUVVGUmFFSXNUVUZCVVdkQ0xFVkJRVkUxUXl4VFFVVnNReXhIUVVGMVFpeFZRVUZ1UWpSRExFVkJRVkZrTEU5QlFXOUNMRU5CUTNKRExFZEJRVWt3UXl4SlFVRlZia2NzUlVGRldpeE5RVVJCYlVjc1JVRkJVV2hITEVWQlEwWnZSU3hGUVVGUk5VTXNTVUZIYUVJMFF5eEZRVUZSUml4clFrRkJhMEpGTEVWQlFWRTFReXhUUVVWT0xGZEJRVzVDTkVNc1JVRkJVV1FzVVVGRGFrSmpMRVZCUVZGaExFOUJRVThzVTBGQlZXSXNSVUZCVVRWRExFdEJSMjVEZDBVc1JVRkJVV3BITEVWQlJWSXNTVUZCU1hsRkxFVkJRVk0yUWl4VFFVRlRlRVVzUlVGQlUwVXNSVUZCVFhGRExFZEJRM0pETEVkQlFXOUNMRmRCUVdoQ1NTeEZRVUZQVWl4TFFVRnRRaXhEUVU4MVFpeEhRVXBCWjBNc1JVRkJVVFZDTEVWQlFWRXZRaXhMUVVOYWNrTXNSVUZEUVVZc1JVRkZRVEJGTEVWQlFVOW9SQ3hOUVVGUmRrSXNSVUZEYWtJc1UwRkhSaXhOUVVGUExFTkJRMHh4UXl4TlFVRlBhME1zUlVGQlQyaEVMRWxCUTJSaExFdEJRVTByUWl4RlFVRlJMMElzVFVGSFV5eFZRVUZvUW0xRExFVkJRVTlTTEU5QlEyaENaME1zUlVGQlVXaEhMRVZCUjFKdlJTeEZRVUZSWkN4UFFVRlRMRkZCUTJwQ1l5eEZRVUZSTlVNc1NVRkJUV2RFTEVWQlFVOW9SQ3hQUVhSU1VIVkZMRU5CUVdsQ2JFVXNSVUZCVTBVc1JVRkJUWEZETEVkQlJUZERlVUlzUlVGalZDeFRRVUZUVVN4VFFVRlRReXhGUVVGSlF5eEZRVUZMTDBVc1IwRkRla0lzU1VGRFJTeE5RVUZQTEVOQlFVVjNReXhMUVVGTkxGTkJRVlY0UXl4SlFVRkxPRVVzUlVGQlJ6bEdMRXRCUVVzclJpeEZRVUZMTDBVc1NVRkRNME1zVFVGQlQyZEdMRWRCUTFBc1RVRkJUeXhEUVVGRmVFTXNTMEZCVFN4UlFVRlRlRU1zU1VGQlMyZEdMRWxCYVVKcVF5eFRRVUZUTjBZc1lVRkRWQ3hUUVVGVFJTeHhRa0ZEVkN4VFFVRlRTQ3c0UWtFMFFsUXNVMEZCVTJkQ0xITkNRVUZ6UWpsRExFZEJRemRDTEVOQlFVTXNUMEZCVVN4UlFVRlRMRlZCUVZVMFJTeFJRVUZSTEZOQlFWTkdMRWRCUXpORE1VVXNSVUZCVlRCRkxFZEJRVlVzVTBGQlV6bENMRWRCUXpOQ0xFOUJRVTl5UWl4TFFVRkxNa1lzVVVGQlVYaERMRVZCUVZFNVFpeE5RVzlEYkVNc1UwRkJVMGNzWTBGQlkydEZMRWRCUTNKQ0xGTkJRVk5KTEU5QlFVOHpReXhGUVVGUk9VSXNSVUZCUzJsR0xFVkJRVk5ETEVkQlEzQkRMRWxCUVVsc1F5eEZRVUZUTmtJc1UwRkJVMUlzUlVGQlZYWkRMRWRCUVZOMVF5eEZRVUZYY2tVc1IwRkRjRVFzUjBGQmIwSXNWVUZCYUVKblJDeEZRVUZQVWl4TFFVVktMRU5CUTB3c1NVRkJTVFZDTEVWQlFWTnZReXhGUVVGUGFFUXNTVUZEYUVKakxFVkJRVkZHTEVWQlFVOUZMRTFCUTI1Q0xFOUJRVWxCTEVkQlEybENMR2xDUVVGV1FTeEhRVU5RZWtRc1JVRkJUekpDTEV0QlFVczRRaXhGUVVGUExGZEJRMlJ4UlN4UlFVRlJSaXhSUVVGUmJrVXNSVUZCVFdJc1UwRkJVMVVzUzBGQlN5eFRRVUZUUnl4SFFVTnNSREpFTEU5QlFVOHNUMEZCVVRORUxFVkJRVTl0UlN4RlFVRlRReXhKUVVNNVFpeFRRVUZUUml4SFFVTldVQ3hQUVVGUExGRkJRVk5QTEVWQlFVdERMRVZCUVZORExFdEJTVE5DUXl4UlFVRlJSaXhSUVVGUmJrVXNSMEZCVDBnc1MwRkJTeXhUUVVGVGVVVXNSMEZuUWpGRGVFVXNSVUZCVDBVc1RVRkJVWE5GTEVWQlEyWklMRVZCUVZGeVJTeEpRVU5RYzBVc1IwRm9RMGhCTEVWQlFVOXNReXhGUVVGUGFFUXNTMEYzUTJ4Q0xFbEJRVWx4Uml4RlFVb3dRaXhwUWtGQmJrSnlTU3hGUVVGUGMwa3NVMEZCZDBKMFNTeEZRVUZQYzBrc1VVRkJVVU1zVTBGRGRrUmtMRTlCUVZONlNDeEZRVUZQYzBrc1VVRkJVVU1zVDBGQlQwTXNTMEZCUzJZc1UwRnRRM1JET1VZc1MwRkJTekpHTEZGQk9VSk1MRk5CUVZOdFFpeFJRVUZSTTBRc1JVRkJVVGxDTEVkQlEzWkNMRk5CUVZNd1JpdzJRa0ZEVUN4UFFVRlBMRWxCUVVsUUxGRkJRVkVzVTBGQlUwWXNSVUZCVTBNc1IwRkRia05VTEU5QlFVOHpReXhGUVVGUk9VSXNSVUZCUzJsR0xFVkJRVk5ETEV0QlNXcERMRTlCUVU5SExFVkJZVXhCTEVWQlFXdENRU3hGUVVGblFqRkZMRXRCUTJoREswVXNNa0pCUjBGQkxEUkNRVU5GUVN3NFFrRXJSMVlzVTBGQlUyUXNiMEpCUVc5Q0wwTXNSVUZCVldVc1IwRkRja01zU1VGQlNXUXNSVUZCVTBRc1JVRkJVMjVGTEZOQlFWTnJSaXhGUVVGUlpDeFJRVU4yUXl4SFFVRkpRU3hKUVVGWE4wVXNSVUZCVnl4RFFVdDRRaXhIUVVaQk1rWXNSVUZCVVdZc1UwRkJWeXhMUVVWSkxGVkJRVzVDWlN4RlFVRlJaQ3hQUVVGdlFpeERRVU01UWl4SFFVRkpSQ3hGUVVGVGJrVXNVMEZCVTJsSkxGTkJSM0JDTDBNc1JVRkJVV1FzVDBGQlV5eFRRVU5xUW1Nc1JVRkJVVFZETEVsQlFVMHZReXhGUVVOa01rZ3NiMEpCUVc5Q0wwTXNSVUZCVldVc1IwRkZVQ3hWUVVGdVFrRXNSVUZCVVdRc1VVRkhWaXhQUVVGUGNrUXNSVUZKV0cxRkxFVkJRVkZrTEU5QlFWTXNVVUZEYWtKakxFVkJRVkUxUXl4SlFVRk5MRWxCUVVrMFJpeFZRVU5vUWl4clJFRkhTaXhQUVVGUGJrZ3NSVUZIVkN4SlFVRkpkVVVzUlVGQlV6WkNMRk5CUVZNdlF5eEZRVUZSUkN4RlFVRlRia1VzVTBGQlZXdEdMRVZCUVZFMVF5eExRVVY2UkN4SFFVRnZRaXhWUVVGb1FtZEVMRVZCUVU5U0xFdEJTVlFzVDBGSVFVa3NSVUZCVVdRc1QwRkJVeXhSUVVOcVFtTXNSVUZCVVRWRExFbEJRVTFuUkN4RlFVRlBhRVFzU1VGRGNrSTBReXhGUVVGUlppeFRRVUZYTEV0QlExcHdSQ3hGUVVkVUxFbEJRVWx2U0N4RlFVRlBOME1zUlVGQlQyaEVMRWxCUld4Q0xFOUJRVTAyUml4RlFVOUdRU3hGUVVGTGFFWXNUVUZIVUN0Q0xFVkJRVkZtTEVWQlFWTnhReXhaUVVGak1rSXNSVUZCU3k5RkxFMUJSM0JET0VJc1JVRkJVV3hETEV0QlFVOXRRaXhGUVVGVGMwTXNVVUZSUkN4WFFVRnVRblpDTEVWQlFWRmtMRk5CUTFaakxFVkJRVkZrTEU5QlFWTXNUMEZEYWtKakxFVkJRVkUxUXl4SlFVRk5MME1zUjBGVmJFSXlSaXhGUVVGUlppeFRRVUZYTEV0QlExcHdSQ3hIUVU1RmIwZ3NSMEV6UWxCcVJDeEZRVUZSWkN4UFFVRlRMRkZCUTJwQ1l5eEZRVUZSTlVNc1NVRkJUU3hKUVVGSk5FWXNWVUZCVlN4dlEwRkROVUpvUkN4RlFVRlJaaXhUUVVGWExFdEJRMXB3UkN4SFFXOUVXQ3hUUVVGVGNVZ3NZVUZCWVVNc1IwRkRjRUlzU1VGQlNUZERMRVZCUVZFc1EwRkJSVU1zVDBGQlVUUkRMRVZCUVVzc1NVRkZka0lzUzBGQlMwRXNTVUZEVURkRExFVkJRVTFKTEZOQlFWZDVReXhGUVVGTExFbEJSM0JDTEV0QlFVdEJMRWxCUTFBM1F5eEZRVUZOU3l4WFFVRmhkME1zUlVGQlN5eEhRVU40UWpkRExFVkJRVTFWTEZOQlFWZHRReXhGUVVGTExFbEJSM2hDY0Vnc1MwRkJTMjlFTEZkQlFWZGFMRXRCUVVzclFpeEhRVWQyUWl4VFFVRlRha0lzWTBGQlkybENMRWRCUTNKQ0xFbEJRVWxHTEVWQlFWTkZMRVZCUVUxWUxGbEJRV01zUjBGRGFrTlRMRVZCUVU5U0xFdEJRVThzWjBKQlExQlJMRVZCUVU5b1JDeEpRVU5rYTBRc1JVRkJUVmdzVjBGQllWTXNSVUZIY2tJc1UwRkJVM3BDTEZGQlFWRm1MRWRCU1dZM1FpeExRVUZMYjBRc1YwRkJZU3hEUVVGRExFTkJRVVZ2UWl4UFFVRlJMRk5CUXpkQ00wTXNSVUZCV1hkQ0xGRkJRVkU0UkN4aFFVRmpia2dzVFVGRGJFTkJMRXRCUVVzMlF5eFBRVUZOTEVkQk9FSmlMRk5CUVZONlF5eFBRVUZQYTBZc1IwRkRaQ3hIUVVGSlFTeEZRVUZWTEVOQlExb3NTVUZCU1N0Q0xFVkJRV2xDTDBJc1JVRkJVM2hITEVkQlF6bENMRWRCUVVsMVNTeEZRVU5HTEU5QlFVOUJMRVZCUVdWb1NDeExRVUZMYVVZc1IwRkhOMElzUjBGQk5rSXNiVUpCUVd4Q1FTeEZRVUZUZGtRc1MwRkRiRUlzVDBGQlQzVkVMRVZCUjFRc1NVRkJTemxDTEUxQlFVMDRRaXhGUVVGVE5VTXNVVUZCVXl4RFFVTXpRaXhKUVVGSk5FSXNSMEZCU3l4RlFVRkhka01zUlVGQlR5eFRRVUZUUVN4UFFVTXhRaXhQUVVGVGRVTXNSVUZCU1dkQ0xFVkJRVk0xUXl4UlFVTndRaXhIUVVGSmFFVXNSVUZCVHpKQ0xFdEJRVXRwUml4RlFVRlZhRUlzUjBGSGVFSXNUMEZHUVhaRExFdEJRVXRKTEUxQlFWRnRSQ3hGUVVGVGFFSXNSMEZEZEVKMlF5eExRVUZMUnl4TlFVRlBMRVZCUTB4SUxFdEJUMWdzVDBGSVFVRXNTMEZCUzBrc1RVRkJVVGRFTEVWQlEySjVSQ3hMUVVGTFJ5eE5RVUZQTEVWQlJVeElMRTFCUjFRc1QwRkJUMEVzUlVGQlMwRXNTMEZCVDBFc1IwRkxka0lzVFVGQlR5eERRVUZGUVN4TFFVRk5aMFVzV1VGSmFrSXNVMEZCVTBFc1lVRkRVQ3hOUVVGUExFTkJRVVUxUkN4TlFVRlBOMFFzUlVGQlZ6UkVMRTFCUVUwc1NVRndaMEp3UXl4RFFXdDBRbTFDTEdsQ1FVRllOMFFzVDBGQmMwSkJMRTlCUTFnc2FVSkJRVmhwU2l4UFFVRnpRa0VzVDBGRFlpeHBRa0ZCVkRGR0xFdEJRVzlDUVN4TFFVRlBOVUlpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNHOXNlV1pwYkd3dmJtOWtaVjl0YjJSMWJHVnpMM0psWjJWdVpYSmhkRzl5TFhKMWJuUnBiV1V2Y25WdWRHbHRaUzVxY3lKOSIsIiFmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciBlPXt9Lmhhc093blByb3BlcnR5O2Z1bmN0aW9uIGNsYXNzTmFtZXMoKXtmb3IodmFyIHM9W10sYT0wO2E8YXJndW1lbnRzLmxlbmd0aDthKyspe3ZhciBuPWFyZ3VtZW50c1thXTtpZihuKXt2YXIgcj10eXBlb2YgbjtpZihcInN0cmluZ1wiPT09cnx8XCJudW1iZXJcIj09PXIpcy5wdXNoKG4pO2Vsc2UgaWYoQXJyYXkuaXNBcnJheShuKSYmbi5sZW5ndGgpe3ZhciBsPWNsYXNzTmFtZXMuYXBwbHkobnVsbCxuKTtsJiZzLnB1c2gobCl9ZWxzZSBpZihcIm9iamVjdFwiPT09cilmb3IodmFyIHQgaW4gbillLmNhbGwobix0KSYmblt0XSYmcy5wdXNoKHQpfX1yZXR1cm4gcy5qb2luKFwiIFwiKX1cInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlJiZtb2R1bGUuZXhwb3J0cz8oY2xhc3NOYW1lcy5kZWZhdWx0PWNsYXNzTmFtZXMsbW9kdWxlLmV4cG9ydHM9Y2xhc3NOYW1lcyk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZcIm9iamVjdFwiPT10eXBlb2YgZGVmaW5lLmFtZCYmZGVmaW5lLmFtZD9kZWZpbmUoXCJjbGFzc25hbWVzXCIsW10sZnVuY3Rpb24oKXtyZXR1cm4gY2xhc3NOYW1lc30pOndpbmRvdy5jbGFzc05hbWVzPWNsYXNzTmFtZXN9KCk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbWx1WkdWNExtcHpJbDBzSW01aGJXVnpJanBiSW1oaGMwOTNiaUlzSW1oaGMwOTNibEJ5YjNCbGNuUjVJaXdpWTJ4aGMzTk9ZVzFsY3lJc0ltTnNZWE56WlhNaUxDSnBJaXdpWVhKbmRXMWxiblJ6SWl3aWJHVnVaM1JvSWl3aVlYSm5JaXdpWVhKblZIbHdaU0lzSW5CMWMyZ2lMQ0pCY25KaGVTSXNJbWx6UVhKeVlYa2lMQ0pwYm01bGNpSXNJbUZ3Y0d4NUlpd2lhMlY1SWl3aVkyRnNiQ0lzSW1wdmFXNGlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpWkdWbVlYVnNkQ0lzSW1SbFptbHVaU0lzSW1GdFpDSXNJbmRwYm1SdmR5SmRMQ0p0WVhCd2FXNW5jeUk2SWtOQlQwTXNWMEZEUVN4aFFVVkJMRWxCUVVsQkxFVkJRVk1zUjBGQlIwTXNaVUZGYUVJc1UwRkJVME1zWVVGSFVpeEpRVVpCTEVsQlFVbERMRVZCUVZVc1IwRkZURU1zUlVGQlNTeEZRVUZIUVN4RlFVRkpReXhWUVVGVlF5eFBRVUZSUml4SlFVRkxMRU5CUXpGRExFbEJRVWxITEVWQlFVMUdMRlZCUVZWRUxFZEJRM0JDTEVkQlFVdEhMRVZCUVV3c1EwRkZRU3hKUVVGSlF5eFRRVUZwUWtRc1JVRkZja0lzUjBGQlowSXNWMEZCV2tNc1IwRkJiME1zVjBGQldrRXNSVUZETTBKTUxFVkJRVkZOTEV0QlFVdEdMRkZCUTFBc1IwRkJTVWNzVFVGQlRVTXNVVUZCVVVvc1NVRkJVVUVzUlVGQlNVUXNUMEZCVVN4RFFVTTFReXhKUVVGSlRTeEZRVUZSVml4WFFVRlhWeXhOUVVGTkxFdEJRVTFPTEVkQlF5OUNTeXhIUVVOSVZDeEZRVUZSVFN4TFFVRkxSeXhSUVVWU0xFZEJRV2RDTEZkQlFWcEtMRVZCUTFZc1NVRkJTeXhKUVVGSlRTeExRVUZQVUN4RlFVTllVQ3hGUVVGUFpTeExRVUZMVWl4RlFVRkxUeXhKUVVGUlVDeEZRVUZKVHl4SlFVTm9RMWdzUlVGQlVVMHNTMEZCUzBzc1NVRk5ha0lzVDBGQlQxZ3NSVUZCVVdFc1MwRkJTeXhMUVVkRExHOUNRVUZZUXl4UlFVRXdRa0VzVDBGQlQwTXNVMEZETTBOb1FpeFhRVUZYYVVJc1VVRkJWV3BDTEZkQlEzSkNaU3hQUVVGUFF5eFJRVUZWYUVJc1dVRkRWeXh0UWtGQldHdENMRkZCUVN0RExHbENRVUZtUVN4UFFVRlBReXhMUVVGdlFrUXNUMEZCVDBNc1NVRkZia1pFTEU5QlFVOHNZVUZCWXl4SFFVRkpMRmRCUTNoQ0xFOUJRVTlzUWl4aFFVZFNiMElzVDBGQlQzQkNMRmRCUVdGQkxGZEJNVU4wUWlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYkdGemMyNWhiV1Z6TDJsdVpHVjRMbXB6SW4wPSIsInJlcXVpcmUoXCIuLi8uLi9tb2R1bGVzL2NvcmUucmVnZXhwLmVzY2FwZVwiKSxtb2R1bGUuZXhwb3J0cz1yZXF1aXJlKFwiLi4vLi4vbW9kdWxlcy9fY29yZVwiKS5SZWdFeHAuZXNjYXBlO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1WelkyRndaUzVxY3lKZExDSnVZVzFsY3lJNld5SnlaWEYxYVhKbElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SXNJbEpsWjBWNGNDSXNJbVZ6WTJGd1pTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRkJMRkZCUVZFc2IwTkJRMUpETEU5QlFVOURMRkZCUVZWR0xGRkJRVkVzZFVKQlFYVkNSeXhQUVVGUFF5SXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJadUwzSmxaMlY0Y0M5bGMyTmhjR1V1YW5NaWZRPT0iLCJyZXF1aXJlKFwiLi4vLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yXCIpLHJlcXVpcmUoXCIuLi8uLi9tb2R1bGVzL2VzNi5hcnJheS5mcm9tXCIpLG1vZHVsZS5leHBvcnRzPXJlcXVpcmUoXCIuLi8uLi9tb2R1bGVzL19jb3JlXCIpLkFycmF5LmZyb207XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVp5YjIwdWFuTWlYU3dpYm1GdFpYTWlPbHNpY21WeGRXbHlaU0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKQmNuSmhlU0lzSW1aeWIyMGlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJRU3hSUVVGUkxIRkRRVU5TUVN4UlFVRlJMR2REUVVOU1F5eFBRVUZQUXl4UlFVRlZSaXhSUVVGUkxIVkNRVUYxUWtjc1RVRkJUVU1pTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMMkZ5Y21GNUwyWnliMjB1YW5NaWZRPT0iLCJyZXF1aXJlKFwiLi4vLi4vbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXlcIiksbW9kdWxlLmV4cG9ydHM9cmVxdWlyZShcIi4uLy4uL21vZHVsZXMvX2NvcmVcIikuQXJyYXkuaXNBcnJheTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltbHpMV0Z5Y21GNUxtcHpJbDBzSW01aGJXVnpJanBiSW5KbGNYVnBjbVVpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aVFYSnlZWGtpTENKcGMwRnljbUY1SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVVFc1VVRkJVU3h2UTBGRFVrTXNUMEZCVDBNc1VVRkJWVVlzVVVGQlVTeDFRa0ZCZFVKSExFMUJRVTFESWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOW1iaTloY25KaGVTOXBjeTFoY25KaGVTNXFjeUo5IiwicmVxdWlyZShcIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ25cIiksbW9kdWxlLmV4cG9ydHM9cmVxdWlyZShcIi4uLy4uL21vZHVsZXMvX2NvcmVcIikuT2JqZWN0LmFzc2lnbjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltRnpjMmxuYmk1cWN5SmRMQ0p1WVcxbGN5STZXeUp5WlhGMWFYSmxJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSWs5aWFtVmpkQ0lzSW1GemMybG5iaUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUZCTEZGQlFWRXNiVU5CUTFKRExFOUJRVTlETEZGQlFWVkdMRkZCUVZFc2RVSkJRWFZDUnl4UFFVRlBReUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdlptNHZiMkpxWldOMEwyRnpjMmxuYmk1cWN5SjkiLCJyZXF1aXJlKFwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZVwiKTt2YXIgJE9iamVjdD1yZXF1aXJlKFwiLi4vLi4vbW9kdWxlcy9fY29yZVwiKS5PYmplY3Q7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gY3JlYXRlKGUscil7cmV0dXJuICRPYmplY3QuY3JlYXRlKGUscil9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1OeVpXRjBaUzVxY3lKZExDSnVZVzFsY3lJNld5SnlaWEYxYVhKbElpd2lKRTlpYW1WamRDSXNJazlpYW1WamRDSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0pqY21WaGRHVWlMQ0pRSWl3aVJDSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRkJMRkZCUVZFc2JVTkJRMUlzU1VGQlNVTXNVVUZCVlVRc1VVRkJVU3gxUWtGQmRVSkZMRTlCUXpkRFF5eFBRVUZQUXl4UlFVRlZMRk5CUVZORExFOUJRVTlETEVWQlFVZERMRWRCUTJ4RExFOUJRVTlPTEZGQlFWRkpMRTlCUVU5RExFVkJRVWRESWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOW1iaTl2WW1wbFkzUXZZM0psWVhSbExtcHpJbjA9IiwicmVxdWlyZShcIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHlcIik7dmFyICRPYmplY3Q9cmVxdWlyZShcIi4uLy4uL21vZHVsZXMvX2NvcmVcIikuT2JqZWN0O21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGUscixvKXtyZXR1cm4gJE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHIsbyl9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1SbFptbHVaUzF3Y205d1pYSjBlUzVxY3lKZExDSnVZVzFsY3lJNld5SnlaWEYxYVhKbElpd2lKRTlpYW1WamRDSXNJazlpYW1WamRDSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0prWldacGJtVlFjbTl3WlhKMGVTSXNJbWwwSWl3aWEyVjVJaXdpWkdWell5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRkJMRkZCUVZFc05FTkJRMUlzU1VGQlNVTXNVVUZCVlVRc1VVRkJVU3gxUWtGQmRVSkZMRTlCUXpkRFF5eFBRVUZQUXl4UlFVRlZMRk5CUVZORExHVkJRV1ZETEVWQlFVbERMRVZCUVV0RExFZEJRMmhFTEU5QlFVOVFMRkZCUVZGSkxHVkJRV1ZETEVWQlFVbERMRVZCUVV0RElpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzltYmk5dlltcGxZM1F2WkdWbWFXNWxMWEJ5YjNCbGNuUjVMbXB6SW4wPSIsInJlcXVpcmUoXCIuLi8uLi9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllc1wiKSxtb2R1bGUuZXhwb3J0cz1yZXF1aXJlKFwiLi4vLi4vbW9kdWxlcy9fY29yZVwiKS5PYmplY3QuZW50cmllcztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnVkSEpwWlhNdWFuTWlYU3dpYm1GdFpYTWlPbHNpY21WeGRXbHlaU0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKUFltcGxZM1FpTENKbGJuUnlhV1Z6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVVFc1VVRkJVU3h2UTBGRFVrTXNUMEZCVDBNc1VVRkJWVVlzVVVGQlVTeDFRa0ZCZFVKSExFOUJRVTlESWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOW1iaTl2WW1wbFkzUXZaVzUwY21sbGN5NXFjeUo5IiwicmVxdWlyZShcIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JcIik7dmFyICRPYmplY3Q9cmVxdWlyZShcIi4uLy4uL21vZHVsZXMvX2NvcmVcIikuT2JqZWN0O21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLHIpe3JldHVybiAkT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLHIpfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltZGxkQzF2ZDI0dGNISnZjR1Z5ZEhrdFpHVnpZM0pwY0hSdmNpNXFjeUpkTENKdVlXMWxjeUk2V3lKeVpYRjFhWEpsSWl3aUpFOWlhbVZqZENJc0lrOWlhbVZqZENJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaUxDSm5aWFJQZDI1UWNtOXdaWEowZVVSbGMyTnlhWEIwYjNJaUxDSnBkQ0lzSW10bGVTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRkJMRkZCUVZFc2QwUkJRMUlzU1VGQlNVTXNVVUZCVlVRc1VVRkJVU3gxUWtGQmRVSkZMRTlCUXpkRFF5eFBRVUZQUXl4UlFVRlZMRk5CUVZORExIbENRVUY1UWtNc1JVRkJTVU1zUjBGRGNrUXNUMEZCVDA0c1VVRkJVVWtzZVVKQlFYbENReXhGUVVGSlF5SXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Wm00dmIySnFaV04wTDJkbGRDMXZkMjR0Y0hKdmNHVnlkSGt0WkdWelkzSnBjSFJ2Y2k1cWN5SjkiLCJyZXF1aXJlKFwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmtleXNcIiksbW9kdWxlLmV4cG9ydHM9cmVxdWlyZShcIi4uLy4uL21vZHVsZXMvX2NvcmVcIikuT2JqZWN0LmtleXM7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbXRsZVhNdWFuTWlYU3dpYm1GdFpYTWlPbHNpY21WeGRXbHlaU0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKUFltcGxZM1FpTENKclpYbHpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVUVzVVVGQlVTeHBRMEZEVWtNc1QwRkJUME1zVVVGQlZVWXNVVUZCVVN4MVFrRkJkVUpITEU5QlFVOURJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5bWJpOXZZbXBsWTNRdmEyVjVjeTVxY3lKOSIsInJlcXVpcmUoXCIuLi8uLi9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzXCIpLG1vZHVsZS5leHBvcnRzPXJlcXVpcmUoXCIuLi8uLi9tb2R1bGVzL19jb3JlXCIpLk9iamVjdC52YWx1ZXM7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJblpoYkhWbGN5NXFjeUpkTENKdVlXMWxjeUk2V3lKeVpYRjFhWEpsSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0lrOWlhbVZqZENJc0luWmhiSFZsY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVGQkxGRkJRVkVzYlVOQlExSkRMRTlCUVU5RExGRkJRVlZHTEZGQlFWRXNkVUpCUVhWQ1J5eFBRVUZQUXlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2YjJKcVpXTjBMM1poYkhWbGN5NXFjeUo5IiwicmVxdWlyZShcIi4uL21vZHVsZXMvZXM2LnBhcnNlLWludFwiKSxtb2R1bGUuZXhwb3J0cz1yZXF1aXJlKFwiLi4vbW9kdWxlcy9fY29yZVwiKS5wYXJzZUludDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluQmhjbk5sTFdsdWRDNXFjeUpkTENKdVlXMWxjeUk2V3lKeVpYRjFhWEpsSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0luQmhjbk5sU1c1MElsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFVRXNVVUZCVVN3MFFrRkRVa01zVDBGQlQwTXNVVUZCVlVZc1VVRkJVU3h2UWtGQmIwSkhJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5bWJpOXdZWEp6WlMxcGJuUXVhbk1pZlE9PSIsIm1vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKG8pe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIG8pdGhyb3cgVHlwZUVycm9yKG8rXCIgaXMgbm90IGEgZnVuY3Rpb24hXCIpO3JldHVybiBvfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOWhMV1oxYm1OMGFXOXVMbXB6SWwwc0ltNWhiV1Z6SWpwYkltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaUxDSnBkQ0lzSWxSNWNHVkZjbkp2Y2lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVGQkxFOUJRVTlETEZGQlFWVXNVMEZCVlVNc1IwRkRla0lzUjBGQmFVSXNiVUpCUVU1QkxFVkJRV3RDTEUxQlFVMURMRlZCUVZWRUxFVkJRVXNzZFVKQlEyeEVMRTlCUVU5Qklpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTloTFdaMWJtTjBhVzl1TG1wekluMD0iLCJ2YXIgaXNPYmplY3Q9cmVxdWlyZShcIi4vX2lzLW9iamVjdFwiKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihlKXtpZighaXNPYmplY3QoZSkpdGhyb3cgVHlwZUVycm9yKGUrXCIgaXMgbm90IGFuIG9iamVjdCFcIik7cmV0dXJuIGV9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5aGJpMXZZbXBsWTNRdWFuTWlYU3dpYm1GdFpYTWlPbHNpYVhOUFltcGxZM1FpTENKeVpYRjFhWEpsSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0ltbDBJaXdpVkhsd1pVVnljbTl5SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4SlFVRkpRU3hUUVVGWFF5eFJRVUZSTEdkQ1FVTjJRa01zVDBGQlQwTXNVVUZCVlN4VFFVRlZReXhIUVVONlFpeEpRVUZMU2l4VFFVRlRTU3hIUVVGTExFMUJRVTFETEZWQlFWVkVMRVZCUVVzc2MwSkJRM2hETEU5QlFVOUJJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5aGJpMXZZbXBsWTNRdWFuTWlmUT09IiwidmFyIHRvSU9iamVjdD1yZXF1aXJlKFwiLi9fdG8taW9iamVjdFwiKSx0b0xlbmd0aD1yZXF1aXJlKFwiLi9fdG8tbGVuZ3RoXCIpLHRvQWJzb2x1dGVJbmRleD1yZXF1aXJlKFwiLi9fdG8tYWJzb2x1dGUtaW5kZXhcIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQsbyxyKXt2YXIgbix1PXRvSU9iamVjdCh0KSxpPXRvTGVuZ3RoKHUubGVuZ3RoKSxmPXRvQWJzb2x1dGVJbmRleChyLGkpO2lmKGUmJm8hPW8pe2Zvcig7aT5mOylpZigobj11W2YrK10pIT1uKXJldHVybiEwfWVsc2UgZm9yKDtpPmY7ZisrKWlmKChlfHxmIGluIHUpJiZ1W2ZdPT09bylyZXR1cm4gZXx8Znx8MDtyZXR1cm4hZSYmLTF9fTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOWhjbkpoZVMxcGJtTnNkV1JsY3k1cWN5SmRMQ0p1WVcxbGN5STZXeUowYjBsUFltcGxZM1FpTENKeVpYRjFhWEpsSWl3aWRHOU1aVzVuZEdnaUxDSjBiMEZpYzI5c2RYUmxTVzVrWlhnaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2lTVk5mU1U1RFRGVkVSVk1pTENJa2RHaHBjeUlzSW1Wc0lpd2labkp2YlVsdVpHVjRJaXdpZG1Gc2RXVWlMQ0pQSWl3aWJHVnVaM1JvSWl3aWFXNWtaWGdpWFN3aWJXRndjR2x1WjNNaU9pSkJRVVZCTEVsQlFVbEJMRlZCUVZsRExGRkJRVkVzYVVKQlEzQkNReXhUUVVGWFJDeFJRVUZSTEdkQ1FVTnVRa1VzWjBKQlFXdENSaXhSUVVGUkxIZENRVU01UWtjc1QwRkJUME1zVVVGQlZTeFRRVUZWUXl4SFFVTjZRaXhQUVVGUExGTkJRVlZETEVWQlFVOURMRVZCUVVsRExFZEJRekZDTEVsQlIwbERMRVZCU0VGRExFVkJRVWxZTEZWQlFWVlBMRWRCUTJSTExFVkJRVk5XTEZOQlFWTlRMRVZCUVVWRExGRkJRM0JDUXl4RlFVRlJWaXhuUWtGQlowSk5MRVZCUVZkSExFZEJTWFpETEVkQlFVbE9MRWRCUVdWRkxFZEJRVTFCTEVkQlFVa3NTMEZCVDBrc1JVRkJVME1zUjBGSE0wTXNTVUZHUVVnc1JVRkJVVU1zUlVGQlJVVXNUMEZGUjBnc1JVRkJUeXhQUVVGUExFOUJSWFJDTEV0QlFVMUZMRVZCUVZORExFVkJRVTlCTEVsQlFWTXNTVUZCU1ZBc1IwRkJaVThzUzBGQlUwWXNTVUZETlVSQkxFVkJRVVZGTEV0QlFWZE1MRVZCUVVrc1QwRkJUMFlzUjBGQlpVOHNSMEZCVXl4RlFVTndSQ3hQUVVGUlVDeEpRVUZuUWlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZZWEp5WVhrdGFXNWpiSFZrWlhNdWFuTWlmUT09IiwidmFyIGNvZj1yZXF1aXJlKFwiLi9fY29mXCIpLFRBRz1yZXF1aXJlKFwiLi9fd2tzXCIpKFwidG9TdHJpbmdUYWdcIiksQVJHPVwiQXJndW1lbnRzXCI9PWNvZihmdW5jdGlvbigpe3JldHVybiBhcmd1bWVudHN9KCkpLHRyeUdldD1mdW5jdGlvbih0LGUpe3RyeXtyZXR1cm4gdFtlXX1jYXRjaCh0KXt9fTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbih0KXt2YXIgZSxyLG47cmV0dXJuIHZvaWQgMD09PXQ/XCJVbmRlZmluZWRcIjpudWxsPT09dD9cIk51bGxcIjpcInN0cmluZ1wiPT10eXBlb2Yocj10cnlHZXQoZT1PYmplY3QodCksVEFHKSk/cjpBUkc/Y29mKGUpOlwiT2JqZWN0XCI9PShuPWNvZihlKSkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGUuY2FsbGVlP1wiQXJndW1lbnRzXCI6bn07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDlqYkdGemMyOW1MbXB6SWwwc0ltNWhiV1Z6SWpwYkltTnZaaUlzSW5KbGNYVnBjbVVpTENKVVFVY2lMQ0pCVWtjaUxDSmhjbWQxYldWdWRITWlMQ0owY25sSFpYUWlMQ0pwZENJc0ltdGxlU0lzSW1VaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2lUeUlzSWxRaUxDSkNJaXdpZFc1a1pXWnBibVZrSWl3aVQySnFaV04wSWl3aVkyRnNiR1ZsSWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hKUVVGTlF5eFJRVUZSTEZWQlEyUkRMRWxCUVUxRUxGRkJRVkVzVTBGQlVrRXNRMEZCYTBJc1pVRkZlRUpGTEVsQlFXdEVMR0ZCUVRWRFNDeEpRVUZKTEZkQlFXTXNUMEZCVDBrc1ZVRkJja0lzU1VGSFZrTXNUMEZCVXl4VFFVRlZReXhGUVVGSlF5eEhRVU42UWl4SlFVTkZMRTlCUVU5RUxFVkJRVWRETEVkQlExWXNUVUZCVDBNc1RVRkhXRU1zVDBGQlQwTXNVVUZCVlN4VFFVRlZTaXhIUVVONlFpeEpRVUZKU3l4RlFVRkhReXhGUVVGSFF5eEZRVU5XTEZsQlFXTkRMRWxCUVZCU0xFVkJRVzFDTEZsQlFYRkNMRTlCUVZCQkxFVkJRV01zVDBGRlRpeHBRa0ZCY0VOTkxFVkJRVWxRTEU5QlFVOU5MRVZCUVVsSkxFOUJRVTlVTEVkQlFVdEtMRTFCUVc5Q1ZTeEZRVVYyUkZRc1NVRkJUVWdzU1VGQlNWY3NSMEZGVFN4WFFVRm1SU3hGUVVGSllpeEpRVUZKVnl4TFFVRnpReXh0UWtGQldrRXNSVUZCUlVzc1QwRkJkVUlzV1VGQlkwZ2lMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJOc1lYTnpiMll1YW5NaWZRPT0iLCJ2YXIgdG9TdHJpbmc9e30udG9TdHJpbmc7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuIHRvU3RyaW5nLmNhbGwodCkuc2xpY2UoOCwtMSl9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5amIyWXVhbk1pWFN3aWJtRnRaWE1pT2xzaWRHOVRkSEpwYm1jaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2lhWFFpTENKallXeHNJaXdpYzJ4cFkyVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRWxCUVVsQkxGTkJRVmNzUjBGQlIwRXNVMEZGYkVKRExFOUJRVTlETEZGQlFWVXNVMEZCVlVNc1IwRkRla0lzVDBGQlQwZ3NVMEZCVTBrc1MwRkJTMFFzUjBGQlNVVXNUVUZCVFN4SFFVRkpJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5amIyWXVhbk1pZlE9PSIsInZhciBjb3JlPW1vZHVsZS5leHBvcnRzPXt2ZXJzaW9uOlwiMi41LjdcIn07XCJudW1iZXJcIj09dHlwZW9mIF9fZSYmKF9fZT1jb3JlKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOWpiM0psTG1weklsMHNJbTVoYldWeklqcGJJbU52Y21VaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2lkbVZ5YzJsdmJpSXNJbDlmWlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1NVRkJTVUVzUzBGQlQwTXNUMEZCVDBNc1VVRkJWU3hEUVVGRlF5eFJRVUZUTEZOQlEzSkNMR2xDUVVGUVF5eE5RVUZwUWtFc1NVRkJUVW9pTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyTnZjbVV1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgJGRlZmluZVByb3BlcnR5PXJlcXVpcmUoXCIuL19vYmplY3QtZHBcIiksY3JlYXRlRGVzYz1yZXF1aXJlKFwiLi9fcHJvcGVydHktZGVzY1wiKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihlLHIsdCl7ciBpbiBlPyRkZWZpbmVQcm9wZXJ0eS5mKGUscixjcmVhdGVEZXNjKDAsdCkpOmVbcl09dH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDlqY21WaGRHVXRjSEp2Y0dWeWRIa3Vhbk1pWFN3aWJtRnRaWE1pT2xzaUpHUmxabWx1WlZCeWIzQmxjblI1SWl3aWNtVnhkV2x5WlNJc0ltTnlaV0YwWlVSbGMyTWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpYjJKcVpXTjBJaXdpYVc1a1pYZ2lMQ0oyWVd4MVpTSXNJbVlpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlEwRXNTVUZCU1VFc1owSkJRV3RDUXl4UlFVRlJMR2RDUVVNeFFrTXNWMEZCWVVRc1VVRkJVU3h2UWtGRmVrSkZMRTlCUVU5RExGRkJRVlVzVTBGQlZVTXNSVUZCVVVNc1JVRkJUME1zUjBGRGNFTkVMRXRCUVZORUxFVkJRVkZNTEdkQ1FVRm5RbEVzUlVGQlJVZ3NSVUZCVVVNc1JVRkJUMG9zVjBGQlZ5eEZRVUZIU3l4SlFVTXZSRVlzUlVGQlQwTXNSMEZCVTBNaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMk55WldGMFpTMXdjbTl3WlhKMGVTNXFjeUo5IiwidmFyIGFGdW5jdGlvbj1yZXF1aXJlKFwiLi9fYS1mdW5jdGlvblwiKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihuLHIsdCl7aWYoYUZ1bmN0aW9uKG4pLHZvaWQgMD09PXIpcmV0dXJuIG47c3dpdGNoKHQpe2Nhc2UgMTpyZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJuIG4uY2FsbChyLHQpfTtjYXNlIDI6cmV0dXJuIGZ1bmN0aW9uKHQsdSl7cmV0dXJuIG4uY2FsbChyLHQsdSl9O2Nhc2UgMzpyZXR1cm4gZnVuY3Rpb24odCx1LGUpe3JldHVybiBuLmNhbGwocix0LHUsZSl9fXJldHVybiBmdW5jdGlvbigpe3JldHVybiBuLmFwcGx5KHIsYXJndW1lbnRzKX19O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5amRIZ3Vhbk1pWFN3aWJtRnRaWE1pT2xzaVlVWjFibU4wYVc5dUlpd2ljbVZ4ZFdseVpTSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0ptYmlJc0luUm9ZWFFpTENKc1pXNW5kR2dpTENKMWJtUmxabWx1WldRaUxDSmhJaXdpWTJGc2JDSXNJbUlpTENKaklpd2lZWEJ3YkhraUxDSmhjbWQxYldWdWRITWlYU3dpYldGd2NHbHVaM01pT2lKQlFVTkJMRWxCUVVsQkxGVkJRVmxETEZGQlFWRXNhVUpCUTNoQ1F5eFBRVUZQUXl4UlFVRlZMRk5CUVZWRExFVkJRVWxETEVWQlFVMURMRWRCUlc1RExFZEJSRUZPTEZWQlFWVkpMRkZCUTBkSExFbEJRVlJHTEVWQlFXOUNMRTlCUVU5RUxFVkJReTlDTEU5QlFWRkZMRWRCUTA0c1MwRkJTeXhGUVVGSExFOUJRVThzVTBGQlZVVXNSMEZEZGtJc1QwRkJUMG9zUlVGQlIwc3NTMEZCUzBvc1JVRkJUVWNzU1VGRmRrSXNTMEZCU3l4RlFVRkhMRTlCUVU4c1UwRkJWVUVzUlVGQlIwVXNSMEZETVVJc1QwRkJUMDRzUlVGQlIwc3NTMEZCUzBvc1JVRkJUVWNzUlVGQlIwVXNTVUZGTVVJc1MwRkJTeXhGUVVGSExFOUJRVThzVTBGQlZVWXNSVUZCUjBVc1JVRkJSME1zUjBGRE4wSXNUMEZCVDFBc1JVRkJSMHNzUzBGQlMwb3NSVUZCVFVjc1JVRkJSMFVzUlVGQlIwTXNTVUZITDBJc1QwRkJUeXhYUVVOTUxFOUJRVTlRTEVWQlFVZFJMRTFCUVUxUUxFVkJRVTFSSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOWpkSGd1YW5NaWZRPT0iLCJtb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihvKXtpZihudWxsPT1vKXRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIitvKTtyZXR1cm4gb307XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDlrWldacGJtVmtMbXB6SWwwc0ltNWhiV1Z6SWpwYkltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaUxDSnBkQ0lzSW5WdVpHVm1hVzVsWkNJc0lsUjVjR1ZGY25KdmNpSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwRkJMRTlCUVU5RExGRkJRVlVzVTBGQlZVTXNSMEZEZWtJc1IwRkJWVU1zVFVGQlRrUXNSVUZCYVVJc1RVRkJUVVVzVlVGQlZTeDVRa0ZCTWtKR0xFZEJRMmhGTEU5QlFVOUJJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5a1pXWnBibVZrTG1wekluMD0iLCJtb2R1bGUuZXhwb3J0cz0hcmVxdWlyZShcIi4vX2ZhaWxzXCIpKGZ1bmN0aW9uKCl7cmV0dXJuIDchPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSxcImFcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIDd9fSkuYX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5a1pYTmpjbWx3ZEc5eWN5NXFjeUpkTENKdVlXMWxjeUk2V3lKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aWNtVnhkV2x5WlNJc0lrOWlhbVZqZENJc0ltUmxabWx1WlZCeWIzQmxjblI1SWl3aVoyVjBJaXdpWVNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUTBGQkxFOUJRVTlETEZOQlFWZERMRkZCUVZFc1YwRkJVa0VzUTBGQmIwSXNWMEZEY0VNc1QwRkJLMFVzUjBGQmVFVkRMRTlCUVU5RExHVkJRV1VzUjBGQlNTeEpRVUZMTEVOQlFVVkRMRWxCUVVzc1YwRkJZeXhQUVVGUExFdEJRVkZESWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOWtaWE5qY21sd2RHOXljeTVxY3lKOSIsInZhciBpc09iamVjdD1yZXF1aXJlKFwiLi9faXMtb2JqZWN0XCIpLGRvY3VtZW50PXJlcXVpcmUoXCIuL19nbG9iYWxcIikuZG9jdW1lbnQsaXM9aXNPYmplY3QoZG9jdW1lbnQpJiZpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gaXM/ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChlKTp7fX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDlrYjIwdFkzSmxZWFJsTG1weklsMHNJbTVoYldWeklqcGJJbWx6VDJKcVpXTjBJaXdpY21WeGRXbHlaU0lzSW1SdlkzVnRaVzUwSWl3aWFYTWlMQ0pqY21WaGRHVkZiR1Z0Wlc1MElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SXNJbWwwSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4SlFVRkpRU3hUUVVGWFF5eFJRVUZSTEdkQ1FVTnVRa01zVTBGQlYwUXNVVUZCVVN4aFFVRmhReXhUUVVWb1EwTXNSMEZCUzBnc1UwRkJVMFVzVjBGQllVWXNVMEZCVTBVc1UwRkJVMFVzWlVGRGFrUkRMRTlCUVU5RExGRkJRVlVzVTBGQlZVTXNSMEZEZWtJc1QwRkJUMG9zUjBGQlMwUXNVMEZCVTBVc1kwRkJZMGNzUjBGQlRTSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWkc5dExXTnlaV0YwWlM1cWN5SjkiLCJtb2R1bGUuZXhwb3J0cz1cImNvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZlwiLnNwbGl0KFwiLFwiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOWxiblZ0TFdKMVp5MXJaWGx6TG1weklsMHNJbTVoYldWeklqcGJJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0p6Y0d4cGRDSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwRkJMRTlCUVU5RExGRkJRVlVzWjBkQlJXWkRMRTFCUVUwaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMlZ1ZFcwdFluVm5MV3RsZVhNdWFuTWlmUT09IiwidmFyIGdsb2JhbD1yZXF1aXJlKFwiLi9fZ2xvYmFsXCIpLGNvcmU9cmVxdWlyZShcIi4vX2NvcmVcIiksY3R4PXJlcXVpcmUoXCIuL19jdHhcIiksaGlkZT1yZXF1aXJlKFwiLi9faGlkZVwiKSxoYXM9cmVxdWlyZShcIi4vX2hhc1wiKSxQUk9UT1RZUEU9XCJwcm90b3R5cGVcIiwkZXhwb3J0PWZ1bmN0aW9uKGUscix0KXt2YXIgbyxuLHAsaT1lJiRleHBvcnQuRix4PWUmJGV4cG9ydC5HLGM9ZSYkZXhwb3J0LlMsYT1lJiRleHBvcnQuUCx1PWUmJGV4cG9ydC5CLGw9ZSYkZXhwb3J0LlcsJD14P2NvcmU6Y29yZVtyXXx8KGNvcmVbcl09e30pLFA9JFtQUk9UT1RZUEVdLHM9eD9nbG9iYWw6Yz9nbG9iYWxbcl06KGdsb2JhbFtyXXx8e30pW1BST1RPVFlQRV07Zm9yKG8gaW4geCYmKHQ9ciksdCkobj0haSYmcyYmdm9pZCAwIT09c1tvXSkmJmhhcygkLG8pfHwocD1uP3Nbb106dFtvXSwkW29dPXgmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHNbb10/dFtvXTp1JiZuP2N0eChwLGdsb2JhbCk6bCYmc1tvXT09cD9mdW5jdGlvbihlKXt2YXIgcj1mdW5jdGlvbihyLHQsbyl7aWYodGhpcyBpbnN0YW5jZW9mIGUpe3N3aXRjaChhcmd1bWVudHMubGVuZ3RoKXtjYXNlIDA6cmV0dXJuIG5ldyBlO2Nhc2UgMTpyZXR1cm4gbmV3IGUocik7Y2FzZSAyOnJldHVybiBuZXcgZShyLHQpfXJldHVybiBuZXcgZShyLHQsbyl9cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfTtyZXR1cm4gcltQUk9UT1RZUEVdPWVbUFJPVE9UWVBFXSxyfShwKTphJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBwP2N0eChGdW5jdGlvbi5jYWxsLHApOnAsYSYmKCgkLnZpcnR1YWx8fCgkLnZpcnR1YWw9e30pKVtvXT1wLGUmJGV4cG9ydC5SJiZQJiYhUFtvXSYmaGlkZShQLG8scCkpKX07JGV4cG9ydC5GPTEsJGV4cG9ydC5HPTIsJGV4cG9ydC5TPTQsJGV4cG9ydC5QPTgsJGV4cG9ydC5CPTE2LCRleHBvcnQuVz0zMiwkZXhwb3J0LlU9NjQsJGV4cG9ydC5SPTEyOCxtb2R1bGUuZXhwb3J0cz0kZXhwb3J0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5bGVIQnZjblF1YW5NaVhTd2libUZ0WlhNaU9sc2laMnh2WW1Gc0lpd2ljbVZ4ZFdseVpTSXNJbU52Y21VaUxDSmpkSGdpTENKb2FXUmxJaXdpYUdGeklpd2lVRkpQVkU5VVdWQkZJaXdpSkdWNGNHOXlkQ0lzSW5SNWNHVWlMQ0p1WVcxbElpd2ljMjkxY21ObElpd2lhMlY1SWl3aWIzZHVJaXdpYjNWMElpd2lTVk5mUms5U1EwVkVJaXdpUmlJc0lrbFRYMGRNVDBKQlRDSXNJa2NpTENKSlUxOVRWRUZVU1VNaUxDSlRJaXdpU1ZOZlVGSlBWRThpTENKUUlpd2lTVk5mUWtsT1JDSXNJa0lpTENKSlUxOVhVa0ZRSWl3aVZ5SXNJbVY0Y0c5eWRITWlMQ0psZUhCUWNtOTBieUlzSW5SaGNtZGxkQ0lzSW5WdVpHVm1hVzVsWkNJc0lrTWlMQ0poSWl3aVlpSXNJbU1pTENKMGFHbHpJaXdpWVhKbmRXMWxiblJ6SWl3aWJHVnVaM1JvSWl3aVlYQndiSGtpTENKR2RXNWpkR2x2YmlJc0ltTmhiR3dpTENKMmFYSjBkV0ZzSWl3aVVpSXNJbFVpTENKdGIyUjFiR1VpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEVsQlFVbEJMRTlCUVZORExGRkJRVkVzWVVGRGFrSkRMRXRCUVU5RUxGRkJRVkVzVjBGRFprVXNTVUZCVFVZc1VVRkJVU3hWUVVOa1J5eExRVUZQU0N4UlFVRlJMRmRCUTJaSkxFbEJRVTFLTEZGQlFWRXNWVUZEWkVzc1ZVRkJXU3haUVVWYVF5eFJRVUZWTEZOQlFWVkRMRVZCUVUxRExFVkJRVTFETEVkQlEyeERMRWxCVTBsRExFVkJRVXRETEVWQlFVdERMRVZCVkZaRExFVkJRVmxPTEVWQlFVOUVMRkZCUVZGUkxFVkJRek5DUXl4RlFVRlpVaXhGUVVGUFJDeFJRVUZSVlN4RlFVTXpRa01zUlVGQldWWXNSVUZCVDBRc1VVRkJVVmtzUlVGRE0wSkRMRVZCUVZkYUxFVkJRVTlFTEZGQlFWRmpMRVZCUXpGQ1F5eEZRVUZWWkN4RlFVRlBSQ3hSUVVGUlowSXNSVUZEZWtKRExFVkJRVlZvUWl4RlFVRlBSQ3hSUVVGUmEwSXNSVUZEZWtKRExFVkJRVlZXTEVWQlFWbGtMRXRCUVU5QkxFdEJRVXRQTEV0QlFWVlFMRXRCUVV0UExFZEJRVkVzU1VGRGVrUnJRaXhGUVVGWFJDeEZRVUZSY0VJc1YwRkRia0p6UWl4RlFVRlRXaXhGUVVGWmFFSXNUMEZCVTJ0Q0xFVkJRVmxzUWl4UFFVRlBVeXhKUVVGVFZDeFBRVUZQVXl4SlFVRlRMRWxCUVVsSUxGZEJSMnhHTEVsQlFVdExMRXRCUkVSTExFbEJRVmRPTEVWQlFWTkVMRWRCUTFwRExFZEJSVlpGTEVkQlFVOUZMRWRCUVdGakxGRkJRVEJDUXl4SlFVRm9Ra1FzUlVGQlQycENMRXRCUXpGQ1RpeEpRVUZKY1VJc1JVRkJVMllzUzBGRmVFSkZMRVZCUVUxRUxFVkJRVTFuUWl4RlFVRlBha0lzUjBGQlQwUXNSVUZCVDBNc1IwRkZha05sTEVWQlFWRm1MRWRCUVU5TExFZEJRVzFETEcxQ1FVRm1XU3hGUVVGUGFrSXNSMEZCY1VKRUxFVkJRVTlETEVkQlJYQkZWeXhIUVVGWFZpeEZRVUZOVkN4SlFVRkpWU3hGUVVGTFlpeFJRVVV4UW5kQ0xFZEJRVmRKTEVWQlFVOXFRaXhKUVVGUlJTeEZRVUZOTEZOQlFWZHBRaXhIUVVNelF5eEpRVUZKWml4RlFVRkpMRk5CUVZWblFpeEZRVUZIUXl4RlFVRkhReXhIUVVOMFFpeEhRVUZKUXl4blFrRkJaMEpLTEVWQlFVY3NRMEZEY2tJc1QwRkJVVXNzVlVGQlZVTXNVVUZEYUVJc1MwRkJTeXhGUVVGSExFOUJRVThzU1VGQlNVNHNSVUZEYmtJc1MwRkJTeXhGUVVGSExFOUJRVThzU1VGQlNVRXNSVUZCUlVNc1IwRkRja0lzUzBGQlN5eEZRVUZITEU5QlFVOHNTVUZCU1VRc1JVRkJSVU1zUlVGQlIwTXNSMEZEZUVJc1QwRkJUeXhKUVVGSlJpeEZRVUZGUXl4RlFVRkhReXhGUVVGSFF5eEhRVU55UWl4UFFVRlBTQ3hGUVVGRlR5eE5RVUZOU0N4TFFVRk5ReXhaUVVkNlFpeFBRVVJCY0VJc1JVRkJSVlFzVjBGQllYZENMRVZCUVVWNFFpeFhRVU5XVXl4RlFWaDVRaXhEUVdFdlFrWXNSMEZCVDA4c1IwRkJNRUlzYlVKQlFWQlFMRVZCUVc5Q1ZpeEpRVUZKYlVNc1UwRkJVME1zUzBGQlRURkNMRWRCUVU5QkxFVkJSWFpGVHl4TFFVTkVUU3hGUVVGUll5eFZRVUZaWkN4RlFVRlJZeXhSUVVGVkxFdEJRVXMzUWl4SFFVRlBSU3hGUVVVdlEwd3NSVUZCVDBRc1VVRkJVV3RETEVkQlFVdGtMRWxCUVdGQkxFVkJRVk5vUWl4SlFVRk5VQ3hMUVVGTGRVSXNSVUZCVldoQ0xFVkJRVXRGTEUxQlN6bEZUaXhSUVVGUlVTeEZRVUZKTEVWQlExcFNMRkZCUVZGVkxFVkJRVWtzUlVGRFdsWXNVVUZCVVZrc1JVRkJTU3hGUVVOYVdpeFJRVUZSWXl4RlFVRkpMRVZCUTFwa0xGRkJRVkZuUWl4RlFVRkpMRWRCUTFwb1FpeFJRVUZSYTBJc1JVRkJTU3hIUVVOYWJFSXNVVUZCVVcxRExFVkJRVWtzUjBGRFdtNURMRkZCUVZGclF5eEZRVUZKTEVsQlExcEZMRTlCUVU5cVFpeFJRVUZWYmtJaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMlY0Y0c5eWRDNXFjeUo5IiwibW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24ocil7dHJ5e3JldHVybiEhcigpfWNhdGNoKHIpe3JldHVybiEwfX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDltWVdsc2N5NXFjeUpkTENKdVlXMWxjeUk2V3lKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aVpYaGxZeUlzSW1VaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQlFTeFBRVUZQUXl4UlFVRlZMRk5CUVZWRExFZEJRM3BDTEVsQlEwVXNVVUZCVTBFc1NVRkRWQ3hOUVVGUFF5eEhRVU5RTEU5QlFVOGlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJaaGFXeHpMbXB6SW4wPSIsInZhciBnbG9iYWw9bW9kdWxlLmV4cG9ydHM9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93Lk1hdGg9PU1hdGg/d2luZG93OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLk1hdGg9PU1hdGg/c2VsZjpGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XCJudW1iZXJcIj09dHlwZW9mIF9fZyYmKF9fZz1nbG9iYWwpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5bmJHOWlZV3d1YW5NaVhTd2libUZ0WlhNaU9sc2laMnh2WW1Gc0lpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SXNJbmRwYm1SdmR5SXNJazFoZEdnaUxDSnpaV3htSWl3aVJuVnVZM1JwYjI0aUxDSmZYMmNpWFN3aWJXRndjR2x1WjNNaU9pSkJRVU5CTEVsQlFVbEJMRTlCUVZORExFOUJRVTlETEZGQlFUSkNMRzlDUVVGV1F5eFJRVUY1UWtFc1QwRkJUME1zVFVGQlVVRXNTMEZEZWtWRUxFOUJRWGRDTEc5Q1FVRlNSU3hOUVVGMVFrRXNTMEZCUzBRc1RVRkJVVUVzUzBGQlQwTXNTMEZGTTBSRExGTkJRVk1zWTBGQlZFRXNSMEZEWXl4cFFrRkJVRU1zVFVGQmFVSkJMRWxCUVUxUUlpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTluYkc5aVlXd3Vhbk1pZlE9PSIsInZhciBoYXNPd25Qcm9wZXJ0eT17fS5oYXNPd25Qcm9wZXJ0eTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihyLGUpe3JldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHIsZSl9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5b1lYTXVhbk1pWFN3aWJtRnRaWE1pT2xzaWFHRnpUM2R1VUhKdmNHVnlkSGtpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aWFYUWlMQ0pyWlhraUxDSmpZV3hzSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4SlFVRkpRU3hsUVVGcFFpeEhRVUZIUVN4bFFVTjRRa01zVDBGQlQwTXNVVUZCVlN4VFFVRlZReXhGUVVGSlF5eEhRVU0zUWl4UFFVRlBTaXhsUVVGbFN5eExRVUZMUml4RlFVRkpReUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmFHRnpMbXB6SW4wPSIsInZhciBkUD1yZXF1aXJlKFwiLi9fb2JqZWN0LWRwXCIpLGNyZWF0ZURlc2M9cmVxdWlyZShcIi4vX3Byb3BlcnR5LWRlc2NcIik7bW9kdWxlLmV4cG9ydHM9cmVxdWlyZShcIi4vX2Rlc2NyaXB0b3JzXCIpP2Z1bmN0aW9uKGUscix0KXtyZXR1cm4gZFAuZihlLHIsY3JlYXRlRGVzYygxLHQpKX06ZnVuY3Rpb24oZSxyLHQpe3JldHVybiBlW3JdPXQsZX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDlvYVdSbExtcHpJbDBzSW01aGJXVnpJanBiSW1SUUlpd2ljbVZ4ZFdseVpTSXNJbU55WldGMFpVUmxjMk1pTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aWIySnFaV04wSWl3aWEyVjVJaXdpZG1Gc2RXVWlMQ0ptSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4SlFVRkpRU3hIUVVGTFF5eFJRVUZSTEdkQ1FVTmlReXhYUVVGaFJDeFJRVUZSTEc5Q1FVTjZRa1VzVDBGQlQwTXNVVUZCVlVnc1VVRkJVU3hyUWtGQmIwSXNVMEZCVlVrc1JVRkJVVU1zUlVGQlMwTXNSMEZEYkVVc1QwRkJUMUFzUjBGQlIxRXNSVUZCUlVnc1JVRkJVVU1zUlVGQlMwb3NWMEZCVnl4RlFVRkhTeXhMUVVOeVF5eFRRVUZWUml4RlFVRlJReXhGUVVGTFF5eEhRVVY2UWl4UFFVUkJSaXhGUVVGUFF5eEhRVUZQUXl4RlFVTlFSaUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmFHbGtaUzVxY3lKOSIsInZhciBkb2N1bWVudD1yZXF1aXJlKFwiLi9fZ2xvYmFsXCIpLmRvY3VtZW50O21vZHVsZS5leHBvcnRzPWRvY3VtZW50JiZkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDlvZEcxc0xtcHpJbDBzSW01aGJXVnpJanBiSW1SdlkzVnRaVzUwSWl3aWNtVnhkV2x5WlNJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaUxDSmtiMk4xYldWdWRFVnNaVzFsYm5RaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFbEJRVWxCTEZOQlFWZERMRkZCUVZFc1lVRkJZVVFzVTBGRGNFTkZMRTlCUVU5RExGRkJRVlZJTEZWQlFWbEJMRk5CUVZOSklpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTlvZEcxc0xtcHpJbjA9IiwibW9kdWxlLmV4cG9ydHM9IXJlcXVpcmUoXCIuL19kZXNjcmlwdG9yc1wiKSYmIXJlcXVpcmUoXCIuL19mYWlsc1wiKShmdW5jdGlvbigpe3JldHVybiA3IT1PYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZShcIi4vX2RvbS1jcmVhdGVcIikoXCJkaXZcIiksXCJhXCIse2dldDpmdW5jdGlvbigpe3JldHVybiA3fX0pLmF9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXBaVGd0Wkc5dExXUmxabWx1WlM1cWN5SmRMQ0p1WVcxbGN5STZXeUp0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpY21WeGRXbHlaU0lzSWs5aWFtVmpkQ0lzSW1SbFptbHVaVkJ5YjNCbGNuUjVJaXdpWjJWMElpd2lZU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUZCTEU5QlFVOURMRk5CUVZkRExGRkJRVkVzYjBKQlFYTkNRU3hSUVVGUkxGZEJRVkpCTEVOQlFXOUNMRmRCUTJ4RkxFOUJRVFJITEVkQlFYSkhReXhQUVVGUFF5eGxRVUZsUml4UlFVRlJMR2RDUVVGU1FTeERRVUY1UWl4UFFVRlJMRWxCUVVzc1EwRkJSVWNzU1VGQlN5eFhRVUZqTEU5QlFVOHNTMEZCVVVNaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMmxsT0Mxa2IyMHRaR1ZtYVc1bExtcHpJbjA9IiwidmFyIGNvZj1yZXF1aXJlKFwiLi9fY29mXCIpO21vZHVsZS5leHBvcnRzPU9iamVjdChcInpcIikucHJvcGVydHlJc0VudW1lcmFibGUoMCk/T2JqZWN0OmZ1bmN0aW9uKGUpe3JldHVyblwiU3RyaW5nXCI9PWNvZihlKT9lLnNwbGl0KFwiXCIpOk9iamVjdChlKX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDlwYjJKcVpXTjBMbXB6SWwwc0ltNWhiV1Z6SWpwYkltTnZaaUlzSW5KbGNYVnBjbVVpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aVQySnFaV04wSWl3aWNISnZjR1Z5ZEhsSmMwVnVkVzFsY21GaWJHVWlMQ0pwZENJc0luTndiR2wwSWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hKUVVGTlF5eFJRVUZSTEZWQlJXeENReXhQUVVGUFF5eFJRVUZWUXl4UFFVRlBMRXRCUVV0RExIRkNRVUZ4UWl4SFFVRkxSQ3hQUVVGVExGTkJRVlZGTEVkQlEzaEZMRTFCUVd0Q0xGVkJRVmhPTEVsQlFVbE5MRWRCUVd0Q1FTeEZRVUZIUXl4TlFVRk5MRWxCUVUxSUxFOUJRVTlGSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXBiMkpxWldOMExtcHpJbjA9IiwidmFyIEl0ZXJhdG9ycz1yZXF1aXJlKFwiLi9faXRlcmF0b3JzXCIpLElURVJBVE9SPXJlcXVpcmUoXCIuL193a3NcIikoXCJpdGVyYXRvclwiKSxBcnJheVByb3RvPUFycmF5LnByb3RvdHlwZTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihyKXtyZXR1cm4gdm9pZCAwIT09ciYmKEl0ZXJhdG9ycy5BcnJheT09PXJ8fEFycmF5UHJvdG9bSVRFUkFUT1JdPT09cil9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5cGN5MWhjbkpoZVMxcGRHVnlMbXB6SWwwc0ltNWhiV1Z6SWpwYklrbDBaWEpoZEc5eWN5SXNJbkpsY1hWcGNtVWlMQ0pKVkVWU1FWUlBVaUlzSWtGeWNtRjVVSEp2ZEc4aUxDSkJjbkpoZVNJc0luQnliM1J2ZEhsd1pTSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0pwZENJc0luVnVaR1ZtYVc1bFpDSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwRXNTVUZCU1VFc1ZVRkJXVU1zVVVGQlVTeG5Ra0ZEY0VKRExGTkJRVmRFTEZGQlFWRXNVMEZCVWtFc1EwRkJhMElzV1VGRE4wSkZMRmRCUVdGRExFMUJRVTFETEZWQlJYWkNReXhQUVVGUFF5eFJRVUZWTEZOQlFWVkRMRWRCUTNwQ0xGbEJRV05ETEVsQlFWQkVMRWxCUVhGQ1VpeFZRVUZWU1N4UlFVRlZTU3hIUVVGTlRDeFhRVUZYUkN4WlFVRmpUU0lzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmFYTXRZWEp5WVhrdGFYUmxjaTVxY3lKOSIsInZhciBjb2Y9cmVxdWlyZShcIi4vX2NvZlwiKTttb2R1bGUuZXhwb3J0cz1BcnJheS5pc0FycmF5fHxmdW5jdGlvbiBpc0FycmF5KHIpe3JldHVyblwiQXJyYXlcIj09Y29mKHIpfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXBjeTFoY25KaGVTNXFjeUpkTENKdVlXMWxjeUk2V3lKamIyWWlMQ0p5WlhGMWFYSmxJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSWtGeWNtRjVJaXdpYVhOQmNuSmhlU0lzSW1GeVp5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwRXNTVUZCU1VFc1NVRkJUVU1zVVVGQlVTeFZRVU5zUWtNc1QwRkJUME1zVVVGQlZVTXNUVUZCVFVNc1UwRkJWeXhUUVVGVFFTeFJRVUZSUXl4SFFVTnFSQ3hOUVVGdFFpeFRRVUZhVGl4SlFVRkpUU0lzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmFYTXRZWEp5WVhrdWFuTWlmUT09IiwibW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24obyl7cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIG8/bnVsbCE9PW86XCJmdW5jdGlvblwiPT10eXBlb2Ygb307XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDlwY3kxdlltcGxZM1F1YW5NaVhTd2libUZ0WlhNaU9sc2liVzlrZFd4bElpd2laWGh3YjNKMGN5SXNJbWwwSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVVFc1QwRkJUME1zVVVGQlZTeFRRVUZWUXl4SFFVTjZRaXhOUVVGeFFpeHBRa0ZCVUVFc1JVRkJlVUlzVDBGQlVFRXNSVUZCTkVJc2JVSkJRVkJCSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXBjeTF2WW1wbFkzUXVhbk1pZlE9PSIsInZhciBhbk9iamVjdD1yZXF1aXJlKFwiLi9fYW4tb2JqZWN0XCIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKHIsdCxlLGEpe3RyeXtyZXR1cm4gYT90KGFuT2JqZWN0KGUpWzBdLGVbMV0pOnQoZSl9Y2F0Y2godCl7dmFyIGM9ci5yZXR1cm47dGhyb3cgdm9pZCAwIT09YyYmYW5PYmplY3QoYy5jYWxsKHIpKSx0fX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDlwZEdWeUxXTmhiR3d1YW5NaVhTd2libUZ0WlhNaU9sc2lZVzVQWW1wbFkzUWlMQ0p5WlhGMWFYSmxJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSW1sMFpYSmhkRzl5SWl3aVptNGlMQ0oyWVd4MVpTSXNJbVZ1ZEhKcFpYTWlMQ0psSWl3aWNtVjBJaXdpZFc1a1pXWnBibVZrSWl3aVkyRnNiQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRMEVzU1VGQlNVRXNVMEZCVjBNc1VVRkJVU3huUWtGRGRrSkRMRTlCUVU5RExGRkJRVlVzVTBGQlZVTXNSVUZCVlVNc1JVRkJTVU1zUlVGQlQwTXNSMEZET1VNc1NVRkRSU3hQUVVGUFFTeEZRVUZWUml4RlFVRkhUQ3hUUVVGVFRTeEhRVUZQTEVkQlFVbEJMRVZCUVUwc1NVRkJUVVFzUlVGQlIwTXNSMEZGZGtRc1RVRkJUMFVzUjBGRFVDeEpRVUZKUXl4RlFVRk5UQ3hGUVVGcFFpeFBRVVV6UWl4WFFVUlpUU3hKUVVGU1JDeEhRVUZ0UWxRc1UwRkJVMU1zUlVGQlNVVXNTMEZCUzFBc1NVRkRia05KSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXBkR1Z5TFdOaGJHd3Vhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciBjcmVhdGU9cmVxdWlyZShcIi4vX29iamVjdC1jcmVhdGVcIiksZGVzY3JpcHRvcj1yZXF1aXJlKFwiLi9fcHJvcGVydHktZGVzY1wiKSxzZXRUb1N0cmluZ1RhZz1yZXF1aXJlKFwiLi9fc2V0LXRvLXN0cmluZy10YWdcIiksSXRlcmF0b3JQcm90b3R5cGU9e307cmVxdWlyZShcIi4vX2hpZGVcIikoSXRlcmF0b3JQcm90b3R5cGUscmVxdWlyZShcIi4vX3drc1wiKShcIml0ZXJhdG9yXCIpLGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KSxtb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihyLHQsZSl7ci5wcm90b3R5cGU9Y3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLHtuZXh0OmRlc2NyaXB0b3IoMSxlKX0pLHNldFRvU3RyaW5nVGFnKHIsdCtcIiBJdGVyYXRvclwiKX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDlwZEdWeUxXTnlaV0YwWlM1cWN5SmRMQ0p1WVcxbGN5STZXeUpqY21WaGRHVWlMQ0p5WlhGMWFYSmxJaXdpWkdWelkzSnBjSFJ2Y2lJc0luTmxkRlJ2VTNSeWFXNW5WR0ZuSWl3aVNYUmxjbUYwYjNKUWNtOTBiM1I1Y0dVaUxDSjBhR2x6SWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0lrTnZibk4wY25WamRHOXlJaXdpVGtGTlJTSXNJbTVsZUhRaUxDSndjbTkwYjNSNWNHVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUTBFc1NVRkJTVUVzVDBGQlUwTXNVVUZCVVN4dlFrRkRha0pETEZkQlFXRkVMRkZCUVZFc2IwSkJRM0pDUlN4bFFVRnBRa1lzVVVGQlVTeDNRa0ZEZWtKSExHdENRVUZ2UWl4SFFVZDRRa2dzVVVGQlVTeFZRVUZTUVN4RFFVRnRRa2NzYTBKQlFXMUNTQ3hSUVVGUkxGTkJRVkpCTEVOQlFXdENMRmxCUVdFc1YwRkJZeXhQUVVGUFNTeFBRVVV4UmtNc1QwRkJUME1zVVVGQlZTeFRRVUZWUXl4RlFVRmhReXhGUVVGTlF5eEhRVU0xUTBZc1JVRkJXVWNzVlVGQldWZ3NUMEZCVDBrc2EwSkJRVzFDTEVOQlFVVk5MRXRCUVUxU0xGZEJRVmNzUlVGQlIxRXNTMEZEZUVWUUxHVkJRV1ZMTEVWQlFXRkRMRVZCUVU4aUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMmwwWlhJdFkzSmxZWFJsTG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgTElCUkFSWT1yZXF1aXJlKFwiLi9fbGlicmFyeVwiKSwkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIikscmVkZWZpbmU9cmVxdWlyZShcIi4vX3JlZGVmaW5lXCIpLGhpZGU9cmVxdWlyZShcIi4vX2hpZGVcIiksSXRlcmF0b3JzPXJlcXVpcmUoXCIuL19pdGVyYXRvcnNcIiksJGl0ZXJDcmVhdGU9cmVxdWlyZShcIi4vX2l0ZXItY3JlYXRlXCIpLHNldFRvU3RyaW5nVGFnPXJlcXVpcmUoXCIuL19zZXQtdG8tc3RyaW5nLXRhZ1wiKSxnZXRQcm90b3R5cGVPZj1yZXF1aXJlKFwiLi9fb2JqZWN0LWdwb1wiKSxJVEVSQVRPUj1yZXF1aXJlKFwiLi9fd2tzXCIpKFwiaXRlcmF0b3JcIiksQlVHR1k9IShbXS5rZXlzJiZcIm5leHRcImluW10ua2V5cygpKSxGRl9JVEVSQVRPUj1cIkBAaXRlcmF0b3JcIixLRVlTPVwia2V5c1wiLFZBTFVFUz1cInZhbHVlc1wiLHJldHVyblRoaXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc307bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZSxyLHQsaSxuLG8scyl7JGl0ZXJDcmVhdGUodCxyLGkpO3ZhciB1LGEsVCxSPWZ1bmN0aW9uKGUpe2lmKCFCVUdHWSYmZSBpbiBFKXJldHVybiBFW2VdO3N3aXRjaChlKXtjYXNlIEtFWVM6cmV0dXJuIGZ1bmN0aW9uIGtleXMoKXtyZXR1cm4gbmV3IHQodGhpcyxlKX07Y2FzZSBWQUxVRVM6cmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpe3JldHVybiBuZXcgdCh0aGlzLGUpfX1yZXR1cm4gZnVuY3Rpb24gZW50cmllcygpe3JldHVybiBuZXcgdCh0aGlzLGUpfX0sZj1yK1wiIEl0ZXJhdG9yXCIsYz1uPT1WQUxVRVMsQT0hMSxFPWUucHJvdG90eXBlLEk9RVtJVEVSQVRPUl18fEVbRkZfSVRFUkFUT1JdfHxuJiZFW25dLHA9SXx8UihuKSxoPW4/Yz9SKFwiZW50cmllc1wiKTpwOnZvaWQgMCx5PVwiQXJyYXlcIj09ciYmRS5lbnRyaWVzfHxJO2lmKHkmJihUPWdldFByb3RvdHlwZU9mKHkuY2FsbChuZXcgZSkpKSE9PU9iamVjdC5wcm90b3R5cGUmJlQubmV4dCYmKHNldFRvU3RyaW5nVGFnKFQsZiwhMCksTElCUkFSWXx8XCJmdW5jdGlvblwiPT10eXBlb2YgVFtJVEVSQVRPUl18fGhpZGUoVCxJVEVSQVRPUixyZXR1cm5UaGlzKSksYyYmSSYmSS5uYW1lIT09VkFMVUVTJiYoQT0hMCxwPWZ1bmN0aW9uIHZhbHVlcygpe3JldHVybiBJLmNhbGwodGhpcyl9KSxMSUJSQVJZJiYhc3x8IUJVR0dZJiYhQSYmRVtJVEVSQVRPUl18fGhpZGUoRSxJVEVSQVRPUixwKSxJdGVyYXRvcnNbcl09cCxJdGVyYXRvcnNbZl09cmV0dXJuVGhpcyxuKWlmKHU9e3ZhbHVlczpjP3A6UihWQUxVRVMpLGtleXM6bz9wOlIoS0VZUyksZW50cmllczpofSxzKWZvcihhIGluIHUpYSBpbiBFfHxyZWRlZmluZShFLGEsdVthXSk7ZWxzZSAkZXhwb3J0KCRleHBvcnQuUCskZXhwb3J0LkYqKEJVR0dZfHxBKSxyLHUpO3JldHVybiB1fTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXBkR1Z5TFdSbFptbHVaUzVxY3lKZExDSnVZVzFsY3lJNld5Sk1TVUpTUVZKWklpd2ljbVZ4ZFdseVpTSXNJaVJsZUhCdmNuUWlMQ0p5WldSbFptbHVaU0lzSW1ocFpHVWlMQ0pKZEdWeVlYUnZjbk1pTENJa2FYUmxja055WldGMFpTSXNJbk5sZEZSdlUzUnlhVzVuVkdGbklpd2laMlYwVUhKdmRHOTBlWEJsVDJZaUxDSkpWRVZTUVZSUFVpSXNJa0pWUjBkWklpd2lhMlY1Y3lJc0lrWkdYMGxVUlZKQlZFOVNJaXdpUzBWWlV5SXNJbFpCVEZWRlV5SXNJbkpsZEhWeWJsUm9hWE1pTENKMGFHbHpJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSWtKaGMyVWlMQ0pPUVUxRklpd2lRMjl1YzNSeWRXTjBiM0lpTENKdVpYaDBJaXdpUkVWR1FWVk1WQ0lzSWtsVFgxTkZWQ0lzSWtaUFVrTkZSQ0lzSW0xbGRHaHZaSE1pTENKclpYa2lMQ0pKZEdWeVlYUnZjbEJ5YjNSdmRIbHdaU0lzSW1kbGRFMWxkR2h2WkNJc0ltdHBibVFpTENKd2NtOTBieUlzSW5aaGJIVmxjeUlzSW1WdWRISnBaWE1pTENKVVFVY2lMQ0pFUlVaZlZrRk1WVVZUSWl3aVZrRk1WVVZUWDBKVlJ5SXNJbkJ5YjNSdmRIbHdaU0lzSWlSdVlYUnBkbVVpTENJa1pHVm1ZWFZzZENJc0lpUmxiblJ5YVdWeklpd2lkVzVrWldacGJtVmtJaXdpSkdGdWVVNWhkR2wyWlNJc0ltTmhiR3dpTENKUFltcGxZM1FpTENKdVlXMWxJaXdpVUNJc0lrWWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUTBFc1NVRkJTVUVzVVVGQlZVTXNVVUZCVVN4alFVTnNRa01zVVVGQlZVUXNVVUZCVVN4aFFVTnNRa1VzVTBGQlYwWXNVVUZCVVN4bFFVTnVRa2NzUzBGQlQwZ3NVVUZCVVN4WFFVTm1TU3hWUVVGWlNpeFJRVUZSTEdkQ1FVTndRa3NzV1VGQlkwd3NVVUZCVVN4clFrRkRkRUpOTEdWQlFXbENUaXhSUVVGUkxIZENRVU42UWs4c1pVRkJhVUpRTEZGQlFWRXNhVUpCUTNwQ1VTeFRRVUZYVWl4UlFVRlJMRk5CUVZKQkxFTkJRV3RDTEZsQlF6ZENVeXhSUVVGVkxFZEJRVWRETEUxQlFWRXNVVUZCVlN4SFFVRkhRU3hSUVVOc1EwTXNXVUZCWXl4aFFVTmtReXhMUVVGUExFOUJRMUJETEU5QlFWTXNVMEZGVkVNc1YwRkJZU3hYUVVGakxFOUJRVTlETEUxQlJYUkRReXhQUVVGUFF5eFJRVUZWTEZOQlFWVkRMRVZCUVUxRExFVkJRVTFETEVWQlFXRkRMRVZCUVUxRExFVkJRVk5ETEVWQlFWRkRMRWRCUTNwRmJrSXNXVUZCV1dVc1JVRkJZVVFzUlVGQlRVVXNSMEZETDBJc1NVRmxTVWtzUlVGQlUwTXNSVUZCUzBNc1JVRm1aRU1zUlVGQldTeFRRVUZWUXl4SFFVTjRRaXhKUVVGTGNFSXNUMEZCVTI5Q0xFdEJRVkZETEVWQlFVOHNUMEZCVDBFc1JVRkJUVVFzUjBGRE1VTXNUMEZCVVVFc1IwRkRUaXhMUVVGTGFrSXNTMEZCVFN4UFFVRlBMRk5CUVZOR0xFOUJRVk1zVDBGQlR5eEpRVUZKVlN4RlFVRlpUQ3hMUVVGTll5eEpRVU5xUlN4TFFVRkxhRUlzVDBGQlVTeFBRVUZQTEZOQlFWTnJRaXhUUVVGWExFOUJRVThzU1VGQlNWZ3NSVUZCV1V3c1MwRkJUV01zU1VGRGNrVXNUMEZCVHl4VFFVRlRSeXhWUVVGWkxFOUJRVThzU1VGQlNWb3NSVUZCV1V3c1MwRkJUV01zUzBGRmVrUkpMRVZCUVUxa0xFVkJRVThzV1VGRFltVXNSVUZCWVZvc1IwRkJWMVFzVDBGRGVFSnpRaXhIUVVGaExFVkJRMkpNTEVWQlFWRmFMRVZCUVV0clFpeFZRVU5pUXl4RlFVRlZVQ3hGUVVGTmRFSXNWMEZCWVhOQ0xFVkJRVTF1UWl4alFVRm5RbGNzUjBGQlYxRXNSVUZCVFZJc1IwRkRjRVZuUWl4RlFVRlhSQ3hIUVVGWFZDeEZRVUZWVGl4SFFVTm9RMmxDTEVWQlFWZHFRaXhGUVVGWFdTeEZRVUYzUWs0c1JVRkJWU3hYUVVGeVFsVXNUMEZCYTBORkxFVkJRM0pGUXl4RlFVRnhRaXhUUVVGU2RFSXNSMEZCYTBKWExFVkJRVTFGTEZOQlFYRkNTeXhGUVhkQ09VUXNSMEZ5UWtsSkxFbEJRMFprTEVWQlFXOUNjRUlzWlVGQlpXdERMRVZCUVZkRExFdEJRVXNzU1VGQlNYaENMRTlCUXpkQ2VVSXNUMEZCVDFBc1YwRkJZVlFzUlVGQmEwSk9MRTlCUlRsRVppeGxRVUZsY1VJc1JVRkJiVUpOTEVkQlFVc3NSMEZGYkVOc1F5eFRRVUZwUkN4dFFrRkJMMEkwUWl4RlFVRnJRbTVDTEZkQlFYbENUQ3hMUVVGTGQwSXNSVUZCYlVKdVFpeFRRVUZWVFN4aFFVbHdSMjlDTEVkQlFXTkhMRWRCUVZkQkxFVkJRVkZQTEU5QlFWTXZRaXhUUVVNMVEzTkNMRWRCUVdFc1JVRkRZa2NzUlVGQlZ5eFRRVUZUVUN4VFFVRlhMRTlCUVU5TkxFVkJRVkZMTEV0QlFVc3pRaXhSUVVjdlEyaENMRlZCUVZkNVFpeEpRVUZaWml4UlFVRlRNRUlzUjBGQlpVd3NSVUZCVFhSQ0xGZEJRM3BFVEN4TFFVRkxNa0lzUlVGQlQzUkNMRk5CUVZVNFFpeEhRVWQ0UW14RExGVkJRVlZsTEVkQlFWRnRRaXhGUVVOc1FteERMRlZCUVZVMlFpeEhRVUZQYmtJc1YwRkRZbEVzUlVGTlJpeEhRVXhCUnl4RlFVRlZMRU5CUTFKTkxFOUJRVkZITEVWQlFXRkpMRVZCUVZkV0xFVkJRVlZtTEZGQlF6RkRTQ3hMUVVGTllTeEZRVUZUWlN4RlFVRlhWaXhGUVVGVmFFSXNUVUZEY0VOdlFpeFJRVUZUVHl4SFFVVlFaaXhGUVVGUkxFbEJRVXRGTEV0QlFVOUVMRVZCUTJoQ1F5eExRVUZQU1N4SFFVRlJOVUlzVTBGQlV6UkNMRVZCUVU5S0xFVkJRVXRFTEVWQlFWRkRMRk5CUXpkRGVrSXNVVUZCVVVFc1VVRkJVVFJETEVWQlFVazFReXhSUVVGUk5rTXNSMEZCUzNKRExFOUJRVk13UWl4SFFVRmhhRUlzUlVGQlRVMHNSMEZGZEVVc1QwRkJUMEVpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgybDBaWEl0WkdWbWFXNWxMbXB6SW4wPSIsInZhciBJVEVSQVRPUj1yZXF1aXJlKFwiLi9fd2tzXCIpKFwiaXRlcmF0b3JcIiksU0FGRV9DTE9TSU5HPSExO3RyeXt2YXIgcml0ZXI9WzddW0lURVJBVE9SXSgpO3JpdGVyLnJldHVybj1mdW5jdGlvbigpe1NBRkVfQ0xPU0lORz0hMH0sQXJyYXkuZnJvbShyaXRlcixmdW5jdGlvbigpe3Rocm93IDJ9KX1jYXRjaChyKXt9bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24ocix0KXtpZighdCYmIVNBRkVfQ0xPU0lORylyZXR1cm4hMTt2YXIgbj0hMTt0cnl7dmFyIGU9WzddLHU9ZVtJVEVSQVRPUl0oKTt1Lm5leHQ9ZnVuY3Rpb24oKXtyZXR1cm57ZG9uZTpuPSEwfX0sZVtJVEVSQVRPUl09ZnVuY3Rpb24oKXtyZXR1cm4gdX0scihlKX1jYXRjaChyKXt9cmV0dXJuIG59O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5cGRHVnlMV1JsZEdWamRDNXFjeUpkTENKdVlXMWxjeUk2V3lKSlZFVlNRVlJQVWlJc0luSmxjWFZwY21VaUxDSlRRVVpGWDBOTVQxTkpUa2NpTENKeWFYUmxjaUlzSWtGeWNtRjVJaXdpWm5KdmJTSXNJbVVpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aVpYaGxZeUlzSW5OcmFYQkRiRzl6YVc1bklpd2ljMkZtWlNJc0ltRnljaUlzSW1sMFpYSWlMQ0p1WlhoMElpd2laRzl1WlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1NVRkJTVUVzVTBGQlYwTXNVVUZCVVN4VFFVRlNRU3hEUVVGclFpeFpRVU0zUWtNc1kwRkJaU3hGUVVWdVFpeEpRVU5GTEVsQlFVbERMRTFCUVZFc1EwRkJReXhIUVVGSFNDeFpRVU5vUWtjc1RVRkJZeXhQUVVGSkxGZEJRV05FTEdOQlFXVXNSMEZGTDBORkxFMUJRVTFETEV0QlFVdEdMRTFCUVU4c1YwRkJZeXhOUVVGTkxFbEJRM1JETEUxQlFVOUhMRWxCUlZSRExFOUJRVTlETEZGQlFWVXNVMEZCVlVNc1JVRkJUVU1zUjBGREwwSXNTVUZCUzBFc1NVRkJaMEpTTEdGQlFXTXNUMEZCVHl4RlFVTXhReXhKUVVGSlV5eEhRVUZQTEVWQlExZ3NTVUZEUlN4SlFVRkpReXhGUVVGTkxFTkJRVU1zUjBGRFVFTXNSVUZCVDBRc1JVRkJTVm9zV1VGRFptRXNSVUZCUzBNc1MwRkJUeXhYUVVGakxFMUJRVThzUTBGQlJVTXNTMEZCVFVvc1IwRkJUeXhKUVVOb1JFTXNSVUZCU1Zvc1ZVRkJXU3hYUVVGakxFOUJRVTloTEVkQlEzSkRTaXhGUVVGTFJ5eEhRVU5NTEUxQlFVOU9MRWxCUTFRc1QwRkJUMHNpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgybDBaWEl0WkdWMFpXTjBMbXB6SW4wPSIsIm1vZHVsZS5leHBvcnRzPXt9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5cGRHVnlZWFJ2Y25NdWFuTWlYU3dpYm1GdFpYTWlPbHNpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUZCTEU5QlFVOURMRkZCUVZVaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMmwwWlhKaGRHOXljeTVxY3lKOSIsIm1vZHVsZS5leHBvcnRzPSEwO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5c2FXSnlZWEo1TG1weklsMHNJbTVoYldWeklqcGJJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJRU3hQUVVGUFF5eFRRVUZWSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXNhV0p5WVhKNUxtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIGdldEtleXM9cmVxdWlyZShcIi4vX29iamVjdC1rZXlzXCIpLGdPUFM9cmVxdWlyZShcIi4vX29iamVjdC1nb3BzXCIpLHBJRT1yZXF1aXJlKFwiLi9fb2JqZWN0LXBpZVwiKSx0b09iamVjdD1yZXF1aXJlKFwiLi9fdG8tb2JqZWN0XCIpLElPYmplY3Q9cmVxdWlyZShcIi4vX2lvYmplY3RcIiksJGFzc2lnbj1PYmplY3QuYXNzaWduO21vZHVsZS5leHBvcnRzPSEkYXNzaWdufHxyZXF1aXJlKFwiLi9fZmFpbHNcIikoZnVuY3Rpb24oKXt2YXIgZT17fSx0PXt9LHI9U3ltYm9sKCkscz1cImFiY2RlZmdoaWprbG1ub3BxcnN0XCI7cmV0dXJuIGVbcl09NyxzLnNwbGl0KFwiXCIpLmZvckVhY2goZnVuY3Rpb24oZSl7dFtlXT1lfSksNyE9JGFzc2lnbih7fSxlKVtyXXx8T2JqZWN0LmtleXMoJGFzc2lnbih7fSx0KSkuam9pbihcIlwiKSE9c30pP2Z1bmN0aW9uIGFzc2lnbihlLHQpe2Zvcih2YXIgcj10b09iamVjdChlKSxzPWFyZ3VtZW50cy5sZW5ndGgsaT0xLG89Z09QUy5mLGM9cElFLmY7cz5pOylmb3IodmFyIG4sYT1JT2JqZWN0KGFyZ3VtZW50c1tpKytdKSxnPW8/Z2V0S2V5cyhhKS5jb25jYXQobyhhKSk6Z2V0S2V5cyhhKSxiPWcubGVuZ3RoLGo9MDtiPmo7KWMuY2FsbChhLG49Z1tqKytdKSYmKHJbbl09YVtuXSk7cmV0dXJuIHJ9OiRhc3NpZ247XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl2WW1wbFkzUXRZWE56YVdkdUxtcHpJbDBzSW01aGJXVnpJanBiSW1kbGRFdGxlWE1pTENKeVpYRjFhWEpsSWl3aVowOVFVeUlzSW5CSlJTSXNJblJ2VDJKcVpXTjBJaXdpU1U5aWFtVmpkQ0lzSWlSaGMzTnBaMjRpTENKUFltcGxZM1FpTENKaGMzTnBaMjRpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aVFTSXNJa0lpTENKVElpd2lVM2x0WW05c0lpd2lTeUlzSW5Od2JHbDBJaXdpWm05eVJXRmphQ0lzSW1zaUxDSnJaWGx6SWl3aWFtOXBiaUlzSW5SaGNtZGxkQ0lzSW5OdmRYSmpaU0lzSWxRaUxDSmhUR1Z1SWl3aVlYSm5kVzFsYm5Seklpd2liR1Z1WjNSb0lpd2lhVzVrWlhnaUxDSm5aWFJUZVcxaWIyeHpJaXdpWmlJc0ltbHpSVzUxYlNJc0ltdGxlU0lzSW1OdmJtTmhkQ0lzSW1vaUxDSmpZV3hzSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4aFFVVkJMRWxCUVVsQkxGRkJRVlZETEZGQlFWRXNhMEpCUTJ4Q1F5eExRVUZQUkN4UlFVRlJMR3RDUVVObVJTeEpRVUZOUml4UlFVRlJMR2xDUVVOa1J5eFRRVUZYU0N4UlFVRlJMR2RDUVVOdVFra3NVVUZCVlVvc1VVRkJVU3hqUVVOc1Frc3NVVUZCVlVNc1QwRkJUME1zVDBGSGNrSkRMRTlCUVU5RExGTkJRVmRLTEZOQlFWZE1MRkZCUVZFc1YwRkJVa0VzUTBGQmIwSXNWMEZETDBNc1NVRkJTVlVzUlVGQlNTeEhRVU5LUXl4RlFVRkpMRWRCUlVwRExFVkJRVWxETEZOQlEwcERMRVZCUVVrc2RVSkJSMUlzVDBGR1FVb3NSVUZCUlVVc1IwRkJTeXhGUVVOUVJTeEZRVUZGUXl4TlFVRk5MRWxCUVVsRExGRkJRVkVzVTBGQlZVTXNSMEZCUzA0c1JVRkJSVTBzUjBGQlMwRXNTVUZEWkN4SFFVRnlRbG9zVVVGQlVTeEhRVUZKU3l4SFFVRkhSU3hKUVVGWFRpeFBRVUZQV1N4TFFVRkxZaXhSUVVGUkxFZEJRVWxOTEVsQlFVbFJMRXRCUVVzc1MwRkJUMHdzU1VGRGRFVXNVMEZCVTFBc1QwRkJUMkVzUlVGQlVVTXNSMEZOTTBJc1NVRk1RU3hKUVVGSlF5eEZRVUZKYmtJc1UwRkJVMmxDTEVkQlEySkhMRVZCUVU5RExGVkJRVlZETEU5QlEycENReXhGUVVGUkxFVkJRMUpETEVWQlFXRXhRaXhMUVVGTE1rSXNSVUZEYkVKRExFVkJRVk16UWl4SlFVRkpNRUlzUlVGRFZrd3NSVUZCVDBjc1IwRk5XaXhKUVV4QkxFbEJTVWxKTEVWQlNrRnNRaXhGUVVGSlVpeFJRVUZSYjBJc1ZVRkJWVVVzVFVGRGRFSlNMRVZCUVU5VExFVkJRV0UxUWl4UlFVRlJZU3hIUVVGSGJVSXNUMEZCVDBvc1JVRkJWMllzU1VGQlRXSXNVVUZCVVdFc1IwRkRMMFJoTEVWQlFWTlFMRVZCUVV0UExFOUJRMlJQTEVWQlFVa3NSVUZGUkZBc1JVRkJVMDhzUjBGQlQwZ3NSVUZCVDBrc1MwRkJTM0pDTEVWQlFVZHJRaXhGUVVGTldpeEZRVUZMWXl4UlFVRlBWaXhGUVVGRlVTeEhRVUZQYkVJc1JVRkJSV3RDTEVsQlEyNUZMRTlCUVU5U0xFZEJRMUJxUWlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZiMkpxWldOMExXRnpjMmxuYmk1cWN5SjkiLCJ2YXIgYW5PYmplY3Q9cmVxdWlyZShcIi4vX2FuLW9iamVjdFwiKSxkUHM9cmVxdWlyZShcIi4vX29iamVjdC1kcHNcIiksZW51bUJ1Z0tleXM9cmVxdWlyZShcIi4vX2VudW0tYnVnLWtleXNcIiksSUVfUFJPVE89cmVxdWlyZShcIi4vX3NoYXJlZC1rZXlcIikoXCJJRV9QUk9UT1wiKSxFbXB0eT1mdW5jdGlvbigpe30sUFJPVE9UWVBFPVwicHJvdG90eXBlXCIsY3JlYXRlRGljdD1mdW5jdGlvbigpe3ZhciBlLHQ9cmVxdWlyZShcIi4vX2RvbS1jcmVhdGVcIikoXCJpZnJhbWVcIikscj1lbnVtQnVnS2V5cy5sZW5ndGg7Zm9yKHQuc3R5bGUuZGlzcGxheT1cIm5vbmVcIixyZXF1aXJlKFwiLi9faHRtbFwiKS5hcHBlbmRDaGlsZCh0KSx0LnNyYz1cImphdmFzY3JpcHQ6XCIsKGU9dC5jb250ZW50V2luZG93LmRvY3VtZW50KS5vcGVuKCksZS53cml0ZShcIjxzY3JpcHQ+ZG9jdW1lbnQuRj1PYmplY3Q8XFwvc2NyaXB0PlwiKSxlLmNsb3NlKCksY3JlYXRlRGljdD1lLkY7ci0tOylkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW3JdXTtyZXR1cm4gY3JlYXRlRGljdCgpfTttb2R1bGUuZXhwb3J0cz1PYmplY3QuY3JlYXRlfHxmdW5jdGlvbiBjcmVhdGUoZSx0KXt2YXIgcjtyZXR1cm4gbnVsbCE9PWU/KEVtcHR5W1BST1RPVFlQRV09YW5PYmplY3QoZSkscj1uZXcgRW1wdHksRW1wdHlbUFJPVE9UWVBFXT1udWxsLHJbSUVfUFJPVE9dPWUpOnI9Y3JlYXRlRGljdCgpLHZvaWQgMD09PXQ/cjpkUHMocix0KX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl2WW1wbFkzUXRZM0psWVhSbExtcHpJbDBzSW01aGJXVnpJanBiSW1GdVQySnFaV04wSWl3aWNtVnhkV2x5WlNJc0ltUlFjeUlzSW1WdWRXMUNkV2RMWlhseklpd2lTVVZmVUZKUFZFOGlMQ0pGYlhCMGVTSXNJbEJTVDFSUFZGbFFSU0lzSW1OeVpXRjBaVVJwWTNRaUxDSnBabkpoYldWRWIyTjFiV1Z1ZENJc0ltbG1jbUZ0WlNJc0lta2lMQ0pzWlc1bmRHZ2lMQ0p6ZEhsc1pTSXNJbVJwYzNCc1lYa2lMQ0poY0hCbGJtUkRhR2xzWkNJc0luTnlZeUlzSW1OdmJuUmxiblJYYVc1a2IzY2lMQ0prYjJOMWJXVnVkQ0lzSW05d1pXNGlMQ0ozY21sMFpTSXNJbXgwSWl3aVkyeHZjMlVpTENKR0lpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SXNJazlpYW1WamRDSXNJbU55WldGMFpTSXNJazhpTENKUWNtOXdaWEowYVdWeklpd2ljbVZ6ZFd4MElpd2lkVzVrWldacGJtVmtJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRU3hKUVVGSlFTeFRRVUZYUXl4UlFVRlJMR2RDUVVOdVFrTXNTVUZCVFVRc1VVRkJVU3hwUWtGRFpFVXNXVUZCWTBZc1VVRkJVU3h2UWtGRGRFSkhMRk5CUVZkSUxGRkJRVkVzWjBKQlFWSkJMRU5CUVhsQ0xGbEJRM0JEU1N4TlFVRlJMR0ZCUTFKRExGVkJRVmtzV1VGSFdrTXNWMEZCWVN4WFFVVm1MRWxCU1VsRExFVkJTa0ZETEVWQlFWTlNMRkZCUVZFc1owSkJRVkpCTEVOQlFYbENMRlZCUTJ4RFV5eEZRVUZKVUN4WlFVRlpVU3hQUVdOd1FpeEpRVlpCUml4RlFVRlBSeXhOUVVGTlF5eFJRVUZWTEU5QlEzWkNXaXhSUVVGUkxGZEJRVmRoTEZsQlFWbE1MRWRCUXk5Q1FTeEZRVUZQVFN4SlFVRk5MR1ZCUjJKUUxFVkJRV2xDUXl4RlFVRlBUeXhqUVVGalF5eFZRVU4yUWtNc1QwRkRabFlzUlVGQlpWY3NUVUZCVFVNc2RVTkJRM0pDV2l4RlFVRmxZU3hSUVVObVpDeFhRVUZoUXl4RlFVRmxZeXhGUVVOeVFsb3NXVUZCV1Vnc1YwRkJWMFFzVjBGQlYwZ3NXVUZCV1U4c1NVRkRja1FzVDBGQlQwZ3NZMEZIVkdkQ0xFOUJRVTlETEZGQlFWVkRMRTlCUVU5RExGRkJRVlVzVTBGQlUwRXNUMEZCVDBNc1JVRkJSME1zUjBGRGJrUXNTVUZCU1VNc1JVRlJTaXhQUVZCVkxFOUJRVTVHTEVkQlEwWjBRaXhOUVVGTlF5eFhRVUZoVGl4VFFVRlRNa0lzUjBGRE5VSkZMRVZCUVZNc1NVRkJTWGhDTEUxQlEySkJMRTFCUVUxRExGZEJRV0VzUzBGRmJrSjFRaXhGUVVGUGVrSXNWVUZCV1hWQ0xFZEJRMlJGTEVWQlFWTjBRaXhyUWtGRFRYVkNMRWxCUVdaR0xFVkJRVEpDUXl4RlFVRlRNMElzU1VGQlNUSkNMRVZCUVZGRUlpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTl2WW1wbFkzUXRZM0psWVhSbExtcHpJbjA9IiwidmFyIGFuT2JqZWN0PXJlcXVpcmUoXCIuL19hbi1vYmplY3RcIiksSUU4X0RPTV9ERUZJTkU9cmVxdWlyZShcIi4vX2llOC1kb20tZGVmaW5lXCIpLHRvUHJpbWl0aXZlPXJlcXVpcmUoXCIuL190by1wcmltaXRpdmVcIiksZFA9T2JqZWN0LmRlZmluZVByb3BlcnR5O2V4cG9ydHMuZj1yZXF1aXJlKFwiLi9fZGVzY3JpcHRvcnNcIik/T2JqZWN0LmRlZmluZVByb3BlcnR5OmZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGUscix0KXtpZihhbk9iamVjdChlKSxyPXRvUHJpbWl0aXZlKHIsITApLGFuT2JqZWN0KHQpLElFOF9ET01fREVGSU5FKXRyeXtyZXR1cm4gZFAoZSxyLHQpfWNhdGNoKGUpe31pZihcImdldFwiaW4gdHx8XCJzZXRcImluIHQpdGhyb3cgVHlwZUVycm9yKFwiQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhXCIpO3JldHVyblwidmFsdWVcImluIHQmJihlW3JdPXQudmFsdWUpLGV9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5dlltcGxZM1F0WkhBdWFuTWlYU3dpYm1GdFpYTWlPbHNpWVc1UFltcGxZM1FpTENKeVpYRjFhWEpsSWl3aVNVVTRYMFJQVFY5RVJVWkpUa1VpTENKMGIxQnlhVzFwZEdsMlpTSXNJbVJRSWl3aVQySnFaV04wSWl3aVpHVm1hVzVsVUhKdmNHVnlkSGtpTENKbGVIQnZjblJ6SWl3aVppSXNJazhpTENKUUlpd2lRWFIwY21saWRYUmxjeUlzSW1VaUxDSlVlWEJsUlhKeWIzSWlMQ0oyWVd4MVpTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNTVUZCU1VFc1UwRkJWME1zVVVGQlVTeG5Ra0ZEYmtKRExHVkJRV2xDUkN4UlFVRlJMSEZDUVVONlFrVXNXVUZCWTBZc1VVRkJVU3h0UWtGRGRFSkhMRWRCUVV0RExFOUJRVTlETEdWQlJXaENReXhSUVVGUlF5eEZRVUZKVUN4UlFVRlJMR3RDUVVGdlFra3NUMEZCVDBNc1pVRkJhVUlzVTBGQlUwRXNaVUZCWlVjc1JVRkJSME1zUlVGQlIwTXNSMEZKTlVZc1IwRklRVmdzVTBGQlUxTXNSMEZEVkVNc1JVRkJTVkFzV1VGQldVOHNSMEZCUnl4SFFVTnVRbFlzVTBGQlUxY3NSMEZEVEZRc1pVRkJaMElzU1VGRGJFSXNUMEZCVDBVc1IwRkJSMHNzUlVGQlIwTXNSVUZCUjBNc1IwRkRhRUlzVFVGQlQwTXNTVUZEVkN4SFFVRkpMRkZCUVZORUxFZEJRV01zVVVGQlUwRXNSVUZCV1N4TlFVRk5SU3hWUVVGVkxEUkNRVVZvUlN4TlFVUkpMRlZCUVZkR0xFbEJRVmxHTEVWQlFVVkRMRWRCUVV0RExFVkJRVmRITEU5QlEzUkRUQ0lzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmIySnFaV04wTFdSd0xtcHpJbjA9IiwidmFyIGRQPXJlcXVpcmUoXCIuL19vYmplY3QtZHBcIiksYW5PYmplY3Q9cmVxdWlyZShcIi4vX2FuLW9iamVjdFwiKSxnZXRLZXlzPXJlcXVpcmUoXCIuL19vYmplY3Qta2V5c1wiKTttb2R1bGUuZXhwb3J0cz1yZXF1aXJlKFwiLi9fZGVzY3JpcHRvcnNcIik/T2JqZWN0LmRlZmluZVByb3BlcnRpZXM6ZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhlLHIpe2FuT2JqZWN0KGUpO2Zvcih2YXIgdCxpPWdldEtleXMociksbz1pLmxlbmd0aCxuPTA7bz5uOylkUC5mKGUsdD1pW24rK10sclt0XSk7cmV0dXJuIGV9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5dlltcGxZM1F0WkhCekxtcHpJbDBzSW01aGJXVnpJanBiSW1SUUlpd2ljbVZ4ZFdseVpTSXNJbUZ1VDJKcVpXTjBJaXdpWjJWMFMyVjVjeUlzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKUFltcGxZM1FpTENKa1pXWnBibVZRY205d1pYSjBhV1Z6SWl3aVR5SXNJbEJ5YjNCbGNuUnBaWE1pTENKUUlpd2lhMlY1Y3lJc0lteGxibWQwYUNJc0lta2lMQ0ptSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4SlFVRkpRU3hIUVVGTFF5eFJRVUZSTEdkQ1FVTmlReXhUUVVGWFJDeFJRVUZSTEdkQ1FVTnVRa1VzVVVGQlZVWXNVVUZCVVN4clFrRkZkRUpITEU5QlFVOURMRkZCUVZWS0xGRkJRVkVzYTBKQlFXOUNTeXhQUVVGUFF5eHBRa0ZCYlVJc1UwRkJVMEVzYVVKQlFXbENReXhGUVVGSFF5eEhRVU5zUjFBc1UwRkJVMDBzUjBGTFZDeEpRVXBCTEVsQlIwbEZMRVZCU0VGRExFVkJRVTlTTEZGQlFWRk5MRWRCUTJaSExFVkJRVk5FTEVWQlFVdERMRTlCUTJSRExFVkJRVWtzUlVGRlJFUXNSVUZCVTBNc1IwRkJSMklzUjBGQlIyTXNSVUZCUlU0c1JVRkJSMFVzUlVGQlNVTXNSVUZCUzBVc1MwRkJUVW9zUlVGQlYwTXNTVUZEY2tRc1QwRkJUMFlpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyOWlhbVZqZEMxa2NITXVhbk1pZlE9PSIsInZhciBwSUU9cmVxdWlyZShcIi4vX29iamVjdC1waWVcIiksY3JlYXRlRGVzYz1yZXF1aXJlKFwiLi9fcHJvcGVydHktZGVzY1wiKSx0b0lPYmplY3Q9cmVxdWlyZShcIi4vX3RvLWlvYmplY3RcIiksdG9QcmltaXRpdmU9cmVxdWlyZShcIi4vX3RvLXByaW1pdGl2ZVwiKSxoYXM9cmVxdWlyZShcIi4vX2hhc1wiKSxJRThfRE9NX0RFRklORT1yZXF1aXJlKFwiLi9faWU4LWRvbS1kZWZpbmVcIiksZ09QRD1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO2V4cG9ydHMuZj1yZXF1aXJlKFwiLi9fZGVzY3JpcHRvcnNcIik/Z09QRDpmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSxyKXtpZihlPXRvSU9iamVjdChlKSxyPXRvUHJpbWl0aXZlKHIsITApLElFOF9ET01fREVGSU5FKXRyeXtyZXR1cm4gZ09QRChlLHIpfWNhdGNoKGUpe31pZihoYXMoZSxyKSlyZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChlLHIpLGVbcl0pfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXZZbXBsWTNRdFoyOXdaQzVxY3lKZExDSnVZVzFsY3lJNld5SndTVVVpTENKeVpYRjFhWEpsSWl3aVkzSmxZWFJsUkdWell5SXNJblJ2U1U5aWFtVmpkQ0lzSW5SdlVISnBiV2wwYVhabElpd2lhR0Z6SWl3aVNVVTRYMFJQVFY5RVJVWkpUa1VpTENKblQxQkVJaXdpVDJKcVpXTjBJaXdpWjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlJaXdpWlhod2IzSjBjeUlzSW1ZaUxDSlBJaXdpVUNJc0ltVWlMQ0pqWVd4c0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeEpRVUZKUVN4SlFVRk5ReXhSUVVGUkxHbENRVU5rUXl4WFFVRmhSQ3hSUVVGUkxHOUNRVU55UWtVc1ZVRkJXVVlzVVVGQlVTeHBRa0ZEY0VKSExGbEJRV05JTEZGQlFWRXNiVUpCUTNSQ1NTeEpRVUZOU2l4UlFVRlJMRlZCUTJSTExHVkJRV2xDVEN4UlFVRlJMSEZDUVVONlFrMHNTMEZCVDBNc1QwRkJUME1zZVVKQlJXeENReXhSUVVGUlF5eEZRVUZKVml4UlFVRlJMR3RDUVVGdlFrMHNTMEZCVHl4VFFVRlRSU3g1UWtGQmVVSkhMRVZCUVVkRExFZEJSMnhHTEVkQlJrRkVMRVZCUVVsVUxGVkJRVlZUTEVkQlEyUkRMRVZCUVVsVUxGbEJRVmxUTEVkQlFVY3NSMEZEWmxBc1pVRkJaMElzU1VGRGJFSXNUMEZCVDBNc1MwRkJTMHNzUlVGQlIwTXNSMEZEWml4TlFVRlBReXhKUVVOVUxFZEJRVWxVTEVsQlFVbFBMRVZCUVVkRExFZEJRVWtzVDBGQlQxZ3NXVUZCV1VZc1NVRkJTVmNzUlVGQlJVa3NTMEZCUzBnc1JVRkJSME1zUjBGQlNVUXNSVUZCUlVNaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMjlpYW1WamRDMW5iM0JrTG1wekluMD0iLCJleHBvcnRzLmY9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXZZbXBsWTNRdFoyOXdjeTVxY3lKZExDSnVZVzFsY3lJNld5SmxlSEJ2Y25Seklpd2laaUlzSWs5aWFtVmpkQ0lzSW1kbGRFOTNibEJ5YjNCbGNuUjVVM2x0WW05c2N5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRkJMRkZCUVZGRExFVkJRVWxETEU5QlFVOURJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5dlltcGxZM1F0WjI5d2N5NXFjeUo5IiwidmFyIGhhcz1yZXF1aXJlKFwiLi9faGFzXCIpLHRvT2JqZWN0PXJlcXVpcmUoXCIuL190by1vYmplY3RcIiksSUVfUFJPVE89cmVxdWlyZShcIi4vX3NoYXJlZC1rZXlcIikoXCJJRV9QUk9UT1wiKSxPYmplY3RQcm90bz1PYmplY3QucHJvdG90eXBlO21vZHVsZS5leHBvcnRzPU9iamVjdC5nZXRQcm90b3R5cGVPZnx8ZnVuY3Rpb24odCl7cmV0dXJuIHQ9dG9PYmplY3QodCksaGFzKHQsSUVfUFJPVE8pP3RbSUVfUFJPVE9dOlwiZnVuY3Rpb25cIj09dHlwZW9mIHQuY29uc3RydWN0b3ImJnQgaW5zdGFuY2VvZiB0LmNvbnN0cnVjdG9yP3QuY29uc3RydWN0b3IucHJvdG90eXBlOnQgaW5zdGFuY2VvZiBPYmplY3Q/T2JqZWN0UHJvdG86bnVsbH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl2WW1wbFkzUXRaM0J2TG1weklsMHNJbTVoYldWeklqcGJJbWhoY3lJc0luSmxjWFZwY21VaUxDSjBiMDlpYW1WamRDSXNJa2xGWDFCU1QxUlBJaXdpVDJKcVpXTjBVSEp2ZEc4aUxDSlBZbXBsWTNRaUxDSndjbTkwYjNSNWNHVWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpWjJWMFVISnZkRzkwZVhCbFQyWWlMQ0pQSWl3aVkyOXVjM1J5ZFdOMGIzSWlYU3dpYldGd2NHbHVaM01pT2lKQlFVTkJMRWxCUVVsQkxFbEJRVTFETEZGQlFWRXNWVUZEWkVNc1UwRkJWMFFzVVVGQlVTeG5Ra0ZEYmtKRkxGTkJRVmRHTEZGQlFWRXNaMEpCUVZKQkxFTkJRWGxDTEZsQlEzQkRSeXhaUVVGalF5eFBRVUZQUXl4VlFVVjZRa01zVDBGQlQwTXNVVUZCVlVnc1QwRkJUMGtzWjBKQlFXdENMRk5CUVZWRExFZEJSV3hFTEU5QlJFRkJMRVZCUVVsU0xGTkJRVk5STEVkQlExUldMRWxCUVVsVkxFVkJRVWRRTEZWQlFXdENUeXhGUVVGRlVDeFZRVU5JTEcxQ1FVRnFRazhzUlVGQlJVTXNZVUZCTmtKRUxHRkJRV0ZCTEVWQlFVVkRMRmxCUTJoRVJDeEZRVUZGUXl4WlFVRlpUQ3hWUVVOa1NTeGhRVUZoVEN4UFFVRlRSQ3haUVVGaklpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTl2WW1wbFkzUXRaM0J2TG1wekluMD0iLCJ2YXIgaGFzPXJlcXVpcmUoXCIuL19oYXNcIiksdG9JT2JqZWN0PXJlcXVpcmUoXCIuL190by1pb2JqZWN0XCIpLGFycmF5SW5kZXhPZj1yZXF1aXJlKFwiLi9fYXJyYXktaW5jbHVkZXNcIikoITEpLElFX1BST1RPPXJlcXVpcmUoXCIuL19zaGFyZWQta2V5XCIpKFwiSUVfUFJPVE9cIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24ocixlKXt2YXIgYSx0PXRvSU9iamVjdChyKSx1PTAsTz1bXTtmb3IoYSBpbiB0KWEhPUlFX1BST1RPJiZoYXModCxhKSYmTy5wdXNoKGEpO2Zvcig7ZS5sZW5ndGg+dTspaGFzKHQsYT1lW3UrK10pJiYofmFycmF5SW5kZXhPZihPLGEpfHxPLnB1c2goYSkpO3JldHVybiBPfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXZZbXBsWTNRdGEyVjVjeTFwYm5SbGNtNWhiQzVxY3lKZExDSnVZVzFsY3lJNld5Sm9ZWE1pTENKeVpYRjFhWEpsSWl3aWRHOUpUMkpxWldOMElpd2lZWEp5WVhsSmJtUmxlRTltSWl3aVNVVmZVRkpQVkU4aUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2liMkpxWldOMElpd2libUZ0WlhNaUxDSnJaWGtpTENKUElpd2lhU0lzSW5KbGMzVnNkQ0lzSW5CMWMyZ2lMQ0pzWlc1bmRHZ2lYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRWxCUVVsQkxFbEJRVTFETEZGQlFWRXNWVUZEWkVNc1ZVRkJXVVFzVVVGQlVTeHBRa0ZEY0VKRkxHRkJRV1ZHTEZGQlFWRXNiMEpCUVZKQkxFVkJRVFpDTEVkQlF6VkRSeXhUUVVGWFNDeFJRVUZSTEdkQ1FVRlNRU3hEUVVGNVFpeFpRVVY0UTBrc1QwRkJUME1zVVVGQlZTeFRRVUZWUXl4RlFVRlJReXhIUVVOcVF5eEpRVWRKUXl4RlFVaEJReXhGUVVGSlVpeFZRVUZWU3l4SFFVTmtTU3hGUVVGSkxFVkJRMHBETEVWQlFWTXNSMEZGWWl4SlFVRkxTQ3hMUVVGUFF5eEZRVUZQUkN4SFFVRlBUQ3hWUVVGVlNpeEpRVUZKVlN4RlFVRkhSQ3hKUVVGUlJ5eEZRVUZQUXl4TFFVRkxTaXhIUVVVdlJDeExRVUZQUkN4RlFVRk5UU3hQUVVGVFNDeEhRVUZQV0N4SlFVRkpWU3hGUVVGSFJDeEZRVUZOUkN4RlFVRk5SeXhUUVVNM1ExSXNZVUZCWVZNc1JVRkJVVWdzU1VGQlVVY3NSVUZCVDBNc1MwRkJTMG9zU1VGRk5VTXNUMEZCVDBjaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMjlpYW1WamRDMXJaWGx6TFdsdWRHVnlibUZzTG1wekluMD0iLCJ2YXIgJGtleXM9cmVxdWlyZShcIi4vX29iamVjdC1rZXlzLWludGVybmFsXCIpLGVudW1CdWdLZXlzPXJlcXVpcmUoXCIuL19lbnVtLWJ1Zy1rZXlzXCIpO21vZHVsZS5leHBvcnRzPU9iamVjdC5rZXlzfHxmdW5jdGlvbiBrZXlzKGUpe3JldHVybiAka2V5cyhlLGVudW1CdWdLZXlzKX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl2WW1wbFkzUXRhMlY1Y3k1cWN5SmRMQ0p1WVcxbGN5STZXeUlrYTJWNWN5SXNJbkpsY1hWcGNtVWlMQ0psYm5WdFFuVm5TMlY1Y3lJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaUxDSlBZbXBsWTNRaUxDSnJaWGx6SWl3aVR5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwRXNTVUZCU1VFc1RVRkJVVU1zVVVGQlVTd3lRa0ZEYUVKRExGbEJRV05FTEZGQlFWRXNiMEpCUlRGQ1JTeFBRVUZQUXl4UlFVRlZReXhQUVVGUFF5eE5RVUZSTEZOQlFWTkJMRXRCUVV0RExFZEJRelZETEU5QlFVOVFMRTFCUVUxUExFVkJRVWRNSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXZZbXBsWTNRdGEyVjVjeTVxY3lKOSIsImV4cG9ydHMuZj17fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXZZbXBsWTNRdGNHbGxMbXB6SWwwc0ltNWhiV1Z6SWpwYkltVjRjRzl5ZEhNaUxDSm1JaXdpY0hKdmNHVnlkSGxKYzBWdWRXMWxjbUZpYkdVaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQlFTeFJRVUZSUXl4RlFVRkpMRWRCUVVkRElpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTl2WW1wbFkzUXRjR2xsTG1wekluMD0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLGNvcmU9cmVxdWlyZShcIi4vX2NvcmVcIiksZmFpbHM9cmVxdWlyZShcIi4vX2ZhaWxzXCIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKGUscil7dmFyIG89KGNvcmUuT2JqZWN0fHx7fSlbZV18fE9iamVjdFtlXSx0PXt9O3RbZV09cihvKSwkZXhwb3J0KCRleHBvcnQuUyskZXhwb3J0LkYqZmFpbHMoZnVuY3Rpb24oKXtvKDEpfSksXCJPYmplY3RcIix0KX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl2WW1wbFkzUXRjMkZ3TG1weklsMHNJbTVoYldWeklqcGJJaVJsZUhCdmNuUWlMQ0p5WlhGMWFYSmxJaXdpWTI5eVpTSXNJbVpoYVd4eklpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SXNJa3RGV1NJc0ltVjRaV01pTENKbWJpSXNJazlpYW1WamRDSXNJbVY0Y0NJc0lsTWlMQ0pHSWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hSUVVGVlF5eFJRVUZSTEdGQlEyeENReXhMUVVGUFJDeFJRVUZSTEZkQlEyWkZMRTFCUVZGR0xGRkJRVkVzV1VGRGNFSkhMRTlCUVU5RExGRkJRVlVzVTBGQlZVTXNSVUZCUzBNc1IwRkRPVUlzU1VGQlNVTXNSMEZCVFU0c1MwRkJTMDhzVVVGQlZTeEpRVUZKU0N4SlFVRlJSeXhQUVVGUFNDeEhRVU40UTBrc1JVRkJUU3hIUVVOV1FTeEZRVUZKU2l4SFFVRlBReXhGUVVGTFF5eEhRVU5vUWxJc1VVRkJVVUVzVVVGQlVWY3NSVUZCU1Znc1VVRkJVVmtzUlVGQlNWUXNUVUZCVFN4WFFVRmpTeXhGUVVGSExFdEJRVkVzVTBGQlZVVWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDI5aWFtVmpkQzF6WVhBdWFuTWlmUT09IiwidmFyIGdldEtleXM9cmVxdWlyZShcIi4vX29iamVjdC1rZXlzXCIpLHRvSU9iamVjdD1yZXF1aXJlKFwiLi9fdG8taW9iamVjdFwiKSxpc0VudW09cmVxdWlyZShcIi4vX29iamVjdC1waWVcIikuZjttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCl7Zm9yKHZhciByLG89dG9JT2JqZWN0KHQpLHU9Z2V0S2V5cyhvKSxpPXUubGVuZ3RoLG49MCxjPVtdO2k+bjspaXNFbnVtLmNhbGwobyxyPXVbbisrXSkmJmMucHVzaChlP1tyLG9bcl1dOm9bcl0pO3JldHVybiBjfX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl2WW1wbFkzUXRkRzh0WVhKeVlYa3Vhbk1pWFN3aWJtRnRaWE1pT2xzaVoyVjBTMlY1Y3lJc0luSmxjWFZwY21VaUxDSjBiMGxQWW1wbFkzUWlMQ0pwYzBWdWRXMGlMQ0ptSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0ltbHpSVzUwY21sbGN5SXNJbWwwSWl3aWEyVjVJaXdpVHlJc0ltdGxlWE1pTENKc1pXNW5kR2dpTENKcElpd2ljbVZ6ZFd4MElpd2lZMkZzYkNJc0luQjFjMmdpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEVsQlFVbEJMRkZCUVZWRExGRkJRVkVzYTBKQlEyeENReXhWUVVGWlJDeFJRVUZSTEdsQ1FVTndRa1VzVDBGQlUwWXNVVUZCVVN4cFFrRkJhVUpITEVWQlEzUkRReXhQUVVGUFF5eFJRVUZWTEZOQlFWVkRMRWRCUTNwQ0xFOUJRVThzVTBGQlZVTXNSMEZQWml4SlFVNUJMRWxCUzBsRExFVkJURUZETEVWQlFVbFNMRlZCUVZWTkxFZEJRMlJITEVWQlFVOVlMRkZCUVZGVkxFZEJRMlpGTEVWQlFWTkVMRVZCUVV0RExFOUJRMlJETEVWQlFVa3NSVUZEU2tNc1JVRkJVeXhIUVVWT1JpeEZRVUZUUXl4SFFVRlBWaXhQUVVGUFdTeExRVUZMVEN4RlFVRkhSQ3hGUVVGTlJTeEZRVUZMUlN4UFFVTXZRME1zUlVGQlQwVXNTMEZCUzFRc1JVRkJXU3hEUVVGRFJTeEZRVUZMUXl4RlFVRkZSQ3hKUVVGUlF5eEZRVUZGUkN4SlFVTXhReXhQUVVGUFN5SXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYjJKcVpXTjBMWFJ2TFdGeWNtRjVMbXB6SW4wPSIsInZhciAkcGFyc2VJbnQ9cmVxdWlyZShcIi4vX2dsb2JhbFwiKS5wYXJzZUludCwkdHJpbT1yZXF1aXJlKFwiLi9fc3RyaW5nLXRyaW1cIikudHJpbSx3cz1yZXF1aXJlKFwiLi9fc3RyaW5nLXdzXCIpLGhleD0vXlstK10/MFt4WF0vO21vZHVsZS5leHBvcnRzPTghPT0kcGFyc2VJbnQod3MrXCIwOFwiKXx8MjIhPT0kcGFyc2VJbnQod3MrXCIweDE2XCIpP2Z1bmN0aW9uIHBhcnNlSW50KHIsZSl7dmFyIHQ9JHRyaW0oU3RyaW5nKHIpLDMpO3JldHVybiAkcGFyc2VJbnQodCxlPj4+MHx8KGhleC50ZXN0KHQpPzE2OjEwKSl9OiRwYXJzZUludDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXdZWEp6WlMxcGJuUXVhbk1pWFN3aWJtRnRaWE1pT2xzaUpIQmhjbk5sU1c1MElpd2ljbVZ4ZFdseVpTSXNJbkJoY25ObFNXNTBJaXdpSkhSeWFXMGlMQ0owY21sdElpd2lkM01pTENKb1pYZ2lMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpYzNSeUlpd2ljbUZrYVhnaUxDSnpkSEpwYm1jaUxDSlRkSEpwYm1jaUxDSjBaWE4wSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4SlFVRkpRU3hWUVVGWlF5eFJRVUZSTEdGQlFXRkRMRk5CUTJwRFF5eE5RVUZSUml4UlFVRlJMR3RDUVVGclFrY3NTMEZEYkVORExFZEJRVXRLTEZGQlFWRXNaMEpCUTJKTExFbEJRVTBzWTBGRlZrTXNUMEZCVDBNc1VVRkJiVU1zU1VGQmVrSlNMRlZCUVZWTExFZEJRVXNzVDBGQk1FTXNTMEZCTTBKTUxGVkJRVlZMTEVkQlFVc3NVVUZCYVVJc1UwRkJVMGdzVTBGQlUwOHNSVUZCUzBNc1IwRkRjRWNzU1VGQlNVTXNSVUZCVTFJc1RVRkJUVk1zVDBGQlQwZ3NSMEZCVFN4SFFVTm9ReXhQUVVGUFZDeFZRVUZWVnl4RlFVRlRSQ3hKUVVGVkxFbEJRVTlLTEVsQlFVbFBMRXRCUVV0R0xFZEJRVlVzUjBGQlN5eE5RVU5xUlZnaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYM0JoY25ObExXbHVkQzVxY3lKOSIsIm1vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKGUscil7cmV0dXJue2VudW1lcmFibGU6ISgxJmUpLGNvbmZpZ3VyYWJsZTohKDImZSksd3JpdGFibGU6ISg0JmUpLHZhbHVlOnJ9fTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXdjbTl3WlhKMGVTMWtaWE5qTG1weklsMHNJbTVoYldWeklqcGJJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0ppYVhSdFlYQWlMQ0oyWVd4MVpTSXNJbVZ1ZFcxbGNtRmliR1VpTENKamIyNW1hV2QxY21GaWJHVWlMQ0ozY21sMFlXSnNaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUZCTEU5QlFVOURMRkZCUVZVc1UwRkJWVU1zUlVGQlVVTXNSMEZEYWtNc1RVRkJUeXhEUVVOTVF5eGhRVUYxUWl4RlFVRlVSaXhIUVVOa1J5eGxRVUY1UWl4RlFVRlVTQ3hIUVVOb1Fra3NWMEZCY1VJc1JVRkJWRW9zUjBGRFdrTXNUVUZCVDBFaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYM0J5YjNCbGNuUjVMV1JsYzJNdWFuTWlmUT09IiwibW9kdWxlLmV4cG9ydHM9cmVxdWlyZShcIi4vX2hpZGVcIik7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl5WldSbFptbHVaUzVxY3lKZExDSnVZVzFsY3lJNld5SnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2ljbVZ4ZFdseVpTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRkJMRTlCUVU5RExGRkJRVlZETEZGQlFWRWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDNKbFpHVm1hVzVsTG1wekluMD0iLCJ2YXIgZGVmPXJlcXVpcmUoXCIuL19vYmplY3QtZHBcIikuZixoYXM9cmVxdWlyZShcIi4vX2hhc1wiKSxUQUc9cmVxdWlyZShcIi4vX3drc1wiKShcInRvU3RyaW5nVGFnXCIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKGUscixvKXtlJiYhaGFzKGU9bz9lOmUucHJvdG90eXBlLFRBRykmJmRlZihlLFRBRyx7Y29uZmlndXJhYmxlOiEwLHZhbHVlOnJ9KX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl6WlhRdGRHOHRjM1J5YVc1bkxYUmhaeTVxY3lKZExDSnVZVzFsY3lJNld5SmtaV1lpTENKeVpYRjFhWEpsSWl3aVppSXNJbWhoY3lJc0lsUkJSeUlzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKcGRDSXNJblJoWnlJc0luTjBZWFFpTENKd2NtOTBiM1I1Y0dVaUxDSmpiMjVtYVdkMWNtRmliR1VpTENKMllXeDFaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzU1VGQlNVRXNTVUZCVFVNc1VVRkJVU3huUWtGQlowSkRMRVZCUXpsQ1F5eEpRVUZOUml4UlFVRlJMRlZCUTJSSExFbEJRVTFJTEZGQlFWRXNVMEZCVWtFc1EwRkJhMElzWlVGRk5VSkpMRTlCUVU5RExGRkJRVlVzVTBGQlZVTXNSVUZCU1VNc1JVRkJTME1zUjBGRE9VSkdMRWxCUVU5S0xFbEJRVWxKTEVWQlFVdEZMRVZCUVU5R0xFVkJRVXRCTEVWQlFVZEhMRlZCUVZkT0xFMUJRVTFLTEVsQlFVbFBMRVZCUVVsSUxFbEJRVXNzUTBGQlJVOHNZMEZCWXl4RlFVRk5ReXhOUVVGUFNpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYzJWMExYUnZMWE4wY21sdVp5MTBZV2N1YW5NaWZRPT0iLCJ2YXIgc2hhcmVkPXJlcXVpcmUoXCIuL19zaGFyZWRcIikoXCJrZXlzXCIpLHVpZD1yZXF1aXJlKFwiLi9fdWlkXCIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBzaGFyZWRbZV18fChzaGFyZWRbZV09dWlkKGUpKX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl6YUdGeVpXUXRhMlY1TG1weklsMHNJbTVoYldWeklqcGJJbk5vWVhKbFpDSXNJbkpsY1hWcGNtVWlMQ0oxYVdRaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2lhMlY1SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4SlFVRkpRU3hQUVVGVFF5eFJRVUZSTEZsQlFWSkJMRU5CUVhGQ0xGRkJRemxDUXl4SlFVRk5SQ3hSUVVGUkxGVkJRMnhDUlN4UFFVRlBReXhSUVVGVkxGTkJRVlZETEVkQlEzcENMRTlCUVU5TUxFOUJRVTlMTEV0QlFWTk1MRTlCUVU5TExFZEJRVTlJTEVsQlFVbEhJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5emFHRnlaV1F0YTJWNUxtcHpJbjA9IiwidmFyIGNvcmU9cmVxdWlyZShcIi4vX2NvcmVcIiksZ2xvYmFsPXJlcXVpcmUoXCIuL19nbG9iYWxcIiksU0hBUkVEPVwiX19jb3JlLWpzX3NoYXJlZF9fXCIsc3RvcmU9Z2xvYmFsW1NIQVJFRF18fChnbG9iYWxbU0hBUkVEXT17fSk7KG1vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKHIsZSl7cmV0dXJuIHN0b3JlW3JdfHwoc3RvcmVbcl09dm9pZCAwIT09ZT9lOnt9KX0pKFwidmVyc2lvbnNcIixbXSkucHVzaCh7dmVyc2lvbjpjb3JlLnZlcnNpb24sbW9kZTpyZXF1aXJlKFwiLi9fbGlicmFyeVwiKT9cInB1cmVcIjpcImdsb2JhbFwiLGNvcHlyaWdodDpcIsKpIDIwMTggRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSlcIn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5emFHRnlaV1F1YW5NaVhTd2libUZ0WlhNaU9sc2lZMjl5WlNJc0luSmxjWFZwY21VaUxDSm5iRzlpWVd3aUxDSlRTRUZTUlVRaUxDSnpkRzl5WlNJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaUxDSnJaWGtpTENKMllXeDFaU0lzSW5WdVpHVm1hVzVsWkNJc0luQjFjMmdpTENKMlpYSnphVzl1SWl3aWJXOWtaU0lzSW1OdmNIbHlhV2RvZENKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1NVRkJTVUVzUzBGQlQwTXNVVUZCVVN4WFFVTm1ReXhQUVVGVFJDeFJRVUZSTEdGQlEycENSU3hQUVVGVExIRkNRVU5VUXl4TlFVRlJSaXhQUVVGUFF5eFZRVUZaUkN4UFFVRlBReXhSUVVGVkxFdEJSUzlEUlN4UFFVRlBReXhSUVVGVkxGTkJRVlZETEVWQlFVdERMRWRCUXk5Q0xFOUJRVTlLTEUxQlFVMUhMRXRCUVZOSUxFMUJRVTFITEZGQlFXbENSU3hKUVVGV1JDeEZRVUZ6UWtFc1JVRkJVU3hOUVVOb1JTeFhRVUZaTEVsQlFVbEZMRXRCUVVzc1EwRkRkRUpETEZGQlFWTllMRXRCUVV0WExGRkJRMlJETEV0QlFVMVlMRkZCUVZFc1kwRkJaMElzVDBGQlV5eFRRVU4yUTFrc1ZVRkJWeUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmMyaGhjbVZrTG1wekluMD0iLCJ2YXIgdG9JbnRlZ2VyPXJlcXVpcmUoXCIuL190by1pbnRlZ2VyXCIpLGRlZmluZWQ9cmVxdWlyZShcIi4vX2RlZmluZWRcIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHIsdCl7dmFyIG4saSxkPVN0cmluZyhkZWZpbmVkKHIpKSxvPXRvSW50ZWdlcih0KSx1PWQubGVuZ3RoO3JldHVybiBvPDB8fG8+PXU/ZT9cIlwiOnZvaWQgMDoobj1kLmNoYXJDb2RlQXQobykpPDU1Mjk2fHxuPjU2MzE5fHxvKzE9PT11fHwoaT1kLmNoYXJDb2RlQXQobysxKSk8NTYzMjB8fGk+NTczNDM/ZT9kLmNoYXJBdChvKTpuOmU/ZC5zbGljZShvLG8rMik6aS01NjMyMCsobi01NTI5Njw8MTApKzY1NTM2fX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl6ZEhKcGJtY3RZWFF1YW5NaVhTd2libUZ0WlhNaU9sc2lkRzlKYm5SbFoyVnlJaXdpY21WeGRXbHlaU0lzSW1SbFptbHVaV1FpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aVZFOWZVMVJTU1U1SElpd2lkR2hoZENJc0luQnZjeUlzSW1FaUxDSmlJaXdpY3lJc0lsTjBjbWx1WnlJc0lta2lMQ0pzSWl3aWJHVnVaM1JvSWl3aWRXNWtaV1pwYm1Wa0lpd2lZMmhoY2tOdlpHVkJkQ0lzSW1Ob1lYSkJkQ0lzSW5Oc2FXTmxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hKUVVGSlFTeFZRVUZaUXl4UlFVRlJMR2xDUVVOd1FrTXNVVUZCVlVRc1VVRkJVU3hqUVVkMFFrVXNUMEZCVDBNc1VVRkJWU3hUUVVGVlF5eEhRVU42UWl4UFFVRlBMRk5CUVZWRExFVkJRVTFETEVkQlEzSkNMRWxCUjBsRExFVkJRVWRETEVWQlNFaERMRVZCUVVsRExFOUJRVTlVTEZGQlFWRkpMRWxCUTI1Q1RTeEZRVUZKV2l4VlFVRlZUeXhIUVVOa1RTeEZRVUZKU0N4RlFVRkZTU3hQUVVWV0xFOUJRVWxHTEVWQlFVa3NSMEZCUzBFc1IwRkJTME1zUlVGQlZWSXNSVUZCV1N4UlFVRkxWU3hIUVVNM1ExQXNSVUZCU1VVc1JVRkJSVTBzVjBGQlYwb3NTVUZEVGl4UFFVRlZTaXhGUVVGSkxFOUJRVlZKTEVWQlFVa3NTVUZCVFVNc1NVRkJUVW9zUlVGQlNVTXNSVUZCUlUwc1YwRkJWMG9zUlVGQlNTeEpRVUZOTEU5QlFWVklMRVZCUVVrc1RVRkRlRVpLTEVWQlFWbExMRVZCUVVWUExFOUJRVTlNTEVkQlFVdEtMRVZCUXpGQ1NDeEZRVUZaU3l4RlFVRkZVU3hOUVVGTlRpeEZRVUZIUVN4RlFVRkpMRWRCUVRKQ1NDeEZRVUZKTEU5QlFYcENSQ3hGUVVGSkxFOUJRVlVzU1VGQmNVSWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDNOMGNtbHVaeTFoZEM1cWN5SjkiLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLGRlZmluZWQ9cmVxdWlyZShcIi4vX2RlZmluZWRcIiksZmFpbHM9cmVxdWlyZShcIi4vX2ZhaWxzXCIpLHNwYWNlcz1yZXF1aXJlKFwiLi9fc3RyaW5nLXdzXCIpLHNwYWNlPVwiW1wiK3NwYWNlcytcIl1cIixub249XCLigIvChVwiLGx0cmltPVJlZ0V4cChcIl5cIitzcGFjZStzcGFjZStcIipcIikscnRyaW09UmVnRXhwKHNwYWNlK3NwYWNlK1wiKiRcIiksZXhwb3J0ZXI9ZnVuY3Rpb24oZSxyLHQpe3ZhciBpPXt9LHA9ZmFpbHMoZnVuY3Rpb24oKXtyZXR1cm4hIXNwYWNlc1tlXSgpfHxub25bZV0oKSE9bm9ufSksbj1pW2VdPXA/cih0cmltKTpzcGFjZXNbZV07dCYmKGlbdF09biksJGV4cG9ydCgkZXhwb3J0LlArJGV4cG9ydC5GKnAsXCJTdHJpbmdcIixpKX0sdHJpbT1leHBvcnRlci50cmltPWZ1bmN0aW9uKGUscil7cmV0dXJuIGU9U3RyaW5nKGRlZmluZWQoZSkpLDEmciYmKGU9ZS5yZXBsYWNlKGx0cmltLFwiXCIpKSwyJnImJihlPWUucmVwbGFjZShydHJpbSxcIlwiKSksZX07bW9kdWxlLmV4cG9ydHM9ZXhwb3J0ZXI7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl6ZEhKcGJtY3RkSEpwYlM1cWN5SmRMQ0p1WVcxbGN5STZXeUlrWlhod2IzSjBJaXdpY21WeGRXbHlaU0lzSW1SbFptbHVaV1FpTENKbVlXbHNjeUlzSW5Od1lXTmxjeUlzSW5Od1lXTmxJaXdpYm05dUlpd2liSFJ5YVcwaUxDSlNaV2RGZUhBaUxDSnlkSEpwYlNJc0ltVjRjRzl5ZEdWeUlpd2lTMFZaSWl3aVpYaGxZeUlzSWtGTVNVRlRJaXdpWlhod0lpd2lSazlTUTBVaUxDSm1iaUlzSW5SeWFXMGlMQ0pRSWl3aVJpSXNJbk4wY21sdVp5SXNJbFJaVUVVaUxDSlRkSEpwYm1jaUxDSnlaWEJzWVdObElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNTVUZCU1VFc1VVRkJWVU1zVVVGQlVTeGhRVU5zUWtNc1VVRkJWVVFzVVVGQlVTeGpRVU5zUWtVc1RVRkJVVVlzVVVGQlVTeFpRVU5vUWtjc1QwRkJVMGdzVVVGQlVTeG5Ra0ZEYWtKSkxFMUJRVkVzU1VGQlRVUXNUMEZCVXl4SlFVTjJRa1VzU1VGQlRTeExRVU5PUXl4TlFVRlJReXhQUVVGUExFbEJRVTFJTEUxQlFWRkJMRTFCUVZFc1MwRkRja05KTEUxQlFWRkVMRTlCUVU5SUxFMUJRVkZCTEUxQlFWRXNUVUZGTDBKTExGTkJRVmNzVTBGQlZVTXNSVUZCUzBNc1JVRkJUVU1zUjBGRGJFTXNTVUZCU1VNc1JVRkJUU3hIUVVOT1F5eEZRVUZSV2l4TlFVRk5MRmRCUTJoQ0xGRkJRVk5ETEU5QlFVOVBMRTFCUVZWTUxFbEJRVWxMTEUxQlFWVk1MRTFCUlhSRFZTeEZRVUZMUml4RlFVRkpTQ3hIUVVGUFNTeEZRVUZSU0N4RlFVRkxTeXhOUVVGUllpeFBRVUZQVHl4SFFVTTFRMFVzU1VGQlQwTXNSVUZCU1VRc1IwRkJVMGNzUjBGRGVFSm9RaXhSUVVGUlFTeFJRVUZSYTBJc1JVRkJTV3hDTEZGQlFWRnRRaXhGUVVGSlNpeEZRVUZQTEZOQlFWVkVMRWxCVFM5RFJ5eExRVUZQVUN4VFFVRlRUeXhMUVVGUExGTkJRVlZITEVWQlFWRkRMRWRCU1RORExFOUJTRUZFTEVWQlFWTkZMRTlCUVU5d1FpeFJRVUZSYTBJc1NVRkRZaXhGUVVGUVF5eEpRVUZWUkN4RlFVRlRRU3hGUVVGUFJ5eFJRVUZSYUVJc1RVRkJUeXhMUVVOc1F5eEZRVUZRWXl4SlFVRlZSQ3hGUVVGVFFTeEZRVUZQUnl4UlFVRlJaQ3hOUVVGUExFdEJRM1JEVnl4SFFVZFVTU3hQUVVGUFF5eFJRVUZWWmlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZjM1J5YVc1bkxYUnlhVzB1YW5NaWZRPT0iLCJtb2R1bGUuZXhwb3J0cz1cIlxcdFxcblxcdlxcZlxcciDCoOGagOGgjuKAgOKAgeKAguKAg+KAhOKAheKAhuKAh+KAiOKAieKAiuKAr+KBn+OAgFxcdTIwMjhcXHUyMDI5XFx1ZmVmZlwiO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5emRISnBibWN0ZDNNdWFuTWlYU3dpYm1GdFpYTWlPbHNpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUZCTEU5QlFVOURMRkZCUVZVaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYM04wY21sdVp5MTNjeTVxY3lKOSIsInZhciB0b0ludGVnZXI9cmVxdWlyZShcIi4vX3RvLWludGVnZXJcIiksbWF4PU1hdGgubWF4LG1pbj1NYXRoLm1pbjttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3JldHVybihlPXRvSW50ZWdlcihlKSk8MD9tYXgoZSt0LDApOm1pbihlLHQpfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOTBieTFoWW5OdmJIVjBaUzFwYm1SbGVDNXFjeUpkTENKdVlXMWxjeUk2V3lKMGIwbHVkR1ZuWlhJaUxDSnlaWEYxYVhKbElpd2liV0Y0SWl3aVRXRjBhQ0lzSW0xcGJpSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0pwYm1SbGVDSXNJbXhsYm1kMGFDSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNTVUZCU1VFc1ZVRkJXVU1zVVVGQlVTeHBRa0ZEY0VKRExFbEJRVTFETEV0QlFVdEVMRWxCUTFoRkxFbEJRVTFFTEV0QlFVdERMRWxCUTJaRExFOUJRVTlETEZGQlFWVXNVMEZCVlVNc1JVRkJUME1zUjBGRmFFTXNUMEZFUVVRc1JVRkJVVkFzVlVGQlZVOHNTVUZEU0N4RlFVRkpUQ3hKUVVGSlN5eEZRVUZSUXl4RlFVRlJMRWRCUVV0S0xFbEJRVWxITEVWQlFVOURJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5MGJ5MWhZbk52YkhWMFpTMXBibVJsZUM1cWN5SjkiLCJ2YXIgY2VpbD1NYXRoLmNlaWwsZmxvb3I9TWF0aC5mbG9vcjttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihvKXtyZXR1cm4gaXNOYU4obz0rbyk/MDoobz4wP2Zsb29yOmNlaWwpKG8pfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOTBieTFwYm5SbFoyVnlMbXB6SWwwc0ltNWhiV1Z6SWpwYkltTmxhV3dpTENKTllYUm9JaXdpWm14dmIzSWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpYVhRaUxDSnBjMDVoVGlKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUTBFc1NVRkJTVUVzUzBGQlQwTXNTMEZCUzBRc1MwRkRXa1VzVFVGQlVVUXNTMEZCUzBNc1RVRkRha0pETEU5QlFVOURMRkZCUVZVc1UwRkJWVU1zUjBGRGVrSXNUMEZCVDBNc1RVRkJUVVFzUjBGQlRVRXNSMEZCVFN4SFFVRkxRU3hGUVVGTExFVkJRVWxJTEUxQlFWRkdMRTFCUVUxTElpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTkwYnkxcGJuUmxaMlZ5TG1wekluMD0iLCJ2YXIgSU9iamVjdD1yZXF1aXJlKFwiLi9faW9iamVjdFwiKSxkZWZpbmVkPXJlcXVpcmUoXCIuL19kZWZpbmVkXCIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBJT2JqZWN0KGRlZmluZWQoZSkpfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOTBieTFwYjJKcVpXTjBMbXB6SWwwc0ltNWhiV1Z6SWpwYklrbFBZbXBsWTNRaUxDSnlaWEYxYVhKbElpd2laR1ZtYVc1bFpDSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0pwZENKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUTBFc1NVRkJTVUVzVVVGQlZVTXNVVUZCVVN4alFVTnNRa01zVVVGQlZVUXNVVUZCVVN4alFVTjBRa1VzVDBGQlQwTXNVVUZCVlN4VFFVRlZReXhIUVVONlFpeFBRVUZQVEN4UlFVRlJSU3hSUVVGUlJ5SXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmZEc4dGFXOWlhbVZqZEM1cWN5SjkiLCJ2YXIgdG9JbnRlZ2VyPXJlcXVpcmUoXCIuL190by1pbnRlZ2VyXCIpLG1pbj1NYXRoLm1pbjttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gZT4wP21pbih0b0ludGVnZXIoZSksOTAwNzE5OTI1NDc0MDk5MSk6MH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDkwYnkxc1pXNW5kR2d1YW5NaVhTd2libUZ0WlhNaU9sc2lkRzlKYm5SbFoyVnlJaXdpY21WeGRXbHlaU0lzSW0xcGJpSXNJazFoZEdnaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2lhWFFpWFN3aWJXRndjR2x1WjNNaU9pSkJRVU5CTEVsQlFVbEJMRlZCUVZsRExGRkJRVkVzYVVKQlEzQkNReXhKUVVGTlF5eExRVUZMUkN4SlFVTm1SU3hQUVVGUFF5eFJRVUZWTEZOQlFWVkRMRWRCUTNwQ0xFOUJRVTlCTEVWQlFVc3NSVUZCU1Vvc1NVRkJTVVlzVlVGQlZVMHNSMEZCU3l4clFrRkJiMElpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgzUnZMV3hsYm1kMGFDNXFjeUo5IiwidmFyIGRlZmluZWQ9cmVxdWlyZShcIi4vX2RlZmluZWRcIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdChkZWZpbmVkKGUpKX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDkwYnkxdlltcGxZM1F1YW5NaVhTd2libUZ0WlhNaU9sc2laR1ZtYVc1bFpDSXNJbkpsY1hWcGNtVWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpYVhRaUxDSlBZbXBsWTNRaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVOQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc1kwRkRkRUpETEU5QlFVOURMRkZCUVZVc1UwRkJWVU1zUjBGRGVrSXNUMEZCVDBNc1QwRkJUMHdzVVVGQlVVa2lMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDNSdkxXOWlhbVZqZEM1cWN5SjkiLCJ2YXIgaXNPYmplY3Q9cmVxdWlyZShcIi4vX2lzLW9iamVjdFwiKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbih0LGUpe2lmKCFpc09iamVjdCh0KSlyZXR1cm4gdDt2YXIgcixpO2lmKGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mKHI9dC50b1N0cmluZykmJiFpc09iamVjdChpPXIuY2FsbCh0KSkpcmV0dXJuIGk7aWYoXCJmdW5jdGlvblwiPT10eXBlb2Yocj10LnZhbHVlT2YpJiYhaXNPYmplY3QoaT1yLmNhbGwodCkpKXJldHVybiBpO2lmKCFlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZihyPXQudG9TdHJpbmcpJiYhaXNPYmplY3QoaT1yLmNhbGwodCkpKXJldHVybiBpO3Rocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDkwYnkxd2NtbHRhWFJwZG1VdWFuTWlYU3dpYm1GdFpYTWlPbHNpYVhOUFltcGxZM1FpTENKeVpYRjFhWEpsSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0ltbDBJaXdpVXlJc0ltWnVJaXdpZG1Gc0lpd2lkRzlUZEhKcGJtY2lMQ0pqWVd4c0lpd2lkbUZzZFdWUFppSXNJbFI1Y0dWRmNuSnZjaUpkTENKdFlYQndhVzVuY3lJNklrRkJRMEVzU1VGQlNVRXNVMEZCVjBNc1VVRkJVU3huUWtGSGRrSkRMRTlCUVU5RExGRkJRVlVzVTBGQlZVTXNSVUZCU1VNc1IwRkROMElzU1VGQlMwd3NVMEZCVTBrc1IwRkJTeXhQUVVGUFFTeEZRVU14UWl4SlFVRkpSU3hGUVVGSlF5eEZRVU5TTEVkQlFVbEdMRWRCUVd0RExHMUNRVUZ5UWtNc1JVRkJTMFlzUlVGQlIwa3NXVUZCTkVKU0xGTkJRVk5QTEVWQlFVMUVMRVZCUVVkSExFdEJRVXRNTEVsQlFVMHNUMEZCVDBjc1JVRkRla1lzUjBGQlowTXNiVUpCUVhCQ1JDeEZRVUZMUml4RlFVRkhUU3hYUVVFeVFsWXNVMEZCVTA4c1JVRkJUVVFzUlVGQlIwY3NTMEZCUzB3c1NVRkJUU3hQUVVGUFJ5eEZRVU51Uml4SlFVRkxSaXhIUVVGclF5eHRRa0ZCY2tKRExFVkJRVXRHTEVWQlFVZEpMRmxCUVRSQ1VpeFRRVUZUVHl4RlFVRk5SQ3hGUVVGSFJ5eExRVUZMVEN4SlFVRk5MRTlCUVU5SExFVkJRekZHTEUxQlFVMUpMRlZCUVZVaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYM1J2TFhCeWFXMXBkR2wyWlM1cWN5SjkiLCJ2YXIgaWQ9MCxweD1NYXRoLnJhbmRvbSgpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKG8pe3JldHVyblwiU3ltYm9sKFwiLmNvbmNhdCh2b2lkIDA9PT1vP1wiXCI6byxcIilfXCIsKCsraWQrcHgpLnRvU3RyaW5nKDM2KSl9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5MWFXUXVhbk1pWFN3aWJtRnRaWE1pT2xzaWFXUWlMQ0p3ZUNJc0lrMWhkR2dpTENKeVlXNWtiMjBpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aWEyVjVJaXdpWTI5dVkyRjBJaXdpZFc1a1pXWnBibVZrSWl3aWRHOVRkSEpwYm1jaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFbEJRVWxCTEVkQlFVc3NSVUZEVEVNc1IwRkJTME1zUzBGQlMwTXNVMEZEWkVNc1QwRkJUME1zVVVGQlZTeFRRVUZWUXl4SFFVTjZRaXhOUVVGUExGVkJRVlZETEZsQlFXVkRMRWxCUVZKR0xFVkJRVzlDTEVkQlFVdEJMRVZCUVVzc1VVRkJVMDRzUjBGQlMwTXNTVUZCU1ZFc1UwRkJVeUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmRXbGtMbXB6SW4wPSIsInZhciBzdG9yZT1yZXF1aXJlKFwiLi9fc2hhcmVkXCIpKFwid2tzXCIpLHVpZD1yZXF1aXJlKFwiLi9fdWlkXCIpLFN5bWJvbD1yZXF1aXJlKFwiLi9fZ2xvYmFsXCIpLlN5bWJvbCxVU0VfU1lNQk9MPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCwkZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihvKXtyZXR1cm4gc3RvcmVbb118fChzdG9yZVtvXT1VU0VfU1lNQk9MJiZTeW1ib2xbb118fChVU0VfU1lNQk9MP1N5bWJvbDp1aWQpKFwiU3ltYm9sLlwiK28pKX07JGV4cG9ydHMuc3RvcmU9c3RvcmU7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDkzYTNNdWFuTWlYU3dpYm1GdFpYTWlPbHNpYzNSdmNtVWlMQ0p5WlhGMWFYSmxJaXdpZFdsa0lpd2lVM2x0WW05c0lpd2lWVk5GWDFOWlRVSlBUQ0lzSWlSbGVIQnZjblJ6SWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0ltNWhiV1VpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEVsQlFVbEJMRTFCUVZGRExGRkJRVkVzV1VGQlVrRXNRMEZCY1VJc1QwRkROMEpETEVsQlFVMUVMRkZCUVZFc1ZVRkRaRVVzVDBGQlUwWXNVVUZCVVN4aFFVRmhSU3hQUVVNNVFrTXNWMEZCT0VJc2JVSkJRVlpFTEU5QlJYQkNSU3hUUVVGWFF5eFBRVUZQUXl4UlFVRlZMRk5CUVZWRExFZEJRM2hETEU5QlFVOVNMRTFCUVUxUkxFdEJRVlZTTEUxQlFVMVJMRWRCUXpOQ1NpeFpRVUZqUkN4UFFVRlBTeXhMUVVGVlNpeFhRVUZoUkN4UFFVRlRSQ3hMUVVGTExGVkJRVmxOTEV0QlJ6RkZTQ3hUUVVGVFRDeE5RVUZSUVNJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZkMnR6TG1wekluMD0iLCJ2YXIgY2xhc3NvZj1yZXF1aXJlKFwiLi9fY2xhc3NvZlwiKSxJVEVSQVRPUj1yZXF1aXJlKFwiLi9fd2tzXCIpKFwiaXRlcmF0b3JcIiksSXRlcmF0b3JzPXJlcXVpcmUoXCIuL19pdGVyYXRvcnNcIik7bW9kdWxlLmV4cG9ydHM9cmVxdWlyZShcIi4vX2NvcmVcIikuZ2V0SXRlcmF0b3JNZXRob2Q9ZnVuY3Rpb24ocil7aWYobnVsbCE9cilyZXR1cm4gcltJVEVSQVRPUl18fHJbXCJAQGl0ZXJhdG9yXCJdfHxJdGVyYXRvcnNbY2xhc3NvZihyKV19O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1OdmNtVXVaMlYwTFdsMFpYSmhkRzl5TFcxbGRHaHZaQzVxY3lKZExDSnVZVzFsY3lJNld5SmpiR0Z6YzI5bUlpd2ljbVZ4ZFdseVpTSXNJa2xVUlZKQlZFOVNJaXdpU1hSbGNtRjBiM0p6SWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0ltZGxkRWwwWlhKaGRHOXlUV1YwYUc5a0lpd2lhWFFpTENKMWJtUmxabWx1WldRaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc1kwRkRiRUpETEZOQlFWZEVMRkZCUVZFc1UwRkJVa0VzUTBGQmEwSXNXVUZETjBKRkxGVkJRVmxHTEZGQlFWRXNaMEpCUTNoQ1J5eFBRVUZQUXl4UlFVRlZTaXhSUVVGUkxGZEJRVmRMTEd0Q1FVRnZRaXhUUVVGVlF5eEhRVU5vUlN4SFFVRlZReXhOUVVGT1JDeEZRVUZwUWl4UFFVRlBRU3hGUVVGSFRDeFhRVU14UWtzc1JVRkJSeXhsUVVOSVNpeFZRVUZWU0N4UlFVRlJUeUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5amIzSmxMbWRsZEMxcGRHVnlZWFJ2Y2kxdFpYUm9iMlF1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgY3R4PXJlcXVpcmUoXCIuL19jdHhcIiksJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLHRvT2JqZWN0PXJlcXVpcmUoXCIuL190by1vYmplY3RcIiksY2FsbD1yZXF1aXJlKFwiLi9faXRlci1jYWxsXCIpLGlzQXJyYXlJdGVyPXJlcXVpcmUoXCIuL19pcy1hcnJheS1pdGVyXCIpLHRvTGVuZ3RoPXJlcXVpcmUoXCIuL190by1sZW5ndGhcIiksY3JlYXRlUHJvcGVydHk9cmVxdWlyZShcIi4vX2NyZWF0ZS1wcm9wZXJ0eVwiKSxnZXRJdGVyRm49cmVxdWlyZShcIi4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kXCIpOyRleHBvcnQoJGV4cG9ydC5TKyRleHBvcnQuRiohcmVxdWlyZShcIi4vX2l0ZXItZGV0ZWN0XCIpKGZ1bmN0aW9uKGUpe0FycmF5LmZyb20oZSl9KSxcIkFycmF5XCIse2Zyb206ZnVuY3Rpb24gZnJvbShlKXt2YXIgcix0LG8saSxhPXRvT2JqZWN0KGUpLGM9XCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcz90aGlzOkFycmF5LG49YXJndW1lbnRzLmxlbmd0aCxsPW4+MT9hcmd1bWVudHNbMV06dm9pZCAwLHU9dm9pZCAwIT09bCx5PTAscD1nZXRJdGVyRm4oYSk7aWYodSYmKGw9Y3R4KGwsbj4yP2FyZ3VtZW50c1syXTp2b2lkIDAsMikpLG51bGw9PXB8fGM9PUFycmF5JiZpc0FycmF5SXRlcihwKSlmb3IodD1uZXcgYyhyPXRvTGVuZ3RoKGEubGVuZ3RoKSk7cj55O3krKyljcmVhdGVQcm9wZXJ0eSh0LHksdT9sKGFbeV0seSk6YVt5XSk7ZWxzZSBmb3IoaT1wLmNhbGwoYSksdD1uZXcgYzshKG89aS5uZXh0KCkpLmRvbmU7eSsrKWNyZWF0ZVByb3BlcnR5KHQseSx1P2NhbGwoaSxsLFtvLnZhbHVlLHldLCEwKTpvLnZhbHVlKTtyZXR1cm4gdC5sZW5ndGg9eSx0fX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNWhjbkpoZVM1bWNtOXRMbXB6SWwwc0ltNWhiV1Z6SWpwYkltTjBlQ0lzSW5KbGNYVnBjbVVpTENJa1pYaHdiM0owSWl3aWRHOVBZbXBsWTNRaUxDSmpZV3hzSWl3aWFYTkJjbkpoZVVsMFpYSWlMQ0owYjB4bGJtZDBhQ0lzSW1OeVpXRjBaVkJ5YjNCbGNuUjVJaXdpWjJWMFNYUmxja1p1SWl3aVV5SXNJa1lpTENKcGRHVnlJaXdpUVhKeVlYa2lMQ0ptY205dElpd2lZWEp5WVhsTWFXdGxJaXdpYkdWdVozUm9JaXdpY21WemRXeDBJaXdpYzNSbGNDSXNJbWwwWlhKaGRHOXlJaXdpVHlJc0lrTWlMQ0owYUdseklpd2lZVXhsYmlJc0ltRnlaM1Z0Wlc1MGN5SXNJbTFoY0dadUlpd2lkVzVrWldacGJtVmtJaXdpYldGd2NHbHVaeUlzSW1sdVpHVjRJaXdpYVhSbGNrWnVJaXdpYm1WNGRDSXNJbVJ2Ym1VaUxDSjJZV3gxWlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkRRU3hKUVVGSlFTeEpRVUZOUXl4UlFVRlJMRlZCUTJSRExGRkJRVlZFTEZGQlFWRXNZVUZEYkVKRkxGTkJRVmRHTEZGQlFWRXNaMEpCUTI1Q1J5eExRVUZQU0N4UlFVRlJMR2RDUVVObVNTeFpRVUZqU2l4UlFVRlJMRzlDUVVOMFFrc3NVMEZCVjB3c1VVRkJVU3huUWtGRGJrSk5MR1ZCUVdsQ1RpeFJRVUZSTEhOQ1FVTjZRazhzVlVGQldWQXNVVUZCVVN3NFFrRkZlRUpETEZGQlFWRkJMRkZCUVZGUExFVkJRVWxRTEZGQlFWRlJMRWRCUVV0VUxGRkJRVkVzYVVKQlFWSkJMRU5CUVRCQ0xGTkJRVlZWTEVkQlFWRkRMRTFCUVUxRExFdEJRVXRHTEV0QlFWY3NVVUZCVXl4RFFVVXhSMFVzUzBGQlRTeFRRVUZUUVN4TFFVRkxReXhIUVVOc1FpeEpRVTlKUXl4RlFVRlJReXhGUVVGUlF5eEZRVUZOUXl4RlFWQjBRa01zUlVGQlNXaENMRk5CUVZOWExFZEJRMkpOTEVWQlFXMUNMRzFDUVVGU1F5eExRVUZ4UWtFc1MwRkJUMVFzVFVGRGRrTlZMRVZCUVU5RExGVkJRVlZTTEU5QlEycENVeXhGUVVGUlJpeEZRVUZQTEVWQlFVbERMRlZCUVZVc1VVRkJTMFVzUlVGRGJFTkRMRTlCUVc5Q1JDeEpRVUZXUkN4RlFVTldSeXhGUVVGUkxFVkJRMUpETEVWQlFWTndRaXhWUVVGVlZ5eEhRVWwyUWl4SFFVWkpUeXhKUVVGVFJpeEZRVUZSZUVJc1NVRkJTWGRDTEVWQlFVOUdMRVZCUVU4c1JVRkJTVU1zVlVGQlZTeFJRVUZMUlN4RlFVRlhMRWxCUlhaRVFTeE5RVUZXUnl4SFFVRjVRbElzUjBGQlMxSXNUMEZCVTFBc1dVRkJXWFZDTEVkQlRYSkVMRWxCUVV0YUxFVkJRVk1zU1VGQlNVa3NSVUZFYkVKTUxFVkJRVk5VTEZOQlFWTmhMRVZCUVVWS0xGTkJRMU5CTEVWQlFWTlpMRVZCUVU5QkxFbEJRek5EY0VJc1pVRkJaVk1zUlVGQlVWY3NSVUZCVDBRc1JVRkJWVVlzUlVGQlRVd3NSVUZCUlZFc1IwRkJVVUVzUjBGQlUxSXNSVUZCUlZFc1UwRk9ja1VzU1VGQlMxUXNSVUZCVjFVc1JVRkJUM2hDTEV0QlFVdGxMRWRCUVVsSUxFVkJRVk1zU1VGQlNVa3NTVUZCVDBnc1JVRkJUME1zUlVGQlUxY3NVVUZCVVVNc1MwRkJUVWdzU1VGRGFFWndRaXhsUVVGbFV5eEZRVUZSVnl4RlFVRlBSQ3hGUVVGVmRFSXNTMEZCUzJNc1JVRkJWVTBzUlVGQlR5eERRVUZEVUN4RlFVRkxZeXhOUVVGUFNpeEpRVUZSTEVkQlFWRldMRVZCUVV0akxFOUJVM0JITEU5QlJFRm1MRVZCUVU5RUxFOUJRVk5aTEVWQlExUllJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDJWek5pNWhjbkpoZVM1bWNtOXRMbXB6SW4wPSIsInZhciAkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIik7JGV4cG9ydCgkZXhwb3J0LlMsXCJBcnJheVwiLHtpc0FycmF5OnJlcXVpcmUoXCIuL19pcy1hcnJheVwiKX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNWhjbkpoZVM1cGN5MWhjbkpoZVM1cWN5SmRMQ0p1WVcxbGN5STZXeUlrWlhod2IzSjBJaXdpY21WeGRXbHlaU0lzSWxNaUxDSnBjMEZ5Y21GNUlsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHRkJSWFJDUkN4UlFVRlJRU3hSUVVGUlJTeEZRVUZITEZGQlFWTXNRMEZCUlVNc1VVRkJVMFlzVVVGQlVTSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlsY3pZdVlYSnlZWGt1YVhNdFlYSnlZWGt1YW5NaWZRPT0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpOyRleHBvcnQoJGV4cG9ydC5TKyRleHBvcnQuRixcIk9iamVjdFwiLHthc3NpZ246cmVxdWlyZShcIi4vX29iamVjdC1hc3NpZ25cIil9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV2WW1wbFkzUXVZWE56YVdkdUxtcHpJbDBzSW01aGJXVnpJanBiSWlSbGVIQnZjblFpTENKeVpYRjFhWEpsSWl3aVV5SXNJa1lpTENKaGMzTnBaMjRpWFN3aWJXRndjR2x1WjNNaU9pSkJRVU5CTEVsQlFVbEJMRkZCUVZWRExGRkJRVkVzWVVGRmRFSkVMRkZCUVZGQkxGRkJRVkZGTEVWQlFVbEdMRkZCUVZGSExFVkJRVWNzVTBGQlZTeERRVUZGUXl4UFFVRlJTQ3hSUVVGUklpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMlZ6Tmk1dlltcGxZM1F1WVhOemFXZHVMbXB6SW4wPSIsInZhciAkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIik7JGV4cG9ydCgkZXhwb3J0LlMsXCJPYmplY3RcIix7Y3JlYXRlOnJlcXVpcmUoXCIuL19vYmplY3QtY3JlYXRlXCIpfSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1dlltcGxZM1F1WTNKbFlYUmxMbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2lVeUlzSW1OeVpXRjBaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVWMFFrUXNVVUZCVVVFc1VVRkJVVVVzUlVGQlJ5eFRRVUZWTEVOQlFVVkRMRTlCUVZGR0xGRkJRVkVpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNWpjbVZoZEdVdWFuTWlmUT09IiwidmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKTskZXhwb3J0KCRleHBvcnQuUyskZXhwb3J0LkYqIXJlcXVpcmUoXCIuL19kZXNjcmlwdG9yc1wiKSxcIk9iamVjdFwiLHtkZWZpbmVQcm9wZXJ0eTpyZXF1aXJlKFwiLi9fb2JqZWN0LWRwXCIpLmZ9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV2WW1wbFkzUXVaR1ZtYVc1bExYQnliM0JsY25SNUxtcHpJbDBzSW01aGJXVnpJanBiSWlSbGVIQnZjblFpTENKeVpYRjFhWEpsSWl3aVV5SXNJa1lpTENKa1pXWnBibVZRY205d1pYSjBlU0lzSW1ZaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc1lVRkZkRUpFTEZGQlFWRkJMRkZCUVZGRkxFVkJRVWxHTEZGQlFWRkhMRWRCUVV0R0xGRkJRVkVzYTBKQlFXMUNMRk5CUVZVc1EwRkJSVWNzWlVGQlowSklMRkZCUVZFc1owSkJRV2RDU1NJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWxjell1YjJKcVpXTjBMbVJsWm1sdVpTMXdjbTl3WlhKMGVTNXFjeUo5IiwidmFyIHRvSU9iamVjdD1yZXF1aXJlKFwiLi9fdG8taW9iamVjdFwiKSwkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yPXJlcXVpcmUoXCIuL19vYmplY3QtZ29wZFwiKS5mO3JlcXVpcmUoXCIuL19vYmplY3Qtc2FwXCIpKFwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yXCIsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHIsZSl7cmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JT2JqZWN0KHIpLGUpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXZZbXBsWTNRdVoyVjBMVzkzYmkxd2NtOXdaWEowZVMxa1pYTmpjbWx3ZEc5eUxtcHpJbDBzSW01aGJXVnpJanBiSW5SdlNVOWlhbVZqZENJc0luSmxjWFZwY21VaUxDSWtaMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUlpd2laaUlzSW1kbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjaUlzSW1sMElpd2lhMlY1SWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hWUVVGWlF5eFJRVUZSTEdsQ1FVTndRa01zTUVKQlFUUkNSQ3hSUVVGUkxHdENRVUZyUWtVc1JVRkZNVVJHTEZGQlFWRXNaMEpCUVZKQkxFTkJRWGxDTERKQ1FVRTBRaXhYUVVOdVJDeFBRVUZQTEZOQlFWTkhMSGxDUVVGNVFrTXNSVUZCU1VNc1IwRkRNME1zVDBGQlQwb3NNRUpCUVRCQ1JpeFZRVUZWU3l4SFFVRkxReUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtZGxkQzF2ZDI0dGNISnZjR1Z5ZEhrdFpHVnpZM0pwY0hSdmNpNXFjeUo5IiwidmFyIHRvT2JqZWN0PXJlcXVpcmUoXCIuL190by1vYmplY3RcIiksJGtleXM9cmVxdWlyZShcIi4vX29iamVjdC1rZXlzXCIpO3JlcXVpcmUoXCIuL19vYmplY3Qtc2FwXCIpKFwia2V5c1wiLGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uIGtleXMoZSl7cmV0dXJuICRrZXlzKHRvT2JqZWN0KGUpKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV2WW1wbFkzUXVhMlY1Y3k1cWN5SmRMQ0p1WVcxbGN5STZXeUowYjA5aWFtVmpkQ0lzSW5KbGNYVnBjbVVpTENJa2EyVjVjeUlzSW10bGVYTWlMQ0pwZENKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUTBFc1NVRkJTVUVzVTBGQlYwTXNVVUZCVVN4blFrRkRia0pETEUxQlFWRkVMRkZCUVZFc2EwSkJSWEJDUVN4UlFVRlJMR2RDUVVGU1FTeERRVUY1UWl4UFFVRlJMRmRCUXk5Q0xFOUJRVThzVTBGQlUwVXNTMEZCUzBNc1IwRkRia0lzVDBGQlQwWXNUVUZCVFVZc1UwRkJVMGtpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNXJaWGx6TG1wekluMD0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLCRwYXJzZUludD1yZXF1aXJlKFwiLi9fcGFyc2UtaW50XCIpOyRleHBvcnQoJGV4cG9ydC5HKyRleHBvcnQuRioocGFyc2VJbnQhPSRwYXJzZUludCkse3BhcnNlSW50OiRwYXJzZUludH0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXdZWEp6WlMxcGJuUXVhbk1pWFN3aWJtRnRaWE1pT2xzaUpHVjRjRzl5ZENJc0luSmxjWFZwY21VaUxDSWtjR0Z5YzJWSmJuUWlMQ0pISWl3aVJpSXNJbkJoY25ObFNXNTBJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR0ZCUTJ4Q1F5eFZRVUZaUkN4UlFVRlJMR2RDUVVWNFFrUXNVVUZCVVVFc1VVRkJVVWNzUlVGQlNVZ3NVVUZCVVVrc1IwRkJTME1zVlVGQldVZ3NWMEZCV1N4RFFVRkZSeXhUUVVGVlNDSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlsY3pZdWNHRnljMlV0YVc1MExtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyICRhdD1yZXF1aXJlKFwiLi9fc3RyaW5nLWF0XCIpKCEwKTtyZXF1aXJlKFwiLi9faXRlci1kZWZpbmVcIikoU3RyaW5nLFwiU3RyaW5nXCIsZnVuY3Rpb24odCl7dGhpcy5fdD1TdHJpbmcodCksdGhpcy5faT0wfSxmdW5jdGlvbigpe3ZhciB0LGk9dGhpcy5fdCxlPXRoaXMuX2k7cmV0dXJuIGU+PWkubGVuZ3RoP3t2YWx1ZTp2b2lkIDAsZG9uZTohMH06KHQ9JGF0KGksZSksdGhpcy5faSs9dC5sZW5ndGgse3ZhbHVlOnQsZG9uZTohMX0pfSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1emRISnBibWN1YVhSbGNtRjBiM0l1YW5NaVhTd2libUZ0WlhNaU9sc2lKR0YwSWl3aWNtVnhkV2x5WlNJc0lsTjBjbWx1WnlJc0ltbDBaWEpoZEdWa0lpd2lkR2hwY3lJc0lsOTBJaXdpWDJraUxDSndiMmx1ZENJc0lrOGlMQ0pwYm1SbGVDSXNJbXhsYm1kMGFDSXNJblpoYkhWbElpd2lkVzVrWldacGJtVmtJaXdpWkc5dVpTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZEUVN4SlFVRkpRU3hKUVVGTlF5eFJRVUZSTEdWQlFWSkJMRVZCUVhkQ0xFZEJSMnhEUVN4UlFVRlJMR2xDUVVGU1FTeERRVUV3UWtNc1QwRkJVU3hUUVVGVkxGTkJRVlZETEVkQlEzQkVReXhMUVVGTFF5eEhRVUZMU0N4UFFVRlBReXhIUVVOcVFrTXNTMEZCUzBVc1IwRkJTeXhIUVVWVUxGZEJRMFFzU1VGRlNVTXNSVUZHUVVNc1JVRkJTVW9zUzBGQlMwTXNSMEZEVkVrc1JVRkJVVXdzUzBGQlMwVXNSMEZGYWtJc1QwRkJTVWNzUjBGQlUwUXNSVUZCUlVVc1QwRkJaU3hEUVVGRlF5eFhRVUZQUXl4RlFVRlhReXhOUVVGTkxFbEJRM2hFVGl4RlFVRlJVQ3hKUVVGSlVTeEZRVUZIUXl4SFFVTm1UQ3hMUVVGTFJTeEpRVUZOUXl4RlFVRk5SeXhQUVVOV0xFTkJRVVZETEUxQlFVOUtMRVZCUVU5TkxFMUJRVTBpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlpYTTJMbk4wY21sdVp5NXBkR1Z5WVhSdmNpNXFjeUo5IiwidmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKSwkZW50cmllcz1yZXF1aXJlKFwiLi9fb2JqZWN0LXRvLWFycmF5XCIpKCEwKTskZXhwb3J0KCRleHBvcnQuUyxcIk9iamVjdFwiLHtlbnRyaWVzOmZ1bmN0aW9uIGVudHJpZXMoZSl7cmV0dXJuICRlbnRyaWVzKGUpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NXZZbXBsWTNRdVpXNTBjbWxsY3k1cWN5SmRMQ0p1WVcxbGN5STZXeUlrWlhod2IzSjBJaXdpY21WeGRXbHlaU0lzSWlSbGJuUnlhV1Z6SWl3aVV5SXNJbVZ1ZEhKcFpYTWlMQ0pwZENKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUTBFc1NVRkJTVUVzVVVGQlZVTXNVVUZCVVN4aFFVTnNRa01zVTBGQlYwUXNVVUZCVVN4eFFrRkJVa0VzUlVGQk9FSXNSMEZGTjBORUxGRkJRVkZCTEZGQlFWRkhMRVZCUVVjc1UwRkJWU3hEUVVNelFrTXNVVUZCVXl4VFFVRlRRU3hSUVVGUlF5eEhRVU40UWl4UFFVRlBTQ3hUUVVGVFJ5SXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlsY3pjdWIySnFaV04wTG1WdWRISnBaWE11YW5NaWZRPT0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLCR2YWx1ZXM9cmVxdWlyZShcIi4vX29iamVjdC10by1hcnJheVwiKSghMSk7JGV4cG9ydCgkZXhwb3J0LlMsXCJPYmplY3RcIix7dmFsdWVzOmZ1bmN0aW9uIHZhbHVlcyhlKXtyZXR1cm4gJHZhbHVlcyhlKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOeTV2WW1wbFkzUXVkbUZzZFdWekxtcHpJbDBzSW01aGJXVnpJanBiSWlSbGVIQnZjblFpTENKeVpYRjFhWEpsSWl3aUpIWmhiSFZsY3lJc0lsTWlMQ0oyWVd4MVpYTWlMQ0pwZENKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUTBFc1NVRkJTVUVzVVVGQlZVTXNVVUZCVVN4aFFVTnNRa01zVVVGQlZVUXNVVUZCVVN4eFFrRkJVa0VzUlVGQk9FSXNSMEZGTlVORUxGRkJRVkZCTEZGQlFWRkhMRVZCUVVjc1UwRkJWU3hEUVVNelFrTXNUMEZCVVN4VFFVRlRRU3hQUVVGUFF5eEhRVU4wUWl4UFFVRlBTQ3hSUVVGUlJ5SXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlsY3pjdWIySnFaV04wTG5aaGJIVmxjeTVxY3lKOSIsIm1vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKG8pe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIG8pdGhyb3cgVHlwZUVycm9yKG8rXCIgaXMgbm90IGEgZnVuY3Rpb24hXCIpO3JldHVybiBvfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOWhMV1oxYm1OMGFXOXVMbXB6SWwwc0ltNWhiV1Z6SWpwYkltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaUxDSnBkQ0lzSWxSNWNHVkZjbkp2Y2lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVGQkxFOUJRVTlETEZGQlFWVXNVMEZCVlVNc1IwRkRla0lzUjBGQmFVSXNiVUpCUVU1QkxFVkJRV3RDTEUxQlFVMURMRlZCUVZWRUxFVkJRVXNzZFVKQlEyeEVMRTlCUVU5Qklpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmWVMxbWRXNWpkR2x2Ymk1cWN5SjkiLCJ2YXIgY29mPXJlcXVpcmUoXCIuL19jb2ZcIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24ocixlKXtpZihcIm51bWJlclwiIT10eXBlb2YgciYmXCJOdW1iZXJcIiE9Y29mKHIpKXRocm93IFR5cGVFcnJvcihlKTtyZXR1cm4rcn07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDloTFc1MWJXSmxjaTEyWVd4MVpTNXFjeUpkTENKdVlXMWxjeUk2V3lKamIyWWlMQ0p5WlhGMWFYSmxJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSW1sMElpd2liWE5uSWl3aVZIbHdaVVZ5Y205eUlsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeEpRVUZKUVN4SlFVRk5ReXhSUVVGUkxGVkJRMnhDUXl4UFFVRlBReXhSUVVGVkxGTkJRVlZETEVWQlFVbERMRWRCUXpkQ0xFZEJRV2xDTEdsQ1FVRk9SQ3hIUVVFMlFpeFZRVUZZU2l4SlFVRkpTU3hIUVVGcFFpeE5RVUZOUlN4VlFVRlZSQ3hIUVVOc1JTeFBRVUZSUkNJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYMkV0Ym5WdFltVnlMWFpoYkhWbExtcHpJbjA9IiwidmFyIFVOU0NPUEFCTEVTPXJlcXVpcmUoXCIuL193a3NcIikoXCJ1bnNjb3BhYmxlc1wiKSxBcnJheVByb3RvPUFycmF5LnByb3RvdHlwZTtudWxsPT1BcnJheVByb3RvW1VOU0NPUEFCTEVTXSYmcmVxdWlyZShcIi4vX2hpZGVcIikoQXJyYXlQcm90byxVTlNDT1BBQkxFUyx7fSksbW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24ocil7QXJyYXlQcm90b1tVTlNDT1BBQkxFU11bcl09ITB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5aFpHUXRkRzh0ZFc1elkyOXdZV0pzWlhNdWFuTWlYU3dpYm1GdFpYTWlPbHNpVlU1VFEwOVFRVUpNUlZNaUxDSnlaWEYxYVhKbElpd2lRWEp5WVhsUWNtOTBieUlzSWtGeWNtRjVJaXdpY0hKdmRHOTBlWEJsSWl3aWRXNWtaV1pwYm1Wa0lpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SXNJbXRsZVNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUTBFc1NVRkJTVUVzV1VGQlkwTXNVVUZCVVN4VFFVRlNRU3hEUVVGclFpeGxRVU5vUTBNc1YwRkJZVU1zVFVGQlRVTXNWVUZEVVVNc1RVRkJNMEpJTEZkQlFWZEdMR05CUVRKQ1F5eFJRVUZSTEZWQlFWSkJMRU5CUVcxQ1F5eFhRVUZaUml4WlFVRmhMRWxCUTNSR1RTeFBRVUZQUXl4UlFVRlZMRk5CUVZWRExFZEJRM3BDVGl4WFFVRlhSaXhoUVVGaFVTeEpRVUZQSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZZV1JrTFhSdkxYVnVjMk52Y0dGaWJHVnpMbXB6SW4wPSIsIm1vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKG8sbixyLGkpe2lmKCEobyBpbnN0YW5jZW9mIG4pfHx2b2lkIDAhPT1pJiZpIGluIG8pdGhyb3cgVHlwZUVycm9yKHIrXCI6IGluY29ycmVjdCBpbnZvY2F0aW9uIVwiKTtyZXR1cm4gb307XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDloYmkxcGJuTjBZVzVqWlM1cWN5SmRMQ0p1WVcxbGN5STZXeUp0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpYVhRaUxDSkRiMjV6ZEhKMVkzUnZjaUlzSW01aGJXVWlMQ0ptYjNKaWFXUmtaVzVHYVdWc1pDSXNJblZ1WkdWbWFXNWxaQ0lzSWxSNWNHVkZjbkp2Y2lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVGQkxFOUJRVTlETEZGQlFWVXNVMEZCVlVNc1JVRkJTVU1zUlVGQllVTXNSVUZCVFVNc1IwRkRhRVFzUzBGQlRVZ3NZVUZCWTBNc1UwRkJiME5ITEVsQlFXNUNSQ3hIUVVGblEwRXNTMEZCYTBKSUxFVkJRM0pHTEUxQlFVMUxMRlZCUVZWSUxFVkJRVThzTWtKQlEzWkNMRTlCUVU5R0lpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmWVc0dGFXNXpkR0Z1WTJVdWFuTWlmUT09IiwidmFyIGlzT2JqZWN0PXJlcXVpcmUoXCIuL19pcy1vYmplY3RcIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7aWYoIWlzT2JqZWN0KGUpKXRocm93IFR5cGVFcnJvcihlK1wiIGlzIG5vdCBhbiBvYmplY3QhXCIpO3JldHVybiBlfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOWhiaTF2WW1wbFkzUXVhbk1pWFN3aWJtRnRaWE1pT2xzaWFYTlBZbXBsWTNRaUxDSnlaWEYxYVhKbElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SXNJbWwwSWl3aVZIbHdaVVZ5Y205eUlsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeEpRVUZKUVN4VFFVRlhReXhSUVVGUkxHZENRVU4yUWtNc1QwRkJUME1zVVVGQlZTeFRRVUZWUXl4SFFVTjZRaXhKUVVGTFNpeFRRVUZUU1N4SFFVRkxMRTFCUVUxRExGVkJRVlZFTEVWQlFVc3NjMEpCUTNoRExFOUJRVTlCSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZZVzR0YjJKcVpXTjBMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciB0b09iamVjdD1yZXF1aXJlKFwiLi9fdG8tb2JqZWN0XCIpLHRvQWJzb2x1dGVJbmRleD1yZXF1aXJlKFwiLi9fdG8tYWJzb2x1dGUtaW5kZXhcIiksdG9MZW5ndGg9cmVxdWlyZShcIi4vX3RvLWxlbmd0aFwiKTttb2R1bGUuZXhwb3J0cz1bXS5jb3B5V2l0aGlufHxmdW5jdGlvbiBjb3B5V2l0aGluKHQsZSl7dmFyIG89dG9PYmplY3QodGhpcyksbj10b0xlbmd0aChvLmxlbmd0aCksaT10b0Fic29sdXRlSW5kZXgodCxuKSxyPXRvQWJzb2x1dGVJbmRleChlLG4pLHU9YXJndW1lbnRzLmxlbmd0aD4yP2FyZ3VtZW50c1syXTp2b2lkIDAsbD1NYXRoLm1pbigodm9pZCAwPT09dT9uOnRvQWJzb2x1dGVJbmRleCh1LG4pKS1yLG4taSksZD0xO2ZvcihyPGkmJmk8citsJiYoZD0tMSxyKz1sLTEsaSs9bC0xKTtsLS0gPjA7KXIgaW4gbz9vW2ldPW9bcl06ZGVsZXRlIG9baV0saSs9ZCxyKz1kO3JldHVybiBvfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOWhjbkpoZVMxamIzQjVMWGRwZEdocGJpNXFjeUpkTENKdVlXMWxjeUk2V3lKMGIwOWlhbVZqZENJc0luSmxjWFZwY21VaUxDSjBiMEZpYzI5c2RYUmxTVzVrWlhnaUxDSjBiMHhsYm1kMGFDSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0pqYjNCNVYybDBhR2x1SWl3aWRHRnlaMlYwSWl3aWMzUmhjblFpTENKUElpd2lkR2hwY3lJc0lteGxiaUlzSW14bGJtZDBhQ0lzSW5Sdklpd2labkp2YlNJc0ltVnVaQ0lzSW1GeVozVnRaVzUwY3lJc0luVnVaR1ZtYVc1bFpDSXNJbU52ZFc1MElpd2lUV0YwYUNJc0ltMXBiaUlzSW1sdVl5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwRXNZVUZEUVN4SlFVRkpRU3hUUVVGWFF5eFJRVUZSTEdkQ1FVTnVRa01zWjBKQlFXdENSQ3hSUVVGUkxIZENRVU14UWtVc1UwRkJWMFlzVVVGQlVTeG5Ra0ZGZGtKSExFOUJRVTlETEZGQlFWVXNSMEZCUjBNc1dVRkJZeXhUUVVGVFFTeFhRVUZYUXl4RlFVRnJRa01zUjBGRGRFVXNTVUZCU1VNc1JVRkJTVlFzVTBGQlUxVXNUVUZEWWtNc1JVRkJUVklzVTBGQlUwMHNSVUZCUlVjc1VVRkRha0pETEVWQlFVdFlMR2RDUVVGblFrc3NSVUZCVVVrc1IwRkROMEpITEVWQlFVOWFMR2RDUVVGblFrMHNSVUZCVDBjc1IwRkRPVUpKTEVWQlFVMURMRlZCUVZWS0xFOUJRVk1zUlVGQlNVa3NWVUZCVlN4UlFVRkxReXhGUVVNMVEwTXNSVUZCVVVNc1MwRkJTME1zVlVGQllVZ3NTVUZCVWtZc1JVRkJiMEpLTEVWQlFVMVVMR2RDUVVGblFtRXNSVUZCUzBvc1NVRkJVVWNzUlVGQlRVZ3NSVUZCVFVVc1IwRkRja1pSTEVWQlFVMHNSVUZOVml4SlFVeEpVQ3hGUVVGUFJDeEhRVUZOUVN4RlFVRkxReXhGUVVGUFNTeEpRVU16UWtjc1IwRkJUeXhGUVVOUVVDeEhRVUZSU1N4RlFVRlJMRVZCUTJoQ1RDeEhRVUZOU3l4RlFVRlJMRWRCUlZSQkxFdEJRVlVzUjBGRFdFb3NTMEZCVVV3c1JVRkJSMEVzUlVGQlJVa3NSMEZCVFVvc1JVRkJSVXNzVlVGRFlrd3NSVUZCUlVrc1IwRkRaRUVzUjBGQlRWRXNSVUZEVGxBc1IwRkJVVThzUlVGRFVpeFBRVUZQV2lJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYMkZ5Y21GNUxXTnZjSGt0ZDJsMGFHbHVMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciB0b09iamVjdD1yZXF1aXJlKFwiLi9fdG8tb2JqZWN0XCIpLHRvQWJzb2x1dGVJbmRleD1yZXF1aXJlKFwiLi9fdG8tYWJzb2x1dGUtaW5kZXhcIiksdG9MZW5ndGg9cmVxdWlyZShcIi4vX3RvLWxlbmd0aFwiKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbiBmaWxsKHQpe2Zvcih2YXIgZT10b09iamVjdCh0aGlzKSxvPXRvTGVuZ3RoKGUubGVuZ3RoKSxyPWFyZ3VtZW50cy5sZW5ndGgsbj10b0Fic29sdXRlSW5kZXgocj4xP2FyZ3VtZW50c1sxXTp2b2lkIDAsbyksaT1yPjI/YXJndW1lbnRzWzJdOnZvaWQgMCx1PXZvaWQgMD09PWk/bzp0b0Fic29sdXRlSW5kZXgoaSxvKTt1Pm47KWVbbisrXT10O3JldHVybiBlfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOWhjbkpoZVMxbWFXeHNMbXB6SWwwc0ltNWhiV1Z6SWpwYkluUnZUMkpxWldOMElpd2ljbVZ4ZFdseVpTSXNJblJ2UVdKemIyeDFkR1ZKYm1SbGVDSXNJblJ2VEdWdVozUm9JaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSW1acGJHd2lMQ0oyWVd4MVpTSXNJazhpTENKMGFHbHpJaXdpYkdWdVozUm9JaXdpWVV4bGJpSXNJbUZ5WjNWdFpXNTBjeUlzSW1sdVpHVjRJaXdpZFc1a1pXWnBibVZrSWl3aVpXNWtJaXdpWlc1a1VHOXpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRU3hoUVVOQkxFbEJRVWxCTEZOQlFWZERMRkZCUVZFc1owSkJRMjVDUXl4blFrRkJhMEpFTEZGQlFWRXNkMEpCUXpGQ1JTeFRRVUZYUml4UlFVRlJMR2RDUVVOMlFrY3NUMEZCVDBNc1VVRkJWU3hUUVVGVFF5eExRVUZMUXl4SFFVODNRaXhKUVU1QkxFbEJRVWxETEVWQlFVbFNMRk5CUVZOVExFMUJRMkpETEVWQlFWTlFMRk5CUVZOTExFVkJRVVZGTEZGQlEzQkNReXhGUVVGUFF5eFZRVUZWUml4UFFVTnFRa2NzUlVGQlVWZ3NaMEpCUVdkQ1V5eEZRVUZQTEVWQlFVbERMRlZCUVZVc1VVRkJTMFVzUlVGQlYwb3NSMEZETjBSTExFVkJRVTFLTEVWQlFVOHNSVUZCU1VNc1ZVRkJWU3hSUVVGTFJTeEZRVU5vUTBVc1QwRkJhVUpHTEVsQlFWSkRMRVZCUVc5Q1RDeEZRVUZUVWl4blFrRkJaMEpoTEVWQlFVdE1MRWRCUTNoRVRTeEZRVUZUU0N4SFFVRlBUQ3hGUVVGRlN5eExRVUZYVGl4RlFVTndReXhQUVVGUFF5SXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDJGeWNtRjVMV1pwYkd3dWFuTWlmUT09IiwidmFyIGZvck9mPXJlcXVpcmUoXCIuL19mb3Itb2ZcIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24ocixmKXt2YXIgbz1bXTtyZXR1cm4gZm9yT2YociwhMSxvLnB1c2gsbyxmKSxvfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOWhjbkpoZVMxbWNtOXRMV2wwWlhKaFlteGxMbXB6SWwwc0ltNWhiV1Z6SWpwYkltWnZjazltSWl3aWNtVnhkV2x5WlNJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaUxDSnBkR1Z5SWl3aVNWUkZVa0ZVVDFJaUxDSnlaWE4xYkhRaUxDSndkWE5vSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4SlFVRkpRU3hOUVVGUlF5eFJRVUZSTEdGQlJYQkNReXhQUVVGUFF5eFJRVUZWTEZOQlFWVkRMRVZCUVUxRExFZEJReTlDTEVsQlFVbERMRVZCUVZNc1IwRkZZaXhQUVVSQlRpeE5RVUZOU1N4SFFVRk5MRVZCUVU5RkxFVkJRVTlETEV0QlFVMUVMRVZCUVZGRUxFZEJRMnBEUXlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYMkZ5Y21GNUxXWnliMjB0YVhSbGNtRmliR1V1YW5NaWZRPT0iLCJ2YXIgdG9JT2JqZWN0PXJlcXVpcmUoXCIuL190by1pb2JqZWN0XCIpLHRvTGVuZ3RoPXJlcXVpcmUoXCIuL190by1sZW5ndGhcIiksdG9BYnNvbHV0ZUluZGV4PXJlcXVpcmUoXCIuL190by1hYnNvbHV0ZS1pbmRleFwiKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxvLHIpe3ZhciBuLHU9dG9JT2JqZWN0KHQpLGk9dG9MZW5ndGgodS5sZW5ndGgpLGY9dG9BYnNvbHV0ZUluZGV4KHIsaSk7aWYoZSYmbyE9byl7Zm9yKDtpPmY7KWlmKChuPXVbZisrXSkhPW4pcmV0dXJuITB9ZWxzZSBmb3IoO2k+ZjtmKyspaWYoKGV8fGYgaW4gdSkmJnVbZl09PT1vKXJldHVybiBlfHxmfHwwO3JldHVybiFlJiYtMX19O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5aGNuSmhlUzFwYm1Oc2RXUmxjeTVxY3lKZExDSnVZVzFsY3lJNld5SjBiMGxQWW1wbFkzUWlMQ0p5WlhGMWFYSmxJaXdpZEc5TVpXNW5kR2dpTENKMGIwRmljMjlzZFhSbFNXNWtaWGdpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aVNWTmZTVTVEVEZWRVJWTWlMQ0lrZEdocGN5SXNJbVZzSWl3aVpuSnZiVWx1WkdWNElpd2lkbUZzZFdVaUxDSlBJaXdpYkdWdVozUm9JaXdpYVc1a1pYZ2lYU3dpYldGd2NHbHVaM01pT2lKQlFVVkJMRWxCUVVsQkxGVkJRVmxETEZGQlFWRXNhVUpCUTNCQ1F5eFRRVUZYUkN4UlFVRlJMR2RDUVVOdVFrVXNaMEpCUVd0Q1JpeFJRVUZSTEhkQ1FVTTVRa2NzVDBGQlQwTXNVVUZCVlN4VFFVRlZReXhIUVVONlFpeFBRVUZQTEZOQlFWVkRMRVZCUVU5RExFVkJRVWxETEVkQlF6RkNMRWxCUjBsRExFVkJTRUZETEVWQlFVbFlMRlZCUVZWUExFZEJRMlJMTEVWQlFWTldMRk5CUVZOVExFVkJRVVZETEZGQlEzQkNReXhGUVVGUlZpeG5Ra0ZCWjBKTkxFVkJRVmRITEVkQlNYWkRMRWRCUVVsT0xFZEJRV1ZGTEVkQlFVMUJMRWRCUVVrc1MwRkJUMGtzUlVGQlUwTXNSMEZITTBNc1NVRkdRVWdzUlVGQlVVTXNSVUZCUlVVc1QwRkZSMGdzUlVGQlR5eFBRVUZQTEU5QlJYUkNMRXRCUVUxRkxFVkJRVk5ETEVWQlFVOUJMRWxCUVZNc1NVRkJTVkFzUjBGQlpVOHNTMEZCVTBZc1NVRkROVVJCTEVWQlFVVkZMRXRCUVZkTUxFVkJRVWtzVDBGQlQwWXNSMEZCWlU4c1IwRkJVeXhGUVVOd1JDeFBRVUZSVUN4SlFVRm5RaUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgyRnljbUY1TFdsdVkyeDFaR1Z6TG1wekluMD0iLCJ2YXIgY3R4PXJlcXVpcmUoXCIuL19jdHhcIiksSU9iamVjdD1yZXF1aXJlKFwiLi9faW9iamVjdFwiKSx0b09iamVjdD1yZXF1aXJlKFwiLi9fdG8tb2JqZWN0XCIpLHRvTGVuZ3RoPXJlcXVpcmUoXCIuL190by1sZW5ndGhcIiksYXNjPXJlcXVpcmUoXCIuL19hcnJheS1zcGVjaWVzLWNyZWF0ZVwiKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihlLHIpe3ZhciB0PTE9PWUsYz0yPT1lLGk9Mz09ZSxuPTQ9PWUsdT02PT1lLG89NT09ZXx8dSxzPXJ8fGFzYztyZXR1cm4gZnVuY3Rpb24ocixhLGYpe2Zvcih2YXIgYixoLGo9dG9PYmplY3QociksbD1JT2JqZWN0KGopLHE9Y3R4KGEsZiwzKSxfPXRvTGVuZ3RoKGwubGVuZ3RoKSxnPTAsdj10P3MocixfKTpjP3MociwwKTp2b2lkIDA7Xz5nO2crKylpZigob3x8ZyBpbiBsKSYmKGg9cShiPWxbZ10sZyxqKSxlKSlpZih0KXZbZ109aDtlbHNlIGlmKGgpc3dpdGNoKGUpe2Nhc2UgMzpyZXR1cm4hMDtjYXNlIDU6cmV0dXJuIGI7Y2FzZSA2OnJldHVybiBnO2Nhc2UgMjp2LnB1c2goYil9ZWxzZSBpZihuKXJldHVybiExO3JldHVybiB1Py0xOml8fG4/bjp2fX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDloY25KaGVTMXRaWFJvYjJSekxtcHpJbDBzSW01aGJXVnpJanBiSW1OMGVDSXNJbkpsY1hWcGNtVWlMQ0pKVDJKcVpXTjBJaXdpZEc5UFltcGxZM1FpTENKMGIweGxibWQwYUNJc0ltRnpZeUlzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKVVdWQkZJaXdpSkdOeVpXRjBaU0lzSWtsVFgwMUJVQ0lzSWtsVFgwWkpURlJGVWlJc0lrbFRYMU5QVFVVaUxDSkpVMTlGVmtWU1dTSXNJa2xUWDBaSlRrUmZTVTVFUlZnaUxDSk9UMTlJVDB4RlV5SXNJbU55WldGMFpTSXNJaVIwYUdseklpd2lZMkZzYkdKaFkydG1iaUlzSW5Sb1lYUWlMQ0oyWVd3aUxDSnlaWE1pTENKUElpd2ljMlZzWmlJc0ltWWlMQ0pzWlc1bmRHZ2lMQ0pwYm1SbGVDSXNJbkpsYzNWc2RDSXNJblZ1WkdWbWFXNWxaQ0lzSW5CMWMyZ2lYU3dpYldGd2NHbHVaM01pT2lKQlFVOUJMRWxCUVVsQkxFbEJRVTFETEZGQlFWRXNWVUZEWkVNc1VVRkJWVVFzVVVGQlVTeGpRVU5zUWtVc1UwRkJWMFlzVVVGQlVTeG5Ra0ZEYmtKSExGTkJRVmRJTEZGQlFWRXNaMEpCUTI1Q1NTeEpRVUZOU2l4UlFVRlJMREpDUVVOc1Frc3NUMEZCVDBNc1VVRkJWU3hUUVVGVlF5eEZRVUZOUXl4SFFVTXZRaXhKUVVGSlF5eEZRVUZwUWl4SFFVRlNSaXhGUVVOVVJ5eEZRVUZ2UWl4SFFVRlNTQ3hGUVVOYVNTeEZRVUZyUWl4SFFVRlNTaXhGUVVOV1N5eEZRVUZ0UWl4SFFVRlNUQ3hGUVVOWVRTeEZRVUYzUWl4SFFVRlNUaXhGUVVOb1FrOHNSVUZCYlVJc1IwRkJVbEFzUjBGQllVMHNSVUZEZUVKRkxFVkJRVk5RTEVkQlFWZEtMRWxCUTNoQ0xFOUJRVThzVTBGQlZWa3NSVUZCVDBNc1JVRkJXVU1zUjBGUmJFTXNTVUZRUVN4SlFVMUpReXhGUVVGTFF5eEZRVTVNUXl4RlFVRkpia0lzVTBGQlUyTXNSMEZEWWswc1JVRkJUM0pDTEZGQlFWRnZRaXhIUVVObVJTeEZRVUZKZUVJc1NVRkJTV3RDTEVWQlFWbERMRVZCUVUwc1IwRkRNVUpOTEVWQlFWTnlRaXhUUVVGVGJVSXNSVUZCUzBVc1VVRkRka0pETEVWQlFWRXNSVUZEVWtNc1JVRkJVMnBDTEVWQlFWTk5MRVZCUVU5RExFVkJRVTlSTEVkQlFWVmtMRVZCUVZsTExFVkJRVTlETEVWQlFVOHNVVUZCUzFjc1JVRkZka1ZJTEVWQlFWTkRMRVZCUVU5QkxFbEJRVk1zU1VGQlNWZ3NSMEZCV1Zjc1MwRkJVMGdzUzBGRmRFUkdMRVZCUVUxSExFVkJSRTVLTEVWQlFVMUhMRVZCUVV0SExFZEJRMFZCTEVWQlFVOUtMRWRCUTJoQ1pDeEhRVU5HTEVkQlFVbEZMRVZCUVZGcFFpeEZRVUZQUkN4SFFVRlRUQ3hQUVVOMlFpeEhRVUZKUVN4RlFVRkxMRTlCUVZGaUxFZEJRM0JDTEV0QlFVc3NSVUZCUnl4UFFVRlBMRVZCUTJZc1MwRkJTeXhGUVVGSExFOUJRVTlaTEVWQlEyWXNTMEZCU3l4RlFVRkhMRTlCUVU5TkxFVkJRMllzUzBGQlN5eEZRVUZIUXl4RlFVRlBSU3hMUVVGTFZDeFJRVU5tTEVkQlFVbFFMRVZCUVZVc1QwRkJUeXhGUVVkb1F5eFBRVUZQUXl4SFFVRnBRaXhGUVVGSlJpeEhRVUZYUXl4RlFVRlhRU3hGUVVGWFl5SXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDJGeWNtRjVMVzFsZEdodlpITXVhbk1pZlE9PSIsInZhciBhRnVuY3Rpb249cmVxdWlyZShcIi4vX2EtZnVuY3Rpb25cIiksdG9PYmplY3Q9cmVxdWlyZShcIi4vX3RvLW9iamVjdFwiKSxJT2JqZWN0PXJlcXVpcmUoXCIuL19pb2JqZWN0XCIpLHRvTGVuZ3RoPXJlcXVpcmUoXCIuL190by1sZW5ndGhcIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIsbyxpKXthRnVuY3Rpb24odCk7dmFyIG49dG9PYmplY3QoZSksdT1JT2JqZWN0KG4pLGM9dG9MZW5ndGgobi5sZW5ndGgpLGE9aT9jLTE6MCxmPWk/LTE6MTtpZihyPDIpZm9yKDs7KXtpZihhIGluIHUpe289dVthXSxhKz1mO2JyZWFrfWlmKGErPWYsaT9hPDA6Yzw9YSl0aHJvdyBUeXBlRXJyb3IoXCJSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlXCIpfWZvcig7aT9hPj0wOmM+YTthKz1mKWEgaW4gdSYmKG89dChvLHVbYV0sYSxuKSk7cmV0dXJuIG99O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5aGNuSmhlUzF5WldSMVkyVXVhbk1pWFN3aWJtRnRaWE1pT2xzaVlVWjFibU4wYVc5dUlpd2ljbVZ4ZFdseVpTSXNJblJ2VDJKcVpXTjBJaXdpU1U5aWFtVmpkQ0lzSW5SdlRHVnVaM1JvSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0luUm9ZWFFpTENKallXeHNZbUZqYTJadUlpd2lZVXhsYmlJc0ltMWxiVzhpTENKcGMxSnBaMmgwSWl3aVR5SXNJbk5sYkdZaUxDSnNaVzVuZEdnaUxDSnBibVJsZUNJc0lta2lMQ0pVZVhCbFJYSnliM0lpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEVsQlFVbEJMRlZCUVZsRExGRkJRVkVzYVVKQlEzQkNReXhUUVVGWFJDeFJRVUZSTEdkQ1FVTnVRa1VzVVVGQlZVWXNVVUZCVVN4alFVTnNRa2NzVTBGQlYwZ3NVVUZCVVN4blFrRkZka0pKTEU5QlFVOURMRkZCUVZVc1UwRkJWVU1zUlVGQlRVTXNSVUZCV1VNc1JVRkJUVU1zUlVGQlRVTXNSMEZEZGtSWUxGVkJRVlZSTEVkQlExWXNTVUZCU1Vrc1JVRkJTVllzVTBGQlUwc3NSMEZEWWswc1JVRkJUMVlzVVVGQlVWTXNSMEZEWmtVc1JVRkJVMVlzVTBGQlUxRXNSVUZCUlVVc1VVRkRjRUpETEVWQlFWRktMRVZCUVZWSExFVkJRVk1zUlVGQlNTeEZRVU12UWtVc1JVRkJTVXdzUjBGQlZ5eEZRVUZKTEVWQlEzWkNMRWRCUVVsR0xFVkJRVThzUlVGQlJ5eFBRVUZUTEVOQlEzSkNMRWRCUVVsTkxFdEJRVk5HTEVWQlFVMHNRMEZEYWtKSUxFVkJRVTlITEVWQlFVdEZMRWRCUTFwQkxFZEJRVk5ETEVWQlExUXNUVUZIUml4SFFVUkJSQ3hIUVVGVFF5eEZRVU5NVEN4RlFVRlZTU3hGUVVGUkxFVkJRVWxFTEVkQlFWVkRMRVZCUTJ4RExFMUJRVTFGTEZWQlFWVXNLME5CUjNCQ0xFdEJRVTFPTEVWQlFWVkpMRWRCUVZNc1JVRkJTVVFzUlVGQlUwTXNSVUZCVDBFc1IwRkJVME1zUlVGQlQwUXNTMEZCVTBZc1NVRkRjRVZJTEVWQlFVOUdMRVZCUVZkRkxFVkJRVTFITEVWQlFVdEZMRWRCUVZGQkxFVkJRVTlJTEVsQlJUbERMRTlCUVU5R0lpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmWVhKeVlYa3RjbVZrZFdObExtcHpJbjA9IiwidmFyIGlzT2JqZWN0PXJlcXVpcmUoXCIuL19pcy1vYmplY3RcIiksaXNBcnJheT1yZXF1aXJlKFwiLi9faXMtYXJyYXlcIiksU1BFQ0lFUz1yZXF1aXJlKFwiLi9fd2tzXCIpKFwic3BlY2llc1wiKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihyKXt2YXIgZTtyZXR1cm4gaXNBcnJheShyKSYmKFwiZnVuY3Rpb25cIiE9dHlwZW9mKGU9ci5jb25zdHJ1Y3Rvcil8fGUhPT1BcnJheSYmIWlzQXJyYXkoZS5wcm90b3R5cGUpfHwoZT12b2lkIDApLGlzT2JqZWN0KGUpJiZudWxsPT09KGU9ZVtTUEVDSUVTXSkmJihlPXZvaWQgMCkpLHZvaWQgMD09PWU/QXJyYXk6ZX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDloY25KaGVTMXpjR1ZqYVdWekxXTnZibk4wY25WamRHOXlMbXB6SWwwc0ltNWhiV1Z6SWpwYkltbHpUMkpxWldOMElpd2ljbVZ4ZFdseVpTSXNJbWx6UVhKeVlYa2lMQ0pUVUVWRFNVVlRJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSW05eWFXZHBibUZzSWl3aVF5SXNJbU52Ym5OMGNuVmpkRzl5SWl3aVFYSnlZWGtpTENKd2NtOTBiM1I1Y0dVaUxDSjFibVJsWm1sdVpXUWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRWxCUVVsQkxGTkJRVmRETEZGQlFWRXNaMEpCUTI1Q1F5eFJRVUZWUkN4UlFVRlJMR1ZCUTJ4Q1JTeFJRVUZWUml4UlFVRlJMRk5CUVZKQkxFTkJRV3RDTEZkQlJXaERSeXhQUVVGUFF5eFJRVUZWTEZOQlFWVkRMRWRCUTNwQ0xFbEJRVWxETEVWQlUwWXNUMEZTUlV3c1VVRkJVVWtzUzBGSFRTeHRRa0ZHYUVKRExFVkJRVWxFTEVWQlFWTkZMR05CUld0Q1JDeEpRVUZOUlN4UlFVRlRVQ3hSUVVGUlN5eEZRVUZGUnl4aFFVRmhTQ3hQUVVGSlNTeEhRVU55UlZnc1UwRkJVMDhzU1VGRlJDeFJRVVJXUVN4RlFVRkpRU3hGUVVGRlNpeFpRVU5WU1N4UFFVRkpTU3hUUVVWVVFTeEpRVUZPU2l4RlFVRnJRa1VzVFVGQlVVWWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5aGNuSmhlUzF6Y0dWamFXVnpMV052Ym5OMGNuVmpkRzl5TG1wekluMD0iLCJ2YXIgc3BlY2llc0NvbnN0cnVjdG9yPXJlcXVpcmUoXCIuL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yXCIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKHIsZSl7cmV0dXJuIG5ldyhzcGVjaWVzQ29uc3RydWN0b3IocikpKGUpfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOWhjbkpoZVMxemNHVmphV1Z6TFdOeVpXRjBaUzVxY3lKZExDSnVZVzFsY3lJNld5SnpjR1ZqYVdWelEyOXVjM1J5ZFdOMGIzSWlMQ0p5WlhGMWFYSmxJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSW05eWFXZHBibUZzSWl3aWJHVnVaM1JvSWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3h0UWtGQmNVSkRMRkZCUVZFc1owTkJSV3BEUXl4UFFVRlBReXhSUVVGVkxGTkJRVlZETEVWQlFWVkRMRWRCUTI1RExFOUJRVThzU1VGQlMwd3NiVUpCUVcxQ1NTeEhRVUY0UWl4RFFVRnRRME1pTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOWhjbkpoZVMxemNHVmphV1Z6TFdOeVpXRjBaUzVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBhRnVuY3Rpb249cmVxdWlyZShcIi4vX2EtZnVuY3Rpb25cIiksaXNPYmplY3Q9cmVxdWlyZShcIi4vX2lzLW9iamVjdFwiKSxpbnZva2U9cmVxdWlyZShcIi4vX2ludm9rZVwiKSxhcnJheVNsaWNlPVtdLnNsaWNlLGZhY3Rvcmllcz17fSxjb25zdHJ1Y3Q9ZnVuY3Rpb24odCxyLGkpe2lmKCEociBpbiBmYWN0b3JpZXMpKXtmb3IodmFyIG49W10sZT0wO2U8cjtlKyspbltlXT1cImFbXCIrZStcIl1cIjtmYWN0b3JpZXNbcl09RnVuY3Rpb24oXCJGLGFcIixcInJldHVybiBuZXcgRihcIituLmpvaW4oXCIsXCIpK1wiKVwiKX1yZXR1cm4gZmFjdG9yaWVzW3JdKHQsaSl9O21vZHVsZS5leHBvcnRzPUZ1bmN0aW9uLmJpbmR8fGZ1bmN0aW9uIGJpbmQodCl7dmFyIHI9YUZ1bmN0aW9uKHRoaXMpLGk9YXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cywxKSxuPWZ1bmN0aW9uKCl7dmFyIGU9aS5jb25jYXQoYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cykpO3JldHVybiB0aGlzIGluc3RhbmNlb2Ygbj9jb25zdHJ1Y3QocixlLmxlbmd0aCxlKTppbnZva2UocixlLHQpfTtyZXR1cm4gaXNPYmplY3Qoci5wcm90b3R5cGUpJiYobi5wcm90b3R5cGU9ci5wcm90b3R5cGUpLG59O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5aWFXNWtMbXB6SWwwc0ltNWhiV1Z6SWpwYkltRkdkVzVqZEdsdmJpSXNJbkpsY1hWcGNtVWlMQ0pwYzA5aWFtVmpkQ0lzSW1sdWRtOXJaU0lzSW1GeWNtRjVVMnhwWTJVaUxDSnpiR2xqWlNJc0ltWmhZM1J2Y21sbGN5SXNJbU52Ym5OMGNuVmpkQ0lzSWtZaUxDSnNaVzRpTENKaGNtZHpJaXdpYmlJc0lta2lMQ0pHZFc1amRHbHZiaUlzSW1wdmFXNGlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpWW1sdVpDSXNJblJvWVhRaUxDSm1iaUlzSW5Sb2FYTWlMQ0p3WVhKMFFYSm5jeUlzSW1OaGJHd2lMQ0poY21kMWJXVnVkSE1pTENKaWIzVnVaQ0lzSW1OdmJtTmhkQ0lzSW14bGJtZDBhQ0lzSW5CeWIzUnZkSGx3WlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkRRU3hKUVVGSlFTeFZRVUZaUXl4UlFVRlJMR2xDUVVOd1FrTXNVMEZCVjBRc1VVRkJVU3huUWtGRGJrSkZMRTlCUVZOR0xGRkJRVkVzWVVGRGFrSkhMRmRCUVdFc1IwRkJSME1zVFVGRGFFSkRMRlZCUVZrc1IwRkZXa01zVlVGQldTeFRRVUZWUXl4RlFVRkhReXhGUVVGTFF5eEhRVU5vUXl4TFFVRk5SQ3hMUVVGUFNDeFhRVUZaTEVOQlEzWkNMRWxCUVVzc1NVRkJTVXNzUlVGQlNTeEhRVUZKUXl4RlFVRkpMRVZCUVVkQkxFVkJRVWxJTEVWQlFVdEhMRWxCUVV0RUxFVkJRVVZETEVkQlFVc3NTMEZCVDBFc1JVRkJTU3hKUVVWNFJFNHNWVUZCVlVjc1IwRkJUMGtzVTBGQlV5eE5RVUZQTEdkQ1FVRnJRa1lzUlVGQlJVY3NTMEZCU3l4TFFVRlBMRXRCUTJwRkxFOUJRVTlTTEZWQlFWVkhMRWRCUVV0RUxFVkJRVWRGTEVsQlJ6ZENTeXhQUVVGUFF5eFJRVUZWU0N4VFFVRlRTU3hOUVVGUkxGTkJRVk5CTEV0QlFVdERMRWRCUXpsRExFbEJRVWxETEVWQlFVdHVRaXhWUVVGVmIwSXNUVUZEWmtNc1JVRkJWMnBDTEZkQlFWZHJRaXhMUVVGTFF5eFZRVUZYTEVkQlEzUkRReXhGUVVGUkxGZEJRMVlzU1VGQlNXUXNSVUZCVDFjc1JVRkJVMGtzVDBGQlQzSkNMRmRCUVZkclFpeExRVUZMUXl4WlFVTXpReXhQUVVGUFNDeG5Ra0ZCWjBKSkxFVkJRVkZxUWl4VlFVRlZXU3hGUVVGSlZDeEZRVUZMWjBJc1QwRkJVV2hDTEVkQlFWRlFMRTlCUVU5blFpeEZRVUZKVkN4RlFVRk5VU3hKUVVkeVJpeFBRVVJKYUVJc1UwRkJVMmxDTEVWQlFVZFJMR0ZCUVZsSUxFVkJRVTFITEZWQlFWbFNMRVZCUVVkUkxGZEJRekZEU0NJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYMkpwYm1RdWFuTWlmUT09IiwidmFyIGNvZj1yZXF1aXJlKFwiLi9fY29mXCIpLFRBRz1yZXF1aXJlKFwiLi9fd2tzXCIpKFwidG9TdHJpbmdUYWdcIiksQVJHPVwiQXJndW1lbnRzXCI9PWNvZihmdW5jdGlvbigpe3JldHVybiBhcmd1bWVudHN9KCkpLHRyeUdldD1mdW5jdGlvbih0LGUpe3RyeXtyZXR1cm4gdFtlXX1jYXRjaCh0KXt9fTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbih0KXt2YXIgZSxyLG47cmV0dXJuIHZvaWQgMD09PXQ/XCJVbmRlZmluZWRcIjpudWxsPT09dD9cIk51bGxcIjpcInN0cmluZ1wiPT10eXBlb2Yocj10cnlHZXQoZT1PYmplY3QodCksVEFHKSk/cjpBUkc/Y29mKGUpOlwiT2JqZWN0XCI9PShuPWNvZihlKSkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGUuY2FsbGVlP1wiQXJndW1lbnRzXCI6bn07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDlqYkdGemMyOW1MbXB6SWwwc0ltNWhiV1Z6SWpwYkltTnZaaUlzSW5KbGNYVnBjbVVpTENKVVFVY2lMQ0pCVWtjaUxDSmhjbWQxYldWdWRITWlMQ0owY25sSFpYUWlMQ0pwZENJc0ltdGxlU0lzSW1VaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2lUeUlzSWxRaUxDSkNJaXdpZFc1a1pXWnBibVZrSWl3aVQySnFaV04wSWl3aVkyRnNiR1ZsSWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hKUVVGTlF5eFJRVUZSTEZWQlEyUkRMRWxCUVUxRUxGRkJRVkVzVTBGQlVrRXNRMEZCYTBJc1pVRkZlRUpGTEVsQlFXdEVMR0ZCUVRWRFNDeEpRVUZKTEZkQlFXTXNUMEZCVDBrc1ZVRkJja0lzU1VGSFZrTXNUMEZCVXl4VFFVRlZReXhGUVVGSlF5eEhRVU42UWl4SlFVTkZMRTlCUVU5RUxFVkJRVWRETEVkQlExWXNUVUZCVDBNc1RVRkhXRU1zVDBGQlQwTXNVVUZCVlN4VFFVRlZTaXhIUVVONlFpeEpRVUZKU3l4RlFVRkhReXhGUVVGSFF5eEZRVU5XTEZsQlFXTkRMRWxCUVZCU0xFVkJRVzFDTEZsQlFYRkNMRTlCUVZCQkxFVkJRV01zVDBGRlRpeHBRa0ZCY0VOTkxFVkJRVWxRTEU5QlFVOU5MRVZCUVVsSkxFOUJRVTlVTEVkQlFVdEtMRTFCUVc5Q1ZTeEZRVVYyUkZRc1NVRkJUVWdzU1VGQlNWY3NSMEZGVFN4WFFVRm1SU3hGUVVGSllpeEpRVUZKVnl4TFFVRnpReXh0UWtGQldrRXNSVUZCUlVzc1QwRkJkVUlzV1VGQlkwZ2lMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5amJHRnpjMjltTG1wekluMD0iLCJ2YXIgdG9TdHJpbmc9e30udG9TdHJpbmc7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuIHRvU3RyaW5nLmNhbGwodCkuc2xpY2UoOCwtMSl9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5amIyWXVhbk1pWFN3aWJtRnRaWE1pT2xzaWRHOVRkSEpwYm1jaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2lhWFFpTENKallXeHNJaXdpYzJ4cFkyVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRWxCUVVsQkxGTkJRVmNzUjBGQlIwRXNVMEZGYkVKRExFOUJRVTlETEZGQlFWVXNVMEZCVlVNc1IwRkRla0lzVDBGQlQwZ3NVMEZCVTBrc1MwRkJTMFFzUjBGQlNVVXNUVUZCVFN4SFFVRkpJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZlkyOW1MbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBkUD1yZXF1aXJlKFwiLi9fb2JqZWN0LWRwXCIpLmYsY3JlYXRlPXJlcXVpcmUoXCIuL19vYmplY3QtY3JlYXRlXCIpLHJlZGVmaW5lQWxsPXJlcXVpcmUoXCIuL19yZWRlZmluZS1hbGxcIiksY3R4PXJlcXVpcmUoXCIuL19jdHhcIiksYW5JbnN0YW5jZT1yZXF1aXJlKFwiLi9fYW4taW5zdGFuY2VcIiksZm9yT2Y9cmVxdWlyZShcIi4vX2Zvci1vZlwiKSwkaXRlckRlZmluZT1yZXF1aXJlKFwiLi9faXRlci1kZWZpbmVcIiksc3RlcD1yZXF1aXJlKFwiLi9faXRlci1zdGVwXCIpLHNldFNwZWNpZXM9cmVxdWlyZShcIi4vX3NldC1zcGVjaWVzXCIpLERFU0NSSVBUT1JTPXJlcXVpcmUoXCIuL19kZXNjcmlwdG9yc1wiKSxmYXN0S2V5PXJlcXVpcmUoXCIuL19tZXRhXCIpLmZhc3RLZXksdmFsaWRhdGU9cmVxdWlyZShcIi4vX3ZhbGlkYXRlLWNvbGxlY3Rpb25cIiksU0laRT1ERVNDUklQVE9SUz9cIl9zXCI6XCJzaXplXCIsZ2V0RW50cnk9ZnVuY3Rpb24oZSx0KXt2YXIgcixpPWZhc3RLZXkodCk7aWYoXCJGXCIhPT1pKXJldHVybiBlLl9pW2ldO2ZvcihyPWUuX2Y7cjtyPXIubilpZihyLms9PXQpcmV0dXJuIHJ9O21vZHVsZS5leHBvcnRzPXtnZXRDb25zdHJ1Y3RvcjpmdW5jdGlvbihlLHQscixpKXt2YXIgbj1lKGZ1bmN0aW9uKGUsZil7YW5JbnN0YW5jZShlLG4sdCxcIl9pXCIpLGUuX3Q9dCxlLl9pPWNyZWF0ZShudWxsKSxlLl9mPXZvaWQgMCxlLl9sPXZvaWQgMCxlW1NJWkVdPTAsbnVsbCE9ZiYmZm9yT2YoZixyLGVbaV0sZSl9KTtyZXR1cm4gcmVkZWZpbmVBbGwobi5wcm90b3R5cGUse2NsZWFyOmZ1bmN0aW9uIGNsZWFyKCl7Zm9yKHZhciBlPXZhbGlkYXRlKHRoaXMsdCkscj1lLl9pLGk9ZS5fZjtpO2k9aS5uKWkucj0hMCxpLnAmJihpLnA9aS5wLm49dm9pZCAwKSxkZWxldGUgcltpLmldO2UuX2Y9ZS5fbD12b2lkIDAsZVtTSVpFXT0wfSxkZWxldGU6ZnVuY3Rpb24oZSl7dmFyIHI9dmFsaWRhdGUodGhpcyx0KSxpPWdldEVudHJ5KHIsZSk7aWYoaSl7dmFyIG49aS5uLGY9aS5wO2RlbGV0ZSByLl9pW2kuaV0saS5yPSEwLGYmJihmLm49biksbiYmKG4ucD1mKSxyLl9mPT1pJiYoci5fZj1uKSxyLl9sPT1pJiYoci5fbD1mKSxyW1NJWkVdLS19cmV0dXJuISFpfSxmb3JFYWNoOmZ1bmN0aW9uIGZvckVhY2goZSl7dmFsaWRhdGUodGhpcyx0KTtmb3IodmFyIHIsaT1jdHgoZSxhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCwzKTtyPXI/ci5uOnRoaXMuX2Y7KWZvcihpKHIudixyLmssdGhpcyk7ciYmci5yOylyPXIucH0saGFzOmZ1bmN0aW9uIGhhcyhlKXtyZXR1cm4hIWdldEVudHJ5KHZhbGlkYXRlKHRoaXMsdCksZSl9fSksREVTQ1JJUFRPUlMmJmRQKG4ucHJvdG90eXBlLFwic2l6ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdmFsaWRhdGUodGhpcyx0KVtTSVpFXX19KSxufSxkZWY6ZnVuY3Rpb24oZSx0LHIpe3ZhciBpLG4sZj1nZXRFbnRyeShlLHQpO3JldHVybiBmP2Yudj1yOihlLl9sPWY9e2k6bj1mYXN0S2V5KHQsITApLGs6dCx2OnIscDppPWUuX2wsbjp2b2lkIDAscjohMX0sZS5fZnx8KGUuX2Y9ZiksaSYmKGkubj1mKSxlW1NJWkVdKyssXCJGXCIhPT1uJiYoZS5faVtuXT1mKSksZX0sZ2V0RW50cnk6Z2V0RW50cnksc2V0U3Ryb25nOmZ1bmN0aW9uKGUsdCxyKXskaXRlckRlZmluZShlLHQsZnVuY3Rpb24oZSxyKXt0aGlzLl90PXZhbGlkYXRlKGUsdCksdGhpcy5faz1yLHRoaXMuX2w9dm9pZCAwfSxmdW5jdGlvbigpe2Zvcih2YXIgZT10aGlzLl9rLHQ9dGhpcy5fbDt0JiZ0LnI7KXQ9dC5wO3JldHVybiB0aGlzLl90JiYodGhpcy5fbD10PXQ/dC5uOnRoaXMuX3QuX2YpP3N0ZXAoMCxcImtleXNcIj09ZT90Lms6XCJ2YWx1ZXNcIj09ZT90LnY6W3Quayx0LnZdKToodGhpcy5fdD12b2lkIDAsc3RlcCgxKSl9LHI/XCJlbnRyaWVzXCI6XCJ2YWx1ZXNcIiwhciwhMCksc2V0U3BlY2llcyh0KX19O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5amIyeHNaV04wYVc5dUxYTjBjbTl1Wnk1cWN5SmRMQ0p1WVcxbGN5STZXeUprVUNJc0luSmxjWFZwY21VaUxDSm1JaXdpWTNKbFlYUmxJaXdpY21Wa1pXWnBibVZCYkd3aUxDSmpkSGdpTENKaGJrbHVjM1JoYm1ObElpd2labTl5VDJZaUxDSWthWFJsY2tSbFptbHVaU0lzSW5OMFpYQWlMQ0p6WlhSVGNHVmphV1Z6SWl3aVJFVlRRMUpKVUZSUFVsTWlMQ0ptWVhOMFMyVjVJaXdpZG1Gc2FXUmhkR1VpTENKVFNWcEZJaXdpWjJWMFJXNTBjbmtpTENKMGFHRjBJaXdpYTJWNUlpd2laVzUwY25raUxDSnBibVJsZUNJc0lsOXBJaXdpWDJZaUxDSnVJaXdpYXlJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaUxDSm5aWFJEYjI1emRISjFZM1J2Y2lJc0luZHlZWEJ3WlhJaUxDSk9RVTFGSWl3aVNWTmZUVUZRSWl3aVFVUkVSVklpTENKRElpd2lhWFJsY21GaWJHVWlMQ0pmZENJc0luVnVaR1ZtYVc1bFpDSXNJbDlzSWl3aWNISnZkRzkwZVhCbElpd2lZMnhsWVhJaUxDSjBhR2x6SWl3aVpHRjBZU0lzSW5JaUxDSndJaXdpYVNJc0ltUmxiR1YwWlNJc0ltNWxlSFFpTENKd2NtVjJJaXdpWm05eVJXRmphQ0lzSW1OaGJHeGlZV05yWm00aUxDSmhjbWQxYldWdWRITWlMQ0pzWlc1bmRHZ2lMQ0oySWl3aWFHRnpJaXdpWjJWMElpd2laR1ZtSWl3aWRtRnNkV1VpTENKelpYUlRkSEp2Ym1jaUxDSnBkR1Z5WVhSbFpDSXNJbXRwYm1RaUxDSmZheUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRFFTeEpRVUZKUVN4SFFVRkxReXhSUVVGUkxHZENRVUZuUWtNc1JVRkROMEpETEU5QlFWTkdMRkZCUVZFc2IwSkJRMnBDUnl4WlFVRmpTQ3hSUVVGUkxHMUNRVU4wUWtrc1NVRkJUVW9zVVVGQlVTeFZRVU5rU3l4WFFVRmhUQ3hSUVVGUkxHdENRVU55UWswc1RVRkJVVTRzVVVGQlVTeGhRVU5vUWs4c1dVRkJZMUFzVVVGQlVTeHJRa0ZEZEVKUkxFdEJRVTlTTEZGQlFWRXNaMEpCUTJaVExGZEJRV0ZVTEZGQlFWRXNhMEpCUTNKQ1ZTeFpRVUZqVml4UlFVRlJMR3RDUVVOMFFsY3NVVUZCVlZnc1VVRkJVU3hYUVVGWFZ5eFJRVU0zUWtNc1UwRkJWMW9zVVVGQlVTd3dRa0ZEYmtKaExFdEJRVTlJTEZsQlFXTXNTMEZCVHl4UFFVVTFRa2tzVTBGQlZ5eFRRVUZWUXl4RlFVRk5ReXhIUVVVM1FpeEpRVU5KUXl4RlFVUkJReXhGUVVGUlVDeFJRVUZSU3l4SFFVVndRaXhIUVVGakxFMUJRVlpGTEVWQlFXVXNUMEZCVDBnc1JVRkJTMGtzUjBGQlIwUXNSMEZGYkVNc1NVRkJTMFFzUlVGQlVVWXNSVUZCUzBzc1IwRkJTVWdzUlVGQlQwRXNSVUZCVVVFc1JVRkJUVWtzUlVGRGVrTXNSMEZCU1Vvc1JVRkJUVXNzUjBGQlMwNHNSVUZCU3l4UFFVRlBReXhIUVVrdlFrMHNUMEZCVDBNc1VVRkJWU3hEUVVObVF5eGxRVUZuUWl4VFFVRlZReXhGUVVGVFF5eEZRVUZOUXl4RlFVRlJReXhIUVVNdlF5eEpRVUZKUXl4RlFVRkpTaXhGUVVGUkxGTkJRVlZZTEVWQlFVMW5RaXhIUVVNNVFqRkNMRmRCUVZkVkxFVkJRVTFsTEVWQlFVZElMRVZCUVUwc1RVRkRNVUphTEVWQlFVdHBRaXhIUVVGTFRDeEZRVU5XV2l4RlFVRkxTU3hIUVVGTGFrSXNUMEZCVHl4TlFVTnFRbUVzUlVGQlMwc3NVVUZCUzJFc1JVRkRWbXhDTEVWQlFVdHRRaXhSUVVGTFJDeEZRVU5XYkVJc1JVRkJTMFlzVFVGQlVTeEZRVU5IYjBJc1RVRkJXa1lzUjBGQmRVSjZRaXhOUVVGTmVVSXNSVUZCVlVnc1JVRkJVV0lzUlVGQlMyTXNSMEZCVVdRc1MwRnpSR3hGTEU5QmNFUkJXaXhaUVVGWk1rSXNSVUZCUlVzc1ZVRkJWeXhEUVVkMlFrTXNUVUZCVHl4VFFVRlRRU3hSUVVOa0xFbEJRVXNzU1VGQlNYSkNMRVZCUVU5SUxGTkJRVk41UWl4TFFVRk5WaXhIUVVGUFZ5eEZRVUZQZGtJc1JVRkJTMGtzUjBGQlNVWXNSVUZCVVVZc1JVRkJTMHNzUjBGQlNVZ3NSVUZCVDBFc1JVRkJVVUVzUlVGQlRVa3NSVUZETVVaS0xFVkJRVTF6UWl4SFFVRkpMRVZCUTA1MFFpeEZRVUZOZFVJc1NVRkJSM1pDTEVWQlFVMTFRaXhGUVVGSmRrSXNSVUZCVFhWQ0xFVkJRVVZ1UWl4UFFVRkpXU3hWUVVNMVFrc3NSVUZCUzNKQ0xFVkJRVTEzUWl4SFFVVndRakZDTEVWQlFVdExMRWRCUVV0TUxFVkJRVXR0UWl4UlFVRkxSQ3hGUVVOd1FteENMRVZCUVV0R0xFMUJRVkVzUjBGSlpqWkNMRTlCUVZVc1UwRkJWVEZDTEVkQlEyeENMRWxCUVVsRUxFVkJRVTlJTEZOQlFWTjVRaXhMUVVGTlZpeEhRVU4wUWxZc1JVRkJVVWdzVTBGQlUwTXNSVUZCVFVNc1IwRkRNMElzUjBGQlNVTXNSVUZCVHl4RFFVTlVMRWxCUVVrd1FpeEZRVUZQTVVJc1JVRkJUVWtzUlVGRFluVkNMRVZCUVU4elFpeEZRVUZOZFVJc1UwRkRWbnBDTEVWQlFVdEpMRWRCUVVkR0xFVkJRVTEzUWl4SFFVTnlRbmhDTEVWQlFVMXpRaXhIUVVGSkxFVkJRMDVMTEVsQlFVMUJMRVZCUVV0MlFpeEZRVUZKYzBJc1IwRkRaa0VzU1VGQlRVRXNSVUZCUzBnc1JVRkJTVWtzUjBGRFpqZENMRVZCUVV0TExFbEJRVTFJTEVsQlFVOUdMRVZCUVV0TExFZEJRVXQxUWl4SFFVTTFRalZDTEVWQlFVdHRRaXhKUVVGTmFrSXNTVUZCVDBZc1JVRkJTMjFDTEVkQlFVdFZMRWRCUTJoRE4wSXNSVUZCUzBZc1VVRkRUQ3hSUVVGVFNTeEhRVWxpTkVJc1VVRkJVeXhUUVVGVFFTeFJRVUZSUXl4SFFVTjRRbXhETEZOQlFWTjVRaXhMUVVGTlZpeEhRVWRtTEVsQlJrRXNTVUZEU1ZZc1JVRkVRV2hDTEVWQlFVbEhMRWxCUVVrd1F5eEZRVUZaUXl4VlFVRlZReXhQUVVGVExFVkJRVWxFTEZWQlFWVXNVVUZCUzJRc1JVRkJWeXhIUVVWc1JXaENMRVZCUVZGQkxFVkJRVkZCTEVWQlFVMUpMRVZCUVVsblFpeExRVUZMYWtJc1NVRkhjRU1zU1VGR1FXNUNMRVZCUVVWblFpeEZRVUZOWjBNc1JVRkJSMmhETEVWQlFVMUxMRVZCUVVkbExFMUJSV0p3UWl4SFFVRlRRU3hGUVVGTmMwSXNSMEZCUjNSQ0xFVkJRVkZCTEVWQlFVMTFRaXhIUVVzelExVXNTVUZCU3l4VFFVRlRRU3hKUVVGSmJFTXNSMEZEYUVJc1VVRkJVMFlzVTBGQlUwWXNVMEZCVTNsQ0xFdEJRVTFXTEVkQlFVOVlMRTFCUjNoRFRpeGhRVUZoV0N4SFFVRkhLMElzUlVGQlJVc3NWVUZCVnl4UFFVRlJMRU5CUTNaRFowSXNTVUZCU3l4WFFVTklMRTlCUVU5MlF5eFRRVUZUZVVJc1MwRkJUVllzUjBGQlRXUXNVMEZIZWtKcFFpeEhRVVZVYzBJc1NVRkJTeXhUUVVGVmNrTXNSVUZCVFVNc1JVRkJTM0ZETEVkQlEzaENMRWxCUTBsVUxFVkJRVTB4UWl4RlFVUk9SQ3hGUVVGUlNDeFRRVUZUUXl4RlFVRk5ReXhIUVc5Q2VrSXNUMEZxUWtWRExFVkJRMFpCTEVWQlFVMW5ReXhGUVVGSlNTeEhRVWRXZEVNc1JVRkJTMjFDTEVkQlFVdHFRaXhGUVVGUkxFTkJRMmhDZDBJc1JVRkJSM1pDTEVWQlFWRlFMRkZCUVZGTExFZEJRVXNzUjBGRGVFSk5MRVZCUVVkT0xFVkJRMGhwUXl4RlFVRkhTU3hGUVVOSVlpeEZRVUZIU1N4RlFVRlBOMElzUlVGQlMyMUNMRWRCUTJaaUxFOUJRVWRaTEVWQlEwaE5MRWRCUVVjc1IwRkZRWGhDTEVWQlFVdExMRXRCUVVsTUxFVkJRVXRMTEVkQlFVdElMRWRCUTNCQ01rSXNTVUZCVFVFc1JVRkJTM1pDTEVWQlFVbEtMRWRCUTI1Q1JpeEZRVUZMUml4UlFVVlRMRTFCUVZaTExFbEJRV1ZJTEVWQlFVdEpMRWRCUVVkRUxFZEJRVk5FTEVsQlF6ZENSaXhIUVVWWVJDeFRRVUZWUVN4VFFVTldkME1zVlVGQlZ5eFRRVUZWZUVJc1JVRkJSMGdzUlVGQlRVTXNSMEZITlVKeVFpeFpRVUZaZFVJc1JVRkJSMGdzUlVGQlRTeFRRVUZWTkVJc1JVRkJWVU1zUjBGRGRrTnVRaXhMUVVGTFRDeEhRVUZMY0VJc1UwRkJVekpETEVWQlFWVTFRaXhIUVVNM1FsVXNTMEZCUzI5Q0xFZEJRVXRFTEVWQlExWnVRaXhMUVVGTFNDeFJRVUZMUkN4SFFVTlVMRmRCUzBRc1NVRktRU3hKUVVOSmRVSXNSVUZFVDI1Q0xFdEJRMHR2UWl4SFFVTmFlRU1zUlVGR1QyOUNMRXRCUlUxSUxFZEJSVlpxUWl4SFFVRlRRU3hGUVVGTmMwSXNSMEZCUjNSQ0xFVkJRVkZCTEVWQlFVMTFRaXhGUVVWMlF5eFBRVTVYU0N4TFFVMUVUQ3hMUVU1RFN5eExRVTFaU0N4SFFVRkxha0lzUlVGQlVVRXNSVUZCVVVFc1JVRkJUVWtzUlVGT2RrTm5RaXhMUVUxblJFd3NSMEZCUjFvc1NVRk5ia05hTEV0QlFVc3NSVUZCY0VJc1VVRkJVbWRFTEVWQlFTdENka01zUlVGQlRVc3NSVUZETjBJc1ZVRkJVbXRETEVWQlFXbERka01zUlVGQlRXZERMRVZCUXpWQ0xFTkJRVU5vUXl4RlFVRk5TeXhGUVVGSFRDeEZRVUZOWjBNc1MwRmtjRUphTEV0QlVVcE1MRkZCUVV0RExFVkJRMGg2UWl4TFFVRkxMRXRCVFdKdlFpeEZRVUZUTEZWQlFWa3NWVUZCVjBFc1IwRkJVU3hIUVVjelEyNUNMRmRCUVZkclFpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDJOdmJHeGxZM1JwYjI0dGMzUnliMjVuTG1wekluMD0iLCJ2YXIgY2xhc3NvZj1yZXF1aXJlKFwiLi9fY2xhc3NvZlwiKSxmcm9tPXJlcXVpcmUoXCIuL19hcnJheS1mcm9tLWl0ZXJhYmxlXCIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKHIpe3JldHVybiBmdW5jdGlvbiB0b0pTT04oKXtpZihjbGFzc29mKHRoaXMpIT1yKXRocm93IFR5cGVFcnJvcihyK1wiI3RvSlNPTiBpc24ndCBnZW5lcmljXCIpO3JldHVybiBmcm9tKHRoaXMpfX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDlqYjJ4c1pXTjBhVzl1TFhSdkxXcHpiMjR1YW5NaVhTd2libUZ0WlhNaU9sc2lZMnhoYzNOdlppSXNJbkpsY1hWcGNtVWlMQ0ptY205dElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SXNJazVCVFVVaUxDSjBiMHBUVDA0aUxDSjBhR2x6SWl3aVZIbHdaVVZ5Y205eUlsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHTkJRMnhDUXl4TFFVRlBSQ3hSUVVGUkxEQkNRVU51UWtVc1QwRkJUME1zVVVGQlZTeFRRVUZWUXl4SFFVTjZRaXhQUVVGUExGTkJRVk5ETEZOQlEyUXNSMEZCU1U0c1VVRkJVVThzVDBGQlUwWXNSVUZCVFN4TlFVRk5SeXhWUVVGVlNDeEZRVUZQTEhsQ1FVTnNSQ3hQUVVGUFNDeExRVUZMU3lJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYMk52Ykd4bFkzUnBiMjR0ZEc4dGFuTnZiaTVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciByZWRlZmluZUFsbD1yZXF1aXJlKFwiLi9fcmVkZWZpbmUtYWxsXCIpLGdldFdlYWs9cmVxdWlyZShcIi4vX21ldGFcIikuZ2V0V2Vhayxhbk9iamVjdD1yZXF1aXJlKFwiLi9fYW4tb2JqZWN0XCIpLGlzT2JqZWN0PXJlcXVpcmUoXCIuL19pcy1vYmplY3RcIiksYW5JbnN0YW5jZT1yZXF1aXJlKFwiLi9fYW4taW5zdGFuY2VcIiksZm9yT2Y9cmVxdWlyZShcIi4vX2Zvci1vZlwiKSxjcmVhdGVBcnJheU1ldGhvZD1yZXF1aXJlKFwiLi9fYXJyYXktbWV0aG9kc1wiKSwkaGFzPXJlcXVpcmUoXCIuL19oYXNcIiksdmFsaWRhdGU9cmVxdWlyZShcIi4vX3ZhbGlkYXRlLWNvbGxlY3Rpb25cIiksYXJyYXlGaW5kPWNyZWF0ZUFycmF5TWV0aG9kKDUpLGFycmF5RmluZEluZGV4PWNyZWF0ZUFycmF5TWV0aG9kKDYpLGlkPTAsdW5jYXVnaHRGcm96ZW5TdG9yZT1mdW5jdGlvbihlKXtyZXR1cm4gZS5fbHx8KGUuX2w9bmV3IFVuY2F1Z2h0RnJvemVuU3RvcmUpfSxVbmNhdWdodEZyb3plblN0b3JlPWZ1bmN0aW9uKCl7dGhpcy5hPVtdfSxmaW5kVW5jYXVnaHRGcm96ZW49ZnVuY3Rpb24oZSx0KXtyZXR1cm4gYXJyYXlGaW5kKGUuYSxmdW5jdGlvbihlKXtyZXR1cm4gZVswXT09PXR9KX07VW5jYXVnaHRGcm96ZW5TdG9yZS5wcm90b3R5cGU9e2dldDpmdW5jdGlvbihlKXt2YXIgdD1maW5kVW5jYXVnaHRGcm96ZW4odGhpcyxlKTtpZih0KXJldHVybiB0WzFdfSxoYXM6ZnVuY3Rpb24oZSl7cmV0dXJuISFmaW5kVW5jYXVnaHRGcm96ZW4odGhpcyxlKX0sc2V0OmZ1bmN0aW9uKGUsdCl7dmFyIHI9ZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsZSk7cj9yWzFdPXQ6dGhpcy5hLnB1c2goW2UsdF0pfSxkZWxldGU6ZnVuY3Rpb24oZSl7dmFyIHQ9YXJyYXlGaW5kSW5kZXgodGhpcy5hLGZ1bmN0aW9uKHQpe3JldHVybiB0WzBdPT09ZX0pO3JldHVybn50JiZ0aGlzLmEuc3BsaWNlKHQsMSksISF+dH19LG1vZHVsZS5leHBvcnRzPXtnZXRDb25zdHJ1Y3RvcjpmdW5jdGlvbihlLHQscixuKXt2YXIgYT1lKGZ1bmN0aW9uKGUsaSl7YW5JbnN0YW5jZShlLGEsdCxcIl9pXCIpLGUuX3Q9dCxlLl9pPWlkKyssZS5fbD12b2lkIDAsbnVsbCE9aSYmZm9yT2YoaSxyLGVbbl0sZSl9KTtyZXR1cm4gcmVkZWZpbmVBbGwoYS5wcm90b3R5cGUse2RlbGV0ZTpmdW5jdGlvbihlKXtpZighaXNPYmplY3QoZSkpcmV0dXJuITE7dmFyIHI9Z2V0V2VhayhlKTtyZXR1cm4hMD09PXI/dW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLHQpKS5kZWxldGUoZSk6ciYmJGhhcyhyLHRoaXMuX2kpJiZkZWxldGUgclt0aGlzLl9pXX0saGFzOmZ1bmN0aW9uIGhhcyhlKXtpZighaXNPYmplY3QoZSkpcmV0dXJuITE7dmFyIHI9Z2V0V2VhayhlKTtyZXR1cm4hMD09PXI/dW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLHQpKS5oYXMoZSk6ciYmJGhhcyhyLHRoaXMuX2kpfX0pLGF9LGRlZjpmdW5jdGlvbihlLHQscil7dmFyIG49Z2V0V2Vhayhhbk9iamVjdCh0KSwhMCk7cmV0dXJuITA9PT1uP3VuY2F1Z2h0RnJvemVuU3RvcmUoZSkuc2V0KHQscik6bltlLl9pXT1yLGV9LHVmc3RvcmU6dW5jYXVnaHRGcm96ZW5TdG9yZX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDlqYjJ4c1pXTjBhVzl1TFhkbFlXc3Vhbk1pWFN3aWJtRnRaWE1pT2xzaWNtVmtaV1pwYm1WQmJHd2lMQ0p5WlhGMWFYSmxJaXdpWjJWMFYyVmhheUlzSW1GdVQySnFaV04wSWl3aWFYTlBZbXBsWTNRaUxDSmhia2x1YzNSaGJtTmxJaXdpWm05eVQyWWlMQ0pqY21WaGRHVkJjbkpoZVUxbGRHaHZaQ0lzSWlSb1lYTWlMQ0oyWVd4cFpHRjBaU0lzSW1GeWNtRjVSbWx1WkNJc0ltRnljbUY1Um1sdVpFbHVaR1Y0SWl3aWFXUWlMQ0oxYm1OaGRXZG9kRVp5YjNwbGJsTjBiM0psSWl3aWRHaGhkQ0lzSWw5c0lpd2lWVzVqWVhWbmFIUkdjbTk2Wlc1VGRHOXlaU0lzSW5Sb2FYTWlMQ0poSWl3aVptbHVaRlZ1WTJGMVoyaDBSbkp2ZW1WdUlpd2ljM1J2Y21VaUxDSnJaWGtpTENKcGRDSXNJbkJ5YjNSdmRIbHdaU0lzSW1kbGRDSXNJbVZ1ZEhKNUlpd2lhR0Z6SWl3aWMyVjBJaXdpZG1Gc2RXVWlMQ0p3ZFhOb0lpd2laR1ZzWlhSbElpd2lhVzVrWlhnaUxDSnpjR3hwWTJVaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2laMlYwUTI5dWMzUnlkV04wYjNJaUxDSjNjbUZ3Y0dWeUlpd2lUa0ZOUlNJc0lrbFRYMDFCVUNJc0lrRkVSRVZTSWl3aVF5SXNJbWwwWlhKaFlteGxJaXdpWDNRaUxDSmZhU0lzSW5WdVpHVm1hVzVsWkNJc0ltUmhkR0VpTENKa1pXWWlMQ0oxWm5OMGIzSmxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVOQkxFbEJRVWxCTEZsQlFXTkRMRkZCUVZFc2JVSkJRM1JDUXl4UlFVRlZSQ3hSUVVGUkxGZEJRVmRETEZGQlF6ZENReXhUUVVGWFJpeFJRVUZSTEdkQ1FVTnVRa2NzVTBGQlYwZ3NVVUZCVVN4blFrRkRia0pKTEZkQlFXRktMRkZCUVZFc2EwSkJRM0pDU3l4TlFVRlJUQ3hSUVVGUkxHRkJRMmhDVFN4clFrRkJiMEpPTEZGQlFWRXNiMEpCUXpWQ1R5eExRVUZQVUN4UlFVRlJMRlZCUTJaUkxGTkJRVmRTTEZGQlFWRXNNRUpCUTI1Q1V5eFZRVUZaU0N4clFrRkJhMElzUjBGRE9VSkpMR1ZCUVdsQ1NpeHJRa0ZCYTBJc1IwRkRia05MTEVkQlFVc3NSVUZIVEVNc2IwSkJRWE5DTEZOQlFWVkRMRWRCUTJ4RExFOUJRVTlCTEVWQlFVdERMRXRCUVU5RUxFVkJRVXRETEVkQlFVc3NTVUZCU1VNc2MwSkJSUzlDUVN4dlFrRkJjMElzVjBGRGVFSkRMRXRCUVV0RExFVkJRVWtzU1VGRlVFTXNiVUpCUVhGQ0xGTkJRVlZETEVWQlFVOURMRWRCUTNoRExFOUJRVTlZTEZWQlFWVlZMRVZCUVUxR0xFVkJRVWNzVTBGQlZVa3NSMEZEYkVNc1QwRkJUMEVzUlVGQlJ5eExRVUZQUkN4TFFVZHlRa3dzYjBKQlFXOUNUeXhWUVVGWkxFTkJRemxDUXl4SlFVRkxMRk5CUVZWSUxFZEJRMklzU1VGQlNVa3NSVUZCVVU0c2JVSkJRVzFDUml4TFFVRk5TU3hIUVVOeVF5eEhRVUZKU1N4RlFVRlBMRTlCUVU5QkxFVkJRVTBzU1VGRk1VSkRMRWxCUVVzc1UwRkJWVXdzUjBGRFlpeFJRVUZUUml4dFFrRkJiVUpHTEV0QlFVMUpMRWxCUlhCRFRTeEpRVUZMTEZOQlFWVk9MRVZCUVV0UExFZEJRMnhDTEVsQlFVbElMRVZCUVZGT0xHMUNRVUZ0UWtZc1MwRkJUVWtzUjBGRGFrTkpMRVZCUVU5QkxFVkJRVTBzUjBGQlMwY3NSVUZEYWtKWUxFdEJRVXRETEVWQlFVVlhMRXRCUVVzc1EwRkJRMUlzUlVGQlMwOHNTMEZGZWtKRkxFOUJRVlVzVTBGQlZWUXNSMEZEYkVJc1NVRkJTVlVzUlVGQlVYQkNMR1ZCUVdWTkxFdEJRVXRETEVWQlFVY3NVMEZCVlVrc1IwRkRNME1zVDBGQlQwRXNSVUZCUnl4TFFVRlBSQ3hKUVVkdVFpeFBRVVJMVlN4SFFVRlBaQ3hMUVVGTFF5eEZRVUZGWXl4UFFVRlBSQ3hGUVVGUExFMUJRM1pDUVN4SlFVbGtSU3hQUVVGUFF5eFJRVUZWTEVOQlEyWkRMR1ZCUVdkQ0xGTkJRVlZETEVWQlFWTkRMRVZCUVUxRExFVkJRVkZETEVkQlF5OURMRWxCUVVsRExFVkJRVWxLTEVWQlFWRXNVMEZCVlhSQ0xFVkJRVTB5UWl4SFFVTTVRbkJETEZkQlFWZFRMRVZCUVUwd1FpeEZRVUZIU0N4RlFVRk5MRTFCUXpGQ2RrSXNSVUZCU3pSQ0xFZEJRVXRNTEVWQlExWjJRaXhGUVVGTE5rSXNSMEZCU3k5Q0xFdEJRMVpGTEVWQlFVdERMRkZCUVVzMlFpeEZRVU5OUVN4TlFVRmFTQ3hIUVVGMVFtNURMRTFCUVUxdFF5eEZRVUZWU0N4RlFVRlJlRUlzUlVGQlMzbENMRWRCUVZGNlFpeExRVzlDYkVVc1QwRnNRa0ZrTEZsQlFWbDNReXhGUVVGRmFrSXNWVUZCVnl4RFFVZDJRazhzVDBGQlZTeFRRVUZWVkN4SFFVTnNRaXhKUVVGTGFrSXNVMEZCVTJsQ0xFZEJRVTBzVDBGQlR5eEZRVU16UWl4SlFVRkpkMElzUlVGQlR6TkRMRkZCUVZGdFFpeEhRVU51UWl4UFFVRmhMRWxCUVZSM1FpeEZRVUZ6UW1oRExHOUNRVUZ2UWtvc1UwRkJVMUVzUzBGQlRXOUNMRWxCUVdVc1QwRkJSV2hDTEVkQlEzWkZkMElzUjBGQlVYSkRMRXRCUVV0eFF5eEZRVUZOTlVJc1MwRkJTekJDTEZsQlFXTkZMRVZCUVVzMVFpeExRVUZMTUVJc1MwRkpla1JxUWl4SlFVRkxMRk5CUVZOQkxFbEJRVWxNTEVkQlEyaENMRWxCUVV0cVFpeFRRVUZUYVVJc1IwRkJUU3hQUVVGUExFVkJRek5DTEVsQlFVbDNRaXhGUVVGUE0wTXNVVUZCVVcxQ0xFZEJRMjVDTEU5QlFXRXNTVUZCVkhkQ0xFVkJRWE5DYUVNc2IwSkJRVzlDU2l4VFFVRlRVU3hMUVVGTmIwSXNTVUZCVDFnc1NVRkJTVXdzUjBGRGFrVjNRaXhIUVVGUmNrTXNTMEZCUzNGRExFVkJRVTAxUWl4TFFVRkxNRUlzVDBGSE5VSklMRWRCUlZSTkxFbEJRVXNzVTBGQlZXaERMRVZCUVUxUExFVkJRVXRQTEVkQlEzaENMRWxCUVVscFFpeEZRVUZQTTBNc1VVRkJVVU1zVTBGQlUydENMRWxCUVUwc1IwRkhiRU1zVDBGR1lTeEpRVUZVZDBJc1JVRkJaV2hETEc5Q1FVRnZRa01zUjBGQlRXRXNTVUZCU1U0c1JVRkJTMDhzUjBGRGFrUnBRaXhGUVVGTEwwSXNSVUZCU3paQ0xFbEJRVTFtTEVWQlEyUmtMRWRCUlZScFF5eFJRVUZUYkVNaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTlqYjJ4c1pXTjBhVzl1TFhkbFlXc3Vhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciBnbG9iYWw9cmVxdWlyZShcIi4vX2dsb2JhbFwiKSwkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIikscmVkZWZpbmU9cmVxdWlyZShcIi4vX3JlZGVmaW5lXCIpLHJlZGVmaW5lQWxsPXJlcXVpcmUoXCIuL19yZWRlZmluZS1hbGxcIiksbWV0YT1yZXF1aXJlKFwiLi9fbWV0YVwiKSxmb3JPZj1yZXF1aXJlKFwiLi9fZm9yLW9mXCIpLGFuSW5zdGFuY2U9cmVxdWlyZShcIi4vX2FuLWluc3RhbmNlXCIpLGlzT2JqZWN0PXJlcXVpcmUoXCIuL19pcy1vYmplY3RcIiksZmFpbHM9cmVxdWlyZShcIi4vX2ZhaWxzXCIpLCRpdGVyRGV0ZWN0PXJlcXVpcmUoXCIuL19pdGVyLWRldGVjdFwiKSxzZXRUb1N0cmluZ1RhZz1yZXF1aXJlKFwiLi9fc2V0LXRvLXN0cmluZy10YWdcIiksaW5oZXJpdElmUmVxdWlyZWQ9cmVxdWlyZShcIi4vX2luaGVyaXQtaWYtcmVxdWlyZWRcIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIsaSxuLG8pe3ZhciBhPWdsb2JhbFtlXSx1PWEscz1uP1wic2V0XCI6XCJhZGRcIixmPXUmJnUucHJvdG90eXBlLGM9e30sbD1mdW5jdGlvbihlKXt2YXIgdD1mW2VdO3JlZGVmaW5lKGYsZSxcImRlbGV0ZVwiPT1lP2Z1bmN0aW9uKGUpe3JldHVybiEobyYmIWlzT2JqZWN0KGUpKSYmdC5jYWxsKHRoaXMsMD09PWU/MDplKX06XCJoYXNcIj09ZT9mdW5jdGlvbiBoYXMoZSl7cmV0dXJuIShvJiYhaXNPYmplY3QoZSkpJiZ0LmNhbGwodGhpcywwPT09ZT8wOmUpfTpcImdldFwiPT1lP2Z1bmN0aW9uIGdldChlKXtyZXR1cm4gbyYmIWlzT2JqZWN0KGUpP3ZvaWQgMDp0LmNhbGwodGhpcywwPT09ZT8wOmUpfTpcImFkZFwiPT1lP2Z1bmN0aW9uIGFkZChlKXtyZXR1cm4gdC5jYWxsKHRoaXMsMD09PWU/MDplKSx0aGlzfTpmdW5jdGlvbiBzZXQoZSxyKXtyZXR1cm4gdC5jYWxsKHRoaXMsMD09PWU/MDplLHIpLHRoaXN9KX07aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgdSYmKG98fGYuZm9yRWFjaCYmIWZhaWxzKGZ1bmN0aW9uKCl7KG5ldyB1KS5lbnRyaWVzKCkubmV4dCgpfSkpKXt2YXIgZD1uZXcgdSxoPWRbc10obz97fTotMCwxKSE9ZCxxPWZhaWxzKGZ1bmN0aW9uKCl7ZC5oYXMoMSl9KSxnPSRpdGVyRGV0ZWN0KGZ1bmN0aW9uKGUpe25ldyB1KGUpfSkscD0hbyYmZmFpbHMoZnVuY3Rpb24oKXtmb3IodmFyIGU9bmV3IHUsdD01O3QtLTspZVtzXSh0LHQpO3JldHVybiFlLmhhcygtMCl9KTtnfHwoKHU9dChmdW5jdGlvbih0LHIpe2FuSW5zdGFuY2UodCx1LGUpO3ZhciBpPWluaGVyaXRJZlJlcXVpcmVkKG5ldyBhLHQsdSk7cmV0dXJuIG51bGwhPXImJmZvck9mKHIsbixpW3NdLGkpLGl9KSkucHJvdG90eXBlPWYsZi5jb25zdHJ1Y3Rvcj11KSwocXx8cCkmJihsKFwiZGVsZXRlXCIpLGwoXCJoYXNcIiksbiYmbChcImdldFwiKSksKHB8fGgpJiZsKHMpLG8mJmYuY2xlYXImJmRlbGV0ZSBmLmNsZWFyfWVsc2UgdT1pLmdldENvbnN0cnVjdG9yKHQsZSxuLHMpLHJlZGVmaW5lQWxsKHUucHJvdG90eXBlLHIpLG1ldGEuTkVFRD0hMDtyZXR1cm4gc2V0VG9TdHJpbmdUYWcodSxlKSxjW2VdPXUsJGV4cG9ydCgkZXhwb3J0LkcrJGV4cG9ydC5XKyRleHBvcnQuRioodSE9YSksYyksb3x8aS5zZXRTdHJvbmcodSxlLG4pLHV9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5amIyeHNaV04wYVc5dUxtcHpJbDBzSW01aGJXVnpJanBiSW1kc2IySmhiQ0lzSW5KbGNYVnBjbVVpTENJa1pYaHdiM0owSWl3aWNtVmtaV1pwYm1VaUxDSnlaV1JsWm1sdVpVRnNiQ0lzSW0xbGRHRWlMQ0ptYjNKUFppSXNJbUZ1U1c1emRHRnVZMlVpTENKcGMwOWlhbVZqZENJc0ltWmhhV3h6SWl3aUpHbDBaWEpFWlhSbFkzUWlMQ0p6WlhSVWIxTjBjbWx1WjFSaFp5SXNJbWx1YUdWeWFYUkpabEpsY1hWcGNtVmtJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSWs1QlRVVWlMQ0ozY21Gd2NHVnlJaXdpYldWMGFHOWtjeUlzSW1OdmJXMXZiaUlzSWtsVFgwMUJVQ0lzSWtsVFgxZEZRVXNpTENKQ1lYTmxJaXdpUXlJc0lrRkVSRVZTSWl3aWNISnZkRzhpTENKd2NtOTBiM1I1Y0dVaUxDSlBJaXdpWm1sNFRXVjBhRzlrSWl3aVMwVlpJaXdpWm00aUxDSmhJaXdpWTJGc2JDSXNJblJvYVhNaUxDSm9ZWE1pTENKblpYUWlMQ0oxYm1SbFptbHVaV1FpTENKaFpHUWlMQ0p6WlhRaUxDSmlJaXdpWm05eVJXRmphQ0lzSW1WdWRISnBaWE1pTENKdVpYaDBJaXdpYVc1emRHRnVZMlVpTENKSVFWTk9WRjlEU0VGSlRrbE9SeUlzSWxSSVVrOVhVMTlQVGw5UVVrbE5TVlJKVmtWVElpd2lRVU5EUlZCVVgwbFVSVkpCUWt4RlV5SXNJbWwwWlhJaUxDSkNWVWRIV1Y5YVJWSlBJaXdpSkdsdWMzUmhibU5sSWl3aWFXNWtaWGdpTENKMFlYSm5aWFFpTENKcGRHVnlZV0pzWlNJc0luUm9ZWFFpTENKamIyNXpkSEoxWTNSdmNpSXNJbU5zWldGeUlpd2laMlYwUTI5dWMzUnlkV04wYjNJaUxDSk9SVVZFSWl3aVJ5SXNJbGNpTENKR0lpd2ljMlYwVTNSeWIyNW5JbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVOQkxFbEJRVWxCTEU5QlFWTkRMRkZCUVZFc1lVRkRha0pETEZGQlFWVkVMRkZCUVZFc1lVRkRiRUpGTEZOQlFWZEdMRkZCUVZFc1pVRkRia0pITEZsQlFXTklMRkZCUVZFc2JVSkJRM1JDU1N4TFFVRlBTaXhSUVVGUkxGZEJRMlpMTEUxQlFWRk1MRkZCUVZFc1lVRkRhRUpOTEZkQlFXRk9MRkZCUVZFc2EwSkJRM0pDVHl4VFFVRlhVQ3hSUVVGUkxHZENRVU51UWxFc1RVRkJVVklzVVVGQlVTeFpRVU5vUWxNc1dVRkJZMVFzVVVGQlVTeHJRa0ZEZEVKVkxHVkJRV2xDVml4UlFVRlJMSGRDUVVONlFsY3NhMEpCUVc5Q1dDeFJRVUZSTERCQ1FVVm9RMWtzVDBGQlQwTXNVVUZCVlN4VFFVRlZReXhGUVVGTlF5eEZRVUZUUXl4RlFVRlRReXhGUVVGUlF5eEZRVUZSUXl4SFFVTnFSU3hKUVVGSlF5eEZRVUZQY2tJc1QwRkJUMlVzUjBGRFpFOHNSVUZCU1VRc1JVRkRTa1VzUlVGQlVVb3NSVUZCVXl4TlFVRlJMRTFCUTNwQ1N5eEZRVUZSUml4SFFVRkxRU3hGUVVGRlJ5eFZRVU5tUXl4RlFVRkpMRWRCUTBwRExFVkJRVmtzVTBGQlZVTXNSMEZEZUVJc1NVRkJTVU1zUlVGQlMwd3NSVUZCVFVrc1IwRkRabnBDTEZOQlFWTnhRaXhGUVVGUFNTeEZRVU5RTEZWQlFWQkJMRVZCUVd0Q0xGTkJRVlZGTEVkQlF6RkNMRkZCUVU5V0xFbEJRVmxhTEZOQlFWTnpRaXhMUVVGaFJDeEZRVUZIUlN4TFFVRkxReXhMUVVGWkxFbEJRVTVHTEVWQlFWVXNSVUZCU1VFc1NVRkROVVFzVDBGQlVFWXNSVUZCWlN4VFFVRlRTeXhKUVVGSlNDeEhRVU01UWl4UlFVRlBWaXhKUVVGWldpeFRRVUZUYzBJc1MwRkJZVVFzUlVGQlIwVXNTMEZCUzBNc1MwRkJXU3hKUVVGT1JpeEZRVUZWTEVWQlFVbEJMRWxCUXpWRUxFOUJRVkJHTEVWQlFXVXNVMEZCVTAwc1NVRkJTVW9zUjBGRE9VSXNUMEZCVDFZc1NVRkJXVm9zVTBGQlUzTkNMRkZCUVV0TExFVkJRVmxPTEVWQlFVZEZMRXRCUVV0RExFdEJRVmtzU1VGQlRrWXNSVUZCVlN4RlFVRkpRU3hKUVVOb1JTeFBRVUZRUml4RlFVRmxMRk5CUVZOUkxFbEJRVWxPTEVkQlFYRkRMRTlCUVdoRFJDeEZRVUZIUlN4TFFVRkxReXhMUVVGWkxFbEJRVTVHTEVWQlFWVXNSVUZCU1VFc1IwRkJWMFVzVFVGRGVFVXNVMEZCVTBzc1NVRkJTVkFzUlVGQlIxRXNSMEZCZDBNc1QwRkJia05VTEVWQlFVZEZMRXRCUVV0RExFdEJRVmtzU1VGQlRrWXNSVUZCVlN4RlFVRkpRU3hGUVVGSFVTeEhRVUZYVGl4UlFVZDJSU3hIUVVGblFpeHRRa0ZCVEZZc1NVRkJjVUpHTEVkQlFWZEpMRVZCUVUxbExGVkJRVms1UWl4TlFVRk5MRmxCUTJwRkxFbEJRVWxoTEVkQlFVbHJRaXhWUVVGVlF5eFZRVTFpTEVOQlEwd3NTVUZCU1VNc1JVRkJWeXhKUVVGSmNFSXNSVUZGWm5GQ0xFVkJRV2xDUkN4RlFVRlRia0lzUjBGQlQwZ3NSVUZCVlN4SlFVRk5MRVZCUVVjc1NVRkJUWE5DTEVWQlJURkVSU3hGUVVGMVFtNURMRTFCUVUwc1YwRkJZMmxETEVWQlFWTlVMRWxCUVVrc1MwRkZlRVJaTEVWQlFXMUNia01zV1VGQldTeFRRVUZWYjBNc1IwRkJVU3hKUVVGSmVFSXNSVUZCUlhkQ0xFdEJSWFpFUXl4SFFVRmpNMElzUjBGQlYxZ3NUVUZCVFN4WFFVbHFReXhKUVVaQkxFbEJRVWwxUXl4RlFVRlpMRWxCUVVreFFpeEZRVU5vUWpKQ0xFVkJRVkVzUlVGRFRFRXNTMEZCVTBRc1JVRkJWWHBDTEVkQlFVOHdRaXhGUVVGUFFTeEhRVU40UXl4UFFVRlJSQ3hGUVVGVlppeExRVUZMTEV0QlJYQkNXU3hMUVVOSWRrSXNSVUZCU1U0c1JVRkJVU3hUUVVGVmEwTXNSVUZCVVVNc1IwRkROVUkxUXl4WFFVRlhNa01zUlVGQlVUVkNMRVZCUVVkUUxFZEJRM1JDTEVsQlFVbHhReXhGUVVGUGVFTXNhMEpCUVd0Q0xFbEJRVWxUTEVWQlFWRTJRaXhGUVVGUk5VSXNSMEZGYWtRc1QwRkVaMEpoTEUxQlFWcG5RaXhIUVVGMVFqZERMRTFCUVUwMlF5eEZRVUZWYUVNc1JVRkJVV2xETEVWQlFVczNRaXhIUVVGUk5rSXNSMEZEZWtSQkxFdEJSVkF6UWl4VlFVRlpSQ3hGUVVOa1FTeEZRVUZOTmtJc1dVRkJZeTlDTEVsQlJXeENjMElzUjBGQmQwSkhMRXRCUXpGQ2NFSXNSVUZCVlN4VlFVTldRU3hGUVVGVkxFOUJRMVpTTEVkQlFWVlJMRVZCUVZVc1UwRkZiRUp2UWl4SFFVRmpTaXhKUVVGblFtaENMRVZCUVZWS0xFZEJSWGhEU0N4SFFVRlhTU3hGUVVGTk9FSXNZMEZCWXpsQ0xFVkJRVTA0UWl4WFFYQkRla05vUXl4RlFVRkpTaXhGUVVGUGNVTXNaVUZCWlhaRExFVkJRVk5FTEVWQlFVMUpMRVZCUVZGSkxFZEJRMnBFYmtJc1dVRkJXV3RDTEVWQlFVVkhMRlZCUVZkU0xFZEJRM3BDV2l4TFFVRkxiVVFzVFVGQlR5eEZRVFJEWkN4UFFWQkJOME1zWlVGQlpWY3NSVUZCUjFBc1IwRkZiRUpYTEVWQlFVVllMRWRCUVZGUExFVkJRMVp3UWl4UlFVRlJRU3hSUVVGUmRVUXNSVUZCU1haRUxGRkJRVkYzUkN4RlFVRkplRVFzVVVGQlVYbEVMRWRCUVV0eVF5eEhRVUZMUkN4SFFVRlBTeXhIUVVWd1JFNHNSMEZCVTBZc1JVRkJUekJETEZWQlFWVjBReXhGUVVGSFVDeEZRVUZOU1N4SFFVVnFRMGNpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOWpiMnhzWldOMGFXOXVMbXB6SW4wPSIsInZhciBjb3JlPW1vZHVsZS5leHBvcnRzPXt2ZXJzaW9uOlwiMi41LjdcIn07XCJudW1iZXJcIj09dHlwZW9mIF9fZSYmKF9fZT1jb3JlKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOWpiM0psTG1weklsMHNJbTVoYldWeklqcGJJbU52Y21VaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2lkbVZ5YzJsdmJpSXNJbDlmWlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1NVRkJTVUVzUzBGQlQwTXNUMEZCVDBNc1VVRkJWU3hEUVVGRlF5eFJRVUZUTEZOQlEzSkNMR2xDUVVGUVF5eE5RVUZwUWtFc1NVRkJUVW9pTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOWpiM0psTG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgJGRlZmluZVByb3BlcnR5PXJlcXVpcmUoXCIuL19vYmplY3QtZHBcIiksY3JlYXRlRGVzYz1yZXF1aXJlKFwiLi9fcHJvcGVydHktZGVzY1wiKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihlLHIsdCl7ciBpbiBlPyRkZWZpbmVQcm9wZXJ0eS5mKGUscixjcmVhdGVEZXNjKDAsdCkpOmVbcl09dH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDlqY21WaGRHVXRjSEp2Y0dWeWRIa3Vhbk1pWFN3aWJtRnRaWE1pT2xzaUpHUmxabWx1WlZCeWIzQmxjblI1SWl3aWNtVnhkV2x5WlNJc0ltTnlaV0YwWlVSbGMyTWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpYjJKcVpXTjBJaXdpYVc1a1pYZ2lMQ0oyWVd4MVpTSXNJbVlpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlEwRXNTVUZCU1VFc1owSkJRV3RDUXl4UlFVRlJMR2RDUVVNeFFrTXNWMEZCWVVRc1VVRkJVU3h2UWtGRmVrSkZMRTlCUVU5RExGRkJRVlVzVTBGQlZVTXNSVUZCVVVNc1JVRkJUME1zUjBGRGNFTkVMRXRCUVZORUxFVkJRVkZNTEdkQ1FVRm5RbEVzUlVGQlJVZ3NSVUZCVVVNc1JVRkJUMG9zVjBGQlZ5eEZRVUZIU3l4SlFVTXZSRVlzUlVGQlQwTXNSMEZCVTBNaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTlqY21WaGRHVXRjSEp2Y0dWeWRIa3Vhbk1pZlE9PSIsInZhciBhRnVuY3Rpb249cmVxdWlyZShcIi4vX2EtZnVuY3Rpb25cIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24obixyLHQpe2lmKGFGdW5jdGlvbihuKSx2b2lkIDA9PT1yKXJldHVybiBuO3N3aXRjaCh0KXtjYXNlIDE6cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBuLmNhbGwocix0KX07Y2FzZSAyOnJldHVybiBmdW5jdGlvbih0LHUpe3JldHVybiBuLmNhbGwocix0LHUpfTtjYXNlIDM6cmV0dXJuIGZ1bmN0aW9uKHQsdSxlKXtyZXR1cm4gbi5jYWxsKHIsdCx1LGUpfX1yZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gbi5hcHBseShyLGFyZ3VtZW50cyl9fTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOWpkSGd1YW5NaVhTd2libUZ0WlhNaU9sc2lZVVoxYm1OMGFXOXVJaXdpY21WeGRXbHlaU0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKbWJpSXNJblJvWVhRaUxDSnNaVzVuZEdnaUxDSjFibVJsWm1sdVpXUWlMQ0poSWl3aVkyRnNiQ0lzSW1JaUxDSmpJaXdpWVhCd2JIa2lMQ0poY21kMWJXVnVkSE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVU5CTEVsQlFVbEJMRlZCUVZsRExGRkJRVkVzYVVKQlEzaENReXhQUVVGUFF5eFJRVUZWTEZOQlFWVkRMRVZCUVVsRExFVkJRVTFETEVkQlJXNURMRWRCUkVGT0xGVkJRVlZKTEZGQlEwZEhMRWxCUVZSR0xFVkJRVzlDTEU5QlFVOUVMRVZCUXk5Q0xFOUJRVkZGTEVkQlEwNHNTMEZCU3l4RlFVRkhMRTlCUVU4c1UwRkJWVVVzUjBGRGRrSXNUMEZCVDBvc1JVRkJSMHNzUzBGQlMwb3NSVUZCVFVjc1NVRkZka0lzUzBGQlN5eEZRVUZITEU5QlFVOHNVMEZCVlVFc1JVRkJSMFVzUjBGRE1VSXNUMEZCVDA0c1JVRkJSMHNzUzBGQlMwb3NSVUZCVFVjc1JVRkJSMFVzU1VGRk1VSXNTMEZCU3l4RlFVRkhMRTlCUVU4c1UwRkJWVVlzUlVGQlIwVXNSVUZCUjBNc1IwRkROMElzVDBGQlQxQXNSVUZCUjBzc1MwRkJTMG9zUlVGQlRVY3NSVUZCUjBVc1JVRkJSME1zU1VGSEwwSXNUMEZCVHl4WFFVTk1MRTlCUVU5UUxFVkJRVWRSTEUxQlFVMVFMRVZCUVUxUklpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmWTNSNExtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIGZhaWxzPXJlcXVpcmUoXCIuL19mYWlsc1wiKSxnZXRUaW1lPURhdGUucHJvdG90eXBlLmdldFRpbWUsJHRvSVNPU3RyaW5nPURhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nLGx6PWZ1bmN0aW9uKHQpe3JldHVybiB0Pjk/dDpcIjBcIit0fTttb2R1bGUuZXhwb3J0cz1mYWlscyhmdW5jdGlvbigpe3JldHVyblwiMDM4NS0wNy0yNVQwNzowNjozOS45OTlaXCIhPSR0b0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKC01ZTEzLTEpKX0pfHwhZmFpbHMoZnVuY3Rpb24oKXskdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZShOYU4pKX0pP2Z1bmN0aW9uIHRvSVNPU3RyaW5nKCl7aWYoIWlzRmluaXRlKGdldFRpbWUuY2FsbCh0aGlzKSkpdGhyb3cgUmFuZ2VFcnJvcihcIkludmFsaWQgdGltZSB2YWx1ZVwiKTt2YXIgdD10aGlzLGU9dC5nZXRVVENGdWxsWWVhcigpLGk9dC5nZXRVVENNaWxsaXNlY29uZHMoKSxuPWU8MD9cIi1cIjplPjk5OTk/XCIrXCI6XCJcIjtyZXR1cm4gbisoXCIwMDAwMFwiK01hdGguYWJzKGUpKS5zbGljZShuPy02Oi00KStcIi1cIitseih0LmdldFVUQ01vbnRoKCkrMSkrXCItXCIrbHoodC5nZXRVVENEYXRlKCkpK1wiVFwiK2x6KHQuZ2V0VVRDSG91cnMoKSkrXCI6XCIrbHoodC5nZXRVVENNaW51dGVzKCkpK1wiOlwiK2x6KHQuZ2V0VVRDU2Vjb25kcygpKStcIi5cIisoaT45OT9pOlwiMFwiK2x6KGkpKStcIlpcIn06JHRvSVNPU3RyaW5nO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5a1lYUmxMWFJ2TFdsemJ5MXpkSEpwYm1jdWFuTWlYU3dpYm1GdFpYTWlPbHNpWm1GcGJITWlMQ0p5WlhGMWFYSmxJaXdpWjJWMFZHbHRaU0lzSWtSaGRHVWlMQ0p3Y205MGIzUjVjR1VpTENJa2RHOUpVMDlUZEhKcGJtY2lMQ0owYjBsVFQxTjBjbWx1WnlJc0lteDZJaXdpYm5WdElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SXNJbU5oYkd3aUxDSk9ZVTRpTENKcGMwWnBibWwwWlNJc0luUm9hWE1pTENKU1lXNW5aVVZ5Y205eUlpd2laQ0lzSW5raUxDSm5aWFJWVkVOR2RXeHNXV1ZoY2lJc0ltMGlMQ0puWlhSVlZFTk5hV3hzYVhObFkyOXVaSE1pTENKeklpd2lUV0YwYUNJc0ltRmljeUlzSW5Oc2FXTmxJaXdpWjJWMFZWUkRUVzl1ZEdnaUxDSm5aWFJWVkVORVlYUmxJaXdpWjJWMFZWUkRTRzkxY25NaUxDSm5aWFJWVkVOTmFXNTFkR1Z6SWl3aVoyVjBWVlJEVTJWamIyNWtjeUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRlFTeEpRVUZKUVN4TlFVRlJReXhSUVVGUkxGbEJRMmhDUXl4UlFVRlZReXhMUVVGTFF5eFZRVUZWUml4UlFVTjZRa2NzWVVGQlpVWXNTMEZCUzBNc1ZVRkJWVVVzV1VGRk9VSkRMRWRCUVVzc1UwRkJWVU1zUjBGRGFrSXNUMEZCVDBFc1JVRkJUU3hGUVVGSlFTeEZRVUZOTEVsQlFVMUJMRWRCU1M5Q1F5eFBRVUZQUXl4UlFVRlhWaXhOUVVGTkxGZEJRM1JDTEUxQlFXbEVMRFJDUVVFeFEwc3NZVUZCWVUwc1MwRkJTeXhKUVVGSlVpeE5RVUZOTEV0QlFVOHNVVUZEY2tOSUxFMUJRVTBzVjBGRFdFc3NZVUZCWVUwc1MwRkJTeXhKUVVGSlVpeExRVUZMVXl4UlFVTjJRaXhUUVVGVFRpeGpRVU5pTEVsQlFVdFBMRk5CUVZOWUxGRkJRVkZUTEV0QlFVdEhMRTlCUVZFc1RVRkJUVU1zVjBGQlZ5eHpRa0ZEY0VRc1NVRkJTVU1zUlVGQlNVWXNTMEZEU2tjc1JVRkJTVVFzUlVGQlJVVXNhVUpCUTA1RExFVkJRVWxJTEVWQlFVVkpMSEZDUVVOT1F5eEZRVUZKU2l4RlFVRkpMRVZCUVVrc1NVRkJUVUVzUlVGQlNTeExRVUZQTEVsQlFVMHNSMEZEZGtNc1QwRkJUMGtzUjBGQlN5eFJRVUZWUXl4TFFVRkxReXhKUVVGSlRpeEpRVUZKVHl4TlFVRk5TQ3hIUVVGTExFZEJRVXNzUjBGRGFrUXNTVUZCVFdRc1IwRkJSMU1zUlVGQlJWTXNZMEZCWjBJc1IwRkJTeXhKUVVGTmJFSXNSMEZCUjFNc1JVRkJSVlVzWTBGRE0wTXNTVUZCVFc1Q0xFZEJRVWRUTEVWQlFVVlhMR1ZCUVdsQ0xFbEJRVTF3UWl4SFFVRkhVeXhGUVVGRldTeHBRa0ZEZGtNc1NVRkJUWEpDTEVkQlFVZFRMRVZCUVVWaExHbENRVUZ0UWl4TFFVRlBWaXhGUVVGSkxFZEJRVXRCTEVWQlFVa3NTVUZCVFZvc1IwRkJSMWtzU1VGQlRTeExRVU5xUldRaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTlrWVhSbExYUnZMV2x6YnkxemRISnBibWN1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgYW5PYmplY3Q9cmVxdWlyZShcIi4vX2FuLW9iamVjdFwiKSx0b1ByaW1pdGl2ZT1yZXF1aXJlKFwiLi9fdG8tcHJpbWl0aXZlXCIpLE5VTUJFUj1cIm51bWJlclwiO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKHIpe2lmKFwic3RyaW5nXCIhPT1yJiZyIT09TlVNQkVSJiZcImRlZmF1bHRcIiE9PXIpdGhyb3cgVHlwZUVycm9yKFwiSW5jb3JyZWN0IGhpbnRcIik7cmV0dXJuIHRvUHJpbWl0aXZlKGFuT2JqZWN0KHRoaXMpLHIhPU5VTUJFUil9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5a1lYUmxMWFJ2TFhCeWFXMXBkR2wyWlM1cWN5SmRMQ0p1WVcxbGN5STZXeUpoYms5aWFtVmpkQ0lzSW5KbGNYVnBjbVVpTENKMGIxQnlhVzFwZEdsMlpTSXNJazVWVFVKRlVpSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0pvYVc1MElpd2lWSGx3WlVWeWNtOXlJaXdpZEdocGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZEUVN4SlFVRkpRU3hUUVVGWFF5eFJRVUZSTEdkQ1FVTnVRa01zV1VGQlkwUXNVVUZCVVN4dFFrRkRkRUpGTEU5QlFWTXNVMEZGWWtNc1QwRkJUME1zVVVGQlZTeFRRVUZWUXl4SFFVTjZRaXhIUVVGaExGZEJRVlJCTEVkQlFYRkNRU3hKUVVGVFNDeFJRVUZ0UWl4WlFVRlVSeXhGUVVGdlFpeE5RVUZOUXl4VlFVRlZMR3RDUVVOb1JpeFBRVUZQVEN4WlFVRlpSaXhUUVVGVFVTeE5RVUZQUml4SFFVRlJTQ0lzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgyUmhkR1V0ZEc4dGNISnBiV2wwYVhabExtcHpJbjA9IiwibW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24obyl7aWYobnVsbD09byl0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIrbyk7cmV0dXJuIG99O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5a1pXWnBibVZrTG1weklsMHNJbTVoYldWeklqcGJJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0pwZENJc0luVnVaR1ZtYVc1bFpDSXNJbFI1Y0dWRmNuSnZjaUpkTENKdFlYQndhVzVuY3lJNklrRkJRMEZCTEU5QlFVOURMRkZCUVZVc1UwRkJWVU1zUjBGRGVrSXNSMEZCVlVNc1RVRkJUa1FzUlVGQmFVSXNUVUZCVFVVc1ZVRkJWU3g1UWtGQk1rSkdMRWRCUTJoRkxFOUJRVTlCSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZaR1ZtYVc1bFpDNXFjeUo5IiwibW9kdWxlLmV4cG9ydHM9IXJlcXVpcmUoXCIuL19mYWlsc1wiKShmdW5jdGlvbigpe3JldHVybiA3IT1PYmplY3QuZGVmaW5lUHJvcGVydHkoe30sXCJhXCIse2dldDpmdW5jdGlvbigpe3JldHVybiA3fX0pLmF9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOWtaWE5qY21sd2RHOXljeTVxY3lKZExDSnVZVzFsY3lJNld5SnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2ljbVZ4ZFdseVpTSXNJazlpYW1WamRDSXNJbVJsWm1sdVpWQnliM0JsY25SNUlpd2laMlYwSWl3aVlTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwRkJMRTlCUVU5RExGTkJRVmRETEZGQlFWRXNWMEZCVWtFc1EwRkJiMElzVjBGRGNFTXNUMEZCSzBVc1IwRkJlRVZETEU5QlFVOURMR1ZCUVdVc1IwRkJTU3hKUVVGTExFTkJRVVZETEVsQlFVc3NWMEZCWXl4UFFVRlBMRXRCUVZGRElpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmWkdWelkzSnBjSFJ2Y25NdWFuTWlmUT09IiwidmFyIGlzT2JqZWN0PXJlcXVpcmUoXCIuL19pcy1vYmplY3RcIiksZG9jdW1lbnQ9cmVxdWlyZShcIi4vX2dsb2JhbFwiKS5kb2N1bWVudCxpcz1pc09iamVjdChkb2N1bWVudCkmJmlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBpcz9kb2N1bWVudC5jcmVhdGVFbGVtZW50KGUpOnt9fTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOWtiMjB0WTNKbFlYUmxMbXB6SWwwc0ltNWhiV1Z6SWpwYkltbHpUMkpxWldOMElpd2ljbVZ4ZFdseVpTSXNJbVJ2WTNWdFpXNTBJaXdpYVhNaUxDSmpjbVZoZEdWRmJHVnRaVzUwSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0ltbDBJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hKUVVGSlFTeFRRVUZYUXl4UlFVRlJMR2RDUVVOdVFrTXNVMEZCVjBRc1VVRkJVU3hoUVVGaFF5eFRRVVZvUTBNc1IwRkJTMGdzVTBGQlUwVXNWMEZCWVVZc1UwRkJVMFVzVTBGQlUwVXNaVUZEYWtSRExFOUJRVTlETEZGQlFWVXNVMEZCVlVNc1IwRkRla0lzVDBGQlQwb3NSMEZCUzBRc1UwRkJVMFVzWTBGQlkwY3NSMEZCVFNJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYMlJ2YlMxamNtVmhkR1V1YW5NaWZRPT0iLCJtb2R1bGUuZXhwb3J0cz1cImNvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZlwiLnNwbGl0KFwiLFwiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOWxiblZ0TFdKMVp5MXJaWGx6TG1weklsMHNJbTVoYldWeklqcGJJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0p6Y0d4cGRDSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwRkJMRTlCUVU5RExGRkJRVlVzWjBkQlJXWkRMRTFCUVUwaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTlsYm5WdExXSjFaeTFyWlhsekxtcHpJbjA9IiwidmFyIGdldEtleXM9cmVxdWlyZShcIi4vX29iamVjdC1rZXlzXCIpLGdPUFM9cmVxdWlyZShcIi4vX29iamVjdC1nb3BzXCIpLHBJRT1yZXF1aXJlKFwiLi9fb2JqZWN0LXBpZVwiKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgcj1nZXRLZXlzKGUpLHQ9Z09QUy5mO2lmKHQpZm9yKHZhciBvLHU9dChlKSxnPXBJRS5mLGk9MDt1Lmxlbmd0aD5pOylnLmNhbGwoZSxvPXVbaSsrXSkmJnIucHVzaChvKTtyZXR1cm4gcn07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDlsYm5WdExXdGxlWE11YW5NaVhTd2libUZ0WlhNaU9sc2laMlYwUzJWNWN5SXNJbkpsY1hWcGNtVWlMQ0puVDFCVElpd2ljRWxGSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0ltbDBJaXdpY21WemRXeDBJaXdpWjJWMFUzbHRZbTlzY3lJc0ltWWlMQ0pyWlhraUxDSnplVzFpYjJ4eklpd2lhWE5GYm5WdElpd2lhU0lzSW14bGJtZDBhQ0lzSW1OaGJHd2lMQ0p3ZFhOb0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHdENRVU5zUWtNc1MwRkJUMFFzVVVGQlVTeHJRa0ZEWmtVc1NVRkJUVVlzVVVGQlVTeHBRa0ZEYkVKSExFOUJRVTlETEZGQlFWVXNVMEZCVlVNc1IwRkRla0lzU1VGQlNVTXNSVUZCVTFBc1VVRkJVVTBzUjBGRGFrSkZMRVZCUVdGT0xFdEJRVXRQTEVWQlEzUkNMRWRCUVVsRUxFVkJTMFlzU1VGS1FTeEpRVWRKUlN4RlFVaEJReXhGUVVGVlNDeEZRVUZYUml4SFFVTnlRazBzUlVGQlUxUXNTVUZCU1Uwc1JVRkRZa2tzUlVGQlNTeEZRVVZFUml4RlFVRlJSeXhQUVVGVFJDeEhRVUZQUkN4RlFVRlBSeXhMUVVGTFZDeEZRVUZKU1N4RlFVRk5ReXhGUVVGUlJTeFBRVUZQVGl4RlFVRlBVeXhMUVVGTFRpeEhRVU5vUml4UFFVRlBTQ0lzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgyVnVkVzB0YTJWNWN5NXFjeUo5IiwidmFyIGdsb2JhbD1yZXF1aXJlKFwiLi9fZ2xvYmFsXCIpLGNvcmU9cmVxdWlyZShcIi4vX2NvcmVcIiksaGlkZT1yZXF1aXJlKFwiLi9faGlkZVwiKSxyZWRlZmluZT1yZXF1aXJlKFwiLi9fcmVkZWZpbmVcIiksY3R4PXJlcXVpcmUoXCIuL19jdHhcIiksUFJPVE9UWVBFPVwicHJvdG90eXBlXCIsJGV4cG9ydD1mdW5jdGlvbihlLG8scil7dmFyIHQseCxwLGwsaT1lJiRleHBvcnQuRiwkPWUmJGV4cG9ydC5HLGM9ZSYkZXhwb3J0LlMsYT1lJiRleHBvcnQuUCxuPWUmJGV4cG9ydC5CLFA9JD9nbG9iYWw6Yz9nbG9iYWxbb118fChnbG9iYWxbb109e30pOihnbG9iYWxbb118fHt9KVtQUk9UT1RZUEVdLHU9JD9jb3JlOmNvcmVbb118fChjb3JlW29dPXt9KSxiPXVbUFJPVE9UWVBFXXx8KHVbUFJPVE9UWVBFXT17fSk7Zm9yKHQgaW4gJCYmKHI9bykscilwPSgoeD0haSYmUCYmdm9pZCAwIT09UFt0XSk/UDpyKVt0XSxsPW4mJng/Y3R4KHAsZ2xvYmFsKTphJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBwP2N0eChGdW5jdGlvbi5jYWxsLHApOnAsUCYmcmVkZWZpbmUoUCx0LHAsZSYkZXhwb3J0LlUpLHVbdF0hPXAmJmhpZGUodSx0LGwpLGEmJmJbdF0hPXAmJihiW3RdPXApfTtnbG9iYWwuY29yZT1jb3JlLCRleHBvcnQuRj0xLCRleHBvcnQuRz0yLCRleHBvcnQuUz00LCRleHBvcnQuUD04LCRleHBvcnQuQj0xNiwkZXhwb3J0Llc9MzIsJGV4cG9ydC5VPTY0LCRleHBvcnQuUj0xMjgsbW9kdWxlLmV4cG9ydHM9JGV4cG9ydDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOWxlSEJ2Y25RdWFuTWlYU3dpYm1GdFpYTWlPbHNpWjJ4dlltRnNJaXdpY21WeGRXbHlaU0lzSW1OdmNtVWlMQ0pvYVdSbElpd2ljbVZrWldacGJtVWlMQ0pqZEhnaUxDSlFVazlVVDFSWlVFVWlMQ0lrWlhod2IzSjBJaXdpZEhsd1pTSXNJbTVoYldVaUxDSnpiM1Z5WTJVaUxDSnJaWGtpTENKdmQyNGlMQ0p2ZFhRaUxDSmxlSEFpTENKSlUxOUdUMUpEUlVRaUxDSkdJaXdpU1ZOZlIweFBRa0ZNSWl3aVJ5SXNJa2xUWDFOVVFWUkpReUlzSWxNaUxDSkpVMTlRVWs5VVR5SXNJbEFpTENKSlUxOUNTVTVFSWl3aVFpSXNJblJoY21kbGRDSXNJbVY0Y0c5eWRITWlMQ0psZUhCUWNtOTBieUlzSW5WdVpHVm1hVzVsWkNJc0lrWjFibU4wYVc5dUlpd2lZMkZzYkNJc0lsVWlMQ0pYSWl3aVVpSXNJbTF2WkhWc1pTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNTVUZCU1VFc1QwRkJVME1zVVVGQlVTeGhRVU5xUWtNc1MwRkJUMFFzVVVGQlVTeFhRVU5tUlN4TFFVRlBSaXhSUVVGUkxGZEJRMlpITEZOQlFWZElMRkZCUVZFc1pVRkRia0pKTEVsQlFVMUtMRkZCUVZFc1ZVRkRaRXNzVlVGQldTeFpRVVZhUXl4UlFVRlZMRk5CUVZWRExFVkJRVTFETEVWQlFVMURMRWRCUTJ4RExFbEJVVWxETEVWQlFVdERMRVZCUVV0RExFVkJRVXRETEVWQlVtWkRMRVZCUVZsUUxFVkJRVTlFTEZGQlFWRlRMRVZCUXpOQ1F5eEZRVUZaVkN4RlFVRlBSQ3hSUVVGUlZ5eEZRVU16UWtNc1JVRkJXVmdzUlVGQlQwUXNVVUZCVVdFc1JVRkRNMEpETEVWQlFWZGlMRVZCUVU5RUxGRkJRVkZsTEVWQlF6RkNReXhGUVVGVlppeEZRVUZQUkN4UlFVRlJhVUlzUlVGRGVrSkRMRVZCUVZOU0xFVkJRVmxxUWl4UFFVRlRiVUlzUlVGQldXNUNMRTlCUVU5VExFdEJRVlZVTEU5QlFVOVRMRWRCUVZFc1MwRkJUMVFzVDBGQlQxTXNTVUZCVXl4SlFVRkpTQ3hYUVVOeVIyOUNMRVZCUVZWVUxFVkJRVmxtTEV0QlFVOUJMRXRCUVV0UExFdEJRVlZRTEV0QlFVdFBMRWRCUVZFc1NVRkRla1JyUWl4RlFVRlhSQ3hGUVVGUmNFSXNZVUZCWlc5Q0xFVkJRVkZ3UWl4WFFVRmhMRWxCUnpORUxFbEJRVXRMTEV0QlJFUk5MRWxCUVZkUUxFVkJRVk5FTEVkQlExcERMRVZCU1ZaSExFbEJSa0ZFTEVkQlFVOUhMRWRCUVdGVkxGRkJRVEJDUnl4SlFVRm9Ra2dzUlVGQlQyUXNTVUZGZUVKakxFVkJRVk5tTEVkQlFWRkRMRWRCUlRsQ1J5eEZRVUZOVXl4SFFVRlhXQ3hGUVVGTlVDeEpRVUZKVVN4RlFVRkxZaXhSUVVGVmNVSXNSMEZCTUVJc2JVSkJRVkJTTEVWQlFXOUNVaXhKUVVGSmQwSXNVMEZCVTBNc1MwRkJUV3BDTEVkQlFVOUJMRVZCUlhaSFdTeEhRVUZSY2tJc1UwRkJVM0ZDTEVWQlFWRmtMRVZCUVV0RkxFVkJRVXRNTEVWQlFVOUVMRkZCUVZGM1FpeEhRVVZzUkV3c1JVRkJVV1lzU1VGQlVVVXNSMEZCUzFZc1MwRkJTM1ZDTEVWQlFWTm1MRVZCUVV0SExFZEJRM2hEVHl4SFFVRlpUU3hGUVVGVGFFSXNTVUZCVVVVc1NVRkJTMk1zUlVGQlUyaENMRWRCUVU5RkxFbEJSekZFWWl4UFFVRlBSU3hMUVVGUFFTeExRVVZrU3l4UlFVRlJVeXhGUVVGSkxFVkJRMXBVTEZGQlFWRlhMRVZCUVVrc1JVRkRXbGdzVVVGQlVXRXNSVUZCU1N4RlFVTmFZaXhSUVVGUlpTeEZRVUZKTEVWQlExcG1MRkZCUVZGcFFpeEZRVUZKTEVkQlExcHFRaXhSUVVGUmVVSXNSVUZCU1N4SFFVTmFla0lzVVVGQlVYZENMRVZCUVVrc1IwRkRXbmhDTEZGQlFWRXdRaXhGUVVGSkxFbEJRMXBETEU5QlFVOVNMRkZCUVZWdVFpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDJWNGNHOXlkQzVxY3lKOSIsInZhciBNQVRDSD1yZXF1aXJlKFwiLi9fd2tzXCIpKFwibWF0Y2hcIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24ocil7dmFyIHQ9Ly4vO3RyeXtcIi8uL1wiW3JdKHQpfWNhdGNoKGMpe3RyeXtyZXR1cm4gdFtNQVRDSF09ITEsIVwiLy4vXCJbcl0odCl9Y2F0Y2gocil7fX1yZXR1cm4hMH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDltWVdsc2N5MXBjeTF5WldkbGVIQXVhbk1pWFN3aWJtRnRaWE1pT2xzaVRVRlVRMGdpTENKeVpYRjFhWEpsSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0lrdEZXU0lzSW5KbElpd2laU0lzSW1ZaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFbEJRVWxCTEUxQlFWRkRMRkZCUVZFc1UwRkJVa0VzUTBGQmEwSXNVMEZET1VKRExFOUJRVTlETEZGQlFWVXNVMEZCVlVNc1IwRkRla0lzU1VGQlNVTXNSVUZCU3l4SlFVTlVMRWxCUTBVc1RVRkJUVVFzUjBGQlMwTXNSMEZEV0N4TlFVRlBReXhIUVVOUUxFbEJSVVVzVDBGRVFVUXNSVUZCUjB3c1VVRkJVeXhIUVVOS0xFMUJRVTFKTEVkQlFVdERMRWRCUTI1Q0xFMUJRVTlGTEV0QlExUXNUMEZCVHlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYMlpoYVd4ekxXbHpMWEpsWjJWNGNDNXFjeUo5IiwibW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24ocil7dHJ5e3JldHVybiEhcigpfWNhdGNoKHIpe3JldHVybiEwfX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDltWVdsc2N5NXFjeUpkTENKdVlXMWxjeUk2V3lKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aVpYaGxZeUlzSW1VaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQlFTeFBRVUZQUXl4UlFVRlZMRk5CUVZWRExFZEJRM3BDTEVsQlEwVXNVVUZCVTBFc1NVRkRWQ3hOUVVGUFF5eEhRVU5RTEU5QlFVOGlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5bVlXbHNjeTVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBoaWRlPXJlcXVpcmUoXCIuL19oaWRlXCIpLHJlZGVmaW5lPXJlcXVpcmUoXCIuL19yZWRlZmluZVwiKSxmYWlscz1yZXF1aXJlKFwiLi9fZmFpbHNcIiksZGVmaW5lZD1yZXF1aXJlKFwiLi9fZGVmaW5lZFwiKSx3a3M9cmVxdWlyZShcIi4vX3drc1wiKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihlLHIsaSl7dmFyIG49d2tzKGUpLHQ9aShkZWZpbmVkLG4sXCJcIltlXSksdT10WzBdLGY9dFsxXTtmYWlscyhmdW5jdGlvbigpe3ZhciByPXt9O3JldHVybiByW25dPWZ1bmN0aW9uKCl7cmV0dXJuIDd9LDchPVwiXCJbZV0ocil9KSYmKHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsZSx1KSxoaWRlKFJlZ0V4cC5wcm90b3R5cGUsbiwyPT1yP2Z1bmN0aW9uKGUscil7cmV0dXJuIGYuY2FsbChlLHRoaXMscil9OmZ1bmN0aW9uKGUpe3JldHVybiBmLmNhbGwoZSx0aGlzKX0pKX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDltYVhndGNtVXRkMnR6TG1weklsMHNJbTVoYldWeklqcGJJbWhwWkdVaUxDSnlaWEYxYVhKbElpd2ljbVZrWldacGJtVWlMQ0ptWVdsc2N5SXNJbVJsWm1sdVpXUWlMQ0ozYTNNaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2lTMFZaSWl3aWJHVnVaM1JvSWl3aVpYaGxZeUlzSWxOWlRVSlBUQ0lzSW1adWN5SXNJbk4wY21adUlpd2ljbmhtYmlJc0lrOGlMQ0pUZEhKcGJtY2lMQ0p3Y205MGIzUjVjR1VpTENKU1pXZEZlSEFpTENKemRISnBibWNpTENKaGNtY2lMQ0pqWVd4c0lpd2lkR2hwY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkRRU3hKUVVGSlFTeExRVUZQUXl4UlFVRlJMRmRCUTJaRExGTkJRVmRFTEZGQlFWRXNaVUZEYmtKRkxFMUJRVkZHTEZGQlFWRXNXVUZEYUVKSExGRkJRVlZJTEZGQlFWRXNZMEZEYkVKSkxFbEJRVTFLTEZGQlFWRXNWVUZGYkVKTExFOUJRVTlETEZGQlFWVXNVMEZCVlVNc1JVRkJTME1zUlVGQlVVTXNSMEZEZEVNc1NVRkJTVU1zUlVGQlUwNHNTVUZCU1Vjc1IwRkRZa2tzUlVGQlRVWXNSVUZCUzA0c1VVRkJVMDhzUlVGQlVTeEhRVUZIU0N4SlFVTXZRa3NzUlVGQlVVUXNSVUZCU1N4SFFVTmFSU3hGUVVGUFJpeEZRVUZKTEVkQlExaFVMRTFCUVUwc1YwRkRVaXhKUVVGSldTeEZRVUZKTEVkQlJWSXNUMEZFUVVFc1JVRkJSVW9zUjBGQlZTeFhRVUZqTEU5QlFVOHNSMEZEV2l4SFFVRmtMRWRCUVVkSUxFZEJRVXRQTEU5QlJXWmlMRk5CUVZOakxFOUJRVTlETEZWQlFWZFVMRVZCUVV0TExFZEJRMmhEWWl4TFFVRkxhMElzVDBGQlQwUXNWVUZCVjA0c1JVRkJhMElzUjBGQlZrWXNSVUZITTBJc1UwRkJWVlVzUlVGQlVVTXNSMEZCVHl4UFFVRlBUaXhGUVVGTFR5eExRVUZMUml4RlFVRlJSeXhMUVVGTlJpeEpRVWQ0UkN4VFFVRlZSQ3hIUVVGVkxFOUJRVTlNTEVWQlFVdFBMRXRCUVV0R0xFVkJRVkZISWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZabWw0TFhKbExYZHJjeTVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBhbk9iamVjdD1yZXF1aXJlKFwiLi9fYW4tb2JqZWN0XCIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKCl7dmFyIGU9YW5PYmplY3QodGhpcyksdD1cIlwiO3JldHVybiBlLmdsb2JhbCYmKHQrPVwiZ1wiKSxlLmlnbm9yZUNhc2UmJih0Kz1cImlcIiksZS5tdWx0aWxpbmUmJih0Kz1cIm1cIiksZS51bmljb2RlJiYodCs9XCJ1XCIpLGUuc3RpY2t5JiYodCs9XCJ5XCIpLHR9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5bWJHRm5jeTVxY3lKZExDSnVZVzFsY3lJNld5SmhiazlpYW1WamRDSXNJbkpsY1hWcGNtVWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpZEdoaGRDSXNJblJvYVhNaUxDSnlaWE4xYkhRaUxDSm5iRzlpWVd3aUxDSnBaMjV2Y21WRFlYTmxJaXdpYlhWc2RHbHNhVzVsSWl3aWRXNXBZMjlrWlNJc0luTjBhV05yZVNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkZRU3hKUVVGSlFTeFRRVUZYUXl4UlFVRlJMR2RDUVVOMlFrTXNUMEZCVDBNc1VVRkJWU3hYUVVObUxFbEJRVWxETEVWQlFVOUtMRk5CUVZOTExFMUJRMmhDUXl4RlFVRlRMRWRCVFdJc1QwRk1TVVlzUlVGQlMwY3NVMEZCVVVRc1IwRkJWU3hMUVVOMlFrWXNSVUZCUzBrc1lVRkJXVVlzUjBGQlZTeExRVU16UWtZc1JVRkJTMHNzV1VGQlYwZ3NSMEZCVlN4TFFVTXhRa1lzUlVGQlMwMHNWVUZCVTBvc1IwRkJWU3hMUVVONFFrWXNSVUZCUzA4c1UwRkJVVXdzUjBGQlZTeExRVU53UWtFaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTltYkdGbmN5NXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIGlzQXJyYXk9cmVxdWlyZShcIi4vX2lzLWFycmF5XCIpLGlzT2JqZWN0PXJlcXVpcmUoXCIuL19pcy1vYmplY3RcIiksdG9MZW5ndGg9cmVxdWlyZShcIi4vX3RvLWxlbmd0aFwiKSxjdHg9cmVxdWlyZShcIi4vX2N0eFwiKSxJU19DT05DQVRfU1BSRUFEQUJMRT1yZXF1aXJlKFwiLi9fd2tzXCIpKFwiaXNDb25jYXRTcHJlYWRhYmxlXCIpO2Z1bmN0aW9uIGZsYXR0ZW5JbnRvQXJyYXkocixlLHQsaSxhLG4sbyxzKXtmb3IodmFyIEEsYyx1PWEsXz0wLGY9ISFvJiZjdHgobyxzLDMpO188aTspe2lmKF8gaW4gdCl7aWYoQT1mP2YodFtfXSxfLGUpOnRbX10sYz0hMSxpc09iamVjdChBKSYmKGM9dm9pZCAwIT09KGM9QVtJU19DT05DQVRfU1BSRUFEQUJMRV0pPyEhYzppc0FycmF5KEEpKSxjJiZuPjApdT1mbGF0dGVuSW50b0FycmF5KHIsZSxBLHRvTGVuZ3RoKEEubGVuZ3RoKSx1LG4tMSktMTtlbHNle2lmKHU+PTkwMDcxOTkyNTQ3NDA5OTEpdGhyb3cgVHlwZUVycm9yKCk7clt1XT1BfXUrK31fKyt9cmV0dXJuIHV9bW9kdWxlLmV4cG9ydHM9ZmxhdHRlbkludG9BcnJheTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOW1iR0YwZEdWdUxXbHVkRzh0WVhKeVlYa3Vhbk1pWFN3aWJtRnRaWE1pT2xzaWFYTkJjbkpoZVNJc0luSmxjWFZwY21VaUxDSnBjMDlpYW1WamRDSXNJblJ2VEdWdVozUm9JaXdpWTNSNElpd2lTVk5mUTA5T1EwRlVYMU5RVWtWQlJFRkNURVVpTENKbWJHRjBkR1Z1U1c1MGIwRnljbUY1SWl3aWRHRnlaMlYwSWl3aWIzSnBaMmx1WVd3aUxDSnpiM1Z5WTJVaUxDSnpiM1Z5WTJWTVpXNGlMQ0p6ZEdGeWRDSXNJbVJsY0hSb0lpd2liV0Z3Y0dWeUlpd2lkR2hwYzBGeVp5SXNJbVZzWlcxbGJuUWlMQ0p6Y0hKbFlXUmhZbXhsSWl3aWRHRnlaMlYwU1c1a1pYZ2lMQ0p6YjNWeVkyVkpibVJsZUNJc0ltMWhjRVp1SWl3aWRXNWtaV1pwYm1Wa0lpd2liR1Z1WjNSb0lpd2lWSGx3WlVWeWNtOXlJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRlFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHVkJRMnhDUXl4VFFVRlhSQ3hSUVVGUkxHZENRVU51UWtVc1UwRkJWMFlzVVVGQlVTeG5Ra0ZEYmtKSExFbEJRVTFJTEZGQlFWRXNWVUZEWkVrc2NVSkJRWFZDU2l4UlFVRlJMRk5CUVZKQkxFTkJRV3RDTEhOQ1FVVTNReXhUUVVGVFN5eHBRa0ZCYVVKRExFVkJRVkZETEVWQlFWVkRMRVZCUVZGRExFVkJRVmRETEVWQlFVOURMRVZCUVU5RExFVkJRVkZETEVkQlRXNUdMRWxCVEVFc1NVRkhTVU1zUlVGQlUwTXNSVUZJVkVNc1JVRkJZMDRzUlVGRFpFOHNSVUZCWXl4RlFVTmtReXhKUVVGUlRpeEhRVUZUVkN4SlFVRkpVeXhGUVVGUlF5eEZRVUZUTEVkQlIyNURTU3hGUVVGalVpeEhRVUZYTEVOQlF6bENMRWRCUVVsUkxFdEJRV1ZVTEVWQlFWRXNRMEZUZWtJc1IwRlNRVTBzUlVGQlZVa3NSVUZCVVVFc1JVRkJUVllzUlVGQlQxTXNSMEZCWTBFc1JVRkJZVllzUjBGQldVTXNSVUZCVDFNc1IwRkZOMFZHTEVkQlFXRXNSVUZEVkdRc1UwRkJVMkVzUzBGRldFTXNUMEZCTkVKSkxFdEJSRFZDU2l4RlFVRmhSQ3hGUVVGUlZpeDVRa0ZEY1VKWExFVkJRV0ZvUWl4UlFVRlJaU3hKUVVjM1JFTXNSMEZCWTBvc1JVRkJVU3hGUVVONFFrc3NSVUZCWTFnc2FVSkJRV2xDUXl4RlFVRlJReXhGUVVGVlR5eEZRVUZUV2l4VFFVRlRXU3hGUVVGUlRTeFJRVUZUU2l4RlFVRmhUQ3hGUVVGUkxFZEJRVXNzVFVGRGVrY3NRMEZEVEN4SFFVRkpTeXhIUVVGbExHbENRVUZyUWl4TlFVRk5TeXhaUVVNelEyWXNSVUZCVDFVc1IwRkJaVVlzUlVGSGVFSkZMRWxCUlVaRExFbEJSVVlzVDBGQlQwUXNSVUZIVkUwc1QwRkJUME1zVVVGQlZXeENJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZlpteGhkSFJsYmkxcGJuUnZMV0Z5Y21GNUxtcHpJbjA9IiwidmFyIGN0eD1yZXF1aXJlKFwiLi9fY3R4XCIpLGNhbGw9cmVxdWlyZShcIi4vX2l0ZXItY2FsbFwiKSxpc0FycmF5SXRlcj1yZXF1aXJlKFwiLi9faXMtYXJyYXktaXRlclwiKSxhbk9iamVjdD1yZXF1aXJlKFwiLi9fYW4tb2JqZWN0XCIpLHRvTGVuZ3RoPXJlcXVpcmUoXCIuL190by1sZW5ndGhcIiksZ2V0SXRlckZuPXJlcXVpcmUoXCIuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZFwiKSxCUkVBSz17fSxSRVRVUk49e30sZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihlLHIsdCxvLGkpe3ZhciBuLGEsUixjLGw9aT9mdW5jdGlvbigpe3JldHVybiBlfTpnZXRJdGVyRm4oZSksdT1jdHgodCxvLHI/MjoxKSxFPTA7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgbCl0aHJvdyBUeXBlRXJyb3IoZStcIiBpcyBub3QgaXRlcmFibGUhXCIpO2lmKGlzQXJyYXlJdGVyKGwpKXtmb3Iobj10b0xlbmd0aChlLmxlbmd0aCk7bj5FO0UrKylpZigoYz1yP3UoYW5PYmplY3QoYT1lW0VdKVswXSxhWzFdKTp1KGVbRV0pKT09PUJSRUFLfHxjPT09UkVUVVJOKXJldHVybiBjfWVsc2UgZm9yKFI9bC5jYWxsKGUpOyEoYT1SLm5leHQoKSkuZG9uZTspaWYoKGM9Y2FsbChSLHUsYS52YWx1ZSxyKSk9PT1CUkVBS3x8Yz09PVJFVFVSTilyZXR1cm4gY307ZXhwb3J0cy5CUkVBSz1CUkVBSyxleHBvcnRzLlJFVFVSTj1SRVRVUk47XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDltYjNJdGIyWXVhbk1pWFN3aWJtRnRaWE1pT2xzaVkzUjRJaXdpY21WeGRXbHlaU0lzSW1OaGJHd2lMQ0pwYzBGeWNtRjVTWFJsY2lJc0ltRnVUMkpxWldOMElpd2lkRzlNWlc1bmRHZ2lMQ0puWlhSSmRHVnlSbTRpTENKQ1VrVkJTeUlzSWxKRlZGVlNUaUlzSW1WNGNHOXlkSE1pTENKdGIyUjFiR1VpTENKcGRHVnlZV0pzWlNJc0ltVnVkSEpwWlhNaUxDSm1iaUlzSW5Sb1lYUWlMQ0pKVkVWU1FWUlBVaUlzSW14bGJtZDBhQ0lzSW5OMFpYQWlMQ0pwZEdWeVlYUnZjaUlzSW5KbGMzVnNkQ0lzSW1sMFpYSkdiaUlzSW1ZaUxDSnBibVJsZUNJc0lsUjVjR1ZGY25KdmNpSXNJbTVsZUhRaUxDSmtiMjVsSWl3aWRtRnNkV1VpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEVsQlFVbEJMRWxCUVUxRExGRkJRVkVzVlVGRFpFTXNTMEZCVDBRc1VVRkJVU3huUWtGRFprVXNXVUZCWTBZc1VVRkJVU3h2UWtGRGRFSkhMRk5CUVZkSUxGRkJRVkVzWjBKQlEyNUNTU3hUUVVGWFNpeFJRVUZSTEdkQ1FVTnVRa3NzVlVGQldVd3NVVUZCVVN3NFFrRkRjRUpOTEUxQlFWRXNSMEZEVWtNc1QwRkJVeXhIUVVOVVF5eFJRVUZWUXl4UFFVRlBSQ3hSUVVGVkxGTkJRVlZGTEVWQlFWVkRMRVZCUVZORExFVkJRVWxETEVWQlFVMURMRWRCUTNCRkxFbEJSMGxETEVWQlFWRkRMRVZCUVUxRExFVkJRVlZETEVWQlNIaENReXhGUVVGVFRDeEZRVUZYTEZkQlFXTXNUMEZCVDBvc1IwRkJZMHdzVlVGQlZVc3NSMEZEYWtWVkxFVkJRVWx5UWl4SlFVRkpZU3hGUVVGSlF5eEZRVUZOUml4RlFVRlZMRVZCUVVrc1IwRkRhRU5WTEVWQlFWRXNSVUZGV2l4SFFVRnhRaXh0UWtGQlZrWXNSVUZCYzBJc1RVRkJUVWNzVlVGQlZWb3NSVUZCVnl4eFFrRkZOVVFzUjBGQlNWSXNXVUZCV1dsQ0xFbEJRVk1zU1VGQlMwb3NSVUZCVTFnc1UwRkJVMDBzUlVGQlUwc3NVVUZCVTBFc1JVRkJVMDBzUlVGQlQwRXNTVUZGYUVZc1NVRkVRVWdzUlVGQlUxQXNSVUZCVlZNc1JVRkJSV3BDTEZOQlFWTmhMRVZCUVU5T0xFVkJRVk5YTEVsQlFWRXNSMEZCU1V3c1JVRkJTeXhKUVVGTlNTeEZRVUZGVml4RlFVRlRWeXhQUVVOcVJXWXNUMEZCVTFrc1NVRkJWMWdzVDBGQlVTeFBRVUZQVnl4UFFVTTNReXhKUVVGTFJDeEZRVUZYUlN4RlFVRlBiRUlzUzBGQlMxTXNTMEZCWVUwc1JVRkJUME1zUlVGQlUwMHNVVUZCVVVNc1RVRkZkRVVzU1VGRVFVNHNSVUZCVTJwQ0xFdEJRVXRuUWl4RlFVRlZSeXhGUVVGSFNpeEZRVUZMVXl4TlFVRlBaQ3hOUVVONFFrd3NUMEZCVTFrc1NVRkJWMWdzVDBGQlVTeFBRVUZQVnl4SFFVZDBSRllzVVVGQlVVWXNUVUZCVVVFc1RVRkRhRUpGTEZGQlFWRkVMRTlCUVZOQklpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmWm05eUxXOW1MbXB6SW4wPSIsInZhciBnbG9iYWw9bW9kdWxlLmV4cG9ydHM9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93Lk1hdGg9PU1hdGg/d2luZG93OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLk1hdGg9PU1hdGg/c2VsZjpGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XCJudW1iZXJcIj09dHlwZW9mIF9fZyYmKF9fZz1nbG9iYWwpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5bmJHOWlZV3d1YW5NaVhTd2libUZ0WlhNaU9sc2laMnh2WW1Gc0lpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SXNJbmRwYm1SdmR5SXNJazFoZEdnaUxDSnpaV3htSWl3aVJuVnVZM1JwYjI0aUxDSmZYMmNpWFN3aWJXRndjR2x1WjNNaU9pSkJRVU5CTEVsQlFVbEJMRTlCUVZORExFOUJRVTlETEZGQlFUSkNMRzlDUVVGV1F5eFJRVUY1UWtFc1QwRkJUME1zVFVGQlVVRXNTMEZEZWtWRUxFOUJRWGRDTEc5Q1FVRlNSU3hOUVVGMVFrRXNTMEZCUzBRc1RVRkJVVUVzUzBGQlQwTXNTMEZGTTBSRExGTkJRVk1zWTBGQlZFRXNSMEZEWXl4cFFrRkJVRU1zVFVGQmFVSkJMRWxCUVUxUUlpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmWjJ4dlltRnNMbXB6SW4wPSIsInZhciBoYXNPd25Qcm9wZXJ0eT17fS5oYXNPd25Qcm9wZXJ0eTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihyLGUpe3JldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHIsZSl9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5b1lYTXVhbk1pWFN3aWJtRnRaWE1pT2xzaWFHRnpUM2R1VUhKdmNHVnlkSGtpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aWFYUWlMQ0pyWlhraUxDSmpZV3hzSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4SlFVRkpRU3hsUVVGcFFpeEhRVUZIUVN4bFFVTjRRa01zVDBGQlQwTXNVVUZCVlN4VFFVRlZReXhGUVVGSlF5eEhRVU0zUWl4UFFVRlBTaXhsUVVGbFN5eExRVUZMUml4RlFVRkpReUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgyaGhjeTVxY3lKOSIsInZhciBkUD1yZXF1aXJlKFwiLi9fb2JqZWN0LWRwXCIpLGNyZWF0ZURlc2M9cmVxdWlyZShcIi4vX3Byb3BlcnR5LWRlc2NcIik7bW9kdWxlLmV4cG9ydHM9cmVxdWlyZShcIi4vX2Rlc2NyaXB0b3JzXCIpP2Z1bmN0aW9uKGUscix0KXtyZXR1cm4gZFAuZihlLHIsY3JlYXRlRGVzYygxLHQpKX06ZnVuY3Rpb24oZSxyLHQpe3JldHVybiBlW3JdPXQsZX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDlvYVdSbExtcHpJbDBzSW01aGJXVnpJanBiSW1SUUlpd2ljbVZ4ZFdseVpTSXNJbU55WldGMFpVUmxjMk1pTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aWIySnFaV04wSWl3aWEyVjVJaXdpZG1Gc2RXVWlMQ0ptSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4SlFVRkpRU3hIUVVGTFF5eFJRVUZSTEdkQ1FVTmlReXhYUVVGaFJDeFJRVUZSTEc5Q1FVTjZRa1VzVDBGQlQwTXNVVUZCVlVnc1VVRkJVU3hyUWtGQmIwSXNVMEZCVlVrc1JVRkJVVU1zUlVGQlMwTXNSMEZEYkVVc1QwRkJUMUFzUjBGQlIxRXNSVUZCUlVnc1JVRkJVVU1zUlVGQlMwb3NWMEZCVnl4RlFVRkhTeXhMUVVOeVF5eFRRVUZWUml4RlFVRlJReXhGUVVGTFF5eEhRVVY2UWl4UFFVUkJSaXhGUVVGUFF5eEhRVUZQUXl4RlFVTlFSaUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgyaHBaR1V1YW5NaWZRPT0iLCJ2YXIgZG9jdW1lbnQ9cmVxdWlyZShcIi4vX2dsb2JhbFwiKS5kb2N1bWVudDttb2R1bGUuZXhwb3J0cz1kb2N1bWVudCYmZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5b2RHMXNMbXB6SWwwc0ltNWhiV1Z6SWpwYkltUnZZM1Z0Wlc1MElpd2ljbVZ4ZFdseVpTSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0prYjJOMWJXVnVkRVZzWlcxbGJuUWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRWxCUVVsQkxGTkJRVmRETEZGQlFWRXNZVUZCWVVRc1UwRkRjRU5GTEU5QlFVOURMRkZCUVZWSUxGVkJRVmxCTEZOQlFWTkpJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZmFIUnRiQzVxY3lKOSIsIm1vZHVsZS5leHBvcnRzPSFyZXF1aXJlKFwiLi9fZGVzY3JpcHRvcnNcIikmJiFyZXF1aXJlKFwiLi9fZmFpbHNcIikoZnVuY3Rpb24oKXtyZXR1cm4gNyE9T2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoXCIuL19kb20tY3JlYXRlXCIpKFwiZGl2XCIpLFwiYVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gN319KS5hfSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDlwWlRndFpHOXRMV1JsWm1sdVpTNXFjeUpkTENKdVlXMWxjeUk2V3lKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aWNtVnhkV2x5WlNJc0lrOWlhbVZqZENJc0ltUmxabWx1WlZCeWIzQmxjblI1SWl3aVoyVjBJaXdpWVNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVGQkxFOUJRVTlETEZOQlFWZERMRkZCUVZFc2IwSkJRWE5DUVN4UlFVRlJMRmRCUVZKQkxFTkJRVzlDTEZkQlEyeEZMRTlCUVRSSExFZEJRWEpIUXl4UFFVRlBReXhsUVVGbFJpeFJRVUZSTEdkQ1FVRlNRU3hEUVVGNVFpeFBRVUZSTEVsQlFVc3NRMEZCUlVjc1NVRkJTeXhYUVVGakxFOUJRVThzUzBGQlVVTWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5cFpUZ3RaRzl0TFdSbFptbHVaUzVxY3lKOSIsInZhciBpc09iamVjdD1yZXF1aXJlKFwiLi9faXMtb2JqZWN0XCIpLHNldFByb3RvdHlwZU9mPXJlcXVpcmUoXCIuL19zZXQtcHJvdG9cIikuc2V0O21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKHQsZSxvKXt2YXIgcixwPWUuY29uc3RydWN0b3I7cmV0dXJuIHAhPT1vJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBwJiYocj1wLnByb3RvdHlwZSkhPT1vLnByb3RvdHlwZSYmaXNPYmplY3QocikmJnNldFByb3RvdHlwZU9mJiZzZXRQcm90b3R5cGVPZih0LHIpLHR9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5cGJtaGxjbWwwTFdsbUxYSmxjWFZwY21Wa0xtcHpJbDBzSW01aGJXVnpJanBiSW1selQySnFaV04wSWl3aWNtVnhkV2x5WlNJc0luTmxkRkJ5YjNSdmRIbHdaVTltSWl3aWMyVjBJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSW5Sb1lYUWlMQ0owWVhKblpYUWlMQ0pESWl3aVVDSXNJbE1pTENKamIyNXpkSEoxWTNSdmNpSXNJbkJ5YjNSdmRIbHdaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzU1VGQlNVRXNVMEZCVjBNc1VVRkJVU3huUWtGRGJrSkRMR1ZCUVdsQ1JDeFJRVUZSTEdkQ1FVRm5Ra1VzU1VGRE4wTkRMRTlCUVU5RExGRkJRVlVzVTBGQlZVTXNSVUZCVFVNc1JVRkJVVU1zUjBGRGRrTXNTVUZEU1VNc1JVRkVRVU1zUlVGQlNVZ3NSVUZCVDBrc1dVRkpZaXhQUVVaRlJDeEpRVUZOUml4SFFVRnBRaXh0UWtGQlRFVXNTVUZCYjBKRUxFVkJRVWxETEVWQlFVVkZMR0ZCUVdWS0xFVkJRVVZKTEZkQlFXRmFMRk5CUVZOVExFbEJRVTFRTEdkQ1FVTXpSa0VzWlVGQlpVa3NSVUZCVFVjc1IwRkRaRWdpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOXBibWhsY21sMExXbG1MWEpsY1hWcGNtVmtMbXB6SW4wPSIsIm1vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKGUscixsKXt2YXIgYT12b2lkIDA9PT1sO3N3aXRjaChyLmxlbmd0aCl7Y2FzZSAwOnJldHVybiBhP2UoKTplLmNhbGwobCk7Y2FzZSAxOnJldHVybiBhP2UoclswXSk6ZS5jYWxsKGwsclswXSk7Y2FzZSAyOnJldHVybiBhP2UoclswXSxyWzFdKTplLmNhbGwobCxyWzBdLHJbMV0pO2Nhc2UgMzpyZXR1cm4gYT9lKHJbMF0sclsxXSxyWzJdKTplLmNhbGwobCxyWzBdLHJbMV0sclsyXSk7Y2FzZSA0OnJldHVybiBhP2UoclswXSxyWzFdLHJbMl0sclszXSk6ZS5jYWxsKGwsclswXSxyWzFdLHJbMl0sclszXSl9cmV0dXJuIGUuYXBwbHkobCxyKX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDlwYm5admEyVXVhbk1pWFN3aWJtRnRaWE1pT2xzaWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0ltWnVJaXdpWVhKbmN5SXNJblJvWVhRaUxDSjFiaUlzSW5WdVpHVm1hVzVsWkNJc0lteGxibWQwYUNJc0ltTmhiR3dpTENKaGNIQnNlU0pkTENKdFlYQndhVzVuY3lJNklrRkJRMEZCTEU5QlFVOURMRkZCUVZVc1UwRkJWVU1zUlVGQlNVTXNSVUZCVFVNc1IwRkRia01zU1VGQlNVTXNUMEZCWTBNc1NVRkJWRVlzUlVGRFZDeFBRVUZSUkN4RlFVRkxTU3hSUVVOWUxFdEJRVXNzUlVGQlJ5eFBRVUZQUml4RlFVRkxTQ3hKUVVOQlFTeEZRVUZIVFN4TFFVRkxTaXhIUVVNMVFpeExRVUZMTEVWQlFVY3NUMEZCVDBNc1JVRkJTMGdzUlVGQlIwTXNSVUZCU3l4SlFVTlNSQ3hGUVVGSFRTeExRVUZMU2l4RlFVRk5SQ3hGUVVGTExFbEJRM1pETEV0QlFVc3NSVUZCUnl4UFFVRlBSU3hGUVVGTFNDeEZRVUZIUXl4RlFVRkxMRWRCUVVsQkxFVkJRVXNzU1VGRGFrSkVMRVZCUVVkTkxFdEJRVXRLTEVWQlFVMUVMRVZCUVVzc1IwRkJTVUVzUlVGQlN5eEpRVU5vUkN4TFFVRkxMRVZCUVVjc1QwRkJUMFVzUlVGQlMwZ3NSVUZCUjBNc1JVRkJTeXhIUVVGSlFTeEZRVUZMTEVkQlFVbEJMRVZCUVVzc1NVRkRNVUpFTEVWQlFVZE5MRXRCUVV0S0xFVkJRVTFFTEVWQlFVc3NSMEZCU1VFc1JVRkJTeXhIUVVGSlFTeEZRVUZMTEVsQlEzcEVMRXRCUVVzc1JVRkJSeXhQUVVGUFJTeEZRVUZMU0N4RlFVRkhReXhGUVVGTExFZEJRVWxCTEVWQlFVc3NSMEZCU1VFc1JVRkJTeXhIUVVGSlFTeEZRVUZMTEVsQlEyNURSQ3hGUVVGSFRTeExRVUZMU2l4RlFVRk5SQ3hGUVVGTExFZEJRVWxCTEVWQlFVc3NSMEZCU1VFc1JVRkJTeXhIUVVGSlFTeEZRVUZMTEVsQlEyeEZMRTlCUVU5RUxFVkJRVWRQTEUxQlFVMU1MRVZCUVUxRUlpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmYVc1MmIydGxMbXB6SW4wPSIsInZhciBjb2Y9cmVxdWlyZShcIi4vX2NvZlwiKTttb2R1bGUuZXhwb3J0cz1PYmplY3QoXCJ6XCIpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApP09iamVjdDpmdW5jdGlvbihlKXtyZXR1cm5cIlN0cmluZ1wiPT1jb2YoZSk/ZS5zcGxpdChcIlwiKTpPYmplY3QoZSl9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5cGIySnFaV04wTG1weklsMHNJbTVoYldWeklqcGJJbU52WmlJc0luSmxjWFZwY21VaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2lUMkpxWldOMElpd2ljSEp2Y0dWeWRIbEpjMFZ1ZFcxbGNtRmliR1VpTENKcGRDSXNJbk53YkdsMElsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFTeEpRVUZKUVN4SlFVRk5ReXhSUVVGUkxGVkJSV3hDUXl4UFFVRlBReXhSUVVGVlF5eFBRVUZQTEV0QlFVdERMSEZDUVVGeFFpeEhRVUZMUkN4UFFVRlRMRk5CUVZWRkxFZEJRM2hGTEUxQlFXdENMRlZCUVZoT0xFbEJRVWxOTEVkQlFXdENRU3hGUVVGSFF5eE5RVUZOTEVsQlFVMUlMRTlCUVU5Rklpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmYVc5aWFtVmpkQzVxY3lKOSIsInZhciBJdGVyYXRvcnM9cmVxdWlyZShcIi4vX2l0ZXJhdG9yc1wiKSxJVEVSQVRPUj1yZXF1aXJlKFwiLi9fd2tzXCIpKFwiaXRlcmF0b3JcIiksQXJyYXlQcm90bz1BcnJheS5wcm90b3R5cGU7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24ocil7cmV0dXJuIHZvaWQgMCE9PXImJihJdGVyYXRvcnMuQXJyYXk9PT1yfHxBcnJheVByb3RvW0lURVJBVE9SXT09PXIpfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXBjeTFoY25KaGVTMXBkR1Z5TG1weklsMHNJbTVoYldWeklqcGJJa2wwWlhKaGRHOXljeUlzSW5KbGNYVnBjbVVpTENKSlZFVlNRVlJQVWlJc0lrRnljbUY1VUhKdmRHOGlMQ0pCY25KaGVTSXNJbkJ5YjNSdmRIbHdaU0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKcGRDSXNJblZ1WkdWbWFXNWxaQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRMEVzU1VGQlNVRXNWVUZCV1VNc1VVRkJVU3huUWtGRGNFSkRMRk5CUVZkRUxGRkJRVkVzVTBGQlVrRXNRMEZCYTBJc1dVRkROMEpGTEZkQlFXRkRMRTFCUVUxRExGVkJSWFpDUXl4UFFVRlBReXhSUVVGVkxGTkJRVlZETEVkQlEzcENMRmxCUVdORExFbEJRVkJFTEVsQlFYRkNVaXhWUVVGVlNTeFJRVUZWU1N4SFFVRk5UQ3hYUVVGWFJDeFpRVUZqVFNJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYMmx6TFdGeWNtRjVMV2wwWlhJdWFuTWlmUT09IiwidmFyIGNvZj1yZXF1aXJlKFwiLi9fY29mXCIpO21vZHVsZS5leHBvcnRzPUFycmF5LmlzQXJyYXl8fGZ1bmN0aW9uIGlzQXJyYXkocil7cmV0dXJuXCJBcnJheVwiPT1jb2Yocil9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5cGN5MWhjbkpoZVM1cWN5SmRMQ0p1WVcxbGN5STZXeUpqYjJZaUxDSnlaWEYxYVhKbElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SXNJa0Z5Y21GNUlpd2lhWE5CY25KaGVTSXNJbUZ5WnlKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUTBFc1NVRkJTVUVzU1VGQlRVTXNVVUZCVVN4VlFVTnNRa01zVDBGQlQwTXNVVUZCVlVNc1RVRkJUVU1zVTBGQlZ5eFRRVUZUUVN4UlFVRlJReXhIUVVOcVJDeE5RVUZ0UWl4VFFVRmFUaXhKUVVGSlRTSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDJsekxXRnljbUY1TG1wekluMD0iLCJ2YXIgaXNPYmplY3Q9cmVxdWlyZShcIi4vX2lzLW9iamVjdFwiKSxmbG9vcj1NYXRoLmZsb29yO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIGlzSW50ZWdlcihlKXtyZXR1cm4haXNPYmplY3QoZSkmJmlzRmluaXRlKGUpJiZmbG9vcihlKT09PWV9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5cGN5MXBiblJsWjJWeUxtcHpJbDBzSW01aGJXVnpJanBiSW1selQySnFaV04wSWl3aWNtVnhkV2x5WlNJc0ltWnNiMjl5SWl3aVRXRjBhQ0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKcGMwbHVkR1ZuWlhJaUxDSnBkQ0lzSW1selJtbHVhWFJsSWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hUUVVGWFF5eFJRVUZSTEdkQ1FVTnVRa01zVFVGQlVVTXNTMEZCUzBRc1RVRkRha0pGTEU5QlFVOURMRkZCUVZVc1UwRkJVME1zVlVGQlZVTXNSMEZEYkVNc1QwRkJVVkFzVTBGQlUwOHNTVUZCVDBNc1UwRkJVMFFzU1VGQlQwd3NUVUZCVFVzc1MwRkJVVUVpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOXBjeTFwYm5SbFoyVnlMbXB6SW4wPSIsIm1vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKG8pe3JldHVyblwib2JqZWN0XCI9PXR5cGVvZiBvP251bGwhPT1vOlwiZnVuY3Rpb25cIj09dHlwZW9mIG99O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5cGN5MXZZbXBsWTNRdWFuTWlYU3dpYm1GdFpYTWlPbHNpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSW1sMElsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFVRXNUMEZCVDBNc1VVRkJWU3hUUVVGVlF5eEhRVU42UWl4TlFVRnhRaXhwUWtGQlVFRXNSVUZCZVVJc1QwRkJVRUVzUlVGQk5FSXNiVUpCUVZCQklpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmYVhNdGIySnFaV04wTG1wekluMD0iLCJ2YXIgaXNPYmplY3Q9cmVxdWlyZShcIi4vX2lzLW9iamVjdFwiKSxjb2Y9cmVxdWlyZShcIi4vX2NvZlwiKSxNQVRDSD1yZXF1aXJlKFwiLi9fd2tzXCIpKFwibWF0Y2hcIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHI7cmV0dXJuIGlzT2JqZWN0KGUpJiYodm9pZCAwIT09KHI9ZVtNQVRDSF0pPyEhcjpcIlJlZ0V4cFwiPT1jb2YoZSkpfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXBjeTF5WldkbGVIQXVhbk1pWFN3aWJtRnRaWE1pT2xzaWFYTlBZbXBsWTNRaUxDSnlaWEYxYVhKbElpd2lZMjltSWl3aVRVRlVRMGdpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aWFYUWlMQ0pwYzFKbFowVjRjQ0lzSW5WdVpHVm1hVzVsWkNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUTBFc1NVRkJTVUVzVTBGQlYwTXNVVUZCVVN4blFrRkRia0pETEVsQlFVMUVMRkZCUVZFc1ZVRkRaRVVzVFVGQlVVWXNVVUZCVVN4VFFVRlNRU3hEUVVGclFpeFRRVU01UWtjc1QwRkJUME1zVVVGQlZTeFRRVUZWUXl4SFFVTjZRaXhKUVVGSlF5eEZRVU5LTEU5QlFVOVFMRk5CUVZOTkxGVkJRVzFEUlN4TFFVRXhRa1FzUlVGQlYwUXNSVUZCUjBnc1ZVRkJNRUpKTEVWQlFYTkNMRlZCUVZoTUxFbEJRVWxKSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZhWE10Y21WblpYaHdMbXB6SW4wPSIsInZhciBhbk9iamVjdD1yZXF1aXJlKFwiLi9fYW4tb2JqZWN0XCIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKHIsdCxlLGEpe3RyeXtyZXR1cm4gYT90KGFuT2JqZWN0KGUpWzBdLGVbMV0pOnQoZSl9Y2F0Y2godCl7dmFyIGM9ci5yZXR1cm47dGhyb3cgdm9pZCAwIT09YyYmYW5PYmplY3QoYy5jYWxsKHIpKSx0fX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDlwZEdWeUxXTmhiR3d1YW5NaVhTd2libUZ0WlhNaU9sc2lZVzVQWW1wbFkzUWlMQ0p5WlhGMWFYSmxJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSW1sMFpYSmhkRzl5SWl3aVptNGlMQ0oyWVd4MVpTSXNJbVZ1ZEhKcFpYTWlMQ0psSWl3aWNtVjBJaXdpZFc1a1pXWnBibVZrSWl3aVkyRnNiQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRMEVzU1VGQlNVRXNVMEZCVjBNc1VVRkJVU3huUWtGRGRrSkRMRTlCUVU5RExGRkJRVlVzVTBGQlZVTXNSVUZCVlVNc1JVRkJTVU1zUlVGQlQwTXNSMEZET1VNc1NVRkRSU3hQUVVGUFFTeEZRVUZWUml4RlFVRkhUQ3hUUVVGVFRTeEhRVUZQTEVkQlFVbEJMRVZCUVUwc1NVRkJUVVFzUlVGQlIwTXNSMEZGZGtRc1RVRkJUMFVzUjBGRFVDeEpRVUZKUXl4RlFVRk5UQ3hGUVVGcFFpeFBRVVV6UWl4WFFVUlpUU3hKUVVGU1JDeEhRVUZ0UWxRc1UwRkJVMU1zUlVGQlNVVXNTMEZCUzFBc1NVRkRia05KSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZhWFJsY2kxallXeHNMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBjcmVhdGU9cmVxdWlyZShcIi4vX29iamVjdC1jcmVhdGVcIiksZGVzY3JpcHRvcj1yZXF1aXJlKFwiLi9fcHJvcGVydHktZGVzY1wiKSxzZXRUb1N0cmluZ1RhZz1yZXF1aXJlKFwiLi9fc2V0LXRvLXN0cmluZy10YWdcIiksSXRlcmF0b3JQcm90b3R5cGU9e307cmVxdWlyZShcIi4vX2hpZGVcIikoSXRlcmF0b3JQcm90b3R5cGUscmVxdWlyZShcIi4vX3drc1wiKShcIml0ZXJhdG9yXCIpLGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KSxtb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihyLHQsZSl7ci5wcm90b3R5cGU9Y3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLHtuZXh0OmRlc2NyaXB0b3IoMSxlKX0pLHNldFRvU3RyaW5nVGFnKHIsdCtcIiBJdGVyYXRvclwiKX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDlwZEdWeUxXTnlaV0YwWlM1cWN5SmRMQ0p1WVcxbGN5STZXeUpqY21WaGRHVWlMQ0p5WlhGMWFYSmxJaXdpWkdWelkzSnBjSFJ2Y2lJc0luTmxkRlJ2VTNSeWFXNW5WR0ZuSWl3aVNYUmxjbUYwYjNKUWNtOTBiM1I1Y0dVaUxDSjBhR2x6SWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0lrTnZibk4wY25WamRHOXlJaXdpVGtGTlJTSXNJbTVsZUhRaUxDSndjbTkwYjNSNWNHVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUTBFc1NVRkJTVUVzVDBGQlUwTXNVVUZCVVN4dlFrRkRha0pETEZkQlFXRkVMRkZCUVZFc2IwSkJRM0pDUlN4bFFVRnBRa1lzVVVGQlVTeDNRa0ZEZWtKSExHdENRVUZ2UWl4SFFVZDRRa2dzVVVGQlVTeFZRVUZTUVN4RFFVRnRRa2NzYTBKQlFXMUNTQ3hSUVVGUkxGTkJRVkpCTEVOQlFXdENMRmxCUVdFc1YwRkJZeXhQUVVGUFNTeFBRVVV4UmtNc1QwRkJUME1zVVVGQlZTeFRRVUZWUXl4RlFVRmhReXhGUVVGTlF5eEhRVU0xUTBZc1JVRkJXVWNzVlVGQldWZ3NUMEZCVDBrc2EwSkJRVzFDTEVOQlFVVk5MRXRCUVUxU0xGZEJRVmNzUlVGQlIxRXNTMEZEZUVWUUxHVkJRV1ZMTEVWQlFXRkRMRVZCUVU4aUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTlwZEdWeUxXTnlaV0YwWlM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgTElCUkFSWT1yZXF1aXJlKFwiLi9fbGlicmFyeVwiKSwkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIikscmVkZWZpbmU9cmVxdWlyZShcIi4vX3JlZGVmaW5lXCIpLGhpZGU9cmVxdWlyZShcIi4vX2hpZGVcIiksSXRlcmF0b3JzPXJlcXVpcmUoXCIuL19pdGVyYXRvcnNcIiksJGl0ZXJDcmVhdGU9cmVxdWlyZShcIi4vX2l0ZXItY3JlYXRlXCIpLHNldFRvU3RyaW5nVGFnPXJlcXVpcmUoXCIuL19zZXQtdG8tc3RyaW5nLXRhZ1wiKSxnZXRQcm90b3R5cGVPZj1yZXF1aXJlKFwiLi9fb2JqZWN0LWdwb1wiKSxJVEVSQVRPUj1yZXF1aXJlKFwiLi9fd2tzXCIpKFwiaXRlcmF0b3JcIiksQlVHR1k9IShbXS5rZXlzJiZcIm5leHRcImluW10ua2V5cygpKSxGRl9JVEVSQVRPUj1cIkBAaXRlcmF0b3JcIixLRVlTPVwia2V5c1wiLFZBTFVFUz1cInZhbHVlc1wiLHJldHVyblRoaXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc307bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZSxyLHQsaSxuLG8scyl7JGl0ZXJDcmVhdGUodCxyLGkpO3ZhciB1LGEsVCxSPWZ1bmN0aW9uKGUpe2lmKCFCVUdHWSYmZSBpbiBFKXJldHVybiBFW2VdO3N3aXRjaChlKXtjYXNlIEtFWVM6cmV0dXJuIGZ1bmN0aW9uIGtleXMoKXtyZXR1cm4gbmV3IHQodGhpcyxlKX07Y2FzZSBWQUxVRVM6cmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpe3JldHVybiBuZXcgdCh0aGlzLGUpfX1yZXR1cm4gZnVuY3Rpb24gZW50cmllcygpe3JldHVybiBuZXcgdCh0aGlzLGUpfX0sZj1yK1wiIEl0ZXJhdG9yXCIsYz1uPT1WQUxVRVMsQT0hMSxFPWUucHJvdG90eXBlLEk9RVtJVEVSQVRPUl18fEVbRkZfSVRFUkFUT1JdfHxuJiZFW25dLHA9SXx8UihuKSxoPW4/Yz9SKFwiZW50cmllc1wiKTpwOnZvaWQgMCx5PVwiQXJyYXlcIj09ciYmRS5lbnRyaWVzfHxJO2lmKHkmJihUPWdldFByb3RvdHlwZU9mKHkuY2FsbChuZXcgZSkpKSE9PU9iamVjdC5wcm90b3R5cGUmJlQubmV4dCYmKHNldFRvU3RyaW5nVGFnKFQsZiwhMCksTElCUkFSWXx8XCJmdW5jdGlvblwiPT10eXBlb2YgVFtJVEVSQVRPUl18fGhpZGUoVCxJVEVSQVRPUixyZXR1cm5UaGlzKSksYyYmSSYmSS5uYW1lIT09VkFMVUVTJiYoQT0hMCxwPWZ1bmN0aW9uIHZhbHVlcygpe3JldHVybiBJLmNhbGwodGhpcyl9KSxMSUJSQVJZJiYhc3x8IUJVR0dZJiYhQSYmRVtJVEVSQVRPUl18fGhpZGUoRSxJVEVSQVRPUixwKSxJdGVyYXRvcnNbcl09cCxJdGVyYXRvcnNbZl09cmV0dXJuVGhpcyxuKWlmKHU9e3ZhbHVlczpjP3A6UihWQUxVRVMpLGtleXM6bz9wOlIoS0VZUyksZW50cmllczpofSxzKWZvcihhIGluIHUpYSBpbiBFfHxyZWRlZmluZShFLGEsdVthXSk7ZWxzZSAkZXhwb3J0KCRleHBvcnQuUCskZXhwb3J0LkYqKEJVR0dZfHxBKSxyLHUpO3JldHVybiB1fTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXBkR1Z5TFdSbFptbHVaUzVxY3lKZExDSnVZVzFsY3lJNld5Sk1TVUpTUVZKWklpd2ljbVZ4ZFdseVpTSXNJaVJsZUhCdmNuUWlMQ0p5WldSbFptbHVaU0lzSW1ocFpHVWlMQ0pKZEdWeVlYUnZjbk1pTENJa2FYUmxja055WldGMFpTSXNJbk5sZEZSdlUzUnlhVzVuVkdGbklpd2laMlYwVUhKdmRHOTBlWEJsVDJZaUxDSkpWRVZTUVZSUFVpSXNJa0pWUjBkWklpd2lhMlY1Y3lJc0lrWkdYMGxVUlZKQlZFOVNJaXdpUzBWWlV5SXNJbFpCVEZWRlV5SXNJbkpsZEhWeWJsUm9hWE1pTENKMGFHbHpJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSWtKaGMyVWlMQ0pPUVUxRklpd2lRMjl1YzNSeWRXTjBiM0lpTENKdVpYaDBJaXdpUkVWR1FWVk1WQ0lzSWtsVFgxTkZWQ0lzSWtaUFVrTkZSQ0lzSW0xbGRHaHZaSE1pTENKclpYa2lMQ0pKZEdWeVlYUnZjbEJ5YjNSdmRIbHdaU0lzSW1kbGRFMWxkR2h2WkNJc0ltdHBibVFpTENKd2NtOTBieUlzSW5aaGJIVmxjeUlzSW1WdWRISnBaWE1pTENKVVFVY2lMQ0pFUlVaZlZrRk1WVVZUSWl3aVZrRk1WVVZUWDBKVlJ5SXNJbkJ5YjNSdmRIbHdaU0lzSWlSdVlYUnBkbVVpTENJa1pHVm1ZWFZzZENJc0lpUmxiblJ5YVdWeklpd2lkVzVrWldacGJtVmtJaXdpSkdGdWVVNWhkR2wyWlNJc0ltTmhiR3dpTENKUFltcGxZM1FpTENKdVlXMWxJaXdpVUNJc0lrWWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUTBFc1NVRkJTVUVzVVVGQlZVTXNVVUZCVVN4alFVTnNRa01zVVVGQlZVUXNVVUZCVVN4aFFVTnNRa1VzVTBGQlYwWXNVVUZCVVN4bFFVTnVRa2NzUzBGQlQwZ3NVVUZCVVN4WFFVTm1TU3hWUVVGWlNpeFJRVUZSTEdkQ1FVTndRa3NzV1VGQlkwd3NVVUZCVVN4clFrRkRkRUpOTEdWQlFXbENUaXhSUVVGUkxIZENRVU42UWs4c1pVRkJhVUpRTEZGQlFWRXNhVUpCUTNwQ1VTeFRRVUZYVWl4UlFVRlJMRk5CUVZKQkxFTkJRV3RDTEZsQlF6ZENVeXhSUVVGVkxFZEJRVWRETEUxQlFWRXNVVUZCVlN4SFFVRkhRU3hSUVVOc1EwTXNXVUZCWXl4aFFVTmtReXhMUVVGUExFOUJRMUJETEU5QlFWTXNVMEZGVkVNc1YwRkJZU3hYUVVGakxFOUJRVTlETEUxQlJYUkRReXhQUVVGUFF5eFJRVUZWTEZOQlFWVkRMRVZCUVUxRExFVkJRVTFETEVWQlFXRkRMRVZCUVUxRExFVkJRVk5ETEVWQlFWRkRMRWRCUTNwRmJrSXNXVUZCV1dVc1JVRkJZVVFzUlVGQlRVVXNSMEZETDBJc1NVRmxTVWtzUlVGQlUwTXNSVUZCUzBNc1JVRm1aRU1zUlVGQldTeFRRVUZWUXl4SFFVTjRRaXhKUVVGTGNFSXNUMEZCVTI5Q0xFdEJRVkZETEVWQlFVOHNUMEZCVDBFc1JVRkJUVVFzUjBGRE1VTXNUMEZCVVVFc1IwRkRUaXhMUVVGTGFrSXNTMEZCVFN4UFFVRlBMRk5CUVZOR0xFOUJRVk1zVDBGQlR5eEpRVUZKVlN4RlFVRlpUQ3hMUVVGTll5eEpRVU5xUlN4TFFVRkxhRUlzVDBGQlVTeFBRVUZQTEZOQlFWTnJRaXhUUVVGWExFOUJRVThzU1VGQlNWZ3NSVUZCV1V3c1MwRkJUV01zU1VGRGNrVXNUMEZCVHl4VFFVRlRSeXhWUVVGWkxFOUJRVThzU1VGQlNWb3NSVUZCV1V3c1MwRkJUV01zUzBGRmVrUkpMRVZCUVUxa0xFVkJRVThzV1VGRFltVXNSVUZCWVZvc1IwRkJWMVFzVDBGRGVFSnpRaXhIUVVGaExFVkJRMkpNTEVWQlFWRmFMRVZCUVV0clFpeFZRVU5pUXl4RlFVRlZVQ3hGUVVGTmRFSXNWMEZCWVhOQ0xFVkJRVTF1UWl4alFVRm5RbGNzUjBGQlYxRXNSVUZCVFZJc1IwRkRjRVZuUWl4RlFVRlhSQ3hIUVVGWFZDeEZRVUZWVGl4SFFVTm9RMmxDTEVWQlFWZHFRaXhGUVVGWFdTeEZRVUYzUWs0c1JVRkJWU3hYUVVGeVFsVXNUMEZCYTBORkxFVkJRM0pGUXl4RlFVRnhRaXhUUVVGU2RFSXNSMEZCYTBKWExFVkJRVTFGTEZOQlFYRkNTeXhGUVhkQ09VUXNSMEZ5UWtsSkxFbEJRMFprTEVWQlFXOUNjRUlzWlVGQlpXdERMRVZCUVZkRExFdEJRVXNzU1VGQlNYaENMRTlCUXpkQ2VVSXNUMEZCVDFBc1YwRkJZVlFzUlVGQmEwSk9MRTlCUlRsRVppeGxRVUZsY1VJc1JVRkJiVUpOTEVkQlFVc3NSMEZGYkVOc1F5eFRRVUZwUkN4dFFrRkJMMEkwUWl4RlFVRnJRbTVDTEZkQlFYbENUQ3hMUVVGTGQwSXNSVUZCYlVKdVFpeFRRVUZWVFN4aFFVbHdSMjlDTEVkQlFXTkhMRWRCUVZkQkxFVkJRVkZQTEU5QlFWTXZRaXhUUVVNMVEzTkNMRWRCUVdFc1JVRkRZa2NzUlVGQlZ5eFRRVUZUVUN4VFFVRlhMRTlCUVU5TkxFVkJRVkZMTEV0QlFVc3pRaXhSUVVjdlEyaENMRlZCUVZkNVFpeEpRVUZaWml4UlFVRlRNRUlzUjBGQlpVd3NSVUZCVFhSQ0xGZEJRM3BFVEN4TFFVRkxNa0lzUlVGQlQzUkNMRk5CUVZVNFFpeEhRVWQ0UW14RExGVkJRVlZsTEVkQlFWRnRRaXhGUVVOc1FteERMRlZCUVZVMlFpeEhRVUZQYmtJc1YwRkRZbEVzUlVGTlJpeEhRVXhCUnl4RlFVRlZMRU5CUTFKTkxFOUJRVkZITEVWQlFXRkpMRVZCUVZkV0xFVkJRVlZtTEZGQlF6RkRTQ3hMUVVGTllTeEZRVUZUWlN4RlFVRlhWaXhGUVVGVmFFSXNUVUZEY0VOdlFpeFJRVUZUVHl4SFFVVlFaaXhGUVVGUkxFbEJRVXRGTEV0QlFVOUVMRVZCUTJoQ1F5eExRVUZQU1N4SFFVRlJOVUlzVTBGQlV6UkNMRVZCUVU5S0xFVkJRVXRFTEVWQlFWRkRMRk5CUXpkRGVrSXNVVUZCVVVFc1VVRkJVVFJETEVWQlFVazFReXhSUVVGUk5rTXNSMEZCUzNKRExFOUJRVk13UWl4SFFVRmhhRUlzUlVGQlRVMHNSMEZGZEVVc1QwRkJUMEVpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOXBkR1Z5TFdSbFptbHVaUzVxY3lKOSIsInZhciBJVEVSQVRPUj1yZXF1aXJlKFwiLi9fd2tzXCIpKFwiaXRlcmF0b3JcIiksU0FGRV9DTE9TSU5HPSExO3RyeXt2YXIgcml0ZXI9WzddW0lURVJBVE9SXSgpO3JpdGVyLnJldHVybj1mdW5jdGlvbigpe1NBRkVfQ0xPU0lORz0hMH0sQXJyYXkuZnJvbShyaXRlcixmdW5jdGlvbigpe3Rocm93IDJ9KX1jYXRjaChyKXt9bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24ocix0KXtpZighdCYmIVNBRkVfQ0xPU0lORylyZXR1cm4hMTt2YXIgbj0hMTt0cnl7dmFyIGU9WzddLHU9ZVtJVEVSQVRPUl0oKTt1Lm5leHQ9ZnVuY3Rpb24oKXtyZXR1cm57ZG9uZTpuPSEwfX0sZVtJVEVSQVRPUl09ZnVuY3Rpb24oKXtyZXR1cm4gdX0scihlKX1jYXRjaChyKXt9cmV0dXJuIG59O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5cGRHVnlMV1JsZEdWamRDNXFjeUpkTENKdVlXMWxjeUk2V3lKSlZFVlNRVlJQVWlJc0luSmxjWFZwY21VaUxDSlRRVVpGWDBOTVQxTkpUa2NpTENKeWFYUmxjaUlzSWtGeWNtRjVJaXdpWm5KdmJTSXNJbVVpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aVpYaGxZeUlzSW5OcmFYQkRiRzl6YVc1bklpd2ljMkZtWlNJc0ltRnljaUlzSW1sMFpYSWlMQ0p1WlhoMElpd2laRzl1WlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1NVRkJTVUVzVTBGQlYwTXNVVUZCVVN4VFFVRlNRU3hEUVVGclFpeFpRVU0zUWtNc1kwRkJaU3hGUVVWdVFpeEpRVU5GTEVsQlFVbERMRTFCUVZFc1EwRkJReXhIUVVGSFNDeFpRVU5vUWtjc1RVRkJZeXhQUVVGSkxGZEJRV05FTEdOQlFXVXNSMEZGTDBORkxFMUJRVTFETEV0QlFVdEdMRTFCUVU4c1YwRkJZeXhOUVVGTkxFbEJRM1JETEUxQlFVOUhMRWxCUlZSRExFOUJRVTlETEZGQlFWVXNVMEZCVlVNc1JVRkJUVU1zUjBGREwwSXNTVUZCUzBFc1NVRkJaMEpTTEdGQlFXTXNUMEZCVHl4RlFVTXhReXhKUVVGSlV5eEhRVUZQTEVWQlExZ3NTVUZEUlN4SlFVRkpReXhGUVVGTkxFTkJRVU1zUjBGRFVFTXNSVUZCVDBRc1JVRkJTVm9zV1VGRFptRXNSVUZCUzBNc1MwRkJUeXhYUVVGakxFMUJRVThzUTBGQlJVTXNTMEZCVFVvc1IwRkJUeXhKUVVOb1JFTXNSVUZCU1Zvc1ZVRkJXU3hYUVVGakxFOUJRVTloTEVkQlEzSkRTaXhGUVVGTFJ5eEhRVU5NTEUxQlFVOU9MRWxCUTFRc1QwRkJUMHNpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOXBkR1Z5TFdSbGRHVmpkQzVxY3lKOSIsIm1vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKGUsbil7cmV0dXJue3ZhbHVlOm4sZG9uZTohIWV9fTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXBkR1Z5TFhOMFpYQXVhbk1pWFN3aWJtRnRaWE1pT2xzaWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0ltUnZibVVpTENKMllXeDFaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUZCTEU5QlFVOURMRkZCUVZVc1UwRkJWVU1zUlVGQlRVTXNSMEZETDBJc1RVRkJUeXhEUVVGRlFTeE5RVUZQUVN4RlFVRlBSQ3hQUVVGUlFTSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDJsMFpYSXRjM1JsY0M1cWN5SjkiLCJtb2R1bGUuZXhwb3J0cz17fTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXBkR1Z5WVhSdmNuTXVhbk1pWFN3aWJtRnRaWE1pT2xzaWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVGQkxFOUJRVTlETEZGQlFWVWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5cGRHVnlZWFJ2Y25NdWFuTWlmUT09IiwibW9kdWxlLmV4cG9ydHM9ITE7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDlzYVdKeVlYSjVMbXB6SWwwc0ltNWhiV1Z6SWpwYkltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQlFTeFBRVUZQUXl4VFFVRlZJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZmJHbGljbUZ5ZVM1cWN5SjkiLCJ2YXIgJGV4cG0xPU1hdGguZXhwbTE7bW9kdWxlLmV4cG9ydHM9ISRleHBtMXx8JGV4cG0xKDEwKT4yMjAyNS40NjU3OTQ4MDY3MTh8fCRleHBtMSgxMCk8MjIwMjUuNDY1Nzk0ODA2NzE4fHwtMmUtMTchPSRleHBtMSgtMmUtMTcpP2Z1bmN0aW9uIGV4cG0xKGUpe3JldHVybiAwPT0oZT0rZSk/ZTplPi0xZS02JiZlPDFlLTY/ZStlKmUvMjpNYXRoLmV4cChlKS0xfTokZXhwbTE7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl0WVhSb0xXVjRjRzB4TG1weklsMHNJbTVoYldWeklqcGJJaVJsZUhCdE1TSXNJazFoZEdnaUxDSmxlSEJ0TVNJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaUxDSjRJaXdpWlhod0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFTeEpRVUZKUVN4UFFVRlRReXhMUVVGTFF5eE5RVU5zUWtNc1QwRkJUME1zVTBGQldVb3NVVUZGWkVFc1QwRkJUeXhKUVVGTkxHOUNRVUZ6UWtFc1QwRkJUeXhKUVVGTkxIRkNRVVUzUWl4UFFVRnVRa0VzVVVGQlVTeFBRVU5VTEZOQlFWTkZMRTFCUVUxSExFZEJRMnBDTEU5QlFXMUNMRWxCUVZoQkxFZEJRVXRCTEVkQlFWVkJMRVZCUVVsQkxFZEJRVXNzVFVGQlVVRXNSVUZCU1N4TFFVRlBRU3hGUVVGSlFTeEZRVUZKUVN4RlFVRkpMRVZCUVVsS0xFdEJRVXRMTEVsQlFVbEVMRWRCUVVzc1IwRkRMMFZNSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZiV0YwYUMxbGVIQnRNUzVxY3lKOSIsInZhciBzaWduPXJlcXVpcmUoXCIuL19tYXRoLXNpZ25cIikscG93PU1hdGgucG93LEVQU0lMT049cG93KDIsLTUyKSxFUFNJTE9OMzI9cG93KDIsLTIzKSxNQVgzMj1wb3coMiwxMjcpKigyLUVQU0lMT04zMiksTUlOMzI9cG93KDIsLTEyNikscm91bmRUaWVzVG9FdmVuPWZ1bmN0aW9uKG8pe3JldHVybiBvKzEvRVBTSUxPTi0xL0VQU0lMT059O21vZHVsZS5leHBvcnRzPU1hdGguZnJvdW5kfHxmdW5jdGlvbiBmcm91bmQobyl7dmFyIG4scixJPU1hdGguYWJzKG8pLE49c2lnbihvKTtyZXR1cm4gSTxNSU4zMj9OKnJvdW5kVGllc1RvRXZlbihJL01JTjMyL0VQU0lMT04zMikqTUlOMzIqRVBTSUxPTjMyOihyPShuPSgxK0VQU0lMT04zMi9FUFNJTE9OKSpJKS0obi1JKSk+TUFYMzJ8fHIhPXI/TiooMS8wKTpOKnJ9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5dFlYUm9MV1p5YjNWdVpDNXFjeUpkTENKdVlXMWxjeUk2V3lKemFXZHVJaXdpY21WeGRXbHlaU0lzSW5CdmR5SXNJazFoZEdnaUxDSkZVRk5KVEU5T0lpd2lSVkJUU1V4UFRqTXlJaXdpVFVGWU16SWlMQ0pOU1U0ek1pSXNJbkp2ZFc1a1ZHbGxjMVJ2UlhabGJpSXNJbTRpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aVpuSnZkVzVrSWl3aWVDSXNJbUVpTENKeVpYTjFiSFFpTENJa1lXSnpJaXdpWVdKeklpd2lKSE5wWjI0aUxDSkpibVpwYm1sMGVTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwRXNTVUZCU1VFc1MwRkJUME1zVVVGQlVTeG5Ra0ZEWmtNc1NVRkJUVU1zUzBGQlMwUXNTVUZEV0VVc1VVRkJWVVlzU1VGQlNTeEhRVUZKTEVsQlEyeENSeXhWUVVGWlNDeEpRVUZKTEVkQlFVa3NTVUZEY0VKSkxFMUJRVkZLTEVsQlFVa3NSVUZCUnl4TlFVRlJMRVZCUVVsSExGZEJRek5DUlN4TlFVRlJUQ3hKUVVGSkxFZEJRVWtzUzBGRmFFSk5MR2RDUVVGclFpeFRRVUZWUXl4SFFVTTVRaXhQUVVGUFFTeEZRVUZKTEVWQlFVbE1MRkZCUVZVc1JVRkJTVUVzVTBGSEwwSk5MRTlCUVU5RExGRkJRVlZTTEV0QlFVdFRMRkZCUVZVc1UwRkJVMEVzVDBGQlQwTXNSMEZET1VNc1NVRkZTVU1zUlVGQlIwTXNSVUZHU0VNc1JVRkJUMklzUzBGQlMyTXNTVUZCU1Vvc1IwRkRhRUpMTEVWQlFWRnNRaXhMUVVGTFlTeEhRVVZxUWl4UFFVRkpSeXhGUVVGUFZDeE5RVUZqVnl4RlFVRlJWaXhuUWtGQlowSlJMRVZCUVU5VUxFMUJRVkZHTEZkQlFXRkZMRTFCUVZGR0xGZEJSWEpHVlN4SFFVUkJSQ3hIUVVGTExFVkJRVWxVTEZWQlFWbEVMRk5CUVZkWkxFbEJRMnhDUml4RlFVRkpSU3hKUVVWTVZpeFBRVUZUVXl4SFFVRlZRU3hGUVVGbFJ5eEhRVUZSUXl4RlFVRkJRU3hIUVVOb1JFUXNSVUZCVVVnaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTl0WVhSb0xXWnliM1Z1WkM1cWN5SjkiLCJtb2R1bGUuZXhwb3J0cz1NYXRoLmxvZzFwfHxmdW5jdGlvbiBsb2cxcChvKXtyZXR1cm4obz0rbyk+LTFlLTgmJm88MWUtOD9vLW8qby8yOk1hdGgubG9nKDErbyl9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5dFlYUm9MV3h2WnpGd0xtcHpJbDBzSW01aGJXVnpJanBiSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKTllYUm9JaXdpYkc5bk1YQWlMQ0o0SWl3aWJHOW5JbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRVUVzVDBGQlQwTXNVVUZCVlVNc1MwRkJTME1zVDBGQlV5eFRRVUZUUVN4TlFVRk5ReXhIUVVNMVF5eFBRVUZSUVN4SFFVRkxRU3hKUVVGTkxFMUJRVkZCTEVWQlFVa3NTMEZCVDBFc1JVRkJTVUVzUlVGQlNVRXNSVUZCU1N4RlFVRkpSaXhMUVVGTFJ5eEpRVUZKTEVWQlFVbEVJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZmJXRjBhQzFzYjJjeGNDNXFjeUo5IiwibW9kdWxlLmV4cG9ydHM9TWF0aC5zY2FsZXx8ZnVuY3Rpb24gc2NhbGUoZSx0LGEsbCxuKXtyZXR1cm4gMD09PWFyZ3VtZW50cy5sZW5ndGh8fGUhPWV8fHQhPXR8fGEhPWF8fGwhPWx8fG4hPW4/TmFOOmU9PT0xLzB8fGU9PT0tMS8wP2U6KGUtdCkqKG4tbCkvKGEtdCkrbH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl0WVhSb0xYTmpZV3hsTG1weklsMHNJbTVoYldWeklqcGJJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0pOWVhSb0lpd2ljMk5oYkdVaUxDSjRJaXdpYVc1TWIzY2lMQ0pwYmtocFoyZ2lMQ0p2ZFhSTWIzY2lMQ0p2ZFhSSWFXZG9JaXdpWVhKbmRXMWxiblJ6SWl3aWJHVnVaM1JvSWl3aVRtRk9JaXdpU1c1bWFXNXBkSGtpWFN3aWJXRndjR2x1WjNNaU9pSkJRVU5CUVN4UFFVRlBReXhSUVVGVlF5eExRVUZMUXl4UFFVRlRMRk5CUVZOQkxFMUJRVTFETEVWQlFVZERMRVZCUVU5RExFVkJRVkZETEVWQlFWRkRMRWRCUTNSRkxFOUJRM1ZDTEVsQlFYSkNReXhWUVVGVlF5eFJRVVZNVGl4SFFVRkxRU3hIUVVWTVF5eEhRVUZUUVN4SFFVVlVReXhIUVVGVlFTeEhRVVZXUXl4SFFVRlZRU3hIUVVWV1F5eEhRVUZYUVN4RlFVTlVSeXhKUVVOTVVDeEpRVUZOVVN4RlFVRkJRU3hIUVVGWlVpeExRVUZQVVN4RlFVRkJRU3hGUVVGcFFsSXNSMEZEZEVOQkxFVkJRVWxETEVsQlFWVkhMRVZCUVZWRUxFbEJRVmRFTEVWQlFWTkVMRWRCUVZORklpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmYldGMGFDMXpZMkZzWlM1cWN5SjkiLCJtb2R1bGUuZXhwb3J0cz1NYXRoLnNpZ258fGZ1bmN0aW9uIHNpZ24obil7cmV0dXJuIDA9PShuPStuKXx8biE9bj9uOm48MD8tMToxfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXRZWFJvTFhOcFoyNHVhbk1pWFN3aWJtRnRaWE1pT2xzaWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0lrMWhkR2dpTENKemFXZHVJaXdpZUNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUTBGQkxFOUJRVTlETEZGQlFWVkRMRXRCUVV0RExFMUJRVkVzVTBGQlUwRXNTMEZCUzBNc1IwRkZNVU1zVDBGQmJVSXNTVUZCV0VFc1IwRkJTMEVzU1VGQlYwRXNSMEZCUzBFc1JVRkJTVUVzUlVGQlNVRXNSVUZCU1N4SFFVRkxMRVZCUVVraUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTl0WVhSb0xYTnBaMjR1YW5NaWZRPT0iLCJ2YXIgTUVUQT1yZXF1aXJlKFwiLi9fdWlkXCIpKFwibWV0YVwiKSxpc09iamVjdD1yZXF1aXJlKFwiLi9faXMtb2JqZWN0XCIpLGhhcz1yZXF1aXJlKFwiLi9faGFzXCIpLHNldERlc2M9cmVxdWlyZShcIi4vX29iamVjdC1kcFwiKS5mLGlkPTAsaXNFeHRlbnNpYmxlPU9iamVjdC5pc0V4dGVuc2libGV8fGZ1bmN0aW9uKCl7cmV0dXJuITB9LEZSRUVaRT0hcmVxdWlyZShcIi4vX2ZhaWxzXCIpKGZ1bmN0aW9uKCl7cmV0dXJuIGlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKX0pLHNldE1ldGE9ZnVuY3Rpb24oZSl7c2V0RGVzYyhlLE1FVEEse3ZhbHVlOntpOlwiT1wiKyArK2lkLHc6e319fSl9LGZhc3RLZXk9ZnVuY3Rpb24oZSx0KXtpZighaXNPYmplY3QoZSkpcmV0dXJuXCJzeW1ib2xcIj09dHlwZW9mIGU/ZTooXCJzdHJpbmdcIj09dHlwZW9mIGU/XCJTXCI6XCJQXCIpK2U7aWYoIWhhcyhlLE1FVEEpKXtpZighaXNFeHRlbnNpYmxlKGUpKXJldHVyblwiRlwiO2lmKCF0KXJldHVyblwiRVwiO3NldE1ldGEoZSl9cmV0dXJuIGVbTUVUQV0uaX0sZ2V0V2Vhaz1mdW5jdGlvbihlLHQpe2lmKCFoYXMoZSxNRVRBKSl7aWYoIWlzRXh0ZW5zaWJsZShlKSlyZXR1cm4hMDtpZighdClyZXR1cm4hMTtzZXRNZXRhKGUpfXJldHVybiBlW01FVEFdLnd9LG9uRnJlZXplPWZ1bmN0aW9uKGUpe3JldHVybiBGUkVFWkUmJm1ldGEuTkVFRCYmaXNFeHRlbnNpYmxlKGUpJiYhaGFzKGUsTUVUQSkmJnNldE1ldGEoZSksZX0sbWV0YT1tb2R1bGUuZXhwb3J0cz17S0VZOk1FVEEsTkVFRDohMSxmYXN0S2V5OmZhc3RLZXksZ2V0V2VhazpnZXRXZWFrLG9uRnJlZXplOm9uRnJlZXplfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXRaWFJoTG1weklsMHNJbTVoYldWeklqcGJJazFGVkVFaUxDSnlaWEYxYVhKbElpd2lhWE5QWW1wbFkzUWlMQ0pvWVhNaUxDSnpaWFJFWlhOaklpd2laaUlzSW1sa0lpd2lhWE5GZUhSbGJuTnBZbXhsSWl3aVQySnFaV04wSWl3aVJsSkZSVnBGSWl3aWNISmxkbVZ1ZEVWNGRHVnVjMmx2Ym5NaUxDSnpaWFJOWlhSaElpd2lhWFFpTENKMllXeDFaU0lzSW1raUxDSjNJaXdpWm1GemRFdGxlU0lzSW1OeVpXRjBaU0lzSW1kbGRGZGxZV3NpTENKdmJrWnlaV1Y2WlNJc0ltMWxkR0VpTENKT1JVVkVJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSWt0RldTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNTVUZCU1VFc1MwRkJUME1zVVVGQlVTeFRRVUZTUVN4RFFVRnJRaXhSUVVONlFrTXNVMEZCVjBRc1VVRkJVU3huUWtGRGJrSkZMRWxCUVUxR0xGRkJRVkVzVlVGRFpFY3NVVUZCVlVnc1VVRkJVU3huUWtGQlowSkpMRVZCUTJ4RFF5eEhRVUZMTEVWQlEweERMR0ZCUVdWRExFOUJRVTlFTEdOQlFXZENMRmRCUTNoRExFOUJRVThzUjBGRlRFVXNVVUZCVlZJc1VVRkJVU3hYUVVGU1FTeERRVUZ2UWl4WFFVTm9ReXhQUVVGUFRTeGhRVUZoUXl4UFFVRlBSU3hyUWtGQmEwSXNUMEZGTTBORExGRkJRVlVzVTBGQlZVTXNSMEZEZEVKU0xGRkJRVkZSTEVWQlFVbGFMRXRCUVUwc1EwRkJSV0VzVFVGQlR5eERRVU42UWtNc1JVRkJSeXhQUVVGUlVpeEhRVU5ZVXl4RlFVRkhMRTlCUjBoRExGRkJRVlVzVTBGQlZVb3NSVUZCU1Vzc1IwRkZNVUlzU1VGQlMyWXNVMEZCVTFVc1IwRkJTeXhOUVVGdlFpeHBRa0ZCVGtFc1JVRkJhVUpCTEVkQlFXMUNMR2xDUVVGT1FTeEZRVUZwUWl4SlFVRk5MRXRCUVU5QkxFVkJRemRHTEVsQlFVdFVMRWxCUVVsVExFVkJRVWxhTEUxQlFVOHNRMEZGYkVJc1NVRkJTMDhzWVVGQllVc3NSMEZCU3l4TlFVRlBMRWxCUlRsQ0xFbEJRVXRMTEVWQlFWRXNUVUZCVHl4SlFVVndRazRzVVVGQlVVTXNSMEZGVWl4UFFVRlBRU3hGUVVGSFdpeE5RVUZOWXl4SFFVVm9Ra2tzVVVGQlZTeFRRVUZWVGl4RlFVRkpTeXhIUVVNeFFpeEpRVUZMWkN4SlFVRkpVeXhGUVVGSldpeE5RVUZQTEVOQlJXeENMRWxCUVV0UExHRkJRV0ZMTEVkQlFVc3NUMEZCVHl4RlFVVTVRaXhKUVVGTFN5eEZRVUZSTEU5QlFVOHNSVUZGY0VKT0xGRkJRVkZETEVkQlJWSXNUMEZCVDBFc1JVRkJSMW9zVFVGQlRXVXNSMEZIYUVKSkxGTkJRVmNzVTBGQlZWQXNSMEZGZGtJc1QwRkVTVWdzVVVGQlZWY3NTMEZCUzBNc1RVRkJVV1FzWVVGQllVc3NTMEZCVVZRc1NVRkJTVk1zUlVGQlNWb3NUMEZCVDFjc1VVRkJVVU1zUjBGRGFFVkJMRWRCUlV4UkxFdEJRVTlGTEU5QlFVOURMRkZCUVZVc1EwRkRNVUpETEVsQlFVdDRRaXhMUVVOTWNVSXNUVUZCVFN4RlFVTk9UQ3hSUVVGVFFTeFJRVU5VUlN4UlFVRlRRU3hSUVVOVVF5eFRRVUZWUVNJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYMjFsZEdFdWFuTWlmUT09IiwidmFyIE1hcD1yZXF1aXJlKFwiLi9lczYubWFwXCIpLCRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKSxzaGFyZWQ9cmVxdWlyZShcIi4vX3NoYXJlZFwiKShcIm1ldGFkYXRhXCIpLHN0b3JlPXNoYXJlZC5zdG9yZXx8KHNoYXJlZC5zdG9yZT1uZXcocmVxdWlyZShcIi4vZXM2LndlYWstbWFwXCIpKSksZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcD1mdW5jdGlvbihlLGEsdCl7dmFyIHI9c3RvcmUuZ2V0KGUpO2lmKCFyKXtpZighdClyZXR1cm47c3RvcmUuc2V0KGUscj1uZXcgTWFwKX12YXIgbj1yLmdldChhKTtpZighbil7aWYoIXQpcmV0dXJuO3Iuc2V0KGEsbj1uZXcgTWFwKX1yZXR1cm4gbn0sb3JkaW5hcnlIYXNPd25NZXRhZGF0YT1mdW5jdGlvbihlLGEsdCl7dmFyIHI9Z2V0T3JDcmVhdGVNZXRhZGF0YU1hcChhLHQsITEpO3JldHVybiB2b2lkIDAhPT1yJiZyLmhhcyhlKX0sb3JkaW5hcnlHZXRPd25NZXRhZGF0YT1mdW5jdGlvbihlLGEsdCl7dmFyIHI9Z2V0T3JDcmVhdGVNZXRhZGF0YU1hcChhLHQsITEpO3JldHVybiB2b2lkIDA9PT1yP3ZvaWQgMDpyLmdldChlKX0sb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YT1mdW5jdGlvbihlLGEsdCxyKXtnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKHQsciwhMCkuc2V0KGUsYSl9LG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzPWZ1bmN0aW9uKGUsYSl7dmFyIHQ9Z2V0T3JDcmVhdGVNZXRhZGF0YU1hcChlLGEsITEpLHI9W107cmV0dXJuIHQmJnQuZm9yRWFjaChmdW5jdGlvbihlLGEpe3IucHVzaChhKX0pLHJ9LHRvTWV0YUtleT1mdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwPT09ZXx8XCJzeW1ib2xcIj09dHlwZW9mIGU/ZTpTdHJpbmcoZSl9LGV4cD1mdW5jdGlvbihlKXskZXhwb3J0KCRleHBvcnQuUyxcIlJlZmxlY3RcIixlKX07bW9kdWxlLmV4cG9ydHM9e3N0b3JlOnN0b3JlLG1hcDpnZXRPckNyZWF0ZU1ldGFkYXRhTWFwLGhhczpvcmRpbmFyeUhhc093bk1ldGFkYXRhLGdldDpvcmRpbmFyeUdldE93bk1ldGFkYXRhLHNldDpvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhLGtleXM6b3JkaW5hcnlPd25NZXRhZGF0YUtleXMsa2V5OnRvTWV0YUtleSxleHA6ZXhwfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXRaWFJoWkdGMFlTNXFjeUpkTENKdVlXMWxjeUk2V3lKTllYQWlMQ0p5WlhGMWFYSmxJaXdpSkdWNGNHOXlkQ0lzSW5Ob1lYSmxaQ0lzSW5OMGIzSmxJaXdpWjJWMFQzSkRjbVZoZEdWTlpYUmhaR0YwWVUxaGNDSXNJblJoY21kbGRDSXNJblJoY21kbGRFdGxlU0lzSW1OeVpXRjBaU0lzSW5SaGNtZGxkRTFsZEdGa1lYUmhJaXdpWjJWMElpd2ljMlYwSWl3aWEyVjVUV1YwWVdSaGRHRWlMQ0p2Y21ScGJtRnllVWhoYzA5M2JrMWxkR0ZrWVhSaElpd2lUV1YwWVdSaGRHRkxaWGtpTENKUElpd2lVQ0lzSW0xbGRHRmtZWFJoVFdGd0lpd2lkVzVrWldacGJtVmtJaXdpYUdGeklpd2liM0prYVc1aGNubEhaWFJQZDI1TlpYUmhaR0YwWVNJc0ltOXlaR2x1WVhKNVJHVm1hVzVsVDNkdVRXVjBZV1JoZEdFaUxDSk5aWFJoWkdGMFlWWmhiSFZsSWl3aWIzSmthVzVoY25sUGQyNU5aWFJoWkdGMFlVdGxlWE1pTENKclpYbHpJaXdpWm05eVJXRmphQ0lzSWw4aUxDSnJaWGtpTENKd2RYTm9JaXdpZEc5TlpYUmhTMlY1SWl3aWFYUWlMQ0pUZEhKcGJtY2lMQ0psZUhBaUxDSlRJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSW0xaGNDSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNTVUZCU1VFc1NVRkJUVU1zVVVGQlVTeGhRVU5rUXl4UlFVRlZSQ3hSUVVGUkxHRkJRMnhDUlN4UFFVRlRSaXhSUVVGUkxGbEJRVkpCTEVOQlFYRkNMRmxCUXpsQ1J5eE5RVUZSUkN4UFFVRlBReXhSUVVGVlJDeFBRVUZQUXl4TlFVRlJMRWxCUVV0SUxGRkJRVkVzYjBKQlJYSkVTU3gxUWtGQmVVSXNVMEZCVlVNc1JVRkJVVU1zUlVGQlYwTXNSMEZEZUVRc1NVRkJTVU1zUlVGQmFVSk1MRTFCUVUxTkxFbEJRVWxLTEVkQlF5OUNMRWxCUVV0SExFVkJRV2RDTEVOQlEyNUNMRWxCUVV0RUxFVkJRVkVzVDBGRFlrb3NUVUZCVFU4c1NVRkJTVXdzUlVGQlVVY3NSVUZCYVVJc1NVRkJTVlFzUzBGRmVrTXNTVUZCU1Zrc1JVRkJZMGdzUlVGQlpVTXNTVUZCU1Vnc1IwRkRja01zU1VGQlMwc3NSVUZCWVN4RFFVTm9RaXhKUVVGTFNpeEZRVUZSTEU5QlEySkRMRVZCUVdWRkxFbEJRVWxLTEVWQlFWZExMRVZCUVdNc1NVRkJTVm9zUzBGRGFFUXNUMEZCVDFrc1IwRkZVRU1zZFVKQlFYbENMRk5CUVZWRExFVkJRV0ZETEVWQlFVZERMRWRCUTNKRUxFbEJRVWxETEVWQlFXTmFMSFZDUVVGMVFsVXNSVUZCUjBNc1IwRkJSeXhIUVVNdlF5eFpRVUYxUWtVc1NVRkJhRUpFTEVkQlFXOURRU3hGUVVGWlJTeEpRVUZKVEN4SlFVVjZSRTBzZFVKQlFYbENMRk5CUVZWT0xFVkJRV0ZETEVWQlFVZERMRWRCUTNKRUxFbEJRVWxETEVWQlFXTmFMSFZDUVVGMVFsVXNSVUZCUjBNc1IwRkJSeXhIUVVNdlF5eFpRVUYxUWtVc1NVRkJhRUpFTEU5QlFUUkNReXhGUVVGWlJDeEZRVUZaVUN4SlFVRkpTU3hKUVVVM1JFOHNNRUpCUVRSQ0xGTkJRVlZRTEVWQlFXRlJMRVZCUVdWUUxFVkJRVWRETEVkQlEzWkZXQ3gxUWtGQmRVSlZMRVZCUVVkRExFZEJRVWNzUjBGQlRVd3NTVUZCU1Vjc1JVRkJZVkVzU1VGRmJFUkRMSGRDUVVFd1FpeFRRVUZWYWtJc1JVRkJVVU1zUjBGRE9VTXNTVUZCU1ZVc1JVRkJZMW9zZFVKQlFYVkNReXhGUVVGUlF5eEhRVUZYTEVkQlEzaEVhVUlzUlVGQlR5eEhRVVZZTEU5QlJFbFFMRWRCUVdGQkxFVkJRVmxSTEZGQlFWRXNVMEZCVlVNc1JVRkJSME1zUjBGQlQwZ3NSVUZCUzBrc1MwRkJTMFFzUzBGRE5VUklMRWRCUlV4TExGVkJRVmtzVTBGQlZVTXNSMEZEZUVJc1dVRkJZMW9zU1VGQlVGa3NSMEZCYVVNc2FVSkJRVTVCTEVWQlFXbENRU3hGUVVGTFF5eFBRVUZQUkN4SlFVVTNSRVVzU1VGQlRTeFRRVUZWYWtJc1IwRkRiRUppTEZGQlFWRkJMRkZCUVZFclFpeEZRVUZITEZWQlFWZHNRaXhKUVVkb1EyMUNMRTlCUVU5RExGRkJRVlVzUTBGRFppOUNMRTFCUVU5QkxFMUJRMUJuUXl4SlFVRkxMMElzZFVKQlEweGpMRWxCUVV0T0xIVkNRVU5NU0N4SlFVRkxWU3gxUWtGRFRGUXNTVUZCUzFVc01FSkJRMHhITEV0QlFVMUVMSGRDUVVOT1NTeEpRVUZMUlN4VlFVTk1SeXhKUVVGTFFTSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDIxbGRHRmtZWFJoTG1wekluMD0iLCJ2YXIgZ2xvYmFsPXJlcXVpcmUoXCIuL19nbG9iYWxcIiksbWFjcm90YXNrPXJlcXVpcmUoXCIuL190YXNrXCIpLnNldCxPYnNlcnZlcj1nbG9iYWwuTXV0YXRpb25PYnNlcnZlcnx8Z2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXIscHJvY2Vzcz1nbG9iYWwucHJvY2VzcyxQcm9taXNlPWdsb2JhbC5Qcm9taXNlLGlzTm9kZT1cInByb2Nlc3NcIj09cmVxdWlyZShcIi4vX2NvZlwiKShwcm9jZXNzKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbigpe3ZhciBlLG8scixhPWZ1bmN0aW9uKCl7dmFyIGEscztmb3IoaXNOb2RlJiYoYT1wcm9jZXNzLmRvbWFpbikmJmEuZXhpdCgpO2U7KXtzPWUuZm4sZT1lLm5leHQ7dHJ5e3MoKX1jYXRjaChhKXt0aHJvdyBlP3IoKTpvPXZvaWQgMCxhfX1vPXZvaWQgMCxhJiZhLmVudGVyKCl9O2lmKGlzTm9kZSlyPWZ1bmN0aW9uKCl7cHJvY2Vzcy5uZXh0VGljayhhKX07ZWxzZSBpZighT2JzZXJ2ZXJ8fGdsb2JhbC5uYXZpZ2F0b3ImJmdsb2JhbC5uYXZpZ2F0b3Iuc3RhbmRhbG9uZSlpZihQcm9taXNlJiZQcm9taXNlLnJlc29sdmUpe3ZhciBzPVByb21pc2UucmVzb2x2ZSh2b2lkIDApO3I9ZnVuY3Rpb24oKXtzLnRoZW4oYSl9fWVsc2Ugcj1mdW5jdGlvbigpe21hY3JvdGFzay5jYWxsKGdsb2JhbCxhKX07ZWxzZXt2YXIgdD0hMCxpPWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiXCIpO25ldyBPYnNlcnZlcihhKS5vYnNlcnZlKGkse2NoYXJhY3RlckRhdGE6ITB9KSxyPWZ1bmN0aW9uKCl7aS5kYXRhPXQ9IXR9fXJldHVybiBmdW5jdGlvbihhKXt2YXIgcz17Zm46YSxuZXh0OnZvaWQgMH07byYmKG8ubmV4dD1zKSxlfHwoZT1zLHIoKSksbz1zfX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl0YVdOeWIzUmhjMnN1YW5NaVhTd2libUZ0WlhNaU9sc2laMnh2WW1Gc0lpd2ljbVZ4ZFdseVpTSXNJbTFoWTNKdmRHRnpheUlzSW5ObGRDSXNJazlpYzJWeWRtVnlJaXdpVFhWMFlYUnBiMjVQWW5ObGNuWmxjaUlzSWxkbFlrdHBkRTExZEdGMGFXOXVUMkp6WlhKMlpYSWlMQ0p3Y205alpYTnpJaXdpVUhKdmJXbHpaU0lzSW1selRtOWtaU0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKb1pXRmtJaXdpYkdGemRDSXNJbTV2ZEdsbWVTSXNJbVpzZFhOb0lpd2ljR0Z5Wlc1MElpd2labTRpTENKa2IyMWhhVzRpTENKbGVHbDBJaXdpYm1WNGRDSXNJbVVpTENKMWJtUmxabWx1WldRaUxDSmxiblJsY2lJc0ltNWxlSFJVYVdOcklpd2libUYyYVdkaGRHOXlJaXdpYzNSaGJtUmhiRzl1WlNJc0luSmxjMjlzZG1VaUxDSndjbTl0YVhObElpd2lkR2hsYmlJc0ltTmhiR3dpTENKMGIyZG5iR1VpTENKdWIyUmxJaXdpWkc5amRXMWxiblFpTENKamNtVmhkR1ZVWlhoMFRtOWtaU0lzSW05aWMyVnlkbVVpTENKamFHRnlZV04wWlhKRVlYUmhJaXdpWkdGMFlTSXNJblJoYzJzaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFbEJRVWxCTEU5QlFWTkRMRkZCUVZFc1lVRkRha0pETEZWQlFWbEVMRkZCUVZFc1YwRkJWMFVzU1VGREwwSkRMRk5CUVZkS0xFOUJRVTlMTEd0Q1FVRnZRa3dzVDBGQlQwMHNkVUpCUXpkRFF5eFJRVUZWVUN4UFFVRlBUeXhSUVVOcVFrTXNVVUZCVlZJc1QwRkJUMUVzVVVGRGFrSkRMRTlCUVhWRExGZEJRVGxDVWl4UlFVRlJMRk5CUVZKQkxFTkJRV3RDVFN4VFFVVXZRa2NzVDBGQlQwTXNVVUZCVlN4WFFVTm1MRWxCUVVsRExFVkJRVTFETEVWQlFVMURMRVZCUlZwRExFVkJRVkVzVjBGRFZpeEpRVUZKUXl4RlFVRlJReXhGUVVWYUxFbEJSRWxTTEZOQlFWZFBMRVZCUVZOVUxGRkJRVkZYTEZOQlFWTkdMRVZCUVU5SExFOUJRM3BEVUN4SFFVRk5MRU5CUTFoTExFVkJRVXRNTEVWQlFVdExMRWRCUTFaTUxFVkJRVTlCTEVWQlFVdFJMRXRCUTFvc1NVRkRSVWdzU1VGRFFTeE5RVUZQU1N4SFFVZFFMRTFCUmtsVUxFVkJRVTFGTEVsQlEweEVMRTlCUVU5VExFVkJRMDVFTEVkQlJWSlNMRTlCUVU5VExFVkJRMHhPTEVkQlFWRkJMRVZCUVU5UExGTkJTWEpDTEVkQlFVbGtMRTlCUTBaTExFVkJRVk1zVjBGRFVGQXNVVUZCVVdsQ0xGTkJRVk5VTEZOQlIyUXNTVUZCU1Znc1ZVRkJZMG9zVDBGQlQzbENMRmRCUVdGNlFpeFBRVUZQZVVJc1ZVRkJWVU1zVjBGUmRrUXNSMEZCU1d4Q0xGTkJRVmRCTEZGQlFWRnRRaXhSUVVGVExFTkJSWEpETEVsQlFVbERMRVZCUVZWd1FpeFJRVUZSYlVJc1lVRkJVVXdzUjBGRE9VSlNMRVZCUVZNc1YwRkRVR01zUlVGQlVVTXNTMEZCUzJRc1UwRlRaa1FzUlVGQlV5eFhRVVZRV2l4VlFVRlZORUlzUzBGQlN6bENMRTlCUVZGbExGRkJka0puUkN4RFFVTjZSU3hKUVVGSlowSXNSMEZCVXl4RlFVTlVReXhGUVVGUFF5eFRRVUZUUXl4bFFVRmxMRWxCUTI1RExFbEJRVWs1UWl4VFFVRlRWeXhIUVVGUGIwSXNVVUZCVVVnc1JVRkJUU3hEUVVGRlNTeGxRVUZsTEVsQlEyNUVkRUlzUlVGQlV5eFhRVU5RYTBJc1JVRkJTMHNzUzBGQlQwNHNSMEZCVlVFc1IwRnpRakZDTEU5QlFVOHNVMEZCVldRc1IwRkRaaXhKUVVGSmNVSXNSVUZCVHl4RFFVRkZja0lzUjBGQlNVRXNSVUZCU1Vjc1ZVRkJUVVVzUjBGRGRrSlVMRWxCUVUxQkxFVkJRVXRQTEV0QlFVOXJRaXhIUVVOcVFqRkNMRWxCUTBoQkxFVkJRVTh3UWl4RlFVTlFlRUlzUzBGRFFVUXNSVUZCVDNsQ0lpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmYldsamNtOTBZWE5yTG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgYUZ1bmN0aW9uPXJlcXVpcmUoXCIuL19hLWZ1bmN0aW9uXCIpO2Z1bmN0aW9uIFByb21pc2VDYXBhYmlsaXR5KGkpe3ZhciBvLHI7dGhpcy5wcm9taXNlPW5ldyBpKGZ1bmN0aW9uKGksdCl7aWYodm9pZCAwIT09b3x8dm9pZCAwIT09cil0aHJvdyBUeXBlRXJyb3IoXCJCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvclwiKTtvPWkscj10fSksdGhpcy5yZXNvbHZlPWFGdW5jdGlvbihvKSx0aGlzLnJlamVjdD1hRnVuY3Rpb24ocil9bW9kdWxlLmV4cG9ydHMuZj1mdW5jdGlvbihpKXtyZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KGkpfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXVaWGN0Y0hKdmJXbHpaUzFqWVhCaFltbHNhWFI1TG1weklsMHNJbTVoYldWeklqcGJJbUZHZFc1amRHbHZiaUlzSW5KbGNYVnBjbVVpTENKUWNtOXRhWE5sUTJGd1lXSnBiR2wwZVNJc0lrTWlMQ0p5WlhOdmJIWmxJaXdpY21WcVpXTjBJaXdpZEdocGN5SXNJbkJ5YjIxcGMyVWlMQ0lrSkhKbGMyOXNkbVVpTENJa0pISmxhbVZqZENJc0luVnVaR1ZtYVc1bFpDSXNJbFI1Y0dWRmNuSnZjaUlzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKbUlsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVVZCTEVsQlFVbEJMRlZCUVZsRExGRkJRVkVzYVVKQlJYaENMRk5CUVZORExHdENRVUZyUWtNc1IwRkRla0lzU1VGQlNVTXNSVUZCVTBNc1JVRkRZa01zUzBGQlMwTXNVVUZCVlN4SlFVRkpTaXhGUVVGRkxGTkJRVlZMTEVWQlFWZERMRWRCUTNoRExGRkJRV2RDUXl4SlFVRmFUaXhSUVVGdlEwMHNTVUZCV0V3c1JVRkJjMElzVFVGQlRVMHNWVUZCVlN3eVFrRkRia1ZRTEVWQlFWVkpMRVZCUTFaSUxFVkJRVk5KTEVsQlJWaElMRXRCUVV0R0xGRkJRVlZLTEZWQlFWVkpMRWRCUTNwQ1JTeExRVUZMUkN4UFFVRlRUQ3hWUVVGVlN5eEhRVWN4UWs4c1QwRkJUME1zVVVGQlVVTXNSVUZCU1N4VFFVRlZXQ3hIUVVNelFpeFBRVUZQTEVsQlFVbEVMR3RDUVVGclFrTWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5dVpYY3RjSEp2YldselpTMWpZWEJoWW1sc2FYUjVMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBnZXRLZXlzPXJlcXVpcmUoXCIuL19vYmplY3Qta2V5c1wiKSxnT1BTPXJlcXVpcmUoXCIuL19vYmplY3QtZ29wc1wiKSxwSUU9cmVxdWlyZShcIi4vX29iamVjdC1waWVcIiksdG9PYmplY3Q9cmVxdWlyZShcIi4vX3RvLW9iamVjdFwiKSxJT2JqZWN0PXJlcXVpcmUoXCIuL19pb2JqZWN0XCIpLCRhc3NpZ249T2JqZWN0LmFzc2lnbjttb2R1bGUuZXhwb3J0cz0hJGFzc2lnbnx8cmVxdWlyZShcIi4vX2ZhaWxzXCIpKGZ1bmN0aW9uKCl7dmFyIGU9e30sdD17fSxyPVN5bWJvbCgpLHM9XCJhYmNkZWZnaGlqa2xtbm9wcXJzdFwiO3JldHVybiBlW3JdPTcscy5zcGxpdChcIlwiKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3RbZV09ZX0pLDchPSRhc3NpZ24oe30sZSlbcl18fE9iamVjdC5rZXlzKCRhc3NpZ24oe30sdCkpLmpvaW4oXCJcIikhPXN9KT9mdW5jdGlvbiBhc3NpZ24oZSx0KXtmb3IodmFyIHI9dG9PYmplY3QoZSkscz1hcmd1bWVudHMubGVuZ3RoLGk9MSxvPWdPUFMuZixjPXBJRS5mO3M+aTspZm9yKHZhciBuLGE9SU9iamVjdChhcmd1bWVudHNbaSsrXSksZz1vP2dldEtleXMoYSkuY29uY2F0KG8oYSkpOmdldEtleXMoYSksYj1nLmxlbmd0aCxqPTA7Yj5qOyljLmNhbGwoYSxuPWdbaisrXSkmJihyW25dPWFbbl0pO3JldHVybiByfTokYXNzaWduO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5dlltcGxZM1F0WVhOemFXZHVMbXB6SWwwc0ltNWhiV1Z6SWpwYkltZGxkRXRsZVhNaUxDSnlaWEYxYVhKbElpd2laMDlRVXlJc0luQkpSU0lzSW5SdlQySnFaV04wSWl3aVNVOWlhbVZqZENJc0lpUmhjM05wWjI0aUxDSlBZbXBsWTNRaUxDSmhjM05wWjI0aUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2lRU0lzSWtJaUxDSlRJaXdpVTNsdFltOXNJaXdpU3lJc0luTndiR2wwSWl3aVptOXlSV0ZqYUNJc0ltc2lMQ0pyWlhseklpd2lhbTlwYmlJc0luUmhjbWRsZENJc0luTnZkWEpqWlNJc0lsUWlMQ0poVEdWdUlpd2lZWEpuZFcxbGJuUnpJaXdpYkdWdVozUm9JaXdpYVc1a1pYZ2lMQ0puWlhSVGVXMWliMnh6SWl3aVppSXNJbWx6Ulc1MWJTSXNJbXRsZVNJc0ltTnZibU5oZENJc0ltb2lMQ0pqWVd4c0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVVZCTEVsQlFVbEJMRkZCUVZWRExGRkJRVkVzYTBKQlEyeENReXhMUVVGUFJDeFJRVUZSTEd0Q1FVTm1SU3hKUVVGTlJpeFJRVUZSTEdsQ1FVTmtSeXhUUVVGWFNDeFJRVUZSTEdkQ1FVTnVRa2tzVVVGQlZVb3NVVUZCVVN4alFVTnNRa3NzVVVGQlZVTXNUMEZCVDBNc1QwRkhja0pETEU5QlFVOURMRk5CUVZkS0xGTkJRVmRNTEZGQlFWRXNWMEZCVWtFc1EwRkJiMElzVjBGREwwTXNTVUZCU1ZVc1JVRkJTU3hIUVVOS1F5eEZRVUZKTEVkQlJVcERMRVZCUVVsRExGTkJRMHBETEVWQlFVa3NkVUpCUjFJc1QwRkdRVW9zUlVGQlJVVXNSMEZCU3l4RlFVTlFSU3hGUVVGRlF5eE5RVUZOTEVsQlFVbERMRkZCUVZFc1UwRkJWVU1zUjBGQlMwNHNSVUZCUlUwc1IwRkJTMEVzU1VGRFpDeEhRVUZ5UWxvc1VVRkJVU3hIUVVGSlN5eEhRVUZIUlN4SlFVRlhUaXhQUVVGUFdTeExRVUZMWWl4UlFVRlJMRWRCUVVsTkxFbEJRVWxSTEV0QlFVc3NTMEZCVDB3c1NVRkRkRVVzVTBGQlUxQXNUMEZCVDJFc1JVRkJVVU1zUjBGTk0wSXNTVUZNUVN4SlFVRkpReXhGUVVGSmJrSXNVMEZCVTJsQ0xFZEJRMkpITEVWQlFVOURMRlZCUVZWRExFOUJRMnBDUXl4RlFVRlJMRVZCUTFKRExFVkJRV0V4UWl4TFFVRkxNa0lzUlVGRGJFSkRMRVZCUVZNelFpeEpRVUZKTUVJc1JVRkRWa3dzUlVGQlQwY3NSMEZOV2l4SlFVeEJMRWxCU1VsSkxFVkJTa0ZzUWl4RlFVRkpVaXhSUVVGUmIwSXNWVUZCVlVVc1RVRkRkRUpTTEVWQlFVOVRMRVZCUVdFMVFpeFJRVUZSWVN4SFFVRkhiVUlzVDBGQlQwb3NSVUZCVjJZc1NVRkJUV0lzVVVGQlVXRXNSMEZETDBSaExFVkJRVk5RTEVWQlFVdFBMRTlCUTJSUExFVkJRVWtzUlVGRlJGQXNSVUZCVTA4c1IwRkJUMGdzUlVGQlQwa3NTMEZCUzNKQ0xFVkJRVWRyUWl4RlFVRk5XaXhGUVVGTFl5eFJRVUZQVml4RlFVRkZVU3hIUVVGUGJFSXNSVUZCUld0Q0xFbEJRMjVGTEU5QlFVOVNMRWRCUTFCcVFpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDI5aWFtVmpkQzFoYzNOcFoyNHVhbk1pZlE9PSIsInZhciBhbk9iamVjdD1yZXF1aXJlKFwiLi9fYW4tb2JqZWN0XCIpLGRQcz1yZXF1aXJlKFwiLi9fb2JqZWN0LWRwc1wiKSxlbnVtQnVnS2V5cz1yZXF1aXJlKFwiLi9fZW51bS1idWcta2V5c1wiKSxJRV9QUk9UTz1yZXF1aXJlKFwiLi9fc2hhcmVkLWtleVwiKShcIklFX1BST1RPXCIpLEVtcHR5PWZ1bmN0aW9uKCl7fSxQUk9UT1RZUEU9XCJwcm90b3R5cGVcIixjcmVhdGVEaWN0PWZ1bmN0aW9uKCl7dmFyIGUsdD1yZXF1aXJlKFwiLi9fZG9tLWNyZWF0ZVwiKShcImlmcmFtZVwiKSxyPWVudW1CdWdLZXlzLmxlbmd0aDtmb3IodC5zdHlsZS5kaXNwbGF5PVwibm9uZVwiLHJlcXVpcmUoXCIuL19odG1sXCIpLmFwcGVuZENoaWxkKHQpLHQuc3JjPVwiamF2YXNjcmlwdDpcIiwoZT10LmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQpLm9wZW4oKSxlLndyaXRlKFwiPHNjcmlwdD5kb2N1bWVudC5GPU9iamVjdDxcXC9zY3JpcHQ+XCIpLGUuY2xvc2UoKSxjcmVhdGVEaWN0PWUuRjtyLS07KWRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbcl1dO3JldHVybiBjcmVhdGVEaWN0KCl9O21vZHVsZS5leHBvcnRzPU9iamVjdC5jcmVhdGV8fGZ1bmN0aW9uIGNyZWF0ZShlLHQpe3ZhciByO3JldHVybiBudWxsIT09ZT8oRW1wdHlbUFJPVE9UWVBFXT1hbk9iamVjdChlKSxyPW5ldyBFbXB0eSxFbXB0eVtQUk9UT1RZUEVdPW51bGwscltJRV9QUk9UT109ZSk6cj1jcmVhdGVEaWN0KCksdm9pZCAwPT09dD9yOmRQcyhyLHQpfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXZZbXBsWTNRdFkzSmxZWFJsTG1weklsMHNJbTVoYldWeklqcGJJbUZ1VDJKcVpXTjBJaXdpY21WeGRXbHlaU0lzSW1SUWN5SXNJbVZ1ZFcxQ2RXZExaWGx6SWl3aVNVVmZVRkpQVkU4aUxDSkZiWEIwZVNJc0lsQlNUMVJQVkZsUVJTSXNJbU55WldGMFpVUnBZM1FpTENKcFpuSmhiV1ZFYjJOMWJXVnVkQ0lzSW1sbWNtRnRaU0lzSW1raUxDSnNaVzVuZEdnaUxDSnpkSGxzWlNJc0ltUnBjM0JzWVhraUxDSmhjSEJsYm1SRGFHbHNaQ0lzSW5OeVl5SXNJbU52Ym5SbGJuUlhhVzVrYjNjaUxDSmtiMk4xYldWdWRDSXNJbTl3Wlc0aUxDSjNjbWwwWlNJc0lteDBJaXdpWTJ4dmMyVWlMQ0pHSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0lrOWlhbVZqZENJc0ltTnlaV0YwWlNJc0lrOGlMQ0pRY205d1pYSjBhV1Z6SWl3aWNtVnpkV3gwSWl3aWRXNWtaV1pwYm1Wa0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFTeEpRVUZKUVN4VFFVRlhReXhSUVVGUkxHZENRVU51UWtNc1NVRkJUVVFzVVVGQlVTeHBRa0ZEWkVVc1dVRkJZMFlzVVVGQlVTeHZRa0ZEZEVKSExGTkJRVmRJTEZGQlFWRXNaMEpCUVZKQkxFTkJRWGxDTEZsQlEzQkRTU3hOUVVGUkxHRkJRMUpETEZWQlFWa3NXVUZIV2tNc1YwRkJZU3hYUVVWbUxFbEJTVWxETEVWQlNrRkRMRVZCUVZOU0xGRkJRVkVzWjBKQlFWSkJMRU5CUVhsQ0xGVkJRMnhEVXl4RlFVRkpVQ3haUVVGWlVTeFBRV053UWl4SlFWWkJSaXhGUVVGUFJ5eE5RVUZOUXl4UlFVRlZMRTlCUTNaQ1dpeFJRVUZSTEZkQlFWZGhMRmxCUVZsTUxFZEJReTlDUVN4RlFVRlBUU3hKUVVGTkxHVkJSMkpRTEVWQlFXbENReXhGUVVGUFR5eGpRVUZqUXl4VlFVTjJRa01zVDBGRFpsWXNSVUZCWlZjc1RVRkJUVU1zZFVOQlEzSkNXaXhGUVVGbFlTeFJRVU5tWkN4WFFVRmhReXhGUVVGbFl5eEZRVU55UWxvc1dVRkJXVWdzVjBGQlYwUXNWMEZCVjBnc1dVRkJXVThzU1VGRGNrUXNUMEZCVDBnc1kwRkhWR2RDTEU5QlFVOURMRkZCUVZWRExFOUJRVTlETEZGQlFWVXNVMEZCVTBFc1QwRkJUME1zUlVGQlIwTXNSMEZEYmtRc1NVRkJTVU1zUlVGUlNpeFBRVkJWTEU5QlFVNUdMRWRCUTBaMFFpeE5RVUZOUXl4WFFVRmhUaXhUUVVGVE1rSXNSMEZETlVKRkxFVkJRVk1zU1VGQlNYaENMRTFCUTJKQkxFMUJRVTFETEZkQlFXRXNTMEZGYmtKMVFpeEZRVUZQZWtJc1ZVRkJXWFZDTEVkQlEyUkZMRVZCUVZOMFFpeHJRa0ZEVFhWQ0xFbEJRV1pHTEVWQlFUSkNReXhGUVVGVE0wSXNTVUZCU1RKQ0xFVkJRVkZFSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZiMkpxWldOMExXTnlaV0YwWlM1cWN5SjkiLCJ2YXIgYW5PYmplY3Q9cmVxdWlyZShcIi4vX2FuLW9iamVjdFwiKSxJRThfRE9NX0RFRklORT1yZXF1aXJlKFwiLi9faWU4LWRvbS1kZWZpbmVcIiksdG9QcmltaXRpdmU9cmVxdWlyZShcIi4vX3RvLXByaW1pdGl2ZVwiKSxkUD1PYmplY3QuZGVmaW5lUHJvcGVydHk7ZXhwb3J0cy5mPXJlcXVpcmUoXCIuL19kZXNjcmlwdG9yc1wiKT9PYmplY3QuZGVmaW5lUHJvcGVydHk6ZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoZSxyLHQpe2lmKGFuT2JqZWN0KGUpLHI9dG9QcmltaXRpdmUociwhMCksYW5PYmplY3QodCksSUU4X0RPTV9ERUZJTkUpdHJ5e3JldHVybiBkUChlLHIsdCl9Y2F0Y2goZSl7fWlmKFwiZ2V0XCJpbiB0fHxcInNldFwiaW4gdCl0aHJvdyBUeXBlRXJyb3IoXCJBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCFcIik7cmV0dXJuXCJ2YWx1ZVwiaW4gdCYmKGVbcl09dC52YWx1ZSksZX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl2WW1wbFkzUXRaSEF1YW5NaVhTd2libUZ0WlhNaU9sc2lZVzVQWW1wbFkzUWlMQ0p5WlhGMWFYSmxJaXdpU1VVNFgwUlBUVjlFUlVaSlRrVWlMQ0owYjFCeWFXMXBkR2wyWlNJc0ltUlFJaXdpVDJKcVpXTjBJaXdpWkdWbWFXNWxVSEp2Y0dWeWRIa2lMQ0psZUhCdmNuUnpJaXdpWmlJc0lrOGlMQ0pRSWl3aVFYUjBjbWxpZFhSbGN5SXNJbVVpTENKVWVYQmxSWEp5YjNJaUxDSjJZV3gxWlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1NVRkJTVUVzVTBGQlYwTXNVVUZCVVN4blFrRkRia0pETEdWQlFXbENSQ3hSUVVGUkxIRkNRVU42UWtVc1dVRkJZMFlzVVVGQlVTeHRRa0ZEZEVKSExFZEJRVXRETEU5QlFVOURMR1ZCUldoQ1F5eFJRVUZSUXl4RlFVRkpVQ3hSUVVGUkxHdENRVUZ2UWtrc1QwRkJUME1zWlVGQmFVSXNVMEZCVTBFc1pVRkJaVWNzUlVGQlIwTXNSVUZCUjBNc1IwRkpOVVlzUjBGSVFWZ3NVMEZCVTFNc1IwRkRWRU1zUlVGQlNWQXNXVUZCV1U4c1IwRkJSeXhIUVVOdVFsWXNVMEZCVTFjc1IwRkRURlFzWlVGQlowSXNTVUZEYkVJc1QwRkJUMFVzUjBGQlIwc3NSVUZCUjBNc1JVRkJSME1zUjBGRGFFSXNUVUZCVDBNc1NVRkRWQ3hIUVVGSkxGRkJRVk5FTEVkQlFXTXNVVUZCVTBFc1JVRkJXU3hOUVVGTlJTeFZRVUZWTERSQ1FVVm9SU3hOUVVSSkxGVkJRVmRHTEVsQlFWbEdMRVZCUVVWRExFZEJRVXRETEVWQlFWZEhMRTlCUTNSRFRDSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDI5aWFtVmpkQzFrY0M1cWN5SjkiLCJ2YXIgZFA9cmVxdWlyZShcIi4vX29iamVjdC1kcFwiKSxhbk9iamVjdD1yZXF1aXJlKFwiLi9fYW4tb2JqZWN0XCIpLGdldEtleXM9cmVxdWlyZShcIi4vX29iamVjdC1rZXlzXCIpO21vZHVsZS5leHBvcnRzPXJlcXVpcmUoXCIuL19kZXNjcmlwdG9yc1wiKT9PYmplY3QuZGVmaW5lUHJvcGVydGllczpmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGUscil7YW5PYmplY3QoZSk7Zm9yKHZhciB0LGk9Z2V0S2V5cyhyKSxvPWkubGVuZ3RoLG49MDtvPm47KWRQLmYoZSx0PWlbbisrXSxyW3RdKTtyZXR1cm4gZX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl2WW1wbFkzUXRaSEJ6TG1weklsMHNJbTVoYldWeklqcGJJbVJRSWl3aWNtVnhkV2x5WlNJc0ltRnVUMkpxWldOMElpd2laMlYwUzJWNWN5SXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0pQWW1wbFkzUWlMQ0prWldacGJtVlFjbTl3WlhKMGFXVnpJaXdpVHlJc0lsQnliM0JsY25ScFpYTWlMQ0pRSWl3aWEyVjVjeUlzSW14bGJtZDBhQ0lzSW1raUxDSm1JbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hKUVVGSlFTeEhRVUZMUXl4UlFVRlJMR2RDUVVOaVF5eFRRVUZYUkN4UlFVRlJMR2RDUVVOdVFrVXNVVUZCVlVZc1VVRkJVU3hyUWtGRmRFSkhMRTlCUVU5RExGRkJRVlZLTEZGQlFWRXNhMEpCUVc5Q1N5eFBRVUZQUXl4cFFrRkJiVUlzVTBGQlUwRXNhVUpCUVdsQ1F5eEZRVUZIUXl4SFFVTnNSMUFzVTBGQlUwMHNSMEZMVkN4SlFVcEJMRWxCUjBsRkxFVkJTRUZETEVWQlFVOVNMRkZCUVZGTkxFZEJRMlpITEVWQlFWTkVMRVZCUVV0RExFOUJRMlJETEVWQlFVa3NSVUZGUkVRc1JVRkJVME1zUjBGQlIySXNSMEZCUjJNc1JVRkJSVTRzUlVGQlIwVXNSVUZCU1VNc1JVRkJTMFVzUzBGQlRVb3NSVUZCVjBNc1NVRkRja1FzVDBGQlQwWWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5dlltcGxZM1F0WkhCekxtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7bW9kdWxlLmV4cG9ydHM9cmVxdWlyZShcIi4vX2xpYnJhcnlcIil8fCFyZXF1aXJlKFwiLi9fZmFpbHNcIikoZnVuY3Rpb24oKXt2YXIgZT1NYXRoLnJhbmRvbSgpO19fZGVmaW5lU2V0dGVyX18uY2FsbChudWxsLGUsZnVuY3Rpb24oKXt9KSxkZWxldGUgcmVxdWlyZShcIi4vX2dsb2JhbFwiKVtlXX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5dlltcGxZM1F0Wm05eVkyVmtMWEJoYlM1cWN5SmRMQ0p1WVcxbGN5STZXeUp0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpY21WeGRXbHlaU0lzSWtzaUxDSk5ZWFJvSWl3aWNtRnVaRzl0SWl3aVgxOWtaV1pwYm1WVFpYUjBaWEpmWHlJc0ltTmhiR3dpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlJVRkJMRTlCUVU5RExGRkJRVlZETEZGQlFWRXNaMEpCUVd0Q1FTeFJRVUZSTEZkQlFWSkJMRU5CUVc5Q0xGZEJRemRFTEVsQlFVbERMRVZCUVVsRExFdEJRVXRETEZOQlIySkRMR2xDUVVGcFFrTXNTMEZCU3l4TFFVRk5TaXhGUVVGSExIRkNRVU40UWtRc1VVRkJVU3hoUVVGaFF5SXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDI5aWFtVmpkQzFtYjNKalpXUXRjR0Z0TG1wekluMD0iLCJ2YXIgcElFPXJlcXVpcmUoXCIuL19vYmplY3QtcGllXCIpLGNyZWF0ZURlc2M9cmVxdWlyZShcIi4vX3Byb3BlcnR5LWRlc2NcIiksdG9JT2JqZWN0PXJlcXVpcmUoXCIuL190by1pb2JqZWN0XCIpLHRvUHJpbWl0aXZlPXJlcXVpcmUoXCIuL190by1wcmltaXRpdmVcIiksaGFzPXJlcXVpcmUoXCIuL19oYXNcIiksSUU4X0RPTV9ERUZJTkU9cmVxdWlyZShcIi4vX2llOC1kb20tZGVmaW5lXCIpLGdPUEQ9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtleHBvcnRzLmY9cmVxdWlyZShcIi4vX2Rlc2NyaXB0b3JzXCIpP2dPUEQ6ZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUscil7aWYoZT10b0lPYmplY3QoZSkscj10b1ByaW1pdGl2ZShyLCEwKSxJRThfRE9NX0RFRklORSl0cnl7cmV0dXJuIGdPUEQoZSxyKX1jYXRjaChlKXt9aWYoaGFzKGUscikpcmV0dXJuIGNyZWF0ZURlc2MoIXBJRS5mLmNhbGwoZSxyKSxlW3JdKX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl2WW1wbFkzUXRaMjl3WkM1cWN5SmRMQ0p1WVcxbGN5STZXeUp3U1VVaUxDSnlaWEYxYVhKbElpd2lZM0psWVhSbFJHVnpZeUlzSW5SdlNVOWlhbVZqZENJc0luUnZVSEpwYldsMGFYWmxJaXdpYUdGeklpd2lTVVU0WDBSUFRWOUVSVVpKVGtVaUxDSm5UMUJFSWl3aVQySnFaV04wSWl3aVoyVjBUM2R1VUhKdmNHVnlkSGxFWlhOamNtbHdkRzl5SWl3aVpYaHdiM0owY3lJc0ltWWlMQ0pQSWl3aVVDSXNJbVVpTENKallXeHNJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hKUVVGSlFTeEpRVUZOUXl4UlFVRlJMR2xDUVVOa1F5eFhRVUZoUkN4UlFVRlJMRzlDUVVOeVFrVXNWVUZCV1VZc1VVRkJVU3hwUWtGRGNFSkhMRmxCUVdOSUxGRkJRVkVzYlVKQlEzUkNTU3hKUVVGTlNpeFJRVUZSTEZWQlEyUkxMR1ZCUVdsQ1RDeFJRVUZSTEhGQ1FVTjZRazBzUzBGQlQwTXNUMEZCVDBNc2VVSkJSV3hDUXl4UlFVRlJReXhGUVVGSlZpeFJRVUZSTEd0Q1FVRnZRazBzUzBGQlR5eFRRVUZUUlN4NVFrRkJlVUpITEVWQlFVZERMRWRCUjJ4R0xFZEJSa0ZFTEVWQlFVbFVMRlZCUVZWVExFZEJRMlJETEVWQlFVbFVMRmxCUVZsVExFZEJRVWNzUjBGRFpsQXNaVUZCWjBJc1NVRkRiRUlzVDBGQlQwTXNTMEZCUzBzc1JVRkJSME1zUjBGRFppeE5RVUZQUXl4SlFVTlVMRWRCUVVsVUxFbEJRVWxQTEVWQlFVZERMRWRCUVVrc1QwRkJUMWdzV1VGQldVWXNTVUZCU1Zjc1JVRkJSVWtzUzBGQlMwZ3NSVUZCUjBNc1IwRkJTVVFzUlVGQlJVTWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5dlltcGxZM1F0WjI5d1pDNXFjeUo5IiwidmFyIHRvSU9iamVjdD1yZXF1aXJlKFwiLi9fdG8taW9iamVjdFwiKSxnT1BOPXJlcXVpcmUoXCIuL19vYmplY3QtZ29wblwiKS5mLHRvU3RyaW5nPXt9LnRvU3RyaW5nLHdpbmRvd05hbWVzPVwib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3cmJndpbmRvdyYmT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM/T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KTpbXSxnZXRXaW5kb3dOYW1lcz1mdW5jdGlvbihlKXt0cnl7cmV0dXJuIGdPUE4oZSl9Y2F0Y2goZSl7cmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCl9fTttb2R1bGUuZXhwb3J0cy5mPWZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoZSl7cmV0dXJuIHdpbmRvd05hbWVzJiZcIltvYmplY3QgV2luZG93XVwiPT10b1N0cmluZy5jYWxsKGUpP2dldFdpbmRvd05hbWVzKGUpOmdPUE4odG9JT2JqZWN0KGUpKX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl2WW1wbFkzUXRaMjl3YmkxbGVIUXVhbk1pWFN3aWJtRnRaWE1pT2xzaWRHOUpUMkpxWldOMElpd2ljbVZ4ZFdseVpTSXNJbWRQVUU0aUxDSm1JaXdpZEc5VGRISnBibWNpTENKM2FXNWtiM2RPWVcxbGN5SXNJbmRwYm1SdmR5SXNJazlpYW1WamRDSXNJbWRsZEU5M2JsQnliM0JsY25SNVRtRnRaWE1pTENKblpYUlhhVzVrYjNkT1lXMWxjeUlzSW1sMElpd2laU0lzSW5Oc2FXTmxJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSW1OaGJHd2lYU3dpYldGd2NHbHVaM01pT2lKQlFVTkJMRWxCUVVsQkxGVkJRVmxETEZGQlFWRXNhVUpCUTNCQ1F5eExRVUZQUkN4UlFVRlJMR3RDUVVGclFrVXNSVUZEYWtORExGTkJRVmNzUjBGQlIwRXNVMEZGWkVNc1dVRkJLMElzYVVKQlFWWkRMRkZCUVhOQ1FTeFJRVUZWUXl4UFFVRlBReXh2UWtGRE5VUkVMRTlCUVU5RExHOUNRVUZ2UWtZc1VVRkJWU3hIUVVWeVEwY3NaVUZCYVVJc1UwRkJWVU1zUjBGRE4wSXNTVUZEUlN4UFFVRlBVaXhMUVVGTFVTeEhRVU5hTEUxQlFVOURMRWRCUTFBc1QwRkJUMDRzV1VGQldVOHNWVUZKZGtKRExFOUJRVTlETEZGQlFWRllMRVZCUVVrc1UwRkJVMHNzYjBKQlFXOUNSU3hIUVVNNVF5eFBRVUZQVEN4aFFVRnZReXh0UWtGQmNrSkVMRk5CUVZOWExFdEJRVXRNTEVkQlFUSkNSQ3hsUVVGbFF5eEhRVUZOVWl4TFFVRkxSaXhWUVVGVlZTSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDI5aWFtVmpkQzFuYjNCdUxXVjRkQzVxY3lKOSIsInZhciAka2V5cz1yZXF1aXJlKFwiLi9fb2JqZWN0LWtleXMtaW50ZXJuYWxcIiksaGlkZGVuS2V5cz1yZXF1aXJlKFwiLi9fZW51bS1idWcta2V5c1wiKS5jb25jYXQoXCJsZW5ndGhcIixcInByb3RvdHlwZVwiKTtleHBvcnRzLmY9T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXN8fGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoZSl7cmV0dXJuICRrZXlzKGUsaGlkZGVuS2V5cyl9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5dlltcGxZM1F0WjI5d2JpNXFjeUpkTENKdVlXMWxjeUk2V3lJa2EyVjVjeUlzSW5KbGNYVnBjbVVpTENKb2FXUmtaVzVMWlhseklpd2lZMjl1WTJGMElpd2laWGh3YjNKMGN5SXNJbVlpTENKUFltcGxZM1FpTENKblpYUlBkMjVRY205d1pYSjBlVTVoYldWeklpd2lUeUpkTENKdFlYQndhVzVuY3lJNklrRkJRMEVzU1VGQlNVRXNUVUZCVVVNc1VVRkJVU3d5UWtGRGFFSkRMRmRCUVdGRUxGRkJRVkVzYjBKQlFXOUNSU3hQUVVGUExGTkJRVlVzWVVGRk9VUkRMRkZCUVZGRExFVkJRVWxETEU5QlFVOURMSEZDUVVGMVFpeFRRVUZUUVN4dlFrRkJiMEpETEVkQlEzSkZMRTlCUVU5U0xFMUJRVTFSTEVWQlFVZE9JaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZmIySnFaV04wTFdkdmNHNHVhbk1pZlE9PSIsImV4cG9ydHMuZj1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5dlltcGxZM1F0WjI5d2N5NXFjeUpkTENKdVlXMWxjeUk2V3lKbGVIQnZjblJ6SWl3aVppSXNJazlpYW1WamRDSXNJbWRsZEU5M2JsQnliM0JsY25SNVUzbHRZbTlzY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVGQkxGRkJRVkZETEVWQlFVbERMRTlCUVU5RElpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmYjJKcVpXTjBMV2R2Y0hNdWFuTWlmUT09IiwidmFyIGhhcz1yZXF1aXJlKFwiLi9faGFzXCIpLHRvT2JqZWN0PXJlcXVpcmUoXCIuL190by1vYmplY3RcIiksSUVfUFJPVE89cmVxdWlyZShcIi4vX3NoYXJlZC1rZXlcIikoXCJJRV9QUk9UT1wiKSxPYmplY3RQcm90bz1PYmplY3QucHJvdG90eXBlO21vZHVsZS5leHBvcnRzPU9iamVjdC5nZXRQcm90b3R5cGVPZnx8ZnVuY3Rpb24odCl7cmV0dXJuIHQ9dG9PYmplY3QodCksaGFzKHQsSUVfUFJPVE8pP3RbSUVfUFJPVE9dOlwiZnVuY3Rpb25cIj09dHlwZW9mIHQuY29uc3RydWN0b3ImJnQgaW5zdGFuY2VvZiB0LmNvbnN0cnVjdG9yP3QuY29uc3RydWN0b3IucHJvdG90eXBlOnQgaW5zdGFuY2VvZiBPYmplY3Q/T2JqZWN0UHJvdG86bnVsbH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl2WW1wbFkzUXRaM0J2TG1weklsMHNJbTVoYldWeklqcGJJbWhoY3lJc0luSmxjWFZwY21VaUxDSjBiMDlpYW1WamRDSXNJa2xGWDFCU1QxUlBJaXdpVDJKcVpXTjBVSEp2ZEc4aUxDSlBZbXBsWTNRaUxDSndjbTkwYjNSNWNHVWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpWjJWMFVISnZkRzkwZVhCbFQyWWlMQ0pQSWl3aVkyOXVjM1J5ZFdOMGIzSWlYU3dpYldGd2NHbHVaM01pT2lKQlFVTkJMRWxCUVVsQkxFbEJRVTFETEZGQlFWRXNWVUZEWkVNc1UwRkJWMFFzVVVGQlVTeG5Ra0ZEYmtKRkxGTkJRVmRHTEZGQlFWRXNaMEpCUVZKQkxFTkJRWGxDTEZsQlEzQkRSeXhaUVVGalF5eFBRVUZQUXl4VlFVVjZRa01zVDBGQlQwTXNVVUZCVlVnc1QwRkJUMGtzWjBKQlFXdENMRk5CUVZWRExFZEJSV3hFTEU5QlJFRkJMRVZCUVVsU0xGTkJRVk5STEVkQlExUldMRWxCUVVsVkxFVkJRVWRRTEZWQlFXdENUeXhGUVVGRlVDeFZRVU5JTEcxQ1FVRnFRazhzUlVGQlJVTXNZVUZCTmtKRUxHRkJRV0ZCTEVWQlFVVkRMRmxCUTJoRVJDeEZRVUZGUXl4WlFVRlpUQ3hWUVVOa1NTeGhRVUZoVEN4UFFVRlRSQ3haUVVGaklpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmYjJKcVpXTjBMV2R3Ynk1cWN5SjkiLCJ2YXIgaGFzPXJlcXVpcmUoXCIuL19oYXNcIiksdG9JT2JqZWN0PXJlcXVpcmUoXCIuL190by1pb2JqZWN0XCIpLGFycmF5SW5kZXhPZj1yZXF1aXJlKFwiLi9fYXJyYXktaW5jbHVkZXNcIikoITEpLElFX1BST1RPPXJlcXVpcmUoXCIuL19zaGFyZWQta2V5XCIpKFwiSUVfUFJPVE9cIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24ocixlKXt2YXIgYSx0PXRvSU9iamVjdChyKSx1PTAsTz1bXTtmb3IoYSBpbiB0KWEhPUlFX1BST1RPJiZoYXModCxhKSYmTy5wdXNoKGEpO2Zvcig7ZS5sZW5ndGg+dTspaGFzKHQsYT1lW3UrK10pJiYofmFycmF5SW5kZXhPZihPLGEpfHxPLnB1c2goYSkpO3JldHVybiBPfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXZZbXBsWTNRdGEyVjVjeTFwYm5SbGNtNWhiQzVxY3lKZExDSnVZVzFsY3lJNld5Sm9ZWE1pTENKeVpYRjFhWEpsSWl3aWRHOUpUMkpxWldOMElpd2lZWEp5WVhsSmJtUmxlRTltSWl3aVNVVmZVRkpQVkU4aUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2liMkpxWldOMElpd2libUZ0WlhNaUxDSnJaWGtpTENKUElpd2lhU0lzSW5KbGMzVnNkQ0lzSW5CMWMyZ2lMQ0pzWlc1bmRHZ2lYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRWxCUVVsQkxFbEJRVTFETEZGQlFWRXNWVUZEWkVNc1ZVRkJXVVFzVVVGQlVTeHBRa0ZEY0VKRkxHRkJRV1ZHTEZGQlFWRXNiMEpCUVZKQkxFVkJRVFpDTEVkQlF6VkRSeXhUUVVGWFNDeFJRVUZSTEdkQ1FVRlNRU3hEUVVGNVFpeFpRVVY0UTBrc1QwRkJUME1zVVVGQlZTeFRRVUZWUXl4RlFVRlJReXhIUVVOcVF5eEpRVWRKUXl4RlFVaEJReXhGUVVGSlVpeFZRVUZWU3l4SFFVTmtTU3hGUVVGSkxFVkJRMHBETEVWQlFWTXNSMEZGWWl4SlFVRkxTQ3hMUVVGUFF5eEZRVUZQUkN4SFFVRlBUQ3hWUVVGVlNpeEpRVUZKVlN4RlFVRkhSQ3hKUVVGUlJ5eEZRVUZQUXl4TFFVRkxTaXhIUVVVdlJDeExRVUZQUkN4RlFVRk5UU3hQUVVGVFNDeEhRVUZQV0N4SlFVRkpWU3hGUVVGSFJDeEZRVUZOUkN4RlFVRk5SeXhUUVVNM1ExSXNZVUZCWVZNc1JVRkJVVWdzU1VGQlVVY3NSVUZCVDBNc1MwRkJTMG9zU1VGRk5VTXNUMEZCVDBjaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTl2WW1wbFkzUXRhMlY1Y3kxcGJuUmxjbTVoYkM1cWN5SjkiLCJ2YXIgJGtleXM9cmVxdWlyZShcIi4vX29iamVjdC1rZXlzLWludGVybmFsXCIpLGVudW1CdWdLZXlzPXJlcXVpcmUoXCIuL19lbnVtLWJ1Zy1rZXlzXCIpO21vZHVsZS5leHBvcnRzPU9iamVjdC5rZXlzfHxmdW5jdGlvbiBrZXlzKGUpe3JldHVybiAka2V5cyhlLGVudW1CdWdLZXlzKX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl2WW1wbFkzUXRhMlY1Y3k1cWN5SmRMQ0p1WVcxbGN5STZXeUlrYTJWNWN5SXNJbkpsY1hWcGNtVWlMQ0psYm5WdFFuVm5TMlY1Y3lJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaUxDSlBZbXBsWTNRaUxDSnJaWGx6SWl3aVR5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwRXNTVUZCU1VFc1RVRkJVVU1zVVVGQlVTd3lRa0ZEYUVKRExGbEJRV05FTEZGQlFWRXNiMEpCUlRGQ1JTeFBRVUZQUXl4UlFVRlZReXhQUVVGUFF5eE5RVUZSTEZOQlFWTkJMRXRCUVV0RExFZEJRelZETEU5QlFVOVFMRTFCUVUxUExFVkJRVWRNSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZiMkpxWldOMExXdGxlWE11YW5NaWZRPT0iLCJleHBvcnRzLmY9e30ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl2WW1wbFkzUXRjR2xsTG1weklsMHNJbTVoYldWeklqcGJJbVY0Y0c5eWRITWlMQ0ptSWl3aWNISnZjR1Z5ZEhsSmMwVnVkVzFsY21GaWJHVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJRU3hSUVVGUlF5eEZRVUZKTEVkQlFVZERJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZmIySnFaV04wTFhCcFpTNXFjeUo5IiwidmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKSxjb3JlPXJlcXVpcmUoXCIuL19jb3JlXCIpLGZhaWxzPXJlcXVpcmUoXCIuL19mYWlsc1wiKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihlLHIpe3ZhciBvPShjb3JlLk9iamVjdHx8e30pW2VdfHxPYmplY3RbZV0sdD17fTt0W2VdPXIobyksJGV4cG9ydCgkZXhwb3J0LlMrJGV4cG9ydC5GKmZhaWxzKGZ1bmN0aW9uKCl7bygxKX0pLFwiT2JqZWN0XCIsdCl9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5dlltcGxZM1F0YzJGd0xtcHpJbDBzSW01aGJXVnpJanBiSWlSbGVIQnZjblFpTENKeVpYRjFhWEpsSWl3aVkyOXlaU0lzSW1aaGFXeHpJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSWt0RldTSXNJbVY0WldNaUxDSm1iaUlzSWs5aWFtVmpkQ0lzSW1WNGNDSXNJbE1pTENKR0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHRkJRMnhDUXl4TFFVRlBSQ3hSUVVGUkxGZEJRMlpGTEUxQlFWRkdMRkZCUVZFc1dVRkRjRUpITEU5QlFVOURMRkZCUVZVc1UwRkJWVU1zUlVGQlMwTXNSMEZET1VJc1NVRkJTVU1zUjBGQlRVNHNTMEZCUzA4c1VVRkJWU3hKUVVGSlNDeEpRVUZSUnl4UFFVRlBTQ3hIUVVONFEwa3NSVUZCVFN4SFFVTldRU3hGUVVGSlNpeEhRVUZQUXl4RlFVRkxReXhIUVVOb1FsSXNVVUZCVVVFc1VVRkJVVmNzUlVGQlNWZ3NVVUZCVVZrc1JVRkJTVlFzVFVGQlRTeFhRVUZqU3l4RlFVRkhMRXRCUVZFc1UwRkJWVVVpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOXZZbXBsWTNRdGMyRndMbXB6SW4wPSIsInZhciBnZXRLZXlzPXJlcXVpcmUoXCIuL19vYmplY3Qta2V5c1wiKSx0b0lPYmplY3Q9cmVxdWlyZShcIi4vX3RvLWlvYmplY3RcIiksaXNFbnVtPXJlcXVpcmUoXCIuL19vYmplY3QtcGllXCIpLmY7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe2Zvcih2YXIgcixvPXRvSU9iamVjdCh0KSx1PWdldEtleXMobyksaT11Lmxlbmd0aCxuPTAsYz1bXTtpPm47KWlzRW51bS5jYWxsKG8scj11W24rK10pJiZjLnB1c2goZT9bcixvW3JdXTpvW3JdKTtyZXR1cm4gY319O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5dlltcGxZM1F0ZEc4dFlYSnlZWGt1YW5NaVhTd2libUZ0WlhNaU9sc2laMlYwUzJWNWN5SXNJbkpsY1hWcGNtVWlMQ0owYjBsUFltcGxZM1FpTENKcGMwVnVkVzBpTENKbUlpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SXNJbWx6Ulc1MGNtbGxjeUlzSW1sMElpd2lhMlY1SWl3aVR5SXNJbXRsZVhNaUxDSnNaVzVuZEdnaUxDSnBJaXdpY21WemRXeDBJaXdpWTJGc2JDSXNJbkIxYzJnaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc2EwSkJRMnhDUXl4VlFVRlpSQ3hSUVVGUkxHbENRVU53UWtVc1QwRkJVMFlzVVVGQlVTeHBRa0ZCYVVKSExFVkJRM1JEUXl4UFFVRlBReXhSUVVGVkxGTkJRVlZETEVkQlEzcENMRTlCUVU4c1UwRkJWVU1zUjBGUFppeEpRVTVCTEVsQlMwbERMRVZCVEVGRExFVkJRVWxTTEZWQlFWVk5MRWRCUTJSSExFVkJRVTlZTEZGQlFWRlZMRWRCUTJaRkxFVkJRVk5FTEVWQlFVdERMRTlCUTJSRExFVkJRVWtzUlVGRFNrTXNSVUZCVXl4SFFVVk9SaXhGUVVGVFF5eEhRVUZQVml4UFFVRlBXU3hMUVVGTFRDeEZRVUZIUkN4RlFVRk5SU3hGUVVGTFJTeFBRVU12UTBNc1JVRkJUMFVzUzBGQlMxUXNSVUZCV1N4RFFVRkRSU3hGUVVGTFF5eEZRVUZGUkN4SlFVRlJReXhGUVVGRlJDeEpRVU14UXl4UFFVRlBTeUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgyOWlhbVZqZEMxMGJ5MWhjbkpoZVM1cWN5SjkiLCJ2YXIgZ09QTj1yZXF1aXJlKFwiLi9fb2JqZWN0LWdvcG5cIiksZ09QUz1yZXF1aXJlKFwiLi9fb2JqZWN0LWdvcHNcIiksYW5PYmplY3Q9cmVxdWlyZShcIi4vX2FuLW9iamVjdFwiKSxSZWZsZWN0PXJlcXVpcmUoXCIuL19nbG9iYWxcIikuUmVmbGVjdDttb2R1bGUuZXhwb3J0cz1SZWZsZWN0JiZSZWZsZWN0Lm93bktleXN8fGZ1bmN0aW9uIG93bktleXMoZSl7dmFyIHI9Z09QTi5mKGFuT2JqZWN0KGUpKSx0PWdPUFMuZjtyZXR1cm4gdD9yLmNvbmNhdCh0KGUpKTpyfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXZkMjR0YTJWNWN5NXFjeUpkTENKdVlXMWxjeUk2V3lKblQxQk9JaXdpY21WeGRXbHlaU0lzSW1kUFVGTWlMQ0poYms5aWFtVmpkQ0lzSWxKbFpteGxZM1FpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aWIzZHVTMlY1Y3lJc0ltbDBJaXdpYTJWNWN5SXNJbVlpTENKblpYUlRlVzFpYjJ4eklpd2lZMjl1WTJGMElsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFTeEpRVUZKUVN4TFFVRlBReXhSUVVGUkxHdENRVU5tUXl4TFFVRlBSQ3hSUVVGUkxHdENRVU5tUlN4VFFVRlhSaXhSUVVGUkxHZENRVU51UWtjc1VVRkJWVWdzVVVGQlVTeGhRVUZoUnl4UlFVTnVRME1zVDBGQlQwTXNVVUZCVlVZc1UwRkJWMEVzVVVGQlVVY3NVMEZCVnl4VFFVRlRRU3hSUVVGUlF5eEhRVU01UkN4SlFVRkpReXhGUVVGUFZDeExRVUZMVlN4RlFVRkZVQ3hUUVVGVFN5eEpRVU4yUWtjc1JVRkJZVlFzUzBGQlMxRXNSVUZEZEVJc1QwRkJUME1zUlVGQllVWXNSVUZCUzBjc1QwRkJUMFFzUlVGQlYwZ3NTVUZCVDBNaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTl2ZDI0dGEyVjVjeTVxY3lKOSIsInZhciAkcGFyc2VGbG9hdD1yZXF1aXJlKFwiLi9fZ2xvYmFsXCIpLnBhcnNlRmxvYXQsJHRyaW09cmVxdWlyZShcIi4vX3N0cmluZy10cmltXCIpLnRyaW07bW9kdWxlLmV4cG9ydHM9MS8kcGFyc2VGbG9hdChyZXF1aXJlKFwiLi9fc3RyaW5nLXdzXCIpK1wiLTBcIikhPS0xLzA/ZnVuY3Rpb24gcGFyc2VGbG9hdChyKXt2YXIgdD0kdHJpbShTdHJpbmcociksMyksYT0kcGFyc2VGbG9hdCh0KTtyZXR1cm4gMD09PWEmJlwiLVwiPT10LmNoYXJBdCgwKT8tMDphfTokcGFyc2VGbG9hdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXdZWEp6WlMxbWJHOWhkQzVxY3lKZExDSnVZVzFsY3lJNld5SWtjR0Z5YzJWR2JHOWhkQ0lzSW5KbGNYVnBjbVVpTENKd1lYSnpaVVpzYjJGMElpd2lKSFJ5YVcwaUxDSjBjbWx0SWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0lrbHVabWx1YVhSNUlpd2ljM1J5SWl3aWMzUnlhVzVuSWl3aVUzUnlhVzVuSWl3aWNtVnpkV3gwSWl3aVkyaGhja0YwSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4SlFVRkpRU3haUVVGalF5eFJRVUZSTEdGQlFXRkRMRmRCUTI1RFF5eE5RVUZSUml4UlFVRlJMR3RDUVVGclFrY3NTMEZGZEVORExFOUJRVTlETEZGQlFWVXNSVUZCU1U0c1dVRkJXVU1zVVVGQlVTeG5Ra0ZCYTBJc1VVRkJWMDBzUlVGQlFVRXNSVUZCVnl4VFFVRlRUQ3hYUVVGWFRTeEhRVU51Unl4SlFVRkpReXhGUVVGVFRpeE5RVUZOVHl4UFFVRlBSaXhIUVVGTkxFZEJRelZDUnl4RlFVRlRXQ3haUVVGWlV5eEhRVU42UWl4UFFVRnJRaXhKUVVGWVJTeEhRVUZ2UXl4TFFVRndRa1lzUlVGQlQwY3NUMEZCVHl4SlFVRmhMRVZCUVVsRUxFZEJRM0JFV0NJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYM0JoY25ObExXWnNiMkYwTG1wekluMD0iLCJ2YXIgJHBhcnNlSW50PXJlcXVpcmUoXCIuL19nbG9iYWxcIikucGFyc2VJbnQsJHRyaW09cmVxdWlyZShcIi4vX3N0cmluZy10cmltXCIpLnRyaW0sd3M9cmVxdWlyZShcIi4vX3N0cmluZy13c1wiKSxoZXg9L15bLStdPzBbeFhdLzttb2R1bGUuZXhwb3J0cz04IT09JHBhcnNlSW50KHdzK1wiMDhcIil8fDIyIT09JHBhcnNlSW50KHdzK1wiMHgxNlwiKT9mdW5jdGlvbiBwYXJzZUludChyLGUpe3ZhciB0PSR0cmltKFN0cmluZyhyKSwzKTtyZXR1cm4gJHBhcnNlSW50KHQsZT4+PjB8fChoZXgudGVzdCh0KT8xNjoxMCkpfTokcGFyc2VJbnQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl3WVhKelpTMXBiblF1YW5NaVhTd2libUZ0WlhNaU9sc2lKSEJoY25ObFNXNTBJaXdpY21WeGRXbHlaU0lzSW5CaGNuTmxTVzUwSWl3aUpIUnlhVzBpTENKMGNtbHRJaXdpZDNNaUxDSm9aWGdpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aWMzUnlJaXdpY21Ga2FYZ2lMQ0p6ZEhKcGJtY2lMQ0pUZEhKcGJtY2lMQ0owWlhOMElsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeEpRVUZKUVN4VlFVRlpReXhSUVVGUkxHRkJRV0ZETEZOQlEycERReXhOUVVGUlJpeFJRVUZSTEd0Q1FVRnJRa2NzUzBGRGJFTkRMRWRCUVV0S0xGRkJRVkVzWjBKQlEySkxMRWxCUVUwc1kwRkZWa01zVDBGQlQwTXNVVUZCYlVNc1NVRkJla0pTTEZWQlFWVkxMRWRCUVVzc1QwRkJNRU1zUzBGQk0wSk1MRlZCUVZWTExFZEJRVXNzVVVGQmFVSXNVMEZCVTBnc1UwRkJVMDhzUlVGQlMwTXNSMEZEY0Vjc1NVRkJTVU1zUlVGQlUxSXNUVUZCVFZNc1QwRkJUMGdzUjBGQlRTeEhRVU5vUXl4UFFVRlBWQ3hWUVVGVlZ5eEZRVUZUUkN4SlFVRlZMRWxCUVU5S0xFbEJRVWxQTEV0QlFVdEdMRWRCUVZVc1IwRkJTeXhOUVVOcVJWZ2lMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5d1lYSnpaUzFwYm5RdWFuTWlmUT09IiwibW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dHJ5e3JldHVybntlOiExLHY6ZSgpfX1jYXRjaChlKXtyZXR1cm57ZTohMCx2OmV9fX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl3WlhKbWIzSnRMbXB6SWwwc0ltNWhiV1Z6SWpwYkltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaUxDSmxlR1ZqSWl3aVpTSXNJbllpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCUVN4UFFVRlBReXhSUVVGVkxGTkJRVlZETEVkQlEzcENMRWxCUTBVc1RVRkJUeXhEUVVGRlF5eEhRVUZITEVWQlFVOURMRVZCUVVkR0xFdEJRM1JDTEUxQlFVOURMRWRCUTFBc1RVRkJUeXhEUVVGRlFTeEhRVUZITEVWQlFVMURMRVZCUVVkRUlpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmY0dWeVptOXliUzVxY3lKOSIsInZhciBhbk9iamVjdD1yZXF1aXJlKFwiLi9fYW4tb2JqZWN0XCIpLGlzT2JqZWN0PXJlcXVpcmUoXCIuL19pcy1vYmplY3RcIiksbmV3UHJvbWlzZUNhcGFiaWxpdHk9cmVxdWlyZShcIi4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHlcIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZSxyKXtpZihhbk9iamVjdChlKSxpc09iamVjdChyKSYmci5jb25zdHJ1Y3Rvcj09PWUpcmV0dXJuIHI7dmFyIGk9bmV3UHJvbWlzZUNhcGFiaWxpdHkuZihlKTtyZXR1cm4oMCxpLnJlc29sdmUpKHIpLGkucHJvbWlzZX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl3Y205dGFYTmxMWEpsYzI5c2RtVXVhbk1pWFN3aWJtRnRaWE1pT2xzaVlXNVBZbXBsWTNRaUxDSnlaWEYxYVhKbElpd2lhWE5QWW1wbFkzUWlMQ0p1WlhkUWNtOXRhWE5sUTJGd1lXSnBiR2wwZVNJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaUxDSkRJaXdpZUNJc0ltTnZibk4wY25WamRHOXlJaXdpY0hKdmJXbHpaVU5oY0dGaWFXeHBkSGtpTENKbUlpd2ljbVZ6YjJ4MlpTSXNJbkJ5YjIxcGMyVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRWxCUVVsQkxGTkJRVmRETEZGQlFWRXNaMEpCUTI1Q1F5eFRRVUZYUkN4UlFVRlJMR2RDUVVOdVFrVXNjVUpCUVhWQ1JpeFJRVUZSTERaQ1FVVnVRMGNzVDBGQlQwTXNVVUZCVlN4VFFVRlZReXhGUVVGSFF5eEhRVVUxUWl4SFFVUkJVQ3hUUVVGVFRTeEhRVU5NU2l4VFFVRlRTeXhKUVVGTlFTeEZRVUZGUXl4alFVRm5Ra1lzUlVGQlJ5eFBRVUZQUXl4RlFVTXZReXhKUVVGSlJTeEZRVUZ2UWs0c2NVSkJRWEZDVHl4RlFVRkZTaXhIUVVjdlF5eFBRVVJCU3l4RlFVUmpSaXhGUVVGclFrVXNVMEZEZUVKS0xFZEJRMFJGTEVWQlFXdENSeUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgzQnliMjFwYzJVdGNtVnpiMngyWlM1cWN5SjkiLCJtb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihlLHIpe3JldHVybntlbnVtZXJhYmxlOiEoMSZlKSxjb25maWd1cmFibGU6ISgyJmUpLHdyaXRhYmxlOiEoNCZlKSx2YWx1ZTpyfX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl3Y205d1pYSjBlUzFrWlhOakxtcHpJbDBzSW01aGJXVnpJanBiSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKaWFYUnRZWEFpTENKMllXeDFaU0lzSW1WdWRXMWxjbUZpYkdVaUxDSmpiMjVtYVdkMWNtRmliR1VpTENKM2NtbDBZV0pzWlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVGQkxFOUJRVTlETEZGQlFWVXNVMEZCVlVNc1JVRkJVVU1zUjBGRGFrTXNUVUZCVHl4RFFVTk1ReXhoUVVGMVFpeEZRVUZVUml4SFFVTmtSeXhsUVVGNVFpeEZRVUZVU0N4SFFVTm9Ra2tzVjBGQmNVSXNSVUZCVkVvc1IwRkRXa01zVFVGQlQwRWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5d2NtOXdaWEowZVMxa1pYTmpMbXB6SW4wPSIsInZhciByZWRlZmluZT1yZXF1aXJlKFwiLi9fcmVkZWZpbmVcIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZSxyLG4pe2Zvcih2YXIgaSBpbiByKXJlZGVmaW5lKGUsaSxyW2ldLG4pO3JldHVybiBlfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXlaV1JsWm1sdVpTMWhiR3d1YW5NaVhTd2libUZ0WlhNaU9sc2ljbVZrWldacGJtVWlMQ0p5WlhGMWFYSmxJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSW5SaGNtZGxkQ0lzSW5OeVl5SXNJbk5oWm1VaUxDSnJaWGtpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEVsQlFVbEJMRk5CUVZkRExGRkJRVkVzWlVGRGRrSkRMRTlCUVU5RExGRkJRVlVzVTBGQlZVTXNSVUZCVVVNc1JVRkJTME1zUjBGRGRFTXNTVUZCU3l4SlFVRkpReXhMUVVGUFJpeEZRVUZMVEN4VFFVRlRTU3hGUVVGUlJ5eEZRVUZMUml4RlFVRkpSU3hIUVVGTlJDeEhRVU55UkN4UFFVRlBSaUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgzSmxaR1ZtYVc1bExXRnNiQzVxY3lKOSIsInZhciBnbG9iYWw9cmVxdWlyZShcIi4vX2dsb2JhbFwiKSxoaWRlPXJlcXVpcmUoXCIuL19oaWRlXCIpLGhhcz1yZXF1aXJlKFwiLi9faGFzXCIpLFNSQz1yZXF1aXJlKFwiLi9fdWlkXCIpKFwic3JjXCIpLFRPX1NUUklORz1cInRvU3RyaW5nXCIsJHRvU3RyaW5nPUZ1bmN0aW9uW1RPX1NUUklOR10sVFBMPShcIlwiKyR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtyZXF1aXJlKFwiLi9fY29yZVwiKS5pbnNwZWN0U291cmNlPWZ1bmN0aW9uKHQpe3JldHVybiAkdG9TdHJpbmcuY2FsbCh0KX0sKG1vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKHQsaSxlLHIpe3ZhciBuPVwiZnVuY3Rpb25cIj09dHlwZW9mIGU7biYmKGhhcyhlLFwibmFtZVwiKXx8aGlkZShlLFwibmFtZVwiLGkpKSx0W2ldIT09ZSYmKG4mJihoYXMoZSxTUkMpfHxoaWRlKGUsU1JDLHRbaV0/XCJcIit0W2ldOlRQTC5qb2luKFN0cmluZyhpKSkpKSx0PT09Z2xvYmFsP3RbaV09ZTpyP3RbaV0/dFtpXT1lOmhpZGUodCxpLGUpOihkZWxldGUgdFtpXSxoaWRlKHQsaSxlKSkpfSkoRnVuY3Rpb24ucHJvdG90eXBlLFRPX1NUUklORyxmdW5jdGlvbiB0b1N0cmluZygpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMmJnRoaXNbU1JDXXx8JHRvU3RyaW5nLmNhbGwodGhpcyl9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXlaV1JsWm1sdVpTNXFjeUpkTENKdVlXMWxjeUk2V3lKbmJHOWlZV3dpTENKeVpYRjFhWEpsSWl3aWFHbGtaU0lzSW1oaGN5SXNJbE5TUXlJc0lsUlBYMU5VVWtsT1J5SXNJaVIwYjFOMGNtbHVaeUlzSWtaMWJtTjBhVzl1SWl3aVZGQk1JaXdpYzNCc2FYUWlMQ0pwYm5Od1pXTjBVMjkxY21ObElpd2lhWFFpTENKallXeHNJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSWs4aUxDSnJaWGtpTENKMllXd2lMQ0p6WVdabElpd2lhWE5HZFc1amRHbHZiaUlzSW1wdmFXNGlMQ0pUZEhKcGJtY2lMQ0p3Y205MGIzUjVjR1VpTENKMGIxTjBjbWx1WnlJc0luUm9hWE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEVsQlFVbEJMRTlCUVZORExGRkJRVkVzWVVGRGFrSkRMRXRCUVU5RUxGRkJRVkVzVjBGRFprVXNTVUZCVFVZc1VVRkJVU3hWUVVOa1J5eEpRVUZOU0N4UlFVRlJMRk5CUVZKQkxFTkJRV3RDTEU5QlEzaENTU3hWUVVGWkxGZEJRMXBETEZWQlFWbERMRk5CUVZOR0xGZEJRM0pDUnl4TFFVRlBMRWRCUVV0R0xGZEJRVmRITEUxQlFVMUtMRmRCUldwRFNpeFJRVUZSTEZkQlFWZFRMR05CUVdkQ0xGTkJRVlZETEVkQlF6TkRMRTlCUVU5TUxGVkJRVlZOTEV0QlFVdEVMRXRCUjNaQ1JTeFBRVUZQUXl4UlFVRlZMRk5CUVZWRExFVkJRVWRETEVWQlFVdERMRVZCUVV0RExFZEJRM1pETEVsQlFVbERMRVZCUVRKQ0xHMUNRVUZRUml4RlFVTndRa1VzU1VGQldXaENMRWxCUVVsakxFVkJRVXNzVTBGQlYyWXNTMEZCUzJVc1JVRkJTeXhQUVVGUlJDeEpRVU5zUkVRc1JVRkJSVU1zUzBGQlUwTXNTVUZEV0VVc1NVRkJXV2hDTEVsQlFVbGpMRVZCUVV0aUxFMUJRVkZHTEV0QlFVdGxMRVZCUVV0aUxFbEJRVXRYTEVWQlFVVkRMRWRCUVU4c1IwRkJTMFFzUlVGQlJVTXNSMEZCVDFJc1NVRkJTVmtzUzBGQlMwTXNUMEZCVDB3c1RVRkRia1pFTEVsQlFVMW1MRTlCUTFKbExFVkJRVVZETEVkQlFVOURMRVZCUTBORExFVkJSMFJJTEVWQlFVVkRMRWRCUTFoRUxFVkJRVVZETEVkQlFVOURMRVZCUlZSbUxFdEJRVXRoTEVWQlFVZERMRVZCUVV0RExGZEJURTVHTEVWQlFVVkRMRWRCUTFSa0xFdEJRVXRoTEVWQlFVZERMRVZCUVV0RExFOUJUMlJXTEZOQlFWTmxMRlZCUVZkcVFpeFZRVUZYTEZOQlFWTnJRaXhYUVVONlF5eE5RVUZ6UWl4dFFrRkJVa01zVFVGQmMwSkJMRXRCUVV0d1FpeE5RVUZSUlN4VlFVRlZUU3hMUVVGTFdTSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDNKbFpHVm1hVzVsTG1wekluMD0iLCJtb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihuLHIpe3ZhciB0PXI9PT1PYmplY3Qocik/ZnVuY3Rpb24obil7cmV0dXJuIHJbbl19OnI7cmV0dXJuIGZ1bmN0aW9uKHIpe3JldHVybiBTdHJpbmcocikucmVwbGFjZShuLHQpfX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl5WlhCc1lXTmxjaTVxY3lKZExDSnVZVzFsY3lJNld5SnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2ljbVZuUlhod0lpd2ljbVZ3YkdGalpTSXNJbkpsY0d4aFkyVnlJaXdpVDJKcVpXTjBJaXdpY0dGeWRDSXNJbWwwSWl3aVUzUnlhVzVuSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVVFc1QwRkJUME1zVVVGQlZTeFRRVUZWUXl4RlFVRlJReXhIUVVOcVF5eEpRVUZKUXl4RlFVRlhSQ3hKUVVGWlJTeFBRVUZQUml4SFFVRlhMRk5CUVZWSExFZEJRM0pFTEU5QlFVOUlMRVZCUVZGSExFbEJRMkpJTEVWQlEwb3NUMEZCVHl4VFFVRlZTU3hIUVVObUxFOUJRVTlETEU5QlFVOUVMRWRCUVVsS0xGRkJRVkZFTEVWQlFWRkZJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZmNtVndiR0ZqWlhJdWFuTWlmUT09IiwibW9kdWxlLmV4cG9ydHM9T2JqZWN0LmlzfHxmdW5jdGlvbiBpcyhlLHQpe3JldHVybiBlPT09dD8wIT09ZXx8MS9lPT0xL3Q6ZSE9ZSYmdCE9dH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl6WVcxbExYWmhiSFZsTG1weklsMHNJbTVoYldWeklqcGJJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0pQWW1wbFkzUWlMQ0pwY3lJc0luZ2lMQ0o1SWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVVFc1QwRkJUME1zVVVGQlZVTXNUMEZCVDBNc1NVRkJUU3hUUVVGVFFTeEhRVUZIUXl4RlFVRkhReXhIUVVVelF5eFBRVUZQUkN4SlFVRk5ReXhGUVVGVkxFbEJRVTVFTEVkQlFWY3NSVUZCU1VFc1IwRkJUU3hGUVVGSlF5eEZRVUZKUkN4SFFVRkxRU3hIUVVGTFF5eEhRVUZMUVNJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYM05oYldVdGRtRnNkV1V1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLGFGdW5jdGlvbj1yZXF1aXJlKFwiLi9fYS1mdW5jdGlvblwiKSxjdHg9cmVxdWlyZShcIi4vX2N0eFwiKSxmb3JPZj1yZXF1aXJlKFwiLi9fZm9yLW9mXCIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKHIpeyRleHBvcnQoJGV4cG9ydC5TLHIse2Zyb206ZnVuY3Rpb24gZnJvbShyKXt2YXIgbyx0LGUsbix1PWFyZ3VtZW50c1sxXTtyZXR1cm4gYUZ1bmN0aW9uKHRoaXMpLChvPXZvaWQgMCE9PXUpJiZhRnVuY3Rpb24odSksbnVsbD09cj9uZXcgdGhpczoodD1bXSxvPyhlPTAsbj1jdHgodSxhcmd1bWVudHNbMl0sMiksZm9yT2YociwhMSxmdW5jdGlvbihyKXt0LnB1c2gobihyLGUrKykpfSkpOmZvck9mKHIsITEsdC5wdXNoLHQpLG5ldyB0aGlzKHQpKX19KX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl6WlhRdFkyOXNiR1ZqZEdsdmJpMW1jbTl0TG1weklsMHNJbTVoYldWeklqcGJJaVJsZUhCdmNuUWlMQ0p5WlhGMWFYSmxJaXdpWVVaMWJtTjBhVzl1SWl3aVkzUjRJaXdpWm05eVQyWWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpUTA5TVRFVkRWRWxQVGlJc0lsTWlMQ0ptY205dElpd2ljMjkxY21ObElpd2liV0Z3Y0dsdVp5SXNJa0VpTENKdUlpd2lZMklpTENKdFlYQkdiaUlzSW1GeVozVnRaVzUwY3lJc0luUm9hWE1pTENKMWJtUmxabWx1WldRaUxDSnVaWGgwU1hSbGJTSXNJbkIxYzJnaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJSVUVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVOc1FrTXNWVUZCV1VRc1VVRkJVU3hwUWtGRGNFSkZMRWxCUVUxR0xGRkJRVkVzVlVGRFpFY3NUVUZCVVVnc1VVRkJVU3hoUVVWd1Fra3NUMEZCVDBNc1VVRkJWU3hUUVVGVlF5eEhRVU42UWxBc1VVRkJVVUVzVVVGQlVWRXNSVUZCUjBRc1JVRkJXU3hEUVVGRlJTeExRVUZOTEZOQlFWTkJMRXRCUVV0RExFZEJRMjVFTEVsQlEwbERMRVZCUVZORExFVkJRVWRETEVWQlFVZERMRVZCUkdaRExFVkJRVkZETEZWQlFWVXNSMEZMZEVJc1QwRklRV1FzVlVGQlZXVXNUMEZEVms0c1QwRkJiMEpQTEVsQlFWWklMRWxCUTBkaUxGVkJRVlZoTEVkQlExUkhMRTFCUVZaU0xFVkJRVFJDTEVsQlFVbFBMRTFCUTNCRFRDeEZRVUZKTEVkQlEwRkVMRWRCUTBaRkxFVkJRVWtzUlVGRFNrTXNSVUZCUzFnc1NVRkJTVmtzUlVGQlQwTXNWVUZCVlN4SFFVRkpMRWRCUXpsQ1dpeE5RVUZOVFN4SFFVRlJMRVZCUVU4c1UwRkJWVk1zUjBGRE4wSlFMRVZCUVVWUkxFdEJRVXRPTEVWQlFVZExMRVZCUVZWT0xGTkJSM1JDVkN4TlFVRk5UU3hIUVVGUkxFVkJRVTlGTEVWQlFVVlJMRXRCUVUxU0xFZEJSWGhDTEVsQlFVbExMRXRCUVV0TUlpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmYzJWMExXTnZiR3hsWTNScGIyNHRabkp2YlM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKHIpeyRleHBvcnQoJGV4cG9ydC5TLHIse29mOmZ1bmN0aW9uIG9mKCl7Zm9yKHZhciByPWFyZ3VtZW50cy5sZW5ndGgsZT1uZXcgQXJyYXkocik7ci0tOyllW3JdPWFyZ3VtZW50c1tyXTtyZXR1cm4gbmV3IHRoaXMoZSl9fSl9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5elpYUXRZMjlzYkdWamRHbHZiaTF2Wmk1cWN5SmRMQ0p1WVcxbGN5STZXeUlrWlhod2IzSjBJaXdpY21WeGRXbHlaU0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKRFQweE1SVU5VU1U5T0lpd2lVeUlzSW05bUlpd2liR1Z1WjNSb0lpd2lZWEpuZFcxbGJuUnpJaXdpUVNJc0lrRnljbUY1SWl3aWRHaHBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRlFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHRkJSWFJDUXl4UFFVRlBReXhSUVVGVkxGTkJRVlZETEVkQlEzcENTaXhSUVVGUlFTeFJRVUZSU3l4RlFVRkhSQ3hGUVVGWkxFTkJRVVZGTEVkQlFVa3NVMEZCVTBFc1MwRkhOVU1zU1VGR1FTeEpRVUZKUXl4RlFVRlRReXhWUVVGVlJDeFBRVU51UWtVc1JVRkJTU3hKUVVGSlF5eE5RVUZOU0N4SFFVTllRU3hMUVVGVlJTeEZRVUZGUml4SFFVRlZReXhWUVVGVlJDeEhRVU4yUXl4UFFVRlBMRWxCUVVsSkxFdEJRVXRHSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZjMlYwTFdOdmJHeGxZM1JwYjI0dGIyWXVhbk1pZlE9PSIsInZhciBpc09iamVjdD1yZXF1aXJlKFwiLi9faXMtb2JqZWN0XCIpLGFuT2JqZWN0PXJlcXVpcmUoXCIuL19hbi1vYmplY3RcIiksY2hlY2s9ZnVuY3Rpb24odCxlKXtpZihhbk9iamVjdCh0KSwhaXNPYmplY3QoZSkmJm51bGwhPT1lKXRocm93IFR5cGVFcnJvcihlK1wiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKX07bW9kdWxlLmV4cG9ydHM9e3NldDpPYmplY3Quc2V0UHJvdG90eXBlT2Z8fChcIl9fcHJvdG9fX1wiaW57fT9mdW5jdGlvbih0LGUsbyl7dHJ5eyhvPXJlcXVpcmUoXCIuL19jdHhcIikoRnVuY3Rpb24uY2FsbCxyZXF1aXJlKFwiLi9fb2JqZWN0LWdvcGRcIikuZihPYmplY3QucHJvdG90eXBlLFwiX19wcm90b19fXCIpLnNldCwyKSkodCxbXSksZT0hKHQgaW5zdGFuY2VvZiBBcnJheSl9Y2F0Y2godCl7ZT0hMH1yZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YodCxyKXtyZXR1cm4gY2hlY2sodCxyKSxlP3QuX19wcm90b19fPXI6byh0LHIpLHR9fSh7fSwhMSk6dm9pZCAwKSxjaGVjazpjaGVja307XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl6WlhRdGNISnZkRzh1YW5NaVhTd2libUZ0WlhNaU9sc2lhWE5QWW1wbFkzUWlMQ0p5WlhGMWFYSmxJaXdpWVc1UFltcGxZM1FpTENKamFHVmpheUlzSWs4aUxDSndjbTkwYnlJc0lsUjVjR1ZGY25KdmNpSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0p6WlhRaUxDSlBZbXBsWTNRaUxDSnpaWFJRY205MGIzUjVjR1ZQWmlJc0luUmxjM1FpTENKaWRXZG5lU0lzSWtaMWJtTjBhVzl1SWl3aVkyRnNiQ0lzSW1ZaUxDSndjbTkwYjNSNWNHVWlMQ0pCY25KaGVTSXNJbVVpTENKZlgzQnliM1J2WDE4aUxDSjFibVJsWm1sdVpXUWlYU3dpYldGd2NHbHVaM01pT2lKQlFVVkJMRWxCUVVsQkxGTkJRVmRETEZGQlFWRXNaMEpCUTI1Q1F5eFRRVUZYUkN4UlFVRlJMR2RDUVVOdVFrVXNUVUZCVVN4VFFVRlZReXhGUVVGSFF5eEhRVVYyUWl4SFFVUkJTQ3hUUVVGVFJTeEpRVU5LU2l4VFFVRlRTeXhKUVVGdlFpeFBRVUZXUVN4RlFVRm5RaXhOUVVGTlF5eFZRVUZWUkN4RlFVRlJMRGhDUVVWc1JVVXNUMEZCVDBNc1VVRkJWU3hEUVVObVF5eEpRVUZMUXl4UFFVRlBReXhwUWtGQmJVSXNZVUZCWlN4SFFVTTFReXhUUVVGVlF5eEZRVUZOUXl4RlFVRlBTaXhIUVVOeVFpeExRVU5GUVN4RlFVRk5VaXhSUVVGUkxGTkJRVkpCTEVOQlFXdENZU3hUUVVGVFF5eExRVUZOWkN4UlFVRlJMR3RDUVVGclFtVXNSVUZCUlU0c1QwRkJUMDhzVlVGQlZ5eGhRVUZoVWl4SlFVRkxMRWxCUTI1SFJ5eEZRVUZOTEVsQlExWkRMRWxCUVZWRUxHRkJRV2RDVFN4UFFVTXhRaXhOUVVGUFF5eEhRVUZMVGl4SFFVRlJMRVZCUTNSQ0xFOUJRVThzVTBGQlUwWXNaVUZCWlZBc1JVRkJSME1zUjBGSmFFTXNUMEZJUVVZc1RVRkJUVU1zUlVGQlIwTXNSMEZEVEZFc1JVRkJUMVFzUlVGQlJXZENMRlZCUVZsbUxFVkJRM0JDU1N4RlFVRkpUQ3hGUVVGSFF5eEhRVU5NUkN4SFFWWllMRU5CV1VVc1NVRkJTU3hSUVVGVGFVSXNSMEZEYWtKc1FpeE5RVUZQUVNJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYM05sZEMxd2NtOTBieTVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBnbG9iYWw9cmVxdWlyZShcIi4vX2dsb2JhbFwiKSxkUD1yZXF1aXJlKFwiLi9fb2JqZWN0LWRwXCIpLERFU0NSSVBUT1JTPXJlcXVpcmUoXCIuL19kZXNjcmlwdG9yc1wiKSxTUEVDSUVTPXJlcXVpcmUoXCIuL193a3NcIikoXCJzcGVjaWVzXCIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciByPWdsb2JhbFtlXTtERVNDUklQVE9SUyYmciYmIXJbU1BFQ0lFU10mJmRQLmYocixTUEVDSUVTLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9fSl9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5elpYUXRjM0JsWTJsbGN5NXFjeUpkTENKdVlXMWxjeUk2V3lKbmJHOWlZV3dpTENKeVpYRjFhWEpsSWl3aVpGQWlMQ0pFUlZORFVrbFFWRTlTVXlJc0lsTlFSVU5KUlZNaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2lTMFZaSWl3aVF5SXNJbVlpTENKamIyNW1hV2QxY21GaWJHVWlMQ0puWlhRaUxDSjBhR2x6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4aFFVTkJMRWxCUVVsQkxFOUJRVk5ETEZGQlFWRXNZVUZEYWtKRExFZEJRVXRFTEZGQlFWRXNaMEpCUTJKRkxGbEJRV05HTEZGQlFWRXNhMEpCUTNSQ1J5eFJRVUZWU0N4UlFVRlJMRk5CUVZKQkxFTkJRV3RDTEZkQlJXaERTU3hQUVVGUFF5eFJRVUZWTEZOQlFWVkRMRWRCUTNwQ0xFbEJRVWxETEVWQlFVbFNMRTlCUVU5UExFZEJRMWhLTEdGQlFXVkxMRWxCUVUxQkxFVkJRVVZLTEZWQlFWVkdMRWRCUVVkUExFVkJRVVZFTEVWQlFVZEtMRkZCUVZNc1EwRkRjRVJOTEdOQlFXTXNSVUZEWkVNc1NVRkJTeXhYUVVGakxFOUJRVTlESWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZjMlYwTFhOd1pXTnBaWE11YW5NaWZRPT0iLCJ2YXIgZGVmPXJlcXVpcmUoXCIuL19vYmplY3QtZHBcIikuZixoYXM9cmVxdWlyZShcIi4vX2hhc1wiKSxUQUc9cmVxdWlyZShcIi4vX3drc1wiKShcInRvU3RyaW5nVGFnXCIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKGUscixvKXtlJiYhaGFzKGU9bz9lOmUucHJvdG90eXBlLFRBRykmJmRlZihlLFRBRyx7Y29uZmlndXJhYmxlOiEwLHZhbHVlOnJ9KX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl6WlhRdGRHOHRjM1J5YVc1bkxYUmhaeTVxY3lKZExDSnVZVzFsY3lJNld5SmtaV1lpTENKeVpYRjFhWEpsSWl3aVppSXNJbWhoY3lJc0lsUkJSeUlzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKcGRDSXNJblJoWnlJc0luTjBZWFFpTENKd2NtOTBiM1I1Y0dVaUxDSmpiMjVtYVdkMWNtRmliR1VpTENKMllXeDFaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzU1VGQlNVRXNTVUZCVFVNc1VVRkJVU3huUWtGQlowSkRMRVZCUXpsQ1F5eEpRVUZOUml4UlFVRlJMRlZCUTJSSExFbEJRVTFJTEZGQlFWRXNVMEZCVWtFc1EwRkJhMElzWlVGRk5VSkpMRTlCUVU5RExGRkJRVlVzVTBGQlZVTXNSVUZCU1VNc1JVRkJTME1zUjBGRE9VSkdMRWxCUVU5S0xFbEJRVWxKTEVWQlFVdEZMRVZCUVU5R0xFVkJRVXRCTEVWQlFVZEhMRlZCUVZkT0xFMUJRVTFLTEVsQlFVbFBMRVZCUVVsSUxFbEJRVXNzUTBGQlJVOHNZMEZCWXl4RlFVRk5ReXhOUVVGUFNpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDNObGRDMTBieTF6ZEhKcGJtY3RkR0ZuTG1wekluMD0iLCJ2YXIgc2hhcmVkPXJlcXVpcmUoXCIuL19zaGFyZWRcIikoXCJrZXlzXCIpLHVpZD1yZXF1aXJlKFwiLi9fdWlkXCIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBzaGFyZWRbZV18fChzaGFyZWRbZV09dWlkKGUpKX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl6YUdGeVpXUXRhMlY1TG1weklsMHNJbTVoYldWeklqcGJJbk5vWVhKbFpDSXNJbkpsY1hWcGNtVWlMQ0oxYVdRaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2lhMlY1SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4SlFVRkpRU3hQUVVGVFF5eFJRVUZSTEZsQlFWSkJMRU5CUVhGQ0xGRkJRemxDUXl4SlFVRk5SQ3hSUVVGUkxGVkJRMnhDUlN4UFFVRlBReXhSUVVGVkxGTkJRVlZETEVkQlEzcENMRTlCUVU5TUxFOUJRVTlMTEV0QlFWTk1MRTlCUVU5TExFZEJRVTlJTEVsQlFVbEhJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZmMyaGhjbVZrTFd0bGVTNXFjeUo5IiwidmFyIGNvcmU9cmVxdWlyZShcIi4vX2NvcmVcIiksZ2xvYmFsPXJlcXVpcmUoXCIuL19nbG9iYWxcIiksU0hBUkVEPVwiX19jb3JlLWpzX3NoYXJlZF9fXCIsc3RvcmU9Z2xvYmFsW1NIQVJFRF18fChnbG9iYWxbU0hBUkVEXT17fSk7KG1vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKHIsZSl7cmV0dXJuIHN0b3JlW3JdfHwoc3RvcmVbcl09dm9pZCAwIT09ZT9lOnt9KX0pKFwidmVyc2lvbnNcIixbXSkucHVzaCh7dmVyc2lvbjpjb3JlLnZlcnNpb24sbW9kZTpyZXF1aXJlKFwiLi9fbGlicmFyeVwiKT9cInB1cmVcIjpcImdsb2JhbFwiLGNvcHlyaWdodDpcIsKpIDIwMTggRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSlcIn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5emFHRnlaV1F1YW5NaVhTd2libUZ0WlhNaU9sc2lZMjl5WlNJc0luSmxjWFZwY21VaUxDSm5iRzlpWVd3aUxDSlRTRUZTUlVRaUxDSnpkRzl5WlNJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaUxDSnJaWGtpTENKMllXeDFaU0lzSW5WdVpHVm1hVzVsWkNJc0luQjFjMmdpTENKMlpYSnphVzl1SWl3aWJXOWtaU0lzSW1OdmNIbHlhV2RvZENKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1NVRkJTVUVzUzBGQlQwTXNVVUZCVVN4WFFVTm1ReXhQUVVGVFJDeFJRVUZSTEdGQlEycENSU3hQUVVGVExIRkNRVU5VUXl4TlFVRlJSaXhQUVVGUFF5eFZRVUZaUkN4UFFVRlBReXhSUVVGVkxFdEJSUzlEUlN4UFFVRlBReXhSUVVGVkxGTkJRVlZETEVWQlFVdERMRWRCUXk5Q0xFOUJRVTlLTEUxQlFVMUhMRXRCUVZOSUxFMUJRVTFITEZGQlFXbENSU3hKUVVGV1JDeEZRVUZ6UWtFc1JVRkJVU3hOUVVOb1JTeFhRVUZaTEVsQlFVbEZMRXRCUVVzc1EwRkRkRUpETEZGQlFWTllMRXRCUVV0WExGRkJRMlJETEV0QlFVMVlMRkZCUVZFc1kwRkJaMElzVDBGQlV5eFRRVU4yUTFrc1ZVRkJWeUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgzTm9ZWEpsWkM1cWN5SjkiLCJ2YXIgYW5PYmplY3Q9cmVxdWlyZShcIi4vX2FuLW9iamVjdFwiKSxhRnVuY3Rpb249cmVxdWlyZShcIi4vX2EtZnVuY3Rpb25cIiksU1BFQ0lFUz1yZXF1aXJlKFwiLi9fd2tzXCIpKFwic3BlY2llc1wiKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihlLG4pe3ZhciByLHQ9YW5PYmplY3QoZSkuY29uc3RydWN0b3I7cmV0dXJuIHZvaWQgMD09PXR8fG51bGw9PShyPWFuT2JqZWN0KHQpW1NQRUNJRVNdKT9uOmFGdW5jdGlvbihyKX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl6Y0dWamFXVnpMV052Ym5OMGNuVmpkRzl5TG1weklsMHNJbTVoYldWeklqcGJJbUZ1VDJKcVpXTjBJaXdpY21WeGRXbHlaU0lzSW1GR2RXNWpkR2x2YmlJc0lsTlFSVU5KUlZNaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2lUeUlzSWtRaUxDSlRJaXdpUXlJc0ltTnZibk4wY25WamRHOXlJaXdpZFc1a1pXWnBibVZrSWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hUUVVGWFF5eFJRVUZSTEdkQ1FVTnVRa01zVlVGQldVUXNVVUZCVVN4cFFrRkRjRUpGTEZGQlFWVkdMRkZCUVZFc1UwRkJVa0VzUTBGQmEwSXNWMEZEYUVOSExFOUJRVTlETEZGQlFWVXNVMEZCVlVNc1JVRkJSME1zUjBGRE5VSXNTVUZEU1VNc1JVRkVRVU1zUlVGQlNWUXNVMEZCVTAwc1IwRkJSMGtzV1VGRmNFSXNXVUZCWVVNc1NVRkJUa1lzUjBGQmFVUkZMRTlCUVRkQ1NDeEZRVUZKVWl4VFFVRlRVeXhIUVVGSFRpeFZRVUY1UWtrc1JVRkJTVXdzVlVGQlZVMGlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5emNHVmphV1Z6TFdOdmJuTjBjblZqZEc5eUxtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIGZhaWxzPXJlcXVpcmUoXCIuL19mYWlsc1wiKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihsLG4pe3JldHVybiEhbCYmZmFpbHMoZnVuY3Rpb24oKXtuP2wuY2FsbChudWxsLGZ1bmN0aW9uKCl7fSwxKTpsLmNhbGwobnVsbCl9KX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl6ZEhKcFkzUXRiV1YwYUc5a0xtcHpJbDBzSW01aGJXVnpJanBiSW1aaGFXeHpJaXdpY21WeGRXbHlaU0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKdFpYUm9iMlFpTENKaGNtY2lMQ0pqWVd4c0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVU5CTEVsQlFVbEJMRTFCUVZGRExGRkJRVkVzV1VGRmNFSkRMRTlCUVU5RExGRkJRVlVzVTBGQlZVTXNSVUZCVVVNc1IwRkRha01zVVVGQlUwUXNSMEZCVlVvc1RVRkJUU3hYUVVWMlFrc3NSVUZCVFVRc1JVRkJUMFVzUzBGQlN5eExRVUZOTEdGQlFUWkNMRWRCUVV0R0xFVkJRVTlGTEV0QlFVc2lMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5emRISnBZM1F0YldWMGFHOWtMbXB6SW4wPSIsInZhciB0b0ludGVnZXI9cmVxdWlyZShcIi4vX3RvLWludGVnZXJcIiksZGVmaW5lZD1yZXF1aXJlKFwiLi9fZGVmaW5lZFwiKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24ocix0KXt2YXIgbixpLGQ9U3RyaW5nKGRlZmluZWQocikpLG89dG9JbnRlZ2VyKHQpLHU9ZC5sZW5ndGg7cmV0dXJuIG88MHx8bz49dT9lP1wiXCI6dm9pZCAwOihuPWQuY2hhckNvZGVBdChvKSk8NTUyOTZ8fG4+NTYzMTl8fG8rMT09PXV8fChpPWQuY2hhckNvZGVBdChvKzEpKTw1NjMyMHx8aT41NzM0Mz9lP2QuY2hhckF0KG8pOm46ZT9kLnNsaWNlKG8sbysyKTppLTU2MzIwKyhuLTU1Mjk2PDwxMCkrNjU1MzZ9fTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXpkSEpwYm1jdFlYUXVhbk1pWFN3aWJtRnRaWE1pT2xzaWRHOUpiblJsWjJWeUlpd2ljbVZ4ZFdseVpTSXNJbVJsWm1sdVpXUWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpVkU5ZlUxUlNTVTVISWl3aWRHaGhkQ0lzSW5CdmN5SXNJbUVpTENKaUlpd2ljeUlzSWxOMGNtbHVaeUlzSW1raUxDSnNJaXdpYkdWdVozUm9JaXdpZFc1a1pXWnBibVZrSWl3aVkyaGhja052WkdWQmRDSXNJbU5vWVhKQmRDSXNJbk5zYVdObElsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeEpRVUZKUVN4VlFVRlpReXhSUVVGUkxHbENRVU53UWtNc1VVRkJWVVFzVVVGQlVTeGpRVWQwUWtVc1QwRkJUME1zVVVGQlZTeFRRVUZWUXl4SFFVTjZRaXhQUVVGUExGTkJRVlZETEVWQlFVMURMRWRCUTNKQ0xFbEJSMGxETEVWQlFVZERMRVZCU0VoRExFVkJRVWxETEU5QlFVOVVMRkZCUVZGSkxFbEJRMjVDVFN4RlFVRkpXaXhWUVVGVlR5eEhRVU5rVFN4RlFVRkpTQ3hGUVVGRlNTeFBRVVZXTEU5QlFVbEdMRVZCUVVrc1IwRkJTMEVzUjBGQlMwTXNSVUZCVlZJc1JVRkJXU3hSUVVGTFZTeEhRVU0zUTFBc1JVRkJTVVVzUlVGQlJVMHNWMEZCVjBvc1NVRkRUaXhQUVVGVlNpeEZRVUZKTEU5QlFWVkpMRVZCUVVrc1NVRkJUVU1zU1VGQlRVb3NSVUZCU1VNc1JVRkJSVTBzVjBGQlYwb3NSVUZCU1N4SlFVRk5MRTlCUVZWSUxFVkJRVWtzVFVGRGVFWktMRVZCUVZsTExFVkJRVVZQTEU5QlFVOU1MRWRCUVV0S0xFVkJRekZDU0N4RlFVRlpTeXhGUVVGRlVTeE5RVUZOVGl4RlFVRkhRU3hGUVVGSkxFZEJRVEpDU0N4RlFVRkpMRTlCUVhwQ1JDeEZRVUZKTEU5QlFWVXNTVUZCY1VJaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTl6ZEhKcGJtY3RZWFF1YW5NaWZRPT0iLCJ2YXIgaXNSZWdFeHA9cmVxdWlyZShcIi4vX2lzLXJlZ2V4cFwiKSxkZWZpbmVkPXJlcXVpcmUoXCIuL19kZWZpbmVkXCIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKGUscixpKXtpZihpc1JlZ0V4cChyKSl0aHJvdyBUeXBlRXJyb3IoXCJTdHJpbmcjXCIraStcIiBkb2Vzbid0IGFjY2VwdCByZWdleCFcIik7cmV0dXJuIFN0cmluZyhkZWZpbmVkKGUpKX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl6ZEhKcGJtY3RZMjl1ZEdWNGRDNXFjeUpkTENKdVlXMWxjeUk2V3lKcGMxSmxaMFY0Y0NJc0luSmxjWFZwY21VaUxDSmtaV1pwYm1Wa0lpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SXNJblJvWVhRaUxDSnpaV0Z5WTJoVGRISnBibWNpTENKT1FVMUZJaXdpVkhsd1pVVnljbTl5SWl3aVUzUnlhVzVuSWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hUUVVGWFF5eFJRVUZSTEdkQ1FVTnVRa01zVVVGQlZVUXNVVUZCVVN4alFVVjBRa1VzVDBGQlQwTXNVVUZCVlN4VFFVRlZReXhGUVVGTlF5eEZRVUZqUXl4SFFVTTNReXhIUVVGSlVDeFRRVUZUVFN4SFFVRmxMRTFCUVUxRkxGVkJRVlVzVlVGQldVUXNSVUZCVHl3d1FrRkRMMFFzVDBGQlQwVXNUMEZCVDFBc1VVRkJVVWNpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOXpkSEpwYm1jdFkyOXVkR1Y0ZEM1cWN5SjkiLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLGZhaWxzPXJlcXVpcmUoXCIuL19mYWlsc1wiKSxkZWZpbmVkPXJlcXVpcmUoXCIuL19kZWZpbmVkXCIpLHF1b3Q9L1wiL2csY3JlYXRlSFRNTD1mdW5jdGlvbihlLHIsdCxpKXt2YXIgbj1TdHJpbmcoZGVmaW5lZChlKSksbz1cIjxcIityO3JldHVyblwiXCIhPT10JiYobys9XCIgXCIrdCsnPVwiJytTdHJpbmcoaSkucmVwbGFjZShxdW90LFwiJnF1b3Q7XCIpKydcIicpLG8rXCI+XCIrbitcIjwvXCIrcitcIj5cIn07bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZSxyKXt2YXIgdD17fTt0W2VdPXIoY3JlYXRlSFRNTCksJGV4cG9ydCgkZXhwb3J0LlArJGV4cG9ydC5GKmZhaWxzKGZ1bmN0aW9uKCl7dmFyIHI9XCJcIltlXSgnXCInKTtyZXR1cm4gciE9PXIudG9Mb3dlckNhc2UoKXx8ci5zcGxpdCgnXCInKS5sZW5ndGg+M30pLFwiU3RyaW5nXCIsdCl9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5emRISnBibWN0YUhSdGJDNXFjeUpkTENKdVlXMWxjeUk2V3lJa1pYaHdiM0owSWl3aWNtVnhkV2x5WlNJc0ltWmhhV3h6SWl3aVpHVm1hVzVsWkNJc0luRjFiM1FpTENKamNtVmhkR1ZJVkUxTUlpd2ljM1J5YVc1bklpd2lkR0ZuSWl3aVlYUjBjbWxpZFhSbElpd2lkbUZzZFdVaUxDSlRJaXdpVTNSeWFXNW5JaXdpY0RFaUxDSnlaWEJzWVdObElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SXNJazVCVFVVaUxDSmxlR1ZqSWl3aVR5SXNJbEFpTENKR0lpd2lkR1Z6ZENJc0luUnZURzkzWlhKRFlYTmxJaXdpYzNCc2FYUWlMQ0pzWlc1bmRHZ2lYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRWxCUVVsQkxGRkJRVlZETEZGQlFWRXNZVUZEYkVKRExFMUJRVkZFTEZGQlFWRXNXVUZEYUVKRkxGRkJRVlZHTEZGQlFWRXNZMEZEYkVKSExFdEJRVThzUzBGRlVFTXNWMEZCWVN4VFFVRlZReXhGUVVGUlF5eEZRVUZMUXl4RlFVRlhReXhIUVVOcVJDeEpRVUZKUXl4RlFVRkpReXhQUVVGUFVpeFJRVUZSUnl4SlFVTnVRazBzUlVGQlN5eEpRVUZOVEN4RlFVVm1MRTFCUkd0Q0xFdEJRV1JETEVsQlFXdENTU3hIUVVGTkxFbEJRVTFLTEVWQlFWa3NTMEZCVDBjc1QwRkJUMFlzUjBGQlQwa3NVVUZCVVZRc1MwRkJUU3hWUVVGWkxFdEJRM1JHVVN4RlFVRkxMRWxCUVUxR0xFVkJRVWtzUzBGQlQwZ3NSVUZCVFN4TFFVVnlRMDhzVDBGQlQwTXNVVUZCVlN4VFFVRlZReXhGUVVGTlF5eEhRVU12UWl4SlFVRkpReXhGUVVGSkxFZEJRMUpCTEVWQlFVVkdMRWRCUVZGRExFVkJRVXRhTEZsQlEyWk1MRkZCUVZGQkxGRkJRVkZ0UWl4RlFVRkpia0lzVVVGQlVXOUNMRVZCUVVsc1FpeE5RVUZOTEZkQlEzQkRMRWxCUVVsdFFpeEZRVUZQTEVkQlFVZE1MRWRCUVUwc1MwRkRjRUlzVDBGQlQwc3NTVUZCVTBFc1JVRkJTME1zWlVGQmFVSkVMRVZCUVV0RkxFMUJRVTBzUzBGQlMwTXNUMEZCVXl4SlFVTTNSQ3hUUVVGVlRpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDNOMGNtbHVaeTFvZEcxc0xtcHpJbjA9IiwidmFyIHRvTGVuZ3RoPXJlcXVpcmUoXCIuL190by1sZW5ndGhcIikscmVwZWF0PXJlcXVpcmUoXCIuL19zdHJpbmctcmVwZWF0XCIpLGRlZmluZWQ9cmVxdWlyZShcIi4vX2RlZmluZWRcIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZSxyLHQsbil7dmFyIGk9U3RyaW5nKGRlZmluZWQoZSkpLGc9aS5sZW5ndGgsbD12b2lkIDA9PT10P1wiIFwiOlN0cmluZyh0KSxhPXRvTGVuZ3RoKHIpO2lmKGE8PWd8fFwiXCI9PWwpcmV0dXJuIGk7dmFyIGQ9YS1nLGg9cmVwZWF0LmNhbGwobCxNYXRoLmNlaWwoZC9sLmxlbmd0aCkpO3JldHVybiBoLmxlbmd0aD5kJiYoaD1oLnNsaWNlKDAsZCkpLG4/aCtpOmkraH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl6ZEhKcGJtY3RjR0ZrTG1weklsMHNJbTVoYldWeklqcGJJblJ2VEdWdVozUm9JaXdpY21WeGRXbHlaU0lzSW5KbGNHVmhkQ0lzSW1SbFptbHVaV1FpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aWRHaGhkQ0lzSW0xaGVFeGxibWQwYUNJc0ltWnBiR3hUZEhKcGJtY2lMQ0pzWldaMElpd2lVeUlzSWxOMGNtbHVaeUlzSW5OMGNtbHVaMHhsYm1kMGFDSXNJbXhsYm1kMGFDSXNJbVpwYkd4VGRISWlMQ0oxYm1SbFptbHVaV1FpTENKcGJuUk5ZWGhNWlc1bmRHZ2lMQ0ptYVd4c1RHVnVJaXdpYzNSeWFXNW5SbWxzYkdWeUlpd2lZMkZzYkNJc0lrMWhkR2dpTENKalpXbHNJaXdpYzJ4cFkyVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVTkJMRWxCUVVsQkxGTkJRVmRETEZGQlFWRXNaMEpCUTI1Q1F5eFBRVUZUUkN4UlFVRlJMRzlDUVVOcVFrVXNVVUZCVlVZc1VVRkJVU3hqUVVWMFFrY3NUMEZCVDBNc1VVRkJWU3hUUVVGVlF5eEZRVUZOUXl4RlFVRlhReXhGUVVGWlF5eEhRVU4wUkN4SlFVRkpReXhGUVVGSlF5eFBRVUZQVWl4UlFVRlJSeXhKUVVOdVFrMHNSVUZCWlVZc1JVRkJSVWNzVDBGRGFrSkRMRTlCUVhsQ1F5eEpRVUZtVUN4RlFVRXlRaXhKUVVGTlJ5eFBRVUZQU0N4SFFVTnNSRkVzUlVGQlpXaENMRk5CUVZOUExFZEJRelZDTEVkQlFVbFRMRWRCUVdkQ1NpeEhRVUV5UWl4SlFVRllSU3hGUVVGbExFOUJRVTlLTEVWQlF6RkVMRWxCUVVsUExFVkJRVlZFTEVWQlFXVktMRVZCUTNwQ1RTeEZRVUZsYUVJc1QwRkJUMmxDTEV0QlFVdE1MRVZCUVZOTkxFdEJRVXRETEV0QlFVdEtMRVZCUVZWSUxFVkJRVkZFTEZOQlJYQkZMRTlCUkVsTExFVkJRV0ZNTEU5QlFWTkpMRWxCUVZORExFVkJRV1ZCTEVWQlFXRkpMRTFCUVUwc1JVRkJSMHdzU1VGRGFrVlNMRVZCUVU5VExFVkJRV1ZTTEVWQlFVbEJMRVZCUVVsUklpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmYzNSeWFXNW5MWEJoWkM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgdG9JbnRlZ2VyPXJlcXVpcmUoXCIuL190by1pbnRlZ2VyXCIpLGRlZmluZWQ9cmVxdWlyZShcIi4vX2RlZmluZWRcIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gcmVwZWF0KGUpe3ZhciByPVN0cmluZyhkZWZpbmVkKHRoaXMpKSx0PVwiXCIsbj10b0ludGVnZXIoZSk7aWYobjwwfHxuPT0xLzApdGhyb3cgUmFuZ2VFcnJvcihcIkNvdW50IGNhbid0IGJlIG5lZ2F0aXZlXCIpO2Zvcig7bj4wOyhuPj4+PTEpJiYocis9cikpMSZuJiYodCs9cik7cmV0dXJuIHR9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5emRISnBibWN0Y21Wd1pXRjBMbXB6SWwwc0ltNWhiV1Z6SWpwYkluUnZTVzUwWldkbGNpSXNJbkpsY1hWcGNtVWlMQ0prWldacGJtVmtJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSW5KbGNHVmhkQ0lzSW1OdmRXNTBJaXdpYzNSeUlpd2lVM1J5YVc1bklpd2lkR2hwY3lJc0luSmxjeUlzSW00aUxDSkpibVpwYm1sMGVTSXNJbEpoYm1kbFJYSnliM0lpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlEwRXNTVUZCU1VFc1ZVRkJXVU1zVVVGQlVTeHBRa0ZEY0VKRExGRkJRVlZFTEZGQlFWRXNZMEZGZEVKRkxFOUJRVTlETEZGQlFWVXNVMEZCVTBNc1QwRkJUME1zUjBGREwwSXNTVUZCU1VNc1JVRkJUVU1zVDBGQlQwNHNVVUZCVVU4c1QwRkRja0pETEVWQlFVMHNSMEZEVGtNc1JVRkJTVmdzVlVGQlZVMHNSMEZEYkVJc1IwRkJTVXNzUlVGQlNTeEhRVUZMUVN4SFFVRkxReXhGUVVGQlFTeEZRVUZWTEUxQlFVMURMRmRCUVZjc01rSkJRemRETEV0QlFVMUdMRVZCUVVrc1IwRkJTVUVzUzBGQlR5eExRVUZQU2l4SFFVRlBRU3hIUVVGakxFVkJRVXBKTEVsQlFVOUVMRWRCUVU5SUxFZEJRek5FTEU5QlFVOUhJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZmMzUnlhVzVuTFhKbGNHVmhkQzVxY3lKOSIsInZhciAkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIiksZGVmaW5lZD1yZXF1aXJlKFwiLi9fZGVmaW5lZFwiKSxmYWlscz1yZXF1aXJlKFwiLi9fZmFpbHNcIiksc3BhY2VzPXJlcXVpcmUoXCIuL19zdHJpbmctd3NcIiksc3BhY2U9XCJbXCIrc3BhY2VzK1wiXVwiLG5vbj1cIuKAi8KFXCIsbHRyaW09UmVnRXhwKFwiXlwiK3NwYWNlK3NwYWNlK1wiKlwiKSxydHJpbT1SZWdFeHAoc3BhY2Urc3BhY2UrXCIqJFwiKSxleHBvcnRlcj1mdW5jdGlvbihlLHIsdCl7dmFyIGk9e30scD1mYWlscyhmdW5jdGlvbigpe3JldHVybiEhc3BhY2VzW2VdKCl8fG5vbltlXSgpIT1ub259KSxuPWlbZV09cD9yKHRyaW0pOnNwYWNlc1tlXTt0JiYoaVt0XT1uKSwkZXhwb3J0KCRleHBvcnQuUCskZXhwb3J0LkYqcCxcIlN0cmluZ1wiLGkpfSx0cmltPWV4cG9ydGVyLnRyaW09ZnVuY3Rpb24oZSxyKXtyZXR1cm4gZT1TdHJpbmcoZGVmaW5lZChlKSksMSZyJiYoZT1lLnJlcGxhY2UobHRyaW0sXCJcIikpLDImciYmKGU9ZS5yZXBsYWNlKHJ0cmltLFwiXCIpKSxlfTttb2R1bGUuZXhwb3J0cz1leHBvcnRlcjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOXpkSEpwYm1jdGRISnBiUzVxY3lKZExDSnVZVzFsY3lJNld5SWtaWGh3YjNKMElpd2ljbVZ4ZFdseVpTSXNJbVJsWm1sdVpXUWlMQ0ptWVdsc2N5SXNJbk53WVdObGN5SXNJbk53WVdObElpd2libTl1SWl3aWJIUnlhVzBpTENKU1pXZEZlSEFpTENKeWRISnBiU0lzSW1WNGNHOXlkR1Z5SWl3aVMwVlpJaXdpWlhobFl5SXNJa0ZNU1VGVElpd2laWGh3SWl3aVJrOVNRMFVpTENKbWJpSXNJblJ5YVcwaUxDSlFJaXdpUmlJc0luTjBjbWx1WnlJc0lsUlpVRVVpTENKVGRISnBibWNpTENKeVpYQnNZV05sSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1NVRkJTVUVzVVVGQlZVTXNVVUZCVVN4aFFVTnNRa01zVVVGQlZVUXNVVUZCVVN4alFVTnNRa1VzVFVGQlVVWXNVVUZCVVN4WlFVTm9Ra2NzVDBGQlUwZ3NVVUZCVVN4blFrRkRha0pKTEUxQlFWRXNTVUZCVFVRc1QwRkJVeXhKUVVOMlFrVXNTVUZCVFN4TFFVTk9ReXhOUVVGUlF5eFBRVUZQTEVsQlFVMUlMRTFCUVZGQkxFMUJRVkVzUzBGRGNrTkpMRTFCUVZGRUxFOUJRVTlJTEUxQlFWRkJMRTFCUVZFc1RVRkZMMEpMTEZOQlFWY3NVMEZCVlVNc1JVRkJTME1zUlVGQlRVTXNSMEZEYkVNc1NVRkJTVU1zUlVGQlRTeEhRVU5PUXl4RlFVRlJXaXhOUVVGTkxGZEJRMmhDTEZGQlFWTkRMRTlCUVU5UExFMUJRVlZNTEVsQlFVbExMRTFCUVZWTUxFMUJSWFJEVlN4RlFVRkxSaXhGUVVGSlNDeEhRVUZQU1N4RlFVRlJTQ3hGUVVGTFN5eE5RVUZSWWl4UFFVRlBUeXhIUVVNMVEwVXNTVUZCVDBNc1JVRkJTVVFzUjBGQlUwY3NSMEZEZUVKb1FpeFJRVUZSUVN4UlFVRlJhMElzUlVGQlNXeENMRkZCUVZGdFFpeEZRVUZKU2l4RlFVRlBMRk5CUVZWRUxFbEJUUzlEUnl4TFFVRlBVQ3hUUVVGVFR5eExRVUZQTEZOQlFWVkhMRVZCUVZGRExFZEJTVE5ETEU5QlNFRkVMRVZCUVZORkxFOUJRVTl3UWl4UlFVRlJhMElzU1VGRFlpeEZRVUZRUXl4SlFVRlZSQ3hGUVVGVFFTeEZRVUZQUnl4UlFVRlJhRUlzVFVGQlR5eExRVU5zUXl4RlFVRlFZeXhKUVVGVlJDeEZRVUZUUVN4RlFVRlBSeXhSUVVGUlpDeE5RVUZQTEV0QlEzUkRWeXhIUVVkVVNTeFBRVUZQUXl4UlFVRlZaaUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgzTjBjbWx1WnkxMGNtbHRMbXB6SW4wPSIsIm1vZHVsZS5leHBvcnRzPVwiXFx0XFxuXFx2XFxmXFxyIMKg4ZqA4aCO4oCA4oCB4oCC4oCD4oCE4oCF4oCG4oCH4oCI4oCJ4oCK4oCv4oGf44CAXFx1MjAyOFxcdTIwMjlcXHVmZWZmXCI7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDl6ZEhKcGJtY3RkM011YW5NaVhTd2libUZ0WlhNaU9sc2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRkJMRTlCUVU5RExGRkJRVlVpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOXpkSEpwYm1jdGQzTXVhbk1pZlE9PSIsInZhciBkZWZlcixjaGFubmVsLHBvcnQsY3R4PXJlcXVpcmUoXCIuL19jdHhcIiksaW52b2tlPXJlcXVpcmUoXCIuL19pbnZva2VcIiksaHRtbD1yZXF1aXJlKFwiLi9faHRtbFwiKSxjZWw9cmVxdWlyZShcIi4vX2RvbS1jcmVhdGVcIiksZ2xvYmFsPXJlcXVpcmUoXCIuL19nbG9iYWxcIikscHJvY2Vzcz1nbG9iYWwucHJvY2VzcyxzZXRUYXNrPWdsb2JhbC5zZXRJbW1lZGlhdGUsY2xlYXJUYXNrPWdsb2JhbC5jbGVhckltbWVkaWF0ZSxNZXNzYWdlQ2hhbm5lbD1nbG9iYWwuTWVzc2FnZUNoYW5uZWwsRGlzcGF0Y2g9Z2xvYmFsLkRpc3BhdGNoLGNvdW50ZXI9MCxxdWV1ZT17fSxPTlJFQURZU1RBVEVDSEFOR0U9XCJvbnJlYWR5c3RhdGVjaGFuZ2VcIixydW49ZnVuY3Rpb24oKXt2YXIgZT0rdGhpcztpZihxdWV1ZS5oYXNPd25Qcm9wZXJ0eShlKSl7dmFyIHQ9cXVldWVbZV07ZGVsZXRlIHF1ZXVlW2VdLHQoKX19LGxpc3RlbmVyPWZ1bmN0aW9uKGUpe3J1bi5jYWxsKGUuZGF0YSl9O3NldFRhc2smJmNsZWFyVGFza3x8KHNldFRhc2s9ZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGUpe2Zvcih2YXIgdD1bXSxuPTE7YXJndW1lbnRzLmxlbmd0aD5uOyl0LnB1c2goYXJndW1lbnRzW24rK10pO3JldHVybiBxdWV1ZVsrK2NvdW50ZXJdPWZ1bmN0aW9uKCl7aW52b2tlKFwiZnVuY3Rpb25cIj09dHlwZW9mIGU/ZTpGdW5jdGlvbihlKSx0KX0sZGVmZXIoY291bnRlciksY291bnRlcn0sY2xlYXJUYXNrPWZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGUpe2RlbGV0ZSBxdWV1ZVtlXX0sXCJwcm9jZXNzXCI9PXJlcXVpcmUoXCIuL19jb2ZcIikocHJvY2Vzcyk/ZGVmZXI9ZnVuY3Rpb24oZSl7cHJvY2Vzcy5uZXh0VGljayhjdHgocnVuLGUsMSkpfTpEaXNwYXRjaCYmRGlzcGF0Y2gubm93P2RlZmVyPWZ1bmN0aW9uKGUpe0Rpc3BhdGNoLm5vdyhjdHgocnVuLGUsMSkpfTpNZXNzYWdlQ2hhbm5lbD8ocG9ydD0oY2hhbm5lbD1uZXcgTWVzc2FnZUNoYW5uZWwpLnBvcnQyLGNoYW5uZWwucG9ydDEub25tZXNzYWdlPWxpc3RlbmVyLGRlZmVyPWN0eChwb3J0LnBvc3RNZXNzYWdlLHBvcnQsMSkpOmdsb2JhbC5hZGRFdmVudExpc3RlbmVyJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBwb3N0TWVzc2FnZSYmIWdsb2JhbC5pbXBvcnRTY3JpcHRzPyhkZWZlcj1mdW5jdGlvbihlKXtnbG9iYWwucG9zdE1lc3NhZ2UoZStcIlwiLFwiKlwiKX0sZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsbGlzdGVuZXIsITEpKTpkZWZlcj1PTlJFQURZU1RBVEVDSEFOR0UgaW4gY2VsKFwic2NyaXB0XCIpP2Z1bmN0aW9uKGUpe2h0bWwuYXBwZW5kQ2hpbGQoY2VsKFwic2NyaXB0XCIpKVtPTlJFQURZU1RBVEVDSEFOR0VdPWZ1bmN0aW9uKCl7aHRtbC5yZW1vdmVDaGlsZCh0aGlzKSxydW4uY2FsbChlKX19OmZ1bmN0aW9uKGUpe3NldFRpbWVvdXQoY3R4KHJ1bixlLDEpLDApfSksbW9kdWxlLmV4cG9ydHM9e3NldDpzZXRUYXNrLGNsZWFyOmNsZWFyVGFza307XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDkwWVhOckxtcHpJbDBzSW01aGJXVnpJanBiSW1SbFptVnlJaXdpWTJoaGJtNWxiQ0lzSW5CdmNuUWlMQ0pqZEhnaUxDSnlaWEYxYVhKbElpd2lhVzUyYjJ0bElpd2lhSFJ0YkNJc0ltTmxiQ0lzSW1kc2IySmhiQ0lzSW5CeWIyTmxjM01pTENKelpYUlVZWE5ySWl3aWMyVjBTVzF0WldScFlYUmxJaXdpWTJ4bFlYSlVZWE5ySWl3aVkyeGxZWEpKYlcxbFpHbGhkR1VpTENKTlpYTnpZV2RsUTJoaGJtNWxiQ0lzSWtScGMzQmhkR05vSWl3aVkyOTFiblJsY2lJc0luRjFaWFZsSWl3aVQwNVNSVUZFV1ZOVVFWUkZRMGhCVGtkRklpd2ljblZ1SWl3aWFXUWlMQ0owYUdseklpd2lhR0Z6VDNkdVVISnZjR1Z5ZEhraUxDSm1iaUlzSW14cGMzUmxibVZ5SWl3aVpYWmxiblFpTENKallXeHNJaXdpWkdGMFlTSXNJbUZ5WjNNaUxDSnBJaXdpWVhKbmRXMWxiblJ6SWl3aWJHVnVaM1JvSWl3aWNIVnphQ0lzSWtaMWJtTjBhVzl1SWl3aWJtVjRkRlJwWTJzaUxDSnViM2NpTENKd2IzSjBNaUlzSW5CdmNuUXhJaXdpYjI1dFpYTnpZV2RsSWl3aWNHOXpkRTFsYzNOaFoyVWlMQ0poWkdSRmRtVnVkRXhwYzNSbGJtVnlJaXdpYVcxd2IzSjBVMk55YVhCMGN5SXNJbUZ3Y0dWdVpFTm9hV3hrSWl3aWNtVnRiM1psUTJocGJHUWlMQ0p6WlhSVWFXMWxiM1YwSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0luTmxkQ0lzSW1Oc1pXRnlJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hKUVdGSlFTeE5RVUZQUXl4UlFVRlRReXhMUVdKb1FrTXNTVUZCVFVNc1VVRkJVU3hWUVVOa1F5eFBRVUZUUkN4UlFVRlJMR0ZCUTJwQ1JTeExRVUZQUml4UlFVRlJMRmRCUTJaSExFbEJRVTFJTEZGQlFWRXNhVUpCUTJSSkxFOUJRVk5LTEZGQlFWRXNZVUZEYWtKTExGRkJRVlZFTEU5QlFVOURMRkZCUTJwQ1F5eFJRVUZWUml4UFFVRlBSeXhoUVVOcVFrTXNWVUZCV1Vvc1QwRkJUMHNzWlVGRGJrSkRMR1ZCUVdsQ1RpeFBRVUZQVFN4bFFVTjRRa01zVTBGQlYxQXNUMEZCVDA4c1UwRkRiRUpETEZGQlFWVXNSVUZEVmtNc1RVRkJVU3hIUVVOU1F5eHRRa0ZCY1VJc2NVSkJSWEpDUXl4SlFVRk5MRmRCUTFJc1NVRkJTVU1zUjBGQlRVTXNTMEZGVml4SFFVRkpTaXhOUVVGTlN5eGxRVUZsUml4SFFVRkxMRU5CUXpWQ0xFbEJRVWxITEVWQlFVdE9MRTFCUVUxSExGVkJRMUpJTEUxQlFVMUhMRWRCUTJKSExFMUJSMEZETEZOQlFWY3NVMEZCVlVNc1IwRkRka0pPTEVsQlFVbFBMRXRCUVV0RUxFVkJRVTFGTEU5QlIxcHFRaXhUUVVGWlJTeFpRVU5tUml4UlFVRlZMRk5CUVZORExHRkJRV0ZaTEVkQlJ6bENMRWxCUmtFc1NVRkJTVXNzUlVGQlR5eEhRVU5RUXl4RlFVRkpMRVZCUTBSRExGVkJRVlZETEU5QlFWTkdMRWRCUVVkRUxFVkJRVXRKTEV0QlFVdEdMRlZCUVZWRUxFMUJUV3BFTEU5QlRFRmFMRkZCUVZGRUxGTkJRVmNzVjBGRmFrSllMRTlCUVc5Q0xHMUNRVUZPYTBJc1JVRkJiVUpCTEVWQlFVdFZMRk5CUVZOV0xFZEJRVXRMTEVsQlJYUkVOVUlzVFVGQlRXZENMRk5CUTBOQkxGTkJSVlJLTEZWQlFWa3NVMEZCVTBNc1pVRkJaVThzVlVGRE0wSklMRTFCUVUxSExFbEJSMjFDTEZkQlFUbENhRUlzVVVGQlVTeFRRVUZTUVN4RFFVRnJRa3NzVTBGRGNFSlVMRTFCUVZFc1UwRkJWVzlDTEVkQlEyaENXQ3hSUVVGUmVVSXNVMEZCVXk5Q0xFbEJRVWxuUWl4SlFVRkxReXhGUVVGSkxFdEJSM1pDVEN4VlFVRlpRU3hUUVVGVGIwSXNTVUZET1VKdVF5eE5RVUZSTEZOQlFWVnZRaXhIUVVOb1Frd3NVMEZCVTI5Q0xFbEJRVWxvUXl4SlFVRkpaMElzU1VGQlMwTXNSVUZCU1N4TFFVZHVRazRzWjBKQlJWUmFMRTFCUkVGRUxGRkJRVlVzU1VGQlNXRXNaMEpCUTBOelFpeE5RVU5tYmtNc1VVRkJVVzlETEUxQlFVMURMRlZCUVZsa0xGTkJRekZDZUVJc1RVRkJVVWNzU1VGQlNVUXNTMEZCUzNGRExGbEJRV0Z5UXl4TFFVRk5MRWxCUnpOQ1RTeFBRVUZQWjBNc2EwSkJRVEJETEcxQ1FVRm1SQ3hqUVVFNFFpOUNMRTlCUVU5cFF5eGxRVU5vUm5wRExFMUJRVkVzVTBGQlZXOUNMRWRCUTJoQ1dpeFBRVUZQSzBJc1dVRkJXVzVDTEVWQlFVc3NSMEZCU1N4TlFVVTVRbG9zVDBGQlQyZERMR2xDUVVGcFFpeFZRVUZYYUVJc1ZVRkJWU3hKUVVjM1EzaENMRTFCUkZOclFpeHpRa0ZCYzBKWUxFbEJRVWtzVlVGRE0wSXNVMEZCVldFc1IwRkRhRUprTEV0QlFVdHZReXhaUVVGWmJrTXNTVUZCU1N4WFFVRlhWeXh2UWtGQmMwSXNWMEZEY0VSYUxFdEJRVXR4UXl4WlFVRlpkRUlzVFVGRGFrSkdMRWxCUVVsUExFdEJRVXRPTEV0QlMwd3NVMEZCVlVFc1IwRkRhRUozUWl4WFFVRlhla01zU1VGQlNXZENMRWxCUVV0RExFVkJRVWtzUjBGQlNTeExRVWxzUTNsQ0xFOUJRVTlETEZGQlFWVXNRMEZEWmtNc1NVRkJTM0pETEZGQlEweHpReXhOUVVGUGNFTWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5MFlYTnJMbXB6SW4wPSIsInZhciB0b0ludGVnZXI9cmVxdWlyZShcIi4vX3RvLWludGVnZXJcIiksbWF4PU1hdGgubWF4LG1pbj1NYXRoLm1pbjttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3JldHVybihlPXRvSW50ZWdlcihlKSk8MD9tYXgoZSt0LDApOm1pbihlLHQpfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOTBieTFoWW5OdmJIVjBaUzFwYm1SbGVDNXFjeUpkTENKdVlXMWxjeUk2V3lKMGIwbHVkR1ZuWlhJaUxDSnlaWEYxYVhKbElpd2liV0Y0SWl3aVRXRjBhQ0lzSW0xcGJpSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0pwYm1SbGVDSXNJbXhsYm1kMGFDSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNTVUZCU1VFc1ZVRkJXVU1zVVVGQlVTeHBRa0ZEY0VKRExFbEJRVTFETEV0QlFVdEVMRWxCUTFoRkxFbEJRVTFFTEV0QlFVdERMRWxCUTJaRExFOUJRVTlETEZGQlFWVXNVMEZCVlVNc1JVRkJUME1zUjBGRmFFTXNUMEZFUVVRc1JVRkJVVkFzVlVGQlZVOHNTVUZEU0N4RlFVRkpUQ3hKUVVGSlN5eEZRVUZSUXl4RlFVRlJMRWRCUVV0S0xFbEJRVWxITEVWQlFVOURJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZmRHOHRZV0p6YjJ4MWRHVXRhVzVrWlhndWFuTWlmUT09IiwidmFyIHRvSW50ZWdlcj1yZXF1aXJlKFwiLi9fdG8taW50ZWdlclwiKSx0b0xlbmd0aD1yZXF1aXJlKFwiLi9fdG8tbGVuZ3RoXCIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKHZvaWQgMD09PWUpcmV0dXJuIDA7dmFyIHI9dG9JbnRlZ2VyKGUpLHQ9dG9MZW5ndGgocik7aWYociE9PXQpdGhyb3cgUmFuZ2VFcnJvcihcIldyb25nIGxlbmd0aCFcIik7cmV0dXJuIHR9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5MGJ5MXBibVJsZUM1cWN5SmRMQ0p1WVcxbGN5STZXeUowYjBsdWRHVm5aWElpTENKeVpYRjFhWEpsSWl3aWRHOU1aVzVuZEdnaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2lhWFFpTENKMWJtUmxabWx1WldRaUxDSnVkVzFpWlhJaUxDSnNaVzVuZEdnaUxDSlNZVzVuWlVWeWNtOXlJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRU3hKUVVGSlFTeFZRVUZaUXl4UlFVRlJMR2xDUVVOd1FrTXNVMEZCVjBRc1VVRkJVU3huUWtGRGRrSkZMRTlCUVU5RExGRkJRVlVzVTBGQlZVTXNSMEZEZWtJc1VVRkJWME1zU1VGQlVFUXNSVUZCYTBJc1QwRkJUeXhGUVVNM1FpeEpRVUZKUlN4RlFVRlRVQ3hWUVVGVlN5eEhRVU51UWtjc1JVRkJVMDRzVTBGQlUwc3NSMEZEZEVJc1IwRkJTVUVzU1VGQlYwTXNSVUZCVVN4TlFVRk5ReXhYUVVGWExHbENRVU40UXl4UFFVRlBSQ0lzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgzUnZMV2x1WkdWNExtcHpJbjA9IiwidmFyIGNlaWw9TWF0aC5jZWlsLGZsb29yPU1hdGguZmxvb3I7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24obyl7cmV0dXJuIGlzTmFOKG89K28pPzA6KG8+MD9mbG9vcjpjZWlsKShvKX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDkwYnkxcGJuUmxaMlZ5TG1weklsMHNJbTVoYldWeklqcGJJbU5sYVd3aUxDSk5ZWFJvSWl3aVpteHZiM0lpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aWFYUWlMQ0pwYzA1aFRpSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwRXNTVUZCU1VFc1MwRkJUME1zUzBGQlMwUXNTMEZEV2tVc1RVRkJVVVFzUzBGQlMwTXNUVUZEYWtKRExFOUJRVTlETEZGQlFWVXNVMEZCVlVNc1IwRkRla0lzVDBGQlQwTXNUVUZCVFVRc1IwRkJUVUVzUjBGQlRTeEhRVUZMUVN4RlFVRkxMRVZCUVVsSUxFMUJRVkZHTEUxQlFVMUxJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZmRHOHRhVzUwWldkbGNpNXFjeUo5IiwidmFyIElPYmplY3Q9cmVxdWlyZShcIi4vX2lvYmplY3RcIiksZGVmaW5lZD1yZXF1aXJlKFwiLi9fZGVmaW5lZFwiKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gSU9iamVjdChkZWZpbmVkKGUpKX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDkwYnkxcGIySnFaV04wTG1weklsMHNJbTVoYldWeklqcGJJa2xQWW1wbFkzUWlMQ0p5WlhGMWFYSmxJaXdpWkdWbWFXNWxaQ0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKcGRDSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwRXNTVUZCU1VFc1VVRkJWVU1zVVVGQlVTeGpRVU5zUWtNc1VVRkJWVVFzVVVGQlVTeGpRVU4wUWtVc1QwRkJUME1zVVVGQlZTeFRRVUZWUXl4SFFVTjZRaXhQUVVGUFRDeFJRVUZSUlN4UlFVRlJSeUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgzUnZMV2x2WW1wbFkzUXVhbk1pZlE9PSIsInZhciB0b0ludGVnZXI9cmVxdWlyZShcIi4vX3RvLWludGVnZXJcIiksbWluPU1hdGgubWluO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBlPjA/bWluKHRvSW50ZWdlcihlKSw5MDA3MTk5MjU0NzQwOTkxKTowfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOTBieTFzWlc1bmRHZ3Vhbk1pWFN3aWJtRnRaWE1pT2xzaWRHOUpiblJsWjJWeUlpd2ljbVZ4ZFdseVpTSXNJbTFwYmlJc0lrMWhkR2dpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aWFYUWlYU3dpYldGd2NHbHVaM01pT2lKQlFVTkJMRWxCUVVsQkxGVkJRVmxETEZGQlFWRXNhVUpCUTNCQ1F5eEpRVUZOUXl4TFFVRkxSQ3hKUVVObVJTeFBRVUZQUXl4UlFVRlZMRk5CUVZWRExFZEJRM3BDTEU5QlFVOUJMRVZCUVVzc1JVRkJTVW9zU1VGQlNVWXNWVUZCVlUwc1IwRkJTeXhyUWtGQmIwSWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5MGJ5MXNaVzVuZEdndWFuTWlmUT09IiwidmFyIGRlZmluZWQ9cmVxdWlyZShcIi4vX2RlZmluZWRcIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdChkZWZpbmVkKGUpKX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDkwYnkxdlltcGxZM1F1YW5NaVhTd2libUZ0WlhNaU9sc2laR1ZtYVc1bFpDSXNJbkpsY1hWcGNtVWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpYVhRaUxDSlBZbXBsWTNRaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVOQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc1kwRkRkRUpETEU5QlFVOURMRkZCUVZVc1UwRkJWVU1zUjBGRGVrSXNUMEZCVDBNc1QwRkJUMHdzVVVGQlVVa2lMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5MGJ5MXZZbXBsWTNRdWFuTWlmUT09IiwidmFyIGlzT2JqZWN0PXJlcXVpcmUoXCIuL19pcy1vYmplY3RcIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtpZighaXNPYmplY3QodCkpcmV0dXJuIHQ7dmFyIHIsaTtpZihlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZihyPXQudG9TdHJpbmcpJiYhaXNPYmplY3QoaT1yLmNhbGwodCkpKXJldHVybiBpO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mKHI9dC52YWx1ZU9mKSYmIWlzT2JqZWN0KGk9ci5jYWxsKHQpKSlyZXR1cm4gaTtpZighZSYmXCJmdW5jdGlvblwiPT10eXBlb2Yocj10LnRvU3RyaW5nKSYmIWlzT2JqZWN0KGk9ci5jYWxsKHQpKSlyZXR1cm4gaTt0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIil9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5MGJ5MXdjbWx0YVhScGRtVXVhbk1pWFN3aWJtRnRaWE1pT2xzaWFYTlBZbXBsWTNRaUxDSnlaWEYxYVhKbElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SXNJbWwwSWl3aVV5SXNJbVp1SWl3aWRtRnNJaXdpZEc5VGRISnBibWNpTENKallXeHNJaXdpZG1Gc2RXVlBaaUlzSWxSNWNHVkZjbkp2Y2lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUTBFc1NVRkJTVUVzVTBGQlYwTXNVVUZCVVN4blFrRkhka0pETEU5QlFVOURMRkZCUVZVc1UwRkJWVU1zUlVGQlNVTXNSMEZETjBJc1NVRkJTMHdzVTBGQlUwa3NSMEZCU3l4UFFVRlBRU3hGUVVNeFFpeEpRVUZKUlN4RlFVRkpReXhGUVVOU0xFZEJRVWxHTEVkQlFXdERMRzFDUVVGeVFrTXNSVUZCUzBZc1JVRkJSMGtzV1VGQk5FSlNMRk5CUVZOUExFVkJRVTFFTEVWQlFVZEhMRXRCUVV0TUxFbEJRVTBzVDBGQlQwY3NSVUZEZWtZc1IwRkJaME1zYlVKQlFYQkNSQ3hGUVVGTFJpeEZRVUZIVFN4WFFVRXlRbFlzVTBGQlUwOHNSVUZCVFVRc1JVRkJSMGNzUzBGQlMwd3NTVUZCVFN4UFFVRlBSeXhGUVVOdVJpeEpRVUZMUml4SFFVRnJReXh0UWtGQmNrSkRMRVZCUVV0R0xFVkJRVWRKTEZsQlFUUkNVaXhUUVVGVFR5eEZRVUZOUkN4RlFVRkhSeXhMUVVGTFRDeEpRVUZOTEU5QlFVOUhMRVZCUXpGR0xFMUJRVTFKTEZWQlFWVWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5MGJ5MXdjbWx0YVhScGRtVXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO2lmKHJlcXVpcmUoXCIuL19kZXNjcmlwdG9yc1wiKSl7dmFyIExJQlJBUlk9cmVxdWlyZShcIi4vX2xpYnJhcnlcIiksZ2xvYmFsPXJlcXVpcmUoXCIuL19nbG9iYWxcIiksZmFpbHM9cmVxdWlyZShcIi4vX2ZhaWxzXCIpLCRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKSwkdHlwZWQ9cmVxdWlyZShcIi4vX3R5cGVkXCIpLCRidWZmZXI9cmVxdWlyZShcIi4vX3R5cGVkLWJ1ZmZlclwiKSxjdHg9cmVxdWlyZShcIi4vX2N0eFwiKSxhbkluc3RhbmNlPXJlcXVpcmUoXCIuL19hbi1pbnN0YW5jZVwiKSxwcm9wZXJ0eURlc2M9cmVxdWlyZShcIi4vX3Byb3BlcnR5LWRlc2NcIiksaGlkZT1yZXF1aXJlKFwiLi9faGlkZVwiKSxyZWRlZmluZUFsbD1yZXF1aXJlKFwiLi9fcmVkZWZpbmUtYWxsXCIpLHRvSW50ZWdlcj1yZXF1aXJlKFwiLi9fdG8taW50ZWdlclwiKSx0b0xlbmd0aD1yZXF1aXJlKFwiLi9fdG8tbGVuZ3RoXCIpLHRvSW5kZXg9cmVxdWlyZShcIi4vX3RvLWluZGV4XCIpLHRvQWJzb2x1dGVJbmRleD1yZXF1aXJlKFwiLi9fdG8tYWJzb2x1dGUtaW5kZXhcIiksdG9QcmltaXRpdmU9cmVxdWlyZShcIi4vX3RvLXByaW1pdGl2ZVwiKSxoYXM9cmVxdWlyZShcIi4vX2hhc1wiKSxjbGFzc29mPXJlcXVpcmUoXCIuL19jbGFzc29mXCIpLGlzT2JqZWN0PXJlcXVpcmUoXCIuL19pcy1vYmplY3RcIiksdG9PYmplY3Q9cmVxdWlyZShcIi4vX3RvLW9iamVjdFwiKSxpc0FycmF5SXRlcj1yZXF1aXJlKFwiLi9faXMtYXJyYXktaXRlclwiKSxjcmVhdGU9cmVxdWlyZShcIi4vX29iamVjdC1jcmVhdGVcIiksZ2V0UHJvdG90eXBlT2Y9cmVxdWlyZShcIi4vX29iamVjdC1ncG9cIiksZ09QTj1yZXF1aXJlKFwiLi9fb2JqZWN0LWdvcG5cIikuZixnZXRJdGVyRm49cmVxdWlyZShcIi4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kXCIpLHVpZD1yZXF1aXJlKFwiLi9fdWlkXCIpLHdrcz1yZXF1aXJlKFwiLi9fd2tzXCIpLGNyZWF0ZUFycmF5TWV0aG9kPXJlcXVpcmUoXCIuL19hcnJheS1tZXRob2RzXCIpLGNyZWF0ZUFycmF5SW5jbHVkZXM9cmVxdWlyZShcIi4vX2FycmF5LWluY2x1ZGVzXCIpLHNwZWNpZXNDb25zdHJ1Y3Rvcj1yZXF1aXJlKFwiLi9fc3BlY2llcy1jb25zdHJ1Y3RvclwiKSxBcnJheUl0ZXJhdG9ycz1yZXF1aXJlKFwiLi9lczYuYXJyYXkuaXRlcmF0b3JcIiksSXRlcmF0b3JzPXJlcXVpcmUoXCIuL19pdGVyYXRvcnNcIiksJGl0ZXJEZXRlY3Q9cmVxdWlyZShcIi4vX2l0ZXItZGV0ZWN0XCIpLHNldFNwZWNpZXM9cmVxdWlyZShcIi4vX3NldC1zcGVjaWVzXCIpLGFycmF5RmlsbD1yZXF1aXJlKFwiLi9fYXJyYXktZmlsbFwiKSxhcnJheUNvcHlXaXRoaW49cmVxdWlyZShcIi4vX2FycmF5LWNvcHktd2l0aGluXCIpLCREUD1yZXF1aXJlKFwiLi9fb2JqZWN0LWRwXCIpLCRHT1BEPXJlcXVpcmUoXCIuL19vYmplY3QtZ29wZFwiKSxkUD0kRFAuZixnT1BEPSRHT1BELmYsUmFuZ2VFcnJvcj1nbG9iYWwuUmFuZ2VFcnJvcixUeXBlRXJyb3I9Z2xvYmFsLlR5cGVFcnJvcixVaW50OEFycmF5PWdsb2JhbC5VaW50OEFycmF5LEFSUkFZX0JVRkZFUj1cIkFycmF5QnVmZmVyXCIsU0hBUkVEX0JVRkZFUj1cIlNoYXJlZFwiK0FSUkFZX0JVRkZFUixCWVRFU19QRVJfRUxFTUVOVD1cIkJZVEVTX1BFUl9FTEVNRU5UXCIsUFJPVE9UWVBFPVwicHJvdG90eXBlXCIsQXJyYXlQcm90bz1BcnJheVtQUk9UT1RZUEVdLCRBcnJheUJ1ZmZlcj0kYnVmZmVyLkFycmF5QnVmZmVyLCREYXRhVmlldz0kYnVmZmVyLkRhdGFWaWV3LGFycmF5Rm9yRWFjaD1jcmVhdGVBcnJheU1ldGhvZCgwKSxhcnJheUZpbHRlcj1jcmVhdGVBcnJheU1ldGhvZCgyKSxhcnJheVNvbWU9Y3JlYXRlQXJyYXlNZXRob2QoMyksYXJyYXlFdmVyeT1jcmVhdGVBcnJheU1ldGhvZCg0KSxhcnJheUZpbmQ9Y3JlYXRlQXJyYXlNZXRob2QoNSksYXJyYXlGaW5kSW5kZXg9Y3JlYXRlQXJyYXlNZXRob2QoNiksYXJyYXlJbmNsdWRlcz1jcmVhdGVBcnJheUluY2x1ZGVzKCEwKSxhcnJheUluZGV4T2Y9Y3JlYXRlQXJyYXlJbmNsdWRlcyghMSksYXJyYXlWYWx1ZXM9QXJyYXlJdGVyYXRvcnMudmFsdWVzLGFycmF5S2V5cz1BcnJheUl0ZXJhdG9ycy5rZXlzLGFycmF5RW50cmllcz1BcnJheUl0ZXJhdG9ycy5lbnRyaWVzLGFycmF5TGFzdEluZGV4T2Y9QXJyYXlQcm90by5sYXN0SW5kZXhPZixhcnJheVJlZHVjZT1BcnJheVByb3RvLnJlZHVjZSxhcnJheVJlZHVjZVJpZ2h0PUFycmF5UHJvdG8ucmVkdWNlUmlnaHQsYXJyYXlKb2luPUFycmF5UHJvdG8uam9pbixhcnJheVNvcnQ9QXJyYXlQcm90by5zb3J0LGFycmF5U2xpY2U9QXJyYXlQcm90by5zbGljZSxhcnJheVRvU3RyaW5nPUFycmF5UHJvdG8udG9TdHJpbmcsYXJyYXlUb0xvY2FsZVN0cmluZz1BcnJheVByb3RvLnRvTG9jYWxlU3RyaW5nLElURVJBVE9SPXdrcyhcIml0ZXJhdG9yXCIpLFRBRz13a3MoXCJ0b1N0cmluZ1RhZ1wiKSxUWVBFRF9DT05TVFJVQ1RPUj11aWQoXCJ0eXBlZF9jb25zdHJ1Y3RvclwiKSxERUZfQ09OU1RSVUNUT1I9dWlkKFwiZGVmX2NvbnN0cnVjdG9yXCIpLEFMTF9DT05TVFJVQ1RPUlM9JHR5cGVkLkNPTlNUUixUWVBFRF9BUlJBWT0kdHlwZWQuVFlQRUQsVklFVz0kdHlwZWQuVklFVyxXUk9OR19MRU5HVEg9XCJXcm9uZyBsZW5ndGghXCIsJG1hcD1jcmVhdGVBcnJheU1ldGhvZCgxLGZ1bmN0aW9uKHIsZSl7cmV0dXJuIGFsbG9jYXRlKHNwZWNpZXNDb25zdHJ1Y3RvcihyLHJbREVGX0NPTlNUUlVDVE9SXSksZSl9KSxMSVRUTEVfRU5ESUFOPWZhaWxzKGZ1bmN0aW9uKCl7cmV0dXJuIDE9PT1uZXcgVWludDhBcnJheShuZXcgVWludDE2QXJyYXkoWzFdKS5idWZmZXIpWzBdfSksRk9SQ0VEX1NFVD0hIVVpbnQ4QXJyYXkmJiEhVWludDhBcnJheVtQUk9UT1RZUEVdLnNldCYmZmFpbHMoZnVuY3Rpb24oKXtuZXcgVWludDhBcnJheSgxKS5zZXQoe30pfSksdG9PZmZzZXQ9ZnVuY3Rpb24ocixlKXt2YXIgdD10b0ludGVnZXIocik7aWYodDwwfHx0JWUpdGhyb3cgUmFuZ2VFcnJvcihcIldyb25nIG9mZnNldCFcIik7cmV0dXJuIHR9LHZhbGlkYXRlPWZ1bmN0aW9uKHIpe2lmKGlzT2JqZWN0KHIpJiZUWVBFRF9BUlJBWSBpbiByKXJldHVybiByO3Rocm93IFR5cGVFcnJvcihyK1wiIGlzIG5vdCBhIHR5cGVkIGFycmF5IVwiKX0sYWxsb2NhdGU9ZnVuY3Rpb24ocixlKXtpZighKGlzT2JqZWN0KHIpJiZUWVBFRF9DT05TVFJVQ1RPUiBpbiByKSl0aHJvdyBUeXBlRXJyb3IoXCJJdCBpcyBub3QgYSB0eXBlZCBhcnJheSBjb25zdHJ1Y3RvciFcIik7cmV0dXJuIG5ldyByKGUpfSxzcGVjaWVzRnJvbUxpc3Q9ZnVuY3Rpb24ocixlKXtyZXR1cm4gZnJvbUxpc3Qoc3BlY2llc0NvbnN0cnVjdG9yKHIscltERUZfQ09OU1RSVUNUT1JdKSxlKX0sZnJvbUxpc3Q9ZnVuY3Rpb24ocixlKXtmb3IodmFyIHQ9MCxhPWUubGVuZ3RoLGk9YWxsb2NhdGUocixhKTthPnQ7KWlbdF09ZVt0KytdO3JldHVybiBpfSxhZGRHZXR0ZXI9ZnVuY3Rpb24ocixlLHQpe2RQKHIsZSx7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2RbdF19fSl9LCRmcm9tPWZ1bmN0aW9uIGZyb20ocil7dmFyIGUsdCxhLGksbyxuLHM9dG9PYmplY3QociksYz1hcmd1bWVudHMubGVuZ3RoLHU9Yz4xP2FyZ3VtZW50c1sxXTp2b2lkIDAsbD12b2lkIDAhPT11LGY9Z2V0SXRlckZuKHMpO2lmKG51bGwhPWYmJiFpc0FycmF5SXRlcihmKSl7Zm9yKG49Zi5jYWxsKHMpLGE9W10sZT0wOyEobz1uLm5leHQoKSkuZG9uZTtlKyspYS5wdXNoKG8udmFsdWUpO3M9YX1mb3IobCYmYz4yJiYodT1jdHgodSxhcmd1bWVudHNbMl0sMikpLGU9MCx0PXRvTGVuZ3RoKHMubGVuZ3RoKSxpPWFsbG9jYXRlKHRoaXMsdCk7dD5lO2UrKylpW2VdPWw/dShzW2VdLGUpOnNbZV07cmV0dXJuIGl9LCRvZj1mdW5jdGlvbiBvZigpe2Zvcih2YXIgcj0wLGU9YXJndW1lbnRzLmxlbmd0aCx0PWFsbG9jYXRlKHRoaXMsZSk7ZT5yOyl0W3JdPWFyZ3VtZW50c1tyKytdO3JldHVybiB0fSxUT19MT0NBTEVfQlVHPSEhVWludDhBcnJheSYmZmFpbHMoZnVuY3Rpb24oKXthcnJheVRvTG9jYWxlU3RyaW5nLmNhbGwobmV3IFVpbnQ4QXJyYXkoMSkpfSksJHRvTG9jYWxlU3RyaW5nPWZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCl7cmV0dXJuIGFycmF5VG9Mb2NhbGVTdHJpbmcuYXBwbHkoVE9fTE9DQUxFX0JVRz9hcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcykpOnZhbGlkYXRlKHRoaXMpLGFyZ3VtZW50cyl9LHByb3RvPXtjb3B5V2l0aGluOmZ1bmN0aW9uIGNvcHlXaXRoaW4ocixlKXtyZXR1cm4gYXJyYXlDb3B5V2l0aGluLmNhbGwodmFsaWRhdGUodGhpcykscixlLGFyZ3VtZW50cy5sZW5ndGg+Mj9hcmd1bWVudHNbMl06dm9pZCAwKX0sZXZlcnk6ZnVuY3Rpb24gZXZlcnkocil7cmV0dXJuIGFycmF5RXZlcnkodmFsaWRhdGUodGhpcykscixhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCl9LGZpbGw6ZnVuY3Rpb24gZmlsbChyKXtyZXR1cm4gYXJyYXlGaWxsLmFwcGx5KHZhbGlkYXRlKHRoaXMpLGFyZ3VtZW50cyl9LGZpbHRlcjpmdW5jdGlvbiBmaWx0ZXIocil7cmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLGFycmF5RmlsdGVyKHZhbGlkYXRlKHRoaXMpLHIsYXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDApKX0sZmluZDpmdW5jdGlvbiBmaW5kKHIpe3JldHVybiBhcnJheUZpbmQodmFsaWRhdGUodGhpcykscixhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCl9LGZpbmRJbmRleDpmdW5jdGlvbiBmaW5kSW5kZXgocil7cmV0dXJuIGFycmF5RmluZEluZGV4KHZhbGlkYXRlKHRoaXMpLHIsYXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDApfSxmb3JFYWNoOmZ1bmN0aW9uIGZvckVhY2gocil7YXJyYXlGb3JFYWNoKHZhbGlkYXRlKHRoaXMpLHIsYXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDApfSxpbmRleE9mOmZ1bmN0aW9uIGluZGV4T2Yocil7cmV0dXJuIGFycmF5SW5kZXhPZih2YWxpZGF0ZSh0aGlzKSxyLGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwKX0saW5jbHVkZXM6ZnVuY3Rpb24gaW5jbHVkZXMocil7cmV0dXJuIGFycmF5SW5jbHVkZXModmFsaWRhdGUodGhpcykscixhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCl9LGpvaW46ZnVuY3Rpb24gam9pbihyKXtyZXR1cm4gYXJyYXlKb2luLmFwcGx5KHZhbGlkYXRlKHRoaXMpLGFyZ3VtZW50cyl9LGxhc3RJbmRleE9mOmZ1bmN0aW9uIGxhc3RJbmRleE9mKHIpe3JldHVybiBhcnJheUxhc3RJbmRleE9mLmFwcGx5KHZhbGlkYXRlKHRoaXMpLGFyZ3VtZW50cyl9LG1hcDpmdW5jdGlvbiBtYXAocil7cmV0dXJuICRtYXAodmFsaWRhdGUodGhpcykscixhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCl9LHJlZHVjZTpmdW5jdGlvbiByZWR1Y2Uocil7cmV0dXJuIGFycmF5UmVkdWNlLmFwcGx5KHZhbGlkYXRlKHRoaXMpLGFyZ3VtZW50cyl9LHJlZHVjZVJpZ2h0OmZ1bmN0aW9uIHJlZHVjZVJpZ2h0KHIpe3JldHVybiBhcnJheVJlZHVjZVJpZ2h0LmFwcGx5KHZhbGlkYXRlKHRoaXMpLGFyZ3VtZW50cyl9LHJldmVyc2U6ZnVuY3Rpb24gcmV2ZXJzZSgpe2Zvcih2YXIgcixlPXZhbGlkYXRlKHRoaXMpLmxlbmd0aCx0PU1hdGguZmxvb3IoZS8yKSxhPTA7YTx0OylyPXRoaXNbYV0sdGhpc1thKytdPXRoaXNbLS1lXSx0aGlzW2VdPXI7cmV0dXJuIHRoaXN9LHNvbWU6ZnVuY3Rpb24gc29tZShyKXtyZXR1cm4gYXJyYXlTb21lKHZhbGlkYXRlKHRoaXMpLHIsYXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDApfSxzb3J0OmZ1bmN0aW9uIHNvcnQocil7cmV0dXJuIGFycmF5U29ydC5jYWxsKHZhbGlkYXRlKHRoaXMpLHIpfSxzdWJhcnJheTpmdW5jdGlvbiBzdWJhcnJheShyLGUpe3ZhciB0PXZhbGlkYXRlKHRoaXMpLGE9dC5sZW5ndGgsaT10b0Fic29sdXRlSW5kZXgocixhKTtyZXR1cm4gbmV3KHNwZWNpZXNDb25zdHJ1Y3Rvcih0LHRbREVGX0NPTlNUUlVDVE9SXSkpKHQuYnVmZmVyLHQuYnl0ZU9mZnNldCtpKnQuQllURVNfUEVSX0VMRU1FTlQsdG9MZW5ndGgoKHZvaWQgMD09PWU/YTp0b0Fic29sdXRlSW5kZXgoZSxhKSktaSkpfX0sJHNsaWNlPWZ1bmN0aW9uIHNsaWNlKHIsZSl7cmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSxyLGUpKX0sJHNldD1mdW5jdGlvbiBzZXQocil7dmFsaWRhdGUodGhpcyk7dmFyIGU9dG9PZmZzZXQoYXJndW1lbnRzWzFdLDEpLHQ9dGhpcy5sZW5ndGgsYT10b09iamVjdChyKSxpPXRvTGVuZ3RoKGEubGVuZ3RoKSxvPTA7aWYoaStlPnQpdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO2Zvcig7bzxpOyl0aGlzW2Urb109YVtvKytdfSwkaXRlcmF0b3JzPXtlbnRyaWVzOmZ1bmN0aW9uIGVudHJpZXMoKXtyZXR1cm4gYXJyYXlFbnRyaWVzLmNhbGwodmFsaWRhdGUodGhpcykpfSxrZXlzOmZ1bmN0aW9uIGtleXMoKXtyZXR1cm4gYXJyYXlLZXlzLmNhbGwodmFsaWRhdGUodGhpcykpfSx2YWx1ZXM6ZnVuY3Rpb24gdmFsdWVzKCl7cmV0dXJuIGFycmF5VmFsdWVzLmNhbGwodmFsaWRhdGUodGhpcykpfX0saXNUQUluZGV4PWZ1bmN0aW9uKHIsZSl7cmV0dXJuIGlzT2JqZWN0KHIpJiZyW1RZUEVEX0FSUkFZXSYmXCJzeW1ib2xcIiE9dHlwZW9mIGUmJmUgaW4gciYmU3RyaW5nKCtlKT09U3RyaW5nKGUpfSwkZ2V0RGVzYz1mdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocixlKXtyZXR1cm4gaXNUQUluZGV4KHIsZT10b1ByaW1pdGl2ZShlLCEwKSk/cHJvcGVydHlEZXNjKDIscltlXSk6Z09QRChyLGUpfSwkc2V0RGVzYz1mdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShyLGUsdCl7cmV0dXJuIShpc1RBSW5kZXgocixlPXRvUHJpbWl0aXZlKGUsITApKSYmaXNPYmplY3QodCkmJmhhcyh0LFwidmFsdWVcIikpfHxoYXModCxcImdldFwiKXx8aGFzKHQsXCJzZXRcIil8fHQuY29uZmlndXJhYmxlfHxoYXModCxcIndyaXRhYmxlXCIpJiYhdC53cml0YWJsZXx8aGFzKHQsXCJlbnVtZXJhYmxlXCIpJiYhdC5lbnVtZXJhYmxlP2RQKHIsZSx0KToocltlXT10LnZhbHVlLHIpfTtBTExfQ09OU1RSVUNUT1JTfHwoJEdPUEQuZj0kZ2V0RGVzYywkRFAuZj0kc2V0RGVzYyksJGV4cG9ydCgkZXhwb3J0LlMrJGV4cG9ydC5GKiFBTExfQ09OU1RSVUNUT1JTLFwiT2JqZWN0XCIse2dldE93blByb3BlcnR5RGVzY3JpcHRvcjokZ2V0RGVzYyxkZWZpbmVQcm9wZXJ0eTokc2V0RGVzY30pLGZhaWxzKGZ1bmN0aW9uKCl7YXJyYXlUb1N0cmluZy5jYWxsKHt9KX0pJiYoYXJyYXlUb1N0cmluZz1hcnJheVRvTG9jYWxlU3RyaW5nPWZ1bmN0aW9uIHRvU3RyaW5nKCl7cmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRoaXMpfSk7dmFyICRUeXBlZEFycmF5UHJvdG90eXBlJD1yZWRlZmluZUFsbCh7fSxwcm90byk7cmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCRpdGVyYXRvcnMpLGhpZGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkLElURVJBVE9SLCRpdGVyYXRvcnMudmFsdWVzKSxyZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQse3NsaWNlOiRzbGljZSxzZXQ6JHNldCxjb25zdHJ1Y3RvcjpmdW5jdGlvbigpe30sdG9TdHJpbmc6YXJyYXlUb1N0cmluZyx0b0xvY2FsZVN0cmluZzokdG9Mb2NhbGVTdHJpbmd9KSxhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLFwiYnVmZmVyXCIsXCJiXCIpLGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsXCJieXRlT2Zmc2V0XCIsXCJvXCIpLGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsXCJieXRlTGVuZ3RoXCIsXCJsXCIpLGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsXCJsZW5ndGhcIixcImVcIiksZFAoJFR5cGVkQXJyYXlQcm90b3R5cGUkLFRBRyx7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXNbVFlQRURfQVJSQVldfX0pLG1vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKHIsZSx0LGEpe3ZhciBpPXIrKChhPSEhYSk/XCJDbGFtcGVkXCI6XCJcIikrXCJBcnJheVwiLG89XCJnZXRcIityLG49XCJzZXRcIityLHM9Z2xvYmFsW2ldLGM9c3x8e30sdT1zJiZnZXRQcm90b3R5cGVPZihzKSxsPSFzfHwhJHR5cGVkLkFCVixmPXt9LHk9cyYmc1tQUk9UT1RZUEVdLGQ9ZnVuY3Rpb24ocix0KXtkUChyLHQse2dldDpmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihyLHQpe3ZhciBhPXIuX2Q7cmV0dXJuIGEudltvXSh0KmUrYS5vLExJVFRMRV9FTkRJQU4pfSh0aGlzLHQpfSxzZXQ6ZnVuY3Rpb24ocil7cmV0dXJuIGZ1bmN0aW9uKHIsdCxpKXt2YXIgbz1yLl9kO2EmJihpPShpPU1hdGgucm91bmQoaSkpPDA/MDppPjI1NT8yNTU6MjU1JmkpLG8udltuXSh0KmUrby5vLGksTElUVExFX0VORElBTil9KHRoaXMsdCxyKX0sZW51bWVyYWJsZTohMH0pfTtsPyhzPXQoZnVuY3Rpb24ocix0LGEsbyl7YW5JbnN0YW5jZShyLHMsaSxcIl9kXCIpO3ZhciBuLGMsdSxsLGY9MCx5PTA7aWYoaXNPYmplY3QodCkpe2lmKCEodCBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlcnx8KGw9Y2xhc3NvZih0KSk9PUFSUkFZX0JVRkZFUnx8bD09U0hBUkVEX0JVRkZFUikpcmV0dXJuIFRZUEVEX0FSUkFZIGluIHQ/ZnJvbUxpc3Qocyx0KTokZnJvbS5jYWxsKHMsdCk7bj10LHk9dG9PZmZzZXQoYSxlKTt2YXIgcD10LmJ5dGVMZW5ndGg7aWYodm9pZCAwPT09byl7aWYocCVlKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtpZigoYz1wLXkpPDApdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpfWVsc2UgaWYoKGM9dG9MZW5ndGgobykqZSkreT5wKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTt1PWMvZX1lbHNlIHU9dG9JbmRleCh0KSxuPW5ldyAkQXJyYXlCdWZmZXIoYz11KmUpO2ZvcihoaWRlKHIsXCJfZFwiLHtiOm4sbzp5LGw6YyxlOnUsdjpuZXcgJERhdGFWaWV3KG4pfSk7Zjx1OylkKHIsZisrKX0pLHk9c1tQUk9UT1RZUEVdPWNyZWF0ZSgkVHlwZWRBcnJheVByb3RvdHlwZSQpLGhpZGUoeSxcImNvbnN0cnVjdG9yXCIscykpOmZhaWxzKGZ1bmN0aW9uKCl7cygxKX0pJiZmYWlscyhmdW5jdGlvbigpe25ldyBzKC0xKX0pJiYkaXRlckRldGVjdChmdW5jdGlvbihyKXtuZXcgcyxuZXcgcyhudWxsKSxuZXcgcygxLjUpLG5ldyBzKHIpfSwhMCl8fChzPXQoZnVuY3Rpb24ocix0LGEsbyl7dmFyIG47cmV0dXJuIGFuSW5zdGFuY2UocixzLGkpLGlzT2JqZWN0KHQpP3QgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXJ8fChuPWNsYXNzb2YodCkpPT1BUlJBWV9CVUZGRVJ8fG49PVNIQVJFRF9CVUZGRVI/dm9pZCAwIT09bz9uZXcgYyh0LHRvT2Zmc2V0KGEsZSksbyk6dm9pZCAwIT09YT9uZXcgYyh0LHRvT2Zmc2V0KGEsZSkpOm5ldyBjKHQpOlRZUEVEX0FSUkFZIGluIHQ/ZnJvbUxpc3Qocyx0KTokZnJvbS5jYWxsKHMsdCk6bmV3IGModG9JbmRleCh0KSl9KSxhcnJheUZvckVhY2godSE9PUZ1bmN0aW9uLnByb3RvdHlwZT9nT1BOKGMpLmNvbmNhdChnT1BOKHUpKTpnT1BOKGMpLGZ1bmN0aW9uKHIpe3IgaW4gc3x8aGlkZShzLHIsY1tyXSl9KSxzW1BST1RPVFlQRV09eSxMSUJSQVJZfHwoeS5jb25zdHJ1Y3Rvcj1zKSk7dmFyIHA9eVtJVEVSQVRPUl0saD0hIXAmJihcInZhbHVlc1wiPT1wLm5hbWV8fG51bGw9PXAubmFtZSksVD0kaXRlcmF0b3JzLnZhbHVlcztoaWRlKHMsVFlQRURfQ09OU1RSVUNUT1IsITApLGhpZGUoeSxUWVBFRF9BUlJBWSxpKSxoaWRlKHksVklFVywhMCksaGlkZSh5LERFRl9DT05TVFJVQ1RPUixzKSwoYT9uZXcgcygxKVtUQUddPT1pOlRBRyBpbiB5KXx8ZFAoeSxUQUcse2dldDpmdW5jdGlvbigpe3JldHVybiBpfX0pLGZbaV09cywkZXhwb3J0KCRleHBvcnQuRyskZXhwb3J0LlcrJGV4cG9ydC5GKihzIT1jKSxmKSwkZXhwb3J0KCRleHBvcnQuUyxpLHtCWVRFU19QRVJfRUxFTUVOVDplfSksJGV4cG9ydCgkZXhwb3J0LlMrJGV4cG9ydC5GKmZhaWxzKGZ1bmN0aW9uKCl7Yy5vZi5jYWxsKHMsMSl9KSxpLHtmcm9tOiRmcm9tLG9mOiRvZn0pLEJZVEVTX1BFUl9FTEVNRU5UIGluIHl8fGhpZGUoeSxCWVRFU19QRVJfRUxFTUVOVCxlKSwkZXhwb3J0KCRleHBvcnQuUCxpLHByb3RvKSxzZXRTcGVjaWVzKGkpLCRleHBvcnQoJGV4cG9ydC5QKyRleHBvcnQuRipGT1JDRURfU0VULGkse3NldDokc2V0fSksJGV4cG9ydCgkZXhwb3J0LlArJGV4cG9ydC5GKiFoLGksJGl0ZXJhdG9ycyksTElCUkFSWXx8eS50b1N0cmluZz09YXJyYXlUb1N0cmluZ3x8KHkudG9TdHJpbmc9YXJyYXlUb1N0cmluZyksJGV4cG9ydCgkZXhwb3J0LlArJGV4cG9ydC5GKmZhaWxzKGZ1bmN0aW9uKCl7bmV3IHMoMSkuc2xpY2UoKX0pLGkse3NsaWNlOiRzbGljZX0pLCRleHBvcnQoJGV4cG9ydC5QKyRleHBvcnQuRiooZmFpbHMoZnVuY3Rpb24oKXtyZXR1cm5bMSwyXS50b0xvY2FsZVN0cmluZygpIT1uZXcgcyhbMSwyXSkudG9Mb2NhbGVTdHJpbmcoKX0pfHwhZmFpbHMoZnVuY3Rpb24oKXt5LnRvTG9jYWxlU3RyaW5nLmNhbGwoWzEsMl0pfSkpLGkse3RvTG9jYWxlU3RyaW5nOiR0b0xvY2FsZVN0cmluZ30pLEl0ZXJhdG9yc1tpXT1oP3A6VCxMSUJSQVJZfHxofHxoaWRlKHksSVRFUkFUT1IsVCl9fWVsc2UgbW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oKXt9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5MGVYQmxaQzFoY25KaGVTNXFjeUpkTENKdVlXMWxjeUk2V3lKeVpYRjFhWEpsSWl3aVRFbENVa0ZTV1NJc0ltZHNiMkpoYkNJc0ltWmhhV3h6SWl3aUpHVjRjRzl5ZENJc0lpUjBlWEJsWkNJc0lpUmlkV1ptWlhJaUxDSmpkSGdpTENKaGJrbHVjM1JoYm1ObElpd2ljSEp2Y0dWeWRIbEVaWE5qSWl3aWFHbGtaU0lzSW5KbFpHVm1hVzVsUVd4c0lpd2lkRzlKYm5SbFoyVnlJaXdpZEc5TVpXNW5kR2dpTENKMGIwbHVaR1Y0SWl3aWRHOUJZbk52YkhWMFpVbHVaR1Y0SWl3aWRHOVFjbWx0YVhScGRtVWlMQ0pvWVhNaUxDSmpiR0Z6YzI5bUlpd2lhWE5QWW1wbFkzUWlMQ0owYjA5aWFtVmpkQ0lzSW1selFYSnlZWGxKZEdWeUlpd2lZM0psWVhSbElpd2laMlYwVUhKdmRHOTBlWEJsVDJZaUxDSm5UMUJPSWl3aVppSXNJbWRsZEVsMFpYSkdiaUlzSW5WcFpDSXNJbmRyY3lJc0ltTnlaV0YwWlVGeWNtRjVUV1YwYUc5a0lpd2lZM0psWVhSbFFYSnlZWGxKYm1Oc2RXUmxjeUlzSW5Od1pXTnBaWE5EYjI1emRISjFZM1J2Y2lJc0lrRnljbUY1U1hSbGNtRjBiM0p6SWl3aVNYUmxjbUYwYjNKeklpd2lKR2wwWlhKRVpYUmxZM1FpTENKelpYUlRjR1ZqYVdWeklpd2lZWEp5WVhsR2FXeHNJaXdpWVhKeVlYbERiM0I1VjJsMGFHbHVJaXdpSkVSUUlpd2lKRWRQVUVRaUxDSmtVQ0lzSW1kUFVFUWlMQ0pTWVc1blpVVnljbTl5SWl3aVZIbHdaVVZ5Y205eUlpd2lWV2x1ZERoQmNuSmhlU0lzSWtGU1VrRlpYMEpWUmtaRlVpSXNJbE5JUVZKRlJGOUNWVVpHUlZJaUxDSkNXVlJGVTE5UVJWSmZSVXhGVFVWT1ZDSXNJbEJTVDFSUFZGbFFSU0lzSWtGeWNtRjVVSEp2ZEc4aUxDSkJjbkpoZVNJc0lpUkJjbkpoZVVKMVptWmxjaUlzSWtGeWNtRjVRblZtWm1WeUlpd2lKRVJoZEdGV2FXVjNJaXdpUkdGMFlWWnBaWGNpTENKaGNuSmhlVVp2Y2tWaFkyZ2lMQ0poY25KaGVVWnBiSFJsY2lJc0ltRnljbUY1VTI5dFpTSXNJbUZ5Y21GNVJYWmxjbmtpTENKaGNuSmhlVVpwYm1RaUxDSmhjbkpoZVVacGJtUkpibVJsZUNJc0ltRnljbUY1U1c1amJIVmtaWE1pTENKaGNuSmhlVWx1WkdWNFQyWWlMQ0poY25KaGVWWmhiSFZsY3lJc0luWmhiSFZsY3lJc0ltRnljbUY1UzJWNWN5SXNJbXRsZVhNaUxDSmhjbkpoZVVWdWRISnBaWE1pTENKbGJuUnlhV1Z6SWl3aVlYSnlZWGxNWVhOMFNXNWtaWGhQWmlJc0lteGhjM1JKYm1SbGVFOW1JaXdpWVhKeVlYbFNaV1IxWTJVaUxDSnlaV1IxWTJVaUxDSmhjbkpoZVZKbFpIVmpaVkpwWjJoMElpd2ljbVZrZFdObFVtbG5hSFFpTENKaGNuSmhlVXB2YVc0aUxDSnFiMmx1SWl3aVlYSnlZWGxUYjNKMElpd2ljMjl5ZENJc0ltRnljbUY1VTJ4cFkyVWlMQ0p6YkdsalpTSXNJbUZ5Y21GNVZHOVRkSEpwYm1jaUxDSjBiMU4wY21sdVp5SXNJbUZ5Y21GNVZHOU1iMk5oYkdWVGRISnBibWNpTENKMGIweHZZMkZzWlZOMGNtbHVaeUlzSWtsVVJWSkJWRTlTSWl3aVZFRkhJaXdpVkZsUVJVUmZRMDlPVTFSU1ZVTlVUMUlpTENKRVJVWmZRMDlPVTFSU1ZVTlVUMUlpTENKQlRFeGZRMDlPVTFSU1ZVTlVUMUpUSWl3aVEwOU9VMVJTSWl3aVZGbFFSVVJmUVZKU1FWa2lMQ0pVV1ZCRlJDSXNJbFpKUlZjaUxDSlhVazlPUjE5TVJVNUhWRWdpTENJa2JXRndJaXdpVHlJc0lteGxibWQwYUNJc0ltRnNiRzlqWVhSbElpd2lURWxVVkV4RlgwVk9SRWxCVGlJc0lsVnBiblF4TmtGeWNtRjVJaXdpWW5WbVptVnlJaXdpUms5U1EwVkVYMU5GVkNJc0luTmxkQ0lzSW5SdlQyWm1jMlYwSWl3aWFYUWlMQ0pDV1ZSRlV5SXNJbTltWm5ObGRDSXNJblpoYkdsa1lYUmxJaXdpUXlJc0luTndaV05wWlhOR2NtOXRUR2x6ZENJc0lteHBjM1FpTENKbWNtOXRUR2x6ZENJc0ltbHVaR1Y0SWl3aWNtVnpkV3gwSWl3aVlXUmtSMlYwZEdWeUlpd2lhMlY1SWl3aWFXNTBaWEp1WVd3aUxDSm5aWFFpTENKMGFHbHpJaXdpWDJRaUxDSWtabkp2YlNJc0ltWnliMjBpTENKemIzVnlZMlVpTENKcElpd2ljM1JsY0NJc0ltbDBaWEpoZEc5eUlpd2lZVXhsYmlJc0ltRnlaM1Z0Wlc1MGN5SXNJbTFoY0dadUlpd2lkVzVrWldacGJtVmtJaXdpYldGd2NHbHVaeUlzSW1sMFpYSkdiaUlzSW1OaGJHd2lMQ0p1WlhoMElpd2laRzl1WlNJc0luQjFjMmdpTENKMllXeDFaU0lzSWlSdlppSXNJbTltSWl3aVZFOWZURTlEUVV4RlgwSlZSeUlzSWlSMGIweHZZMkZzWlZOMGNtbHVaeUlzSW1Gd2NHeDVJaXdpY0hKdmRHOGlMQ0pqYjNCNVYybDBhR2x1SWl3aWRHRnlaMlYwSWl3aWMzUmhjblFpTENKbGRtVnllU0lzSW1OaGJHeGlZV05yWm00aUxDSm1hV3hzSWl3aVptbHNkR1Z5SWl3aVptbHVaQ0lzSW5CeVpXUnBZMkYwWlNJc0ltWnBibVJKYm1SbGVDSXNJbVp2Y2tWaFkyZ2lMQ0pwYm1SbGVFOW1JaXdpYzJWaGNtTm9SV3hsYldWdWRDSXNJbWx1WTJ4MVpHVnpJaXdpYzJWd1lYSmhkRzl5SWl3aWJXRndJaXdpY21WMlpYSnpaU0lzSW0xcFpHUnNaU0lzSWsxaGRHZ2lMQ0ptYkc5dmNpSXNJbk52YldVaUxDSmpiMjF3WVhKbFptNGlMQ0p6ZFdKaGNuSmhlU0lzSW1KbFoybHVJaXdpWlc1a0lpd2lKR0psWjJsdUlpd2lZbmwwWlU5bVpuTmxkQ0lzSWlSemJHbGpaU0lzSWlSelpYUWlMQ0poY25KaGVVeHBhMlVpTENKemNtTWlMQ0pzWlc0aUxDSWthWFJsY21GMGIzSnpJaXdpYVhOVVFVbHVaR1Y0SWl3aVUzUnlhVzVuSWl3aUpHZGxkRVJsYzJNaUxDSm5aWFJQZDI1UWNtOXdaWEowZVVSbGMyTnlhWEIwYjNJaUxDSWtjMlYwUkdWell5SXNJbVJsWm1sdVpWQnliM0JsY25SNUlpd2laR1Z6WXlJc0ltTnZibVpwWjNWeVlXSnNaU0lzSW5keWFYUmhZbXhsSWl3aVpXNTFiV1Z5WVdKc1pTSXNJbE1pTENKR0lpd2lKRlI1Y0dWa1FYSnlZWGxRY205MGIzUjVjR1VrSWl3aVkyOXVjM1J5ZFdOMGIzSWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpUzBWWklpd2lkM0poY0hCbGNpSXNJa05NUVUxUVJVUWlMQ0pPUVUxRklpd2lSMFZVVkVWU0lpd2lVMFZVVkVWU0lpd2lWSGx3WldSQmNuSmhlU0lzSWtKaGMyVWlMQ0pVUVVNaUxDSkdUMUpEUlVRaUxDSkJRbFlpTENKVWVYQmxaRUZ5Y21GNVVISnZkRzkwZVhCbElpd2lZV1JrUld4bGJXVnVkQ0lzSW5Sb1lYUWlMQ0prWVhSaElpd2lkaUlzSW04aUxDSm5aWFIwWlhJaUxDSnliM1Z1WkNJc0luTmxkSFJsY2lJc0lpUnZabVp6WlhRaUxDSWtiR1Z1WjNSb0lpd2lZbmwwWlV4bGJtZDBhQ0lzSW10c1lYTnpJaXdpSkd4bGJpSXNJbUlpTENKc0lpd2laU0lzSW1sMFpYSWlMQ0pHZFc1amRHbHZiaUlzSW5CeWIzUnZkSGx3WlNJc0ltTnZibU5oZENJc0lpUnVZWFJwZG1WSmRHVnlZWFJ2Y2lJc0lrTlBVbEpGUTFSZlNWUkZVbDlPUVUxRklpd2libUZ0WlNJc0lpUnBkR1Z5WVhSdmNpSXNJa2NpTENKWElpd2lVQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRFFTeEhRVUZKUVN4UlFVRlJMR3RDUVVGdFFpeERRVU0zUWl4SlFVRkpReXhSUVVGVlJDeFJRVUZSTEdOQlEyeENSU3hQUVVGVFJpeFJRVUZSTEdGQlEycENSeXhOUVVGUlNDeFJRVUZSTEZsQlEyaENTU3hSUVVGVlNpeFJRVUZSTEdGQlEyeENTeXhQUVVGVFRDeFJRVUZSTEZsQlEycENUU3hSUVVGVlRpeFJRVUZSTEcxQ1FVTnNRazhzU1VGQlRWQXNVVUZCVVN4VlFVTmtVU3hYUVVGaFVpeFJRVUZSTEd0Q1FVTnlRbE1zWVVGQlpWUXNVVUZCVVN4dlFrRkRka0pWTEV0QlFVOVdMRkZCUVZFc1YwRkRabGNzV1VGQlkxZ3NVVUZCVVN4dFFrRkRkRUpaTEZWQlFWbGFMRkZCUVZFc2FVSkJRM0JDWVN4VFFVRlhZaXhSUVVGUkxHZENRVU51UW1Nc1VVRkJWV1FzVVVGQlVTeGxRVU5zUW1Vc1owSkJRV3RDWml4UlFVRlJMSGRDUVVNeFFtZENMRmxCUVdOb1FpeFJRVUZSTEcxQ1FVTjBRbWxDTEVsQlFVMXFRaXhSUVVGUkxGVkJRMlJyUWl4UlFVRlZiRUlzVVVGQlVTeGpRVU5zUW0xQ0xGTkJRVmR1UWl4UlFVRlJMR2RDUVVOdVFtOUNMRk5CUVZkd1FpeFJRVUZSTEdkQ1FVTnVRbkZDTEZsQlFXTnlRaXhSUVVGUkxHOUNRVU4wUW5OQ0xFOUJRVk4wUWl4UlFVRlJMRzlDUVVOcVFuVkNMR1ZCUVdsQ2RrSXNVVUZCVVN4cFFrRkRla0ozUWl4TFFVRlBlRUlzVVVGQlVTeHJRa0ZCYTBKNVFpeEZRVU5xUTBNc1ZVRkJXVEZDTEZGQlFWRXNPRUpCUTNCQ01rSXNTVUZCVFROQ0xGRkJRVkVzVlVGRFpEUkNMRWxCUVUwMVFpeFJRVUZSTEZWQlEyUTJRaXhyUWtGQmIwSTNRaXhSUVVGUkxHOUNRVU0xUWpoQ0xHOUNRVUZ6UWpsQ0xGRkJRVkVzY1VKQlF6bENLMElzYlVKQlFYRkNMMElzVVVGQlVTd3dRa0ZETjBKblF5eGxRVUZwUW1oRExGRkJRVkVzZDBKQlEzcENhVU1zVlVGQldXcERMRkZCUVZFc1owSkJRM0JDYTBNc1dVRkJZMnhETEZGQlFWRXNhMEpCUTNSQ2JVTXNWMEZCWVc1RExGRkJRVkVzYTBKQlEzSkNiME1zVlVGQldYQkRMRkZCUVZFc2FVSkJRM0JDY1VNc1owSkJRV3RDY2tNc1VVRkJVU3gzUWtGRE1VSnpReXhKUVVGTmRFTXNVVUZCVVN4blFrRkRaSFZETEUxQlFWRjJReXhSUVVGUkxHdENRVU5vUW5kRExFZEJRVXRHTEVsQlFVbGlMRVZCUTFSblFpeExRVUZQUml4TlFVRk5aQ3hGUVVOaWFVSXNWMEZCWVhoRExFOUJRVTkzUXl4WFFVTndRa01zVlVGQldYcERMRTlCUVU5NVF5eFZRVU51UWtNc1YwRkJZVEZETEU5QlFVOHdReXhYUVVOd1FrTXNZVUZCWlN4alFVTm1ReXhqUVVGblFpeFRRVUZYUkN4aFFVTXpRa1VzYTBKQlFXOUNMRzlDUVVOd1FrTXNWVUZCV1N4WlFVTmFReXhYUVVGaFF5eE5RVUZOUml4WFFVTnVRa2NzWVVGQlpUZERMRkZCUVZFNFF5eFpRVU4yUWtNc1ZVRkJXUzlETEZGQlFWRm5SQ3hUUVVOd1FrTXNZVUZCWlRGQ0xHdENRVUZyUWl4SFFVTnFRekpDTEZsQlFXTXpRaXhyUWtGQmEwSXNSMEZEYUVNMFFpeFZRVUZaTlVJc2EwSkJRV3RDTEVkQlF6bENOa0lzVjBGQllUZENMR3RDUVVGclFpeEhRVU12UWpoQ0xGVkJRVms1UWl4clFrRkJhMElzUjBGRE9VSXJRaXhsUVVGcFFpOUNMR3RDUVVGclFpeEhRVU51UTJkRExHTkJRV2RDTDBJc2NVSkJRVzlDTEVkQlEzQkRaME1zWVVGQlpXaERMSEZDUVVGdlFpeEhRVU51UTJsRExGbEJRV012UWl4bFFVRmxaME1zVDBGRE4wSkRMRlZCUVZscVF5eGxRVUZsYTBNc1MwRkRNMEpETEdGQlFXVnVReXhsUVVGbGIwTXNVVUZET1VKRExHbENRVUZ0UW5CQ0xGZEJRVmR4UWl4WlFVTTVRa01zV1VGQlkzUkNMRmRCUVZkMVFpeFBRVU42UWtNc2FVSkJRVzFDZUVJc1YwRkJWM2xDTEZsQlF6bENReXhWUVVGWk1VSXNWMEZCVnpKQ0xFdEJRM1pDUXl4VlFVRlpOVUlzVjBGQlZ6WkNMRXRCUTNaQ1F5eFhRVUZoT1VJc1YwRkJWeXRDTEUxQlEzaENReXhqUVVGblFtaERMRmRCUVZkcFF5eFRRVU16UWtNc2IwSkJRWE5DYkVNc1YwRkJWMjFETEdWQlEycERReXhUUVVGWGVrUXNTVUZCU1N4WlFVTm1NRVFzU1VGQlRURkVMRWxCUVVrc1pVRkRWakpFTEd0Q1FVRnZRalZFTEVsQlFVa3NjVUpCUTNoQ05rUXNaMEpCUVd0Q04wUXNTVUZCU1N4dFFrRkRkRUk0UkN4cFFrRkJiVUp3Uml4UFFVRlBjVVlzVDBGRE1VSkRMRmxCUVdOMFJpeFBRVUZQZFVZc1RVRkRja0pETEV0QlFVOTRSaXhQUVVGUGQwWXNTMEZEWkVNc1lVRkJaU3huUWtGRlprTXNTMEZCVDJ4RkxHdENRVUZyUWl4RlFVRkhMRk5CUVZWdFJTeEZRVUZIUXl4SFFVTXpReXhQUVVGUFF5eFRRVUZUYmtVc2JVSkJRVzFDYVVVc1JVRkJSMEVzUlVGQlJWSXNhMEpCUVcxQ1V5eExRVWQ2UkVVc1kwRkJaMEpvUnl4TlFVRk5MRmRCUlhoQ0xFOUJRVEJFTEVsQlFXNUVMRWxCUVVsNVF5eFhRVUZYTEVsQlFVbDNSQ3haUVVGWkxFTkJRVU1zU1VGQlNVTXNVVUZCVVN4TFFVZHFSRU1zWVVGQlpURkVMR05CUVdkQ1FTeFhRVUZYU1N4WFFVRlhkVVFzUzBGQlQzQkhMRTFCUVUwc1YwRkRjRVVzU1VGQlNYbERMRmRCUVZjc1IwRkJSekpFTEVsQlFVa3NUVUZIY0VKRExGTkJRVmNzVTBGQlZVTXNSVUZCU1VNc1IwRkRNMElzU1VGQlNVTXNSVUZCVXk5R0xGVkJRVlUyUml4SFFVTjJRaXhIUVVGSlJTeEZRVUZUTEVkQlFVdEJMRVZCUVZORUxFVkJRVThzVFVGQlRXaEZMRmRCUVZjc2FVSkJRMjVFTEU5QlFVOXBSU3hIUVVkTVF5eFRRVUZYTEZOQlFWVklMRWRCUTNaQ0xFZEJRVWwwUml4VFFVRlRjMFlzU1VGQlQyUXNaVUZCWldNc1JVRkJTU3hQUVVGUFFTeEZRVU01UXl4TlFVRk5PVVFzVlVGQlZUaEVMRVZCUVVzc01rSkJSMjVDVUN4VFFVRlhMRk5CUVZWWExFVkJRVWRhTEVkQlF6RkNMRXRCUVUwNVJTeFRRVUZUTUVZc1NVRkJUWFJDTEhGQ1FVRnhRbk5DTEVkQlEzaERMRTFCUVUxc1JTeFZRVUZWTEhkRFFVTm9RaXhQUVVGUExFbEJRVWxyUlN4RlFVRkZXaXhKUVVkaVlTeG5Ra0ZCYTBJc1UwRkJWV1FzUlVGQlIyVXNSMEZEYWtNc1QwRkJUME1zVTBGQlUycEdMRzFDUVVGdFFtbEZMRVZCUVVkQkxFVkJRVVZTTEd0Q1FVRnRRblZDTEVsQlIzcEVReXhUUVVGWExGTkJRVlZJTEVWQlFVZEZMRWRCU1RGQ0xFbEJTRUVzU1VGQlNVVXNSVUZCVVN4RlFVTlNhRUlzUlVGQlUyTXNSVUZCUzJRc1QwRkRaR2xDTEVWQlFWTm9RaXhUUVVGVFZ5eEZRVUZIV2l4SFFVTnNRa0VzUlVGQlUyZENMRWRCUVU5RExFVkJRVTlFTEVkQlFWTkdMRVZCUVV0RkxFdEJRelZETEU5QlFVOURMRWRCUjB4RExGVkJRVmtzVTBGQlZWWXNSVUZCU1Zjc1JVRkJTME1zUjBGRGFrTTNSU3hIUVVGSGFVVXNSVUZCU1Zjc1JVRkJTeXhEUVVGRlJTeEpRVUZMTEZkQlFXTXNUMEZCVDBNc1MwRkJTME1zUjBGQlIwZ3NUMEZIT1VOSkxFMUJRVkVzVTBGQlUwTXNTMEZCUzBNc1IwRkRlRUlzU1VGTFNVTXNSVUZCUnpOQ0xFVkJRVkZxUXl4RlFVRlJhMFFzUlVGQlVWY3NSVUZCVFVNc1JVRk1ha001UWl4RlFVRkpOVVVzVTBGQlUzVkhMRWRCUTJKSkxFVkJRVTlETEZWQlFWVXZRaXhQUVVOcVFtZERMRVZCUVZGR0xFVkJRVThzUlVGQlNVTXNWVUZCVlN4UlFVRkxSU3hGUVVOc1EwTXNUMEZCYjBKRUxFbEJRVlpFTEVWQlExWkhMRVZCUVZNeFJ5eFZRVUZWYzBVc1IwRkZka0lzUjBGQlkydERMRTFCUVZaRkxFbEJRWGRDTDBjc1dVRkJXU3RITEVkQlFWTXNRMEZETDBNc1NVRkJTMDRzUlVGQlYwMHNSVUZCVDBNc1MwRkJTM0pETEVkQlFVbG9ReXhGUVVGVExFZEJRVWswUkN4RlFVRkpMRWxCUVV0RExFVkJRVTlETEVWQlFWTlJMRkZCUVZGRExFdEJRVTFZTEVsQlEyeEdOVVFzUlVGQlQzZEZMRXRCUVV0WUxFVkJRVXRaTEU5QlEycENla01zUlVGQlNXaERMRVZCUjFJc1NVRkVTVzFGTEVkQlFWZEtMRVZCUVU4c1NVRkJSMFVzUlVGQlVURklMRWxCUVVrd1NDeEZRVUZQUkN4VlFVRlZMRWRCUVVrc1NVRkRja1JLTEVWQlFVa3NSVUZCUnpOQ0xFVkJRVk53Uml4VFFVRlRiVVlzUlVGQlJVTXNVVUZCVTJsQ0xFVkJRVk5vUWl4VFFVRlRjVUlzUzBGQlRYUkNMRWRCUVZOQkxFVkJRVk15UWl4RlFVRkhRU3hKUVVOd1JsWXNSVUZCVDFVc1IwRkJTMDhzUlVGQlZVWXNSVUZCVFdwRExFVkJRVVUwUWl4SFFVRkpRU3hIUVVGTE5VSXNSVUZCUlRSQ0xFZEJSVE5ETEU5QlFVOVdMRWRCUjB4M1FpeEpRVUZOTEZOQlFWTkRMRXRCU1dwQ0xFbEJTRUVzU1VGQlNURkNMRVZCUVZFc1JVRkRVbWhDTEVWQlFWTXJRaXhWUVVGVkwwSXNUMEZEYmtKcFFpeEZRVUZUYUVJc1UwRkJVM0ZDTEV0QlFVMTBRaXhIUVVOeVFrRXNSVUZCVTJkQ0xFZEJRVTlETEVWQlFVOUVMRWRCUVZObExGVkJRVlZtTEV0QlEycEVMRTlCUVU5RExFZEJTVXd3UWl4blFrRkJhMEpvUnl4WlFVRmpla01zVFVGQlRTeFhRVUZqWjBZc2IwSkJRVzlDYTBRc1MwRkJTeXhKUVVGSmVrWXNWMEZCVnl4TlFVVTFSbWxITEdkQ1FVRnJRaXhUUVVGVGVrUXNhVUpCUXpkQ0xFOUJRVTlFTEc5Q1FVRnZRakpFTEUxQlFVMUdMR05CUVdkQ04wUXNWMEZCVjNORUxFdEJRVXQ2UWl4VFFVRlRWeXhQUVVGVFdDeFRRVUZUVnl4TlFVRlBVeXhaUVVkcVIyVXNUVUZCVVN4RFFVTldReXhYUVVGWkxGTkJRVk5CTEZkQlFWZERMRVZCUVZGRExFZEJRM1JETEU5QlFVODNSeXhuUWtGQlowSm5SeXhMUVVGTGVrSXNVMEZCVTFjc1RVRkJUekJDTEVWQlFWRkRMRVZCUVU5c1FpeFZRVUZWTDBJc1QwRkJVeXhGUVVGSkswSXNWVUZCVlN4UlFVRkxSU3hKUVVWdVIybENMRTFCUVU4c1UwRkJVMEVzVFVGQlRVTXNSMEZEY0VJc1QwRkJUekZHTEZkQlFWZHJSQ3hUUVVGVFZ5eE5RVUZQTmtJc1JVRkJXWEJDTEZWQlFWVXZRaXhQUVVGVExFVkJRVWtyUWl4VlFVRlZMRkZCUVV0RkxFbEJSWFJHYlVJc1MwRkJUU3hUUVVGVFFTeExRVUZMV2l4SFFVTnNRaXhQUVVGUGNrY3NWVUZCVlRCSExFMUJRVTFzUXl4VFFVRlRWeXhOUVVGUFV5eFpRVVY2UTNOQ0xFOUJRVkVzVTBGQlUwRXNUMEZCVDBZc1IwRkRkRUlzVDBGQlQzUkRMR2RDUVVGblFsTXNTMEZCVFM5RUxGbEJRVmx2UkN4VFFVRlRWeXhOUVVGUE5rSXNSVUZEZGtSd1FpeFZRVUZWTDBJc1QwRkJVeXhGUVVGSkswSXNWVUZCVlN4UlFVRkxSU3hMUVVVeFEzRkNMRXRCUVUwc1UwRkJVMEVzUzBGQlMwTXNSMEZEYkVJc1QwRkJUemRHTEZWQlFWVnBSQ3hUUVVGVFZ5eE5RVUZQYVVNc1JVRkJWM2hDTEZWQlFWVXZRaXhQUVVGVExFVkJRVWtyUWl4VlFVRlZMRkZCUVV0RkxFbEJSWEJHZFVJc1ZVRkJWeXhUUVVGVFFTeFZRVUZWUkN4SFFVTTFRaXhQUVVGUE5VWXNaVUZCWldkRUxGTkJRVk5YTEUxQlFVOXBReXhGUVVGWGVFSXNWVUZCVlM5Q0xFOUJRVk1zUlVGQlNTdENMRlZCUVZVc1VVRkJTMFVzU1VGRmVrWjNRaXhSUVVGVExGTkJRVk5CTEZGQlFWRk9MRWRCUTNoQ04wWXNZVUZCWVhGRUxGTkJRVk5YTEUxQlFVODJRaXhGUVVGWmNFSXNWVUZCVlM5Q0xFOUJRVk1zUlVGQlNTdENMRlZCUVZVc1VVRkJTMFVzU1VGRmFrWjVRaXhSUVVGVExGTkJRVk5CTEZGQlFWRkRMRWRCUTNoQ0xFOUJRVTg1Uml4aFFVRmhPRU1zVTBGQlUxY3NUVUZCVDNGRExFVkJRV1UxUWl4VlFVRlZMMElzVDBGQlV5eEZRVUZKSzBJc1ZVRkJWU3hSUVVGTFJTeEpRVVV6UmpKQ0xGTkJRVlVzVTBGQlUwRXNVMEZCVTBRc1IwRkRNVUlzVDBGQlR5OUdMR05CUVdNclF5eFRRVUZUVnl4TlFVRlBjVU1zUlVGQlpUVkNMRlZCUVZVdlFpeFBRVUZUTEVWQlFVa3JRaXhWUVVGVkxGRkJRVXRGTEVsQlJUVkdkRVFzUzBGQlRTeFRRVUZUUVN4TFFVRkxhMFlzUjBGRGJFSXNUMEZCVDI1R0xGVkJRVlZ0UlN4TlFVRk5iRU1zVTBGQlUxY3NUVUZCVDFNc1dVRkZla014UkN4WlFVRmhMRk5CUVZOQkxGbEJRVmx6Uml4SFFVTm9ReXhQUVVGUGRrWXNhVUpCUVdsQ2VVVXNUVUZCVFd4RExGTkJRVk5YTEUxQlFVOVRMRmxCUldoRUswSXNTVUZCU3l4VFFVRlRRU3hKUVVGSk9VSXNSMEZEYUVJc1QwRkJUMnhETEV0QlFVdGhMRk5CUVZOWExFMUJRVTlWTEVWQlFVOUVMRlZCUVZVdlFpeFBRVUZUTEVWQlFVa3JRaXhWUVVGVkxGRkJRVXRGTEVsQlJUTkZNVVFzVDBGQlVTeFRRVUZUUVN4UFFVRlBORVVzUjBGRGRFSXNUMEZCVHpkRkxGbEJRVmwxUlN4TlFVRk5iRU1zVTBGQlUxY3NUVUZCVDFNc1dVRkZNME4wUkN4WlFVRmhMRk5CUVZOQkxGbEJRVmt3UlN4SFFVTm9ReXhQUVVGUE0wVXNhVUpCUVdsQ2NVVXNUVUZCVFd4RExGTkJRVk5YTEUxQlFVOVRMRmxCUldoRVowTXNVVUZCVXl4VFFVRlRRU3hWUVUxb1FpeEpRVXhCTEVsQlNVbDJRaXhGUVVoQmVFTXNSVUZCVTFjc1UwRkVSbGNzVFVGRGFVSjBRaXhQUVVONFFtZEZMRVZCUVZORExFdEJRVXRETEUxQlFVMXNSU3hGUVVGVExFZEJRemRDWjBJc1JVRkJVU3hGUVVWTVFTeEZRVUZSWjBRc1IwRkRZbmhDTEVWQlRsTnNRaXhMUVUxSlRpeEhRVTVLVFN4TFFVOUtUaXhMUVZCSlRTeFBRVTlqZEVJc1IwRlFaSE5DTEV0QlVVcDBRaXhIUVVGVmQwTXNSVUZEWml4UFFWUlRiRUlzVFVGWFlqWkRMRXRCUVUwc1UwRkJVMEVzUzBGQlMyaENMRWRCUTJ4Q0xFOUJRVTh6Uml4VlFVRlZiVVFzVTBGQlUxY3NUVUZCVHpaQ0xFVkJRVmx3UWl4VlFVRlZMMElzVDBGQlV5eEZRVUZKSzBJc1ZVRkJWU3hSUVVGTFJTeEpRVVZ5Um5CRUxFdEJRVTBzVTBGQlUwRXNTMEZCUzNWR0xFZEJRMnhDTEU5QlFVOTRSaXhWUVVGVmQwUXNTMEZCUzNwQ0xGTkJRVk5YTEUxQlFVODRReXhKUVVWNFEwTXNVMEZCVlN4VFFVRlRRU3hUUVVGVFF5eEZRVUZQUXl4SFFVTnFReXhKUVVGSmVFVXNSVUZCU1Zrc1UwRkJVMWNzVFVGRFluUkNMRVZCUVZORUxFVkJRVVZETEU5QlExaDNSU3hGUVVGVE1Vb3NaMEpCUVdkQ2Qwb3NSVUZCVDNSRkxFZEJRM0JETEU5QlFVOHNTVUZCUzJ4RkxHMUNRVUZ0UW1sRkxFVkJRVWRCTEVWQlFVVlNMR3RDUVVFM1FpeERRVU5NVVN4RlFVRkZTeXhQUVVOR1RDeEZRVUZGTUVVc1YwRkJZVVFzUlVGQlUzcEZMRVZCUVVWcVJDeHJRa0ZETVVKc1F5eGxRVUZyUW5GSUxFbEJRVkp6UXl4RlFVRnZRblpGTEVWQlFWTnNSaXhuUWtGQlowSjVTaXhGUVVGTGRrVXNTVUZCVjNkRkxFMUJTM3BGUlN4UFFVRlRMRk5CUVZNelJpeE5RVUZOYTBVc1JVRkJUM05DTEVkQlEycERMRTlCUVU4eFJDeG5Ra0ZCWjBKVExFdEJRVTE0UXl4WFFVRlhjMFFzUzBGQlMzcENMRk5CUVZOWExFMUJRVTh5UWl4RlFVRlBjMElzUzBGSGJFVkpMRXRCUVU4c1UwRkJVM0pGTEVsQlFVbHpSU3hIUVVOMFFtcEZMRk5CUVZOWExFMUJRMVFzU1VGQlNWb3NSVUZCVTBnc1UwRkJVM2RDTEZWQlFWVXNSMEZCU1N4SFFVTm9ReTlDTEVWQlFWTnpRaXhMUVVGTGRFSXNUMEZEWkRaRkxFVkJRVTB4U2l4VFFVRlRlVW9zUjBGRFprVXNSVUZCVFd4TExGTkJRVk5wU3l4RlFVRkpOMFVzVVVGRGJrSm5RaXhGUVVGUkxFVkJRMW9zUjBGQlNUaEVMRVZCUVUxd1JTeEZRVUZUVml4RlFVRlJMRTFCUVUxMlJDeFhRVUZYYjBRc1kwRkROVU1zUzBGQlQyMUNMRVZCUVZFNFJDeEhRVUZMZUVRc1MwRkJTMW9zUlVGQlUwMHNSMEZCVXpaRUxFVkJRVWszUkN4TlFVYzNReXRFTEZkQlFXRXNRMEZEWmpWSExGRkJRVk1zVTBGQlUwRXNWVUZEYUVJc1QwRkJUMFFzWVVGQllXdEZMRXRCUVV0NlFpeFRRVUZUVnl4UlFVVndRM0pFTEV0QlFVMHNVMEZCVTBFc1QwRkRZaXhQUVVGUFJDeFZRVUZWYjBVc1MwRkJTM3BDTEZOQlFWTlhMRkZCUldwRGRrUXNUMEZCVVN4VFFVRlRRU3hUUVVObUxFOUJRVTlFTEZsQlFWbHpSU3hMUVVGTGVrSXNVMEZCVTFjc1UwRkpha013UkN4VlFVRlpMRk5CUVZWb1F5eEZRVUZSTjBJc1IwRkRhRU1zVDBGQlQycEhMRk5CUVZNNFNDeEpRVU5ZUVN4RlFVRlBkRVFzWTBGRFR5eHBRa0ZCVUhsQ0xFZEJRMUJCTEV0QlFVODJRaXhIUVVOUWFVTXNVVUZCVVRsRUxFbEJRVkU0UkN4UFFVRlBPVVFzU1VGRk1VSXJSQ3hUUVVGWExGTkJRVk5ETEhsQ1FVRjVRbTVETEVWQlFWRTNRaXhIUVVOMlJDeFBRVUZQTmtRc1ZVRkJWV2hETEVWQlFWRTNRaXhGUVVGTmNFY3NXVUZCV1c5SExFZEJRVXNzU1VGRE5VTXpSeXhoUVVGaExFVkJRVWQzU1N4RlFVRlBOMElzU1VGRGRrSXpSU3hMUVVGTGQwY3NSVUZCVVRkQ0xFbEJSV1pwUlN4VFFVRlhMRk5CUVZORExHVkJRV1Z5UXl4RlFVRlJOMElzUlVGQlMyMUZMRWRCUTJ4RUxGRkJRVWxPTEZWQlFWVm9ReXhGUVVGUk4wSXNSVUZCVFhCSExGbEJRVmx2Unl4SFFVRkxMRXRCUTNoRGFrY3NVMEZCVTI5TExFbEJRMVIwU3l4SlFVRkpjMHNzUlVGQlRTeFhRVU5VZEVzc1NVRkJTWE5MTEVWQlFVMHNVVUZEVm5STExFbEJRVWx6U3l4RlFVRk5MRkZCUlZaQkxFVkJRVXRETEdOQlEwcDJTeXhKUVVGSmMwc3NSVUZCVFN4alFVRmxRU3hGUVVGTFJTeFZRVU01UW5oTExFbEJRVWx6U3l4RlFVRk5MR2RDUVVGcFFrRXNSVUZCUzBjc1YwRkpPVUpzU2l4SFFVRkhlVWNzUlVGQlVUZENMRVZCUVV0dFJTeEpRVVoyUW5SRExFVkJRVTgzUWl4SFFVRlBiVVVzUlVGQlN6bERMRTFCUTFwUkxFbEJTVTU0UkN4dFFrRkRTR3hFTEUxQlFVMWtMRVZCUVVrd1NpeFRRVU5XTjBrc1NVRkJTV0lzUlVGQlNUUktMRlZCUjFacVRDeFJRVUZSUVN4UlFVRlJkVXdzUlVGQlNYWk1MRkZCUVZGM1RDeEhRVUZMYmtjc2FVSkJRV3RDTEZOQlFWVXNRMEZETTBReVJpeDVRa0ZCTUVKRUxGTkJRekZDUnl4bFFVRm5Ra1FzVjBGSFpHeE1MRTFCUVUwc1YwRkJZemhGTEdOQlFXTnZSQ3hMUVVGTExGRkJRM3BEY0VRc1kwRkJaMEpGTEc5Q1FVRnpRaXhUUVVGVFJDeFhRVU0zUXl4UFFVRlBVQ3hWUVVGVk1FUXNTMEZCUzJRc1VVRkpNVUlzU1VGQlNYTkZMSE5DUVVGM1FteE1MRmxCUVZrc1IwRkJTVzlKTEU5QlF6VkRjRWtzV1VGQldXdE1MSE5DUVVGMVFtSXNXVUZEYmtOMFN5eExRVUZMYlV3c2MwSkJRWFZDZUVjc1UwRkJWVEpHTEZkQlFWZG9TQ3hSUVVOcVJISkVMRmxCUVZsclRDeHpRa0ZCZFVJc1EwRkRha00zUnl4TlFVRlBNa1lzVDBGRFVIQkZMRWxCUVV0eFJTeExRVU5NYTBJc1dVRkJZU3hoUVVOaU5VY3NVMEZCVlVRc1kwRkRWa2NzWlVGQlowSjVSQ3hyUWtGRmJFSXhRaXhWUVVGVk1FVXNjMEpCUVhWQ0xGTkJRVlVzUzBGRE0wTXhSU3hWUVVGVk1FVXNjMEpCUVhWQ0xHRkJRV01zUzBGREwwTXhSU3hWUVVGVk1FVXNjMEpCUVhWQ0xHRkJRV01zUzBGREwwTXhSU3hWUVVGVk1FVXNjMEpCUVhWQ0xGTkJRVlVzUzBGRE0wTnlTaXhIUVVGSGNVb3NjMEpCUVhWQ2RrY3NTVUZCU3l4RFFVTTNRbWRETEVsQlFVc3NWMEZCWXl4UFFVRlBReXhMUVVGTE5VSXNaMEpCU1dwRGIwY3NUMEZCVDBNc1VVRkJWU3hUUVVGVlF5eEZRVUZMZGtZc1JVRkJUM2RHTEVWQlFWTkRMRWRCUlRsRExFbEJRVWxETEVWQlFVOUlMRWxCUkZoRkxFbEJRVmxCTEVkQlEyZENMRlZCUVZrc1NVRkJUU3hSUVVNeFEwVXNSVUZCVXl4TlFVRlJTaXhGUVVOcVFrc3NSVUZCVXl4TlFVRlJUQ3hGUVVOcVFrMHNSVUZCWVhKTkxFOUJRVTlyVFN4SFFVTndRa2tzUlVGQlQwUXNSMEZCWXl4SFFVTnlRa1VzUlVGQlRVWXNSMEZCWTJoTUxHVkJRV1ZuVEN4SFFVTnVRMGNzUjBGQlZVZ3NTVUZCWld4TkxFOUJRVTl6VFN4SlFVTm9Rek5ITEVWQlFVa3NSMEZEU2pSSExFVkJRWE5DVEN4SFFVRmpRU3hGUVVGWGRrb3NWMEZWTDBNMlNpeEZRVUZoTEZOQlFWVkRMRVZCUVUwM1JpeEhRVU12UW5wRkxFZEJRVWR6U3l4RlFVRk5OMFlzUlVGQlR5eERRVU5rU3l4SlFVRkxMRmRCUTBnc1QwRmFUeXhUUVVGVmQwWXNSVUZCVFRkR0xFZEJRek5DTEVsQlFVazRSaXhGUVVGUFJDeEZRVUZMZEVZc1IwRkRhRUlzVDBGQlQzVkdMRVZCUVV0RExFVkJRVVZZTEVkQlFWRndSaXhGUVVGUlVDeEZRVUZSY1Vjc1JVRkJTMFVzUlVGQlJ6bEhMR1ZCVlc1REswY3NRMEZCVHpOR0xFdEJRVTFPTEVsQlJYUkNWaXhKUVVGTExGTkJRVlZyUXl4SFFVTmlMRTlCV0U4c1UwRkJWWEZGTEVWQlFVMDNSaXhGUVVGUGQwSXNSMEZEYkVNc1NVRkJTWE5GTEVWQlFVOUVMRVZCUVV0MFJpeEhRVU5hTWtVc1NVRkJVekZFTEVkQlFWTkJMRVZCUVZGNVFpeExRVUZMYVVRc1RVRkJUVEZGTEVsQlFWVXNSVUZCU1N4RlFVRkpRU3hGUVVGUkxFbEJRVThzU1VGQlpTeEpRVUZTUVN4SFFVTnFSbk5GTEVWQlFVdERMRVZCUVVWV0xFZEJRVkZ5Uml4RlFVRlJVQ3hGUVVGUmNVY3NSVUZCUzBVc1JVRkJSM2hGTEVWQlFVOTBReXhsUVZGdVEybElMRU5CUVU4M1JpeExRVUZOVGl4RlFVRlBkMElzU1VGRk4wSnBSQ3haUVVGWkxFdEJSMXBuUWl4SFFVTkdTQ3hGUVVGaFRDeEZRVUZSTEZOQlFWVlpMRVZCUVUxRExFVkJRVTFOTEVWQlFWTkRMRWRCUTJ4RU9VMHNWMEZCVjNOTkxFVkJRVTFRTEVWQlFWbElMRVZCUVUwc1RVRkRia01zU1VGRlNTOUdMRVZCUVZGclNDeEZRVUZaZEVnc1JVRkJVWFZJTEVWQlJqVkNka2NzUlVGQlVTeEZRVU5TVGl4RlFVRlRMRVZCUldJc1IwRkJTM2hHTEZOQlFWTTBUQ3hIUVVsUUxFTkJRVUVzUzBGQlNVRXNZVUZCWjBJMVNpeGxRVUZwUW5GTExFVkJRVkYwVFN4UlFVRlJOa3dzUzBGQlZXeExMR05CUVdkQ01rc3NSMEZCVXpGTExHVkJZWGhHTEU5QlFVazJReXhsUVVGbGIwZ3NSVUZEYWtJdlJpeFRRVUZUZFVZc1JVRkJXVkVzUjBGRmNrSjBSaXhOUVVGTldTeExRVUZMYTBVc1JVRkJXVkVzUjBGbU9VSXhSeXhGUVVGVE1FY3NSVUZEVkhCSExFVkJRVk5JTEZOQlFWTTJSeXhGUVVGVE0wY3NSMEZETTBJc1NVRkJTU3RITEVWQlFVOVdMRVZCUVV0UkxGZEJRMmhDTEZGQlFXZENja1lzU1VGQldtOUdMRVZCUVhWQ0xFTkJRM3BDTEVkQlFVbEhMRVZCUVU4dlJ5eEZRVUZQTEUxQlFVMW9SU3hYUVVGWGIwUXNZMEZGYmtNc1NVRkVRWGxJTEVWQlFXRkZMRVZCUVU4NVJ5eEhRVU5JTEVWQlFVY3NUVUZCVFdwRkxGZEJRVmR2UkN4dFFrRkhja01zU1VGRVFYbElMRVZCUVdFeFRTeFRRVUZUZVUwc1IwRkJWelZITEVkQlEyaENReXhGUVVGVE9FY3NSVUZCVFN4TlFVRk5MMHNzVjBGQlYyOUVMR05CUlc1RVJ5eEZRVUZUYzBnc1JVRkJZVGRITEU5QlpuUkNWQ3hGUVVGVGJrWXNVVUZCVVdsTkxFZEJSV3BDTVVjc1JVRkJVeXhKUVVGSmJFUXNZVUZFWW05TExFVkJRV0YwU0N4RlFVRlRVeXhIUVRKQ2VFSXNTVUZRUVdoSExFdEJRVXR2VFN4RlFVRk5MRXRCUVUwc1EwRkRabGtzUlVGQlIzSklMRVZCUTBnMFJ5eEZRVUZIZEVjc1JVRkRTR2RJTEVWQlFVZEtMRVZCUTBoTExFVkJRVWN6U0N4RlFVTklLMGNzUlVGQlJ5eEpRVUZKTTBvc1ZVRkJWV2RFTEV0QlJWcFpMRVZCUVZGb1FpeEhRVUZSTkVjc1JVRkJWME1zUlVGQlRUZEdMRTlCUlRGRE1rWXNSVUZCYzBKTUxFVkJRVmQyU2l4WFFVRmhNVUlzVDBGQlQzVkxMSFZDUVVOeVJHNU1MRXRCUVV0clRTeEZRVUZ4UWl4alFVRmxUQ3hKUVVNdlFuQk5MRTFCUVUwc1YwRkRhRUp2VFN4RlFVRlhMRTFCUTA1d1RTeE5RVUZOTEZkQlExZ3NTVUZCU1c5TkxFZEJRVmtzVFVGRFdISkxMRmxCUVZrc1UwRkJWVEpNTEVkQlF6TkNMRWxCUVVsMFFpeEZRVU5LTEVsQlFVbEJMRVZCUVZjc1RVRkRaaXhKUVVGSlFTeEZRVUZYTEV0QlEyWXNTVUZCU1VFc1JVRkJWM05DTEV0QlEyUXNTMEZEUkhSQ0xFVkJRV0ZNTEVWQlFWRXNVMEZCVlZrc1JVRkJUVU1zUlVGQlRVMHNSVUZCVTBNc1IwRkZiRVFzU1VGQlNVVXNSVUZIU2l4UFFVcEJhRTRzVjBGQlYzTk5MRVZCUVUxUUxFVkJRVmxJTEVkQlNYaENha3dzVTBGQlV6Uk1MRWRCUTFaQkxHRkJRV2RDTlVvc1pVRkJhVUp4U3l4RlFVRlJkRTBzVVVGQlVUWk1MRXRCUVZWc1N5eGpRVUZuUWpKTExFZEJRVk14U3l4dFFrRkRia1Z2Uml4SlFVRmFiMFlzUlVGRFNDeEpRVUZKWkN4RlFVRkxUeXhGUVVGTmRrY3NVMEZCVXpaSExFVkJRVk16Unl4SFFVRlJORWNzVVVGRE4wSndSaXhKUVVGYWJVWXNSVUZEUlN4SlFVRkpZaXhGUVVGTFR5eEZRVUZOZGtjc1UwRkJVelpITEVWQlFWTXpSeXhKUVVOcVF5eEpRVUZKT0VZc1JVRkJTMDhzUjBGRlluQklMR1ZCUVdWdlNDeEZRVUZoTDBZc1UwRkJVM1ZHTEVWQlFWbFJMRWRCUXpsRGRFWXNUVUZCVFZrc1MwRkJTMnRGTEVWQlFWbFJMRWRCVkVZc1NVRkJTVkFzUlVGQlN6Rk1MRkZCUVZGcFRTeE5RVmN2UTNoS0xHRkJRV0ZyU2l4SlFVRlJjVUlzVTBGQlUwTXNWVUZCV1haTkxFdEJRVXRuVEN4SFFVRk5kMElzVDBGQlQzaE5MRXRCUVV0cFRDeEpRVUZSYWt3c1MwRkJTMmRNTEVkQlFVOHNVMEZCVlhCR0xFZEJRM1pHUVN4TFFVRlBiVVlzUjBGQllUZE1MRXRCUVVzMlRDeEZRVUZaYmtZc1JVRkJTMjlHTEVWQlFVdHdSaXhOUVVWMlJHMUdMRVZCUVZkMlNpeFhRVUZoTkVvc1JVRkRia0l6VFN4VlFVRlRNazBzUlVGQmIwSmtMRmxCUVdOVExFbEJSV3hFTEVsQlFVa3dRaXhGUVVGclFuSkNMRVZCUVc5Q2RrZ3NWVUZEZEVNMlNTeEpRVUZ6UWtRc1NVRkRTU3hWUVVGNFFrRXNSVUZCWjBKRkxFMUJRVFJEYWtjc1RVRkJlRUlyUml4RlFVRm5Ra1VzVFVGRGRFUkRMRVZCUVZsd1JDeFhRVUZYYUVnc1QwRkRNMEowUkN4TFFVRkxOa3dzUlVGQldXaElMRzFDUVVGdFFpeEhRVU53UXpkRkxFdEJRVXRyVFN4RlFVRnhRbXBJTEZsQlFXRjVSeXhIUVVOMlF6Rk1MRXRCUVV0clRTeEZRVUZ4UWk5SExFMUJRVTBzUjBGRGFFTnVSaXhMUVVGTGEwMHNSVUZCY1VKd1NDeG5Ra0ZCYVVJclJ5eEpRVVYyUTBvc1JVRkJWU3hKUVVGSlNTeEZRVUZYTEVkQlFVZHFTQ3hOUVVGUk9FY3NSVUZCVXpsSExFOUJRVTl6U0N4SlFVTjBSSEJMTEVkQlFVZHZTeXhGUVVGeFFuUklMRWxCUVVzc1EwRkRNMEpuUXl4SlFVRkxMRmRCUVdNc1QwRkJUemhGTEV0QlNUbENjRWNzUlVGQlJXOUhMRWRCUVZGSExFVkJSVlp1VFN4UlFVRlJRU3hSUVVGUmFVOHNSVUZCU1dwUExGRkJRVkZyVHl4RlFVRkpiRThzVVVGQlVYZE1MRWRCUVV0WExFZEJRV05ETEVkQlFVOTRSeXhIUVVWc1JUVkdMRkZCUVZGQkxGRkJRVkYxVEN4RlFVRkhVeXhGUVVGTkxFTkJRM1pDY2tvc2EwSkJRVzFDTWtRc1NVRkhja0owUnl4UlFVRlJRU3hSUVVGUmRVd3NSVUZCU1haTUxGRkJRVkYzVEN4RlFVRkpla3dzVFVGQlRTeFhRVUZqY1Uwc1JVRkJTemRFTEVkQlFVZE9MRXRCUVV0clJTeEZRVUZaTEV0QlFWRklMRVZCUVUwc1EwRkRla1l4UlN4TFFVRk5SQ3hOUVVOT2EwSXNSMEZCU1VRc1RVRkhRVE5HTEhGQ1FVRnhRalpLTEVkQlFYTkNiRTBzUzBGQlMydE5MRVZCUVhGQ04wb3NhMEpCUVcxQ01rUXNSMEZGT1VaMFJ5eFJRVUZSUVN4UlFVRlJiVThzUlVGQlIyNURMRVZCUVUxeVJDeFBRVVY2UWpWSExGZEJRVmRwU3l4SFFVVllhRTBzVVVGQlVVRXNVVUZCVVcxUExFVkJRVWx1VHl4UlFVRlJkMHdzUlVGQlNYUkdMRmRCUVZrNFJpeEZRVUZOTEVOQlFVVTNSaXhKUVVGTGNVVXNUMEZGZWtSNFN5eFJRVUZSUVN4UlFVRlJiVThzUlVGQlNXNVBMRkZCUVZGM1RDeEhRVUZMYzBNc1JVRkJiVUk1UWl4RlFVRk5jRUlzV1VGRmNrUXZTeXhUUVVGWE1rMHNSVUZCYjBJeFNDeFZRVUZaUkN4blFrRkJaVEpJTEVWQlFXOUNNVWdzVTBGQlYwUXNaVUZGT1VZM1JTeFJRVUZSUVN4UlFVRlJiVThzUlVGQlNXNVBMRkZCUVZGM1RDeEZRVUZKZWt3c1RVRkJUU3hYUVVOd1F5eEpRVUZKYjAwc1JVRkJWeXhIUVVGSGRrZ3NWVUZEYUVKdlNDeEZRVUZOTEVOQlFVVndTQ3hOUVVGUE1rWXNVMEZGYmtKMlN5eFJRVUZSUVN4UlFVRlJiVThzUlVGQlNXNVBMRkZCUVZGM1RDeEhRVUZMZWt3c1RVRkJUU3hYUVVOeVF5eE5RVUZQTEVOQlFVTXNSVUZCUnl4SFFVRkhhVVlzYTBKQlFXOUNMRWxCUVVsdFNDeEZRVUZYTEVOQlFVTXNSVUZCUnl4SlFVRkpia2dzY1VKQlEzQkVha1lzVFVGQlRTeFhRVU5ZZVUwc1JVRkJiMEo0U0N4bFFVRmxhVVFzUzBGQlN5eERRVUZETEVWQlFVY3NUMEZEZWtNclJDeEZRVUZOTEVOQlFVVm9TQ3hsUVVGblFubEVMR3RDUVVVM1FqVkhMRlZCUVZWdFN5eEhRVUZST0VJc1JVRkJiMEpFTEVWQlFXdENSeXhGUVVOdVJHNVBMRk5CUVZscFR5eEhRVUZ0UW5oT0xFdEJRVXRyVFN4RlFVRnhRblpJTEZOQlFWVXJTU3hUUVVWeVJYSkRMRTlCUVU5RExGRkJRVlVpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOTBlWEJsWkMxaGNuSmhlUzVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBnbG9iYWw9cmVxdWlyZShcIi4vX2dsb2JhbFwiKSxERVNDUklQVE9SUz1yZXF1aXJlKFwiLi9fZGVzY3JpcHRvcnNcIiksTElCUkFSWT1yZXF1aXJlKFwiLi9fbGlicmFyeVwiKSwkdHlwZWQ9cmVxdWlyZShcIi4vX3R5cGVkXCIpLGhpZGU9cmVxdWlyZShcIi4vX2hpZGVcIikscmVkZWZpbmVBbGw9cmVxdWlyZShcIi4vX3JlZGVmaW5lLWFsbFwiKSxmYWlscz1yZXF1aXJlKFwiLi9fZmFpbHNcIiksYW5JbnN0YW5jZT1yZXF1aXJlKFwiLi9fYW4taW5zdGFuY2VcIiksdG9JbnRlZ2VyPXJlcXVpcmUoXCIuL190by1pbnRlZ2VyXCIpLHRvTGVuZ3RoPXJlcXVpcmUoXCIuL190by1sZW5ndGhcIiksdG9JbmRleD1yZXF1aXJlKFwiLi9fdG8taW5kZXhcIiksZ09QTj1yZXF1aXJlKFwiLi9fb2JqZWN0LWdvcG5cIikuZixkUD1yZXF1aXJlKFwiLi9fb2JqZWN0LWRwXCIpLmYsYXJyYXlGaWxsPXJlcXVpcmUoXCIuL19hcnJheS1maWxsXCIpLHNldFRvU3RyaW5nVGFnPXJlcXVpcmUoXCIuL19zZXQtdG8tc3RyaW5nLXRhZ1wiKSxBUlJBWV9CVUZGRVI9XCJBcnJheUJ1ZmZlclwiLERBVEFfVklFVz1cIkRhdGFWaWV3XCIsUFJPVE9UWVBFPVwicHJvdG90eXBlXCIsV1JPTkdfTEVOR1RIPVwiV3JvbmcgbGVuZ3RoIVwiLFdST05HX0lOREVYPVwiV3JvbmcgaW5kZXghXCIsJEFycmF5QnVmZmVyPWdsb2JhbFtBUlJBWV9CVUZGRVJdLCREYXRhVmlldz1nbG9iYWxbREFUQV9WSUVXXSxNYXRoPWdsb2JhbC5NYXRoLFJhbmdlRXJyb3I9Z2xvYmFsLlJhbmdlRXJyb3IsSW5maW5pdHk9Z2xvYmFsLkluZmluaXR5LEJhc2VCdWZmZXI9JEFycmF5QnVmZmVyLGFicz1NYXRoLmFicyxwb3c9TWF0aC5wb3csZmxvb3I9TWF0aC5mbG9vcixsb2c9TWF0aC5sb2csTE4yPU1hdGguTE4yLEJVRkZFUj1cImJ1ZmZlclwiLEJZVEVfTEVOR1RIPVwiYnl0ZUxlbmd0aFwiLEJZVEVfT0ZGU0VUPVwiYnl0ZU9mZnNldFwiLCRCVUZGRVI9REVTQ1JJUFRPUlM/XCJfYlwiOkJVRkZFUiwkTEVOR1RIPURFU0NSSVBUT1JTP1wiX2xcIjpCWVRFX0xFTkdUSCwkT0ZGU0VUPURFU0NSSVBUT1JTP1wiX29cIjpCWVRFX09GRlNFVDtmdW5jdGlvbiBwYWNrSUVFRTc1NCh0LGUscil7dmFyIG4sYSxpLGY9bmV3IEFycmF5KHIpLG89OCpyLWUtMSx1PSgxPDxvKS0xLHM9dT4+MSxFPTIzPT09ZT9wb3coMiwtMjQpLXBvdygyLC03Nyk6MCxjPTAsST10PDB8fDA9PT10JiYxL3Q8MD8xOjA7Zm9yKCh0PWFicyh0KSkhPXR8fHQ9PT1JbmZpbml0eT8oYT10IT10PzE6MCxuPXUpOihuPWZsb29yKGxvZyh0KS9MTjIpLHQqKGk9cG93KDIsLW4pKTwxJiYobi0tLGkqPTIpLCh0Kz1uK3M+PTE/RS9pOkUqcG93KDIsMS1zKSkqaT49MiYmKG4rKyxpLz0yKSxuK3M+PXU/KGE9MCxuPXUpOm4rcz49MT8oYT0odCppLTEpKnBvdygyLGUpLG4rPXMpOihhPXQqcG93KDIscy0xKSpwb3coMixlKSxuPTApKTtlPj04O2ZbYysrXT0yNTUmYSxhLz0yNTYsZS09OCk7Zm9yKG49bjw8ZXxhLG8rPWU7bz4wO2ZbYysrXT0yNTUmbixuLz0yNTYsby09OCk7cmV0dXJuIGZbLS1jXXw9MTI4KkksZn1mdW5jdGlvbiB1bnBhY2tJRUVFNzU0KHQsZSxyKXt2YXIgbixhPTgqci1lLTEsaT0oMTw8YSktMSxmPWk+PjEsbz1hLTcsdT1yLTEscz10W3UtLV0sRT0xMjcmcztmb3Iocz4+PTc7bz4wO0U9MjU2KkUrdFt1XSx1LS0sby09OCk7Zm9yKG49RSYoMTw8LW8pLTEsRT4+PS1vLG8rPWU7bz4wO249MjU2Km4rdFt1XSx1LS0sby09OCk7aWYoMD09PUUpRT0xLWY7ZWxzZXtpZihFPT09aSlyZXR1cm4gbj9OYU46cz8tSW5maW5pdHk6SW5maW5pdHk7bis9cG93KDIsZSksRS09Zn1yZXR1cm4ocz8tMToxKSpuKnBvdygyLEUtZSl9ZnVuY3Rpb24gdW5wYWNrSTMyKHQpe3JldHVybiB0WzNdPDwyNHx0WzJdPDwxNnx0WzFdPDw4fHRbMF19ZnVuY3Rpb24gcGFja0k4KHQpe3JldHVyblsyNTUmdF19ZnVuY3Rpb24gcGFja0kxNih0KXtyZXR1cm5bMjU1JnQsdD4+OCYyNTVdfWZ1bmN0aW9uIHBhY2tJMzIodCl7cmV0dXJuWzI1NSZ0LHQ+PjgmMjU1LHQ+PjE2JjI1NSx0Pj4yNCYyNTVdfWZ1bmN0aW9uIHBhY2tGNjQodCl7cmV0dXJuIHBhY2tJRUVFNzU0KHQsNTIsOCl9ZnVuY3Rpb24gcGFja0YzMih0KXtyZXR1cm4gcGFja0lFRUU3NTQodCwyMyw0KX1mdW5jdGlvbiBhZGRHZXR0ZXIodCxlLHIpe2RQKHRbUFJPVE9UWVBFXSxlLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc1tyXX19KX1mdW5jdGlvbiBnZXQodCxlLHIsbil7dmFyIGE9dG9JbmRleCgrcik7aWYoYStlPnRbJExFTkdUSF0pdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7dmFyIGk9dFskQlVGRkVSXS5fYixmPWErdFskT0ZGU0VUXSxvPWkuc2xpY2UoZixmK2UpO3JldHVybiBuP286by5yZXZlcnNlKCl9ZnVuY3Rpb24gc2V0KHQsZSxyLG4sYSxpKXt2YXIgZj10b0luZGV4KCtyKTtpZihmK2U+dFskTEVOR1RIXSl0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtmb3IodmFyIG89dFskQlVGRkVSXS5fYix1PWYrdFskT0ZGU0VUXSxzPW4oK2EpLEU9MDtFPGU7RSsrKW9bdStFXT1zW2k/RTplLUUtMV19aWYoJHR5cGVkLkFCVil7aWYoIWZhaWxzKGZ1bmN0aW9uKCl7JEFycmF5QnVmZmVyKDEpfSl8fCFmYWlscyhmdW5jdGlvbigpe25ldyAkQXJyYXlCdWZmZXIoLTEpfSl8fGZhaWxzKGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyAkQXJyYXlCdWZmZXIsbmV3ICRBcnJheUJ1ZmZlcigxLjUpLG5ldyAkQXJyYXlCdWZmZXIoTmFOKSwkQXJyYXlCdWZmZXIubmFtZSE9QVJSQVlfQlVGRkVSfSkpe2Zvcih2YXIga2V5LEFycmF5QnVmZmVyUHJvdG89KCRBcnJheUJ1ZmZlcj1mdW5jdGlvbiBBcnJheUJ1ZmZlcih0KXtyZXR1cm4gYW5JbnN0YW5jZSh0aGlzLCRBcnJheUJ1ZmZlciksbmV3IEJhc2VCdWZmZXIodG9JbmRleCh0KSl9KVtQUk9UT1RZUEVdPUJhc2VCdWZmZXJbUFJPVE9UWVBFXSxrZXlzPWdPUE4oQmFzZUJ1ZmZlciksaj0wO2tleXMubGVuZ3RoPmo7KShrZXk9a2V5c1tqKytdKWluICRBcnJheUJ1ZmZlcnx8aGlkZSgkQXJyYXlCdWZmZXIsa2V5LEJhc2VCdWZmZXJba2V5XSk7TElCUkFSWXx8KEFycmF5QnVmZmVyUHJvdG8uY29uc3RydWN0b3I9JEFycmF5QnVmZmVyKX12YXIgdmlldz1uZXcgJERhdGFWaWV3KG5ldyAkQXJyYXlCdWZmZXIoMikpLCRzZXRJbnQ4PSREYXRhVmlld1tQUk9UT1RZUEVdLnNldEludDg7dmlldy5zZXRJbnQ4KDAsMjE0NzQ4MzY0OCksdmlldy5zZXRJbnQ4KDEsMjE0NzQ4MzY0OSksIXZpZXcuZ2V0SW50OCgwKSYmdmlldy5nZXRJbnQ4KDEpfHxyZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSx7c2V0SW50ODpmdW5jdGlvbiBzZXRJbnQ4KHQsZSl7JHNldEludDguY2FsbCh0aGlzLHQsZTw8MjQ+PjI0KX0sc2V0VWludDg6ZnVuY3Rpb24gc2V0VWludDgodCxlKXskc2V0SW50OC5jYWxsKHRoaXMsdCxlPDwyND4+MjQpfX0sITApfWVsc2UgJEFycmF5QnVmZmVyPWZ1bmN0aW9uIEFycmF5QnVmZmVyKHQpe2FuSW5zdGFuY2UodGhpcywkQXJyYXlCdWZmZXIsQVJSQVlfQlVGRkVSKTt2YXIgZT10b0luZGV4KHQpO3RoaXMuX2I9YXJyYXlGaWxsLmNhbGwobmV3IEFycmF5KGUpLDApLHRoaXNbJExFTkdUSF09ZX0sJERhdGFWaWV3PWZ1bmN0aW9uIERhdGFWaWV3KHQsZSxyKXthbkluc3RhbmNlKHRoaXMsJERhdGFWaWV3LERBVEFfVklFVyksYW5JbnN0YW5jZSh0LCRBcnJheUJ1ZmZlcixEQVRBX1ZJRVcpO3ZhciBuPXRbJExFTkdUSF0sYT10b0ludGVnZXIoZSk7aWYoYTwwfHxhPm4pdGhyb3cgUmFuZ2VFcnJvcihcIldyb25nIG9mZnNldCFcIik7aWYoYSsocj12b2lkIDA9PT1yP24tYTp0b0xlbmd0aChyKSk+bil0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7dGhpc1skQlVGRkVSXT10LHRoaXNbJE9GRlNFVF09YSx0aGlzWyRMRU5HVEhdPXJ9LERFU0NSSVBUT1JTJiYoYWRkR2V0dGVyKCRBcnJheUJ1ZmZlcixCWVRFX0xFTkdUSCxcIl9sXCIpLGFkZEdldHRlcigkRGF0YVZpZXcsQlVGRkVSLFwiX2JcIiksYWRkR2V0dGVyKCREYXRhVmlldyxCWVRFX0xFTkdUSCxcIl9sXCIpLGFkZEdldHRlcigkRGF0YVZpZXcsQllURV9PRkZTRVQsXCJfb1wiKSkscmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0se2dldEludDg6ZnVuY3Rpb24gZ2V0SW50OCh0KXtyZXR1cm4gZ2V0KHRoaXMsMSx0KVswXTw8MjQ+PjI0fSxnZXRVaW50ODpmdW5jdGlvbiBnZXRVaW50OCh0KXtyZXR1cm4gZ2V0KHRoaXMsMSx0KVswXX0sZ2V0SW50MTY6ZnVuY3Rpb24gZ2V0SW50MTYodCl7dmFyIGU9Z2V0KHRoaXMsMix0LGFyZ3VtZW50c1sxXSk7cmV0dXJuKGVbMV08PDh8ZVswXSk8PDE2Pj4xNn0sZ2V0VWludDE2OmZ1bmN0aW9uIGdldFVpbnQxNih0KXt2YXIgZT1nZXQodGhpcywyLHQsYXJndW1lbnRzWzFdKTtyZXR1cm4gZVsxXTw8OHxlWzBdfSxnZXRJbnQzMjpmdW5jdGlvbiBnZXRJbnQzMih0KXtyZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLDQsdCxhcmd1bWVudHNbMV0pKX0sZ2V0VWludDMyOmZ1bmN0aW9uIGdldFVpbnQzMih0KXtyZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLDQsdCxhcmd1bWVudHNbMV0pKT4+PjB9LGdldEZsb2F0MzI6ZnVuY3Rpb24gZ2V0RmxvYXQzMih0KXtyZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcyw0LHQsYXJndW1lbnRzWzFdKSwyMyw0KX0sZ2V0RmxvYXQ2NDpmdW5jdGlvbiBnZXRGbG9hdDY0KHQpe3JldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLDgsdCxhcmd1bWVudHNbMV0pLDUyLDgpfSxzZXRJbnQ4OmZ1bmN0aW9uIHNldEludDgodCxlKXtzZXQodGhpcywxLHQscGFja0k4LGUpfSxzZXRVaW50ODpmdW5jdGlvbiBzZXRVaW50OCh0LGUpe3NldCh0aGlzLDEsdCxwYWNrSTgsZSl9LHNldEludDE2OmZ1bmN0aW9uIHNldEludDE2KHQsZSl7c2V0KHRoaXMsMix0LHBhY2tJMTYsZSxhcmd1bWVudHNbMl0pfSxzZXRVaW50MTY6ZnVuY3Rpb24gc2V0VWludDE2KHQsZSl7c2V0KHRoaXMsMix0LHBhY2tJMTYsZSxhcmd1bWVudHNbMl0pfSxzZXRJbnQzMjpmdW5jdGlvbiBzZXRJbnQzMih0LGUpe3NldCh0aGlzLDQsdCxwYWNrSTMyLGUsYXJndW1lbnRzWzJdKX0sc2V0VWludDMyOmZ1bmN0aW9uIHNldFVpbnQzMih0LGUpe3NldCh0aGlzLDQsdCxwYWNrSTMyLGUsYXJndW1lbnRzWzJdKX0sc2V0RmxvYXQzMjpmdW5jdGlvbiBzZXRGbG9hdDMyKHQsZSl7c2V0KHRoaXMsNCx0LHBhY2tGMzIsZSxhcmd1bWVudHNbMl0pfSxzZXRGbG9hdDY0OmZ1bmN0aW9uIHNldEZsb2F0NjQodCxlKXtzZXQodGhpcyw4LHQscGFja0Y2NCxlLGFyZ3VtZW50c1syXSl9fSk7c2V0VG9TdHJpbmdUYWcoJEFycmF5QnVmZmVyLEFSUkFZX0JVRkZFUiksc2V0VG9TdHJpbmdUYWcoJERhdGFWaWV3LERBVEFfVklFVyksaGlkZSgkRGF0YVZpZXdbUFJPVE9UWVBFXSwkdHlwZWQuVklFVywhMCksZXhwb3J0c1tBUlJBWV9CVUZGRVJdPSRBcnJheUJ1ZmZlcixleHBvcnRzW0RBVEFfVklFV109JERhdGFWaWV3O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5MGVYQmxaQzFpZFdabVpYSXVhbk1pWFN3aWJtRnRaWE1pT2xzaVoyeHZZbUZzSWl3aWNtVnhkV2x5WlNJc0lrUkZVME5TU1ZCVVQxSlRJaXdpVEVsQ1VrRlNXU0lzSWlSMGVYQmxaQ0lzSW1ocFpHVWlMQ0p5WldSbFptbHVaVUZzYkNJc0ltWmhhV3h6SWl3aVlXNUpibk4wWVc1alpTSXNJblJ2U1c1MFpXZGxjaUlzSW5SdlRHVnVaM1JvSWl3aWRHOUpibVJsZUNJc0ltZFBVRTRpTENKbUlpd2laRkFpTENKaGNuSmhlVVpwYkd3aUxDSnpaWFJVYjFOMGNtbHVaMVJoWnlJc0lrRlNVa0ZaWDBKVlJrWkZVaUlzSWtSQlZFRmZWa2xGVnlJc0lsQlNUMVJQVkZsUVJTSXNJbGRTVDA1SFgweEZUa2RVU0NJc0lsZFNUMDVIWDBsT1JFVllJaXdpSkVGeWNtRjVRblZtWm1WeUlpd2lKRVJoZEdGV2FXVjNJaXdpVFdGMGFDSXNJbEpoYm1kbFJYSnliM0lpTENKSmJtWnBibWwwZVNJc0lrSmhjMlZDZFdabVpYSWlMQ0poWW5NaUxDSndiM2NpTENKbWJHOXZjaUlzSW14dlp5SXNJa3hPTWlJc0lrSlZSa1pGVWlJc0lrSlpWRVZmVEVWT1IxUklJaXdpUWxsVVJWOVBSa1pUUlZRaUxDSWtRbFZHUmtWU0lpd2lKRXhGVGtkVVNDSXNJaVJQUmtaVFJWUWlMQ0p3WVdOclNVVkZSVGMxTkNJc0luWmhiSFZsSWl3aWJVeGxiaUlzSW01Q2VYUmxjeUlzSW1VaUxDSnRJaXdpWXlJc0ltSjFabVpsY2lJc0lrRnljbUY1SWl3aVpVeGxiaUlzSW1WTllYZ2lMQ0psUW1saGN5SXNJbkowSWl3aWFTSXNJbk1pTENKMWJuQmhZMnRKUlVWRk56VTBJaXdpYmtKcGRITWlMQ0pPWVU0aUxDSjFibkJoWTJ0Sk16SWlMQ0ppZVhSbGN5SXNJbkJoWTJ0Sk9DSXNJbWwwSWl3aWNHRmphMGt4TmlJc0luQmhZMnRKTXpJaUxDSndZV05yUmpZMElpd2ljR0ZqYTBZek1pSXNJbUZrWkVkbGRIUmxjaUlzSWtNaUxDSnJaWGtpTENKcGJuUmxjbTVoYkNJc0ltZGxkQ0lzSW5Sb2FYTWlMQ0oyYVdWM0lpd2lhVzVrWlhnaUxDSnBjMHhwZEhSc1pVVnVaR2xoYmlJc0ltbHVkRWx1WkdWNElpd2ljM1J2Y21VaUxDSmZZaUlzSW5OMFlYSjBJaXdpY0dGamF5SXNJbk5zYVdObElpd2ljbVYyWlhKelpTSXNJbk5sZENJc0ltTnZiblpsY25OcGIyNGlMQ0pCUWxZaUxDSnVZVzFsSWl3aVFYSnlZWGxDZFdabVpYSlFjbTkwYnlJc0lrRnljbUY1UW5WbVptVnlJaXdpYkdWdVozUm9JaXdpYTJWNWN5SXNJbW9pTENKamIyNXpkSEoxWTNSdmNpSXNJaVJ6WlhSSmJuUTRJaXdpYzJWMFNXNTBPQ0lzSW1kbGRFbHVkRGdpTENKaWVYUmxUMlptYzJWMElpd2lZMkZzYkNJc0luTmxkRlZwYm5RNElpd2lZbmwwWlV4bGJtZDBhQ0lzSWtSaGRHRldhV1YzSWl3aVluVm1abVZ5VEdWdVozUm9JaXdpYjJabWMyVjBJaXdpZFc1a1pXWnBibVZrSWl3aVoyVjBWV2x1ZERnaUxDSm5aWFJKYm5ReE5pSXNJbUZ5WjNWdFpXNTBjeUlzSW1kbGRGVnBiblF4TmlJc0ltZGxkRWx1ZERNeUlpd2laMlYwVldsdWRETXlJaXdpWjJWMFJteHZZWFF6TWlJc0ltZGxkRVpzYjJGME5qUWlMQ0p6WlhSSmJuUXhOaUlzSW5ObGRGVnBiblF4TmlJc0luTmxkRWx1ZERNeUlpd2ljMlYwVldsdWRETXlJaXdpYzJWMFJteHZZWFF6TWlJc0luTmxkRVpzYjJGME5qUWlMQ0pXU1VWWElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZEUVN4SlFVRkpRU3hQUVVGVFF5eFJRVUZSTEdGQlEycENReXhaUVVGalJDeFJRVUZSTEd0Q1FVTjBRa1VzVVVGQlZVWXNVVUZCVVN4alFVTnNRa2NzVDBGQlUwZ3NVVUZCVVN4WlFVTnFRa2tzUzBGQlQwb3NVVUZCVVN4WFFVTm1TeXhaUVVGalRDeFJRVUZSTEcxQ1FVTjBRazBzVFVGQlVVNHNVVUZCVVN4WlFVTm9RazhzVjBGQllWQXNVVUZCVVN4clFrRkRja0pSTEZWQlFWbFNMRkZCUVZFc2FVSkJRM0JDVXl4VFFVRlhWQ3hSUVVGUkxHZENRVU51UWxVc1VVRkJWVllzVVVGQlVTeGxRVU5zUWxjc1MwRkJUMWdzVVVGQlVTeHJRa0ZCYTBKWkxFVkJRMnBEUXl4SFFVRkxZaXhSUVVGUkxHZENRVUZuUWxrc1JVRkROMEpGTEZWQlFWbGtMRkZCUVZFc2FVSkJRM0JDWlN4bFFVRnBRbVlzVVVGQlVTeDNRa0ZEZWtKblFpeGhRVUZsTEdOQlEyWkRMRlZCUVZrc1YwRkRXa01zVlVGQldTeFpRVU5hUXl4aFFVRmxMR2RDUVVObVF5eFpRVUZqTEdWQlEyUkRMR0ZCUVdWMFFpeFBRVUZQYVVJc1kwRkRkRUpOTEZWQlFWbDJRaXhQUVVGUGEwSXNWMEZEYmtKTkxFdEJRVTk0UWl4UFFVRlBkMElzUzBGRFpFTXNWMEZCWVhwQ0xFOUJRVTk1UWl4WFFVVndRa01zVTBGQlZ6RkNMRTlCUVU4d1FpeFRRVU5zUWtNc1YwRkJZVXdzWVVGRFlrMHNTVUZCVFVvc1MwRkJTMGtzU1VGRFdFTXNTVUZCVFV3c1MwRkJTMHNzU1VGRFdFTXNUVUZCVVU0c1MwRkJTMDBzVFVGRFlrTXNTVUZCVFZBc1MwRkJTMDhzU1VGRFdFTXNTVUZCVFZJc1MwRkJTMUVzU1VGRFdFTXNUMEZCVXl4VFFVTlVReXhaUVVGakxHRkJRMlJETEZsQlFXTXNZVUZEWkVNc1VVRkJWV3hETEZsQlFXTXNTMEZCVHl0Q0xFOUJReTlDU1N4UlFVRlZia01zV1VGQll5eExRVUZQWjBNc1dVRkRMMEpKTEZGQlFWVndReXhaUVVGakxFdEJRVTlwUXl4WlFVZHVReXhUUVVGVFNTeFpRVUZaUXl4RlFVRlBReXhGUVVGTlF5eEhRVU5vUXl4SlFVOUpReXhGUVVGSFF5eEZRVUZIUXl4RlFWQk9ReXhGUVVGVExFbEJRVWxETEUxQlFVMU1MRWRCUTI1Q1RTeEZRVUZuUWl4RlFVRlVUaXhGUVVGaFJDeEZRVUZQTEVWQlF6TkNVU3hIUVVGUkxFZEJRVXRFTEVkQlFWRXNSVUZEY2tKRkxFVkJRVkZFTEVkQlFWRXNSVUZEYUVKRkxFVkJRV01zUzBGQlZGWXNSVUZCWTFvc1NVRkJTU3hIUVVGSkxFbEJRVTFCTEVsQlFVa3NSMEZCU1N4SlFVRk5MRVZCUXk5RGRVSXNSVUZCU1N4RlFVTktReXhGUVVGSllpeEZRVUZSTEVkQlFXVXNTVUZCVmtFc1IwRkJaU3hGUVVGSlFTeEZRVUZSTEVWQlFVa3NSVUZCU1N4RlFXdERlRVFzUzBGb1EwRkJMRVZCUVZGYUxFbEJRVWxaTEV0QlJVTkJMRWRCUVZOQkxFbEJRVlZrTEZWQlJUbENhMElzUlVGQlNVb3NSMEZCVTBFc1JVRkJVU3hGUVVGSkxFVkJRM3BDUnl4RlFVRkpUU3hKUVVWS1RpeEZRVUZKWWl4TlFVRk5ReXhKUVVGSlV5eEhRVUZUVWl4TFFVTnVRbEVzUjBGQlUwc3NSVUZCU1doQ0xFbEJRVWtzUjBGQlNXTXNTVUZCVFN4SlFVTTNRa0VzU1VGRFFVVXNSMEZCU3l4SlFVZE1UQ3hIUVVSRlJ5eEZRVUZKVHl4SFFVRlRMRVZCUTA1RExFVkJRVXRPTEVWQlJVeE5MRVZCUVV0MFFpeEpRVUZKTEVWQlFVY3NSVUZCU1hGQ0xFbEJSV1pNTEVkQlFVc3NTVUZEWmtZc1NVRkRRVVVzUjBGQlN5eEhRVVZJUml4RlFVRkpUeXhIUVVGVFJDeEhRVU5tVEN4RlFVRkpMRVZCUTBwRUxFVkJRVWxOTEVkQlEwdE9MRVZCUVVsUExFZEJRVk1zUjBGRGRFSk9MRWRCUVV0S0xFVkJRVkZMTEVWQlFVa3NSMEZCUzJoQ0xFbEJRVWtzUlVGQlIxa3NSMEZETjBKRkxFZEJRVkZQTEVsQlJWSk9MRVZCUVVsS0xFVkJRVkZZTEVsQlFVa3NSVUZCUjNGQ0xFVkJRVkVzUjBGQlMzSkNMRWxCUVVrc1JVRkJSMWtzUjBGRGRrTkZMRVZCUVVrc1NVRkhSRVlzUjBGQlVTeEZRVUZIU3l4RlFVRlBUU3hMUVVGWExFbEJRVXBTTEVWQlFWTkJMRWRCUVVzc1NVRkJTMGdzUjBGQlVTeEhRVWN6UkN4SlFVWkJSU3hGUVVGSlFTeEhRVUZMUml4RlFVRlBSeXhGUVVOb1Fra3NSMEZCVVZBc1JVRkRSRThzUlVGQlR5eEZRVUZIUml4RlFVRlBUU3hMUVVGWExFbEJRVXBVTEVWQlFWTkJMRWRCUVVzc1NVRkJTMHNzUjBGQlVTeEhRVVV4UkN4UFFVUkJSaXhKUVVGVFRTeEpRVUZWTEVsQlFVcERMRVZCUTFKUUxFVkJSVlFzVTBGQlUxRXNZMEZCWTFJc1JVRkJVVXdzUlVGQlRVTXNSMEZEYmtNc1NVRlBTVVVzUlVGUVFVa3NSVUZCWjBJc1JVRkJWRTRzUlVGQllVUXNSVUZCVHl4RlFVTXpRbEVzUjBGQlVTeEhRVUZMUkN4SFFVRlJMRVZCUTNKQ1JTeEZRVUZSUkN4SFFVRlJMRVZCUTJoQ1RTeEZRVUZSVUN4RlFVRlBMRVZCUTJaSkxFVkJRVWxXTEVWQlFWTXNSVUZEWWxjc1JVRkJTVkFzUlVGQlQwMHNTMEZEV0ZRc1JVRkJVU3hKUVVGS1ZTeEZRVWRTTEVsQlJFRkJMRWxCUVUwc1JVRkRRMFVzUlVGQlVTeEZRVUZIV2l4RlFVRlJMRWxCUVVwQkxFVkJRVlZITEVWQlFVOU5MRWRCUVVsQkxFbEJRVXRITEVkQlFWTXNSMEZKZWtRc1NVRklRVmdzUlVGQlNVUXNSMEZCU3l4SlFVRk5XU3hIUVVGVExFVkJRM2hDV2l4TFFVRlBXU3hGUVVOUVFTeEhRVUZUWkN4RlFVTkdZeXhGUVVGUkxFVkJRVWRZTEVWQlFWRXNTVUZCU2tFc1JVRkJWVVVzUlVGQlQwMHNSMEZCU1VFc1NVRkJTMGNzUjBGQlV5eEhRVU42UkN4SFFVRlZMRWxCUVU1YUxFVkJRMFpCTEVWQlFVa3NSVUZCU1U4c1RVRkRTQ3hEUVVGQkxFZEJRVWxRTEVsQlFVMU5MRVZCUTJZc1QwRkJUMHdzUlVGQlNWa3NTVUZCVFVnc1IwRkJTek5DTEZOQlFWZEJMRk5CUldwRGEwSXNSMEZCVVdZc1NVRkJTU3hGUVVGSFdTeEhRVU5tUlN4SFFVRlJUeXhGUVVOU0xFOUJRVkZITEVkQlFVc3NSVUZCU1N4SFFVRkxWQ3hGUVVGSlppeEpRVUZKTEVWQlFVZGpMRVZCUVVsR0xFZEJSM3BETEZOQlFWTm5RaXhWUVVGVlF5eEhRVU5xUWl4UFFVRlBRU3hGUVVGTkxFbEJRVTBzUjBGQlMwRXNSVUZCVFN4SlFVRk5MRWRCUVV0QkxFVkJRVTBzU1VGQlRTeEZRVUZKUVN4RlFVRk5MRWRCUldwRkxGTkJRVk5ETEU5QlFVOURMRWRCUTJRc1RVRkJUeXhEUVVGTkxFbEJRVXhCTEVkQlJWWXNVMEZCVTBNc1VVRkJVVVFzUjBGRFppeE5RVUZQTEVOQlFVMHNTVUZCVEVFc1JVRkJWMEVzUjBGQlRTeEZRVUZKTEV0QlJTOUNMRk5CUVZORkxGRkJRVkZHTEVkQlEyWXNUVUZCVHl4RFFVRk5MRWxCUVV4QkxFVkJRVmRCTEVkQlFVMHNSVUZCU1N4SlFVRk5RU3hIUVVGTkxFZEJRVXNzU1VGQlRVRXNSMEZCVFN4SFFVRkxMRXRCUldwRkxGTkJRVk5ITEZGQlFWRklMRWRCUTJZc1QwRkJUM0pDTEZsQlFWbHhRaXhGUVVGSkxFZEJRVWtzUjBGRk4wSXNVMEZCVTBrc1VVRkJVVW9zUjBGRFppeFBRVUZQY2tJc1dVRkJXWEZDTEVWQlFVa3NSMEZCU1N4SFFVYzNRaXhUUVVGVFN5eFZRVUZWUXl4RlFVRkhReXhGUVVGTFF5eEhRVU42UW5SRUxFZEJRVWR2UkN4RlFVRkZMME1zVjBGQldXZEVMRVZCUVVzc1EwRkJSVVVzU1VGQlN5eFhRVUZqTEU5QlFVOURMRXRCUVV0R0xFMUJSM3BFTEZOQlFWTkRMRWxCUVVsRkxFVkJRVTFpTEVWQlFVOWpMRVZCUVU5RExFZEJReTlDTEVsQlEwbERMRVZCUVZjdlJDeFRRVVJETmtRc1IwRkZhRUlzUjBGQlNVVXNSVUZCVjJoQ0xFVkJRVkZoTEVWQlFVdHNReXhUUVVGVkxFMUJRVTFhTEZkQlFWZEtMR0ZCUTNaRUxFbEJRVWx6UkN4RlFVRlJTaXhGUVVGTGJrTXNVMEZCVTNkRExFZEJRM1JDUXl4RlFVRlJTQ3hGUVVGWFNDeEZRVUZMYWtNc1UwRkRlRUozUXl4RlFVRlBTQ3hGUVVGTlNTeE5RVUZOUml4RlFVRlBRU3hGUVVGUmJrSXNSMEZEZEVNc1QwRkJUMlVzUlVGQmFVSkxMRVZCUVU5QkxFVkJRVXRGTEZWQlJYUkRMRk5CUVZORExFbEJRVWxXTEVWQlFVMWlMRVZCUVU5akxFVkJRVTlWTEVWQlFWa3hReXhGUVVGUGFVTXNSMEZEYkVRc1NVRkRTVU1zUlVGQlZ5OUVMRk5CUkVNMlJDeEhRVVZvUWl4SFFVRkpSU3hGUVVGWGFFSXNSVUZCVVdFc1JVRkJTMnhETEZOQlFWVXNUVUZCVFZvc1YwRkJWMG9zWVVGSmRrUXNTVUZJUVN4SlFVRkpjMFFzUlVGQlVVb3NSVUZCUzI1RExGTkJRVk4zUXl4SFFVTjBRa01zUlVGQlVVZ3NSVUZCVjBnc1JVRkJTMnBETEZOQlEzaENkME1zUlVGQlQwa3NSMEZCV1RGRExFZEJRMlJaTEVWQlFVa3NSVUZCUjBFc1JVRkJTVTBzUlVGQlQwNHNTVUZCUzNWQ0xFVkJRVTFGTEVWQlFWRjZRaXhIUVVGTE1FSXNSVUZCUzB3c1JVRkJhVUp5UWl4RlFVRkpUU3hGUVVGUlRpeEZRVUZKTEVkQlJ6TkdMRWRCUVV0b1JDeFBRVUZQSzBVc1NVRm5Sa3dzUTBGRFRDeEpRVUZMTlVVc1RVRkJUU3hYUVVOVVpTeGhRVUZoTEU5QlExSm1MRTFCUVUwc1YwRkRXQ3hKUVVGSlpTeGpRVUZqTEUxQlEyUm1MRTFCUVUwc1YwRkpWaXhQUVVoQkxFbEJRVWxsTEdGQlEwb3NTVUZCU1VFc1lVRkJZU3hMUVVOcVFpeEpRVUZKUVN4aFFVRmhhME1zUzBGRFZteERMR0ZCUVdFNFJDeE5RVUZSYmtVc1pVRkRNVUlzUTBGTlJpeEpRVVJCTEVsQlEzbERhMFFzU1VGRWNrTnJRaXhyUWtGS1NpOUVMR0ZCUVdVc1UwRkJVMmRGTEZsQlFWbERMRWRCUld4RExFOUJSRUV2UlN4WFFVRlhPRVFzUzBGQlRXaEVMR05CUTFZc1NVRkJTVXNzVjBGQlYyaENMRkZCUVZFMFJTeE5RVVZKY0VVc1YwRkJZVkVzVjBGQlYxSXNWMEZEYmtSeFJTeExRVUZQTlVVc1MwRkJTMlVzV1VGQllUaEVMRVZCUVVrc1JVRkJVVVFzUzBGQlMwUXNUMEZCVTBVc1NVRkRia1IwUWl4SlFVRk5jVUlzUzBGQlMwTXNVVUZCVTI1RkxHTkJRV1ZxUWl4TFFVRkxhVUlzWVVGQll6WkRMRWxCUVV0NFF5eFhRVUZYZDBNc1RVRkZNVVZvUlN4VlFVRlRhMFlzYVVKQlFXbENTeXhaUVVGamNFVXNZMEZITDBNc1NVRkJTV2xFTEV0QlFVOHNTVUZCU1doRUxGVkJRVlVzU1VGQlNVUXNZVUZCWVN4SlFVTjBRM0ZGTEZOQlFWZHdSU3hWUVVGVlNpeFhRVUZYZVVVc1VVRkRjRU55UWl4TFFVRkxjVUlzVVVGQlVTeEZRVUZITEZsQlEyaENja0lzUzBGQlMzRkNMRkZCUVZFc1JVRkJSeXhoUVVOYWNrSXNTMEZCUzNOQ0xGRkJRVkVzU1VGQlQzUkNMRXRCUVV0elFpeFJRVUZSTEVsQlFVbDJSaXhaUVVGWmFVSXNWVUZCVlVvc1YwRkJXU3hEUVVONlJYbEZMRkZCUVZNc1UwRkJVMEVzVVVGQlVVVXNSVUZCV1hSRUxFZEJRM0JEYlVRc1UwRkJVMGtzUzBGQlMzcENMRXRCUVUxM1FpeEZRVUZaZEVRc1IwRkJVeXhKUVVGTkxFdEJSV3BFZDBRc1UwRkJWU3hUUVVGVFFTeFRRVUZUUml4RlFVRlpkRVFzUjBGRGRFTnRSQ3hUUVVGVFNTeExRVUZMZWtJc1MwRkJUWGRDTEVWQlFWbDBSQ3hIUVVGVExFbEJRVTBzVDBGRmFFUXNVVUZvU0Voc1FpeGhRVUZsTEZOQlFWTm5SU3haUVVGWlF5eEhRVU5zUXk5RkxGZEJRVmM0UkN4TFFVRk5hRVFzWVVGQlkwd3NZMEZETDBJc1NVRkJTV2RHTEVWQlFXRjBSaXhSUVVGUk5FVXNSMEZEZWtKcVFpeExRVUZMVFN4SFFVRkxOMFFzVlVGQlZXZEdMRXRCUVVzc1NVRkJTV2hFTEUxQlFVMXJSQ3hIUVVGaExFZEJRMmhFTTBJc1MwRkJTMnBETEZOQlFWYzBSQ3hIUVVkc1FqRkZMRlZCUVZrc1UwRkJVekpGTEZOQlFWTndSQ3hGUVVGUlowUXNSVUZCV1Vjc1IwRkRhRVI2Uml4WFFVRlhPRVFzUzBGQlRTOURMRlZCUVZkTUxGZEJRelZDVml4WFFVRlhjME1zUlVGQlVYaENMR0ZCUVdOS0xGZEJRMnBETEVsQlFVbHBSaXhGUVVGbGNrUXNSVUZCVDFRc1UwRkRkRUlyUkN4RlFVRlRNMFlzVlVGQlZYRkdMRWRCUTNaQ0xFZEJRVWxOTEVWQlFWTXNSMEZCUzBFc1JVRkJVMFFzUlVGQll5eE5RVUZOTVVVc1YwRkJWeXhwUWtGRk1VUXNSMEZCU1RKRkxFZEJSRXBJTEU5QlFUUkNTU3hKUVVGbVNpeEZRVUV5UWtVc1JVRkJaVU1zUlVGQlV6RkdMRk5CUVZOMVJpeEpRVU12UTBVc1JVRkJZeXhOUVVGTk1VVXNWMEZCVjB3c1kwRkRla1JyUkN4TFFVRkxiRU1zVTBGQlYxVXNSVUZEYUVKM1FpeExRVUZMYUVNc1UwRkJWemhFTEVWQlEyaENPVUlzUzBGQlMycERMRk5CUVZjMFJDeEhRVWRrTDBZc1kwRkRSaXRFTEZWQlFWVXpReXhoUVVGaldTeFpRVUZoTEUxQlEzSkRLMElzVlVGQlZURkRMRlZCUVZkVkxFOUJRVkVzVFVGRE4wSm5ReXhWUVVGVk1VTXNWVUZCVjFjc1dVRkJZU3hOUVVOc1F5dENMRlZCUVZVeFF5eFZRVUZYV1N4WlFVRmhMRTlCUjNCRE4wSXNXVUZCV1dsQ0xGVkJRVlZLTEZkQlFWa3NRMEZEYUVNd1JTeFJRVUZUTEZOQlFWTkJMRkZCUVZGRExFZEJRM2hDTEU5QlFVOTZRaXhKUVVGSlF5eExRVUZOTEVWQlFVZDNRaXhIUVVGWkxFbEJRVTBzU1VGQlRTeEpRVVU1UTFFc1UwRkJWU3hUUVVGVFFTeFRRVUZUVWl4SFFVTXhRaXhQUVVGUGVrSXNTVUZCU1VNc1MwRkJUU3hGUVVGSGQwSXNSMEZCV1N4SlFVVnNRMU1zVTBGQlZTeFRRVUZUUVN4VFFVRlRWQ3hIUVVNeFFpeEpRVUZKY0VNc1JVRkJVVmNzU1VGQlNVTXNTMEZCVFN4RlFVRkhkMElzUlVGQldWVXNWVUZCVlN4SlFVTXZReXhQUVVGUk9VTXNSVUZCVFN4SlFVRk5MRVZCUVVsQkxFVkJRVTBzUzBGQlR5eEpRVUZOTEVsQlJUZERLME1zVlVGQlZ5eFRRVUZUUVN4VlFVRlZXQ3hIUVVNMVFpeEpRVUZKY0VNc1JVRkJVVmNzU1VGQlNVTXNTMEZCVFN4RlFVRkhkMElzUlVGQldWVXNWVUZCVlN4SlFVTXZReXhQUVVGUE9VTXNSVUZCVFN4SlFVRk5MRVZCUVVsQkxFVkJRVTBzU1VGRkwwSm5SQ3hUUVVGVkxGTkJRVk5CTEZOQlFWTmFMRWRCUXpGQ0xFOUJRVTl5UXl4VlFVRlZXU3hKUVVGSlF5eExRVUZOTEVWQlFVZDNRaXhGUVVGWlZTeFZRVUZWTEUxQlJYUkVSeXhWUVVGWExGTkJRVk5CTEZWQlFWVmlMRWRCUXpWQ0xFOUJRVTl5UXl4VlFVRlZXU3hKUVVGSlF5eExRVUZOTEVWQlFVZDNRaXhGUVVGWlZTeFZRVUZWTEU5QlFWTXNSMEZGTDBSSkxGZEJRVmtzVTBGQlUwRXNWMEZCVjJRc1IwRkRPVUlzVDBGQlQzaERMR05CUVdObExFbEJRVWxETEV0QlFVMHNSVUZCUjNkQ0xFVkJRVmxWTEZWQlFWVXNTVUZCU3l4SFFVRkpMRWxCUlc1RlN5eFhRVUZaTEZOQlFWTkJMRmRCUVZkbUxFZEJRemxDTEU5QlFVOTRReXhqUVVGalpTeEpRVUZKUXl4TFFVRk5MRVZCUVVkM1FpeEZRVUZaVlN4VlFVRlZMRWxCUVVzc1IwRkJTU3hKUVVWdVJWb3NVVUZCVXl4VFFVRlRRU3hSUVVGUlJTeEZRVUZaZEVRc1IwRkRjRU41UXl4SlFVRkpXQ3hMUVVGTkxFVkJRVWQzUWl4RlFVRlpia01zVDBGQlVXNUNMRWxCUlc1RGQwUXNVMEZCVlN4VFFVRlRRU3hUUVVGVFJpeEZRVUZaZEVRc1IwRkRkRU41UXl4SlFVRkpXQ3hMUVVGTkxFVkJRVWQzUWl4RlFVRlpia01zVDBGQlVXNUNMRWxCUlc1RGMwVXNVMEZCVlN4VFFVRlRRU3hUUVVGVGFFSXNSVUZCV1hSRUxFZEJRM1JEZVVNc1NVRkJTVmdzUzBGQlRTeEZRVUZIZDBJc1JVRkJXV3BETEZGQlFWTnlRaXhGUVVGUFowVXNWVUZCVlN4TFFVVnlSRThzVlVGQlZ5eFRRVUZUUVN4VlFVRlZha0lzUlVGQldYUkVMRWRCUTNoRGVVTXNTVUZCU1Znc1MwRkJUU3hGUVVGSGQwSXNSVUZCV1dwRExGRkJRVk55UWl4RlFVRlBaMFVzVlVGQlZTeExRVVZ5UkZFc1UwRkJWU3hUUVVGVFFTeFRRVUZUYkVJc1JVRkJXWFJFTEVkQlEzUkRlVU1zU1VGQlNWZ3NTMEZCVFN4RlFVRkhkMElzUlVGQldXaERMRkZCUVZOMFFpeEZRVUZQWjBVc1ZVRkJWU3hMUVVWeVJGTXNWVUZCVnl4VFFVRlRRU3hWUVVGVmJrSXNSVUZCV1hSRUxFZEJRM2hEZVVNc1NVRkJTVmdzUzBGQlRTeEZRVUZIZDBJc1JVRkJXV2hETEZGQlFWTjBRaXhGUVVGUFowVXNWVUZCVlN4TFFVVnlSRlVzVjBGQldTeFRRVUZUUVN4WFFVRlhjRUlzUlVGQldYUkVMRWRCUXpGRGVVTXNTVUZCU1Znc1MwRkJUU3hGUVVGSGQwSXNSVUZCV1RsQ0xGRkJRVk40UWl4RlFVRlBaMFVzVlVGQlZTeExRVVZ5UkZjc1YwRkJXU3hUUVVGVFFTeFhRVUZYY2tJc1JVRkJXWFJFTEVkQlF6RkRlVU1zU1VGQlNWZ3NTMEZCVFN4RlFVRkhkMElzUlVGQldTOUNMRkZCUVZOMlFpeEZRVUZQWjBVc1ZVRkJWU3hQUVhORGVrUjRSaXhsUVVGbFRTeGhRVUZqVEN4alFVTTNRa1FzWlVGQlpVOHNWVUZCVjB3c1YwRkRNVUppTEV0QlFVdHJRaXhWUVVGVlNpeFhRVUZaWml4UFFVRlBaMGdzVFVGQlRTeEhRVU40UTBNc1VVRkJVWEJITEdOQlFXZENTeXhoUVVONFFpdEdMRkZCUVZGdVJ5eFhRVUZoU3lJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYM1I1Y0dWa0xXSjFabVpsY2k1cWN5SjkiLCJmb3IodmFyIFR5cGVkLGdsb2JhbD1yZXF1aXJlKFwiLi9fZ2xvYmFsXCIpLGhpZGU9cmVxdWlyZShcIi4vX2hpZGVcIiksdWlkPXJlcXVpcmUoXCIuL191aWRcIiksVFlQRUQ9dWlkKFwidHlwZWRfYXJyYXlcIiksVklFVz11aWQoXCJ2aWV3XCIpLEFCVj0hKCFnbG9iYWwuQXJyYXlCdWZmZXJ8fCFnbG9iYWwuRGF0YVZpZXcpLENPTlNUUj1BQlYsaT0wLGw9OSxUeXBlZEFycmF5Q29uc3RydWN0b3JzPVwiSW50OEFycmF5LFVpbnQ4QXJyYXksVWludDhDbGFtcGVkQXJyYXksSW50MTZBcnJheSxVaW50MTZBcnJheSxJbnQzMkFycmF5LFVpbnQzMkFycmF5LEZsb2F0MzJBcnJheSxGbG9hdDY0QXJyYXlcIi5zcGxpdChcIixcIik7aTxsOykoVHlwZWQ9Z2xvYmFsW1R5cGVkQXJyYXlDb25zdHJ1Y3RvcnNbaSsrXV0pPyhoaWRlKFR5cGVkLnByb3RvdHlwZSxUWVBFRCwhMCksaGlkZShUeXBlZC5wcm90b3R5cGUsVklFVywhMCkpOkNPTlNUUj0hMTttb2R1bGUuZXhwb3J0cz17QUJWOkFCVixDT05TVFI6Q09OU1RSLFRZUEVEOlRZUEVELFZJRVc6VklFV307XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDkwZVhCbFpDNXFjeUpkTENKdVlXMWxjeUk2V3lKVWVYQmxaQ0lzSW1kc2IySmhiQ0lzSW5KbGNYVnBjbVVpTENKb2FXUmxJaXdpZFdsa0lpd2lWRmxRUlVRaUxDSldTVVZYSWl3aVFVSldJaXdpUVhKeVlYbENkV1ptWlhJaUxDSkVZWFJoVm1sbGR5SXNJa05QVGxOVVVpSXNJbWtpTENKc0lpd2lWSGx3WldSQmNuSmhlVU52Ym5OMGNuVmpkRzl5Y3lJc0luTndiR2wwSWl3aWNISnZkRzkwZVhCbElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlpVRXNTVUZtUVN4SlFWTkpRU3hOUVZSQlF5eFBRVUZUUXl4UlFVRlJMR0ZCUTJwQ1F5eExRVUZQUkN4UlFVRlJMRmRCUTJaRkxFbEJRVTFHTEZGQlFWRXNWVUZEWkVjc1RVRkJVVVFzU1VGQlNTeGxRVU5hUlN4TFFVRlBSaXhKUVVGSkxGRkJRMWhITEU5QlFWTk9MRTlCUVU5UExHTkJRV1ZRTEU5QlFVOVJMRlZCUTNSRFF5eFBRVUZUU0N4SlFVTlVTU3hGUVVGSkxFVkJRMHBETEVWQlFVa3NSVUZIU2tNc2RVSkJRWGxDTEdsSVFVVXpRa01zVFVGQlRTeExRVVZFU0N4RlFVRkpReXhKUVVOTVdpeE5RVUZSUXl4UFFVRlBXU3gxUWtGQmRVSkdMRkZCUTNoRFVpeExRVUZMU0N4TlFVRk5aU3hWUVVGWFZpeFBRVUZQTEVkQlF6ZENSaXhMUVVGTFNDeE5RVUZOWlN4VlFVRlhWQ3hOUVVGTkxFbEJRM1pDU1N4UlFVRlRMRVZCUjJ4Q1RTeFBRVUZQUXl4UlFVRlZMRU5CUTJaV0xFbEJRVXRCTEVsQlEweEhMRTlCUVZGQkxFOUJRMUpNTEUxQlFVOUJMRTFCUTFCRExFdEJRVTFCSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZkSGx3WldRdWFuTWlmUT09IiwidmFyIGlkPTAscHg9TWF0aC5yYW5kb20oKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihvKXtyZXR1cm5cIlN5bWJvbChcIi5jb25jYXQodm9pZCAwPT09bz9cIlwiOm8sXCIpX1wiLCgrK2lkK3B4KS50b1N0cmluZygzNikpfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOTFhV1F1YW5NaVhTd2libUZ0WlhNaU9sc2lhV1FpTENKd2VDSXNJazFoZEdnaUxDSnlZVzVrYjIwaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2lhMlY1SWl3aVkyOXVZMkYwSWl3aWRXNWtaV1pwYm1Wa0lpd2lkRzlUZEhKcGJtY2lYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRWxCUVVsQkxFZEJRVXNzUlVGRFRFTXNSMEZCUzBNc1MwRkJTME1zVTBGRFpFTXNUMEZCVDBNc1VVRkJWU3hUUVVGVlF5eEhRVU42UWl4TlFVRlBMRlZCUVZWRExGbEJRV1ZETEVsQlFWSkdMRVZCUVc5Q0xFZEJRVXRCTEVWQlFVc3NVVUZCVTA0c1IwRkJTME1zU1VGQlNWRXNVMEZCVXlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYM1ZwWkM1cWN5SjkiLCJ2YXIgZ2xvYmFsPXJlcXVpcmUoXCIuL19nbG9iYWxcIiksbmF2aWdhdG9yPWdsb2JhbC5uYXZpZ2F0b3I7bW9kdWxlLmV4cG9ydHM9bmF2aWdhdG9yJiZuYXZpZ2F0b3IudXNlckFnZW50fHxcIlwiO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5MWMyVnlMV0ZuWlc1MExtcHpJbDBzSW01aGJXVnpJanBiSW1kc2IySmhiQ0lzSW5KbGNYVnBjbVVpTENKdVlYWnBaMkYwYjNJaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2lkWE5sY2tGblpXNTBJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hKUVVGSlFTeFBRVUZUUXl4UlFVRlJMR0ZCUTJwQ1F5eFZRVUZaUml4UFFVRlBSU3hWUVVWMlFrTXNUMEZCVDBNc1VVRkJWVVlzVjBGQllVRXNWVUZCVlVjc1YwRkJZU0lzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgzVnpaWEl0WVdkbGJuUXVhbk1pZlE9PSIsInZhciBpc09iamVjdD1yZXF1aXJlKFwiLi9faXMtb2JqZWN0XCIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKGUscil7aWYoIWlzT2JqZWN0KGUpfHxlLl90IT09cil0aHJvdyBUeXBlRXJyb3IoXCJJbmNvbXBhdGlibGUgcmVjZWl2ZXIsIFwiK3IrXCIgcmVxdWlyZWQhXCIpO3JldHVybiBlfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsOTJZV3hwWkdGMFpTMWpiMnhzWldOMGFXOXVMbXB6SWwwc0ltNWhiV1Z6SWpwYkltbHpUMkpxWldOMElpd2ljbVZ4ZFdseVpTSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0pwZENJc0lsUlpVRVVpTENKZmRDSXNJbFI1Y0dWRmNuSnZjaUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzU1VGQlNVRXNVMEZCVjBNc1VVRkJVU3huUWtGRGRrSkRMRTlCUVU5RExGRkJRVlVzVTBGQlZVTXNSVUZCU1VNc1IwRkROMElzU1VGQlMwd3NVMEZCVTBrc1NVRkJUMEVzUlVGQlIwVXNTMEZCVDBRc1JVRkJUU3hOUVVGTlJTeFZRVUZWTERCQ1FVRTBRa1lzUlVGQlR5eGpRVU40Uml4UFFVRlBSQ0lzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgzWmhiR2xrWVhSbExXTnZiR3hsWTNScGIyNHVhbk1pZlE9PSIsInZhciBnbG9iYWw9cmVxdWlyZShcIi4vX2dsb2JhbFwiKSxjb3JlPXJlcXVpcmUoXCIuL19jb3JlXCIpLExJQlJBUlk9cmVxdWlyZShcIi4vX2xpYnJhcnlcIiksd2tzRXh0PXJlcXVpcmUoXCIuL193a3MtZXh0XCIpLGRlZmluZVByb3BlcnR5PXJlcXVpcmUoXCIuL19vYmplY3QtZHBcIikuZjttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgcj1jb3JlLlN5bWJvbHx8KGNvcmUuU3ltYm9sPUxJQlJBUlk/e306Z2xvYmFsLlN5bWJvbHx8e30pO1wiX1wiPT1lLmNoYXJBdCgwKXx8ZSBpbiByfHxkZWZpbmVQcm9wZXJ0eShyLGUse3ZhbHVlOndrc0V4dC5mKGUpfSl9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5M2EzTXRaR1ZtYVc1bExtcHpJbDBzSW01aGJXVnpJanBiSW1kc2IySmhiQ0lzSW5KbGNYVnBjbVVpTENKamIzSmxJaXdpVEVsQ1VrRlNXU0lzSW5kcmMwVjRkQ0lzSW1SbFptbHVaVkJ5YjNCbGNuUjVJaXdpWmlJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaUxDSnVZVzFsSWl3aUpGTjViV0p2YkNJc0lsTjViV0p2YkNJc0ltTm9ZWEpCZENJc0luWmhiSFZsSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4SlFVRkpRU3hQUVVGVFF5eFJRVUZSTEdGQlEycENReXhMUVVGUFJDeFJRVUZSTEZkQlEyWkZMRkZCUVZWR0xGRkJRVkVzWTBGRGJFSkhMRTlCUVZOSUxGRkJRVkVzWTBGRGFrSkpMR1ZCUVdsQ1NpeFJRVUZSTEdkQ1FVRm5Ra3NzUlVGRE4wTkRMRTlCUVU5RExGRkJRVlVzVTBGQlZVTXNSMEZEZWtJc1NVRkJTVU1zUlVGQlZWSXNTMEZCUzFNc1UwRkJWMVFzUzBGQlMxTXNUMEZCVTFJc1VVRkJWU3hIUVVGTFNDeFBRVUZQVnl4UlFVRlZMRWxCUTNSRUxFdEJRV3hDUml4RlFVRkxSeXhQUVVGUExFbEJRV1ZJTEV0QlFWRkRMRWRCUVZWTUxHVkJRV1ZMTEVWQlFWTkVMRVZCUVUwc1EwRkJSVWtzVFVGQlQxUXNUMEZCVDBVc1JVRkJSVWNpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOTNhM010WkdWbWFXNWxMbXB6SW4wPSIsImV4cG9ydHMuZj1yZXF1aXJlKFwiLi9fd2tzXCIpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWw5M2EzTXRaWGgwTG1weklsMHNJbTVoYldWeklqcGJJbVY0Y0c5eWRITWlMQ0ptSWl3aWNtVnhkV2x5WlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVGQkxGRkJRVkZETEVWQlFVbERMRkZCUVZFaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTkzYTNNdFpYaDBMbXB6SW4wPSIsInZhciBzdG9yZT1yZXF1aXJlKFwiLi9fc2hhcmVkXCIpKFwid2tzXCIpLHVpZD1yZXF1aXJlKFwiLi9fdWlkXCIpLFN5bWJvbD1yZXF1aXJlKFwiLi9fZ2xvYmFsXCIpLlN5bWJvbCxVU0VfU1lNQk9MPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCwkZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihvKXtyZXR1cm4gc3RvcmVbb118fChzdG9yZVtvXT1VU0VfU1lNQk9MJiZTeW1ib2xbb118fChVU0VfU1lNQk9MP1N5bWJvbDp1aWQpKFwiU3ltYm9sLlwiK28pKX07JGV4cG9ydHMuc3RvcmU9c3RvcmU7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbDkzYTNNdWFuTWlYU3dpYm1GdFpYTWlPbHNpYzNSdmNtVWlMQ0p5WlhGMWFYSmxJaXdpZFdsa0lpd2lVM2x0WW05c0lpd2lWVk5GWDFOWlRVSlBUQ0lzSWlSbGVIQnZjblJ6SWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0ltNWhiV1VpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEVsQlFVbEJMRTFCUVZGRExGRkJRVkVzV1VGQlVrRXNRMEZCY1VJc1QwRkROMEpETEVsQlFVMUVMRkZCUVZFc1ZVRkRaRVVzVDBGQlUwWXNVVUZCVVN4aFFVRmhSU3hQUVVNNVFrTXNWMEZCT0VJc2JVSkJRVlpFTEU5QlJYQkNSU3hUUVVGWFF5eFBRVUZQUXl4UlFVRlZMRk5CUVZWRExFZEJRM2hETEU5QlFVOVNMRTFCUVUxUkxFdEJRVlZTTEUxQlFVMVJMRWRCUXpOQ1NpeFpRVUZqUkN4UFFVRlBTeXhMUVVGVlNpeFhRVUZoUkN4UFFVRlRSQ3hMUVVGTExGVkJRVmxOTEV0QlJ6RkZTQ3hUUVVGVFRDeE5RVUZSUVNJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYM2RyY3k1cWN5SjkiLCJ2YXIgY2xhc3NvZj1yZXF1aXJlKFwiLi9fY2xhc3NvZlwiKSxJVEVSQVRPUj1yZXF1aXJlKFwiLi9fd2tzXCIpKFwiaXRlcmF0b3JcIiksSXRlcmF0b3JzPXJlcXVpcmUoXCIuL19pdGVyYXRvcnNcIik7bW9kdWxlLmV4cG9ydHM9cmVxdWlyZShcIi4vX2NvcmVcIikuZ2V0SXRlcmF0b3JNZXRob2Q9ZnVuY3Rpb24ocil7aWYobnVsbCE9cilyZXR1cm4gcltJVEVSQVRPUl18fHJbXCJAQGl0ZXJhdG9yXCJdfHxJdGVyYXRvcnNbY2xhc3NvZihyKV19O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1OdmNtVXVaMlYwTFdsMFpYSmhkRzl5TFcxbGRHaHZaQzVxY3lKZExDSnVZVzFsY3lJNld5SmpiR0Z6YzI5bUlpd2ljbVZ4ZFdseVpTSXNJa2xVUlZKQlZFOVNJaXdpU1hSbGNtRjBiM0p6SWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0ltZGxkRWwwWlhKaGRHOXlUV1YwYUc5a0lpd2lhWFFpTENKMWJtUmxabWx1WldRaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc1kwRkRiRUpETEZOQlFWZEVMRkZCUVZFc1UwRkJVa0VzUTBGQmEwSXNXVUZETjBKRkxGVkJRVmxHTEZGQlFWRXNaMEpCUTNoQ1J5eFBRVUZQUXl4UlFVRlZTaXhSUVVGUkxGZEJRVmRMTEd0Q1FVRnZRaXhUUVVGVlF5eEhRVU5vUlN4SFFVRlZReXhOUVVGT1JDeEZRVUZwUWl4UFFVRlBRU3hGUVVGSFRDeFhRVU14UWtzc1JVRkJSeXhsUVVOSVNpeFZRVUZWU0N4UlFVRlJUeUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlkyOXlaUzVuWlhRdGFYUmxjbUYwYjNJdGJXVjBhRzlrTG1wekluMD0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLCRyZT1yZXF1aXJlKFwiLi9fcmVwbGFjZXJcIikoL1tcXFxcXiQqKz8uKCl8W1xcXXt9XS9nLFwiXFxcXCQmXCIpOyRleHBvcnQoJGV4cG9ydC5TLFwiUmVnRXhwXCIse2VzY2FwZTpmdW5jdGlvbiBlc2NhcGUoZSl7cmV0dXJuICRyZShlKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltTnZjbVV1Y21WblpYaHdMbVZ6WTJGd1pTNXFjeUpkTENKdVlXMWxjeUk2V3lJa1pYaHdiM0owSWl3aWNtVnhkV2x5WlNJc0lpUnlaU0lzSWxNaUxDSmxjMk5oY0dVaUxDSnBkQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRMEVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVOc1FrTXNTVUZCVFVRc1VVRkJVU3hqUVVGU1FTeERRVUYxUWl4elFrRkJkVUlzVVVGRmVFUkVMRkZCUVZGQkxGRkJRVkZITEVWQlFVY3NVMEZCVlN4RFFVRkZReXhQUVVGUkxGTkJRVk5CTEU5QlFVOURMRWRCUVUwc1QwRkJUMGdzU1VGQlNVY2lMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJOdmNtVXVjbVZuWlhod0xtVnpZMkZ3WlM1cWN5SjkiLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpOyRleHBvcnQoJGV4cG9ydC5QLFwiQXJyYXlcIix7Y29weVdpdGhpbjpyZXF1aXJlKFwiLi9fYXJyYXktY29weS13aXRoaW5cIil9KSxyZXF1aXJlKFwiLi9fYWRkLXRvLXVuc2NvcGFibGVzXCIpKFwiY29weVdpdGhpblwiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTVoY25KaGVTNWpiM0I1TFhkcGRHaHBiaTVxY3lKZExDSnVZVzFsY3lJNld5SWtaWGh3YjNKMElpd2ljbVZ4ZFdseVpTSXNJbEFpTENKamIzQjVWMmwwYUdsdUlsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHRkJSWFJDUkN4UlFVRlJRU3hSUVVGUlJTeEZRVUZITEZGQlFWTXNRMEZCUlVNc1YwRkJXVVlzVVVGQlVTd3dRa0ZGYkVSQkxGRkJRVkVzZDBKQlFWSkJMRU5CUVdsRElpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdVlYSnlZWGt1WTI5d2VTMTNhWFJvYVc0dWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKSwkZXZlcnk9cmVxdWlyZShcIi4vX2FycmF5LW1ldGhvZHNcIikoNCk7JGV4cG9ydCgkZXhwb3J0LlArJGV4cG9ydC5GKiFyZXF1aXJlKFwiLi9fc3RyaWN0LW1ldGhvZFwiKShbXS5ldmVyeSwhMCksXCJBcnJheVwiLHtldmVyeTpmdW5jdGlvbiBldmVyeShlKXtyZXR1cm4gJGV2ZXJ5KHRoaXMsZSxhcmd1bWVudHNbMV0pfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNWhjbkpoZVM1bGRtVnllUzVxY3lKZExDSnVZVzFsY3lJNld5SWtaWGh3YjNKMElpd2ljbVZ4ZFdseVpTSXNJaVJsZG1WeWVTSXNJbEFpTENKR0lpd2laWFpsY25raUxDSmpZV3hzWW1GamEyWnVJaXdpZEdocGN5SXNJbUZ5WjNWdFpXNTBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRFFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHRkJRMnhDUXl4UFFVRlRSQ3hSUVVGUkxHMUNRVUZTUVN4RFFVRTBRaXhIUVVWNlEwUXNVVUZCVVVFc1VVRkJVVWNzUlVGQlNVZ3NVVUZCVVVrc1IwRkJTMGdzVVVGQlVTeHRRa0ZCVWtFc1EwRkJORUlzUjBGQlIwa3NUMEZCVHl4SFFVRlBMRkZCUVZNc1EwRkZja1pCTEUxQlFVOHNVMEZCVTBFc1RVRkJUVU1zUjBGRGNFSXNUMEZCVDBvc1QwRkJUMHNzUzBGQlRVUXNSVUZCV1VVc1ZVRkJWU0lzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbUZ5Y21GNUxtVjJaWEo1TG1wekluMD0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpOyRleHBvcnQoJGV4cG9ydC5QLFwiQXJyYXlcIix7ZmlsbDpyZXF1aXJlKFwiLi9fYXJyYXktZmlsbFwiKX0pLHJlcXVpcmUoXCIuL19hZGQtdG8tdW5zY29wYWJsZXNcIikoXCJmaWxsXCIpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNWhjbkpoZVM1bWFXeHNMbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2lVQ0lzSW1acGJHd2lYU3dpYldGd2NHbHVaM01pT2lKQlFVTkJMRWxCUVVsQkxGRkJRVlZETEZGQlFWRXNZVUZGZEVKRUxGRkJRVkZCTEZGQlFWRkZMRVZCUVVjc1VVRkJVeXhEUVVGRlF5eExRVUZOUml4UlFVRlJMRzFDUVVVMVEwRXNVVUZCVVN4M1FrRkJVa0VzUTBGQmFVTWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNWhjbkpoZVM1bWFXeHNMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciAkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIiksJGZpbHRlcj1yZXF1aXJlKFwiLi9fYXJyYXktbWV0aG9kc1wiKSgyKTskZXhwb3J0KCRleHBvcnQuUCskZXhwb3J0LkYqIXJlcXVpcmUoXCIuL19zdHJpY3QtbWV0aG9kXCIpKFtdLmZpbHRlciwhMCksXCJBcnJheVwiLHtmaWx0ZXI6ZnVuY3Rpb24gZmlsdGVyKHIpe3JldHVybiAkZmlsdGVyKHRoaXMscixhcmd1bWVudHNbMV0pfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNWhjbkpoZVM1bWFXeDBaWEl1YW5NaVhTd2libUZ0WlhNaU9sc2lKR1Y0Y0c5eWRDSXNJbkpsY1hWcGNtVWlMQ0lrWm1sc2RHVnlJaXdpVUNJc0lrWWlMQ0ptYVd4MFpYSWlMQ0pqWVd4c1ltRmphMlp1SWl3aWRHaHBjeUlzSW1GeVozVnRaVzUwY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkRRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR0ZCUTJ4Q1F5eFJRVUZWUkN4UlFVRlJMRzFDUVVGU1FTeERRVUUwUWl4SFFVVXhRMFFzVVVGQlVVRXNVVUZCVVVjc1JVRkJTVWdzVVVGQlVVa3NSMEZCUzBnc1VVRkJVU3h0UWtGQlVrRXNRMEZCTkVJc1IwRkJSMGtzVVVGQlVTeEhRVUZQTEZGQlFWTXNRMEZGZEVaQkxFOUJRVkVzVTBGQlUwRXNUMEZCVDBNc1IwRkRkRUlzVDBGQlQwb3NVVUZCVVVzc1MwRkJUVVFzUlVGQldVVXNWVUZCVlNJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG1GeWNtRjVMbVpwYkhSbGNpNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKSwkZmluZD1yZXF1aXJlKFwiLi9fYXJyYXktbWV0aG9kc1wiKSg2KSxLRVk9XCJmaW5kSW5kZXhcIixmb3JjZWQ9ITA7S0VZIGluW10mJkFycmF5KDEpW0tFWV0oZnVuY3Rpb24oKXtmb3JjZWQ9ITF9KSwkZXhwb3J0KCRleHBvcnQuUCskZXhwb3J0LkYqZm9yY2VkLFwiQXJyYXlcIix7ZmluZEluZGV4OmZ1bmN0aW9uIGZpbmRJbmRleChyKXtyZXR1cm4gJGZpbmQodGhpcyxyLGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwKX19KSxyZXF1aXJlKFwiLi9fYWRkLXRvLXVuc2NvcGFibGVzXCIpKEtFWSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1aGNuSmhlUzVtYVc1a0xXbHVaR1Y0TG1weklsMHNJbTVoYldWeklqcGJJaVJsZUhCdmNuUWlMQ0p5WlhGMWFYSmxJaXdpSkdacGJtUWlMQ0pMUlZraUxDSm1iM0pqWldRaUxDSkJjbkpoZVNJc0lsQWlMQ0pHSWl3aVptbHVaRWx1WkdWNElpd2lZMkZzYkdKaFkydG1iaUlzSW5Sb2FYTWlMQ0poY21kMWJXVnVkSE1pTENKc1pXNW5kR2dpTENKMWJtUmxabWx1WldRaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJSVUVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVOc1FrTXNUVUZCVVVRc1VVRkJVU3h0UWtGQlVrRXNRMEZCTkVJc1IwRkRjRU5GTEVsQlFVMHNXVUZEVGtNc1VVRkJVeXhGUVVWVVJDeE5RVUZQTEVsQlFVbEZMRTFCUVUwc1IwRkJSMFlzUzBGQlN5eFhRVUZqUXl4UlFVRlRMRWxCUTNCRVNpeFJRVUZSUVN4UlFVRlJUU3hGUVVGSlRpeFJRVUZSVHl4RlFVRkpTQ3hQUVVGUkxGRkJRVk1zUTBGREwwTkpMRlZCUVZjc1UwRkJVMEVzVlVGQlZVTXNSMEZETlVJc1QwRkJUMUFzVFVGQlRWRXNTMEZCVFVRc1JVRkJXVVVzVlVGQlZVTXNUMEZCVXl4RlFVRkpSQ3hWUVVGVkxGRkJRVXRGTEUxQlIzcEZXaXhSUVVGUkxIZENRVUZTUVN4RFFVRnBRMFVpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTVoY25KaGVTNW1hVzVrTFdsdVpHVjRMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciAkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIiksJGZpbmQ9cmVxdWlyZShcIi4vX2FycmF5LW1ldGhvZHNcIikoNSksS0VZPVwiZmluZFwiLGZvcmNlZD0hMDtLRVkgaW5bXSYmQXJyYXkoMSlbS0VZXShmdW5jdGlvbigpe2ZvcmNlZD0hMX0pLCRleHBvcnQoJGV4cG9ydC5QKyRleHBvcnQuRipmb3JjZWQsXCJBcnJheVwiLHtmaW5kOmZ1bmN0aW9uIGZpbmQocil7cmV0dXJuICRmaW5kKHRoaXMscixhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCl9fSkscmVxdWlyZShcIi4vX2FkZC10by11bnNjb3BhYmxlc1wiKShLRVkpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNWhjbkpoZVM1bWFXNWtMbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2lKR1pwYm1RaUxDSkxSVmtpTENKbWIzSmpaV1FpTENKQmNuSmhlU0lzSWxBaUxDSkdJaXdpWm1sdVpDSXNJbU5oYkd4aVlXTnJabTRpTENKMGFHbHpJaXdpWVhKbmRXMWxiblJ6SWl3aWJHVnVaM1JvSWl3aWRXNWtaV1pwYm1Wa0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVVZCTEVsQlFVbEJMRkZCUVZWRExGRkJRVkVzWVVGRGJFSkRMRTFCUVZGRUxGRkJRVkVzYlVKQlFWSkJMRU5CUVRSQ0xFZEJRM0JEUlN4SlFVRk5MRTlCUTA1RExGRkJRVk1zUlVGRlZFUXNUVUZCVHl4SlFVRkpSU3hOUVVGTkxFZEJRVWRHTEV0QlFVc3NWMEZCWTBNc1VVRkJVeXhKUVVOd1JFb3NVVUZCVVVFc1VVRkJVVTBzUlVGQlNVNHNVVUZCVVU4c1JVRkJTVWdzVDBGQlVTeFJRVUZUTEVOQlF5OURTU3hMUVVGTkxGTkJRVk5CTEV0QlFVdERMRWRCUTJ4Q0xFOUJRVTlRTEUxQlFVMVJMRXRCUVUxRUxFVkJRVmxGTEZWQlFWVkRMRTlCUVZNc1JVRkJTVVFzVlVGQlZTeFJRVUZMUlN4TlFVZDZSVm9zVVVGQlVTeDNRa0ZCVWtFc1EwRkJhVU5GSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1WVhKeVlYa3VabWx1WkM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLCRmb3JFYWNoPXJlcXVpcmUoXCIuL19hcnJheS1tZXRob2RzXCIpKDApLFNUUklDVD1yZXF1aXJlKFwiLi9fc3RyaWN0LW1ldGhvZFwiKShbXS5mb3JFYWNoLCEwKTskZXhwb3J0KCRleHBvcnQuUCskZXhwb3J0LkYqIVNUUklDVCxcIkFycmF5XCIse2ZvckVhY2g6ZnVuY3Rpb24gZm9yRWFjaChyKXtyZXR1cm4gJGZvckVhY2godGhpcyxyLGFyZ3VtZW50c1sxXSl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1aGNuSmhlUzVtYjNJdFpXRmphQzVxY3lKZExDSnVZVzFsY3lJNld5SWtaWGh3YjNKMElpd2ljbVZ4ZFdseVpTSXNJaVJtYjNKRllXTm9JaXdpVTFSU1NVTlVJaXdpWm05eVJXRmphQ0lzSWxBaUxDSkdJaXdpWTJGc2JHSmhZMnRtYmlJc0luUm9hWE1pTENKaGNtZDFiV1Z1ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJRMEVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVOc1FrTXNVMEZCVjBRc1VVRkJVU3h0UWtGQlVrRXNRMEZCTkVJc1IwRkRka05GTEU5QlFWTkdMRkZCUVZFc2JVSkJRVkpCTEVOQlFUUkNMRWRCUVVkSExGTkJRVk1zUjBGRmNrUktMRkZCUVZGQkxGRkJRVkZMTEVWQlFVbE1MRkZCUVZGTkxFZEJRVXRJTEU5QlFWRXNVVUZCVXl4RFFVVm9SRU1zVVVGQlV5eFRRVUZUUVN4UlFVRlJSeXhIUVVONFFpeFBRVUZQVEN4VFFVRlRUU3hMUVVGTlJDeEZRVUZaUlN4VlFVRlZJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVZWEp5WVhrdVptOXlMV1ZoWTJndWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIGN0eD1yZXF1aXJlKFwiLi9fY3R4XCIpLCRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKSx0b09iamVjdD1yZXF1aXJlKFwiLi9fdG8tb2JqZWN0XCIpLGNhbGw9cmVxdWlyZShcIi4vX2l0ZXItY2FsbFwiKSxpc0FycmF5SXRlcj1yZXF1aXJlKFwiLi9faXMtYXJyYXktaXRlclwiKSx0b0xlbmd0aD1yZXF1aXJlKFwiLi9fdG8tbGVuZ3RoXCIpLGNyZWF0ZVByb3BlcnR5PXJlcXVpcmUoXCIuL19jcmVhdGUtcHJvcGVydHlcIiksZ2V0SXRlckZuPXJlcXVpcmUoXCIuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZFwiKTskZXhwb3J0KCRleHBvcnQuUyskZXhwb3J0LkYqIXJlcXVpcmUoXCIuL19pdGVyLWRldGVjdFwiKShmdW5jdGlvbihlKXtBcnJheS5mcm9tKGUpfSksXCJBcnJheVwiLHtmcm9tOmZ1bmN0aW9uIGZyb20oZSl7dmFyIHIsdCxvLGksYT10b09iamVjdChlKSxjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXM/dGhpczpBcnJheSxuPWFyZ3VtZW50cy5sZW5ndGgsbD1uPjE/YXJndW1lbnRzWzFdOnZvaWQgMCx1PXZvaWQgMCE9PWwseT0wLHA9Z2V0SXRlckZuKGEpO2lmKHUmJihsPWN0eChsLG4+Mj9hcmd1bWVudHNbMl06dm9pZCAwLDIpKSxudWxsPT1wfHxjPT1BcnJheSYmaXNBcnJheUl0ZXIocCkpZm9yKHQ9bmV3IGMocj10b0xlbmd0aChhLmxlbmd0aCkpO3I+eTt5KyspY3JlYXRlUHJvcGVydHkodCx5LHU/bChhW3ldLHkpOmFbeV0pO2Vsc2UgZm9yKGk9cC5jYWxsKGEpLHQ9bmV3IGM7IShvPWkubmV4dCgpKS5kb25lO3krKyljcmVhdGVQcm9wZXJ0eSh0LHksdT9jYWxsKGksbCxbby52YWx1ZSx5XSwhMCk6by52YWx1ZSk7cmV0dXJuIHQubGVuZ3RoPXksdH19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTVoY25KaGVTNW1jbTl0TG1weklsMHNJbTVoYldWeklqcGJJbU4wZUNJc0luSmxjWFZwY21VaUxDSWtaWGh3YjNKMElpd2lkRzlQWW1wbFkzUWlMQ0pqWVd4c0lpd2lhWE5CY25KaGVVbDBaWElpTENKMGIweGxibWQwYUNJc0ltTnlaV0YwWlZCeWIzQmxjblI1SWl3aVoyVjBTWFJsY2tadUlpd2lVeUlzSWtZaUxDSnBkR1Z5SWl3aVFYSnlZWGtpTENKbWNtOXRJaXdpWVhKeVlYbE1hV3RsSWl3aWJHVnVaM1JvSWl3aWNtVnpkV3gwSWl3aWMzUmxjQ0lzSW1sMFpYSmhkRzl5SWl3aVR5SXNJa01pTENKMGFHbHpJaXdpWVV4bGJpSXNJbUZ5WjNWdFpXNTBjeUlzSW0xaGNHWnVJaXdpZFc1a1pXWnBibVZrSWl3aWJXRndjR2x1WnlJc0ltbHVaR1Y0SWl3aWFYUmxja1p1SWl3aWJtVjRkQ0lzSW1SdmJtVWlMQ0oyWVd4MVpTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZEUVN4SlFVRkpRU3hKUVVGTlF5eFJRVUZSTEZWQlEyUkRMRkZCUVZWRUxGRkJRVkVzWVVGRGJFSkZMRk5CUVZkR0xGRkJRVkVzWjBKQlEyNUNSeXhMUVVGUFNDeFJRVUZSTEdkQ1FVTm1TU3haUVVGalNpeFJRVUZSTEc5Q1FVTjBRa3NzVTBGQlYwd3NVVUZCVVN4blFrRkRia0pOTEdWQlFXbENUaXhSUVVGUkxITkNRVU42UWs4c1ZVRkJXVkFzVVVGQlVTdzRRa0ZGZUVKRExGRkJRVkZCTEZGQlFWRlBMRVZCUVVsUUxGRkJRVkZSTEVkQlFVdFVMRkZCUVZFc2FVSkJRVkpCTEVOQlFUQkNMRk5CUVZWVkxFZEJRVkZETEUxQlFVMURMRXRCUVV0R0xFdEJRVmNzVVVGQlV5eERRVVV4UjBVc1MwRkJUU3hUUVVGVFFTeExRVUZMUXl4SFFVTnNRaXhKUVU5SlF5eEZRVUZSUXl4RlFVRlJReXhGUVVGTlF5eEZRVkIwUWtNc1JVRkJTV2hDTEZOQlFWTlhMRWRCUTJKTkxFVkJRVzFDTEcxQ1FVRlNReXhMUVVGeFFrRXNTMEZCVDFRc1RVRkRka05WTEVWQlFVOURMRlZCUVZWU0xFOUJRMnBDVXl4RlFVRlJSaXhGUVVGUExFVkJRVWxETEZWQlFWVXNVVUZCUzBVc1JVRkRiRU5ETEU5QlFXOUNSQ3hKUVVGV1JDeEZRVU5XUnl4RlFVRlJMRVZCUTFKRExFVkJRVk53UWl4VlFVRlZWeXhIUVVsMlFpeEhRVVpKVHl4SlFVRlRSaXhGUVVGUmVFSXNTVUZCU1hkQ0xFVkJRVTlHTEVWQlFVOHNSVUZCU1VNc1ZVRkJWU3hSUVVGTFJTeEZRVUZYTEVsQlJYWkVRU3hOUVVGV1J5eEhRVUY1UWxJc1IwRkJTMUlzVDBGQlUxQXNXVUZCV1hWQ0xFZEJUWEpFTEVsQlFVdGFMRVZCUVZNc1NVRkJTVWtzUlVGRWJFSk1MRVZCUVZOVUxGTkJRVk5oTEVWQlFVVktMRk5CUTFOQkxFVkJRVk5aTEVWQlFVOUJMRWxCUXpORGNFSXNaVUZCWlZNc1JVRkJVVmNzUlVGQlQwUXNSVUZCVlVZc1JVRkJUVXdzUlVGQlJWRXNSMEZCVVVFc1IwRkJVMUlzUlVGQlJWRXNVMEZPY2tVc1NVRkJTMVFzUlVGQlYxVXNSVUZCVDNoQ0xFdEJRVXRsTEVkQlFVbElMRVZCUVZNc1NVRkJTVWtzU1VGQlQwZ3NSVUZCVDBNc1JVRkJVMWNzVVVGQlVVTXNTMEZCVFVnc1NVRkRhRVp3UWl4bFFVRmxVeXhGUVVGUlZ5eEZRVUZQUkN4RlFVRlZkRUlzUzBGQlMyTXNSVUZCVlUwc1JVRkJUeXhEUVVGRFVDeEZRVUZMWXl4TlFVRlBTaXhKUVVGUkxFZEJRVkZXTEVWQlFVdGpMRTlCVTNCSExFOUJSRUZtTEVWQlFVOUVMRTlCUVZOWkxFVkJRMVJZSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1WVhKeVlYa3Vabkp2YlM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLCRpbmRleE9mPXJlcXVpcmUoXCIuL19hcnJheS1pbmNsdWRlc1wiKSghMSksJG5hdGl2ZT1bXS5pbmRleE9mLE5FR0FUSVZFX1pFUk89ISEkbmF0aXZlJiYxL1sxXS5pbmRleE9mKDEsLTApPDA7JGV4cG9ydCgkZXhwb3J0LlArJGV4cG9ydC5GKihORUdBVElWRV9aRVJPfHwhcmVxdWlyZShcIi4vX3N0cmljdC1tZXRob2RcIikoJG5hdGl2ZSkpLFwiQXJyYXlcIix7aW5kZXhPZjpmdW5jdGlvbiBpbmRleE9mKGUpe3JldHVybiBORUdBVElWRV9aRVJPPyRuYXRpdmUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHwwOiRpbmRleE9mKHRoaXMsZSxhcmd1bWVudHNbMV0pfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNWhjbkpoZVM1cGJtUmxlQzF2Wmk1cWN5SmRMQ0p1WVcxbGN5STZXeUlrWlhod2IzSjBJaXdpY21WeGRXbHlaU0lzSWlScGJtUmxlRTltSWl3aUpHNWhkR2wyWlNJc0ltbHVaR1Y0VDJZaUxDSk9SVWRCVkVsV1JWOWFSVkpQSWl3aVVDSXNJa1lpTENKelpXRnlZMmhGYkdWdFpXNTBJaXdpWVhCd2JIa2lMQ0owYUdseklpd2lZWEpuZFcxbGJuUnpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVOQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc1lVRkRiRUpETEZOQlFWZEVMRkZCUVZFc2IwSkJRVkpCTEVWQlFUWkNMRWRCUTNoRFJTeFJRVUZWTEVkQlFVZERMRkZCUTJKRExHZENRVUZyUWtZc1UwRkJWeXhGUVVGSkxFTkJRVU1zUjBGQlIwTXNVVUZCVVN4SFFVRkpMRWRCUVVzc1JVRkZNVVJLTEZGQlFWRkJMRkZCUVZGTkxFVkJRVWxPTEZGQlFWRlBMRWRCUVV0R0xHZENRVUZyUWtvc1VVRkJVU3h0UWtGQlVrRXNRMEZCTkVKRkxGVkJRVmNzVVVGQlV5eERRVVZxUjBNc1VVRkJVeXhUUVVGVFFTeFJRVUZSU1N4SFFVTjRRaXhQUVVGUFNDeGpRVVZJUml4UlFVRlJUU3hOUVVGTlF5eExRVUZOUXl4WlFVRmpMRVZCUTJ4RFZDeFRRVUZUVVN4TFFVRk5SaXhGUVVGbFJ5eFZRVUZWSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1WVhKeVlYa3VhVzVrWlhndGIyWXVhbk1pZlE9PSIsInZhciAkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIik7JGV4cG9ydCgkZXhwb3J0LlMsXCJBcnJheVwiLHtpc0FycmF5OnJlcXVpcmUoXCIuL19pcy1hcnJheVwiKX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNWhjbkpoZVM1cGN5MWhjbkpoZVM1cWN5SmRMQ0p1WVcxbGN5STZXeUlrWlhod2IzSjBJaXdpY21WeGRXbHlaU0lzSWxNaUxDSnBjMEZ5Y21GNUlsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHRkJSWFJDUkN4UlFVRlJRU3hSUVVGUlJTeEZRVUZITEZGQlFWTXNRMEZCUlVNc1VVRkJVMFlzVVVGQlVTSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtRnljbUY1TG1sekxXRnljbUY1TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgYWRkVG9VbnNjb3BhYmxlcz1yZXF1aXJlKFwiLi9fYWRkLXRvLXVuc2NvcGFibGVzXCIpLHN0ZXA9cmVxdWlyZShcIi4vX2l0ZXItc3RlcFwiKSxJdGVyYXRvcnM9cmVxdWlyZShcIi4vX2l0ZXJhdG9yc1wiKSx0b0lPYmplY3Q9cmVxdWlyZShcIi4vX3RvLWlvYmplY3RcIik7bW9kdWxlLmV4cG9ydHM9cmVxdWlyZShcIi4vX2l0ZXItZGVmaW5lXCIpKEFycmF5LFwiQXJyYXlcIixmdW5jdGlvbihlLHQpe3RoaXMuX3Q9dG9JT2JqZWN0KGUpLHRoaXMuX2k9MCx0aGlzLl9rPXR9LGZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5fdCx0PXRoaXMuX2sscz10aGlzLl9pKys7cmV0dXJuIWV8fHM+PWUubGVuZ3RoPyh0aGlzLl90PXZvaWQgMCxzdGVwKDEpKTpzdGVwKDAsXCJrZXlzXCI9PXQ/czpcInZhbHVlc1wiPT10P2Vbc106W3MsZVtzXV0pfSxcInZhbHVlc1wiKSxJdGVyYXRvcnMuQXJndW1lbnRzPUl0ZXJhdG9ycy5BcnJheSxhZGRUb1Vuc2NvcGFibGVzKFwia2V5c1wiKSxhZGRUb1Vuc2NvcGFibGVzKFwidmFsdWVzXCIpLGFkZFRvVW5zY29wYWJsZXMoXCJlbnRyaWVzXCIpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNWhjbkpoZVM1cGRHVnlZWFJ2Y2k1cWN5SmRMQ0p1WVcxbGN5STZXeUpoWkdSVWIxVnVjMk52Y0dGaWJHVnpJaXdpY21WeGRXbHlaU0lzSW5OMFpYQWlMQ0pKZEdWeVlYUnZjbk1pTENKMGIwbFBZbXBsWTNRaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2lRWEp5WVhraUxDSnBkR1Z5WVhSbFpDSXNJbXRwYm1RaUxDSjBhR2x6SWl3aVgzUWlMQ0pmYVNJc0lsOXJJaXdpVHlJc0ltbHVaR1Y0SWl3aWJHVnVaM1JvSWl3aWRXNWtaV1pwYm1Wa0lpd2lRWEpuZFcxbGJuUnpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVOQkxFbEJRVWxCTEdsQ1FVRnRRa01zVVVGQlVTeDVRa0ZETTBKRExFdEJRVTlFTEZGQlFWRXNaMEpCUTJaRkxGVkJRVmxHTEZGQlFWRXNaMEpCUTNCQ1J5eFZRVUZaU0N4UlFVRlJMR2xDUVUxNFFra3NUMEZCVDBNc1VVRkJWVXdzVVVGQlVTeHBRa0ZCVWtFc1EwRkJNRUpOTEUxQlFVOHNVVUZCVXl4VFFVRlZReXhGUVVGVlF5eEhRVU0zUlVNc1MwRkJTME1zUjBGQlMxQXNWVUZCVlVrc1IwRkRjRUpGTEV0QlFVdEZMRWRCUVVzc1JVRkRWa1lzUzBGQlMwY3NSMEZCUzBvc1IwRkZWQ3hYUVVORUxFbEJRVWxMTEVWQlFVbEtMRXRCUVV0RExFZEJRMVJHTEVWQlFVOURMRXRCUVV0SExFZEJRMXBGTEVWQlFWRk1MRXRCUVV0RkxFdEJRMnBDTEU5QlFVdEZMRWRCUVV0RExFZEJRVk5FTEVWQlFVVkZMRkZCUTI1Q1RpeExRVUZMUXl4UlFVRkxUU3hGUVVOSVppeExRVUZMTEVsQlJXRkJMRXRCUVVzc1JVRkJjRUlzVVVGQlVrOHNSVUZCSzBKTkxFVkJRM1pDTEZWQlFWSk9MRVZCUVdsRFN5eEZRVUZGUXl4SFFVTjRRaXhEUVVGRFFTeEZRVUZQUkN4RlFVRkZReXhOUVVONFFpeFZRVWRJV2l4VlFVRlZaU3hWUVVGWlppeFZRVUZWU1N4TlFVVm9RMUFzYVVKQlFXbENMRkZCUTJwQ1FTeHBRa0ZCYVVJc1ZVRkRha0pCTEdsQ1FVRnBRaUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbUZ5Y21GNUxtbDBaWEpoZEc5eUxtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKSx0b0lPYmplY3Q9cmVxdWlyZShcIi4vX3RvLWlvYmplY3RcIiksYXJyYXlKb2luPVtdLmpvaW47JGV4cG9ydCgkZXhwb3J0LlArJGV4cG9ydC5GKihyZXF1aXJlKFwiLi9faW9iamVjdFwiKSE9T2JqZWN0fHwhcmVxdWlyZShcIi4vX3N0cmljdC1tZXRob2RcIikoYXJyYXlKb2luKSksXCJBcnJheVwiLHtqb2luOmZ1bmN0aW9uIGpvaW4ocil7cmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRvSU9iamVjdCh0aGlzKSx2b2lkIDA9PT1yP1wiLFwiOnIpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNWhjbkpoZVM1cWIybHVMbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2lkRzlKVDJKcVpXTjBJaXdpWVhKeVlYbEtiMmx1SWl3aWFtOXBiaUlzSWxBaUxDSkdJaXdpVDJKcVpXTjBJaXdpYzJWd1lYSmhkRzl5SWl3aVkyRnNiQ0lzSW5Sb2FYTWlMQ0oxYm1SbFptbHVaV1FpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlJVRXNTVUZCU1VFc1VVRkJWVU1zVVVGQlVTeGhRVU5zUWtNc1ZVRkJXVVFzVVVGQlVTeHBRa0ZEY0VKRkxGVkJRVmtzUjBGQlIwTXNTMEZIYmtKS0xGRkJRVkZCTEZGQlFWRkxMRVZCUVVsTUxGRkJRVkZOTEVkQlFVdE1MRkZCUVZFc1pVRkJhVUpOTEZOQlFWZE9MRkZCUVZFc2JVSkJRVkpCTEVOQlFUUkNSU3haUVVGaExGRkJRVk1zUTBGRGNraERMRXRCUVUwc1UwRkJVMEVzUzBGQlMwa3NSMEZEYkVJc1QwRkJUMHdzVlVGQlZVMHNTMEZCUzFBc1ZVRkJWVkVzVjBGQmNVSkRMRWxCUVdSSUxFVkJRVEJDTEVsQlFVMUJJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVZWEp5WVhrdWFtOXBiaTVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciAkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIiksdG9JT2JqZWN0PXJlcXVpcmUoXCIuL190by1pb2JqZWN0XCIpLHRvSW50ZWdlcj1yZXF1aXJlKFwiLi9fdG8taW50ZWdlclwiKSx0b0xlbmd0aD1yZXF1aXJlKFwiLi9fdG8tbGVuZ3RoXCIpLCRuYXRpdmU9W10ubGFzdEluZGV4T2YsTkVHQVRJVkVfWkVSTz0hISRuYXRpdmUmJjEvWzFdLmxhc3RJbmRleE9mKDEsLTApPDA7JGV4cG9ydCgkZXhwb3J0LlArJGV4cG9ydC5GKihORUdBVElWRV9aRVJPfHwhcmVxdWlyZShcIi4vX3N0cmljdC1tZXRob2RcIikoJG5hdGl2ZSkpLFwiQXJyYXlcIix7bGFzdEluZGV4T2Y6ZnVuY3Rpb24gbGFzdEluZGV4T2YodCl7aWYoTkVHQVRJVkVfWkVSTylyZXR1cm4gJG5hdGl2ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fDA7dmFyIGU9dG9JT2JqZWN0KHRoaXMpLHI9dG9MZW5ndGgoZS5sZW5ndGgpLG49ci0xO2Zvcihhcmd1bWVudHMubGVuZ3RoPjEmJihuPU1hdGgubWluKG4sdG9JbnRlZ2VyKGFyZ3VtZW50c1sxXSkpKSxuPDAmJihuPXIrbik7bj49MDtuLS0paWYobiBpbiBlJiZlW25dPT09dClyZXR1cm4gbnx8MDtyZXR1cm4tMX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTVoY25KaGVTNXNZWE4wTFdsdVpHVjRMVzltTG1weklsMHNJbTVoYldWeklqcGJJaVJsZUhCdmNuUWlMQ0p5WlhGMWFYSmxJaXdpZEc5SlQySnFaV04wSWl3aWRHOUpiblJsWjJWeUlpd2lkRzlNWlc1bmRHZ2lMQ0lrYm1GMGFYWmxJaXdpYkdGemRFbHVaR1Y0VDJZaUxDSk9SVWRCVkVsV1JWOWFSVkpQSWl3aVVDSXNJa1lpTENKelpXRnlZMmhGYkdWdFpXNTBJaXdpWVhCd2JIa2lMQ0owYUdseklpd2lZWEpuZFcxbGJuUnpJaXdpVHlJc0lteGxibWQwYUNJc0ltbHVaR1Y0SWl3aVRXRjBhQ0lzSW0xcGJpSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZEUVN4SlFVRkpRU3hSUVVGVlF5eFJRVUZSTEdGQlEyeENReXhWUVVGWlJDeFJRVUZSTEdsQ1FVTndRa1VzVlVGQldVWXNVVUZCVVN4cFFrRkRjRUpITEZOQlFWZElMRkZCUVZFc1owSkJRMjVDU1N4UlFVRlZMRWRCUVVkRExGbEJRMkpETEdkQ1FVRnJRa1lzVTBGQlZ5eEZRVUZKTEVOQlFVTXNSMEZCUjBNc1dVRkJXU3hIUVVGSkxFZEJRVXNzUlVGRk9VUk9MRkZCUVZGQkxGRkJRVkZSTEVWQlFVbFNMRkZCUVZGVExFZEJRVXRHTEdkQ1FVRnJRazRzVVVGQlVTeHRRa0ZCVWtFc1EwRkJORUpKTEZWQlFWY3NVVUZCVXl4RFFVVnFSME1zV1VGQllTeFRRVUZUUVN4WlFVRlpTU3hIUVVWb1F5eEhRVUZKU0N4alFVRmxMRTlCUVU5R0xGRkJRVkZOTEUxQlFVMURMRXRCUVUxRExGbEJRV01zUlVGRE5VUXNTVUZCU1VNc1JVRkJTVm9zVlVGQlZWVXNUVUZEWkVjc1JVRkJVMWdzVTBGQlUxVXNSVUZCUlVNc1VVRkRjRUpETEVWQlFWRkVMRVZCUVZNc1JVRkhja0lzU1VGR1NVWXNWVUZCVlVVc1QwRkJVeXhKUVVGSFF5eEZRVUZSUXl4TFFVRkxReXhKUVVGSlJpeEZRVUZQWWl4VlFVRlZWU3hWUVVGVkxFMUJRMnhGUnl4RlFVRlJMRWxCUVVkQkxFVkJRVkZFTEVWQlFWTkRMRWRCUXpGQ1FTeEhRVUZUTEVWQlFVZEJMRWxCUVZNc1IwRkJTVUVzUzBGQlUwWXNSMEZCVDBFc1JVRkJSVVVzUzBGQlYwNHNSVUZCWlN4UFFVRlBUU3hIUVVGVExFVkJRek5HTEU5QlFWRWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNWhjbkpoZVM1c1lYTjBMV2x1WkdWNExXOW1MbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciAkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIiksJG1hcD1yZXF1aXJlKFwiLi9fYXJyYXktbWV0aG9kc1wiKSgxKTskZXhwb3J0KCRleHBvcnQuUCskZXhwb3J0LkYqIXJlcXVpcmUoXCIuL19zdHJpY3QtbWV0aG9kXCIpKFtdLm1hcCwhMCksXCJBcnJheVwiLHttYXA6ZnVuY3Rpb24gbWFwKHIpe3JldHVybiAkbWFwKHRoaXMscixhcmd1bWVudHNbMV0pfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNWhjbkpoZVM1dFlYQXVhbk1pWFN3aWJtRnRaWE1pT2xzaUpHVjRjRzl5ZENJc0luSmxjWFZwY21VaUxDSWtiV0Z3SWl3aVVDSXNJa1lpTENKdFlYQWlMQ0pqWVd4c1ltRmphMlp1SWl3aWRHaHBjeUlzSW1GeVozVnRaVzUwY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkRRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR0ZCUTJ4Q1F5eExRVUZQUkN4UlFVRlJMRzFDUVVGU1FTeERRVUUwUWl4SFFVVjJRMFFzVVVGQlVVRXNVVUZCVVVjc1JVRkJTVWdzVVVGQlVVa3NSMEZCUzBnc1VVRkJVU3h0UWtGQlVrRXNRMEZCTkVJc1IwRkJSMGtzUzBGQlN5eEhRVUZQTEZGQlFWTXNRMEZGYmtaQkxFbEJRVXNzVTBGQlUwRXNTVUZCU1VNc1IwRkRhRUlzVDBGQlQwb3NTMEZCUzBzc1MwRkJUVVFzUlVGQldVVXNWVUZCVlNJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG1GeWNtRjVMbTFoY0M1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLGNyZWF0ZVByb3BlcnR5PXJlcXVpcmUoXCIuL19jcmVhdGUtcHJvcGVydHlcIik7JGV4cG9ydCgkZXhwb3J0LlMrJGV4cG9ydC5GKnJlcXVpcmUoXCIuL19mYWlsc1wiKShmdW5jdGlvbigpe2Z1bmN0aW9uIEYoKXt9cmV0dXJuIShBcnJheS5vZi5jYWxsKEYpaW5zdGFuY2VvZiBGKX0pLFwiQXJyYXlcIix7b2Y6ZnVuY3Rpb24gb2YoKXtmb3IodmFyIHI9MCxlPWFyZ3VtZW50cy5sZW5ndGgsdD1uZXcoXCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcz90aGlzOkFycmF5KShlKTtlPnI7KWNyZWF0ZVByb3BlcnR5KHQscixhcmd1bWVudHNbcisrXSk7cmV0dXJuIHQubGVuZ3RoPWUsdH19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTVoY25KaGVTNXZaaTVxY3lKZExDSnVZVzFsY3lJNld5SWtaWGh3YjNKMElpd2ljbVZ4ZFdseVpTSXNJbU55WldGMFpWQnliM0JsY25SNUlpd2lVeUlzSWtZaUxDSkJjbkpoZVNJc0ltOW1JaXdpWTJGc2JDSXNJbWx1WkdWNElpd2lZVXhsYmlJc0ltRnlaM1Z0Wlc1MGN5SXNJbXhsYm1kMGFDSXNJbkpsYzNWc2RDSXNJblJvYVhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJRMEVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVOc1FrTXNaVUZCYVVKRUxGRkJRVkVzYzBKQlJ6ZENSQ3hSUVVGUlFTeFJRVUZSUnl4RlFVRkpTQ3hSUVVGUlNTeEZRVUZKU0N4UlFVRlJMRmRCUVZKQkxFTkJRVzlDTEZkQlEyeEVMRk5CUVZOSExFdEJRMVFzVVVGQlUwTXNUVUZCVFVNc1IwRkJSME1zUzBGQlMwZ3NZVUZCWTBFc1MwRkRia01zVVVGQlV5eERRVVZZUlN4SFFVRkpMRk5CUVZOQkxFdEJTVmdzU1VGSVFTeEpRVUZKUlN4RlFVRlJMRVZCUTFKRExFVkJRVTlETEZWQlFWVkRMRTlCUTJwQ1F5eEZRVUZUTEVsQlFXOUNMRzFDUVVGU1F5eExRVUZ4UWtFc1MwRkJUMUlzVDBGQlQwa3NSMEZEY2tSQkxFVkJRVTlFTEVkQlFVOU9MR1ZCUVdWVkxFVkJRVkZLTEVWQlFVOUZMRlZCUVZWR0xFMUJSVGRFTEU5QlJFRkpMRVZCUVU5RUxFOUJRVk5HTEVWQlExUkhJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVZWEp5WVhrdWIyWXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciAkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIiksJHJlZHVjZT1yZXF1aXJlKFwiLi9fYXJyYXktcmVkdWNlXCIpOyRleHBvcnQoJGV4cG9ydC5QKyRleHBvcnQuRiohcmVxdWlyZShcIi4vX3N0cmljdC1tZXRob2RcIikoW10ucmVkdWNlUmlnaHQsITApLFwiQXJyYXlcIix7cmVkdWNlUmlnaHQ6ZnVuY3Rpb24gcmVkdWNlUmlnaHQoZSl7cmV0dXJuICRyZWR1Y2UodGhpcyxlLGFyZ3VtZW50cy5sZW5ndGgsYXJndW1lbnRzWzFdLCEwKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTVoY25KaGVTNXlaV1IxWTJVdGNtbG5hSFF1YW5NaVhTd2libUZ0WlhNaU9sc2lKR1Y0Y0c5eWRDSXNJbkpsY1hWcGNtVWlMQ0lrY21Wa2RXTmxJaXdpVUNJc0lrWWlMQ0p5WldSMVkyVlNhV2RvZENJc0ltTmhiR3hpWVdOclptNGlMQ0owYUdseklpd2lZWEpuZFcxbGJuUnpJaXdpYkdWdVozUm9JbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVOQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc1lVRkRiRUpETEZGQlFWVkVMRkZCUVZFc2JVSkJSWFJDUkN4UlFVRlJRU3hSUVVGUlJ5eEZRVUZKU0N4UlFVRlJTU3hIUVVGTFNDeFJRVUZSTEcxQ1FVRlNRU3hEUVVFMFFpeEhRVUZIU1N4aFFVRmhMRWRCUVU4c1VVRkJVeXhEUVVVelJrRXNXVUZCWVN4VFFVRlRRU3haUVVGWlF5eEhRVU5vUXl4UFFVRlBTaXhSUVVGUlN5eExRVUZOUkN4RlFVRlpSU3hWUVVGVlF5eFBRVUZSUkN4VlFVRlZMRWxCUVVraUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1aGNuSmhlUzV5WldSMVkyVXRjbWxuYUhRdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKSwkcmVkdWNlPXJlcXVpcmUoXCIuL19hcnJheS1yZWR1Y2VcIik7JGV4cG9ydCgkZXhwb3J0LlArJGV4cG9ydC5GKiFyZXF1aXJlKFwiLi9fc3RyaWN0LW1ldGhvZFwiKShbXS5yZWR1Y2UsITApLFwiQXJyYXlcIix7cmVkdWNlOmZ1bmN0aW9uIHJlZHVjZShlKXtyZXR1cm4gJHJlZHVjZSh0aGlzLGUsYXJndW1lbnRzLmxlbmd0aCxhcmd1bWVudHNbMV0sITEpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNWhjbkpoZVM1eVpXUjFZMlV1YW5NaVhTd2libUZ0WlhNaU9sc2lKR1Y0Y0c5eWRDSXNJbkpsY1hWcGNtVWlMQ0lrY21Wa2RXTmxJaXdpVUNJc0lrWWlMQ0p5WldSMVkyVWlMQ0pqWVd4c1ltRmphMlp1SWl3aWRHaHBjeUlzSW1GeVozVnRaVzUwY3lJc0lteGxibWQwYUNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkRRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR0ZCUTJ4Q1F5eFJRVUZWUkN4UlFVRlJMRzFDUVVWMFFrUXNVVUZCVVVFc1VVRkJVVWNzUlVGQlNVZ3NVVUZCVVVrc1IwRkJTMGdzVVVGQlVTeHRRa0ZCVWtFc1EwRkJORUlzUjBGQlIwa3NVVUZCVVN4SFFVRlBMRkZCUVZNc1EwRkZkRVpCTEU5QlFWRXNVMEZCVTBFc1QwRkJUME1zUjBGRGRFSXNUMEZCVDBvc1VVRkJVVXNzUzBGQlRVUXNSVUZCV1VVc1ZVRkJWVU1zVDBGQlVVUXNWVUZCVlN4SlFVRkpJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVZWEp5WVhrdWNtVmtkV05sTG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLGh0bWw9cmVxdWlyZShcIi4vX2h0bWxcIiksY29mPXJlcXVpcmUoXCIuL19jb2ZcIiksdG9BYnNvbHV0ZUluZGV4PXJlcXVpcmUoXCIuL190by1hYnNvbHV0ZS1pbmRleFwiKSx0b0xlbmd0aD1yZXF1aXJlKFwiLi9fdG8tbGVuZ3RoXCIpLGFycmF5U2xpY2U9W10uc2xpY2U7JGV4cG9ydCgkZXhwb3J0LlArJGV4cG9ydC5GKnJlcXVpcmUoXCIuL19mYWlsc1wiKShmdW5jdGlvbigpe2h0bWwmJmFycmF5U2xpY2UuY2FsbChodG1sKX0pLFwiQXJyYXlcIix7c2xpY2U6ZnVuY3Rpb24gc2xpY2UoZSxyKXt2YXIgdD10b0xlbmd0aCh0aGlzLmxlbmd0aCksaT1jb2YodGhpcyk7aWYocj12b2lkIDA9PT1yP3Q6cixcIkFycmF5XCI9PWkpcmV0dXJuIGFycmF5U2xpY2UuY2FsbCh0aGlzLGUscik7Zm9yKHZhciBvPXRvQWJzb2x1dGVJbmRleChlLHQpLGw9dG9BYnNvbHV0ZUluZGV4KHIsdCksYT10b0xlbmd0aChsLW8pLG49bmV3IEFycmF5KGEpLGM9MDtjPGE7YysrKW5bY109XCJTdHJpbmdcIj09aT90aGlzLmNoYXJBdChvK2MpOnRoaXNbbytjXTtyZXR1cm4gbn19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTVoY25KaGVTNXpiR2xqWlM1cWN5SmRMQ0p1WVcxbGN5STZXeUlrWlhod2IzSjBJaXdpY21WeGRXbHlaU0lzSW1oMGJXd2lMQ0pqYjJZaUxDSjBiMEZpYzI5c2RYUmxTVzVrWlhnaUxDSjBiMHhsYm1kMGFDSXNJbUZ5Y21GNVUyeHBZMlVpTENKemJHbGpaU0lzSWxBaUxDSkdJaXdpWTJGc2JDSXNJbUpsWjJsdUlpd2laVzVrSWl3aWJHVnVJaXdpZEdocGN5SXNJbXhsYm1kMGFDSXNJbXRzWVhOeklpd2lkVzVrWldacGJtVmtJaXdpYzNSaGNuUWlMQ0oxY0ZSdklpd2ljMmw2WlNJc0ltTnNiMjVsWkNJc0lrRnljbUY1SWl3aWFTSXNJbU5vWVhKQmRDSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZEUVN4SlFVRkpRU3hSUVVGVlF5eFJRVUZSTEdGQlEyeENReXhMUVVGUFJDeFJRVUZSTEZkQlEyWkZMRWxCUVUxR0xGRkJRVkVzVlVGRFpFY3NaMEpCUVd0Q1NDeFJRVUZSTEhkQ1FVTXhRa2tzVTBGQlYwb3NVVUZCVVN4blFrRkRia0pMTEZkQlFXRXNSMEZCUjBNc1RVRkhjRUpRTEZGQlFWRkJMRkZCUVZGUkxFVkJRVWxTTEZGQlFWRlRMRVZCUVVsU0xGRkJRVkVzVjBGQlVrRXNRMEZCYjBJc1YwRkRPVU5ETEUxQlFVMUpMRmRCUVZkSkxFdEJRVXRTTEZGQlEzaENMRkZCUVZNc1EwRkRXRXNzVFVGQlR5eFRRVUZUUVN4TlFVRk5TU3hGUVVGUFF5eEhRVU16UWl4SlFVRkpReXhGUVVGTlVpeFRRVUZUVXl4TFFVRkxReXhSUVVOd1FrTXNSVUZCVVdJc1NVRkJTVmNzVFVGRmFFSXNSMEZFUVVZc1QwRkJZMHNzU1VGQlVrd3NSVUZCYjBKRExFVkJRVTFFTEVWQlEyNUNMRk5CUVZSSkxFVkJRV3RDTEU5QlFVOVdMRmRCUVZkSkxFdEJRVXRKTEV0QlFVMUlMRVZCUVU5RExFZEJUVEZFTEVsQlRFRXNTVUZCU1Uwc1JVRkJVV1FzWjBKQlFXZENUeXhGUVVGUFJTeEhRVU12UWswc1JVRkJUMllzWjBKQlFXZENVU3hGUVVGTFF5eEhRVU0xUWs4c1JVRkJUMllzVTBGQlUyTXNSVUZCVDBRc1IwRkRka0pITEVWQlFWTXNTVUZCU1VNc1RVRkJUVVlzUjBGRGJrSkhMRVZCUVVrc1JVRkRSRUVzUlVGQlNVZ3NSVUZCVFVjc1NVRkJTMFlzUlVGQlQwVXNSMEZCWXl4VlFVRlVVQ3hGUVVNNVFrWXNTMEZCUzFVc1QwRkJUMDRzUlVGQlVVc3NSMEZEY0VKVUxFdEJRVXRKTEVWQlFWRkxMRWRCUTJwQ0xFOUJRVTlHSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1WVhKeVlYa3VjMnhwWTJVdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKSwkc29tZT1yZXF1aXJlKFwiLi9fYXJyYXktbWV0aG9kc1wiKSgzKTskZXhwb3J0KCRleHBvcnQuUCskZXhwb3J0LkYqIXJlcXVpcmUoXCIuL19zdHJpY3QtbWV0aG9kXCIpKFtdLnNvbWUsITApLFwiQXJyYXlcIix7c29tZTpmdW5jdGlvbiBzb21lKGUpe3JldHVybiAkc29tZSh0aGlzLGUsYXJndW1lbnRzWzFdKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTVoY25KaGVTNXpiMjFsTG1weklsMHNJbTVoYldWeklqcGJJaVJsZUhCdmNuUWlMQ0p5WlhGMWFYSmxJaXdpSkhOdmJXVWlMQ0pRSWl3aVJpSXNJbk52YldVaUxDSmpZV3hzWW1GamEyWnVJaXdpZEdocGN5SXNJbUZ5WjNWdFpXNTBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRFFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHRkJRMnhDUXl4TlFVRlJSQ3hSUVVGUkxHMUNRVUZTUVN4RFFVRTBRaXhIUVVWNFEwUXNVVUZCVVVFc1VVRkJVVWNzUlVGQlNVZ3NVVUZCVVVrc1IwRkJTMGdzVVVGQlVTeHRRa0ZCVWtFc1EwRkJORUlzUjBGQlIwa3NUVUZCVFN4SFFVRlBMRkZCUVZNc1EwRkZjRVpCTEV0QlFVMHNVMEZCVTBFc1MwRkJTME1zUjBGRGJFSXNUMEZCVDBvc1RVRkJUVXNzUzBGQlRVUXNSVUZCV1VVc1ZVRkJWU0lzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbUZ5Y21GNUxuTnZiV1V1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLGFGdW5jdGlvbj1yZXF1aXJlKFwiLi9fYS1mdW5jdGlvblwiKSx0b09iamVjdD1yZXF1aXJlKFwiLi9fdG8tb2JqZWN0XCIpLGZhaWxzPXJlcXVpcmUoXCIuL19mYWlsc1wiKSwkc29ydD1bXS5zb3J0LHRlc3Q9WzEsMiwzXTskZXhwb3J0KCRleHBvcnQuUCskZXhwb3J0LkYqKGZhaWxzKGZ1bmN0aW9uKCl7dGVzdC5zb3J0KHZvaWQgMCl9KXx8IWZhaWxzKGZ1bmN0aW9uKCl7dGVzdC5zb3J0KG51bGwpfSl8fCFyZXF1aXJlKFwiLi9fc3RyaWN0LW1ldGhvZFwiKSgkc29ydCkpLFwiQXJyYXlcIix7c29ydDpmdW5jdGlvbiBzb3J0KHQpe3JldHVybiB2b2lkIDA9PT10PyRzb3J0LmNhbGwodG9PYmplY3QodGhpcykpOiRzb3J0LmNhbGwodG9PYmplY3QodGhpcyksYUZ1bmN0aW9uKHQpKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTVoY25KaGVTNXpiM0owTG1weklsMHNJbTVoYldWeklqcGJJaVJsZUhCdmNuUWlMQ0p5WlhGMWFYSmxJaXdpWVVaMWJtTjBhVzl1SWl3aWRHOVBZbXBsWTNRaUxDSm1ZV2xzY3lJc0lpUnpiM0owSWl3aWMyOXlkQ0lzSW5SbGMzUWlMQ0pRSWl3aVJpSXNJblZ1WkdWbWFXNWxaQ0lzSW1OdmJYQmhjbVZtYmlJc0ltTmhiR3dpTENKMGFHbHpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVOQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc1lVRkRiRUpETEZWQlFWbEVMRkZCUVZFc2FVSkJRM0JDUlN4VFFVRlhSaXhSUVVGUkxHZENRVU51UWtjc1RVRkJVVWdzVVVGQlVTeFpRVU5vUWtrc1RVRkJVU3hIUVVGSFF5eExRVU5ZUXl4TFFVRlBMRU5CUVVNc1JVRkJSeXhGUVVGSExFZEJSV3hDVUN4UlFVRlJRU3hSUVVGUlVTeEZRVUZKVWl4UlFVRlJVeXhIUVVGTFRDeE5RVUZOTEZkQlJYSkRSeXhMUVVGTFJDeFZRVUZMU1N4UFFVTk1UaXhOUVVGTkxGZEJSVmhITEV0QlFVdEVMRXRCUVVzc1ZVRkZURXdzVVVGQlVTeHRRa0ZCVWtFc1EwRkJORUpKTEZGQlFWTXNVVUZCVXl4RFFVVnVSRU1zUzBGQlRTeFRRVUZUUVN4TFFVRkxTeXhIUVVOc1FpeFpRVUZ4UWtRc1NVRkJaRU1zUlVGRFNFNHNUVUZCVFU4c1MwRkJTMVFzVTBGQlUxVXNUMEZEY0VKU0xFMUJRVTFQTEV0QlFVdFVMRk5CUVZOVkxFMUJRVTlZTEZWQlFWVlRJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVZWEp5WVhrdWMyOXlkQzVxY3lKOSIsInJlcXVpcmUoXCIuL19zZXQtc3BlY2llc1wiKShcIkFycmF5XCIpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNWhjbkpoZVM1emNHVmphV1Z6TG1weklsMHNJbTVoYldWeklqcGJJbkpsY1hWcGNtVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJRU3hSUVVGUkxHbENRVUZTUVN4RFFVRXdRaUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbUZ5Y21GNUxuTndaV05wWlhNdWFuTWlmUT09IiwidmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKTskZXhwb3J0KCRleHBvcnQuUyxcIkRhdGVcIix7bm93OmZ1bmN0aW9uKCl7cmV0dXJuKG5ldyBEYXRlKS5nZXRUaW1lKCl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1a1lYUmxMbTV2ZHk1cWN5SmRMQ0p1WVcxbGN5STZXeUlrWlhod2IzSjBJaXdpY21WeGRXbHlaU0lzSWxNaUxDSnViM2NpTENKRVlYUmxJaXdpWjJWMFZHbHRaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRMEVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVWMFFrUXNVVUZCVVVFc1VVRkJVVVVzUlVGQlJ5eFBRVUZSTEVOQlFVVkRMRWxCUVVzc1YwRkJZeXhQUVVGUExFbEJRVWxETEUxQlFVOURJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVaR0YwWlM1dWIzY3Vhbk1pZlE9PSIsInZhciAkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIiksdG9JU09TdHJpbmc9cmVxdWlyZShcIi4vX2RhdGUtdG8taXNvLXN0cmluZ1wiKTskZXhwb3J0KCRleHBvcnQuUCskZXhwb3J0LkYqKERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nIT09dG9JU09TdHJpbmcpLFwiRGF0ZVwiLHt0b0lTT1N0cmluZzp0b0lTT1N0cmluZ30pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNWtZWFJsTG5SdkxXbHpieTF6ZEhKcGJtY3Vhbk1pWFN3aWJtRnRaWE1pT2xzaUpHVjRjRzl5ZENJc0luSmxjWFZwY21VaUxDSjBiMGxUVDFOMGNtbHVaeUlzSWxBaUxDSkdJaXdpUkdGMFpTSXNJbkJ5YjNSdmRIbHdaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRMEVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVOc1FrTXNXVUZCWTBRc1VVRkJVU3g1UWtGSE1VSkVMRkZCUVZGQkxGRkJRVkZITEVWQlFVbElMRkZCUVZGSkxFZEJRVXRETEV0QlFVdERMRlZCUVZWS0xHTkJRV2RDUVN4aFFVRmpMRTlCUVZFc1EwRkRjRVpCTEZsQlFXRkJJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVaR0YwWlM1MGJ5MXBjMjh0YzNSeWFXNW5MbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciAkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIiksdG9PYmplY3Q9cmVxdWlyZShcIi4vX3RvLW9iamVjdFwiKSx0b1ByaW1pdGl2ZT1yZXF1aXJlKFwiLi9fdG8tcHJpbWl0aXZlXCIpOyRleHBvcnQoJGV4cG9ydC5QKyRleHBvcnQuRipyZXF1aXJlKFwiLi9fZmFpbHNcIikoZnVuY3Rpb24oKXtyZXR1cm4gbnVsbCE9PW5ldyBEYXRlKE5hTikudG9KU09OKCl8fDEhPT1EYXRlLnByb3RvdHlwZS50b0pTT04uY2FsbCh7dG9JU09TdHJpbmc6ZnVuY3Rpb24oKXtyZXR1cm4gMX19KX0pLFwiRGF0ZVwiLHt0b0pTT046ZnVuY3Rpb24gdG9KU09OKHQpe3ZhciBlPXRvT2JqZWN0KHRoaXMpLHI9dG9QcmltaXRpdmUoZSk7cmV0dXJuXCJudW1iZXJcIiE9dHlwZW9mIHJ8fGlzRmluaXRlKHIpP2UudG9JU09TdHJpbmcoKTpudWxsfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNWtZWFJsTG5SdkxXcHpiMjR1YW5NaVhTd2libUZ0WlhNaU9sc2lKR1Y0Y0c5eWRDSXNJbkpsY1hWcGNtVWlMQ0owYjA5aWFtVmpkQ0lzSW5SdlVISnBiV2wwYVhabElpd2lVQ0lzSWtZaUxDSkVZWFJsSWl3aVRtRk9JaXdpZEc5S1UwOU9JaXdpY0hKdmRHOTBlWEJsSWl3aVkyRnNiQ0lzSW5SdlNWTlBVM1J5YVc1bklpd2lhMlY1SWl3aVR5SXNJblJvYVhNaUxDSndkaUlzSW1selJtbHVhWFJsSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4aFFVTkJMRWxCUVVsQkxGRkJRVlZETEZGQlFWRXNZVUZEYkVKRExGTkJRVmRFTEZGQlFWRXNaMEpCUTI1Q1JTeFpRVUZqUml4UlFVRlJMRzFDUVVVeFFrUXNVVUZCVVVFc1VVRkJVVWtzUlVGQlNVb3NVVUZCVVVzc1JVRkJTVW9zVVVGQlVTeFhRVUZTUVN4RFFVRnZRaXhYUVVOc1JDeFBRVUZyUXl4UFFVRXpRaXhKUVVGSlN5eExRVUZMUXl4TFFVRkxReXhWUVVNeVJDeEpRVUV6UlVZc1MwRkJTMGNzVlVGQlZVUXNUMEZCVDBVc1MwRkJTeXhEUVVGRlF5eFpRVUZoTEZkQlFXTXNUMEZCVHl4UFFVTnNSU3hQUVVGUkxFTkJSVlpJTEU5QlFWRXNVMEZCVTBFc1QwRkJUMGtzUjBGRGRFSXNTVUZCU1VNc1JVRkJTVmdzVTBGQlUxa3NUVUZEWWtNc1JVRkJTMW9zV1VGQldWVXNSMEZEY2tJc1RVRkJiMElzYVVKQlFVNUZMRWRCUVcxQ1F5eFRRVUZUUkN4SFFVRmhSaXhGUVVGRlJpeGpRVUZVSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1WkdGMFpTNTBieTFxYzI5dUxtcHpJbjA9IiwidmFyIFRPX1BSSU1JVElWRT1yZXF1aXJlKFwiLi9fd2tzXCIpKFwidG9QcmltaXRpdmVcIikscHJvdG89RGF0ZS5wcm90b3R5cGU7VE9fUFJJTUlUSVZFIGluIHByb3RvfHxyZXF1aXJlKFwiLi9faGlkZVwiKShwcm90byxUT19QUklNSVRJVkUscmVxdWlyZShcIi4vX2RhdGUtdG8tcHJpbWl0aXZlXCIpKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTVrWVhSbExuUnZMWEJ5YVcxcGRHbDJaUzVxY3lKZExDSnVZVzFsY3lJNld5SlVUMTlRVWtsTlNWUkpWa1VpTENKeVpYRjFhWEpsSWl3aWNISnZkRzhpTENKRVlYUmxJaXdpY0hKdmRHOTBlWEJsSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4SlFVRkpRU3hoUVVGbFF5eFJRVUZSTEZOQlFWSkJMRU5CUVd0Q0xHVkJRMnBEUXl4TlFVRlJReXhMUVVGTFF5eFZRVVZZU2l4blFrRkJaMEpGTEU5QlFWRkVMRkZCUVZFc1ZVRkJVa0VzUTBGQmJVSkRMRTFCUVU5R0xHRkJRV05ETEZGQlFWRWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNWtZWFJsTG5SdkxYQnlhVzFwZEdsMlpTNXFjeUo5IiwidmFyIERhdGVQcm90bz1EYXRlLnByb3RvdHlwZSxJTlZBTElEX0RBVEU9XCJJbnZhbGlkIERhdGVcIixUT19TVFJJTkc9XCJ0b1N0cmluZ1wiLCR0b1N0cmluZz1EYXRlUHJvdG9bVE9fU1RSSU5HXSxnZXRUaW1lPURhdGVQcm90by5nZXRUaW1lO25ldyBEYXRlKE5hTikrXCJcIiE9SU5WQUxJRF9EQVRFJiZyZXF1aXJlKFwiLi9fcmVkZWZpbmVcIikoRGF0ZVByb3RvLFRPX1NUUklORyxmdW5jdGlvbiB0b1N0cmluZygpe3ZhciB0PWdldFRpbWUuY2FsbCh0aGlzKTtyZXR1cm4gdD09dD8kdG9TdHJpbmcuY2FsbCh0aGlzKTpJTlZBTElEX0RBVEV9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTVrWVhSbExuUnZMWE4wY21sdVp5NXFjeUpkTENKdVlXMWxjeUk2V3lKRVlYUmxVSEp2ZEc4aUxDSkVZWFJsSWl3aWNISnZkRzkwZVhCbElpd2lTVTVXUVV4SlJGOUVRVlJGSWl3aVZFOWZVMVJTU1U1SElpd2lKSFJ2VTNSeWFXNW5JaXdpWjJWMFZHbHRaU0lzSWs1aFRpSXNJbkpsY1hWcGNtVWlMQ0owYjFOMGNtbHVaeUlzSW5aaGJIVmxJaXdpWTJGc2JDSXNJblJvYVhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFbEJRVWxCTEZWQlFWbERMRXRCUVV0RExGVkJRMnBDUXl4aFFVRmxMR1ZCUTJaRExGVkJRVmtzVjBGRFdrTXNWVUZCV1V3c1ZVRkJWVWtzVjBGRGRFSkZMRkZCUVZWT0xGVkJRVlZOTEZGQlEzQkNMRWxCUVVsTUxFdEJRVXROTEV0QlFVOHNTVUZCVFVvc1kwRkRlRUpMTEZGQlFWRXNZMEZCVWtFc1EwRkJkVUpTTEZWQlFWZEpMRlZCUVZjc1UwRkJVMHNzVjBGRGNFUXNTVUZCU1VNc1JVRkJVVW9zVVVGQlVVc3NTMEZCUzBNc1RVRkZla0lzVDBGQlQwWXNSMEZCVlVFc1JVRkJVVXdzVlVGQlZVMHNTMEZCUzBNc1RVRkJVVlFpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTVrWVhSbExuUnZMWE4wY21sdVp5NXFjeUo5IiwidmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKTskZXhwb3J0KCRleHBvcnQuUCxcIkZ1bmN0aW9uXCIse2JpbmQ6cmVxdWlyZShcIi4vX2JpbmRcIil9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTVtZFc1amRHbHZiaTVpYVc1a0xtcHpJbDBzSW01aGJXVnpJanBiSWlSbGVIQnZjblFpTENKeVpYRjFhWEpsSWl3aVVDSXNJbUpwYm1RaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVOQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc1lVRkZkRUpFTEZGQlFWRkJMRkZCUVZGRkxFVkJRVWNzVjBGQldTeERRVUZGUXl4TFFVRk5SaXhSUVVGUklpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdVpuVnVZM1JwYjI0dVltbHVaQzVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBpc09iamVjdD1yZXF1aXJlKFwiLi9faXMtb2JqZWN0XCIpLGdldFByb3RvdHlwZU9mPXJlcXVpcmUoXCIuL19vYmplY3QtZ3BvXCIpLEhBU19JTlNUQU5DRT1yZXF1aXJlKFwiLi9fd2tzXCIpKFwiaGFzSW5zdGFuY2VcIiksRnVuY3Rpb25Qcm90bz1GdW5jdGlvbi5wcm90b3R5cGU7SEFTX0lOU1RBTkNFIGluIEZ1bmN0aW9uUHJvdG98fHJlcXVpcmUoXCIuL19vYmplY3QtZHBcIikuZihGdW5jdGlvblByb3RvLEhBU19JTlNUQU5DRSx7dmFsdWU6ZnVuY3Rpb24odCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdGhpc3x8IWlzT2JqZWN0KHQpKXJldHVybiExO2lmKCFpc09iamVjdCh0aGlzLnByb3RvdHlwZSkpcmV0dXJuIHQgaW5zdGFuY2VvZiB0aGlzO2Zvcig7dD1nZXRQcm90b3R5cGVPZih0KTspaWYodGhpcy5wcm90b3R5cGU9PT10KXJldHVybiEwO3JldHVybiExfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNW1kVzVqZEdsdmJpNW9ZWE10YVc1emRHRnVZMlV1YW5NaVhTd2libUZ0WlhNaU9sc2lhWE5QWW1wbFkzUWlMQ0p5WlhGMWFYSmxJaXdpWjJWMFVISnZkRzkwZVhCbFQyWWlMQ0pJUVZOZlNVNVRWRUZPUTBVaUxDSkdkVzVqZEdsdmJsQnliM1J2SWl3aVJuVnVZM1JwYjI0aUxDSndjbTkwYjNSNWNHVWlMQ0ptSWl3aWRtRnNkV1VpTENKUElpd2lkR2hwY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkRRU3hKUVVGSlFTeFRRVUZYUXl4UlFVRlJMR2RDUVVOdVFrTXNaVUZCYVVKRUxGRkJRVkVzYVVKQlEzcENSU3hoUVVGbFJpeFJRVUZSTEZOQlFWSkJMRU5CUVd0Q0xHVkJRMnBEUnl4alFVRm5Ra01zVTBGQlUwTXNWVUZGZGtKSUxHZENRVUZuUWtNc1pVRkJaMEpJTEZGQlFWRXNaMEpCUVdkQ1RTeEZRVUZGU0N4alFVRmxSQ3hoUVVGakxFTkJRVVZMTEUxQlFVOHNVMEZCVlVNc1IwRkRPVWNzUjBGQmJVSXNiVUpCUVZKRExFOUJRWFZDVml4VFFVRlRVeXhIUVVGSkxFOUJRVThzUlVGRGRFUXNTVUZCUzFRc1UwRkJVMVVzUzBGQlMwb3NWMEZCV1N4UFFVRlBSeXhoUVVGaFF5eExRVVZ1UkN4TFFVRlBSQ3hGUVVGSlVDeGxRVUZsVHl4SlFVRkpMRWRCUVVsRExFdEJRVXRLTEZsQlFXTkhMRVZCUVVjc1QwRkJUeXhGUVVNdlJDeFBRVUZQSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1Wm5WdVkzUnBiMjR1YUdGekxXbHVjM1JoYm1ObExtcHpJbjA9IiwidmFyIGRQPXJlcXVpcmUoXCIuL19vYmplY3QtZHBcIikuZixGUHJvdG89RnVuY3Rpb24ucHJvdG90eXBlLG5hbWVSRT0vXlxccypmdW5jdGlvbiAoW14gKF0qKS8sTkFNRT1cIm5hbWVcIjtOQU1FIGluIEZQcm90b3x8cmVxdWlyZShcIi4vX2Rlc2NyaXB0b3JzXCIpJiZkUChGUHJvdG8sTkFNRSx7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3RyeXtyZXR1cm4oXCJcIit0aGlzKS5tYXRjaChuYW1lUkUpWzFdfWNhdGNoKHIpe3JldHVyblwiXCJ9fX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNW1kVzVqZEdsdmJpNXVZVzFsTG1weklsMHNJbTVoYldWeklqcGJJbVJRSWl3aWNtVnhkV2x5WlNJc0ltWWlMQ0pHVUhKdmRHOGlMQ0pHZFc1amRHbHZiaUlzSW5CeWIzUnZkSGx3WlNJc0ltNWhiV1ZTUlNJc0lrNUJUVVVpTENKamIyNW1hV2QxY21GaWJHVWlMQ0puWlhRaUxDSjBhR2x6SWl3aWJXRjBZMmdpTENKbElsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeEpRVUZKUVN4SFFVRkxReXhSUVVGUkxHZENRVUZuUWtNc1JVRkROMEpETEU5QlFWTkRMRk5CUVZORExGVkJRMnhDUXl4UFFVRlRMSGRDUVVOVVF5eExRVUZQTEU5QlIxaEJMRkZCUVZGS0xGRkJRVlZHTEZGQlFWRXNiVUpCUVhGQ1JDeEhRVUZIUnl4UFFVRlJTU3hMUVVGTkxFTkJRemxFUXl4alFVRmpMRVZCUTJSRExFbEJRVXNzVjBGRFNDeEpRVU5GTEU5QlFWRXNSMEZCUzBNc1RVRkJUVU1zVFVGQlRVd3NVVUZCVVN4SFFVTnFReXhOUVVGUFRTeEhRVU5RTEUxQlFVOGlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNW1kVzVqZEdsdmJpNXVZVzFsTG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgc3Ryb25nPXJlcXVpcmUoXCIuL19jb2xsZWN0aW9uLXN0cm9uZ1wiKSx2YWxpZGF0ZT1yZXF1aXJlKFwiLi9fdmFsaWRhdGUtY29sbGVjdGlvblwiKSxNQVA9XCJNYXBcIjttb2R1bGUuZXhwb3J0cz1yZXF1aXJlKFwiLi9fY29sbGVjdGlvblwiKShNQVAsZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uIE1hcCgpe3JldHVybiB0KHRoaXMsYXJndW1lbnRzLmxlbmd0aD4wP2FyZ3VtZW50c1swXTp2b2lkIDApfX0se2dldDpmdW5jdGlvbiBnZXQodCl7dmFyIGU9c3Ryb25nLmdldEVudHJ5KHZhbGlkYXRlKHRoaXMsTUFQKSx0KTtyZXR1cm4gZSYmZS52fSxzZXQ6ZnVuY3Rpb24gc2V0KHQsZSl7cmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcyxNQVApLDA9PT10PzA6dCxlKX19LHN0cm9uZywhMCk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1dFlYQXVhbk1pWFN3aWJtRnRaWE1pT2xzaWMzUnliMjVuSWl3aWNtVnhkV2x5WlNJc0luWmhiR2xrWVhSbElpd2lUVUZRSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0ltZGxkQ0lzSWsxaGNDSXNJblJvYVhNaUxDSmhjbWQxYldWdWRITWlMQ0pzWlc1bmRHZ2lMQ0oxYm1SbFptbHVaV1FpTENKclpYa2lMQ0psYm5SeWVTSXNJbWRsZEVWdWRISjVJaXdpZGlJc0luTmxkQ0lzSW5aaGJIVmxJaXdpWkdWbUlsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVU5CTEVsQlFVbEJMRTlCUVZORExGRkJRVkVzZDBKQlEycENReXhUUVVGWFJDeFJRVUZSTERCQ1FVTnVRa1VzU1VGQlRTeE5RVWRXUXl4UFFVRlBReXhSUVVGVlNpeFJRVUZSTEdkQ1FVRlNRU3hEUVVGNVFrVXNTVUZCU3l4VFFVRlZSeXhIUVVOMlJDeFBRVUZQTEZOQlFWTkRMRTFCUVZFc1QwRkJUMFFzUlVGQlNVVXNTMEZCVFVNc1ZVRkJWVU1zVDBGQlV5eEZRVUZKUkN4VlFVRlZMRkZCUVV0RkxFdEJRemxGTEVOQlJVUk1MRWxCUVVzc1UwRkJVMEVzU1VGQlNVMHNSMEZEYUVJc1NVRkJTVU1zUlVGQlVXSXNUMEZCVDJNc1UwRkJVMW9zVTBGQlUwMHNTMEZCVFV3c1MwRkJUVk1zUjBGRGFrUXNUMEZCVDBNc1IwRkJVMEVzUlVGQlRVVXNSMEZIZUVKRExFbEJRVXNzVTBGQlUwRXNTVUZCU1Vvc1JVRkJTMHNzUjBGRGNrSXNUMEZCVDJwQ0xFOUJRVTlyUWl4SlFVRkphRUlzVTBGQlUwMHNTMEZCVFV3c1MwRkJZeXhKUVVGU1V5eEZRVUZaTEVWQlFVbEJMRVZCUVV0TExFdEJSVGRFYWtJc1VVRkJVU0lzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbTFoY0M1cWN5SjkiLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLGxvZzFwPXJlcXVpcmUoXCIuL19tYXRoLWxvZzFwXCIpLHNxcnQ9TWF0aC5zcXJ0LCRhY29zaD1NYXRoLmFjb3NoOyRleHBvcnQoJGV4cG9ydC5TKyRleHBvcnQuRiohKCRhY29zaCYmNzEwPT1NYXRoLmZsb29yKCRhY29zaChOdW1iZXIuTUFYX1ZBTFVFKSkmJiRhY29zaCgxLzApPT0xLzApLFwiTWF0aFwiLHthY29zaDpmdW5jdGlvbiBhY29zaChvKXtyZXR1cm4obz0rbyk8MT9OYU46bz45NDkwNjI2NS42MjQyNTE1Nj9NYXRoLmxvZyhvKStNYXRoLkxOMjpsb2cxcChvLTErc3FydChvLTEpKnNxcnQobysxKSl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1dFlYUm9MbUZqYjNOb0xtcHpJbDBzSW01aGJXVnpJanBiSWlSbGVIQnZjblFpTENKeVpYRjFhWEpsSWl3aWJHOW5NWEFpTENKemNYSjBJaXdpVFdGMGFDSXNJaVJoWTI5emFDSXNJbUZqYjNOb0lpd2lVeUlzSWtZaUxDSm1iRzl2Y2lJc0lrNTFiV0psY2lJc0lrMUJXRjlXUVV4VlJTSXNJa2x1Wm1sdWFYUjVJaXdpZUNJc0lrNWhUaUlzSW14dlp5SXNJa3hPTWlKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUTBFc1NVRkJTVUVzVVVGQlZVTXNVVUZCVVN4aFFVTnNRa01zVFVGQlVVUXNVVUZCVVN4cFFrRkRhRUpGTEV0QlFVOURMRXRCUVV0RUxFdEJRMXBGTEU5QlFWTkVMRXRCUVV0RkxFMUJSV3hDVGl4UlFVRlJRU3hSUVVGUlR5eEZRVUZKVUN4UlFVRlJVU3hKUVVGTlNDeFJRVVZYTEV0QlFYaERSQ3hMUVVGTFN5eE5RVUZOU2l4UFFVRlBTeXhQUVVGUFF5eGhRVVY2UWs0c1QwRkJUMDhzUlVGQlFVRXNTVUZCWVVFc1JVRkJRVUVzUjBGRGRFSXNUMEZCVVN4RFFVTlVUaXhOUVVGUExGTkJRVk5CTEUxQlFVMVBMRWRCUTNCQ0xFOUJRVkZCTEVkQlFVdEJMRWRCUVVzc1JVRkJTVU1zU1VGQlRVUXNSVUZCU1N4clFrRkROVUpVTEV0QlFVdFhMRWxCUVVsR0xFZEJRVXRVTEV0QlFVdFpMRWxCUTI1Q1pDeE5RVUZOVnl4RlFVRkpMRVZCUVVsV0xFdEJRVXRWTEVWQlFVa3NSMEZCUzFZc1MwRkJTMVVzUlVGQlNTSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtMWhkR2d1WVdOdmMyZ3Vhbk1pZlE9PSIsInZhciAkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIiksJGFzaW5oPU1hdGguYXNpbmg7ZnVuY3Rpb24gYXNpbmgoYSl7cmV0dXJuIGlzRmluaXRlKGE9K2EpJiYwIT1hP2E8MD8tYXNpbmgoLWEpOk1hdGgubG9nKGErTWF0aC5zcXJ0KGEqYSsxKSk6YX0kZXhwb3J0KCRleHBvcnQuUyskZXhwb3J0LkYqISgkYXNpbmgmJjEvJGFzaW5oKDApPjApLFwiTWF0aFwiLHthc2luaDphc2luaH0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXRZWFJvTG1GemFXNW9MbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2lKR0Z6YVc1b0lpd2lUV0YwYUNJc0ltRnphVzVvSWl3aWVDSXNJbWx6Um1sdWFYUmxJaXdpYkc5bklpd2ljM0Z5ZENJc0lsTWlMQ0pHSWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hSUVVGVlF5eFJRVUZSTEdGQlEyeENReXhQUVVGVFF5eExRVUZMUXl4TlFVVnNRaXhUUVVGVFFTeE5RVUZOUXl4SFFVTmlMRTlCUVZGRExGTkJRVk5FTEVkQlFVdEJMRWxCUVZjc1IwRkJURUVzUlVGQllVRXNSVUZCU1N4SFFVRkxSQ3hQUVVGUFF5eEhRVUZMUml4TFFVRkxTU3hKUVVGSlJpeEZRVUZKUml4TFFVRkxTeXhMUVVGTFNDeEZRVUZKUVN4RlFVRkpMRWxCUVhoRVFTeEZRVWwyUTB3c1VVRkJVVUVzVVVGQlVWTXNSVUZCU1ZRc1VVRkJVVlVzU1VGQlRWSXNVVUZCVlN4RlFVRkpRU3hQUVVGUExFZEJRVXNzUjBGQlNTeFBRVUZSTEVOQlFVVkZMRTFCUVU5Qklpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWJXRjBhQzVoYzJsdWFDNXFjeUo5IiwidmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKSwkYXRhbmg9TWF0aC5hdGFuaDskZXhwb3J0KCRleHBvcnQuUyskZXhwb3J0LkYqISgkYXRhbmgmJjEvJGF0YW5oKC0wKTwwKSxcIk1hdGhcIix7YXRhbmg6ZnVuY3Rpb24gYXRhbmgoYSl7cmV0dXJuIDA9PShhPSthKT9hOk1hdGgubG9nKCgxK2EpLygxLWEpKS8yfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXRZWFJvTG1GMFlXNW9MbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2lKR0YwWVc1b0lpd2lUV0YwYUNJc0ltRjBZVzVvSWl3aVV5SXNJa1lpTENKNElpd2liRzluSWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hSUVVGVlF5eFJRVUZSTEdGQlEyeENReXhQUVVGVFF5eExRVUZMUXl4TlFVZHNRa29zVVVGQlVVRXNVVUZCVVVzc1JVRkJTVXdzVVVGQlVVMHNTVUZCVFVvc1VVRkJWU3hGUVVGSlFTeFJRVUZSTEVkQlFVc3NSMEZCU1N4UFFVRlJMRU5CUTNaRlJTeE5RVUZQTEZOQlFWTkJMRTFCUVUxSExFZEJRM0JDTEU5QlFXMUNMRWxCUVZoQkxFZEJRVXRCTEVkQlFWVkJMRVZCUVVsS0xFdEJRVXRMTEV0QlFVc3NSVUZCU1VRc1NVRkJUU3hGUVVGSlFTeEpRVUZOSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1YldGMGFDNWhkR0Z1YUM1cWN5SjkiLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLHNpZ249cmVxdWlyZShcIi4vX21hdGgtc2lnblwiKTskZXhwb3J0KCRleHBvcnQuUyxcIk1hdGhcIix7Y2JydDpmdW5jdGlvbiBjYnJ0KHIpe3JldHVybiBzaWduKHI9K3IpKk1hdGgucG93KE1hdGguYWJzKHIpLDEvMyl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1dFlYUm9MbU5pY25RdWFuTWlYU3dpYm1GdFpYTWlPbHNpSkdWNGNHOXlkQ0lzSW5KbGNYVnBjbVVpTENKemFXZHVJaXdpVXlJc0ltTmljblFpTENKNElpd2lUV0YwYUNJc0luQnZkeUlzSW1GaWN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwRXNTVUZCU1VFc1VVRkJWVU1zVVVGQlVTeGhRVU5zUWtNc1MwRkJUMFFzVVVGQlVTeG5Ra0ZGYmtKRUxGRkJRVkZCTEZGQlFWRkhMRVZCUVVjc1QwRkJVU3hEUVVONlFrTXNTMEZCVFN4VFFVRlRRU3hMUVVGTFF5eEhRVU5zUWl4UFFVRlBTQ3hMUVVGTFJ5eEhRVUZMUVN4SFFVRkxReXhMUVVGTFF5eEpRVUZKUkN4TFFVRkxSU3hKUVVGSlNDeEhRVUZKTEVWQlFVa2lMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXRZWFJvTG1OaWNuUXVhbk1pZlE9PSIsInZhciAkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIik7JGV4cG9ydCgkZXhwb3J0LlMsXCJNYXRoXCIse2NsejMyOmZ1bmN0aW9uIGNsejMyKHIpe3JldHVybihyPj4+PTApPzMxLU1hdGguZmxvb3IoTWF0aC5sb2cocisuNSkqTWF0aC5MT0cyRSk6MzJ9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1dFlYUm9MbU5zZWpNeUxtcHpJbDBzSW01aGJXVnpJanBiSWlSbGVIQnZjblFpTENKeVpYRjFhWEpsSWl3aVV5SXNJbU5zZWpNeUlpd2llQ0lzSWsxaGRHZ2lMQ0ptYkc5dmNpSXNJbXh2WnlJc0lreFBSekpGSWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hSUVVGVlF5eFJRVUZSTEdGQlJYUkNSQ3hSUVVGUlFTeFJRVUZSUlN4RlFVRkhMRTlCUVZFc1EwRkRla0pETEUxQlFVOHNVMEZCVTBFc1RVRkJUVU1zUjBGRGNFSXNUMEZCVVVFc1MwRkJUeXhIUVVGTExFZEJRVXRETEV0QlFVdERMRTFCUVUxRUxFdEJRVXRGTEVsQlFVbElMRVZCUVVrc1NVRkJUME1zUzBGQlMwY3NUMEZCVXlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG0xaGRHZ3VZMng2TXpJdWFuTWlmUT09IiwidmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKSxleHA9TWF0aC5leHA7JGV4cG9ydCgkZXhwb3J0LlMsXCJNYXRoXCIse2Nvc2g6ZnVuY3Rpb24gY29zaChlKXtyZXR1cm4oZXhwKGU9K2UpK2V4cCgtZSkpLzJ9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1dFlYUm9MbU52YzJndWFuTWlYU3dpYm1GdFpYTWlPbHNpSkdWNGNHOXlkQ0lzSW5KbGNYVnBjbVVpTENKbGVIQWlMQ0pOWVhSb0lpd2lVeUlzSW1OdmMyZ2lMQ0o0SWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hSUVVGVlF5eFJRVUZSTEdGQlEyeENReXhKUVVGTlF5eExRVUZMUkN4SlFVVm1SaXhSUVVGUlFTeFJRVUZSU1N4RlFVRkhMRTlCUVZFc1EwRkRla0pETEV0QlFVMHNVMEZCVTBFc1MwRkJTME1zUjBGRGJFSXNUMEZCVVVvc1NVRkJTVWtzUjBGQlMwRXNSMEZCUzBvc1MwRkJTMGtzU1VGQlRTSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtMWhkR2d1WTI5emFDNXFjeUo5IiwidmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKSwkZXhwbTE9cmVxdWlyZShcIi4vX21hdGgtZXhwbTFcIik7JGV4cG9ydCgkZXhwb3J0LlMrJGV4cG9ydC5GKigkZXhwbTEhPU1hdGguZXhwbTEpLFwiTWF0aFwiLHtleHBtMTokZXhwbTF9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV0WVhSb0xtVjRjRzB4TG1weklsMHNJbTVoYldWeklqcGJJaVJsZUhCdmNuUWlMQ0p5WlhGMWFYSmxJaXdpSkdWNGNHMHhJaXdpVXlJc0lrWWlMQ0pOWVhSb0lpd2laWGh3YlRFaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVOQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc1lVRkRiRUpETEU5QlFWTkVMRkZCUVZFc2FVSkJSWEpDUkN4UlFVRlJRU3hSUVVGUlJ5eEZRVUZKU0N4UlFVRlJTU3hIUVVGTFJpeFJRVUZWUnl4TFFVRkxReXhQUVVGUkxFOUJRVkVzUTBGQlJVRXNUVUZCVDBvaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1dFlYUm9MbVY0Y0cweExtcHpJbjA9IiwidmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKTskZXhwb3J0KCRleHBvcnQuUyxcIk1hdGhcIix7ZnJvdW5kOnJlcXVpcmUoXCIuL19tYXRoLWZyb3VuZFwiKX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXRZWFJvTG1aeWIzVnVaQzVxY3lKZExDSnVZVzFsY3lJNld5SWtaWGh3YjNKMElpd2ljbVZ4ZFdseVpTSXNJbE1pTENKbWNtOTFibVFpWFN3aWJXRndjR2x1WjNNaU9pSkJRVU5CTEVsQlFVbEJMRkZCUVZWRExGRkJRVkVzWVVGRmRFSkVMRkZCUVZGQkxGRkJRVkZGTEVWQlFVY3NUMEZCVVN4RFFVRkZReXhQUVVGUlJpeFJRVUZSSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1YldGMGFDNW1jbTkxYm1RdWFuTWlmUT09IiwidmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKSxhYnM9TWF0aC5hYnM7JGV4cG9ydCgkZXhwb3J0LlMsXCJNYXRoXCIse2h5cG90OmZ1bmN0aW9uIGh5cG90KHQscil7Zm9yKHZhciBhLGUsbz0wLGg9MCxwPWFyZ3VtZW50cy5sZW5ndGgsbj0wO2g8cDspbjwoYT1hYnMoYXJndW1lbnRzW2grK10pKT8obz1vKihlPW4vYSkqZSsxLG49YSk6bys9YT4wPyhlPWEvbikqZTphO3JldHVybiBuPT09MS8wPzEvMDpuKk1hdGguc3FydChvKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV0WVhSb0xtaDVjRzkwTG1weklsMHNJbTVoYldWeklqcGJJaVJsZUhCdmNuUWlMQ0p5WlhGMWFYSmxJaXdpWVdKeklpd2lUV0YwYUNJc0lsTWlMQ0pvZVhCdmRDSXNJblpoYkhWbE1TSXNJblpoYkhWbE1pSXNJbUZ5WnlJc0ltUnBkaUlzSW5OMWJTSXNJbWtpTENKaFRHVnVJaXdpWVhKbmRXMWxiblJ6SWl3aWJHVnVaM1JvSWl3aWJHRnlaeUlzSWtsdVptbHVhWFI1SWl3aWMzRnlkQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRMEVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVOc1FrTXNTVUZCVFVNc1MwRkJTMFFzU1VGRlprWXNVVUZCVVVFc1VVRkJVVWtzUlVGQlJ5eFBRVUZSTEVOQlEzcENReXhOUVVGUExGTkJRVk5CTEUxQlFVMURMRVZCUVZGRExFZEJUVFZDTEVsQlRFRXNTVUZKU1VNc1JVRkJTME1zUlVGS1RFTXNSVUZCVFN4RlFVTk9ReXhGUVVGSkxFVkJRMHBETEVWQlFVOURMRlZCUVZWRExFOUJRMnBDUXl4RlFVRlBMRVZCUlVwS0xFVkJRVWxETEVkQlJVeEhMRWRCUkVwUUxFVkJRVTFPTEVsQlFVbFhMRlZCUVZWR0xGRkJSMnhDUkN4RlFVRk5RU3hIUVVST1JDeEZRVUZOVFN4RlFVRlBVQ3hIUVVOTFF5eEZRVUZOTEVWQlEzaENUU3hGUVVGUFVDeEhRVWRRUlN4SFFVWlRSaXhGUVVGTkxFZEJRMlpETEVWQlFVMUVMRVZCUVUxUExFZEJRME5PTEVWQlEwUkVMRVZCUldoQ0xFOUJRVTlQTEVsQlFWTkRMRVZCUVVGQkxFVkJRVmRCTEVWQlFVRkJMRVZCUVZkRUxFVkJRVTlhTEV0QlFVdGpMRXRCUVV0UUlpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWJXRjBhQzVvZVhCdmRDNXFjeUo5IiwidmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKSwkaW11bD1NYXRoLmltdWw7JGV4cG9ydCgkZXhwb3J0LlMrJGV4cG9ydC5GKnJlcXVpcmUoXCIuL19mYWlsc1wiKShmdW5jdGlvbigpe3JldHVybi01IT0kaW11bCg0Mjk0OTY3Mjk1LDUpfHwyIT0kaW11bC5sZW5ndGh9KSxcIk1hdGhcIix7aW11bDpmdW5jdGlvbiBpbXVsKHIsZSl7dmFyIHQ9K3IsdT0rZSxpPTY1NTM1JnQsbD02NTUzNSZ1O3JldHVybiAwfGkqbCsoKDY1NTM1JnQ+Pj4xNikqbCtpKig2NTUzNSZ1Pj4+MTYpPDwxNj4+PjApfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXRZWFJvTG1sdGRXd3Vhbk1pWFN3aWJtRnRaWE1pT2xzaUpHVjRjRzl5ZENJc0luSmxjWFZwY21VaUxDSWthVzExYkNJc0lrMWhkR2dpTENKcGJYVnNJaXdpVXlJc0lrWWlMQ0pzWlc1bmRHZ2lMQ0o0SWl3aWVTSXNJbmh1SWl3aWVXNGlMQ0o0YkNJc0lubHNJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR0ZCUTJ4Q1F5eE5RVUZSUXl4TFFVRkxReXhMUVVkcVFrb3NVVUZCVVVFc1VVRkJVVXNzUlVGQlNVd3NVVUZCVVUwc1JVRkJTVXdzVVVGQlVTeFhRVUZTUVN4RFFVRnZRaXhYUVVOc1JDeFBRVUZuUXl4SFFVRjZRa01zVFVGQlRTeFhRVUZaTEVsQlFUUkNMRWRCUVdoQ1FTeE5RVUZOU3l4VFFVTjZReXhQUVVGUkxFTkJRMVpJTEV0QlFVMHNVMEZCVTBFc1MwRkJTMGtzUlVGQlIwTXNSMEZEY2tJc1NVRkRTVU1zUjBGQlRVWXNSVUZEVGtjc1IwRkJUVVlzUlVGRFRrY3NSVUZJVXl4TlFVZExSaXhGUVVOa1J5eEZRVXBUTEUxQlNVdEdMRVZCUTJ4Q0xFOUJRVThzUlVGQlNVTXNSVUZCUzBNc1NVRk1TQ3hOUVV0dFFrZ3NTVUZCVHl4SlFVRk5SeXhGUVVGTFJDeEhRVXh5UXl4TlFVdHZSRVFzU1VGQlR5eExRVUZQTEV0QlFVOGlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXRZWFJvTG1sdGRXd3Vhbk1pZlE9PSIsInZhciAkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIik7JGV4cG9ydCgkZXhwb3J0LlMsXCJNYXRoXCIse2xvZzEwOmZ1bmN0aW9uIGxvZzEwKHIpe3JldHVybiBNYXRoLmxvZyhyKSpNYXRoLkxPRzEwRX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV0WVhSb0xteHZaekV3TG1weklsMHNJbTVoYldWeklqcGJJaVJsZUhCdmNuUWlMQ0p5WlhGMWFYSmxJaXdpVXlJc0lteHZaekV3SWl3aWVDSXNJazFoZEdnaUxDSnNiMmNpTENKTVQwY3hNRVVpWFN3aWJXRndjR2x1WjNNaU9pSkJRVU5CTEVsQlFVbEJMRkZCUVZWRExGRkJRVkVzWVVGRmRFSkVMRkZCUVZGQkxGRkJRVkZGTEVWQlFVY3NUMEZCVVN4RFFVTjZRa01zVFVGQlR5eFRRVUZUUVN4TlFVRk5ReXhIUVVOd1FpeFBRVUZQUXl4TFFVRkxReXhKUVVGSlJpeEhRVUZMUXl4TFFVRkxSU0lzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbTFoZEdndWJHOW5NVEF1YW5NaWZRPT0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpOyRleHBvcnQoJGV4cG9ydC5TLFwiTWF0aFwiLHtsb2cxcDpyZXF1aXJlKFwiLi9fbWF0aC1sb2cxcFwiKX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXRZWFJvTG14dlp6RndMbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2lVeUlzSW14dlp6RndJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR0ZCUlhSQ1JDeFJRVUZSUVN4UlFVRlJSU3hGUVVGSExFOUJRVkVzUTBGQlJVTXNUVUZCVDBZc1VVRkJVU0lzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbTFoZEdndWJHOW5NWEF1YW5NaWZRPT0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpOyRleHBvcnQoJGV4cG9ydC5TLFwiTWF0aFwiLHtsb2cyOmZ1bmN0aW9uIGxvZzIocil7cmV0dXJuIE1hdGgubG9nKHIpL01hdGguTE4yfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXRZWFJvTG14dlp6SXVhbk1pWFN3aWJtRnRaWE1pT2xzaUpHVjRjRzl5ZENJc0luSmxjWFZwY21VaUxDSlRJaXdpYkc5bk1pSXNJbmdpTENKTllYUm9JaXdpYkc5bklpd2lURTR5SWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hSUVVGVlF5eFJRVUZSTEdGQlJYUkNSQ3hSUVVGUlFTeFJRVUZSUlN4RlFVRkhMRTlCUVZFc1EwRkRla0pETEV0QlFVMHNVMEZCVTBFc1MwRkJTME1zUjBGRGJFSXNUMEZCVDBNc1MwRkJTME1zU1VGQlNVWXNSMEZCUzBNc1MwRkJTMFVpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV0WVhSb0xteHZaekl1YW5NaWZRPT0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpOyRleHBvcnQoJGV4cG9ydC5TLFwiTWF0aFwiLHtzaWduOnJlcXVpcmUoXCIuL19tYXRoLXNpZ25cIil9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV0WVhSb0xuTnBaMjR1YW5NaVhTd2libUZ0WlhNaU9sc2lKR1Y0Y0c5eWRDSXNJbkpsY1hWcGNtVWlMQ0pUSWl3aWMybG5iaUpkTENKdFlYQndhVzVuY3lJNklrRkJRMEVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVWMFFrUXNVVUZCVVVFc1VVRkJVVVVzUlVGQlJ5eFBRVUZSTEVOQlFVVkRMRXRCUVUxR0xGRkJRVkVpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV0WVhSb0xuTnBaMjR1YW5NaWZRPT0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLGV4cG0xPXJlcXVpcmUoXCIuL19tYXRoLWV4cG0xXCIpLGV4cD1NYXRoLmV4cDskZXhwb3J0KCRleHBvcnQuUyskZXhwb3J0LkYqcmVxdWlyZShcIi4vX2ZhaWxzXCIpKGZ1bmN0aW9uKCl7cmV0dXJuLTJlLTE3IT0hTWF0aC5zaW5oKC0yZS0xNyl9KSxcIk1hdGhcIix7c2luaDpmdW5jdGlvbiBzaW5oKGUpe3JldHVybiBNYXRoLmFicyhlPStlKTwxPyhleHBtMShlKS1leHBtMSgtZSkpLzI6KGV4cChlLTEpLWV4cCgtZS0xKSkqKE1hdGguRS8yKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV0WVhSb0xuTnBibWd1YW5NaVhTd2libUZ0WlhNaU9sc2lKR1Y0Y0c5eWRDSXNJbkpsY1hWcGNtVWlMQ0psZUhCdE1TSXNJbVY0Y0NJc0lrMWhkR2dpTENKVElpd2lSaUlzSW5OcGJtZ2lMQ0o0SWl3aVlXSnpJaXdpUlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUTBFc1NVRkJTVUVzVVVGQlZVTXNVVUZCVVN4aFFVTnNRa01zVFVGQlVVUXNVVUZCVVN4cFFrRkRhRUpGTEVsQlFVMURMRXRCUVV0RUxFbEJSMlpJTEZGQlFWRkJMRkZCUVZGTExFVkJRVWxNTEZGQlFWRk5MRVZCUVVsTUxGRkJRVkVzVjBGQlVrRXNRMEZCYjBJc1YwRkRiRVFzVDBGQk9FSXNVVUZCZEVKSExFdEJRVXRITEUxQlFVMHNVMEZEYWtJc1QwRkJVU3hEUVVOV1FTeExRVUZOTEZOQlFWTkJMRXRCUVV0RExFZEJRMnhDTEU5QlFVOUtMRXRCUVV0TExFbEJRVWxFTEVkQlFVdEJMRWRCUVVzc1IwRkRja0pPTEUxQlFVMU5MRWRCUVV0T0xFOUJRVTlOTEVsQlFVMHNSMEZEZUVKTUxFbEJRVWxMTEVWQlFVa3NSMEZCUzB3c1MwRkJTMHNzUlVGQlNTeExRVUZQU2l4TFFVRkxUU3hGUVVGSklpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWJXRjBhQzV6YVc1b0xtcHpJbjA9IiwidmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKSxleHBtMT1yZXF1aXJlKFwiLi9fbWF0aC1leHBtMVwiKSxleHA9TWF0aC5leHA7JGV4cG9ydCgkZXhwb3J0LlMsXCJNYXRoXCIse3Rhbmg6ZnVuY3Rpb24gdGFuaChlKXt2YXIgcD1leHBtMShlPStlKSxyPWV4cG0xKC1lKTtyZXR1cm4gcD09MS8wPzE6cj09MS8wPy0xOihwLXIpLyhleHAoZSkrZXhwKC1lKSl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1dFlYUm9MblJoYm1ndWFuTWlYU3dpYm1GdFpYTWlPbHNpSkdWNGNHOXlkQ0lzSW5KbGNYVnBjbVVpTENKbGVIQnRNU0lzSW1WNGNDSXNJazFoZEdnaUxDSlRJaXdpZEdGdWFDSXNJbmdpTENKaElpd2lZaUlzSWtsdVptbHVhWFI1SWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hSUVVGVlF5eFJRVUZSTEdGQlEyeENReXhOUVVGUlJDeFJRVUZSTEdsQ1FVTm9Ra1VzU1VGQlRVTXNTMEZCUzBRc1NVRkZaa2dzVVVGQlVVRXNVVUZCVVVzc1JVRkJSeXhQUVVGUkxFTkJRM3BDUXl4TFFVRk5MRk5CUVZOQkxFdEJRVXRETEVkQlEyeENMRWxCUVVsRExFVkJRVWxPTEUxQlFVMUxMRWRCUVV0QkxFZEJRMlpGTEVWQlFVbFFMRTlCUVU5TExFZEJRMllzVDBGQlQwTXNSMEZCUzBVc1JVRkJRVUVzUlVGQlZ5eEZRVUZKUkN4SFFVRkxReXhGUVVGQlFTeEhRVUZaTEVkQlFVdEdMRVZCUVVsRExFbEJRVTFPTEVsQlFVbEpMRWRCUVV0S0xFdEJRVXRKSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1YldGMGFDNTBZVzVvTG1wekluMD0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpOyRleHBvcnQoJGV4cG9ydC5TLFwiTWF0aFwiLHt0cnVuYzpmdW5jdGlvbiB0cnVuYyhyKXtyZXR1cm4ocj4wP01hdGguZmxvb3I6TWF0aC5jZWlsKShyKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV0WVhSb0xuUnlkVzVqTG1weklsMHNJbTVoYldWeklqcGJJaVJsZUhCdmNuUWlMQ0p5WlhGMWFYSmxJaXdpVXlJc0luUnlkVzVqSWl3aWFYUWlMQ0pOWVhSb0lpd2labXh2YjNJaUxDSmpaV2xzSWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hSUVVGVlF5eFJRVUZSTEdGQlJYUkNSQ3hSUVVGUlFTeFJRVUZSUlN4RlFVRkhMRTlCUVZFc1EwRkRla0pETEUxQlFVOHNVMEZCVTBFc1RVRkJUVU1zUjBGRGNFSXNUMEZCVVVFc1JVRkJTeXhGUVVGSlF5eExRVUZMUXl4TlFVRlJSQ3hMUVVGTFJTeE5RVUZOU0NJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG0xaGRHZ3VkSEoxYm1NdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIGdsb2JhbD1yZXF1aXJlKFwiLi9fZ2xvYmFsXCIpLGhhcz1yZXF1aXJlKFwiLi9faGFzXCIpLGNvZj1yZXF1aXJlKFwiLi9fY29mXCIpLGluaGVyaXRJZlJlcXVpcmVkPXJlcXVpcmUoXCIuL19pbmhlcml0LWlmLXJlcXVpcmVkXCIpLHRvUHJpbWl0aXZlPXJlcXVpcmUoXCIuL190by1wcmltaXRpdmVcIiksZmFpbHM9cmVxdWlyZShcIi4vX2ZhaWxzXCIpLGdPUE49cmVxdWlyZShcIi4vX29iamVjdC1nb3BuXCIpLmYsZ09QRD1yZXF1aXJlKFwiLi9fb2JqZWN0LWdvcGRcIikuZixkUD1yZXF1aXJlKFwiLi9fb2JqZWN0LWRwXCIpLmYsJHRyaW09cmVxdWlyZShcIi4vX3N0cmluZy10cmltXCIpLnRyaW0sTlVNQkVSPVwiTnVtYmVyXCIsJE51bWJlcj1nbG9iYWxbTlVNQkVSXSxCYXNlPSROdW1iZXIscHJvdG89JE51bWJlci5wcm90b3R5cGUsQlJPS0VOX0NPRj1jb2YocmVxdWlyZShcIi4vX29iamVjdC1jcmVhdGVcIikocHJvdG8pKT09TlVNQkVSLFRSSU09XCJ0cmltXCJpbiBTdHJpbmcucHJvdG90eXBlLHRvTnVtYmVyPWZ1bmN0aW9uKGUpe3ZhciByPXRvUHJpbWl0aXZlKGUsITEpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiByJiZyLmxlbmd0aD4yKXt2YXIgdCxpLG8sdT0ocj1UUklNP3IudHJpbSgpOiR0cmltKHIsMykpLmNoYXJDb2RlQXQoMCk7aWYoNDM9PT11fHw0NT09PXUpe2lmKDg4PT09KHQ9ci5jaGFyQ29kZUF0KDIpKXx8MTIwPT09dClyZXR1cm4gTmFOfWVsc2UgaWYoNDg9PT11KXtzd2l0Y2goci5jaGFyQ29kZUF0KDEpKXtjYXNlIDY2OmNhc2UgOTg6aT0yLG89NDk7YnJlYWs7Y2FzZSA3OTpjYXNlIDExMTppPTgsbz01NTticmVhaztkZWZhdWx0OnJldHVybityfWZvcih2YXIgYSxOPXIuc2xpY2UoMikscz0wLG49Ti5sZW5ndGg7czxuO3MrKylpZigoYT1OLmNoYXJDb2RlQXQocykpPDQ4fHxhPm8pcmV0dXJuIE5hTjtyZXR1cm4gcGFyc2VJbnQoTixpKX19cmV0dXJuK3J9O2lmKCEkTnVtYmVyKFwiIDBvMVwiKXx8ISROdW1iZXIoXCIwYjFcIil8fCROdW1iZXIoXCIrMHgxXCIpKXskTnVtYmVyPWZ1bmN0aW9uIE51bWJlcihlKXt2YXIgcj1hcmd1bWVudHMubGVuZ3RoPDE/MDplLHQ9dGhpcztyZXR1cm4gdCBpbnN0YW5jZW9mICROdW1iZXImJihCUk9LRU5fQ09GP2ZhaWxzKGZ1bmN0aW9uKCl7cHJvdG8udmFsdWVPZi5jYWxsKHQpfSk6Y29mKHQpIT1OVU1CRVIpP2luaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKHRvTnVtYmVyKHIpKSx0LCROdW1iZXIpOnRvTnVtYmVyKHIpfTtmb3IodmFyIGtleSxrZXlzPXJlcXVpcmUoXCIuL19kZXNjcmlwdG9yc1wiKT9nT1BOKEJhc2UpOlwiTUFYX1ZBTFVFLE1JTl9WQUxVRSxOYU4sTkVHQVRJVkVfSU5GSU5JVFksUE9TSVRJVkVfSU5GSU5JVFksRVBTSUxPTixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixNQVhfU0FGRV9JTlRFR0VSLE1JTl9TQUZFX0lOVEVHRVIscGFyc2VGbG9hdCxwYXJzZUludCxpc0ludGVnZXJcIi5zcGxpdChcIixcIiksaj0wO2tleXMubGVuZ3RoPmo7aisrKWhhcyhCYXNlLGtleT1rZXlzW2pdKSYmIWhhcygkTnVtYmVyLGtleSkmJmRQKCROdW1iZXIsa2V5LGdPUEQoQmFzZSxrZXkpKTskTnVtYmVyLnByb3RvdHlwZT1wcm90byxwcm90by5jb25zdHJ1Y3Rvcj0kTnVtYmVyLHJlcXVpcmUoXCIuL19yZWRlZmluZVwiKShnbG9iYWwsTlVNQkVSLCROdW1iZXIpfVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXVkVzFpWlhJdVkyOXVjM1J5ZFdOMGIzSXVhbk1pWFN3aWJtRnRaWE1pT2xzaVoyeHZZbUZzSWl3aWNtVnhkV2x5WlNJc0ltaGhjeUlzSW1OdlppSXNJbWx1YUdWeWFYUkpabEpsY1hWcGNtVmtJaXdpZEc5UWNtbHRhWFJwZG1VaUxDSm1ZV2xzY3lJc0ltZFBVRTRpTENKbUlpd2laMDlRUkNJc0ltUlFJaXdpSkhSeWFXMGlMQ0owY21sdElpd2lUbFZOUWtWU0lpd2lKRTUxYldKbGNpSXNJa0poYzJVaUxDSndjbTkwYnlJc0luQnliM1J2ZEhsd1pTSXNJa0pTVDB0RlRsOURUMFlpTENKVVVrbE5JaXdpVTNSeWFXNW5JaXdpZEc5T2RXMWlaWElpTENKaGNtZDFiV1Z1ZENJc0ltbDBJaXdpYkdWdVozUm9JaXdpZEdocGNtUWlMQ0p5WVdScGVDSXNJbTFoZUVOdlpHVWlMQ0ptYVhKemRDSXNJbU5vWVhKRGIyUmxRWFFpTENKT1lVNGlMQ0pqYjJSbElpd2laR2xuYVhSeklpd2ljMnhwWTJVaUxDSnBJaXdpYkNJc0luQmhjbk5sU1c1MElpd2lUblZ0WW1WeUlpd2lkbUZzZFdVaUxDSmhjbWQxYldWdWRITWlMQ0owYUdGMElpd2lkR2hwY3lJc0luWmhiSFZsVDJZaUxDSmpZV3hzSWl3aWEyVjVJaXdpYTJWNWN5SXNJbk53YkdsMElpd2lhaUlzSW1OdmJuTjBjblZqZEc5eUlsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVU5CTEVsQlFVbEJMRTlCUVZORExGRkJRVkVzWVVGRGFrSkRMRWxCUVUxRUxGRkJRVkVzVlVGRFpFVXNTVUZCVFVZc1VVRkJVU3hWUVVOa1J5eHJRa0ZCYjBKSUxGRkJRVkVzTUVKQlF6VkNTU3haUVVGalNpeFJRVUZSTEcxQ1FVTjBRa3NzVFVGQlVVd3NVVUZCVVN4WlFVTm9RazBzUzBGQlQwNHNVVUZCVVN4clFrRkJhMEpQTEVWQlEycERReXhMUVVGUFVpeFJRVUZSTEd0Q1FVRnJRazhzUlVGRGFrTkZMRWRCUVV0VUxGRkJRVkVzWjBKQlFXZENUeXhGUVVNM1FrY3NUVUZCVVZZc1VVRkJVU3hyUWtGQmEwSlhMRXRCUTJ4RFF5eFBRVUZUTEZOQlExUkRMRkZCUVZWa0xFOUJRVTloTEZGQlEycENSU3hMUVVGUFJDeFJRVU5RUlN4TlFVRlJSaXhSUVVGUlJ5eFZRVVZvUWtNc1YwRkJZV1lzU1VGQlNVWXNVVUZCVVN4dFFrRkJVa0VzUTBGQk5FSmxMRk5CUVZkSUxFOUJRM2hFVFN4TFFVRlBMRk5CUVZWRExFOUJRVTlJTEZWQlIzaENTU3hUUVVGWExGTkJRVlZETEVkQlEzWkNMRWxCUVVsRExFVkJRVXRzUWl4WlFVRlphVUlzUjBGQlZTeEhRVU12UWl4SFFVRnBRaXhwUWtGQlRrTXNSMEZCYTBKQkxFVkJRVWRETEU5QlFWTXNSVUZCUnl4RFFVVXhReXhKUVVOSlF5eEZRVUZQUXl4RlFVRlBReXhGUVVSa1F5eEhRVVJLVEN4RlFVRkxTaXhMUVVGUFNTeEZRVUZIV0N4UFFVRlRSQ3hOUVVGTldTeEZRVUZKTEVsQlEyNUNUU3hYUVVGWExFZEJSVEZDTEVkQlFXTXNTMEZCVmtRc1IwRkJNRUlzUzBGQlZrRXNSMEZGYkVJc1IwRkJZeXhOUVVSa1NDeEZRVUZSUml4RlFVRkhUU3hYUVVGWExFdEJRMUVzVFVGQlZrb3NSVUZCWlN4UFFVRlBTeXhUUVVOeVF5eEhRVUZqTEV0QlFWWkdMRVZCUVdNc1EwRkRka0lzVDBGQlVVd3NSVUZCUjAwc1YwRkJWeXhKUVVOd1FpeExRVUZMTEVkQlFVa3NTMEZCU3l4SFFVRkpTQ3hGUVVGUkxFVkJRVWRETEVWQlFWVXNSMEZCU1N4TlFVTXpReXhMUVVGTExFZEJRVWtzUzBGQlN5eEpRVUZMUkN4RlFVRlJMRVZCUVVkRExFVkJRVlVzUjBGQlNTeE5RVU0xUXl4UlFVRlRMRTlCUVZGS0xFVkJSVzVDTEVsQlFVc3NTVUZCYjBSUkxFVkJRV2hFUXl4RlFVRlRWQ3hGUVVGSFZTeE5RVUZOTEVkQlFVbERMRVZCUVVrc1JVRkJSME1zUlVGQlNVZ3NSVUZCVDFJc1QwRkJZMVVzUlVGQlNVTXNSVUZCUjBRc1NVRkpjRVVzU1VGSVFVZ3NSVUZCVDBNc1JVRkJUMGdzVjBGQlYwc3NTVUZIWkN4SlFVRk5TQ3hGUVVGUFNpeEZRVUZUTEU5QlFVOUhMRWxCUTNoRExFOUJRVTlOTEZOQlFWTktMRVZCUVZGT0xFbEJSVFZDTEU5QlFWRklMRWRCUjFvc1NVRkJTMVFzVVVGQlVTeFZRVUZaUVN4UlFVRlJMRkZCUVZWQkxGRkJRVkVzVVVGQlV5eERRVU14UkVFc1VVRkJWU3hUUVVGVGRVSXNUMEZCVDBNc1IwRkRlRUlzU1VGQlNXWXNSVUZCUzJkQ0xGVkJRVlZtTEU5QlFWTXNSVUZCU1N4RlFVRkpZeXhGUVVOb1EwVXNSVUZCVDBNc1MwRkRXQ3hQUVVGUFJDeGhRVUZuUWpGQ0xGVkJSV3BDU1N4WFFVRmhXaXhOUVVGTkxGZEJRV05WTEUxQlFVMHdRaXhSUVVGUlF5eExRVUZMU0N4TFFVRlpja01zU1VGQlNYRkRMRWxCUVZNelFpeFJRVU0zUlZRc2EwSkJRV3RDTEVsQlFVbFhMRXRCUVV0TkxGTkJRVk5GTEVsQlFVMXBRaXhGUVVGTk1VSXNVMEZCVjA4c1UwRkJVMFVzU1VGRk5VVXNTVUZCU3l4SlFVMW5RbkZDTEVsQlRscERMRXRCUVU4MVF5eFJRVUZSTEd0Q1FVRnZRazBzUzBGQlMxRXNUVUZCVVN3MlMwRk5ka1FyUWl4TlFVRk5MRXRCUVUxRExFVkJRVWtzUlVGQlVVWXNTMEZCUzNKQ0xFOUJRVk4xUWl4RlFVRkhRU3hKUVVOeVF6ZERMRWxCUVVsaExFdEJRVTAyUWl4SlFVRk5ReXhMUVVGTFJTeE5RVUZSTjBNc1NVRkJTVmtzVVVGQlV6aENMRTFCUXpWRGJFTXNSMEZCUjBrc1VVRkJVemhDTEVsQlFVdHVReXhMUVVGTFRTeExRVUZOTmtJc1RVRkhhRU01UWl4UlFVRlJSeXhWUVVGWlJDeE5RVU53UWtFc1RVRkJUV2RETEZsQlFXTnNReXhSUVVOd1FtSXNVVUZCVVN4alFVRlNRU3hEUVVGMVFrUXNUMEZCVVdFc1QwRkJVVU1pTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV1ZFcxaVpYSXVZMjl1YzNSeWRXTjBiM0l1YW5NaWZRPT0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpOyRleHBvcnQoJGV4cG9ydC5TLFwiTnVtYmVyXCIse0VQU0lMT046TWF0aC5wb3coMiwtNTIpfSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1dWRXMWlaWEl1WlhCemFXeHZiaTVxY3lKZExDSnVZVzFsY3lJNld5SWtaWGh3YjNKMElpd2ljbVZ4ZFdseVpTSXNJbE1pTENKRlVGTkpURTlPSWl3aVRXRjBhQ0lzSW5CdmR5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwRXNTVUZCU1VFc1VVRkJWVU1zVVVGQlVTeGhRVVYwUWtRc1VVRkJVVUVzVVVGQlVVVXNSVUZCUnl4VFFVRlZMRU5CUVVWRExGRkJRVk5ETEV0QlFVdERMRWxCUVVrc1IwRkJTU0lzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbTUxYldKbGNpNWxjSE5wYkc5dUxtcHpJbjA9IiwidmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKSxfaXNGaW5pdGU9cmVxdWlyZShcIi4vX2dsb2JhbFwiKS5pc0Zpbml0ZTskZXhwb3J0KCRleHBvcnQuUyxcIk51bWJlclwiLHtpc0Zpbml0ZTpmdW5jdGlvbiBpc0Zpbml0ZShpKXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgaSYmX2lzRmluaXRlKGkpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXVkVzFpWlhJdWFYTXRabWx1YVhSbExtcHpJbDBzSW01aGJXVnpJanBiSWlSbGVIQnZjblFpTENKeVpYRjFhWEpsSWl3aVgybHpSbWx1YVhSbElpd2lhWE5HYVc1cGRHVWlMQ0pUSWl3aWFYUWlYU3dpYldGd2NHbHVaM01pT2lKQlFVTkJMRWxCUVVsQkxGRkJRVlZETEZGQlFWRXNZVUZEYkVKRExGVkJRVmxFTEZGQlFWRXNZVUZCWVVVc1UwRkZja05JTEZGQlFWRkJMRkZCUVZGSkxFVkJRVWNzVTBGQlZTeERRVU16UWtRc1UwRkJWU3hUUVVGVFFTeFRRVUZUUlN4SFFVTXhRaXhOUVVGdlFpeHBRa0ZCVGtFc1IwRkJhMEpJTEZWQlFWVkhJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXViblZ0WW1WeUxtbHpMV1pwYm1sMFpTNXFjeUo5IiwidmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKTskZXhwb3J0KCRleHBvcnQuUyxcIk51bWJlclwiLHtpc0ludGVnZXI6cmVxdWlyZShcIi4vX2lzLWludGVnZXJcIil9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV1ZFcxaVpYSXVhWE10YVc1MFpXZGxjaTVxY3lKZExDSnVZVzFsY3lJNld5SWtaWGh3YjNKMElpd2ljbVZ4ZFdseVpTSXNJbE1pTENKcGMwbHVkR1ZuWlhJaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVOQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc1lVRkZkRUpFTEZGQlFWRkJMRkZCUVZGRkxFVkJRVWNzVTBGQlZTeERRVUZGUXl4VlFVRlhSaXhSUVVGUklpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWJuVnRZbVZ5TG1sekxXbHVkR1ZuWlhJdWFuTWlmUT09IiwidmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKTskZXhwb3J0KCRleHBvcnQuUyxcIk51bWJlclwiLHtpc05hTjpmdW5jdGlvbiBpc05hTihyKXtyZXR1cm4gciE9cn19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV1ZFcxaVpYSXVhWE10Ym1GdUxtcHpJbDBzSW01aGJXVnpJanBiSWlSbGVIQnZjblFpTENKeVpYRjFhWEpsSWl3aVV5SXNJbWx6VG1GT0lpd2liblZ0WW1WeUlsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHRkJSWFJDUkN4UlFVRlJRU3hSUVVGUlJTeEZRVUZITEZOQlFWVXNRMEZETTBKRExFMUJRVThzVTBGQlUwRXNUVUZCVFVNc1IwRkZjRUlzVDBGQlQwRXNSMEZCVlVFaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1dWRXMWlaWEl1YVhNdGJtRnVMbXB6SW4wPSIsInZhciAkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIiksaXNJbnRlZ2VyPXJlcXVpcmUoXCIuL19pcy1pbnRlZ2VyXCIpLGFicz1NYXRoLmFiczskZXhwb3J0KCRleHBvcnQuUyxcIk51bWJlclwiLHtpc1NhZmVJbnRlZ2VyOmZ1bmN0aW9uIGlzU2FmZUludGVnZXIoZSl7cmV0dXJuIGlzSW50ZWdlcihlKSYmYWJzKGUpPD05MDA3MTk5MjU0NzQwOTkxfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXVkVzFpWlhJdWFYTXRjMkZtWlMxcGJuUmxaMlZ5TG1weklsMHNJbTVoYldWeklqcGJJaVJsZUhCdmNuUWlMQ0p5WlhGMWFYSmxJaXdpYVhOSmJuUmxaMlZ5SWl3aVlXSnpJaXdpVFdGMGFDSXNJbE1pTENKcGMxTmhabVZKYm5SbFoyVnlJaXdpYm5WdFltVnlJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR0ZCUTJ4Q1F5eFZRVUZaUkN4UlFVRlJMR2xDUVVOd1FrVXNTVUZCVFVNc1MwRkJTMFFzU1VGRlprZ3NVVUZCVVVFc1VVRkJVVXNzUlVGQlJ5eFRRVUZWTEVOQlF6TkNReXhqUVVGbExGTkJRVk5CTEdOQlFXTkRMRWRCUTNCRExFOUJRVTlNTEZWQlFWVkxMRWxCUVZkS0xFbEJRVWxKTEVsQlFWY2lMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXVkVzFpWlhJdWFYTXRjMkZtWlMxcGJuUmxaMlZ5TG1wekluMD0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpOyRleHBvcnQoJGV4cG9ydC5TLFwiTnVtYmVyXCIse01BWF9TQUZFX0lOVEVHRVI6OTAwNzE5OTI1NDc0MDk5MX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXVkVzFpWlhJdWJXRjRMWE5oWm1VdGFXNTBaV2RsY2k1cWN5SmRMQ0p1WVcxbGN5STZXeUlrWlhod2IzSjBJaXdpY21WeGRXbHlaU0lzSWxNaUxDSk5RVmhmVTBGR1JWOUpUbFJGUjBWU0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHRkJSWFJDUkN4UlFVRlJRU3hSUVVGUlJTeEZRVUZITEZOQlFWVXNRMEZCUlVNc2FVSkJRV3RDSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1Ym5WdFltVnlMbTFoZUMxellXWmxMV2x1ZEdWblpYSXVhbk1pZlE9PSIsInZhciAkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIik7JGV4cG9ydCgkZXhwb3J0LlMsXCJOdW1iZXJcIix7TUlOX1NBRkVfSU5URUdFUjotOTAwNzE5OTI1NDc0MDk5MX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXVkVzFpWlhJdWJXbHVMWE5oWm1VdGFXNTBaV2RsY2k1cWN5SmRMQ0p1WVcxbGN5STZXeUlrWlhod2IzSjBJaXdpY21WeGRXbHlaU0lzSWxNaUxDSk5TVTVmVTBGR1JWOUpUbFJGUjBWU0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHRkJSWFJDUkN4UlFVRlJRU3hSUVVGUlJTeEZRVUZITEZOQlFWVXNRMEZCUlVNc2EwSkJRVzFDSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1Ym5WdFltVnlMbTFwYmkxellXWmxMV2x1ZEdWblpYSXVhbk1pZlE9PSIsInZhciAkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIiksJHBhcnNlRmxvYXQ9cmVxdWlyZShcIi4vX3BhcnNlLWZsb2F0XCIpOyRleHBvcnQoJGV4cG9ydC5TKyRleHBvcnQuRiooTnVtYmVyLnBhcnNlRmxvYXQhPSRwYXJzZUZsb2F0KSxcIk51bWJlclwiLHtwYXJzZUZsb2F0OiRwYXJzZUZsb2F0fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1dWRXMWlaWEl1Y0dGeWMyVXRabXh2WVhRdWFuTWlYU3dpYm1GdFpYTWlPbHNpSkdWNGNHOXlkQ0lzSW5KbGNYVnBjbVVpTENJa2NHRnljMlZHYkc5aGRDSXNJbE1pTENKR0lpd2lUblZ0WW1WeUlpd2ljR0Z5YzJWR2JHOWhkQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVOc1FrTXNXVUZCWTBRc1VVRkJVU3hyUWtGRk1VSkVMRkZCUVZGQkxGRkJRVkZITEVWQlFVbElMRkZCUVZGSkxFZEJRVXRETEU5QlFVOURMRmxCUVdOS0xHRkJRV01zVTBGQlZTeERRVUZGU1N4WFFVRlpTaUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbTUxYldKbGNpNXdZWEp6WlMxbWJHOWhkQzVxY3lKOSIsInZhciAkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIiksJHBhcnNlSW50PXJlcXVpcmUoXCIuL19wYXJzZS1pbnRcIik7JGV4cG9ydCgkZXhwb3J0LlMrJGV4cG9ydC5GKihOdW1iZXIucGFyc2VJbnQhPSRwYXJzZUludCksXCJOdW1iZXJcIix7cGFyc2VJbnQ6JHBhcnNlSW50fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1dWRXMWlaWEl1Y0dGeWMyVXRhVzUwTG1weklsMHNJbTVoYldWeklqcGJJaVJsZUhCdmNuUWlMQ0p5WlhGMWFYSmxJaXdpSkhCaGNuTmxTVzUwSWl3aVV5SXNJa1lpTENKT2RXMWlaWElpTENKd1lYSnpaVWx1ZENKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1NVRkJTVUVzVVVGQlZVTXNVVUZCVVN4aFFVTnNRa01zVlVGQldVUXNVVUZCVVN4blFrRkZlRUpFTEZGQlFWRkJMRkZCUVZGSExFVkJRVWxJTEZGQlFWRkpMRWRCUVV0RExFOUJRVTlETEZWQlFWbEtMRmRCUVZrc1UwRkJWU3hEUVVGRlNTeFRRVUZWU2lJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG01MWJXSmxjaTV3WVhKelpTMXBiblF1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLHRvSW50ZWdlcj1yZXF1aXJlKFwiLi9fdG8taW50ZWdlclwiKSxhTnVtYmVyVmFsdWU9cmVxdWlyZShcIi4vX2EtbnVtYmVyLXZhbHVlXCIpLHJlcGVhdD1yZXF1aXJlKFwiLi9fc3RyaW5nLXJlcGVhdFwiKSwkdG9GaXhlZD0xLi50b0ZpeGVkLGZsb29yPU1hdGguZmxvb3IsZGF0YT1bMCwwLDAsMCwwLDBdLEVSUk9SPVwiTnVtYmVyLnRvRml4ZWQ6IGluY29ycmVjdCBpbnZvY2F0aW9uIVwiLFpFUk89XCIwXCIsbXVsdGlwbHk9ZnVuY3Rpb24oZSxyKXtmb3IodmFyIHQ9LTEsaT1yOysrdDw2OylpKz1lKmRhdGFbdF0sZGF0YVt0XT1pJTFlNyxpPWZsb29yKGkvMWU3KX0sZGl2aWRlPWZ1bmN0aW9uKGUpe2Zvcih2YXIgcj02LHQ9MDstLXI+PTA7KXQrPWRhdGFbcl0sZGF0YVtyXT1mbG9vcih0L2UpLHQ9dCVlKjFlN30sbnVtVG9TdHJpbmc9ZnVuY3Rpb24oKXtmb3IodmFyIGU9NixyPVwiXCI7LS1lPj0wOylpZihcIlwiIT09cnx8MD09PWV8fDAhPT1kYXRhW2VdKXt2YXIgdD1TdHJpbmcoZGF0YVtlXSk7cj1cIlwiPT09cj90OnIrcmVwZWF0LmNhbGwoWkVSTyw3LXQubGVuZ3RoKSt0fXJldHVybiByfSxwb3c9ZnVuY3Rpb24oZSxyLHQpe3JldHVybiAwPT09cj90OnIlMj09MT9wb3coZSxyLTEsdCplKTpwb3coZSplLHIvMix0KX0sbG9nPWZ1bmN0aW9uKGUpe2Zvcih2YXIgcj0wLHQ9ZTt0Pj00MDk2OylyKz0xMix0Lz00MDk2O2Zvcig7dD49Mjspcis9MSx0Lz0yO3JldHVybiByfTskZXhwb3J0KCRleHBvcnQuUCskZXhwb3J0LkYqKCEhJHRvRml4ZWQmJihcIjAuMDAwXCIhPT04ZS01LnRvRml4ZWQoMyl8fFwiMVwiIT09LjkudG9GaXhlZCgwKXx8XCIxLjI1XCIhPT0xLjI1NS50b0ZpeGVkKDIpfHxcIjEwMDAwMDAwMDAwMDAwMDAxMjhcIiE9PSgweGRlMGI2YjNhNzY0MDA4MCkudG9GaXhlZCgwKSl8fCFyZXF1aXJlKFwiLi9fZmFpbHNcIikoZnVuY3Rpb24oKXskdG9GaXhlZC5jYWxsKHt9KX0pKSxcIk51bWJlclwiLHt0b0ZpeGVkOmZ1bmN0aW9uIHRvRml4ZWQoZSl7dmFyIHIsdCxpLG8sYT1hTnVtYmVyVmFsdWUodGhpcyxFUlJPUiksbj10b0ludGVnZXIoZSksbD1cIlwiLHU9WkVSTztpZihuPDB8fG4+MjApdGhyb3cgUmFuZ2VFcnJvcihFUlJPUik7aWYoYSE9YSlyZXR1cm5cIk5hTlwiO2lmKGE8PS0xZTIxfHxhPj0xZTIxKXJldHVybiBTdHJpbmcoYSk7aWYoYTwwJiYobD1cIi1cIixhPS1hKSxhPjFlLTIxKWlmKHQ9KHI9bG9nKGEqcG93KDIsNjksMSkpLTY5KTwwP2EqcG93KDIsLXIsMSk6YS9wb3coMixyLDEpLHQqPTQ1MDM1OTk2MjczNzA0OTYsKHI9NTItcik+MCl7Zm9yKG11bHRpcGx5KDAsdCksaT1uO2k+PTc7KW11bHRpcGx5KDFlNywwKSxpLT03O2ZvcihtdWx0aXBseShwb3coMTAsaSwxKSwwKSxpPXItMTtpPj0yMzspZGl2aWRlKDE8PDIzKSxpLT0yMztkaXZpZGUoMTw8aSksbXVsdGlwbHkoMSwxKSxkaXZpZGUoMiksdT1udW1Ub1N0cmluZygpfWVsc2UgbXVsdGlwbHkoMCx0KSxtdWx0aXBseSgxPDwtciwwKSx1PW51bVRvU3RyaW5nKCkrcmVwZWF0LmNhbGwoWkVSTyxuKTtyZXR1cm4gdT1uPjA/bCsoKG89dS5sZW5ndGgpPD1uP1wiMC5cIityZXBlYXQuY2FsbChaRVJPLG4tbykrdTp1LnNsaWNlKDAsby1uKStcIi5cIit1LnNsaWNlKG8tbikpOmwrdX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV1ZFcxaVpYSXVkRzh0Wm1sNFpXUXVhbk1pWFN3aWJtRnRaWE1pT2xzaUpHVjRjRzl5ZENJc0luSmxjWFZwY21VaUxDSjBiMGx1ZEdWblpYSWlMQ0poVG5WdFltVnlWbUZzZFdVaUxDSnlaWEJsWVhRaUxDSWtkRzlHYVhobFpDSXNJblJ2Um1sNFpXUWlMQ0ptYkc5dmNpSXNJazFoZEdnaUxDSmtZWFJoSWl3aVJWSlNUMUlpTENKYVJWSlBJaXdpYlhWc2RHbHdiSGtpTENKdUlpd2lZeUlzSW1raUxDSmpNaUlzSW1ScGRtbGtaU0lzSW01MWJWUnZVM1J5YVc1bklpd2ljeUlzSW5RaUxDSlRkSEpwYm1jaUxDSmpZV3hzSWl3aWJHVnVaM1JvSWl3aWNHOTNJaXdpZUNJc0ltRmpZeUlzSW14dlp5SXNJbmd5SWl3aVVDSXNJa1lpTENKbWNtRmpkR2x2YmtScFoybDBjeUlzSW1VaUxDSjZJaXdpYWlJc0ltc2lMQ0owYUdseklpd2laaUlzSW0waUxDSlNZVzVuWlVWeWNtOXlJaXdpYzJ4cFkyVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUTBFc1NVRkJTVUVzVVVGQlZVTXNVVUZCVVN4aFFVTnNRa01zVlVGQldVUXNVVUZCVVN4cFFrRkRjRUpGTEdGQlFXVkdMRkZCUVZFc2NVSkJRM1pDUnl4UFFVRlRTQ3hSUVVGUkxHOUNRVU5xUWtrc1UwRkJWeXhIUVVGSlF5eFJRVU5tUXl4TlFVRlJReXhMUVVGTFJDeE5RVU5pUlN4TFFVRlBMRU5CUVVNc1JVRkJSeXhGUVVGSExFVkJRVWNzUlVGQlJ5eEZRVUZITEVkQlEzWkNReXhOUVVGUkxIZERRVU5TUXl4TFFVRlBMRWxCUlZCRExGTkJRVmNzVTBGQlZVTXNSVUZCUjBNc1IwRkhNVUlzU1VGR1FTeEpRVUZKUXl4SFFVRkxMRVZCUTB4RExFVkJRVXRHTEVsQlEwRkRMRVZCUVVrc1IwRkRXRU1zUjBGQlRVZ3NSVUZCU1Vvc1MwRkJTMDBzUjBGRFprNHNTMEZCUzAwc1IwRkJTME1zUlVGQlN5eEpRVU5tUVN4RlFVRkxWQ3hOUVVGTlV5eEZRVUZMTEUxQlIyaENReXhQUVVGVExGTkJRVlZLTEVkQlIzSkNMRWxCUmtFc1NVRkJTVVVzUlVGQlNTeEZRVU5LUkN4RlFVRkpMRWxCUTBORExFZEJRVXNzUjBGRFdrUXNSMEZCUzB3c1MwRkJTMDBzUjBGRFZrNHNTMEZCUzAwc1IwRkJTMUlzVFVGQlRVOHNSVUZCU1VRc1IwRkRjRUpETEVWQlFVdEJMRVZCUVVsRUxFVkJRVXNzUzBGSFpFc3NXVUZCWXl4WFFVZG9RaXhKUVVaQkxFbEJRVWxJTEVWQlFVa3NSVUZEU2trc1JVRkJTU3hMUVVORFNpeEhRVUZMTEVkQlExb3NSMEZCVlN4TFFVRk9TU3hIUVVGclFpeEpRVUZPU2l4SFFVRjFRaXhKUVVGYVRpeExRVUZMVFN4SFFVRlZMRU5CUTNoRExFbEJRVWxMTEVWQlFVbERMRTlCUVU5YUxFdEJRVXROTEVsQlEzQkNTU3hGUVVGVkxFdEJRVTVCTEVWQlFWZERMRVZCUVVsRUxFVkJRVWxtTEU5QlFVOXJRaXhMUVVGTFdDeExRVUZOTEVWQlFVbFRMRVZCUVVWSExGRkJRVlZJTEVWQlJUTkVMRTlCUVU5RUxFZEJSVkJMTEVsQlFVMHNVMEZCVlVNc1JVRkJSMW9zUlVGQlIyRXNSMEZEZUVJc1QwRkJZU3hKUVVGT1lpeEZRVUZWWVN4RlFVRk5ZaXhGUVVGSkxFZEJRVTBzUlVGQlNWY3NTVUZCU1VNc1JVRkJSMW9zUlVGQlNTeEZRVUZIWVN4RlFVRk5SQ3hIUVVGTFJDeEpRVUZKUXl4RlFVRkpRU3hGUVVGSFdpeEZRVUZKTEVWQlFVZGhMRWxCUlRsRlF5eEpRVUZOTEZOQlFWVkdMRWRCUjJ4Q0xFbEJSa0VzU1VGQlNWb3NSVUZCU1N4RlFVTktaU3hGUVVGTFNDeEZRVU5HUnl4SFFVRk5MRTFCUTFobUxFZEJRVXNzUjBGRFRHVXNSMEZCVFN4TFFVVlNMRXRCUVU5QkxFZEJRVTBzUjBGRFdHWXNSMEZCU3l4RlFVTk1aU3hIUVVGTkxFVkJRMDRzVDBGQlQyWXNSMEZIV0dJc1VVRkJVVUVzVVVGQlVUWkNMRVZCUVVrM1FpeFJRVUZST0VJc1MwRkJUM3BDTEZkQlExWXNWVUZCZGtJc1MwRkJVVU1zVVVGQlVTeEpRVU5ITEUxQlFXNUNMRWRCUVVsQkxGRkJRVkVzU1VGRFV5eFRRVUZ5UWl4TlFVRk5RU3hSUVVGUkxFbEJRM1ZDTEhsQ1FVRnlReXh0UWtGQmMwSkJMRkZCUVZFc1RVRkRNVUpNTEZGQlFWRXNWMEZCVWtFc1EwRkJiMElzVjBGRmVFSkpMRk5CUVZOcFFpeExRVUZMTEU5QlExZ3NVMEZCVlN4RFFVTmlhRUlzVVVGQlV5eFRRVUZUUVN4UlFVRlJlVUlzUjBGRGVFSXNTVUZKU1VNc1JVRkJSME1zUlVGQlIwTXNSVUZCUjBNc1JVRktWRllzUlVGQlNYUkNMR0ZCUVdGcFF5eExRVUZOTVVJc1QwRkRka0l5UWl4RlFVRkpia01zVlVGQlZUWkNMRWRCUTJSYUxFVkJRVWtzUjBGRFNtMUNMRVZCUVVrelFpeExRVVZTTEVkQlFVa3dRaXhGUVVGSkxFZEJRVXRCTEVWQlFVa3NSMEZCU1N4TlFVRk5SU3hYUVVGWE4wSXNUMEZGZEVNc1IwRkJTV1VzUjBGQlMwRXNSVUZCUnl4TlFVRlBMRTFCUTI1Q0xFZEJRVWxCTEVsQlFVMHNUVUZCVVVFc1IwRkJTeXhMUVVGTkxFOUJRVTlLTEU5QlFVOUpMRWRCU3pORExFZEJTa2xCTEVWQlFVa3NTVUZEVGs0c1JVRkJTU3hKUVVOS1RTeEhRVUZMUVN4SFFVVklRU3hGUVVGSkxFMUJTMDRzUjBGSVFWRXNSMEZFUVVRc1JVRkJTVXdzU1VGQlNVWXNSVUZCU1VRc1NVRkJTU3hGUVVGSExFZEJRVWtzU1VGQlRTeEpRVU55UWl4RlFVRkpReXhGUVVGSlJDeEpRVUZKTEVkQlFVbFJMRVZCUVVjc1IwRkJTMUFzUlVGQlNVUXNTVUZCU1N4RlFVRkhVU3hGUVVGSExFZEJRemxEUXl4SFFVRkxMR3RDUVVOTVJDeEZRVUZKTEVkQlFVdEJMRWRCUTBRc1JVRkJSeXhEUVVkVUxFbEJSa0Z3UWl4VFFVRlRMRVZCUVVkeFFpeEhRVU5hUXl4RlFVRkpSeXhGUVVOSFNDeEhRVUZMTEVkQlExWjBRaXhUUVVGVExFbEJRVXNzUjBGRFpITkNMRWRCUVVzc1JVRkpVQ3hKUVVaQmRFSXNVMEZCVTFrc1NVRkJTU3hIUVVGSlZTeEZRVUZITEVkQlFVa3NSMEZEZUVKQkxFVkJRVWxHTEVWQlFVa3NSVUZEUkVVc1IwRkJTeXhKUVVOV2FrSXNUMEZCVHl4SFFVRkxMRWxCUTFwcFFpeEhRVUZMTEVkQlJWQnFRaXhQUVVGUExFZEJRVXRwUWl4SFFVTmFkRUlzVTBGQlV5eEZRVUZITEVkQlExcExMRTlCUVU4c1IwRkRVSEZDTEVWQlFVbHdRaXh0UWtGRlNrNHNVMEZCVXl4RlFVRkhjVUlzUjBGRFduSkNMRk5CUVZNc1NVRkJUVzlDTEVWQlFVY3NSMEZEYkVKTkxFVkJRVWx3UWl4alFVRm5RbVFzVDBGQlQydENMRXRCUVV0WUxFdEJRVTB3UWl4SFFWRjRReXhQUVVoQlF5eEZRVVpGUkN4RlFVRkpMRVZCUlVac1FpeEpRVVJLWjBJc1JVRkJTVWNzUlVGQlJXWXNVMEZEVVdNc1JVRkJTU3hMUVVGUGFrTXNUMEZCVDJ0Q0xFdEJRVXRZTEV0QlFVMHdRaXhGUVVGSlJpeEhRVUZMUnl4RlFVRkpRU3hGUVVGRlJTeE5RVUZOTEVWQlFVZE1MRVZCUVVsRkxFZEJRVXNzU1VGQlRVTXNSVUZCUlVVc1RVRkJUVXdzUlVGQlNVVXNTVUZGTVVac1FpeEZRVUZKYlVJaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1dWRXMWlaWEl1ZEc4dFptbDRaV1F1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLCRmYWlscz1yZXF1aXJlKFwiLi9fZmFpbHNcIiksYU51bWJlclZhbHVlPXJlcXVpcmUoXCIuL19hLW51bWJlci12YWx1ZVwiKSwkdG9QcmVjaXNpb249MS4udG9QcmVjaXNpb247JGV4cG9ydCgkZXhwb3J0LlArJGV4cG9ydC5GKigkZmFpbHMoZnVuY3Rpb24oKXtyZXR1cm5cIjFcIiE9PSR0b1ByZWNpc2lvbi5jYWxsKDEsdm9pZCAwKX0pfHwhJGZhaWxzKGZ1bmN0aW9uKCl7JHRvUHJlY2lzaW9uLmNhbGwoe30pfSkpLFwiTnVtYmVyXCIse3RvUHJlY2lzaW9uOmZ1bmN0aW9uIHRvUHJlY2lzaW9uKGkpe3ZhciByPWFOdW1iZXJWYWx1ZSh0aGlzLFwiTnVtYmVyI3RvUHJlY2lzaW9uOiBpbmNvcnJlY3QgaW52b2NhdGlvbiFcIik7cmV0dXJuIHZvaWQgMD09PWk/JHRvUHJlY2lzaW9uLmNhbGwocik6JHRvUHJlY2lzaW9uLmNhbGwocixpKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV1ZFcxaVpYSXVkRzh0Y0hKbFkybHphVzl1TG1weklsMHNJbTVoYldWeklqcGJJaVJsZUhCdmNuUWlMQ0p5WlhGMWFYSmxJaXdpSkdaaGFXeHpJaXdpWVU1MWJXSmxjbFpoYkhWbElpd2lKSFJ2VUhKbFkybHphVzl1SWl3aWRHOVFjbVZqYVhOcGIyNGlMQ0pRSWl3aVJpSXNJbU5oYkd3aUxDSjFibVJsWm1sdVpXUWlMQ0p3Y21WamFYTnBiMjRpTENKMGFHRjBJaXdpZEdocGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZEUVN4SlFVRkpRU3hSUVVGVlF5eFJRVUZSTEdGQlEyeENReXhQUVVGVFJDeFJRVUZSTEZsQlEycENSU3hoUVVGbFJpeFJRVUZSTEhGQ1FVTjJRa2NzWVVGQlpTeEhRVUZKUXl4WlFVVjJRa3dzVVVGQlVVRXNVVUZCVVUwc1JVRkJTVTRzVVVGQlVVOHNSMEZCUzB3c1QwRkJUeXhYUVVWMFF5eE5RVUV5UXl4TlFVRndRMFVzWVVGQllVa3NTMEZCU3l4UFFVRkhReXhQUVVOMlFsQXNUMEZCVHl4WFFVVmFSU3hoUVVGaFNTeExRVUZMTEU5QlEyWXNVMEZCVlN4RFFVTmlTQ3haUVVGaExGTkJRVk5CTEZsQlFWbExMRWRCUTJoRExFbEJRVWxETEVWQlFVOVNMR0ZCUVdGVExFdEJRVTBzTmtOQlF6bENMRmxCUVhGQ1NDeEpRVUZrUXl4RlFVRXdRazRzWVVGQllVa3NTMEZCUzBjc1IwRkJVVkFzWVVGQllVa3NTMEZCUzBjc1JVRkJUVVFpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV1ZFcxaVpYSXVkRzh0Y0hKbFkybHphVzl1TG1wekluMD0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpOyRleHBvcnQoJGV4cG9ydC5TKyRleHBvcnQuRixcIk9iamVjdFwiLHthc3NpZ246cmVxdWlyZShcIi4vX29iamVjdC1hc3NpZ25cIil9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV2WW1wbFkzUXVZWE56YVdkdUxtcHpJbDBzSW01aGJXVnpJanBiSWlSbGVIQnZjblFpTENKeVpYRjFhWEpsSWl3aVV5SXNJa1lpTENKaGMzTnBaMjRpWFN3aWJXRndjR2x1WjNNaU9pSkJRVU5CTEVsQlFVbEJMRkZCUVZWRExGRkJRVkVzWVVGRmRFSkVMRkZCUVZGQkxGRkJRVkZGTEVWQlFVbEdMRkZCUVZGSExFVkJRVWNzVTBGQlZTeERRVUZGUXl4UFFVRlJTQ3hSUVVGUklpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWIySnFaV04wTG1GemMybG5iaTVxY3lKOSIsInZhciAkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIik7JGV4cG9ydCgkZXhwb3J0LlMsXCJPYmplY3RcIix7Y3JlYXRlOnJlcXVpcmUoXCIuL19vYmplY3QtY3JlYXRlXCIpfSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1dlltcGxZM1F1WTNKbFlYUmxMbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2lVeUlzSW1OeVpXRjBaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVWMFFrUXNVVUZCVVVFc1VVRkJVVVVzUlVGQlJ5eFRRVUZWTEVOQlFVVkRMRTlCUVZGR0xGRkJRVkVpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVZM0psWVhSbExtcHpJbjA9IiwidmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKTskZXhwb3J0KCRleHBvcnQuUyskZXhwb3J0LkYqIXJlcXVpcmUoXCIuL19kZXNjcmlwdG9yc1wiKSxcIk9iamVjdFwiLHtkZWZpbmVQcm9wZXJ0aWVzOnJlcXVpcmUoXCIuL19vYmplY3QtZHBzXCIpfSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1dlltcGxZM1F1WkdWbWFXNWxMWEJ5YjNCbGNuUnBaWE11YW5NaVhTd2libUZ0WlhNaU9sc2lKR1Y0Y0c5eWRDSXNJbkpsY1hWcGNtVWlMQ0pUSWl3aVJpSXNJbVJsWm1sdVpWQnliM0JsY25ScFpYTWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRWxCUVVsQkxGRkJRVlZETEZGQlFWRXNZVUZGZEVKRUxGRkJRVkZCTEZGQlFWRkZMRVZCUVVsR0xGRkJRVkZITEVkQlFVdEdMRkZCUVZFc2EwSkJRVzFDTEZOQlFWVXNRMEZCUlVjc2FVSkJRV3RDU0N4UlFVRlJJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtUmxabWx1WlMxd2NtOXdaWEowYVdWekxtcHpJbjA9IiwidmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKTskZXhwb3J0KCRleHBvcnQuUyskZXhwb3J0LkYqIXJlcXVpcmUoXCIuL19kZXNjcmlwdG9yc1wiKSxcIk9iamVjdFwiLHtkZWZpbmVQcm9wZXJ0eTpyZXF1aXJlKFwiLi9fb2JqZWN0LWRwXCIpLmZ9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV2WW1wbFkzUXVaR1ZtYVc1bExYQnliM0JsY25SNUxtcHpJbDBzSW01aGJXVnpJanBiSWlSbGVIQnZjblFpTENKeVpYRjFhWEpsSWl3aVV5SXNJa1lpTENKa1pXWnBibVZRY205d1pYSjBlU0lzSW1ZaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc1lVRkZkRUpFTEZGQlFWRkJMRkZCUVZGRkxFVkJRVWxHTEZGQlFWRkhMRWRCUVV0R0xGRkJRVkVzYTBKQlFXMUNMRk5CUVZVc1EwRkJSVWNzWlVGQlowSklMRkZCUVZFc1owSkJRV2RDU1NJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVrWldacGJtVXRjSEp2Y0dWeWRIa3Vhbk1pZlE9PSIsInZhciBpc09iamVjdD1yZXF1aXJlKFwiLi9faXMtb2JqZWN0XCIpLG1ldGE9cmVxdWlyZShcIi4vX21ldGFcIikub25GcmVlemU7cmVxdWlyZShcIi4vX29iamVjdC1zYXBcIikoXCJmcmVlemVcIixmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24gZnJlZXplKHIpe3JldHVybiBlJiZpc09iamVjdChyKT9lKG1ldGEocikpOnJ9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1dlltcGxZM1F1Wm5KbFpYcGxMbXB6SWwwc0ltNWhiV1Z6SWpwYkltbHpUMkpxWldOMElpd2ljbVZ4ZFdseVpTSXNJbTFsZEdFaUxDSnZia1p5WldWNlpTSXNJaVJtY21WbGVtVWlMQ0ptY21WbGVtVWlMQ0pwZENKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUTBFc1NVRkJTVUVzVTBGQlYwTXNVVUZCVVN4blFrRkRia0pETEV0QlFVOUVMRkZCUVZFc1YwRkJWMFVzVTBGRk9VSkdMRkZCUVZFc1owSkJRVkpCTEVOQlFYbENMRk5CUVZVc1UwRkJWVWNzUjBGRE0wTXNUMEZCVHl4VFFVRlRReXhQUVVGUFF5eEhRVU55UWl4UFFVRlBSaXhIUVVGWFNpeFRRVUZUVFN4SFFVRk5SaXhGUVVGUlJpeExRVUZMU1N4SlFVRlBRU0lzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNW1jbVZsZW1VdWFuTWlmUT09IiwidmFyIHRvSU9iamVjdD1yZXF1aXJlKFwiLi9fdG8taW9iamVjdFwiKSwkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yPXJlcXVpcmUoXCIuL19vYmplY3QtZ29wZFwiKS5mO3JlcXVpcmUoXCIuL19vYmplY3Qtc2FwXCIpKFwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yXCIsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHIsZSl7cmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JT2JqZWN0KHIpLGUpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXZZbXBsWTNRdVoyVjBMVzkzYmkxd2NtOXdaWEowZVMxa1pYTmpjbWx3ZEc5eUxtcHpJbDBzSW01aGJXVnpJanBiSW5SdlNVOWlhbVZqZENJc0luSmxjWFZwY21VaUxDSWtaMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUlpd2laaUlzSW1kbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjaUlzSW1sMElpd2lhMlY1SWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hWUVVGWlF5eFJRVUZSTEdsQ1FVTndRa01zTUVKQlFUUkNSQ3hSUVVGUkxHdENRVUZyUWtVc1JVRkZNVVJHTEZGQlFWRXNaMEpCUVZKQkxFTkJRWGxDTERKQ1FVRTBRaXhYUVVOdVJDeFBRVUZQTEZOQlFWTkhMSGxDUVVGNVFrTXNSVUZCU1VNc1IwRkRNME1zVDBGQlQwb3NNRUpCUVRCQ1JpeFZRVUZWU3l4SFFVRkxReUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNW5aWFF0YjNkdUxYQnliM0JsY25SNUxXUmxjMk55YVhCMGIzSXVhbk1pZlE9PSIsInJlcXVpcmUoXCIuL19vYmplY3Qtc2FwXCIpKFwiZ2V0T3duUHJvcGVydHlOYW1lc1wiLGZ1bmN0aW9uKCl7cmV0dXJuIHJlcXVpcmUoXCIuL19vYmplY3QtZ29wbi1leHRcIikuZn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXZZbXBsWTNRdVoyVjBMVzkzYmkxd2NtOXdaWEowZVMxdVlXMWxjeTVxY3lKZExDSnVZVzFsY3lJNld5SnlaWEYxYVhKbElpd2laaUpkTENKdFlYQndhVzVuY3lJNklrRkJRMEZCTEZGQlFWRXNaMEpCUVZKQkxFTkJRWGxDTEhOQ1FVRjFRaXhYUVVNNVF5eFBRVUZQUVN4UlFVRlJMSE5DUVVGelFrTWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdVoyVjBMVzkzYmkxd2NtOXdaWEowZVMxdVlXMWxjeTVxY3lKOSIsInZhciB0b09iamVjdD1yZXF1aXJlKFwiLi9fdG8tb2JqZWN0XCIpLCRnZXRQcm90b3R5cGVPZj1yZXF1aXJlKFwiLi9fb2JqZWN0LWdwb1wiKTtyZXF1aXJlKFwiLi9fb2JqZWN0LXNhcFwiKShcImdldFByb3RvdHlwZU9mXCIsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YodCl7cmV0dXJuICRnZXRQcm90b3R5cGVPZih0b09iamVjdCh0KSl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1dlltcGxZM1F1WjJWMExYQnliM1J2ZEhsd1pTMXZaaTVxY3lKZExDSnVZVzFsY3lJNld5SjBiMDlpYW1WamRDSXNJbkpsY1hWcGNtVWlMQ0lrWjJWMFVISnZkRzkwZVhCbFQyWWlMQ0puWlhSUWNtOTBiM1I1Y0dWUFppSXNJbWwwSWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hUUVVGWFF5eFJRVUZSTEdkQ1FVTnVRa01zWjBKQlFXdENSQ3hSUVVGUkxHbENRVVU1UWtFc1VVRkJVU3huUWtGQlVrRXNRMEZCZVVJc2FVSkJRV3RDTEZkQlEzcERMRTlCUVU4c1UwRkJVMFVzWlVGQlpVTXNSMEZETjBJc1QwRkJUMFlzWjBKQlFXZENSaXhUUVVGVFNTSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtOWlhbVZqZEM1blpYUXRjSEp2ZEc5MGVYQmxMVzltTG1wekluMD0iLCJ2YXIgaXNPYmplY3Q9cmVxdWlyZShcIi4vX2lzLW9iamVjdFwiKTtyZXF1aXJlKFwiLi9fb2JqZWN0LXNhcFwiKShcImlzRXh0ZW5zaWJsZVwiLGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbiBpc0V4dGVuc2libGUoaSl7cmV0dXJuISFpc09iamVjdChpKSYmKCFlfHxlKGkpKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV2WW1wbFkzUXVhWE10WlhoMFpXNXphV0pzWlM1cWN5SmRMQ0p1WVcxbGN5STZXeUpwYzA5aWFtVmpkQ0lzSW5KbGNYVnBjbVVpTENJa2FYTkZlSFJsYm5OcFlteGxJaXdpYVhORmVIUmxibk5wWW14bElpd2lhWFFpWFN3aWJXRndjR2x1WjNNaU9pSkJRVU5CTEVsQlFVbEJMRk5CUVZkRExGRkJRVkVzWjBKQlJYWkNRU3hSUVVGUkxHZENRVUZTUVN4RFFVRjVRaXhsUVVGblFpeFRRVUZWUXl4SFFVTnFSQ3hQUVVGUExGTkJRVk5ETEdGQlFXRkRMRWRCUXpOQ0xGRkJRVTlLTEZOQlFWTkpMRTFCUVUxR0xFZEJRV2RDUVN4RlFVRmpSU0lzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNXBjeTFsZUhSbGJuTnBZbXhsTG1wekluMD0iLCJ2YXIgaXNPYmplY3Q9cmVxdWlyZShcIi4vX2lzLW9iamVjdFwiKTtyZXF1aXJlKFwiLi9fb2JqZWN0LXNhcFwiKShcImlzRnJvemVuXCIsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uIGlzRnJvemVuKHIpe3JldHVybiFpc09iamVjdChyKXx8ISFlJiZlKHIpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXZZbXBsWTNRdWFYTXRabkp2ZW1WdUxtcHpJbDBzSW01aGJXVnpJanBiSW1selQySnFaV04wSWl3aWNtVnhkV2x5WlNJc0lpUnBjMFp5YjNwbGJpSXNJbWx6Um5KdmVtVnVJaXdpYVhRaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVOQkxFbEJRVWxCTEZOQlFWZERMRkZCUVZFc1owSkJSWFpDUVN4UlFVRlJMR2RDUVVGU1FTeERRVUY1UWl4WFFVRlpMRk5CUVZWRExFZEJRemRETEU5QlFVOHNVMEZCVTBNc1UwRkJVME1zUjBGRGRrSXNUMEZCVDBvc1UwRkJVMGtzVFVGQlRVWXNSMEZCV1VFc1JVRkJWVVVpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVhWE10Wm5KdmVtVnVMbXB6SW4wPSIsInZhciBpc09iamVjdD1yZXF1aXJlKFwiLi9faXMtb2JqZWN0XCIpO3JlcXVpcmUoXCIuL19vYmplY3Qtc2FwXCIpKFwiaXNTZWFsZWRcIixmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24gaXNTZWFsZWQoaSl7cmV0dXJuIWlzT2JqZWN0KGkpfHwhIWUmJmUoaSl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1dlltcGxZM1F1YVhNdGMyVmhiR1ZrTG1weklsMHNJbTVoYldWeklqcGJJbWx6VDJKcVpXTjBJaXdpY21WeGRXbHlaU0lzSWlScGMxTmxZV3hsWkNJc0ltbHpVMlZoYkdWa0lpd2lhWFFpWFN3aWJXRndjR2x1WjNNaU9pSkJRVU5CTEVsQlFVbEJMRk5CUVZkRExGRkJRVkVzWjBKQlJYWkNRU3hSUVVGUkxHZENRVUZTUVN4RFFVRjVRaXhYUVVGWkxGTkJRVlZETEVkQlF6ZERMRTlCUVU4c1UwRkJVME1zVTBGQlUwTXNSMEZEZGtJc1QwRkJUMG9zVTBGQlUwa3NUVUZCVFVZc1IwRkJXVUVzUlVGQlZVVWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdWFYTXRjMlZoYkdWa0xtcHpJbjA9IiwidmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKTskZXhwb3J0KCRleHBvcnQuUyxcIk9iamVjdFwiLHtpczpyZXF1aXJlKFwiLi9fc2FtZS12YWx1ZVwiKX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXZZbXBsWTNRdWFYTXVhbk1pWFN3aWJtRnRaWE1pT2xzaUpHVjRjRzl5ZENJc0luSmxjWFZwY21VaUxDSlRJaXdpYVhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVOQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc1lVRkRkRUpFTEZGQlFWRkJMRkZCUVZGRkxFVkJRVWNzVTBGQlZTeERRVUZGUXl4SFFVRkpSaXhSUVVGUklpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWIySnFaV04wTG1sekxtcHpJbjA9IiwidmFyIHRvT2JqZWN0PXJlcXVpcmUoXCIuL190by1vYmplY3RcIiksJGtleXM9cmVxdWlyZShcIi4vX29iamVjdC1rZXlzXCIpO3JlcXVpcmUoXCIuL19vYmplY3Qtc2FwXCIpKFwia2V5c1wiLGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uIGtleXMoZSl7cmV0dXJuICRrZXlzKHRvT2JqZWN0KGUpKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV2WW1wbFkzUXVhMlY1Y3k1cWN5SmRMQ0p1WVcxbGN5STZXeUowYjA5aWFtVmpkQ0lzSW5KbGNYVnBjbVVpTENJa2EyVjVjeUlzSW10bGVYTWlMQ0pwZENKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUTBFc1NVRkJTVUVzVTBGQlYwTXNVVUZCVVN4blFrRkRia0pETEUxQlFWRkVMRkZCUVZFc2EwSkJSWEJDUVN4UlFVRlJMR2RDUVVGU1FTeERRVUY1UWl4UFFVRlJMRmRCUXk5Q0xFOUJRVThzVTBGQlUwVXNTMEZCUzBNc1IwRkRia0lzVDBGQlQwWXNUVUZCVFVZc1UwRkJVMGtpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVhMlY1Y3k1cWN5SjkiLCJ2YXIgaXNPYmplY3Q9cmVxdWlyZShcIi4vX2lzLW9iamVjdFwiKSxtZXRhPXJlcXVpcmUoXCIuL19tZXRhXCIpLm9uRnJlZXplO3JlcXVpcmUoXCIuL19vYmplY3Qtc2FwXCIpKFwicHJldmVudEV4dGVuc2lvbnNcIixmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModCl7cmV0dXJuIGUmJmlzT2JqZWN0KHQpP2UobWV0YSh0KSk6dH19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV2WW1wbFkzUXVjSEpsZG1WdWRDMWxlSFJsYm5OcGIyNXpMbXB6SWwwc0ltNWhiV1Z6SWpwYkltbHpUMkpxWldOMElpd2ljbVZ4ZFdseVpTSXNJbTFsZEdFaUxDSnZia1p5WldWNlpTSXNJaVJ3Y21WMlpXNTBSWGgwWlc1emFXOXVjeUlzSW5CeVpYWmxiblJGZUhSbGJuTnBiMjV6SWl3aWFYUWlYU3dpYldGd2NHbHVaM01pT2lKQlFVTkJMRWxCUVVsQkxGTkJRVmRETEZGQlFWRXNaMEpCUTI1Q1F5eExRVUZQUkN4UlFVRlJMRmRCUVZkRkxGTkJSVGxDUml4UlFVRlJMR2RDUVVGU1FTeERRVUY1UWl4dlFrRkJjVUlzVTBGQlZVY3NSMEZEZEVRc1QwRkJUeXhUUVVGVFF5eHJRa0ZCYTBKRExFZEJRMmhETEU5QlFVOUdMRWRCUVhOQ1NpeFRRVUZUVFN4SFFVRk5SaXhGUVVGdFFrWXNTMEZCUzBrc1NVRkJUMEVpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVjSEpsZG1WdWRDMWxlSFJsYm5OcGIyNXpMbXB6SW4wPSIsInZhciBpc09iamVjdD1yZXF1aXJlKFwiLi9faXMtb2JqZWN0XCIpLG1ldGE9cmVxdWlyZShcIi4vX21ldGFcIikub25GcmVlemU7cmVxdWlyZShcIi4vX29iamVjdC1zYXBcIikoXCJzZWFsXCIsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uIHNlYWwocil7cmV0dXJuIGUmJmlzT2JqZWN0KHIpP2UobWV0YShyKSk6cn19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV2WW1wbFkzUXVjMlZoYkM1cWN5SmRMQ0p1WVcxbGN5STZXeUpwYzA5aWFtVmpkQ0lzSW5KbGNYVnBjbVVpTENKdFpYUmhJaXdpYjI1R2NtVmxlbVVpTENJa2MyVmhiQ0lzSW5ObFlXd2lMQ0pwZENKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUTBFc1NVRkJTVUVzVTBGQlYwTXNVVUZCVVN4blFrRkRia0pETEV0QlFVOUVMRkZCUVZFc1YwRkJWMFVzVTBGRk9VSkdMRkZCUVZFc1owSkJRVkpCTEVOQlFYbENMRTlCUVZFc1UwRkJWVWNzUjBGRGVrTXNUMEZCVHl4VFFVRlRReXhMUVVGTFF5eEhRVU51UWl4UFFVRlBSaXhIUVVGVFNpeFRRVUZUVFN4SFFVRk5SaXhGUVVGTlJpeExRVUZMU1N4SlFVRlBRU0lzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNXpaV0ZzTG1wekluMD0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpOyRleHBvcnQoJGV4cG9ydC5TLFwiT2JqZWN0XCIse3NldFByb3RvdHlwZU9mOnJlcXVpcmUoXCIuL19zZXQtcHJvdG9cIikuc2V0fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1dlltcGxZM1F1YzJWMExYQnliM1J2ZEhsd1pTMXZaaTVxY3lKZExDSnVZVzFsY3lJNld5SWtaWGh3YjNKMElpd2ljbVZ4ZFdseVpTSXNJbE1pTENKelpYUlFjbTkwYjNSNWNHVlBaaUlzSW5ObGRDSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwRXNTVUZCU1VFc1VVRkJWVU1zVVVGQlVTeGhRVU4wUWtRc1VVRkJVVUVzVVVGQlVVVXNSVUZCUnl4VFFVRlZMRU5CUVVWRExHVkJRV2RDUml4UlFVRlJMR2RDUVVGblFrY2lMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdWMyVjBMWEJ5YjNSdmRIbHdaUzF2Wmk1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgY2xhc3NvZj1yZXF1aXJlKFwiLi9fY2xhc3NvZlwiKSx0ZXN0PXt9O3Rlc3RbcmVxdWlyZShcIi4vX3drc1wiKShcInRvU3RyaW5nVGFnXCIpXT1cInpcIix0ZXN0K1wiXCIhPVwiW29iamVjdCB6XVwiJiZyZXF1aXJlKFwiLi9fcmVkZWZpbmVcIikoT2JqZWN0LnByb3RvdHlwZSxcInRvU3RyaW5nXCIsZnVuY3Rpb24gdG9TdHJpbmcoKXtyZXR1cm5cIltvYmplY3QgXCIrY2xhc3NvZih0aGlzKStcIl1cIn0sITApO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXZZbXBsWTNRdWRHOHRjM1J5YVc1bkxtcHpJbDBzSW01aGJXVnpJanBiSW1Oc1lYTnpiMllpTENKeVpYRjFhWEpsSWl3aWRHVnpkQ0lzSWs5aWFtVmpkQ0lzSW5CeWIzUnZkSGx3WlNJc0luUnZVM1J5YVc1bklpd2lkR2hwY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkZRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR05CUTJ4Q1F5eExRVUZQTEVkQlExaEJMRXRCUVV0RUxGRkJRVkVzVTBGQlVrRXNRMEZCYTBJc1owSkJRV3RDTEVsQlEzSkRReXhMUVVGUExFbEJRVTBzWTBGRFprUXNVVUZCVVN4alFVRlNRU3hEUVVGMVFrVXNUMEZCVDBNc1ZVRkJWeXhYUVVGWkxGTkJRVk5ETEZkQlF6VkVMRTFCUVU4c1YwRkJZVXdzVVVGQlVVMHNUVUZCVVN4TlFVTnVReUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNTBieTF6ZEhKcGJtY3Vhbk1pZlE9PSIsInZhciAkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIiksJHBhcnNlRmxvYXQ9cmVxdWlyZShcIi4vX3BhcnNlLWZsb2F0XCIpOyRleHBvcnQoJGV4cG9ydC5HKyRleHBvcnQuRioocGFyc2VGbG9hdCE9JHBhcnNlRmxvYXQpLHtwYXJzZUZsb2F0OiRwYXJzZUZsb2F0fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1d1lYSnpaUzFtYkc5aGRDNXFjeUpkTENKdVlXMWxjeUk2V3lJa1pYaHdiM0owSWl3aWNtVnhkV2x5WlNJc0lpUndZWEp6WlVac2IyRjBJaXdpUnlJc0lrWWlMQ0p3WVhKelpVWnNiMkYwSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4SlFVRkpRU3hSUVVGVlF5eFJRVUZSTEdGQlEyeENReXhaUVVGalJDeFJRVUZSTEd0Q1FVVXhRa1FzVVVGQlVVRXNVVUZCVVVjc1JVRkJTVWdzVVVGQlVVa3NSMEZCUzBNc1dVRkJZMGdzWVVGQll5eERRVUZGUnl4WFFVRlpTQ0lzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbkJoY25ObExXWnNiMkYwTG1wekluMD0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLCRwYXJzZUludD1yZXF1aXJlKFwiLi9fcGFyc2UtaW50XCIpOyRleHBvcnQoJGV4cG9ydC5HKyRleHBvcnQuRioocGFyc2VJbnQhPSRwYXJzZUludCkse3BhcnNlSW50OiRwYXJzZUludH0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXdZWEp6WlMxcGJuUXVhbk1pWFN3aWJtRnRaWE1pT2xzaUpHVjRjRzl5ZENJc0luSmxjWFZwY21VaUxDSWtjR0Z5YzJWSmJuUWlMQ0pISWl3aVJpSXNJbkJoY25ObFNXNTBJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR0ZCUTJ4Q1F5eFZRVUZaUkN4UlFVRlJMR2RDUVVWNFFrUXNVVUZCVVVFc1VVRkJVVWNzUlVGQlNVZ3NVVUZCVVVrc1IwRkJTME1zVlVGQldVZ3NWMEZCV1N4RFFVRkZSeXhUUVVGVlNDSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxuQmhjbk5sTFdsdWRDNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIEludGVybmFsLG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSxPd25Qcm9taXNlQ2FwYWJpbGl0eSxXcmFwcGVyLExJQlJBUlk9cmVxdWlyZShcIi4vX2xpYnJhcnlcIiksZ2xvYmFsPXJlcXVpcmUoXCIuL19nbG9iYWxcIiksY3R4PXJlcXVpcmUoXCIuL19jdHhcIiksY2xhc3NvZj1yZXF1aXJlKFwiLi9fY2xhc3NvZlwiKSwkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIiksaXNPYmplY3Q9cmVxdWlyZShcIi4vX2lzLW9iamVjdFwiKSxhRnVuY3Rpb249cmVxdWlyZShcIi4vX2EtZnVuY3Rpb25cIiksYW5JbnN0YW5jZT1yZXF1aXJlKFwiLi9fYW4taW5zdGFuY2VcIiksZm9yT2Y9cmVxdWlyZShcIi4vX2Zvci1vZlwiKSxzcGVjaWVzQ29uc3RydWN0b3I9cmVxdWlyZShcIi4vX3NwZWNpZXMtY29uc3RydWN0b3JcIiksdGFzaz1yZXF1aXJlKFwiLi9fdGFza1wiKS5zZXQsbWljcm90YXNrPXJlcXVpcmUoXCIuL19taWNyb3Rhc2tcIikoKSxuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZT1yZXF1aXJlKFwiLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eVwiKSxwZXJmb3JtPXJlcXVpcmUoXCIuL19wZXJmb3JtXCIpLHVzZXJBZ2VudD1yZXF1aXJlKFwiLi9fdXNlci1hZ2VudFwiKSxwcm9taXNlUmVzb2x2ZT1yZXF1aXJlKFwiLi9fcHJvbWlzZS1yZXNvbHZlXCIpLFBST01JU0U9XCJQcm9taXNlXCIsVHlwZUVycm9yPWdsb2JhbC5UeXBlRXJyb3IscHJvY2Vzcz1nbG9iYWwucHJvY2Vzcyx2ZXJzaW9ucz1wcm9jZXNzJiZwcm9jZXNzLnZlcnNpb25zLHY4PXZlcnNpb25zJiZ2ZXJzaW9ucy52OHx8XCJcIiwkUHJvbWlzZT1nbG9iYWxbUFJPTUlTRV0saXNOb2RlPVwicHJvY2Vzc1wiPT1jbGFzc29mKHByb2Nlc3MpLGVtcHR5PWZ1bmN0aW9uKCl7fSxuZXdQcm9taXNlQ2FwYWJpbGl0eT1uZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHk9bmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZixVU0VfTkFUSVZFPSEhZnVuY3Rpb24oKXt0cnl7dmFyIGU9JFByb21pc2UucmVzb2x2ZSgxKSxyPShlLmNvbnN0cnVjdG9yPXt9KVtyZXF1aXJlKFwiLi9fd2tzXCIpKFwic3BlY2llc1wiKV09ZnVuY3Rpb24oZSl7ZShlbXB0eSxlbXB0eSl9O3JldHVybihpc05vZGV8fFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCkmJmUudGhlbihlbXB0eSlpbnN0YW5jZW9mIHImJjAhPT12OC5pbmRleE9mKFwiNi42XCIpJiYtMT09PXVzZXJBZ2VudC5pbmRleE9mKFwiQ2hyb21lLzY2XCIpfWNhdGNoKGUpe319KCksaXNUaGVuYWJsZT1mdW5jdGlvbihlKXt2YXIgcjtyZXR1cm4hKCFpc09iamVjdChlKXx8XCJmdW5jdGlvblwiIT10eXBlb2Yocj1lLnRoZW4pKSYmcn0sbm90aWZ5PWZ1bmN0aW9uKGUscil7aWYoIWUuX24pe2UuX249ITA7dmFyIGk9ZS5fYzttaWNyb3Rhc2soZnVuY3Rpb24oKXtmb3IodmFyIG89ZS5fdix0PTE9PWUuX3Msbj0wLHM9ZnVuY3Rpb24ocil7dmFyIGksbixzLGE9dD9yLm9rOnIuZmFpbCxjPXIucmVzb2x2ZSxsPXIucmVqZWN0LHA9ci5kb21haW47dHJ5e2E/KHR8fCgyPT1lLl9oJiZvbkhhbmRsZVVuaGFuZGxlZChlKSxlLl9oPTEpLCEwPT09YT9pPW86KHAmJnAuZW50ZXIoKSxpPWEobykscCYmKHAuZXhpdCgpLHM9ITApKSxpPT09ci5wcm9taXNlP2woVHlwZUVycm9yKFwiUHJvbWlzZS1jaGFpbiBjeWNsZVwiKSk6KG49aXNUaGVuYWJsZShpKSk/bi5jYWxsKGksYyxsKTpjKGkpKTpsKG8pfWNhdGNoKGUpe3AmJiFzJiZwLmV4aXQoKSxsKGUpfX07aS5sZW5ndGg+bjspcyhpW24rK10pO2UuX2M9W10sZS5fbj0hMSxyJiYhZS5faCYmb25VbmhhbmRsZWQoZSl9KX19LG9uVW5oYW5kbGVkPWZ1bmN0aW9uKGUpe3Rhc2suY2FsbChnbG9iYWwsZnVuY3Rpb24oKXt2YXIgcixpLG8sdD1lLl92LG49aXNVbmhhbmRsZWQoZSk7aWYobiYmKHI9cGVyZm9ybShmdW5jdGlvbigpe2lzTm9kZT9wcm9jZXNzLmVtaXQoXCJ1bmhhbmRsZWRSZWplY3Rpb25cIix0LGUpOihpPWdsb2JhbC5vbnVuaGFuZGxlZHJlamVjdGlvbik/aSh7cHJvbWlzZTplLHJlYXNvbjp0fSk6KG89Z2xvYmFsLmNvbnNvbGUpJiZvLmVycm9yJiZvLmVycm9yKFwiVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uXCIsdCl9KSxlLl9oPWlzTm9kZXx8aXNVbmhhbmRsZWQoZSk/MjoxKSxlLl9hPXZvaWQgMCxuJiZyLmUpdGhyb3cgci52fSl9LGlzVW5oYW5kbGVkPWZ1bmN0aW9uKGUpe3JldHVybiAxIT09ZS5faCYmMD09PShlLl9hfHxlLl9jKS5sZW5ndGh9LG9uSGFuZGxlVW5oYW5kbGVkPWZ1bmN0aW9uKGUpe3Rhc2suY2FsbChnbG9iYWwsZnVuY3Rpb24oKXt2YXIgcjtpc05vZGU/cHJvY2Vzcy5lbWl0KFwicmVqZWN0aW9uSGFuZGxlZFwiLGUpOihyPWdsb2JhbC5vbnJlamVjdGlvbmhhbmRsZWQpJiZyKHtwcm9taXNlOmUscmVhc29uOmUuX3Z9KX0pfSwkcmVqZWN0PWZ1bmN0aW9uKGUpe3ZhciByPXRoaXM7ci5fZHx8KHIuX2Q9ITAsKHI9ci5fd3x8cikuX3Y9ZSxyLl9zPTIsci5fYXx8KHIuX2E9ci5fYy5zbGljZSgpKSxub3RpZnkociwhMCkpfSwkcmVzb2x2ZT1mdW5jdGlvbihlKXt2YXIgcixpPXRoaXM7aWYoIWkuX2Qpe2kuX2Q9ITAsaT1pLl93fHxpO3RyeXtpZihpPT09ZSl0aHJvdyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTsocj1pc1RoZW5hYmxlKGUpKT9taWNyb3Rhc2soZnVuY3Rpb24oKXt2YXIgbz17X3c6aSxfZDohMX07dHJ5e3IuY2FsbChlLGN0eCgkcmVzb2x2ZSxvLDEpLGN0eCgkcmVqZWN0LG8sMSkpfWNhdGNoKGUpeyRyZWplY3QuY2FsbChvLGUpfX0pOihpLl92PWUsaS5fcz0xLG5vdGlmeShpLCExKSl9Y2F0Y2goZSl7JHJlamVjdC5jYWxsKHtfdzppLF9kOiExfSxlKX19fTtVU0VfTkFUSVZFfHwoJFByb21pc2U9ZnVuY3Rpb24gUHJvbWlzZShlKXthbkluc3RhbmNlKHRoaXMsJFByb21pc2UsUFJPTUlTRSxcIl9oXCIpLGFGdW5jdGlvbihlKSxJbnRlcm5hbC5jYWxsKHRoaXMpO3RyeXtlKGN0eCgkcmVzb2x2ZSx0aGlzLDEpLGN0eCgkcmVqZWN0LHRoaXMsMSkpfWNhdGNoKGUpeyRyZWplY3QuY2FsbCh0aGlzLGUpfX0sKEludGVybmFsPWZ1bmN0aW9uIFByb21pc2UoZSl7dGhpcy5fYz1bXSx0aGlzLl9hPXZvaWQgMCx0aGlzLl9zPTAsdGhpcy5fZD0hMSx0aGlzLl92PXZvaWQgMCx0aGlzLl9oPTAsdGhpcy5fbj0hMX0pLnByb3RvdHlwZT1yZXF1aXJlKFwiLi9fcmVkZWZpbmUtYWxsXCIpKCRQcm9taXNlLnByb3RvdHlwZSx7dGhlbjpmdW5jdGlvbiB0aGVuKGUscil7dmFyIGk9bmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsJFByb21pc2UpKTtyZXR1cm4gaS5vaz1cImZ1bmN0aW9uXCIhPXR5cGVvZiBlfHxlLGkuZmFpbD1cImZ1bmN0aW9uXCI9PXR5cGVvZiByJiZyLGkuZG9tYWluPWlzTm9kZT9wcm9jZXNzLmRvbWFpbjp2b2lkIDAsdGhpcy5fYy5wdXNoKGkpLHRoaXMuX2EmJnRoaXMuX2EucHVzaChpKSx0aGlzLl9zJiZub3RpZnkodGhpcywhMSksaS5wcm9taXNlfSxjYXRjaDpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy50aGVuKHZvaWQgMCxlKX19KSxPd25Qcm9taXNlQ2FwYWJpbGl0eT1mdW5jdGlvbigpe3ZhciBlPW5ldyBJbnRlcm5hbDt0aGlzLnByb21pc2U9ZSx0aGlzLnJlc29sdmU9Y3R4KCRyZXNvbHZlLGUsMSksdGhpcy5yZWplY3Q9Y3R4KCRyZWplY3QsZSwxKX0sbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZj1uZXdQcm9taXNlQ2FwYWJpbGl0eT1mdW5jdGlvbihlKXtyZXR1cm4gZT09PSRQcm9taXNlfHxlPT09V3JhcHBlcj9uZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoZSk6bmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KGUpfSksJGV4cG9ydCgkZXhwb3J0LkcrJGV4cG9ydC5XKyRleHBvcnQuRiohVVNFX05BVElWRSx7UHJvbWlzZTokUHJvbWlzZX0pLHJlcXVpcmUoXCIuL19zZXQtdG8tc3RyaW5nLXRhZ1wiKSgkUHJvbWlzZSxQUk9NSVNFKSxyZXF1aXJlKFwiLi9fc2V0LXNwZWNpZXNcIikoUFJPTUlTRSksV3JhcHBlcj1yZXF1aXJlKFwiLi9fY29yZVwiKVtQUk9NSVNFXSwkZXhwb3J0KCRleHBvcnQuUyskZXhwb3J0LkYqIVVTRV9OQVRJVkUsUFJPTUlTRSx7cmVqZWN0OmZ1bmN0aW9uIHJlamVjdChlKXt2YXIgcj1uZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKTtyZXR1cm4oMCxyLnJlamVjdCkoZSksci5wcm9taXNlfX0pLCRleHBvcnQoJGV4cG9ydC5TKyRleHBvcnQuRiooTElCUkFSWXx8IVVTRV9OQVRJVkUpLFBST01JU0Use3Jlc29sdmU6ZnVuY3Rpb24gcmVzb2x2ZShlKXtyZXR1cm4gcHJvbWlzZVJlc29sdmUoTElCUkFSWSYmdGhpcz09PVdyYXBwZXI/JFByb21pc2U6dGhpcyxlKX19KSwkZXhwb3J0KCRleHBvcnQuUyskZXhwb3J0LkYqIShVU0VfTkFUSVZFJiZyZXF1aXJlKFwiLi9faXRlci1kZXRlY3RcIikoZnVuY3Rpb24oZSl7JFByb21pc2UuYWxsKGUpLmNhdGNoKGVtcHR5KX0pKSxQUk9NSVNFLHthbGw6ZnVuY3Rpb24gYWxsKGUpe3ZhciByPXRoaXMsaT1uZXdQcm9taXNlQ2FwYWJpbGl0eShyKSxvPWkucmVzb2x2ZSx0PWkucmVqZWN0LG49cGVyZm9ybShmdW5jdGlvbigpe3ZhciBpPVtdLG49MCxzPTE7Zm9yT2YoZSwhMSxmdW5jdGlvbihlKXt2YXIgYT1uKyssYz0hMTtpLnB1c2godm9pZCAwKSxzKyssci5yZXNvbHZlKGUpLnRoZW4oZnVuY3Rpb24oZSl7Y3x8KGM9ITAsaVthXT1lLC0tc3x8byhpKSl9LHQpfSksLS1zfHxvKGkpfSk7cmV0dXJuIG4uZSYmdChuLnYpLGkucHJvbWlzZX0scmFjZTpmdW5jdGlvbiByYWNlKGUpe3ZhciByPXRoaXMsaT1uZXdQcm9taXNlQ2FwYWJpbGl0eShyKSxvPWkucmVqZWN0LHQ9cGVyZm9ybShmdW5jdGlvbigpe2Zvck9mKGUsITEsZnVuY3Rpb24oZSl7ci5yZXNvbHZlKGUpLnRoZW4oaS5yZXNvbHZlLG8pfSl9KTtyZXR1cm4gdC5lJiZvKHQudiksaS5wcm9taXNlfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXdjbTl0YVhObExtcHpJbDBzSW01aGJXVnpJanBiSWtsdWRHVnlibUZzSWl3aWJtVjNSMlZ1WlhKcFkxQnliMjFwYzJWRFlYQmhZbWxzYVhSNUlpd2lUM2R1VUhKdmJXbHpaVU5oY0dGaWFXeHBkSGtpTENKWGNtRndjR1Z5SWl3aVRFbENVa0ZTV1NJc0luSmxjWFZwY21VaUxDSm5iRzlpWVd3aUxDSmpkSGdpTENKamJHRnpjMjltSWl3aUpHVjRjRzl5ZENJc0ltbHpUMkpxWldOMElpd2lZVVoxYm1OMGFXOXVJaXdpWVc1SmJuTjBZVzVqWlNJc0ltWnZjazltSWl3aWMzQmxZMmxsYzBOdmJuTjBjblZqZEc5eUlpd2lkR0Z6YXlJc0luTmxkQ0lzSW0xcFkzSnZkR0Z6YXlJc0ltNWxkMUJ5YjIxcGMyVkRZWEJoWW1sc2FYUjVUVzlrZFd4bElpd2ljR1Z5Wm05eWJTSXNJblZ6WlhKQloyVnVkQ0lzSW5CeWIyMXBjMlZTWlhOdmJIWmxJaXdpVUZKUFRVbFRSU0lzSWxSNWNHVkZjbkp2Y2lJc0luQnliMk5sYzNNaUxDSjJaWEp6YVc5dWN5SXNJblk0SWl3aUpGQnliMjFwYzJVaUxDSnBjMDV2WkdVaUxDSmxiWEIwZVNJc0ltNWxkMUJ5YjIxcGMyVkRZWEJoWW1sc2FYUjVJaXdpWmlJc0lsVlRSVjlPUVZSSlZrVWlMQ0p3Y205dGFYTmxJaXdpY21WemIyeDJaU0lzSWtaaGEyVlFjbTl0YVhObElpd2lZMjl1YzNSeWRXTjBiM0lpTENKbGVHVmpJaXdpVUhKdmJXbHpaVkpsYW1WamRHbHZia1YyWlc1MElpd2lkR2hsYmlJc0ltbHVaR1Y0VDJZaUxDSmxJaXdpYVhOVWFHVnVZV0pzWlNJc0ltbDBJaXdpYm05MGFXWjVJaXdpYVhOU1pXcGxZM1FpTENKZmJpSXNJbU5vWVdsdUlpd2lYMk1pTENKMllXeDFaU0lzSWw5Mklpd2liMnNpTENKZmN5SXNJbWtpTENKeWRXNGlMQ0p5WldGamRHbHZiaUlzSW5KbGMzVnNkQ0lzSW1WNGFYUmxaQ0lzSW1oaGJtUnNaWElpTENKbVlXbHNJaXdpY21WcVpXTjBJaXdpWkc5dFlXbHVJaXdpWDJnaUxDSnZia2hoYm1Sc1pWVnVhR0Z1Wkd4bFpDSXNJbVZ1ZEdWeUlpd2laWGhwZENJc0ltTmhiR3dpTENKc1pXNW5kR2dpTENKdmJsVnVhR0Z1Wkd4bFpDSXNJbU52Ym5OdmJHVWlMQ0oxYm1oaGJtUnNaV1FpTENKcGMxVnVhR0Z1Wkd4bFpDSXNJbVZ0YVhRaUxDSnZiblZ1YUdGdVpHeGxaSEpsYW1WamRHbHZiaUlzSW5KbFlYTnZiaUlzSW1WeWNtOXlJaXdpWDJFaUxDSjFibVJsWm1sdVpXUWlMQ0oySWl3aWIyNXlaV3BsWTNScGIyNW9ZVzVrYkdWa0lpd2lKSEpsYW1WamRDSXNJblJvYVhNaUxDSmZaQ0lzSWw5M0lpd2ljMnhwWTJVaUxDSWtjbVZ6YjJ4MlpTSXNJbmR5WVhCd1pYSWlMQ0pRY205dGFYTmxJaXdpWlhobFkzVjBiM0lpTENKbGNuSWlMQ0p3Y205MGIzUjVjR1VpTENKdmJrWjFiR1pwYkd4bFpDSXNJbTl1VW1WcVpXTjBaV1FpTENKd2RYTm9JaXdpWTJGMFkyZ2lMQ0pESWl3aVJ5SXNJbGNpTENKR0lpd2lVeUlzSW5JaUxDSmpZWEJoWW1sc2FYUjVJaXdpSkNSeVpXcGxZM1FpTENKNElpd2lhWFJsY2lJc0ltRnNiQ0lzSW1sMFpYSmhZbXhsSWl3aWRtRnNkV1Z6SWl3aWFXNWtaWGdpTENKeVpXMWhhVzVwYm1jaUxDSWthVzVrWlhnaUxDSmhiSEpsWVdSNVEyRnNiR1ZrSWl3aWNtRmpaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRFFTeEpRWGRDU1VFc1UwRkJWVU1zTkVKQlFUWkNReXh4UWtGQmMwSkRMRkZCZUVJM1JFTXNVVUZCVlVNc1VVRkJVU3hqUVVOc1FrTXNUMEZCVTBRc1VVRkJVU3hoUVVOcVFrVXNTVUZCVFVZc1VVRkJVU3hWUVVOa1J5eFJRVUZWU0N4UlFVRlJMR05CUTJ4Q1NTeFJRVUZWU2l4UlFVRlJMR0ZCUTJ4Q1N5eFRRVUZYVEN4UlFVRlJMR2RDUVVOdVFrMHNWVUZCV1U0c1VVRkJVU3hwUWtGRGNFSlBMRmRCUVdGUUxGRkJRVkVzYTBKQlEzSkNVU3hOUVVGUlVpeFJRVUZSTEdGQlEyaENVeXh0UWtGQmNVSlVMRkZCUVZFc01FSkJRemRDVlN4TFFVRlBWaXhSUVVGUkxGZEJRVmRYTEVsQlF6RkNReXhWUVVGWldpeFJRVUZSTEdWQlFWSkJMRWRCUTFwaExESkNRVUUyUW1Jc1VVRkJVU3cyUWtGRGNrTmpMRkZCUVZWa0xGRkJRVkVzWTBGRGJFSmxMRlZCUVZsbUxGRkJRVkVzYVVKQlEzQkNaMElzWlVGQmFVSm9RaXhSUVVGUkxITkNRVU42UW1sQ0xGRkJRVlVzVlVGRFZrTXNWVUZCV1dwQ0xFOUJRVTlwUWl4VlFVTnVRa01zVVVGQlZXeENMRTlCUVU5clFpeFJRVU5xUWtNc1UwRkJWMFFzVTBGQlYwRXNVVUZCVVVNc1UwRkRPVUpETEVkQlFVdEVMRlZCUVZsQkxGTkJRVk5ETEVsQlFVMHNSMEZEYUVORExGTkJRVmR5UWl4UFFVRlBaMElzVTBGRGJFSk5MRTlCUVRaQ0xGZEJRWEJDY0VJc1VVRkJVV2RDTEZOQlEycENTeXhOUVVGUkxHRkJSVkpETEhGQ1FVRjFRamRDTERSQ1FVRTRRbWxDTERKQ1FVRXlRbUVzUlVGRmFFWkRMR0ZCUVdVc1YwRkRha0lzU1VGRlJTeEpRVUZKUXl4RlFVRlZUaXhUUVVGVFR5eFJRVUZSTEVkQlF6TkNReXhIUVVGbFJpeEZRVUZSUnl4WlFVRmpMRWxCUVVrdlFpeFJRVUZSTEZOQlFWSkJMRU5CUVd0Q0xGbEJRV01zVTBGQlZXZERMRWRCUTNKR1FTeEZRVUZMVWl4TlFVRlBRU3hSUVVka0xFOUJRVkZFTEZGQlFUQkRMRzFDUVVGNlFsVXNkMEpCUTNCQ1RDeEZRVUZSVFN4TFFVRkxWaXhwUWtGQmEwSk5MRWRCU1ZRc1NVRkJkRUpVTEVkQlFVZGpMRkZCUVZFc1UwRkRlVUlzU1VGQmNFTndRaXhWUVVGVmIwSXNVVUZCVVN4aFFVTjJRaXhOUVVGUFF5eExRV1pSTEVkQmJVSm1ReXhYUVVGaExGTkJRVlZETEVkQlEzcENMRWxCUVVsS0xFVkJRMG9zVTBGQlR6ZENMRk5CUVZOcFF5eEpRVUZyUXl4dFFrRkJia0pLTEVWQlFVOUpMRVZCUVVkS0xGRkJRWE5DUVN4SFFVVTNSRXNzVDBGQlV5eFRRVUZWV0N4RlFVRlRXU3hIUVVNNVFpeEpRVUZKV2l4RlFVRlJZU3hIUVVGYUxFTkJRMEZpTEVWQlFWRmhMRWxCUVVzc1JVRkRZaXhKUVVGSlF5eEZRVUZSWkN4RlFVRlJaU3hIUVVOd1FpOUNMRlZCUVZVc1YwRnZRMUlzU1VGdVEwRXNTVUZCU1dkRExFVkJRVkZvUWl4RlFVRlJhVUlzUjBGRGFFSkRMRVZCUVcxQ0xFZEJRV1JzUWl4RlFVRlJiVUlzUjBGRFlrTXNSVUZCU1N4RlFVTktReXhGUVVGTkxGTkJRVlZETEVkQlEyeENMRWxCU1VsRExFVkJRVkZxUWl4RlFVRk5hMElzUlVGS1pFTXNSVUZCVlZBc1JVRkJTMGtzUlVGQlUwb3NSMEZCUzBrc1JVRkJVMGtzUzBGRGRFTjZRaXhGUVVGVmNVSXNSVUZCVTNKQ0xGRkJRMjVDTUVJc1JVRkJVMHdzUlVGQlUwc3NUMEZEYkVKRExFVkJRVk5PTEVWQlFWTk5MRTlCUlhSQ0xFbEJRMDFJTEVkQlEwZFFMRWxCUTJVc1IwRkJaR3hDTEVWQlFWRTJRaXhKUVVGVFF5eHJRa0ZCYTBJNVFpeEhRVU4yUTBFc1JVRkJVVFpDTEVkQlFVc3NTVUZGUXl4SlFVRmFTaXhGUVVGclFrWXNSVUZCVTFBc1IwRkZla0paTEVkQlFWRkJMRVZCUVU5SExGRkJRMjVDVWl4RlFVRlRSU3hGUVVGUlZDeEhRVU5pV1N4SlFVTkdRU3hGUVVGUFNTeFBRVU5RVWl4SFFVRlRMRWxCUjFSRUxFbEJRVmRFTEVWQlFWTjBRaXhSUVVOMFFqSkNMRVZCUVU5eVF5eFZRVUZWTEhsQ1FVTlNaMElzUlVGQlQwY3NWMEZCVjJNc1NVRkRNMEpxUWl4RlFVRkxNa0lzUzBGQlMxWXNSVUZCVVhSQ0xFVkJRVk13UWl4SFFVTjBRakZDTEVWQlFWRnpRaXhKUVVOV1NTeEZRVUZQV0N4SFFVTmtMRTFCUVU5U0xFZEJRMGh2UWl4SlFVRlhTaXhIUVVGUlNTeEZRVUZQU1N4UFFVTTVRa3dzUlVGQlQyNUNMRXRCUjBwTkxFVkJRVTF2UWl4UFFVRlRaQ3hIUVVGSFF5eEZRVUZKVUN4RlFVRk5UU3hOUVVOdVEzQkNMRVZCUVZGbExFZEJRVXNzUjBGRFltWXNSVUZCVVdFc1NVRkJTeXhGUVVOVVJDeEpRVUZoV2l4RlFVRlJOa0lzU1VGQlNVMHNXVUZCV1c1RExFOUJSM3BEYlVNc1dVRkJZeXhUUVVGVmJrTXNSMEZETVVKc1FpeExRVUZMYlVRc1MwRkJTelZFTEU5QlFWRXNWMEZEYUVJc1NVRkZTV3RFTEVWQlFWRkZMRVZCUVZOWExFVkJSbXBDY0VJc1JVRkJVV2hDTEVWQlFWRnBRaXhIUVVOb1FtOUNMRVZCUVZsRExGbEJRVmwwUXl4SFFXVTFRaXhIUVdKSmNVTXNTVUZEUm1Rc1JVRkJVM0pETEZGQlFWRXNWMEZEV0ZNc1QwRkRSa29zVVVGQlVXZEVMRXRCUVVzc2NVSkJRWE5DZGtJc1JVRkJUMmhDTEVsQlEycERlVUlzUlVGQlZYQkVMRTlCUVU5dFJTeHpRa0ZETVVKbUxFVkJRVkVzUTBGQlJYcENMRkZCUVZOQkxFVkJRVk41UXl4UFFVRlJla0lzUzBGRE1VSnZRaXhGUVVGVkwwUXNUMEZCVHl0RUxGVkJRVmxCTEVWQlFWRk5MRTlCUXk5RFRpeEZRVUZSVFN4TlFVRk5MRGhDUVVFclFqRkNMRXRCU1dwRWFFSXNSVUZCVVRaQ0xFZEJRVXRzUXl4UlFVRlZNa01zV1VGQldYUkRMRWRCUVZjc1JVRkJTU3hIUVVOc1JFRXNSVUZCVVRKRExGRkJRVXRETEVWQlExaFFMRWRCUVdGa0xFVkJRVTltTEVWQlFVY3NUVUZCVFdVc1JVRkJUM05DTEV0QlIzaERVQ3haUVVGakxGTkJRVlYwUXl4SFFVTXhRaXhQUVVGelFpeEpRVUZtUVN4RlFVRlJOa0lzU1VGQmEwUXNTMEZCY2tNM1FpeEZRVUZSTWtNc1NVRkJUVE5ETEVWQlFWRmxMRWxCUVVsdFFpeFJRVVZ3UkVvc2EwSkJRVzlDTEZOQlFWVTVRaXhIUVVOb1EyeENMRXRCUVV0dFJDeExRVUZMTlVRc1QwRkJVU3hYUVVOb1FpeEpRVUZKYjBRc1JVRkRRVGxDTEU5QlEwWktMRkZCUVZGblJDeExRVUZMTEcxQ1FVRnZRblpETEVsQlEzaENlVUlzUlVGQlZYQkVMRTlCUVU5NVJTeHhRa0ZETVVKeVFpeEZRVUZSTEVOQlFVVjZRaXhSUVVGVFFTeEZRVUZUZVVNc1QwRkJVWHBETEVWQlFWRnBRaXhSUVVrNVF6aENMRkZCUVZVc1UwRkJWUzlDTEVkQlEzUkNMRWxCUVVsb1FpeEZRVUZWWjBRc1MwRkRWbWhFTEVWQlFWRnBSQ3hMUVVOYWFrUXNSVUZCVVdsRUxFbEJRVXNzUjBGRFltcEVMRVZCUVZWQkxFVkJRVkZyUkN4SlFVRk5iRVFzUjBGRGFFSnBRaXhIUVVGTFJDeEZRVU5pYUVJc1JVRkJVVzFDTEVkQlFVc3NSVUZEVW01Q0xFVkJRVkV5UXl4TFFVRkpNME1zUlVGQlVUSkRMRWRCUVVzelF5eEZRVUZSWlN4SFFVRkhiME1zVTBGRGVrTjRReXhQUVVGUFdDeEhRVUZUTEV0QlJXUnZSQ3hUUVVGWExGTkJRVlZ3UXl4SFFVTjJRaXhKUVVOSlZpeEZRVVJCVGl4RlFVRlZaMFFzUzBGRlpDeEpRVUZKYUVRc1JVRkJVV2xFTEVkQlFWb3NRMEZEUVdwRUxFVkJRVkZwUkN4SlFVRkxMRVZCUTJKcVJDeEZRVUZWUVN4RlFVRlJhMFFzU1VGQlRXeEVMRVZCUTNoQ0xFbEJRMFVzUjBGQlNVRXNTVUZCV1dkQ0xFVkJRVThzVFVGQlRURkNMRlZCUVZVc2NVTkJRMjVEWjBJc1JVRkJUMGNzVjBGQlYwOHNTVUZEY0VKb1F5eFZRVUZWTEZkQlExSXNTVUZCU1hGRkxFVkJRVlVzUTBGQlJVZ3NSMEZCU1d4RUxFVkJRVk5wUkN4SlFVRkpMRWRCUTJwRExFbEJRMFV6UXl4RlFVRkxNa0lzUzBGQlMycENMRVZCUVU4eFF5eEpRVUZKT0VVc1UwRkJWVU1zUlVGQlV5eEhRVUZKTDBVc1NVRkJTWGxGTEZGQlFWTk5MRVZCUVZNc1NVRkRiRVVzVFVGQlR6ZERMRWRCUTFCMVF5eFJRVUZSWkN4TFFVRkxiMElzUlVGQlV6ZERMRTlCU1RGQ1VpeEZRVUZSYVVJc1IwRkJTMFFzUlVGRFltaENMRVZCUVZGdFFpeEhRVUZMTEVWQlEySlNMRTlCUVU5WUxFZEJRVk1zU1VGRmJFSXNUVUZCVDFFc1IwRkRVSFZETEZGQlFWRmtMRXRCUVVzc1EwRkJSV2xDTEVkQlFVbHNSQ3hGUVVGVGFVUXNTVUZCU1N4SFFVRlRla01zVFVGTGVFTlVMR0ZCUlVoTUxGTkJRVmNzVTBGQlV6UkVMRkZCUVZGRExFZEJRekZDTlVVc1YwRkJWM0ZGTEV0QlFVMTBSQ3hUUVVGVlRDeFJRVUZUTEUxQlEzQkRXQ3hWUVVGVk5rVXNSMEZEVm5oR0xGTkJRVk5yUlN4TFFVRkxaU3hOUVVOa0xFbEJRMFZQTEVWQlFWTnFSaXhKUVVGSk9FVXNVMEZCVlVvc1MwRkJUU3hIUVVGSk1VVXNTVUZCU1hsRkxGRkJRVk5ETEV0QlFVMHNTVUZEY0VRc1RVRkJUMUVzUjBGRFVGUXNVVUZCVVdRc1MwRkJTMlVzUzBGQlRWRXNUVUZKZGtKNlJpeFRRVUZYTEZOQlFWTjFSaXhSUVVGUlF5eEhRVU14UWxBc1MwRkJTMnBETEVkQlFVc3NSMEZEVm1sRExFdEJRVXRNTEZGQlFVdERMRVZCUTFaSkxFdEJRVXMzUWl4SFFVRkxMRVZCUTFZMlFpeExRVUZMUXl4SlFVRkxMRVZCUTFaRUxFdEJRVXN2UWl4UlFVRkxNa0lzUlVGRFZra3NTMEZCUzI1Q0xFZEJRVXNzUlVGRFZtMUNMRXRCUVV0dVF5eEpRVUZMTEVsQlJVZzBReXhWUVVGWmNrWXNVVUZCVVN4clFrRkJVa0VzUTBGQk1rSnpRaXhUUVVGVEswUXNWVUZCVnl4RFFVVnNSVzVFTEV0QlFVMHNVMEZCVTBFc1MwRkJTMjlFTEVWQlFXRkRMRWRCUXk5Q0xFbEJRVWx5UXl4RlFVRlhla0lzY1VKQlFYRkNhRUlzYlVKQlFXMUNiVVVzUzBGQlRYUkVMRmRCVHpkRUxFOUJUa0UwUWl4RlFVRlRTaXhIUVVFeVFpeHRRa0ZCWm5kRExFZEJRVFJDUVN4RlFVTnFSSEJETEVWQlFWTkpMRXRCUVRSQ0xHMUNRVUZrYVVNc1IwRkJORUpCTEVWQlEyNUVja01zUlVGQlUwMHNUMEZCVTJwRExFOUJRVk5LTEZGQlFWRnhReXhaUVVGVFowSXNSVUZETlVOSkxFdEJRVXRxUXl4SFFVRkhOa01zUzBGQlMzUkRMRWRCUTFRd1FpeExRVUZMVEN4SlFVRkpTeXhMUVVGTFRDeEhRVUZIYVVJc1MwRkJTM1JETEVkQlEzUkNNRUlzUzBGQlN6ZENMRWxCUVVsU0xFOUJRVTl4UXl4TlFVRk5MRWRCUTI1Q01VSXNSVUZCVTNSQ0xGTkJSMnhDTmtRc1RVRkJVeXhUUVVGVlJpeEhRVU5xUWl4UFFVRlBXQ3hMUVVGTE1VTXNWVUZCUzNORExFVkJRVmRsTEUxQlIyaERNVVlzY1VKQlFYVkNMRmRCUTNKQ0xFbEJRVWtyUWl4RlFVRlZMRWxCUVVscVF5eFRRVU5zUW1sR0xFdEJRVXRvUkN4UlFVRlZRU3hGUVVObVowUXNTMEZCU3k5RExGRkJRVlV6UWl4SlFVRkpPRVVzVTBGQlZYQkVMRVZCUVZNc1IwRkRkRU5uUkN4TFFVRkxja0lzVDBGQlUzSkVMRWxCUVVsNVJTeFJRVUZUTDBNc1JVRkJVeXhKUVVWMFEyWXNNa0pCUVRKQ1lTeEZRVUZKUkN4eFFrRkJkVUlzVTBGQlZXbEZMRWRCUXpsRUxFOUJRVTlCTEVsQlFVMXdSU3hWUVVGWmIwVXNTVUZCVFRWR0xGRkJRek5DTEVsQlFVbEVMSEZDUVVGeFFqWkdMRWRCUTNwQ09VWXNORUpCUVRSQ09FWXNTMEZKY0VOMFJpeFJRVUZSUVN4UlFVRlJkVVlzUlVGQlNYWkdMRkZCUVZGM1JpeEZRVUZKZUVZc1VVRkJVWGxHTEVkQlFVdHNSU3hYUVVGWkxFTkJRVVYxUkN4UlFVRlROVVFzVjBGRGNFVjBRaXhSUVVGUkxIVkNRVUZTUVN4RFFVRm5RM05DTEZOQlFWVk1MRk5CUXpGRGFrSXNVVUZCVVN4cFFrRkJVa0VzUTBGQk1FSnBRaXhUUVVNeFFtNUNMRkZCUVZWRkxGRkJRVkVzVjBGQlYybENMRk5CUnpkQ1lpeFJRVUZSUVN4UlFVRlJNRVlzUlVGQlNURkdMRkZCUVZGNVJpeEhRVUZMYkVVc1YwRkJXVllzVVVGQlV5eERRVVZ3UkhORExFOUJRVkVzVTBGQlUwRXNUMEZCVDNkRExFZEJRM1JDTEVsQlFVbERMRVZCUVdGMlJTeHhRa0ZCY1VKdFJDeE5RVWQwUXl4UFFVUkJjVUlzUlVGRVpVUXNSVUZCVjNwRExGRkJRMnBDZDBNc1IwRkRSa01zUlVGQlYzQkZMRmRCUjNSQ2VFSXNVVUZCVVVFc1VVRkJVVEJHTEVWQlFVa3hSaXhSUVVGUmVVWXNSMEZCU3psR0xGVkJRVmswUWl4WlFVRmhWaXhSUVVGVExFTkJSV3BGV1N4UlFVRlRMRk5CUVZOQkxGRkJRVkZ4UlN4SFFVTjRRaXhQUVVGUGJFWXNaVUZCWldwQ0xGTkJRVmMyUlN4UFFVRlRPVVVzVVVGQlZYZENMRk5CUVZkelJDeExRVUZOYzBJc1RVRkhla1U1Uml4UlFVRlJRU3hSUVVGUk1FWXNSVUZCU1RGR0xGRkJRVkY1Uml4SlFVRk5iRVVzV1VGQll6TkNMRkZCUVZFc2FVSkJRVkpCTEVOQlFUQkNMRk5CUVZWdFJ5eEhRVU5zUmpkRkxGTkJRVk00UlN4SlFVRkpSQ3hIUVVGaExFMUJRVVV6UlN4VlFVTjZRbEFzVVVGQlV5eERRVVZhYlVZc1NVRkJTeXhUUVVGVFFTeEpRVUZKUXl4SFFVTm9RaXhKUVVGSldDeEZRVUZKWkN4TFFVTktiMElzUlVGQllYWkZMSEZDUVVGeFFtbEZMRWRCUTJ4RE4wUXNSVUZCVlcxRkxFVkJRVmR1UlN4UlFVTnlRakJDTEVWQlFWTjVReXhGUVVGWGVrTXNUMEZEY0VKS0xFVkJRVk55UXl4UlFVRlJMRmRCUTI1Q0xFbEJRVWwzUml4RlFVRlRMRWRCUTFSRExFVkJRVkVzUlVGRFVrTXNSVUZCV1N4RlFVTm9RbWhITEUxQlFVMDJSaXhIUVVGVkxFVkJRVThzVTBGQlZYcEZMRWRCUXk5Q0xFbEJRVWsyUlN4RlFVRlRSaXhKUVVOVVJ5eEhRVUZuUWl4RlFVTndRa29zUlVGQlQyUXNWVUZCUzJoQ0xFZEJRMXBuUXl4SlFVTkJaQ3hGUVVGRk4wUXNVVUZCVVVRc1IwRkJVMDBzUzBGQlN5eFRRVUZWVlN4SFFVTTFRamhFTEVsQlEwcEJMRWRCUVdkQ0xFVkJRMmhDU2l4RlFVRlBSeXhIUVVGVk4wUXNTVUZEWmpSRUxFZEJRV0V6UlN4RlFVRlJlVVVzUzBGRGRFSXZReXhQUVVWSWFVUXNSMEZCWVRORkxFVkJRVkY1UlN4TFFVZDZRaXhQUVVSSmJrUXNSVUZCVDJZc1IwRkJSMjFDTEVWQlFVOUtMRVZCUVU5elFpeEhRVU55UW5WQ0xFVkJRVmR3UlN4VFFVZHdRaXRGTEV0QlFVMHNVMEZCVTBFc1MwRkJTMDRzUjBGRGJFSXNTVUZCU1Znc1JVRkJTV1FzUzBGRFNtOUNMRVZCUVdGMlJTeHhRa0ZCY1VKcFJTeEhRVU5zUTI1RExFVkJRVk41UXl4RlFVRlhla01zVDBGRGNFSktMRVZCUVZOeVF5eFJRVUZSTEZkQlEyNUNUaXhOUVVGTk5rWXNSMEZCVlN4RlFVRlBMRk5CUVZWNlJTeEhRVU12UWpoRUxFVkJRVVUzUkN4UlFVRlJSQ3hIUVVGVFRTeExRVUZMT0VRc1JVRkJWMjVGTEZGQlFWTXdRaXhQUVVsb1JDeFBRVVJKU2l4RlFVRlBaaXhIUVVGSGJVSXNSVUZCVDBvc1JVRkJUM05DTEVkQlEzSkNkVUlzUlVGQlYzQkZJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVjSEp2YldselpTNXFjeUo5IiwidmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKSxhRnVuY3Rpb249cmVxdWlyZShcIi4vX2EtZnVuY3Rpb25cIiksYW5PYmplY3Q9cmVxdWlyZShcIi4vX2FuLW9iamVjdFwiKSxyQXBwbHk9KHJlcXVpcmUoXCIuL19nbG9iYWxcIikuUmVmbGVjdHx8e30pLmFwcGx5LGZBcHBseT1GdW5jdGlvbi5hcHBseTskZXhwb3J0KCRleHBvcnQuUyskZXhwb3J0LkYqIXJlcXVpcmUoXCIuL19mYWlsc1wiKShmdW5jdGlvbigpe3JBcHBseShmdW5jdGlvbigpe30pfSksXCJSZWZsZWN0XCIse2FwcGx5OmZ1bmN0aW9uIGFwcGx5KHAsZSxyKXt2YXIgbj1hRnVuY3Rpb24ocCksdD1hbk9iamVjdChyKTtyZXR1cm4gckFwcGx5P3JBcHBseShuLGUsdCk6ZkFwcGx5LmNhbGwobixlLHQpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXlaV1pzWldOMExtRndjR3g1TG1weklsMHNJbTVoYldWeklqcGJJaVJsZUhCdmNuUWlMQ0p5WlhGMWFYSmxJaXdpWVVaMWJtTjBhVzl1SWl3aVlXNVBZbXBsWTNRaUxDSnlRWEJ3YkhraUxDSlNaV1pzWldOMElpd2lZWEJ3YkhraUxDSm1RWEJ3YkhraUxDSkdkVzVqZEdsdmJpSXNJbE1pTENKR0lpd2lkR0Z5WjJWMElpd2lkR2hwYzBGeVozVnRaVzUwSWl3aVlYSm5kVzFsYm5SelRHbHpkQ0lzSWxRaUxDSk1JaXdpWTJGc2JDSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwRXNTVUZCU1VFc1VVRkJWVU1zVVVGQlVTeGhRVU5zUWtNc1ZVRkJXVVFzVVVGQlVTeHBRa0ZEY0VKRkxGTkJRVmRHTEZGQlFWRXNaMEpCUTI1Q1J5eFJRVUZWU0N4UlFVRlJMR0ZCUVdGSkxGTkJRVmNzU1VGQlNVTXNUVUZET1VORExFOUJRVk5ETEZOQlFWTkdMRTFCUlhSQ1RpeFJRVUZSUVN4UlFVRlJVeXhGUVVGSlZDeFJRVUZSVlN4SFFVRkxWQ3hSUVVGUkxGZEJRVkpCTEVOQlFXOUNMRmRCUTI1RVJ5eFBRVUZQTEdkQ1FVTk1MRlZCUVZjc1EwRkRZa1VzVFVGQlR5eFRRVUZUUVN4TlFVRk5TeXhGUVVGUlF5eEZRVUZqUXl4SFFVTXhReXhKUVVGSlF5eEZRVUZKV2l4VlFVRlZVeXhIUVVOa1NTeEZRVUZKV2l4VFFVRlRWU3hIUVVOcVFpeFBRVUZQVkN4UFFVRlRRU3hQUVVGUFZTeEZRVUZIUml4RlFVRmpSeXhIUVVGTFVpeFBRVUZQVXl4TFFVRkxSaXhGUVVGSFJpeEZRVUZqUnlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5KbFpteGxZM1F1WVhCd2JIa3Vhbk1pZlE9PSIsInZhciAkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIiksY3JlYXRlPXJlcXVpcmUoXCIuL19vYmplY3QtY3JlYXRlXCIpLGFGdW5jdGlvbj1yZXF1aXJlKFwiLi9fYS1mdW5jdGlvblwiKSxhbk9iamVjdD1yZXF1aXJlKFwiLi9fYW4tb2JqZWN0XCIpLGlzT2JqZWN0PXJlcXVpcmUoXCIuL19pcy1vYmplY3RcIiksZmFpbHM9cmVxdWlyZShcIi4vX2ZhaWxzXCIpLGJpbmQ9cmVxdWlyZShcIi4vX2JpbmRcIiksckNvbnN0cnVjdD0ocmVxdWlyZShcIi4vX2dsb2JhbFwiKS5SZWZsZWN0fHx7fSkuY29uc3RydWN0LE5FV19UQVJHRVRfQlVHPWZhaWxzKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gRigpe31yZXR1cm4hKHJDb25zdHJ1Y3QoZnVuY3Rpb24oKXt9LFtdLEYpaW5zdGFuY2VvZiBGKX0pLEFSR1NfQlVHPSFmYWlscyhmdW5jdGlvbigpe3JDb25zdHJ1Y3QoZnVuY3Rpb24oKXt9KX0pOyRleHBvcnQoJGV4cG9ydC5TKyRleHBvcnQuRiooTkVXX1RBUkdFVF9CVUd8fEFSR1NfQlVHKSxcIlJlZmxlY3RcIix7Y29uc3RydWN0OmZ1bmN0aW9uIGNvbnN0cnVjdChlLHQpe2FGdW5jdGlvbihlKSxhbk9iamVjdCh0KTt2YXIgcj1hcmd1bWVudHMubGVuZ3RoPDM/ZTphRnVuY3Rpb24oYXJndW1lbnRzWzJdKTtpZihBUkdTX0JVRyYmIU5FV19UQVJHRVRfQlVHKXJldHVybiByQ29uc3RydWN0KGUsdCxyKTtpZihlPT1yKXtzd2l0Y2godC5sZW5ndGgpe2Nhc2UgMDpyZXR1cm4gbmV3IGU7Y2FzZSAxOnJldHVybiBuZXcgZSh0WzBdKTtjYXNlIDI6cmV0dXJuIG5ldyBlKHRbMF0sdFsxXSk7Y2FzZSAzOnJldHVybiBuZXcgZSh0WzBdLHRbMV0sdFsyXSk7Y2FzZSA0OnJldHVybiBuZXcgZSh0WzBdLHRbMV0sdFsyXSx0WzNdKX12YXIgbj1bbnVsbF07cmV0dXJuIG4ucHVzaC5hcHBseShuLHQpLG5ldyhiaW5kLmFwcGx5KGUsbikpfXZhciBjPXIucHJvdG90eXBlLHU9Y3JlYXRlKGlzT2JqZWN0KGMpP2M6T2JqZWN0LnByb3RvdHlwZSksaT1GdW5jdGlvbi5hcHBseS5jYWxsKGUsdSx0KTtyZXR1cm4gaXNPYmplY3QoaSk/aTp1fX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXlaV1pzWldOMExtTnZibk4wY25WamRDNXFjeUpkTENKdVlXMWxjeUk2V3lJa1pYaHdiM0owSWl3aWNtVnhkV2x5WlNJc0ltTnlaV0YwWlNJc0ltRkdkVzVqZEdsdmJpSXNJbUZ1VDJKcVpXTjBJaXdpYVhOUFltcGxZM1FpTENKbVlXbHNjeUlzSW1KcGJtUWlMQ0p5UTI5dWMzUnlkV04wSWl3aVVtVm1iR1ZqZENJc0ltTnZibk4wY25WamRDSXNJazVGVjE5VVFWSkhSVlJmUWxWSElpd2lSaUlzSWtGU1IxTmZRbFZISWl3aVV5SXNJbFJoY21kbGRDSXNJbUZ5WjNNaUxDSnVaWGRVWVhKblpYUWlMQ0poY21kMWJXVnVkSE1pTENKc1pXNW5kR2dpTENJa1lYSm5jeUlzSW5CMWMyZ2lMQ0poY0hCc2VTSXNJbkJ5YjNSdklpd2ljSEp2ZEc5MGVYQmxJaXdpYVc1emRHRnVZMlVpTENKUFltcGxZM1FpTENKeVpYTjFiSFFpTENKR2RXNWpkR2x2YmlJc0ltTmhiR3dpWFN3aWJXRndjR2x1WjNNaU9pSkJRVU5CTEVsQlFVbEJMRkZCUVZWRExGRkJRVkVzWVVGRGJFSkRMRTlCUVZORUxGRkJRVkVzYjBKQlEycENSU3hWUVVGWlJpeFJRVUZSTEdsQ1FVTndRa2NzVTBGQlYwZ3NVVUZCVVN4blFrRkRia0pKTEZOQlFWZEtMRkZCUVZFc1owSkJRMjVDU3l4TlFVRlJUQ3hSUVVGUkxGbEJRMmhDVFN4TFFVRlBUaXhSUVVGUkxGZEJRMlpQTEZsQlFXTlFMRkZCUVZFc1lVRkJZVkVzVTBGQlZ5eEpRVUZKUXl4VlFVbHNSRU1zWlVGQmFVSk1MRTFCUVUwc1YwRkRla0lzVTBGQlUwMHNTMEZEVkN4UlFVRlRTaXhYUVVGWExHRkJRVFpDTEVkQlFVbEpMR0ZCUVdOQkxFdEJSV3BGUXl4VlFVRlpVQ3hOUVVGTkxGZEJRM0JDUlN4WFFVRlhMR2RDUVVkaVVpeFJRVUZSUVN4UlFVRlJZeXhGUVVGSlpDeFJRVUZSV1N4SFFVRkxSQ3huUWtGQmEwSkZMRlZCUVZjc1ZVRkJWeXhEUVVOMlJVZ3NWVUZCVnl4VFFVRlRRU3hWUVVGVlN5eEZRVUZSUXl4SFFVTndRMklzVlVGQlZWa3NSMEZEVmxnc1UwRkJVMWtzUjBGRFZDeEpRVUZKUXl4RlFVRlpReXhWUVVGVlF5eFBRVUZUTEVWQlFVbEtMRVZCUVZOYUxGVkJRVlZsTEZWQlFWVXNTVUZEY0VVc1IwRkJTVXdzVjBGQllVWXNaVUZCWjBJc1QwRkJUMGdzVjBGQlYwOHNSVUZCVVVNc1JVRkJUVU1zUjBGRGFrVXNSMEZCU1VZc1IwRkJWVVVzUlVGQlZ5eERRVVYyUWl4UFFVRlJSQ3hGUVVGTFJ5eFJRVU5ZTEV0QlFVc3NSVUZCUnl4UFFVRlBMRWxCUVVsS0xFVkJRMjVDTEV0QlFVc3NSVUZCUnl4UFFVRlBMRWxCUVVsQkxFVkJRVTlETEVWQlFVc3NTVUZETDBJc1MwRkJTeXhGUVVGSExFOUJRVThzU1VGQlNVUXNSVUZCVDBNc1JVRkJTeXhIUVVGSlFTeEZRVUZMTEVsQlEzaERMRXRCUVVzc1JVRkJSeXhQUVVGUExFbEJRVWxFTEVWQlFVOURMRVZCUVVzc1IwRkJTVUVzUlVGQlN5eEhRVUZKUVN4RlFVRkxMRWxCUTJwRUxFdEJRVXNzUlVGQlJ5eFBRVUZQTEVsQlFVbEVMRVZCUVU5RExFVkJRVXNzUjBGQlNVRXNSVUZCU3l4SFFVRkpRU3hGUVVGTExFZEJRVWxCTEVWQlFVc3NTVUZITlVRc1NVRkJTVWtzUlVGQlVTeERRVUZETEUxQlJXSXNUMEZFUVVFc1JVRkJUVU1zUzBGQlMwTXNUVUZCVFVZc1JVRkJUMG9zUjBGRGFrSXNTVUZCUzFRc1MwRkJTMlVzVFVGQlRWQXNSVUZCVVVzc1NVRkhha01zU1VGQlNVY3NSVUZCVVU0c1JVRkJWVThzVlVGRGJFSkRMRVZCUVZkMlFpeFBRVUZQUnl4VFFVRlRhMElzUjBGQlUwRXNSVUZCVVVjc1QwRkJUMFlzVjBGRGJrUkhMRVZCUVZORExGTkJRVk5PTEUxQlFVMVBMRXRCUVV0a0xFVkJRVkZWTEVWQlFWVlVMRWRCUTI1RUxFOUJRVTlZTEZOQlFWTnpRaXhIUVVGVlFTeEZRVUZUUmlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5KbFpteGxZM1F1WTI5dWMzUnlkV04wTG1wekluMD0iLCJ2YXIgZFA9cmVxdWlyZShcIi4vX29iamVjdC1kcFwiKSwkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIiksYW5PYmplY3Q9cmVxdWlyZShcIi4vX2FuLW9iamVjdFwiKSx0b1ByaW1pdGl2ZT1yZXF1aXJlKFwiLi9fdG8tcHJpbWl0aXZlXCIpOyRleHBvcnQoJGV4cG9ydC5TKyRleHBvcnQuRipyZXF1aXJlKFwiLi9fZmFpbHNcIikoZnVuY3Rpb24oKXtSZWZsZWN0LmRlZmluZVByb3BlcnR5KGRQLmYoe30sMSx7dmFsdWU6MX0pLDEse3ZhbHVlOjJ9KX0pLFwiUmVmbGVjdFwiLHtkZWZpbmVQcm9wZXJ0eTpmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShlLHIsdCl7YW5PYmplY3QoZSkscj10b1ByaW1pdGl2ZShyLCEwKSxhbk9iamVjdCh0KTt0cnl7cmV0dXJuIGRQLmYoZSxyLHQpLCEwfWNhdGNoKGUpe3JldHVybiExfX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV5Wldac1pXTjBMbVJsWm1sdVpTMXdjbTl3WlhKMGVTNXFjeUpkTENKdVlXMWxjeUk2V3lKa1VDSXNJbkpsY1hWcGNtVWlMQ0lrWlhod2IzSjBJaXdpWVc1UFltcGxZM1FpTENKMGIxQnlhVzFwZEdsMlpTSXNJbE1pTENKR0lpd2lVbVZtYkdWamRDSXNJbVJsWm1sdVpWQnliM0JsY25SNUlpd2laaUlzSW5aaGJIVmxJaXdpZEdGeVoyVjBJaXdpY0hKdmNHVnlkSGxMWlhraUxDSmhkSFJ5YVdKMWRHVnpJaXdpWlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUTBFc1NVRkJTVUVzUjBGQlMwTXNVVUZCVVN4blFrRkRZa01zVVVGQlZVUXNVVUZCVVN4aFFVTnNRa1VzVTBGQlYwWXNVVUZCVVN4blFrRkRia0pITEZsQlFXTklMRkZCUVZFc2JVSkJSekZDUXl4UlFVRlJRU3hSUVVGUlJ5eEZRVUZKU0N4UlFVRlJTU3hGUVVGSlRDeFJRVUZSTEZkQlFWSkJMRU5CUVc5Q0xGZEJSV3hFVFN4UlFVRlJReXhsUVVGbFVpeEhRVUZIVXl4RlFVRkZMRWRCUVVrc1JVRkJSeXhEUVVGRlF5eE5RVUZQTEVsQlFVMHNSVUZCUnl4RFFVRkZRU3hOUVVGUExFMUJRelZFTEZWQlFWY3NRMEZEWWtZc1pVRkJaMElzVTBGQlUwRXNaVUZCWlVjc1JVRkJVVU1zUlVGQllVTXNSMEZETTBSV0xGTkJRVk5STEVkQlExUkRMRVZCUVdOU0xGbEJRVmxSTEVkQlFXRXNSMEZEZGtOVUxGTkJRVk5WTEVkQlExUXNTVUZGUlN4UFFVUkJZaXhIUVVGSFV5eEZRVUZGUlN4RlFVRlJReXhGUVVGaFF5eEpRVU51UWl4RlFVTlFMRTFCUVU5RExFZEJRMUFzVDBGQlR5SXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxuSmxabXhsWTNRdVpHVm1hVzVsTFhCeWIzQmxjblI1TG1wekluMD0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLGdPUEQ9cmVxdWlyZShcIi4vX29iamVjdC1nb3BkXCIpLmYsYW5PYmplY3Q9cmVxdWlyZShcIi4vX2FuLW9iamVjdFwiKTskZXhwb3J0KCRleHBvcnQuUyxcIlJlZmxlY3RcIix7ZGVsZXRlUHJvcGVydHk6ZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkoZSxyKXt2YXIgdD1nT1BEKGFuT2JqZWN0KGUpLHIpO3JldHVybiEodCYmIXQuY29uZmlndXJhYmxlKSYmZGVsZXRlIGVbcl19fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1eVpXWnNaV04wTG1SbGJHVjBaUzF3Y205d1pYSjBlUzVxY3lKZExDSnVZVzFsY3lJNld5SWtaWGh3YjNKMElpd2ljbVZ4ZFdseVpTSXNJbWRQVUVRaUxDSm1JaXdpWVc1UFltcGxZM1FpTENKVElpd2laR1ZzWlhSbFVISnZjR1Z5ZEhraUxDSjBZWEpuWlhRaUxDSndjbTl3WlhKMGVVdGxlU0lzSW1SbGMyTWlMQ0pqYjI1bWFXZDFjbUZpYkdVaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVOQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc1lVRkRiRUpETEV0QlFVOUVMRkZCUVZFc2EwSkJRV3RDUlN4RlFVTnFRME1zVTBGQlYwZ3NVVUZCVVN4blFrRkZka0pFTEZGQlFWRkJMRkZCUVZGTExFVkJRVWNzVlVGQlZ5eERRVU0xUWtNc1pVRkJaMElzVTBGQlUwRXNaVUZCWlVNc1JVRkJVVU1zUjBGRE9VTXNTVUZCU1VNc1JVRkJUMUFzUzBGQlMwVXNVMEZCVTBjc1IwRkJVME1zUjBGRGJFTXNVVUZCVDBNc1NVRkJVMEVzUlVGQlMwTXNjMEpCUVRoQ1NDeEZRVUZQUXlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5KbFpteGxZM1F1WkdWc1pYUmxMWEJ5YjNCbGNuUjVMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciAkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIiksYW5PYmplY3Q9cmVxdWlyZShcIi4vX2FuLW9iamVjdFwiKSxFbnVtZXJhdGU9ZnVuY3Rpb24oZSl7dGhpcy5fdD1hbk9iamVjdChlKSx0aGlzLl9pPTA7dmFyIHQscj10aGlzLl9rPVtdO2Zvcih0IGluIGUpci5wdXNoKHQpfTtyZXF1aXJlKFwiLi9faXRlci1jcmVhdGVcIikoRW51bWVyYXRlLFwiT2JqZWN0XCIsZnVuY3Rpb24oKXt2YXIgZSx0PXRoaXMuX2s7ZG97aWYodGhpcy5faT49dC5sZW5ndGgpcmV0dXJue3ZhbHVlOnZvaWQgMCxkb25lOiEwfX13aGlsZSghKChlPXRbdGhpcy5faSsrXSlpbiB0aGlzLl90KSk7cmV0dXJue3ZhbHVlOmUsZG9uZTohMX19KSwkZXhwb3J0KCRleHBvcnQuUyxcIlJlZmxlY3RcIix7ZW51bWVyYXRlOmZ1bmN0aW9uIGVudW1lcmF0ZShlKXtyZXR1cm4gbmV3IEVudW1lcmF0ZShlKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV5Wldac1pXTjBMbVZ1ZFcxbGNtRjBaUzVxY3lKZExDSnVZVzFsY3lJNld5SWtaWGh3YjNKMElpd2ljbVZ4ZFdseVpTSXNJbUZ1VDJKcVpXTjBJaXdpUlc1MWJXVnlZWFJsSWl3aWFYUmxjbUYwWldRaUxDSjBhR2x6SWl3aVgzUWlMQ0pmYVNJc0ltdGxlU0lzSW10bGVYTWlMQ0pmYXlJc0luQjFjMmdpTENKc1pXNW5kR2dpTENKMllXeDFaU0lzSW5WdVpHVm1hVzVsWkNJc0ltUnZibVVpTENKVElpd2laVzUxYldWeVlYUmxJaXdpZEdGeVoyVjBJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVWQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc1lVRkRiRUpETEZOQlFWZEVMRkZCUVZFc1owSkJRMjVDUlN4VlFVRlpMRk5CUVZWRExFZEJRM2hDUXl4TFFVRkxReXhIUVVGTFNpeFRRVUZUUlN4SFFVTnVRa01zUzBGQlMwVXNSMEZCU3l4RlFVTldMRWxCUTBsRExFVkJSRUZETEVWQlFVOUtMRXRCUVV0TExFZEJRVXNzUjBGRmNrSXNTVUZCUzBZc1MwRkJUMG9zUlVGQlZVc3NSVUZCUzBVc1MwRkJTMGdzU1VGRmJFTlFMRkZCUVZFc2FVSkJRVkpCTEVOQlFUQkNSU3hWUVVGWExGTkJRVlVzVjBGRE4wTXNTVUZGU1Vzc1JVRkVRVU1zUlVGRVQwb3NTMEZEUzBzc1IwRkZhRUlzUjBGRFJTeEhRVXBUVEN4TFFVbEJSU3hKUVVGTlJTeEZRVUZMUnl4UFFVRlJMRTFCUVU4c1EwRkJSVU1zVjBGQlQwTXNSVUZCVjBNc1RVRkJUU3haUVVOdVJGQXNSVUZCVFVNc1JVRk1VRW9zUzBGTGFVSkZMRk5CVEdwQ1JpeExRVXRuUTBNc1MwRkRNME1zVFVGQlR5eERRVUZGVHl4TlFVRlBUQ3hGUVVGTFR5eE5RVUZOTEV0QlJ6ZENaaXhSUVVGUlFTeFJRVUZSWjBJc1JVRkJSeXhWUVVGWExFTkJRelZDUXl4VlFVRlhMRk5CUVZOQkxGVkJRVlZETEVkQlF6VkNMRTlCUVU4c1NVRkJTV1lzVlVGQlZXVWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXlaV1pzWldOMExtVnVkVzFsY21GMFpTNXFjeUo5IiwidmFyIGdPUEQ9cmVxdWlyZShcIi4vX29iamVjdC1nb3BkXCIpLCRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKSxhbk9iamVjdD1yZXF1aXJlKFwiLi9fYW4tb2JqZWN0XCIpOyRleHBvcnQoJGV4cG9ydC5TLFwiUmVmbGVjdFwiLHtnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUscil7cmV0dXJuIGdPUEQuZihhbk9iamVjdChlKSxyKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV5Wldac1pXTjBMbWRsZEMxdmQyNHRjSEp2Y0dWeWRIa3RaR1Z6WTNKcGNIUnZjaTVxY3lKZExDSnVZVzFsY3lJNld5Sm5UMUJFSWl3aWNtVnhkV2x5WlNJc0lpUmxlSEJ2Y25RaUxDSmhiazlpYW1WamRDSXNJbE1pTENKblpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0lpTENKMFlYSm5aWFFpTENKd2NtOXdaWEowZVV0bGVTSXNJbVlpWFN3aWJXRndjR2x1WjNNaU9pSkJRVU5CTEVsQlFVbEJMRXRCUVU5RExGRkJRVkVzYTBKQlEyWkRMRkZCUVZWRUxGRkJRVkVzWVVGRGJFSkZMRk5CUVZkR0xGRkJRVkVzWjBKQlJYWkNReXhSUVVGUlFTeFJRVUZSUlN4RlFVRkhMRlZCUVZjc1EwRkROVUpETEhsQ1FVRXdRaXhUUVVGVFFTeDVRa0ZCZVVKRExFVkJRVkZETEVkQlEyeEZMRTlCUVU5UUxFdEJRVXRSTEVWQlFVVk1MRk5CUVZOSExFZEJRVk5ESWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1Y21WbWJHVmpkQzVuWlhRdGIzZHVMWEJ5YjNCbGNuUjVMV1JsYzJOeWFYQjBiM0l1YW5NaWZRPT0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLGdldFByb3RvPXJlcXVpcmUoXCIuL19vYmplY3QtZ3BvXCIpLGFuT2JqZWN0PXJlcXVpcmUoXCIuL19hbi1vYmplY3RcIik7JGV4cG9ydCgkZXhwb3J0LlMsXCJSZWZsZWN0XCIse2dldFByb3RvdHlwZU9mOmZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGUpe3JldHVybiBnZXRQcm90byhhbk9iamVjdChlKSl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1eVpXWnNaV04wTG1kbGRDMXdjbTkwYjNSNWNHVXRiMll1YW5NaVhTd2libUZ0WlhNaU9sc2lKR1Y0Y0c5eWRDSXNJbkpsY1hWcGNtVWlMQ0puWlhSUWNtOTBieUlzSW1GdVQySnFaV04wSWl3aVV5SXNJbWRsZEZCeWIzUnZkSGx3WlU5bUlpd2lkR0Z5WjJWMElsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHRkJRMnhDUXl4VFFVRlhSQ3hSUVVGUkxHbENRVU51UWtVc1UwRkJWMFlzVVVGQlVTeG5Ra0ZGZGtKRUxGRkJRVkZCTEZGQlFWRkpMRVZCUVVjc1ZVRkJWeXhEUVVNMVFrTXNaVUZCWjBJc1UwRkJVMEVzWlVGQlpVTXNSMEZEZEVNc1QwRkJUMG9zVTBGQlUwTXNVMEZCVTBjaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1eVpXWnNaV04wTG1kbGRDMXdjbTkwYjNSNWNHVXRiMll1YW5NaWZRPT0iLCJ2YXIgZ09QRD1yZXF1aXJlKFwiLi9fb2JqZWN0LWdvcGRcIiksZ2V0UHJvdG90eXBlT2Y9cmVxdWlyZShcIi4vX29iamVjdC1ncG9cIiksaGFzPXJlcXVpcmUoXCIuL19oYXNcIiksJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLGlzT2JqZWN0PXJlcXVpcmUoXCIuL19pcy1vYmplY3RcIiksYW5PYmplY3Q9cmVxdWlyZShcIi4vX2FuLW9iamVjdFwiKTtmdW5jdGlvbiBnZXQoZSx0KXt2YXIgcixvLGc9YXJndW1lbnRzLmxlbmd0aDwzP2U6YXJndW1lbnRzWzJdO3JldHVybiBhbk9iamVjdChlKT09PWc/ZVt0XToocj1nT1BELmYoZSx0KSk/aGFzKHIsXCJ2YWx1ZVwiKT9yLnZhbHVlOnZvaWQgMCE9PXIuZ2V0P3IuZ2V0LmNhbGwoZyk6dm9pZCAwOmlzT2JqZWN0KG89Z2V0UHJvdG90eXBlT2YoZSkpP2dldChvLHQsZyk6dm9pZCAwfSRleHBvcnQoJGV4cG9ydC5TLFwiUmVmbGVjdFwiLHtnZXQ6Z2V0fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1eVpXWnNaV04wTG1kbGRDNXFjeUpkTENKdVlXMWxjeUk2V3lKblQxQkVJaXdpY21WeGRXbHlaU0lzSW1kbGRGQnliM1J2ZEhsd1pVOW1JaXdpYUdGeklpd2lKR1Y0Y0c5eWRDSXNJbWx6VDJKcVpXTjBJaXdpWVc1UFltcGxZM1FpTENKblpYUWlMQ0owWVhKblpYUWlMQ0p3Y205d1pYSjBlVXRsZVNJc0ltUmxjMk1pTENKd2NtOTBieUlzSW5KbFkyVnBkbVZ5SWl3aVlYSm5kVzFsYm5Seklpd2liR1Z1WjNSb0lpd2laaUlzSW5aaGJIVmxJaXdpZFc1a1pXWnBibVZrSWl3aVkyRnNiQ0lzSWxNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVOQkxFbEJRVWxCTEV0QlFVOURMRkZCUVZFc2EwSkJRMlpETEdWQlFXbENSQ3hSUVVGUkxHbENRVU42UWtVc1NVRkJUVVlzVVVGQlVTeFZRVU5rUnl4UlFVRlZTQ3hSUVVGUkxHRkJRMnhDU1N4VFFVRlhTaXhSUVVGUkxHZENRVU51UWtzc1UwRkJWMHdzVVVGQlVTeG5Ra0ZGZGtJc1UwRkJVMDBzU1VGQlNVTXNSVUZCVVVNc1IwRkRia0lzU1VGRFNVTXNSVUZCVFVNc1JVRkVUa01zUlVGQlYwTXNWVUZCVlVNc1QwRkJVeXhGUVVGSlRpeEZRVUZUU3l4VlFVRlZMRWRCUlhwRUxFOUJRVWxRTEZOQlFWTkZMRXRCUVZsSkxFVkJRV2xDU2l4RlFVRlBReXhKUVVNM1EwTXNSVUZCVDFZc1MwRkJTMlVzUlVGQlJWQXNSVUZCVVVNc1NVRkJjVUpPTEVsQlFVbFBMRVZCUVUwc1UwRkRja1JCTEVWQlFVdE5MRmRCUTFGRExFbEJRV0pRTEVWQlFVdElMRWxCUTBoSExFVkJRVXRJTEVsQlFVbFhMRXRCUVV0T0xGRkJRMlJMTEVWQlEwWmFMRk5CUVZOTkxFVkJRVkZVTEdWQlFXVk5MRWxCUVdsQ1JDeEpRVUZKU1N4RlFVRlBSaXhGUVVGaFJ5eFJRVUUzUlN4RlFVZEdVaXhSUVVGUlFTeFJRVUZSWlN4RlFVRkhMRlZCUVZjc1EwRkJSVm9zU1VGQlMwRWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXlaV1pzWldOMExtZGxkQzVxY3lKOSIsInZhciAkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIik7JGV4cG9ydCgkZXhwb3J0LlMsXCJSZWZsZWN0XCIse2hhczpmdW5jdGlvbiBoYXMoZSxyKXtyZXR1cm4gciBpbiBlfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXlaV1pzWldOMExtaGhjeTVxY3lKZExDSnVZVzFsY3lJNld5SWtaWGh3YjNKMElpd2ljbVZ4ZFdseVpTSXNJbE1pTENKb1lYTWlMQ0owWVhKblpYUWlMQ0p3Y205d1pYSjBlVXRsZVNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUTBFc1NVRkJTVUVzVVVGQlZVTXNVVUZCVVN4aFFVVjBRa1FzVVVGQlVVRXNVVUZCVVVVc1JVRkJSeXhWUVVGWExFTkJRelZDUXl4SlFVRkxMRk5CUVZOQkxFbEJRVWxETEVWQlFWRkRMRWRCUTNoQ0xFOUJRVTlCTEV0QlFXVkVJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVjbVZtYkdWamRDNW9ZWE11YW5NaWZRPT0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLGFuT2JqZWN0PXJlcXVpcmUoXCIuL19hbi1vYmplY3RcIiksJGlzRXh0ZW5zaWJsZT1PYmplY3QuaXNFeHRlbnNpYmxlOyRleHBvcnQoJGV4cG9ydC5TLFwiUmVmbGVjdFwiLHtpc0V4dGVuc2libGU6ZnVuY3Rpb24gaXNFeHRlbnNpYmxlKGUpe3JldHVybiBhbk9iamVjdChlKSwhJGlzRXh0ZW5zaWJsZXx8JGlzRXh0ZW5zaWJsZShlKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV5Wldac1pXTjBMbWx6TFdWNGRHVnVjMmxpYkdVdWFuTWlYU3dpYm1GdFpYTWlPbHNpSkdWNGNHOXlkQ0lzSW5KbGNYVnBjbVVpTENKaGJrOWlhbVZqZENJc0lpUnBjMFY0ZEdWdWMybGliR1VpTENKUFltcGxZM1FpTENKcGMwVjRkR1Z1YzJsaWJHVWlMQ0pUSWl3aWRHRnlaMlYwSWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hSUVVGVlF5eFJRVUZSTEdGQlEyeENReXhUUVVGWFJDeFJRVUZSTEdkQ1FVTnVRa1VzWTBGQlowSkRMRTlCUVU5RExHRkJSVE5DVEN4UlFVRlJRU3hSUVVGUlRTeEZRVUZITEZWQlFWY3NRMEZETlVKRUxHRkJRV01zVTBGQlUwRXNZVUZCWVVVc1IwRkZiRU1zVDBGRVFVd3NVMEZCVTBzc1NVRkRSa29zWlVGQlowSkJMR05CUVdOSklpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWNtVm1iR1ZqZEM1cGN5MWxlSFJsYm5OcFlteGxMbXB6SW4wPSIsInZhciAkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIik7JGV4cG9ydCgkZXhwb3J0LlMsXCJSZWZsZWN0XCIse293bktleXM6cmVxdWlyZShcIi4vX293bi1rZXlzXCIpfSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1eVpXWnNaV04wTG05M2JpMXJaWGx6TG1weklsMHNJbTVoYldWeklqcGJJaVJsZUhCdmNuUWlMQ0p5WlhGMWFYSmxJaXdpVXlJc0ltOTNia3RsZVhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVOQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc1lVRkZkRUpFTEZGQlFWRkJMRkZCUVZGRkxFVkJRVWNzVlVGQlZ5eERRVUZGUXl4UlFVRlRSaXhSUVVGUklpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWNtVm1iR1ZqZEM1dmQyNHRhMlY1Y3k1cWN5SjkiLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLGFuT2JqZWN0PXJlcXVpcmUoXCIuL19hbi1vYmplY3RcIiksJHByZXZlbnRFeHRlbnNpb25zPU9iamVjdC5wcmV2ZW50RXh0ZW5zaW9uczskZXhwb3J0KCRleHBvcnQuUyxcIlJlZmxlY3RcIix7cHJldmVudEV4dGVuc2lvbnM6ZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnMoZSl7YW5PYmplY3QoZSk7dHJ5e3JldHVybiAkcHJldmVudEV4dGVuc2lvbnMmJiRwcmV2ZW50RXh0ZW5zaW9ucyhlKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1eVpXWnNaV04wTG5CeVpYWmxiblF0WlhoMFpXNXphVzl1Y3k1cWN5SmRMQ0p1WVcxbGN5STZXeUlrWlhod2IzSjBJaXdpY21WeGRXbHlaU0lzSW1GdVQySnFaV04wSWl3aUpIQnlaWFpsYm5SRmVIUmxibk5wYjI1eklpd2lUMkpxWldOMElpd2ljSEpsZG1WdWRFVjRkR1Z1YzJsdmJuTWlMQ0pUSWl3aWRHRnlaMlYwSWl3aVpTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwRXNTVUZCU1VFc1VVRkJWVU1zVVVGQlVTeGhRVU5zUWtNc1UwRkJWMFFzVVVGQlVTeG5Ra0ZEYmtKRkxHMUNRVUZ4UWtNc1QwRkJUME1zYTBKQlJXaERUQ3hSUVVGUlFTeFJRVUZSVFN4RlFVRkhMRlZCUVZjc1EwRkROVUpFTEd0Q1FVRnRRaXhUUVVGVFFTeHJRa0ZCYTBKRkxFZEJRelZEVEN4VFFVRlRTeXhIUVVOVUxFbEJSVVVzVDBGRVNVb3NiMEpCUVc5Q1FTeHRRa0ZCYlVKSkxFbEJRM0JETEVWQlExQXNUVUZCVDBNc1IwRkRVQ3hQUVVGUElpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWNtVm1iR1ZqZEM1d2NtVjJaVzUwTFdWNGRHVnVjMmx2Ym5NdWFuTWlmUT09IiwidmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKSxzZXRQcm90bz1yZXF1aXJlKFwiLi9fc2V0LXByb3RvXCIpO3NldFByb3RvJiYkZXhwb3J0KCRleHBvcnQuUyxcIlJlZmxlY3RcIix7c2V0UHJvdG90eXBlT2Y6ZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YodCxlKXtzZXRQcm90by5jaGVjayh0LGUpO3RyeXtyZXR1cm4gc2V0UHJvdG8uc2V0KHQsZSksITB9Y2F0Y2godCl7cmV0dXJuITF9fX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXlaV1pzWldOMExuTmxkQzF3Y205MGIzUjVjR1V0YjJZdWFuTWlYU3dpYm1GdFpYTWlPbHNpSkdWNGNHOXlkQ0lzSW5KbGNYVnBjbVVpTENKelpYUlFjbTkwYnlJc0lsTWlMQ0p6WlhSUWNtOTBiM1I1Y0dWUFppSXNJblJoY21kbGRDSXNJbkJ5YjNSdklpd2lZMmhsWTJzaUxDSnpaWFFpTENKbElsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHRkJRMnhDUXl4VFFVRlhSQ3hSUVVGUkxHZENRVVZ1UWtNc1ZVRkJWVVlzVVVGQlVVRXNVVUZCVVVjc1JVRkJSeXhWUVVGWExFTkJRekZEUXl4bFFVRm5RaXhUUVVGVFFTeGxRVUZsUXl4RlFVRlJReXhIUVVNNVEwb3NVMEZCVTBzc1RVRkJUVVlzUlVGQlVVTXNSMEZEZGtJc1NVRkZSU3hQUVVSQlNpeFRRVUZUVFN4SlFVRkpTQ3hGUVVGUlF5eEpRVU5rTEVWQlExQXNUVUZCVDBjc1IwRkRVQ3hQUVVGUElpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWNtVm1iR1ZqZEM1elpYUXRjSEp2ZEc5MGVYQmxMVzltTG1wekluMD0iLCJ2YXIgZFA9cmVxdWlyZShcIi4vX29iamVjdC1kcFwiKSxnT1BEPXJlcXVpcmUoXCIuL19vYmplY3QtZ29wZFwiKSxnZXRQcm90b3R5cGVPZj1yZXF1aXJlKFwiLi9fb2JqZWN0LWdwb1wiKSxoYXM9cmVxdWlyZShcIi4vX2hhc1wiKSwkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIiksY3JlYXRlRGVzYz1yZXF1aXJlKFwiLi9fcHJvcGVydHktZGVzY1wiKSxhbk9iamVjdD1yZXF1aXJlKFwiLi9fYW4tb2JqZWN0XCIpLGlzT2JqZWN0PXJlcXVpcmUoXCIuL19pcy1vYmplY3RcIik7ZnVuY3Rpb24gc2V0KGUsdCxyKXt2YXIgaSxjLHM9YXJndW1lbnRzLmxlbmd0aDw0P2U6YXJndW1lbnRzWzNdLG89Z09QRC5mKGFuT2JqZWN0KGUpLHQpO2lmKCFvKXtpZihpc09iamVjdChjPWdldFByb3RvdHlwZU9mKGUpKSlyZXR1cm4gc2V0KGMsdCxyLHMpO289Y3JlYXRlRGVzYygwKX1pZihoYXMobyxcInZhbHVlXCIpKXtpZighMT09PW8ud3JpdGFibGV8fCFpc09iamVjdChzKSlyZXR1cm4hMTtpZihpPWdPUEQuZihzLHQpKXtpZihpLmdldHx8aS5zZXR8fCExPT09aS53cml0YWJsZSlyZXR1cm4hMTtpLnZhbHVlPXIsZFAuZihzLHQsaSl9ZWxzZSBkUC5mKHMsdCxjcmVhdGVEZXNjKDAscikpO3JldHVybiEwfXJldHVybiB2b2lkIDAhPT1vLnNldCYmKG8uc2V0LmNhbGwocyxyKSwhMCl9JGV4cG9ydCgkZXhwb3J0LlMsXCJSZWZsZWN0XCIse3NldDpzZXR9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV5Wldac1pXTjBMbk5sZEM1cWN5SmRMQ0p1WVcxbGN5STZXeUprVUNJc0luSmxjWFZwY21VaUxDSm5UMUJFSWl3aVoyVjBVSEp2ZEc5MGVYQmxUMllpTENKb1lYTWlMQ0lrWlhod2IzSjBJaXdpWTNKbFlYUmxSR1Z6WXlJc0ltRnVUMkpxWldOMElpd2lhWE5QWW1wbFkzUWlMQ0p6WlhRaUxDSjBZWEpuWlhRaUxDSndjbTl3WlhKMGVVdGxlU0lzSWxZaUxDSmxlR2x6ZEdsdVowUmxjMk55YVhCMGIzSWlMQ0p3Y205MGJ5SXNJbkpsWTJWcGRtVnlJaXdpWVhKbmRXMWxiblJ6SWl3aWJHVnVaM1JvSWl3aWIzZHVSR1Z6WXlJc0ltWWlMQ0ozY21sMFlXSnNaU0lzSW1kbGRDSXNJblpoYkhWbElpd2lkVzVrWldacGJtVmtJaXdpWTJGc2JDSXNJbE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVU5CTEVsQlFVbEJMRWRCUVV0RExGRkJRVkVzWjBKQlEySkRMRXRCUVU5RUxGRkJRVkVzYTBKQlEyWkZMR1ZCUVdsQ1JpeFJRVUZSTEdsQ1FVTjZRa2NzU1VGQlRVZ3NVVUZCVVN4VlFVTmtTU3hSUVVGVlNpeFJRVUZSTEdGQlEyeENTeXhYUVVGaFRDeFJRVUZSTEc5Q1FVTnlRazBzVTBGQlYwNHNVVUZCVVN4blFrRkRia0pQTEZOQlFWZFFMRkZCUVZFc1owSkJSWFpDTEZOQlFWTlJMRWxCUVVsRExFVkJRVkZETEVWQlFXRkRMRWRCUTJoRExFbEJSVWxETEVWQlFXOUNReXhGUVVad1FrTXNSVUZCVjBNc1ZVRkJWVU1zVDBGQlV5eEZRVUZKVUN4RlFVRlRUU3hWUVVGVkxFZEJRM0pFUlN4RlFVRlZhRUlzUzBGQlMybENMRVZCUVVWYUxGTkJRVk5ITEVkQlFWTkRMRWRCUlhaRExFbEJRVXRQTEVWQlFWTXNRMEZEV2l4SFFVRkpWaXhUUVVGVFRTeEZRVUZSV0N4bFFVRmxUeXhKUVVOc1F5eFBRVUZQUkN4SlFVRkpTeXhGUVVGUFNDeEZRVUZoUXl4RlFVRkhSeXhIUVVWd1EwY3NSVUZCVlZvc1YwRkJWeXhIUVVWMlFpeEhRVUZKUml4SlFVRkpZeXhGUVVGVExGTkJRVlVzUTBGRGVrSXNTVUZCZVVJc1NVRkJja0pCTEVWQlFWRkZMRmRCUVhWQ1dpeFRRVUZUVHl4SFFVRlhMRTlCUVU4c1JVRkRPVVFzUjBGQlNVWXNSVUZCY1VKWUxFdEJRVXRwUWl4RlFVRkZTaXhGUVVGVlNpeEhRVUZqTEVOQlEzUkVMRWRCUVVsRkxFVkJRVzFDVVN4TFFVRlBVaXhGUVVGdFFrb3NUVUZCZFVNc1NVRkJhRU5KTEVWQlFXMUNUeXhUUVVGdlFpeFBRVUZQTEVWQlEzUkhVQ3hGUVVGdFFsTXNUVUZCVVZZc1JVRkRNMEphTEVkQlFVZHRRaXhGUVVGRlNpeEZRVUZWU2l4RlFVRmhSU3hSUVVOMlFtSXNSMEZCUjIxQ0xFVkJRVVZLTEVWQlFWVktMRVZCUVdGTUxGZEJRVmNzUlVGQlIwMHNTVUZEYWtRc1QwRkJUeXhGUVVWVUxGbEJRWFZDVnl4SlFVRm9Ra3dzUlVGQlVWUXNUVUZCTmtKVExFVkJRVkZVTEVsQlFVbGxMRXRCUVV0VUxFVkJRVlZJTEVsQlFVa3NSMEZITjBWUUxGRkJRVkZCTEZGQlFWRnZRaXhGUVVGSExGVkJRVmNzUTBGQlJXaENMRWxCUVV0Qklpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWNtVm1iR1ZqZEM1elpYUXVhbk1pZlE9PSIsInZhciBnbG9iYWw9cmVxdWlyZShcIi4vX2dsb2JhbFwiKSxpbmhlcml0SWZSZXF1aXJlZD1yZXF1aXJlKFwiLi9faW5oZXJpdC1pZi1yZXF1aXJlZFwiKSxkUD1yZXF1aXJlKFwiLi9fb2JqZWN0LWRwXCIpLmYsZ09QTj1yZXF1aXJlKFwiLi9fb2JqZWN0LWdvcG5cIikuZixpc1JlZ0V4cD1yZXF1aXJlKFwiLi9faXMtcmVnZXhwXCIpLCRmbGFncz1yZXF1aXJlKFwiLi9fZmxhZ3NcIiksJFJlZ0V4cD1nbG9iYWwuUmVnRXhwLEJhc2U9JFJlZ0V4cCxwcm90bz0kUmVnRXhwLnByb3RvdHlwZSxyZTE9L2EvZyxyZTI9L2EvZyxDT1JSRUNUX05FVz1uZXcgJFJlZ0V4cChyZTEpIT09cmUxO2lmKHJlcXVpcmUoXCIuL19kZXNjcmlwdG9yc1wiKSYmKCFDT1JSRUNUX05FV3x8cmVxdWlyZShcIi4vX2ZhaWxzXCIpKGZ1bmN0aW9uKCl7cmV0dXJuIHJlMltyZXF1aXJlKFwiLi9fd2tzXCIpKFwibWF0Y2hcIildPSExLCRSZWdFeHAocmUxKSE9cmUxfHwkUmVnRXhwKHJlMik9PXJlMnx8XCIvYS9pXCIhPSRSZWdFeHAocmUxLFwiaVwiKX0pKSl7JFJlZ0V4cD1mdW5jdGlvbiBSZWdFeHAoZSxyKXt2YXIgaT10aGlzIGluc3RhbmNlb2YgJFJlZ0V4cCxnPWlzUmVnRXhwKGUpLG89dm9pZCAwPT09cjtyZXR1cm4haSYmZyYmZS5jb25zdHJ1Y3Rvcj09PSRSZWdFeHAmJm8/ZTppbmhlcml0SWZSZXF1aXJlZChDT1JSRUNUX05FVz9uZXcgQmFzZShnJiYhbz9lLnNvdXJjZTplLHIpOkJhc2UoKGc9ZSBpbnN0YW5jZW9mICRSZWdFeHApP2Uuc291cmNlOmUsZyYmbz8kZmxhZ3MuY2FsbChlKTpyKSxpP3RoaXM6cHJvdG8sJFJlZ0V4cCl9O2Zvcih2YXIgcHJveHk9ZnVuY3Rpb24oZSl7ZSBpbiAkUmVnRXhwfHxkUCgkUmVnRXhwLGUse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gQmFzZVtlXX0sc2V0OmZ1bmN0aW9uKHIpe0Jhc2VbZV09cn19KX0sa2V5cz1nT1BOKEJhc2UpLGk9MDtrZXlzLmxlbmd0aD5pOylwcm94eShrZXlzW2krK10pO3Byb3RvLmNvbnN0cnVjdG9yPSRSZWdFeHAsJFJlZ0V4cC5wcm90b3R5cGU9cHJvdG8scmVxdWlyZShcIi4vX3JlZGVmaW5lXCIpKGdsb2JhbCxcIlJlZ0V4cFwiLCRSZWdFeHApfXJlcXVpcmUoXCIuL19zZXQtc3BlY2llc1wiKShcIlJlZ0V4cFwiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV5WldkbGVIQXVZMjl1YzNSeWRXTjBiM0l1YW5NaVhTd2libUZ0WlhNaU9sc2laMnh2WW1Gc0lpd2ljbVZ4ZFdseVpTSXNJbWx1YUdWeWFYUkpabEpsY1hWcGNtVmtJaXdpWkZBaUxDSm1JaXdpWjA5UVRpSXNJbWx6VW1WblJYaHdJaXdpSkdac1lXZHpJaXdpSkZKbFowVjRjQ0lzSWxKbFowVjRjQ0lzSWtKaGMyVWlMQ0p3Y205MGJ5SXNJbkJ5YjNSdmRIbHdaU0lzSW5KbE1TSXNJbkpsTWlJc0lrTlBVbEpGUTFSZlRrVlhJaXdpY0NJc0luUnBVa1VpTENKMGFHbHpJaXdpY0dsU1JTSXNJbVpwVlNJc0luVnVaR1ZtYVc1bFpDSXNJbU52Ym5OMGNuVmpkRzl5SWl3aWMyOTFjbU5sSWl3aVkyRnNiQ0lzSW5CeWIzaDVJaXdpYTJWNUlpd2lZMjl1Wm1sbmRYSmhZbXhsSWl3aVoyVjBJaXdpYzJWMElpd2lhWFFpTENKclpYbHpJaXdpYVNJc0lteGxibWQwYUNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1NVRkJTVUVzVDBGQlUwTXNVVUZCVVN4aFFVTnFRa01zYTBKQlFXOUNSQ3hSUVVGUkxEQkNRVU0xUWtVc1IwRkJTMFlzVVVGQlVTeG5Ra0ZCWjBKSExFVkJRemRDUXl4TFFVRlBTaXhSUVVGUkxHdENRVUZyUWtjc1JVRkRha05GTEZOQlFWZE1MRkZCUVZFc1owSkJRMjVDVFN4UFFVRlRUaXhSUVVGUkxGbEJRMnBDVHl4UlFVRlZVaXhQUVVGUFV5eFBRVU5xUWtNc1MwRkJUMFlzVVVGRFVFY3NUVUZCVVVnc1VVRkJVVWtzVlVGRGFFSkRMRWxCUVUwc1MwRkRUa01zU1VGQlRTeExRVVZPUXl4WlFVRmpMRWxCUVVsUUxGRkJRVkZMTEU5QlFWTkJMRWxCUlhaRExFZEJRVWxhTEZGQlFWRXNjVUpCUVhWQ1l5eGhRVUZsWkN4UlFVRlJMRmRCUVZKQkxFTkJRVzlDTEZkQlIzQkZMRTlCUmtGaExFbEJRVWxpTEZGQlFWRXNVMEZCVWtFc1EwRkJhMElzVjBGQldTeEZRVVV6UWs4c1VVRkJVVXNzVFVGQlVVRXNTMEZCVDB3c1VVRkJVVTBzVFVGQlVVRXNTMEZCTkVJc1VVRkJja0pPTEZGQlFWRkxMRWxCUVVzc1VVRkRMMFFzUTBGRFNFd3NVVUZCVlN4VFFVRlRReXhQUVVGUFR5eEZRVUZIV2l4SFFVTXpRaXhKUVVGSllTeEZRVUZQUXl4blFrRkJaMEpXTEZGQlEzWkNWeXhGUVVGUFlpeFRRVUZUVlN4SFFVTm9Ra2tzVDBGQldVTXNTVUZCVG1wQ0xFVkJRMVlzVDBGQlVXRXNSMEZCVVVVc1IwRkJVVWdzUlVGQlJVMHNZMEZCWjBKa0xGTkJRVmRaTEVWQlFVMUtMRVZCUTNaRVpDeHJRa0ZCYTBKaExGbEJRMmhDTEVsQlFVbE1MRXRCUVV0VExFbEJRVk5ETEVWQlFVMUtMRVZCUVVWUExFOUJRVk5RTEVWQlFVZGFMRWRCUTNSRFRTeE5RVUZOVXl4RlFVRlBTQ3hoUVVGaFVpeFRRVUZYVVN4RlFVRkZUeXhQUVVGVFVDeEZRVUZIUnl4SFFVRlJReXhGUVVGTllpeFBRVUZQYVVJc1MwRkJTMUlzUjBGQlMxb3NSMEZEY0VaaExFVkJRVTlETEV0QlFVOVFMRTFCUVU5SUxGVkJVek5DTEVsQlVFRXNTVUZCU1dsQ0xFMUJRVkVzVTBGQlZVTXNSMEZEY0VKQkxFdEJRVTlzUWl4VFFVRlhUQ3hIUVVGSFN5eFJRVUZUYTBJc1JVRkJTeXhEUVVOcVEwTXNZMEZCWXl4RlFVTmtReXhKUVVGTExGZEJRV01zVDBGQlQyeENMRXRCUVV0blFpeEpRVU12UWtjc1NVRkJTeXhUUVVGVlF5eEhRVUZOY0VJc1MwRkJTMmRDTEVkQlFVOUpMRTFCUnpWQ1F5eExRVUZQTVVJc1MwRkJTMHNzVFVGQlQzTkNMRVZCUVVrc1JVRkJSMFFzUzBGQlMwVXNUMEZCVTBRc1IwRkJTVkFzVFVGQlRVMHNTMEZCUzBNc1RVRkRhRVZ5UWl4TlFVRk5WeXhaUVVGalpDeFJRVU53UWtFc1VVRkJVVWtzVlVGQldVUXNUVUZEY0VKV0xGRkJRVkVzWTBGQlVrRXNRMEZCZFVKRUxFOUJRVkVzVTBGQlZWRXNVMEZITTBOUUxGRkJRVkVzYVVKQlFWSkJMRU5CUVRCQ0lpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWNtVm5aWGh3TG1OdmJuTjBjblZqZEc5eUxtcHpJbjA9IiwicmVxdWlyZShcIi4vX2Rlc2NyaXB0b3JzXCIpJiZcImdcIiE9Ly4vZy5mbGFncyYmcmVxdWlyZShcIi4vX29iamVjdC1kcFwiKS5mKFJlZ0V4cC5wcm90b3R5cGUsXCJmbGFnc1wiLHtjb25maWd1cmFibGU6ITAsZ2V0OnJlcXVpcmUoXCIuL19mbGFnc1wiKX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXlaV2RsZUhBdVpteGhaM011YW5NaVhTd2libUZ0WlhNaU9sc2ljbVZ4ZFdseVpTSXNJbVpzWVdkeklpd2laaUlzSWxKbFowVjRjQ0lzSW5CeWIzUnZkSGx3WlNJc0ltTnZibVpwWjNWeVlXSnNaU0lzSW1kbGRDSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwbEJMRkZCUVZFc2JVSkJRVzFETEV0QlFXUXNTMEZCUzBNc1QwRkJZMFFzVVVGQlVTeG5Ra0ZCWjBKRkxFVkJRVVZETEU5QlFVOURMRlZCUVZjc1VVRkJVeXhEUVVOMlIwTXNZMEZCWXl4RlFVTmtReXhKUVVGTFRpeFJRVUZSSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1Y21WblpYaHdMbVpzWVdkekxtcHpJbjA9IiwicmVxdWlyZShcIi4vX2ZpeC1yZS13a3NcIikoXCJtYXRjaFwiLDEsZnVuY3Rpb24ocix0LGkpe3JldHVybltmdW5jdGlvbiBtYXRjaChpKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKHRoaXMpLGU9bnVsbD09aT92b2lkIDA6aVt0XTtyZXR1cm4gdm9pZCAwIT09ZT9lLmNhbGwoaSxuKTpuZXcgUmVnRXhwKGkpW3RdKFN0cmluZyhuKSl9LGldfSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1eVpXZGxlSEF1YldGMFkyZ3Vhbk1pWFN3aWJtRnRaWE1pT2xzaWNtVnhkV2x5WlNJc0ltUmxabWx1WldRaUxDSk5RVlJEU0NJc0lpUnRZWFJqYUNJc0ltMWhkR05vSWl3aWNtVm5aWGh3SWl3aVR5SXNJblJvYVhNaUxDSm1iaUlzSW5WdVpHVm1hVzVsWkNJc0ltTmhiR3dpTENKU1pXZEZlSEFpTENKVGRISnBibWNpWFN3aWJXRndjR2x1WjNNaU9pSkJRVU5CUVN4UlFVRlJMR2RDUVVGU1FTeERRVUY1UWl4UlFVRlRMRVZCUVVjc1UwRkJWVU1zUlVGQlUwTXNSVUZCVDBNc1IwRkZOMFFzVFVGQlR5eERRVUZETEZOQlFWTkRMRTFCUVUxRExFZEJRM0pDTEdGQlEwRXNTVUZCU1VNc1JVRkJTVXdzUlVGQlVVMHNUVUZEV2tNc1JVRkJaVU1zVFVGQlZrb3NUMEZCYzBKSkxFVkJRVmxLTEVWQlFVOUlMRWRCUTJ4RUxGbEJRV05QTEVsQlFWQkVMRVZCUVcxQ1FTeEZRVUZIUlN4TFFVRkxUQ3hGUVVGUlF5eEhRVUZMTEVsQlFVbExMRTlCUVU5T0xFZEJRVkZJTEVkQlFVOVZMRTlCUVU5T0xFdEJReTlGU0NJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5KbFoyVjRjQzV0WVhSamFDNXFjeUo5IiwicmVxdWlyZShcIi4vX2ZpeC1yZS13a3NcIikoXCJyZXBsYWNlXCIsMixmdW5jdGlvbihyLGUsaSl7cmV0dXJuW2Z1bmN0aW9uIHJlcGxhY2UobCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgdD1yKHRoaXMpLGM9bnVsbD09bD92b2lkIDA6bFtlXTtyZXR1cm4gdm9pZCAwIT09Yz9jLmNhbGwobCx0LG4pOmkuY2FsbChTdHJpbmcodCksbCxuKX0saV19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV5WldkbGVIQXVjbVZ3YkdGalpTNXFjeUpkTENKdVlXMWxjeUk2V3lKeVpYRjFhWEpsSWl3aVpHVm1hVzVsWkNJc0lsSkZVRXhCUTBVaUxDSWtjbVZ3YkdGalpTSXNJbkpsY0d4aFkyVWlMQ0p6WldGeVkyaFdZV3gxWlNJc0luSmxjR3hoWTJWV1lXeDFaU0lzSWs4aUxDSjBhR2x6SWl3aVptNGlMQ0oxYm1SbFptbHVaV1FpTENKallXeHNJaXdpVTNSeWFXNW5JbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRVUVzVVVGQlVTeG5Ra0ZCVWtFc1EwRkJlVUlzVlVGQlZ5eEZRVUZITEZOQlFWVkRMRVZCUVZORExFVkJRVk5ETEVkQlJXcEZMRTFCUVU4c1EwRkJReXhUUVVGVFF5eFJRVUZSUXl4RlFVRmhReXhIUVVOd1F5eGhRVU5CTEVsQlFVbERMRVZCUVVsT0xFVkJRVkZQTEUxQlExcERMRVZCUVc5Q1F5eE5RVUZtVEN4UFFVRXlRa3NzUlVGQldVd3NSVUZCV1Vnc1IwRkROVVFzV1VGQlkxRXNTVUZCVUVRc1JVRkRTRUVzUlVGQlIwVXNTMEZCUzA0c1JVRkJZVVVzUlVGQlIwUXNSMEZEZUVKSUxFVkJRVk5STEV0QlFVdERMRTlCUVU5TUxFZEJRVWxHTEVWQlFXRkRMRWxCUTNwRFNDSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxuSmxaMlY0Y0M1eVpYQnNZV05sTG1wekluMD0iLCJyZXF1aXJlKFwiLi9fZml4LXJlLXdrc1wiKShcInNlYXJjaFwiLDEsZnVuY3Rpb24ocixlLGkpe3JldHVybltmdW5jdGlvbiBzZWFyY2goaSl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cih0aGlzKSx0PW51bGw9PWk/dm9pZCAwOmlbZV07cmV0dXJuIHZvaWQgMCE9PXQ/dC5jYWxsKGksbik6bmV3IFJlZ0V4cChpKVtlXShTdHJpbmcobikpfSxpXX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXlaV2RsZUhBdWMyVmhjbU5vTG1weklsMHNJbTVoYldWeklqcGJJbkpsY1hWcGNtVWlMQ0prWldacGJtVmtJaXdpVTBWQlVrTklJaXdpSkhObFlYSmphQ0lzSW5ObFlYSmphQ0lzSW5KbFoyVjRjQ0lzSWs4aUxDSjBhR2x6SWl3aVptNGlMQ0oxYm1SbFptbHVaV1FpTENKallXeHNJaXdpVW1WblJYaHdJaXdpVTNSeWFXNW5JbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRVUVzVVVGQlVTeG5Ra0ZCVWtFc1EwRkJlVUlzVTBGQlZTeEZRVUZITEZOQlFWVkRMRVZCUVZORExFVkJRVkZETEVkQlJTOUVMRTFCUVU4c1EwRkJReXhUUVVGVFF5eFBRVUZQUXl4SFFVTjBRaXhoUVVOQkxFbEJRVWxETEVWQlFVbE1MRVZCUVZGTkxFMUJRMXBETEVWQlFXVkRMRTFCUVZaS0xFOUJRWE5DU1N4RlFVRlpTaXhGUVVGUFNDeEhRVU5zUkN4WlFVRmpUeXhKUVVGUVJDeEZRVUZ0UWtFc1JVRkJSMFVzUzBGQlMwd3NSVUZCVVVNc1IwRkJTeXhKUVVGSlN5eFBRVUZQVGl4SFFVRlJTQ3hIUVVGUlZTeFBRVUZQVGl4TFFVTm9Sa2dpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV5WldkbGVIQXVjMlZoY21Ob0xtcHpJbjA9IiwicmVxdWlyZShcIi4vX2ZpeC1yZS13a3NcIikoXCJzcGxpdFwiLDIsZnVuY3Rpb24oZSxpLHQpe1widXNlIHN0cmljdFwiO3ZhciBsPXJlcXVpcmUoXCIuL19pcy1yZWdleHBcIiksbj10LHM9W10ucHVzaDtpZihcImNcIj09XCJhYmJjXCIuc3BsaXQoLyhiKSovKVsxXXx8NCE9XCJ0ZXN0XCIuc3BsaXQoLyg/OikvLC0xKS5sZW5ndGh8fDIhPVwiYWJcIi5zcGxpdCgvKD86YWIpKi8pLmxlbmd0aHx8NCE9XCIuXCIuc3BsaXQoLyguPykoLj8pLykubGVuZ3RofHxcIi5cIi5zcGxpdCgvKCkoKS8pLmxlbmd0aD4xfHxcIlwiLnNwbGl0KC8uPy8pLmxlbmd0aCl7dmFyIHI9dm9pZCAwPT09LygpPz8vLmV4ZWMoXCJcIilbMV07dD1mdW5jdGlvbihlLGkpe3ZhciB0PVN0cmluZyh0aGlzKTtpZih2b2lkIDA9PT1lJiYwPT09aSlyZXR1cm5bXTtpZighbChlKSlyZXR1cm4gbi5jYWxsKHQsZSxpKTt2YXIgdSxjLGcsaCxvLHA9W10sYT0oZS5pZ25vcmVDYXNlP1wiaVwiOlwiXCIpKyhlLm11bHRpbGluZT9cIm1cIjpcIlwiKSsoZS51bmljb2RlP1widVwiOlwiXCIpKyhlLnN0aWNreT9cInlcIjpcIlwiKSxkPTAsdj12b2lkIDA9PT1pPzQyOTQ5NjcyOTU6aT4+PjAseD1uZXcgUmVnRXhwKGUuc291cmNlLGErXCJnXCIpO2ZvcihyfHwodT1uZXcgUmVnRXhwKFwiXlwiK3guc291cmNlK1wiJCg/IVxcXFxzKVwiLGEpKTsoYz14LmV4ZWModCkpJiYhKChnPWMuaW5kZXgrY1swXS5sZW5ndGgpPmQmJihwLnB1c2godC5zbGljZShkLGMuaW5kZXgpKSwhciYmYy5sZW5ndGg+MSYmY1swXS5yZXBsYWNlKHUsZnVuY3Rpb24oKXtmb3Iobz0xO288YXJndW1lbnRzLmxlbmd0aC0yO28rKyl2b2lkIDA9PT1hcmd1bWVudHNbb10mJihjW29dPXZvaWQgMCl9KSxjLmxlbmd0aD4xJiZjLmluZGV4PHQubGVuZ3RoJiZzLmFwcGx5KHAsYy5zbGljZSgxKSksaD1jWzBdLmxlbmd0aCxkPWcscC5sZW5ndGg+PXYpKTspeC5sYXN0SW5kZXg9PT1jLmluZGV4JiZ4Lmxhc3RJbmRleCsrO3JldHVybiBkPT09dC5sZW5ndGg/IWgmJngudGVzdChcIlwiKXx8cC5wdXNoKFwiXCIpOnAucHVzaCh0LnNsaWNlKGQpKSxwLmxlbmd0aD52P3Auc2xpY2UoMCx2KTpwfX1lbHNlXCIwXCIuc3BsaXQodm9pZCAwLDApLmxlbmd0aCYmKHQ9ZnVuY3Rpb24oZSxpKXtyZXR1cm4gdm9pZCAwPT09ZSYmMD09PWk/W106bi5jYWxsKHRoaXMsZSxpKX0pO3JldHVybltmdW5jdGlvbiBzcGxpdChsLG4pe3ZhciBzPWUodGhpcykscj1udWxsPT1sP3ZvaWQgMDpsW2ldO3JldHVybiB2b2lkIDAhPT1yP3IuY2FsbChsLHMsbik6dC5jYWxsKFN0cmluZyhzKSxsLG4pfSx0XX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXlaV2RsZUhBdWMzQnNhWFF1YW5NaVhTd2libUZ0WlhNaU9sc2ljbVZ4ZFdseVpTSXNJbVJsWm1sdVpXUWlMQ0pUVUV4SlZDSXNJaVJ6Y0d4cGRDSXNJbWx6VW1WblJYaHdJaXdpWDNOd2JHbDBJaXdpSkhCMWMyZ2lMQ0p3ZFhOb0lpd2lUbEJEUnlJc0luVnVaR1ZtYVc1bFpDSXNJbVY0WldNaUxDSnpaWEJoY21GMGIzSWlMQ0pzYVcxcGRDSXNJbk4wY21sdVp5SXNJbE4wY21sdVp5SXNJblJvYVhNaUxDSmpZV3hzSWl3aWMyVndZWEpoZEc5eU1pSXNJbTFoZEdOb0lpd2liR0Z6ZEVsdVpHVjRJaXdpYkdGemRFeGxibWQwYUNJc0lta2lMQ0p2ZFhSd2RYUWlMQ0ptYkdGbmN5SXNJbWxuYm05eVpVTmhjMlVpTENKdGRXeDBhV3hwYm1VaUxDSjFibWxqYjJSbElpd2ljM1JwWTJ0NUlpd2liR0Z6ZEV4aGMzUkpibVJsZUNJc0luTndiR2wwVEdsdGFYUWlMQ0p6WlhCaGNtRjBiM0pEYjNCNUlpd2lVbVZuUlhod0lpd2ljMjkxY21ObElpd2lhVzVrWlhnaUxDSnpiR2xqWlNJc0luSmxjR3hoWTJVaUxDSmhjbWQxYldWdWRITWlMQ0poY0hCc2VTSXNJblJsYzNRaUxDSnpjR3hwZENJc0lrOGlMQ0ptYmlKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUTBGQkxGRkJRVkVzWjBKQlFWSkJMRU5CUVhsQ0xGRkJRVk1zUlVGQlJ5eFRRVUZWUXl4RlFVRlRReXhGUVVGUFF5eEhRVU0zUkN4aFFVTkJMRWxCUVVsRExFVkJRVmRLTEZGQlFWRXNaMEpCUTI1Q1N5eEZRVUZUUml4RlFVTlVSeXhGUVVGUkxFZEJRVWRETEV0QlNXWXNSMEZESzBJc1MwRkJOMElzVDBGQllTeE5RVUZGTEZGQlFWRXNTVUZEWlN4SFFVRjBReXhQUVVGaExFMUJRVVVzVVVGQlV5eEhRVUZUTEZGQlEwVXNSMEZCYmtNc1MwRkJWeXhOUVVGRkxGZEJRV2xDTEZGQlEwc3NSMEZCYmtNc1NVRkJWU3hOUVVGRkxGbEJRV3RDTEZGQlF6bENMRWxCUVZVc1RVRkJSU3hSUVVGakxFOUJRVWtzUjBGRE9VSXNSMEZCVXl4TlFVRkZMRTFCUVZrc1QwRkRka0lzUTBGRFFTeEpRVUZKUXl4UFFVRTRRa01zU1VGQmRrSXNUMEZCVDBNc1MwRkJTeXhKUVVGSkxFZEJSVE5DVUN4RlFVRlRMRk5CUVZWUkxFVkJRVmRETEVkQlF6VkNMRWxCUVVsRExFVkJRVk5ETEU5QlFVOURMRTFCUTNCQ0xGRkJRV3RDVGl4SlFVRmtSU3hIUVVGeFF5eEpRVUZXUXl4RlFVRmhMRTFCUVU4c1IwRkZia1FzU1VGQlMxSXNSVUZCVTA4c1IwRkJXU3hQUVVGUFRpeEZRVUZQVnl4TFFVRkxTQ3hGUVVGUlJpeEZRVUZYUXl4SFFVTm9SU3hKUVZOSlN5eEZRVUZaUXl4RlFVRlBReXhGUVVGWFF5eEZRVUZaUXl4RlFWUXhRME1zUlVGQlV5eEhRVU5VUXl4SFFVRlRXaXhGUVVGVllTeFhRVUZoTEVsQlFVMHNTMEZETjBKaUxFVkJRVlZqTEZWQlFWa3NTVUZCVFN4TFFVTTFRbVFzUlVGQlZXVXNVVUZCVlN4SlFVRk5MRXRCUXpGQ1ppeEZRVUZWWjBJc1QwRkJVeXhKUVVGTkxFbEJRMnhEUXl4RlFVRm5RaXhGUVVOb1FrTXNUMEZCZFVKd1FpeEpRVUZXUnl4RlFVRnpRaXhYUVVGaFFTeEpRVUZWTEVWQlJURkVhMElzUlVGQlowSXNTVUZCU1VNc1QwRkJUM0JDTEVWQlFWVnhRaXhQUVVGUlZDeEZRVUZSTEV0QlNYcEVMRWxCUkV0bUxFbEJRVTFUTEVWQlFXRXNTVUZCU1dNc1QwRkJUeXhKUVVGTlJDeEZRVUZqUlN4UFFVRlRMRmRCUVZsVUxFdEJRM0pGVEN4RlFVRlJXU3hGUVVGamNFSXNTMEZCUzBjc1VVRkZhRU5OTEVWQlFWbEVMRVZCUVUxbExFMUJRVkZtTEVWQlFVMHNSMEZCVXl4UlFVTjZRbFVzU1VGRFpFNHNSVUZCVDJZc1MwRkJTMDBzUlVGQlQzRkNMRTFCUVUxT0xFVkJRV1ZXTEVWQlFVMWxMRk5CUjNwRGVrSXNSMEZCVVZVc1JVRkJXU3hQUVVGSkxFZEJRVWRCTEVWQlFVMHNSMEZCUjJsQ0xGRkJRVkZzUWl4RlFVRlpMRmRCUXpORUxFbEJRVXRKTEVWQlFVa3NSVUZCUjBFc1JVRkJTV1VzVlVGQlowSXNUMEZCU1N4RlFVRkhaaXhUUVVFd1Fsb3NTVUZCYWtJeVFpeFZRVUZWWml4TFFVRnJRa2dzUlVGQlRVY3NVVUZCUzFvc1MwRkZja1pUTEVWQlFWa3NUMEZCU1N4SFFVRkxRU3hGUVVGTlpTeE5RVUZSY0VJc1JVRkJZU3hSUVVGSFVDeEZRVUZOSzBJc1RVRkJUV1lzUlVGQlVVb3NSVUZCVFdkQ0xFMUJRVTBzU1VGRGRrWmtMRVZCUVdGR0xFVkJRVTBzUjBGQlV5eFBRVU0xUWxVc1JVRkJaMEpVTEVWQlExcEhMRVZCUVdFc1VVRkJTMDhzUzBGRmNFSkRMRVZCUVhkQ0xGbEJRVTFhTEVWQlFVMWxMRTlCUVU5SUxFVkJRWGRDTEZsQlMzcEZMRTlCU0VsR0xFbEJRV3RDWml4RlFVRmhMRkZCUXpkQ1R5eEhRVUZsVlN4RlFVRmpVU3hMUVVGTExFdEJRVXRvUWl4RlFVRlBaaXhMUVVGTExFbEJRMnhFWlN4RlFVRlBaaXhMUVVGTFRTeEZRVUZQY1VJc1RVRkJUVTRzU1VGRGVrSk9MRVZCUVdFc1QwRkJTVThzUlVGQllWQXNSVUZCVDFrc1RVRkJUU3hGUVVGSFRDeEhRVUZqVUN4UFFVYzFSQ3hKUVVGVkxGZEJRVVZpTEVWQlFWY3NSMEZCVXl4VFFVTjZRMDRzUlVGQlV5eFRRVUZWVVN4RlFVRlhReXhIUVVNMVFpeFpRVUZ4UWtnc1NVRkJaRVVzUjBGQmNVTXNTVUZCVmtNc1JVRkJZeXhIUVVGTFVDeEZRVUZQVnl4TFFVRkxSQ3hMUVVGTlNpeEZRVUZYUXl4TFFVbDBSaXhOUVVGUExFTkJRVU1zVTBGQlV6SkNMRTFCUVUwMVFpeEZRVUZYUXl4SFFVTm9ReXhKUVVGSk5FSXNSVUZCU1haRExFVkJRVkZqTEUxQlExb3dRaXhGUVVGclFtaERMRTFCUVdKRkxFOUJRWGxDUml4RlFVRlpSU3hGUVVGVlZDeEhRVU40UkN4WlFVRmpUeXhKUVVGUVowTXNSVUZCYlVKQkxFVkJRVWQ2UWl4TFFVRkxUQ3hGUVVGWE5rSXNSVUZCUnpWQ0xFZEJRVk5VTEVWQlFVOWhMRXRCUVV0R0xFOUJRVTh3UWl4SFFVRkpOMElzUlVGQlYwTXNTVUZETVVaVUlpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWNtVm5aWGh3TG5Od2JHbDBMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3JlcXVpcmUoXCIuL2VzNi5yZWdleHAuZmxhZ3NcIik7dmFyIGFuT2JqZWN0PXJlcXVpcmUoXCIuL19hbi1vYmplY3RcIiksJGZsYWdzPXJlcXVpcmUoXCIuL19mbGFnc1wiKSxERVNDUklQVE9SUz1yZXF1aXJlKFwiLi9fZGVzY3JpcHRvcnNcIiksVE9fU1RSSU5HPVwidG9TdHJpbmdcIiwkdG9TdHJpbmc9Ly4vW1RPX1NUUklOR10sZGVmaW5lPWZ1bmN0aW9uKGUpe3JlcXVpcmUoXCIuL19yZWRlZmluZVwiKShSZWdFeHAucHJvdG90eXBlLFRPX1NUUklORyxlLCEwKX07cmVxdWlyZShcIi4vX2ZhaWxzXCIpKGZ1bmN0aW9uKCl7cmV0dXJuXCIvYS9iXCIhPSR0b1N0cmluZy5jYWxsKHtzb3VyY2U6XCJhXCIsZmxhZ3M6XCJiXCJ9KX0pP2RlZmluZShmdW5jdGlvbiB0b1N0cmluZygpe3ZhciBlPWFuT2JqZWN0KHRoaXMpO3JldHVyblwiL1wiLmNvbmNhdChlLnNvdXJjZSxcIi9cIixcImZsYWdzXCJpbiBlP2UuZmxhZ3M6IURFU0NSSVBUT1JTJiZlIGluc3RhbmNlb2YgUmVnRXhwPyRmbGFncy5jYWxsKGUpOnZvaWQgMCl9KTokdG9TdHJpbmcubmFtZSE9VE9fU1RSSU5HJiZkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKXtyZXR1cm4gJHRvU3RyaW5nLmNhbGwodGhpcyl9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV5WldkbGVIQXVkRzh0YzNSeWFXNW5MbXB6SWwwc0ltNWhiV1Z6SWpwYkluSmxjWFZwY21VaUxDSmhiazlpYW1WamRDSXNJaVJtYkdGbmN5SXNJa1JGVTBOU1NWQlVUMUpUSWl3aVZFOWZVMVJTU1U1SElpd2lKSFJ2VTNSeWFXNW5JaXdpWkdWbWFXNWxJaXdpWm00aUxDSlNaV2RGZUhBaUxDSndjbTkwYjNSNWNHVWlMQ0pqWVd4c0lpd2ljMjkxY21ObElpd2labXhoWjNNaUxDSjBiMU4wY21sdVp5SXNJbElpTENKMGFHbHpJaXdpWTI5dVkyRjBJaXdpZFc1a1pXWnBibVZrSWl3aWJtRnRaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRFFVRXNVVUZCVVN4elFrRkRVaXhKUVVGSlF5eFRRVUZYUkN4UlFVRlJMR2RDUVVOdVFrVXNUMEZCVTBZc1VVRkJVU3haUVVOcVFrY3NXVUZCWTBnc1VVRkJVU3hyUWtGRGRFSkpMRlZCUVZrc1YwRkRXa01zVlVGQldTeEpRVUZKUkN4WFFVVm9Ra1VzVDBGQlV5eFRRVUZWUXl4SFFVTnlRbEFzVVVGQlVTeGpRVUZTUVN4RFFVRjFRbEVzVDBGQlQwTXNWVUZCVjB3c1ZVRkJWMGNzUjBGQlNTeEpRVWwwUkZBc1VVRkJVU3hYUVVGU1FTeERRVUZ2UWl4WFFVRmpMRTFCUVhORUxGRkJRUzlEU3l4VlFVRlZTeXhMUVVGTExFTkJRVVZETEU5QlFWRXNTVUZCUzBNc1RVRkJUeXhSUVVOb1JrNHNUMEZCVHl4VFFVRlRUeXhYUVVOa0xFbEJRVWxETEVWQlFVbGlMRk5CUVZOakxFMUJRMnBDTEUxQlFVOHNTVUZCU1VNc1QwRkJUMFlzUlVGQlJVZ3NUMEZCVVN4SlFVTXhRaXhWUVVGWFJ5eEZRVUZKUVN4RlFVRkZSaXhQUVVGVFZDeGhRVUZsVnl4aFFVRmhUaXhQUVVGVFRpeFBRVUZQVVN4TFFVRkxTU3hSUVVGTFJ5eExRVWN6UlZvc1ZVRkJWV0VzVFVGQlVXUXNWMEZETTBKRkxFOUJRVThzVTBGQlUwOHNWMEZEWkN4UFFVRlBVaXhWUVVGVlN5eExRVUZMU3lJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5KbFoyVjRjQzUwYnkxemRISnBibWN1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgc3Ryb25nPXJlcXVpcmUoXCIuL19jb2xsZWN0aW9uLXN0cm9uZ1wiKSx2YWxpZGF0ZT1yZXF1aXJlKFwiLi9fdmFsaWRhdGUtY29sbGVjdGlvblwiKSxTRVQ9XCJTZXRcIjttb2R1bGUuZXhwb3J0cz1yZXF1aXJlKFwiLi9fY29sbGVjdGlvblwiKShTRVQsZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uIFNldCgpe3JldHVybiB0KHRoaXMsYXJndW1lbnRzLmxlbmd0aD4wP2FyZ3VtZW50c1swXTp2b2lkIDApfX0se2FkZDpmdW5jdGlvbiBhZGQodCl7cmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcyxTRVQpLHQ9MD09PXQ/MDp0LHQpfX0sc3Ryb25nKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV6WlhRdWFuTWlYU3dpYm1GdFpYTWlPbHNpYzNSeWIyNW5JaXdpY21WeGRXbHlaU0lzSW5aaGJHbGtZWFJsSWl3aVUwVlVJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSW1kbGRDSXNJbE5sZENJc0luUm9hWE1pTENKaGNtZDFiV1Z1ZEhNaUxDSnNaVzVuZEdnaUxDSjFibVJsWm1sdVpXUWlMQ0poWkdRaUxDSjJZV3gxWlNJc0ltUmxaaUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRFFTeEpRVUZKUVN4UFFVRlRReXhSUVVGUkxIZENRVU5xUWtNc1UwRkJWMFFzVVVGQlVTd3dRa0ZEYmtKRkxFbEJRVTBzVFVGSFZrTXNUMEZCVDBNc1VVRkJWVW9zVVVGQlVTeG5Ra0ZCVWtFc1EwRkJlVUpGTEVsQlFVc3NVMEZCVlVjc1IwRkRka1FzVDBGQlR5eFRRVUZUUXl4TlFVRlJMRTlCUVU5RUxFVkJRVWxGTEV0QlFVMURMRlZCUVZWRExFOUJRVk1zUlVGQlNVUXNWVUZCVlN4UlFVRkxSU3hMUVVNNVJTeERRVVZFUXl4SlFVRkxMRk5CUVZOQkxFbEJRVWxETEVkQlEyaENMRTlCUVU5aUxFOUJRVTlqTEVsQlFVbGFMRk5CUVZOTkxFdEJRVTFNTEV0QlFVMVZMRVZCUVd0Q0xFbEJRVlpCTEVWQlFXTXNSVUZCU1VFc1JVRkJUMEVzUzBGRmVrVmlJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVjMlYwTG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjtyZXF1aXJlKFwiLi9fc3RyaW5nLWh0bWxcIikoXCJhbmNob3JcIixmdW5jdGlvbihuKXtyZXR1cm4gZnVuY3Rpb24gYW5jaG9yKHIpe3JldHVybiBuKHRoaXMsXCJhXCIsXCJuYW1lXCIscil9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1emRISnBibWN1WVc1amFHOXlMbXB6SWwwc0ltNWhiV1Z6SWpwYkluSmxjWFZwY21VaUxDSmpjbVZoZEdWSVZFMU1JaXdpWVc1amFHOXlJaXdpYm1GdFpTSXNJblJvYVhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJSVUZCTEZGQlFWRXNhVUpCUVZKQkxFTkJRVEJDTEZOQlFWVXNVMEZCVlVNc1IwRkROVU1zVDBGQlR5eFRRVUZUUXl4UFFVRlBReXhIUVVOeVFpeFBRVUZQUml4RlFVRlhSeXhMUVVGTkxFbEJRVXNzVDBGQlVVUWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXpkSEpwYm1jdVlXNWphRzl5TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjtyZXF1aXJlKFwiLi9fc3RyaW5nLWh0bWxcIikoXCJiaWdcIixmdW5jdGlvbihpKXtyZXR1cm4gZnVuY3Rpb24gYmlnKCl7cmV0dXJuIGkodGhpcyxcImJpZ1wiLFwiXCIsXCJcIil9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1emRISnBibWN1WW1sbkxtcHpJbDBzSW01aGJXVnpJanBiSW5KbGNYVnBjbVVpTENKamNtVmhkR1ZJVkUxTUlpd2lZbWxuSWl3aWRHaHBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRlFVRXNVVUZCVVN4cFFrRkJVa0VzUTBGQk1FSXNUVUZCVHl4VFFVRlZReXhIUVVONlF5eFBRVUZQTEZOQlFWTkRMRTFCUTJRc1QwRkJUMFFzUlVGQlYwVXNTMEZCVFN4TlFVRlBMRWRCUVVraUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1emRISnBibWN1WW1sbkxtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7cmVxdWlyZShcIi4vX3N0cmluZy1odG1sXCIpKFwiYmxpbmtcIixmdW5jdGlvbihuKXtyZXR1cm4gZnVuY3Rpb24gYmxpbmsoKXtyZXR1cm4gbih0aGlzLFwiYmxpbmtcIixcIlwiLFwiXCIpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXpkSEpwYm1jdVlteHBibXN1YW5NaVhTd2libUZ0WlhNaU9sc2ljbVZ4ZFdseVpTSXNJbU55WldGMFpVaFVUVXdpTENKaWJHbHVheUlzSW5Sb2FYTWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUlVGQkxGRkJRVkVzYVVKQlFWSkJMRU5CUVRCQ0xGRkJRVk1zVTBGQlZVTXNSMEZETTBNc1QwRkJUeXhUUVVGVFF5eFJRVU5rTEU5QlFVOUVMRVZCUVZkRkxFdEJRVTBzVVVGQlV5eEhRVUZKSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1YzNSeWFXNW5MbUpzYVc1ckxtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7cmVxdWlyZShcIi4vX3N0cmluZy1odG1sXCIpKFwiYm9sZFwiLGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbiBib2xkKCl7cmV0dXJuIHQodGhpcyxcImJcIixcIlwiLFwiXCIpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXpkSEpwYm1jdVltOXNaQzVxY3lKZExDSnVZVzFsY3lJNld5SnlaWEYxYVhKbElpd2lZM0psWVhSbFNGUk5UQ0lzSW1KdmJHUWlMQ0owYUdseklsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVVZCUVN4UlFVRlJMR2xDUVVGU1FTeERRVUV3UWl4UFFVRlJMRk5CUVZWRExFZEJRekZETEU5QlFVOHNVMEZCVTBNc1QwRkRaQ3hQUVVGUFJDeEZRVUZYUlN4TFFVRk5MRWxCUVVzc1IwRkJTU0lzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbk4wY21sdVp5NWliMnhrTG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLCRhdD1yZXF1aXJlKFwiLi9fc3RyaW5nLWF0XCIpKCExKTskZXhwb3J0KCRleHBvcnQuUCxcIlN0cmluZ1wiLHtjb2RlUG9pbnRBdDpmdW5jdGlvbiBjb2RlUG9pbnRBdCh0KXtyZXR1cm4gJGF0KHRoaXMsdCl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1emRISnBibWN1WTI5a1pTMXdiMmx1ZEMxaGRDNXFjeUpkTENKdVlXMWxjeUk2V3lJa1pYaHdiM0owSWl3aWNtVnhkV2x5WlNJc0lpUmhkQ0lzSWxBaUxDSmpiMlJsVUc5cGJuUkJkQ0lzSW5CdmN5SXNJblJvYVhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJRMEVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVOc1FrTXNTVUZCVFVRc1VVRkJVU3hsUVVGU1FTeEZRVUYzUWl4SFFVTnNRMFFzVVVGQlVVRXNVVUZCVVVjc1JVRkJSeXhUUVVGVkxFTkJSVE5DUXl4WlFVRmhMRk5CUVZOQkxGbEJRVmxETEVkQlEyaERMRTlCUVU5SUxFbEJRVWxKTEV0QlFVMUVJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVjM1J5YVc1bkxtTnZaR1V0Y0c5cGJuUXRZWFF1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLHRvTGVuZ3RoPXJlcXVpcmUoXCIuL190by1sZW5ndGhcIiksY29udGV4dD1yZXF1aXJlKFwiLi9fc3RyaW5nLWNvbnRleHRcIiksRU5EU19XSVRIPVwiZW5kc1dpdGhcIiwkZW5kc1dpdGg9XCJcIltFTkRTX1dJVEhdOyRleHBvcnQoJGV4cG9ydC5QKyRleHBvcnQuRipyZXF1aXJlKFwiLi9fZmFpbHMtaXMtcmVnZXhwXCIpKEVORFNfV0lUSCksXCJTdHJpbmdcIix7ZW5kc1dpdGg6ZnVuY3Rpb24gZW5kc1dpdGgodCl7dmFyIGU9Y29udGV4dCh0aGlzLHQsRU5EU19XSVRIKSxuPWFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwLGk9dG9MZW5ndGgoZS5sZW5ndGgpLHI9dm9pZCAwPT09bj9pOk1hdGgubWluKHRvTGVuZ3RoKG4pLGkpLGg9U3RyaW5nKHQpO3JldHVybiAkZW5kc1dpdGg/JGVuZHNXaXRoLmNhbGwoZSxoLHIpOmUuc2xpY2Uoci1oLmxlbmd0aCxyKT09PWh9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1emRISnBibWN1Wlc1a2N5MTNhWFJvTG1weklsMHNJbTVoYldWeklqcGJJaVJsZUhCdmNuUWlMQ0p5WlhGMWFYSmxJaXdpZEc5TVpXNW5kR2dpTENKamIyNTBaWGgwSWl3aVJVNUVVMTlYU1ZSSUlpd2lKR1Z1WkhOWGFYUm9JaXdpVUNJc0lrWWlMQ0psYm1SelYybDBhQ0lzSW5ObFlYSmphRk4wY21sdVp5SXNJblJvWVhRaUxDSjBhR2x6SWl3aVpXNWtVRzl6YVhScGIyNGlMQ0poY21kMWJXVnVkSE1pTENKc1pXNW5kR2dpTENKMWJtUmxabWx1WldRaUxDSnNaVzRpTENKbGJtUWlMQ0pOWVhSb0lpd2liV2x1SWl3aWMyVmhjbU5vSWl3aVUzUnlhVzVuSWl3aVkyRnNiQ0lzSW5Oc2FXTmxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRU3hoUVVOQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc1lVRkRiRUpETEZOQlFWZEVMRkZCUVZFc1owSkJRMjVDUlN4UlFVRlZSaXhSUVVGUkxIRkNRVU5zUWtjc1ZVRkJXU3hYUVVOYVF5eFZRVUZaTEVkQlFVZEVMRmRCUlc1Q1NpeFJRVUZSUVN4UlFVRlJUU3hGUVVGSlRpeFJRVUZSVHl4RlFVRkpUaXhSUVVGUkxIRkNRVUZTUVN4RFFVRTRRa2NzVjBGQldTeFRRVUZWTEVOQlEyeEdTU3hUUVVGVkxGTkJRVk5CTEZOQlFWTkRMRWRCUXpGQ0xFbEJRVWxETEVWQlFVOVFMRkZCUVZGUkxFdEJRVTFHTEVWQlFXTk1MRmRCUTI1RFVTeEZRVUZqUXl4VlFVRlZReXhQUVVGVExFVkJRVWxFTEZWQlFWVXNVVUZCUzBVc1JVRkRjRVJETEVWQlFVMWtMRk5CUVZOUkxFVkJRVXRKTEZGQlEzQkNSeXhQUVVGelFrWXNTVUZCYUVKSUxFVkJRVFJDU1N4RlFVRk5SU3hMUVVGTFF5eEpRVUZKYWtJc1UwRkJVMVVzUjBGQlkwa3NSMEZEZUVWSkxFVkJRVk5ETEU5QlFVOWFMRWRCUTNCQ0xFOUJRVTlLTEZWQlEwaEJMRlZCUVZWcFFpeExRVUZMV2l4RlFVRk5WU3hGUVVGUlNDeEhRVU0zUWxBc1JVRkJTMkVzVFVGQlRVNHNSVUZCVFVjc1JVRkJUMDRzVDBGQlVVY3NTMEZCVTBjaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1emRISnBibWN1Wlc1a2N5MTNhWFJvTG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjtyZXF1aXJlKFwiLi9fc3RyaW5nLWh0bWxcIikoXCJmaXhlZFwiLGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbiBmaXhlZCgpe3JldHVybiB0KHRoaXMsXCJ0dFwiLFwiXCIsXCJcIil9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1emRISnBibWN1Wm1sNFpXUXVhbk1pWFN3aWJtRnRaWE1pT2xzaWNtVnhkV2x5WlNJc0ltTnlaV0YwWlVoVVRVd2lMQ0ptYVhobFpDSXNJblJvYVhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJSVUZCTEZGQlFWRXNhVUpCUVZKQkxFTkJRVEJDTEZGQlFWTXNVMEZCVlVNc1IwRkRNME1zVDBGQlR5eFRRVUZUUXl4UlFVTmtMRTlCUVU5RUxFVkJRVmRGTEV0QlFVMHNTMEZCVFN4SFFVRkpJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVjM1J5YVc1bkxtWnBlR1ZrTG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjtyZXF1aXJlKFwiLi9fc3RyaW5nLWh0bWxcIikoXCJmb250Y29sb3JcIixmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24gZm9udGNvbG9yKG8pe3JldHVybiB0KHRoaXMsXCJmb250XCIsXCJjb2xvclwiLG8pfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXpkSEpwYm1jdVptOXVkR052Ykc5eUxtcHpJbDBzSW01aGJXVnpJanBiSW5KbGNYVnBjbVVpTENKamNtVmhkR1ZJVkUxTUlpd2labTl1ZEdOdmJHOXlJaXdpWTI5c2IzSWlMQ0owYUdseklsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVVZCUVN4UlFVRlJMR2xDUVVGU1FTeERRVUV3UWl4WlFVRmhMRk5CUVZWRExFZEJReTlETEU5QlFVOHNVMEZCVTBNc1ZVRkJWVU1zUjBGRGVFSXNUMEZCVDBZc1JVRkJWMGNzUzBGQlRTeFBRVUZSTEZGQlFWTkVJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVjM1J5YVc1bkxtWnZiblJqYjJ4dmNpNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7cmVxdWlyZShcIi4vX3N0cmluZy1odG1sXCIpKFwiZm9udHNpemVcIixmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24gZm9udHNpemUobil7cmV0dXJuIHQodGhpcyxcImZvbnRcIixcInNpemVcIixuKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV6ZEhKcGJtY3VabTl1ZEhOcGVtVXVhbk1pWFN3aWJtRnRaWE1pT2xzaWNtVnhkV2x5WlNJc0ltTnlaV0YwWlVoVVRVd2lMQ0ptYjI1MGMybDZaU0lzSW5OcGVtVWlMQ0owYUdseklsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVVZCUVN4UlFVRlJMR2xDUVVGU1FTeERRVUV3UWl4WFFVRlpMRk5CUVZWRExFZEJRemxETEU5QlFVOHNVMEZCVTBNc1UwRkJVME1zUjBGRGRrSXNUMEZCVDBZc1JVRkJWMGNzUzBGQlRTeFBRVUZSTEU5QlFWRkVJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVjM1J5YVc1bkxtWnZiblJ6YVhwbExtcHpJbjA9IiwidmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKSx0b0Fic29sdXRlSW5kZXg9cmVxdWlyZShcIi4vX3RvLWFic29sdXRlLWluZGV4XCIpLGZyb21DaGFyQ29kZT1TdHJpbmcuZnJvbUNoYXJDb2RlLCRmcm9tQ29kZVBvaW50PVN0cmluZy5mcm9tQ29kZVBvaW50OyRleHBvcnQoJGV4cG9ydC5TKyRleHBvcnQuRiooISEkZnJvbUNvZGVQb2ludCYmMSE9JGZyb21Db2RlUG9pbnQubGVuZ3RoKSxcIlN0cmluZ1wiLHtmcm9tQ29kZVBvaW50OmZ1bmN0aW9uIGZyb21Db2RlUG9pbnQobyl7Zm9yKHZhciByLGU9W10sdD1hcmd1bWVudHMubGVuZ3RoLG49MDt0Pm47KXtpZihyPSthcmd1bWVudHNbbisrXSx0b0Fic29sdXRlSW5kZXgociwxMTE0MTExKSE9PXIpdGhyb3cgUmFuZ2VFcnJvcihyK1wiIGlzIG5vdCBhIHZhbGlkIGNvZGUgcG9pbnRcIik7ZS5wdXNoKHI8NjU1MzY/ZnJvbUNoYXJDb2RlKHIpOmZyb21DaGFyQ29kZSg1NTI5NisoKHItPTY1NTM2KT4+MTApLHIlMTAyNCs1NjMyMCkpfXJldHVybiBlLmpvaW4oXCJcIil9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1emRISnBibWN1Wm5KdmJTMWpiMlJsTFhCdmFXNTBMbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2lkRzlCWW5OdmJIVjBaVWx1WkdWNElpd2labkp2YlVOb1lYSkRiMlJsSWl3aVUzUnlhVzVuSWl3aUpHWnliMjFEYjJSbFVHOXBiblFpTENKbWNtOXRRMjlrWlZCdmFXNTBJaXdpVXlJc0lrWWlMQ0pzWlc1bmRHZ2lMQ0o0SWl3aVkyOWtaU0lzSW5KbGN5SXNJbUZNWlc0aUxDSmhjbWQxYldWdWRITWlMQ0pwSWl3aVVtRnVaMlZGY25KdmNpSXNJbkIxYzJnaUxDSnFiMmx1SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4SlFVRkpRU3hSUVVGVlF5eFJRVUZSTEdGQlEyeENReXhuUWtGQmEwSkVMRkZCUVZFc2QwSkJRekZDUlN4aFFVRmxReXhQUVVGUFJDeGhRVU4wUWtVc1pVRkJhVUpFTEU5QlFVOUZMR05CUnpWQ1RpeFJRVUZSUVN4UlFVRlJUeXhGUVVGSlVDeFJRVUZSVVN4TFFVRlBTQ3huUWtGQk1rTXNSMEZCZWtKQkxHVkJRV1ZKTEZGQlFXTXNVMEZCVlN4RFFVVXhSa2dzWTBGQlpTeFRRVUZUUVN4alFVRmpTU3hIUVV0d1F5eEpRVXBCTEVsQlIwbERMRVZCU0VGRExFVkJRVTBzUjBGRFRrTXNSVUZCVDBNc1ZVRkJWVXdzVDBGRGFrSk5MRVZCUVVrc1JVRkZSRVlzUlVGQlQwVXNSMEZCUnl4RFFVVm1MRWRCUkVGS0xFZEJRVkZITEZWQlFWVkRMRXRCUTJSaUxHZENRVUZuUWxNc1JVRkJUU3hYUVVGalFTeEZRVUZOTEUxQlFVMUxMRmRCUVZkTUxFVkJRVThzT0VKQlEzUkZReXhGUVVGSlN5eExRVUZMVGl4RlFVRlBMRTFCUTFwU0xHRkJRV0ZSTEVkQlEySlNMR0ZCUVhsRExGRkJRVEZDVVN4SFFVRlJMRkZCUVZrc1NVRkJZMEVzUlVGQlR5eExRVUZSTEZGQlJYQkZMRTlCUVU5RExFVkJRVWxOTEV0QlFVc2lMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXpkSEpwYm1jdVpuSnZiUzFqYjJSbExYQnZhVzUwTG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLGNvbnRleHQ9cmVxdWlyZShcIi4vX3N0cmluZy1jb250ZXh0XCIpLElOQ0xVREVTPVwiaW5jbHVkZXNcIjskZXhwb3J0KCRleHBvcnQuUCskZXhwb3J0LkYqcmVxdWlyZShcIi4vX2ZhaWxzLWlzLXJlZ2V4cFwiKShJTkNMVURFUyksXCJTdHJpbmdcIix7aW5jbHVkZXM6ZnVuY3Rpb24gaW5jbHVkZXMoZSl7cmV0dXJuISF+Y29udGV4dCh0aGlzLGUsSU5DTFVERVMpLmluZGV4T2YoZSxhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1emRISnBibWN1YVc1amJIVmtaWE11YW5NaVhTd2libUZ0WlhNaU9sc2lKR1Y0Y0c5eWRDSXNJbkpsY1hWcGNtVWlMQ0pqYjI1MFpYaDBJaXdpU1U1RFRGVkVSVk1pTENKUUlpd2lSaUlzSW1sdVkyeDFaR1Z6SWl3aWMyVmhjbU5vVTNSeWFXNW5JaXdpZEdocGN5SXNJbWx1WkdWNFQyWWlMQ0poY21kMWJXVnVkSE1pTENKc1pXNW5kR2dpTENKMWJtUmxabWx1WldRaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVOQkxHRkJRMEVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVOc1FrTXNVVUZCVlVRc1VVRkJVU3h4UWtGRGJFSkZMRk5CUVZjc1YwRkZaa2dzVVVGQlVVRXNVVUZCVVVrc1JVRkJTVW9zVVVGQlVVc3NSVUZCU1Vvc1VVRkJVU3h4UWtGQlVrRXNRMEZCT0VKRkxGVkJRVmNzVTBGQlZTeERRVU5xUmtjc1UwRkJWU3hUUVVGVFFTeFRRVUZUUXl4SFFVTXhRaXhUUVVGVlRDeFJRVUZSVFN4TFFVRk5SQ3hGUVVGalNpeFZRVU51UTAwc1VVRkJVVVlzUlVGQlkwY3NWVUZCVlVNc1QwRkJVeXhGUVVGSlJDeFZRVUZWTEZGQlFVdEZJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVjM1J5YVc1bkxtbHVZMngxWkdWekxtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7cmVxdWlyZShcIi4vX3N0cmluZy1odG1sXCIpKFwiaXRhbGljc1wiLGZ1bmN0aW9uKGkpe3JldHVybiBmdW5jdGlvbiBpdGFsaWNzKCl7cmV0dXJuIGkodGhpcyxcImlcIixcIlwiLFwiXCIpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXpkSEpwYm1jdWFYUmhiR2xqY3k1cWN5SmRMQ0p1WVcxbGN5STZXeUp5WlhGMWFYSmxJaXdpWTNKbFlYUmxTRlJOVENJc0ltbDBZV3hwWTNNaUxDSjBhR2x6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4aFFVVkJRU3hSUVVGUkxHbENRVUZTUVN4RFFVRXdRaXhWUVVGWExGTkJRVlZETEVkQlF6ZERMRTlCUVU4c1UwRkJVME1zVlVGRFpDeFBRVUZQUkN4RlFVRlhSU3hMUVVGTkxFbEJRVXNzUjBGQlNTSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxuTjBjbWx1Wnk1cGRHRnNhV056TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgJGF0PXJlcXVpcmUoXCIuL19zdHJpbmctYXRcIikoITApO3JlcXVpcmUoXCIuL19pdGVyLWRlZmluZVwiKShTdHJpbmcsXCJTdHJpbmdcIixmdW5jdGlvbih0KXt0aGlzLl90PVN0cmluZyh0KSx0aGlzLl9pPTB9LGZ1bmN0aW9uKCl7dmFyIHQsaT10aGlzLl90LGU9dGhpcy5faTtyZXR1cm4gZT49aS5sZW5ndGg/e3ZhbHVlOnZvaWQgMCxkb25lOiEwfToodD0kYXQoaSxlKSx0aGlzLl9pKz10Lmxlbmd0aCx7dmFsdWU6dCxkb25lOiExfSl9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV6ZEhKcGJtY3VhWFJsY21GMGIzSXVhbk1pWFN3aWJtRnRaWE1pT2xzaUpHRjBJaXdpY21WeGRXbHlaU0lzSWxOMGNtbHVaeUlzSW1sMFpYSmhkR1ZrSWl3aWRHaHBjeUlzSWw5MElpd2lYMmtpTENKd2IybHVkQ0lzSWs4aUxDSnBibVJsZUNJc0lteGxibWQwYUNJc0luWmhiSFZsSWl3aWRXNWtaV1pwYm1Wa0lpd2laRzl1WlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkRRU3hKUVVGSlFTeEpRVUZOUXl4UlFVRlJMR1ZCUVZKQkxFVkJRWGRDTEVkQlIyeERRU3hSUVVGUkxHbENRVUZTUVN4RFFVRXdRa01zVDBGQlVTeFRRVUZWTEZOQlFWVkRMRWRCUTNCRVF5eExRVUZMUXl4SFFVRkxTQ3hQUVVGUFF5eEhRVU5xUWtNc1MwRkJTMFVzUjBGQlN5eEhRVVZVTEZkQlEwUXNTVUZGU1VNc1JVRkdRVU1zUlVGQlNVb3NTMEZCUzBNc1IwRkRWRWtzUlVGQlVVd3NTMEZCUzBVc1IwRkZha0lzVDBGQlNVY3NSMEZCVTBRc1JVRkJSVVVzVDBGQlpTeERRVUZGUXl4WFFVRlBReXhGUVVGWFF5eE5RVUZOTEVsQlEzaEVUaXhGUVVGUlVDeEpRVUZKVVN4RlFVRkhReXhIUVVObVRDeExRVUZMUlN4SlFVRk5ReXhGUVVGTlJ5eFBRVU5XTEVOQlFVVkRMRTFCUVU5S0xFVkJRVTlOTEUxQlFVMGlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXpkSEpwYm1jdWFYUmxjbUYwYjNJdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7cmVxdWlyZShcIi4vX3N0cmluZy1odG1sXCIpKFwibGlua1wiLGZ1bmN0aW9uKG4pe3JldHVybiBmdW5jdGlvbiBsaW5rKHIpe3JldHVybiBuKHRoaXMsXCJhXCIsXCJocmVmXCIscil9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1emRISnBibWN1YkdsdWF5NXFjeUpkTENKdVlXMWxjeUk2V3lKeVpYRjFhWEpsSWl3aVkzSmxZWFJsU0ZSTlRDSXNJbXhwYm1zaUxDSjFjbXdpTENKMGFHbHpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVWQlFTeFJRVUZSTEdsQ1FVRlNRU3hEUVVFd1FpeFBRVUZSTEZOQlFWVkRMRWRCUXpGRExFOUJRVThzVTBGQlUwTXNTMEZCUzBNc1IwRkRia0lzVDBGQlQwWXNSVUZCVjBjc1MwRkJUU3hKUVVGTExFOUJRVkZFSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1YzNSeWFXNW5MbXhwYm1zdWFuTWlmUT09IiwidmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKSx0b0lPYmplY3Q9cmVxdWlyZShcIi4vX3RvLWlvYmplY3RcIiksdG9MZW5ndGg9cmVxdWlyZShcIi4vX3RvLWxlbmd0aFwiKTskZXhwb3J0KCRleHBvcnQuUyxcIlN0cmluZ1wiLHtyYXc6ZnVuY3Rpb24gcmF3KHQpe2Zvcih2YXIgcj10b0lPYmplY3QodC5yYXcpLGU9dG9MZW5ndGgoci5sZW5ndGgpLG89YXJndW1lbnRzLmxlbmd0aCxuPVtdLGk9MDtlPmk7KW4ucHVzaChTdHJpbmcocltpKytdKSksaTxvJiZuLnB1c2goU3RyaW5nKGFyZ3VtZW50c1tpXSkpO3JldHVybiBuLmpvaW4oXCJcIil9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1emRISnBibWN1Y21GM0xtcHpJbDBzSW01aGJXVnpJanBiSWlSbGVIQnZjblFpTENKeVpYRjFhWEpsSWl3aWRHOUpUMkpxWldOMElpd2lkRzlNWlc1bmRHZ2lMQ0pUSWl3aWNtRjNJaXdpWTJGc2JGTnBkR1VpTENKMGNHd2lMQ0pzWlc0aUxDSnNaVzVuZEdnaUxDSmhUR1Z1SWl3aVlYSm5kVzFsYm5Seklpd2ljbVZ6SWl3aWFTSXNJbkIxYzJnaUxDSlRkSEpwYm1jaUxDSnFiMmx1SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4SlFVRkpRU3hSUVVGVlF5eFJRVUZSTEdGQlEyeENReXhWUVVGWlJDeFJRVUZSTEdsQ1FVTndRa1VzVTBGQlYwWXNVVUZCVVN4blFrRkZka0pFTEZGQlFWRkJMRkZCUVZGSkxFVkJRVWNzVTBGQlZTeERRVVV6UWtNc1NVRkJTeXhUUVVGVFFTeEpRVUZKUXl4SFFVMW9RaXhKUVV4QkxFbEJRVWxETEVWQlFVMU1MRlZCUVZWSkxFVkJRVk5FTEV0QlEzcENSeXhGUVVGTlRDeFRRVUZUU1N4RlFVRkpSU3hSUVVOdVFrTXNSVUZCVDBNc1ZVRkJWVVlzVDBGRGFrSkhMRVZCUVUwc1IwRkRUa01zUlVGQlNTeEZRVU5FVEN4RlFVRk5TeXhIUVVOWVJDeEZRVUZKUlN4TFFVRkxReXhQUVVGUFVpeEZRVUZKVFN4UFFVTm9Ra0VzUlVGQlNVZ3NSMEZCVFVVc1JVRkJTVVVzUzBGQlMwTXNUMEZCVDBvc1ZVRkJWVVVzUzBGRGVFTXNUMEZCVDBRc1JVRkJTVWtzUzBGQlN5SXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxuTjBjbWx1Wnk1eVlYY3Vhbk1pZlE9PSIsInZhciAkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIik7JGV4cG9ydCgkZXhwb3J0LlAsXCJTdHJpbmdcIix7cmVwZWF0OnJlcXVpcmUoXCIuL19zdHJpbmctcmVwZWF0XCIpfSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1emRISnBibWN1Y21Wd1pXRjBMbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2lVQ0lzSW5KbGNHVmhkQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVWMFFrUXNVVUZCVVVFc1VVRkJVVVVzUlVGQlJ5eFRRVUZWTEVOQlJUTkNReXhQUVVGUlJpeFJRVUZSSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1YzNSeWFXNW5MbkpsY0dWaGRDNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7cmVxdWlyZShcIi4vX3N0cmluZy1odG1sXCIpKFwic21hbGxcIixmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24gc21hbGwoKXtyZXR1cm4gdCh0aGlzLFwic21hbGxcIixcIlwiLFwiXCIpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXpkSEpwYm1jdWMyMWhiR3d1YW5NaVhTd2libUZ0WlhNaU9sc2ljbVZ4ZFdseVpTSXNJbU55WldGMFpVaFVUVXdpTENKemJXRnNiQ0lzSW5Sb2FYTWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUlVGQkxGRkJRVkVzYVVKQlFWSkJMRU5CUVRCQ0xGRkJRVk1zVTBGQlZVTXNSMEZETTBNc1QwRkJUeXhUUVVGVFF5eFJRVU5rTEU5QlFVOUVMRVZCUVZkRkxFdEJRVTBzVVVGQlV5eEhRVUZKSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1YzNSeWFXNW5Mbk50WVd4c0xtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKSx0b0xlbmd0aD1yZXF1aXJlKFwiLi9fdG8tbGVuZ3RoXCIpLGNvbnRleHQ9cmVxdWlyZShcIi4vX3N0cmluZy1jb250ZXh0XCIpLFNUQVJUU19XSVRIPVwic3RhcnRzV2l0aFwiLCRzdGFydHNXaXRoPVwiXCJbU1RBUlRTX1dJVEhdOyRleHBvcnQoJGV4cG9ydC5QKyRleHBvcnQuRipyZXF1aXJlKFwiLi9fZmFpbHMtaXMtcmVnZXhwXCIpKFNUQVJUU19XSVRIKSxcIlN0cmluZ1wiLHtzdGFydHNXaXRoOmZ1bmN0aW9uIHN0YXJ0c1dpdGgodCl7dmFyIHI9Y29udGV4dCh0aGlzLHQsU1RBUlRTX1dJVEgpLGU9dG9MZW5ndGgoTWF0aC5taW4oYXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDAsci5sZW5ndGgpKSxpPVN0cmluZyh0KTtyZXR1cm4gJHN0YXJ0c1dpdGg/JHN0YXJ0c1dpdGguY2FsbChyLGksZSk6ci5zbGljZShlLGUraS5sZW5ndGgpPT09aX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV6ZEhKcGJtY3VjM1JoY25SekxYZHBkR2d1YW5NaVhTd2libUZ0WlhNaU9sc2lKR1Y0Y0c5eWRDSXNJbkpsY1hWcGNtVWlMQ0owYjB4bGJtZDBhQ0lzSW1OdmJuUmxlSFFpTENKVFZFRlNWRk5mVjBsVVNDSXNJaVJ6ZEdGeWRITlhhWFJvSWl3aVVDSXNJa1lpTENKemRHRnlkSE5YYVhSb0lpd2ljMlZoY21Ob1UzUnlhVzVuSWl3aWRHaGhkQ0lzSW5Sb2FYTWlMQ0pwYm1SbGVDSXNJazFoZEdnaUxDSnRhVzRpTENKaGNtZDFiV1Z1ZEhNaUxDSnNaVzVuZEdnaUxDSjFibVJsWm1sdVpXUWlMQ0p6WldGeVkyZ2lMQ0pUZEhKcGJtY2lMQ0pqWVd4c0lpd2ljMnhwWTJVaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVOQkxHRkJRMEVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVOc1FrTXNVMEZCVjBRc1VVRkJVU3huUWtGRGJrSkZMRkZCUVZWR0xGRkJRVkVzY1VKQlEyeENSeXhaUVVGakxHRkJRMlJETEZsQlFXTXNSMEZCUjBRc1lVRkZja0pLTEZGQlFWRkJMRkZCUVZGTkxFVkJRVWxPTEZGQlFWRlBMRVZCUVVsT0xGRkJRVkVzY1VKQlFWSkJMRU5CUVRoQ1J5eGhRVUZqTEZOQlFWVXNRMEZEY0VaSkxGZEJRVmtzVTBGQlUwRXNWMEZCVjBNc1IwRkRPVUlzU1VGQlNVTXNSVUZCVDFBc1VVRkJVVkVzUzBGQlRVWXNSVUZCWTB3c1lVRkRia05STEVWQlFWRldMRk5CUVZOWExFdEJRVXRETEVsQlFVbERMRlZCUVZWRExFOUJRVk1zUlVGQlNVUXNWVUZCVlN4UlFVRkxSU3hGUVVGWFVDeEZRVUZMVFN4VFFVTm9Sa1VzUlVGQlUwTXNUMEZCVDFZc1IwRkRjRUlzVDBGQlQwb3NXVUZEU0VFc1dVRkJXV1VzUzBGQlMxWXNSVUZCVFZFc1JVRkJVVTRzUjBGREwwSkdMRVZCUVV0WExFMUJRVTFVTEVWQlFVOUJMRVZCUVZGTkxFVkJRVTlHTEZWQlFWbEZJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVjM1J5YVc1bkxuTjBZWEowY3kxM2FYUm9MbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3JlcXVpcmUoXCIuL19zdHJpbmctaHRtbFwiKShcInN0cmlrZVwiLGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbiBzdHJpa2UoKXtyZXR1cm4gdCh0aGlzLFwic3RyaWtlXCIsXCJcIixcIlwiKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTV6ZEhKcGJtY3VjM1J5YVd0bExtcHpJbDBzSW01aGJXVnpJanBiSW5KbGNYVnBjbVVpTENKamNtVmhkR1ZJVkUxTUlpd2ljM1J5YVd0bElpd2lkR2hwY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkZRVUVzVVVGQlVTeHBRa0ZCVWtFc1EwRkJNRUlzVTBGQlZTeFRRVUZWUXl4SFFVTTFReXhQUVVGUExGTkJRVk5ETEZOQlEyUXNUMEZCVDBRc1JVRkJWMFVzUzBGQlRTeFRRVUZWTEVkQlFVa2lMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXpkSEpwYm1jdWMzUnlhV3RsTG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjtyZXF1aXJlKFwiLi9fc3RyaW5nLWh0bWxcIikoXCJzdWJcIixmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24gc3ViKCl7cmV0dXJuIHQodGhpcyxcInN1YlwiLFwiXCIsXCJcIil9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1emRISnBibWN1YzNWaUxtcHpJbDBzSW01aGJXVnpJanBiSW5KbGNYVnBjbVVpTENKamNtVmhkR1ZJVkUxTUlpd2ljM1ZpSWl3aWRHaHBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRlFVRXNVVUZCVVN4cFFrRkJVa0VzUTBGQk1FSXNUVUZCVHl4VFFVRlZReXhIUVVONlF5eFBRVUZQTEZOQlFWTkRMRTFCUTJRc1QwRkJUMFFzUlVGQlYwVXNTMEZCVFN4TlFVRlBMRWRCUVVraUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1emRISnBibWN1YzNWaUxtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7cmVxdWlyZShcIi4vX3N0cmluZy1odG1sXCIpKFwic3VwXCIsZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uIHN1cCgpe3JldHVybiB0KHRoaXMsXCJzdXBcIixcIlwiLFwiXCIpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNXpkSEpwYm1jdWMzVndMbXB6SWwwc0ltNWhiV1Z6SWpwYkluSmxjWFZwY21VaUxDSmpjbVZoZEdWSVZFMU1JaXdpYzNWd0lpd2lkR2hwY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkZRVUVzVVVGQlVTeHBRa0ZCVWtFc1EwRkJNRUlzVFVGQlR5eFRRVUZWUXl4SFFVTjZReXhQUVVGUExGTkJRVk5ETEUxQlEyUXNUMEZCVDBRc1JVRkJWMFVzUzBGQlRTeE5RVUZQTEVkQlFVa2lMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXpkSEpwYm1jdWMzVndMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3JlcXVpcmUoXCIuL19zdHJpbmctdHJpbVwiKShcInRyaW1cIixmdW5jdGlvbihyKXtyZXR1cm4gZnVuY3Rpb24gdHJpbSgpe3JldHVybiByKHRoaXMsMyl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1emRISnBibWN1ZEhKcGJTNXFjeUpkTENKdVlXMWxjeUk2V3lKeVpYRjFhWEpsSWl3aUpIUnlhVzBpTENKMGNtbHRJaXdpZEdocGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZGUVVFc1VVRkJVU3hwUWtGQlVrRXNRMEZCTUVJc1QwRkJVU3hUUVVGVlF5eEhRVU14UXl4UFFVRlBMRk5CUVZORExFOUJRMlFzVDBGQlQwUXNSVUZCVFVVc1MwRkJUU0lzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbk4wY21sdVp5NTBjbWx0TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgZ2xvYmFsPXJlcXVpcmUoXCIuL19nbG9iYWxcIiksaGFzPXJlcXVpcmUoXCIuL19oYXNcIiksREVTQ1JJUFRPUlM9cmVxdWlyZShcIi4vX2Rlc2NyaXB0b3JzXCIpLCRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKSxyZWRlZmluZT1yZXF1aXJlKFwiLi9fcmVkZWZpbmVcIiksTUVUQT1yZXF1aXJlKFwiLi9fbWV0YVwiKS5LRVksJGZhaWxzPXJlcXVpcmUoXCIuL19mYWlsc1wiKSxzaGFyZWQ9cmVxdWlyZShcIi4vX3NoYXJlZFwiKSxzZXRUb1N0cmluZ1RhZz1yZXF1aXJlKFwiLi9fc2V0LXRvLXN0cmluZy10YWdcIiksdWlkPXJlcXVpcmUoXCIuL191aWRcIiksd2tzPXJlcXVpcmUoXCIuL193a3NcIiksd2tzRXh0PXJlcXVpcmUoXCIuL193a3MtZXh0XCIpLHdrc0RlZmluZT1yZXF1aXJlKFwiLi9fd2tzLWRlZmluZVwiKSxlbnVtS2V5cz1yZXF1aXJlKFwiLi9fZW51bS1rZXlzXCIpLGlzQXJyYXk9cmVxdWlyZShcIi4vX2lzLWFycmF5XCIpLGFuT2JqZWN0PXJlcXVpcmUoXCIuL19hbi1vYmplY3RcIiksaXNPYmplY3Q9cmVxdWlyZShcIi4vX2lzLW9iamVjdFwiKSx0b0lPYmplY3Q9cmVxdWlyZShcIi4vX3RvLWlvYmplY3RcIiksdG9QcmltaXRpdmU9cmVxdWlyZShcIi4vX3RvLXByaW1pdGl2ZVwiKSxjcmVhdGVEZXNjPXJlcXVpcmUoXCIuL19wcm9wZXJ0eS1kZXNjXCIpLF9jcmVhdGU9cmVxdWlyZShcIi4vX29iamVjdC1jcmVhdGVcIiksZ09QTkV4dD1yZXF1aXJlKFwiLi9fb2JqZWN0LWdvcG4tZXh0XCIpLCRHT1BEPXJlcXVpcmUoXCIuL19vYmplY3QtZ29wZFwiKSwkRFA9cmVxdWlyZShcIi4vX29iamVjdC1kcFwiKSwka2V5cz1yZXF1aXJlKFwiLi9fb2JqZWN0LWtleXNcIiksZ09QRD0kR09QRC5mLGRQPSREUC5mLGdPUE49Z09QTkV4dC5mLCRTeW1ib2w9Z2xvYmFsLlN5bWJvbCwkSlNPTj1nbG9iYWwuSlNPTixfc3RyaW5naWZ5PSRKU09OJiYkSlNPTi5zdHJpbmdpZnksUFJPVE9UWVBFPVwicHJvdG90eXBlXCIsSElEREVOPXdrcyhcIl9oaWRkZW5cIiksVE9fUFJJTUlUSVZFPXdrcyhcInRvUHJpbWl0aXZlXCIpLGlzRW51bT17fS5wcm9wZXJ0eUlzRW51bWVyYWJsZSxTeW1ib2xSZWdpc3RyeT1zaGFyZWQoXCJzeW1ib2wtcmVnaXN0cnlcIiksQWxsU3ltYm9scz1zaGFyZWQoXCJzeW1ib2xzXCIpLE9QU3ltYm9scz1zaGFyZWQoXCJvcC1zeW1ib2xzXCIpLE9iamVjdFByb3RvPU9iamVjdFtQUk9UT1RZUEVdLFVTRV9OQVRJVkU9XCJmdW5jdGlvblwiPT10eXBlb2YgJFN5bWJvbCxRT2JqZWN0PWdsb2JhbC5RT2JqZWN0LHNldHRlcj0hUU9iamVjdHx8IVFPYmplY3RbUFJPVE9UWVBFXXx8IVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQsc2V0U3ltYm9sRGVzYz1ERVNDUklQVE9SUyYmJGZhaWxzKGZ1bmN0aW9uKCl7cmV0dXJuIDchPV9jcmVhdGUoZFAoe30sXCJhXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBkUCh0aGlzLFwiYVwiLHt2YWx1ZTo3fSkuYX19KSkuYX0pP2Z1bmN0aW9uKGUscix0KXt2YXIgbz1nT1BEKE9iamVjdFByb3RvLHIpO28mJmRlbGV0ZSBPYmplY3RQcm90b1tyXSxkUChlLHIsdCksbyYmZSE9PU9iamVjdFByb3RvJiZkUChPYmplY3RQcm90byxyLG8pfTpkUCx3cmFwPWZ1bmN0aW9uKGUpe3ZhciByPUFsbFN5bWJvbHNbZV09X2NyZWF0ZSgkU3ltYm9sW1BST1RPVFlQRV0pO3JldHVybiByLl9rPWUscn0saXNTeW1ib2w9VVNFX05BVElWRSYmXCJzeW1ib2xcIj09dHlwZW9mICRTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuXCJzeW1ib2xcIj09dHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgJFN5bWJvbH0sJGRlZmluZVByb3BlcnR5PWZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGUscix0KXtyZXR1cm4gZT09PU9iamVjdFByb3RvJiYkZGVmaW5lUHJvcGVydHkoT1BTeW1ib2xzLHIsdCksYW5PYmplY3QoZSkscj10b1ByaW1pdGl2ZShyLCEwKSxhbk9iamVjdCh0KSxoYXMoQWxsU3ltYm9scyxyKT8odC5lbnVtZXJhYmxlPyhoYXMoZSxISURERU4pJiZlW0hJRERFTl1bcl0mJihlW0hJRERFTl1bcl09ITEpLHQ9X2NyZWF0ZSh0LHtlbnVtZXJhYmxlOmNyZWF0ZURlc2MoMCwhMSl9KSk6KGhhcyhlLEhJRERFTil8fGRQKGUsSElEREVOLGNyZWF0ZURlc2MoMSx7fSkpLGVbSElEREVOXVtyXT0hMCksc2V0U3ltYm9sRGVzYyhlLHIsdCkpOmRQKGUscix0KX0sJGRlZmluZVByb3BlcnRpZXM9ZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhlLHIpe2FuT2JqZWN0KGUpO2Zvcih2YXIgdCxvPWVudW1LZXlzKHI9dG9JT2JqZWN0KHIpKSxpPTAscz1vLmxlbmd0aDtzPmk7KSRkZWZpbmVQcm9wZXJ0eShlLHQ9b1tpKytdLHJbdF0pO3JldHVybiBlfSwkY3JlYXRlPWZ1bmN0aW9uIGNyZWF0ZShlLHIpe3JldHVybiB2b2lkIDA9PT1yP19jcmVhdGUoZSk6JGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShlKSxyKX0sJHByb3BlcnR5SXNFbnVtZXJhYmxlPWZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGUpe3ZhciByPWlzRW51bS5jYWxsKHRoaXMsZT10b1ByaW1pdGl2ZShlLCEwKSk7cmV0dXJuISh0aGlzPT09T2JqZWN0UHJvdG8mJmhhcyhBbGxTeW1ib2xzLGUpJiYhaGFzKE9QU3ltYm9scyxlKSkmJighKHJ8fCFoYXModGhpcyxlKXx8IWhhcyhBbGxTeW1ib2xzLGUpfHxoYXModGhpcyxISURERU4pJiZ0aGlzW0hJRERFTl1bZV0pfHxyKX0sJGdldE93blByb3BlcnR5RGVzY3JpcHRvcj1mdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSxyKXtpZihlPXRvSU9iamVjdChlKSxyPXRvUHJpbWl0aXZlKHIsITApLGUhPT1PYmplY3RQcm90b3x8IWhhcyhBbGxTeW1ib2xzLHIpfHxoYXMoT1BTeW1ib2xzLHIpKXt2YXIgdD1nT1BEKGUscik7cmV0dXJuIXR8fCFoYXMoQWxsU3ltYm9scyxyKXx8aGFzKGUsSElEREVOKSYmZVtISURERU5dW3JdfHwodC5lbnVtZXJhYmxlPSEwKSx0fX0sJGdldE93blByb3BlcnR5TmFtZXM9ZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhlKXtmb3IodmFyIHIsdD1nT1BOKHRvSU9iamVjdChlKSksbz1bXSxpPTA7dC5sZW5ndGg+aTspaGFzKEFsbFN5bWJvbHMscj10W2krK10pfHxyPT1ISURERU58fHI9PU1FVEF8fG8ucHVzaChyKTtyZXR1cm4gb30sJGdldE93blByb3BlcnR5U3ltYm9scz1mdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSl7Zm9yKHZhciByLHQ9ZT09PU9iamVjdFByb3RvLG89Z09QTih0P09QU3ltYm9sczp0b0lPYmplY3QoZSkpLGk9W10scz0wO28ubGVuZ3RoPnM7KSFoYXMoQWxsU3ltYm9scyxyPW9bcysrXSl8fHQmJiFoYXMoT2JqZWN0UHJvdG8scil8fGkucHVzaChBbGxTeW1ib2xzW3JdKTtyZXR1cm4gaX07VVNFX05BVElWRXx8KHJlZGVmaW5lKCgkU3ltYm9sPWZ1bmN0aW9uIFN5bWJvbCgpe2lmKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKXRocm93IFR5cGVFcnJvcihcIlN5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciFcIik7dmFyIGU9dWlkKGFyZ3VtZW50cy5sZW5ndGg+MD9hcmd1bWVudHNbMF06dm9pZCAwKSxyPWZ1bmN0aW9uKHQpe3RoaXM9PT1PYmplY3RQcm90byYmci5jYWxsKE9QU3ltYm9scyx0KSxoYXModGhpcyxISURERU4pJiZoYXModGhpc1tISURERU5dLGUpJiYodGhpc1tISURERU5dW2VdPSExKSxzZXRTeW1ib2xEZXNjKHRoaXMsZSxjcmVhdGVEZXNjKDEsdCkpfTtyZXR1cm4gREVTQ1JJUFRPUlMmJnNldHRlciYmc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90byxlLHtjb25maWd1cmFibGU6ITAsc2V0OnJ9KSx3cmFwKGUpfSlbUFJPVE9UWVBFXSxcInRvU3RyaW5nXCIsZnVuY3Rpb24gdG9TdHJpbmcoKXtyZXR1cm4gdGhpcy5fa30pLCRHT1BELmY9JGdldE93blByb3BlcnR5RGVzY3JpcHRvciwkRFAuZj0kZGVmaW5lUHJvcGVydHkscmVxdWlyZShcIi4vX29iamVjdC1nb3BuXCIpLmY9Z09QTkV4dC5mPSRnZXRPd25Qcm9wZXJ0eU5hbWVzLHJlcXVpcmUoXCIuL19vYmplY3QtcGllXCIpLmY9JHByb3BlcnR5SXNFbnVtZXJhYmxlLHJlcXVpcmUoXCIuL19vYmplY3QtZ29wc1wiKS5mPSRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMsREVTQ1JJUFRPUlMmJiFyZXF1aXJlKFwiLi9fbGlicmFyeVwiKSYmcmVkZWZpbmUoT2JqZWN0UHJvdG8sXCJwcm9wZXJ0eUlzRW51bWVyYWJsZVwiLCRwcm9wZXJ0eUlzRW51bWVyYWJsZSwhMCksd2tzRXh0LmY9ZnVuY3Rpb24oZSl7cmV0dXJuIHdyYXAod2tzKGUpKX0pLCRleHBvcnQoJGV4cG9ydC5HKyRleHBvcnQuVyskZXhwb3J0LkYqIVVTRV9OQVRJVkUse1N5bWJvbDokU3ltYm9sfSk7Zm9yKHZhciBlczZTeW1ib2xzPVwiaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXNcIi5zcGxpdChcIixcIiksaj0wO2VzNlN5bWJvbHMubGVuZ3RoPmo7KXdrcyhlczZTeW1ib2xzW2orK10pO2Zvcih2YXIgd2VsbEtub3duU3ltYm9scz0ka2V5cyh3a3Muc3RvcmUpLGs9MDt3ZWxsS25vd25TeW1ib2xzLmxlbmd0aD5rOyl3a3NEZWZpbmUod2VsbEtub3duU3ltYm9sc1trKytdKTskZXhwb3J0KCRleHBvcnQuUyskZXhwb3J0LkYqIVVTRV9OQVRJVkUsXCJTeW1ib2xcIix7Zm9yOmZ1bmN0aW9uKGUpe3JldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksZSs9XCJcIik/U3ltYm9sUmVnaXN0cnlbZV06U3ltYm9sUmVnaXN0cnlbZV09JFN5bWJvbChlKX0sa2V5Rm9yOmZ1bmN0aW9uIGtleUZvcihlKXtpZighaXNTeW1ib2woZSkpdGhyb3cgVHlwZUVycm9yKGUrXCIgaXMgbm90IGEgc3ltYm9sIVwiKTtmb3IodmFyIHIgaW4gU3ltYm9sUmVnaXN0cnkpaWYoU3ltYm9sUmVnaXN0cnlbcl09PT1lKXJldHVybiByfSx1c2VTZXR0ZXI6ZnVuY3Rpb24oKXtzZXR0ZXI9ITB9LHVzZVNpbXBsZTpmdW5jdGlvbigpe3NldHRlcj0hMX19KSwkZXhwb3J0KCRleHBvcnQuUyskZXhwb3J0LkYqIVVTRV9OQVRJVkUsXCJPYmplY3RcIix7Y3JlYXRlOiRjcmVhdGUsZGVmaW5lUHJvcGVydHk6JGRlZmluZVByb3BlcnR5LGRlZmluZVByb3BlcnRpZXM6JGRlZmluZVByb3BlcnRpZXMsZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsZ2V0T3duUHJvcGVydHlOYW1lczokZ2V0T3duUHJvcGVydHlOYW1lcyxnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6JGdldE93blByb3BlcnR5U3ltYm9sc30pLCRKU09OJiYkZXhwb3J0KCRleHBvcnQuUyskZXhwb3J0LkYqKCFVU0VfTkFUSVZFfHwkZmFpbHMoZnVuY3Rpb24oKXt2YXIgZT0kU3ltYm9sKCk7cmV0dXJuXCJbbnVsbF1cIiE9X3N0cmluZ2lmeShbZV0pfHxcInt9XCIhPV9zdHJpbmdpZnkoe2E6ZX0pfHxcInt9XCIhPV9zdHJpbmdpZnkoT2JqZWN0KGUpKX0pKSxcIkpTT05cIix7c3RyaW5naWZ5OmZ1bmN0aW9uIHN0cmluZ2lmeShlKXtmb3IodmFyIHIsdCxvPVtlXSxpPTE7YXJndW1lbnRzLmxlbmd0aD5pOylvLnB1c2goYXJndW1lbnRzW2krK10pO2lmKHQ9cj1vWzFdLChpc09iamVjdChyKXx8dm9pZCAwIT09ZSkmJiFpc1N5bWJvbChlKSlyZXR1cm4gaXNBcnJheShyKXx8KHI9ZnVuY3Rpb24oZSxyKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiB0JiYocj10LmNhbGwodGhpcyxlLHIpKSwhaXNTeW1ib2wocikpcmV0dXJuIHJ9KSxvWzFdPXIsX3N0cmluZ2lmeS5hcHBseSgkSlNPTixvKX19KSwkU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXXx8cmVxdWlyZShcIi4vX2hpZGVcIikoJFN5bWJvbFtQUk9UT1RZUEVdLFRPX1BSSU1JVElWRSwkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZiksc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCxcIlN5bWJvbFwiKSxzZXRUb1N0cmluZ1RhZyhNYXRoLFwiTWF0aFwiLCEwKSxzZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTixcIkpTT05cIiwhMCk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1emVXMWliMnd1YW5NaVhTd2libUZ0WlhNaU9sc2laMnh2WW1Gc0lpd2ljbVZ4ZFdseVpTSXNJbWhoY3lJc0lrUkZVME5TU1ZCVVQxSlRJaXdpSkdWNGNHOXlkQ0lzSW5KbFpHVm1hVzVsSWl3aVRVVlVRU0lzSWt0RldTSXNJaVJtWVdsc2N5SXNJbk5vWVhKbFpDSXNJbk5sZEZSdlUzUnlhVzVuVkdGbklpd2lkV2xrSWl3aWQydHpJaXdpZDJ0elJYaDBJaXdpZDJ0elJHVm1hVzVsSWl3aVpXNTFiVXRsZVhNaUxDSnBjMEZ5Y21GNUlpd2lZVzVQWW1wbFkzUWlMQ0pwYzA5aWFtVmpkQ0lzSW5SdlNVOWlhbVZqZENJc0luUnZVSEpwYldsMGFYWmxJaXdpWTNKbFlYUmxSR1Z6WXlJc0lsOWpjbVZoZEdVaUxDSm5UMUJPUlhoMElpd2lKRWRQVUVRaUxDSWtSRkFpTENJa2EyVjVjeUlzSW1kUFVFUWlMQ0ptSWl3aVpGQWlMQ0puVDFCT0lpd2lKRk41YldKdmJDSXNJbE41YldKdmJDSXNJaVJLVTA5T0lpd2lTbE5QVGlJc0lsOXpkSEpwYm1kcFpua2lMQ0p6ZEhKcGJtZHBabmtpTENKUVVrOVVUMVJaVUVVaUxDSklTVVJFUlU0aUxDSlVUMTlRVWtsTlNWUkpWa1VpTENKcGMwVnVkVzBpTENKd2NtOXdaWEowZVVselJXNTFiV1Z5WVdKc1pTSXNJbE41YldKdmJGSmxaMmx6ZEhKNUlpd2lRV3hzVTNsdFltOXNjeUlzSWs5UVUzbHRZbTlzY3lJc0lrOWlhbVZqZEZCeWIzUnZJaXdpVDJKcVpXTjBJaXdpVlZORlgwNUJWRWxXUlNJc0lsRlBZbXBsWTNRaUxDSnpaWFIwWlhJaUxDSm1hVzVrUTJocGJHUWlMQ0p6WlhSVGVXMWliMnhFWlhOaklpd2laMlYwSWl3aWRHaHBjeUlzSW5aaGJIVmxJaXdpWVNJc0ltbDBJaXdpYTJWNUlpd2lSQ0lzSW5CeWIzUnZSR1Z6WXlJc0luZHlZWEFpTENKMFlXY2lMQ0p6ZVcwaUxDSmZheUlzSW1selUzbHRZbTlzSWl3aWFYUmxjbUYwYjNJaUxDSWtaR1ZtYVc1bFVISnZjR1Z5ZEhraUxDSmtaV1pwYm1WUWNtOXdaWEowZVNJc0ltVnVkVzFsY21GaWJHVWlMQ0lrWkdWbWFXNWxVSEp2Y0dWeWRHbGxjeUlzSW1SbFptbHVaVkJ5YjNCbGNuUnBaWE1pTENKUUlpd2lhMlY1Y3lJc0lta2lMQ0pzSWl3aWJHVnVaM1JvSWl3aUpHTnlaV0YwWlNJc0ltTnlaV0YwWlNJc0luVnVaR1ZtYVc1bFpDSXNJaVJ3Y205d1pYSjBlVWx6Ulc1MWJXVnlZV0pzWlNJc0lrVWlMQ0pqWVd4c0lpd2lKR2RsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNpSXNJbWRsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNpSXNJaVJuWlhSUGQyNVFjbTl3WlhKMGVVNWhiV1Z6SWl3aVoyVjBUM2R1VUhKdmNHVnlkSGxPWVcxbGN5SXNJbTVoYldWeklpd2ljbVZ6ZFd4MElpd2ljSFZ6YUNJc0lpUm5aWFJQZDI1UWNtOXdaWEowZVZONWJXSnZiSE1pTENKblpYUlBkMjVRY205d1pYSjBlVk41YldKdmJITWlMQ0pKVTE5UFVDSXNJbFI1Y0dWRmNuSnZjaUlzSW1GeVozVnRaVzUwY3lJc0lpUnpaWFFpTENKamIyNW1hV2QxY21GaWJHVWlMQ0p6WlhRaUxDSjBiMU4wY21sdVp5SXNJbTVoYldVaUxDSkhJaXdpVnlJc0lrWWlMQ0psY3paVGVXMWliMnh6SWl3aWMzQnNhWFFpTENKcUlpd2lkMlZzYkV0dWIzZHVVM2x0WW05c2N5SXNJbk4wYjNKbElpd2lheUlzSWxNaUxDSm1iM0lpTENKclpYbEdiM0lpTENKMWMyVlRaWFIwWlhJaUxDSjFjMlZUYVcxd2JHVWlMQ0p5WlhCc1lXTmxjaUlzSWlSeVpYQnNZV05sY2lJc0ltRnlaM01pTENKaGNIQnNlU0lzSW5aaGJIVmxUMllpTENKTllYUm9JbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVWQkxFbEJRVWxCTEU5QlFWTkRMRkZCUVZFc1lVRkRha0pETEVsQlFVMUVMRkZCUVZFc1ZVRkRaRVVzV1VGQlkwWXNVVUZCVVN4clFrRkRkRUpITEZGQlFWVklMRkZCUVZFc1lVRkRiRUpKTEZOQlFWZEtMRkZCUVZFc1pVRkRia0pMTEV0QlFVOU1MRkZCUVZFc1YwRkJWMDBzU1VGRE1VSkRMRTlCUVZOUUxGRkJRVkVzV1VGRGFrSlJMRTlCUVZOU0xGRkJRVkVzWVVGRGFrSlRMR1ZCUVdsQ1ZDeFJRVUZSTEhkQ1FVTjZRbFVzU1VGQlRWWXNVVUZCVVN4VlFVTmtWeXhKUVVGTldDeFJRVUZSTEZWQlEyUlpMRTlCUVZOYUxGRkJRVkVzWTBGRGFrSmhMRlZCUVZsaUxGRkJRVkVzYVVKQlEzQkNZeXhUUVVGWFpDeFJRVUZSTEdkQ1FVTnVRbVVzVVVGQlZXWXNVVUZCVVN4bFFVTnNRbWRDTEZOQlFWZG9RaXhSUVVGUkxHZENRVU51UW1sQ0xGTkJRVmRxUWl4UlFVRlJMR2RDUVVOdVFtdENMRlZCUVZsc1FpeFJRVUZSTEdsQ1FVTndRbTFDTEZsQlFXTnVRaXhSUVVGUkxHMUNRVU4wUW05Q0xGZEJRV0Z3UWl4UlFVRlJMRzlDUVVOeVFuRkNMRkZCUVZWeVFpeFJRVUZSTEc5Q1FVTnNRbk5DTEZGQlFWVjBRaXhSUVVGUkxITkNRVU5zUW5WQ0xFMUJRVkYyUWl4UlFVRlJMR3RDUVVOb1FuZENMRWxCUVUxNFFpeFJRVUZSTEdkQ1FVTmtlVUlzVFVGQlVYcENMRkZCUVZFc2EwSkJRMmhDTUVJc1MwRkJUMGdzVFVGQlRVa3NSVUZEWWtNc1IwRkJTMG9zU1VGQlNVY3NSVUZEVkVVc1MwRkJUMUFzVVVGQlVVc3NSVUZEWmtjc1VVRkJWUzlDTEU5QlFVOW5ReXhQUVVOcVFrTXNUVUZCVVdwRExFOUJRVTlyUXl4TFFVTm1ReXhYUVVGaFJpeFBRVUZUUVN4TlFVRk5SeXhWUVVNMVFrTXNWVUZCV1N4WlFVTmFReXhQUVVGVE1VSXNTVUZCU1N4WFFVTmlNa0lzWVVGQlpUTkNMRWxCUVVrc1pVRkRia0kwUWl4UFFVRlRMRWRCUVVkRExIRkNRVU5hUXl4bFFVRnBRbXBETEU5QlFVOHNiVUpCUTNoQ2EwTXNWMEZCWVd4RExFOUJRVThzVjBGRGNFSnRReXhWUVVGWmJrTXNUMEZCVHl4alFVTnVRbTlETEZsQlFXTkRMRTlCUVU5VUxGZEJRM0pDVlN4WFFVRXJRaXh0UWtGQldHaENMRkZCUTNCQ2FVSXNVVUZCVldoRUxFOUJRVTluUkN4UlFVVnFRa01zVVVGQlZVUXNWVUZCV1VFc1VVRkJVVmdzWVVGQlpWY3NVVUZCVVZnc1YwRkJWMkVzVlVGSGFFVkRMR05CUVdkQ2FFUXNZVUZCWlVzc1QwRkJUeXhYUVVONFF5eFBRVVZUTEVkQlJrWmpMRkZCUVZGUExFZEJRVWNzUjBGQlNTeEpRVUZMTEVOQlEzcENkVUlzU1VGQlN5eFhRVUZqTEU5QlFVOTJRaXhIUVVGSGQwSXNTMEZCVFN4SlFVRkxMRU5CUVVWRExFMUJRVThzU1VGQlMwTXNUVUZEY0VSQkxFbEJRMFFzVTBGQlZVTXNSVUZCU1VNc1JVRkJTME1zUjBGRGRFSXNTVUZCU1VNc1JVRkJXV2hETEV0QlFVdHJRaXhaUVVGaFdTeEhRVU01UWtVc1ZVRkJhMEprTEZsQlFWbFpMRWRCUTJ4RE5VSXNSMEZCUnpKQ0xFVkJRVWxETEVWQlFVdERMRWRCUTFKRExFZEJRV0ZJTEVsQlFVOVlMR0ZCUVdGb1FpeEhRVUZIWjBJc1dVRkJZVmtzUlVGQlMwVXNTVUZEZUVRNVFpeEhRVVZCSzBJc1MwRkJUeXhUUVVGVlF5eEhRVU51UWl4SlFVRkpReXhGUVVGTmJrSXNWMEZCVjJ0Q0xFZEJRVTkyUXl4UlFVRlJVeXhSUVVGUlRTeFpRVVUxUXl4UFFVUkJlVUlzUlVGQlNVTXNSMEZCUzBZc1JVRkRSa01zUjBGSFRFVXNVMEZCVjJwQ0xGbEJRWGxETEdsQ1FVRndRbWhDTEZGQlFWRnJReXhUUVVGMVFpeFRRVUZWVkN4SFFVTXpSU3hOUVVGdlFpeHBRa0ZCVGtFc1IwRkRXaXhUUVVGVlFTeEhRVU5hTEU5QlFVOUJMR0ZCUVdONlFpeFRRVWR1UW0xRExHZENRVUZyUWl4VFFVRlRReXhsUVVGbFdDeEZRVUZKUXl4RlFVRkxReXhIUVV0eVJDeFBRVXBKUml4SlFVRlBXQ3hoUVVGaGNVSXNaMEpCUVdkQ2RFSXNWVUZCVjJFc1JVRkJTME1zUjBGRGVFUjZReXhUUVVGVGRVTXNSMEZEVkVNc1JVRkJUWEpETEZsQlFWbHhReXhIUVVGTExFZEJRM1pDZUVNc1UwRkJVM2xETEVkQlEweDRSQ3hKUVVGSmVVTXNWMEZCV1dNc1NVRkRZa01zUlVGQlJWVXNXVUZKUkd4RkxFbEJRVWx6UkN4RlFVRkpiRUlzVTBGQlYydENMRVZCUVVkc1FpeFJRVUZSYlVJc1MwRkJUVVFzUlVGQlIyeENMRkZCUVZGdFFpeEpRVUZQTEVkQlF6RkVReXhGUVVGSmNFTXNVVUZCVVc5RExFVkJRVWNzUTBGQlJWVXNWMEZCV1M5RExGZEJRVmNzUjBGQlJ5eFBRVXAwUTI1Q0xFbEJRVWx6UkN4RlFVRkpiRUlzVTBGQlUxUXNSMEZCUnpKQ0xFVkJRVWxzUWl4UFFVRlJha0lzVjBGQlZ5eEZRVUZITEV0QlEyNUViVU1zUlVGQlIyeENMRkZCUVZGdFFpeEpRVUZQTEVkQlNWaE9MR05CUVdOTExFVkJRVWxETEVWQlFVdERMRWxCUTNwQ04wSXNSMEZCUnpKQ0xFVkJRVWxETEVWQlFVdERMRWxCUlc1Q1Z5eHJRa0ZCYjBJc1UwRkJVME1zYVVKQlFXbENaQ3hGUVVGSlpTeEhRVU53UkhSRUxGTkJRVk4xUXl4SFFVdFVMRWxCU2tFc1NVRkhTVU1zUlVGSVFXVXNSVUZCVDNwRUxGTkJRVk4zUkN4RlFVRkpjRVFzVlVGQlZXOUVMRWxCUXpsQ1JTeEZRVUZKTEVWQlEwcERMRVZCUVVsR0xFVkJRVXRITEU5QlJVNUVMRVZCUVVsRUxFZEJRVWRRTEdkQ1FVRm5RbFlzUlVGQlNVTXNSVUZCVFdVc1JVRkJTME1zUzBGQlRVWXNSVUZCUldRc1NVRkRja1FzVDBGQlQwUXNSMEZGVEc5Q0xGRkJRVlVzVTBGQlUwTXNUMEZCVDNKQ0xFVkJRVWxsTEVkQlEyaERMRmxCUVdGUExFbEJRVTVRTEVWQlFXdENha1FzVVVGQlVXdERMRWRCUVUxaExHdENRVUZyUWk5RExGRkJRVkZyUXl4SFFVRkxaU3hKUVVWd1JWRXNjMEpCUVhkQ0xGTkJRVk4wUXl4eFFrRkJjVUpuUWl4SFFVTjRSQ3hKUVVGSmRVSXNSVUZCU1hoRExFOUJRVTk1UXl4TFFVRkxOVUlzUzBGQlRVa3NSVUZCVFhKRExGbEJRVmx4UXl4SFFVRkxMRWxCUTJwRUxGRkJRVWxLTEU5QlFWTlNMR0ZCUVdVelF5eEpRVUZKZVVNc1YwRkJXV01zUzBGQlUzWkVMRWxCUVVrd1F5eFZRVUZYWVN4UlFVTTNSSFZDTEVsQlFVMDVSU3hKUVVGSmJVUXNTMEZCVFVrc1MwRkJVM1pFTEVsQlFVbDVReXhYUVVGWll5eEpRVUZSZGtRc1NVRkJTVzFFTEV0QlFVMW1MRk5CUVZkbExFdEJRVXRtTEZGQlFWRnRRaXhMUVVGUGRVSXNTVUZGTDBaRkxEQkNRVUUwUWl4VFFVRlRReXg1UWtGQmVVSXpRaXhGUVVGSlF5eEhRVWR3UlN4SFFVWkJSQ3hGUVVGTGNrTXNWVUZCVlhGRExFZEJRMlpETEVWQlFVMXlReXhaUVVGWmNVTXNSMEZCU3l4SFFVTnVRa1FzU1VGQlQxZ3NZMEZCWlRORExFbEJRVWw1UXl4WFFVRlpZeXhKUVVGVGRrUXNTVUZCU1RCRExGVkJRVmRoTEVkQlFXeEZMRU5CUTBFc1NVRkJTVU1zUlVGQlNTOUNMRXRCUVVzMlFpeEZRVUZKUXl4SFFVVnFRaXhQUVVSSlF5eEpRVUZMZUVRc1NVRkJTWGxETEZkQlFWbGpMRWxCUVZWMlJDeEpRVUZKYzBRc1JVRkJTV3hDTEZOQlFWZHJRaXhGUVVGSGJFSXNVVUZCVVcxQ0xFdEJRVTlETEVWQlFVVlZMRmxCUVdFc1IwRkRhRVpXTEVsQlJVd3dRaXh4UWtGQmRVSXNVMEZCVTBNc2IwSkJRVzlDTjBJc1IwRkxkRVFzU1VGS1FTeEpRVWRKUXl4RlFVaEJOa0lzUlVGQlVYaEVMRXRCUVV0WUxGVkJRVlZ4UXl4SlFVTjJRaXRDTEVWQlFWTXNSMEZEVkdRc1JVRkJTU3hGUVVWRVlTeEZRVUZOV0N4UFFVRlRSaXhIUVVObWRrVXNTVUZCU1hsRExGZEJRVmxqTEVWQlFVMDJRaXhGUVVGTllpeFBRVUZUYUVJc1IwRkJUMjVDTEZGQlFWVnRRaXhIUVVGUGJrUXNUVUZCVFdsR0xFVkJRVTlETEV0QlFVc3ZRaXhIUVVOd1JpeFBRVUZQT0VJc1IwRkZVRVVzZFVKQlFYbENMRk5CUVZORExITkNRVUZ6UW14RExFZEJUVEZFTEVsQlRFRXNTVUZKU1VNc1JVRktRV3RETEVWQlFWRnVReXhKUVVGUFdDeFpRVU5tZVVNc1JVRkJVWGhFTEV0QlFVczJSQ3hGUVVGUkwwTXNWVUZCV1hwQ0xGVkJRVlZ4UXl4SlFVTXpReXRDTEVWQlFWTXNSMEZEVkdRc1JVRkJTU3hGUVVWRVlTeEZRVUZOV0N4UFFVRlRSaXhKUVVOb1FuWkZMRWxCUVVsNVF5eFhRVUZaWXl4RlFVRk5Oa0lzUlVGQlRXSXNUMEZCVld0Q0xFbEJRVkY2Uml4SlFVRkpNa01zV1VGQllWa3NTVUZCWXpoQ0xFVkJRVTlETEV0QlFVczNReXhYUVVGWFl5eEpRVU40Unl4UFFVRlBPRUlzUjBGSlRuaERMR0ZCV1VneFF5eFZRVmhCTUVJc1VVRkJWU3hUUVVGVFF5eFRRVU5xUWl4SFFVRkpjVUlzWjBKQlFXZENkRUlzVVVGQlV5eE5RVUZOTmtRc1ZVRkJWU3huUTBGRE4wTXNTVUZCU1M5Q0xFVkJRVTFzUkN4SlFVRkphMFlzVlVGQlZXeENMRTlCUVZNc1JVRkJTV3RDTEZWQlFWVXNVVUZCUzJZc1IwRkRhRVJuUWl4RlFVRlBMRk5CUVZWNFF5eEhRVU5tUkN4UFFVRlRVaXhoUVVGaGFVUXNSVUZCUzJJc1MwRkJTM0pETEZWQlFWZFZMRWRCUXpORGNFUXNTVUZCU1cxRUxFdEJRVTFtTEZOQlFWZHdReXhKUVVGSmJVUXNTMEZCUzJZc1VVRkJVM1ZDTEV0QlFVMVNMRXRCUVV0bUxGRkJRVkYxUWl4SlFVRlBMRWRCUTNKRlZpeGpRVUZqUlN4TFFVRk5VU3hGUVVGTGVFTXNWMEZCVnl4RlFVRkhhVU1zUzBGSGVrTXNUMEZFU1c1RUxHRkJRV1U0UXl4UlFVRlJSU3hqUVVGalRpeFpRVUZoWjBJc1JVRkJTeXhEUVVGRmEwTXNZMEZCWXl4RlFVRk5ReXhKUVVGTFJpeEpRVU12Uld4RExFdEJRVXRETEV0QlJVZDRRaXhYUVVGWkxGZEJRVmtzVTBGQlV6UkVMRmRCUTJoRUxFOUJRVTgxUXl4TFFVRkxWU3hMUVVka2RrTXNUVUZCVFVrc1JVRkJTWE5FTERCQ1FVTldla1FzU1VGQlNVY3NSVUZCU1hORExHZENRVU5TYWtVc1VVRkJVU3hyUWtGQmEwSXlRaXhGUVVGSlRDeFJRVUZSU3l4RlFVRkpkMFFzY1VKQlF6RkRia1lzVVVGQlVTeHBRa0ZCYVVJeVFpeEZRVUZKYlVRc2MwSkJRemRDT1VVc1VVRkJVU3hyUWtGQmEwSXlRaXhGUVVGSk5rUXNkVUpCUlRGQ2RFWXNZMEZCWjBKR0xGRkJRVkVzWlVGRE1VSkpMRk5CUVZOM1F5eFpRVUZoTEhWQ1FVRjNRbXRETEhWQ1FVRjFRaXhIUVVkMlJXeEZMRTlCUVU5bExFVkJRVWtzVTBGQlZYTkZMRWRCUTI1Q0xFOUJRVTkwUXl4TFFVRkxhRVFzU1VGQlNYTkdMRTFCU1hCQ09VWXNVVUZCVVVFc1VVRkJVU3RHTEVWQlFVa3ZSaXhSUVVGUlowY3NSVUZCU1doSExGRkJRVkZwUnl4SFFVRkxkRVFzVjBGQldTeERRVUZGWml4UFFVRlJSQ3hWUVVWdVJTeEpRVUZMTEVsQlFVbDFSU3hYUVVGaExHbElRVWR3UWtNc1RVRkJUU3hMUVVGTlF5eEZRVUZKTEVWQlFVZEdMRmRCUVZjelFpeFBRVUZUTmtJc1IwRkJSelZHTEVsQlFVa3dSaXhYUVVGWFJTeE5RVVV6UkN4SlFVRkxMRWxCUVVsRExHbENRVUZ0UWk5RkxFMUJRVTFrTEVsQlFVazRSaXhQUVVGUlF5eEZRVUZKTEVWQlFVZEdMR2xDUVVGcFFqbENMRTlCUVZOblF5eEhRVUZKTjBZc1ZVRkJWVEpHTEdsQ1FVRnBRa1VzVFVGRk9VZDJSeXhSUVVGUlFTeFJRVUZSZDBjc1JVRkJTWGhITEZGQlFWRnBSeXhIUVVGTGRFUXNWMEZCV1N4VFFVRlZMRU5CUlhKRU9FUXNTVUZCVHl4VFFVRlZjRVFzUjBGRFppeFBRVUZQZGtRc1NVRkJTWGRETEdWQlFXZENaU3hIUVVGUExFbEJRemxDWml4bFFVRmxaU3hIUVVObVppeGxRVUZsWlN4SFFVRlBNVUlzVVVGQlVUQkNMRWxCUjNCRGNVUXNUMEZCVVN4VFFVRlRRU3hQUVVGUGFFUXNSMEZEZEVJc1NVRkJTMFVzVTBGQlUwWXNSMEZCVFN4TlFVRk5PRUlzVlVGQlZUbENMRVZCUVUwc2NVSkJRekZETEVsQlFVc3NTVUZCU1V3c1MwRkJUMllzWlVGQlowSXNSMEZCU1VFc1pVRkJaV1VzUzBGQlUwc3NSVUZCU3l4UFFVRlBUQ3hIUVVVeFJYTkVMRlZCUVZjc1YwRkJZemxFTEZGQlFWTXNSMEZEYkVNclJDeFZRVUZYTEZkQlFXTXZSQ3hSUVVGVExFdEJSM0JETjBNc1VVRkJVVUVzVVVGQlVYZEhMRVZCUVVsNFJ5eFJRVUZSYVVjc1IwRkJTM1JFTEZkQlFWa3NVMEZCVlN4RFFVVnlSRGhDTEU5QlFWRkVMRkZCUlZKVUxHVkJRV2RDUkN4blFrRkZhRUpKTEdsQ1FVRnJRa1FzYTBKQlJXeENZeXg1UWtGQk1FSkVMREJDUVVVeFFrY3NiMEpCUVhGQ1JDeHhRa0ZGY2tKTkxITkNRVUYxUWtRc2VVSkJTWHBDZUVRc1QwRkJVemRDTEZGQlFWRkJMRkZCUVZGM1J5eEZRVUZKZUVjc1VVRkJVV2xITEVsQlFVMTBSQ3haUVVGamRrTXNUMEZCVHl4WFFVTTVSQ3hKUVVGSmIwY3NSVUZCU1RkRkxGVkJTVklzVFVGQk1FSXNWVUZCYmtKSkxGZEJRVmNzUTBGQlEzbEZMRXRCUVRKRExFMUJRWGhDZWtVc1YwRkJWeXhEUVVGRmIwSXNSVUZCUjNGRUxFdEJRWGxETEUxQlFYcENla1VzVjBGQlYxY3NUMEZCVHpoRUxFOUJRM0pHTEU5QlFWRXNRMEZEV0hoRkxGVkJRVmNzVTBGQlUwRXNWVUZCVlc5Q0xFZEJTVFZDTEVsQlNFRXNTVUZGU1hsRUxFVkJRVlZETEVWQlJsWkRMRVZCUVU4c1EwRkJRek5FTEVkQlExSnBRaXhGUVVGSkxFVkJSVVJ2UWl4VlFVRlZiRUlzVDBGQlUwWXNSMEZCUnpCRExFVkJRVXN6UWl4TFFVRkxTeXhWUVVGVmNFSXNUVUZGYWtRc1IwRkVRWGxETEVWQlFWbEVMRVZCUVZkRkxFVkJRVXNzU1VGRGRrSnFSeXhUUVVGVEswWXNVMEZCYjBKdVF5eEpRVUZRZEVJc1MwRkJiMEpSTEZOQlFWTlNMRWRCVFhoRUxFOUJURXQ0UXl4UlFVRlJhVWNzUzBGQlYwRXNSVUZCVnl4VFFVRlZlRVFzUlVGQlMwZ3NSMEZGYUVRc1IwRkVkMElzYlVKQlFXSTBSQ3hKUVVGNVFqVkVMRVZCUVZFMFJDeEZRVUZWYWtNc1MwRkJTelZDTEV0QlFVMUpMRVZCUVV0SUxFdEJRMnBGVlN4VFFVRlRWaXhIUVVGUkxFOUJRVTlCTEVsQlJTOUNOa1FzUlVGQlN5eEhRVUZMUml4RlFVTklPVVVzVjBGQlYybEdMRTFCUVUxdVJpeE5RVUZQYTBZc1RVRkxia053Uml4UlFVRlJUU3hYUVVGWFJTeGxRVUZwUW5SRExGRkJRVkVzVlVGQlVrRXNRMEZCYlVJNFFpeFJRVUZSVFN4WFFVRlpSU3hoUVVGalVpeFJRVUZSVFN4WFFVRlhaMFlzVTBGRk5VY3pSeXhsUVVGbGNVSXNVVUZCVXl4VlFVVjRRbkpDTEdWQlFXVTBSeXhMUVVGTkxGRkJRVkVzUjBGRk4wSTFSeXhsUVVGbFZpeFBRVUZQYTBNc1MwRkJUU3hSUVVGUklpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWMzbHRZbTlzTG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLCR0eXBlZD1yZXF1aXJlKFwiLi9fdHlwZWRcIiksYnVmZmVyPXJlcXVpcmUoXCIuL190eXBlZC1idWZmZXJcIiksYW5PYmplY3Q9cmVxdWlyZShcIi4vX2FuLW9iamVjdFwiKSx0b0Fic29sdXRlSW5kZXg9cmVxdWlyZShcIi4vX3RvLWFic29sdXRlLWluZGV4XCIpLHRvTGVuZ3RoPXJlcXVpcmUoXCIuL190by1sZW5ndGhcIiksaXNPYmplY3Q9cmVxdWlyZShcIi4vX2lzLW9iamVjdFwiKSxBcnJheUJ1ZmZlcj1yZXF1aXJlKFwiLi9fZ2xvYmFsXCIpLkFycmF5QnVmZmVyLHNwZWNpZXNDb25zdHJ1Y3Rvcj1yZXF1aXJlKFwiLi9fc3BlY2llcy1jb25zdHJ1Y3RvclwiKSwkQXJyYXlCdWZmZXI9YnVmZmVyLkFycmF5QnVmZmVyLCREYXRhVmlldz1idWZmZXIuRGF0YVZpZXcsJGlzVmlldz0kdHlwZWQuQUJWJiZBcnJheUJ1ZmZlci5pc1ZpZXcsJHNsaWNlPSRBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2UsVklFVz0kdHlwZWQuVklFVyxBUlJBWV9CVUZGRVI9XCJBcnJheUJ1ZmZlclwiOyRleHBvcnQoJGV4cG9ydC5HKyRleHBvcnQuVyskZXhwb3J0LkYqKEFycmF5QnVmZmVyIT09JEFycmF5QnVmZmVyKSx7QXJyYXlCdWZmZXI6JEFycmF5QnVmZmVyfSksJGV4cG9ydCgkZXhwb3J0LlMrJGV4cG9ydC5GKiEkdHlwZWQuQ09OU1RSLEFSUkFZX0JVRkZFUix7aXNWaWV3OmZ1bmN0aW9uIGlzVmlldyhlKXtyZXR1cm4gJGlzVmlldyYmJGlzVmlldyhlKXx8aXNPYmplY3QoZSkmJlZJRVcgaW4gZX19KSwkZXhwb3J0KCRleHBvcnQuUCskZXhwb3J0LlUrJGV4cG9ydC5GKnJlcXVpcmUoXCIuL19mYWlsc1wiKShmdW5jdGlvbigpe3JldHVybiFuZXcgJEFycmF5QnVmZmVyKDIpLnNsaWNlKDEsdm9pZCAwKS5ieXRlTGVuZ3RofSksQVJSQVlfQlVGRkVSLHtzbGljZTpmdW5jdGlvbiBzbGljZShlLHIpe2lmKHZvaWQgMCE9PSRzbGljZSYmdm9pZCAwPT09cilyZXR1cm4gJHNsaWNlLmNhbGwoYW5PYmplY3QodGhpcyksZSk7Zm9yKHZhciB0PWFuT2JqZWN0KHRoaXMpLmJ5dGVMZW5ndGgsaT10b0Fic29sdXRlSW5kZXgoZSx0KSxvPXRvQWJzb2x1dGVJbmRleCh2b2lkIDA9PT1yP3Q6cix0KSx1PW5ldyhzcGVjaWVzQ29uc3RydWN0b3IodGhpcywkQXJyYXlCdWZmZXIpKSh0b0xlbmd0aChvLWkpKSxmPW5ldyAkRGF0YVZpZXcodGhpcykscz1uZXcgJERhdGFWaWV3KHUpLG49MDtpPG87KXMuc2V0VWludDgobisrLGYuZ2V0VWludDgoaSsrKSk7cmV0dXJuIHV9fSkscmVxdWlyZShcIi4vX3NldC1zcGVjaWVzXCIpKEFSUkFZX0JVRkZFUik7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1MGVYQmxaQzVoY25KaGVTMWlkV1ptWlhJdWFuTWlYU3dpYm1GdFpYTWlPbHNpSkdWNGNHOXlkQ0lzSW5KbGNYVnBjbVVpTENJa2RIbHdaV1FpTENKaWRXWm1aWElpTENKaGJrOWlhbVZqZENJc0luUnZRV0p6YjJ4MWRHVkpibVJsZUNJc0luUnZUR1Z1WjNSb0lpd2lhWE5QWW1wbFkzUWlMQ0pCY25KaGVVSjFabVpsY2lJc0luTndaV05wWlhORGIyNXpkSEoxWTNSdmNpSXNJaVJCY25KaGVVSjFabVpsY2lJc0lpUkVZWFJoVm1sbGR5SXNJa1JoZEdGV2FXVjNJaXdpSkdselZtbGxkeUlzSWtGQ1ZpSXNJbWx6Vm1sbGR5SXNJaVJ6YkdsalpTSXNJbkJ5YjNSdmRIbHdaU0lzSW5Oc2FXTmxJaXdpVmtsRlZ5SXNJa0ZTVWtGWlgwSlZSa1pGVWlJc0lrY2lMQ0pYSWl3aVJpSXNJbE1pTENKRFQwNVRWRklpTENKcGRDSXNJbEFpTENKVklpd2lkVzVrWldacGJtVmtJaXdpWW5sMFpVeGxibWQwYUNJc0luTjBZWEowSWl3aVpXNWtJaXdpWTJGc2JDSXNJblJvYVhNaUxDSnNaVzRpTENKbWFYSnpkQ0lzSW1acGJpSXNJbkpsYzNWc2RDSXNJblpwWlhkVElpd2lkbWxsZDFRaUxDSnBibVJsZUNJc0luTmxkRlZwYm5RNElpd2laMlYwVldsdWREZ2lYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUTBFc1NVRkJTVUVzVVVGQlZVTXNVVUZCVVN4aFFVTnNRa01zVDBGQlUwUXNVVUZCVVN4WlFVTnFRa1VzVDBGQlUwWXNVVUZCVVN4dFFrRkRha0pITEZOQlFWZElMRkZCUVZFc1owSkJRMjVDU1N4blFrRkJhMEpLTEZGQlFWRXNkMEpCUXpGQ1N5eFRRVUZYVEN4UlFVRlJMR2RDUVVOdVFrMHNVMEZCVjA0c1VVRkJVU3huUWtGRGJrSlBMRmxCUVdOUUxGRkJRVkVzWVVGQllVOHNXVUZEYmtORExHMUNRVUZ4UWxJc1VVRkJVU3d3UWtGRE4wSlRMR0ZCUVdWUUxFOUJRVTlMTEZsQlEzUkNSeXhWUVVGWlVpeFBRVUZQVXl4VFFVTnVRa01zVVVGQlZWZ3NUMEZCVDFrc1MwRkJUMDRzV1VGQldVOHNUMEZEY0VORExFOUJRVk5PTEdGQlFXRlBMRlZCUVZWRExFMUJRMmhEUXl4TFFVRlBha0lzVDBGQlQybENMRXRCUTJSRExHRkJRV1VzWTBGRmJrSndRaXhSUVVGUlFTeFJRVUZSY1VJc1JVRkJTWEpDTEZGQlFWRnpRaXhGUVVGSmRFSXNVVUZCVVhWQ0xFZEJRVXRtTEdOQlFXZENSU3hqUVVGbExFTkJRVVZHTEZsQlFXRkZMR1ZCUlROR1ZpeFJRVUZSUVN4UlFVRlJkMElzUlVGQlNYaENMRkZCUVZGMVFpeEhRVUZMY2tJc1QwRkJUM1ZDTEU5QlFWRk1MR0ZCUVdNc1EwRkZOVVJNTEU5QlFWRXNVMEZCVTBFc1QwRkJUMWNzUjBGRGRFSXNUMEZCVDJJc1UwRkJWMEVzVVVGQlVXRXNTVUZCVDI1Q0xGTkJRVk50UWl4SlFVRlBVQ3hSUVVGUlR5eExRVWszUkRGQ0xGRkJRVkZCTEZGQlFWRXlRaXhGUVVGSk0wSXNVVUZCVVRSQ0xFVkJRVWsxUWl4UlFVRlJkVUlzUlVGQlNYUkNMRkZCUVZFc1YwRkJVa0VzUTBGQmIwSXNWMEZET1VRc1QwRkJVU3hKUVVGSlV5eGhRVUZoTEVkQlFVZFJMRTFCUVUwc1QwRkJSMWNzUjBGQlYwTXNZVUZET1VOV0xHRkJRV01zUTBGRmFFSkdMRTFCUVU4c1UwRkJVMEVzVFVGQlRXRXNSVUZCVDBNc1IwRkRNMElzVVVGQlpVZ3NTVUZCV0dJc1lVRkJaME5oTEVsQlFWSkhMRVZCUVcxQ0xFOUJRVTlvUWl4UFFVRlBhVUlzUzBGQlN6ZENMRk5CUVZNNFFpeE5RVUZQU0N4SFFWRnNSaXhKUVZCQkxFbEJRVWxKTEVWQlFVMHZRaXhUUVVGVE9FSXNUVUZCVFVvc1YwRkRja0pOTEVWQlFWRXZRaXhuUWtGQlowSXdRaXhGUVVGUFNTeEhRVU12UWtVc1JVRkJUV2hETEhGQ1FVRjNRbmRDTEVsQlFWSkhMRVZCUVc5Q1J5eEZRVUZOU0N4RlFVRkxSeXhIUVVOeVJFY3NSVUZCVXl4SlFVRkxOMElzYlVKQlFXMUNlVUlzUzBGQlRYaENMR05CUVRsQ0xFTkJRVFpEU2l4VFFVRlRLMElzUlVGQlRVUXNTVUZEY2tWSExFVkJRVkVzU1VGQlNUVkNMRlZCUVZWMVFpeE5RVU4wUWswc1JVRkJVU3hKUVVGSk4wSXNWVUZCVlRKQ0xFZEJRM1JDUnl4RlFVRlJMRVZCUTB4TUxFVkJRVkZETEVkQlEySkhMRVZCUVUxRkxGTkJRVk5FTEVsQlFWTkdMRVZCUVUxSkxGTkJRVk5RTEUxQlEzWkRMRTlCUVU5RkxFdEJTV0p5UXl4UlFVRlJMR2xDUVVGU1FTeERRVUV3UW0xQ0lpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWRIbHdaV1F1WVhKeVlYa3RZblZtWm1WeUxtcHpJbjA9IiwidmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKTskZXhwb3J0KCRleHBvcnQuRyskZXhwb3J0LlcrJGV4cG9ydC5GKiFyZXF1aXJlKFwiLi9fdHlwZWRcIikuQUJWLHtEYXRhVmlldzpyZXF1aXJlKFwiLi9fdHlwZWQtYnVmZmVyXCIpLkRhdGFWaWV3fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1MGVYQmxaQzVrWVhSaExYWnBaWGN1YW5NaVhTd2libUZ0WlhNaU9sc2lKR1Y0Y0c5eWRDSXNJbkpsY1hWcGNtVWlMQ0pISWl3aVZ5SXNJa1lpTENKQlFsWWlMQ0pFWVhSaFZtbGxkeUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVOMFFrUXNVVUZCVVVFc1VVRkJVVVVzUlVGQlNVWXNVVUZCVVVjc1JVRkJTVWdzVVVGQlVVa3NSMEZCUzBnc1VVRkJVU3haUVVGWlNTeEpRVUZMTEVOQlEzQkZReXhUUVVGVlRDeFJRVUZSTEcxQ1FVRnRRa3NpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTUwZVhCbFpDNWtZWFJoTFhacFpYY3Vhbk1pZlE9PSIsInJlcXVpcmUoXCIuL190eXBlZC1hcnJheVwiKShcIkZsb2F0MzJcIiw0LGZ1bmN0aW9uKHIpe3JldHVybiBmdW5jdGlvbiBGbG9hdDMyQXJyYXkodCxuLGEpe3JldHVybiByKHRoaXMsdCxuLGEpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNTBlWEJsWkM1bWJHOWhkRE15TFdGeWNtRjVMbXB6SWwwc0ltNWhiV1Z6SWpwYkluSmxjWFZwY21VaUxDSnBibWwwSWl3aVJteHZZWFF6TWtGeWNtRjVJaXdpWkdGMFlTSXNJbUo1ZEdWUFptWnpaWFFpTENKc1pXNW5kR2dpTENKMGFHbHpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVUVzVVVGQlVTeHBRa0ZCVWtFc1EwRkJNRUlzVlVGQlZ5eEZRVUZITEZOQlFWVkRMRWRCUTJoRUxFOUJRVThzVTBGQlUwTXNZVUZCWVVNc1JVRkJUVU1zUlVGQldVTXNSMEZETjBNc1QwRkJUMG9zUlVGQlMwc3NTMEZCVFVnc1JVRkJUVU1zUlVGQldVTWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNTBlWEJsWkM1bWJHOWhkRE15TFdGeWNtRjVMbXB6SW4wPSIsInJlcXVpcmUoXCIuL190eXBlZC1hcnJheVwiKShcIkZsb2F0NjRcIiw4LGZ1bmN0aW9uKHIpe3JldHVybiBmdW5jdGlvbiBGbG9hdDY0QXJyYXkodCxuLGEpe3JldHVybiByKHRoaXMsdCxuLGEpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNTBlWEJsWkM1bWJHOWhkRFkwTFdGeWNtRjVMbXB6SWwwc0ltNWhiV1Z6SWpwYkluSmxjWFZwY21VaUxDSnBibWwwSWl3aVJteHZZWFEyTkVGeWNtRjVJaXdpWkdGMFlTSXNJbUo1ZEdWUFptWnpaWFFpTENKc1pXNW5kR2dpTENKMGFHbHpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVUVzVVVGQlVTeHBRa0ZCVWtFc1EwRkJNRUlzVlVGQlZ5eEZRVUZITEZOQlFWVkRMRWRCUTJoRUxFOUJRVThzVTBGQlUwTXNZVUZCWVVNc1JVRkJUVU1zUlVGQldVTXNSMEZETjBNc1QwRkJUMG9zUlVGQlMwc3NTMEZCVFVnc1JVRkJUVU1zUlVGQldVTWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNTBlWEJsWkM1bWJHOWhkRFkwTFdGeWNtRjVMbXB6SW4wPSIsInJlcXVpcmUoXCIuL190eXBlZC1hcnJheVwiKShcIkludDE2XCIsMixmdW5jdGlvbihyKXtyZXR1cm4gZnVuY3Rpb24gSW50MTZBcnJheShuLHQsZSl7cmV0dXJuIHIodGhpcyxuLHQsZSl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1MGVYQmxaQzVwYm5ReE5pMWhjbkpoZVM1cWN5SmRMQ0p1WVcxbGN5STZXeUp5WlhGMWFYSmxJaXdpYVc1cGRDSXNJa2x1ZERFMlFYSnlZWGtpTENKa1lYUmhJaXdpWW5sMFpVOW1abk5sZENJc0lteGxibWQwYUNJc0luUm9hWE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCUVN4UlFVRlJMR2xDUVVGU1FTeERRVUV3UWl4UlFVRlRMRVZCUVVjc1UwRkJWVU1zUjBGRE9VTXNUMEZCVHl4VFFVRlRReXhYUVVGWFF5eEZRVUZOUXl4RlFVRlpReXhIUVVNelF5eFBRVUZQU2l4RlFVRkxTeXhMUVVGTlNDeEZRVUZOUXl4RlFVRlpReUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMblI1Y0dWa0xtbHVkREUyTFdGeWNtRjVMbXB6SW4wPSIsInJlcXVpcmUoXCIuL190eXBlZC1hcnJheVwiKShcIkludDMyXCIsNCxmdW5jdGlvbihyKXtyZXR1cm4gZnVuY3Rpb24gSW50MzJBcnJheShuLHQsZSl7cmV0dXJuIHIodGhpcyxuLHQsZSl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1MGVYQmxaQzVwYm5Rek1pMWhjbkpoZVM1cWN5SmRMQ0p1WVcxbGN5STZXeUp5WlhGMWFYSmxJaXdpYVc1cGRDSXNJa2x1ZERNeVFYSnlZWGtpTENKa1lYUmhJaXdpWW5sMFpVOW1abk5sZENJc0lteGxibWQwYUNJc0luUm9hWE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCUVN4UlFVRlJMR2xDUVVGU1FTeERRVUV3UWl4UlFVRlRMRVZCUVVjc1UwRkJWVU1zUjBGRE9VTXNUMEZCVHl4VFFVRlRReXhYUVVGWFF5eEZRVUZOUXl4RlFVRlpReXhIUVVNelF5eFBRVUZQU2l4RlFVRkxTeXhMUVVGTlNDeEZRVUZOUXl4RlFVRlpReUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMblI1Y0dWa0xtbHVkRE15TFdGeWNtRjVMbXB6SW4wPSIsInJlcXVpcmUoXCIuL190eXBlZC1hcnJheVwiKShcIkludDhcIiwxLGZ1bmN0aW9uKHIpe3JldHVybiBmdW5jdGlvbiBJbnQ4QXJyYXkobix0LGUpe3JldHVybiByKHRoaXMsbix0LGUpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNTBlWEJsWkM1cGJuUTRMV0Z5Y21GNUxtcHpJbDBzSW01aGJXVnpJanBiSW5KbGNYVnBjbVVpTENKcGJtbDBJaXdpU1c1ME9FRnljbUY1SWl3aVpHRjBZU0lzSW1KNWRHVlBabVp6WlhRaUxDSnNaVzVuZEdnaUxDSjBhR2x6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVVFc1VVRkJVU3hwUWtGQlVrRXNRMEZCTUVJc1QwRkJVU3hGUVVGSExGTkJRVlZETEVkQlF6ZERMRTlCUVU4c1UwRkJVME1zVlVGQlZVTXNSVUZCVFVNc1JVRkJXVU1zUjBGRE1VTXNUMEZCVDBvc1JVRkJTMHNzUzBGQlRVZ3NSVUZCVFVNc1JVRkJXVU1pTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTUwZVhCbFpDNXBiblE0TFdGeWNtRjVMbXB6SW4wPSIsInJlcXVpcmUoXCIuL190eXBlZC1hcnJheVwiKShcIlVpbnQxNlwiLDIsZnVuY3Rpb24ocil7cmV0dXJuIGZ1bmN0aW9uIFVpbnQxNkFycmF5KG4sdCxpKXtyZXR1cm4gcih0aGlzLG4sdCxpKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTUwZVhCbFpDNTFhVzUwTVRZdFlYSnlZWGt1YW5NaVhTd2libUZ0WlhNaU9sc2ljbVZ4ZFdseVpTSXNJbWx1YVhRaUxDSlZhVzUwTVRaQmNuSmhlU0lzSW1SaGRHRWlMQ0ppZVhSbFQyWm1jMlYwSWl3aWJHVnVaM1JvSWl3aWRHaHBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUZCTEZGQlFWRXNhVUpCUVZKQkxFTkJRVEJDTEZOQlFWVXNSVUZCUnl4VFFVRlZReXhIUVVNdlF5eFBRVUZQTEZOQlFWTkRMRmxCUVZsRExFVkJRVTFETEVWQlFWbERMRWRCUXpWRExFOUJRVTlLTEVWQlFVdExMRXRCUVUxSUxFVkJRVTFETEVWQlFWbERJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVkSGx3WldRdWRXbHVkREUyTFdGeWNtRjVMbXB6SW4wPSIsInJlcXVpcmUoXCIuL190eXBlZC1hcnJheVwiKShcIlVpbnQzMlwiLDQsZnVuY3Rpb24ocil7cmV0dXJuIGZ1bmN0aW9uIFVpbnQzMkFycmF5KG4sdCxpKXtyZXR1cm4gcih0aGlzLG4sdCxpKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOaTUwZVhCbFpDNTFhVzUwTXpJdFlYSnlZWGt1YW5NaVhTd2libUZ0WlhNaU9sc2ljbVZ4ZFdseVpTSXNJbWx1YVhRaUxDSlZhVzUwTXpKQmNuSmhlU0lzSW1SaGRHRWlMQ0ppZVhSbFQyWm1jMlYwSWl3aWJHVnVaM1JvSWl3aWRHaHBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUZCTEZGQlFWRXNhVUpCUVZKQkxFTkJRVEJDTEZOQlFWVXNSVUZCUnl4VFFVRlZReXhIUVVNdlF5eFBRVUZQTEZOQlFWTkRMRmxCUVZsRExFVkJRVTFETEVWQlFWbERMRWRCUXpWRExFOUJRVTlLTEVWQlFVdExMRXRCUVUxSUxFVkJRVTFETEVWQlFWbERJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVkSGx3WldRdWRXbHVkRE15TFdGeWNtRjVMbXB6SW4wPSIsInJlcXVpcmUoXCIuL190eXBlZC1hcnJheVwiKShcIlVpbnQ4XCIsMSxmdW5jdGlvbihyKXtyZXR1cm4gZnVuY3Rpb24gVWludDhBcnJheShuLHQsaSl7cmV0dXJuIHIodGhpcyxuLHQsaSl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1MGVYQmxaQzUxYVc1ME9DMWhjbkpoZVM1cWN5SmRMQ0p1WVcxbGN5STZXeUp5WlhGMWFYSmxJaXdpYVc1cGRDSXNJbFZwYm5RNFFYSnlZWGtpTENKa1lYUmhJaXdpWW5sMFpVOW1abk5sZENJc0lteGxibWQwYUNJc0luUm9hWE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCUVN4UlFVRlJMR2xDUVVGU1FTeERRVUV3UWl4UlFVRlRMRVZCUVVjc1UwRkJWVU1zUjBGRE9VTXNUMEZCVHl4VFFVRlRReXhYUVVGWFF5eEZRVUZOUXl4RlFVRlpReXhIUVVNelF5eFBRVUZQU2l4RlFVRkxTeXhMUVVGTlNDeEZRVUZOUXl4RlFVRlpReUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMblI1Y0dWa0xuVnBiblE0TFdGeWNtRjVMbXB6SW4wPSIsInJlcXVpcmUoXCIuL190eXBlZC1hcnJheVwiKShcIlVpbnQ4XCIsMSxmdW5jdGlvbihyKXtyZXR1cm4gZnVuY3Rpb24gVWludDhDbGFtcGVkQXJyYXkobix0LGUpe3JldHVybiByKHRoaXMsbix0LGUpfX0sITApO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNTBlWEJsWkM1MWFXNTBPQzFqYkdGdGNHVmtMV0Z5Y21GNUxtcHpJbDBzSW01aGJXVnpJanBiSW5KbGNYVnBjbVVpTENKcGJtbDBJaXdpVldsdWREaERiR0Z0Y0dWa1FYSnlZWGtpTENKa1lYUmhJaXdpWW5sMFpVOW1abk5sZENJc0lteGxibWQwYUNJc0luUm9hWE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCUVN4UlFVRlJMR2xDUVVGU1FTeERRVUV3UWl4UlFVRlRMRVZCUVVjc1UwRkJWVU1zUjBGRE9VTXNUMEZCVHl4VFFVRlRReXhyUWtGQmEwSkRMRVZCUVUxRExFVkJRVmxETEVkQlEyeEVMRTlCUVU5S0xFVkJRVXRMTEV0QlFVMUlMRVZCUVUxRExFVkJRVmxETEUxQlJYSkRJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVkSGx3WldRdWRXbHVkRGd0WTJ4aGJYQmxaQzFoY25KaGVTNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIEludGVybmFsTWFwLGVhY2g9cmVxdWlyZShcIi4vX2FycmF5LW1ldGhvZHNcIikoMCkscmVkZWZpbmU9cmVxdWlyZShcIi4vX3JlZGVmaW5lXCIpLG1ldGE9cmVxdWlyZShcIi4vX21ldGFcIiksYXNzaWduPXJlcXVpcmUoXCIuL19vYmplY3QtYXNzaWduXCIpLHdlYWs9cmVxdWlyZShcIi4vX2NvbGxlY3Rpb24td2Vha1wiKSxpc09iamVjdD1yZXF1aXJlKFwiLi9faXMtb2JqZWN0XCIpLGZhaWxzPXJlcXVpcmUoXCIuL19mYWlsc1wiKSx2YWxpZGF0ZT1yZXF1aXJlKFwiLi9fdmFsaWRhdGUtY29sbGVjdGlvblwiKSxXRUFLX01BUD1cIldlYWtNYXBcIixnZXRXZWFrPW1ldGEuZ2V0V2Vhayxpc0V4dGVuc2libGU9T2JqZWN0LmlzRXh0ZW5zaWJsZSx1bmNhdWdodEZyb3plblN0b3JlPXdlYWsudWZzdG9yZSx0bXA9e30sd3JhcHBlcj1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24gV2Vha01hcCgpe3JldHVybiBlKHRoaXMsYXJndW1lbnRzLmxlbmd0aD4wP2FyZ3VtZW50c1swXTp2b2lkIDApfX0sbWV0aG9kcz17Z2V0OmZ1bmN0aW9uIGdldChlKXtpZihpc09iamVjdChlKSl7dmFyIHQ9Z2V0V2VhayhlKTtyZXR1cm4hMD09PXQ/dW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLFdFQUtfTUFQKSkuZ2V0KGUpOnQ/dFt0aGlzLl9pXTp2b2lkIDB9fSxzZXQ6ZnVuY3Rpb24gc2V0KGUsdCl7cmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsV0VBS19NQVApLGUsdCl9fSwkV2Vha01hcD1tb2R1bGUuZXhwb3J0cz1yZXF1aXJlKFwiLi9fY29sbGVjdGlvblwiKShXRUFLX01BUCx3cmFwcGVyLG1ldGhvZHMsd2VhaywhMCwhMCk7ZmFpbHMoZnVuY3Rpb24oKXtyZXR1cm4gNyE9KG5ldyAkV2Vha01hcCkuc2V0KChPYmplY3QuZnJlZXplfHxPYmplY3QpKHRtcCksNykuZ2V0KHRtcCl9KSYmKGFzc2lnbigoSW50ZXJuYWxNYXA9d2Vhay5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLFdFQUtfTUFQKSkucHJvdG90eXBlLG1ldGhvZHMpLG1ldGEuTkVFRD0hMCxlYWNoKFtcImRlbGV0ZVwiLFwiaGFzXCIsXCJnZXRcIixcInNldFwiXSxmdW5jdGlvbihlKXt2YXIgdD0kV2Vha01hcC5wcm90b3R5cGUscj10W2VdO3JlZGVmaW5lKHQsZSxmdW5jdGlvbih0LGEpe2lmKGlzT2JqZWN0KHQpJiYhaXNFeHRlbnNpYmxlKHQpKXt0aGlzLl9mfHwodGhpcy5fZj1uZXcgSW50ZXJuYWxNYXApO3ZhciBpPXRoaXMuX2ZbZV0odCxhKTtyZXR1cm5cInNldFwiPT1lP3RoaXM6aX1yZXR1cm4gci5jYWxsKHRoaXMsdCxhKX0pfSkpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek5pNTNaV0ZyTFcxaGNDNXFjeUpkTENKdVlXMWxjeUk2V3lKSmJuUmxjbTVoYkUxaGNDSXNJbVZoWTJnaUxDSnlaWEYxYVhKbElpd2ljbVZrWldacGJtVWlMQ0p0WlhSaElpd2lZWE56YVdkdUlpd2lkMlZoYXlJc0ltbHpUMkpxWldOMElpd2labUZwYkhNaUxDSjJZV3hwWkdGMFpTSXNJbGRGUVV0ZlRVRlFJaXdpWjJWMFYyVmhheUlzSW1selJYaDBaVzV6YVdKc1pTSXNJazlpYW1WamRDSXNJblZ1WTJGMVoyaDBSbkp2ZW1WdVUzUnZjbVVpTENKMVpuTjBiM0psSWl3aWRHMXdJaXdpZDNKaGNIQmxjaUlzSW1kbGRDSXNJbGRsWVd0TllYQWlMQ0owYUdseklpd2lZWEpuZFcxbGJuUnpJaXdpYkdWdVozUm9JaXdpZFc1a1pXWnBibVZrSWl3aWJXVjBhRzlrY3lJc0ltdGxlU0lzSW1SaGRHRWlMQ0pmYVNJc0luTmxkQ0lzSW5aaGJIVmxJaXdpWkdWbUlpd2lKRmRsWVd0TllYQWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpWm5KbFpYcGxJaXdpWjJWMFEyOXVjM1J5ZFdOMGIzSWlMQ0p3Y205MGIzUjVjR1VpTENKT1JVVkVJaXdpY0hKdmRHOGlMQ0p0WlhSb2IyUWlMQ0poSWl3aVlpSXNJbDltSWl3aWNtVnpkV3gwSWl3aVkyRnNiQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRFFTeEpRV0ZKUVN4WlFXSkJReXhMUVVGUFF5eFJRVUZSTEcxQ1FVRlNRU3hEUVVFMFFpeEhRVU51UTBNc1UwRkJWMFFzVVVGQlVTeGxRVU51UWtVc1MwRkJUMFlzVVVGQlVTeFhRVU5tUnl4UFFVRlRTQ3hSUVVGUkxHOUNRVU5xUWtrc1MwRkJUMG9zVVVGQlVTeHpRa0ZEWmtzc1UwRkJWMHdzVVVGQlVTeG5Ra0ZEYmtKTkxFMUJRVkZPTEZGQlFWRXNXVUZEYUVKUExGTkJRVmRRTEZGQlFWRXNNRUpCUTI1Q1VTeFRRVUZYTEZWQlExaERMRkZCUVZWUUxFdEJRVXRQTEZGQlEyWkRMR0ZCUVdWRExFOUJRVTlFTEdGQlEzUkNSU3h2UWtGQmMwSlNMRXRCUVV0VExGRkJRek5DUXl4SlFVRk5MRWRCUjA1RExGRkJRVlVzVTBGQlZVTXNSMEZEZEVJc1QwRkJUeXhUUVVGVFF5eFZRVU5rTEU5QlFVOUVMRVZCUVVsRkxFdEJRVTFETEZWQlFWVkRMRTlCUVZNc1JVRkJTVVFzVlVGQlZTeFJRVUZMUlN4TFFVbDJSRU1zVVVGQlZTeERRVVZhVGl4SlFVRkxMRk5CUVZOQkxFbEJRVWxQTEVkQlEyaENMRWRCUVVsc1FpeFRRVUZUYTBJc1IwRkJUU3hEUVVOcVFpeEpRVUZKUXl4RlFVRlBaaXhSUVVGUll5eEhRVU51UWl4UFFVRmhMRWxCUVZSRExFVkJRWE5DV2l4dlFrRkJiMEpNTEZOQlFWTlhMRXRCUVUxV0xGZEJRVmRSTEVsQlFVbFBMRWRCUTNKRlF5eEZRVUZQUVN4RlFVRkxUaXhMUVVGTFR5eFRRVUZOU2l4SlFVbHNRMHNzU1VGQlN5eFRRVUZUUVN4SlFVRkpTQ3hGUVVGTFNTeEhRVU55UWl4UFFVRlBka0lzUzBGQlMzZENMRWxCUVVseVFpeFRRVUZUVnl4TFFVRk5WaXhWUVVGWFpTeEZRVUZMU1N4TFFVc3ZRMFVzVTBGQlYwTXNUMEZCVDBNc1VVRkJWUzlDTEZGQlFWRXNaMEpCUVZKQkxFTkJRWGxDVVN4VFFVRlZUeXhSUVVGVFR5eFJRVUZUYkVJc1RVRkJUU3hIUVVGTkxFZEJSemRHUlN4TlFVRk5MRmRCUVdNc1QwRkJlVVVzU1VGQmJFVXNTVUZCU1hWQ0xGVkJRVmRJTEV0QlFVdG1MRTlCUVU5eFFpeFJRVUZWY2tJc1VVRkJVVWNzUzBGQlRTeEhRVUZIUlN4SlFVRkpSaXhUUVVWMlJsZ3NVVUZFUVV3c1dVRkJZMDBzUzBGQlN6WkNMR1ZCUVdWc1FpeFJRVUZUVUN4WFFVTjRRakJDTEZWQlFWZGFMRk5CUXpsQ2NFSXNTMEZCUzJsRExFMUJRVThzUlVGRFduQkRMRXRCUVVzc1EwRkJReXhUUVVGVkxFMUJRVThzVFVGQlR5eFBRVUZSTEZOQlFWVjNRaXhIUVVNNVF5eEpRVUZKWVN4RlFVRlJVQ3hUUVVGVFN5eFZRVU5xUWtjc1JVRkJVMFFzUlVGQlRXSXNSMEZEYmtKMFFpeFRRVUZUYlVNc1JVRkJUMklzUlVGQlN5eFRRVUZWWlN4RlFVRkhReXhIUVVWb1F5eEhRVUZKYkVNc1UwRkJVMmxETEV0QlFVODFRaXhoUVVGaE5FSXNSMEZCU1N4RFFVTTVRbkJDTEV0QlFVdHpRaXhMUVVGSmRFSXNTMEZCUzNOQ0xFZEJRVXNzU1VGQlNURkRMR0ZCUXpWQ0xFbEJRVWt5UXl4RlFVRlRka0lzUzBGQlMzTkNMRWRCUVVkcVFpeEhRVUZMWlN4RlFVRkhReXhIUVVNM1FpeE5RVUZqTEU5QlFWQm9RaXhGUVVGbFRDeExRVUZQZFVJc1JVRkZOMElzVDBGQlQwb3NSVUZCVDBzc1MwRkJTM2hDTEV0QlFVMXZRaXhGUVVGSFF5SXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxuZGxZV3N0YldGd0xtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIHdlYWs9cmVxdWlyZShcIi4vX2NvbGxlY3Rpb24td2Vha1wiKSx2YWxpZGF0ZT1yZXF1aXJlKFwiLi9fdmFsaWRhdGUtY29sbGVjdGlvblwiKSxXRUFLX1NFVD1cIldlYWtTZXRcIjtyZXF1aXJlKFwiLi9fY29sbGVjdGlvblwiKShXRUFLX1NFVCxmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24gV2Vha1NldCgpe3JldHVybiBlKHRoaXMsYXJndW1lbnRzLmxlbmd0aD4wP2FyZ3VtZW50c1swXTp2b2lkIDApfX0se2FkZDpmdW5jdGlvbiBhZGQoZSl7cmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsV0VBS19TRVQpLGUsITApfX0sd2VhaywhMSwhMCk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tmk1M1pXRnJMWE5sZEM1cWN5SmRMQ0p1WVcxbGN5STZXeUozWldGcklpd2ljbVZ4ZFdseVpTSXNJblpoYkdsa1lYUmxJaXdpVjBWQlMxOVRSVlFpTENKblpYUWlMQ0pYWldGclUyVjBJaXdpZEdocGN5SXNJbUZ5WjNWdFpXNTBjeUlzSW14bGJtZDBhQ0lzSW5WdVpHVm1hVzVsWkNJc0ltRmtaQ0lzSW5aaGJIVmxJaXdpWkdWbUlsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVU5CTEVsQlFVbEJMRXRCUVU5RExGRkJRVkVzYzBKQlEyWkRMRk5CUVZkRUxGRkJRVkVzTUVKQlEyNUNSU3hUUVVGWExGVkJSMlpHTEZGQlFWRXNaMEpCUVZKQkxFTkJRWGxDUlN4VFFVRlZMRk5CUVZWRExFZEJRek5ETEU5QlFVOHNVMEZCVTBNc1ZVRkJXU3hQUVVGUFJDeEZRVUZKUlN4TFFVRk5ReXhWUVVGVlF5eFBRVUZUTEVWQlFVbEVMRlZCUVZVc1VVRkJTMFVzUzBGRGJFWXNRMEZGUkVNc1NVRkJTeXhUUVVGVFFTeEpRVUZKUXl4SFFVTm9RaXhQUVVGUFdDeExRVUZMV1N4SlFVRkpWaXhUUVVGVFNTeExRVUZOU0N4VlFVRlhVU3hIUVVGUExFdEJSV3hFV0N4TlFVRk5MRWRCUVU4aUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1M1pXRnJMWE5sZEM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLGZsYXR0ZW5JbnRvQXJyYXk9cmVxdWlyZShcIi4vX2ZsYXR0ZW4taW50by1hcnJheVwiKSx0b09iamVjdD1yZXF1aXJlKFwiLi9fdG8tb2JqZWN0XCIpLHRvTGVuZ3RoPXJlcXVpcmUoXCIuL190by1sZW5ndGhcIiksYUZ1bmN0aW9uPXJlcXVpcmUoXCIuL19hLWZ1bmN0aW9uXCIpLGFycmF5U3BlY2llc0NyZWF0ZT1yZXF1aXJlKFwiLi9fYXJyYXktc3BlY2llcy1jcmVhdGVcIik7JGV4cG9ydCgkZXhwb3J0LlAsXCJBcnJheVwiLHtmbGF0TWFwOmZ1bmN0aW9uIGZsYXRNYXAoZSl7dmFyIHQscixhPXRvT2JqZWN0KHRoaXMpO3JldHVybiBhRnVuY3Rpb24oZSksdD10b0xlbmd0aChhLmxlbmd0aCkscj1hcnJheVNwZWNpZXNDcmVhdGUoYSwwKSxmbGF0dGVuSW50b0FycmF5KHIsYSxhLHQsMCwxLGUsYXJndW1lbnRzWzFdKSxyfX0pLHJlcXVpcmUoXCIuL19hZGQtdG8tdW5zY29wYWJsZXNcIikoXCJmbGF0TWFwXCIpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NWhjbkpoZVM1bWJHRjBMVzFoY0M1cWN5SmRMQ0p1WVcxbGN5STZXeUlrWlhod2IzSjBJaXdpY21WeGRXbHlaU0lzSW1ac1lYUjBaVzVKYm5SdlFYSnlZWGtpTENKMGIwOWlhbVZqZENJc0luUnZUR1Z1WjNSb0lpd2lZVVoxYm1OMGFXOXVJaXdpWVhKeVlYbFRjR1ZqYVdWelEzSmxZWFJsSWl3aVVDSXNJbVpzWVhSTllYQWlMQ0pqWVd4c1ltRmphMlp1SWl3aWMyOTFjbU5sVEdWdUlpd2lRU0lzSWs4aUxDSjBhR2x6SWl3aWJHVnVaM1JvSWl3aVlYSm5kVzFsYm5SeklsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVVZCTEVsQlFVbEJMRkZCUVZWRExGRkJRVkVzWVVGRGJFSkRMR2xDUVVGdFFrUXNVVUZCVVN4NVFrRkRNMEpGTEZOQlFWZEdMRkZCUVZFc1owSkJRMjVDUnl4VFFVRlhTQ3hSUVVGUkxHZENRVU51UWtrc1ZVRkJXVW9zVVVGQlVTeHBRa0ZEY0VKTExHMUNRVUZ4UWt3c1VVRkJVU3d5UWtGRmFrTkVMRkZCUVZGQkxGRkJRVkZQTEVWQlFVY3NVVUZCVXl4RFFVTXhRa01zVVVGQlV5eFRRVUZUUVN4UlFVRlJReXhIUVVONFFpeEpRVU5KUXl4RlFVRlhReXhGUVVSWVF5eEZRVUZKVkN4VFFVRlRWU3hOUVUxcVFpeFBRVXBCVWl4VlFVRlZTU3hIUVVOV1F5eEZRVUZaVGl4VFFVRlRVU3hGUVVGRlJTeFJRVU4yUWtnc1JVRkJTVXdzYlVKQlFXMUNUU3hGUVVGSExFZEJRekZDVml4cFFrRkJhVUpUTEVWQlFVZERMRVZCUVVkQkxFVkJRVWRHTEVWQlFWY3NSVUZCUnl4RlFVRkhSQ3hGUVVGWlRTeFZRVUZWTEVsQlF6RkVTaXhMUVVsWVZpeFJRVUZSTEhkQ1FVRlNRU3hEUVVGcFF5SXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNM0xtRnljbUY1TG1ac1lYUXRiV0Z3TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLGZsYXR0ZW5JbnRvQXJyYXk9cmVxdWlyZShcIi4vX2ZsYXR0ZW4taW50by1hcnJheVwiKSx0b09iamVjdD1yZXF1aXJlKFwiLi9fdG8tb2JqZWN0XCIpLHRvTGVuZ3RoPXJlcXVpcmUoXCIuL190by1sZW5ndGhcIiksdG9JbnRlZ2VyPXJlcXVpcmUoXCIuL190by1pbnRlZ2VyXCIpLGFycmF5U3BlY2llc0NyZWF0ZT1yZXF1aXJlKFwiLi9fYXJyYXktc3BlY2llcy1jcmVhdGVcIik7JGV4cG9ydCgkZXhwb3J0LlAsXCJBcnJheVwiLHtmbGF0dGVuOmZ1bmN0aW9uIGZsYXR0ZW4oKXt2YXIgZT1hcmd1bWVudHNbMF0sdD10b09iamVjdCh0aGlzKSxyPXRvTGVuZ3RoKHQubGVuZ3RoKSxhPWFycmF5U3BlY2llc0NyZWF0ZSh0LDApO3JldHVybiBmbGF0dGVuSW50b0FycmF5KGEsdCx0LHIsMCx2b2lkIDA9PT1lPzE6dG9JbnRlZ2VyKGUpKSxhfX0pLHJlcXVpcmUoXCIuL19hZGQtdG8tdW5zY29wYWJsZXNcIikoXCJmbGF0dGVuXCIpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NWhjbkpoZVM1bWJHRjBkR1Z1TG1weklsMHNJbTVoYldWeklqcGJJaVJsZUhCdmNuUWlMQ0p5WlhGMWFYSmxJaXdpWm14aGRIUmxia2x1ZEc5QmNuSmhlU0lzSW5SdlQySnFaV04wSWl3aWRHOU1aVzVuZEdnaUxDSjBiMGx1ZEdWblpYSWlMQ0poY25KaGVWTndaV05wWlhORGNtVmhkR1VpTENKUUlpd2labXhoZEhSbGJpSXNJbVJsY0hSb1FYSm5JaXdpWVhKbmRXMWxiblJ6SWl3aVR5SXNJblJvYVhNaUxDSnpiM1Z5WTJWTVpXNGlMQ0pzWlc1bmRHZ2lMQ0pCSWl3aWRXNWtaV1pwYm1Wa0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVVZCTEVsQlFVbEJMRkZCUVZWRExGRkJRVkVzWVVGRGJFSkRMR2xDUVVGdFFrUXNVVUZCVVN4NVFrRkRNMEpGTEZOQlFWZEdMRkZCUVZFc1owSkJRMjVDUnl4VFFVRlhTQ3hSUVVGUkxHZENRVU51UWtrc1ZVRkJXVW9zVVVGQlVTeHBRa0ZEY0VKTExHMUNRVUZ4UWt3c1VVRkJVU3d5UWtGRmFrTkVMRkZCUVZGQkxGRkJRVkZQTEVWQlFVY3NVVUZCVXl4RFFVTXhRa01zVVVGQlV5eFRRVUZUUVN4VlFVTm9RaXhKUVVGSlF5eEZRVUZYUXl4VlFVRlZMRWRCUTNKQ1F5eEZRVUZKVWl4VFFVRlRVeXhOUVVOaVF5eEZRVUZaVkN4VFFVRlRUeXhGUVVGRlJ5eFJRVU4yUWtNc1JVRkJTVlFzYlVKQlFXMUNTeXhGUVVGSExFZEJSVGxDTEU5QlJFRlVMR2xDUVVGcFFtRXNSVUZCUjBvc1JVRkJSMEVzUlVGQlIwVXNSVUZCVnl4UFFVRm5Ra2NzU1VGQllsQXNSVUZCZVVJc1JVRkJTVW9zVlVGQlZVa3NTVUZEZUVWTkxFdEJTVmhrTEZGQlFWRXNkMEpCUVZKQkxFTkJRV2xESWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjemN1WVhKeVlYa3VabXhoZEhSbGJpNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKSwkaW5jbHVkZXM9cmVxdWlyZShcIi4vX2FycmF5LWluY2x1ZGVzXCIpKCEwKTskZXhwb3J0KCRleHBvcnQuUCxcIkFycmF5XCIse2luY2x1ZGVzOmZ1bmN0aW9uIGluY2x1ZGVzKGUpe3JldHVybiAkaW5jbHVkZXModGhpcyxlLGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwKX19KSxyZXF1aXJlKFwiLi9fYWRkLXRvLXVuc2NvcGFibGVzXCIpKFwiaW5jbHVkZXNcIik7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1aGNuSmhlUzVwYm1Oc2RXUmxjeTVxY3lKZExDSnVZVzFsY3lJNld5SWtaWGh3YjNKMElpd2ljbVZ4ZFdseVpTSXNJaVJwYm1Oc2RXUmxjeUlzSWxBaUxDSnBibU5zZFdSbGN5SXNJbVZzSWl3aWRHaHBjeUlzSW1GeVozVnRaVzUwY3lJc0lteGxibWQwYUNJc0luVnVaR1ZtYVc1bFpDSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZGUVN4SlFVRkpRU3hSUVVGVlF5eFJRVUZSTEdGQlEyeENReXhWUVVGWlJDeFJRVUZSTEc5Q1FVRlNRU3hGUVVFMlFpeEhRVVUzUTBRc1VVRkJVVUVzVVVGQlVVY3NSVUZCUnl4UlFVRlRMRU5CUXpGQ1F5eFRRVUZWTEZOQlFWTkJMRk5CUVZORExFZEJRekZDTEU5QlFVOUlMRlZCUVZWSkxFdEJRVTFFTEVWQlFVbEZMRlZCUVZWRExFOUJRVk1zUlVGQlNVUXNWVUZCVlN4UlFVRkxSU3hOUVVseVJWSXNVVUZCVVN4M1FrRkJVa0VzUTBGQmFVTWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek55NWhjbkpoZVM1cGJtTnNkV1JsY3k1cWN5SjkiLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLG1pY3JvdGFzaz1yZXF1aXJlKFwiLi9fbWljcm90YXNrXCIpKCkscHJvY2Vzcz1yZXF1aXJlKFwiLi9fZ2xvYmFsXCIpLnByb2Nlc3MsaXNOb2RlPVwicHJvY2Vzc1wiPT1yZXF1aXJlKFwiLi9fY29mXCIpKHByb2Nlc3MpOyRleHBvcnQoJGV4cG9ydC5HLHthc2FwOmZ1bmN0aW9uIGFzYXAocil7dmFyIGU9aXNOb2RlJiZwcm9jZXNzLmRvbWFpbjttaWNyb3Rhc2soZT9lLmJpbmQocik6cil9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1aGMyRndMbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2liV2xqY205MFlYTnJJaXdpY0hKdlkyVnpjeUlzSW1selRtOWtaU0lzSWtjaUxDSmhjMkZ3SWl3aVptNGlMQ0prYjIxaGFXNGlMQ0ppYVc1a0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHRkJRMnhDUXl4VlFVRlpSQ3hSUVVGUkxHVkJRVkpCTEVkQlExcEZMRkZCUVZWR0xGRkJRVkVzWVVGQllVVXNVVUZETDBKRExFOUJRWFZETEZkQlFUbENTQ3hSUVVGUkxGTkJRVkpCTEVOQlFXdENSU3hUUVVVdlFrZ3NVVUZCVVVFc1VVRkJVVXNzUlVGQlJ5eERRVU5xUWtNc1MwRkJUU3hUUVVGVFFTeExRVUZMUXl4SFFVTnNRaXhKUVVGSlF5eEZRVUZUU2l4UlFVRlZSQ3hSUVVGUlN5eFBRVU12UWs0c1ZVRkJWVTBzUlVGQlUwRXNSVUZCVDBNc1MwRkJTMFlzUjBGQlRVRWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek55NWhjMkZ3TG1wekluMD0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLGNvZj1yZXF1aXJlKFwiLi9fY29mXCIpOyRleHBvcnQoJGV4cG9ydC5TLFwiRXJyb3JcIix7aXNFcnJvcjpmdW5jdGlvbiBpc0Vycm9yKHIpe3JldHVyblwiRXJyb3JcIj09PWNvZihyKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOeTVsY25KdmNpNXBjeTFsY25KdmNpNXFjeUpkTENKdVlXMWxjeUk2V3lJa1pYaHdiM0owSWl3aWNtVnhkV2x5WlNJc0ltTnZaaUlzSWxNaUxDSnBjMFZ5Y205eUlpd2lhWFFpWFN3aWJXRndjR2x1WjNNaU9pSkJRVU5CTEVsQlFVbEJMRkZCUVZWRExGRkJRVkVzWVVGRGJFSkRMRWxCUVUxRUxGRkJRVkVzVlVGRmJFSkVMRkZCUVZGQkxGRkJRVkZITEVWQlFVY3NVVUZCVXl4RFFVTXhRa01zVVVGQlV5eFRRVUZUUVN4UlFVRlJReXhIUVVONFFpeE5RVUZ0UWl4VlFVRmFTQ3hKUVVGSlJ5SXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNM0xtVnljbTl5TG1sekxXVnljbTl5TG1wekluMD0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpOyRleHBvcnQoJGV4cG9ydC5HLHtnbG9iYWw6cmVxdWlyZShcIi4vX2dsb2JhbFwiKX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NW5iRzlpWVd3dWFuTWlYU3dpYm1GdFpYTWlPbHNpSkdWNGNHOXlkQ0lzSW5KbGNYVnBjbVVpTENKSElpd2laMnh2WW1Gc0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHRkJSWFJDUkN4UlFVRlJRU3hSUVVGUlJTeEZRVUZITEVOQlFVVkRMRTlCUVZGR0xGRkJRVkVpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOeTVuYkc5aVlXd3Vhbk1pZlE9PSIsInJlcXVpcmUoXCIuL19zZXQtY29sbGVjdGlvbi1mcm9tXCIpKFwiTWFwXCIpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NXRZWEF1Wm5KdmJTNXFjeUpkTENKdVlXMWxjeUk2V3lKeVpYRjFhWEpsSWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVVFc1VVRkJVU3g1UWtGQlVrRXNRMEZCYTBNaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tnk1dFlYQXVabkp2YlM1cWN5SjkiLCJyZXF1aXJlKFwiLi9fc2V0LWNvbGxlY3Rpb24tb2ZcIikoXCJNYXBcIik7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1dFlYQXViMll1YW5NaVhTd2libUZ0WlhNaU9sc2ljbVZ4ZFdseVpTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwRkJMRkZCUVZFc2RVSkJRVkpCTEVOQlFXZERJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6Y3ViV0Z3TG05bUxtcHpJbjA9IiwidmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKTskZXhwb3J0KCRleHBvcnQuUCskZXhwb3J0LlIsXCJNYXBcIix7dG9KU09OOnJlcXVpcmUoXCIuL19jb2xsZWN0aW9uLXRvLWpzb25cIikoXCJNYXBcIil9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOeTV0WVhBdWRHOHRhbk52Ymk1cWN5SmRMQ0p1WVcxbGN5STZXeUlrWlhod2IzSjBJaXdpY21WeGRXbHlaU0lzSWxBaUxDSlNJaXdpZEc5S1UwOU9JbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR0ZCUlhSQ1JDeFJRVUZSUVN4UlFVRlJSU3hGUVVGSlJpeFJRVUZSUnl4RlFVRkhMRTFCUVU4c1EwRkJSVU1zVDBGQlVVZ3NVVUZCVVN4M1FrRkJVa0VzUTBGQmFVTWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek55NXRZWEF1ZEc4dGFuTnZiaTVxY3lKOSIsInZhciAkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIik7JGV4cG9ydCgkZXhwb3J0LlMsXCJNYXRoXCIse2NsYW1wOmZ1bmN0aW9uIGNsYW1wKHIsdCxhKXtyZXR1cm4gTWF0aC5taW4oYSxNYXRoLm1heCh0LHIpKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOeTV0WVhSb0xtTnNZVzF3TG1weklsMHNJbTVoYldWeklqcGJJaVJsZUhCdmNuUWlMQ0p5WlhGMWFYSmxJaXdpVXlJc0ltTnNZVzF3SWl3aWVDSXNJbXh2ZDJWeUlpd2lkWEJ3WlhJaUxDSk5ZWFJvSWl3aWJXbHVJaXdpYldGNElsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHRkJSWFJDUkN4UlFVRlJRU3hSUVVGUlJTeEZRVUZITEU5QlFWRXNRMEZEZWtKRExFMUJRVThzVTBGQlUwRXNUVUZCVFVNc1JVRkJSME1zUlVGQlQwTXNSMEZET1VJc1QwRkJUME1zUzBGQlMwTXNTVUZCU1VZc1JVRkJUME1zUzBGQlMwVXNTVUZCU1Vvc1JVRkJUMFFpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOeTV0WVhSb0xtTnNZVzF3TG1wekluMD0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpOyRleHBvcnQoJGV4cG9ydC5TLFwiTWF0aFwiLHtERUdfUEVSX1JBRDpNYXRoLlBJLzE4MH0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NXRZWFJvTG1SbFp5MXdaWEl0Y21Ga0xtcHpJbDBzSW01aGJXVnpJanBiSWlSbGVIQnZjblFpTENKeVpYRjFhWEpsSWl3aVV5SXNJa1JGUjE5UVJWSmZVa0ZFSWl3aVRXRjBhQ0lzSWxCSklsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHRkJSWFJDUkN4UlFVRlJRU3hSUVVGUlJTeEZRVUZITEU5QlFWRXNRMEZCUlVNc1dVRkJZVU1zUzBGQlMwTXNSMEZCU3lJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0zTG0xaGRHZ3VaR1ZuTFhCbGNpMXlZV1F1YW5NaWZRPT0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLFJBRF9QRVJfREVHPTE4MC9NYXRoLlBJOyRleHBvcnQoJGV4cG9ydC5TLFwiTWF0aFwiLHtkZWdyZWVzOmZ1bmN0aW9uIGRlZ3JlZXMoZSl7cmV0dXJuIGUqUkFEX1BFUl9ERUd9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1dFlYUm9MbVJsWjNKbFpYTXVhbk1pWFN3aWJtRnRaWE1pT2xzaUpHVjRjRzl5ZENJc0luSmxjWFZwY21VaUxDSlNRVVJmVUVWU1gwUkZSeUlzSWsxaGRHZ2lMQ0pRU1NJc0lsTWlMQ0prWldkeVpXVnpJaXdpY21Ga2FXRnVjeUpkTENKdFlYQndhVzVuY3lJNklrRkJRMEVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVOc1FrTXNXVUZCWXl4SlFVRk5ReXhMUVVGTFF5eEhRVVUzUWtvc1VVRkJVVUVzVVVGQlVVc3NSVUZCUnl4UFFVRlJMRU5CUTNwQ1F5eFJRVUZUTEZOQlFWTkJMRkZCUVZGRExFZEJRM2hDTEU5QlFVOUJMRVZCUVZWTUlpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pjdWJXRjBhQzVrWldkeVpXVnpMbXB6SW4wPSIsInZhciAkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIiksc2NhbGU9cmVxdWlyZShcIi4vX21hdGgtc2NhbGVcIiksZnJvdW5kPXJlcXVpcmUoXCIuL19tYXRoLWZyb3VuZFwiKTskZXhwb3J0KCRleHBvcnQuUyxcIk1hdGhcIix7ZnNjYWxlOmZ1bmN0aW9uIGZzY2FsZShlLHIsYSx0LG8pe3JldHVybiBmcm91bmQoc2NhbGUoZSxyLGEsdCxvKSl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1dFlYUm9MbVp6WTJGc1pTNXFjeUpkTENKdVlXMWxjeUk2V3lJa1pYaHdiM0owSWl3aWNtVnhkV2x5WlNJc0luTmpZV3hsSWl3aVpuSnZkVzVrSWl3aVV5SXNJbVp6WTJGc1pTSXNJbmdpTENKcGJreHZkeUlzSW1sdVNHbG5hQ0lzSW05MWRFeHZkeUlzSW05MWRFaHBaMmdpWFN3aWJXRndjR2x1WjNNaU9pSkJRVU5CTEVsQlFVbEJMRkZCUVZWRExGRkJRVkVzWVVGRGJFSkRMRTFCUVZGRUxGRkJRVkVzYVVKQlEyaENSU3hQUVVGVFJpeFJRVUZSTEd0Q1FVVnlRa1FzVVVGQlVVRXNVVUZCVVVrc1JVRkJSeXhQUVVGUkxFTkJRM3BDUXl4UFFVRlJMRk5CUVZOQkxFOUJRVTlETEVWQlFVZERMRVZCUVU5RExFVkJRVkZETEVWQlFWRkRMRWRCUTJoRUxFOUJRVTlRTEU5QlFVOUVMRTFCUVUxSkxFVkJRVWRETEVWQlFVOURMRVZCUVZGRExFVkJRVkZESWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjemN1YldGMGFDNW1jMk5oYkdVdWFuTWlmUT09IiwidmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKTskZXhwb3J0KCRleHBvcnQuUyxcIk1hdGhcIix7aWFkZGg6ZnVuY3Rpb24gaWFkZGgocixlLHQsYSl7dmFyIG89cj4+PjAsZD10Pj4+MDtyZXR1cm4oZT4+PjApKyhhPj4+MCkrKChvJmR8KG98ZCkmfihvK2Q+Pj4wKSk+Pj4zMSl8MH19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOeTV0WVhSb0xtbGhaR1JvTG1weklsMHNJbTVoYldWeklqcGJJaVJsZUhCdmNuUWlMQ0p5WlhGMWFYSmxJaXdpVXlJc0ltbGhaR1JvSWl3aWVEQWlMQ0o0TVNJc0lua3dJaXdpZVRFaUxDSWtlREFpTENJa2VUQWlYU3dpYldGd2NHbHVaM01pT2lKQlFVTkJMRWxCUVVsQkxGRkJRVlZETEZGQlFWRXNZVUZGZEVKRUxGRkJRVkZCTEZGQlFWRkZMRVZCUVVjc1QwRkJVU3hEUVVONlFrTXNUVUZCVHl4VFFVRlRRU3hOUVVGTlF5eEZRVUZKUXl4RlFVRkpReXhGUVVGSlF5eEhRVU5vUXl4SlFVRkpReXhGUVVGTlNpeEpRVUZQTEVWQlJXSkxMRVZCUVUxSUxFbEJRVThzUlVGRGFrSXNUMEZHVlVRc1NVRkJUeXhKUVVWSVJTeEpRVUZQTEV0QlFVOURMRVZCUVUxRExFZEJRVTlFTEVWQlFVMURMRXRCUVZORUxFVkJRVTFETEVsQlFWRXNUVUZCVVN4SlFVRk5JaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6Y3ViV0YwYUM1cFlXUmthQzVxY3lKOSIsInZhciAkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIik7JGV4cG9ydCgkZXhwb3J0LlMsXCJNYXRoXCIse2ltdWxoOmZ1bmN0aW9uIGltdWxoKHIsZSl7dmFyIHQ9K3Isbz0rZSx1PTY1NTM1JnQsaT02NTUzNSZvLHA9dD4+MTYseD1vPj4xNixhPShwKmk+Pj4wKSsodSppPj4+MTYpO3JldHVybiBwKngrKGE+PjE2KSsoKHUqeD4+PjApKyg2NTUzNSZhKT4+MTYpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NXRZWFJvTG1sdGRXeG9MbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2lVeUlzSW1sdGRXeG9JaXdpZFNJc0luWWlMQ0lrZFNJc0lpUjJJaXdpZFRBaUxDSjJNQ0lzSW5VeElpd2lkakVpTENKMElsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHRkJSWFJDUkN4UlFVRlJRU3hSUVVGUlJTeEZRVUZITEU5QlFWRXNRMEZEZWtKRExFMUJRVThzVTBGQlUwRXNUVUZCVFVNc1JVRkJSME1zUjBGRGRrSXNTVUZEU1VNc1IwRkJUVVlzUlVGRFRrY3NSMEZCVFVZc1JVRkRUa2NzUlVGSVV5eE5RVWRLUml4RlFVTk1SeXhGUVVwVExFMUJTVXBHTEVWQlEweEhMRVZCUVV0S0xFZEJRVTBzUjBGRFdFc3NSVUZCUzBvc1IwRkJUU3hIUVVOWVN5eEhRVUZMUml4RlFVRkxSQ3hKUVVGUExFbEJRVTFFTEVWQlFVdERMRWxCUVU4c1NVRkRka01zVDBGQlQwTXNSVUZCUzBNc1IwRkJUVU1zUjBGQlN5eE5RVUZSU2l4RlFVRkxSeXhKUVVGUExFbEJVamxDTEUxQlVXOURReXhKUVVGbElpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pjdWJXRjBhQzVwYlhWc2FDNXFjeUo5IiwidmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKTskZXhwb3J0KCRleHBvcnQuUyxcIk1hdGhcIix7aXN1Ymg6ZnVuY3Rpb24gaXN1YmgocixlLHQsbyl7dmFyIHU9cj4+PjAsaT10Pj4+MDtyZXR1cm4oZT4+PjApLShvPj4+MCktKCh+dSZpfH4odV5pKSZ1LWk+Pj4wKT4+PjMxKXwwfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NXRZWFJvTG1semRXSm9MbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2lVeUlzSW1semRXSm9JaXdpZURBaUxDSjRNU0lzSW5rd0lpd2llVEVpTENJa2VEQWlMQ0lrZVRBaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVOQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc1lVRkZkRUpFTEZGQlFWRkJMRkZCUVZGRkxFVkJRVWNzVDBGQlVTeERRVU42UWtNc1RVRkJUeXhUUVVGVFFTeE5RVUZOUXl4RlFVRkpReXhGUVVGSlF5eEZRVUZKUXl4SFFVTm9ReXhKUVVGSlF5eEZRVUZOU2l4SlFVRlBMRVZCUldKTExFVkJRVTFJTEVsQlFVOHNSVUZEYWtJc1QwRkdWVVFzU1VGQlR5eEpRVVZJUlN4SlFVRlBMRTFCUVZGRExFVkJRVTFETEVsQlFWRkVMRVZCUVUxRExFZEJRVTlFTEVWQlFVMURMRWxCUVZFc1MwRkJUeXhKUVVGTklpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pjdWJXRjBhQzVwYzNWaWFDNXFjeUo5IiwidmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKTskZXhwb3J0KCRleHBvcnQuUyxcIk1hdGhcIix7UkFEX1BFUl9ERUc6MTgwL01hdGguUEl9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOeTV0WVhSb0xuSmhaQzF3WlhJdFpHVm5MbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2lVeUlzSWxKQlJGOVFSVkpmUkVWSElpd2lUV0YwYUNJc0lsQkpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR0ZCUlhSQ1JDeFJRVUZSUVN4UlFVRlJSU3hGUVVGSExFOUJRVkVzUTBGQlJVTXNXVUZCWVN4SlFVRk5ReXhMUVVGTFF5SXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNM0xtMWhkR2d1Y21Ga0xYQmxjaTFrWldjdWFuTWlmUT09IiwidmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKSxERUdfUEVSX1JBRD1NYXRoLlBJLzE4MDskZXhwb3J0KCRleHBvcnQuUyxcIk1hdGhcIix7cmFkaWFuczpmdW5jdGlvbiByYWRpYW5zKHIpe3JldHVybiByKkRFR19QRVJfUkFEfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NXRZWFJvTG5KaFpHbGhibk11YW5NaVhTd2libUZ0WlhNaU9sc2lKR1Y0Y0c5eWRDSXNJbkpsY1hWcGNtVWlMQ0pFUlVkZlVFVlNYMUpCUkNJc0lrMWhkR2dpTENKUVNTSXNJbE1pTENKeVlXUnBZVzV6SWl3aVpHVm5jbVZsY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUTBFc1NVRkJTVUVzVVVGQlZVTXNVVUZCVVN4aFFVTnNRa01zV1VGQlkwTXNTMEZCUzBNc1IwRkJTeXhKUVVVMVFrb3NVVUZCVVVFc1VVRkJVVXNzUlVGQlJ5eFBRVUZSTEVOQlEzcENReXhSUVVGVExGTkJRVk5CTEZGQlFWRkRMRWRCUTNoQ0xFOUJRVTlCTEVWQlFWVk1JaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6Y3ViV0YwYUM1eVlXUnBZVzV6TG1wekluMD0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpOyRleHBvcnQoJGV4cG9ydC5TLFwiTWF0aFwiLHtzY2FsZTpyZXF1aXJlKFwiLi9fbWF0aC1zY2FsZVwiKX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NXRZWFJvTG5OallXeGxMbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2lVeUlzSW5OallXeGxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR0ZCUlhSQ1JDeFJRVUZSUVN4UlFVRlJSU3hGUVVGSExFOUJRVkVzUTBGQlJVTXNUVUZCVDBZc1VVRkJVU0lzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTNMbTFoZEdndWMyTmhiR1V1YW5NaWZRPT0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpOyRleHBvcnQoJGV4cG9ydC5TLFwiTWF0aFwiLHtzaWduYml0OmZ1bmN0aW9uIHNpZ25iaXQocil7cmV0dXJuKHI9K3IpIT1yP3I6MD09cj8xL3I9PTEvMDpyPjB9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1dFlYUm9Mbk5wWjI1aWFYUXVhbk1pWFN3aWJtRnRaWE1pT2xzaUpHVjRjRzl5ZENJc0luSmxjWFZwY21VaUxDSlRJaXdpYzJsbmJtSnBkQ0lzSW5naUxDSkpibVpwYm1sMGVTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwRXNTVUZCU1VFc1VVRkJWVU1zVVVGQlVTeGhRVVYwUWtRc1VVRkJVVUVzVVVGQlVVVXNSVUZCUnl4UFFVRlJMRU5CUVVWRExGRkJRVk1zVTBGQlUwRXNVVUZCVVVNc1IwRkZja1FzVDBGQlVVRXNSMEZCUzBFc1NVRkJUVUVzUlVGQlNVRXNSVUZCVXl4SFFVRk1RU3hGUVVGVExFVkJRVWxCTEVkQlFVdERMRVZCUVVGQkxFVkJRVmRFTEVWQlFVa2lMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek55NXRZWFJvTG5OcFoyNWlhWFF1YW5NaWZRPT0iLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpOyRleHBvcnQoJGV4cG9ydC5TLFwiTWF0aFwiLHt1bXVsaDpmdW5jdGlvbiB1bXVsaChyLGUpe3ZhciB0PStyLHU9K2Usbz02NTUzNSZ0LHA9NjU1MzUmdSx4PXQ+Pj4xNixhPXU+Pj4xNixoPSh4KnA+Pj4wKSsobypwPj4+MTYpO3JldHVybiB4KmErKGg+Pj4xNikrKChvKmE+Pj4wKSsoNjU1MzUmaCk+Pj4xNil9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1dFlYUm9MblZ0ZFd4b0xtcHpJbDBzSW01aGJXVnpJanBiSWlSbGVIQnZjblFpTENKeVpYRjFhWEpsSWl3aVV5SXNJblZ0ZFd4b0lpd2lkU0lzSW5ZaUxDSWtkU0lzSWlSMklpd2lkVEFpTENKMk1DSXNJblV4SWl3aWRqRWlMQ0owSWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hSUVVGVlF5eFJRVUZSTEdGQlJYUkNSQ3hSUVVGUlFTeFJRVUZSUlN4RlFVRkhMRTlCUVZFc1EwRkRla0pETEUxQlFVOHNVMEZCVTBFc1RVRkJUVU1zUlVGQlIwTXNSMEZEZGtJc1NVRkRTVU1zUjBGQlRVWXNSVUZEVGtjc1IwRkJUVVlzUlVGRFRrY3NSVUZJVXl4TlFVZEtSaXhGUVVOTVJ5eEZRVXBUTEUxQlNVcEdMRVZCUTB4SExFVkJRVXRLTEVsQlFVOHNSMEZEV2tzc1JVRkJTMG9zU1VGQlR5eEhRVU5hU3l4SFFVRkxSaXhGUVVGTFJDeEpRVUZQTEVsQlFVMUVMRVZCUVV0RExFbEJRVThzU1VGRGRrTXNUMEZCVDBNc1JVRkJTME1zUjBGQlRVTXNTVUZCVFN4TlFVRlJTaXhGUVVGTFJ5eEpRVUZQTEVsQlVpOUNMRTFCVVhGRFF5eExRVUZuUWlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0zTG0xaGRHZ3VkVzExYkdndWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKSx0b09iamVjdD1yZXF1aXJlKFwiLi9fdG8tb2JqZWN0XCIpLGFGdW5jdGlvbj1yZXF1aXJlKFwiLi9fYS1mdW5jdGlvblwiKSwkZGVmaW5lUHJvcGVydHk9cmVxdWlyZShcIi4vX29iamVjdC1kcFwiKTtyZXF1aXJlKFwiLi9fZGVzY3JpcHRvcnNcIikmJiRleHBvcnQoJGV4cG9ydC5QK3JlcXVpcmUoXCIuL19vYmplY3QtZm9yY2VkLXBhbVwiKSxcIk9iamVjdFwiLHtfX2RlZmluZUdldHRlcl9fOmZ1bmN0aW9uIF9fZGVmaW5lR2V0dGVyX18oZSxyKXskZGVmaW5lUHJvcGVydHkuZih0b09iamVjdCh0aGlzKSxlLHtnZXQ6YUZ1bmN0aW9uKHIpLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1dlltcGxZM1F1WkdWbWFXNWxMV2RsZEhSbGNpNXFjeUpkTENKdVlXMWxjeUk2V3lJa1pYaHdiM0owSWl3aWNtVnhkV2x5WlNJc0luUnZUMkpxWldOMElpd2lZVVoxYm1OMGFXOXVJaXdpSkdSbFptbHVaVkJ5YjNCbGNuUjVJaXdpVUNJc0lsOWZaR1ZtYVc1bFIyVjBkR1Z5WDE4aUxDSm5aWFIwWlhJaUxDSm1JaXdpZEdocGN5SXNJbWRsZENJc0ltVnVkVzFsY21GaWJHVWlMQ0pqYjI1bWFXZDFjbUZpYkdVaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJRMEVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVOc1FrTXNVMEZCVjBRc1VVRkJVU3huUWtGRGJrSkZMRlZCUVZsR0xGRkJRVkVzYVVKQlEzQkNSeXhuUWtGQmEwSklMRkZCUVZFc1owSkJSemxDUVN4UlFVRlJMRzFDUVVGeFFrUXNVVUZCVVVFc1VVRkJVVXNzUlVGQlNVb3NVVUZCVVN4M1FrRkJlVUlzVTBGQlZTeERRVU14Umtzc2FVSkJRV3RDTEZOQlFWTkJMR2xDUVVGcFFrUXNSVUZCUjBVc1IwRkROME5JTEdkQ1FVRm5Ra2tzUlVGQlJVNHNVMEZCVTA4c1RVRkJUMG9zUlVGQlJ5eERRVUZGU3l4SlFVRkxVQ3hWUVVGVlNTeEhRVUZUU1N4WlFVRlpMRVZCUVUxRExHTkJRV01pTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOeTV2WW1wbFkzUXVaR1ZtYVc1bExXZGxkSFJsY2k1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLHRvT2JqZWN0PXJlcXVpcmUoXCIuL190by1vYmplY3RcIiksYUZ1bmN0aW9uPXJlcXVpcmUoXCIuL19hLWZ1bmN0aW9uXCIpLCRkZWZpbmVQcm9wZXJ0eT1yZXF1aXJlKFwiLi9fb2JqZWN0LWRwXCIpO3JlcXVpcmUoXCIuL19kZXNjcmlwdG9yc1wiKSYmJGV4cG9ydCgkZXhwb3J0LlArcmVxdWlyZShcIi4vX29iamVjdC1mb3JjZWQtcGFtXCIpLFwiT2JqZWN0XCIse19fZGVmaW5lU2V0dGVyX186ZnVuY3Rpb24gX19kZWZpbmVTZXR0ZXJfXyhlLHIpeyRkZWZpbmVQcm9wZXJ0eS5mKHRvT2JqZWN0KHRoaXMpLGUse3NldDphRnVuY3Rpb24ociksZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOeTV2WW1wbFkzUXVaR1ZtYVc1bExYTmxkSFJsY2k1cWN5SmRMQ0p1WVcxbGN5STZXeUlrWlhod2IzSjBJaXdpY21WeGRXbHlaU0lzSW5SdlQySnFaV04wSWl3aVlVWjFibU4wYVc5dUlpd2lKR1JsWm1sdVpWQnliM0JsY25SNUlpd2lVQ0lzSWw5ZlpHVm1hVzVsVTJWMGRHVnlYMThpTENKelpYUjBaWElpTENKbUlpd2lkR2hwY3lJc0luTmxkQ0lzSW1WdWRXMWxjbUZpYkdVaUxDSmpiMjVtYVdkMWNtRmliR1VpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlEwRXNTVUZCU1VFc1VVRkJWVU1zVVVGQlVTeGhRVU5zUWtNc1UwRkJWMFFzVVVGQlVTeG5Ra0ZEYmtKRkxGVkJRVmxHTEZGQlFWRXNhVUpCUTNCQ1J5eG5Ra0ZCYTBKSUxGRkJRVkVzWjBKQlJ6bENRU3hSUVVGUkxHMUNRVUZ4UWtRc1VVRkJVVUVzVVVGQlVVc3NSVUZCU1Vvc1VVRkJVU3gzUWtGQmVVSXNVMEZCVlN4RFFVTXhSa3NzYVVKQlFXdENMRk5CUVZOQkxHbENRVUZwUWtRc1JVRkJSMFVzUjBGRE4wTklMR2RDUVVGblFra3NSVUZCUlU0c1UwRkJVMDhzVFVGQlQwb3NSVUZCUnl4RFFVRkZTeXhKUVVGTFVDeFZRVUZWU1N4SFFVRlRTU3haUVVGWkxFVkJRVTFETEdOQlFXTWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek55NXZZbXBsWTNRdVpHVm1hVzVsTFhObGRIUmxjaTVxY3lKOSIsInZhciAkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIiksJGVudHJpZXM9cmVxdWlyZShcIi4vX29iamVjdC10by1hcnJheVwiKSghMCk7JGV4cG9ydCgkZXhwb3J0LlMsXCJPYmplY3RcIix7ZW50cmllczpmdW5jdGlvbiBlbnRyaWVzKGUpe3JldHVybiAkZW50cmllcyhlKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOeTV2WW1wbFkzUXVaVzUwY21sbGN5NXFjeUpkTENKdVlXMWxjeUk2V3lJa1pYaHdiM0owSWl3aWNtVnhkV2x5WlNJc0lpUmxiblJ5YVdWeklpd2lVeUlzSW1WdWRISnBaWE1pTENKcGRDSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwRXNTVUZCU1VFc1VVRkJWVU1zVVVGQlVTeGhRVU5zUWtNc1UwRkJWMFFzVVVGQlVTeHhRa0ZCVWtFc1JVRkJPRUlzUjBGRk4wTkVMRkZCUVZGQkxGRkJRVkZITEVWQlFVY3NVMEZCVlN4RFFVTXpRa01zVVVGQlV5eFRRVUZUUVN4UlFVRlJReXhIUVVONFFpeFBRVUZQU0N4VFFVRlRSeUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTNMbTlpYW1WamRDNWxiblJ5YVdWekxtcHpJbjA9IiwidmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKSxvd25LZXlzPXJlcXVpcmUoXCIuL19vd24ta2V5c1wiKSx0b0lPYmplY3Q9cmVxdWlyZShcIi4vX3RvLWlvYmplY3RcIiksZ09QRD1yZXF1aXJlKFwiLi9fb2JqZWN0LWdvcGRcIiksY3JlYXRlUHJvcGVydHk9cmVxdWlyZShcIi4vX2NyZWF0ZS1wcm9wZXJ0eVwiKTskZXhwb3J0KCRleHBvcnQuUyxcIk9iamVjdFwiLHtnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOmZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoZSl7Zm9yKHZhciByLHQsbz10b0lPYmplY3QoZSkscD1nT1BELmYsYz1vd25LZXlzKG8pLGk9e30sbj0wO2MubGVuZ3RoPm47KXZvaWQgMCE9PSh0PXAobyxyPWNbbisrXSkpJiZjcmVhdGVQcm9wZXJ0eShpLHIsdCk7cmV0dXJuIGl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1dlltcGxZM1F1WjJWMExXOTNiaTF3Y205d1pYSjBlUzFrWlhOamNtbHdkRzl5Y3k1cWN5SmRMQ0p1WVcxbGN5STZXeUlrWlhod2IzSjBJaXdpY21WeGRXbHlaU0lzSW05M2JrdGxlWE1pTENKMGIwbFBZbXBsWTNRaUxDSm5UMUJFSWl3aVkzSmxZWFJsVUhKdmNHVnlkSGtpTENKVElpd2laMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eWN5SXNJbTlpYW1WamRDSXNJbXRsZVNJc0ltUmxjMk1pTENKUElpd2laMlYwUkdWell5SXNJbVlpTENKclpYbHpJaXdpY21WemRXeDBJaXdpYVNJc0lteGxibWQwYUNJc0luVnVaR1ZtYVc1bFpDSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwRXNTVUZCU1VFc1VVRkJWVU1zVVVGQlVTeGhRVU5zUWtNc1VVRkJWVVFzVVVGQlVTeGxRVU5zUWtVc1ZVRkJXVVlzVVVGQlVTeHBRa0ZEY0VKSExFdEJRVTlJTEZGQlFWRXNhMEpCUTJaSkxHVkJRV2xDU2l4UlFVRlJMSE5DUVVVM1FrUXNVVUZCVVVFc1VVRkJVVTBzUlVGQlJ5eFRRVUZWTEVOQlF6TkNReXd3UWtGQk1rSXNVMEZCVTBFc01FSkJRVEJDUXl4SFFVODFSQ3hKUVU1QkxFbEJTMGxETEVWQlFVdERMRVZCVEV4RExFVkJRVWxTTEZWQlFWVkxMRWRCUTJSSkxFVkJRVlZTTEV0QlFVdFRMRVZCUTJaRExFVkJRVTlhTEZGQlFWRlRMRWRCUTJaSkxFVkJRVk1zUjBGRFZFTXNSVUZCU1N4RlFVVkVSaXhGUVVGTFJ5eFBRVUZUUkN4UlFVVk9SU3hMUVVSaVVpeEZRVUZQUlN4RlFVRlJSQ3hGUVVGSFJpeEZRVUZOU3l4RlFVRkxSU3hSUVVOTVdDeGxRVUZsVlN4RlFVRlJUaXhGUVVGTFF5eEhRVVYwUkN4UFFVRlBTeUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTNMbTlpYW1WamRDNW5aWFF0YjNkdUxYQnliM0JsY25SNUxXUmxjMk55YVhCMGIzSnpMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciAkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIiksdG9PYmplY3Q9cmVxdWlyZShcIi4vX3RvLW9iamVjdFwiKSx0b1ByaW1pdGl2ZT1yZXF1aXJlKFwiLi9fdG8tcHJpbWl0aXZlXCIpLGdldFByb3RvdHlwZU9mPXJlcXVpcmUoXCIuL19vYmplY3QtZ3BvXCIpLGdldE93blByb3BlcnR5RGVzY3JpcHRvcj1yZXF1aXJlKFwiLi9fb2JqZWN0LWdvcGRcIikuZjtyZXF1aXJlKFwiLi9fZGVzY3JpcHRvcnNcIikmJiRleHBvcnQoJGV4cG9ydC5QK3JlcXVpcmUoXCIuL19vYmplY3QtZm9yY2VkLXBhbVwiKSxcIk9iamVjdFwiLHtfX2xvb2t1cEdldHRlcl9fOmZ1bmN0aW9uIF9fbG9va3VwR2V0dGVyX18oZSl7dmFyIHQscj10b09iamVjdCh0aGlzKSxvPXRvUHJpbWl0aXZlKGUsITApO2Rve2lmKHQ9Z2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHIsbykpcmV0dXJuIHQuZ2V0fXdoaWxlKHI9Z2V0UHJvdG90eXBlT2YocikpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NXZZbXBsWTNRdWJHOXZhM1Z3TFdkbGRIUmxjaTVxY3lKZExDSnVZVzFsY3lJNld5SWtaWGh3YjNKMElpd2ljbVZ4ZFdseVpTSXNJblJ2VDJKcVpXTjBJaXdpZEc5UWNtbHRhWFJwZG1VaUxDSm5aWFJRY205MGIzUjVjR1ZQWmlJc0ltZGxkRTkzYmxCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2lJc0ltWWlMQ0pRSWl3aVgxOXNiMjlyZFhCSFpYUjBaWEpmWHlJc0lrUWlMQ0pQSWl3aWRHaHBjeUlzSWtzaUxDSm5aWFFpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlEwRXNTVUZCU1VFc1VVRkJWVU1zVVVGQlVTeGhRVU5zUWtNc1UwRkJWMFFzVVVGQlVTeG5Ra0ZEYmtKRkxGbEJRV05HTEZGQlFWRXNiVUpCUTNSQ1J5eGxRVUZwUWtnc1VVRkJVU3hwUWtGRGVrSkpMSGxDUVVFeVFrb3NVVUZCVVN4clFrRkJhMEpMTEVWQlIzcEVUQ3hSUVVGUkxHMUNRVUZ4UWtRc1VVRkJVVUVzVVVGQlVVOHNSVUZCU1U0c1VVRkJVU3gzUWtGQmVVSXNVMEZCVlN4RFFVTXhSazhzYVVKQlFXdENMRk5CUVZOQkxHbENRVUZwUWtRc1IwRkRNVU1zU1VGRlNVVXNSVUZHUVVNc1JVRkJTVklzVTBGQlUxTXNUVUZEWWtNc1JVRkJTVlFzV1VGQldVa3NSMEZCUnl4SFFVVjJRaXhIUVVORkxFZEJRVWxGTEVWQlFVbEtMSGxDUVVGNVFrc3NSVUZCUjBVc1IwRkJTU3hQUVVGUFNDeEZRVUZGU1N4VlFVTXhRMGdzUlVGQlNVNHNaVUZCWlUwaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tnk1dlltcGxZM1F1Ykc5dmEzVndMV2RsZEhSbGNpNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKSx0b09iamVjdD1yZXF1aXJlKFwiLi9fdG8tb2JqZWN0XCIpLHRvUHJpbWl0aXZlPXJlcXVpcmUoXCIuL190by1wcmltaXRpdmVcIiksZ2V0UHJvdG90eXBlT2Y9cmVxdWlyZShcIi4vX29iamVjdC1ncG9cIiksZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yPXJlcXVpcmUoXCIuL19vYmplY3QtZ29wZFwiKS5mO3JlcXVpcmUoXCIuL19kZXNjcmlwdG9yc1wiKSYmJGV4cG9ydCgkZXhwb3J0LlArcmVxdWlyZShcIi4vX29iamVjdC1mb3JjZWQtcGFtXCIpLFwiT2JqZWN0XCIse19fbG9va3VwU2V0dGVyX186ZnVuY3Rpb24gX19sb29rdXBTZXR0ZXJfXyhlKXt2YXIgdCxyPXRvT2JqZWN0KHRoaXMpLG89dG9QcmltaXRpdmUoZSwhMCk7ZG97aWYodD1nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocixvKSlyZXR1cm4gdC5zZXR9d2hpbGUocj1nZXRQcm90b3R5cGVPZihyKSl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1dlltcGxZM1F1Ykc5dmEzVndMWE5sZEhSbGNpNXFjeUpkTENKdVlXMWxjeUk2V3lJa1pYaHdiM0owSWl3aWNtVnhkV2x5WlNJc0luUnZUMkpxWldOMElpd2lkRzlRY21sdGFYUnBkbVVpTENKblpYUlFjbTkwYjNSNWNHVlBaaUlzSW1kbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjaUlzSW1ZaUxDSlFJaXdpWDE5c2IyOXJkWEJUWlhSMFpYSmZYeUlzSWtRaUxDSlBJaXdpZEdocGN5SXNJa3NpTENKelpYUWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUTBFc1NVRkJTVUVzVVVGQlZVTXNVVUZCVVN4aFFVTnNRa01zVTBGQlYwUXNVVUZCVVN4blFrRkRia0pGTEZsQlFXTkdMRkZCUVZFc2JVSkJRM1JDUnl4bFFVRnBRa2dzVVVGQlVTeHBRa0ZEZWtKSkxIbENRVUV5UWtvc1VVRkJVU3hyUWtGQmEwSkxMRVZCUjNwRVRDeFJRVUZSTEcxQ1FVRnhRa1FzVVVGQlVVRXNVVUZCVVU4c1JVRkJTVTRzVVVGQlVTeDNRa0ZCZVVJc1UwRkJWU3hEUVVNeFJrOHNhVUpCUVd0Q0xGTkJRVk5CTEdsQ1FVRnBRa1FzUjBGRE1VTXNTVUZGU1VVc1JVRkdRVU1zUlVGQlNWSXNVMEZCVTFNc1RVRkRZa01zUlVGQlNWUXNXVUZCV1Vrc1IwRkJSeXhIUVVWMlFpeEhRVU5GTEVkQlFVbEZMRVZCUVVsS0xIbENRVUY1UWtzc1JVRkJSMFVzUjBGQlNTeFBRVUZQU0N4RlFVRkZTU3hWUVVNeFEwZ3NSVUZCU1U0c1pVRkJaVTBpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOeTV2WW1wbFkzUXViRzl2YTNWd0xYTmxkSFJsY2k1cWN5SjkiLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLCR2YWx1ZXM9cmVxdWlyZShcIi4vX29iamVjdC10by1hcnJheVwiKSghMSk7JGV4cG9ydCgkZXhwb3J0LlMsXCJPYmplY3RcIix7dmFsdWVzOmZ1bmN0aW9uIHZhbHVlcyhlKXtyZXR1cm4gJHZhbHVlcyhlKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOeTV2WW1wbFkzUXVkbUZzZFdWekxtcHpJbDBzSW01aGJXVnpJanBiSWlSbGVIQnZjblFpTENKeVpYRjFhWEpsSWl3aUpIWmhiSFZsY3lJc0lsTWlMQ0oyWVd4MVpYTWlMQ0pwZENKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUTBFc1NVRkJTVUVzVVVGQlZVTXNVVUZCVVN4aFFVTnNRa01zVVVGQlZVUXNVVUZCVVN4eFFrRkJVa0VzUlVGQk9FSXNSMEZGTlVORUxGRkJRVkZCTEZGQlFWRkhMRVZCUVVjc1UwRkJWU3hEUVVNelFrTXNUMEZCVVN4VFFVRlRRU3hQUVVGUFF5eEhRVU4wUWl4UFFVRlBTQ3hSUVVGUlJ5SXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNM0xtOWlhbVZqZEM1MllXeDFaWE11YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLGdsb2JhbD1yZXF1aXJlKFwiLi9fZ2xvYmFsXCIpLGNvcmU9cmVxdWlyZShcIi4vX2NvcmVcIiksbWljcm90YXNrPXJlcXVpcmUoXCIuL19taWNyb3Rhc2tcIikoKSxPQlNFUlZBQkxFPXJlcXVpcmUoXCIuL193a3NcIikoXCJvYnNlcnZhYmxlXCIpLGFGdW5jdGlvbj1yZXF1aXJlKFwiLi9fYS1mdW5jdGlvblwiKSxhbk9iamVjdD1yZXF1aXJlKFwiLi9fYW4tb2JqZWN0XCIpLGFuSW5zdGFuY2U9cmVxdWlyZShcIi4vX2FuLWluc3RhbmNlXCIpLHJlZGVmaW5lQWxsPXJlcXVpcmUoXCIuL19yZWRlZmluZS1hbGxcIiksaGlkZT1yZXF1aXJlKFwiLi9faGlkZVwiKSxmb3JPZj1yZXF1aXJlKFwiLi9fZm9yLW9mXCIpLFJFVFVSTj1mb3JPZi5SRVRVUk4sZ2V0TWV0aG9kPWZ1bmN0aW9uKHIpe3JldHVybiBudWxsPT1yP3ZvaWQgMDphRnVuY3Rpb24ocil9LGNsZWFudXBTdWJzY3JpcHRpb249ZnVuY3Rpb24ocil7dmFyIGU9ci5fYztlJiYoci5fYz12b2lkIDAsZSgpKX0sc3Vic2NyaXB0aW9uQ2xvc2VkPWZ1bmN0aW9uKHIpe3JldHVybiB2b2lkIDA9PT1yLl9vfSxjbG9zZVN1YnNjcmlwdGlvbj1mdW5jdGlvbihyKXtzdWJzY3JpcHRpb25DbG9zZWQocil8fChyLl9vPXZvaWQgMCxjbGVhbnVwU3Vic2NyaXB0aW9uKHIpKX0sU3Vic2NyaXB0aW9uPWZ1bmN0aW9uKHIsZSl7YW5PYmplY3QociksdGhpcy5fYz12b2lkIDAsdGhpcy5fbz1yLHI9bmV3IFN1YnNjcmlwdGlvbk9ic2VydmVyKHRoaXMpO3RyeXt2YXIgdD1lKHIpLG49dDtudWxsIT10JiYoXCJmdW5jdGlvblwiPT10eXBlb2YgdC51bnN1YnNjcmliZT90PWZ1bmN0aW9uKCl7bi51bnN1YnNjcmliZSgpfTphRnVuY3Rpb24odCksdGhpcy5fYz10KX1jYXRjaChlKXtyZXR1cm4gdm9pZCByLmVycm9yKGUpfXN1YnNjcmlwdGlvbkNsb3NlZCh0aGlzKSYmY2xlYW51cFN1YnNjcmlwdGlvbih0aGlzKX07U3Vic2NyaXB0aW9uLnByb3RvdHlwZT1yZWRlZmluZUFsbCh7fSx7dW5zdWJzY3JpYmU6ZnVuY3Rpb24gdW5zdWJzY3JpYmUoKXtjbG9zZVN1YnNjcmlwdGlvbih0aGlzKX19KTt2YXIgU3Vic2NyaXB0aW9uT2JzZXJ2ZXI9ZnVuY3Rpb24ocil7dGhpcy5fcz1yfTtTdWJzY3JpcHRpb25PYnNlcnZlci5wcm90b3R5cGU9cmVkZWZpbmVBbGwoe30se25leHQ6ZnVuY3Rpb24gbmV4dChyKXt2YXIgZT10aGlzLl9zO2lmKCFzdWJzY3JpcHRpb25DbG9zZWQoZSkpe3ZhciB0PWUuX287dHJ5e3ZhciBuPWdldE1ldGhvZCh0Lm5leHQpO2lmKG4pcmV0dXJuIG4uY2FsbCh0LHIpfWNhdGNoKHIpe3RyeXtjbG9zZVN1YnNjcmlwdGlvbihlKX1maW5hbGx5e3Rocm93IHJ9fX19LGVycm9yOmZ1bmN0aW9uIGVycm9yKHIpe3ZhciBlPXRoaXMuX3M7aWYoc3Vic2NyaXB0aW9uQ2xvc2VkKGUpKXRocm93IHI7dmFyIHQ9ZS5fbztlLl9vPXZvaWQgMDt0cnl7dmFyIG49Z2V0TWV0aG9kKHQuZXJyb3IpO2lmKCFuKXRocm93IHI7cj1uLmNhbGwodCxyKX1jYXRjaChyKXt0cnl7Y2xlYW51cFN1YnNjcmlwdGlvbihlKX1maW5hbGx5e3Rocm93IHJ9fXJldHVybiBjbGVhbnVwU3Vic2NyaXB0aW9uKGUpLHJ9LGNvbXBsZXRlOmZ1bmN0aW9uIGNvbXBsZXRlKHIpe3ZhciBlPXRoaXMuX3M7aWYoIXN1YnNjcmlwdGlvbkNsb3NlZChlKSl7dmFyIHQ9ZS5fbztlLl9vPXZvaWQgMDt0cnl7dmFyIG49Z2V0TWV0aG9kKHQuY29tcGxldGUpO3I9bj9uLmNhbGwodCxyKTp2b2lkIDB9Y2F0Y2gocil7dHJ5e2NsZWFudXBTdWJzY3JpcHRpb24oZSl9ZmluYWxseXt0aHJvdyByfX1yZXR1cm4gY2xlYW51cFN1YnNjcmlwdGlvbihlKSxyfX19KTt2YXIgJE9ic2VydmFibGU9ZnVuY3Rpb24gT2JzZXJ2YWJsZShyKXthbkluc3RhbmNlKHRoaXMsJE9ic2VydmFibGUsXCJPYnNlcnZhYmxlXCIsXCJfZlwiKS5fZj1hRnVuY3Rpb24ocil9O3JlZGVmaW5lQWxsKCRPYnNlcnZhYmxlLnByb3RvdHlwZSx7c3Vic2NyaWJlOmZ1bmN0aW9uIHN1YnNjcmliZShyKXtyZXR1cm4gbmV3IFN1YnNjcmlwdGlvbihyLHRoaXMuX2YpfSxmb3JFYWNoOmZ1bmN0aW9uIGZvckVhY2gocil7dmFyIGU9dGhpcztyZXR1cm4gbmV3KGNvcmUuUHJvbWlzZXx8Z2xvYmFsLlByb21pc2UpKGZ1bmN0aW9uKHQsbil7YUZ1bmN0aW9uKHIpO3ZhciBpPWUuc3Vic2NyaWJlKHtuZXh0OmZ1bmN0aW9uKGUpe3RyeXtyZXR1cm4gcihlKX1jYXRjaChyKXtuKHIpLGkudW5zdWJzY3JpYmUoKX19LGVycm9yOm4sY29tcGxldGU6dH0pfSl9fSkscmVkZWZpbmVBbGwoJE9ic2VydmFibGUse2Zyb206ZnVuY3Rpb24gZnJvbShyKXt2YXIgZT1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzP3RoaXM6JE9ic2VydmFibGUsdD1nZXRNZXRob2QoYW5PYmplY3QocilbT0JTRVJWQUJMRV0pO2lmKHQpe3ZhciBuPWFuT2JqZWN0KHQuY2FsbChyKSk7cmV0dXJuIG4uY29uc3RydWN0b3I9PT1lP246bmV3IGUoZnVuY3Rpb24ocil7cmV0dXJuIG4uc3Vic2NyaWJlKHIpfSl9cmV0dXJuIG5ldyBlKGZ1bmN0aW9uKGUpe3ZhciB0PSExO3JldHVybiBtaWNyb3Rhc2soZnVuY3Rpb24oKXtpZighdCl7dHJ5e2lmKGZvck9mKHIsITEsZnVuY3Rpb24ocil7aWYoZS5uZXh0KHIpLHQpcmV0dXJuIFJFVFVSTn0pPT09UkVUVVJOKXJldHVybn1jYXRjaChyKXtpZih0KXRocm93IHI7cmV0dXJuIHZvaWQgZS5lcnJvcihyKX1lLmNvbXBsZXRlKCl9fSksZnVuY3Rpb24oKXt0PSEwfX0pfSxvZjpmdW5jdGlvbiBvZigpe2Zvcih2YXIgcj0wLGU9YXJndW1lbnRzLmxlbmd0aCx0PW5ldyBBcnJheShlKTtyPGU7KXRbcl09YXJndW1lbnRzW3IrK107cmV0dXJuIG5ldyhcImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzP3RoaXM6JE9ic2VydmFibGUpKGZ1bmN0aW9uKHIpe3ZhciBlPSExO3JldHVybiBtaWNyb3Rhc2soZnVuY3Rpb24oKXtpZighZSl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDsrK24paWYoci5uZXh0KHRbbl0pLGUpcmV0dXJuO3IuY29tcGxldGUoKX19KSxmdW5jdGlvbigpe2U9ITB9fSl9fSksaGlkZSgkT2JzZXJ2YWJsZS5wcm90b3R5cGUsT0JTRVJWQUJMRSxmdW5jdGlvbigpe3JldHVybiB0aGlzfSksJGV4cG9ydCgkZXhwb3J0Lkcse09ic2VydmFibGU6JE9ic2VydmFibGV9KSxyZXF1aXJlKFwiLi9fc2V0LXNwZWNpZXNcIikoXCJPYnNlcnZhYmxlXCIpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NXZZbk5sY25aaFlteGxMbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2laMnh2WW1Gc0lpd2lZMjl5WlNJc0ltMXBZM0p2ZEdGemF5SXNJazlDVTBWU1ZrRkNURVVpTENKaFJuVnVZM1JwYjI0aUxDSmhiazlpYW1WamRDSXNJbUZ1U1c1emRHRnVZMlVpTENKeVpXUmxabWx1WlVGc2JDSXNJbWhwWkdVaUxDSm1iM0pQWmlJc0lsSkZWRlZTVGlJc0ltZGxkRTFsZEdodlpDSXNJbVp1SWl3aWRXNWtaV1pwYm1Wa0lpd2lZMnhsWVc1MWNGTjFZbk5qY21sd2RHbHZiaUlzSW5OMVluTmpjbWx3ZEdsdmJpSXNJbU5zWldGdWRYQWlMQ0pmWXlJc0luTjFZbk5qY21sd2RHbHZia05zYjNObFpDSXNJbDl2SWl3aVkyeHZjMlZUZFdKelkzSnBjSFJwYjI0aUxDSlRkV0p6WTNKcGNIUnBiMjRpTENKdlluTmxjblpsY2lJc0luTjFZbk5qY21saVpYSWlMQ0owYUdseklpd2lVM1ZpYzJOeWFYQjBhVzl1VDJKelpYSjJaWElpTENKMWJuTjFZbk5qY21saVpTSXNJbVVpTENKbGNuSnZjaUlzSW5CeWIzUnZkSGx3WlNJc0lsOXpJaXdpYm1WNGRDSXNJblpoYkhWbElpd2liU0lzSW1OaGJHd2lMQ0pqYjIxd2JHVjBaU0lzSWlSUFluTmxjblpoWW14bElpd2lUMkp6WlhKMllXSnNaU0lzSWw5bUlpd2ljM1ZpYzJOeWFXSmxJaXdpWm05eVJXRmphQ0lzSW5Sb1lYUWlMQ0pRY205dGFYTmxJaXdpY21WemIyeDJaU0lzSW5KbGFtVmpkQ0lzSW1aeWIyMGlMQ0o0SWl3aVF5SXNJbTFsZEdodlpDSXNJbTlpYzJWeWRtRmliR1VpTENKamIyNXpkSEoxWTNSdmNpSXNJbVJ2Ym1VaUxDSnBkQ0lzSW05bUlpd2lhU0lzSW13aUxDSmhjbWQxYldWdWRITWlMQ0pzWlc1bmRHZ2lMQ0pwZEdWdGN5SXNJa0Z5Y21GNUlpd2lhaUlzSWtjaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJSVUVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVOc1FrTXNUMEZCVTBRc1VVRkJVU3hoUVVOcVFrVXNTMEZCVDBZc1VVRkJVU3hYUVVObVJ5eFZRVUZaU0N4UlFVRlJMR1ZCUVZKQkxFZEJRMXBKTEZkQlFXRktMRkZCUVZFc1UwRkJVa0VzUTBGQmEwSXNZMEZETDBKTExGVkJRVmxNTEZGQlFWRXNhVUpCUTNCQ1RTeFRRVUZYVGl4UlFVRlJMR2RDUVVOdVFrOHNWMEZCWVZBc1VVRkJVU3hyUWtGRGNrSlJMRmxCUVdOU0xGRkJRVkVzYlVKQlEzUkNVeXhMUVVGUFZDeFJRVUZSTEZkQlEyWlZMRTFCUVZGV0xGRkJRVkVzWVVGRGFFSlhMRTlCUVZORUxFMUJRVTFETEU5QlJXWkRMRlZCUVZrc1UwRkJWVU1zUjBGRGVFSXNUMEZCWVN4TlFVRk9RU3hQUVVGaFF5eEZRVUZaVkN4VlFVRlZVU3hKUVVkNFEwVXNiMEpCUVhOQ0xGTkJRVlZETEVkQlEyeERMRWxCUVVsRExFVkJRVlZFTEVWQlFXRkZMRWRCUTNaQ1JDeEpRVU5HUkN4RlFVRmhSU3hSUVVGTFNpeEZRVU5zUWtjc1RVRkpRVVVzYlVKQlFYRkNMRk5CUVZWSUxFZEJRMnBETEZsQlFUSkNSaXhKUVVGd1FrVXNSVUZCWVVrc1NVRkhiRUpETEd0Q1FVRnZRaXhUUVVGVlRDeEhRVU16UWtjc2JVSkJRVzFDU0N4TFFVTjBRa0VzUlVGQllVa3NVVUZCUzA0c1JVRkRiRUpETEc5Q1FVRnZRa01zUzBGSmNFSk5MR0ZCUVdVc1UwRkJWVU1zUlVGQlZVTXNSMEZEY2tOc1FpeFRRVUZUYVVJc1IwRkRWRVVzUzBGQlMxQXNVVUZCUzBvc1JVRkRWbGNzUzBGQlMwd3NSMEZCUzBjc1JVRkRWa0VzUlVGQlZ5eEpRVUZKUnl4eFFrRkJjVUpFTEUxQlEzQkRMRWxCUTBVc1NVRkJTVklzUlVGQlZVOHNSVUZCVjBRc1IwRkRja0pRTEVWQlFXVkRMRVZCUTBvc1RVRkJXRUVzU1VGRGFVTXNiVUpCUVhoQ1FTeEZRVUZSVlN4WlFVRTBRbFlzUlVGQlZTeFhRVUZqUkN4RlFVRmhWeXhsUVVNdlJYUkNMRlZCUVZWWkxFZEJRMlpSTEV0QlFVdFFMRWRCUVV0RUxFZEJSVm9zVFVGQlQxY3NSMEZGVUN4WlFVUkJUQ3hGUVVGVFRTeE5RVUZOUkN4SFFVVllWQ3h0UWtGQmJVSk5MRTlCUVU5V0xHOUNRVUZ2UWxVc1QwRkhkRVJJTEdGQlFXRlJMRlZCUVZsMFFpeFpRVUZaTEVkQlFVa3NRMEZEZGtOdFFpeFpRVUZoTEZOQlFWTkJMR05CUVdkQ1RpeHJRa0ZCYTBKSkxGTkJSekZFTEVsQlFVbERMSEZDUVVGMVFpeFRRVUZWVml4SFFVTnVRMU1zUzBGQlMwMHNSMEZCUzJZc1IwRkhXbFVzY1VKQlFYRkNTU3hWUVVGWmRFSXNXVUZCV1N4SFFVRkpMRU5CUXk5RGQwSXNTMEZCVFN4VFFVRlRRU3hMUVVGTFF5eEhRVU5zUWl4SlFVRkpha0lzUlVGQlpWTXNTMEZCUzAwc1IwRkRlRUlzU1VGQlMxb3NiVUpCUVcxQ1NDeEhRVUZsTEVOQlEzSkRMRWxCUVVsUExFVkJRVmRRTEVWQlFXRkpMRWRCUXpWQ0xFbEJRMFVzU1VGQlNXTXNSVUZCU1hSQ0xGVkJRVlZYTEVWQlFWTlRMRTFCUXpOQ0xFZEJRVWxGTEVWQlFVY3NUMEZCVDBFc1JVRkJSVU1zUzBGQlMxb3NSVUZCVlZVc1IwRkRMMElzVFVGQlQwd3NSMEZEVUN4SlFVTkZVQ3hyUWtGQmEwSk1MRWRCUTJ4Q0xGRkJRMEVzVFVGQlRWa3NUVUZMWkVNc1RVRkJUeXhUUVVGVFFTeE5RVUZOU1N4SFFVTndRaXhKUVVGSmFrSXNSVUZCWlZNc1MwRkJTMDBzUjBGRGVFSXNSMEZCU1Zvc2JVSkJRVzFDU0N4SFFVRmxMRTFCUVUxcFFpeEZRVU0xUXl4SlFVRkpWaXhGUVVGWFVDeEZRVUZoU1N4SFFVTTFRa29zUlVGQllVa3NVVUZCUzA0c1JVRkRiRUlzU1VGRFJTeEpRVUZKYjBJc1JVRkJTWFJDTEZWQlFWVlhMRVZCUVZOTkxFOUJRek5DTEVsQlFVdExMRVZCUVVjc1RVRkJUVVFzUlVGRFpFRXNSVUZCVVVNc1JVRkJSVU1zUzBGQlMxb3NSVUZCVlZVc1IwRkRla0lzVFVGQlQwd3NSMEZEVUN4SlFVTkZZaXh2UWtGQmIwSkRMRWRCUTNCQ0xGRkJRMEVzVFVGQlRWa3NSMEZIVml4UFFVUkZZaXh2UWtGQmIwSkRMRWRCUTJacFFpeEhRVVZVUnl4VFFVRlZMRk5CUVZOQkxGTkJRVk5JTEVkQlF6RkNMRWxCUVVscVFpeEZRVUZsVXl4TFFVRkxUU3hIUVVONFFpeEpRVUZMV2l4dFFrRkJiVUpJTEVkQlFXVXNRMEZEY2tNc1NVRkJTVThzUlVGQlYxQXNSVUZCWVVrc1IwRkROVUpLTEVWQlFXRkpMRkZCUVV0T0xFVkJRMnhDTEVsQlEwVXNTVUZCU1c5Q0xFVkJRVWwwUWl4VlFVRlZWeXhGUVVGVFlTeFZRVU16UWtnc1JVRkJVVU1zUlVGQlNVRXNSVUZCUlVNc1MwRkJTMW9zUlVGQlZWVXNVVUZCVTI1Q0xFVkJRM1JETEUxQlFVOWpMRWRCUTFBc1NVRkRSV0lzYjBKQlFXOUNReXhIUVVOd1FpeFJRVU5CTEUxQlFVMVpMRWRCUjFZc1QwRkVSV0lzYjBKQlFXOUNReXhIUVVObWFVSXNUVUZMWWl4SlFVRkpTU3haUVVGakxGTkJRVk5ETEZkQlFWZGtMRWRCUTNCRGFrSXNWMEZCVjJ0Q0xFdEJRVTFaTEZsQlFXRXNZVUZCWXl4TlFVRk5SU3hIUVVGTGJFTXNWVUZCVlcxQ0xFbEJSMjVGYUVJc1dVRkJXVFpDTEZsQlFWbFFMRlZCUVZjc1EwRkRha05WTEZWQlFWY3NVMEZCVTBFc1ZVRkJWV3BDTEVkQlF6VkNMRTlCUVU4c1NVRkJTVVFzWVVGQllVTXNSVUZCVlVVc1MwRkJTMk1zUzBGRmVrTkZMRkZCUVZNc1UwRkJVMEVzVVVGQlVUVkNMRWRCUTNoQ0xFbEJRVWsyUWl4RlFVRlBha0lzUzBGRFdDeFBRVUZQTEVsQlFVdDJRaXhMUVVGTGVVTXNVMEZCVnpGRExFOUJRVTh3UXl4VFFVRlRMRk5CUVZWRExFVkJRVk5ETEVkQlF6ZEVlRU1zVlVGQlZWRXNSMEZEVml4SlFVRkpSeXhGUVVGbE1FSXNSVUZCUzBZc1ZVRkJWU3hEUVVOb1ExSXNTMEZCVFN4VFFVRlZReXhIUVVOa0xFbEJRMFVzVDBGQlQzQkNMRVZCUVVkdlFpeEhRVU5XTEUxQlFVOU1MRWRCUTFCcFFpeEZRVUZQYWtJc1IwRkRVRm9zUlVGQllWY3NaMEpCUjJwQ1JTeE5RVUZQWjBJc1JVRkRVRlFzVTBGQlZWRXNVMEZOYkVKd1F5eFpRVUZaTmtJc1dVRkJZU3hEUVVOMlFsTXNTMEZCVFN4VFFVRlRRU3hMUVVGTFF5eEhRVU5zUWl4SlFVRkpReXhGUVVGdlFpeHRRa0ZCVkhaQ0xFdEJRWE5DUVN4TFFVRlBXU3haUVVONFExa3NSVUZCVTNKRExGVkJRVlZPTEZOQlFWTjVReXhIUVVGSE0wTXNZVUZEYmtNc1IwRkJTVFpETEVWQlFWRXNRMEZEVml4SlFVRkpReXhGUVVGaE5VTXNVMEZCVXpKRExFVkJRVTlrTEV0QlFVdFpMRWxCUTNSRExFOUJRVTlITEVWQlFWZERMR05CUVdkQ1NDeEZRVUZKUlN4RlFVRmhMRWxCUVVsR0xFVkJRVVVzVTBGQlZYcENMRWRCUTJwRkxFOUJRVTh5UWl4RlFVRlhWaXhWUVVGVmFrSXNTMEZIYUVNc1QwRkJUeXhKUVVGSmVVSXNSVUZCUlN4VFFVRlZla0lzUjBGRGNrSXNTVUZCU1RaQ0xFZEJRVThzUlVGbFdDeFBRV1JCYWtRc1ZVRkJWU3hYUVVOU0xFbEJRVXRwUkN4RlFVRk5MRU5CUTFRc1NVRkRSU3hIUVVGSk1VTXNUVUZCVFhGRExFZEJRVWNzUlVGQlR5eFRRVUZWVFN4SFFVVTFRaXhIUVVSQk9VSXNSVUZCVTFNc1MwRkJTM0ZDTEVkQlExWkVMRVZCUVUwc1QwRkJUM3BETEZkQlExcEJMRTlCUVZFc1QwRkRaaXhOUVVGUGFVSXNSMEZEVUN4SFFVRkpkMElzUlVGQlRTeE5RVUZOZUVJc1JVRkZhRUlzV1VGRVFVd3NSVUZCVTAwc1RVRkJUVVFzUjBGRlprd3NSVUZCVTJFc1kwRkhVaXhYUVVGalowSXNSMEZCVHl4TlFVZG9RMFVzUjBGQlNTeFRRVUZUUVN4TFFVTllMRWxCUVVzc1NVRkJTVU1zUlVGQlNTeEZRVUZIUXl4RlFVRkpReXhWUVVGVlF5eFBRVUZSUXl4RlFVRlJMRWxCUVVsRExFMUJRVTFLTEVkQlFVbEVMRVZCUVVsRExFZEJRVWxITEVWQlFVMUtMRWRCUVV0RkxGVkJRVlZHTEV0QlEzcEdMRTlCUVU4c1NVRkJjVUlzYlVKQlFWUTVRaXhMUVVGelFrRXNTMEZCVDFrc1lVRkJZU3hUUVVGVlpDeEhRVU55UlN4SlFVRkpOa0lzUjBGQlR5eEZRVk5ZTEU5QlVrRnFSQ3hWUVVGVkxGZEJRMUlzU1VGQlMybEVMRVZCUVUwc1EwRkRWQ3hKUVVGTExFbEJRVWxUTEVWQlFVa3NSVUZCUjBFc1JVRkJTVVlzUlVGQlRVUXNVMEZCVlVjc1JVRkZiRU1zUjBGRVFYUkRMRVZCUVZOVExFdEJRVXN5UWl4RlFVRk5SU3hKUVVOb1FsUXNSVUZCVFN4UFFVTldOMElzUlVGQlUyRXNZMEZIVWl4WFFVRmpaMElzUjBGQlR5eFJRVXRzUXpORExFdEJRVXMwUWl4WlFVRlpVQ3hWUVVGWE1VSXNWMEZCV1N4WFFVRmpMRTlCUVU5eFFpeFBRVVUzUkRGQ0xGRkJRVkZCTEZGQlFWRXJSQ3hGUVVGSExFTkJRVVY0UWl4WFFVRlpSQ3hqUVVWcVEzSkRMRkZCUVZFc2FVSkJRVkpCTEVOQlFUQkNJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6Y3ViMkp6WlhKMllXSnNaUzVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciAkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIiksY29yZT1yZXF1aXJlKFwiLi9fY29yZVwiKSxnbG9iYWw9cmVxdWlyZShcIi4vX2dsb2JhbFwiKSxzcGVjaWVzQ29uc3RydWN0b3I9cmVxdWlyZShcIi4vX3NwZWNpZXMtY29uc3RydWN0b3JcIikscHJvbWlzZVJlc29sdmU9cmVxdWlyZShcIi4vX3Byb21pc2UtcmVzb2x2ZVwiKTskZXhwb3J0KCRleHBvcnQuUCskZXhwb3J0LlIsXCJQcm9taXNlXCIse2ZpbmFsbHk6ZnVuY3Rpb24oZSl7dmFyIHI9c3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsY29yZS5Qcm9taXNlfHxnbG9iYWwuUHJvbWlzZSksbz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBlO3JldHVybiB0aGlzLnRoZW4obz9mdW5jdGlvbihvKXtyZXR1cm4gcHJvbWlzZVJlc29sdmUocixlKCkpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gb30pfTplLG8/ZnVuY3Rpb24obyl7cmV0dXJuIHByb21pc2VSZXNvbHZlKHIsZSgpKS50aGVuKGZ1bmN0aW9uKCl7dGhyb3cgb30pfTplKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOeTV3Y205dGFYTmxMbVpwYm1Gc2JIa3Vhbk1pWFN3aWJtRnRaWE1pT2xzaUpHVjRjRzl5ZENJc0luSmxjWFZwY21VaUxDSmpiM0psSWl3aVoyeHZZbUZzSWl3aWMzQmxZMmxsYzBOdmJuTjBjblZqZEc5eUlpd2ljSEp2YldselpWSmxjMjlzZG1VaUxDSlFJaXdpVWlJc0ltWnBibUZzYkhraUxDSnZia1pwYm1Gc2JIa2lMQ0pESWl3aWRHaHBjeUlzSWxCeWIyMXBjMlVpTENKcGMwWjFibU4wYVc5dUlpd2lkR2hsYmlJc0luZ2lMQ0psSWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4aFFVTkJMRWxCUVVsQkxGRkJRVlZETEZGQlFWRXNZVUZEYkVKRExFdEJRVTlFTEZGQlFWRXNWMEZEWmtVc1QwRkJVMFlzVVVGQlVTeGhRVU5xUWtjc2JVSkJRWEZDU0N4UlFVRlJMREJDUVVNM1Fra3NaVUZCYVVKS0xGRkJRVkVzYzBKQlJUZENSQ3hSUVVGUlFTeFJRVUZSVFN4RlFVRkpUaXhSUVVGUlR5eEZRVUZITEZWQlFWY3NRMEZCUlVNc1VVRkJWeXhUUVVGVlF5eEhRVU12UkN4SlFVRkpReXhGUVVGSlRpeHRRa0ZCYlVKUExFdEJRVTFVTEV0QlFVdFZMRk5CUVZkVUxFOUJRVTlUTEZOQlEzQkVReXhGUVVGcFF5eHRRa0ZCWWtvc1JVRkRlRUlzVDBGQlQwVXNTMEZCUzBjc1MwRkRWa1FzUlVGQllTeFRRVUZWUlN4SFFVTnlRaXhQUVVGUFZpeGxRVUZsU3l4RlFVRkhSQ3hMUVVGaFN5eExRVUZMTEZkQlFXTXNUMEZCVDBNc1MwRkRPVVJPTEVWQlEwcEpMRVZCUVdFc1UwRkJWVWNzUjBGRGNrSXNUMEZCVDFnc1pVRkJaVXNzUlVGQlIwUXNTMEZCWVVzc1MwRkJTeXhYUVVGakxFMUJRVTFGTEV0QlF6ZEVVQ0lzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTNMbkJ5YjIxcGMyVXVabWx1WVd4c2VTNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKSxuZXdQcm9taXNlQ2FwYWJpbGl0eT1yZXF1aXJlKFwiLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eVwiKSxwZXJmb3JtPXJlcXVpcmUoXCIuL19wZXJmb3JtXCIpOyRleHBvcnQoJGV4cG9ydC5TLFwiUHJvbWlzZVwiLHt0cnk6ZnVuY3Rpb24ocil7dmFyIGU9bmV3UHJvbWlzZUNhcGFiaWxpdHkuZih0aGlzKSxpPXBlcmZvcm0ocik7cmV0dXJuKGkuZT9lLnJlamVjdDplLnJlc29sdmUpKGkudiksZS5wcm9taXNlfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NXdjbTl0YVhObExuUnllUzVxY3lKZExDSnVZVzFsY3lJNld5SWtaWGh3YjNKMElpd2ljbVZ4ZFdseVpTSXNJbTVsZDFCeWIyMXBjMlZEWVhCaFltbHNhWFI1SWl3aWNHVnlabTl5YlNJc0lsTWlMQ0owY25raUxDSmpZV3hzWW1GamEyWnVJaXdpY0hKdmJXbHpaVU5oY0dGaWFXeHBkSGtpTENKbUlpd2lkR2hwY3lJc0luSmxjM1ZzZENJc0ltVWlMQ0p5WldwbFkzUWlMQ0p5WlhOdmJIWmxJaXdpZGlJc0luQnliMjFwYzJVaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJSVUVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVOc1FrTXNjVUpCUVhWQ1JDeFJRVUZSTERaQ1FVTXZRa1VzVVVGQlZVWXNVVUZCVVN4alFVVjBRa1FzVVVGQlVVRXNVVUZCVVVrc1JVRkJSeXhWUVVGWExFTkJRVVZETEVsQlFVOHNVMEZCVlVNc1IwRkRMME1zU1VGQlNVTXNSVUZCYjBKTUxIRkNRVUZ4UWswc1JVRkJSVU1zVFVGRE0wTkRMRVZCUVZOUUxGRkJRVkZITEVkQlJYSkNMRTlCUkVOSkxFVkJRVTlETEVWQlFVbEtMRVZCUVd0Q1N5eFBRVUZUVEN4RlFVRnJRazBzVTBGQlUwZ3NSVUZCVDBrc1IwRkRiRVZRTEVWQlFXdENVU0lzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTNMbkJ5YjIxcGMyVXVkSEo1TG1wekluMD0iLCJ2YXIgbWV0YWRhdGE9cmVxdWlyZShcIi4vX21ldGFkYXRhXCIpLGFuT2JqZWN0PXJlcXVpcmUoXCIuL19hbi1vYmplY3RcIiksdG9NZXRhS2V5PW1ldGFkYXRhLmtleSxvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhPW1ldGFkYXRhLnNldDttZXRhZGF0YS5leHAoe2RlZmluZU1ldGFkYXRhOmZ1bmN0aW9uIGRlZmluZU1ldGFkYXRhKGEsZSx0LGQpe29yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEoYSxlLGFuT2JqZWN0KHQpLHRvTWV0YUtleShkKSl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1eVpXWnNaV04wTG1SbFptbHVaUzF0WlhSaFpHRjBZUzVxY3lKZExDSnVZVzFsY3lJNld5SnRaWFJoWkdGMFlTSXNJbkpsY1hWcGNtVWlMQ0poYms5aWFtVmpkQ0lzSW5SdlRXVjBZVXRsZVNJc0ltdGxlU0lzSW05eVpHbHVZWEo1UkdWbWFXNWxUM2R1VFdWMFlXUmhkR0VpTENKelpYUWlMQ0psZUhBaUxDSmtaV1pwYm1WTlpYUmhaR0YwWVNJc0ltMWxkR0ZrWVhSaFMyVjVJaXdpYldWMFlXUmhkR0ZXWVd4MVpTSXNJblJoY21kbGRDSXNJblJoY21kbGRFdGxlU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzU1VGQlNVRXNVMEZCVjBNc1VVRkJVU3hsUVVOdVFrTXNVMEZCVjBRc1VVRkJVU3huUWtGRGJrSkZMRlZCUVZsSUxGTkJRVk5KTEVsQlEzSkNReXd3UWtGQk5FSk1MRk5CUVZOTkxFbEJSWHBEVGl4VFFVRlRUeXhKUVVGSkxFTkJRVVZETEdWQlFXZENMRk5CUVZOQkxHVkJRV1ZETEVWQlFXRkRMRVZCUVdWRExFVkJRVkZETEVkQlEzcEdVQ3d3UWtGQk1FSkpMRVZCUVdGRExFVkJRV1ZTTEZOQlFWTlRMRWRCUVZOU0xGVkJRVlZUSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjemN1Y21WbWJHVmpkQzVrWldacGJtVXRiV1YwWVdSaGRHRXVhbk1pZlE9PSIsInZhciBtZXRhZGF0YT1yZXF1aXJlKFwiLi9fbWV0YWRhdGFcIiksYW5PYmplY3Q9cmVxdWlyZShcIi4vX2FuLW9iamVjdFwiKSx0b01ldGFLZXk9bWV0YWRhdGEua2V5LGdldE9yQ3JlYXRlTWV0YWRhdGFNYXA9bWV0YWRhdGEubWFwLHN0b3JlPW1ldGFkYXRhLnN0b3JlO21ldGFkYXRhLmV4cCh7ZGVsZXRlTWV0YWRhdGE6ZnVuY3Rpb24gZGVsZXRlTWV0YWRhdGEoZSx0KXt2YXIgYT1hcmd1bWVudHMubGVuZ3RoPDM/dm9pZCAwOnRvTWV0YUtleShhcmd1bWVudHNbMl0pLHI9Z2V0T3JDcmVhdGVNZXRhZGF0YU1hcChhbk9iamVjdCh0KSxhLCExKTtpZih2b2lkIDA9PT1yfHwhci5kZWxldGUoZSkpcmV0dXJuITE7aWYoci5zaXplKXJldHVybiEwO3ZhciBkPXN0b3JlLmdldCh0KTtyZXR1cm4gZC5kZWxldGUoYSksISFkLnNpemV8fHN0b3JlLmRlbGV0ZSh0KX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOeTV5Wldac1pXTjBMbVJsYkdWMFpTMXRaWFJoWkdGMFlTNXFjeUpkTENKdVlXMWxjeUk2V3lKdFpYUmhaR0YwWVNJc0luSmxjWFZwY21VaUxDSmhiazlpYW1WamRDSXNJblJ2VFdWMFlVdGxlU0lzSW10bGVTSXNJbWRsZEU5eVEzSmxZWFJsVFdWMFlXUmhkR0ZOWVhBaUxDSnRZWEFpTENKemRHOXlaU0lzSW1WNGNDSXNJbVJsYkdWMFpVMWxkR0ZrWVhSaElpd2liV1YwWVdSaGRHRkxaWGtpTENKMFlYSm5aWFFpTENKMFlYSm5aWFJMWlhraUxDSmhjbWQxYldWdWRITWlMQ0pzWlc1bmRHZ2lMQ0oxYm1SbFptbHVaV1FpTENKdFpYUmhaR0YwWVUxaGNDSXNJbk5wZW1VaUxDSjBZWEpuWlhSTlpYUmhaR0YwWVNJc0ltZGxkQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzU1VGQlNVRXNVMEZCVjBNc1VVRkJVU3hsUVVOdVFrTXNVMEZCVjBRc1VVRkJVU3huUWtGRGJrSkZMRlZCUVZsSUxGTkJRVk5KTEVsQlEzSkNReXgxUWtGQmVVSk1MRk5CUVZOTkxFbEJRMnhEUXl4TlFVRlJVQ3hUUVVGVFR5eE5RVVZ5UWxBc1UwRkJVMUVzU1VGQlNTeERRVUZGUXl4bFFVRm5RaXhUUVVGVFFTeGxRVUZsUXl4RlFVRmhReXhIUVVOc1JTeEpRVUZKUXl4RlFVRlpReXhWUVVGVlF5eFBRVUZUTEU5QlFVbERMRVZCUVZsYUxGVkJRVlZWTEZWQlFWVXNTVUZEYmtWSExFVkJRV05ZTEhWQ1FVRjFRa2dzVTBGQlUxTXNSMEZCVTBNc1IwRkJWeXhIUVVOMFJTeFJRVUZ2UWtjc1NVRkJhRUpETEVsQlFUaENRU3hGUVVGdlFpeFBRVUZGVGl4SFFVRmpMRTlCUVU4c1JVRkROMFVzUjBGQlNVMHNSVUZCV1VNc1MwRkJUU3hQUVVGUExFVkJRemRDTEVsQlFVbERMRVZCUVdsQ1dDeE5RVUZOV1N4SlFVRkpVaXhIUVVVdlFpeFBRVVJCVHl4RlFVRjFRaXhQUVVGRlRpeExRVU5vUWswc1JVRkJaVVFzVFVGQlVWWXNUVUZCWXl4UFFVRkZTU0lzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTNMbkpsWm14bFkzUXVaR1ZzWlhSbExXMWxkR0ZrWVhSaExtcHpJbjA9IiwidmFyIFNldD1yZXF1aXJlKFwiLi9lczYuc2V0XCIpLGZyb209cmVxdWlyZShcIi4vX2FycmF5LWZyb20taXRlcmFibGVcIiksbWV0YWRhdGE9cmVxdWlyZShcIi4vX21ldGFkYXRhXCIpLGFuT2JqZWN0PXJlcXVpcmUoXCIuL19hbi1vYmplY3RcIiksZ2V0UHJvdG90eXBlT2Y9cmVxdWlyZShcIi4vX29iamVjdC1ncG9cIiksb3JkaW5hcnlPd25NZXRhZGF0YUtleXM9bWV0YWRhdGEua2V5cyx0b01ldGFLZXk9bWV0YWRhdGEua2V5LG9yZGluYXJ5TWV0YWRhdGFLZXlzPWZ1bmN0aW9uKGUsYSl7dmFyIHQ9b3JkaW5hcnlPd25NZXRhZGF0YUtleXMoZSxhKSxyPWdldFByb3RvdHlwZU9mKGUpO2lmKG51bGw9PT1yKXJldHVybiB0O3ZhciBuPW9yZGluYXJ5TWV0YWRhdGFLZXlzKHIsYSk7cmV0dXJuIG4ubGVuZ3RoP3QubGVuZ3RoP2Zyb20obmV3IFNldCh0LmNvbmNhdChuKSkpOm46dH07bWV0YWRhdGEuZXhwKHtnZXRNZXRhZGF0YUtleXM6ZnVuY3Rpb24gZ2V0TWV0YWRhdGFLZXlzKGUpe3JldHVybiBvcmRpbmFyeU1ldGFkYXRhS2V5cyhhbk9iamVjdChlKSxhcmd1bWVudHMubGVuZ3RoPDI/dm9pZCAwOnRvTWV0YUtleShhcmd1bWVudHNbMV0pKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOeTV5Wldac1pXTjBMbWRsZEMxdFpYUmhaR0YwWVMxclpYbHpMbXB6SWwwc0ltNWhiV1Z6SWpwYklsTmxkQ0lzSW5KbGNYVnBjbVVpTENKbWNtOXRJaXdpYldWMFlXUmhkR0VpTENKaGJrOWlhbVZqZENJc0ltZGxkRkJ5YjNSdmRIbHdaVTltSWl3aWIzSmthVzVoY25sUGQyNU5aWFJoWkdGMFlVdGxlWE1pTENKclpYbHpJaXdpZEc5TlpYUmhTMlY1SWl3aWEyVjVJaXdpYjNKa2FXNWhjbmxOWlhSaFpHRjBZVXRsZVhNaUxDSlBJaXdpVUNJc0ltOUxaWGx6SWl3aWNHRnlaVzUwSWl3aWNFdGxlWE1pTENKc1pXNW5kR2dpTENKamIyNWpZWFFpTENKbGVIQWlMQ0puWlhSTlpYUmhaR0YwWVV0bGVYTWlMQ0owWVhKblpYUWlMQ0poY21kMWJXVnVkSE1pTENKMWJtUmxabWx1WldRaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFbEJRVWxCTEVsQlFVMURMRkZCUVZFc1lVRkRaRU1zUzBGQlQwUXNVVUZCVVN3d1FrRkRaa1VzVTBGQlYwWXNVVUZCVVN4bFFVTnVRa2NzVTBGQlYwZ3NVVUZCVVN4blFrRkRia0pKTEdWQlFXbENTaXhSUVVGUkxHbENRVU42UWtzc2QwSkJRVEJDU0N4VFFVRlRTU3hMUVVOdVEwTXNWVUZCV1V3c1UwRkJVMDBzU1VGRmNrSkRMSEZDUVVGMVFpeFRRVUZWUXl4RlFVRkhReXhIUVVOMFF5eEpRVUZKUXl4RlFVRlJVQ3gzUWtGQmQwSkxMRVZCUVVkRExFZEJRMjVEUlN4RlFVRlRWQ3hsUVVGbFRTeEhRVU0xUWl4SFFVRmxMRTlCUVZoSExFVkJRV2xDTEU5QlFVOUVMRVZCUXpWQ0xFbEJRVWxGTEVWQlFWRk1MSEZDUVVGeFFra3NSVUZCVVVZc1IwRkRla01zVDBGQlQwY3NSVUZCVFVNc1QwRkJVMGdzUlVGQlRVY3NUMEZCVTJRc1MwRkJTeXhKUVVGSlJpeEpRVUZKWVN4RlFVRk5TU3hQUVVGUFJpeExRVUZYUVN4RlFVRlJSaXhIUVVkd1JsWXNVMEZCVTJVc1NVRkJTU3hEUVVGRlF5eG5Ra0ZCYVVJc1UwRkJVMEVzWjBKQlFXZENReXhIUVVOMlJDeFBRVUZQVml4eFFrRkJjVUpPTEZOQlFWTm5RaXhIUVVGVFF5eFZRVUZWVEN4UFFVRlRMRTlCUVVsTkxFVkJRVmxrTEZWQlFWVmhMRlZCUVZVaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tnk1eVpXWnNaV04wTG1kbGRDMXRaWFJoWkdGMFlTMXJaWGx6TG1wekluMD0iLCJ2YXIgbWV0YWRhdGE9cmVxdWlyZShcIi4vX21ldGFkYXRhXCIpLGFuT2JqZWN0PXJlcXVpcmUoXCIuL19hbi1vYmplY3RcIiksZ2V0UHJvdG90eXBlT2Y9cmVxdWlyZShcIi4vX29iamVjdC1ncG9cIiksb3JkaW5hcnlIYXNPd25NZXRhZGF0YT1tZXRhZGF0YS5oYXMsb3JkaW5hcnlHZXRPd25NZXRhZGF0YT1tZXRhZGF0YS5nZXQsdG9NZXRhS2V5PW1ldGFkYXRhLmtleSxvcmRpbmFyeUdldE1ldGFkYXRhPWZ1bmN0aW9uKGEsdCxlKXtpZihvcmRpbmFyeUhhc093bk1ldGFkYXRhKGEsdCxlKSlyZXR1cm4gb3JkaW5hcnlHZXRPd25NZXRhZGF0YShhLHQsZSk7dmFyIHI9Z2V0UHJvdG90eXBlT2YodCk7cmV0dXJuIG51bGwhPT1yP29yZGluYXJ5R2V0TWV0YWRhdGEoYSxyLGUpOnZvaWQgMH07bWV0YWRhdGEuZXhwKHtnZXRNZXRhZGF0YTpmdW5jdGlvbiBnZXRNZXRhZGF0YShhLHQpe3JldHVybiBvcmRpbmFyeUdldE1ldGFkYXRhKGEsYW5PYmplY3QodCksYXJndW1lbnRzLmxlbmd0aDwzP3ZvaWQgMDp0b01ldGFLZXkoYXJndW1lbnRzWzJdKSl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1eVpXWnNaV04wTG1kbGRDMXRaWFJoWkdGMFlTNXFjeUpkTENKdVlXMWxjeUk2V3lKdFpYUmhaR0YwWVNJc0luSmxjWFZwY21VaUxDSmhiazlpYW1WamRDSXNJbWRsZEZCeWIzUnZkSGx3WlU5bUlpd2liM0prYVc1aGNubElZWE5QZDI1TlpYUmhaR0YwWVNJc0ltaGhjeUlzSW05eVpHbHVZWEo1UjJWMFQzZHVUV1YwWVdSaGRHRWlMQ0puWlhRaUxDSjBiMDFsZEdGTFpYa2lMQ0pyWlhraUxDSnZjbVJwYm1GeWVVZGxkRTFsZEdGa1lYUmhJaXdpVFdWMFlXUmhkR0ZMWlhraUxDSlBJaXdpVUNJc0luQmhjbVZ1ZENJc0luVnVaR1ZtYVc1bFpDSXNJbVY0Y0NJc0ltZGxkRTFsZEdGa1lYUmhJaXdpYldWMFlXUmhkR0ZMWlhraUxDSjBZWEpuWlhRaUxDSmhjbWQxYldWdWRITWlMQ0pzWlc1bmRHZ2lYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRWxCUVVsQkxGTkJRVmRETEZGQlFWRXNaVUZEYmtKRExGTkJRVmRFTEZGQlFWRXNaMEpCUTI1Q1JTeGxRVUZwUWtZc1VVRkJVU3hwUWtGRGVrSkhMSFZDUVVGNVFrb3NVMEZCVTBzc1NVRkRiRU5ETEhWQ1FVRjVRazRzVTBGQlUwOHNTVUZEYkVORExGVkJRVmxTTEZOQlFWTlRMRWxCUlhKQ1F5eHZRa0ZCYzBJc1UwRkJWVU1zUlVGQllVTXNSVUZCUjBNc1IwRkZiRVFzUjBGRVlWUXNkVUpCUVhWQ1R5eEZRVUZoUXl4RlFVRkhReXhIUVVONFF5eFBRVUZQVUN4MVFrRkJkVUpMTEVWQlFXRkRMRVZCUVVkRExFZEJRekZFTEVsQlFVbERMRVZCUVZOWUxHVkJRV1ZUTEVkQlF6VkNMRTlCUVd0Q0xFOUJRVmhGTEVWQlFXdENTaXh2UWtGQmIwSkRMRVZCUVdGSExFVkJRVkZFTEZGQlFVdEZMRWRCUjNwRlppeFRRVUZUWjBJc1NVRkJTU3hEUVVGRlF5eFpRVUZoTEZOQlFWTkJMRmxCUVZsRExFVkJRV0ZETEVkQlF6VkVMRTlCUVU5VUxHOUNRVUZ2UWxFc1JVRkJZV2hDTEZOQlFWTnBRaXhIUVVGVFF5eFZRVUZWUXl4UFFVRlRMRTlCUVVsT0xFVkJRVmxRTEZWQlFWVlpMRlZCUVZVaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tnk1eVpXWnNaV04wTG1kbGRDMXRaWFJoWkdGMFlTNXFjeUo5IiwidmFyIG1ldGFkYXRhPXJlcXVpcmUoXCIuL19tZXRhZGF0YVwiKSxhbk9iamVjdD1yZXF1aXJlKFwiLi9fYW4tb2JqZWN0XCIpLG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzPW1ldGFkYXRhLmtleXMsdG9NZXRhS2V5PW1ldGFkYXRhLmtleTttZXRhZGF0YS5leHAoe2dldE93bk1ldGFkYXRhS2V5czpmdW5jdGlvbiBnZXRPd25NZXRhZGF0YUtleXMoYSl7cmV0dXJuIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKGFuT2JqZWN0KGEpLGFyZ3VtZW50cy5sZW5ndGg8Mj92b2lkIDA6dG9NZXRhS2V5KGFyZ3VtZW50c1sxXSkpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NXlaV1pzWldOMExtZGxkQzF2ZDI0dGJXVjBZV1JoZEdFdGEyVjVjeTVxY3lKZExDSnVZVzFsY3lJNld5SnRaWFJoWkdGMFlTSXNJbkpsY1hWcGNtVWlMQ0poYms5aWFtVmpkQ0lzSW05eVpHbHVZWEo1VDNkdVRXVjBZV1JoZEdGTFpYbHpJaXdpYTJWNWN5SXNJblJ2VFdWMFlVdGxlU0lzSW10bGVTSXNJbVY0Y0NJc0ltZGxkRTkzYmsxbGRHRmtZWFJoUzJWNWN5SXNJblJoY21kbGRDSXNJbUZ5WjNWdFpXNTBjeUlzSW14bGJtZDBhQ0lzSW5WdVpHVm1hVzVsWkNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1NVRkJTVUVzVTBGQlYwTXNVVUZCVVN4bFFVTnVRa01zVTBGQlYwUXNVVUZCVVN4blFrRkRia0pGTEhkQ1FVRXdRa2dzVTBGQlUwa3NTMEZEYmtORExGVkJRVmxNTEZOQlFWTk5MRWxCUlhwQ1RpeFRRVUZUVHl4SlFVRkpMRU5CUVVWRExHMUNRVUZ2UWl4VFFVRlRRU3h0UWtGQmJVSkRMRWRCUXpkRUxFOUJRVTlPTEhkQ1FVRjNRa1FzVTBGQlUwOHNSMEZCVTBNc1ZVRkJWVU1zVDBGQlV5eFBRVUZKUXl4RlFVRlpVQ3hWUVVGVlN5eFZRVUZWSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjemN1Y21WbWJHVmpkQzVuWlhRdGIzZHVMVzFsZEdGa1lYUmhMV3RsZVhNdWFuTWlmUT09IiwidmFyIG1ldGFkYXRhPXJlcXVpcmUoXCIuL19tZXRhZGF0YVwiKSxhbk9iamVjdD1yZXF1aXJlKFwiLi9fYW4tb2JqZWN0XCIpLG9yZGluYXJ5R2V0T3duTWV0YWRhdGE9bWV0YWRhdGEuZ2V0LHRvTWV0YUtleT1tZXRhZGF0YS5rZXk7bWV0YWRhdGEuZXhwKHtnZXRPd25NZXRhZGF0YTpmdW5jdGlvbiBnZXRPd25NZXRhZGF0YShhLHQpe3JldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKGEsYW5PYmplY3QodCksYXJndW1lbnRzLmxlbmd0aDwzP3ZvaWQgMDp0b01ldGFLZXkoYXJndW1lbnRzWzJdKSl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1eVpXWnNaV04wTG1kbGRDMXZkMjR0YldWMFlXUmhkR0V1YW5NaVhTd2libUZ0WlhNaU9sc2liV1YwWVdSaGRHRWlMQ0p5WlhGMWFYSmxJaXdpWVc1UFltcGxZM1FpTENKdmNtUnBibUZ5ZVVkbGRFOTNiazFsZEdGa1lYUmhJaXdpWjJWMElpd2lkRzlOWlhSaFMyVjVJaXdpYTJWNUlpd2laWGh3SWl3aVoyVjBUM2R1VFdWMFlXUmhkR0VpTENKdFpYUmhaR0YwWVV0bGVTSXNJblJoY21kbGRDSXNJbUZ5WjNWdFpXNTBjeUlzSW14bGJtZDBhQ0lzSW5WdVpHVm1hVzVsWkNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1NVRkJTVUVzVTBGQlYwTXNVVUZCVVN4bFFVTnVRa01zVTBGQlYwUXNVVUZCVVN4blFrRkRia0pGTEhWQ1FVRjVRa2dzVTBGQlUwa3NTVUZEYkVORExGVkJRVmxNTEZOQlFWTk5MRWxCUlhwQ1RpeFRRVUZUVHl4SlFVRkpMRU5CUVVWRExHVkJRV2RDTEZOQlFWTkJMR1ZCUVdWRExFVkJRV0ZETEVkQlEyeEZMRTlCUVU5UUxIVkNRVUYxUWswc1JVRkJZVkFzVTBGQlUxRXNSMEZEYUVSRExGVkJRVlZETEU5QlFWTXNUMEZCU1VNc1JVRkJXVklzVlVGQlZVMHNWVUZCVlNJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0zTG5KbFpteGxZM1F1WjJWMExXOTNiaTF0WlhSaFpHRjBZUzVxY3lKOSIsInZhciBtZXRhZGF0YT1yZXF1aXJlKFwiLi9fbWV0YWRhdGFcIiksYW5PYmplY3Q9cmVxdWlyZShcIi4vX2FuLW9iamVjdFwiKSxnZXRQcm90b3R5cGVPZj1yZXF1aXJlKFwiLi9fb2JqZWN0LWdwb1wiKSxvcmRpbmFyeUhhc093bk1ldGFkYXRhPW1ldGFkYXRhLmhhcyx0b01ldGFLZXk9bWV0YWRhdGEua2V5LG9yZGluYXJ5SGFzTWV0YWRhdGE9ZnVuY3Rpb24oYSx0LGUpe2lmKG9yZGluYXJ5SGFzT3duTWV0YWRhdGEoYSx0LGUpKXJldHVybiEwO3ZhciByPWdldFByb3RvdHlwZU9mKHQpO3JldHVybiBudWxsIT09ciYmb3JkaW5hcnlIYXNNZXRhZGF0YShhLHIsZSl9O21ldGFkYXRhLmV4cCh7aGFzTWV0YWRhdGE6ZnVuY3Rpb24gaGFzTWV0YWRhdGEoYSx0KXtyZXR1cm4gb3JkaW5hcnlIYXNNZXRhZGF0YShhLGFuT2JqZWN0KHQpLGFyZ3VtZW50cy5sZW5ndGg8Mz92b2lkIDA6dG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NXlaV1pzWldOMExtaGhjeTF0WlhSaFpHRjBZUzVxY3lKZExDSnVZVzFsY3lJNld5SnRaWFJoWkdGMFlTSXNJbkpsY1hWcGNtVWlMQ0poYms5aWFtVmpkQ0lzSW1kbGRGQnliM1J2ZEhsd1pVOW1JaXdpYjNKa2FXNWhjbmxJWVhOUGQyNU5aWFJoWkdGMFlTSXNJbWhoY3lJc0luUnZUV1YwWVV0bGVTSXNJbXRsZVNJc0ltOXlaR2x1WVhKNVNHRnpUV1YwWVdSaGRHRWlMQ0pOWlhSaFpHRjBZVXRsZVNJc0lrOGlMQ0pRSWl3aWNHRnlaVzUwSWl3aVpYaHdJaXdpYUdGelRXVjBZV1JoZEdFaUxDSnRaWFJoWkdGMFlVdGxlU0lzSW5SaGNtZGxkQ0lzSW1GeVozVnRaVzUwY3lJc0lteGxibWQwYUNJc0luVnVaR1ZtYVc1bFpDSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNTVUZCU1VFc1UwRkJWME1zVVVGQlVTeGxRVU51UWtNc1UwRkJWMFFzVVVGQlVTeG5Ra0ZEYmtKRkxHVkJRV2xDUml4UlFVRlJMR2xDUVVONlFrY3NkVUpCUVhsQ1NpeFRRVUZUU3l4SlFVTnNRME1zVlVGQldVNHNVMEZCVTA4c1NVRkZja0pETEc5Q1FVRnpRaXhUUVVGVlF5eEZRVUZoUXl4RlFVRkhReXhIUVVWc1JDeEhRVVJoVUN4MVFrRkJkVUpMTEVWQlFXRkRMRVZCUVVkRExFZEJRM2hETEU5QlFVOHNSVUZEYmtJc1NVRkJTVU1zUlVGQlUxUXNaVUZCWlU4c1IwRkROVUlzVDBGQmEwSXNUMEZCV0VVc1IwRkJhMEpLTEc5Q1FVRnZRa01zUlVGQllVY3NSVUZCVVVRc1NVRkhjRVZZTEZOQlFWTmhMRWxCUVVrc1EwRkJSVU1zV1VGQllTeFRRVUZUUVN4WlFVRlpReXhGUVVGaFF5eEhRVU0xUkN4UFFVRlBVaXh2UWtGQmIwSlBMRVZCUVdGaUxGTkJRVk5qTEVkQlFWTkRMRlZCUVZWRExFOUJRVk1zVDBGQlNVTXNSVUZCV1dJc1ZVRkJWVmNzVlVGQlZTSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNM0xuSmxabXhsWTNRdWFHRnpMVzFsZEdGa1lYUmhMbXB6SW4wPSIsInZhciBtZXRhZGF0YT1yZXF1aXJlKFwiLi9fbWV0YWRhdGFcIiksYW5PYmplY3Q9cmVxdWlyZShcIi4vX2FuLW9iamVjdFwiKSxvcmRpbmFyeUhhc093bk1ldGFkYXRhPW1ldGFkYXRhLmhhcyx0b01ldGFLZXk9bWV0YWRhdGEua2V5O21ldGFkYXRhLmV4cCh7aGFzT3duTWV0YWRhdGE6ZnVuY3Rpb24gaGFzT3duTWV0YWRhdGEoYSx0KXtyZXR1cm4gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShhLGFuT2JqZWN0KHQpLGFyZ3VtZW50cy5sZW5ndGg8Mz92b2lkIDA6dG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NXlaV1pzWldOMExtaGhjeTF2ZDI0dGJXVjBZV1JoZEdFdWFuTWlYU3dpYm1GdFpYTWlPbHNpYldWMFlXUmhkR0VpTENKeVpYRjFhWEpsSWl3aVlXNVBZbXBsWTNRaUxDSnZjbVJwYm1GeWVVaGhjMDkzYmsxbGRHRmtZWFJoSWl3aWFHRnpJaXdpZEc5TlpYUmhTMlY1SWl3aWEyVjVJaXdpWlhod0lpd2lhR0Z6VDNkdVRXVjBZV1JoZEdFaUxDSnRaWFJoWkdGMFlVdGxlU0lzSW5SaGNtZGxkQ0lzSW1GeVozVnRaVzUwY3lJc0lteGxibWQwYUNJc0luVnVaR1ZtYVc1bFpDSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNTVUZCU1VFc1UwRkJWME1zVVVGQlVTeGxRVU51UWtNc1UwRkJWMFFzVVVGQlVTeG5Ra0ZEYmtKRkxIVkNRVUY1UWtnc1UwRkJVMGtzU1VGRGJFTkRMRlZCUVZsTUxGTkJRVk5OTEVsQlJYcENUaXhUUVVGVFR5eEpRVUZKTEVOQlFVVkRMR1ZCUVdkQ0xGTkJRVk5CTEdWQlFXVkRMRVZCUVdGRExFZEJRMnhGTEU5QlFVOVFMSFZDUVVGMVFrMHNSVUZCWVZBc1UwRkJVMUVzUjBGRGFFUkRMRlZCUVZWRExFOUJRVk1zVDBGQlNVTXNSVUZCV1ZJc1ZVRkJWVTBzVlVGQlZTSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNM0xuSmxabXhsWTNRdWFHRnpMVzkzYmkxdFpYUmhaR0YwWVM1cWN5SjkiLCJ2YXIgJG1ldGFkYXRhPXJlcXVpcmUoXCIuL19tZXRhZGF0YVwiKSxhbk9iamVjdD1yZXF1aXJlKFwiLi9fYW4tb2JqZWN0XCIpLGFGdW5jdGlvbj1yZXF1aXJlKFwiLi9fYS1mdW5jdGlvblwiKSx0b01ldGFLZXk9JG1ldGFkYXRhLmtleSxvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhPSRtZXRhZGF0YS5zZXQ7JG1ldGFkYXRhLmV4cCh7bWV0YWRhdGE6ZnVuY3Rpb24gbWV0YWRhdGEoYSx0KXtyZXR1cm4gZnVuY3Rpb24gZGVjb3JhdG9yKGUsbil7b3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShhLHQsKHZvaWQgMCE9PW4/YW5PYmplY3Q6YUZ1bmN0aW9uKShlKSx0b01ldGFLZXkobikpfX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOeTV5Wldac1pXTjBMbTFsZEdGa1lYUmhMbXB6SWwwc0ltNWhiV1Z6SWpwYklpUnRaWFJoWkdGMFlTSXNJbkpsY1hWcGNtVWlMQ0poYms5aWFtVmpkQ0lzSW1GR2RXNWpkR2x2YmlJc0luUnZUV1YwWVV0bGVTSXNJbXRsZVNJc0ltOXlaR2x1WVhKNVJHVm1hVzVsVDNkdVRXVjBZV1JoZEdFaUxDSnpaWFFpTENKbGVIQWlMQ0p0WlhSaFpHRjBZU0lzSW0xbGRHRmtZWFJoUzJWNUlpd2liV1YwWVdSaGRHRldZV3gxWlNJc0ltUmxZMjl5WVhSdmNpSXNJblJoY21kbGRDSXNJblJoY21kbGRFdGxlU0lzSW5WdVpHVm1hVzVsWkNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1NVRkJTVUVzVlVGQldVTXNVVUZCVVN4bFFVTndRa01zVTBGQlYwUXNVVUZCVVN4blFrRkRia0pGTEZWQlFWbEdMRkZCUVZFc2FVSkJRM0JDUnl4VlFVRlpTaXhWUVVGVlN5eEpRVU4wUWtNc01FSkJRVFJDVGl4VlFVRlZUeXhKUVVVeFExQXNWVUZCVlZFc1NVRkJTU3hEUVVGRlF5eFRRVUZWTEZOQlFWTkJMRk5CUVZORExFVkJRV0ZETEVkQlEzWkVMRTlCUVU4c1UwRkJVME1zVlVGQlZVTXNSVUZCVVVNc1IwRkRhRU5TTERCQ1FVTkZTU3hGUVVGaFF5eFJRVU5GU1N4SlFVRmtSQ3hGUVVFd1Fsb3NVMEZCVjBNc1YwRkJWMVVzUjBGRGFrUlVMRlZCUVZWVklpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pjdWNtVm1iR1ZqZEM1dFpYUmhaR0YwWVM1cWN5SjkiLCJyZXF1aXJlKFwiLi9fc2V0LWNvbGxlY3Rpb24tZnJvbVwiKShcIlNldFwiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOeTV6WlhRdVpuSnZiUzVxY3lKZExDSnVZVzFsY3lJNld5SnlaWEYxYVhKbElsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFVRXNVVUZCVVN4NVFrRkJVa0VzUTBGQmEwTWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek55NXpaWFF1Wm5KdmJTNXFjeUo5IiwicmVxdWlyZShcIi4vX3NldC1jb2xsZWN0aW9uLW9mXCIpKFwiU2V0XCIpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NXpaWFF1YjJZdWFuTWlYU3dpYm1GdFpYTWlPbHNpY21WeGRXbHlaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRMEZCTEZGQlFWRXNkVUpCUVZKQkxFTkJRV2RESWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjemN1YzJWMExtOW1MbXB6SW4wPSIsInZhciAkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIik7JGV4cG9ydCgkZXhwb3J0LlArJGV4cG9ydC5SLFwiU2V0XCIse3RvSlNPTjpyZXF1aXJlKFwiLi9fY29sbGVjdGlvbi10by1qc29uXCIpKFwiU2V0XCIpfSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1elpYUXVkRzh0YW5OdmJpNXFjeUpkTENKdVlXMWxjeUk2V3lJa1pYaHdiM0owSWl3aWNtVnhkV2x5WlNJc0lsQWlMQ0pTSWl3aWRHOUtVMDlPSWwwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkpRU3hSUVVGVlF5eFJRVUZSTEdGQlJYUkNSQ3hSUVVGUlFTeFJRVUZSUlN4RlFVRkpSaXhSUVVGUlJ5eEZRVUZITEUxQlFVOHNRMEZCUlVNc1QwRkJVVWdzVVVGQlVTeDNRa0ZCVWtFc1EwRkJhVU1pTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOeTV6WlhRdWRHOHRhbk52Ymk1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLCRhdD1yZXF1aXJlKFwiLi9fc3RyaW5nLWF0XCIpKCEwKTskZXhwb3J0KCRleHBvcnQuUCxcIlN0cmluZ1wiLHthdDpmdW5jdGlvbiBhdCh0KXtyZXR1cm4gJGF0KHRoaXMsdCl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1emRISnBibWN1WVhRdWFuTWlYU3dpYm1GdFpYTWlPbHNpSkdWNGNHOXlkQ0lzSW5KbGNYVnBjbVVpTENJa1lYUWlMQ0pRSWl3aVlYUWlMQ0p3YjNNaUxDSjBhR2x6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4aFFVVkJMRWxCUVVsQkxGRkJRVlZETEZGQlFWRXNZVUZEYkVKRExFbEJRVTFFTEZGQlFWRXNaVUZCVWtFc1JVRkJkMElzUjBGRmJFTkVMRkZCUVZGQkxGRkJRVkZITEVWQlFVY3NVMEZCVlN4RFFVTXpRa01zUjBGQlNTeFRRVUZUUVN4SFFVRkhReXhIUVVOa0xFOUJRVTlJTEVsQlFVbEpMRXRCUVUxRUlpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pjdWMzUnlhVzVuTG1GMExtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKSxkZWZpbmVkPXJlcXVpcmUoXCIuL19kZWZpbmVkXCIpLHRvTGVuZ3RoPXJlcXVpcmUoXCIuL190by1sZW5ndGhcIiksaXNSZWdFeHA9cmVxdWlyZShcIi4vX2lzLXJlZ2V4cFwiKSxnZXRGbGFncz1yZXF1aXJlKFwiLi9fZmxhZ3NcIiksUmVnRXhwUHJvdG89UmVnRXhwLnByb3RvdHlwZSwkUmVnRXhwU3RyaW5nSXRlcmF0b3I9ZnVuY3Rpb24oZSxyKXt0aGlzLl9yPWUsdGhpcy5fcz1yfTtyZXF1aXJlKFwiLi9faXRlci1jcmVhdGVcIikoJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yLFwiUmVnRXhwIFN0cmluZ1wiLGZ1bmN0aW9uIG5leHQoKXt2YXIgZT10aGlzLl9yLmV4ZWModGhpcy5fcyk7cmV0dXJue3ZhbHVlOmUsZG9uZTpudWxsPT09ZX19KSwkZXhwb3J0KCRleHBvcnQuUCxcIlN0cmluZ1wiLHttYXRjaEFsbDpmdW5jdGlvbiBtYXRjaEFsbChlKXtpZihkZWZpbmVkKHRoaXMpLCFpc1JlZ0V4cChlKSl0aHJvdyBUeXBlRXJyb3IoZStcIiBpcyBub3QgYSByZWdleHAhXCIpO3ZhciByPVN0cmluZyh0aGlzKSx0PVwiZmxhZ3NcImluIFJlZ0V4cFByb3RvP1N0cmluZyhlLmZsYWdzKTpnZXRGbGFncy5jYWxsKGUpLGk9bmV3IFJlZ0V4cChlLnNvdXJjZSx+dC5pbmRleE9mKFwiZ1wiKT90OlwiZ1wiK3QpO3JldHVybiBpLmxhc3RJbmRleD10b0xlbmd0aChlLmxhc3RJbmRleCksbmV3ICRSZWdFeHBTdHJpbmdJdGVyYXRvcihpLHIpfX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NXpkSEpwYm1jdWJXRjBZMmd0WVd4c0xtcHpJbDBzSW01aGJXVnpJanBiSWlSbGVIQnZjblFpTENKeVpYRjFhWEpsSWl3aVpHVm1hVzVsWkNJc0luUnZUR1Z1WjNSb0lpd2lhWE5TWldkRmVIQWlMQ0puWlhSR2JHRm5jeUlzSWxKbFowVjRjRkJ5YjNSdklpd2lVbVZuUlhod0lpd2ljSEp2ZEc5MGVYQmxJaXdpSkZKbFowVjRjRk4wY21sdVowbDBaWEpoZEc5eUlpd2ljbVZuWlhod0lpd2ljM1J5YVc1bklpd2lkR2hwY3lJc0lsOXlJaXdpWDNNaUxDSnVaWGgwSWl3aWJXRjBZMmdpTENKbGVHVmpJaXdpZG1Gc2RXVWlMQ0prYjI1bElpd2lVQ0lzSW0xaGRHTm9RV3hzSWl3aVZIbHdaVVZ5Y205eUlpd2lVeUlzSWxOMGNtbHVaeUlzSW1ac1lXZHpJaXdpWTJGc2JDSXNJbko0SWl3aWMyOTFjbU5sSWl3aWFXNWtaWGhQWmlJc0lteGhjM1JKYm1SbGVDSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZGUVN4SlFVRkpRU3hSUVVGVlF5eFJRVUZSTEdGQlEyeENReXhSUVVGVlJDeFJRVUZSTEdOQlEyeENSU3hUUVVGWFJpeFJRVUZSTEdkQ1FVTnVRa2NzVTBGQlYwZ3NVVUZCVVN4blFrRkRia0pKTEZOQlFWZEtMRkZCUVZFc1dVRkRia0pMTEZsQlFXTkRMRTlCUVU5RExGVkJSWEpDUXl4elFrRkJkMElzVTBGQlZVTXNSVUZCVVVNc1IwRkROVU5ETEV0QlFVdERMRWRCUVV0SUxFVkJRMVpGTEV0QlFVdEZMRWRCUVV0SUxFZEJSMXBXTEZGQlFWRXNhVUpCUVZKQkxFTkJRVEJDVVN4elFrRkJkVUlzWjBKQlFXbENMRk5CUVZOTkxFOUJRM3BGTEVsQlFVbERMRVZCUVZGS0xFdEJRVXRETEVkQlFVZEpMRXRCUVV0TUxFdEJRVXRGTEVsQlF6bENMRTFCUVU4c1EwRkJSVWtzVFVGQlQwWXNSVUZCVDBjc1MwRkJaMElzVDBGQlZrZ3NTMEZITDBKb1FpeFJRVUZSUVN4UlFVRlJiMElzUlVGQlJ5eFRRVUZWTEVOQlF6TkNReXhUUVVGVkxGTkJRVk5CTEZOQlFWTllMRWRCUlRGQ0xFZEJSRUZTTEZGQlFWRlZMRTlCUTBoU0xGTkJRVk5OTEVkQlFWTXNUVUZCVFZrc1ZVRkJWVm9zUlVGQlV5eHhRa0ZEYUVRc1NVRkJTV0VzUlVGQlNVTXNUMEZCVDFvc1RVRkRXR0VzUlVGQlVTeFZRVUZYYmtJc1dVRkJZMnRDTEU5QlFVOWtMRVZCUVU5bExFOUJRVk53UWl4VFFVRlRjVUlzUzBGQlMyaENMRWRCUTNSRmFVSXNSVUZCU3l4SlFVRkpjRUlzVDBGQlQwY3NSVUZCVDJ0Q0xGRkJRVk5JTEVWQlFVMUpMRkZCUVZFc1MwRkJUMG9zUlVGQlVTeEpRVUZOUVN4SFFVVjJSU3hQUVVSQlJTeEZRVUZIUnl4VlFVRlpNMElzVTBGQlUwOHNSVUZCVDI5Q0xGZEJRM2hDTEVsQlFVbHlRaXh6UWtGQmMwSnJRaXhGUVVGSlNpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNM0xuTjBjbWx1Wnk1dFlYUmphQzFoYkd3dWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKSwkcGFkPXJlcXVpcmUoXCIuL19zdHJpbmctcGFkXCIpLHVzZXJBZ2VudD1yZXF1aXJlKFwiLi9fdXNlci1hZ2VudFwiKTskZXhwb3J0KCRleHBvcnQuUCskZXhwb3J0LkYqL1ZlcnNpb25cXC8xMFxcLlxcZCsoXFwuXFxkKyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpLFwiU3RyaW5nXCIse3BhZEVuZDpmdW5jdGlvbiBwYWRFbmQoZSl7cmV0dXJuICRwYWQodGhpcyxlLGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwLCExKX19KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOeTV6ZEhKcGJtY3VjR0ZrTFdWdVpDNXFjeUpkTENKdVlXMWxjeUk2V3lJa1pYaHdiM0owSWl3aWNtVnhkV2x5WlNJc0lpUndZV1FpTENKMWMyVnlRV2RsYm5RaUxDSlFJaXdpUmlJc0luUmxjM1FpTENKd1lXUkZibVFpTENKdFlYaE1aVzVuZEdnaUxDSjBhR2x6SWl3aVlYSm5kVzFsYm5Seklpd2liR1Z1WjNSb0lpd2lkVzVrWldacGJtVmtJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVWQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc1lVRkRiRUpETEV0QlFVOUVMRkZCUVZFc2FVSkJRMlpGTEZWQlFWbEdMRkZCUVZFc2FVSkJSM2hDUkN4UlFVRlJRU3hSUVVGUlNTeEZRVUZKU2l4UlFVRlJTeXhGUVVGSkxHOURRVUZ2UTBNc1MwRkJTMGdzVjBGQldTeFRRVUZWTEVOQlF6ZEdTU3hQUVVGUkxGTkJRVk5CTEU5QlFVOURMRWRCUTNSQ0xFOUJRVTlPTEV0QlFVdFBMRXRCUVUxRUxFVkJRVmRGTEZWQlFWVkRMRTlCUVZNc1JVRkJTVVFzVlVGQlZTeFJRVUZMUlN4SFFVRlhJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6Y3VjM1J5YVc1bkxuQmhaQzFsYm1RdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyICRleHBvcnQ9cmVxdWlyZShcIi4vX2V4cG9ydFwiKSwkcGFkPXJlcXVpcmUoXCIuL19zdHJpbmctcGFkXCIpLHVzZXJBZ2VudD1yZXF1aXJlKFwiLi9fdXNlci1hZ2VudFwiKTskZXhwb3J0KCRleHBvcnQuUCskZXhwb3J0LkYqL1ZlcnNpb25cXC8xMFxcLlxcZCsoXFwuXFxkKyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpLFwiU3RyaW5nXCIse3BhZFN0YXJ0OmZ1bmN0aW9uIHBhZFN0YXJ0KHIpe3JldHVybiAkcGFkKHRoaXMscixhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCwhMCl9fSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1emRISnBibWN1Y0dGa0xYTjBZWEowTG1weklsMHNJbTVoYldWeklqcGJJaVJsZUhCdmNuUWlMQ0p5WlhGMWFYSmxJaXdpSkhCaFpDSXNJblZ6WlhKQloyVnVkQ0lzSWxBaUxDSkdJaXdpZEdWemRDSXNJbkJoWkZOMFlYSjBJaXdpYldGNFRHVnVaM1JvSWl3aWRHaHBjeUlzSW1GeVozVnRaVzUwY3lJc0lteGxibWQwYUNJc0luVnVaR1ZtYVc1bFpDSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZGUVN4SlFVRkpRU3hSUVVGVlF5eFJRVUZSTEdGQlEyeENReXhMUVVGUFJDeFJRVUZSTEdsQ1FVTm1SU3hWUVVGWlJpeFJRVUZSTEdsQ1FVZDRRa1FzVVVGQlVVRXNVVUZCVVVrc1JVRkJTVW9zVVVGQlVVc3NSVUZCU1N4dlEwRkJiME5ETEV0QlFVdElMRmRCUVZrc1UwRkJWU3hEUVVNM1Jra3NVMEZCVlN4VFFVRlRRU3hUUVVGVFF5eEhRVU14UWl4UFFVRlBUaXhMUVVGTFR5eExRVUZOUkN4RlFVRlhSU3hWUVVGVlF5eFBRVUZUTEVWQlFVbEVMRlZCUVZVc1VVRkJTMFVzUjBGQlZ5SXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNM0xuTjBjbWx1Wnk1d1lXUXRjM1JoY25RdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7cmVxdWlyZShcIi4vX3N0cmluZy10cmltXCIpKFwidHJpbUxlZnRcIixmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24gdHJpbUxlZnQoKXtyZXR1cm4gdCh0aGlzLDEpfX0sXCJ0cmltU3RhcnRcIik7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1emRISnBibWN1ZEhKcGJTMXNaV1owTG1weklsMHNJbTVoYldWeklqcGJJbkpsY1hWcGNtVWlMQ0lrZEhKcGJTSXNJblJ5YVcxTVpXWjBJaXdpZEdocGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZGUVVFc1VVRkJVU3hwUWtGQlVrRXNRMEZCTUVJc1YwRkJXU3hUUVVGVlF5eEhRVU01UXl4UFFVRlBMRk5CUVZORExGZEJRMlFzVDBGQlQwUXNSVUZCVFVVc1MwRkJUU3hMUVVWd1FpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNM0xuTjBjbWx1Wnk1MGNtbHRMV3hsWm5RdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7cmVxdWlyZShcIi4vX3N0cmluZy10cmltXCIpKFwidHJpbVJpZ2h0XCIsZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uIHRyaW1SaWdodCgpe3JldHVybiB0KHRoaXMsMil9fSxcInRyaW1FbmRcIik7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1emRISnBibWN1ZEhKcGJTMXlhV2RvZEM1cWN5SmRMQ0p1WVcxbGN5STZXeUp5WlhGMWFYSmxJaXdpSkhSeWFXMGlMQ0owY21sdFVtbG5hSFFpTENKMGFHbHpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVWQlFTeFJRVUZSTEdsQ1FVRlNRU3hEUVVFd1FpeFpRVUZoTEZOQlFWVkRMRWRCUXk5RExFOUJRVThzVTBGQlUwTXNXVUZEWkN4UFFVRlBSQ3hGUVVGTlJTeExRVUZOTEV0QlJYQkNJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6Y3VjM1J5YVc1bkxuUnlhVzB0Y21sbmFIUXVhbk1pZlE9PSIsInJlcXVpcmUoXCIuL193a3MtZGVmaW5lXCIpKFwiYXN5bmNJdGVyYXRvclwiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOeTV6ZVcxaWIyd3VZWE41Ym1NdGFYUmxjbUYwYjNJdWFuTWlYU3dpYm1GdFpYTWlPbHNpY21WeGRXbHlaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUZCTEZGQlFWRXNaMEpCUVZKQkxFTkJRWGxDSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjemN1YzNsdFltOXNMbUZ6ZVc1akxXbDBaWEpoZEc5eUxtcHpJbjA9IiwicmVxdWlyZShcIi4vX3drcy1kZWZpbmVcIikoXCJvYnNlcnZhYmxlXCIpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NXplVzFpYjJ3dWIySnpaWEoyWVdKc1pTNXFjeUpkTENKdVlXMWxjeUk2V3lKeVpYRjFhWEpsSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVVFc1VVRkJVU3huUWtGQlVrRXNRMEZCZVVJaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tnk1emVXMWliMnd1YjJKelpYSjJZV0pzWlM1cWN5SjkiLCJ2YXIgJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpOyRleHBvcnQoJGV4cG9ydC5TLFwiU3lzdGVtXCIse2dsb2JhbDpyZXF1aXJlKFwiLi9fZ2xvYmFsXCIpfSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1emVYTjBaVzB1WjJ4dlltRnNMbXB6SWwwc0ltNWhiV1Z6SWpwYklpUmxlSEJ2Y25RaUxDSnlaWEYxYVhKbElpd2lVeUlzSW1kc2IySmhiQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRMEVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVWMFFrUXNVVUZCVVVFc1VVRkJVVVVzUlVGQlJ5eFRRVUZWTEVOQlFVVkRMRTlCUVZGR0xGRkJRVkVpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOeTV6ZVhOMFpXMHVaMnh2WW1Gc0xtcHpJbjA9IiwicmVxdWlyZShcIi4vX3NldC1jb2xsZWN0aW9uLWZyb21cIikoXCJXZWFrTWFwXCIpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NTNaV0ZyTFcxaGNDNW1jbTl0TG1weklsMHNJbTVoYldWeklqcGJJbkpsY1hWcGNtVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVTkJRU3hSUVVGUkxIbENRVUZTUVN4RFFVRnJReUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTNMbmRsWVdzdGJXRndMbVp5YjIwdWFuTWlmUT09IiwicmVxdWlyZShcIi4vX3NldC1jb2xsZWN0aW9uLW9mXCIpKFwiV2Vha01hcFwiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnpOeTUzWldGckxXMWhjQzV2Wmk1cWN5SmRMQ0p1WVcxbGN5STZXeUp5WlhGMWFYSmxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRVUVzVVVGQlVTeDFRa0ZCVWtFc1EwRkJaME1pTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOeTUzWldGckxXMWhjQzV2Wmk1cWN5SjkiLCJyZXF1aXJlKFwiLi9fc2V0LWNvbGxlY3Rpb24tZnJvbVwiKShcIldlYWtTZXRcIik7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6Tnk1M1pXRnJMWE5sZEM1bWNtOXRMbXB6SWwwc0ltNWhiV1Z6SWpwYkluSmxjWFZwY21VaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVOQlFTeFJRVUZSTEhsQ1FVRlNRU3hEUVVGclF5SXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNM0xuZGxZV3N0YzJWMExtWnliMjB1YW5NaWZRPT0iLCJyZXF1aXJlKFwiLi9fc2V0LWNvbGxlY3Rpb24tb2ZcIikoXCJXZWFrU2V0XCIpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wek55NTNaV0ZyTFhObGRDNXZaaTVxY3lKZExDSnVZVzFsY3lJNld5SnlaWEYxYVhKbElsMHNJbTFoY0hCcGJtZHpJam9pUVVGRFFVRXNVVUZCVVN4MVFrRkJVa0VzUTBGQlowTWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek55NTNaV0ZyTFhObGRDNXZaaTVxY3lKOSIsImZvcih2YXIgJGl0ZXJhdG9ycz1yZXF1aXJlKFwiLi9lczYuYXJyYXkuaXRlcmF0b3JcIiksZ2V0S2V5cz1yZXF1aXJlKFwiLi9fb2JqZWN0LWtleXNcIikscmVkZWZpbmU9cmVxdWlyZShcIi4vX3JlZGVmaW5lXCIpLGdsb2JhbD1yZXF1aXJlKFwiLi9fZ2xvYmFsXCIpLGhpZGU9cmVxdWlyZShcIi4vX2hpZGVcIiksSXRlcmF0b3JzPXJlcXVpcmUoXCIuL19pdGVyYXRvcnNcIiksd2tzPXJlcXVpcmUoXCIuL193a3NcIiksSVRFUkFUT1I9d2tzKFwiaXRlcmF0b3JcIiksVE9fU1RSSU5HX1RBRz13a3MoXCJ0b1N0cmluZ1RhZ1wiKSxBcnJheVZhbHVlcz1JdGVyYXRvcnMuQXJyYXksRE9NSXRlcmFibGVzPXtDU1NSdWxlTGlzdDohMCxDU1NTdHlsZURlY2xhcmF0aW9uOiExLENTU1ZhbHVlTGlzdDohMSxDbGllbnRSZWN0TGlzdDohMSxET01SZWN0TGlzdDohMSxET01TdHJpbmdMaXN0OiExLERPTVRva2VuTGlzdDohMCxEYXRhVHJhbnNmZXJJdGVtTGlzdDohMSxGaWxlTGlzdDohMSxIVE1MQWxsQ29sbGVjdGlvbjohMSxIVE1MQ29sbGVjdGlvbjohMSxIVE1MRm9ybUVsZW1lbnQ6ITEsSFRNTFNlbGVjdEVsZW1lbnQ6ITEsTWVkaWFMaXN0OiEwLE1pbWVUeXBlQXJyYXk6ITEsTmFtZWROb2RlTWFwOiExLE5vZGVMaXN0OiEwLFBhaW50UmVxdWVzdExpc3Q6ITEsUGx1Z2luOiExLFBsdWdpbkFycmF5OiExLFNWR0xlbmd0aExpc3Q6ITEsU1ZHTnVtYmVyTGlzdDohMSxTVkdQYXRoU2VnTGlzdDohMSxTVkdQb2ludExpc3Q6ITEsU1ZHU3RyaW5nTGlzdDohMSxTVkdUcmFuc2Zvcm1MaXN0OiExLFNvdXJjZUJ1ZmZlckxpc3Q6ITEsU3R5bGVTaGVldExpc3Q6ITAsVGV4dFRyYWNrQ3VlTGlzdDohMSxUZXh0VHJhY2tMaXN0OiExLFRvdWNoTGlzdDohMX0sY29sbGVjdGlvbnM9Z2V0S2V5cyhET01JdGVyYWJsZXMpLGk9MDtpPGNvbGxlY3Rpb25zLmxlbmd0aDtpKyspe3ZhciBrZXksTkFNRT1jb2xsZWN0aW9uc1tpXSxleHBsaWNpdD1ET01JdGVyYWJsZXNbTkFNRV0sQ29sbGVjdGlvbj1nbG9iYWxbTkFNRV0scHJvdG89Q29sbGVjdGlvbiYmQ29sbGVjdGlvbi5wcm90b3R5cGU7aWYocHJvdG8mJihwcm90b1tJVEVSQVRPUl18fGhpZGUocHJvdG8sSVRFUkFUT1IsQXJyYXlWYWx1ZXMpLHByb3RvW1RPX1NUUklOR19UQUddfHxoaWRlKHByb3RvLFRPX1NUUklOR19UQUcsTkFNRSksSXRlcmF0b3JzW05BTUVdPUFycmF5VmFsdWVzLGV4cGxpY2l0KSlmb3Ioa2V5IGluICRpdGVyYXRvcnMpcHJvdG9ba2V5XXx8cmVkZWZpbmUocHJvdG8sa2V5LCRpdGVyYXRvcnNba2V5XSwhMCl9XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWWk1a2IyMHVhWFJsY21GaWJHVXVhbk1pWFN3aWJtRnRaWE1pT2xzaUpHbDBaWEpoZEc5eWN5SXNJbkpsY1hWcGNtVWlMQ0puWlhSTFpYbHpJaXdpY21Wa1pXWnBibVVpTENKbmJHOWlZV3dpTENKb2FXUmxJaXdpU1hSbGNtRjBiM0p6SWl3aWQydHpJaXdpU1ZSRlVrRlVUMUlpTENKVVQxOVRWRkpKVGtkZlZFRkhJaXdpUVhKeVlYbFdZV3gxWlhNaUxDSkJjbkpoZVNJc0lrUlBUVWwwWlhKaFlteGxjeUlzSWtOVFUxSjFiR1ZNYVhOMElpd2lRMU5UVTNSNWJHVkVaV05zWVhKaGRHbHZiaUlzSWtOVFUxWmhiSFZsVEdsemRDSXNJa05zYVdWdWRGSmxZM1JNYVhOMElpd2lSRTlOVW1WamRFeHBjM1FpTENKRVQwMVRkSEpwYm1kTWFYTjBJaXdpUkU5TlZHOXJaVzVNYVhOMElpd2lSR0YwWVZSeVlXNXpabVZ5U1hSbGJVeHBjM1FpTENKR2FXeGxUR2x6ZENJc0lraFVUVXhCYkd4RGIyeHNaV04wYVc5dUlpd2lTRlJOVEVOdmJHeGxZM1JwYjI0aUxDSklWRTFNUm05eWJVVnNaVzFsYm5RaUxDSklWRTFNVTJWc1pXTjBSV3hsYldWdWRDSXNJazFsWkdsaFRHbHpkQ0lzSWsxcGJXVlVlWEJsUVhKeVlYa2lMQ0pPWVcxbFpFNXZaR1ZOWVhBaUxDSk9iMlJsVEdsemRDSXNJbEJoYVc1MFVtVnhkV1Z6ZEV4cGMzUWlMQ0pRYkhWbmFXNGlMQ0pRYkhWbmFXNUJjbkpoZVNJc0lsTldSMHhsYm1kMGFFeHBjM1FpTENKVFZrZE9kVzFpWlhKTWFYTjBJaXdpVTFaSFVHRjBhRk5sWjB4cGMzUWlMQ0pUVmtkUWIybHVkRXhwYzNRaUxDSlRWa2RUZEhKcGJtZE1hWE4wSWl3aVUxWkhWSEpoYm5ObWIzSnRUR2x6ZENJc0lsTnZkWEpqWlVKMVptWmxja3hwYzNRaUxDSlRkSGxzWlZOb1pXVjBUR2x6ZENJc0lsUmxlSFJVY21GamEwTjFaVXhwYzNRaUxDSlVaWGgwVkhKaFkydE1hWE4wSWl3aVZHOTFZMmhNYVhOMElpd2lZMjlzYkdWamRHbHZibk1pTENKcElpd2liR1Z1WjNSb0lpd2lhMlY1SWl3aVRrRk5SU0lzSW1WNGNHeHBZMmwwSWl3aVEyOXNiR1ZqZEdsdmJpSXNJbkJ5YjNSdklpd2ljSEp2ZEc5MGVYQmxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRTJRMEVzU1VFM1EwRXNTVUZCU1VFc1YwRkJZVU1zVVVGQlVTeDNRa0ZEY2tKRExGRkJRVlZFTEZGQlFWRXNhMEpCUTJ4Q1JTeFRRVUZYUml4UlFVRlJMR1ZCUTI1Q1J5eFBRVUZUU0N4UlFVRlJMR0ZCUTJwQ1NTeExRVUZQU2l4UlFVRlJMRmRCUTJaTExGVkJRVmxNTEZGQlFWRXNaMEpCUTNCQ1RTeEpRVUZOVGl4UlFVRlJMRlZCUTJSUExGTkJRVmRFTEVsQlFVa3NXVUZEWmtVc1kwRkJaMEpHTEVsQlFVa3NaVUZEY0VKSExGbEJRV05LTEZWQlFWVkxMRTFCUlhoQ1F5eGhRVUZsTEVOQlEycENReXhoUVVGaExFVkJRMkpETEhGQ1FVRnhRaXhGUVVOeVFrTXNZMEZCWXl4RlFVTmtReXhuUWtGQlowSXNSVUZEYUVKRExHRkJRV0VzUlVGRFlrTXNaVUZCWlN4RlFVTm1ReXhqUVVGakxFVkJRMlJETEhOQ1FVRnpRaXhGUVVOMFFrTXNWVUZCVlN4RlFVTldReXh0UWtGQmJVSXNSVUZEYmtKRExHZENRVUZuUWl4RlFVTm9Ra01zYVVKQlFXbENMRVZCUTJwQ1F5eHRRa0ZCYlVJc1JVRkRia0pETEZkQlFWY3NSVUZEV0VNc1pVRkJaU3hGUVVObVF5eGpRVUZqTEVWQlEyUkRMRlZCUVZVc1JVRkRWa01zYTBKQlFXdENMRVZCUTJ4Q1F5eFJRVUZSTEVWQlExSkRMR0ZCUVdFc1JVRkRZa01zWlVGQlpTeEZRVU5tUXl4bFFVRmxMRVZCUTJaRExHZENRVUZuUWl4RlFVTm9Ra01zWTBGQll5eEZRVU5rUXl4bFFVRmxMRVZCUTJaRExHdENRVUZyUWl4RlFVTnNRa01zYTBKQlFXdENMRVZCUTJ4Q1F5eG5Ra0ZCWjBJc1JVRkRhRUpETEd0Q1FVRnJRaXhGUVVOc1FrTXNaVUZCWlN4RlFVTm1ReXhYUVVGWExFZEJSMHBETEZsQlFXTXhReXhSUVVGUlZTeGpRVUZsYVVNc1JVRkJTU3hGUVVGSFFTeEZRVUZKUkN4WlFVRlpSU3hQUVVGUlJDeEpRVUZMTEVOQlEyaEdMRWxCU1VsRkxFbEJTa0ZETEV0QlFVOUtMRmxCUVZsRExFZEJRMjVDU1N4VFFVRlhja01zWVVGQllXOURMRTFCUTNoQ1JTeFhRVUZoT1VNc1QwRkJUelJETEUxQlEzQkNSeXhOUVVGUlJDeFpRVUZqUVN4WFFVRlhSU3hWUVVWeVF5eEhRVUZKUkN4UlFVTkhRU3hOUVVGTk0wTXNWMEZCVjBnc1MwRkJTemhETEUxQlFVOHpReXhUUVVGVlJTeGhRVU4yUTNsRExFMUJRVTB4UXl4blFrRkJaMEpLTEV0QlFVczRReXhOUVVGUE1VTXNZMEZCWlhWRExFMUJRM1JFTVVNc1ZVRkJWVEJETEUxQlFWRjBReXhaUVVOa2RVTXNWVUZCVlN4SlFVRkxSaXhQUVVGUEwwTXNWMEZCYVVKdFJDeE5RVUZOU2l4TlFVRk5OVU1zVTBGQlUyZEVMRTFCUVU5S0xFbEJRVXN2UXl4WFFVRlhLME1zVFVGQlRTSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12ZDJWaUxtUnZiUzVwZEdWeVlXSnNaUzVxY3lKOSIsInZhciAkZXhwb3J0PXJlcXVpcmUoXCIuL19leHBvcnRcIiksJHRhc2s9cmVxdWlyZShcIi4vX3Rhc2tcIik7JGV4cG9ydCgkZXhwb3J0LkcrJGV4cG9ydC5CLHtzZXRJbW1lZGlhdGU6JHRhc2suc2V0LGNsZWFySW1tZWRpYXRlOiR0YXNrLmNsZWFyfSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWWk1cGJXMWxaR2xoZEdVdWFuTWlYU3dpYm1GdFpYTWlPbHNpSkdWNGNHOXlkQ0lzSW5KbGNYVnBjbVVpTENJa2RHRnpheUlzSWtjaUxDSkNJaXdpYzJWMFNXMXRaV1JwWVhSbElpd2ljMlYwSWl3aVkyeGxZWEpKYlcxbFpHbGhkR1VpTENKamJHVmhjaUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVOc1FrTXNUVUZCVVVRc1VVRkJVU3hYUVVOd1FrUXNVVUZCVVVFc1VVRkJVVWNzUlVGQlNVZ3NVVUZCVVVrc1JVRkJSeXhEUVVNM1FrTXNZVUZCWTBnc1RVRkJUVWtzU1VGRGNFSkRMR1ZCUVdkQ1RDeE5RVUZOVFNJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZkMlZpTG1sdGJXVmthV0YwWlM1cWN5SjkiLCJ2YXIgZ2xvYmFsPXJlcXVpcmUoXCIuL19nbG9iYWxcIiksJGV4cG9ydD1yZXF1aXJlKFwiLi9fZXhwb3J0XCIpLHVzZXJBZ2VudD1yZXF1aXJlKFwiLi9fdXNlci1hZ2VudFwiKSxzbGljZT1bXS5zbGljZSxNU0lFPS9NU0lFIC5cXC4vLnRlc3QodXNlckFnZW50KSx3cmFwPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0LHIpe3ZhciBuPWFyZ3VtZW50cy5sZW5ndGg+MixvPSEhbiYmc2xpY2UuY2FsbChhcmd1bWVudHMsMik7cmV0dXJuIGUobj9mdW5jdGlvbigpeyhcImZ1bmN0aW9uXCI9PXR5cGVvZiB0P3Q6RnVuY3Rpb24odCkpLmFwcGx5KHRoaXMsbyl9OnQscil9fTskZXhwb3J0KCRleHBvcnQuRyskZXhwb3J0LkIrJGV4cG9ydC5GKk1TSUUse3NldFRpbWVvdXQ6d3JhcChnbG9iYWwuc2V0VGltZW91dCksc2V0SW50ZXJ2YWw6d3JhcChnbG9iYWwuc2V0SW50ZXJ2YWwpfSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWWk1MGFXMWxjbk11YW5NaVhTd2libUZ0WlhNaU9sc2laMnh2WW1Gc0lpd2ljbVZ4ZFdseVpTSXNJaVJsZUhCdmNuUWlMQ0oxYzJWeVFXZGxiblFpTENKemJHbGpaU0lzSWsxVFNVVWlMQ0owWlhOMElpd2lkM0poY0NJc0luTmxkQ0lzSW1adUlpd2lkR2x0WlNJc0ltSnZkVzVrUVhKbmN5SXNJbUZ5WjNWdFpXNTBjeUlzSW14bGJtZDBhQ0lzSW1GeVozTWlMQ0pqWVd4c0lpd2lSblZ1WTNScGIyNGlMQ0poY0hCc2VTSXNJblJvYVhNaUxDSkhJaXdpUWlJc0lrWWlMQ0p6WlhSVWFXMWxiM1YwSWl3aWMyVjBTVzUwWlhKMllXd2lYU3dpYldGd2NHbHVaM01pT2lKQlFVTkJMRWxCUVVsQkxFOUJRVk5ETEZGQlFWRXNZVUZEYWtKRExGRkJRVlZFTEZGQlFWRXNZVUZEYkVKRkxGVkJRVmxHTEZGQlFWRXNhVUpCUTNCQ1J5eE5RVUZSTEVkQlFVZEJMRTFCUTFoRExFdEJRVThzVjBGQlYwTXNTMEZCUzBnc1YwRkRka0pKTEV0QlFVOHNVMEZCVlVNc1IwRkRia0lzVDBGQlR5eFRRVUZWUXl4RlFVRkpReXhIUVVOdVFpeEpRVUZKUXl4RlFVRlpReXhWUVVGVlF5eFBRVUZUTEVWQlF5OUNReXhKUVVGUFNDeEhRVUZaVUN4TlFVRk5WeXhMUVVGTFNDeFZRVUZYTEVkQlF6ZERMRTlCUVU5S0xFVkJRVWxITEVWQlFWa3NXVUZGVUN4dFFrRkJUa1lzUlVGQmJVSkJMRVZCUVV0UExGTkJRVk5RTEVsQlFVdFJMRTFCUVUxRExFdEJRVTFLTEVsQlEzaEVUQ3hGUVVGSlF5eExRVWRhVWl4UlFVRlJRU3hSUVVGUmFVSXNSVUZCU1dwQ0xGRkJRVkZyUWl4RlFVRkpiRUlzVVVGQlVXMUNMRVZCUVVsb1FpeExRVUZOTEVOQlEyaEVhVUlzVjBGQldXWXNTMEZCUzFBc1QwRkJUM05DTEZsQlEzaENReXhaUVVGaGFFSXNTMEZCUzFBc1QwRkJUM1ZDSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OTNaV0l1ZEdsdFpYSnpMbXB6SW4wPSIsInJlcXVpcmUoXCIuL21vZHVsZXMvZXM2LnN5bWJvbFwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHlcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2ZcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYub2JqZWN0LmtleXNcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXNcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZVwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbFwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW5cIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZFwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZXh0ZW5zaWJsZVwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2Lm9iamVjdC5pc1wiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZlwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmRcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZVwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5oYXMtaW5zdGFuY2VcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYucGFyc2UtaW50XCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0XCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2Lm51bWJlci5jb25zdHJ1Y3RvclwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tZml4ZWRcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvblwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvblwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW5cIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlclwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlclwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlclwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXRcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludFwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5tYXRoLmFjb3NoXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2Lm1hdGguYXNpbmhcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYubWF0aC5hdGFuaFwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5tYXRoLmNicnRcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYubWF0aC5jbHozMlwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5tYXRoLmNvc2hcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYubWF0aC5leHBtMVwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZFwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5tYXRoLmh5cG90XCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2Lm1hdGguaW11bFwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzEwXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2Lm1hdGgubG9nMXBcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYubWF0aC5sb2cyXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2Lm1hdGguc2lnblwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5tYXRoLnNpbmhcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYubWF0aC50YW5oXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmNcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludFwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5zdHJpbmcucmF3XCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2LnN0cmluZy50cmltXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvclwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdFwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5zdHJpbmcuZW5kcy13aXRoXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlc1wiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0XCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aFwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2LnN0cmluZy5iaWdcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2LnN0cmluZy5maXhlZFwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2LnN0cmluZy5mb250c2l6ZVwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRhbGljc1wiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5zdHJpbmcubGlua1wiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5zdHJpbmcuc21hbGxcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYuc3RyaW5nLnN0cmlrZVwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2LnN0cmluZy5zdXBcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYuZGF0ZS5ub3dcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYuZGF0ZS50by1qc29uXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZ1wiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5kYXRlLnRvLXN0cmluZ1wiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5kYXRlLnRvLXByaW1pdGl2ZVwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheVwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5hcnJheS5mcm9tXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2LmFycmF5Lm9mXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2LmFycmF5LmpvaW5cIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYuYXJyYXkuc2xpY2VcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYuYXJyYXkuc29ydFwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaFwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5hcnJheS5tYXBcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2LmFycmF5LnNvbWVcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYuYXJyYXkuZXZlcnlcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS1yaWdodFwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5hcnJheS5pbmRleC1vZlwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2LmFycmF5LmZpbGxcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYuYXJyYXkuZmluZFwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4XCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXNcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3JcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmdcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2LnJlZ2V4cC5tYXRjaFwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZVwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2LnJlZ2V4cC5zcGxpdFwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5wcm9taXNlXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2Lm1hcFwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5zZXRcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYud2Vhay1tYXBcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYud2Vhay1zZXRcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlld1wiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQ4LWFycmF5XCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5XCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWNsYW1wZWQtYXJyYXlcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXlcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYudHlwZWQudWludDE2LWFycmF5XCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5XCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheVwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDMyLWFycmF5XCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXlcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseVwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmNvbnN0cnVjdFwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eVwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eVwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZVwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldFwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvclwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1wcm90b3R5cGUtb2ZcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYucmVmbGVjdC5oYXNcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXNcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnNcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYucmVmbGVjdC5zZXRcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczYucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM3LmFycmF5LmZsYXQtbWFwXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM3LmFycmF5LmZsYXR0ZW5cIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczcuc3RyaW5nLmF0XCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnRcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmRcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdFwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodFwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNy5zdHJpbmcubWF0Y2gtYWxsXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvclwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZVwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yc1wiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtZ2V0dGVyXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtc2V0dGVyXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtZ2V0dGVyXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtc2V0dGVyXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM3Lm1hcC50by1qc29uXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM3LnNldC50by1qc29uXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM3Lm1hcC5vZlwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNy5zZXQub2ZcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczcud2Vhay1tYXAub2ZcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczcud2Vhay1zZXQub2ZcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczcubWFwLmZyb21cIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczcuc2V0LmZyb21cIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczcud2Vhay1tYXAuZnJvbVwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNy53ZWFrLXNldC5mcm9tXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM3Lmdsb2JhbFwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNy5zeXN0ZW0uZ2xvYmFsXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM3LmVycm9yLmlzLWVycm9yXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM3Lm1hdGguY2xhbXBcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczcubWF0aC5kZWctcGVyLXJhZFwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNy5tYXRoLmRlZ3JlZXNcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczcubWF0aC5mc2NhbGVcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczcubWF0aC5pYWRkaFwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNy5tYXRoLmlzdWJoXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM3Lm1hdGguaW11bGhcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczcubWF0aC5yYWQtcGVyLWRlZ1wiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNy5tYXRoLnJhZGlhbnNcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczcubWF0aC5zY2FsZVwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNy5tYXRoLnVtdWxoXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM3Lm1hdGguc2lnbmJpdFwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNy5wcm9taXNlLmZpbmFsbHlcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczcucHJvbWlzZS50cnlcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczcucmVmbGVjdC5kZWZpbmUtbWV0YWRhdGFcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczcucmVmbGVjdC5kZWxldGUtbWV0YWRhdGFcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGFcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEta2V5c1wiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGFcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLWtleXNcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtbWV0YWRhdGFcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtb3duLW1ldGFkYXRhXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvZXM3LnJlZmxlY3QubWV0YWRhdGFcIikscmVxdWlyZShcIi4vbW9kdWxlcy9lczcuYXNhcFwiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL2VzNy5vYnNlcnZhYmxlXCIpLHJlcXVpcmUoXCIuL21vZHVsZXMvd2ViLnRpbWVyc1wiKSxyZXF1aXJlKFwiLi9tb2R1bGVzL3dlYi5pbW1lZGlhdGVcIikscmVxdWlyZShcIi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlXCIpLG1vZHVsZS5leHBvcnRzPXJlcXVpcmUoXCIuL21vZHVsZXMvX2NvcmVcIik7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbk5vYVcwdWFuTWlYU3dpYm1GdFpYTWlPbHNpY21WeGRXbHlaU0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCUVN4UlFVRlJMSGRDUVVOU1FTeFJRVUZSTEN0Q1FVTlNRU3hSUVVGUkxIZERRVU5TUVN4UlFVRlJMREJEUVVOU1FTeFJRVUZSTEc5RVFVTlNRU3hSUVVGUkxIbERRVU5TUVN4UlFVRlJMRFpDUVVOU1FTeFJRVUZSTEN0RFFVTlNRU3hSUVVGUkxDdENRVU5TUVN4UlFVRlJMRFpDUVVOU1FTeFJRVUZSTERKRFFVTlNRU3hSUVVGUkxHdERRVU5TUVN4UlFVRlJMR3REUVVOU1FTeFJRVUZSTEhORFFVTlNRU3hSUVVGUkxDdENRVU5TUVN4UlFVRlJMREpDUVVOU1FTeFJRVUZSTEhsRFFVTlNRU3hSUVVGUkxHdERRVU5TUVN4UlFVRlJMQ3RDUVVOU1FTeFJRVUZSTEN0Q1FVTlNRU3hSUVVGUkxIVkRRVU5TUVN4UlFVRlJMREpDUVVOU1FTeFJRVUZSTERaQ1FVTlNRU3hSUVVGUkxHOURRVU5TUVN4UlFVRlJMR2xEUVVOU1FTeFJRVUZSTEhGRFFVTlNRU3hSUVVGUkxHZERRVU5TUVN4UlFVRlJMR3REUVVOU1FTeFJRVUZSTEcxRFFVTlNRU3hSUVVGUkxDdENRVU5TUVN4UlFVRlJMSGREUVVOU1FTeFJRVUZSTEhsRFFVTlNRU3hSUVVGUkxIbERRVU5TUVN4UlFVRlJMRzlEUVVOU1FTeFJRVUZSTEd0RFFVTlNRU3hSUVVGUkxEUkNRVU5TUVN4UlFVRlJMRFJDUVVOU1FTeFJRVUZSTERSQ1FVTlNRU3hSUVVGUkxESkNRVU5TUVN4UlFVRlJMRFJDUVVOU1FTeFJRVUZSTERKQ1FVTlNRU3hSUVVGUkxEUkNRVU5TUVN4UlFVRlJMRFpDUVVOU1FTeFJRVUZSTERSQ1FVTlNRU3hSUVVGUkxESkNRVU5TUVN4UlFVRlJMRFJDUVVOU1FTeFJRVUZSTERSQ1FVTlNRU3hSUVVGUkxESkNRVU5TUVN4UlFVRlJMREpDUVVOU1FTeFJRVUZSTERKQ1FVTlNRU3hSUVVGUkxESkNRVU5TUVN4UlFVRlJMRFJDUVVOU1FTeFJRVUZSTEhkRFFVTlNRU3hSUVVGUkxEUkNRVU5TUVN4UlFVRlJMRFpDUVVOU1FTeFJRVUZSTEdsRFFVTlNRU3hSUVVGUkxITkRRVU5TUVN4UlFVRlJMR3REUVVOU1FTeFJRVUZSTEdsRFFVTlNRU3hSUVVGUkxDdENRVU5TUVN4UlFVRlJMRzlEUVVOU1FTeFJRVUZSTEN0Q1FVTlNRU3hSUVVGUkxEUkNRVU5TUVN4UlFVRlJMRGhDUVVOU1FTeFJRVUZSTERaQ1FVTlNRU3hSUVVGUkxEaENRVU5TUVN4UlFVRlJMR3REUVVOU1FTeFJRVUZSTEdsRFFVTlNRU3hSUVVGUkxHZERRVU5TUVN4UlFVRlJMRFpDUVVOU1FTeFJRVUZSTERoQ1FVTlNRU3hSUVVGUkxDdENRVU5TUVN4UlFVRlJMRFJDUVVOU1FTeFJRVUZSTERSQ1FVTlNRU3hSUVVGUkxEQkNRVU5TUVN4UlFVRlJMRGhDUVVOU1FTeFJRVUZSTEc5RFFVTlNRU3hSUVVGUkxHZERRVU5TUVN4UlFVRlJMRzFEUVVOU1FTeFJRVUZSTEdkRFFVTlNRU3hSUVVGUkxEUkNRVU5TUVN4UlFVRlJMREJDUVVOU1FTeFJRVUZSTERSQ1FVTlNRU3hSUVVGUkxEWkNRVU5TUVN4UlFVRlJMRFJDUVVOU1FTeFJRVUZSTEdkRFFVTlNRU3hSUVVGUkxESkNRVU5TUVN4UlFVRlJMRGhDUVVOU1FTeFJRVUZSTERSQ1FVTlNRU3hSUVVGUkxEWkNRVU5TUVN4UlFVRlJMRGhDUVVOU1FTeFJRVUZSTEc5RFFVTlNRU3hSUVVGUkxHZERRVU5TUVN4UlFVRlJMSEZEUVVOU1FTeFJRVUZSTEcxRFFVTlNRU3hSUVVGUkxEUkNRVU5TUVN4UlFVRlJMRFJDUVVOU1FTeFJRVUZSTEd0RFFVTlNRU3hSUVVGUkxDdENRVU5TUVN4UlFVRlJMR2REUVVOU1FTeFJRVUZSTEc5RFFVTlNRU3hSUVVGUkxHdERRVU5TUVN4UlFVRlJMRGhDUVVOU1FTeFJRVUZSTERoQ1FVTlNRU3hSUVVGUkxHZERRVU5TUVN4UlFVRlJMQ3RDUVVOU1FTeFJRVUZSTERoQ1FVTlNRU3hSUVVGUkxIbENRVU5TUVN4UlFVRlJMSEZDUVVOU1FTeFJRVUZSTEhGQ1FVTlNRU3hSUVVGUkxEQkNRVU5TUVN4UlFVRlJMREJDUVVOU1FTeFJRVUZSTEc5RFFVTlNRU3hSUVVGUkxHbERRVU5TUVN4UlFVRlJMR3REUVVOU1FTeFJRVUZSTEcxRFFVTlNRU3hSUVVGUkxESkRRVU5TUVN4UlFVRlJMRzFEUVVOU1FTeFJRVUZSTEc5RFFVTlNRU3hSUVVGUkxHMURRVU5TUVN4UlFVRlJMRzlEUVVOU1FTeFJRVUZSTEhGRFFVTlNRU3hSUVVGUkxIRkRRVU5TUVN4UlFVRlJMQ3RDUVVOU1FTeFJRVUZSTEcxRFFVTlNRU3hSUVVGUkxIbERRVU5TUVN4UlFVRlJMSGxEUVVOU1FTeFJRVUZSTEcxRFFVTlNRU3hSUVVGUkxEWkNRVU5TUVN4UlFVRlJMSEZFUVVOU1FTeFJRVUZSTERCRFFVTlNRU3hSUVVGUkxEWkNRVU5TUVN4UlFVRlJMSFZEUVVOU1FTeFJRVUZSTEd0RFFVTlNRU3hSUVVGUkxEUkRRVU5TUVN4UlFVRlJMRFpDUVVOU1FTeFJRVUZSTERCRFFVTlNRU3hSUVVGUkxHZERRVU5TUVN4UlFVRlJMR2REUVVOU1FTeFJRVUZSTEN0Q1FVTlNRU3hSUVVGUkxESkNRVU5TUVN4UlFVRlJMR3REUVVOU1FTeFJRVUZSTEdkRFFVTlNRU3hSUVVGUkxHdERRVU5TUVN4UlFVRlJMRzFEUVVOU1FTeFJRVUZSTEd0RFFVTlNRU3hSUVVGUkxIVkRRVU5TUVN4UlFVRlJMRzFEUVVOU1FTeFJRVUZSTEhGRVFVTlNRU3hSUVVGUkxDdENRVU5TUVN4UlFVRlJMR2REUVVOU1FTeFJRVUZSTEhORFFVTlNRU3hSUVVGUkxITkRRVU5TUVN4UlFVRlJMSE5EUVVOU1FTeFJRVUZSTEhORFFVTlNRU3hSUVVGUkxEWkNRVU5TUVN4UlFVRlJMRFpDUVVOU1FTeFJRVUZSTEhkQ1FVTlNRU3hSUVVGUkxIZENRVU5TUVN4UlFVRlJMRFpDUVVOU1FTeFJRVUZSTERaQ1FVTlNRU3hSUVVGUkxEQkNRVU5TUVN4UlFVRlJMREJDUVVOU1FTeFJRVUZSTEN0Q1FVTlNRU3hSUVVGUkxDdENRVU5TUVN4UlFVRlJMSGRDUVVOU1FTeFJRVUZSTEN0Q1FVTlNRU3hSUVVGUkxHZERRVU5TUVN4UlFVRlJMRFJDUVVOU1FTeFJRVUZSTEd0RFFVTlNRU3hSUVVGUkxEaENRVU5TUVN4UlFVRlJMRFpDUVVOU1FTeFJRVUZSTERSQ1FVTlNRU3hSUVVGUkxEUkNRVU5TUVN4UlFVRlJMRFJDUVVOU1FTeFJRVUZSTEd0RFFVTlNRU3hSUVVGUkxEaENRVU5TUVN4UlFVRlJMRFJDUVVOU1FTeFJRVUZSTERSQ1FVTlNRU3hSUVVGUkxEaENRVU5TUVN4UlFVRlJMR2xEUVVOU1FTeFJRVUZSTERaQ1FVTlNRU3hSUVVGUkxIbERRVU5TUVN4UlFVRlJMSGxEUVVOU1FTeFJRVUZSTEhORFFVTlNRU3hSUVVGUkxESkRRVU5TUVN4UlFVRlJMREJEUVVOU1FTeFJRVUZSTEN0RFFVTlNRU3hSUVVGUkxITkRRVU5TUVN4UlFVRlJMREJEUVVOU1FTeFJRVUZSTEd0RFFVTlNRU3hSUVVGUkxITkNRVU5TUVN4UlFVRlJMRFJDUVVOU1FTeFJRVUZSTEhkQ1FVTlNRU3hSUVVGUkxESkNRVU5TUVN4UlFVRlJMRGhDUVVOU1F5eFBRVUZQUXl4UlFVRlZSaXhSUVVGUklpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YzJocGJTNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9hc3NpZ249cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksZW1wdHlPYmplY3Q9cmVxdWlyZShcImZianMvbGliL2VtcHR5T2JqZWN0XCIpLF9pbnZhcmlhbnQ9cmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKTtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXZhciB3YXJuaW5nPXJlcXVpcmUoXCJmYmpzL2xpYi93YXJuaW5nXCIpO3ZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyxNSVhJTlNfS0VZPVwibWl4aW5zXCI7ZnVuY3Rpb24gaWRlbnRpdHkoZSl7cmV0dXJuIGV9ZnVuY3Rpb24gZmFjdG9yeShlLHQsbil7dmFyIG89W10saT17bWl4aW5zOlwiREVGSU5FX01BTllcIixzdGF0aWNzOlwiREVGSU5FX01BTllcIixwcm9wVHlwZXM6XCJERUZJTkVfTUFOWVwiLGNvbnRleHRUeXBlczpcIkRFRklORV9NQU5ZXCIsY2hpbGRDb250ZXh0VHlwZXM6XCJERUZJTkVfTUFOWVwiLGdldERlZmF1bHRQcm9wczpcIkRFRklORV9NQU5ZX01FUkdFRFwiLGdldEluaXRpYWxTdGF0ZTpcIkRFRklORV9NQU5ZX01FUkdFRFwiLGdldENoaWxkQ29udGV4dDpcIkRFRklORV9NQU5ZX01FUkdFRFwiLHJlbmRlcjpcIkRFRklORV9PTkNFXCIsY29tcG9uZW50V2lsbE1vdW50OlwiREVGSU5FX01BTllcIixjb21wb25lbnREaWRNb3VudDpcIkRFRklORV9NQU5ZXCIsY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczpcIkRFRklORV9NQU5ZXCIsc2hvdWxkQ29tcG9uZW50VXBkYXRlOlwiREVGSU5FX09OQ0VcIixjb21wb25lbnRXaWxsVXBkYXRlOlwiREVGSU5FX01BTllcIixjb21wb25lbnREaWRVcGRhdGU6XCJERUZJTkVfTUFOWVwiLGNvbXBvbmVudFdpbGxVbm1vdW50OlwiREVGSU5FX01BTllcIixVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50OlwiREVGSU5FX01BTllcIixVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczpcIkRFRklORV9NQU5ZXCIsVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGU6XCJERUZJTkVfTUFOWVwiLHVwZGF0ZUNvbXBvbmVudDpcIk9WRVJSSURFX0JBU0VcIn0sYT17Z2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOlwiREVGSU5FX01BTllfTUVSR0VEXCJ9LHI9e2Rpc3BsYXlOYW1lOmZ1bmN0aW9uKGUsdCl7ZS5kaXNwbGF5TmFtZT10fSxtaXhpbnM6ZnVuY3Rpb24oZSx0KXtpZih0KWZvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKW1peFNwZWNJbnRvQ29tcG9uZW50KGUsdFtuXSl9LGNoaWxkQ29udGV4dFR5cGVzOmZ1bmN0aW9uKGUsdCl7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmdmFsaWRhdGVUeXBlRGVmKGUsdCxcImNoaWxkQ29udGV4dFwiKSxlLmNoaWxkQ29udGV4dFR5cGVzPV9hc3NpZ24oe30sZS5jaGlsZENvbnRleHRUeXBlcyx0KX0sY29udGV4dFR5cGVzOmZ1bmN0aW9uKGUsdCl7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmdmFsaWRhdGVUeXBlRGVmKGUsdCxcImNvbnRleHRcIiksZS5jb250ZXh0VHlwZXM9X2Fzc2lnbih7fSxlLmNvbnRleHRUeXBlcyx0KX0sZ2V0RGVmYXVsdFByb3BzOmZ1bmN0aW9uKGUsdCl7ZS5nZXREZWZhdWx0UHJvcHM/ZS5nZXREZWZhdWx0UHJvcHM9Y3JlYXRlTWVyZ2VkUmVzdWx0RnVuY3Rpb24oZS5nZXREZWZhdWx0UHJvcHMsdCk6ZS5nZXREZWZhdWx0UHJvcHM9dH0scHJvcFR5cGVzOmZ1bmN0aW9uKGUsdCl7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmdmFsaWRhdGVUeXBlRGVmKGUsdCxcInByb3BcIiksZS5wcm9wVHlwZXM9X2Fzc2lnbih7fSxlLnByb3BUeXBlcyx0KX0sc3RhdGljczpmdW5jdGlvbihlLHQpeyFmdW5jdGlvbiBtaXhTdGF0aWNTcGVjSW50b0NvbXBvbmVudChlLHQpe2lmKCF0KXJldHVybjtmb3IodmFyIG4gaW4gdCl7dmFyIG89dFtuXTtpZih0Lmhhc093blByb3BlcnR5KG4pKXt2YXIgaT1uIGluIHI7X2ludmFyaWFudCghaSwnUmVhY3RDbGFzczogWW91IGFyZSBhdHRlbXB0aW5nIHRvIGRlZmluZSBhIHJlc2VydmVkIHByb3BlcnR5LCBgJXNgLCB0aGF0IHNob3VsZG5cXCd0IGJlIG9uIHRoZSBcInN0YXRpY3NcIiBrZXkuIERlZmluZSBpdCBhcyBhbiBpbnN0YW5jZSBwcm9wZXJ0eSBpbnN0ZWFkOyBpdCB3aWxsIHN0aWxsIGJlIGFjY2Vzc2libGUgb24gdGhlIGNvbnN0cnVjdG9yLicsbik7dmFyIHM9biBpbiBlO2lmKHMpe3ZhciBjPWEuaGFzT3duUHJvcGVydHkobik/YVtuXTpudWxsO3JldHVybiBfaW52YXJpYW50KFwiREVGSU5FX01BTllfTUVSR0VEXCI9PT1jLFwiUmVhY3RDbGFzczogWW91IGFyZSBhdHRlbXB0aW5nIHRvIGRlZmluZSBgJXNgIG9uIHlvdXIgY29tcG9uZW50IG1vcmUgdGhhbiBvbmNlLiBUaGlzIGNvbmZsaWN0IG1heSBiZSBkdWUgdG8gYSBtaXhpbi5cIixuKSx2b2lkKGVbbl09Y3JlYXRlTWVyZ2VkUmVzdWx0RnVuY3Rpb24oZVtuXSxvKSl9ZVtuXT1vfX19KGUsdCl9LGF1dG9iaW5kOmZ1bmN0aW9uKCl7fX07ZnVuY3Rpb24gdmFsaWRhdGVUeXBlRGVmKGUsdCxuKXtmb3IodmFyIG8gaW4gdCl0Lmhhc093blByb3BlcnR5KG8pJiZcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ3YXJuaW5nKFwiZnVuY3Rpb25cIj09dHlwZW9mIHRbb10sXCIlczogJXMgdHlwZSBgJXNgIGlzIGludmFsaWQ7IGl0IG11c3QgYmUgYSBmdW5jdGlvbiwgdXN1YWxseSBmcm9tIFJlYWN0LlByb3BUeXBlcy5cIixlLmRpc3BsYXlOYW1lfHxcIlJlYWN0Q2xhc3NcIixSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tuXSxvKX1mdW5jdGlvbiB2YWxpZGF0ZU1ldGhvZE92ZXJyaWRlKGUsdCl7dmFyIG49aS5oYXNPd25Qcm9wZXJ0eSh0KT9pW3RdOm51bGw7cC5oYXNPd25Qcm9wZXJ0eSh0KSYmX2ludmFyaWFudChcIk9WRVJSSURFX0JBU0VcIj09PW4sXCJSZWFjdENsYXNzSW50ZXJmYWNlOiBZb3UgYXJlIGF0dGVtcHRpbmcgdG8gb3ZlcnJpZGUgYCVzYCBmcm9tIHlvdXIgY2xhc3Mgc3BlY2lmaWNhdGlvbi4gRW5zdXJlIHRoYXQgeW91ciBtZXRob2QgbmFtZXMgZG8gbm90IG92ZXJsYXAgd2l0aCBSZWFjdCBtZXRob2RzLlwiLHQpLGUmJl9pbnZhcmlhbnQoXCJERUZJTkVfTUFOWVwiPT09bnx8XCJERUZJTkVfTUFOWV9NRVJHRURcIj09PW4sXCJSZWFjdENsYXNzSW50ZXJmYWNlOiBZb3UgYXJlIGF0dGVtcHRpbmcgdG8gZGVmaW5lIGAlc2Agb24geW91ciBjb21wb25lbnQgbW9yZSB0aGFuIG9uY2UuIFRoaXMgY29uZmxpY3QgbWF5IGJlIGR1ZSB0byBhIG1peGluLlwiLHQpfWZ1bmN0aW9uIG1peFNwZWNJbnRvQ29tcG9uZW50KGUsbil7aWYobil7X2ludmFyaWFudChcImZ1bmN0aW9uXCIhPXR5cGVvZiBuLFwiUmVhY3RDbGFzczogWW91J3JlIGF0dGVtcHRpbmcgdG8gdXNlIGEgY29tcG9uZW50IGNsYXNzIG9yIGZ1bmN0aW9uIGFzIGEgbWl4aW4uIEluc3RlYWQsIGp1c3QgdXNlIGEgcmVndWxhciBvYmplY3QuXCIpLF9pbnZhcmlhbnQoIXQobiksXCJSZWFjdENsYXNzOiBZb3UncmUgYXR0ZW1wdGluZyB0byB1c2UgYSBjb21wb25lbnQgYXMgYSBtaXhpbi4gSW5zdGVhZCwganVzdCB1c2UgYSByZWd1bGFyIG9iamVjdC5cIik7dmFyIG89ZS5wcm90b3R5cGUsYT1vLl9fcmVhY3RBdXRvQmluZFBhaXJzO2Zvcih2YXIgcyBpbiBuLmhhc093blByb3BlcnR5KE1JWElOU19LRVkpJiZyLm1peGlucyhlLG4ubWl4aW5zKSxuKWlmKG4uaGFzT3duUHJvcGVydHkocykmJnMhPT1NSVhJTlNfS0VZKXt2YXIgYz1uW3NdLHA9by5oYXNPd25Qcm9wZXJ0eShzKTtpZih2YWxpZGF0ZU1ldGhvZE92ZXJyaWRlKHAscyksci5oYXNPd25Qcm9wZXJ0eShzKSlyW3NdKGUsYyk7ZWxzZXt2YXIgdT1pLmhhc093blByb3BlcnR5KHMpO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGMmJiF1JiYhcCYmITEhPT1uLmF1dG9iaW5kKWEucHVzaChzLGMpLG9bc109YztlbHNlIGlmKHApe3ZhciBsPWlbc107X2ludmFyaWFudCh1JiYoXCJERUZJTkVfTUFOWV9NRVJHRURcIj09PWx8fFwiREVGSU5FX01BTllcIj09PWwpLFwiUmVhY3RDbGFzczogVW5leHBlY3RlZCBzcGVjIHBvbGljeSAlcyBmb3Iga2V5ICVzIHdoZW4gbWl4aW5nIGluIGNvbXBvbmVudCBzcGVjcy5cIixsLHMpLFwiREVGSU5FX01BTllfTUVSR0VEXCI9PT1sP29bc109Y3JlYXRlTWVyZ2VkUmVzdWx0RnVuY3Rpb24ob1tzXSxjKTpcIkRFRklORV9NQU5ZXCI9PT1sJiYob1tzXT1jcmVhdGVDaGFpbmVkRnVuY3Rpb24ob1tzXSxjKSl9ZWxzZSBvW3NdPWMsXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmXCJmdW5jdGlvblwiPT10eXBlb2YgYyYmbi5kaXNwbGF5TmFtZSYmKG9bc10uZGlzcGxheU5hbWU9bi5kaXNwbGF5TmFtZStcIl9cIitzKX19fWVsc2UgaWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVil7dmFyIGQ9dHlwZW9mIG4sbT1cIm9iamVjdFwiPT09ZCYmbnVsbCE9PW47XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FybmluZyhtLFwiJXM6IFlvdSdyZSBhdHRlbXB0aW5nIHRvIGluY2x1ZGUgYSBtaXhpbiB0aGF0IGlzIGVpdGhlciBudWxsIG9yIG5vdCBhbiBvYmplY3QuIENoZWNrIHRoZSBtaXhpbnMgaW5jbHVkZWQgYnkgdGhlIGNvbXBvbmVudCwgYXMgd2VsbCBhcyBhbnkgbWl4aW5zIHRoZXkgaW5jbHVkZSB0aGVtc2VsdmVzLiBFeHBlY3RlZCBvYmplY3QgYnV0IGdvdCAlcy5cIixlLmRpc3BsYXlOYW1lfHxcIlJlYWN0Q2xhc3NcIixudWxsPT09bj9udWxsOmQpfX1mdW5jdGlvbiBtZXJnZUludG9XaXRoTm9EdXBsaWNhdGVLZXlzKGUsdCl7Zm9yKHZhciBuIGluIF9pbnZhcmlhbnQoZSYmdCYmXCJvYmplY3RcIj09dHlwZW9mIGUmJlwib2JqZWN0XCI9PXR5cGVvZiB0LFwibWVyZ2VJbnRvV2l0aE5vRHVwbGljYXRlS2V5cygpOiBDYW5ub3QgbWVyZ2Ugbm9uLW9iamVjdHMuXCIpLHQpdC5oYXNPd25Qcm9wZXJ0eShuKSYmKF9pbnZhcmlhbnQodm9pZCAwPT09ZVtuXSxcIm1lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMoKTogVHJpZWQgdG8gbWVyZ2UgdHdvIG9iamVjdHMgd2l0aCB0aGUgc2FtZSBrZXk6IGAlc2AuIFRoaXMgY29uZmxpY3QgbWF5IGJlIGR1ZSB0byBhIG1peGluOyBpbiBwYXJ0aWN1bGFyLCB0aGlzIG1heSBiZSBjYXVzZWQgYnkgdHdvIGdldEluaXRpYWxTdGF0ZSgpIG9yIGdldERlZmF1bHRQcm9wcygpIG1ldGhvZHMgcmV0dXJuaW5nIG9iamVjdHMgd2l0aCBjbGFzaGluZyBrZXlzLlwiLG4pLGVbbl09dFtuXSk7cmV0dXJuIGV9ZnVuY3Rpb24gY3JlYXRlTWVyZ2VkUmVzdWx0RnVuY3Rpb24oZSx0KXtyZXR1cm4gZnVuY3Rpb24gbWVyZ2VkUmVzdWx0KCl7dmFyIG49ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyksbz10LmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihudWxsPT1uKXJldHVybiBvO2lmKG51bGw9PW8pcmV0dXJuIG47dmFyIGk9e307cmV0dXJuIG1lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMoaSxuKSxtZXJnZUludG9XaXRoTm9EdXBsaWNhdGVLZXlzKGksbyksaX19ZnVuY3Rpb24gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGUsdCl7cmV0dXJuIGZ1bmN0aW9uIGNoYWluZWRGdW5jdGlvbigpe2UuYXBwbHkodGhpcyxhcmd1bWVudHMpLHQuYXBwbHkodGhpcyxhcmd1bWVudHMpfX1mdW5jdGlvbiBiaW5kQXV0b0JpbmRNZXRob2QoZSx0KXt2YXIgbj10LmJpbmQoZSk7aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVil7bi5fX3JlYWN0Qm91bmRDb250ZXh0PWUsbi5fX3JlYWN0Qm91bmRNZXRob2Q9dCxuLl9fcmVhY3RCb3VuZEFyZ3VtZW50cz1udWxsO3ZhciBvPWUuY29uc3RydWN0b3IuZGlzcGxheU5hbWUsaT1uLmJpbmQ7bi5iaW5kPWZ1bmN0aW9uKGEpe2Zvcih2YXIgcj1hcmd1bWVudHMubGVuZ3RoLHM9QXJyYXkocj4xP3ItMTowKSxjPTE7YzxyO2MrKylzW2MtMV09YXJndW1lbnRzW2NdO2lmKGEhPT1lJiZudWxsIT09YSlcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ3YXJuaW5nKCExLFwiYmluZCgpOiBSZWFjdCBjb21wb25lbnQgbWV0aG9kcyBtYXkgb25seSBiZSBib3VuZCB0byB0aGUgY29tcG9uZW50IGluc3RhbmNlLiBTZWUgJXNcIixvKTtlbHNlIGlmKCFzLmxlbmd0aClyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ3YXJuaW5nKCExLFwiYmluZCgpOiBZb3UgYXJlIGJpbmRpbmcgYSBjb21wb25lbnQgbWV0aG9kIHRvIHRoZSBjb21wb25lbnQuIFJlYWN0IGRvZXMgdGhpcyBmb3IgeW91IGF1dG9tYXRpY2FsbHkgaW4gYSBoaWdoLXBlcmZvcm1hbmNlIHdheSwgc28geW91IGNhbiBzYWZlbHkgcmVtb3ZlIHRoaXMgY2FsbC4gU2VlICVzXCIsbyksbjt2YXIgcD1pLmFwcGx5KG4sYXJndW1lbnRzKTtyZXR1cm4gcC5fX3JlYWN0Qm91bmRDb250ZXh0PWUscC5fX3JlYWN0Qm91bmRNZXRob2Q9dCxwLl9fcmVhY3RCb3VuZEFyZ3VtZW50cz1zLHB9fXJldHVybiBufXZhciBzPXtjb21wb25lbnREaWRNb3VudDpmdW5jdGlvbigpe3RoaXMuX19pc01vdW50ZWQ9ITB9fSxjPXtjb21wb25lbnRXaWxsVW5tb3VudDpmdW5jdGlvbigpe3RoaXMuX19pc01vdW50ZWQ9ITF9fSxwPXtyZXBsYWNlU3RhdGU6ZnVuY3Rpb24oZSx0KXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVJlcGxhY2VTdGF0ZSh0aGlzLGUsdCl9LGlzTW91bnRlZDpmdW5jdGlvbigpe3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJih3YXJuaW5nKHRoaXMuX19kaWRXYXJuSXNNb3VudGVkLFwiJXM6IGlzTW91bnRlZCBpcyBkZXByZWNhdGVkLiBJbnN0ZWFkLCBtYWtlIHN1cmUgdG8gY2xlYW4gdXAgc3Vic2NyaXB0aW9ucyBhbmQgcGVuZGluZyByZXF1ZXN0cyBpbiBjb21wb25lbnRXaWxsVW5tb3VudCB0byBwcmV2ZW50IG1lbW9yeSBsZWFrcy5cIix0aGlzLmNvbnN0cnVjdG9yJiZ0aGlzLmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lfHx0aGlzLm5hbWV8fFwiQ29tcG9uZW50XCIpLHRoaXMuX19kaWRXYXJuSXNNb3VudGVkPSEwKSwhIXRoaXMuX19pc01vdW50ZWR9fSx1PWZ1bmN0aW9uKCl7fTtyZXR1cm4gX2Fzc2lnbih1LnByb3RvdHlwZSxlLnByb3RvdHlwZSxwKSxmdW5jdGlvbiBjcmVhdGVDbGFzcyhlKXt2YXIgdD1pZGVudGl0eShmdW5jdGlvbihlLG8saSl7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FybmluZyh0aGlzIGluc3RhbmNlb2YgdCxcIlNvbWV0aGluZyBpcyBjYWxsaW5nIGEgUmVhY3QgY29tcG9uZW50IGRpcmVjdGx5LiBVc2UgYSBmYWN0b3J5IG9yIEpTWCBpbnN0ZWFkLiBTZWU6IGh0dHBzOi8vZmIubWUvcmVhY3QtbGVnYWN5ZmFjdG9yeVwiKSx0aGlzLl9fcmVhY3RBdXRvQmluZFBhaXJzLmxlbmd0aCYmZnVuY3Rpb24gYmluZEF1dG9CaW5kTWV0aG9kcyhlKXtmb3IodmFyIHQ9ZS5fX3JlYWN0QXV0b0JpbmRQYWlycyxuPTA7bjx0Lmxlbmd0aDtuKz0yKXt2YXIgbz10W25dLGk9dFtuKzFdO2Vbb109YmluZEF1dG9CaW5kTWV0aG9kKGUsaSl9fSh0aGlzKSx0aGlzLnByb3BzPWUsdGhpcy5jb250ZXh0PW8sdGhpcy5yZWZzPWVtcHR5T2JqZWN0LHRoaXMudXBkYXRlcj1pfHxuLHRoaXMuc3RhdGU9bnVsbDt2YXIgYT10aGlzLmdldEluaXRpYWxTdGF0ZT90aGlzLmdldEluaXRpYWxTdGF0ZSgpOm51bGw7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmdm9pZCAwPT09YSYmdGhpcy5nZXRJbml0aWFsU3RhdGUuX2lzTW9ja0Z1bmN0aW9uJiYoYT1udWxsKSxfaW52YXJpYW50KFwib2JqZWN0XCI9PXR5cGVvZiBhJiYhQXJyYXkuaXNBcnJheShhKSxcIiVzLmdldEluaXRpYWxTdGF0ZSgpOiBtdXN0IHJldHVybiBhbiBvYmplY3Qgb3IgbnVsbFwiLHQuZGlzcGxheU5hbWV8fFwiUmVhY3RDb21wb3NpdGVDb21wb25lbnRcIiksdGhpcy5zdGF0ZT1hfSk7Zm9yKHZhciBhIGluIHQucHJvdG90eXBlPW5ldyB1LHQucHJvdG90eXBlLmNvbnN0cnVjdG9yPXQsdC5wcm90b3R5cGUuX19yZWFjdEF1dG9CaW5kUGFpcnM9W10sby5mb3JFYWNoKG1peFNwZWNJbnRvQ29tcG9uZW50LmJpbmQobnVsbCx0KSksbWl4U3BlY0ludG9Db21wb25lbnQodCxzKSxtaXhTcGVjSW50b0NvbXBvbmVudCh0LGUpLG1peFNwZWNJbnRvQ29tcG9uZW50KHQsYyksdC5nZXREZWZhdWx0UHJvcHMmJih0LmRlZmF1bHRQcm9wcz10LmdldERlZmF1bHRQcm9wcygpKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYodC5nZXREZWZhdWx0UHJvcHMmJih0LmdldERlZmF1bHRQcm9wcy5pc1JlYWN0Q2xhc3NBcHByb3ZlZD17fSksdC5wcm90b3R5cGUuZ2V0SW5pdGlhbFN0YXRlJiYodC5wcm90b3R5cGUuZ2V0SW5pdGlhbFN0YXRlLmlzUmVhY3RDbGFzc0FwcHJvdmVkPXt9KSksX2ludmFyaWFudCh0LnByb3RvdHlwZS5yZW5kZXIsXCJjcmVhdGVDbGFzcyguLi4pOiBDbGFzcyBzcGVjaWZpY2F0aW9uIG11c3QgaW1wbGVtZW50IGEgYHJlbmRlcmAgbWV0aG9kLlwiKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYod2FybmluZyghdC5wcm90b3R5cGUuY29tcG9uZW50U2hvdWxkVXBkYXRlLFwiJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCBjb21wb25lbnRTaG91bGRVcGRhdGUoKS4gRGlkIHlvdSBtZWFuIHNob3VsZENvbXBvbmVudFVwZGF0ZSgpPyBUaGUgbmFtZSBpcyBwaHJhc2VkIGFzIGEgcXVlc3Rpb24gYmVjYXVzZSB0aGUgZnVuY3Rpb24gaXMgZXhwZWN0ZWQgdG8gcmV0dXJuIGEgdmFsdWUuXCIsZS5kaXNwbGF5TmFtZXx8XCJBIGNvbXBvbmVudFwiKSx3YXJuaW5nKCF0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzLFwiJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCBjb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzKCkuIERpZCB5b3UgbWVhbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKCk/XCIsZS5kaXNwbGF5TmFtZXx8XCJBIGNvbXBvbmVudFwiKSx3YXJuaW5nKCF0LnByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2lldmVQcm9wcyxcIiVzIGhhcyBhIG1ldGhvZCBjYWxsZWQgVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMoKS4gRGlkIHlvdSBtZWFuIFVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKCk/XCIsZS5kaXNwbGF5TmFtZXx8XCJBIGNvbXBvbmVudFwiKSksaSl0LnByb3RvdHlwZVthXXx8KHQucHJvdG90eXBlW2FdPW51bGwpO3JldHVybiB0fX1SZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcz1cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP3twcm9wOlwicHJvcFwiLGNvbnRleHQ6XCJjb250ZXh0XCIsY2hpbGRDb250ZXh0OlwiY2hpbGQgY29udGV4dFwifTp7fSxtb2R1bGUuZXhwb3J0cz1mYWN0b3J5O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1aaFkzUnZjbmt1YW5NaVhTd2libUZ0WlhNaU9sc2lYMkZ6YzJsbmJpSXNJbkpsY1hWcGNtVWlMQ0psYlhCMGVVOWlhbVZqZENJc0lsOXBiblpoY21saGJuUWlMQ0p3Y205alpYTnpJaXdpWlc1Mklpd2lUazlFUlY5RlRsWWlMQ0ozWVhKdWFXNW5JaXdpVW1WaFkzUlFjbTl3Vkhsd1pVeHZZMkYwYVc5dVRtRnRaWE1pTENKTlNWaEpUbE5mUzBWWklpd2lhV1JsYm5ScGRIa2lMQ0ptYmlJc0ltWmhZM1J2Y25raUxDSlNaV0ZqZEVOdmJYQnZibVZ1ZENJc0ltbHpWbUZzYVdSRmJHVnRaVzUwSWl3aVVtVmhZM1JPYjI5d1ZYQmtZWFJsVVhWbGRXVWlMQ0pwYm1wbFkzUmxaRTFwZUdsdWN5SXNJbEpsWVdOMFEyeGhjM05KYm5SbGNtWmhZMlVpTENKdGFYaHBibk1pTENKemRHRjBhV056SWl3aWNISnZjRlI1Y0dWeklpd2lZMjl1ZEdWNGRGUjVjR1Z6SWl3aVkyaHBiR1JEYjI1MFpYaDBWSGx3WlhNaUxDSm5aWFJFWldaaGRXeDBVSEp2Y0hNaUxDSm5aWFJKYm1sMGFXRnNVM1JoZEdVaUxDSm5aWFJEYUdsc1pFTnZiblJsZUhRaUxDSnlaVzVrWlhJaUxDSmpiMjF3YjI1bGJuUlhhV3hzVFc5MWJuUWlMQ0pqYjIxd2IyNWxiblJFYVdSTmIzVnVkQ0lzSW1OdmJYQnZibVZ1ZEZkcGJHeFNaV05sYVhabFVISnZjSE1pTENKemFHOTFiR1JEYjIxd2IyNWxiblJWY0dSaGRHVWlMQ0pqYjIxd2IyNWxiblJYYVd4c1ZYQmtZWFJsSWl3aVkyOXRjRzl1Wlc1MFJHbGtWWEJrWVhSbElpd2lZMjl0Y0c5dVpXNTBWMmxzYkZWdWJXOTFiblFpTENKVlRsTkJSa1ZmWTI5dGNHOXVaVzUwVjJsc2JFMXZkVzUwSWl3aVZVNVRRVVpGWDJOdmJYQnZibVZ1ZEZkcGJHeFNaV05sYVhabFVISnZjSE1pTENKVlRsTkJSa1ZmWTI5dGNHOXVaVzUwVjJsc2JGVndaR0YwWlNJc0luVndaR0YwWlVOdmJYQnZibVZ1ZENJc0lsSmxZV04wUTJ4aGMzTlRkR0YwYVdOSmJuUmxjbVpoWTJVaUxDSm5aWFJFWlhKcGRtVmtVM1JoZEdWR2NtOXRVSEp2Y0hNaUxDSlNSVk5GVWxaRlJGOVRVRVZEWDB0RldWTWlMQ0prYVhOd2JHRjVUbUZ0WlNJc0lrTnZibk4wY25WamRHOXlJaXdpYVNJc0lteGxibWQwYUNJc0ltMXBlRk53WldOSmJuUnZRMjl0Y0c5dVpXNTBJaXdpZG1Gc2FXUmhkR1ZVZVhCbFJHVm1JaXdpWTNKbFlYUmxUV1Z5WjJWa1VtVnpkV3gwUm5WdVkzUnBiMjRpTENKdGFYaFRkR0YwYVdOVGNHVmpTVzUwYjBOdmJYQnZibVZ1ZENJc0ltNWhiV1VpTENKd2NtOXdaWEowZVNJc0ltaGhjMDkzYmxCeWIzQmxjblI1SWl3aWFYTlNaWE5sY25abFpDSXNJbWx6UVd4eVpXRmtlVVJsWm1sdVpXUWlMQ0p6Y0dWalVHOXNhV041SWl3aVlYVjBiMkpwYm1RaUxDSjBlWEJsUkdWbUlpd2liRzlqWVhScGIyNGlMQ0p3Y205d1RtRnRaU0lzSW5aaGJHbGtZWFJsVFdWMGFHOWtUM1psY25KcFpHVWlMQ0pTWldGamRFTnNZWE56VFdsNGFXNGlMQ0p6Y0dWaklpd2ljSEp2ZEc4aUxDSndjbTkwYjNSNWNHVWlMQ0poZFhSdlFtbHVaRkJoYVhKeklpd2lYMTl5WldGamRFRjFkRzlDYVc1a1VHRnBjbk1pTENKcGMxSmxZV04wUTJ4aGMzTk5aWFJvYjJRaUxDSndkWE5vSWl3aVkzSmxZWFJsUTJoaGFXNWxaRVoxYm1OMGFXOXVJaXdpZEhsd1pXOW1VM0JsWXlJc0ltbHpUV2w0YVc1V1lXeHBaQ0lzSW0xbGNtZGxTVzUwYjFkcGRHaE9iMFIxY0d4cFkyRjBaVXRsZVhNaUxDSnZibVVpTENKMGQyOGlMQ0pyWlhraUxDSjFibVJsWm1sdVpXUWlMQ0p0WlhKblpXUlNaWE4xYkhRaUxDSmhJaXdpWVhCd2JIa2lMQ0owYUdseklpd2lZWEpuZFcxbGJuUnpJaXdpWWlJc0ltTWlMQ0pqYUdGcGJtVmtSblZ1WTNScGIyNGlMQ0ppYVc1a1FYVjBiMEpwYm1STlpYUm9iMlFpTENKamIyMXdiMjVsYm5RaUxDSnRaWFJvYjJRaUxDSmliM1Z1WkUxbGRHaHZaQ0lzSW1KcGJtUWlMQ0pmWDNKbFlXTjBRbTkxYm1SRGIyNTBaWGgwSWl3aVgxOXlaV0ZqZEVKdmRXNWtUV1YwYUc5a0lpd2lYMTl5WldGamRFSnZkVzVrUVhKbmRXMWxiblJ6SWl3aVkyOXRjRzl1Wlc1MFRtRnRaU0lzSW1OdmJuTjBjblZqZEc5eUlpd2lYMkpwYm1RaUxDSnVaWGRVYUdseklpd2lYMnhsYmlJc0ltRnlaM01pTENKQmNuSmhlU0lzSWw5clpYa2lMQ0p5WldKdmRXNWtUV1YwYUc5a0lpd2lTWE5OYjNWdWRHVmtVSEpsVFdsNGFXNGlMQ0pmWDJselRXOTFiblJsWkNJc0lrbHpUVzkxYm5SbFpGQnZjM1JOYVhocGJpSXNJbkpsY0d4aFkyVlRkR0YwWlNJc0ltNWxkMU4wWVhSbElpd2lZMkZzYkdKaFkyc2lMQ0oxY0dSaGRHVnlJaXdpWlc1eGRXVjFaVkpsY0d4aFkyVlRkR0YwWlNJc0ltbHpUVzkxYm5SbFpDSXNJbDlmWkdsa1YyRnlia2x6VFc5MWJuUmxaQ0lzSWxKbFlXTjBRMnhoYzNORGIyMXdiMjVsYm5RaUxDSmpjbVZoZEdWRGJHRnpjeUlzSW5CeWIzQnpJaXdpWTI5dWRHVjRkQ0lzSW1KcGJtUkJkWFJ2UW1sdVpFMWxkR2h2WkhNaUxDSndZV2x5Y3lJc0ltRjFkRzlDYVc1a1MyVjVJaXdpY21WbWN5SXNJbk4wWVhSbElpd2lhVzVwZEdsaGJGTjBZWFJsSWl3aVgybHpUVzlqYTBaMWJtTjBhVzl1SWl3aWFYTkJjbkpoZVNJc0ltMWxkR2h2WkU1aGJXVWlMQ0ptYjNKRllXTm9JaXdpWkdWbVlYVnNkRkJ5YjNCeklpd2lhWE5TWldGamRFTnNZWE56UVhCd2NtOTJaV1FpTENKamIyMXdiMjVsYm5SVGFHOTFiR1JWY0dSaGRHVWlMQ0pqYjIxd2IyNWxiblJYYVd4c1VtVmphV1YyWlZCeWIzQnpJaXdpVlU1VFFVWkZYMk52YlhCdmJtVnVkRmRwYkd4U1pXTnBaWFpsVUhKdmNITWlMQ0p3Y205d0lpd2lZMmhwYkdSRGIyNTBaWGgwSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCVVVFc1lVRkZRU3hKUVVGSlFTeFJRVUZWUXl4UlFVRlJMR2xDUVVWc1FrTXNXVUZCWTBRc1VVRkJVU3gzUWtGRGRFSkZMRmRCUVdGR0xGRkJRVkVzYzBKQlJYcENMRWRCUVRaQ0xHVkJRWHBDUnl4UlFVRlJReXhKUVVGSlF5eFRRVU5rTEVsQlFVbERMRkZCUVZWT0xGRkJRVkVzYjBKQlIzaENMRWxCVVVsUExESkNRVkpCUXl4WFFVRmhMRk5CU1dwQ0xGTkJRVk5ETEZOQlFWTkRMRWRCUTJoQ0xFOUJRVTlCTEVWQlkxUXNVMEZCVTBNc1VVRkJVVU1zUlVGQlowSkRMRVZCUVdkQ1F5eEhRVXN2UXl4SlFVRkpReXhGUVVGcFFpeEhRWGRDYWtKRExFVkJRWE5DTEVOQlQzaENReXhQUVVGUkxHTkJVMUpETEZGQlFWTXNZMEZSVkVNc1ZVRkJWeXhqUVZGWVF5eGhRVUZqTEdOQlVXUkRMR3RDUVVGdFFpeGpRV051UWtNc1owSkJRV2xDTEhGQ1FXZENha0pETEdkQ1FVRnBRaXh4UWtGTmFrSkRMR2RDUVVGcFFpeHhRa0ZwUW1wQ1F5eFBRVUZSTEdOQlYxSkRMRzFDUVVGdlFpeGpRVmx3UWtNc2EwSkJRVzFDTEdOQmNVSnVRa01zTUVKQlFUSkNMR05CYzBJelFrTXNjMEpCUVhWQ0xHTkJhVUoyUWtNc2IwSkJRWEZDTEdOQlkzSkNReXh0UWtGQmIwSXNZMEZoY0VKRExIRkNRVUZ6UWl4alFVOTBRa01zTUVKQlFUSkNMR05CVHpOQ1F5eHBRMEZCYTBNc1kwRlBiRU5ETERKQ1FVRTBRaXhqUVdNMVFrTXNaMEpCUVdsQ0xHbENRVTFtUXl4RlFVRTBRaXhEUVZjNVFrTXNlVUpCUVRCQ0xITkNRVmw0UWtNc1JVRkJjVUlzUTBGRGRrSkRMRmxCUVdFc1UwRkJVME1zUlVGQllVUXNSMEZEYWtORExFVkJRVmxFTEZsQlFXTkJMRWRCUlRWQ2RrSXNUMEZCVVN4VFFVRlRkMElzUlVGQllYaENMRWRCUXpWQ0xFZEJRVWxCTEVWQlEwWXNTVUZCU3l4SlFVRkplVUlzUlVGQlNTeEZRVUZIUVN4RlFVRkpla0lzUlVGQlR6QkNMRTlCUVZGRUxFbEJRMnBEUlN4eFFrRkJjVUpJTEVWQlFXRjRRaXhGUVVGUGVVSXNTMEZKTDBOeVFpeHJRa0ZCYlVJc1UwRkJVMjlDTEVWQlFXRndRaXhIUVVOV0xHVkJRWHBDYkVJc1VVRkJVVU1zU1VGQlNVTXNWVUZEWkhkRExHZENRVUZuUWtvc1JVRkJZWEJDTEVWQlFXMUNMR2RDUVVWc1JHOUNMRVZCUVZsd1FpeHJRa0ZCYjBKMFFpeFJRVU01UWl4SFFVTkJNRU1zUlVGQldYQkNMR3RDUVVOYVFTeEpRVWRLUkN4aFFVRmpMRk5CUVZOeFFpeEZRVUZoY2tJc1IwRkRUQ3hsUVVGNlFtcENMRkZCUVZGRExFbEJRVWxETEZWQlEyUjNReXhuUWtGQlowSktMRVZCUVdGeVFpeEZRVUZqTEZkQlJUZERjVUlzUlVGQldYSkNMR0ZCUVdWeVFpeFJRVU42UWl4SFFVTkJNRU1zUlVGQldYSkNMR0ZCUTFwQkxFbEJUMHBGTEdkQ1FVRnBRaXhUUVVGVGJVSXNSVUZCWVc1Q0xFZEJRMnBEYlVJc1JVRkJXVzVDTEdkQ1FVTmtiVUlzUlVGQldXNUNMR2RDUVVGclFuZENMREpDUVVNMVFrd3NSVUZCV1c1Q0xHZENRVU5hUVN4SFFVZEdiVUlzUlVGQldXNUNMR2RDUVVGclFrRXNSMEZIYkVOSUxGVkJRVmNzVTBGQlUzTkNMRVZCUVdGMFFpeEhRVU5HTEdWQlFYcENhRUlzVVVGQlVVTXNTVUZCU1VNc1ZVRkRaSGRETEdkQ1FVRm5Ra29zUlVGQllYUkNMRVZCUVZjc1VVRkZNVU56UWl4RlFVRlpkRUlzVlVGQldYQkNMRkZCUVZFc1IwRkJTVEJETEVWQlFWbDBRaXhWUVVGWFFTeEpRVVUzUkVRc1VVRkJVeXhUUVVGVGRVSXNSVUZCWVhaQ0xFbEJNRXRxUXl4VFFVRlROa0lzTWtKQlFUSkNUaXhGUVVGaGRrSXNSMEZETDBNc1NVRkJTMEVzUlVGRFNDeFBRVWRHTEVsQlFVc3NTVUZCU1RoQ0xFdEJRVkU1UWl4RlFVRlRMRU5CUTNoQ0xFbEJRVWtyUWl4RlFVRlhMMElzUlVGQlVUaENMRWRCUTNaQ0xFZEJRVXM1UWl4RlFVRlJaME1zWlVGQlpVWXNSMEZCTlVJc1EwRkpRU3hKUVVGSlJ5eEZRVUZoU0N4TFFVRlJWQ3hGUVVONlFuSkRMRmxCUTBkcFJDeEZRVU5FTERCTlFVbEJTQ3hIUVVkR0xFbEJRVWxKTEVWQlFXMUNTaXhMUVVGUlVDeEZRVU12UWl4SFFVRkpWeXhGUVVGclFpeERRVU53UWl4SlFVRkpReXhGUVVGaGFFSXNSVUZCTUVKaExHVkJRV1ZHTEVkQlEzUkVXQ3hGUVVFd1FsY3NSMEZETVVJc1MwRlpTaXhQUVZaQk9VTXNWMEZEYVVJc2RVSkJRV1p0UkN4RlFVTkJMSFZJUVVkQlRDeFJRVWRHVUN4RlFVRlpUeXhIUVVGUlJpd3lRa0ZCTWtKTUxFVkJRVmxQTEVkQlFVOURMRWxCUzNCRlVpeEZRVUZaVHl4SFFVRlJReXhKUVdwT2NFSkdMRU5CUVRKQ1RpeEZRVUZoZGtJc1NVRkZNVU52UXl4VFFVRlZMR05CUjFvc1UwRkJVMVFzWjBKQlFXZENTaXhGUVVGaFl5eEZRVUZUUXl4SFFVTTNReXhKUVVGTExFbEJRVWxETEV0QlFWbEdMRVZCUTJaQkxFVkJRVkZNTEdWQlFXVlBMRWxCUjBrc1pVRkJla0owUkN4UlFVRlJReXhKUVVGSlF5eFZRVU5rUXl4UlFVTXJRaXh0UWtGQmRFSnBSQ3hGUVVGUlJTeEhRVU5tTEc5R1FVVkJhRUlzUlVGQldVUXNZVUZCWlN4aFFVTXpRbXBETERKQ1FVRXlRbWxFTEVkQlF6TkNReXhIUVU5V0xGTkJRVk5ETEhWQ1FVRjFRazRzUlVGQmEwSktMRWRCUTJoRUxFbEJRVWxMTEVWQlFXRnlReXhGUVVGdlFtdERMR1ZCUVdWR0xFZEJRMmhFYUVNc1JVRkJiMEpuUXl4SFFVTndRaXhMUVVkQlZ5eEZRVUZuUWxRc1pVRkJaVVlzU1VGRGFrTTVReXhYUVVOcFFpeHJRa0ZCWm0xRUxFVkJRMEVzTWtwQlIwRk1MRWRCUzBGSkxFZEJRMFpzUkN4WFFVTnBRaXhuUWtGQlptMUVMRWRCUVN0RExIVkNRVUZtUVN4RlFVTm9ReXhuU1VGSFFVd3NSMEZUVGl4VFFVRlRTaXh4UWtGQmNVSklMRVZCUVdGdFFpeEhRVU42UXl4SFFVRkxRU3hGUVVGTUxFTkJjVUpCTVVRc1YwRkRhMElzYlVKQlFWUXdSQ3hGUVVOUUxITklRVWxHTVVRc1dVRkRSMWNzUlVGQlpTdERMRWRCUTJoQ0xHOUhRVWxHTEVsQlFVbERMRVZCUVZGd1FpeEZRVUZaY1VJc1ZVRkRjRUpETEVWQlFXZENSaXhGUVVGTlJ5eHhRa0ZUTVVJc1NVRkJTeXhKUVVGSmFFSXNTMEZLVEZrc1JVRkJTMVlzWlVGQlpURkRMR0ZCUTNSQ0swSXNSVUZCYlVKMFFpeFBRVUZQZDBJc1JVRkJZVzFDTEVWQlFVc3pReXhSUVVjM1FqSkRMRVZCUTJZc1IwRkJTMEVzUlVGQlMxWXNaVUZCWlVZc1NVRkpja0pCTEVsQlFWTjRReXhYUVVGaUxFTkJTMEVzU1VGQlNYbERMRVZCUVZkWExFVkJRVXRhTEVkQlEyaENTU3hGUVVGdFFsTXNSVUZCVFZnc1pVRkJaVVlzUjBGSE5VTXNSMEZHUVZVc2RVSkJRWFZDVGl4RlFVRnJRa29zUjBGRmNrTlVMRVZCUVcxQ1Z5eGxRVUZsUml4SFFVTndRMVFzUlVGQmJVSlRMRWRCUVUxUUxFVkJRV0ZSTEU5QlEycERMRU5CUzB3c1NVRkJTV2RDTEVWQlFYRkNha1FzUlVGQmIwSnJReXhsUVVGbFJpeEhRVkUxUkN4SFFWQnhReXh0UWtGQllrTXNTVUZIY2tKblFpeEpRVU5CWWl4SlFVTnBRaXhKUVVGc1FsRXNSVUZCUzA0c1UwRkhURk1zUlVGQlkwY3NTMEZCUzJ4Q0xFVkJRVTFETEVkQlEzcENXU3hGUVVGTllpeEhRVUZSUXl4UFFVVmtMRWRCUVVsSExFVkJRV3RDTEVOQlEzQkNMRWxCUVVsRExFVkJRV0Z5UXl4RlFVRnZRbWRETEVkQlIzSkRPVU1zVjBGRFJTdEVMRWxCUTJ0Q0xIVkNRVUZtV2l4SFFVTm5RaXhuUWtGQlprRXNSMEZEU2l4dFJrRkZRVUVzUlVGRFFVd3NSMEZMYVVJc2RVSkJRV1pMTEVWQlEwWlJMRVZCUVUxaUxFZEJRVkZHTERKQ1FVRXlRbVVzUlVGQlRXSXNSMEZCVDBNc1IwRkRPVUlzWjBKQlFXWkpMRWxCUTFSUkxFVkJRVTFpTEVkQlFWRnRRaXh6UWtGQmMwSk9MRVZCUVUxaUxFZEJRVTlETEZOQlIyNUVXU3hGUVVGTllpeEhRVUZSUXl4RlFVTmxMR1ZCUVhwQ09VTXNVVUZCVVVNc1NVRkJTVU1zVlVGSFZTeHRRa0ZCWWpSRExFZEJRVEpDVnl4RlFVRkxjRUlzWTBGRGVrTnhRaXhGUVVGTllpeEhRVUZOVWl4WlFVRmpiMElzUlVGQlMzQkNMRmxCUVdNc1NVRkJUVkVzVlVGMFJ6ZEVMRWRCUVRaQ0xHVkJRWHBDTjBNc1VVRkJVVU1zU1VGQlNVTXNVMEZCTWtJc1EwRkRla01zU1VGQlNTdEVMRk5CUVc5Q1VpeEZRVU53UWxNc1JVRkJPRUlzVjBGQlprUXNSMEZCYjBNc1QwRkJWRklzUlVGRmFrSXNaVUZCZWtKNlJDeFJRVUZSUXl4SlFVRkpReXhWUVVOa1F5eFJRVU5GSzBRc1JVRkRRU3gzVFVGSlFUVkNMRVZCUVZsRUxHRkJRV1VzWVVGRGJFSXNUMEZCVkc5Q0xFVkJRV2RDTEV0QlFVOVJMRWxCYzBwcVF5eFRRVUZUUlN3MlFrRkJOa0pETEVWQlFVdERMRWRCVFhwRExFbEJRVXNzU1VGQlNVTXNTMEZNVkhaRkxGZEJRMFZ4UlN4SFFVRlBReXhIUVVGelFpeHBRa0ZCVWtRc1IwRkJiVU1zYVVKQlFWSkRMRVZCUTJoRUxEWkVRVWRqUVN4RlFVTldRU3hGUVVGSmRFSXNaVUZCWlhWQ0xFdEJRM0pDZGtVc1owSkJRMlYzUlN4SlFVRmlTQ3hGUVVGSlJTeEhRVU5LTEhsUVFVdEJRU3hIUVVWR1JpeEZRVUZKUlN4SFFVRlBSQ3hGUVVGSlF5eEpRVWR1UWl4UFFVRlBSaXhGUVZkVUxGTkJRVk42UWl3eVFrRkJNa0o1UWl4RlFVRkxReXhIUVVOMlF5eFBRVUZQTEZOQlFWTkhMR1ZCUTJRc1NVRkJTVU1zUlVGQlNVd3NSVUZCU1Uwc1RVRkJUVU1zUzBGQlRVTXNWMEZEY0VKRExFVkJRVWxTTEVWQlFVbExMRTFCUVUxRExFdEJRVTFETEZkQlEzaENMRWRCUVZNc1RVRkJURWdzUlVGRFJpeFBRVUZQU1N4RlFVTkdMRWRCUVZNc1RVRkJURUVzUlVGRFZDeFBRVUZQU2l4RlFVVlVMRWxCUVVsTExFVkJRVWtzUjBGSFVpeFBRVVpCV0N3MlFrRkJOa0pYTEVWQlFVZE1MRWRCUTJoRFRpdzJRa0ZCTmtKWExFVkJRVWRFTEVkQlEzcENReXhIUVZsWUxGTkJRVk5rTEhOQ1FVRnpRa2tzUlVGQlMwTXNSMEZEYkVNc1QwRkJUeXhUUVVGVFZTeHJRa0ZEWkZnc1JVRkJTVTBzVFVGQlRVTXNTMEZCVFVNc1YwRkRhRUpRTEVWQlFVbExMRTFCUVUxRExFdEJRVTFETEZsQlYzQkNMRk5CUVZOSkxHMUNRVUZ0UWtNc1JVRkJWME1zUjBGRGNrTXNTVUZCU1VNc1JVRkJZMFFzUlVGQlQwVXNTMEZCUzBnc1IwRkRPVUlzUjBGQk5rSXNaVUZCZWtKcVJpeFJRVUZSUXl4SlFVRkpReXhUUVVFeVFpeERRVU42UTJsR0xFVkJRVmxGTEc5Q1FVRnpRa29zUlVGRGJFTkZMRVZCUVZsSExHMUNRVUZ4UWtvc1JVRkRha05ETEVWQlFWbEpMSE5DUVVGM1FpeExRVU53UXl4SlFVRkpReXhGUVVGblFsQXNSVUZCVlZFc1dVRkJXWEJFTEZsQlEzUkRjVVFzUlVGQlVWQXNSVUZCV1VNc1MwRkRlRUpFTEVWQlFWbERMRXRCUVU4c1UwRkJVMDhzUjBGRE1VSXNTVUZEUlN4SlFVRkpReXhGUVVGUGFFSXNWVUZCVlhCRExFOUJRMjVDY1VRc1JVRkJUME1zVFVGQlRVWXNSVUZCVHl4RlFVRkpRU3hGUVVGUExFVkJRVWtzUjBGRGJrTkhMRVZCUVU4c1JVRkRWRUVzUlVGQlQwZ3NSVUZEVUVjc1NVRkZRVVlzUlVGQlMwVXNSVUZCVHl4SFFVRkxia0lzVlVGQlZXMUNMRWRCVFRkQ0xFZEJRVWxLTEVsQlFWbFdMRWRCUVhsQ0xFOUJRVnBWTEVWQlEwVXNaVUZCZWtJelJpeFJRVUZSUXl4SlFVRkpReXhWUVVOa1F5eFRRVU5GTEVWQlEwRXNjMFpCUlVGeFJpeFJRVWRETEVsQlFVdExMRVZCUVV0eVJDeFBRVlZtTEUxQlZEWkNMR1ZCUVhwQ2VFTXNVVUZCVVVNc1NVRkJTVU1zVlVGRFpFTXNVMEZEUlN4RlFVTkJMREpMUVVkQmNVWXNSMEZIUjB3c1JVRkZWQ3hKUVVGSllTeEZRVUZuUWs0c1JVRkJUV2hDTEUxQlFVMVRMRVZCUVdGUUxGZEJTVGRETEU5QlNFRnZRaXhGUVVGaldDeHZRa0ZCYzBKS0xFVkJRM0JEWlN4RlFVRmpWaXh0UWtGQmNVSktMRVZCUTI1RFl5eEZRVUZqVkN4elFrRkJkMEpOTEVWQlF5OUNSeXhIUVVkWUxFOUJRVTlpTEVWQmFVSlVMRWxCUVVsakxFVkJRVzlDTEVOQlEzUkNla1VzYTBKQlFXMUNMRmRCUTJwQ2JVUXNTMEZCUzNWQ0xHRkJRV01zU1VGSmJrSkRMRVZCUVhGQ0xFTkJRM1pDZEVVc2NVSkJRWE5DTEZkQlEzQkNPRU1zUzBGQlMzVkNMR0ZCUVdNc1NVRlJia0l4UXl4RlFVRnJRaXhEUVV0d1FqUkRMR0ZCUVdNc1UwRkJVME1zUlVGQlZVTXNSMEZETDBJelFpeExRVUZMTkVJc1VVRkJVVU1zYjBKQlFXOUNOMElzUzBGQlRUQkNMRVZCUVZWRExFbEJVMjVFUnl4VlFVRlhMRmRCWVZRc1RVRmFOa0lzWlVGQmVrSjZSeXhSUVVGUlF5eEpRVUZKUXl4WFFVTmtReXhSUVVORmQwVXNTMEZCU3l0Q0xHMUNRVU5NTEd0S1FVZERMMElzUzBGQlMyTXNZVUZCWldRc1MwRkJTMk1zV1VGQldYQkVMR0ZCUTNCRGMwTXNTMEZCU3psQ0xFMUJRMHdzWVVGRlNqaENMRXRCUVVzclFpeHZRa0ZCY1VJc1MwRkZia0l2UWl4TFFVRkxkVUlzWTBGSlpGTXNSVUZCYzBJc1lVRnZTVEZDTEU5QmJrbEJMMGNzVVVGRFJTdEhMRVZCUVc5Q2FFUXNWVUZEY0VKc1JDeEZRVUZsYTBRc1ZVRkRaa2dzUjBGWFJpeFRRVUZUYjBRc1dVRkJXVzVFTEVkQlNXNUNMRWxCUVVsdVFpeEZRVUZqYUVNc1UwRkJVeXhUUVVGVGRVY3NSVUZCVDBNc1JVRkJVMUFzUjBGSmNrSXNaVUZCZWtKMlJ5eFJRVUZSUXl4SlFVRkpReXhWUVVOa1F5eFJRVU5GZDBVc1owSkJRV2RDY2tNc1JVRkRhRUlzZVVoQlRVRnhReXhMUVVGTFpDeHhRa0ZCY1VKeVFpeFJRWHBHYkVNc1UwRkJVM1ZGTEc5Q1FVRnZRamxDTEVkQlJUTkNMRWxCUkVFc1NVRkJTU3RDTEVWQlFWRXZRaXhGUVVGVmNFSXNjVUpCUTJKMFFpeEZRVUZKTEVWQlFVZEJMRVZCUVVsNVJTeEZRVUZOZUVVc1QwRkJVVVFzUjBGQlN5eEZRVUZITEVOQlEzaERMRWxCUVVrd1JTeEZRVUZqUkN4RlFVRk5la1VzUjBGRGNFSXlReXhGUVVGVE9FSXNSVUZCVFhwRkxFVkJRVWtzUjBGRGRrSXdReXhGUVVGVlowTXNSMEZCWldwRExHMUNRVUZ0UWtNc1JVRkJWME1zU1VGeFJuSkVOa0lzUTBGQmIwSndReXhOUVVkMFFrRXNTMEZCUzJ0RExFMUJRVkZCTEVWQlEySnNReXhMUVVGTGJVTXNVVUZCVlVFc1JVRkRabTVETEV0QlFVdDFReXhMUVVGUGNFZ3NXVUZEV2paRkxFdEJRVXMwUWl4UlFVRlZRU3hIUVVGWE5VWXNSVUZGTVVKblJTeExRVUZMZDBNc1RVRkJVU3hMUVV0aUxFbEJRVWxETEVWQlFXVjZReXhMUVVGTGRrUXNaMEpCUVd0Q2RVUXNTMEZCUzNaRUxHdENRVUZ2UWl4TFFVTjBReXhsUVVGNlFuQkNMRkZCUVZGRExFbEJRVWxETEdWQlIwdHhSU3hKUVVGcVFqWkRMRWRCUTBGNlF5eExRVUZMZGtRc1owSkJRV2RDYVVjc2EwSkJTWEpDUkN4RlFVRmxMRTFCUjI1Q2NrZ3NWMEZETUVJc2FVSkJRV3BDY1Vnc1NVRkJPRUowUWl4TlFVRk5kMElzVVVGQlVVWXNSMEZEYmtRc2MwUkJRMEU1UlN4RlFVRlpSQ3hoUVVGbExESkNRVWMzUW5ORExFdEJRVXQzUXl4TlFVRlJReXhKUVRKRVppeEpRVUZMTEVsQlFVbEhMRXRCZWtSVWFrWXNSVUZCV1hGQ0xGVkJRVmtzU1VGQlNXZEVMRVZCUXpWQ2NrVXNSVUZCV1hGQ0xGVkJRVlU0UWl4WlFVRmpia1FzUlVGRGNFTkJMRVZCUVZseFFpeFZRVUZWUlN4eFFrRkJkVUlzUjBGRk4wTnFSQ3hGUVVGbE5FY3NVVUZCVVM5RkxIRkNRVUZ4UWpKRExFdEJRVXNzUzBGQlRUbERMRWxCUlhaRVJ5eHhRa0ZCY1VKSUxFVkJRV0V5UkN4SFFVTnNRM2hFTEhGQ1FVRnhRa2dzUlVGQllXMUNMRWRCUTJ4RGFFSXNjVUpCUVhGQ1NDeEZRVUZoTmtRc1IwRkhPVUkzUkN4RlFVRlpia0lzYTBKQlEyUnRRaXhGUVVGWmJVWXNZVUZCWlc1R0xFVkJRVmx1UWl4dFFrRkhXaXhsUVVGNlFtNUNMRkZCUVZGRExFbEJRVWxETEZkQlMxWnZReXhGUVVGWmJrSXNhMEpCUTJSdFFpeEZRVUZaYmtJc1owSkJRV2RDZFVjc2NVSkJRWFZDTEVsQlJXcEVjRVlzUlVGQldYRkNMRlZCUVZWMlF5eHJRa0ZEZUVKclFpeEZRVUZaY1VJc1ZVRkJWWFpETEdkQ1FVRm5Rbk5ITEhGQ1FVRjFRaXhMUVVscVJUTklMRmRCUTBWMVF5eEZRVUZaY1VJc1ZVRkJWWEpETEU5QlEzUkNMREpGUVVjeVFpeGxRVUY2UW5SQ0xGRkJRVkZETEVsQlFVbERMRmRCUTJSRExGTkJRMGR0UXl4RlFVRlpjVUlzVlVGQlZXZEZMSE5DUVVOMlFpdzRTMEZKUVd4RkxFVkJRVXR3UWl4aFFVRmxMR1ZCUlhSQ2JFTXNVMEZEUjIxRExFVkJRVmx4UWl4VlFVRlZhVVVzTUVKQlEzWkNMR2RIUVVWQmJrVXNSVUZCUzNCQ0xHRkJRV1VzWlVGRmRFSnNReXhUUVVOSGJVTXNSVUZCV1hGQ0xGVkJRVlZyUlN4cFEwRkRka0lzT0VkQlJVRndSU3hGUVVGTGNFSXNZVUZCWlN4blFrRkxSSGhDTEVWQlEyaENlVUlzUlVGQldYRkNMRlZCUVZVMFJDeExRVU42UW1wR0xFVkJRVmx4UWl4VlFVRlZORVFzUjBGQll5eE5RVWw0UXl4UFFVRlBha1lzUjBFeE0wSlViRU1zTWtKQlJESkNMR1ZCUVhwQ1NpeFJRVUZSUXl4SlFVRkpReXhUUVVObExFTkJRek5DTkVnc1MwRkJUU3hQUVVOT2FFSXNVVUZCVXl4VlFVTlVhVUlzWVVGQll5eHBRa0ZIWVN4SFFUQXpRaTlDUXl4UFFVRlBReXhSUVVGVmVrZ2lMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlkzSmxZWFJsTFhKbFlXTjBMV05zWVhOekwyWmhZM1J2Y25rdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZXhwb3J0cy5kZWZhdWx0PWFjdGl2ZUVsZW1lbnQ7dmFyIF9vd25lckRvY3VtZW50PXJlcXVpcmUoXCIuL293bmVyRG9jdW1lbnRcIiksX293bmVyRG9jdW1lbnQyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX293bmVyRG9jdW1lbnQpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fWZ1bmN0aW9uIGFjdGl2ZUVsZW1lbnQoKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06KDAsX293bmVyRG9jdW1lbnQyLmRlZmF1bHQpKCk7dHJ5e3JldHVybiBlLmFjdGl2ZUVsZW1lbnR9Y2F0Y2goZSl7fX1tb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUZqZEdsMlpVVnNaVzFsYm5RdWFuTWlYU3dpYm1GdFpYTWlPbHNpVDJKcVpXTjBJaXdpWkdWbWFXNWxVSEp2Y0dWeWRIa2lMQ0psZUhCdmNuUnpJaXdpZG1Gc2RXVWlMQ0prWldaaGRXeDBJaXdpWVdOMGFYWmxSV3hsYldWdWRDSXNJbDl2ZDI1bGNrUnZZM1Z0Wlc1MElpd2ljbVZ4ZFdseVpTSXNJbDl2ZDI1bGNrUnZZM1Z0Wlc1ME1pSXNJbDlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRaUxDSnZZbW9pTENKZlgyVnpUVzlrZFd4bElpd2laRzlqSWl3aVlYSm5kVzFsYm5Seklpd2liR1Z1WjNSb0lpd2lkVzVrWldacGJtVmtJaXdpWlNJc0ltMXZaSFZzWlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkZRVUVzVDBGQlQwTXNaVUZCWlVNc1VVRkJVeXhoUVVGakxFTkJRek5EUXl4UFFVRlBMRWxCUlZSRUxGRkJRVkZGTEZGQlFWVkRMR05CUld4Q0xFbEJRVWxETEdWQlFXbENReXhSUVVGUkxHMUNRVVY2UWtNc1owSkJRV3RDUXl4MVFrRkJkVUpJTEdkQ1FVVTNReXhUUVVGVFJ5eDFRa0ZCZFVKRExFZEJRVThzVDBGQlQwRXNSMEZCVDBFc1JVRkJTVU1zVjBGQllVUXNSVUZCVFN4RFFVRkZUaXhSUVVGVFRTeEhRVVYyUml4VFFVRlRUQ3huUWtGRFVDeEpRVUZKVHl4RlFVRk5ReXhWUVVGVlF5eFBRVUZUTEZGQlFYTkNReXhKUVVGcVFrWXNWVUZCVlN4SFFVRnRRa0VzVlVGQlZTeEpRVUZMTEVWQlFVbE1MR2RDUVVGblFrb3NWMEZGYkVjc1NVRkRSU3hQUVVGUFVTeEZRVUZKVUN4alFVTllMRTFCUVU5WExFdEJSVmhETEU5QlFVOW1MRkZCUVZWQkxGRkJRV2xDSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMlJ2YlMxb1pXeHdaWEp6TDJGamRHbDJaVVZzWlcxbGJuUXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGV4cG9ydHMuZGVmYXVsdD1hZGRDbGFzczt2YXIgX2hhc0NsYXNzPXJlcXVpcmUoXCIuL2hhc0NsYXNzXCIpLF9oYXNDbGFzczI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGFzQ2xhc3MpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocyl7cmV0dXJuIHMmJnMuX19lc01vZHVsZT9zOntkZWZhdWx0OnN9fWZ1bmN0aW9uIGFkZENsYXNzKHMsZSl7cy5jbGFzc0xpc3Q/cy5jbGFzc0xpc3QuYWRkKGUpOigwLF9oYXNDbGFzczIuZGVmYXVsdCkocyxlKXx8KFwic3RyaW5nXCI9PXR5cGVvZiBzLmNsYXNzTmFtZT9zLmNsYXNzTmFtZT1zLmNsYXNzTmFtZStcIiBcIitlOnMuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwocy5jbGFzc05hbWUmJnMuY2xhc3NOYW1lLmJhc2VWYWx8fFwiXCIpK1wiIFwiK2UpKX1tb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUZrWkVOc1lYTnpMbXB6SWwwc0ltNWhiV1Z6SWpwYklrOWlhbVZqZENJc0ltUmxabWx1WlZCeWIzQmxjblI1SWl3aVpYaHdiM0owY3lJc0luWmhiSFZsSWl3aVpHVm1ZWFZzZENJc0ltRmtaRU5zWVhOeklpd2lYMmhoYzBOc1lYTnpJaXdpY21WeGRXbHlaU0lzSWw5b1lYTkRiR0Z6Y3pJaUxDSmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwSWl3aWIySnFJaXdpWDE5bGMwMXZaSFZzWlNJc0ltVnNaVzFsYm5RaUxDSmpiR0Z6YzA1aGJXVWlMQ0pqYkdGemMweHBjM1FpTENKaFpHUWlMQ0p6WlhSQmRIUnlhV0oxZEdVaUxDSmlZWE5sVm1Gc0lpd2liVzlrZFd4bElsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVVZCUVN4UFFVRlBReXhsUVVGbFF5eFJRVUZUTEdGQlFXTXNRMEZETTBORExFOUJRVThzU1VGRlZFUXNVVUZCVVVVc1VVRkJWVU1zVTBGRmJFSXNTVUZCU1VNc1ZVRkJXVU1zVVVGQlVTeGpRVVZ3UWtNc1YwRkJZVU1zZFVKQlFYVkNTQ3hYUVVWNFF5eFRRVUZUUnl4MVFrRkJkVUpETEVkQlFVOHNUMEZCVDBFc1IwRkJUMEVzUlVGQlNVTXNWMEZCWVVRc1JVRkJUU3hEUVVGRlRpeFJRVUZUVFN4SFFVVjJSaXhUUVVGVFRDeFRRVUZUVHl4RlFVRlRReXhIUVVOeVFrUXNSVUZCVVVVc1ZVRkJWMFlzUlVGQlVVVXNWVUZCVlVNc1NVRkJTVVlzU1VGQmNVSXNSVUZCU1V3c1YwRkJWMG9zVTBGQlUxRXNSVUZCVTBNc1MwRkJOa01zYVVKQlFYUkNSQ3hGUVVGUlF5eFZRVUYzUWtRc1JVRkJVVU1zVlVGQldVUXNSVUZCVVVNc1ZVRkJXU3hKUVVGTlFTeEZRVUZsUkN4RlFVRlJTU3hoUVVGaExGTkJRVlZLTEVWQlFWRkRMRmRCUVdGRUxFVkJRVkZETEZWQlFWVkpMRk5CUVZjc1NVRkJUU3hKUVVGTlNpeEpRVVYwVkVzc1QwRkJUMmhDTEZGQlFWVkJMRkZCUVdsQ0lpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJSdmJTMW9aV3h3WlhKekwyTnNZWE56TDJGa1pFTnNZWE56TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBoYXNDbGFzcyhzLGUpe3JldHVybiBzLmNsYXNzTGlzdD8hIWUmJnMuY2xhc3NMaXN0LmNvbnRhaW5zKGUpOi0xIT09KFwiIFwiKyhzLmNsYXNzTmFtZS5iYXNlVmFsfHxzLmNsYXNzTmFtZSkrXCIgXCIpLmluZGV4T2YoXCIgXCIrZStcIiBcIil9T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZXhwb3J0cy5kZWZhdWx0PWhhc0NsYXNzLG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltaGhjME5zWVhOekxtcHpJbDBzSW01aGJXVnpJanBiSW1oaGMwTnNZWE56SWl3aVpXeGxiV1Z1ZENJc0ltTnNZWE56VG1GdFpTSXNJbU5zWVhOelRHbHpkQ0lzSW1OdmJuUmhhVzV6SWl3aVltRnpaVlpoYkNJc0ltbHVaR1Y0VDJZaUxDSlBZbXBsWTNRaUxDSmtaV1pwYm1WUWNtOXdaWEowZVNJc0ltVjRjRzl5ZEhNaUxDSjJZV3gxWlNJc0ltUmxabUYxYkhRaUxDSnRiMlIxYkdVaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJUVUVzVTBGQlUwRXNVMEZCVTBNc1JVRkJVME1zUjBGRGVrSXNUMEZCU1VRc1JVRkJVVVVzV1VGQmIwSkVMRWRCUVdGRUxFVkJRVkZGTEZWQlFWVkRMRk5CUVZOR0xFbEJRVEJJTEV0QlFXeEhMRXRCUVU5RUxFVkJRVkZETEZWQlFWVkhMRk5CUVZkS0xFVkJRVkZETEZkQlFXRXNTMEZCUzBrc1VVRkJVU3hKUVVGTlNpeEZRVUZaTEV0QlRERk1TeXhQUVVGUFF5eGxRVUZsUXl4UlFVRlRMR0ZCUVdNc1EwRkRNME5ETEU5QlFVOHNTVUZGVkVRc1VVRkJVVVVzVVVGQlZWZ3NVMEZKYkVKWkxFOUJRVTlJTEZGQlFWVkJMRkZCUVdsQ0lpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJSdmJTMW9aV3h3WlhKekwyTnNZWE56TDJoaGMwTnNZWE56TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxleHBvcnRzLmhhc0NsYXNzPWV4cG9ydHMucmVtb3ZlQ2xhc3M9ZXhwb3J0cy5hZGRDbGFzcz12b2lkIDA7dmFyIF9hZGRDbGFzcz1yZXF1aXJlKFwiLi9hZGRDbGFzc1wiKSxfYWRkQ2xhc3MyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FkZENsYXNzKSxfcmVtb3ZlQ2xhc3M9cmVxdWlyZShcIi4vcmVtb3ZlQ2xhc3NcIiksX3JlbW92ZUNsYXNzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZW1vdmVDbGFzcyksX2hhc0NsYXNzPXJlcXVpcmUoXCIuL2hhc0NsYXNzXCIpLF9oYXNDbGFzczI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGFzQ2xhc3MpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocyl7cmV0dXJuIHMmJnMuX19lc01vZHVsZT9zOntkZWZhdWx0OnN9fWV4cG9ydHMuYWRkQ2xhc3M9X2FkZENsYXNzMi5kZWZhdWx0LGV4cG9ydHMucmVtb3ZlQ2xhc3M9X3JlbW92ZUNsYXNzMi5kZWZhdWx0LGV4cG9ydHMuaGFzQ2xhc3M9X2hhc0NsYXNzMi5kZWZhdWx0LGV4cG9ydHMuZGVmYXVsdD17YWRkQ2xhc3M6X2FkZENsYXNzMi5kZWZhdWx0LHJlbW92ZUNsYXNzOl9yZW1vdmVDbGFzczIuZGVmYXVsdCxoYXNDbGFzczpfaGFzQ2xhc3MyLmRlZmF1bHR9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1sdVpHVjRMbXB6SWwwc0ltNWhiV1Z6SWpwYklrOWlhbVZqZENJc0ltUmxabWx1WlZCeWIzQmxjblI1SWl3aVpYaHdiM0owY3lJc0luWmhiSFZsSWl3aWFHRnpRMnhoYzNNaUxDSnlaVzF2ZG1WRGJHRnpjeUlzSW1Ga1pFTnNZWE56SWl3aWRXNWtaV1pwYm1Wa0lpd2lYMkZrWkVOc1lYTnpJaXdpY21WeGRXbHlaU0lzSWw5aFpHUkRiR0Z6Y3pJaUxDSmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwSWl3aVgzSmxiVzkyWlVOc1lYTnpJaXdpWDNKbGJXOTJaVU5zWVhOek1pSXNJbDlvWVhORGJHRnpjeUlzSWw5b1lYTkRiR0Z6Y3pJaUxDSnZZbW9pTENKZlgyVnpUVzlrZFd4bElpd2laR1ZtWVhWc2RDSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZGUVVFc1QwRkJUME1zWlVGQlpVTXNVVUZCVXl4aFFVRmpMRU5CUXpORFF5eFBRVUZQTEVsQlJWUkVMRkZCUVZGRkxGTkJRVmRHTEZGQlFWRkhMRmxCUVdOSUxGRkJRVkZKTEdOQlFWZERMRVZCUlRWRUxFbEJRVWxETEZWQlFWbERMRkZCUVZFc1kwRkZjRUpETEZkQlFXRkRMSFZDUVVGMVFrZ3NWMEZGY0VOSkxHRkJRV1ZJTEZGQlFWRXNhVUpCUlhaQ1NTeGpRVUZuUWtZc2RVSkJRWFZDUXl4alFVVjJRMFVzVlVGQldVd3NVVUZCVVN4alFVVndRazBzVjBGQllVb3NkVUpCUVhWQ1J5eFhRVVY0UXl4VFFVRlRTQ3gxUWtGQmRVSkxMRWRCUVU4c1QwRkJUMEVzUjBGQlQwRXNSVUZCU1VNc1YwRkJZVVFzUlVGQlRTeERRVUZGUlN4UlFVRlRSaXhIUVVWMlJtUXNVVUZCVVVrc1UwRkJWMGtzVjBGQlYxRXNVVUZET1VKb1FpeFJRVUZSUnl4WlFVRmpVU3hqUVVGalN5eFJRVU53UTJoQ0xGRkJRVkZGTEZOQlFWZFhMRmRCUVZkSExGRkJRemxDYUVJc1VVRkJVV2RDTEZGQlFWVXNRMEZCUlZvc1UwRkJWVWtzVjBGQlYxRXNVVUZCVTJJc1dVRkJZVkVzWTBGQlkwc3NVVUZCVTJRc1UwRkJWVmNzVjBGQlYwY2lMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlpHOXRMV2hsYkhCbGNuTXZZMnhoYzNNdmFXNWtaWGd1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByZXBsYWNlQ2xhc3NOYW1lKHMsZSl7cmV0dXJuIHMucmVwbGFjZShuZXcgUmVnRXhwKFwiKF58XFxcXHMpXCIrZStcIig/OlxcXFxzfCQpXCIsXCJnXCIpLFwiJDFcIikucmVwbGFjZSgvXFxzKy9nLFwiIFwiKS5yZXBsYWNlKC9eXFxzKnxcXHMqJC9nLFwiXCIpfW1vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIHJlbW92ZUNsYXNzKHMsZSl7cy5jbGFzc0xpc3Q/cy5jbGFzc0xpc3QucmVtb3ZlKGUpOlwic3RyaW5nXCI9PXR5cGVvZiBzLmNsYXNzTmFtZT9zLmNsYXNzTmFtZT1yZXBsYWNlQ2xhc3NOYW1lKHMuY2xhc3NOYW1lLGUpOnMuc2V0QXR0cmlidXRlKFwiY2xhc3NcIixyZXBsYWNlQ2xhc3NOYW1lKHMuY2xhc3NOYW1lJiZzLmNsYXNzTmFtZS5iYXNlVmFsfHxcIlwiLGUpKX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbkpsYlc5MlpVTnNZWE56TG1weklsMHNJbTVoYldWeklqcGJJbkpsY0d4aFkyVkRiR0Z6YzA1aGJXVWlMQ0p2Y21sblEyeGhjM01pTENKamJHRnpjMVJ2VW1WdGIzWmxJaXdpY21Wd2JHRmpaU0lzSWxKbFowVjRjQ0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKeVpXMXZkbVZEYkdGemN5SXNJbVZzWlcxbGJuUWlMQ0pqYkdGemMwNWhiV1VpTENKamJHRnpjMHhwYzNRaUxDSnlaVzF2ZG1VaUxDSnpaWFJCZEhSeWFXSjFkR1VpTENKaVlYTmxWbUZzSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4aFFVVkJMRk5CUVZOQkxHbENRVUZwUWtNc1JVRkJWME1zUjBGRGJrTXNUMEZCVDBRc1JVRkJWVVVzVVVGQlVTeEpRVUZKUXl4UFFVRlBMRlZCUVZsR0xFVkJRV2RDTEZsQlFXRXNTMEZCVFN4TlFVRk5ReXhSUVVGUkxFOUJRVkVzUzBGQlMwRXNVVUZCVVN4aFFVRmpMRWxCUjNSSlJTeFBRVUZQUXl4UlFVRlZMRk5CUVZORExGbEJRVmxETEVWQlFWTkRMRWRCUTNwRFJDeEZRVUZSUlN4VlFVRlhSaXhGUVVGUlJTeFZRVUZWUXl4UFFVRlBSaXhIUVVGcFJDeHBRa0ZCZEVKRUxFVkJRVkZETEZWQlFYZENSQ3hGUVVGUlF5eFZRVUZaVkN4cFFrRkJhVUpSTEVWQlFWRkRMRlZCUVZkQkxFZEJRV2RDUkN4RlFVRlJTU3hoUVVGaExGRkJRVk5hTEdsQ1FVRnBRbEVzUlVGQlVVTXNWMEZCWVVRc1JVRkJVVU1zVlVGQlZVa3NVMEZCVnl4SFFVRkpTaUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWtiMjB0YUdWc2NHVnljeTlqYkdGemN5OXlaVzF2ZG1WRGJHRnpjeTVxY3lKOSIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGV4cG9ydHMuZGVmYXVsdD1maWx0ZXJFdmVudHM7dmFyIF9jb250YWlucz1yZXF1aXJlKFwiLi4vcXVlcnkvY29udGFpbnNcIiksX2NvbnRhaW5zMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb250YWlucyksX3F1ZXJ5U2VsZWN0b3JBbGw9cmVxdWlyZShcIi4uL3F1ZXJ5L3F1ZXJ5U2VsZWN0b3JBbGxcIiksX3F1ZXJ5U2VsZWN0b3JBbGwyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3F1ZXJ5U2VsZWN0b3JBbGwpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fWZ1bmN0aW9uIGZpbHRlckV2ZW50cyhlLHQpe3JldHVybiBmdW5jdGlvbiBmaWx0ZXJIYW5kbGVyKHIpe3ZhciBsPXIuY3VycmVudFRhcmdldCx1PXIudGFyZ2V0OygwLF9xdWVyeVNlbGVjdG9yQWxsMi5kZWZhdWx0KShsLGUpLnNvbWUoZnVuY3Rpb24oZSl7cmV0dXJuKDAsX2NvbnRhaW5zMi5kZWZhdWx0KShlLHUpfSkmJnQuY2FsbCh0aGlzLHIpfX1tb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVpwYkhSbGNpNXFjeUpkTENKdVlXMWxjeUk2V3lKUFltcGxZM1FpTENKa1pXWnBibVZRY205d1pYSjBlU0lzSW1WNGNHOXlkSE1pTENKMllXeDFaU0lzSW1SbFptRjFiSFFpTENKbWFXeDBaWEpGZG1WdWRITWlMQ0pmWTI5dWRHRnBibk1pTENKeVpYRjFhWEpsSWl3aVgyTnZiblJoYVc1ek1pSXNJbDlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRaUxDSmZjWFZsY25sVFpXeGxZM1J2Y2tGc2JDSXNJbDl4ZFdWeWVWTmxiR1ZqZEc5eVFXeHNNaUlzSW05aWFpSXNJbDlmWlhOTmIyUjFiR1VpTENKelpXeGxZM1J2Y2lJc0ltaGhibVJzWlhJaUxDSm1hV3gwWlhKSVlXNWtiR1Z5SWl3aVpTSXNJblJ2Y0NJc0ltTjFjbkpsYm5SVVlYSm5aWFFpTENKMFlYSm5aWFFpTENKemIyMWxJaXdpYldGMFkyZ2lMQ0pqWVd4c0lpd2lkR2hwY3lJc0ltMXZaSFZzWlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkZRVUVzVDBGQlQwTXNaVUZCWlVNc1VVRkJVeXhoUVVGakxFTkJRek5EUXl4UFFVRlBMRWxCUlZSRUxGRkJRVkZGTEZGQlFWVkRMR0ZCUld4Q0xFbEJRVWxETEZWQlFWbERMRkZCUVZFc2NVSkJSWEJDUXl4WFFVRmhReXgxUWtGQmRVSklMRmRCUlhCRFNTeHJRa0ZCYjBKSUxGRkJRVkVzTmtKQlJUVkNTU3h0UWtGQmNVSkdMSFZDUVVGMVFrTXNiVUpCUldoRUxGTkJRVk5FTEhWQ1FVRjFRa2NzUjBGQlR5eFBRVUZQUVN4SFFVRlBRU3hGUVVGSlF5eFhRVUZoUkN4RlFVRk5MRU5CUVVWU0xGRkJRVk5STEVkQlJYWkdMRk5CUVZOUUxHRkJRV0ZUTEVWQlFWVkRMRWRCUXpsQ0xFOUJRVThzVTBGQlUwTXNZMEZCWTBNc1IwRkROVUlzU1VGQlNVTXNSVUZCVFVRc1JVRkJSVVVzWTBGRFVrTXNSVUZCVTBnc1JVRkJSVWNzVVVGRFJDeEZRVUZKVkN4dFFrRkJiVUpRTEZOQlFWTmpMRVZCUVV0S0xFZEJSWFpEVHl4TFFVRkxMRk5CUVZWRExFZEJRM3BDTEU5QlFVOHNSVUZCU1dRc1YwRkJWMG9zVTBGQlUydENMRVZCUVU5R0xFMUJRM0JEVEN4RlFVRlJVU3hMUVVGTFF5eExRVUZOVUN4SlFVY3pRbEVzVDBGQlQzWkNMRkZCUVZWQkxGRkJRV2xDSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMlJ2YlMxb1pXeHdaWEp6TDJWMlpXNTBjeTltYVd4MFpYSXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGV4cG9ydHMubGlzdGVuPWV4cG9ydHMuZmlsdGVyPWV4cG9ydHMub2ZmPWV4cG9ydHMub249dm9pZCAwO3ZhciBfb249cmVxdWlyZShcIi4vb25cIiksX29uMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vbiksX29mZj1yZXF1aXJlKFwiLi9vZmZcIiksX29mZjI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2ZmKSxfZmlsdGVyPXJlcXVpcmUoXCIuL2ZpbHRlclwiKSxfZmlsdGVyMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9maWx0ZXIpLF9saXN0ZW49cmVxdWlyZShcIi4vbGlzdGVuXCIpLF9saXN0ZW4yPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xpc3Rlbik7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19ZXhwb3J0cy5vbj1fb24yLmRlZmF1bHQsZXhwb3J0cy5vZmY9X29mZjIuZGVmYXVsdCxleHBvcnRzLmZpbHRlcj1fZmlsdGVyMi5kZWZhdWx0LGV4cG9ydHMubGlzdGVuPV9saXN0ZW4yLmRlZmF1bHQsZXhwb3J0cy5kZWZhdWx0PXtvbjpfb24yLmRlZmF1bHQsb2ZmOl9vZmYyLmRlZmF1bHQsZmlsdGVyOl9maWx0ZXIyLmRlZmF1bHQsbGlzdGVuOl9saXN0ZW4yLmRlZmF1bHR9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1sdVpHVjRMbXB6SWwwc0ltNWhiV1Z6SWpwYklrOWlhbVZqZENJc0ltUmxabWx1WlZCeWIzQmxjblI1SWl3aVpYaHdiM0owY3lJc0luWmhiSFZsSWl3aWJHbHpkR1Z1SWl3aVptbHNkR1Z5SWl3aWIyWm1JaXdpYjI0aUxDSjFibVJsWm1sdVpXUWlMQ0pmYjI0aUxDSnlaWEYxYVhKbElpd2lYMjl1TWlJc0lsOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFpTENKZmIyWm1JaXdpWDI5bVpqSWlMQ0pmWm1sc2RHVnlJaXdpWDJacGJIUmxjaklpTENKZmJHbHpkR1Z1SWl3aVgyeHBjM1JsYmpJaUxDSnZZbW9pTENKZlgyVnpUVzlrZFd4bElpd2laR1ZtWVhWc2RDSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZGUVVFc1QwRkJUME1zWlVGQlpVTXNVVUZCVXl4aFFVRmpMRU5CUXpORFF5eFBRVUZQTEVsQlJWUkVMRkZCUVZGRkxFOUJRVk5HTEZGQlFWRkhMRTlCUVZOSUxGRkJRVkZKTEVsQlFVMUtMRkZCUVZGTExGRkJRVXRETEVWQlJUZEVMRWxCUVVsRExFbEJRVTFETEZGQlFWRXNVVUZGWkVNc1MwRkJUME1zZFVKQlFYVkNTQ3hMUVVVNVFra3NTMEZCVDBnc1VVRkJVU3hUUVVWbVNTeE5RVUZSUml4MVFrRkJkVUpETEUxQlJTOUNSU3hSUVVGVlRDeFJRVUZSTEZsQlJXeENUU3hUUVVGWFNpeDFRa0ZCZFVKSExGTkJSV3hEUlN4UlFVRlZVQ3hSUVVGUkxGbEJSV3hDVVN4VFFVRlhUaXgxUWtGQmRVSkxMRk5CUlhSRExGTkJRVk5NTEhWQ1FVRjFRazhzUjBGQlR5eFBRVUZQUVN4SFFVRlBRU3hGUVVGSlF5eFhRVUZoUkN4RlFVRk5MRU5CUVVWRkxGRkJRVk5HTEVkQlJYWkdha0lzVVVGQlVVc3NSMEZCUzBrc1MwRkJTMVVzVVVGRGJFSnVRaXhSUVVGUlNTeEpRVUZOVVN4TlFVRk5UeXhSUVVOd1FtNUNMRkZCUVZGSExFOUJRVk5YTEZOQlFWTkxMRkZCUXpGQ2JrSXNVVUZCVVVVc1QwRkJVMk1zVTBGQlUwY3NVVUZETVVKdVFpeFJRVUZSYlVJc1VVRkJWU3hEUVVGRlpDeEhRVUZKU1N4TFFVRkxWU3hSUVVGVFppeEpRVUZMVVN4TlFVRk5UeXhSUVVGVGFFSXNUMEZCVVZjc1UwRkJVMHNzVVVGQlUycENMRTlCUVZGakxGTkJRVk5ISWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMlJ2YlMxb1pXeHdaWEp6TDJWMlpXNTBjeTlwYm1SbGVDNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIF9pbkRPTT1yZXF1aXJlKFwiLi4vdXRpbC9pbkRPTVwiKSxfaW5ET00yPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luRE9NKSxfb249cmVxdWlyZShcIi4vb25cIiksX29uMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vbiksX29mZj1yZXF1aXJlKFwiLi9vZmZcIiksX29mZjI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2ZmKTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX12YXIgbGlzdGVuPWZ1bmN0aW9uIGxpc3Rlbigpe307X2luRE9NMi5kZWZhdWx0JiYobGlzdGVuPWZ1bmN0aW9uIGxpc3RlbihlLHQsbix1KXtyZXR1cm4oMCxfb24yLmRlZmF1bHQpKGUsdCxuLHUpLGZ1bmN0aW9uKCl7KDAsX29mZjIuZGVmYXVsdCkoZSx0LG4sdSl9fSksZXhwb3J0cy5kZWZhdWx0PWxpc3Rlbixtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbXhwYzNSbGJpNXFjeUpkTENKdVlXMWxjeUk2V3lKUFltcGxZM1FpTENKa1pXWnBibVZRY205d1pYSjBlU0lzSW1WNGNHOXlkSE1pTENKMllXeDFaU0lzSWw5cGJrUlBUU0lzSW5KbGNYVnBjbVVpTENKZmFXNUVUMDB5SWl3aVgybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ0lzSWw5dmJpSXNJbDl2YmpJaUxDSmZiMlptSWl3aVgyOW1aaklpTENKdlltb2lMQ0pmWDJWelRXOWtkV3hsSWl3aVpHVm1ZWFZzZENJc0lteHBjM1JsYmlJc0ltNXZaR1VpTENKbGRtVnVkRTVoYldVaUxDSm9ZVzVrYkdWeUlpd2lZMkZ3ZEhWeVpTSXNJbTF2WkhWc1pTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZGUVVFc1QwRkJUME1zWlVGQlpVTXNVVUZCVXl4aFFVRmpMRU5CUXpORFF5eFBRVUZQTEVsQlIxUXNTVUZCU1VNc1QwRkJVME1zVVVGQlVTeHBRa0ZGYWtKRExGRkJRVlZETEhWQ1FVRjFRa2dzVVVGRmFrTkpMRWxCUVUxSUxGRkJRVkVzVVVGRlpFa3NTMEZCVDBZc2RVSkJRWFZDUXl4TFFVVTVRa1VzUzBGQlQwd3NVVUZCVVN4VFFVVm1UU3hOUVVGUlNpeDFRa0ZCZFVKSExFMUJSVzVETEZOQlFWTklMSFZDUVVGMVFrc3NSMEZCVHl4UFFVRlBRU3hIUVVGUFFTeEZRVUZKUXl4WFFVRmhSQ3hGUVVGTkxFTkJRVVZGTEZGQlFWTkdMRWRCUlhaR0xFbEJRVWxITEU5QlFWTXNVMEZCVTBFc1YwRkZiRUpVTEZGQlFWRlJMRlZCUTFaRExFOUJRVk1zVTBGQlUwRXNUMEZCVDBNc1JVRkJUVU1zUlVGQlYwTXNSVUZCVTBNc1IwRkZha1FzVDBGRVFTeEZRVUZKVml4TFFVRkxTeXhUUVVGVFJTeEZRVUZOUXl4RlFVRlhReXhGUVVGVFF5eEhRVU55UXl4WlFVTk1MRVZCUVVsU0xFMUJRVTFITEZOQlFWTkZMRVZCUVUxRExFVkJRVmRETEVWQlFWTkRMRTFCUzI1RWFrSXNVVUZCVVZrc1VVRkJWVU1zVDBGRGJFSkxMRTlCUVU5c1FpeFJRVUZWUVN4UlFVRnBRaUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWtiMjB0YUdWc2NHVnljeTlsZG1WdWRITXZiR2x6ZEdWdUxtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIF9pbkRPTT1yZXF1aXJlKFwiLi4vdXRpbC9pbkRPTVwiKSxfaW5ET00yPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luRE9NKTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX12YXIgb2ZmPWZ1bmN0aW9uIG9mZigpe307X2luRE9NMi5kZWZhdWx0JiYob2ZmPWRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXI/ZnVuY3Rpb24oZSx0LG4scil7cmV0dXJuIGUucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LG4scnx8ITEpfTpkb2N1bWVudC5hdHRhY2hFdmVudD9mdW5jdGlvbihlLHQsbil7cmV0dXJuIGUuZGV0YWNoRXZlbnQoXCJvblwiK3Qsbil9OnZvaWQgMCksZXhwb3J0cy5kZWZhdWx0PW9mZixtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTltWmk1cWN5SmRMQ0p1WVcxbGN5STZXeUpQWW1wbFkzUWlMQ0prWldacGJtVlFjbTl3WlhKMGVTSXNJbVY0Y0c5eWRITWlMQ0oyWVd4MVpTSXNJbDlwYmtSUFRTSXNJbkpsY1hWcGNtVWlMQ0pmYVc1RVQwMHlJaXdpWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDSXNJbTlpYWlJc0lsOWZaWE5OYjJSMWJHVWlMQ0prWldaaGRXeDBJaXdpYjJabUlpd2laRzlqZFcxbGJuUWlMQ0poWkdSRmRtVnVkRXhwYzNSbGJtVnlJaXdpYm05a1pTSXNJbVYyWlc1MFRtRnRaU0lzSW1oaGJtUnNaWElpTENKallYQjBkWEpsSWl3aWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpSXNJbUYwZEdGamFFVjJaVzUwSWl3aVpHVjBZV05vUlhabGJuUWlMQ0p0YjJSMWJHVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUlVGQkxFOUJRVTlETEdWQlFXVkRMRkZCUVZNc1lVRkJZeXhEUVVNelEwTXNUMEZCVHl4SlFVZFVMRWxCUVVsRExFOUJRVk5ETEZGQlFWRXNhVUpCUldwQ1F5eFJRVUZWUXl4MVFrRkJkVUpJTEZGQlJYSkRMRk5CUVZOSExIVkNRVUYxUWtNc1IwRkJUeXhQUVVGUFFTeEhRVUZQUVN4RlFVRkpReXhYUVVGaFJDeEZRVUZOTEVOQlFVVkZMRkZCUVZOR0xFZEJSWFpHTEVsQlFVbEhMRWxCUVUwc1UwRkJVMEVzVVVGRFprd3NVVUZCVVVrc1ZVRkRWa01zU1VGRFRVTXNVMEZCVTBNc2FVSkJRWGxDTEZOQlFWVkRMRVZCUVUxRExFVkJRVmRETEVWQlFWTkRMRWRCUTNoRkxFOUJRVTlJTEVWQlFVdEpMRzlDUVVGdlFrZ3NSVUZCVjBNc1JVRkJVME1zU1VGQlZ5eEpRVU4wUkV3c1UwRkJVMDhzV1VGQmIwSXNVMEZCVlV3c1JVRkJUVU1zUlVGQlYwTXNSMEZEYWtVc1QwRkJUMFlzUlVGQlMwMHNXVUZCV1N4TFFVRlBUQ3hGUVVGWFF5eFRRVVJ5UXl4SFFVMVlaQ3hSUVVGUlVTeFJRVUZWUXl4SlFVTnNRbFVzVDBGQlQyNUNMRkZCUVZWQkxGRkJRV2xDSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMlJ2YlMxb1pXeHdaWEp6TDJWMlpXNTBjeTl2Wm1ZdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIF9pbkRPTT1yZXF1aXJlKFwiLi4vdXRpbC9pbkRPTVwiKSxfaW5ET00yPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luRE9NKTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX12YXIgb249ZnVuY3Rpb24gb24oKXt9O19pbkRPTTIuZGVmYXVsdCYmKG9uPWRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXI/ZnVuY3Rpb24oZSx0LG4scil7cmV0dXJuIGUuYWRkRXZlbnRMaXN0ZW5lcih0LG4scnx8ITEpfTpkb2N1bWVudC5hdHRhY2hFdmVudD9mdW5jdGlvbihlLHQsbil7cmV0dXJuIGUuYXR0YWNoRXZlbnQoXCJvblwiK3QsZnVuY3Rpb24odCl7KHQ9dHx8d2luZG93LmV2ZW50KS50YXJnZXQ9dC50YXJnZXR8fHQuc3JjRWxlbWVudCx0LmN1cnJlbnRUYXJnZXQ9ZSxuLmNhbGwoZSx0KX0pfTp2b2lkIDApLGV4cG9ydHMuZGVmYXVsdD1vbixtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTl1TG1weklsMHNJbTVoYldWeklqcGJJazlpYW1WamRDSXNJbVJsWm1sdVpWQnliM0JsY25SNUlpd2laWGh3YjNKMGN5SXNJblpoYkhWbElpd2lYMmx1UkU5Tklpd2ljbVZ4ZFdseVpTSXNJbDlwYmtSUFRUSWlMQ0pmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MElpd2liMkpxSWl3aVgxOWxjMDF2WkhWc1pTSXNJbVJsWm1GMWJIUWlMQ0p2YmlJc0ltUnZZM1Z0Wlc1MElpd2lZV1JrUlhabGJuUk1hWE4wWlc1bGNpSXNJbTV2WkdVaUxDSmxkbVZ1ZEU1aGJXVWlMQ0pvWVc1a2JHVnlJaXdpWTJGd2RIVnlaU0lzSW1GMGRHRmphRVYyWlc1MElpd2laU0lzSW5kcGJtUnZkeUlzSW1WMlpXNTBJaXdpZEdGeVoyVjBJaXdpYzNKalJXeGxiV1Z1ZENJc0ltTjFjbkpsYm5SVVlYSm5aWFFpTENKallXeHNJaXdpYlc5a2RXeGxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVWQlFTeFBRVUZQUXl4bFFVRmxReXhSUVVGVExHRkJRV01zUTBGRE0wTkRMRTlCUVU4c1NVRkhWQ3hKUVVGSlF5eFBRVUZUUXl4UlFVRlJMR2xDUVVWcVFrTXNVVUZCVlVNc2RVSkJRWFZDU0N4UlFVVnlReXhUUVVGVFJ5eDFRa0ZCZFVKRExFZEJRVThzVDBGQlQwRXNSMEZCVDBFc1JVRkJTVU1zVjBGQllVUXNSVUZCVFN4RFFVRkZSU3hSUVVGVFJpeEhRVVYyUml4SlFVRkpSeXhIUVVGTExGTkJRVk5CTEU5QlEyUk1MRkZCUVZGSkxGVkJRMVpETEVkQlJVMURMRk5CUVZORExHbENRVUY1UWl4VFFVRlZReXhGUVVGTlF5eEZRVUZYUXl4RlFVRlRReXhIUVVONFJTeFBRVUZQU0N4RlFVRkxSQ3hwUWtGQmFVSkZMRVZCUVZkRExFVkJRVk5ETEVsQlFWY3NTVUZEYmtSTUxGTkJRVk5OTEZsQlFXOUNMRk5CUVZWS0xFVkJRVTFETEVWQlFWZERMRWRCUTJwRkxFOUJRVTlHTEVWQlFVdEpMRmxCUVZrc1MwRkJUMGdzUlVGQlZ5eFRRVUZWU1N4SlFVTnNSRUVzUlVGQlNVRXNSMEZCUzBNc1QwRkJUME1zVDBGRFpFTXNUMEZCVTBnc1JVRkJSVWNzVVVGQlZVZ3NSVUZCUlVrc1YwRkRla0pLTEVWQlFVVkxMR05CUVdkQ1ZpeEZRVU5zUWtVc1JVRkJVVk1zUzBGQlMxZ3NSVUZCVFVzc1YwRk1hRUlzUjBGWFdHcENMRkZCUVZGUkxGRkJRVlZETEVkQlEyeENaU3hQUVVGUGVFSXNVVUZCVlVFc1VVRkJhVUlpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZaRzl0TFdobGJIQmxjbk12WlhabGJuUnpMMjl1TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBvd25lckRvY3VtZW50KGUpe3JldHVybiBlJiZlLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGV4cG9ydHMuZGVmYXVsdD1vd25lckRvY3VtZW50LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltOTNibVZ5Ukc5amRXMWxiblF1YW5NaVhTd2libUZ0WlhNaU9sc2liM2R1WlhKRWIyTjFiV1Z1ZENJc0ltNXZaR1VpTENKa2IyTjFiV1Z1ZENJc0lrOWlhbVZqZENJc0ltUmxabWx1WlZCeWIzQmxjblI1SWl3aVpYaHdiM0owY3lJc0luWmhiSFZsSWl3aVpHVm1ZWFZzZENJc0ltMXZaSFZzWlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRk5RU3hUUVVGVFFTeGpRVUZqUXl4SFFVTnlRaXhQUVVGUFFTeEhRVUZSUVN4RlFVRkxSQ3hsUVVGcFFrVXNVMEZNZGtORExFOUJRVTlETEdWQlFXVkRMRkZCUVZNc1lVRkJZeXhEUVVNelEwTXNUMEZCVHl4SlFVVlVSQ3hSUVVGUlJTeFJRVUZWVUN4alFVbHNRbEVzVDBGQlQwZ3NVVUZCVlVFc1VVRkJhVUlpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZaRzl0TFdobGJIQmxjbk12YjNkdVpYSkViMk4xYldWdWRDNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIF9pbkRPTT1yZXF1aXJlKFwiLi4vdXRpbC9pbkRPTVwiKSxfaW5ET00yPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luRE9NKTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1mdW5jdGlvbiBmYWxsYmFjayhlLHQpe2lmKHQpZG97aWYodD09PWUpcmV0dXJuITB9d2hpbGUodD10LnBhcmVudE5vZGUpO3JldHVybiExfWV4cG9ydHMuZGVmYXVsdD1faW5ET00yLmRlZmF1bHQ/ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5jb250YWlucz9lLmNvbnRhaW5zKHQpOmUuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ZT09PXR8fCEhKDE2JmUuY29tcGFyZURvY3VtZW50UG9zaXRpb24odCkpOmZhbGxiYWNrKGUsdCl9OmZhbGxiYWNrLG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltTnZiblJoYVc1ekxtcHpJbDBzSW01aGJXVnpJanBiSWs5aWFtVmpkQ0lzSW1SbFptbHVaVkJ5YjNCbGNuUjVJaXdpWlhod2IzSjBjeUlzSW5aaGJIVmxJaXdpWDJsdVJFOU5JaXdpY21WeGRXbHlaU0lzSWw5cGJrUlBUVElpTENKZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBJaXdpYjJKcUlpd2lYMTlsYzAxdlpIVnNaU0lzSW1SbFptRjFiSFFpTENKbVlXeHNZbUZqYXlJc0ltTnZiblJsZUhRaUxDSnViMlJsSWl3aWNHRnlaVzUwVG05a1pTSXNJbU52Ym5SaGFXNXpJaXdpWTI5dGNHRnlaVVJ2WTNWdFpXNTBVRzl6YVhScGIyNGlMQ0p0YjJSMWJHVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUlVGQkxFOUJRVTlETEdWQlFXVkRMRkZCUVZNc1lVRkJZeXhEUVVNelEwTXNUMEZCVHl4SlFVZFVMRWxCUVVsRExFOUJRVk5ETEZGQlFWRXNhVUpCUldwQ1F5eFJRVUZWUXl4MVFrRkJkVUpJTEZGQlJYSkRMRk5CUVZOSExIVkNRVUYxUWtNc1IwRkJUeXhQUVVGUFFTeEhRVUZQUVN4RlFVRkpReXhYUVVGaFJDeEZRVUZOTEVOQlFVVkZMRkZCUVZOR0xFZEJaMEoyUml4VFFVRlRSeXhUUVVGVFF5eEZRVUZUUXl4SFFVTjZRaXhIUVVGSlFTeEZRVUZOTEVkQlExSXNSMEZCU1VFc1NVRkJVMFFzUlVGQlV5eFBRVUZQTEZGQlEzUkNReXhGUVVGUFFTeEZRVUZMUXl4WlFVVnlRaXhQUVVGUExFVkJia0pVV2l4UlFVRlJVU3hSUVVkRFNpeFJRVUZSU1N4UlFVRlZMRk5CUVZWRkxFVkJRVk5ETEVkQlF6RkRMRTlCUVVsRUxFVkJRVkZITEZOQlEwaElMRVZCUVZGSExGTkJRVk5HTEVkQlEyWkVMRVZCUVZGSkxIZENRVU5XU2l4SlFVRlpReXhOUVVGdFJDeEhRVUY0UTBRc1JVRkJVVWtzZDBKQlFYZENTQ3hKUVVWMlJFWXNVMEZCVTBNc1JVRkJVME1zU1VGRmVrSkdMRk5CVlU1TkxFOUJRVTltTEZGQlFWVkJMRkZCUVdsQ0lpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJSdmJTMW9aV3h3WlhKekwzRjFaWEo1TDJOdmJuUmhhVzV6TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBnZXRXaW5kb3coZSl7cmV0dXJuIGU9PT1lLndpbmRvdz9lOjk9PT1lLm5vZGVUeXBlJiYoZS5kZWZhdWx0Vmlld3x8ZS5wYXJlbnRXaW5kb3cpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGV4cG9ydHMuZGVmYXVsdD1nZXRXaW5kb3csbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1selYybHVaRzkzTG1weklsMHNJbTVoYldWeklqcGJJbWRsZEZkcGJtUnZkeUlzSW01dlpHVWlMQ0ozYVc1a2IzY2lMQ0p1YjJSbFZIbHdaU0lzSW1SbFptRjFiSFJXYVdWM0lpd2ljR0Z5Wlc1MFYybHVaRzkzSWl3aVQySnFaV04wSWl3aVpHVm1hVzVsVUhKdmNHVnlkSGtpTENKbGVIQnZjblJ6SWl3aWRtRnNkV1VpTENKa1pXWmhkV3gwSWl3aWJXOWtkV3hsSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4aFFVMUJMRk5CUVZOQkxGVkJRVlZETEVkQlEycENMRTlCUVU5QkxFbEJRVk5CTEVWQlFVdERMRTlCUVZORUxFVkJRWGxDTEVsQlFXeENRU3hGUVVGTFJTeFhRVUZwUWtZc1JVRkJTMGNzWVVGQlpVZ3NSVUZCUzBrc1kwRk1kRVpETEU5QlFVOURMR1ZCUVdWRExGRkJRVk1zWVVGQll5eERRVU16UTBNc1QwRkJUeXhKUVVWVVJDeFJRVUZSUlN4UlFVRlZWaXhWUVVsc1FsY3NUMEZCVDBnc1VVRkJWVUVzVVVGQmFVSWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlpHOXRMV2hsYkhCbGNuTXZjWFZsY25rdmFYTlhhVzVrYjNjdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZXhwb3J0cy5kZWZhdWx0PW9mZnNldDt2YXIgX2NvbnRhaW5zPXJlcXVpcmUoXCIuL2NvbnRhaW5zXCIpLF9jb250YWluczI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29udGFpbnMpLF9pc1dpbmRvdz1yZXF1aXJlKFwiLi9pc1dpbmRvd1wiKSxfaXNXaW5kb3cyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzV2luZG93KSxfb3duZXJEb2N1bWVudD1yZXF1aXJlKFwiLi4vb3duZXJEb2N1bWVudFwiKSxfb3duZXJEb2N1bWVudDI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb3duZXJEb2N1bWVudCk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19ZnVuY3Rpb24gb2Zmc2V0KGUpe3ZhciB0PSgwLF9vd25lckRvY3VtZW50Mi5kZWZhdWx0KShlKSxvPSgwLF9pc1dpbmRvdzIuZGVmYXVsdCkodCksaT10JiZ0LmRvY3VtZW50RWxlbWVudCxuPXt0b3A6MCxsZWZ0OjAsaGVpZ2h0OjAsd2lkdGg6MH07aWYodClyZXR1cm4oMCxfY29udGFpbnMyLmRlZmF1bHQpKGksZSk/KHZvaWQgMCE9PWUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0JiYobj1lLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKSxuPXt0b3A6bi50b3ArKG8ucGFnZVlPZmZzZXR8fGkuc2Nyb2xsVG9wKS0oaS5jbGllbnRUb3B8fDApLGxlZnQ6bi5sZWZ0KyhvLnBhZ2VYT2Zmc2V0fHxpLnNjcm9sbExlZnQpLShpLmNsaWVudExlZnR8fDApLHdpZHRoOihudWxsPT1uLndpZHRoP2Uub2Zmc2V0V2lkdGg6bi53aWR0aCl8fDAsaGVpZ2h0OihudWxsPT1uLmhlaWdodD9lLm9mZnNldEhlaWdodDpuLmhlaWdodCl8fDB9KTpufW1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltOW1abk5sZEM1cWN5SmRMQ0p1WVcxbGN5STZXeUpQWW1wbFkzUWlMQ0prWldacGJtVlFjbTl3WlhKMGVTSXNJbVY0Y0c5eWRITWlMQ0oyWVd4MVpTSXNJbVJsWm1GMWJIUWlMQ0p2Wm1aelpYUWlMQ0pmWTI5dWRHRnBibk1pTENKeVpYRjFhWEpsSWl3aVgyTnZiblJoYVc1ek1pSXNJbDlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRaUxDSmZhWE5YYVc1a2IzY2lMQ0pmYVhOWGFXNWtiM2N5SWl3aVgyOTNibVZ5Ukc5amRXMWxiblFpTENKZmIzZHVaWEpFYjJOMWJXVnVkRElpTENKdlltb2lMQ0pmWDJWelRXOWtkV3hsSWl3aWJtOWtaU0lzSW1Sdll5SXNJbmRwYmlJc0ltUnZZMFZzWlcwaUxDSmtiMk4xYldWdWRFVnNaVzFsYm5RaUxDSmliM2dpTENKMGIzQWlMQ0pzWldaMElpd2lhR1ZwWjJoMElpd2lkMmxrZEdnaUxDSjFibVJsWm1sdVpXUWlMQ0puWlhSQ2IzVnVaR2x1WjBOc2FXVnVkRkpsWTNRaUxDSndZV2RsV1U5bVpuTmxkQ0lzSW5OamNtOXNiRlJ2Y0NJc0ltTnNhV1Z1ZEZSdmNDSXNJbkJoWjJWWVQyWm1jMlYwSWl3aWMyTnliMnhzVEdWbWRDSXNJbU5zYVdWdWRFeGxablFpTENKdlptWnpaWFJYYVdSMGFDSXNJbTltWm5ObGRFaGxhV2RvZENJc0ltMXZaSFZzWlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkZRVUVzVDBGQlQwTXNaVUZCWlVNc1VVRkJVeXhoUVVGakxFTkJRek5EUXl4UFFVRlBMRWxCUlZSRUxGRkJRVkZGTEZGQlFWVkRMRTlCUld4Q0xFbEJRVWxETEZWQlFWbERMRkZCUVZFc1kwRkZjRUpETEZkQlFXRkRMSFZDUVVGMVFrZ3NWMEZGY0VOSkxGVkJRVmxJTEZGQlFWRXNZMEZGY0VKSkxGZEJRV0ZHTEhWQ1FVRjFRa01zVjBGRmNFTkZMR1ZCUVdsQ1RDeFJRVUZSTEc5Q1FVVjZRazBzWjBKQlFXdENTaXgxUWtGQmRVSkhMR2RDUVVVM1F5eFRRVUZUU0N4MVFrRkJkVUpMTEVkQlFVOHNUMEZCVDBFc1IwRkJUMEVzUlVGQlNVTXNWMEZCWVVRc1JVRkJUU3hEUVVGRlZpeFJRVUZUVlN4SFFVVjJSaXhUUVVGVFZDeFBRVUZQVnl4SFFVTmtMRWxCUVVsRExFZEJRVTBzUlVGQlNVb3NaMEpCUVdkQ1ZDeFRRVUZUV1N4SFFVTnVRMFVzUjBGQlRTeEZRVUZKVUN4WFFVRlhVQ3hUUVVGVFlTeEhRVU01UWtVc1JVRkJWVVlzUjBGQlQwRXNSVUZCU1Vjc1owSkJRM0pDUXl4RlFVRk5MRU5CUVVWRExFbEJRVXNzUlVGQlIwTXNTMEZCVFN4RlFVRkhReXhQUVVGUkxFVkJRVWRETEUxQlFVOHNSMEZGTDBNc1IwRkJTMUlzUlVGSFRDeFBRVUZMTEVWQlFVbFVMRmRCUVZkS0xGTkJRVk5sTEVWQlFWTklMRk5CUlVoVkxFbEJRUzlDVml4RlFVRkxWeXgzUWtGQmNVTk9MRVZCUVUxTUxFVkJRVXRYTEhsQ1FVZDZSRTRzUlVGQlRTeERRVU5LUXl4SlFVRkxSQ3hGUVVGSlF5eExRVUZQU2l4RlFVRkpWU3hoUVVGbFZDeEZRVUZSVlN4WlFVRmpWaXhGUVVGUlZ5eFhRVUZoTEVkQlF6bEZVQ3hMUVVGTlJpeEZRVUZKUlN4TlFVRlJUQ3hGUVVGSllTeGhRVUZsV2l4RlFVRlJZU3hoUVVGbFlpeEZRVUZSWXl4WlFVRmpMRWRCUTJ4R1VpeFBRVUZ4UWl4TlFVRmlTaXhGUVVGSlNTeE5RVUZuUWxRc1JVRkJTMnRDTEZsQlFXTmlMRVZCUVVsSkxGRkJRVlVzUlVGRE4wUkVMRkZCUVhWQ0xFMUJRV1JJTEVWQlFVbEhMRTlCUVdsQ1VpeEZRVUZMYlVJc1lVRkJaV1FzUlVGQlNVY3NVMEZCVnl4SlFWUm1TQ3hGUVdOMFJHVXNUMEZCVDJ4RExGRkJRVlZCTEZGQlFXbENJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyUnZiUzFvWld4d1pYSnpMM0YxWlhKNUwyOW1abk5sZEM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxleHBvcnRzLmRlZmF1bHQ9b2Zmc2V0UGFyZW50O3ZhciBfb3duZXJEb2N1bWVudD1yZXF1aXJlKFwiLi4vb3duZXJEb2N1bWVudFwiKSxfb3duZXJEb2N1bWVudDI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb3duZXJEb2N1bWVudCksX3N0eWxlPXJlcXVpcmUoXCIuLi9zdHlsZVwiKSxfc3R5bGUyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0eWxlKTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1mdW5jdGlvbiBub2RlTmFtZShlKXtyZXR1cm4gZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpfWZ1bmN0aW9uIG9mZnNldFBhcmVudChlKXtmb3IodmFyIHQ9KDAsX293bmVyRG9jdW1lbnQyLmRlZmF1bHQpKGUpLG89ZSYmZS5vZmZzZXRQYXJlbnQ7byYmXCJodG1sXCIhPT1ub2RlTmFtZShlKSYmXCJzdGF0aWNcIj09PSgwLF9zdHlsZTIuZGVmYXVsdCkobyxcInBvc2l0aW9uXCIpOylvPW8ub2Zmc2V0UGFyZW50O3JldHVybiBvfHx0LmRvY3VtZW50RWxlbWVudH1tb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTltWm5ObGRGQmhjbVZ1ZEM1cWN5SmRMQ0p1WVcxbGN5STZXeUpQWW1wbFkzUWlMQ0prWldacGJtVlFjbTl3WlhKMGVTSXNJbVY0Y0c5eWRITWlMQ0oyWVd4MVpTSXNJbVJsWm1GMWJIUWlMQ0p2Wm1aelpYUlFZWEpsYm5RaUxDSmZiM2R1WlhKRWIyTjFiV1Z1ZENJc0luSmxjWFZwY21VaUxDSmZiM2R1WlhKRWIyTjFiV1Z1ZERJaUxDSmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwSWl3aVgzTjBlV3hsSWl3aVgzTjBlV3hsTWlJc0ltOWlhaUlzSWw5ZlpYTk5iMlIxYkdVaUxDSnViMlJsVG1GdFpTSXNJbTV2WkdVaUxDSjBiMHh2ZDJWeVEyRnpaU0lzSW1Sdll5SXNJbVJ2WTNWdFpXNTBSV3hsYldWdWRDSXNJbTF2WkhWc1pTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZGUVVFc1QwRkJUME1zWlVGQlpVTXNVVUZCVXl4aFFVRmpMRU5CUXpORFF5eFBRVUZQTEVsQlJWUkVMRkZCUVZGRkxGRkJRVlZETEdGQlJXeENMRWxCUVVsRExHVkJRV2xDUXl4UlFVRlJMRzlDUVVWNlFrTXNaMEpCUVd0Q1F5eDFRa0ZCZFVKSUxHZENRVVY2UTBrc1QwRkJVMGdzVVVGQlVTeFpRVVZxUWtrc1VVRkJWVVlzZFVKQlFYVkNReXhSUVVWeVF5eFRRVUZUUkN4MVFrRkJkVUpITEVkQlFVOHNUMEZCVDBFc1IwRkJUMEVzUlVGQlNVTXNWMEZCWVVRc1JVRkJUU3hEUVVGRlVpeFJRVUZUVVN4SFFVVjJSaXhUUVVGVFJTeFRRVUZUUXl4SFFVTm9RaXhQUVVGUFFTeEZRVUZMUkN4VlFVRlpReXhGUVVGTFJDeFRRVUZUUlN4alFVZDRReXhUUVVGVFdDeGhRVUZoVlN4SFFVbHdRaXhKUVVoQkxFbEJRVWxGTEVkQlFVMHNSVUZCU1ZRc1owSkJRV2RDU2l4VFFVRlRWeXhIUVVOdVExWXNSVUZCWlZVc1IwRkJVVUVzUlVGQlMxWXNZVUZGZWtKQkxFZEJRVzFETEZOQlFXNUNVeXhUUVVGVFF5eEpRVUYxUlN4WlFVRnVSQ3hGUVVGSlNpeFJRVUZSVUN4VFFVRlRReXhGUVVGakxHRkJRM0pHUVN4RlFVRmxRU3hGUVVGaFFTeGhRVWM1UWl4UFFVRlBRU3hIUVVGblFsa3NSVUZCU1VNc1owSkJSVGRDUXl4UFFVRlBha0lzVVVGQlZVRXNVVUZCYVVJaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Wkc5dExXaGxiSEJsY25NdmNYVmxjbmt2YjJabWMyVjBVR0Z5Wlc1MExtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIF9leHRlbmRzPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0xO3Q8YXJndW1lbnRzLmxlbmd0aDt0Kyspe3ZhciByPWFyZ3VtZW50c1t0XTtmb3IodmFyIG8gaW4gcilPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocixvKSYmKGVbb109cltvXSl9cmV0dXJuIGV9O2V4cG9ydHMuZGVmYXVsdD1wb3NpdGlvbjt2YXIgX29mZnNldD1yZXF1aXJlKFwiLi9vZmZzZXRcIiksX29mZnNldDI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2Zmc2V0KSxfb2Zmc2V0UGFyZW50PXJlcXVpcmUoXCIuL29mZnNldFBhcmVudFwiKSxfb2Zmc2V0UGFyZW50Mj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vZmZzZXRQYXJlbnQpLF9zY3JvbGxUb3A9cmVxdWlyZShcIi4vc2Nyb2xsVG9wXCIpLF9zY3JvbGxUb3AyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Njcm9sbFRvcCksX3Njcm9sbExlZnQ9cmVxdWlyZShcIi4vc2Nyb2xsTGVmdFwiKSxfc2Nyb2xsTGVmdDI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2Nyb2xsTGVmdCksX3N0eWxlPXJlcXVpcmUoXCIuLi9zdHlsZVwiKSxfc3R5bGUyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0eWxlKTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1mdW5jdGlvbiBub2RlTmFtZShlKXtyZXR1cm4gZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpfWZ1bmN0aW9uIHBvc2l0aW9uKGUsdCl7dmFyIHIsbz17dG9wOjAsbGVmdDowfTtyZXR1cm5cImZpeGVkXCI9PT0oMCxfc3R5bGUyLmRlZmF1bHQpKGUsXCJwb3NpdGlvblwiKT9yPWUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk6KHQ9dHx8KDAsX29mZnNldFBhcmVudDIuZGVmYXVsdCkoZSkscj0oMCxfb2Zmc2V0Mi5kZWZhdWx0KShlKSxcImh0bWxcIiE9PW5vZGVOYW1lKHQpJiYobz0oMCxfb2Zmc2V0Mi5kZWZhdWx0KSh0KSksby50b3ArPXBhcnNlSW50KCgwLF9zdHlsZTIuZGVmYXVsdCkodCxcImJvcmRlclRvcFdpZHRoXCIpLDEwKS0oMCxfc2Nyb2xsVG9wMi5kZWZhdWx0KSh0KXx8MCxvLmxlZnQrPXBhcnNlSW50KCgwLF9zdHlsZTIuZGVmYXVsdCkodCxcImJvcmRlckxlZnRXaWR0aFwiKSwxMCktKDAsX3Njcm9sbExlZnQyLmRlZmF1bHQpKHQpfHwwKSxfZXh0ZW5kcyh7fSxyLHt0b3A6ci50b3Atby50b3AtKHBhcnNlSW50KCgwLF9zdHlsZTIuZGVmYXVsdCkoZSxcIm1hcmdpblRvcFwiKSwxMCl8fDApLGxlZnQ6ci5sZWZ0LW8ubGVmdC0ocGFyc2VJbnQoKDAsX3N0eWxlMi5kZWZhdWx0KShlLFwibWFyZ2luTGVmdFwiKSwxMCl8fDApfSl9bW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5CdmMybDBhVzl1TG1weklsMHNJbTVoYldWeklqcGJJazlpYW1WamRDSXNJbVJsWm1sdVpWQnliM0JsY25SNUlpd2laWGh3YjNKMGN5SXNJblpoYkhWbElpd2lYMlY0ZEdWdVpITWlMQ0poYzNOcFoyNGlMQ0owWVhKblpYUWlMQ0pwSWl3aVlYSm5kVzFsYm5Seklpd2liR1Z1WjNSb0lpd2ljMjkxY21ObElpd2lhMlY1SWl3aWNISnZkRzkwZVhCbElpd2lhR0Z6VDNkdVVISnZjR1Z5ZEhraUxDSmpZV3hzSWl3aVpHVm1ZWFZzZENJc0luQnZjMmwwYVc5dUlpd2lYMjltWm5ObGRDSXNJbkpsY1hWcGNtVWlMQ0pmYjJabWMyVjBNaUlzSWw5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUWlMQ0pmYjJabWMyVjBVR0Z5Wlc1MElpd2lYMjltWm5ObGRGQmhjbVZ1ZERJaUxDSmZjMk55YjJ4c1ZHOXdJaXdpWDNOamNtOXNiRlJ2Y0RJaUxDSmZjMk55YjJ4c1RHVm1kQ0lzSWw5elkzSnZiR3hNWldaME1pSXNJbDl6ZEhsc1pTSXNJbDl6ZEhsc1pUSWlMQ0p2WW1vaUxDSmZYMlZ6VFc5a2RXeGxJaXdpYm05a1pVNWhiV1VpTENKdWIyUmxJaXdpZEc5TWIzZGxja05oYzJVaUxDSnZabVp6WlhSUVlYSmxiblFpTENKdlptWnpaWFFpTENKd1lYSmxiblJQWm1aelpYUWlMQ0owYjNBaUxDSnNaV1owSWl3aVoyVjBRbTkxYm1ScGJtZERiR2xsYm5SU1pXTjBJaXdpY0dGeWMyVkpiblFpTENKdGIyUjFiR1VpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlJVRkJMRTlCUVU5RExHVkJRV1ZETEZGQlFWTXNZVUZCWXl4RFFVTXpRME1zVDBGQlR5eEpRVWRVTEVsQlFVbERMRk5CUVZkS0xFOUJRVTlMTEZGQlFWVXNVMEZCVlVNc1IwRkJWU3hKUVVGTExFbEJRVWxETEVWQlFVa3NSVUZCUjBFc1JVRkJTVU1zVlVGQlZVTXNUMEZCVVVZc1NVRkJTeXhEUVVGRkxFbEJRVWxITEVWQlFWTkdMRlZCUVZWRUxFZEJRVWtzU1VGQlN5eEpRVUZKU1N4TFFVRlBSQ3hGUVVGalZpeFBRVUZQV1N4VlFVRlZReXhsUVVGbFF5eExRVUZMU2l4RlFVRlJReXhMUVVGUlRDeEZRVUZQU3l4SFFVRlBSQ3hGUVVGUFF5eEpRVUZaTEU5QlFVOU1MRWRCUlhaUVNpeFJRVUZSWVN4UlFVRlZReXhUUVVWc1FpeEpRVUZKUXl4UlFVRlZReXhSUVVGUkxGbEJSV3hDUXl4VFFVRlhReXgxUWtGQmRVSklMRk5CUld4RFNTeGpRVUZuUWtnc1VVRkJVU3hyUWtGRmVFSkpMR1ZCUVdsQ1JpeDFRa0ZCZFVKRExHVkJSWGhEUlN4WFFVRmhUQ3hSUVVGUkxHVkJSWEpDVFN4WlFVRmpTaXgxUWtGQmRVSkhMRmxCUlhKRFJTeFpRVUZqVUN4UlFVRlJMR2RDUVVWMFFsRXNZVUZCWlU0c2RVSkJRWFZDU3l4aFFVVjBRMFVzVDBGQlUxUXNVVUZCVVN4WlFVVnFRbFVzVVVGQlZWSXNkVUpCUVhWQ1R5eFJRVVZ5UXl4VFFVRlRVQ3gxUWtGQmRVSlRMRWRCUVU4c1QwRkJUMEVzUjBGQlQwRXNSVUZCU1VNc1YwRkJZVVFzUlVGQlRTeERRVUZGWkN4UlFVRlRZeXhIUVVWMlJpeFRRVUZUUlN4VFFVRlRReXhIUVVOb1FpeFBRVUZQUVN4RlFVRkxSQ3hWUVVGWlF5eEZRVUZMUkN4VFFVRlRSU3hqUVVkNFF5eFRRVUZUYWtJc1UwRkJVMmRDTEVWQlFVMUZMRWRCUTNSQ0xFbEJRMGxETEVWQlJFRkRMRVZCUVdVc1EwRkJSVU1zU1VGQlN5eEZRVUZIUXl4TFFVRk5MRWRCYTBKdVF5eE5RV0lyUXl4WFFVRXpReXhGUVVGSlZpeFJRVUZSWWl4VFFVRlRhVUlzUlVGQlRTeFpRVU0zUWtjc1JVRkJVMGdzUlVGQlMwOHNlVUpCUldSTUxFVkJRV1ZCTEVsQlFXZENMRVZCUVVsYUxHVkJRV1ZRTEZOQlFWTnBRaXhIUVVNelJFY3NSMEZCVXl4RlFVRkphRUlzVTBGQlUwb3NVMEZCVTJsQ0xFZEJSVUVzVTBGQk0wSkVMRk5CUVZOSExFdEJRVEJDUlN4SFFVRmxMRVZCUVVscVFpeFRRVUZUU2l4VFFVRlRiVUlzU1VGRk5VVkZMRVZCUVdGRExFdEJRVTlITEZWQlFWTXNSVUZCU1Zvc1VVRkJVV0lzVTBGQlUyMUNMRVZCUVdNc2EwSkJRVzFDTEV0QlFVMHNSVUZCU1ZZc1dVRkJXVlFzVTBGQlUyMUNMRWxCUVdsQ0xFVkJRMjVKUlN4RlFVRmhSU3hOUVVGUlJTeFZRVUZUTEVWQlFVbGFMRkZCUVZGaUxGTkJRVk50UWl4RlFVRmpMRzFDUVVGdlFpeExRVUZOTEVWQlFVbFNMR0ZCUVdGWUxGTkJRVk50UWl4SlFVRnBRaXhIUVVscVNUbENMRk5CUVZNc1IwRkJTU3RDTEVWQlFWRXNRMEZETVVKRkxFbEJRVXRHTEVWQlFVOUZMRWxCUVUxRUxFVkJRV0ZETEV0QlFVOUhMRlZCUVZNc1JVRkJTVm9zVVVGQlVXSXNVMEZCVTJsQ0xFVkJRVTBzWVVGQll5eExRVUZQTEVkQlF5OUdUU3hMUVVGTlNDeEZRVUZQUnl4TFFVRlBSaXhGUVVGaFJTeE5RVUZSUlN4VlFVRlRMRVZCUVVsYUxGRkJRVkZpTEZOQlFWTnBRaXhGUVVGTkxHTkJRV1VzUzBGQlR5eExRVWQyUjFNc1QwRkJUM1pETEZGQlFWVkJMRkZCUVdsQ0lpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJSdmJTMW9aV3h3WlhKekwzRjFaWEo1TDNCdmMybDBhVzl1TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxleHBvcnRzLmRlZmF1bHQ9cXNhO3ZhciBzaW1wbGVTZWxlY3RvclJFPS9eW1xcdy1dKiQvLHRvQXJyYXk9RnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuY2FsbChGdW5jdGlvbi5wcm90b3R5cGUuY2FsbCxbXS5zbGljZSk7ZnVuY3Rpb24gcXNhKGUsdCl7dmFyIGwscj1cIiNcIj09PXRbMF0sbz1cIi5cIj09PXRbMF0scz1yfHxvP3Quc2xpY2UoMSk6dDtyZXR1cm4gc2ltcGxlU2VsZWN0b3JSRS50ZXN0KHMpP3I/KGw9KGU9ZS5nZXRFbGVtZW50QnlJZD9lOmRvY3VtZW50KS5nZXRFbGVtZW50QnlJZChzKSk/W2xdOltdOmUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSYmbz90b0FycmF5KGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShzKSk6dG9BcnJheShlLmdldEVsZW1lbnRzQnlUYWdOYW1lKHQpKTp0b0FycmF5KGUucXVlcnlTZWxlY3RvckFsbCh0KSl9bW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5GMVpYSjVVMlZzWldOMGIzSkJiR3d1YW5NaVhTd2libUZ0WlhNaU9sc2lUMkpxWldOMElpd2laR1ZtYVc1bFVISnZjR1Z5ZEhraUxDSmxlSEJ2Y25Seklpd2lkbUZzZFdVaUxDSmtaV1poZFd4MElpd2ljWE5oSWl3aWMybHRjR3hsVTJWc1pXTjBiM0pTUlNJc0luUnZRWEp5WVhraUxDSkdkVzVqZEdsdmJpSXNJbkJ5YjNSdmRIbHdaU0lzSW1KcGJtUWlMQ0pqWVd4c0lpd2ljMnhwWTJVaUxDSmxiR1Z0Wlc1MElpd2ljMlZzWldOMGIzSWlMQ0ptYjNWdVpDSXNJbTFoZVdKbFNVUWlMQ0p0WVhsaVpVTnNZWE56SWl3aWJtRnRaVTl1YkhraUxDSjBaWE4wSWl3aVoyVjBSV3hsYldWdWRFSjVTV1FpTENKa2IyTjFiV1Z1ZENJc0ltZGxkRVZzWlcxbGJuUnpRbmxEYkdGemMwNWhiV1VpTENKblpYUkZiR1Z0Wlc1MGMwSjVWR0ZuVG1GdFpTSXNJbkYxWlhKNVUyVnNaV04wYjNKQmJHd2lMQ0p0YjJSMWJHVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUlVGQkxFOUJRVTlETEdWQlFXVkRMRkZCUVZNc1lVRkJZeXhEUVVNelEwTXNUMEZCVHl4SlFVVlVSQ3hSUVVGUlJTeFJRVUZWUXl4SlFVbHNRaXhKUVVGSlF5eHBRa0ZCYlVJc1YwRkRia0pETEZGQlFWVkRMRk5CUVZORExGVkJRVlZETEV0QlFVdERMRXRCUVV0SUxGTkJRVk5ETEZWQlFWVkZMRXRCUVUwc1IwRkJSME1zVDBGRmRrVXNVMEZCVTFBc1NVRkJTVkVzUlVGQlUwTXNSMEZEY0VJc1NVRkpTVU1zUlVGS1FVTXNSVUZCTUVJc1RVRkJhRUpHTEVWQlFWTXNSMEZEYmtKSExFVkJRVFpDTEUxQlFXaENTQ3hGUVVGVExFZEJRM1JDU1N4RlFVRlhSaXhIUVVGWFF5eEZRVUZoU0N4RlFVRlRSaXhOUVVGTkxFZEJRVXRGTEVWQlNUTkVMRTlCU0dWU0xHbENRVUZwUW1Fc1MwRkJTMFFzUjBGSkwwSkdMRWRCUlUxRUxFZEJSRkpHTEVWQlFWVkJMRVZCUVZGUExHVkJRV2xDVUN4RlFVRlZVU3hWUVVOeVFrUXNaVUZCWlVZc1NVRkJZU3hEUVVGRFNDeEhRVUZUTEVkQlJ6VkVSaXhGUVVGUlV5eDNRa0ZCTUVKTUxFVkJRVzFDVml4UlFVRlJUU3hGUVVGUlV5eDFRa0ZCZFVKS0xFbEJSWHBHV0N4UlFVRlJUU3hGUVVGUlZTeHhRa0ZCY1VKVUxFbEJSM1pEVUN4UlFVRlJUU3hGUVVGUlZ5eHBRa0ZCYVVKV0xFbEJSVEZEVnl4UFFVRlBka0lzVVVGQlZVRXNVVUZCYVVJaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Wkc5dExXaGxiSEJsY25NdmNYVmxjbmt2Y1hWbGNubFRaV3hsWTNSdmNrRnNiQzVxY3lKOSIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGV4cG9ydHMuZGVmYXVsdD1zY3JvbGxUb3A7dmFyIF9pc1dpbmRvdz1yZXF1aXJlKFwiLi9pc1dpbmRvd1wiKSxfaXNXaW5kb3cyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzV2luZG93KTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1mdW5jdGlvbiBzY3JvbGxUb3AoZSxvKXt2YXIgdD0oMCxfaXNXaW5kb3cyLmRlZmF1bHQpKGUpO2lmKHZvaWQgMD09PW8pcmV0dXJuIHQ/XCJwYWdlWE9mZnNldFwiaW4gdD90LnBhZ2VYT2Zmc2V0OnQuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQ6ZS5zY3JvbGxMZWZ0O3Q/dC5zY3JvbGxUbyhvLFwicGFnZVlPZmZzZXRcImluIHQ/dC5wYWdlWU9mZnNldDp0LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3ApOmUuc2Nyb2xsTGVmdD1vfW1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluTmpjbTlzYkV4bFpuUXVhbk1pWFN3aWJtRnRaWE1pT2xzaVQySnFaV04wSWl3aVpHVm1hVzVsVUhKdmNHVnlkSGtpTENKbGVIQnZjblJ6SWl3aWRtRnNkV1VpTENKa1pXWmhkV3gwSWl3aWMyTnliMnhzVkc5d0lpd2lYMmx6VjJsdVpHOTNJaXdpY21WeGRXbHlaU0lzSWw5cGMxZHBibVJ2ZHpJaUxDSmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwSWl3aWIySnFJaXdpWDE5bGMwMXZaSFZzWlNJc0ltNXZaR1VpTENKMllXd2lMQ0ozYVc0aUxDSjFibVJsWm1sdVpXUWlMQ0p3WVdkbFdFOW1abk5sZENJc0ltUnZZM1Z0Wlc1MElpd2laRzlqZFcxbGJuUkZiR1Z0Wlc1MElpd2ljMk55YjJ4c1RHVm1kQ0lzSW5OamNtOXNiRlJ2SWl3aWNHRm5aVmxQWm1aelpYUWlMQ0p0YjJSMWJHVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUlVGQkxFOUJRVTlETEdWQlFXVkRMRkZCUVZNc1lVRkJZeXhEUVVNelEwTXNUMEZCVHl4SlFVVlVSQ3hSUVVGUlJTeFJRVUZWUXl4VlFVVnNRaXhKUVVGSlF5eFZRVUZaUXl4UlFVRlJMR05CUlhCQ1F5eFhRVUZoUXl4MVFrRkJkVUpJTEZkQlJYaERMRk5CUVZOSExIVkNRVUYxUWtNc1IwRkJUeXhQUVVGUFFTeEhRVUZQUVN4RlFVRkpReXhYUVVGaFJDeEZRVUZOTEVOQlFVVk9MRkZCUVZOTkxFZEJSWFpHTEZOQlFWTk1MRlZCUVZWUExFVkJRVTFETEVkQlEzWkNMRWxCUVVsRExFZEJRVTBzUlVGQlNVNHNWMEZCVjBvc1UwRkJVMUVzUjBGRmJFTXNVVUZCV1Vjc1NVRkJVa1lzUlVGQmJVSXNUMEZCVDBNc1JVRkJUU3huUWtGQmFVSkJMRVZCUVUxQkxFVkJRVWxGTEZsQlFXTkdMRVZCUVVsSExGTkJRVk5ETEdkQ1FVRm5Ra01zVjBGQllWQXNSVUZCUzA4c1YwRkZlRWhNTEVWQlFVdEJMRVZCUVVsTkxGTkJRVk5RTEVWQlFVc3NaMEpCUVdsQ1F5eEZRVUZOUVN4RlFVRkpUeXhaUVVGalVDeEZRVUZKUnl4VFFVRlRReXhuUWtGQlowSmlMRmRCUVdkQ1R5eEZRVUZMVHl4WFFVRmhUaXhGUVVWeVNWTXNUMEZCVDNCQ0xGRkJRVlZCTEZGQlFXbENJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyUnZiUzFvWld4d1pYSnpMM0YxWlhKNUwzTmpjbTlzYkV4bFpuUXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGV4cG9ydHMuZGVmYXVsdD1zY3JvbGxUb3A7dmFyIF9pc1dpbmRvdz1yZXF1aXJlKFwiLi9pc1dpbmRvd1wiKSxfaXNXaW5kb3cyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzV2luZG93KTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1mdW5jdGlvbiBzY3JvbGxUb3AoZSxvKXt2YXIgdD0oMCxfaXNXaW5kb3cyLmRlZmF1bHQpKGUpO2lmKHZvaWQgMD09PW8pcmV0dXJuIHQ/XCJwYWdlWU9mZnNldFwiaW4gdD90LnBhZ2VZT2Zmc2V0OnQuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDplLnNjcm9sbFRvcDt0P3Quc2Nyb2xsVG8oXCJwYWdlWE9mZnNldFwiaW4gdD90LnBhZ2VYT2Zmc2V0OnQuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQsbyk6ZS5zY3JvbGxUb3A9b31tb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbk5qY205c2JGUnZjQzVxY3lKZExDSnVZVzFsY3lJNld5SlBZbXBsWTNRaUxDSmtaV1pwYm1WUWNtOXdaWEowZVNJc0ltVjRjRzl5ZEhNaUxDSjJZV3gxWlNJc0ltUmxabUYxYkhRaUxDSnpZM0p2Ykd4VWIzQWlMQ0pmYVhOWGFXNWtiM2NpTENKeVpYRjFhWEpsSWl3aVgybHpWMmx1Wkc5M01pSXNJbDlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRaUxDSnZZbW9pTENKZlgyVnpUVzlrZFd4bElpd2libTlrWlNJc0luWmhiQ0lzSW5kcGJpSXNJblZ1WkdWbWFXNWxaQ0lzSW5CaFoyVlpUMlptYzJWMElpd2laRzlqZFcxbGJuUWlMQ0prYjJOMWJXVnVkRVZzWlcxbGJuUWlMQ0p6WTNKdmJHeFVieUlzSW5CaFoyVllUMlptYzJWMElpd2ljMk55YjJ4c1RHVm1kQ0lzSW0xdlpIVnNaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRlFVRXNUMEZCVDBNc1pVRkJaVU1zVVVGQlV5eGhRVUZqTEVOQlF6TkRReXhQUVVGUExFbEJSVlJFTEZGQlFWRkZMRkZCUVZWRExGVkJSV3hDTEVsQlFVbERMRlZCUVZsRExGRkJRVkVzWTBGRmNFSkRMRmRCUVdGRExIVkNRVUYxUWtnc1YwRkZlRU1zVTBGQlUwY3NkVUpCUVhWQ1F5eEhRVUZQTEU5QlFVOUJMRWRCUVU5QkxFVkJRVWxETEZkQlFXRkVMRVZCUVUwc1EwRkJSVTRzVVVGQlUwMHNSMEZGZGtZc1UwRkJVMHdzVlVGQlZVOHNSVUZCVFVNc1IwRkRka0lzU1VGQlNVTXNSMEZCVFN4RlFVRkpUaXhYUVVGWFNpeFRRVUZUVVN4SFFVVnNReXhSUVVGWlJ5eEpRVUZTUml4RlFVRnRRaXhQUVVGUFF5eEZRVUZOTEdkQ1FVRnBRa0VzUlVGQlRVRXNSVUZCU1VVc1dVRkJZMFlzUlVGQlNVY3NVMEZCVTBNc1owSkJRV2RDWWl4VlFVRlpUeXhGUVVGTFVDeFZRVVYyU0ZNc1JVRkJTMEVzUlVGQlNVc3NVMEZCVXl4blFrRkJhVUpNTEVWQlFVMUJMRVZCUVVsTkxGbEJRV05PTEVWQlFVbEhMRk5CUVZORExHZENRVUZuUWtjc1YwRkJXVklzUjBGQlZVUXNSVUZCUzFBc1ZVRkJXVkVzUlVGRmNrbFRMRTlCUVU5d1FpeFJRVUZWUVN4UlFVRnBRaUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWtiMjB0YUdWc2NHVnljeTl4ZFdWeWVTOXpZM0p2Ykd4VWIzQXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGV4cG9ydHMuZGVmYXVsdD1fZ2V0Q29tcHV0ZWRTdHlsZTt2YXIgX2NhbWVsaXplU3R5bGU9cmVxdWlyZShcIi4uL3V0aWwvY2FtZWxpemVTdHlsZVwiKSxfY2FtZWxpemVTdHlsZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2FtZWxpemVTdHlsZSk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19dmFyIHJwb3NpdGlvbj0vXih0b3B8cmlnaHR8Ym90dG9tfGxlZnQpJC8scm51bW5vbnB4PS9eKFsrLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KSkoPyFweClbYS16JV0rJC9pO2Z1bmN0aW9uIF9nZXRDb21wdXRlZFN0eWxlKGUpe2lmKCFlKXRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBFbGVtZW50IHBhc3NlZCB0byBgZ2V0Q29tcHV0ZWRTdHlsZSgpYFwiKTt2YXIgdD1lLm93bmVyRG9jdW1lbnQ7cmV0dXJuXCJkZWZhdWx0Vmlld1wiaW4gdD90LmRlZmF1bHRWaWV3Lm9wZW5lcj9lLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShlLG51bGwpOndpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGUsbnVsbCk6e2dldFByb3BlcnR5VmFsdWU6ZnVuY3Rpb24gZ2V0UHJvcGVydHlWYWx1ZSh0KXt2YXIgbD1lLnN0eWxlO1wiZmxvYXRcIj09KHQ9KDAsX2NhbWVsaXplU3R5bGUyLmRlZmF1bHQpKHQpKSYmKHQ9XCJzdHlsZUZsb2F0XCIpO3ZhciByPWUuY3VycmVudFN0eWxlW3RdfHxudWxsO2lmKG51bGw9PXImJmwmJmxbdF0mJihyPWxbdF0pLHJudW1ub25weC50ZXN0KHIpJiYhcnBvc2l0aW9uLnRlc3QodCkpe3ZhciBvPWwubGVmdCx1PWUucnVudGltZVN0eWxlLG49dSYmdS5sZWZ0O24mJih1LmxlZnQ9ZS5jdXJyZW50U3R5bGUubGVmdCksbC5sZWZ0PVwiZm9udFNpemVcIj09PXQ/XCIxZW1cIjpyLHI9bC5waXhlbExlZnQrXCJweFwiLGwubGVmdD1vLG4mJih1LmxlZnQ9bil9cmV0dXJuIHJ9fX1tb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbWRsZEVOdmJYQjFkR1ZrVTNSNWJHVXVhbk1pWFN3aWJtRnRaWE1pT2xzaVQySnFaV04wSWl3aVpHVm1hVzVsVUhKdmNHVnlkSGtpTENKbGVIQnZjblJ6SWl3aWRtRnNkV1VpTENKa1pXWmhkV3gwSWl3aVgyZGxkRU52YlhCMWRHVmtVM1I1YkdVaUxDSmZZMkZ0Wld4cGVtVlRkSGxzWlNJc0luSmxjWFZwY21VaUxDSmZZMkZ0Wld4cGVtVlRkSGxzWlRJaUxDSmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwSWl3aWIySnFJaXdpWDE5bGMwMXZaSFZzWlNJc0luSndiM05wZEdsdmJpSXNJbkp1ZFcxdWIyNXdlQ0lzSW01dlpHVWlMQ0pVZVhCbFJYSnliM0lpTENKa2IyTWlMQ0p2ZDI1bGNrUnZZM1Z0Wlc1MElpd2laR1ZtWVhWc2RGWnBaWGNpTENKdmNHVnVaWElpTENKblpYUkRiMjF3ZFhSbFpGTjBlV3hsSWl3aWQybHVaRzkzSWl3aVoyVjBVSEp2Y0dWeWRIbFdZV3gxWlNJc0luQnliM0FpTENKemRIbHNaU0lzSW1OMWNuSmxiblFpTENKamRYSnlaVzUwVTNSNWJHVWlMQ0owWlhOMElpd2liR1ZtZENJc0luSjFibE4wZVd4bElpd2ljblZ1ZEdsdFpWTjBlV3hsSWl3aWNuTk1aV1owSWl3aWNHbDRaV3hNWldaMElpd2liVzlrZFd4bElsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVVZCUVN4UFFVRlBReXhsUVVGbFF5eFJRVUZUTEdGQlFXTXNRMEZETTBORExFOUJRVThzU1VGRlZFUXNVVUZCVVVVc1VVRkJWVU1zYTBKQlJXeENMRWxCUVVsRExHVkJRV2xDUXl4UlFVRlJMSGxDUVVWNlFrTXNaMEpCUVd0Q1F5eDFRa0ZCZFVKSUxHZENRVVUzUXl4VFFVRlRSeXgxUWtGQmRVSkRMRWRCUVU4c1QwRkJUMEVzUjBGQlQwRXNSVUZCU1VNc1YwRkJZVVFzUlVGQlRTeERRVUZGVGl4UlFVRlRUU3hIUVVWMlJpeEpRVUZKUlN4VlFVRlpMRFJDUVVOYVF5eFZRVUZaTEhkRVFVVm9RaXhUUVVGVFVpeHJRa0ZCYTBKVExFZEJRM3BDTEVsQlFVdEJMRVZCUVUwc1RVRkJUU3hKUVVGSlF5eFZRVUZWTERaRFFVTXZRaXhKUVVGSlF5eEZRVUZOUml4RlFVRkxSeXhqUVVWbUxFMUJRVThzWjBKQlFXbENSQ3hGUVVGTlFTeEZRVUZKUlN4WlFVRlpReXhQUVVGVFRDeEZRVUZMUnl4alFVRmpReXhaUVVGWlJTeHBRa0ZCYVVKT0xFVkJRVTBzVFVGQlVVOHNUMEZCVDBRc2FVSkJRV2xDVGl4RlFVRk5MRTFCUVZFc1EwRkZla3BSTEdsQ1FVRnJRaXhUUVVGVFFTeHBRa0ZCYVVKRExFZEJRekZETEVsQlFVbERMRVZCUVZGV0xFVkJRVXRWTEUxQlNVd3NWVUZHV2tRc1IwRkJUeXhGUVVGSlppeG5Ra0ZCWjBKS0xGTkJRVk50UWl4TlFVVm1RU3hGUVVGUExHTkJSVFZDTEVsQlFVbEZMRVZCUVZWWUxFVkJRVXRaTEdGQlFXRklMRWxCUVZNc1MwRkpla01zUjBGR1pTeE5RVUZZUlN4SFFVRnRRa1FzUjBGQlUwRXNSVUZCVFVRc1MwRkJUMFVzUlVGQlZVUXNSVUZCVFVRc1NVRkZla1JXTEZWQlFWVmpMRXRCUVV0R0xFdEJRV0ZpTEZWQlFWVmxMRXRCUVV0S0xFZEJRVThzUTBGRmNFUXNTVUZCU1Vzc1JVRkJUMG9zUlVGQlRVa3NTMEZEWWtNc1JVRkJWMllzUlVGQlMyZENMR0ZCUTJoQ1F5eEZRVUZUUml4SFFVRlpRU3hGUVVGVFJDeExRVWM1UWtjc1NVRkJVVVlzUlVGQlUwUXNTMEZCVDJRc1JVRkJTMWtzWVVGQllVVXNUVUZGT1VOS0xFVkJRVTFKTEV0QlFXZENMR0ZCUVZSTUxFVkJRWE5DTEUxQlFWRkZMRVZCUXpORFFTeEZRVUZWUkN4RlFVRk5VU3hWUVVGWkxFdEJSelZDVWl4RlFVRk5TU3hMUVVGUFFTeEZRVU5VUnl4SlFVRlJSaXhGUVVGVFJDeExRVUZQUnl4SFFVYzVRaXhQUVVGUFRpeEpRVWxpVVN4UFFVRlBMMElzVVVGQlZVRXNVVUZCYVVJaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Wkc5dExXaGxiSEJsY25NdmMzUjViR1V2WjJWMFEyOXRjSFYwWldSVGRIbHNaUzVxY3lKOSIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGV4cG9ydHMuZGVmYXVsdD1zdHlsZTt2YXIgX2NhbWVsaXplU3R5bGU9cmVxdWlyZShcIi4uL3V0aWwvY2FtZWxpemVTdHlsZVwiKSxfY2FtZWxpemVTdHlsZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2FtZWxpemVTdHlsZSksX2h5cGhlbmF0ZVN0eWxlPXJlcXVpcmUoXCIuLi91dGlsL2h5cGhlbmF0ZVN0eWxlXCIpLF9oeXBoZW5hdGVTdHlsZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaHlwaGVuYXRlU3R5bGUpLF9nZXRDb21wdXRlZFN0eWxlMj1yZXF1aXJlKFwiLi9nZXRDb21wdXRlZFN0eWxlXCIpLF9nZXRDb21wdXRlZFN0eWxlMz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRDb21wdXRlZFN0eWxlMiksX3JlbW92ZVN0eWxlPXJlcXVpcmUoXCIuL3JlbW92ZVN0eWxlXCIpLF9yZW1vdmVTdHlsZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVtb3ZlU3R5bGUpLF9wcm9wZXJ0aWVzPXJlcXVpcmUoXCIuLi90cmFuc2l0aW9uL3Byb3BlcnRpZXNcIiksX2lzVHJhbnNmb3JtPXJlcXVpcmUoXCIuLi90cmFuc2l0aW9uL2lzVHJhbnNmb3JtXCIpLF9pc1RyYW5zZm9ybTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNUcmFuc2Zvcm0pO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fWZ1bmN0aW9uIHN0eWxlKGUsdCxyKXt2YXIgbD1cIlwiLGk9XCJcIix1PXQ7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpe2lmKHZvaWQgMD09PXIpcmV0dXJuIGUuc3R5bGVbKDAsX2NhbWVsaXplU3R5bGUyLmRlZmF1bHQpKHQpXXx8KDAsX2dldENvbXB1dGVkU3R5bGUzLmRlZmF1bHQpKGUpLmdldFByb3BlcnR5VmFsdWUoKDAsX2h5cGhlbmF0ZVN0eWxlMi5kZWZhdWx0KSh0KSk7KHU9e30pW3RdPXJ9T2JqZWN0LmtleXModSkuZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgcj11W3RdO3J8fDA9PT1yPygwLF9pc1RyYW5zZm9ybTIuZGVmYXVsdCkodCk/aSs9dCtcIihcIityK1wiKSBcIjpsKz0oMCxfaHlwaGVuYXRlU3R5bGUyLmRlZmF1bHQpKHQpK1wiOiBcIityK1wiO1wiOigwLF9yZW1vdmVTdHlsZTIuZGVmYXVsdCkoZSwoMCxfaHlwaGVuYXRlU3R5bGUyLmRlZmF1bHQpKHQpKX0pLGkmJihsKz1fcHJvcGVydGllcy50cmFuc2Zvcm0rXCI6IFwiK2krXCI7XCIpLGUuc3R5bGUuY3NzVGV4dCs9XCI7XCIrbH1tb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbWx1WkdWNExtcHpJbDBzSW01aGJXVnpJanBiSWs5aWFtVmpkQ0lzSW1SbFptbHVaVkJ5YjNCbGNuUjVJaXdpWlhod2IzSjBjeUlzSW5aaGJIVmxJaXdpWkdWbVlYVnNkQ0lzSW5OMGVXeGxJaXdpWDJOaGJXVnNhWHBsVTNSNWJHVWlMQ0p5WlhGMWFYSmxJaXdpWDJOaGJXVnNhWHBsVTNSNWJHVXlJaXdpWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDSXNJbDlvZVhCb1pXNWhkR1ZUZEhsc1pTSXNJbDlvZVhCb1pXNWhkR1ZUZEhsc1pUSWlMQ0pmWjJWMFEyOXRjSFYwWldSVGRIbHNaVElpTENKZloyVjBRMjl0Y0hWMFpXUlRkSGxzWlRNaUxDSmZjbVZ0YjNabFUzUjViR1VpTENKZmNtVnRiM1psVTNSNWJHVXlJaXdpWDNCeWIzQmxjblJwWlhNaUxDSmZhWE5VY21GdWMyWnZjbTBpTENKZmFYTlVjbUZ1YzJadmNtMHlJaXdpYjJKcUlpd2lYMTlsYzAxdlpIVnNaU0lzSW01dlpHVWlMQ0p3Y205d1pYSjBlU0lzSW1OemN5SXNJblJ5WVc1elptOXliWE1pTENKd2NtOXdjeUlzSW5WdVpHVm1hVzVsWkNJc0ltZGxkRkJ5YjNCbGNuUjVWbUZzZFdVaUxDSnJaWGx6SWl3aVptOXlSV0ZqYUNJc0ltdGxlU0lzSW5SeVlXNXpabTl5YlNJc0ltTnpjMVJsZUhRaUxDSnRiMlIxYkdVaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJSVUZCTEU5QlFVOURMR1ZCUVdWRExGRkJRVk1zWVVGQll5eERRVU16UTBNc1QwRkJUeXhKUVVWVVJDeFJRVUZSUlN4UlFVRlZReXhOUVVWc1FpeEpRVUZKUXl4bFFVRnBRa01zVVVGQlVTeDVRa0ZGZWtKRExHZENRVUZyUWtNc2RVSkJRWFZDU0N4blFrRkZla05KTEdkQ1FVRnJRa2dzVVVGQlVTd3dRa0ZGTVVKSkxHbENRVUZ0UWtZc2RVSkJRWFZDUXl4cFFrRkZNVU5GTEcxQ1FVRnhRa3dzVVVGQlVTeHpRa0ZGTjBKTkxHMUNRVUZ4UWtvc2RVSkJRWFZDUnl4dlFrRkZOVU5GTEdGQlFXVlFMRkZCUVZFc2FVSkJSWFpDVVN4alFVRm5RazRzZFVKQlFYVkNTeXhqUVVWMlEwVXNXVUZCWTFRc1VVRkJVU3cwUWtGRmRFSlZMR0ZCUVdWV0xGRkJRVkVzTmtKQlJYWkNWeXhqUVVGblFsUXNkVUpCUVhWQ1VTeGpRVVV6UXl4VFFVRlRVaXgxUWtGQmRVSlZMRWRCUVU4c1QwRkJUMEVzUjBGQlQwRXNSVUZCU1VNc1YwRkJZVVFzUlVGQlRTeERRVUZGWml4UlFVRlRaU3hIUVVWMlJpeFRRVUZUWkN4TlFVRk5aMElzUlVGQlRVTXNSVUZCVlc1Q0xFZEJRemRDTEVsQlFVbHZRaXhGUVVGTkxFZEJRMDVETEVWQlFXRXNSMEZEWWtNc1JVRkJVVWdzUlVGRldpeEhRVUYzUWl4cFFrRkJZa0VzUlVGQmRVSXNRMEZEYUVNc1VVRkJZMGtzU1VGQlZuWkNMRVZCUTBZc1QwRkJUMnRDTEVWQlFVdG9RaXhQUVVGTkxFVkJRVWxITEdkQ1FVRm5Ra29zVTBGQlUydENMRTFCUVdNc1JVRkJTVlFzYlVKQlFXMUNWQ3hUUVVGVGFVSXNSMEZCVFUwc2EwSkJRV2xDTEVWQlFVbG9RaXhwUWtGQmFVSlFMRk5CUVZOclFpeExRVVZxU2tjc1JVRkJVU3hKUVVGSlNDeEhRVUZaYmtJc1JVRkpOMEpJTEU5QlFVODBRaXhMUVVGTFNDeEhRVUZQU1N4UlFVRlJMRk5CUVZWRExFZEJRMjVETEVsQlFVa3pRaXhGUVVGUmMwSXNSVUZCVFVzc1IwRkRZak5DTEVkQlFXMUNMRWxCUVZaQkxFZEJSVWdzUlVGQlNXVXNZMEZCWTJRc1UwRkJVekJDTEVkQlEzQkRUaXhIUVVGalRTeEZRVUZOTEVsQlFVMHpRaXhGUVVGUkxFdEJSV3hEYjBJc1NVRkJUeXhGUVVGSldpeHBRa0ZCYVVKUUxGTkJRVk13UWl4SFFVRlBMRXRCUVU4elFpeEZRVUZSTEV0QlNqTkVMRVZCUVVsWkxHTkJRV05ZTEZOQlFWTnBRaXhIUVVGTkxFVkJRVWxXTEdsQ1FVRnBRbEFzVTBGQlV6QkNMRTFCVVM5RVRpeEpRVU5HUkN4SFFVRlBVQ3haUVVGWlpTeFZRVUZaTEV0QlFVOVFMRVZCUVdFc1MwRkhja1JJTEVWQlFVdG9RaXhOUVVGTk1rSXNVMEZCVnl4SlFVRk5WQ3hGUVVVNVFsVXNUMEZCVHk5Q0xGRkJRVlZCTEZGQlFXbENJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyUnZiUzFvWld4d1pYSnpMM04wZVd4bEwybHVaR1Y0TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByZW1vdmVTdHlsZShlLHQpe3JldHVyblwicmVtb3ZlUHJvcGVydHlcImluIGUuc3R5bGU/ZS5zdHlsZS5yZW1vdmVQcm9wZXJ0eSh0KTplLnN0eWxlLnJlbW92ZUF0dHJpYnV0ZSh0KX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxleHBvcnRzLmRlZmF1bHQ9cmVtb3ZlU3R5bGUsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5KbGJXOTJaVk4wZVd4bExtcHpJbDBzSW01aGJXVnpJanBiSW5KbGJXOTJaVk4wZVd4bElpd2libTlrWlNJc0ltdGxlU0lzSW5OMGVXeGxJaXdpY21WdGIzWmxVSEp2Y0dWeWRIa2lMQ0p5WlcxdmRtVkJkSFJ5YVdKMWRHVWlMQ0pQWW1wbFkzUWlMQ0prWldacGJtVlFjbTl3WlhKMGVTSXNJbVY0Y0c5eWRITWlMQ0oyWVd4MVpTSXNJbVJsWm1GMWJIUWlMQ0p0YjJSMWJHVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCVFVFc1UwRkJVMEVzV1VGQldVTXNSVUZCVFVNc1IwRkRla0lzVFVGQlR5eHRRa0ZCYjBKRUxFVkJRVXRGTEUxQlFWRkdMRVZCUVV0RkxFMUJRVTFETEdWQlFXVkdMRWRCUVU5RUxFVkJRVXRGTEUxQlFVMUZMR2RDUVVGblFrZ3NSMEZNZEVkSkxFOUJRVTlETEdWQlFXVkRMRkZCUVZNc1lVRkJZeXhEUVVNelEwTXNUMEZCVHl4SlFVVlVSQ3hSUVVGUlJTeFJRVUZWVml4WlFVbHNRbGNzVDBGQlQwZ3NVVUZCVlVFc1VVRkJhVUlpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZaRzl0TFdobGJIQmxjbk12YzNSNWJHVXZjbVZ0YjNabFUzUjViR1V1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgX3Byb3BlcnRpZXM9cmVxdWlyZShcIi4vcHJvcGVydGllc1wiKSxfcHJvcGVydGllczI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcGVydGllcyksX3N0eWxlPXJlcXVpcmUoXCIuLi9zdHlsZVwiKSxfc3R5bGUyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0eWxlKTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1mdW5jdGlvbiBvbkVuZChlLHQscil7dmFyIG4sbz17dGFyZ2V0OmUsY3VycmVudFRhcmdldDplfTtmdW5jdGlvbiBkb25lKGUpe2UudGFyZ2V0PT09ZS5jdXJyZW50VGFyZ2V0JiYoY2xlYXJUaW1lb3V0KG4pLGUudGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoX3Byb3BlcnRpZXMyLmRlZmF1bHQuZW5kLGRvbmUpLHQuY2FsbCh0aGlzKSl9X3Byb3BlcnRpZXMyLmRlZmF1bHQuZW5kP251bGw9PXImJihyPXBhcnNlRHVyYXRpb24oZSl8fDApOnI9MCxfcHJvcGVydGllczIuZGVmYXVsdC5lbmQ/KGUuYWRkRXZlbnRMaXN0ZW5lcihfcHJvcGVydGllczIuZGVmYXVsdC5lbmQsZG9uZSwhMSksbj1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7cmV0dXJuIGRvbmUobyl9LDEuNSoocnx8MTAwKSkpOnNldFRpbWVvdXQoZG9uZS5iaW5kKG51bGwsbyksMCl9ZnVuY3Rpb24gcGFyc2VEdXJhdGlvbihlKXt2YXIgdD0oMCxfc3R5bGUyLmRlZmF1bHQpKGUsX3Byb3BlcnRpZXMyLmRlZmF1bHQuZHVyYXRpb24pLHI9LTE9PT10LmluZGV4T2YoXCJtc1wiKT8xZTM6MTtyZXR1cm4gcGFyc2VGbG9hdCh0KSpyfW9uRW5kLl9wYXJzZUR1cmF0aW9uPXBhcnNlRHVyYXRpb24sZXhwb3J0cy5kZWZhdWx0PW9uRW5kLG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnVaQzVxY3lKZExDSnVZVzFsY3lJNld5SlBZbXBsWTNRaUxDSmtaV1pwYm1WUWNtOXdaWEowZVNJc0ltVjRjRzl5ZEhNaUxDSjJZV3gxWlNJc0lsOXdjbTl3WlhKMGFXVnpJaXdpY21WeGRXbHlaU0lzSWw5d2NtOXdaWEowYVdWek1pSXNJbDlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRaUxDSmZjM1I1YkdVaUxDSmZjM1I1YkdVeUlpd2liMkpxSWl3aVgxOWxjMDF2WkhWc1pTSXNJbVJsWm1GMWJIUWlMQ0p2YmtWdVpDSXNJbTV2WkdVaUxDSm9ZVzVrYkdWeUlpd2laSFZ5WVhScGIyNGlMQ0ppWVdOcmRYQWlMQ0ptWVd0bFJYWmxiblFpTENKMFlYSm5aWFFpTENKamRYSnlaVzUwVkdGeVoyVjBJaXdpWkc5dVpTSXNJbVYyWlc1MElpd2lZMnhsWVhKVWFXMWxiM1YwSWl3aWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpSXNJbVZ1WkNJc0ltTmhiR3dpTENKMGFHbHpJaXdpY0dGeWMyVkVkWEpoZEdsdmJpSXNJbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSWlMQ0p6WlhSVWFXMWxiM1YwSWl3aVltbHVaQ0lzSW5OMGNpSXNJbTExYkhRaUxDSnBibVJsZUU5bUlpd2ljR0Z5YzJWR2JHOWhkQ0lzSWw5d1lYSnpaVVIxY21GMGFXOXVJaXdpYlc5a2RXeGxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVWQlFTeFBRVUZQUXl4bFFVRmxReXhSUVVGVExHRkJRV01zUTBGRE0wTkRMRTlCUVU4c1NVRkhWQ3hKUVVGSlF5eFpRVUZqUXl4UlFVRlJMR2RDUVVWMFFrTXNZVUZCWlVNc2RVSkJRWFZDU0N4aFFVVjBRMGtzVDBGQlUwZ3NVVUZCVVN4WlFVVnFRa2tzVVVGQlZVWXNkVUpCUVhWQ1F5eFJRVVZ5UXl4VFFVRlRSQ3gxUWtGQmRVSkhMRWRCUVU4c1QwRkJUMEVzUjBGQlQwRXNSVUZCU1VNc1YwRkJZVVFzUlVGQlRTeERRVUZGUlN4UlFVRlRSaXhIUVVWMlJpeFRRVUZUUnl4TlFVRk5ReXhGUVVGTlF5eEZRVUZUUXl4SFFVTTFRaXhKUVVsSlF5eEZRVXBCUXl4RlFVRlpMRU5CUTJSRExFOUJRVkZNTEVWQlExSk5MR05CUVdWT0xFZEJZMnBDTEZOQlFWTlBMRXRCUVV0RExFZEJRMUpCTEVWQlFVMUlMRk5CUVZkSExFVkJRVTFHTEdkQ1FVTXpRa2NzWVVGQllVNHNSMEZEWWtzc1JVRkJUVWdzVDBGQlQwc3NiMEpCUVc5Q2JFSXNZVUZCWVUwc1VVRkJVV0VzU1VGQlMwb3NUVUZETTBST0xFVkJRVkZYTEV0QlFVdERMRTlCWkZaeVFpeGhRVUZoVFN4UlFVRlJZU3hKUVVGMVF5eE5RVUZhVkN4SlFVRnJRa0VzUlVGQlYxa3NZMEZCWTJRc1NVRkJVeXhIUVVFeFJVVXNSVUZCVnl4RlFVVjBRMVlzWVVGQllVMHNVVUZCVVdFc1MwRkRka0pZTEVWQlFVdGxMR2xDUVVGcFFuWkNMR0ZCUVdGTkxGRkJRVkZoTEVsQlFVdEtMRTFCUVUwc1IwRkZkRVJLTEVWQlFWTmhMRmRCUVZjc1YwRkRiRUlzVDBGQlQxUXNTMEZCUzBnc1NVRkRVeXhMUVVGdVFrWXNSMEZCV1N4UFFVTllZeXhYUVVGWFZDeExRVUZMVlN4TFFVRkxMRXRCUVUxaUxFZEJRVmtzUjBGbGFFUXNVMEZCVTFVc1kwRkJZMlFzUjBGRGNrSXNTVUZCU1d0Q0xFZEJRVTBzUlVGQlNYWkNMRkZCUVZGSExGTkJRVk5GTEVWQlFVMVNMR0ZCUVdGTkxGRkJRVkZKTEZWQlEzUkVhVUlzUjBGQk9FSXNTVUZCZGtKRUxFVkJRVWxGTEZGQlFWRXNUVUZCWlN4SlFVRlBMRVZCUlRkRExFOUJRVTlETEZkQlFWZElMRWRCUVU5RExFVkJWRE5DY0VJc1RVRkJUWFZDTEdWQlFXbENVaXhqUVVWMlFqRkNMRkZCUVZGVkxGRkJRVlZETEUxQlUyeENkMElzVDBGQlQyNURMRkZCUVZWQkxGRkJRV2xDSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMlJ2YlMxb1pXeHdaWEp6TDNSeVlXNXphWFJwYjI0dlpXNWtMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGV4cG9ydHMucHJvcGVydGllcz1leHBvcnRzLmVuZD12b2lkIDA7dmFyIF9lbmQ9cmVxdWlyZShcIi4vZW5kXCIpLF9lbmQyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2VuZCksX3Byb3BlcnRpZXM9cmVxdWlyZShcIi4vcHJvcGVydGllc1wiKSxfcHJvcGVydGllczI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcGVydGllcyk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19ZXhwb3J0cy5lbmQ9X2VuZDIuZGVmYXVsdCxleHBvcnRzLnByb3BlcnRpZXM9X3Byb3BlcnRpZXMyLmRlZmF1bHQsZXhwb3J0cy5kZWZhdWx0PXtlbmQ6X2VuZDIuZGVmYXVsdCxwcm9wZXJ0aWVzOl9wcm9wZXJ0aWVzMi5kZWZhdWx0fTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltbHVaR1Y0TG1weklsMHNJbTVoYldWeklqcGJJazlpYW1WamRDSXNJbVJsWm1sdVpWQnliM0JsY25SNUlpd2laWGh3YjNKMGN5SXNJblpoYkhWbElpd2ljSEp2Y0dWeWRHbGxjeUlzSW1WdVpDSXNJblZ1WkdWbWFXNWxaQ0lzSWw5bGJtUWlMQ0p5WlhGMWFYSmxJaXdpWDJWdVpESWlMQ0pmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MElpd2lYM0J5YjNCbGNuUnBaWE1pTENKZmNISnZjR1Z5ZEdsbGN6SWlMQ0p2WW1vaUxDSmZYMlZ6VFc5a2RXeGxJaXdpWkdWbVlYVnNkQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRlFVRXNUMEZCVDBNc1pVRkJaVU1zVVVGQlV5eGhRVUZqTEVOQlF6TkRReXhQUVVGUExFbEJSVlJFTEZGQlFWRkZMRmRCUVdGR0xGRkJRVkZITEZOQlFVMURMRVZCUlc1RExFbEJRVWxETEV0QlFVOURMRkZCUVZFc1UwRkZaa01zVFVGQlVVTXNkVUpCUVhWQ1NDeE5RVVV2UWtrc1dVRkJZMGdzVVVGQlVTeG5Ra0ZGZEVKSkxHRkJRV1ZHTEhWQ1FVRjFRa01zWVVGRk1VTXNVMEZCVTBRc2RVSkJRWFZDUnl4SFFVRlBMRTlCUVU5QkxFZEJRVTlCTEVWQlFVbERMRmRCUVdGRUxFVkJRVTBzUTBGQlJVVXNVVUZCVTBZc1IwRkZka1pZTEZGQlFWRkhMRWxCUVUxSkxFMUJRVTFOTEZGQlEzQkNZaXhSUVVGUlJTeFhRVUZoVVN4aFFVRmhSeXhSUVVOc1EySXNVVUZCVVdFc1VVRkJWU3hEUVVGRlZpeEpRVUZMU1N4TlFVRk5UU3hSUVVGVFdDeFhRVUZaVVN4aFFVRmhSeUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OWtiMjB0YUdWc2NHVnljeTkwY21GdWMybDBhVzl1TDJsdVpHVjRMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGV4cG9ydHMuZGVmYXVsdD1pc1RyYW5zZm9ybTt2YXIgc3VwcG9ydGVkVHJhbnNmb3Jtcz0vXigodHJhbnNsYXRlfHJvdGF0ZXxzY2FsZSkoWHxZfFp8M2QpP3xtYXRyaXgoM2QpP3xwZXJzcGVjdGl2ZXxza2V3KFh8WSk/KSQvaTtmdW5jdGlvbiBpc1RyYW5zZm9ybShlKXtyZXR1cm4hKCFlfHwhc3VwcG9ydGVkVHJhbnNmb3Jtcy50ZXN0KGUpKX1tb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbWx6VkhKaGJuTm1iM0p0TG1weklsMHNJbTVoYldWeklqcGJJazlpYW1WamRDSXNJbVJsWm1sdVpWQnliM0JsY25SNUlpd2laWGh3YjNKMGN5SXNJblpoYkhWbElpd2laR1ZtWVhWc2RDSXNJbWx6VkhKaGJuTm1iM0p0SWl3aWMzVndjRzl5ZEdWa1ZISmhibk5tYjNKdGN5SXNJbkJ5YjNCbGNuUjVJaXdpZEdWemRDSXNJbTF2WkhWc1pTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZGUVVFc1QwRkJUME1zWlVGQlpVTXNVVUZCVXl4aFFVRmpMRU5CUXpORFF5eFBRVUZQTEVsQlJWUkVMRkZCUVZGRkxGRkJRVlZETEZsQlEyeENMRWxCUVVsRExHOUNRVUZ6UWl3NFJVRkZNVUlzVTBGQlUwUXNXVUZCV1VVc1IwRkRia0lzVTBGQlZVRXNTVUZCV1VRc2IwSkJRVzlDUlN4TFFVRkxSQ3hKUVVWcVJFVXNUMEZCVDFBc1VVRkJWVUVzVVVGQmFVSWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlpHOXRMV2hsYkhCbGNuTXZkSEpoYm5OcGRHbHZiaTlwYzFSeVlXNXpabTl5YlM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxleHBvcnRzLmFuaW1hdGlvbkVuZD1leHBvcnRzLmFuaW1hdGlvbkRlbGF5PWV4cG9ydHMuYW5pbWF0aW9uVGltaW5nPWV4cG9ydHMuYW5pbWF0aW9uRHVyYXRpb249ZXhwb3J0cy5hbmltYXRpb25OYW1lPWV4cG9ydHMudHJhbnNpdGlvbkVuZD1leHBvcnRzLnRyYW5zaXRpb25EdXJhdGlvbj1leHBvcnRzLnRyYW5zaXRpb25EZWxheT1leHBvcnRzLnRyYW5zaXRpb25UaW1pbmc9ZXhwb3J0cy50cmFuc2l0aW9uUHJvcGVydHk9ZXhwb3J0cy50cmFuc2Zvcm09dm9pZCAwO3ZhciBfaW5ET009cmVxdWlyZShcIi4uL3V0aWwvaW5ET01cIiksX2luRE9NMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbkRPTSk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChpKXtyZXR1cm4gaSYmaS5fX2VzTW9kdWxlP2k6e2RlZmF1bHQ6aX19dmFyIHRyYW5zZm9ybT1cInRyYW5zZm9ybVwiLHByZWZpeD12b2lkIDAsdHJhbnNpdGlvbkVuZD12b2lkIDAsYW5pbWF0aW9uRW5kPXZvaWQgMCx0cmFuc2l0aW9uUHJvcGVydHk9dm9pZCAwLHRyYW5zaXRpb25EdXJhdGlvbj12b2lkIDAsdHJhbnNpdGlvblRpbWluZz12b2lkIDAsdHJhbnNpdGlvbkRlbGF5PXZvaWQgMCxhbmltYXRpb25OYW1lPXZvaWQgMCxhbmltYXRpb25EdXJhdGlvbj12b2lkIDAsYW5pbWF0aW9uVGltaW5nPXZvaWQgMCxhbmltYXRpb25EZWxheT12b2lkIDA7aWYoX2luRE9NMi5kZWZhdWx0KXt2YXIgX2dldFRyYW5zaXRpb25Qcm9wZXJ0PWdldFRyYW5zaXRpb25Qcm9wZXJ0aWVzKCk7cHJlZml4PV9nZXRUcmFuc2l0aW9uUHJvcGVydC5wcmVmaXgsZXhwb3J0cy50cmFuc2l0aW9uRW5kPXRyYW5zaXRpb25FbmQ9X2dldFRyYW5zaXRpb25Qcm9wZXJ0LnRyYW5zaXRpb25FbmQsZXhwb3J0cy5hbmltYXRpb25FbmQ9YW5pbWF0aW9uRW5kPV9nZXRUcmFuc2l0aW9uUHJvcGVydC5hbmltYXRpb25FbmQsZXhwb3J0cy50cmFuc2Zvcm09dHJhbnNmb3JtPXByZWZpeCtcIi1cIit0cmFuc2Zvcm0sZXhwb3J0cy50cmFuc2l0aW9uUHJvcGVydHk9dHJhbnNpdGlvblByb3BlcnR5PXByZWZpeCtcIi10cmFuc2l0aW9uLXByb3BlcnR5XCIsZXhwb3J0cy50cmFuc2l0aW9uRHVyYXRpb249dHJhbnNpdGlvbkR1cmF0aW9uPXByZWZpeCtcIi10cmFuc2l0aW9uLWR1cmF0aW9uXCIsZXhwb3J0cy50cmFuc2l0aW9uRGVsYXk9dHJhbnNpdGlvbkRlbGF5PXByZWZpeCtcIi10cmFuc2l0aW9uLWRlbGF5XCIsZXhwb3J0cy50cmFuc2l0aW9uVGltaW5nPXRyYW5zaXRpb25UaW1pbmc9cHJlZml4K1wiLXRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uXCIsZXhwb3J0cy5hbmltYXRpb25OYW1lPWFuaW1hdGlvbk5hbWU9cHJlZml4K1wiLWFuaW1hdGlvbi1uYW1lXCIsZXhwb3J0cy5hbmltYXRpb25EdXJhdGlvbj1hbmltYXRpb25EdXJhdGlvbj1wcmVmaXgrXCItYW5pbWF0aW9uLWR1cmF0aW9uXCIsZXhwb3J0cy5hbmltYXRpb25UaW1pbmc9YW5pbWF0aW9uVGltaW5nPXByZWZpeCtcIi1hbmltYXRpb24tZGVsYXlcIixleHBvcnRzLmFuaW1hdGlvbkRlbGF5PWFuaW1hdGlvbkRlbGF5PXByZWZpeCtcIi1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uXCJ9ZnVuY3Rpb24gZ2V0VHJhbnNpdGlvblByb3BlcnRpZXMoKXtmb3IodmFyIGk9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxuPXtPOmZ1bmN0aW9uIE8oaSl7cmV0dXJuXCJvXCIraS50b0xvd2VyQ2FzZSgpfSxNb3o6ZnVuY3Rpb24gTW96KGkpe3JldHVybiBpLnRvTG93ZXJDYXNlKCl9LFdlYmtpdDpmdW5jdGlvbiBXZWJraXQoaSl7cmV0dXJuXCJ3ZWJraXRcIitpfSxtczpmdW5jdGlvbiBtcyhpKXtyZXR1cm5cIk1TXCIraX19LHQ9T2JqZWN0LmtleXMobiksbz12b2lkIDAscj12b2lkIDAsYT1cIlwiLGU9MDtlPHQubGVuZ3RoO2UrKyl7dmFyIHM9dFtlXTtpZihzK1wiVHJhbnNpdGlvblByb3BlcnR5XCJpbiBpKXthPVwiLVwiK3MudG9Mb3dlckNhc2UoKSxvPW5bc10oXCJUcmFuc2l0aW9uRW5kXCIpLHI9bltzXShcIkFuaW1hdGlvbkVuZFwiKTticmVha319cmV0dXJuIW8mJlwidHJhbnNpdGlvblByb3BlcnR5XCJpbiBpJiYobz1cInRyYW5zaXRpb25lbmRcIiksIXImJlwiYW5pbWF0aW9uTmFtZVwiaW4gaSYmKHI9XCJhbmltYXRpb25lbmRcIiksaT1udWxsLHthbmltYXRpb25FbmQ6cix0cmFuc2l0aW9uRW5kOm8scHJlZml4OmF9fWV4cG9ydHMudHJhbnNmb3JtPXRyYW5zZm9ybSxleHBvcnRzLnRyYW5zaXRpb25Qcm9wZXJ0eT10cmFuc2l0aW9uUHJvcGVydHksZXhwb3J0cy50cmFuc2l0aW9uVGltaW5nPXRyYW5zaXRpb25UaW1pbmcsZXhwb3J0cy50cmFuc2l0aW9uRGVsYXk9dHJhbnNpdGlvbkRlbGF5LGV4cG9ydHMudHJhbnNpdGlvbkR1cmF0aW9uPXRyYW5zaXRpb25EdXJhdGlvbixleHBvcnRzLnRyYW5zaXRpb25FbmQ9dHJhbnNpdGlvbkVuZCxleHBvcnRzLmFuaW1hdGlvbk5hbWU9YW5pbWF0aW9uTmFtZSxleHBvcnRzLmFuaW1hdGlvbkR1cmF0aW9uPWFuaW1hdGlvbkR1cmF0aW9uLGV4cG9ydHMuYW5pbWF0aW9uVGltaW5nPWFuaW1hdGlvblRpbWluZyxleHBvcnRzLmFuaW1hdGlvbkRlbGF5PWFuaW1hdGlvbkRlbGF5LGV4cG9ydHMuYW5pbWF0aW9uRW5kPWFuaW1hdGlvbkVuZCxleHBvcnRzLmRlZmF1bHQ9e3RyYW5zZm9ybTp0cmFuc2Zvcm0sZW5kOnRyYW5zaXRpb25FbmQscHJvcGVydHk6dHJhbnNpdGlvblByb3BlcnR5LHRpbWluZzp0cmFuc2l0aW9uVGltaW5nLGRlbGF5OnRyYW5zaXRpb25EZWxheSxkdXJhdGlvbjp0cmFuc2l0aW9uRHVyYXRpb259O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5CeWIzQmxjblJwWlhNdWFuTWlYU3dpYm1GdFpYTWlPbHNpVDJKcVpXTjBJaXdpWkdWbWFXNWxVSEp2Y0dWeWRIa2lMQ0psZUhCdmNuUnpJaXdpZG1Gc2RXVWlMQ0poYm1sdFlYUnBiMjVGYm1RaUxDSmhibWx0WVhScGIyNUVaV3hoZVNJc0ltRnVhVzFoZEdsdmJsUnBiV2x1WnlJc0ltRnVhVzFoZEdsdmJrUjFjbUYwYVc5dUlpd2lZVzVwYldGMGFXOXVUbUZ0WlNJc0luUnlZVzV6YVhScGIyNUZibVFpTENKMGNtRnVjMmwwYVc5dVJIVnlZWFJwYjI0aUxDSjBjbUZ1YzJsMGFXOXVSR1ZzWVhraUxDSjBjbUZ1YzJsMGFXOXVWR2x0YVc1bklpd2lkSEpoYm5OcGRHbHZibEJ5YjNCbGNuUjVJaXdpZEhKaGJuTm1iM0p0SWl3aWRXNWtaV1pwYm1Wa0lpd2lYMmx1UkU5Tklpd2ljbVZ4ZFdseVpTSXNJbDlwYmtSUFRUSWlMQ0pmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MElpd2liMkpxSWl3aVgxOWxjMDF2WkhWc1pTSXNJbVJsWm1GMWJIUWlMQ0p3Y21WbWFYZ2lMQ0pmWjJWMFZISmhibk5wZEdsdmJsQnliM0JsY25RaUxDSm5aWFJVY21GdWMybDBhVzl1VUhKdmNHVnlkR2xsY3lJc0luTjBlV3hsSWl3aVpHOWpkVzFsYm5RaUxDSmpjbVZoZEdWRmJHVnRaVzUwSWl3aWRtVnVaRzl5VFdGd0lpd2lUeUlzSW1VaUxDSjBiMHh2ZDJWeVEyRnpaU0lzSWsxdmVpSXNJbGRsWW10cGRDSXNJbTF6SWl3aWRtVnVaRzl5Y3lJc0ltdGxlWE1pTENKcElpd2liR1Z1WjNSb0lpd2lkbVZ1Wkc5eUlpd2laVzVrSWl3aWNISnZjR1Z5ZEhraUxDSjBhVzFwYm1jaUxDSmtaV3hoZVNJc0ltUjFjbUYwYVc5dUlsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVVZCUVN4UFFVRlBReXhsUVVGbFF5eFJRVUZUTEdGQlFXTXNRMEZETTBORExFOUJRVThzU1VGRlZFUXNVVUZCVVVVc1lVRkJaVVlzVVVGQlVVY3NaVUZCYVVKSUxGRkJRVkZKTEdkQ1FVRnJRa29zVVVGQlVVc3NhMEpCUVc5Q1RDeFJRVUZSVFN4alFVRm5RazRzVVVGQlVVOHNZMEZCWjBKUUxGRkJRVkZSTEcxQ1FVRnhRbElzVVVGQlVWTXNaMEpCUVd0Q1ZDeFJRVUZSVlN4cFFrRkJiVUpXTEZGQlFWRlhMRzFDUVVGeFFsZ3NVVUZCVVZrc1pVRkJXVU1zUlVGRmVsSXNTVUZCU1VNc1QwRkJVME1zVVVGQlVTeHBRa0ZGYWtKRExGRkJRVlZETEhWQ1FVRjFRa2dzVVVGRmNrTXNVMEZCVTBjc2RVSkJRWFZDUXl4SFFVRlBMRTlCUVU5QkxFZEJRVTlCTEVWQlFVbERMRmRCUVdGRUxFVkJRVTBzUTBGQlJVVXNVVUZCVTBZc1IwRkZka1lzU1VGQlNVNHNWVUZCV1N4WlFVTmFVeXhaUVVGVExFVkJRMVJrTEcxQ1FVRm5RaXhGUVVOb1Frd3NhMEpCUVdVc1JVRkRabE1zZDBKQlFYRkNMRVZCUTNKQ1NDeDNRa0ZCY1VJc1JVRkRja0pGTEhOQ1FVRnRRaXhGUVVOdVFrUXNjVUpCUVd0Q0xFVkJRMnhDU0N4dFFrRkJaMElzUlVGRGFFSkVMSFZDUVVGdlFpeEZRVU53UWtRc2NVSkJRV3RDTEVWQlEyeENSQ3h2UWtGQmFVSXNSVUZGY2tJc1IwRkJTV0VzVVVGQlVVa3NVVUZCVXl4RFFVTnVRaXhKUVVGSlJTeHpRa0ZCZDBKRExEQkNRVVUxUWtZc1QwRkJVME1zYzBKQlFYTkNSQ3hQUVVNdlFuSkNMRkZCUVZGUExHTkJRV2RDUVN4alFVRm5RbVVzYzBKQlFYTkNaaXhqUVVNNVJGQXNVVUZCVVVVc1lVRkJaVUVzWVVGQlpXOUNMSE5DUVVGelFuQkNMR0ZCUnpWRVJpeFJRVUZSV1N4VlFVRlpRU3hWUVVGWlV5eFBRVUZUTEVsQlFVMVVMRlZCUXk5RFdpeFJRVUZSVnl4dFFrRkJjVUpCTEcxQ1FVRnhRbFVzVDBGQlV5eDFRa0ZETTBSeVFpeFJRVUZSVVN4dFFrRkJjVUpCTEcxQ1FVRnhRbUVzVDBGQlV5eDFRa0ZETTBSeVFpeFJRVUZSVXl4blFrRkJhMEpCTEdkQ1FVRnJRbGtzVDBGQlV5eHZRa0ZEY2tSeVFpeFJRVUZSVlN4cFFrRkJiVUpCTEdsQ1FVRnRRbGNzVDBGQlV5dzRRa0ZGZGtSeVFpeFJRVUZSVFN4alFVRm5Ra0VzWTBGQlowSmxMRTlCUVZNc2EwSkJRMnBFY2tJc1VVRkJVVXNzYTBKQlFXOUNRU3hyUWtGQmIwSm5RaXhQUVVGVExITkNRVU42UkhKQ0xGRkJRVkZKTEdkQ1FVRnJRa0VzWjBKQlFXdENhVUlzVDBGQlV5eHRRa0ZEY2tSeVFpeFJRVUZSUnl4bFFVRnBRa0VzWlVGQmFVSnJRaXhQUVVGVExEWkNRWGRDY2tRc1UwRkJVMFVzTUVKQmQwSlFMRWxCZGtKQkxFbEJRVWxETEVWQlFWRkRMRk5CUVZORExHTkJRV01zVDBGQlQwWXNUVUZGZEVOSExFVkJRVmtzUTBGRFpFTXNSVUZCUnl4VFFVRlRRU3hGUVVGRlF5eEhRVU5hTEUxQlFVOHNTVUZCVFVFc1JVRkJSVU1zWlVGRmFrSkRMRWxCUVVzc1UwRkJVMEVzU1VGQlNVWXNSMEZEYUVJc1QwRkJUMEVzUlVGQlJVTXNaVUZGV0VVc1QwRkJVU3hUUVVGVFFTeFBRVUZQU0N4SFFVTjBRaXhOUVVGUExGTkJRVmRCTEVkQlJYQkNTU3hIUVVGSkxGTkJRVk5CTEVkQlFVZEtMRWRCUTJRc1RVRkJUeXhMUVVGUFFTeEpRVWxrU3l4RlFVRlZjRU1zVDBGQlQzRkRMRXRCUVV0U0xFZEJSWFJDY0VJc1QwRkJaMElzUlVGRGFFSk1MRTlCUVdVc1JVRkRabTFDTEVWQlFWTXNSMEZGU21Vc1JVRkJTU3hGUVVGSFFTeEZRVUZKUml4RlFVRlJSeXhQUVVGUlJDeEpRVUZMTEVOQlEzWkRMRWxCUVVsRkxFVkJRVk5LTEVWQlFWRkZMRWRCUlhKQ0xFZEJRVWxGTEVWQlFWTXNkVUpCUVhkQ1pDeEZRVUZQTEVOQlF6RkRTQ3hGUVVGVExFbEJRVTFwUWl4RlFVRlBVaXhqUVVOMFFuWkNMRVZCUVdkQ2IwSXNSVUZCVlZjc1IwRkJVU3hwUWtGRGJFTndReXhGUVVGbGVVSXNSVUZCVlZjc1IwRkJVU3huUWtGRGFrTXNUMEZWU2l4UFFVNUxMMElzUjBGQmFVSXNkVUpCUVhkQ2FVSXNTVUZCVDJwQ0xFVkJRV2RDTEd0Q1FVVm9SVXdzUjBGQlowSXNhMEpCUVcxQ2MwSXNTVUZCVDNSQ0xFVkJRV1VzWjBKQlJUbEVjMElzUlVGQlVTeExRVVZFTEVOQlFVVjBRaXhoUVVGalFTeEZRVUZqU3l4alFVRmxRU3hGUVVGbFl5eFBRVUZSUVN4SFFUbEVOMFZ5UWl4UlFVRlJXU3hWUVVGWlFTeFZRVU53UWxvc1VVRkJVVmNzYlVKQlFYRkNRU3h0UWtGRE4wSllMRkZCUVZGVkxHbENRVUZ0UWtFc2FVSkJRek5DVml4UlFVRlJVeXhuUWtGQmEwSkJMR2RDUVVNeFFsUXNVVUZCVVZFc2JVSkJRWEZDUVN4dFFrRkROMEpTTEZGQlFWRlBMR05CUVdkQ1FTeGpRVU40UWxBc1VVRkJVVTBzWTBGQlowSkJMR05CUTNoQ1RpeFJRVUZSU3l4clFrRkJiMEpCTEd0Q1FVTTFRa3dzVVVGQlVVa3NaMEpCUVd0Q1FTeG5Ra0ZETVVKS0xGRkJRVkZITEdWQlFXbENRU3hsUVVONlFrZ3NVVUZCVVVVc1lVRkJaVUVzWVVGRGRrSkdMRkZCUVZGdlFpeFJRVUZWTEVOQlEyaENVaXhWUVVGWFFTeFZRVU5ZTWtJc1NVRkJTMmhETEdOQlEweHBReXhUUVVGVk4wSXNiVUpCUTFZNFFpeFBRVUZSTDBJc2FVSkJRMUpuUXl4TlFVRlBha01zWjBKQlExQnJReXhUUVVGVmJrTWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlpHOXRMV2hsYkhCbGNuTXZkSEpoYm5OcGRHbHZiaTl3Y205d1pYSjBhV1Z6TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxleHBvcnRzLmRlZmF1bHQ9Y2FtZWxpemU7dmFyIHJIeXBoZW49Ly0oLikvZztmdW5jdGlvbiBjYW1lbGl6ZShlKXtyZXR1cm4gZS5yZXBsYWNlKHJIeXBoZW4sZnVuY3Rpb24oZSxyKXtyZXR1cm4gci50b1VwcGVyQ2FzZSgpfSl9bW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1OaGJXVnNhWHBsTG1weklsMHNJbTVoYldWeklqcGJJazlpYW1WamRDSXNJbVJsWm1sdVpWQnliM0JsY25SNUlpd2laWGh3YjNKMGN5SXNJblpoYkhWbElpd2laR1ZtWVhWc2RDSXNJbU5oYldWc2FYcGxJaXdpY2toNWNHaGxiaUlzSW5OMGNtbHVaeUlzSW5KbGNHeGhZMlVpTENKZklpd2lZMmh5SWl3aWRHOVZjSEJsY2tOaGMyVWlMQ0p0YjJSMWJHVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUlVGQkxFOUJRVTlETEdWQlFXVkRMRkZCUVZNc1lVRkJZeXhEUVVNelEwTXNUMEZCVHl4SlFVVlVSQ3hSUVVGUlJTeFJRVUZWUXl4VFFVTnNRaXhKUVVGSlF5eFJRVUZWTEZGQlJXUXNVMEZCVTBRc1UwRkJVMFVzUjBGRGFFSXNUMEZCVDBFc1JVRkJUME1zVVVGQlVVWXNVVUZCVXl4VFFVRlZSeXhGUVVGSFF5eEhRVU14UXl4UFFVRlBRU3hGUVVGSlF5eG5Ra0ZIWmtNc1QwRkJUMVlzVVVGQlZVRXNVVUZCYVVJaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Wkc5dExXaGxiSEJsY25NdmRYUnBiQzlqWVcxbGJHbDZaUzVxY3lKOSIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGV4cG9ydHMuZGVmYXVsdD1jYW1lbGl6ZVN0eWxlTmFtZTt2YXIgX2NhbWVsaXplPXJlcXVpcmUoXCIuL2NhbWVsaXplXCIpLF9jYW1lbGl6ZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2FtZWxpemUpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fXZhciBtc1BhdHRlcm49L14tbXMtLztmdW5jdGlvbiBjYW1lbGl6ZVN0eWxlTmFtZShlKXtyZXR1cm4oMCxfY2FtZWxpemUyLmRlZmF1bHQpKGUucmVwbGFjZShtc1BhdHRlcm4sXCJtcy1cIikpfW1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltTmhiV1ZzYVhwbFUzUjViR1V1YW5NaVhTd2libUZ0WlhNaU9sc2lUMkpxWldOMElpd2laR1ZtYVc1bFVISnZjR1Z5ZEhraUxDSmxlSEJ2Y25Seklpd2lkbUZzZFdVaUxDSmtaV1poZFd4MElpd2lZMkZ0Wld4cGVtVlRkSGxzWlU1aGJXVWlMQ0pmWTJGdFpXeHBlbVVpTENKeVpYRjFhWEpsSWl3aVgyTmhiV1ZzYVhwbE1pSXNJbDlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRaUxDSnZZbW9pTENKZlgyVnpUVzlrZFd4bElpd2liWE5RWVhSMFpYSnVJaXdpYzNSeWFXNW5JaXdpY21Wd2JHRmpaU0lzSW0xdlpIVnNaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRlFVRXNUMEZCVDBNc1pVRkJaVU1zVVVGQlV5eGhRVUZqTEVOQlF6TkRReXhQUVVGUExFbEJSVlJFTEZGQlFWRkZMRkZCUVZWRExHdENRVVZzUWl4SlFVRkpReXhWUVVGWlF5eFJRVUZSTEdOQlJYQkNReXhYUVVGaFF5eDFRa0ZCZFVKSUxGZEJSWGhETEZOQlFWTkhMSFZDUVVGMVFrTXNSMEZCVHl4UFFVRlBRU3hIUVVGUFFTeEZRVUZKUXl4WFFVRmhSQ3hGUVVGTkxFTkJRVVZPTEZGQlFWTk5MRWRCUlhaR0xFbEJRVWxGTEZWQlFWa3NVVUZMYUVJc1UwRkJVMUFzYTBKQlFXdENVU3hIUVVONlFpeFBRVUZQTEVWQlFVbE1MRmRCUVZkS0xGTkJRVk5UTEVWQlFVOURMRkZCUVZGR0xGVkJRVmNzVVVGRk0wUkhMRTlCUVU5aUxGRkJRVlZCTEZGQlFXbENJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyUnZiUzFvWld4d1pYSnpMM1YwYVd3dlkyRnRaV3hwZW1WVGRIbHNaUzVxY3lKOSIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGV4cG9ydHMuZGVmYXVsdD1oeXBoZW5hdGU7dmFyIHJVcHBlcj0vKFtBLVpdKS9nO2Z1bmN0aW9uIGh5cGhlbmF0ZShlKXtyZXR1cm4gZS5yZXBsYWNlKHJVcHBlcixcIi0kMVwiKS50b0xvd2VyQ2FzZSgpfW1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltaDVjR2hsYm1GMFpTNXFjeUpkTENKdVlXMWxjeUk2V3lKUFltcGxZM1FpTENKa1pXWnBibVZRY205d1pYSjBlU0lzSW1WNGNHOXlkSE1pTENKMllXeDFaU0lzSW1SbFptRjFiSFFpTENKb2VYQm9aVzVoZEdVaUxDSnlWWEJ3WlhJaUxDSnpkSEpwYm1jaUxDSnlaWEJzWVdObElpd2lkRzlNYjNkbGNrTmhjMlVpTENKdGIyUjFiR1VpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlJVRkJMRTlCUVU5RExHVkJRV1ZETEZGQlFWTXNZVUZCWXl4RFFVTXpRME1zVDBGQlR5eEpRVVZVUkN4UlFVRlJSU3hSUVVGVlF5eFZRVVZzUWl4SlFVRkpReXhQUVVGVExGZEJSV0lzVTBGQlUwUXNWVUZCVlVVc1IwRkRha0lzVDBGQlQwRXNSVUZCVDBNc1VVRkJVVVlzVDBGQlVTeFBRVUZQUnl4alFVVjJRME1zVDBGQlQxSXNVVUZCVlVFc1VVRkJhVUlpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZaRzl0TFdobGJIQmxjbk12ZFhScGJDOW9lWEJvWlc1aGRHVXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGV4cG9ydHMuZGVmYXVsdD1oeXBoZW5hdGVTdHlsZU5hbWU7dmFyIF9oeXBoZW5hdGU9cmVxdWlyZShcIi4vaHlwaGVuYXRlXCIpLF9oeXBoZW5hdGUyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2h5cGhlbmF0ZSk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19dmFyIG1zUGF0dGVybj0vXm1zLS87ZnVuY3Rpb24gaHlwaGVuYXRlU3R5bGVOYW1lKGUpe3JldHVybigwLF9oeXBoZW5hdGUyLmRlZmF1bHQpKGUpLnJlcGxhY2UobXNQYXR0ZXJuLFwiLW1zLVwiKX1tb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbWg1Y0dobGJtRjBaVk4wZVd4bExtcHpJbDBzSW01aGJXVnpJanBiSWs5aWFtVmpkQ0lzSW1SbFptbHVaVkJ5YjNCbGNuUjVJaXdpWlhod2IzSjBjeUlzSW5aaGJIVmxJaXdpWkdWbVlYVnNkQ0lzSW1oNWNHaGxibUYwWlZOMGVXeGxUbUZ0WlNJc0lsOW9lWEJvWlc1aGRHVWlMQ0p5WlhGMWFYSmxJaXdpWDJoNWNHaGxibUYwWlRJaUxDSmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwSWl3aWIySnFJaXdpWDE5bGMwMXZaSFZzWlNJc0ltMXpVR0YwZEdWeWJpSXNJbk4wY21sdVp5SXNJbkpsY0d4aFkyVWlMQ0p0YjJSMWJHVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUlVGQkxFOUJRVTlETEdWQlFXVkRMRkZCUVZNc1lVRkJZeXhEUVVNelEwTXNUMEZCVHl4SlFVVlVSQ3hSUVVGUlJTeFJRVUZWUXl4dFFrRkZiRUlzU1VGQlNVTXNWMEZCWVVNc1VVRkJVU3hsUVVWeVFrTXNXVUZCWTBNc2RVSkJRWFZDU0N4WlFVVjZReXhUUVVGVFJ5eDFRa0ZCZFVKRExFZEJRVThzVDBGQlQwRXNSMEZCVDBFc1JVRkJTVU1zVjBGQllVUXNSVUZCVFN4RFFVRkZUaXhSUVVGVFRTeEhRVVYyUml4SlFVRkpSU3hWUVVGWkxFOUJUV2hDTEZOQlFWTlFMRzFDUVVGdFFsRXNSMEZETVVJc1QwRkJUeXhGUVVGSlRDeFpRVUZaU2l4VFFVRlRVeXhIUVVGUlF5eFJRVUZSUml4VlFVRlhMRkZCUlRkRVJ5eFBRVUZQWWl4UlFVRlZRU3hSUVVGcFFpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5a2IyMHRhR1ZzY0dWeWN5OTFkR2xzTDJoNWNHaGxibUYwWlZOMGVXeGxMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGV4cG9ydHMuZGVmYXVsdD0hKFwidW5kZWZpbmVkXCI9PXR5cGVvZiB3aW5kb3d8fCF3aW5kb3cuZG9jdW1lbnR8fCF3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1sdVJFOU5MbXB6SWwwc0ltNWhiV1Z6SWpwYklrOWlhbVZqZENJc0ltUmxabWx1WlZCeWIzQmxjblI1SWl3aVpYaHdiM0owY3lJc0luWmhiSFZsSWl3aVpHVm1ZWFZzZENJc0luZHBibVJ2ZHlJc0ltUnZZM1Z0Wlc1MElpd2lZM0psWVhSbFJXeGxiV1Z1ZENJc0ltMXZaSFZzWlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkZRVUVzVDBGQlQwTXNaVUZCWlVNc1VVRkJVeXhoUVVGakxFTkJRek5EUXl4UFFVRlBMRWxCUlZSRUxGRkJRVkZGTEZWQlFTdENMRzlDUVVGWVF5eFRRVUV3UWtFc1QwRkJUME1zVjBGQldVUXNUMEZCVDBNc1UwRkJVME1zWlVGRGVrWkRMRTlCUVU5T0xGRkJRVlZCTEZGQlFXbENJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyUnZiUzFvWld4d1pYSnpMM1YwYVd3dmFXNUVUMDB1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxleHBvcnRzLmRlZmF1bHQ9ZnVuY3Rpb24oZSl7aWYoKCFzaXplJiYwIT09c2l6ZXx8ZSkmJl9pbkRPTTIuZGVmYXVsdCl7dmFyIHQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTt0LnN0eWxlLnBvc2l0aW9uPVwiYWJzb2x1dGVcIix0LnN0eWxlLnRvcD1cIi05OTk5cHhcIix0LnN0eWxlLndpZHRoPVwiNTBweFwiLHQuc3R5bGUuaGVpZ2h0PVwiNTBweFwiLHQuc3R5bGUub3ZlcmZsb3c9XCJzY3JvbGxcIixkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHQpLHNpemU9dC5vZmZzZXRXaWR0aC10LmNsaWVudFdpZHRoLGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodCl9cmV0dXJuIHNpemV9O3ZhciBfaW5ET009cmVxdWlyZShcIi4vaW5ET01cIiksX2luRE9NMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbkRPTSk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19dmFyIHNpemU9dm9pZCAwO21vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluTmpjbTlzYkdKaGNsTnBlbVV1YW5NaVhTd2libUZ0WlhNaU9sc2lUMkpxWldOMElpd2laR1ZtYVc1bFVISnZjR1Z5ZEhraUxDSmxlSEJ2Y25Seklpd2lkbUZzZFdVaUxDSmtaV1poZFd4MElpd2ljbVZqWVd4aklpd2ljMmw2WlNJc0lsOXBia1JQVFRJaUxDSnpZM0p2Ykd4RWFYWWlMQ0prYjJOMWJXVnVkQ0lzSW1OeVpXRjBaVVZzWlcxbGJuUWlMQ0p6ZEhsc1pTSXNJbkJ2YzJsMGFXOXVJaXdpZEc5d0lpd2lkMmxrZEdnaUxDSm9aV2xuYUhRaUxDSnZkbVZ5Wm14dmR5SXNJbUp2WkhraUxDSmhjSEJsYm1SRGFHbHNaQ0lzSW05bVpuTmxkRmRwWkhSb0lpd2lZMnhwWlc1MFYybGtkR2dpTENKeVpXMXZkbVZEYUdsc1pDSXNJbDlwYmtSUFRTSXNJbkpsY1hWcGNtVWlMQ0pmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MElpd2liMkpxSWl3aVgxOWxjMDF2WkhWc1pTSXNJbTF2WkhWc1pTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZGUVVFc1QwRkJUME1zWlVGQlpVTXNVVUZCVXl4aFFVRmpMRU5CUXpORFF5eFBRVUZQTEVsQlIxUkVMRkZCUVZGRkxGRkJRVlVzVTBGQlZVTXNSMEZETVVJc1MwRkJTME1zVFVGQmFVSXNTVUZCVkVFc1RVRkJZMFFzU1VGRGNrSkZMRkZCUVZGSUxGRkJRVk1zUTBGRGJrSXNTVUZCU1Vrc1JVRkJXVU1zVTBGQlUwTXNZMEZCWXl4UFFVVjJRMFlzUlVGQlZVY3NUVUZCVFVNc1UwRkJWeXhYUVVNelFrb3NSVUZCVlVjc1RVRkJUVVVzU1VGQlRTeFZRVU4wUWt3c1JVRkJWVWNzVFVGQlRVY3NUVUZCVVN4UFFVTjRRazRzUlVGQlZVY3NUVUZCVFVrc1QwRkJVeXhQUVVONlFsQXNSVUZCVlVjc1RVRkJUVXNzVTBGQlZ5eFRRVVV6UWxBc1UwRkJVMUVzUzBGQlMwTXNXVUZCV1ZZc1IwRkRNVUpHTEV0QlFVOUZMRVZCUVZWWExGbEJRV05ZTEVWQlFWVlpMRmxCUTNwRFdDeFRRVUZUVVN4TFFVRkxTU3haUVVGWllpeEhRVWs1UWl4UFFVRlBSaXhOUVVkVUxFbEJRVWxuUWl4UFFVRlRReXhSUVVGUkxGZEJSV3BDYUVJc1VVRkJWV2xDTEhWQ1FVRjFRa1lzVVVGRmNrTXNVMEZCVTBVc2RVSkJRWFZDUXl4SFFVRlBMRTlCUVU5QkxFZEJRVTlCTEVWQlFVbERMRmRCUVdGRUxFVkJRVTBzUTBGQlJYSkNMRkZCUVZOeFFpeEhRVVYyUml4SlFVRkpia0lzVlVGQlR5eEZRVVZZY1VJc1QwRkJUM3BDTEZGQlFWVkJMRkZCUVdsQ0lpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJSdmJTMW9aV3h3WlhKekwzVjBhV3d2YzJOeWIyeHNZbUZ5VTJsNlpTNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIGVtcHR5RnVuY3Rpb249cmVxdWlyZShcIi4vZW1wdHlGdW5jdGlvblwiKSxFdmVudExpc3RlbmVyPXtsaXN0ZW46ZnVuY3Rpb24gbGlzdGVuKGUsdCxuKXtyZXR1cm4gZS5hZGRFdmVudExpc3RlbmVyPyhlLmFkZEV2ZW50TGlzdGVuZXIodCxuLCExKSx7cmVtb3ZlOmZ1bmN0aW9uIHJlbW92ZSgpe2UucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LG4sITEpfX0pOmUuYXR0YWNoRXZlbnQ/KGUuYXR0YWNoRXZlbnQoXCJvblwiK3Qsbikse3JlbW92ZTpmdW5jdGlvbiByZW1vdmUoKXtlLmRldGFjaEV2ZW50KFwib25cIit0LG4pfX0pOnZvaWQgMH0sY2FwdHVyZTpmdW5jdGlvbiBjYXB0dXJlKGUsdCxuKXtyZXR1cm4gZS5hZGRFdmVudExpc3RlbmVyPyhlLmFkZEV2ZW50TGlzdGVuZXIodCxuLCEwKSx7cmVtb3ZlOmZ1bmN0aW9uIHJlbW92ZSgpe2UucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LG4sITApfX0pOihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZjb25zb2xlLmVycm9yKFwiQXR0ZW1wdGVkIHRvIGxpc3RlbiB0byBldmVudHMgZHVyaW5nIHRoZSBjYXB0dXJlIHBoYXNlIG9uIGEgYnJvd3NlciB0aGF0IGRvZXMgbm90IHN1cHBvcnQgdGhlIGNhcHR1cmUgcGhhc2UuIFlvdXIgYXBwbGljYXRpb24gd2lsbCBub3QgcmVjZWl2ZSBzb21lIGV2ZW50cy5cIikse3JlbW92ZTplbXB0eUZ1bmN0aW9ufSl9LHJlZ2lzdGVyRGVmYXVsdDpmdW5jdGlvbiByZWdpc3RlckRlZmF1bHQoKXt9fTttb2R1bGUuZXhwb3J0cz1FdmVudExpc3RlbmVyO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtWMlpXNTBUR2x6ZEdWdVpYSXVhbk1pWFN3aWJtRnRaWE1pT2xzaVpXMXdkSGxHZFc1amRHbHZiaUlzSW5KbGNYVnBjbVVpTENKRmRtVnVkRXhwYzNSbGJtVnlJaXdpYkdsemRHVnVJaXdpZEdGeVoyVjBJaXdpWlhabGJuUlVlWEJsSWl3aVkyRnNiR0poWTJzaUxDSmhaR1JGZG1WdWRFeHBjM1JsYm1WeUlpd2ljbVZ0YjNabElpd2ljbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaUlzSW1GMGRHRmphRVYyWlc1MElpd2laR1YwWVdOb1JYWmxiblFpTENKallYQjBkWEpsSWl3aWNISnZZMlZ6Y3lJc0ltVnVkaUlzSWs1UFJFVmZSVTVXSWl3aVkyOXVjMjlzWlNJc0ltVnljbTl5SWl3aWNtVm5hWE4wWlhKRVpXWmhkV3gwSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRlhRU3hKUVVGSlFTeGpRVUZuUWtNc1VVRkJVU3h0UWtGTmVFSkRMR05CUVdkQ0xFTkJVMnhDUXl4UFFVRlJMRk5CUVZOQkxFOUJRVTlETEVWQlFWRkRMRVZCUVZkRExFZEJRM3BETEU5QlFVbEdMRVZCUVU5SExHdENRVU5VU0N4RlFVRlBSeXhwUWtGQmFVSkdMRVZCUVZkRExFZEJRVlVzUjBGRGRFTXNRMEZEVEVVc1QwRkJVU3hUUVVGVFFTeFRRVU5tU2l4RlFVRlBTeXh2UWtGQmIwSktMRVZCUVZkRExFZEJRVlVzVFVGSE0wTkdMRVZCUVU5TkxHRkJRMmhDVGl4RlFVRlBUU3haUVVGWkxFdEJRVTlNTEVWQlFWZERMRWRCUXpsQ0xFTkJRMHhGTEU5QlFWRXNVMEZCVTBFc1UwRkRaa29zUlVGQlQwOHNXVUZCV1N4TFFVRlBUaXhGUVVGWFF5eFhRVXB3UXl4SFFXdENWRTBzVVVGQlV5eFRRVUZUUVN4UlFVRlJVaXhGUVVGUlF5eEZRVUZYUXl4SFFVTXpReXhQUVVGSlJpeEZRVUZQUnl4clFrRkRWRWdzUlVGQlQwY3NhVUpCUVdsQ1JpeEZRVUZYUXl4SFFVRlZMRWRCUTNSRExFTkJRMHhGTEU5QlFWRXNVMEZCVTBFc1UwRkRaa29zUlVGQlQwc3NiMEpCUVc5Q1NpeEZRVUZYUXl4SFFVRlZMRTlCU1haQ0xHVkJRWHBDVHl4UlFVRlJReXhKUVVGSlF5eFZRVU5rUXl4UlFVRlJReXhOUVVGTkxDdEtRVVZVTEVOQlEweFVMRTlCUVZGU0xHbENRVXRrYTBJc1owSkJRV2xDTEZOQlFWTkJMSEZDUVVjMVFrTXNUMEZCVDBNc1VVRkJWV3hDSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMlppYW5NdmJHbGlMMFYyWlc1MFRHbHpkR1Z1WlhJdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIGNhblVzZURPTT0hKFwidW5kZWZpbmVkXCI9PXR5cGVvZiB3aW5kb3d8fCF3aW5kb3cuZG9jdW1lbnR8fCF3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksRXhlY3V0aW9uRW52aXJvbm1lbnQ9e2NhblVzZURPTTpjYW5Vc2VET00sY2FuVXNlV29ya2VyczpcInVuZGVmaW5lZFwiIT10eXBlb2YgV29ya2VyLGNhblVzZUV2ZW50TGlzdGVuZXJzOmNhblVzZURPTSYmISghd2luZG93LmFkZEV2ZW50TGlzdGVuZXImJiF3aW5kb3cuYXR0YWNoRXZlbnQpLGNhblVzZVZpZXdwb3J0OmNhblVzZURPTSYmISF3aW5kb3cuc2NyZWVuLGlzSW5Xb3JrZXI6IWNhblVzZURPTX07bW9kdWxlLmV4cG9ydHM9RXhlY3V0aW9uRW52aXJvbm1lbnQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa1Y0WldOMWRHbHZia1Z1ZG1seWIyNXRaVzUwTG1weklsMHNJbTVoYldWeklqcGJJbU5oYmxWelpVUlBUU0lzSW5kcGJtUnZkeUlzSW1SdlkzVnRaVzUwSWl3aVkzSmxZWFJsUld4bGJXVnVkQ0lzSWtWNFpXTjFkR2x2YmtWdWRtbHliMjV0Wlc1MElpd2lZMkZ1VlhObFYyOXlhMlZ5Y3lJc0lsZHZjbXRsY2lJc0ltTmhibFZ6WlVWMlpXNTBUR2x6ZEdWdVpYSnpJaXdpWVdSa1JYWmxiblJNYVhOMFpXNWxjaUlzSW1GMGRHRmphRVYyWlc1MElpd2lZMkZ1VlhObFZtbGxkM0J2Y25RaUxDSnpZM0psWlc0aUxDSnBjMGx1VjI5eWEyVnlJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJVVUVzWVVGRlFTeEpRVUZKUVN4WlFVRnBReXh2UWtGQldFTXNVMEZCTUVKQkxFOUJRVTlETEZkQlFWbEVMRTlCUVU5RExGTkJRVk5ETEdWQlVXNUdReXh4UWtGQmRVSXNRMEZGZWtKS0xGVkJRVmRCTEZWQlJWaExMR05CUVdsRExHOUNRVUZZUXl4UFFVVjBRa01zY1VKQlFYTkNVQ3hqUVVGblFrTXNUMEZCVDA4c2JVSkJRVzlDVUN4UFFVRlBVU3hoUVVWNFJVTXNaVUZCWjBKV0xHRkJRV1ZETEU5QlFVOVZMRTlCUlhSRFF5eFpRVUZoV2l4WFFVbG1ZU3hQUVVGUFF5eFJRVUZWVmlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTltWW1wekwyeHBZaTlGZUdWamRYUnBiMjVGYm5acGNtOXViV1Z1ZEM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgX2h5cGhlblBhdHRlcm49Ly0oLikvZztmdW5jdGlvbiBjYW1lbGl6ZShlKXtyZXR1cm4gZS5yZXBsYWNlKF9oeXBoZW5QYXR0ZXJuLGZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQudG9VcHBlckNhc2UoKX0pfW1vZHVsZS5leHBvcnRzPWNhbWVsaXplO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1OaGJXVnNhWHBsTG1weklsMHNJbTVoYldWeklqcGJJbDlvZVhCb1pXNVFZWFIwWlhKdUlpd2lZMkZ0Wld4cGVtVWlMQ0p6ZEhKcGJtY2lMQ0p5WlhCc1lXTmxJaXdpWHlJc0ltTm9ZWEpoWTNSbGNpSXNJblJ2VlhCd1pYSkRZWE5sSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRlhRU3hKUVVGSlFTeGxRVUZwUWl4UlFWZHlRaXhUUVVGVFF5eFRRVUZUUXl4SFFVTm9RaXhQUVVGUFFTeEZRVUZQUXl4UlFVRlJTQ3hsUVVGblFpeFRRVUZWU1N4RlFVRkhReXhIUVVOcVJDeFBRVUZQUVN4RlFVRlZReXhuUWtGSmNrSkRMRTlCUVU5RExGRkJRVlZRSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMlppYW5NdmJHbGlMMk5oYldWc2FYcGxMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBjYW1lbGl6ZT1yZXF1aXJlKFwiLi9jYW1lbGl6ZVwiKSxtc1BhdHRlcm49L14tbXMtLztmdW5jdGlvbiBjYW1lbGl6ZVN0eWxlTmFtZShlKXtyZXR1cm4gY2FtZWxpemUoZS5yZXBsYWNlKG1zUGF0dGVybixcIm1zLVwiKSl9bW9kdWxlLmV4cG9ydHM9Y2FtZWxpemVTdHlsZU5hbWU7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbU5oYldWc2FYcGxVM1I1YkdWT1lXMWxMbXB6SWwwc0ltNWhiV1Z6SWpwYkltTmhiV1ZzYVhwbElpd2ljbVZ4ZFdseVpTSXNJbTF6VUdGMGRHVnliaUlzSW1OaGJXVnNhWHBsVTNSNWJHVk9ZVzFsSWl3aWMzUnlhVzVuSWl3aWNtVndiR0ZqWlNJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVZOQkxHRkJSVUVzU1VGQlNVRXNVMEZCVjBNc1VVRkJVU3hqUVVWdVFrTXNWVUZCV1N4UlFXMUNhRUlzVTBGQlUwTXNhMEpCUVd0Q1F5eEhRVU42UWl4UFFVRlBTaXhUUVVGVFNTeEZRVUZQUXl4UlFVRlJTQ3hWUVVGWExGRkJSelZEU1N4UFFVRlBReXhSUVVGVlNpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5bVltcHpMMnhwWWk5allXMWxiR2w2WlZOMGVXeGxUbUZ0WlM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgaXNUZXh0Tm9kZT1yZXF1aXJlKFwiLi9pc1RleHROb2RlXCIpO2Z1bmN0aW9uIGNvbnRhaW5zTm9kZShvLGUpe3JldHVybiEoIW98fCFlKSYmKG89PT1lfHwhaXNUZXh0Tm9kZShvKSYmKGlzVGV4dE5vZGUoZSk/Y29udGFpbnNOb2RlKG8sZS5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBvP28uY29udGFpbnMoZSk6ISFvLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uJiYhISgxNiZvLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGUpKSkpfW1vZHVsZS5leHBvcnRzPWNvbnRhaW5zTm9kZTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltTnZiblJoYVc1elRtOWtaUzVxY3lKZExDSnVZVzFsY3lJNld5SnBjMVJsZUhST2IyUmxJaXdpY21WeGRXbHlaU0lzSW1OdmJuUmhhVzV6VG05a1pTSXNJbTkxZEdWeVRtOWtaU0lzSW1sdWJtVnlUbTlrWlNJc0luQmhjbVZ1ZEU1dlpHVWlMQ0pqYjI1MFlXbHVjeUlzSW1OdmJYQmhjbVZFYjJOMWJXVnVkRkJ2YzJsMGFXOXVJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGWFFTeEpRVUZKUVN4WFFVRmhReXhSUVVGUkxHZENRVTk2UWl4VFFVRlRReXhoUVVGaFF5eEZRVUZYUXl4SFFVTXZRaXhUUVVGTFJDeEpRVUZqUXl4TFFVVlNSQ3hKUVVGalF5eEpRVVZrU2l4WFFVRlhSeXhMUVVWWVNDeFhRVUZYU1N4SFFVTmlSaXhoUVVGaFF5eEZRVUZYUXl4RlFVRlZReXhaUVVOb1F5eGhRVUZqUml4RlFVTm9Ra0VzUlVGQlZVY3NVMEZCVTBZc1MwRkRha0pFTEVWQlFWVkpMRFJDUVVOelF5eEhRVUV2UTBvc1JVRkJWVWtzZDBKQlFYZENTQ3hOUVUxb1JFa3NUMEZCVDBNc1VVRkJWVkFpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZabUpxY3k5c2FXSXZZMjl1ZEdGcGJuTk9iMlJsTG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgaW52YXJpYW50PXJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtmdW5jdGlvbiB0b0FycmF5KHIpe3ZhciBlPXIubGVuZ3RoO2lmKChBcnJheS5pc0FycmF5KHIpfHxcIm9iamVjdFwiIT10eXBlb2YgciYmXCJmdW5jdGlvblwiIT10eXBlb2YgcikmJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcInRvQXJyYXk6IEFycmF5LWxpa2Ugb2JqZWN0IGV4cGVjdGVkXCIpOmludmFyaWFudCghMSkpLFwibnVtYmVyXCIhPXR5cGVvZiBlJiYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoITEsXCJ0b0FycmF5OiBPYmplY3QgbmVlZHMgYSBsZW5ndGggcHJvcGVydHlcIik6aW52YXJpYW50KCExKSksMD09PWV8fGUtMSBpbiByfHwoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoITEsXCJ0b0FycmF5OiBPYmplY3Qgc2hvdWxkIGhhdmUga2V5cyBmb3IgaW5kaWNlc1wiKTppbnZhcmlhbnQoITEpKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiByLmNhbGxlZSYmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwidG9BcnJheTogT2JqZWN0IGNhbid0IGJlIGBhcmd1bWVudHNgLiBVc2UgcmVzdCBwYXJhbXMgKGZ1bmN0aW9uKC4uLmFyZ3MpIHt9KSBvciBBcnJheS5mcm9tKCkgaW5zdGVhZC5cIik6aW52YXJpYW50KCExKSksci5oYXNPd25Qcm9wZXJ0eSl0cnl7cmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHIpfWNhdGNoKHIpe31mb3IodmFyIHQ9QXJyYXkoZSksbj0wO248ZTtuKyspdFtuXT1yW25dO3JldHVybiB0fWZ1bmN0aW9uIGhhc0FycmF5TmF0dXJlKHIpe3JldHVybiEhciYmKFwib2JqZWN0XCI9PXR5cGVvZiByfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiByKSYmXCJsZW5ndGhcImluIHImJiEoXCJzZXRJbnRlcnZhbFwiaW4gcikmJlwibnVtYmVyXCIhPXR5cGVvZiByLm5vZGVUeXBlJiYoQXJyYXkuaXNBcnJheShyKXx8XCJjYWxsZWVcImluIHJ8fFwiaXRlbVwiaW4gcil9ZnVuY3Rpb24gY3JlYXRlQXJyYXlGcm9tTWl4ZWQocil7cmV0dXJuIGhhc0FycmF5TmF0dXJlKHIpP0FycmF5LmlzQXJyYXkocik/ci5zbGljZSgpOnRvQXJyYXkocik6W3JdfW1vZHVsZS5leHBvcnRzPWNyZWF0ZUFycmF5RnJvbU1peGVkO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1OeVpXRjBaVUZ5Y21GNVJuSnZiVTFwZUdWa0xtcHpJbDBzSW01aGJXVnpJanBiSW1sdWRtRnlhV0Z1ZENJc0luSmxjWFZwY21VaUxDSjBiMEZ5Y21GNUlpd2liMkpxSWl3aWJHVnVaM1JvSWl3aVFYSnlZWGtpTENKcGMwRnljbUY1SWl3aWNISnZZMlZ6Y3lJc0ltVnVkaUlzSWs1UFJFVmZSVTVXSWl3aVkyRnNiR1ZsSWl3aWFHRnpUM2R1VUhKdmNHVnlkSGtpTENKd2NtOTBiM1I1Y0dVaUxDSnpiR2xqWlNJc0ltTmhiR3dpTENKbElpd2ljbVYwSWl3aWFXa2lMQ0pvWVhOQmNuSmhlVTVoZEhWeVpTSXNJbTV2WkdWVWVYQmxJaXdpWTNKbFlYUmxRWEp5WVhsR2NtOXRUV2w0WldRaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25SeklsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVmRCTEVsQlFVbEJMRlZCUVZsRExGRkJRVkVzWlVGWGVFSXNVMEZCVTBNc1VVRkJVVU1zUjBGRFppeEpRVUZKUXl4RlFVRlRSQ3hGUVVGSlF5eFBRV1ZxUWl4SlFWaEhReXhOUVVGTlF5eFJRVUZSU0N4SlFVRjNRaXhwUWtGQlVrRXNSMEZCYlVNc2JVSkJRVkpCTEV0QlFXZEVMR1ZCUVhwQ1NTeFJRVUZSUXl4SlFVRkpReXhUUVVFMFFsUXNWMEZCVlN4RlFVRlBMSFZEUVVGNVEwRXNWMEZCVlN4SlFVVXpTeXhwUWtGQldFa3NTVUZCWjBRc1pVRkJla0pITEZGQlFWRkRMRWxCUVVsRExGTkJRVFJDVkN4WFFVRlZMRVZCUVU4c01rTkJRVFpEUVN4WFFVRlZMRWxCUlc1SkxFbEJRVmhKTEVkQlFXZENRU3hGUVVGVExFdEJRVXRFTEVsQlFXZERMR1ZCUVhwQ1NTeFJRVUZSUXl4SlFVRkpReXhUUVVFMFFsUXNWMEZCVlN4RlFVRlBMR2RFUVVGclJFRXNWMEZCVlN4SlFVVndTU3h0UWtGQlprY3NSVUZCU1U4c1UwRkJhMFFzWlVGQmVrSklMRkZCUVZGRExFbEJRVWxETEZOQlFUUkNWQ3hYUVVGVkxFVkJRVThzZVVkQlFXbElRU3hYUVVGVkxFbEJTM1JPUnl4RlFVRkpVU3hsUVVOT0xFbEJRMFVzVDBGQlQwNHNUVUZCVFU4c1ZVRkJWVU1zVFVGQlRVTXNTMEZCUzFnc1IwRkRiRU1zVFVGQlQxa3NTVUZSV0N4SlFVUkJMRWxCUVVsRExFVkJRVTFZTEUxQlFVMUVMRWRCUTFCaExFVkJRVXNzUlVGQlIwRXNSVUZCUzJJc1JVRkJVV0VzU1VGRE5VSkVMRVZCUVVsRExFZEJRVTFrTEVWQlFVbGpMRWRCUldoQ0xFOUJRVTlFTEVWQmEwSlVMRk5CUVZORkxHVkJRV1ZtTEVkQlEzUkNMRkZCUlVsQkxFbEJSVmtzYVVKQlFWQkJMRWRCUVdsRExHMUNRVUZRUVN4SlFVVnFReXhYUVVGWlFTeExRVVZXTEdkQ1FVRnBRa0VzU1VGSFNTeHBRa0ZCYUVKQkxFVkJRVWxuUWl4WFFVVllaQ3hOUVVGTlF5eFJRVUZSU0N4SlFVVmtMRmRCUVZsQkxFZEJSVm9zVTBGQlZVRXNSMEY1UW1Rc1UwRkJVMmxDTEhGQ1FVRnhRbXBDTEVkQlF6VkNMRTlCUVV0bExHVkJRV1ZtTEVkQlJWUkZMRTFCUVUxRExGRkJRVkZJTEVkQlEyaENRU3hGUVVGSlZTeFJRVVZLV0N4UlFVRlJReXhIUVVwU0xFTkJRVU5CTEVkQlVWcHJRaXhQUVVGUFF5eFJRVUZWUmlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTltWW1wekwyeHBZaTlqY21WaGRHVkJjbkpoZVVaeWIyMU5hWGhsWkM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQ9cmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIiksY3JlYXRlQXJyYXlGcm9tTWl4ZWQ9cmVxdWlyZShcIi4vY3JlYXRlQXJyYXlGcm9tTWl4ZWRcIiksZ2V0TWFya3VwV3JhcD1yZXF1aXJlKFwiLi9nZXRNYXJrdXBXcmFwXCIpLGludmFyaWFudD1yZXF1aXJlKFwiLi9pbnZhcmlhbnRcIiksZHVtbXlOb2RlPUV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTT9kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpOm51bGwsbm9kZU5hbWVQYXR0ZXJuPS9eXFxzKjwoXFx3KykvO2Z1bmN0aW9uIGdldE5vZGVOYW1lKGUpe3ZhciByPWUubWF0Y2gobm9kZU5hbWVQYXR0ZXJuKTtyZXR1cm4gciYmclsxXS50b0xvd2VyQ2FzZSgpfWZ1bmN0aW9uIGNyZWF0ZU5vZGVzRnJvbU1hcmt1cChlLHIpe3ZhciBhPWR1bW15Tm9kZTtkdW1teU5vZGV8fChcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcImNyZWF0ZU5vZGVzRnJvbU1hcmt1cCBkdW1teSBub3QgaW5pdGlhbGl6ZWRcIik6aW52YXJpYW50KCExKSk7dmFyIHQ9Z2V0Tm9kZU5hbWUoZSksbj10JiZnZXRNYXJrdXBXcmFwKHQpO2lmKG4pe2EuaW5uZXJIVE1MPW5bMV0rZStuWzJdO2Zvcih2YXIgaT1uWzBdO2ktLTspYT1hLmxhc3RDaGlsZH1lbHNlIGEuaW5uZXJIVE1MPWU7dmFyIG89YS5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtvLmxlbmd0aCYmKHJ8fChcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcImNyZWF0ZU5vZGVzRnJvbU1hcmt1cCguLi4pOiBVbmV4cGVjdGVkIDxzY3JpcHQ+IGVsZW1lbnQgcmVuZGVyZWQuXCIpOmludmFyaWFudCghMSkpLGNyZWF0ZUFycmF5RnJvbU1peGVkKG8pLmZvckVhY2gocikpO2Zvcih2YXIgZD1BcnJheS5mcm9tKGEuY2hpbGROb2Rlcyk7YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5sYXN0Q2hpbGQpO3JldHVybiBkfW1vZHVsZS5leHBvcnRzPWNyZWF0ZU5vZGVzRnJvbU1hcmt1cDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltTnlaV0YwWlU1dlpHVnpSbkp2YlUxaGNtdDFjQzVxY3lKZExDSnVZVzFsY3lJNld5SkZlR1ZqZFhScGIyNUZiblpwY205dWJXVnVkQ0lzSW5KbGNYVnBjbVVpTENKamNtVmhkR1ZCY25KaGVVWnliMjFOYVhobFpDSXNJbWRsZEUxaGNtdDFjRmR5WVhBaUxDSnBiblpoY21saGJuUWlMQ0prZFcxdGVVNXZaR1VpTENKallXNVZjMlZFVDAwaUxDSmtiMk4xYldWdWRDSXNJbU55WldGMFpVVnNaVzFsYm5RaUxDSnViMlJsVG1GdFpWQmhkSFJsY200aUxDSm5aWFJPYjJSbFRtRnRaU0lzSW0xaGNtdDFjQ0lzSW01dlpHVk9ZVzFsVFdGMFkyZ2lMQ0p0WVhSamFDSXNJblJ2VEc5M1pYSkRZWE5sSWl3aVkzSmxZWFJsVG05a1pYTkdjbTl0VFdGeWEzVndJaXdpYUdGdVpHeGxVMk55YVhCMElpd2libTlrWlNJc0luQnliMk5sYzNNaUxDSmxibllpTENKT1QwUkZYMFZPVmlJc0ltNXZaR1ZPWVcxbElpd2lkM0poY0NJc0ltbHVibVZ5U0ZSTlRDSXNJbmR5WVhCRVpYQjBhQ0lzSW14aGMzUkRhR2xzWkNJc0luTmpjbWx3ZEhNaUxDSm5aWFJGYkdWdFpXNTBjMEo1VkdGblRtRnRaU0lzSW14bGJtZDBhQ0lzSW1admNrVmhZMmdpTENKdWIyUmxjeUlzSWtGeWNtRjVJaXdpWm5KdmJTSXNJbU5vYVd4a1RtOWtaWE1pTENKeVpXMXZkbVZEYUdsc1pDSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCWVVFc1NVRkJTVUVzY1VKQlFYVkNReXhSUVVGUkxEQkNRVVV2UWtNc2NVSkJRWFZDUkN4UlFVRlJMREJDUVVNdlFrVXNZMEZCWjBKR0xGRkJRVkVzYlVKQlEzaENSeXhWUVVGWlNDeFJRVUZSTEdWQlMzQkNTU3hWUVVGWlRDeHhRa0ZCY1VKTkxGVkJRVmxETEZOQlFWTkRMR05CUVdNc1QwRkJVeXhMUVVzM1JVTXNaMEpCUVd0Q0xHRkJVWFJDTEZOQlFWTkRMRmxCUVZsRExFZEJRMjVDTEVsQlFVbERMRVZCUVdkQ1JDeEZRVUZQUlN4TlFVRk5TaXhwUWtGRGFrTXNUMEZCVDBjc1IwRkJhVUpCTEVWQlFXTXNSMEZCUjBVc1kwRmhNME1zVTBGQlUwTXNjMEpCUVhOQ1NpeEZRVUZSU3l4SFFVTnlReXhKUVVGSlF5eEZRVUZQV2l4VlFVTlNRU3haUVVGeFF5eGxRVUY2UW1Fc1VVRkJVVU1zU1VGQlNVTXNVMEZCTkVKb1FpeFhRVUZWTEVWQlFVOHNLME5CUVdsRVFTeFhRVUZWTEVsQlEyNUpMRWxCUVVscFFpeEZRVUZYV0N4WlFVRlpReXhIUVVWMlFsY3NSVUZCVDBRc1IwRkJXV3hDTEdOQlFXTnJRaXhIUVVOeVF5eEhRVUZKUXl4RlFVRk5MRU5CUTFKTUxFVkJRVXROTEZWQlFWbEVMRVZCUVVzc1IwRkJTMWdzUlVGQlUxY3NSVUZCU3l4SFFVZDZReXhKUVVSQkxFbEJRVWxGTEVWQlFWbEdMRVZCUVVzc1IwRkRaRVVzUzBGRFRGQXNSVUZCVDBFc1JVRkJTMUVzWlVGSFpGSXNSVUZCUzAwc1ZVRkJXVm9zUlVGSGJrSXNTVUZCU1dVc1JVRkJWVlFzUlVGQlMxVXNjVUpCUVhGQ0xGVkJRM0JEUkN4RlFVRlJSU3hUUVVOVVdpeEpRVUYzUXl4bFFVRjZRa1VzVVVGQlVVTXNTVUZCU1VNc1UwRkJORUpvUWl4WFFVRlZMRVZCUVU4c2NVVkJRWFZGUVN4WFFVRlZMRWxCUXpGS1JpeHhRa0ZCY1VKM1FpeEhRVUZUUnl4UlFVRlJZaXhKUVVsNFF5eEpRVVJCTEVsQlFVbGpMRVZCUVZGRExFMUJRVTFETEV0QlFVdG1MRVZCUVV0blFpeFpRVU55UW1oQ0xFVkJRVXRSTEZkQlExWlNMRVZCUVV0cFFpeFpRVUZaYWtJc1JVRkJTMUVzVjBGRmVFSXNUMEZCVDBzc1JVRkhWRXNzVDBGQlQwTXNVVUZCVlhKQ0lpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDJaaWFuTXZiR2xpTDJOeVpXRjBaVTV2WkdWelJuSnZiVTFoY210MWNDNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbWFrZUVtcHR5RnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHR9fXZhciBlbXB0eUZ1bmN0aW9uPWZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKXt9O2VtcHR5RnVuY3Rpb24udGhhdFJldHVybnM9bWFrZUVtcHR5RnVuY3Rpb24sZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlPW1ha2VFbXB0eUZ1bmN0aW9uKCExKSxlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZT1tYWtlRW1wdHlGdW5jdGlvbighMCksZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGw9bWFrZUVtcHR5RnVuY3Rpb24obnVsbCksZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RoaXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30sZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0FyZ3VtZW50PWZ1bmN0aW9uKHQpe3JldHVybiB0fSxtb2R1bGUuZXhwb3J0cz1lbXB0eUZ1bmN0aW9uO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1WdGNIUjVSblZ1WTNScGIyNHVhbk1pWFN3aWJtRnRaWE1pT2xzaWJXRnJaVVZ0Y0hSNVJuVnVZM1JwYjI0aUxDSmhjbWNpTENKbGJYQjBlVVoxYm1OMGFXOXVJaXdpZEdoaGRGSmxkSFZ5Ym5NaUxDSjBhR0YwVW1WMGRYSnVjMFpoYkhObElpd2lkR2hoZEZKbGRIVnlibk5VY25WbElpd2lkR2hoZEZKbGRIVnlibk5PZFd4c0lpd2lkR2hoZEZKbGRIVnlibk5VYUdseklpd2lkR2hwY3lJc0luUm9ZWFJTWlhSMWNtNXpRWEpuZFcxbGJuUWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVZkQkxGTkJRVk5CTEd0Q1FVRnJRa01zUjBGRGVrSXNUMEZCVHl4WFFVTk1MRTlCUVU5QkxFZEJVMWdzU1VGQlNVTXNZMEZCWjBJc1UwRkJVMEVzYTBKQlJUZENRU3hqUVVGalF5eFpRVUZqU0N4clFrRkROVUpGTEdOQlFXTkZMR2xDUVVGdFFrb3NiVUpCUVd0Q0xFZEJRMjVFUlN4alFVRmpSeXhuUWtGQmEwSk1MRzFDUVVGclFpeEhRVU5zUkVVc1kwRkJZMGtzWjBKQlFXdENUaXhyUWtGQmEwSXNUVUZEYkVSRkxHTkJRV05MTEdkQ1FVRnJRaXhYUVVNNVFpeFBRVUZQUXl4TlFVVlVUaXhqUVVGalR5eHZRa0ZCYzBJc1UwRkJWVklzUjBGRE5VTXNUMEZCVDBFc1IwRkhWRk1zVDBGQlQwTXNVVUZCVlZRaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Wm1KcWN5OXNhV0l2Wlcxd2RIbEdkVzVqZEdsdmJpNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIGVtcHR5T2JqZWN0PXt9O1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJk9iamVjdC5mcmVlemUoZW1wdHlPYmplY3QpLG1vZHVsZS5leHBvcnRzPWVtcHR5T2JqZWN0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1WdGNIUjVUMkpxWldOMExtcHpJbDBzSW01aGJXVnpJanBiSW1WdGNIUjVUMkpxWldOMElpd2ljSEp2WTJWemN5SXNJbVZ1ZGlJc0lrNVBSRVZmUlU1V0lpd2lUMkpxWldOMElpd2labkpsWlhwbElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlVVRXNZVUZGUVN4SlFVRkpRU3haUVVGakxFZEJSVmNzWlVGQmVrSkRMRkZCUVZGRExFbEJRVWxETEZWQlEyUkRMRTlCUVU5RExFOUJRVTlNTEdGQlIyaENUU3hQUVVGUFF5eFJRVUZWVUNJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTltWW1wekwyeHBZaTlsYlhCMGVVOWlhbVZqZEM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBmb2N1c05vZGUobyl7dHJ5e28uZm9jdXMoKX1jYXRjaChvKXt9fW1vZHVsZS5leHBvcnRzPWZvY3VzTm9kZTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltWnZZM1Z6VG05a1pTNXFjeUpkTENKdVlXMWxjeUk2V3lKbWIyTjFjMDV2WkdVaUxDSnViMlJsSWl3aVptOWpkWE1pTENKbElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlVVRXNZVUZOUVN4VFFVRlRRU3hWUVVGVlF5eEhRVWxxUWl4SlFVTkZRU3hGUVVGTFF5eFJRVU5NTEUxQlFVOURMRXRCUjFoRExFOUJRVTlETEZGQlFWVk1JaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyWmlhbk12YkdsaUwyWnZZM1Z6VG05a1pTNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gZ2V0QWN0aXZlRWxlbWVudChlKXtpZih2b2lkIDA9PT0oZT1lfHwoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCkpKXJldHVybiBudWxsO3RyeXtyZXR1cm4gZS5hY3RpdmVFbGVtZW50fHxlLmJvZHl9Y2F0Y2godCl7cmV0dXJuIGUuYm9keX19bW9kdWxlLmV4cG9ydHM9Z2V0QWN0aXZlRWxlbWVudDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltZGxkRUZqZEdsMlpVVnNaVzFsYm5RdWFuTWlYU3dpYm1GdFpYTWlPbHNpWjJWMFFXTjBhWFpsUld4bGJXVnVkQ0lzSW1Sdll5SXNJbVJ2WTNWdFpXNTBJaXdpZFc1a1pXWnBibVZrSWl3aVlXTjBhWFpsUld4bGJXVnVkQ0lzSW1KdlpIa2lMQ0psSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRjFRa0VzVTBGQlUwRXNhVUpCUVdsQ1F5eEhRVVY0UWl4UlFVRnRRaXhMUVVSdVFrRXNSVUZCVFVFc1NVRkJORUlzYjBKQlFXSkRMRk5CUVRKQ1FTeGpRVUZYUXl4SlFVVjZSQ3hQUVVGUExFdEJSVlFzU1VGRFJTeFBRVUZQUml4RlFVRkpSeXhsUVVGcFFrZ3NSVUZCU1Vrc1MwRkRhRU1zVFVGQlQwTXNSMEZEVUN4UFFVRlBUQ3hGUVVGSlNTeE5RVWxtUlN4UFFVRlBReXhSUVVGVlVpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5bVltcHpMMnhwWWk5blpYUkJZM1JwZG1WRmJHVnRaVzUwTG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQ9cmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIiksaW52YXJpYW50PXJlcXVpcmUoXCIuL2ludmFyaWFudFwiKSxkdW1teU5vZGU9RXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NP2RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik6bnVsbCxzaG91bGRXcmFwPXt9LHNlbGVjdFdyYXA9WzEsJzxzZWxlY3QgbXVsdGlwbGU9XCJ0cnVlXCI+JyxcIjwvc2VsZWN0PlwiXSx0YWJsZVdyYXA9WzEsXCI8dGFibGU+XCIsXCI8L3RhYmxlPlwiXSx0cldyYXA9WzMsXCI8dGFibGU+PHRib2R5Pjx0cj5cIixcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiXSxzdmdXcmFwPVsxLCc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj4nLFwiPC9zdmc+XCJdLG1hcmt1cFdyYXA9e1wiKlwiOlsxLFwiPzxkaXY+XCIsXCI8L2Rpdj5cIl0sYXJlYTpbMSxcIjxtYXA+XCIsXCI8L21hcD5cIl0sY29sOlsyLFwiPHRhYmxlPjx0Ym9keT48L3Rib2R5Pjxjb2xncm91cD5cIixcIjwvY29sZ3JvdXA+PC90YWJsZT5cIl0sbGVnZW5kOlsxLFwiPGZpZWxkc2V0PlwiLFwiPC9maWVsZHNldD5cIl0scGFyYW06WzEsXCI8b2JqZWN0PlwiLFwiPC9vYmplY3Q+XCJdLHRyOlsyLFwiPHRhYmxlPjx0Ym9keT5cIixcIjwvdGJvZHk+PC90YWJsZT5cIl0sb3B0Z3JvdXA6c2VsZWN0V3JhcCxvcHRpb246c2VsZWN0V3JhcCxjYXB0aW9uOnRhYmxlV3JhcCxjb2xncm91cDp0YWJsZVdyYXAsdGJvZHk6dGFibGVXcmFwLHRmb290OnRhYmxlV3JhcCx0aGVhZDp0YWJsZVdyYXAsdGQ6dHJXcmFwLHRoOnRyV3JhcH0sc3ZnRWxlbWVudHM9W1wiY2lyY2xlXCIsXCJjbGlwUGF0aFwiLFwiZGVmc1wiLFwiZWxsaXBzZVwiLFwiZ1wiLFwiaW1hZ2VcIixcImxpbmVcIixcImxpbmVhckdyYWRpZW50XCIsXCJtYXNrXCIsXCJwYXRoXCIsXCJwYXR0ZXJuXCIsXCJwb2x5Z29uXCIsXCJwb2x5bGluZVwiLFwicmFkaWFsR3JhZGllbnRcIixcInJlY3RcIixcInN0b3BcIixcInRleHRcIixcInRzcGFuXCJdO2Z1bmN0aW9uIGdldE1hcmt1cFdyYXAodCl7cmV0dXJuIGR1bW15Tm9kZXx8KFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwiTWFya3VwIHdyYXBwaW5nIG5vZGUgbm90IGluaXRpYWxpemVkXCIpOmludmFyaWFudCghMSkpLG1hcmt1cFdyYXAuaGFzT3duUHJvcGVydHkodCl8fCh0PVwiKlwiKSxzaG91bGRXcmFwLmhhc093blByb3BlcnR5KHQpfHwoZHVtbXlOb2RlLmlubmVySFRNTD1cIipcIj09PXQ/XCI8bGluayAvPlwiOlwiPFwiK3QrXCI+PC9cIit0K1wiPlwiLHNob3VsZFdyYXBbdF09IWR1bW15Tm9kZS5maXJzdENoaWxkKSxzaG91bGRXcmFwW3RdP21hcmt1cFdyYXBbdF06bnVsbH1zdmdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uKHQpe21hcmt1cFdyYXBbdF09c3ZnV3JhcCxzaG91bGRXcmFwW3RdPSEwfSksbW9kdWxlLmV4cG9ydHM9Z2V0TWFya3VwV3JhcDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltZGxkRTFoY210MWNGZHlZWEF1YW5NaVhTd2libUZ0WlhNaU9sc2lSWGhsWTNWMGFXOXVSVzUyYVhKdmJtMWxiblFpTENKeVpYRjFhWEpsSWl3aWFXNTJZWEpwWVc1MElpd2laSFZ0YlhsT2IyUmxJaXdpWTJGdVZYTmxSRTlOSWl3aVpHOWpkVzFsYm5RaUxDSmpjbVZoZEdWRmJHVnRaVzUwSWl3aWMyaHZkV3hrVjNKaGNDSXNJbk5sYkdWamRGZHlZWEFpTENKMFlXSnNaVmR5WVhBaUxDSjBjbGR5WVhBaUxDSnpkbWRYY21Gd0lpd2liV0Z5YTNWd1YzSmhjQ0lzSWlvaUxDSmhjbVZoSWl3aVkyOXNJaXdpYkdWblpXNWtJaXdpY0dGeVlXMGlMQ0owY2lJc0ltOXdkR2R5YjNWd0lpd2liM0IwYVc5dUlpd2lZMkZ3ZEdsdmJpSXNJbU52YkdkeWIzVndJaXdpZEdKdlpIa2lMQ0owWm05dmRDSXNJblJvWldGa0lpd2lkR1FpTENKMGFDSXNJbk4yWjBWc1pXMWxiblJ6SWl3aVoyVjBUV0Z5YTNWd1YzSmhjQ0lzSW01dlpHVk9ZVzFsSWl3aWNISnZZMlZ6Y3lJc0ltVnVkaUlzSWs1UFJFVmZSVTVXSWl3aWFHRnpUM2R1VUhKdmNHVnlkSGtpTENKcGJtNWxja2hVVFV3aUxDSm1hWEp6ZEVOb2FXeGtJaXdpWm05eVJXRmphQ0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQldVRXNTVUZCU1VFc2NVSkJRWFZDUXl4UlFVRlJMREJDUVVVdlFrTXNWVUZCV1VRc1VVRkJVU3hsUVV0d1FrVXNWVUZCV1Vnc2NVSkJRWEZDU1N4VlFVRlpReXhUUVVGVFF5eGpRVUZqTEU5QlFWTXNTMEZUTjBWRExGZEJRV0VzUjBGRllrTXNWMEZCWVN4RFFVRkRMRVZCUVVjc01rSkJRVFJDTEdGQlF6ZERReXhWUVVGWkxFTkJRVU1zUlVGQlJ5eFZRVUZYTEZsQlF6TkNReXhQUVVGVExFTkJRVU1zUlVGQlJ5eHhRa0ZCYzBJc2VVSkJSVzVEUXl4UlFVRlZMRU5CUVVNc1JVRkJSeXd5UTBGQk5FTXNWVUZGTVVSRExGZEJRV0VzUTBGRFprTXNTVUZCU3l4RFFVRkRMRVZCUVVjc1UwRkJWU3hWUVVWdVFrTXNTMEZCVVN4RFFVRkRMRVZCUVVjc1VVRkJVeXhWUVVOeVFrTXNTVUZCVHl4RFFVRkRMRVZCUVVjc2JVTkJRVzlETEhWQ1FVTXZRME1zVDBGQlZTeERRVUZETEVWQlFVY3NZVUZCWXl4bFFVTTFRa01zVFVGQlV5eERRVUZETEVWQlFVY3NWMEZCV1N4aFFVTjZRa01zUjBGQlRTeERRVUZETEVWQlFVY3NhVUpCUVd0Q0xHOUNRVVUxUWtNc1UwRkJXVmdzVjBGRFdsa3NUMEZCVlZvc1YwRkZWbUVzVVVGQlYxb3NWVUZEV0dFc1UwRkJXV0lzVlVGRFdtTXNUVUZCVTJRc1ZVRkRWR1VzVFVGQlUyWXNWVUZEVkdkQ0xFMUJRVk5vUWl4VlFVVlVhVUlzUjBGQlRXaENMRTlCUTA1cFFpeEhRVUZOYWtJc1VVRk5TbXRDTEZsQlFXTXNRMEZCUXl4VFFVRlZMRmRCUVZrc1QwRkJVU3hWUVVGWExFbEJRVXNzVVVGQlV5eFBRVUZSTEdsQ1FVRnJRaXhQUVVGUkxFOUJRVkVzVlVGQlZ5eFZRVUZYTEZkQlFWa3NhVUpCUVd0Q0xFOUJRVkVzVDBGQlVTeFBRVUZSTEZOQlkyaE5MRk5CUVZORExHTkJRV05ETEVkQllYSkNMRTlCV2tjelFpeFpRVUZ4UXl4bFFVRjZRalJDTEZGQlFWRkRMRWxCUVVsRExGTkJRVFJDTDBJc1YwRkJWU3hGUVVGUExIZERRVUV3UTBFc1YwRkJWU3hKUVVOMlNGVXNWMEZCVjNOQ0xHVkJRV1ZLTEV0QlF6ZENRU3hGUVVGWExFdEJSVkoyUWl4WFFVRlhNa0lzWlVGQlpVb3NTMEZGTTBJelFpeFZRVUZWWjBNc1ZVRkVTeXhOUVVGaVRDeEZRVU52UWl4WFFVVkJMRWxCUVUxQkxFVkJRVmNzVFVGQlVVRXNSVUZCVnl4SlFVVTFSSFpDTEZkQlFWZDFRaXhKUVVGaE0wSXNWVUZCVldsRExGbEJSVGRDTjBJc1YwRkJWM1ZDTEVkQlFWbHNRaXhYUVVGWGEwSXNSMEZCV1N4TFFURkNka1JHTEZsQlFWbFRMRkZCUVZFc1UwRkJWVkFzUjBGRE5VSnNRaXhYUVVGWGEwSXNSMEZCV1c1Q0xGRkJRM1pDU2l4WFFVRlhkVUlzU1VGQldTeEpRVEpDZWtKUkxFOUJRVTlETEZGQlFWVldJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyWmlhbk12YkdsaUwyZGxkRTFoY210MWNGZHlZWEF1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbihvKXtyZXR1cm4gby5XaW5kb3cmJm8gaW5zdGFuY2VvZiBvLldpbmRvdz97eDpvLnBhZ2VYT2Zmc2V0fHxvLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0LHk6by5wYWdlWU9mZnNldHx8by5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wfTp7eDpvLnNjcm9sbExlZnQseTpvLnNjcm9sbFRvcH19bW9kdWxlLmV4cG9ydHM9Z2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb247XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbWRsZEZWdVltOTFibVJsWkZOamNtOXNiRkJ2YzJsMGFXOXVMbXB6SWwwc0ltNWhiV1Z6SWpwYkltZGxkRlZ1WW05MWJtUmxaRk5qY205c2JGQnZjMmwwYVc5dUlpd2ljMk55YjJ4c1lXSnNaU0lzSWxkcGJtUnZkeUlzSW5naUxDSndZV2RsV0U5bVpuTmxkQ0lzSW1SdlkzVnRaVzUwSWl3aVpHOWpkVzFsYm5SRmJHVnRaVzUwSWl3aWMyTnliMnhzVEdWbWRDSXNJbmtpTENKd1lXZGxXVTltWm5ObGRDSXNJbk5qY205c2JGUnZjQ0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVk5CTEdGQllVRXNVMEZCVTBFc01rSkJRVEpDUXl4SFFVTnNReXhQUVVGSlFTeEZRVUZYUXl4UlFVRlZSQ3hoUVVGelFrRXNSVUZCVjBNc1QwRkRha1FzUTBGRFRFTXNSVUZCUjBZc1JVRkJWMGNzWVVGQlpVZ3NSVUZCVjBrc1UwRkJVME1zWjBKQlFXZENReXhYUVVOcVJVTXNSVUZCUjFBc1JVRkJWMUVzWVVGQlpWSXNSVUZCVjBrc1UwRkJVME1zWjBKQlFXZENTU3hYUVVjNVJDeERRVU5NVUN4RlFVRkhSaXhGUVVGWFRTeFhRVU5rUXl4RlFVRkhVQ3hGUVVGWFV5eFhRVWxzUWtNc1QwRkJUME1zVVVGQlZWb2lMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlptSnFjeTlzYVdJdloyVjBWVzVpYjNWdVpHVmtVMk55YjJ4c1VHOXphWFJwYjI0dWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF91cHBlcmNhc2VQYXR0ZXJuPS8oW0EtWl0pL2c7ZnVuY3Rpb24gaHlwaGVuYXRlKGUpe3JldHVybiBlLnJlcGxhY2UoX3VwcGVyY2FzZVBhdHRlcm4sXCItJDFcIikudG9Mb3dlckNhc2UoKX1tb2R1bGUuZXhwb3J0cz1oeXBoZW5hdGU7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbWg1Y0dobGJtRjBaUzVxY3lKZExDSnVZVzFsY3lJNld5SmZkWEJ3WlhKallYTmxVR0YwZEdWeWJpSXNJbWg1Y0dobGJtRjBaU0lzSW5OMGNtbHVaeUlzSW5KbGNHeGhZMlVpTENKMGIweHZkMlZ5UTJGelpTSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCVjBFc1NVRkJTVUVzYTBKQlFXOUNMRmRCWTNoQ0xGTkJRVk5ETEZWQlFWVkRMRWRCUTJwQ0xFOUJRVTlCTEVWQlFVOURMRkZCUVZGSUxHdENRVUZ0UWl4UFFVRlBTU3hqUVVkc1JFTXNUMEZCVDBNc1VVRkJWVXdpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZabUpxY3k5c2FXSXZhSGx3YUdWdVlYUmxMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBoeXBoZW5hdGU9cmVxdWlyZShcIi4vaHlwaGVuYXRlXCIpLG1zUGF0dGVybj0vXm1zLS87ZnVuY3Rpb24gaHlwaGVuYXRlU3R5bGVOYW1lKGUpe3JldHVybiBoeXBoZW5hdGUoZSkucmVwbGFjZShtc1BhdHRlcm4sXCItbXMtXCIpfW1vZHVsZS5leHBvcnRzPWh5cGhlbmF0ZVN0eWxlTmFtZTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltaDVjR2hsYm1GMFpWTjBlV3hsVG1GdFpTNXFjeUpkTENKdVlXMWxjeUk2V3lKb2VYQm9aVzVoZEdVaUxDSnlaWEYxYVhKbElpd2liWE5RWVhSMFpYSnVJaXdpYUhsd2FHVnVZWFJsVTNSNWJHVk9ZVzFsSWl3aWMzUnlhVzVuSWl3aWNtVndiR0ZqWlNJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVZOQkxHRkJSVUVzU1VGQlNVRXNWVUZCV1VNc1VVRkJVU3hsUVVWd1FrTXNWVUZCV1N4UFFXdENhRUlzVTBGQlUwTXNiVUpCUVcxQ1F5eEhRVU14UWl4UFFVRlBTaXhWUVVGVlNTeEhRVUZSUXl4UlFVRlJTQ3hWUVVGWExGRkJSemxEU1N4UFFVRlBReXhSUVVGVlNpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5bVltcHpMMnhwWWk5b2VYQm9aVzVoZEdWVGRIbHNaVTVoYldVdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIHZhbGlkYXRlRm9ybWF0PWZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KHIpe307ZnVuY3Rpb24gaW52YXJpYW50KHIsZSxhLG4saSxvLHQsdil7aWYodmFsaWRhdGVGb3JtYXQoZSksIXIpe3ZhciBkO2lmKHZvaWQgMD09PWUpZD1uZXcgRXJyb3IoXCJNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwiKTtlbHNle3ZhciBzPVthLG4saSxvLHQsdl0sbD0wOyhkPW5ldyBFcnJvcihlLnJlcGxhY2UoLyVzL2csZnVuY3Rpb24oKXtyZXR1cm4gc1tsKytdfSkpKS5uYW1lPVwiSW52YXJpYW50IFZpb2xhdGlvblwifXRocm93IGQuZnJhbWVzVG9Qb3A9MSxkfX1cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYodmFsaWRhdGVGb3JtYXQ9ZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQocil7aWYodm9pZCAwPT09cil0aHJvdyBuZXcgRXJyb3IoXCJpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudFwiKX0pLG1vZHVsZS5leHBvcnRzPWludmFyaWFudDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltbHVkbUZ5YVdGdWRDNXFjeUpkTENKdVlXMWxjeUk2V3lKMllXeHBaR0YwWlVadmNtMWhkQ0lzSW1admNtMWhkQ0lzSW1sdWRtRnlhV0Z1ZENJc0ltTnZibVJwZEdsdmJpSXNJbUVpTENKaUlpd2lZeUlzSW1RaUxDSmxJaXdpWmlJc0ltVnljbTl5SWl3aWRXNWtaV1pwYm1Wa0lpd2lSWEp5YjNJaUxDSmhjbWR6SWl3aVlYSm5TVzVrWlhnaUxDSnlaWEJzWVdObElpd2libUZ0WlNJc0ltWnlZVzFsYzFSdlVHOXdJaXdpY0hKdlkyVnpjeUlzSW1WdWRpSXNJazVQUkVWZlJVNVdJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJVVUVzWVVGaFFTeEpRVUZKUVN4bFFVRnBRaXhUUVVGVFFTeGxRVUZsUXl4TFFWVTNReXhUUVVGVFF5eFZRVUZWUXl4RlFVRlhSaXhGUVVGUlJ5eEZRVUZIUXl4RlFVRkhReXhGUVVGSFF5eEZRVUZIUXl4RlFVRkhReXhIUVVkdVJDeEhRVVpCVkN4bFFVRmxReXhKUVVWV1JTeEZRVUZYTEVOQlEyUXNTVUZCU1U4c1JVRkRTaXhSUVVGbFF5eEpRVUZZVml4RlFVTkdVeXhGUVVGUkxFbEJRVWxGTEUxQlFVMHNjVWxCUTJJc1EwRkRUQ3hKUVVGSlF5eEZRVUZQTEVOQlFVTlVMRVZCUVVkRExFVkJRVWRETEVWQlFVZERMRVZCUVVkRExFVkJRVWRETEVkQlEzWkNTeXhGUVVGWExFZEJRMlpLTEVWQlFWRXNTVUZCU1VVc1RVRkJUVmdzUlVGQlQyTXNVVUZCVVN4TlFVRlBMRmRCUTNSRExFOUJRVTlHTEVWQlFVdERMRk5CUlZKRkxFdEJRVThzYzBKQlNXWXNUVUZFUVU0c1JVRkJUVThzV1VGQll5eEZRVU5rVUN4SFFYcENiVUlzWlVGQmVrSlJMRkZCUVZGRExFbEJRVWxETEZkQlEyUndRaXhsUVVGcFFpeFRRVUZUUVN4bFFVRmxReXhIUVVOMlF5eFJRVUZsVlN4SlFVRllWaXhGUVVOR0xFMUJRVTBzU1VGQlNWY3NUVUZCVFN4clJFRXdRblJDVXl4UFFVRlBReXhSUVVGVmNFSWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdlptSnFjeTlzYVdJdmFXNTJZWEpwWVc1MExtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaXNOb2RlKGUpe3ZhciBvPShlP2Uub3duZXJEb2N1bWVudHx8ZTpkb2N1bWVudCkuZGVmYXVsdFZpZXd8fHdpbmRvdztyZXR1cm4hKCFlfHwhKFwiZnVuY3Rpb25cIj09dHlwZW9mIG8uTm9kZT9lIGluc3RhbmNlb2Ygby5Ob2RlOlwib2JqZWN0XCI9PXR5cGVvZiBlJiZcIm51bWJlclwiPT10eXBlb2YgZS5ub2RlVHlwZSYmXCJzdHJpbmdcIj09dHlwZW9mIGUubm9kZU5hbWUpKX1tb2R1bGUuZXhwb3J0cz1pc05vZGU7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbWx6VG05a1pTNXFjeUpkTENKdVlXMWxjeUk2V3lKcGMwNXZaR1VpTENKdlltcGxZM1FpTENKa1pXWmhkV3gwVm1sbGR5SXNJbTkzYm1WeVJHOWpkVzFsYm5RaUxDSmtiMk4xYldWdWRDSXNJbmRwYm1SdmR5SXNJazV2WkdVaUxDSnViMlJsVkhsd1pTSXNJbTV2WkdWT1lXMWxJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGbFFTeFRRVUZUUVN4UFFVRlBReXhIUVVOa0xFbEJRMGxETEVkQlJFMUVMRVZCUVZOQkxFVkJRVTlGTEdWQlFXbENSaXhGUVVGVFJ5eFZRVU01UWtZc1lVRkJaVWNzVDBGRGNrTXNVMEZCVlVvc1MwRkJkVU1zYlVKQlFYSkNReXhGUVVGWlNTeExRVUZ6UWt3c1lVRkJhMEpETEVWQlFWbEpMRXRCUVhsQ0xHbENRVUZZVEN4SFFVRnJSQ3hwUWtGQmNFSkJMRVZCUVU5TkxGVkJRVzlFTEdsQ1FVRndRazRzUlVGQlQwOHNWMEZIZUV4RExFOUJRVTlETEZGQlFWVldJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyWmlhbk12YkdsaUwybHpUbTlrWlM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgaXNOb2RlPXJlcXVpcmUoXCIuL2lzTm9kZVwiKTtmdW5jdGlvbiBpc1RleHROb2RlKGUpe3JldHVybiBpc05vZGUoZSkmJjM9PWUubm9kZVR5cGV9bW9kdWxlLmV4cG9ydHM9aXNUZXh0Tm9kZTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltbHpWR1Y0ZEU1dlpHVXVhbk1pWFN3aWJtRnRaWE1pT2xzaWFYTk9iMlJsSWl3aWNtVnhkV2x5WlNJc0ltbHpWR1Y0ZEU1dlpHVWlMQ0p2WW1wbFkzUWlMQ0p1YjJSbFZIbHdaU0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlYwRXNTVUZCU1VFc1QwRkJVME1zVVVGQlVTeFpRVTF5UWl4VFFVRlRReXhYUVVGWFF5eEhRVU5zUWl4UFFVRlBTQ3hQUVVGUFJ5eEpRVUU0UWl4SFFVRnVRa0VzUlVGQlQwTXNVMEZIYkVORExFOUJRVTlETEZGQlFWVktJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyWmlhbk12YkdsaUwybHpWR1Y0ZEU1dlpHVXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO2Z1bmN0aW9uIG1lbW9pemVTdHJpbmdPbmx5KG4pe3ZhciByPXt9O3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gci5oYXNPd25Qcm9wZXJ0eSh0KXx8KHJbdF09bi5jYWxsKHRoaXMsdCkpLHJbdF19fW1vZHVsZS5leHBvcnRzPW1lbW9pemVTdHJpbmdPbmx5O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW0xbGJXOXBlbVZUZEhKcGJtZFBibXg1TG1weklsMHNJbTVoYldWeklqcGJJbTFsYlc5cGVtVlRkSEpwYm1kUGJteDVJaXdpWTJGc2JHSmhZMnNpTENKallXTm9aU0lzSW5OMGNtbHVaeUlzSW1oaGMwOTNibEJ5YjNCbGNuUjVJaXdpWTJGc2JDSXNJblJvYVhNaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25SeklsMHNJbTFoY0hCcGJtZHpJam9pUVVGVlFTeGhRVTFCTEZOQlFWTkJMR3RDUVVGclFrTXNSMEZEZWtJc1NVRkJTVU1zUlVGQlVTeEhRVU5hTEU5QlFVOHNVMEZCVlVNc1IwRkpaaXhQUVVoTFJDeEZRVUZOUlN4bFFVRmxSQ3hMUVVONFFrUXNSVUZCVFVNc1IwRkJWVVlzUlVGQlUwa3NTMEZCUzBNc1MwRkJUVWdzU1VGRkwwSkVMRVZCUVUxRExFbEJTV3BDU1N4UFFVRlBReXhSUVVGVlVpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5bVltcHpMMnhwWWk5dFpXMXZhWHBsVTNSeWFXNW5UMjVzZVM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgcGVyZm9ybWFuY2UsRXhlY3V0aW9uRW52aXJvbm1lbnQ9cmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7RXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NJiYocGVyZm9ybWFuY2U9d2luZG93LnBlcmZvcm1hbmNlfHx3aW5kb3cubXNQZXJmb3JtYW5jZXx8d2luZG93LndlYmtpdFBlcmZvcm1hbmNlKSxtb2R1bGUuZXhwb3J0cz1wZXJmb3JtYW5jZXx8e307XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbkJsY21admNtMWhibU5sTG1weklsMHNJbTVoYldWeklqcGJJbkJsY21admNtMWhibU5sSWl3aVJYaGxZM1YwYVc5dVJXNTJhWEp2Ym0xbGJuUWlMQ0p5WlhGMWFYSmxJaXdpWTJGdVZYTmxSRTlOSWl3aWQybHVaRzkzSWl3aWJYTlFaWEptYjNKdFlXNWpaU0lzSW5kbFltdHBkRkJsY21admNtMWhibU5sSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCVTBFc1lVRkZRU3hKUVVWSlFTeFpRVVpCUXl4eFFrRkJkVUpETEZGQlFWRXNNRUpCU1M5Q1JDeHhRa0ZCY1VKRkxGbEJRM1pDU0N4WlFVRmpTU3hQUVVGUFNpeGhRVUZsU1N4UFFVRlBReXhsUVVGcFFrUXNUMEZCVDBVc2JVSkJSM0pGUXl4UFFVRlBReXhSUVVGVlVpeGhRVUZsSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMMlppYW5NdmJHbGlMM0JsY21admNtMWhibU5sTG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgcGVyZm9ybWFuY2VOb3cscGVyZm9ybWFuY2U9cmVxdWlyZShcIi4vcGVyZm9ybWFuY2VcIik7cGVyZm9ybWFuY2VOb3c9cGVyZm9ybWFuY2Uubm93P2Z1bmN0aW9uIHBlcmZvcm1hbmNlTm93KCl7cmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpfTpmdW5jdGlvbiBwZXJmb3JtYW5jZU5vdygpe3JldHVybiBEYXRlLm5vdygpfSxtb2R1bGUuZXhwb3J0cz1wZXJmb3JtYW5jZU5vdztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluQmxjbVp2Y20xaGJtTmxUbTkzTG1weklsMHNJbTVoYldWeklqcGJJbkJsY21admNtMWhibU5sVG05M0lpd2ljR1Z5Wm05eWJXRnVZMlVpTENKeVpYRjFhWEpsSWl3aWJtOTNJaXdpUkdGMFpTSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCVjBFc1NVRkZTVUVzWlVGR1FVTXNXVUZCWTBNc1VVRkJVU3hwUWtGVmVFSkdMR1ZCUkVWRExGbEJRVmxGTEVsQlEwY3NVMEZCVTBnc2FVSkJRM2hDTEU5QlFVOURMRmxCUVZsRkxFOUJSMG9zVTBGQlUwZ3NhVUpCUTNoQ0xFOUJRVTlKTEV0QlFVdEVMRTlCU1doQ1JTeFBRVUZQUXl4UlFVRlZUaUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OW1ZbXB6TDJ4cFlpOXdaWEptYjNKdFlXNWpaVTV2ZHk1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgaGFzT3duUHJvcGVydHk9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtmdW5jdGlvbiBpcyh0LGUpe3JldHVybiB0PT09ZT8wIT09dHx8MCE9PWV8fDEvdD09MS9lOnQhPXQmJmUhPWV9ZnVuY3Rpb24gc2hhbGxvd0VxdWFsKHQsZSl7aWYoaXModCxlKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT10eXBlb2YgdHx8bnVsbD09PXR8fFwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm4hMTt2YXIgcj1PYmplY3Qua2V5cyh0KSxuPU9iamVjdC5rZXlzKGUpO2lmKHIubGVuZ3RoIT09bi5sZW5ndGgpcmV0dXJuITE7Zm9yKHZhciBsPTA7bDxyLmxlbmd0aDtsKyspaWYoIWhhc093blByb3BlcnR5LmNhbGwoZSxyW2xdKXx8IWlzKHRbcltsXV0sZVtyW2xdXSkpcmV0dXJuITE7cmV0dXJuITB9bW9kdWxlLmV4cG9ydHM9c2hhbGxvd0VxdWFsO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5Ob1lXeHNiM2RGY1hWaGJDNXFjeUpkTENKdVlXMWxjeUk2V3lKb1lYTlBkMjVRY205d1pYSjBlU0lzSWs5aWFtVmpkQ0lzSW5CeWIzUnZkSGx3WlNJc0ltbHpJaXdpZUNJc0lua2lMQ0p6YUdGc2JHOTNSWEYxWVd3aUxDSnZZbXBCSWl3aWIySnFRaUlzSW10bGVYTkJJaXdpYTJWNWN5SXNJbXRsZVhOQ0lpd2liR1Z1WjNSb0lpd2lhU0lzSW1OaGJHd2lMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRlpRU3hoUVVWQkxFbEJRVWxCTEdWQlFXbENReXhQUVVGUFF5eFZRVUZWUml4bFFVMTBReXhUUVVGVFJ5eEhRVUZIUXl4RlFVRkhReXhIUVVWaUxFOUJRVWxFTEVsQlFVMURMRVZCU1Vzc1NVRkJUa1FzUjBGQmFVSXNTVUZCVGtNc1IwRkJWeXhGUVVGSlJDeEhRVUZOTEVWQlFVbERMRVZCUjNCRFJDeEhRVUZOUVN4SFFVRkxReXhIUVVGTlFTeEZRVk0xUWl4VFFVRlRReXhoUVVGaFF5eEZRVUZOUXl4SFFVTXhRaXhIUVVGSlRDeEhRVUZIU1N4RlFVRk5ReXhIUVVOWUxFOUJRVThzUlVGSFZDeEhRVUZ2UWl4cFFrRkJWRVFzUjBGQk9FSXNUMEZCVkVFc1IwRkJhVU1zYVVKQlFWUkRMRWRCUVRoQ0xFOUJRVlJCTEVWQlF6TkZMRTlCUVU4c1JVRkhWQ3hKUVVGSlF5eEZRVUZSVWl4UFFVRlBVeXhMUVVGTFNDeEhRVU53UWtrc1JVRkJVVllzVDBGQlQxTXNTMEZCUzBZc1IwRkZlRUlzUjBGQlNVTXNSVUZCVFVjc1UwRkJWMFFzUlVGQlRVTXNUMEZEZWtJc1QwRkJUeXhGUVVsVUxFbEJRVXNzU1VGQlNVTXNSVUZCU1N4RlFVRkhRU3hGUVVGSlNpeEZRVUZOUnl4UFFVRlJReXhKUVVOb1F5eEpRVUZMWWl4bFFVRmxZeXhMUVVGTFRpeEZRVUZOUXl4RlFVRk5TU3hOUVVGUlZpeEhRVUZIU1N4RlFVRkxSU3hGUVVGTlNTeEpRVUZMVEN4RlFVRkxReXhGUVVGTlNTeExRVU42UlN4UFFVRlBMRVZCU1Znc1QwRkJUeXhGUVVkVVJTeFBRVUZQUXl4UlFVRlZWaUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OW1ZbXB6TDJ4cFlpOXphR0ZzYkc5M1JYRjFZV3d1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgZW1wdHlGdW5jdGlvbj1yZXF1aXJlKFwiLi9lbXB0eUZ1bmN0aW9uXCIpLHdhcm5pbmc9ZW1wdHlGdW5jdGlvbjtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXt2YXIgcHJpbnRXYXJuaW5nPWZ1bmN0aW9uIHByaW50V2FybmluZyhuKXtmb3IodmFyIHI9YXJndW1lbnRzLmxlbmd0aCxpPUFycmF5KHI+MT9yLTE6MCksZT0xO2U8cjtlKyspaVtlLTFdPWFyZ3VtZW50c1tlXTt2YXIgbz0wLHQ9XCJXYXJuaW5nOiBcIituLnJlcGxhY2UoLyVzL2csZnVuY3Rpb24oKXtyZXR1cm4gaVtvKytdfSk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGNvbnNvbGUmJmNvbnNvbGUuZXJyb3IodCk7dHJ5e3Rocm93IG5ldyBFcnJvcih0KX1jYXRjaChuKXt9fTt3YXJuaW5nPWZ1bmN0aW9uIHdhcm5pbmcobixyKXtpZih2b2lkIDA9PT1yKXRocm93IG5ldyBFcnJvcihcImB3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nIG1lc3NhZ2UgYXJndW1lbnRcIik7aWYoMCE9PXIuaW5kZXhPZihcIkZhaWxlZCBDb21wb3NpdGUgcHJvcFR5cGU6IFwiKSYmIW4pe2Zvcih2YXIgaT1hcmd1bWVudHMubGVuZ3RoLGU9QXJyYXkoaT4yP2ktMjowKSxvPTI7bzxpO28rKyllW28tMl09YXJndW1lbnRzW29dO3ByaW50V2FybmluZy5hcHBseSh2b2lkIDAsW3JdLmNvbmNhdChlKSl9fX1tb2R1bGUuZXhwb3J0cz13YXJuaW5nO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kaGNtNXBibWN1YW5NaVhTd2libUZ0WlhNaU9sc2laVzF3ZEhsR2RXNWpkR2x2YmlJc0luSmxjWFZwY21VaUxDSjNZWEp1YVc1bklpd2ljSEp2WTJWemN5SXNJbVZ1ZGlJc0lrNVBSRVZmUlU1V0lpd2ljSEpwYm5SWFlYSnVhVzVuSWl3aVptOXliV0YwSWl3aVgyeGxiaUlzSW1GeVozVnRaVzUwY3lJc0lteGxibWQwYUNJc0ltRnlaM01pTENKQmNuSmhlU0lzSWw5clpYa2lMQ0poY21kSmJtUmxlQ0lzSW0xbGMzTmhaMlVpTENKeVpYQnNZV05sSWl3aVkyOXVjMjlzWlNJc0ltVnljbTl5SWl3aVJYSnliM0lpTENKNElpd2lZMjl1WkdsMGFXOXVJaXdpZFc1a1pXWnBibVZrSWl3aWFXNWtaWGhQWmlJc0lsOXNaVzR5SWl3aVgydGxlVElpTENKaGNIQnNlU0lzSW1OdmJtTmhkQ0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVkZCTEdGQlJVRXNTVUZCU1VFc1kwRkJaMEpETEZGQlFWRXNiVUpCVTNoQ1F5eFJRVUZWUml4alFVVmtMRWRCUVRaQ0xHVkJRWHBDUnl4UlFVRlJReXhKUVVGSlF5eFRRVUV5UWl4RFFVTjZReXhKUVVGSlF5eGhRVUZsTEZOQlFWTkJMR0ZCUVdGRExFZEJRM1pETEVsQlFVc3NTVUZCU1VNc1JVRkJUME1zVlVGQlZVTXNUMEZCVVVNc1JVRkJUME1zVFVGQlRVb3NSVUZCVHl4RlFVRkpRU3hGUVVGUExFVkJRVWtzUjBGQlNVc3NSVUZCVHl4RlFVRkhRU3hGUVVGUFRDeEZRVUZOU3l4SlFVTTVSa1lzUlVGQlMwVXNSVUZCVHl4SFFVRkxTaXhWUVVGVlNTeEhRVWMzUWl4SlFVRkpReXhGUVVGWExFVkJRMWhETEVWQlFWVXNXVUZCWTFJc1JVRkJUMU1zVVVGQlVTeE5RVUZQTEZkQlEyaEVMRTlCUVU5TUxFVkJRVXRITEU5QlJWTXNiMEpCUVZwSExGTkJRMVJCTEZGQlFWRkRMRTFCUVUxSUxFZEJSV2hDTEVsQlNVVXNUVUZCVFN4SlFVRkpTU3hOUVVGTlNpeEhRVU5vUWl4TlFVRlBTeXhOUVVkWWJFSXNVVUZCVlN4VFFVRlRRU3hSUVVGUmJVSXNSVUZCVjJRc1IwRkRjRU1zVVVGQlpXVXNTVUZCV0dZc1JVRkRSaXhOUVVGTkxFbEJRVWxaTEUxQlFVMHNOa1ZCUjJ4Q0xFZEJRWE5FTEVsQlFXeEVXaXhGUVVGUFowSXNVVUZCVVN4cFEwRkpaRVlzUlVGQlZ5eERRVU5rTEVsQlFVc3NTVUZCU1Vjc1JVRkJVV1lzVlVGQlZVTXNUMEZCVVVNc1JVRkJUME1zVFVGQlRWa3NSVUZCVVN4RlFVRkpRU3hGUVVGUkxFVkJRVWtzUjBGQlNVTXNSVUZCVVN4RlFVRkhRU3hGUVVGUlJDeEZRVUZQUXl4SlFVTndSMlFzUlVGQlMyTXNSVUZCVVN4SFFVRkxhRUlzVlVGQlZXZENMRWRCUnpsQ2JrSXNZVUZCWVc5Q0xGZEJRVTFLTEVWQlFWY3NRMEZCUTJZc1IwRkJVVzlDTEU5QlFVOW9RaXhOUVV0d1JHbENMRTlCUVU5RExGRkJRVlV6UWlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTltWW1wekwyeHBZaTkzWVhKdWFXNW5MbXB6SW4wPSIsIiFmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP3QoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKHQpOnQoKX0oMCxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO1widW5kZWZpbmVkXCIhPXR5cGVvZiBkb2N1bWVudCYmZnVuY3Rpb24gb25ET01SZWFkeShlKXt2YXIgdDtmdW5jdGlvbiBsb2FkKCl7dHx8KHQ9ITAsZSgpKX1bXCJpbnRlcmFjdGl2ZVwiLFwiY29tcGxldGVcIl0uaW5kZXhPZihkb2N1bWVudC5yZWFkeVN0YXRlKT49MD9lKCk6KHQ9ITEsZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIixsb2FkLCExKSx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIixsb2FkLCExKSl9KGZ1bmN0aW9uIGluaXQoKXt2YXIgZT0hMCx0PSExLG49bnVsbCxvPXt0ZXh0OiEwLHNlYXJjaDohMCx1cmw6ITAsdGVsOiEwLGVtYWlsOiEwLHBhc3N3b3JkOiEwLG51bWJlcjohMCxkYXRlOiEwLG1vbnRoOiEwLHdlZWs6ITAsdGltZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITB9O2Z1bmN0aW9uIGlzVmFsaWRGb2N1c1RhcmdldChlKXtyZXR1cm4hIShlJiZlIT09ZG9jdW1lbnQmJlwiSFRNTFwiIT09ZS5ub2RlTmFtZSYmXCJCT0RZXCIhPT1lLm5vZGVOYW1lJiZcImNsYXNzTGlzdFwiaW4gZSYmXCJjb250YWluc1wiaW4gZS5jbGFzc0xpc3QpfWZ1bmN0aW9uIGFkZEZvY3VzVmlzaWJsZUNsYXNzKGUpe2UuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZm9jdXMtdmlzaWJsZVwiKXx8KGUuY2xhc3NMaXN0LmFkZChcImZvY3VzLXZpc2libGVcIiksZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLWZvY3VzLXZpc2libGUtYWRkZWRcIixcIlwiKSl9ZnVuY3Rpb24gb25Qb2ludGVyRG93bih0KXtlPSExfWZ1bmN0aW9uIGFkZEluaXRpYWxQb2ludGVyTW92ZUxpc3RlbmVycygpe2RvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIixvbkluaXRpYWxQb2ludGVyTW92ZSksZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLG9uSW5pdGlhbFBvaW50ZXJNb3ZlKSxkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLG9uSW5pdGlhbFBvaW50ZXJNb3ZlKSxkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcm1vdmVcIixvbkluaXRpYWxQb2ludGVyTW92ZSksZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJkb3duXCIsb25Jbml0aWFsUG9pbnRlck1vdmUpLGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVydXBcIixvbkluaXRpYWxQb2ludGVyTW92ZSksZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLG9uSW5pdGlhbFBvaW50ZXJNb3ZlKSxkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLG9uSW5pdGlhbFBvaW50ZXJNb3ZlKSxkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIixvbkluaXRpYWxQb2ludGVyTW92ZSl9ZnVuY3Rpb24gb25Jbml0aWFsUG9pbnRlck1vdmUodCl7XCJodG1sXCIhPT10LnRhcmdldC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpJiYoZT0hMSxmdW5jdGlvbiByZW1vdmVJbml0aWFsUG9pbnRlck1vdmVMaXN0ZW5lcnMoKXtkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsb25Jbml0aWFsUG9pbnRlck1vdmUpLGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIixvbkluaXRpYWxQb2ludGVyTW92ZSksZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIixvbkluaXRpYWxQb2ludGVyTW92ZSksZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJtb3ZlXCIsb25Jbml0aWFsUG9pbnRlck1vdmUpLGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb2ludGVyZG93blwiLG9uSW5pdGlhbFBvaW50ZXJNb3ZlKSxkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcnVwXCIsb25Jbml0aWFsUG9pbnRlck1vdmUpLGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIixvbkluaXRpYWxQb2ludGVyTW92ZSksZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIixvbkluaXRpYWxQb2ludGVyTW92ZSksZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsb25Jbml0aWFsUG9pbnRlck1vdmUpfSgpKX1kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLGZ1bmN0aW9uIG9uS2V5RG93bih0KXtpc1ZhbGlkRm9jdXNUYXJnZXQoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkmJmFkZEZvY3VzVmlzaWJsZUNsYXNzKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpLGU9ITB9LCEwKSxkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsb25Qb2ludGVyRG93biwhMCksZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJkb3duXCIsb25Qb2ludGVyRG93biwhMCksZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIixvblBvaW50ZXJEb3duLCEwKSxkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIixmdW5jdGlvbiBvbkZvY3VzKHQpe2lzVmFsaWRGb2N1c1RhcmdldCh0LnRhcmdldCkmJihlfHxmdW5jdGlvbiBmb2N1c1RyaWdnZXJzS2V5Ym9hcmRNb2RhbGl0eShlKXt2YXIgdD1lLnR5cGUsbj1lLnRhZ05hbWU7cmV0dXJuIShcIklOUFVUXCIhPW58fCFvW3RdfHxlLnJlYWRPbmx5KXx8XCJURVhUQVJFQVwiPT1uJiYhZS5yZWFkT25seXx8ISFlLmlzQ29udGVudEVkaXRhYmxlfSh0LnRhcmdldCkpJiZhZGRGb2N1c1Zpc2libGVDbGFzcyh0LnRhcmdldCl9LCEwKSxkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLGZ1bmN0aW9uIG9uQmx1cihlKXtpc1ZhbGlkRm9jdXNUYXJnZXQoZS50YXJnZXQpJiYoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZm9jdXMtdmlzaWJsZVwiKXx8ZS50YXJnZXQuaGFzQXR0cmlidXRlKFwiZGF0YS1mb2N1cy12aXNpYmxlLWFkZGVkXCIpKSYmKHQ9ITAsd2luZG93LmNsZWFyVGltZW91dChuKSxuPXdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dD0hMSx3aW5kb3cuY2xlYXJUaW1lb3V0KG4pfSwxMDApLGZ1bmN0aW9uIHJlbW92ZUZvY3VzVmlzaWJsZUNsYXNzKGUpe2UuaGFzQXR0cmlidXRlKFwiZGF0YS1mb2N1cy12aXNpYmxlLWFkZGVkXCIpJiYoZS5jbGFzc0xpc3QucmVtb3ZlKFwiZm9jdXMtdmlzaWJsZVwiKSxlLnJlbW92ZUF0dHJpYnV0ZShcImRhdGEtZm9jdXMtdmlzaWJsZS1hZGRlZFwiKSl9KGUudGFyZ2V0KSl9LCEwKSxkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLGZ1bmN0aW9uIG9uVmlzaWJpbGl0eUNoYW5nZShuKXtcImhpZGRlblwiPT1kb2N1bWVudC52aXNpYmlsaXR5U3RhdGUmJih0JiYoZT0hMCksYWRkSW5pdGlhbFBvaW50ZXJNb3ZlTGlzdGVuZXJzKCkpfSwhMCksYWRkSW5pdGlhbFBvaW50ZXJNb3ZlTGlzdGVuZXJzKCksZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKFwianMtZm9jdXMtdmlzaWJsZVwiKX0pfSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVp2WTNWekxYWnBjMmxpYkdVdWFuTWlYU3dpYm1GdFpYTWlPbHNpWjJ4dlltRnNJaXdpWm1GamRHOXllU0lzSW1WNGNHOXlkSE1pTENKdGIyUjFiR1VpTENKa1pXWnBibVVpTENKaGJXUWlMQ0owYUdseklpd2laRzlqZFcxbGJuUWlMQ0p2YmtSUFRWSmxZV1I1SWl3aVkyRnNiR0poWTJzaUxDSnNiMkZrWldRaUxDSnNiMkZrSWl3aWFXNWtaWGhQWmlJc0luSmxZV1I1VTNSaGRHVWlMQ0poWkdSRmRtVnVkRXhwYzNSbGJtVnlJaXdpZDJsdVpHOTNJaXdpYVc1cGRDSXNJbWhoWkV0bGVXSnZZWEprUlhabGJuUWlMQ0pvWVdSR2IyTjFjMVpwYzJsaWJHVlNaV05sYm5Sc2VTSXNJbWhoWkVadlkzVnpWbWx6YVdKc1pWSmxZMlZ1ZEd4NVZHbHRaVzkxZENJc0ltbHVjSFYwVkhsd1pYTlhhR2wwWld4cGMzUWlMQ0owWlhoMElpd2ljMlZoY21Ob0lpd2lkWEpzSWl3aWRHVnNJaXdpWlcxaGFXd2lMQ0p3WVhOemQyOXlaQ0lzSW01MWJXSmxjaUlzSW1SaGRHVWlMQ0p0YjI1MGFDSXNJbmRsWldzaUxDSjBhVzFsSWl3aVpHRjBaWFJwYldVaUxDSmtZWFJsZEdsdFpTMXNiMk5oYkNJc0ltbHpWbUZzYVdSR2IyTjFjMVJoY21kbGRDSXNJbVZzSWl3aWJtOWtaVTVoYldVaUxDSmpiR0Z6YzB4cGMzUWlMQ0poWkdSR2IyTjFjMVpwYzJsaWJHVkRiR0Z6Y3lJc0ltTnZiblJoYVc1eklpd2lZV1JrSWl3aWMyVjBRWFIwY21saWRYUmxJaXdpYjI1UWIybHVkR1Z5Ukc5M2JpSXNJbVVpTENKaFpHUkpibWwwYVdGc1VHOXBiblJsY2sxdmRtVk1hWE4wWlc1bGNuTWlMQ0p2YmtsdWFYUnBZV3hRYjJsdWRHVnlUVzkyWlNJc0luUmhjbWRsZENJc0luUnZURzkzWlhKRFlYTmxJaXdpY21WdGIzWmxTVzVwZEdsaGJGQnZhVzUwWlhKTmIzWmxUR2x6ZEdWdVpYSnpJaXdpY21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lJc0ltOXVTMlY1Ukc5M2JpSXNJbUZqZEdsMlpVVnNaVzFsYm5RaUxDSnZia1p2WTNWeklpd2labTlqZFhOVWNtbG5aMlZ5YzB0bGVXSnZZWEprVFc5a1lXeHBkSGtpTENKMGVYQmxJaXdpZEdGblRtRnRaU0lzSW5KbFlXUlBibXg1SWl3aWFYTkRiMjUwWlc1MFJXUnBkR0ZpYkdVaUxDSnZia0pzZFhJaUxDSm9ZWE5CZEhSeWFXSjFkR1VpTENKamJHVmhjbFJwYldWdmRYUWlMQ0p6WlhSVWFXMWxiM1YwSWl3aWNtVnRiM1psUm05amRYTldhWE5wWW14bFEyeGhjM01pTENKeVpXMXZkbVVpTENKeVpXMXZkbVZCZEhSeWFXSjFkR1VpTENKdmJsWnBjMmxpYVd4cGRIbERhR0Z1WjJVaUxDSjJhWE5wWW1sc2FYUjVVM1JoZEdVaUxDSmliMlI1SWwwc0ltMWhjSEJwYm1keklqb2lRMEZCUXl4VFFVRlZRU3hGUVVGUlF5eEhRVU5GTEdsQ1FVRmFReXhUUVVFd1F5eHZRa0ZCV0VNc1QwRkJlVUpHTEVsQlF6ZERMRzFDUVVGWVJ5eFJRVUY1UWtFc1QwRkJUME1zU1VGQlRVUXNUMEZCVDBnc1IwRkRia1JCTEVsQlNFZ3NRMEZKUlVzc1JVRkJUU3hYUVVGbExHRkJhVkpITEc5Q1FVRmlReXhWUVhaQ1dDeFRRVUZUUXl4WFFVRlhReXhIUVVOc1FpeEpRVUZKUXl4RlFVdEtMRk5CUVZORExFOUJRMFpFTEVsQlEwaEJMRWRCUVZNc1JVRkZWRVFzUzBGSlFTeERRVUZETEdOQlFXVXNXVUZCV1Vjc1VVRkJVVXdzVTBGQlUwMHNZVUZCWlN4RlFVTTVSRW9zUzBGRlFVTXNSMEZCVXl4RlFVTlVTQ3hUUVVGVFR5eHBRa0ZCYVVJc2JVSkJRVzlDU0N4TlFVRk5MRWRCUTNCRVNTeFBRVUZQUkN4cFFrRkJhVUlzVDBGQlVVZ3NUVUZCVFN4SlFVdDRRMGdzUTBFM1VVWXNVMEZCVTFFc1QwRkRVQ3hKUVVGSlF5eEhRVUZ0UWl4RlFVTnVRa01zUjBGQk1FSXNSVUZETVVKRExFVkJRV2xETEV0QlJXcERReXhGUVVGelFpeERRVU40UWtNc1RVRkJUU3hGUVVOT1F5eFJRVUZSTEVWQlExSkRMRXRCUVVzc1JVRkRURU1zUzBGQlN5eEZRVU5NUXl4UFFVRlBMRVZCUTFCRExGVkJRVlVzUlVGRFZrTXNVVUZCVVN4RlFVTlNReXhOUVVGTkxFVkJRMDVETEU5QlFVOHNSVUZEVUVNc1RVRkJUU3hGUVVOT1F5eE5RVUZOTEVWQlEwNURMRlZCUVZVc1JVRkRWa01zYTBKQlFXdENMRWRCVVhCQ0xGTkJRVk5ETEcxQ1FVRnRRa01zUjBGRE1VSXNVMEZEUlVFc1IwRkRRVUVzU1VGQlR6VkNMRlZCUTFNc1UwRkJhRUkwUWl4RlFVRkhReXhWUVVOaExGTkJRV2hDUkN4RlFVRkhReXhWUVVOSUxHTkJRV1ZFTEVkQlEyWXNZVUZCWTBFc1JVRkJSMFVzVjBGelEzSkNMRk5CUVZORExIRkNRVUZ4UWtnc1IwRkRlRUpCTEVWQlFVZEZMRlZCUVZWRkxGTkJRVk1zYlVKQlJ6RkNTaXhGUVVGSFJTeFZRVUZWUnl4SlFVRkpMR2xDUVVOcVFrd3NSVUZCUjAwc1lVRkJZU3d5UWtGQk5FSXNTMEZ6UXpsRExGTkJRVk5ETEdOQlFXTkRMRWRCUTNKQ01VSXNSMEZCYlVJc1JVRjNSWEpDTEZOQlFWTXlRaXhwUTBGRFVISkRMRk5CUVZOUExHbENRVUZwUWl4WlFVRmhLMElzYzBKQlEzWkRkRU1zVTBGQlUwOHNhVUpCUVdsQ0xGbEJRV0VyUWl4elFrRkRka04wUXl4VFFVRlRUeXhwUWtGQmFVSXNWVUZCVnl0Q0xITkNRVU55UTNSRExGTkJRVk5QTEdsQ1FVRnBRaXhqUVVGbEswSXNjMEpCUTNwRGRFTXNVMEZCVTA4c2FVSkJRV2xDTEdOQlFXVXJRaXh6UWtGRGVrTjBReXhUUVVGVFR5eHBRa0ZCYVVJc1dVRkJZU3RDTEhOQ1FVTjJRM1JETEZOQlFWTlBMR2xDUVVGcFFpeFpRVUZoSzBJc2MwSkJRM1pEZEVNc1UwRkJVMDhzYVVKQlFXbENMR0ZCUVdNclFpeHpRa0ZEZUVOMFF5eFRRVUZUVHl4cFFrRkJhVUlzVjBGQldTdENMSE5DUVhOQ2VFTXNVMEZCVTBFc2NVSkJRWEZDUml4SFFVZFpMRk5CUVhCRFFTeEZRVUZGUnl4UFFVRlBWaXhUUVVGVFZ5eG5Ra0ZKZEVJNVFpeEhRVUZ0UWl4RlFURkNja0lzVTBGQlV5dENMRzlEUVVOUWVrTXNVMEZCVXpCRExHOUNRVUZ2UWl4WlFVRmhTaXh6UWtGRE1VTjBReXhUUVVGVE1FTXNiMEpCUVc5Q0xGbEJRV0ZLTEhOQ1FVTXhRM1JETEZOQlFWTXdReXh2UWtGQmIwSXNWVUZCVjBvc2MwSkJRM2hEZEVNc1UwRkJVekJETEc5Q1FVRnZRaXhqUVVGbFNpeHpRa0ZETlVOMFF5eFRRVUZUTUVNc2IwSkJRVzlDTEdOQlFXVktMSE5DUVVNMVEzUkRMRk5CUVZNd1F5eHZRa0ZCYjBJc1dVRkJZVW9zYzBKQlF6RkRkRU1zVTBGQlV6QkRMRzlDUVVGdlFpeFpRVUZoU2l4elFrRkRNVU4wUXl4VFFVRlRNRU1zYjBKQlFXOUNMR0ZCUVdOS0xITkNRVU16UTNSRExGTkJRVk13UXl4dlFrRkJiMElzVjBGQldVb3NjMEpCYTBKNlEwY3NTVUZIUm5wRExGTkJRVk5QTEdsQ1FVRnBRaXhWUVc1Sk1VSXNVMEZCVTI5RExGVkJRVlZRTEVkQlEySlVMRzFDUVVGdFFqTkNMRk5CUVZNMFF5eG5Ra0ZET1VKaUxIRkNRVUZ4UWk5Q0xGTkJRVk0wUXl4bFFVZG9RMnhETEVkQlFXMUNMRWxCT0VneVFpeEhRVU5vUkZZc1UwRkJVMDhzYVVKQlFXbENMRmxCUVdFMFFpeGxRVUZsTEVkQlEzUkVia01zVTBGQlUwOHNhVUpCUVdsQ0xHTkJRV1UwUWl4bFFVRmxMRWRCUTNoRWJrTXNVMEZCVTA4c2FVSkJRV2xDTEdGQlFXTTBRaXhsUVVGbExFZEJRM1pFYmtNc1UwRkJVMDhzYVVKQlFXbENMRkZCTlVjeFFpeFRRVUZUYzBNc1VVRkJVVlFzUjBGRlZsUXNiVUpCUVcxQ1V5eEZRVUZGUnl4VlFVbDBRamRDTEVkQmNFWk9MRk5CUVZOdlF5dzRRa0ZCT0VKc1FpeEhRVU55UXl4SlFVRkpiVUlzUlVGQlQyNUNMRVZCUVVkdFFpeExRVU5XUXl4RlFVRlZjRUlzUlVGQlIyOUNMRkZCUldwQ0xGRkJRV1VzVTBGQldFRXNTVUZCYzBKdVF5eEZRVUZ2UW10RExFbEJRVlZ1UWl4RlFVRkhjVUlzVjBGSk5VTXNXVUZCV0VRc1NVRkJNRUp3UWl4RlFVRkhjVUlzV1VGSk4wSnlRaXhGUVVGSGMwSXNhMEpCZDBWcFFrb3NRMEZCT0VKV0xFVkJRVVZITEZWQlEzUkVVaXh4UWtGQmNVSkxMRVZCUVVWSExGVkJjVWRwUWl4SFFVTTFRM1pETEZOQlFWTlBMR2xDUVVGcFFpeFBRVGxHTVVJc1UwRkJVelJETEU5QlFVOW1MRWRCUTFSVUxHMUNRVUZ0UWxNc1JVRkJSVWNzVlVGTGVFSklMRVZCUVVWSExFOUJRVTlVTEZWQlFWVkZMRk5CUVZNc2EwSkJRelZDU1N4RlFVRkZSeXhQUVVGUFlTeGhRVUZoTEN0Q1FVMTBRbnBETEVkQlFUQkNMRVZCUXpGQ1NDeFBRVUZQTmtNc1lVRkJZWHBETEVkQlEzQkNRU3hGUVVGcFEwb3NUMEZCVHpoRExGZEJRVmNzVjBGRGFrUXpReXhIUVVFd1FpeEZRVU14UWtnc1QwRkJUelpETEdGQlFXRjZReXhKUVVOdVFpeExRVEZGVUN4VFFVRlRNa01zZDBKQlFYZENNMElzUjBGRE1VSkJMRVZCUVVkM1FpeGhRVUZoTERoQ1FVZHlRbmhDTEVWQlFVZEZMRlZCUVZVd1FpeFBRVUZQTEdsQ1FVTndRalZDTEVWQlFVYzJRaXhuUWtGQlowSXNOa0pCYzBWcVFrWXNRMEZCZDBKdVFpeEZRVUZGUnl4WFFUSkZXU3hIUVVNeFEzWkRMRk5CUVZOUExHbENRVUZwUWl4dFFrRnVSVEZDTEZOQlFWTnRSQ3h0UWtGQmJVSjBRaXhIUVVOTkxGVkJRVFZDY0VNc1UwRkJVekpFTEd0Q1FVdFFhRVFzU1VGRFJrUXNSMEZCYlVJc1IwRkZja0l5UWl4dlEwRXdSRGhFTEVkQlEyeEZRU3hwUTBGRlFYSkRMRk5CUVZNMFJDeExRVUZMT1VJc1ZVRkJWVWNzU1VGQlNTSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5bWIyTjFjeTEyYVhOcFlteGxMMlJwYzNRdlptOWpkWE10ZG1semFXSnNaUzVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBpbnZhcmlhbnQ9ZnVuY3Rpb24ocixlLG4saSxvLGEsdCxzKXtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ2b2lkIDA9PT1lKXRocm93IG5ldyBFcnJvcihcImludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50XCIpO2lmKCFyKXt2YXIgdTtpZih2b2lkIDA9PT1lKXU9bmV3IEVycm9yKFwiTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIik7ZWxzZXt2YXIgdj1bbixpLG8sYSx0LHNdLGQ9MDsodT1uZXcgRXJyb3IoZS5yZXBsYWNlKC8lcy9nLGZ1bmN0aW9uKCl7cmV0dXJuIHZbZCsrXX0pKSkubmFtZT1cIkludmFyaWFudCBWaW9sYXRpb25cIn10aHJvdyB1LmZyYW1lc1RvUG9wPTEsdX19O21vZHVsZS5leHBvcnRzPWludmFyaWFudDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltSnliM2R6WlhJdWFuTWlYU3dpYm1GdFpYTWlPbHNpYVc1MllYSnBZVzUwSWl3aVkyOXVaR2wwYVc5dUlpd2labTl5YldGMElpd2lZU0lzSW1JaUxDSmpJaXdpWkNJc0ltVWlMQ0ptSWl3aWNISnZZMlZ6Y3lJc0ltVnVkaUlzSWs1UFJFVmZSVTVXSWl3aWRXNWtaV1pwYm1Wa0lpd2lSWEp5YjNJaUxDSmxjbkp2Y2lJc0ltRnlaM01pTENKaGNtZEpibVJsZUNJc0luSmxjR3hoWTJVaUxDSnVZVzFsSWl3aVpuSmhiV1Z6Vkc5UWIzQWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRlBRU3hoUVdGQkxFbEJRVWxCTEZWQlFWa3NVMEZCVTBNc1JVRkJWME1zUlVGQlVVTXNSVUZCUjBNc1JVRkJSME1zUlVGQlIwTXNSVUZCUjBNc1JVRkJSME1zUjBGRGVrUXNSMEZCTmtJc1pVRkJla0pETEZGQlFWRkRMRWxCUVVsRExHVkJRME5ETEVsQlFWaFdMRVZCUTBZc1RVRkJUU3hKUVVGSlZ5eE5RVUZOTEdkRVFVbHdRaXhKUVVGTFdpeEZRVUZYTEVOQlEyUXNTVUZCU1dFc1JVRkRTaXhSUVVGbFJpeEpRVUZZVml4RlFVTkdXU3hGUVVGUkxFbEJRVWxFTEUxQlExWXNjVWxCUjBjc1EwRkRUQ3hKUVVGSlJTeEZRVUZQTEVOQlFVTmFMRVZCUVVkRExFVkJRVWRETEVWQlFVZERMRVZCUVVkRExFVkJRVWRETEVkQlEzWkNVU3hGUVVGWExFZEJRMlpHTEVWQlFWRXNTVUZCU1VRc1RVRkRWbGdzUlVGQlQyVXNVVUZCVVN4TlFVRlBMRmRCUVdFc1QwRkJUMFlzUlVGQlMwTXNVMEZGTTBORkxFdEJRVThzYzBKQlNXWXNUVUZFUVVvc1JVRkJUVXNzV1VGQll5eEZRVU5rVEN4SlFVbFdUU3hQUVVGUFF5eFJRVUZWY2tJaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12YVc1MllYSnBZVzUwTDJKeWIzZHpaWEl1YW5NaWZRPT0iLCJmdW5jdGlvbiBrZXlDb2RlKGUpe2lmKGUmJlwib2JqZWN0XCI9PXR5cGVvZiBlKXt2YXIgbz1lLndoaWNofHxlLmtleUNvZGV8fGUuY2hhckNvZGU7byYmKGU9byl9aWYoXCJudW1iZXJcIj09dHlwZW9mIGUpcmV0dXJuIG5hbWVzW2VdO3ZhciBhLHI9U3RyaW5nKGUpO3JldHVybihhPWNvZGVzW3IudG9Mb3dlckNhc2UoKV0pP2E6KGE9YWxpYXNlc1tyLnRvTG93ZXJDYXNlKCldKXx8KDE9PT1yLmxlbmd0aD9yLmNoYXJDb2RlQXQoMCk6dm9pZCAwKX1rZXlDb2RlLmlzRXZlbnRLZXk9ZnVuY3Rpb24gaXNFdmVudEtleShlLG8pe2lmKGUmJlwib2JqZWN0XCI9PXR5cGVvZiBlKXt2YXIgYT1lLndoaWNofHxlLmtleUNvZGV8fGUuY2hhckNvZGU7aWYobnVsbD09YSlyZXR1cm4hMTtpZihcInN0cmluZ1wiPT10eXBlb2Ygbyl7dmFyIHI7aWYocj1jb2Rlc1tvLnRvTG93ZXJDYXNlKCldKXJldHVybiByPT09YTtpZihyPWFsaWFzZXNbby50b0xvd2VyQ2FzZSgpXSlyZXR1cm4gcj09PWF9ZWxzZSBpZihcIm51bWJlclwiPT10eXBlb2YgbylyZXR1cm4gbz09PWE7cmV0dXJuITF9fSxleHBvcnRzPW1vZHVsZS5leHBvcnRzPWtleUNvZGU7dmFyIGNvZGVzPWV4cG9ydHMuY29kZT1leHBvcnRzLmNvZGVzPXtiYWNrc3BhY2U6OCx0YWI6OSxlbnRlcjoxMyxzaGlmdDoxNixjdHJsOjE3LGFsdDoxOCxcInBhdXNlL2JyZWFrXCI6MTksXCJjYXBzIGxvY2tcIjoyMCxlc2M6Mjcsc3BhY2U6MzIsXCJwYWdlIHVwXCI6MzMsXCJwYWdlIGRvd25cIjozNCxlbmQ6MzUsaG9tZTozNixsZWZ0OjM3LHVwOjM4LHJpZ2h0OjM5LGRvd246NDAsaW5zZXJ0OjQ1LGRlbGV0ZTo0Nixjb21tYW5kOjkxLFwibGVmdCBjb21tYW5kXCI6OTEsXCJyaWdodCBjb21tYW5kXCI6OTMsXCJudW1wYWQgKlwiOjEwNixcIm51bXBhZCArXCI6MTA3LFwibnVtcGFkIC1cIjoxMDksXCJudW1wYWQgLlwiOjExMCxcIm51bXBhZCAvXCI6MTExLFwibnVtIGxvY2tcIjoxNDQsXCJzY3JvbGwgbG9ja1wiOjE0NSxcIm15IGNvbXB1dGVyXCI6MTgyLFwibXkgY2FsY3VsYXRvclwiOjE4MyxcIjtcIjoxODYsXCI9XCI6MTg3LFwiLFwiOjE4OCxcIi1cIjoxODksXCIuXCI6MTkwLFwiL1wiOjE5MSxcImBcIjoxOTIsXCJbXCI6MjE5LFwiXFxcXFwiOjIyMCxcIl1cIjoyMjEsXCInXCI6MjIyfSxhbGlhc2VzPWV4cG9ydHMuYWxpYXNlcz17d2luZG93czo5MSxcIuKHp1wiOjE2LFwi4oylXCI6MTgsXCLijINcIjoxNyxcIuKMmFwiOjkxLGN0bDoxNyxjb250cm9sOjE3LG9wdGlvbjoxOCxwYXVzZToxOSxicmVhazoxOSxjYXBzOjIwLHJldHVybjoxMyxlc2NhcGU6Mjcsc3BjOjMyLHNwYWNlYmFyOjMyLHBndXA6MzMscGdkbjozNCxpbnM6NDUsZGVsOjQ2LGNtZDo5MX07Zm9yKGk9OTc7aTwxMjM7aSsrKWNvZGVzW1N0cmluZy5mcm9tQ2hhckNvZGUoaSldPWktMzI7Zm9yKHZhciBpPTQ4O2k8NTg7aSsrKWNvZGVzW2ktNDhdPWk7Zm9yKGk9MTtpPDEzO2krKyljb2Rlc1tcImZcIitpXT1pKzExMTtmb3IoaT0wO2k8MTA7aSsrKWNvZGVzW1wibnVtcGFkIFwiK2ldPWkrOTY7dmFyIG5hbWVzPWV4cG9ydHMubmFtZXM9ZXhwb3J0cy50aXRsZT17fTtmb3IoaSBpbiBjb2RlcyluYW1lc1tjb2Rlc1tpXV09aTtmb3IodmFyIGFsaWFzIGluIGFsaWFzZXMpY29kZXNbYWxpYXNdPWFsaWFzZXNbYWxpYXNdO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1sdVpHVjRMbXB6SWwwc0ltNWhiV1Z6SWpwYkltdGxlVU52WkdVaUxDSnpaV0Z5WTJoSmJuQjFkQ0lzSW1oaGMwdGxlVU52WkdVaUxDSjNhR2xqYUNJc0ltTm9ZWEpEYjJSbElpd2libUZ0WlhNaUxDSm1iM1Z1WkU1aGJXVmtTMlY1SWl3aWMyVmhjbU5vSWl3aVUzUnlhVzVuSWl3aVkyOWtaWE1pTENKMGIweHZkMlZ5UTJGelpTSXNJbUZzYVdGelpYTWlMQ0pzWlc1bmRHZ2lMQ0pqYUdGeVEyOWtaVUYwSWl3aWFYTkZkbVZ1ZEV0bGVTSXNJbVYyWlc1MElpd2libUZ0WlU5eVEyOWtaU0lzSW1WNGNHOXlkSE1pTENKdGIyUjFiR1VpTENKamIyUmxJaXdpWW1GamEzTndZV05sSWl3aWRHRmlJaXdpWlc1MFpYSWlMQ0p6YUdsbWRDSXNJbU4wY213aUxDSmhiSFFpTENKd1lYVnpaUzlpY21WaGF5SXNJbU5oY0hNZ2JHOWpheUlzSW1Well5SXNJbk53WVdObElpd2ljR0ZuWlNCMWNDSXNJbkJoWjJVZ1pHOTNiaUlzSW1WdVpDSXNJbWh2YldVaUxDSnNaV1owSWl3aWRYQWlMQ0p5YVdkb2RDSXNJbVJ2ZDI0aUxDSnBibk5sY25RaUxDSmtaV3hsZEdVaUxDSmpiMjF0WVc1a0lpd2liR1ZtZENCamIyMXRZVzVrSWl3aWNtbG5hSFFnWTI5dGJXRnVaQ0lzSW01MWJYQmhaQ0FxSWl3aWJuVnRjR0ZrSUNzaUxDSnVkVzF3WVdRZ0xTSXNJbTUxYlhCaFpDQXVJaXdpYm5WdGNHRmtJQzhpTENKdWRXMGdiRzlqYXlJc0luTmpjbTlzYkNCc2IyTnJJaXdpYlhrZ1kyOXRjSFYwWlhJaUxDSnRlU0JqWVd4amRXeGhkRzl5SWl3aU95SXNJajBpTENJc0lpd2lMU0lzSWk0aUxDSXZJaXdpWUNJc0lsc2lMQ0pjWENJc0lsMGlMQ0luSWl3aWQybHVaRzkzY3lJc0l1S0hweUlzSXVLTXBTSXNJdUtNZ3lJc0l1S01tQ0lzSW1OMGJDSXNJbU52Ym5SeWIyd2lMQ0p2Y0hScGIyNGlMQ0p3WVhWelpTSXNJbUp5WldGcklpd2lZMkZ3Y3lJc0luSmxkSFZ5YmlJc0ltVnpZMkZ3WlNJc0luTndZeUlzSW5Od1lXTmxZbUZ5SWl3aWNHZDFjQ0lzSW5CblpHNGlMQ0pwYm5NaUxDSmtaV3dpTENKamJXUWlMQ0pwSWl3aVpuSnZiVU5vWVhKRGIyUmxJaXdpZEdsMGJHVWlMQ0poYkdsaGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlYwRXNVMEZCVTBFc1VVRkJVVU1zUjBGRlppeEhRVUZKUVN4SFFVRmxMR2xDUVVGdlFrRXNSVUZCWVN4RFFVTnNSQ3hKUVVGSlF5eEZRVUZoUkN4RlFVRlpSU3hQUVVGVFJpeEZRVUZaUkN4VFFVRlhReXhGUVVGWlJ5eFRRVU55UlVZc1NVRkJXVVFzUlVGQlkwTXNSMEZKYUVNc1IwRkJTU3hwUWtGQmIwSkVMRVZCUVdFc1QwRkJUMGtzVFVGQlRVb3NSMEZIYkVRc1NVRlBTVXNzUlVGUVFVTXNSVUZCVTBNc1QwRkJUMUFzUjBGSmNFSXNUMEZFU1Vzc1JVRkJaMEpITEUxQlFVMUdMRVZCUVU5SExHZENRVU5RU2l4SFFVZDBRa0VzUlVGQlowSkxMRkZCUVZGS0xFVkJRVTlITEd0Q1FVbGlMRWxCUVd4Q1NDeEZRVUZQU3l4UFFVRnhRa3dzUlVGQlQwMHNWMEZCVnl4UlFVRnNSQ3hIUVdGR1lpeFJRVUZSWXl4WFFVRmhMRk5CUVZOQkxGZEJRVmRETEVWQlFVOURMRWRCUXpsRExFZEJRVWxFTEVkQlFWTXNhVUpCUVc5Q1FTeEZRVUZQTEVOQlEzUkRMRWxCUVVsbUxFVkJRVlZsTEVWQlFVMWFMRTlCUVZOWkxFVkJRVTFtTEZOQlFWZGxMRVZCUVUxWUxGTkJRM0JFTEVkQlFVbEtMRTFCUVVGQkxFVkJRVFpETEU5QlFVOHNSVUZEZUVRc1IwRkJNRUlzYVVKQlFXWm5RaXhGUVVGNVFpeERRVVZzUXl4SlFVbEpWaXhGUVVoS0xFZEJSRWxCTEVWQlFXZENSeXhOUVVGTlR5eEZRVUZYVGl4bFFVTm9RaXhQUVVGUFNpeEpRVUZyUWs0c1JVRkpPVU1zUjBGRVNVMHNSVUZCWjBKTExGRkJRVkZMTEVWQlFWZE9MR1ZCUTJ4Q0xFOUJRVTlLTEVsQlFXdENUaXhQUVVONlF5eEhRVUV3UWl4cFFrRkJabWRDTEVWQlEyaENMRTlCUVU5QkxFbEJRV1ZvUWl4RlFVVjRRaXhQUVVGUExFbEJTVmhwUWl4UlFVRlZReXhQUVVGUFJDeFJRVUZWYWtJc1VVRlJNMElzU1VGQlNWTXNUVUZCVVZFc1VVRkJVVVVzUzBGQlQwWXNVVUZCVVZJc1RVRkJVU3hEUVVONlExY3NWVUZCWVN4RlFVTmlReXhKUVVGUExFVkJRMUJETEUxQlFWTXNSMEZEVkVNc1RVRkJVeXhIUVVOVVF5eExRVUZSTEVkQlExSkRMRWxCUVU4c1IwRkRVRU1zWTBGQlpTeEhRVU5tUXl4WlFVRmhMRWRCUTJKRExFbEJRVThzUjBGRFVFTXNUVUZCVXl4SFFVTlVReXhWUVVGWExFZEJRMWhETEZsQlFXRXNSMEZEWWtNc1NVRkJUeXhIUVVOUVF5eExRVUZSTEVkQlExSkRMRXRCUVZFc1IwRkRVa01zUjBGQlRTeEhRVU5PUXl4TlFVRlRMRWRCUTFSRExFdEJRVkVzUjBGRFVrTXNUMEZCVlN4SFFVTldReXhQUVVGVkxFZEJRMVpETEZGQlFWY3NSMEZEV0VNc1pVRkJaMElzUjBGRGFFSkRMR2RDUVVGcFFpeEhRVU5xUWtNc1YwRkJXU3hKUVVOYVF5eFhRVUZaTEVsQlExcERMRmRCUVZrc1NVRkRXa01zVjBGQldTeEpRVU5hUXl4WFFVRlpMRWxCUTFwRExGZEJRVmtzU1VGRFdrTXNZMEZCWlN4SlFVTm1ReXhqUVVGbExFbEJRMlpETEdkQ1FVRnBRaXhKUVVOcVFrTXNTVUZCU3l4SlFVTk1ReXhKUVVGTExFbEJRMHhETEVsQlFVc3NTVUZEVEVNc1NVRkJTeXhKUVVOTVF5eEpRVUZMTEVsQlEweERMRWxCUVVzc1NVRkRURU1zU1VGQlN5eEpRVU5NUXl4SlFVRkxMRWxCUTB4RExFdEJRVTBzU1VGRFRrTXNTVUZCU3l4SlFVTk1ReXhKUVVGTExFdEJTMGh1UkN4UlFVRlZUU3hSUVVGUlRpeFJRVUZWTEVOQlF6bENiMFFzVVVGQlZ5eEhRVU5ZUXl4SlFVRkxMRWRCUTB4RExFbEJRVXNzUjBGRFRFTXNTVUZCU3l4SFFVTk1ReXhKUVVGTExFZEJRMHhETEVsQlFVOHNSMEZEVUVNc1VVRkJWeXhIUVVOWVF5eFBRVUZWTEVkQlExWkRMRTFCUVZNc1IwRkRWRU1zVFVGQlV5eEhRVU5VUXl4TFFVRlJMRWRCUTFKRExFOUJRVlVzUjBGRFZrTXNUMEZCVlN4SFFVTldReXhKUVVGUExFZEJRMUJETEZOQlFWa3NSMEZEV2tNc1MwRkJVU3hIUVVOU1F5eExRVUZSTEVkQlExSkRMRWxCUVU4c1IwRkRVRU1zU1VGQlR5eEhRVU5RUXl4SlFVRlBMRWxCVVZRc1NVRkJTME1zUlVGQlNTeEhRVUZKUVN4RlFVRkpMRWxCUVV0QkxFbEJRVXN4UlN4TlFVRk5SQ3hQUVVGUE5FVXNZVUZCWVVRc1NVRkJUVUVzUlVGQlNTeEhRVWN2UkN4SlFVRkxMRWxCUVVsQkxFVkJRVWtzUjBGQlNVRXNSVUZCU1N4SFFVRkpRU3hKUVVGTE1VVXNUVUZCVFRCRkxFVkJRVWtzU1VGQlRVRXNSVUZIT1VNc1NVRkJTMEVzUlVGQlNTeEZRVUZIUVN4RlFVRkpMRWRCUVVsQkxFbEJRVXN4UlN4TlFVRk5MRWxCUVVrd1JTeEhRVUZMUVN4RlFVRkpMRWxCUnpWRExFbEJRVXRCTEVWQlFVa3NSVUZCUjBFc1JVRkJTU3hIUVVGSlFTeEpRVUZMTVVVc1RVRkJUU3hWUVVGVk1FVXNSMEZCUzBFc1JVRkJTU3hIUVZGc1JDeEpRVUZKT1VVc1RVRkJVVmtzVVVGQlVWb3NUVUZCVVZrc1VVRkJVVzlGTEUxQlFWRXNSMEZITlVNc1NVRkJTMFlzUzBGQlN6RkZMRTFCUVU5S0xFMUJRVTFKTEUxQlFVMHdSU3hKUVVGTlFTeEZRVWR1UXl4SlFVRkxMRWxCUVVsSExGTkJRVk16UlN4UlFVTm9Ra1lzVFVGQlRUWkZMRTlCUVZNelJTeFJRVUZSTWtVaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12YTJWNVkyOWtaUzlwYm1SbGVDNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIGdldE93blByb3BlcnR5U3ltYm9scz1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLGhhc093blByb3BlcnR5PU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkscHJvcElzRW51bWVyYWJsZT1PYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO2Z1bmN0aW9uIHRvT2JqZWN0KGUpe2lmKG51bGw9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkXCIpO3JldHVybiBPYmplY3QoZSl9ZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCl7dHJ5e2lmKCFPYmplY3QuYXNzaWduKXJldHVybiExO3ZhciBlPW5ldyBTdHJpbmcoXCJhYmNcIik7aWYoZVs1XT1cImRlXCIsXCI1XCI9PT1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhlKVswXSlyZXR1cm4hMTtmb3IodmFyIHI9e30sdD0wO3Q8MTA7dCsrKXJbXCJfXCIrU3RyaW5nLmZyb21DaGFyQ29kZSh0KV09dDtpZihcIjAxMjM0NTY3ODlcIiE9PU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHIpLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gcltlXX0pLmpvaW4oXCJcIikpcmV0dXJuITE7dmFyIG49e307cmV0dXJuXCJhYmNkZWZnaGlqa2xtbm9wcXJzdFwiLnNwbGl0KFwiXCIpLmZvckVhY2goZnVuY3Rpb24oZSl7bltlXT1lfSksXCJhYmNkZWZnaGlqa2xtbm9wcXJzdFwiPT09T2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSxuKSkuam9pbihcIlwiKX1jYXRjaChlKXtyZXR1cm4hMX19bW9kdWxlLmV4cG9ydHM9c2hvdWxkVXNlTmF0aXZlKCk/T2JqZWN0LmFzc2lnbjpmdW5jdGlvbihlLHIpe2Zvcih2YXIgdCxuLG89dG9PYmplY3QoZSksYT0xO2E8YXJndW1lbnRzLmxlbmd0aDthKyspe2Zvcih2YXIgcyBpbiB0PU9iamVjdChhcmd1bWVudHNbYV0pKWhhc093blByb3BlcnR5LmNhbGwodCxzKSYmKG9bc109dFtzXSk7aWYoZ2V0T3duUHJvcGVydHlTeW1ib2xzKXtuPWdldE93blByb3BlcnR5U3ltYm9scyh0KTtmb3IodmFyIGM9MDtjPG4ubGVuZ3RoO2MrKylwcm9wSXNFbnVtZXJhYmxlLmNhbGwodCxuW2NdKSYmKG9bbltjXV09dFtuW2NdXSl9fXJldHVybiBvfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltbHVaR1Y0TG1weklsMHNJbTVoYldWeklqcGJJbWRsZEU5M2JsQnliM0JsY25SNVUzbHRZbTlzY3lJc0lrOWlhbVZqZENJc0ltaGhjMDkzYmxCeWIzQmxjblI1SWl3aWNISnZkRzkwZVhCbElpd2ljSEp2Y0VselJXNTFiV1Z5WVdKc1pTSXNJbkJ5YjNCbGNuUjVTWE5GYm5WdFpYSmhZbXhsSWl3aWRHOVBZbXBsWTNRaUxDSjJZV3dpTENKVWVYQmxSWEp5YjNJaUxDSnphRzkxYkdSVmMyVk9ZWFJwZG1VaUxDSmhjM05wWjI0aUxDSjBaWE4wTVNJc0lsTjBjbWx1WnlJc0ltZGxkRTkzYmxCeWIzQmxjblI1VG1GdFpYTWlMQ0owWlhOME1pSXNJbWtpTENKbWNtOXRRMmhoY2tOdlpHVWlMQ0p0WVhBaUxDSnVJaXdpYW05cGJpSXNJblJsYzNReklpd2ljM0JzYVhRaUxDSm1iM0pGWVdOb0lpd2liR1YwZEdWeUlpd2lhMlY1Y3lJc0ltVnljaUlzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKMFlYSm5aWFFpTENKemIzVnlZMlVpTENKbWNtOXRJaXdpYzNsdFltOXNjeUlzSW5Sdklpd2ljeUlzSW1GeVozVnRaVzUwY3lJc0lteGxibWQwYUNJc0ltdGxlU0lzSW1OaGJHd2lYU3dpYldGd2NHbHVaM01pT2lKQlFVMUJMR0ZCUlVFc1NVRkJTVUVzYzBKQlFYZENReXhQUVVGUFJDeHpRa0ZETDBKRkxHVkJRV2xDUkN4UFFVRlBSU3hWUVVGVlJDeGxRVU5zUTBVc2FVSkJRVzFDU0N4UFFVRlBSU3hWUVVGVlJTeHhRa0ZGZUVNc1UwRkJVME1zVTBGQlUwTXNSMEZEYWtJc1IwRkJTVUVzVFVGQlFVRXNSVUZEU0N4TlFVRk5MRWxCUVVsRExGVkJRVlVzZVVSQlIzSkNMRTlCUVU5UUxFOUJRVTlOTEVkQlIyWXNVMEZCVTBVc2EwSkJRMUlzU1VGRFF5eEpRVUZMVWl4UFFVRlBVeXhQUVVOWUxFOUJRVThzUlVGTlVpeEpRVUZKUXl4RlFVRlJMRWxCUVVsRExFOUJRVThzVDBGRmRrSXNSMEZFUVVRc1JVRkJUU3hIUVVGTExFdEJRMnRETEUxQlFYcERWaXhQUVVGUFdTeHZRa0ZCYjBKR0xFZEJRVThzUjBGRGNrTXNUMEZCVHl4RlFVdFNMRWxCUkVFc1NVRkJTVWNzUlVGQlVTeEhRVU5JUXl4RlFVRkpMRVZCUVVkQkxFVkJRVWtzUjBGQlNVRXNTVUZEZGtKRUxFVkJRVTBzU1VGQlRVWXNUMEZCVDBrc1lVRkJZVVFzU1VGQlRVRXNSVUZMZGtNc1IwRkJkMElzWlVGSVdHUXNUMEZCVDFrc2IwSkJRVzlDUXl4SFFVRlBSeXhKUVVGSkxGTkJRVlZETEVkQlF6VkVMRTlCUVU5S0xFVkJRVTFKTEV0QlJVaERMRXRCUVVzc1NVRkRaaXhQUVVGUExFVkJTVklzU1VGQlNVTXNSVUZCVVN4SFFVbGFMRTFCU0VFc2RVSkJRWFZDUXl4TlFVRk5MRWxCUVVsRExGRkJRVkVzVTBGQlZVTXNSMEZEYkVSSUxFVkJRVTFITEVkQlFWVkJMRWxCUjJZc2VVSkJSRVYwUWl4UFFVRlBkVUlzUzBGQlMzWkNMRTlCUVU5VExFOUJRVThzUjBGQlNWVXNTVUZCVVVRc1MwRkJTeXhKUVUwNVF5eE5RVUZQVFN4SFFVVlNMRTlCUVU4c1IwRkpWRU1zVDBGQlQwTXNVVUZCVld4Q0xHdENRVUZ2UWxJc1QwRkJUMU1zVDBGQlV5eFRRVUZWYTBJc1JVRkJVVU1zUjBGTGRFVXNTVUZLUVN4SlFVRkpReXhGUVVWQlF5eEZRVVJCUXl4RlFVRkxNVUlzVTBGQlUzTkNMRWRCUjFSTExFVkJRVWtzUlVGQlIwRXNSVUZCU1VNc1ZVRkJWVU1zVDBGQlVVWXNTVUZCU3l4RFFVY3hReXhKUVVGTExFbEJRVWxITEV0QlJsUk9MRVZCUVU4M1FpeFBRVUZQYVVNc1ZVRkJWVVFzU1VGSGJrSXZRaXhsUVVGbGJVTXNTMEZCUzFBc1JVRkJUVTBzUzBGRE4wSktMRVZCUVVkSkxFZEJRVTlPTEVWQlFVdE5MRWxCU1dwQ0xFZEJRVWx3UXl4elFrRkJkVUlzUTBGRE1VSXJRaXhGUVVGVkwwSXNjMEpCUVhOQ09FSXNSMEZEYUVNc1NVRkJTeXhKUVVGSlppeEZRVUZKTEVWQlFVZEJMRVZCUVVsblFpeEZRVUZSU1N4UFFVRlJjRUlzU1VGREwwSllMR2xDUVVGcFFtbERMRXRCUVV0UUxFVkJRVTFETEVWQlFWRm9RaXhOUVVOMlEybENMRVZCUVVkRUxFVkJRVkZvUWl4SlFVRk5aU3hGUVVGTFF5eEZRVUZSYUVJc1RVRk5iRU1zVDBGQlQybENJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwyOWlhbVZqZEMxaGMzTnBaMjR2YVc1a1pYZ3Vhbk1pZlE9PSIsInZhciBjYWNoZWRTZXRUaW1lb3V0LGNhY2hlZENsZWFyVGltZW91dCxwcm9jZXNzPW1vZHVsZS5leHBvcnRzPXt9O2Z1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKXt0aHJvdyBuZXcgRXJyb3IoXCJzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkXCIpfWZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQoKXt0aHJvdyBuZXcgRXJyb3IoXCJjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWRcIil9ZnVuY3Rpb24gcnVuVGltZW91dChlKXtpZihjYWNoZWRTZXRUaW1lb3V0PT09c2V0VGltZW91dClyZXR1cm4gc2V0VGltZW91dChlLDApO2lmKChjYWNoZWRTZXRUaW1lb3V0PT09ZGVmYXVsdFNldFRpbW91dHx8IWNhY2hlZFNldFRpbWVvdXQpJiZzZXRUaW1lb3V0KXJldHVybiBjYWNoZWRTZXRUaW1lb3V0PXNldFRpbWVvdXQsc2V0VGltZW91dChlLDApO3RyeXtyZXR1cm4gY2FjaGVkU2V0VGltZW91dChlLDApfWNhdGNoKHQpe3RyeXtyZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsZSwwKX1jYXRjaCh0KXtyZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsZSwwKX19fWZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChlKXtpZihjYWNoZWRDbGVhclRpbWVvdXQ9PT1jbGVhclRpbWVvdXQpcmV0dXJuIGNsZWFyVGltZW91dChlKTtpZigoY2FjaGVkQ2xlYXJUaW1lb3V0PT09ZGVmYXVsdENsZWFyVGltZW91dHx8IWNhY2hlZENsZWFyVGltZW91dCkmJmNsZWFyVGltZW91dClyZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0PWNsZWFyVGltZW91dCxjbGVhclRpbWVvdXQoZSk7dHJ5e3JldHVybiBjYWNoZWRDbGVhclRpbWVvdXQoZSl9Y2F0Y2godCl7dHJ5e3JldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLGUpfWNhdGNoKHQpe3JldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLGUpfX19IWZ1bmN0aW9uKCl7dHJ5e2NhY2hlZFNldFRpbWVvdXQ9XCJmdW5jdGlvblwiPT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OmRlZmF1bHRTZXRUaW1vdXR9Y2F0Y2goZSl7Y2FjaGVkU2V0VGltZW91dD1kZWZhdWx0U2V0VGltb3V0fXRyeXtjYWNoZWRDbGVhclRpbWVvdXQ9XCJmdW5jdGlvblwiPT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDpkZWZhdWx0Q2xlYXJUaW1lb3V0fWNhdGNoKGUpe2NhY2hlZENsZWFyVGltZW91dD1kZWZhdWx0Q2xlYXJUaW1lb3V0fX0oKTt2YXIgY3VycmVudFF1ZXVlLHF1ZXVlPVtdLGRyYWluaW5nPSExLHF1ZXVlSW5kZXg9LTE7ZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCl7ZHJhaW5pbmcmJmN1cnJlbnRRdWV1ZSYmKGRyYWluaW5nPSExLGN1cnJlbnRRdWV1ZS5sZW5ndGg/cXVldWU9Y3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk6cXVldWVJbmRleD0tMSxxdWV1ZS5sZW5ndGgmJmRyYWluUXVldWUoKSl9ZnVuY3Rpb24gZHJhaW5RdWV1ZSgpe2lmKCFkcmFpbmluZyl7dmFyIGU9cnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO2RyYWluaW5nPSEwO2Zvcih2YXIgdD1xdWV1ZS5sZW5ndGg7dDspe2ZvcihjdXJyZW50UXVldWU9cXVldWUscXVldWU9W107KytxdWV1ZUluZGV4PHQ7KWN1cnJlbnRRdWV1ZSYmY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO3F1ZXVlSW5kZXg9LTEsdD1xdWV1ZS5sZW5ndGh9Y3VycmVudFF1ZXVlPW51bGwsZHJhaW5pbmc9ITEscnVuQ2xlYXJUaW1lb3V0KGUpfX1mdW5jdGlvbiBJdGVtKGUsdCl7dGhpcy5mdW49ZSx0aGlzLmFycmF5PXR9ZnVuY3Rpb24gbm9vcCgpe31wcm9jZXNzLm5leHRUaWNrPWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoLTEpO2lmKGFyZ3VtZW50cy5sZW5ndGg+MSlmb3IodmFyIHI9MTtyPGFyZ3VtZW50cy5sZW5ndGg7cisrKXRbci0xXT1hcmd1bWVudHNbcl07cXVldWUucHVzaChuZXcgSXRlbShlLHQpKSwxIT09cXVldWUubGVuZ3RofHxkcmFpbmluZ3x8cnVuVGltZW91dChkcmFpblF1ZXVlKX0sSXRlbS5wcm90b3R5cGUucnVuPWZ1bmN0aW9uKCl7dGhpcy5mdW4uYXBwbHkobnVsbCx0aGlzLmFycmF5KX0scHJvY2Vzcy50aXRsZT1cImJyb3dzZXJcIixwcm9jZXNzLmJyb3dzZXI9ITAscHJvY2Vzcy5lbnY9e30scHJvY2Vzcy5hcmd2PVtdLHByb2Nlc3MudmVyc2lvbj1cIlwiLHByb2Nlc3MudmVyc2lvbnM9e30scHJvY2Vzcy5vbj1ub29wLHByb2Nlc3MuYWRkTGlzdGVuZXI9bm9vcCxwcm9jZXNzLm9uY2U9bm9vcCxwcm9jZXNzLm9mZj1ub29wLHByb2Nlc3MucmVtb3ZlTGlzdGVuZXI9bm9vcCxwcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycz1ub29wLHByb2Nlc3MuZW1pdD1ub29wLHByb2Nlc3MucHJlcGVuZExpc3RlbmVyPW5vb3AscHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyPW5vb3AscHJvY2Vzcy5saXN0ZW5lcnM9ZnVuY3Rpb24oZSl7cmV0dXJuW119LHByb2Nlc3MuYmluZGluZz1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoXCJwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZFwiKX0scHJvY2Vzcy5jd2Q9ZnVuY3Rpb24oKXtyZXR1cm5cIi9cIn0scHJvY2Vzcy5jaGRpcj1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoXCJwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWRcIil9LHByb2Nlc3MudW1hc2s9ZnVuY3Rpb24oKXtyZXR1cm4gMH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUp5YjNkelpYSXVhbk1pWFN3aWJtRnRaWE1pT2xzaVkyRmphR1ZrVTJWMFZHbHRaVzkxZENJc0ltTmhZMmhsWkVOc1pXRnlWR2x0Wlc5MWRDSXNJbkJ5YjJObGMzTWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJaXdpWkdWbVlYVnNkRk5sZEZScGJXOTFkQ0lzSWtWeWNtOXlJaXdpWkdWbVlYVnNkRU5zWldGeVZHbHRaVzkxZENJc0luSjFibFJwYldWdmRYUWlMQ0ptZFc0aUxDSnpaWFJVYVcxbGIzVjBJaXdpWlNJc0ltTmhiR3dpTENKMGFHbHpJaXdpY25WdVEyeGxZWEpVYVcxbGIzVjBJaXdpYldGeWEyVnlJaXdpWTJ4bFlYSlVhVzFsYjNWMElpd2lZM1Z5Y21WdWRGRjFaWFZsSWl3aWNYVmxkV1VpTENKa2NtRnBibWx1WnlJc0luRjFaWFZsU1c1a1pYZ2lMQ0pqYkdWaGJsVndUbVY0ZEZScFkyc2lMQ0pzWlc1bmRHZ2lMQ0pqYjI1allYUWlMQ0prY21GcGJsRjFaWFZsSWl3aWRHbHRaVzkxZENJc0lteGxiaUlzSW5KMWJpSXNJa2wwWlcwaUxDSmhjbkpoZVNJc0ltNXZiM0FpTENKdVpYaDBWR2xqYXlJc0ltRnlaM01pTENKQmNuSmhlU0lzSW1GeVozVnRaVzUwY3lJc0lta2lMQ0p3ZFhOb0lpd2ljSEp2ZEc5MGVYQmxJaXdpWVhCd2JIa2lMQ0owYVhSc1pTSXNJbUp5YjNkelpYSWlMQ0psYm5ZaUxDSmhjbWQySWl3aWRtVnljMmx2YmlJc0luWmxjbk5wYjI1eklpd2liMjRpTENKaFpHUk1hWE4wWlc1bGNpSXNJbTl1WTJVaUxDSnZabVlpTENKeVpXMXZkbVZNYVhOMFpXNWxjaUlzSW5KbGJXOTJaVUZzYkV4cGMzUmxibVZ5Y3lJc0ltVnRhWFFpTENKd2NtVndaVzVrVEdsemRHVnVaWElpTENKd2NtVndaVzVrVDI1alpVeHBjM1JsYm1WeUlpd2liR2x6ZEdWdVpYSnpJaXdpYm1GdFpTSXNJbUpwYm1ScGJtY2lMQ0pqZDJRaUxDSmphR1JwY2lJc0ltUnBjaUlzSW5WdFlYTnJJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkRRU3hKUVU5SlFTeHBRa0ZEUVVNc2JVSkJVa0ZETEZGQlFWVkRMRTlCUVU5RExGRkJRVlVzUjBGVkwwSXNVMEZCVTBNc2JVSkJRMHdzVFVGQlRTeEpRVUZKUXl4TlFVRk5MRzFEUVVWd1FpeFRRVUZUUXl4elFrRkRUQ3hOUVVGTkxFbEJRVWxFTEUxQlFVMHNjVU5CYzBKd1FpeFRRVUZUUlN4WFFVRlhReXhIUVVOb1FpeEhRVUZKVkN4dFFrRkJjVUpWTEZkQlJYSkNMRTlCUVU5QkxGZEJRVmRFTEVWQlFVc3NSMEZITTBJc1NVRkJTMVFzYlVKQlFYRkNTeXh0UWtGQmNVSk1MRzFDUVVGeFFsVXNWMEZGYUVVc1QwRkVRVllzYVVKQlFXMUNWU3hYUVVOYVFTeFhRVUZYUkN4RlFVRkxMRWRCUlROQ0xFbEJSVWtzVDBGQlQxUXNhVUpCUVdsQ1V5eEZRVUZMTEVkQlF5OUNMRTFCUVUxRkxFZEJRMG9zU1VGRlNTeFBRVUZQV0N4cFFrRkJhVUpaTEV0QlFVc3NTMEZCVFVnc1JVRkJTeXhIUVVNeFF5eE5RVUZOUlN4SFFVVktMRTlCUVU5WUxHbENRVUZwUWxrc1MwRkJTME1zUzBGQlRVb3NSVUZCU3l4TFFVMXdSQ3hUUVVGVFN5eG5Ra0ZCWjBKRExFZEJRM0pDTEVkQlFVbGtMSEZDUVVGMVFtVXNZVUZGZGtJc1QwRkJUMEVzWVVGQllVUXNSMEZIZUVJc1NVRkJTMlFzY1VKQlFYVkNUU3h6UWtGQmQwSk9MSEZDUVVGMVFtVXNZVUZGZGtVc1QwRkVRV1lzYlVKQlFYRkNaU3hoUVVOa1FTeGhRVUZoUkN4SFFVVjRRaXhKUVVWSkxFOUJRVTlrTEcxQ1FVRnRRbU1zUjBGRE5VSXNUVUZCVDBvc1IwRkRUQ3hKUVVWSkxFOUJRVTlXTEcxQ1FVRnRRbGNzUzBGQlN5eExRVUZOUnl4SFFVTjJReXhOUVVGUFNpeEhRVWRNTEU5QlFVOVdMRzFDUVVGdFFsY3NTMEZCUzBNc1MwRkJUVVVzVFVGcVJXaEVMRmRCUTBjc1NVRkZVV1lzYVVKQlJITkNMRzFDUVVGbVZTeFhRVU5aUVN4WFFVVkJUQ3hwUWtGRmVrSXNUVUZCVDAwc1IwRkRURmdzYVVKQlFXMUNTeXhwUWtGRmRrSXNTVUZGVVVvc2JVSkJSSGRDTEcxQ1FVRnFRbVVzWVVGRFkwRXNZVUZGUVZRc2IwSkJSVE5DTEUxQlFVOUpMRWRCUTB4V0xHMUNRVUZ4UWswc2NVSkJha0kzUWl4SFFYZEZRU3hKUVVWSlZTeGhRVVpCUXl4TlFVRlJMRWRCUTFKRExGVkJRVmNzUlVGRldFTXNXVUZCWXl4RlFVVnNRaXhUUVVGVFF5eHJRa0ZEUVVZc1ZVRkJZVVlzWlVGSGJFSkZMRlZCUVZjc1JVRkRVRVlzWVVGQllVc3NUMEZEWWtvc1RVRkJVVVFzWVVGQllVMHNUMEZCVDB3c1QwRkZOVUpGTEZsQlFXTXNSVUZGWkVZc1RVRkJUVWtzVVVGRFRrVXNZMEZKVWl4VFFVRlRRU3hoUVVOTUxFbEJRVWxNTEZOQlFVb3NRMEZIUVN4SlFVRkpUU3hGUVVGVmFrSXNWMEZCVjJFc2FVSkJRM3BDUml4VlFVRlhMRVZCUjFnc1NVRkVRU3hKUVVGSlR5eEZRVUZOVWl4TlFVRk5TU3hQUVVOV1NTeEhRVUZMTEVOQlIxQXNTVUZHUVZRc1lVRkJaVU1zVFVGRFprRXNUVUZCVVN4TFFVTkRSU3hYUVVGaFRTeEhRVU5rVkN4alFVTkJRU3hoUVVGaFJ5eFpRVUZaVHl4TlFVZHFRMUFzV1VGQll5eEZRVU5rVFN4RlFVRk5VaXhOUVVGTlNTeFBRVVZvUWt3c1lVRkJaU3hMUVVObVJTeFZRVUZYTEVWQlExaE1MR2RDUVVGblFsY3NTVUZwUW5CQ0xGTkJRVk5ITEV0QlFVdHVRaXhGUVVGTGIwSXNSMEZEWm1oQ0xFdEJRVXRLTEVsQlFVMUJMRVZCUTFoSkxFdEJRVXRuUWl4TlFVRlJRU3hGUVZscVFpeFRRVUZUUXl4UlFUVkNWRFZDTEZGQlFWRTJRaXhUUVVGWExGTkJRVlYwUWl4SFFVTjZRaXhKUVVGSmRVSXNSVUZCVHl4SlFVRkpReXhOUVVGTlF5eFZRVUZWV2l4UFFVRlRMRWRCUTNoRExFZEJRVWxaTEZWQlFWVmFMRTlCUVZNc1JVRkRia0lzU1VGQlN5eEpRVUZKWVN4RlFVRkpMRVZCUVVkQkxFVkJRVWxFTEZWQlFWVmFMRTlCUVZGaExFbEJRMnhEU0N4RlFVRkxSeXhGUVVGSkxFZEJRVXRFTEZWQlFWVkRMRWRCUjJoRGFrSXNUVUZCVFd0Q0xFdEJRVXNzU1VGQlNWSXNTMEZCUzI1Q0xFVkJRVXQxUWl4SlFVTktMRWxCUVdwQ1pDeE5RVUZOU1N4UlFVRnBRa2dzVlVGRGRrSllMRmRCUVZkblFpeGhRVk51UWtrc1MwRkJTMU1zVlVGQlZWWXNTVUZCVFN4WFFVTnFRbVFzUzBGQlMwb3NTVUZCU1RaQ0xFMUJRVTBzUzBGQlRYcENMRXRCUVV0blFpeFJRVVU1UWpOQ0xGRkJRVkZ4UXl4TlFVRlJMRlZCUTJoQ2NrTXNVVUZCVVhORExGTkJRVlVzUlVGRGJFSjBReXhSUVVGUmRVTXNTVUZCVFN4SFFVTmtka01zVVVGQlVYZERMRXRCUVU4c1IwRkRabmhETEZGQlFWRjVReXhSUVVGVkxFZEJRMnhDZWtNc1VVRkJVVEJETEZOQlFWY3NSMEZKYmtJeFF5eFJRVUZSTWtNc1IwRkJTMllzUzBGRFlqVkNMRkZCUVZFMFF5eFpRVUZqYUVJc1MwRkRkRUkxUWl4UlFVRlJOa01zUzBGQlQycENMRXRCUTJZMVFpeFJRVUZST0VNc1NVRkJUV3hDTEV0QlEyUTFRaXhSUVVGUkswTXNaVUZCYVVKdVFpeExRVU42UWpWQ0xGRkJRVkZuUkN4dFFrRkJjVUp3UWl4TFFVTTNRalZDTEZGQlFWRnBSQ3hMUVVGUGNrSXNTMEZEWmpWQ0xGRkJRVkZyUkN4blFrRkJhMEowUWl4TFFVTXhRalZDTEZGQlFWRnRSQ3h2UWtGQmMwSjJRaXhMUVVVNVFqVkNMRkZCUVZGdlJDeFZRVUZaTEZOQlFWVkRMRWRCUVZFc1RVRkJUeXhKUVVVM1EzSkVMRkZCUVZGelJDeFJRVUZWTEZOQlFWVkVMRWRCUTNoQ0xFMUJRVTBzU1VGQlNXcEVMRTFCUVUwc2NVTkJSM0JDU2l4UlFVRlJkVVFzU1VGQlRTeFhRVUZqTEUxQlFVOHNTMEZEYmtOMlJDeFJRVUZSZDBRc1RVRkJVU3hUUVVGVlF5eEhRVU4wUWl4TlFVRk5MRWxCUVVseVJDeE5RVUZOTEcxRFFVVndRa29zVVVGQlVUQkVMRTFCUVZFc1YwRkJZU3hQUVVGUElpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDNCeWIyTmxjM012WW5KdmQzTmxjaTVxY3lKOSIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGV4cG9ydHMuZGVmYXVsdD1hbGw7dmFyIF9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcj1yZXF1aXJlKFwiLi91dGlscy9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlclwiKSxfY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1mdW5jdGlvbiBhbGwoKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCxyPUFycmF5KGUpLGE9MDthPGU7YSsrKXJbYV09YXJndW1lbnRzW2FdO3JldHVybigwLF9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcjIuZGVmYXVsdCkoZnVuY3Rpb24gYWxsUHJvcFR5cGVzKCl7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGgsYT1BcnJheShlKSxsPTA7bDxlO2wrKylhW2xdPWFyZ3VtZW50c1tsXTt2YXIgdD1udWxsO3JldHVybiByLmZvckVhY2goZnVuY3Rpb24oZSl7aWYobnVsbD09dCl7dmFyIHI9ZS5hcHBseSh2b2lkIDAsYSk7bnVsbCE9ciYmKHQ9cil9fSksdH0pfW1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltRnNiQzVxY3lKZExDSnVZVzFsY3lJNld5SlBZbXBsWTNRaUxDSmtaV1pwYm1WUWNtOXdaWEowZVNJc0ltVjRjRzl5ZEhNaUxDSjJZV3gxWlNJc0ltUmxabUYxYkhRaUxDSmhiR3dpTENKZlkzSmxZWFJsUTJoaGFXNWhZbXhsVkhsd1pVTm9aV05yWlhJaUxDSnlaWEYxYVhKbElpd2lYMk55WldGMFpVTm9ZV2x1WVdKc1pWUjVjR1ZEYUdWamEyVnlNaUlzSWw5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUWlMQ0p2WW1vaUxDSmZYMlZ6VFc5a2RXeGxJaXdpWDJ4bGJpSXNJbUZ5WjNWdFpXNTBjeUlzSW14bGJtZDBhQ0lzSW5aaGJHbGtZWFJ2Y25NaUxDSkJjbkpoZVNJc0lsOXJaWGtpTENKaGJHeFFjbTl3Vkhsd1pYTWlMQ0pmYkdWdU1pSXNJbUZ5WjNNaUxDSmZhMlY1TWlJc0ltVnljbTl5SWl3aVptOXlSV0ZqYUNJc0luWmhiR2xrWVhSdmNpSXNJbkpsYzNWc2RDSXNJbUZ3Y0d4NUlpd2lkVzVrWldacGJtVmtJaXdpYlc5a2RXeGxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVWQlFTeFBRVUZQUXl4bFFVRmxReXhSUVVGVExHRkJRV01zUTBGRE0wTkRMRTlCUVU4c1NVRkZWRVFzVVVGQlVVVXNVVUZCVlVNc1NVRkZiRUlzU1VGQlNVTXNORUpCUVRoQ1F5eFJRVUZSTEhORFFVVjBRME1zTmtKQlFTdENReXgxUWtGQmRVSklMRFpDUVVVeFJDeFRRVUZUUnl4MVFrRkJkVUpETEVkQlFVOHNUMEZCVDBFc1IwRkJUMEVzUlVGQlNVTXNWMEZCWVVRc1JVRkJUU3hEUVVGRlRpeFJRVUZUVFN4SFFVVjJSaXhUUVVGVFRDeE5RVU5RTEVsQlFVc3NTVUZCU1U4c1JVRkJUME1zVlVGQlZVTXNUMEZCVVVNc1JVRkJZVU1zVFVGQlRVb3NSMEZCVDBzc1JVRkJUeXhGUVVGSFFTeEZRVUZQVEN4RlFVRk5TeXhKUVVOcVJrWXNSVUZCVjBVc1IwRkJVVW9zVlVGQlZVa3NSMEYzUWk5Q0xFOUJRVThzUlVGQlNWUXNOa0pCUVRaQ1NpeFRRWEpDZUVNc1UwRkJVMk1zWlVGRFVDeEpRVUZMTEVsQlFVbERMRVZCUVZGT0xGVkJRVlZETEU5QlFWRk5MRVZCUVU5S0xFMUJRVTFITEVkQlFWRkZMRVZCUVZFc1JVRkJSMEVzUlVGQlVVWXNSVUZCVDBVc1NVRkRhRVpFTEVWQlFVdERMRWRCUVZOU0xGVkJRVlZSTEVkQlJ6RkNMRWxCUVVsRExFVkJRVkVzUzBGaFdpeFBRVmhCVUN4RlFVRlhVU3hSUVVGUkxGTkJRVlZETEVkQlF6TkNMRWRCUVdFc1RVRkJWRVlzUlVGQlNpeERRVWxCTEVsQlFVbEhMRVZCUVZORUxFVkJRVlZGTEZkQlFVMURMRVZCUVZkUUxFZEJRekZDTEUxQlFWWkxMRWxCUTBaSUxFVkJRVkZITEUxQlNVeElMRWxCUzFoTkxFOUJRVTh4UWl4UlFVRlZRU3hSUVVGcFFpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5d2NtOXdMWFI1Y0dWekxXVjRkSEpoTDJ4cFlpOWhiR3d1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgX3R5cGVvZj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfSxfcmVhY3Q9cmVxdWlyZShcInJlYWN0XCIpLF9yZWFjdDI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpLF9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcj1yZXF1aXJlKFwiLi91dGlscy9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlclwiKSxfY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1mdW5jdGlvbiB2YWxpZGF0ZShlLHQsbyxyLGEpe3ZhciBuPWVbdF0sbD12b2lkIDA9PT1uP1widW5kZWZpbmVkXCI6X3R5cGVvZihuKTtyZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmlzVmFsaWRFbGVtZW50KG4pP25ldyBFcnJvcihcIkludmFsaWQgXCIrcitcIiBgXCIrYStcImAgb2YgdHlwZSBSZWFjdEVsZW1lbnQgc3VwcGxpZWQgdG8gYFwiK28rXCJgLCBleHBlY3RlZCBhIFJlYWN0Q29tcG9uZW50IG9yIGEgRE9NRWxlbWVudC4gWW91IGNhbiB1c3VhbGx5IG9idGFpbiBhIFJlYWN0Q29tcG9uZW50IG9yIERPTUVsZW1lbnQgZnJvbSBhIFJlYWN0RWxlbWVudCBieSBhdHRhY2hpbmcgYSByZWYgdG8gaXQuXCIpOlwib2JqZWN0XCI9PT1sJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBuLnJlbmRlcnx8MT09PW4ubm9kZVR5cGU/bnVsbDpuZXcgRXJyb3IoXCJJbnZhbGlkIFwiK3IrXCIgYFwiK2ErXCJgIG9mIHZhbHVlIGBcIituK1wiYCBzdXBwbGllZCB0byBgXCIrbytcImAsIGV4cGVjdGVkIGEgUmVhY3RDb21wb25lbnQgb3IgYSBET01FbGVtZW50LlwiKX1leHBvcnRzLmRlZmF1bHQ9KDAsX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyMi5kZWZhdWx0KSh2YWxpZGF0ZSksbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1OdmJYQnZibVZ1ZEU5eVJXeGxiV1Z1ZEM1cWN5SmRMQ0p1WVcxbGN5STZXeUpQWW1wbFkzUWlMQ0prWldacGJtVlFjbTl3WlhKMGVTSXNJbVY0Y0c5eWRITWlMQ0oyWVd4MVpTSXNJbDkwZVhCbGIyWWlMQ0pUZVcxaWIyd2lMQ0pwZEdWeVlYUnZjaUlzSW05aWFpSXNJbU52Ym5OMGNuVmpkRzl5SWl3aWNISnZkRzkwZVhCbElpd2lYM0psWVdOMElpd2ljbVZ4ZFdseVpTSXNJbDl5WldGamRESWlMQ0pmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MElpd2lYMk55WldGMFpVTm9ZV2x1WVdKc1pWUjVjR1ZEYUdWamEyVnlJaXdpWDJOeVpXRjBaVU5vWVdsdVlXSnNaVlI1Y0dWRGFHVmphMlZ5TWlJc0lsOWZaWE5OYjJSMWJHVWlMQ0prWldaaGRXeDBJaXdpZG1Gc2FXUmhkR1VpTENKd2NtOXdjeUlzSW5CeWIzQk9ZVzFsSWl3aVkyOXRjRzl1Wlc1MFRtRnRaU0lzSW14dlkyRjBhVzl1SWl3aWNISnZjRVoxYkd4T1lXMWxJaXdpY0hKdmNGWmhiSFZsSWl3aWNISnZjRlI1Y0dVaUxDSnBjMVpoYkdsa1JXeGxiV1Z1ZENJc0lrVnljbTl5SWl3aWNtVnVaR1Z5SWl3aWJtOWtaVlI1Y0dVaUxDSnRiMlIxYkdVaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJSVUZCTEU5QlFVOURMR1ZCUVdWRExGRkJRVk1zWVVGQll5eERRVU16UTBNc1QwRkJUeXhKUVVkVUxFbEJRVWxETEZGQlFUUkNMRzFDUVVGWVF5eFJRVUZ2UkN4cFFrRkJjRUpCTEU5QlFVOURMRk5CUVhkQ0xGTkJRVlZETEVkQlFVOHNZMEZCWTBFc1IwRkJVeXhUUVVGVlFTeEhRVUZQTEU5QlFVOUJMRWRCUVhsQ0xHMUNRVUZZUml4UlFVRjVRa1VzUlVGQlNVTXNZMEZCWjBKSUxGRkJRVlZGTEVsQlFWRkdMRTlCUVU5SkxGVkJRVmtzWjBKQlFXdENSaXhIUVVWc1VVY3NUMEZCVTBNc1VVRkJVU3hUUVVWcVFrTXNVVUZCVlVNc2RVSkJRWFZDU0N4UlFVVnFRMGtzTkVKQlFUaENTQ3hSUVVGUkxITkRRVVYwUTBrc05rSkJRU3RDUml4MVFrRkJkVUpETERaQ1FVVXhSQ3hUUVVGVFJDeDFRa0ZCZFVKT0xFZEJRVThzVDBGQlQwRXNSMEZCVDBFc1JVRkJTVk1zVjBGQllWUXNSVUZCVFN4RFFVRkZWU3hSUVVGVFZpeEhRVVYyUml4VFFVRlRWeXhUUVVGVFF5eEZRVUZQUXl4RlFVRlZReXhGUVVGbFF5eEZRVUZWUXl4SFFVTXhSQ3hKUVVGSlF5eEZRVUZaVEN4RlFVRk5ReXhIUVVOc1Frc3NUMEZCWjBNc1NVRkJaRVFzUlVGQk5FSXNXVUZCWTNCQ0xGRkJRVkZ2UWl4SFFVVjRSU3hQUVVGSldpeFJRVUZSU3l4UlFVRlJVeXhsUVVGbFJpeEhRVU14UWl4SlFVRkpSeXhOUVVGTkxGZEJRV0ZNTEVWQlFWY3NTMEZCVDBNc1JVRkJaU3gxUTBGQkswTkdMRVZCUVdkQ0xIRktRVWM1Unl4WFFVRmlTU3hIUVVGeFJDeHRRa0ZCY2tKRUxFVkJRVlZKTEZGQlFXbEVMRWxCUVhaQ1NpeEZRVUZWU3l4VFFVazFSU3hMUVVoRkxFbEJRVWxHTEUxQlFVMHNWMEZCWVV3c1JVRkJWeXhMUVVGUFF5eEZRVUZsTEdWQlFXbENReXhGUVVGWkxHdENRVUV3UWtnc1JVRkJaMElzYVVSQlRURkpia0lzVVVGQlVXVXNVMEZCVlN4RlFVRkpSaXcyUWtGQk5rSkZMRk5CUVZORExGVkJRelZFV1N4UFFVRlBOVUlzVVVGQlZVRXNVVUZCYVVJaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Y0hKdmNDMTBlWEJsY3kxbGVIUnlZUzlzYVdJdlkyOXRjRzl1Wlc1MFQzSkZiR1Z0Wlc1MExtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZXhwb3J0cy5kZWZhdWx0PWRlcHJlY2F0ZWQ7dmFyIF93YXJuaW5nPXJlcXVpcmUoXCJ3YXJuaW5nXCIpLF93YXJuaW5nMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX12YXIgd2FybmVkPXt9O2Z1bmN0aW9uIGRlcHJlY2F0ZWQoZSxyKXtyZXR1cm4gZnVuY3Rpb24gdmFsaWRhdGUobixhLHQsZCx1KXt2YXIgaT10fHxcIjw8YW5vbnltb3VzPj5cIixvPXV8fGE7aWYobnVsbCE9blthXSl7dmFyIGw9dCtcIi5cIithOygwLF93YXJuaW5nMi5kZWZhdWx0KSh3YXJuZWRbbF0sXCJUaGUgXCIrZCtcIiBgXCIrbytcImAgb2YgYFwiK2krXCJgIGlzIGRlcHJlY2F0ZWQuIFwiK3IrXCIuXCIpLHdhcm5lZFtsXT0hMH1mb3IodmFyIGY9YXJndW1lbnRzLmxlbmd0aCxwPUFycmF5KGY+NT9mLTU6MCkscz01O3M8ZjtzKyspcFtzLTVdPWFyZ3VtZW50c1tzXTtyZXR1cm4gZS5hcHBseSh2b2lkIDAsW24sYSx0LGQsdV0uY29uY2F0KHApKX19ZnVuY3Rpb24gX3Jlc2V0V2FybmVkKCl7d2FybmVkPXt9fWRlcHJlY2F0ZWQuX3Jlc2V0V2FybmVkPV9yZXNldFdhcm5lZCxtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVJsY0hKbFkyRjBaV1F1YW5NaVhTd2libUZ0WlhNaU9sc2lUMkpxWldOMElpd2laR1ZtYVc1bFVISnZjR1Z5ZEhraUxDSmxlSEJ2Y25Seklpd2lkbUZzZFdVaUxDSmtaV1poZFd4MElpd2laR1Z3Y21WallYUmxaQ0lzSWw5M1lYSnVhVzVuSWl3aWNtVnhkV2x5WlNJc0lsOTNZWEp1YVc1bk1pSXNJbDlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRaUxDSnZZbW9pTENKZlgyVnpUVzlrZFd4bElpd2lkMkZ5Ym1Wa0lpd2lkbUZzYVdSaGRHOXlJaXdpY21WaGMyOXVJaXdpZG1Gc2FXUmhkR1VpTENKd2NtOXdjeUlzSW5CeWIzQk9ZVzFsSWl3aVkyOXRjRzl1Wlc1MFRtRnRaU0lzSW14dlkyRjBhVzl1SWl3aWNISnZjRVoxYkd4T1lXMWxJaXdpWTI5dGNHOXVaVzUwVG1GdFpWTmhabVVpTENKd2NtOXdSblZzYkU1aGJXVlRZV1psSWl3aWJXVnpjMkZuWlV0bGVTSXNJbDlzWlc0aUxDSmhjbWQxYldWdWRITWlMQ0pzWlc1bmRHZ2lMQ0poY21keklpd2lRWEp5WVhraUxDSmZhMlY1SWl3aVlYQndiSGtpTENKMWJtUmxabWx1WldRaUxDSmpiMjVqWVhRaUxDSmZjbVZ6WlhSWFlYSnVaV1FpTENKdGIyUjFiR1VpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlJVRkJMRTlCUVU5RExHVkJRV1ZETEZGQlFWTXNZVUZCWXl4RFFVTXpRME1zVDBGQlR5eEpRVVZVUkN4UlFVRlJSU3hSUVVGVlF5eFhRVVZzUWl4SlFVRkpReXhUUVVGWFF5eFJRVUZSTEZkQlJXNUNReXhWUVVGWlF5eDFRa0ZCZFVKSUxGVkJSWFpETEZOQlFWTkhMSFZDUVVGMVFrTXNSMEZCVHl4UFFVRlBRU3hIUVVGUFFTeEZRVUZKUXl4WFFVRmhSQ3hGUVVGTkxFTkJRVVZPTEZGQlFWTk5MRWRCUlhaR0xFbEJRVWxGTEU5QlFWTXNSMEZGWWl4VFFVRlRVQ3hYUVVGWFVTeEZRVUZYUXl4SFFVTTNRaXhQUVVGUExGTkJRVk5ETEZOQlFWTkRMRVZCUVU5RExFVkJRVlZETEVWQlFXVkRMRVZCUVZWRExFZEJRMnBGTEVsQlFVbERMRVZCUVc5Q1NDeEhRVUZwUWl4blFrRkRja05KTEVWQlFXMUNSaXhIUVVGblFrZ3NSVUZGZGtNc1IwRkJkVUlzVFVGQmJrSkVMRVZCUVUxRExFZEJRVzFDTEVOQlF6TkNMRWxCUVVsTkxFVkJRV0ZNTEVWQlFXZENMRWxCUVUxRUxFZEJSWFpETEVWQlFVbFVMRlZCUVZWS0xGTkJRVk5STEU5QlFVOVhMRWRCUVdFc1QwRkJVMG9zUlVGQlZ5eExRVUZQUnl4RlFVRnRRaXhUUVVGcFFrUXNSVUZCYjBJc2IwSkJRWE5DVUN4RlFVRlRMRXRCUlRkS1JpeFBRVUZQVnl4SlFVRmpMRVZCUjNaQ0xFbEJRVXNzU1VGQlNVTXNSVUZCVDBNc1ZVRkJWVU1zVDBGQlVVTXNSVUZCVDBNc1RVRkJUVW9zUlVGQlR5eEZRVUZKUVN4RlFVRlBMRVZCUVVrc1IwRkJTVXNzUlVGQlR5eEZRVUZIUVN4RlFVRlBUQ3hGUVVGTlN5eEpRVU01UmtZc1JVRkJTMFVzUlVGQlR5eEhRVUZMU2l4VlFVRlZTU3hIUVVjM1FpeFBRVUZQYUVJc1JVRkJWV2xDTEZkQlFVMURMRVZCUVZjc1EwRkJRMllzUlVGQlQwTXNSVUZCVlVNc1JVRkJaVU1zUlVGQlZVTXNSMEZCWTFrc1QwRkJUMHdzUzBGTGRFY3NVMEZCVTAwc1pVRkRVSEpDTEU5QlFWTXNSMEZIV0ZBc1YwRkJWelJDTEdGQlFXVkJMR0ZCUnpGQ1F5eFBRVUZQYUVNc1VVRkJWVUVzVVVGQmFVSWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNISnZjQzEwZVhCbGN5MWxlSFJ5WVM5c2FXSXZaR1Z3Y21WallYUmxaQzVxY3lKOSIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBfcmVhY3Q9cmVxdWlyZShcInJlYWN0XCIpLF9yZWFjdDI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpLF9yZWFjdElzPXJlcXVpcmUoXCJyZWFjdC1pc1wiKSxfY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXI9cmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXJcIiksX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcik7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19ZnVuY3Rpb24gZWxlbWVudFR5cGUoZSx0LHIsYSxuKXt2YXIgbD1lW3RdO3JldHVybiBfcmVhY3QyLmRlZmF1bHQuaXNWYWxpZEVsZW1lbnQobCk/bmV3IEVycm9yKFwiSW52YWxpZCBcIithK1wiIGBcIituK1wiYCBvZiB0eXBlIFJlYWN0RWxlbWVudCBzdXBwbGllZCB0byBgXCIrcitcImAsZXhwZWN0ZWQgYW4gZWxlbWVudCB0eXBlIChhIHN0cmluZyAsIGNvbXBvbmVudCBjbGFzcywgb3IgZnVuY3Rpb24gY29tcG9uZW50KS5cIik6KDAsX3JlYWN0SXMuaXNWYWxpZEVsZW1lbnRUeXBlKShsKT9udWxsOm5ldyBFcnJvcihcIkludmFsaWQgXCIrYStcIiBgXCIrbitcImAgb2YgdmFsdWUgYFwiK2wrXCJgIHN1cHBsaWVkIHRvIGBcIityK1wiYCwgZXhwZWN0ZWQgYW4gZWxlbWVudCB0eXBlIChhIHN0cmluZyAsIGNvbXBvbmVudCBjbGFzcywgb3IgZnVuY3Rpb24gY29tcG9uZW50KS5cIil9ZXhwb3J0cy5kZWZhdWx0PSgwLF9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcjIuZGVmYXVsdCkoZWxlbWVudFR5cGUpLG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnNaVzFsYm5SVWVYQmxMbXB6SWwwc0ltNWhiV1Z6SWpwYklrOWlhbVZqZENJc0ltUmxabWx1WlZCeWIzQmxjblI1SWl3aVpYaHdiM0owY3lJc0luWmhiSFZsSWl3aVgzSmxZV04wSWl3aWNtVnhkV2x5WlNJc0lsOXlaV0ZqZERJaUxDSmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwSWl3aVgzSmxZV04wU1hNaUxDSmZZM0psWVhSbFEyaGhhVzVoWW14bFZIbHdaVU5vWldOclpYSWlMQ0pmWTNKbFlYUmxRMmhoYVc1aFlteGxWSGx3WlVOb1pXTnJaWEl5SWl3aWIySnFJaXdpWDE5bGMwMXZaSFZzWlNJc0ltUmxabUYxYkhRaUxDSmxiR1Z0Wlc1MFZIbHdaU0lzSW5CeWIzQnpJaXdpY0hKdmNFNWhiV1VpTENKamIyMXdiMjVsYm5ST1lXMWxJaXdpYkc5allYUnBiMjRpTENKd2NtOXdSblZzYkU1aGJXVWlMQ0p3Y205d1ZtRnNkV1VpTENKcGMxWmhiR2xrUld4bGJXVnVkQ0lzSWtWeWNtOXlJaXdpYVhOV1lXeHBaRVZzWlcxbGJuUlVlWEJsSWl3aWJXOWtkV3hsSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4aFFVVkJRU3hQUVVGUFF5eGxRVUZsUXl4UlFVRlRMR0ZCUVdNc1EwRkRNME5ETEU5QlFVOHNTVUZIVkN4SlFVRkpReXhQUVVGVFF5eFJRVUZSTEZOQlJXcENReXhSUVVGVlF5eDFRa0ZCZFVKSUxGRkJSV3BEU1N4VFFVRlhTQ3hSUVVGUkxGbEJSVzVDU1N3MFFrRkJPRUpLTEZGQlFWRXNjME5CUlhSRFN5dzJRa0ZCSzBKSUxIVkNRVUYxUWtVc05rSkJSVEZFTEZOQlFWTkdMSFZDUVVGMVFra3NSMEZCVHl4UFFVRlBRU3hIUVVGUFFTeEZRVUZKUXl4WFFVRmhSQ3hGUVVGTkxFTkJRVVZGTEZGQlFWTkdMRWRCUlhaR0xGTkJRVk5ITEZsQlFWbERMRVZCUVU5RExFVkJRVlZETEVWQlFXVkRMRVZCUVZWRExFZEJRemRFTEVsQlFVbERMRVZCUVZsTUxFVkJRVTFETEVkQlJYUkNMRTlCUVVsV0xGRkJRVkZQTEZGQlFWRlJMR1ZCUVdWRUxFZEJRekZDTEVsQlFVbEZMRTFCUVUwc1YwRkJZVW9zUlVGQlZ5eExRVUZQUXl4RlFVRmxMSFZEUVVFclEwWXNSVUZCWjBJc2IwWkJSek5JTEVWQlFVbFVMRk5CUVZObExHOUNRVUZ2UWtnc1IwRkpMMElzUzBGSVJTeEpRVUZKUlN4TlFVRk5MRmRCUVdGS0xFVkJRVmNzUzBGQlQwTXNSVUZCWlN4bFFVRnBRa01zUlVGQldTeHJRa0ZCTUVKSUxFVkJRV2RDTEc5R1FVMHhTV1lzVVVGQlVWY3NVMEZCVlN4RlFVRkpTQ3cyUWtGQk5rSkhMRk5CUVZORExHRkJRelZFVlN4UFFVRlBkRUlzVVVGQlZVRXNVVUZCYVVJaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Y0hKdmNDMTBlWEJsY3kxbGVIUnlZUzlzYVdJdlpXeGxiV1Z1ZEZSNWNHVXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO2Z1bmN0aW9uIGlzUmVxdWlyZWRGb3JBMTF5KGUpe3JldHVybiBmdW5jdGlvbiB2YWxpZGF0ZShyLHMsbyx0LHUpe3ZhciBpPW98fFwiPDxhbm9ueW1vdXM+PlwiLGE9dXx8cztpZihudWxsPT1yW3NdKXJldHVybiBuZXcgRXJyb3IoXCJUaGUgXCIrdCtcIiBgXCIrYStcImAgaXMgcmVxdWlyZWQgdG8gbWFrZSBgXCIraStcImAgYWNjZXNzaWJsZSBmb3IgdXNlcnMgb2YgYXNzaXN0aXZlIHRlY2hub2xvZ2llcyBzdWNoIGFzIHNjcmVlbiByZWFkZXJzLlwiKTtmb3IodmFyIG49YXJndW1lbnRzLmxlbmd0aCxsPUFycmF5KG4+NT9uLTU6MCksYz01O2M8bjtjKyspbFtjLTVdPWFyZ3VtZW50c1tjXTtyZXR1cm4gZS5hcHBseSh2b2lkIDAsW3IscyxvLHQsdV0uY29uY2F0KGwpKX19T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZXhwb3J0cy5kZWZhdWx0PWlzUmVxdWlyZWRGb3JBMTF5LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltbHpVbVZ4ZFdseVpXUkdiM0pCTVRGNUxtcHpJbDBzSW01aGJXVnpJanBiSW1selVtVnhkV2x5WldSR2IzSkJNVEY1SWl3aWRtRnNhV1JoZEc5eUlpd2lkbUZzYVdSaGRHVWlMQ0p3Y205d2N5SXNJbkJ5YjNCT1lXMWxJaXdpWTI5dGNHOXVaVzUwVG1GdFpTSXNJbXh2WTJGMGFXOXVJaXdpY0hKdmNFWjFiR3hPWVcxbElpd2lZMjl0Y0c5dVpXNTBUbUZ0WlZOaFptVWlMQ0p3Y205d1JuVnNiRTVoYldWVFlXWmxJaXdpUlhKeWIzSWlMQ0pmYkdWdUlpd2lZWEpuZFcxbGJuUnpJaXdpYkdWdVozUm9JaXdpWVhKbmN5SXNJa0Z5Y21GNUlpd2lYMnRsZVNJc0ltRndjR3g1SWl3aWRXNWtaV1pwYm1Wa0lpd2lZMjl1WTJGMElpd2lUMkpxWldOMElpd2laR1ZtYVc1bFVISnZjR1Z5ZEhraUxDSmxlSEJ2Y25Seklpd2lkbUZzZFdVaUxDSmtaV1poZFd4MElpd2liVzlrZFd4bElsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVTFCTEZOQlFWTkJMR3RDUVVGclFrTXNSMEZEZWtJc1QwRkJUeXhUUVVGVFF5eFRRVUZUUXl4RlFVRlBReXhGUVVGVlF5eEZRVUZsUXl4RlFVRlZReXhIUVVOcVJTeEpRVUZKUXl4RlFVRnZRa2dzUjBGQmFVSXNaMEpCUTNKRFNTeEZRVUZ0UWtZc1IwRkJaMEpJTEVWQlJYWkRMRWRCUVhWQ0xFMUJRVzVDUkN4RlFVRk5ReXhIUVVOU0xFOUJRVThzU1VGQlNVMHNUVUZCVFN4UFFVRlRTaXhGUVVGWExFdEJRVTlITEVWQlFXMUNMREJDUVVGclEwUXNSVUZCYjBJc05FVkJSM1pJTEVsQlFVc3NTVUZCU1Vjc1JVRkJUME1zVlVGQlZVTXNUMEZCVVVNc1JVRkJUME1zVFVGQlRVb3NSVUZCVHl4RlFVRkpRU3hGUVVGUExFVkJRVWtzUjBGQlNVc3NSVUZCVHl4RlFVRkhRU3hGUVVGUFRDeEZRVUZOU3l4SlFVTTVSa1lzUlVGQlMwVXNSVUZCVHl4SFFVRkxTaXhWUVVGVlNTeEhRVWMzUWl4UFFVRlBaaXhGUVVGVlowSXNWMEZCVFVNc1JVRkJWeXhEUVVGRFppeEZRVUZQUXl4RlFVRlZReXhGUVVGbFF5eEZRVUZWUXl4SFFVRmpXU3hQUVVGUFRDeExRV3BDZEVkTkxFOUJRVTlETEdWQlFXVkRMRkZCUVZNc1lVRkJZeXhEUVVNelEwTXNUMEZCVHl4SlFVVlVSQ3hSUVVGUlJTeFJRVUZWZUVJc2EwSkJhVUpzUW5sQ0xFOUJRVTlJTEZGQlFWVkJMRkZCUVdsQ0lpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDNCeWIzQXRkSGx3WlhNdFpYaDBjbUV2YkdsaUwybHpVbVZ4ZFdseVpXUkdiM0pCTVRGNUxtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIoZSl7ZnVuY3Rpb24gY2hlY2tUeXBlKHIsbix0LHUsYSxjKXt2YXIgbD11fHxcIjw8YW5vbnltb3VzPj5cIixpPWN8fHQ7aWYobnVsbD09blt0XSlyZXR1cm4gcj9uZXcgRXJyb3IoXCJSZXF1aXJlZCBcIithK1wiIGBcIitpK1wiYCB3YXMgbm90IHNwZWNpZmllZCBpbiBgXCIrbCtcImAuXCIpOm51bGw7Zm9yKHZhciBvPWFyZ3VtZW50cy5sZW5ndGgscD1BcnJheShvPjY/by02OjApLGQ9NjtkPG87ZCsrKXBbZC02XT1hcmd1bWVudHNbZF07cmV0dXJuIGUuYXBwbHkodm9pZCAwLFtuLHQsbCxhLGldLmNvbmNhdChwKSl9dmFyIHI9Y2hlY2tUeXBlLmJpbmQobnVsbCwhMSk7cmV0dXJuIHIuaXNSZXF1aXJlZD1jaGVja1R5cGUuYmluZChudWxsLCEwKSxyfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGV4cG9ydHMuZGVmYXVsdD1jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcixtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbU55WldGMFpVTm9ZV2x1WVdKc1pWUjVjR1ZEYUdWamEyVnlMbXB6SWwwc0ltNWhiV1Z6SWpwYkltTnlaV0YwWlVOb1lXbHVZV0pzWlZSNWNHVkRhR1ZqYTJWeUlpd2lkbUZzYVdSaGRHVWlMQ0pqYUdWamExUjVjR1VpTENKcGMxSmxjWFZwY21Wa0lpd2ljSEp2Y0hNaUxDSndjbTl3VG1GdFpTSXNJbU52YlhCdmJtVnVkRTVoYldVaUxDSnNiMk5oZEdsdmJpSXNJbkJ5YjNCR2RXeHNUbUZ0WlNJc0ltTnZiWEJ2Ym1WdWRFNWhiV1ZUWVdabElpd2ljSEp2Y0VaMWJHeE9ZVzFsVTJGbVpTSXNJa1Z5Y205eUlpd2lYMnhsYmlJc0ltRnlaM1Z0Wlc1MGN5SXNJbXhsYm1kMGFDSXNJbUZ5WjNNaUxDSkJjbkpoZVNJc0lsOXJaWGtpTENKaGNIQnNlU0lzSW5WdVpHVm1hVzVsWkNJc0ltTnZibU5oZENJc0ltTm9ZV2x1WldSRGFHVmphMVI1Y0dVaUxDSmlhVzVrSWl3aVQySnFaV04wSWl3aVpHVm1hVzVsVUhKdmNHVnlkSGtpTENKbGVIQnZjblJ6SWl3aWRtRnNkV1VpTENKa1pXWmhkV3gwSWl3aWJXOWtkV3hsSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4aFFXbENRU3hUUVVGVFFTd3lRa0ZCTWtKRExFZEJRMnhETEZOQlFWTkRMRlZCUVZWRExFVkJRVmxETEVWQlFVOURMRVZCUVZWRExFVkJRV1ZETEVWQlFWVkRMRWRCUTNaRkxFbEJRVWxETEVWQlFXOUNTQ3hIUVVGcFFpeG5Ra0ZEY2tOSkxFVkJRVzFDUml4SFFVRm5Ra2dzUlVGRmRrTXNSMEZCZFVJc1RVRkJia0pFTEVWQlFVMURMRWRCUTFJc1QwRkJTVVlzUlVGRFN5eEpRVUZKVVN4TlFVRk5MRmxCUVdOS0xFVkJRVmNzUzBGQlQwY3NSVUZCYlVJc01rSkJRVzFEUkN4RlFVRnZRaXhOUVVkMFNDeExRVWRVTEVsQlFVc3NTVUZCU1Vjc1JVRkJUME1zVlVGQlZVTXNUMEZCVVVNc1JVRkJUME1zVFVGQlRVb3NSVUZCVHl4RlFVRkpRU3hGUVVGUExFVkJRVWtzUjBGQlNVc3NSVUZCVHl4RlFVRkhRU3hGUVVGUFRDeEZRVUZOU3l4SlFVTTVSa1lzUlVGQlMwVXNSVUZCVHl4SFFVRkxTaXhWUVVGVlNTeEhRVWMzUWl4UFFVRlBhRUlzUlVGQlUybENMRmRCUVUxRExFVkJRVmNzUTBGQlEyWXNSVUZCVDBNc1JVRkJWVWtzUlVGQmJVSkdMRVZCUVZWSExFZEJRV3RDVlN4UFFVRlBUQ3hKUVVjelJ5eEpRVUZKVFN4RlFVRnRRbTVDTEZWQlFWVnZRaXhMUVVGTExFMUJRVTBzUjBGSE5VTXNUMEZHUVVRc1JVRkJhVUpzUWl4WFFVRmhSQ3hWUVVGVmIwSXNTMEZCU3l4TlFVRk5MRWRCUlRWRFJDeEZRWFJEVkVVc1QwRkJUME1zWlVGQlpVTXNVVUZCVXl4aFFVRmpMRU5CUXpORFF5eFBRVUZQTEVsQlJWUkVMRkZCUVZGRkxGRkJRVlV6UWl3eVFrRnhRMnhDTkVJc1QwRkJUMGdzVVVGQlZVRXNVVUZCYVVJaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Y0hKdmNDMTBlWEJsY3kxbGVIUnlZUzlzYVdJdmRYUnBiSE12WTNKbFlYUmxRMmhoYVc1aFlteGxWSGx3WlVOb1pXTnJaWEl1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgcHJpbnRXYXJuaW5nPWZ1bmN0aW9uKCl7fTtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXt2YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQ9cmVxdWlyZShcIi4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0XCIpLGxvZ2dlZFR5cGVGYWlsdXJlcz17fTtwcmludFdhcm5pbmc9ZnVuY3Rpb24oZSl7dmFyIHI9XCJXYXJuaW5nOiBcIitlO1widW5kZWZpbmVkXCIhPXR5cGVvZiBjb25zb2xlJiZjb25zb2xlLmVycm9yKHIpO3RyeXt0aHJvdyBuZXcgRXJyb3Iocil9Y2F0Y2goZSl7fX19ZnVuY3Rpb24gY2hlY2tQcm9wVHlwZXMoZSxyLG4sdCxhKXtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKWZvcih2YXIgbyBpbiBlKWlmKGUuaGFzT3duUHJvcGVydHkobykpe3ZhciBpO3RyeXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlW29dKXt2YXIgYz1FcnJvcigodHx8XCJSZWFjdCBjbGFzc1wiKStcIjogXCIrbitcIiB0eXBlIGBcIitvK1wiYCBpcyBpbnZhbGlkOyBpdCBtdXN0IGJlIGEgZnVuY3Rpb24sIHVzdWFsbHkgZnJvbSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UsIGJ1dCByZWNlaXZlZCBgXCIrdHlwZW9mIGVbb10rXCJgLlwiKTt0aHJvdyBjLm5hbWU9XCJJbnZhcmlhbnQgVmlvbGF0aW9uXCIsY31pPWVbb10ocixvLHQsbixudWxsLFJlYWN0UHJvcFR5cGVzU2VjcmV0KX1jYXRjaChlKXtpPWV9aWYoIWl8fGkgaW5zdGFuY2VvZiBFcnJvcnx8cHJpbnRXYXJuaW5nKCh0fHxcIlJlYWN0IGNsYXNzXCIpK1wiOiB0eXBlIHNwZWNpZmljYXRpb24gb2YgXCIrbitcIiBgXCIrbytcImAgaXMgaW52YWxpZDsgdGhlIHR5cGUgY2hlY2tlciBmdW5jdGlvbiBtdXN0IHJldHVybiBgbnVsbGAgb3IgYW4gYEVycm9yYCBidXQgcmV0dXJuZWQgYSBcIit0eXBlb2YgaStcIi4gWW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBwYXNzIGFuIGFyZ3VtZW50IHRvIHRoZSB0eXBlIGNoZWNrZXIgY3JlYXRvciAoYXJyYXlPZiwgaW5zdGFuY2VPZiwgb2JqZWN0T2YsIG9uZU9mLCBvbmVPZlR5cGUsIGFuZCBzaGFwZSBhbGwgcmVxdWlyZSBhbiBhcmd1bWVudCkuXCIpLGkgaW5zdGFuY2VvZiBFcnJvciYmIShpLm1lc3NhZ2UgaW4gbG9nZ2VkVHlwZUZhaWx1cmVzKSl7bG9nZ2VkVHlwZUZhaWx1cmVzW2kubWVzc2FnZV09ITA7dmFyIHM9YT9hKCk6XCJcIjtwcmludFdhcm5pbmcoXCJGYWlsZWQgXCIrbitcIiB0eXBlOiBcIitpLm1lc3NhZ2UrKG51bGwhPXM/czpcIlwiKSl9fX1tb2R1bGUuZXhwb3J0cz1jaGVja1Byb3BUeXBlcztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltTm9aV05yVUhKdmNGUjVjR1Z6TG1weklsMHNJbTVoYldWeklqcGJJbkJ5YVc1MFYyRnlibWx1WnlJc0luQnliMk5sYzNNaUxDSmxibllpTENKT1QwUkZYMFZPVmlJc0lsSmxZV04wVUhKdmNGUjVjR1Z6VTJWamNtVjBJaXdpY21WeGRXbHlaU0lzSW14dloyZGxaRlI1Y0dWR1lXbHNkWEpsY3lJc0luUmxlSFFpTENKdFpYTnpZV2RsSWl3aVkyOXVjMjlzWlNJc0ltVnljbTl5SWl3aVJYSnliM0lpTENKNElpd2lZMmhsWTJ0UWNtOXdWSGx3WlhNaUxDSjBlWEJsVTNCbFkzTWlMQ0oyWVd4MVpYTWlMQ0pzYjJOaGRHbHZiaUlzSW1OdmJYQnZibVZ1ZEU1aGJXVWlMQ0puWlhSVGRHRmpheUlzSW5SNWNHVlRjR1ZqVG1GdFpTSXNJbWhoYzA5M2JsQnliM0JsY25SNUlpd2laWEp5SWl3aWJtRnRaU0lzSW1WNElpd2ljM1JoWTJzaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25SeklsMHNJbTFoY0hCcGJtZHpJam9pUVVGUFFTeGhRVVZCTEVsQlFVbEJMR0ZCUVdVc1lVRkZia0lzUjBGQk5rSXNaVUZCZWtKRExGRkJRVkZETEVsQlFVbERMRk5CUVRKQ0xFTkJRM3BETEVsQlFVbERMSEZDUVVGMVFrTXNVVUZCVVN3NFFrRkRMMEpETEcxQ1FVRnhRaXhIUVVWNlFrNHNZVUZCWlN4VFFVRlRUeXhIUVVOMFFpeEpRVUZKUXl4RlFVRlZMRmxCUVdORUxFVkJRMHdzYjBKQlFWcEZMRk5CUTFSQkxGRkJRVkZETEUxQlFVMUdMRWRCUldoQ0xFbEJTVVVzVFVGQlRTeEpRVUZKUnl4TlFVRk5TQ3hIUVVOb1FpeE5RVUZQU1N4TlFXVmlMRk5CUVZORExHVkJRV1ZETEVWQlFWZERMRVZCUVZGRExFVkJRVlZETEVWQlFXVkRMRWRCUTJ4RkxFZEJRVFpDTEdWQlFYcENha0lzVVVGQlVVTXNTVUZCU1VNc1UwRkRaQ3hKUVVGTExFbEJRVWxuUWl4TFFVRm5Ra3dzUlVGRGRrSXNSMEZCU1VFc1JVRkJWVTBzWlVGQlpVUXNSMEZCWlN4RFFVTXhReXhKUVVGSlZDeEZRVWxLTEVsQlIwVXNSMEZCZFVNc2JVSkJRVFZDU1N4RlFVRlZTeXhIUVVFNFFpeERRVU5xUkN4SlFVRkpSU3hGUVVGTlZpeFBRVU5RVFN4SFFVRnBRaXhsUVVGcFFpeExRVUZQUkN4RlFVRlhMRlZCUVZsSExFVkJRV1VzYjBkQlExRk1MRVZCUVZWTExFZEJRV2RDTEUxQlIzQklMRTFCUkVGRkxFVkJRVWxETEV0QlFVOHNjMEpCUTB4RUxFVkJSVkpZTEVWQlFWRkpMRVZCUVZWTExFZEJRV05LTEVWQlFWRkpMRVZCUVdOR0xFVkJRV1ZFTEVWQlFWVXNTMEZCVFZvc2MwSkJRM0pHTEUxQlFVOXRRaXhIUVVOUVlpeEZRVUZSWVN4RlFXRldMRWxCV0VsaUxFZEJRVmRCTEdGQlFXbENReXhQUVVNNVFsZ3NZMEZEUjJsQ0xFZEJRV2xDTEdWQlFXbENMREpDUVVOdVEwUXNSVUZCVnl4TFFVRlBSeXhGUVVGbExHdEhRVU52UTFRc1JVRkJVU3hyUzBGUE4wVkJMR0ZCUVdsQ1F5eFRRVUZYUkN4RlFVRk5SaXhYUVVGWFJpeHZRa0ZCY1VJc1EwRkhjRVZCTEcxQ1FVRnRRa2tzUlVGQlRVWXNWVUZCVnl4RlFVVndReXhKUVVGSlowSXNSVUZCVVU0c1JVRkJWMEVzU1VGQllTeEhRVVZ3UTJ4Q0xHRkJRMFVzVlVGQldXZENMRVZCUVZjc1ZVRkJXVTRzUlVGQlRVWXNVMEZCYjBJc1RVRkJWR2RDTEVWQlFXZENRU3hGUVVGUkxFOUJVWGhHUXl4UFFVRlBReXhSUVVGVllpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5d2NtOXdMWFI1Y0dWekwyTm9aV05yVUhKdmNGUjVjR1Z6TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgZmFjdG9yeT1yZXF1aXJlKFwiLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vyc1wiKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihyKXtyZXR1cm4gZmFjdG9yeShyLCExKX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVpoWTNSdmNua3Vhbk1pWFN3aWJtRnRaWE1pT2xzaVptRmpkRzl5ZVNJc0luSmxjWFZwY21VaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2lhWE5XWVd4cFpFVnNaVzFsYm5RaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVU5QkxHRkJUVUVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3cyUWtGRGRFSkRMRTlCUVU5RExGRkJRVlVzVTBGQlUwTXNSMEZIZUVJc1QwRkJUMG9zVVVGQlVVa3NSMEZFVnlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl3Y205d0xYUjVjR1Z6TDJaaFkzUnZjbmt1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQ9cmVxdWlyZShcIi4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0XCIpO2Z1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKXt9bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBzaGltKGUsdCxpLHIscyxvKXtpZihvIT09UmVhY3RQcm9wVHlwZXNTZWNyZXQpe3ZhciBtPW5ldyBFcnJvcihcIkNhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuIFVzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uIFJlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXNcIik7dGhyb3cgbS5uYW1lPVwiSW52YXJpYW50IFZpb2xhdGlvblwiLG19fWZ1bmN0aW9uIGdldFNoaW0oKXtyZXR1cm4gc2hpbX1zaGltLmlzUmVxdWlyZWQ9c2hpbTt2YXIgZT17YXJyYXk6c2hpbSxib29sOnNoaW0sZnVuYzpzaGltLG51bWJlcjpzaGltLG9iamVjdDpzaGltLHN0cmluZzpzaGltLHN5bWJvbDpzaGltLGFueTpzaGltLGFycmF5T2Y6Z2V0U2hpbSxlbGVtZW50OnNoaW0saW5zdGFuY2VPZjpnZXRTaGltLG5vZGU6c2hpbSxvYmplY3RPZjpnZXRTaGltLG9uZU9mOmdldFNoaW0sb25lT2ZUeXBlOmdldFNoaW0sc2hhcGU6Z2V0U2hpbSxleGFjdDpnZXRTaGltfTtyZXR1cm4gZS5jaGVja1Byb3BUeXBlcz1lbXB0eUZ1bmN0aW9uLGUuUHJvcFR5cGVzPWUsZX07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVpoWTNSdmNubFhhWFJvVkdoeWIzZHBibWRUYUdsdGN5NXFjeUpkTENKdVlXMWxjeUk2V3lKU1pXRmpkRkJ5YjNCVWVYQmxjMU5sWTNKbGRDSXNJbkpsY1hWcGNtVWlMQ0psYlhCMGVVWjFibU4wYVc5dUlpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SXNJbk5vYVcwaUxDSndjbTl3Y3lJc0luQnliM0JPWVcxbElpd2lZMjl0Y0c5dVpXNTBUbUZ0WlNJc0lteHZZMkYwYVc5dUlpd2ljSEp2Y0VaMWJHeE9ZVzFsSWl3aWMyVmpjbVYwSWl3aVpYSnlJaXdpUlhKeWIzSWlMQ0p1WVcxbElpd2laMlYwVTJocGJTSXNJbWx6VW1WeGRXbHlaV1FpTENKU1pXRmpkRkJ5YjNCVWVYQmxjeUlzSW1GeWNtRjVJaXdpWW05dmJDSXNJbVoxYm1NaUxDSnVkVzFpWlhJaUxDSnZZbXBsWTNRaUxDSnpkSEpwYm1jaUxDSnplVzFpYjJ3aUxDSmhibmtpTENKaGNuSmhlVTltSWl3aVpXeGxiV1Z1ZENJc0ltbHVjM1JoYm1ObFQyWWlMQ0p1YjJSbElpd2liMkpxWldOMFQyWWlMQ0p2Ym1WUFppSXNJbTl1WlU5bVZIbHdaU0lzSW5Ob1lYQmxJaXdpWlhoaFkzUWlMQ0pqYUdWamExQnliM0JVZVhCbGN5SXNJbEJ5YjNCVWVYQmxjeUpkTENKdFlYQndhVzVuY3lJNklrRkJUMEVzWVVGRlFTeEpRVUZKUVN4eFFrRkJkVUpETEZGQlFWRXNPRUpCUlc1RExGTkJRVk5ETEdsQ1FVVlVReXhQUVVGUFF5eFJRVUZWTEZkQlEyWXNVMEZCVTBNc1MwRkJTME1zUlVGQlQwTXNSVUZCVlVNc1JVRkJaVU1zUlVGQlZVTXNSVUZCWTBNc1IwRkRjRVVzUjBGQlNVRXNTVUZCVjFnc2NVSkJRV1lzUTBGSlFTeEpRVUZKV1N4RlFVRk5MRWxCUVVsRExFMUJRMW9zYlV4QlMwWXNUVUZFUVVRc1JVRkJTVVVzUzBGQlR5eHpRa0ZEVEVZc1IwRkhVaXhUUVVGVFJ5eFZRVU5RTEU5QlFVOVdMRXRCUmxSQkxFdEJRVXRYTEZkQlFXRllMRXRCVFd4Q0xFbEJRVWxaTEVWQlFXbENMRU5CUTI1Q1F5eE5RVUZQWWl4TFFVTlFZeXhMUVVGTlpDeExRVU5PWlN4TFFVRk5aaXhMUVVOT1owSXNUMEZCVVdoQ0xFdEJRMUpwUWl4UFFVRlJha0lzUzBGRFVtdENMRTlCUVZGc1FpeExRVU5TYlVJc1QwRkJVVzVDTEV0QlJWSnZRaXhKUVVGTGNFSXNTMEZEVEhGQ0xGRkJRVk5ZTEZGQlExUlpMRkZCUVZOMFFpeExRVU5VZFVJc1YwRkJXV0lzVVVGRFdtTXNTMEZCVFhoQ0xFdEJRMDU1UWl4VFFVRlZaaXhSUVVOV1owSXNUVUZCVDJoQ0xGRkJRMUJwUWl4VlFVRlhha0lzVVVGRFdHdENMRTFCUVU5c1FpeFJRVU5RYlVJc1RVRkJUMjVDTEZOQlRWUXNUMEZJUVVVc1JVRkJaV3RDTEdWQlFXbENha01zWTBGRGFFTmxMRVZCUVdWdFFpeFZRVUZaYmtJc1JVRkZjRUpCSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0J5YjNBdGRIbHdaWE12Wm1GamRHOXllVmRwZEdoVWFISnZkMmx1WjFOb2FXMXpMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBhc3NpZ249cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksUmVhY3RQcm9wVHlwZXNTZWNyZXQ9cmVxdWlyZShcIi4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0XCIpLGNoZWNrUHJvcFR5cGVzPXJlcXVpcmUoXCIuL2NoZWNrUHJvcFR5cGVzXCIpLHByaW50V2FybmluZz1mdW5jdGlvbigpe307ZnVuY3Rpb24gZW1wdHlGdW5jdGlvblRoYXRSZXR1cm5zTnVsbCgpe3JldHVybiBudWxsfVwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJihwcmludFdhcm5pbmc9ZnVuY3Rpb24oZSl7dmFyIHI9XCJXYXJuaW5nOiBcIitlO1widW5kZWZpbmVkXCIhPXR5cGVvZiBjb25zb2xlJiZjb25zb2xlLmVycm9yKHIpO3RyeXt0aHJvdyBuZXcgRXJyb3Iocil9Y2F0Y2goZSl7fX0pLG1vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKGUscil7dmFyIG49XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3IsdD1cIkBAaXRlcmF0b3JcIjt2YXIgYT1cIjw8YW5vbnltb3VzPj5cIixvPXthcnJheTpjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcihcImFycmF5XCIpLGJvb2w6Y3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoXCJib29sZWFuXCIpLGZ1bmM6Y3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoXCJmdW5jdGlvblwiKSxudW1iZXI6Y3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoXCJudW1iZXJcIiksb2JqZWN0OmNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKFwib2JqZWN0XCIpLHN0cmluZzpjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcihcInN0cmluZ1wiKSxzeW1ib2w6Y3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoXCJzeW1ib2xcIiksYW55OmZ1bmN0aW9uIGNyZWF0ZUFueVR5cGVDaGVja2VyKCl7cmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKGVtcHR5RnVuY3Rpb25UaGF0UmV0dXJuc051bGwpfSgpLGFycmF5T2Y6ZnVuY3Rpb24gY3JlYXRlQXJyYXlPZlR5cGVDaGVja2VyKGUpe3JldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcihmdW5jdGlvbiB2YWxpZGF0ZShyLG4sdCxhLG8pe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKFwiUHJvcGVydHkgYFwiK28rXCJgIG9mIGNvbXBvbmVudCBgXCIrdCtcImAgaGFzIGludmFsaWQgUHJvcFR5cGUgbm90YXRpb24gaW5zaWRlIGFycmF5T2YuXCIpO3ZhciBpPXJbbl07aWYoIUFycmF5LmlzQXJyYXkoaSkpe3ZhciBwPWdldFByb3BUeXBlKGkpO3JldHVybiBuZXcgUHJvcFR5cGVFcnJvcihcIkludmFsaWQgXCIrYStcIiBgXCIrbytcImAgb2YgdHlwZSBgXCIrcCtcImAgc3VwcGxpZWQgdG8gYFwiK3QrXCJgLCBleHBlY3RlZCBhbiBhcnJheS5cIil9Zm9yKHZhciBjPTA7YzxpLmxlbmd0aDtjKyspe3ZhciB1PWUoaSxjLHQsYSxvK1wiW1wiK2MrXCJdXCIsUmVhY3RQcm9wVHlwZXNTZWNyZXQpO2lmKHUgaW5zdGFuY2VvZiBFcnJvcilyZXR1cm4gdX1yZXR1cm4gbnVsbH0pfSxlbGVtZW50OmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRUeXBlQ2hlY2tlcigpe3JldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcihmdW5jdGlvbiB2YWxpZGF0ZShyLG4sdCxhLG8pe3ZhciBpPXJbbl07aWYoIWUoaSkpe3ZhciBwPWdldFByb3BUeXBlKGkpO3JldHVybiBuZXcgUHJvcFR5cGVFcnJvcihcIkludmFsaWQgXCIrYStcIiBgXCIrbytcImAgb2YgdHlwZSBgXCIrcCtcImAgc3VwcGxpZWQgdG8gYFwiK3QrXCJgLCBleHBlY3RlZCBhIHNpbmdsZSBSZWFjdEVsZW1lbnQuXCIpfXJldHVybiBudWxsfSl9KCksaW5zdGFuY2VPZjpmdW5jdGlvbiBjcmVhdGVJbnN0YW5jZVR5cGVDaGVja2VyKGUpe3JldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcihmdW5jdGlvbiB2YWxpZGF0ZShyLG4sdCxvLGkpe2lmKCEocltuXWluc3RhbmNlb2YgZSkpe3ZhciBwPWUubmFtZXx8YSxjPWZ1bmN0aW9uIGdldENsYXNzTmFtZShlKXtpZighZS5jb25zdHJ1Y3Rvcnx8IWUuY29uc3RydWN0b3IubmFtZSlyZXR1cm4gYTtyZXR1cm4gZS5jb25zdHJ1Y3Rvci5uYW1lfShyW25dKTtyZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoXCJJbnZhbGlkIFwiK28rXCIgYFwiK2krXCJgIG9mIHR5cGUgYFwiK2MrXCJgIHN1cHBsaWVkIHRvIGBcIit0K1wiYCwgZXhwZWN0ZWQgaW5zdGFuY2Ugb2YgYFwiK3ArXCJgLlwiKX1yZXR1cm4gbnVsbH0pfSxub2RlOmZ1bmN0aW9uIGNyZWF0ZU5vZGVDaGVja2VyKCl7cmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKGZ1bmN0aW9uIHZhbGlkYXRlKGUscixuLHQsYSl7aWYoIWlzTm9kZShlW3JdKSlyZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoXCJJbnZhbGlkIFwiK3QrXCIgYFwiK2ErXCJgIHN1cHBsaWVkIHRvIGBcIituK1wiYCwgZXhwZWN0ZWQgYSBSZWFjdE5vZGUuXCIpO3JldHVybiBudWxsfSl9KCksb2JqZWN0T2Y6ZnVuY3Rpb24gY3JlYXRlT2JqZWN0T2ZUeXBlQ2hlY2tlcihlKXtyZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIoZnVuY3Rpb24gdmFsaWRhdGUocixuLHQsYSxvKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXJldHVybiBuZXcgUHJvcFR5cGVFcnJvcihcIlByb3BlcnR5IGBcIitvK1wiYCBvZiBjb21wb25lbnQgYFwiK3QrXCJgIGhhcyBpbnZhbGlkIFByb3BUeXBlIG5vdGF0aW9uIGluc2lkZSBvYmplY3RPZi5cIik7dmFyIGk9cltuXSxwPWdldFByb3BUeXBlKGkpO2lmKFwib2JqZWN0XCIhPT1wKXJldHVybiBuZXcgUHJvcFR5cGVFcnJvcihcIkludmFsaWQgXCIrYStcIiBgXCIrbytcImAgb2YgdHlwZSBgXCIrcCtcImAgc3VwcGxpZWQgdG8gYFwiK3QrXCJgLCBleHBlY3RlZCBhbiBvYmplY3QuXCIpO2Zvcih2YXIgYyBpbiBpKWlmKGkuaGFzT3duUHJvcGVydHkoYykpe3ZhciB1PWUoaSxjLHQsYSxvK1wiLlwiK2MsUmVhY3RQcm9wVHlwZXNTZWNyZXQpO2lmKHUgaW5zdGFuY2VvZiBFcnJvcilyZXR1cm4gdX1yZXR1cm4gbnVsbH0pfSxvbmVPZjpmdW5jdGlvbiBjcmVhdGVFbnVtVHlwZUNoZWNrZXIoZSl7aWYoIUFycmF5LmlzQXJyYXkoZSkpcmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmcHJpbnRXYXJuaW5nKFwiSW52YWxpZCBhcmd1bWVudCBzdXBwbGllZCB0byBvbmVPZiwgZXhwZWN0ZWQgYW4gaW5zdGFuY2Ugb2YgYXJyYXkuXCIpLGVtcHR5RnVuY3Rpb25UaGF0UmV0dXJuc051bGw7cmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKGZ1bmN0aW9uIHZhbGlkYXRlKHIsbix0LGEsbyl7Zm9yKHZhciBpPXJbbl0scD0wO3A8ZS5sZW5ndGg7cCsrKWlmKGlzKGksZVtwXSkpcmV0dXJuIG51bGw7dmFyIGM9SlNPTi5zdHJpbmdpZnkoZSk7cmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKFwiSW52YWxpZCBcIithK1wiIGBcIitvK1wiYCBvZiB2YWx1ZSBgXCIraStcImAgc3VwcGxpZWQgdG8gYFwiK3QrXCJgLCBleHBlY3RlZCBvbmUgb2YgXCIrYytcIi5cIil9KX0sb25lT2ZUeXBlOmZ1bmN0aW9uIGNyZWF0ZVVuaW9uVHlwZUNoZWNrZXIoZSl7aWYoIUFycmF5LmlzQXJyYXkoZSkpcmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmcHJpbnRXYXJuaW5nKFwiSW52YWxpZCBhcmd1bWVudCBzdXBwbGllZCB0byBvbmVPZlR5cGUsIGV4cGVjdGVkIGFuIGluc3RhbmNlIG9mIGFycmF5LlwiKSxlbXB0eUZ1bmN0aW9uVGhhdFJldHVybnNOdWxsO2Zvcih2YXIgcj0wO3I8ZS5sZW5ndGg7cisrKXt2YXIgbj1lW3JdO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIG4pcmV0dXJuIHByaW50V2FybmluZyhcIkludmFsaWQgYXJndW1lbnQgc3VwcGxpZWQgdG8gb25lT2ZUeXBlLiBFeHBlY3RlZCBhbiBhcnJheSBvZiBjaGVjayBmdW5jdGlvbnMsIGJ1dCByZWNlaXZlZCBcIitnZXRQb3N0Zml4Rm9yVHlwZVdhcm5pbmcobikrXCIgYXQgaW5kZXggXCIrcitcIi5cIiksZW1wdHlGdW5jdGlvblRoYXRSZXR1cm5zTnVsbH1yZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIoZnVuY3Rpb24gdmFsaWRhdGUocixuLHQsYSxvKXtmb3IodmFyIGk9MDtpPGUubGVuZ3RoO2krKyl7dmFyIHA9ZVtpXTtpZihudWxsPT1wKHIsbix0LGEsbyxSZWFjdFByb3BUeXBlc1NlY3JldCkpcmV0dXJuIG51bGx9cmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKFwiSW52YWxpZCBcIithK1wiIGBcIitvK1wiYCBzdXBwbGllZCB0byBgXCIrdCtcImAuXCIpfSl9LHNoYXBlOmZ1bmN0aW9uIGNyZWF0ZVNoYXBlVHlwZUNoZWNrZXIoZSl7cmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKGZ1bmN0aW9uIHZhbGlkYXRlKHIsbix0LGEsbyl7dmFyIGk9cltuXSxwPWdldFByb3BUeXBlKGkpO2lmKFwib2JqZWN0XCIhPT1wKXJldHVybiBuZXcgUHJvcFR5cGVFcnJvcihcIkludmFsaWQgXCIrYStcIiBgXCIrbytcImAgb2YgdHlwZSBgXCIrcCtcImAgc3VwcGxpZWQgdG8gYFwiK3QrXCJgLCBleHBlY3RlZCBgb2JqZWN0YC5cIik7Zm9yKHZhciBjIGluIGUpe3ZhciB1PWVbY107aWYodSl7dmFyIGw9dShpLGMsdCxhLG8rXCIuXCIrYyxSZWFjdFByb3BUeXBlc1NlY3JldCk7aWYobClyZXR1cm4gbH19cmV0dXJuIG51bGx9KX0sZXhhY3Q6ZnVuY3Rpb24gY3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlcihlKXtyZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIoZnVuY3Rpb24gdmFsaWRhdGUocixuLHQsYSxvKXt2YXIgaT1yW25dLHA9Z2V0UHJvcFR5cGUoaSk7aWYoXCJvYmplY3RcIiE9PXApcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKFwiSW52YWxpZCBcIithK1wiIGBcIitvK1wiYCBvZiB0eXBlIGBcIitwK1wiYCBzdXBwbGllZCB0byBgXCIrdCtcImAsIGV4cGVjdGVkIGBvYmplY3RgLlwiKTt2YXIgYz1hc3NpZ24oe30scltuXSxlKTtmb3IodmFyIHUgaW4gYyl7dmFyIGw9ZVt1XTtpZighbClyZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoXCJJbnZhbGlkIFwiK2ErXCIgYFwiK28rXCJgIGtleSBgXCIrdStcImAgc3VwcGxpZWQgdG8gYFwiK3QrXCJgLlxcbkJhZCBvYmplY3Q6IFwiK0pTT04uc3RyaW5naWZ5KHJbbl0sbnVsbCxcIiAgXCIpK1wiXFxuVmFsaWQga2V5czogXCIrSlNPTi5zdHJpbmdpZnkoT2JqZWN0LmtleXMoZSksbnVsbCxcIiAgXCIpKTt2YXIgeT1sKGksdSx0LGEsbytcIi5cIit1LFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtpZih5KXJldHVybiB5fXJldHVybiBudWxsfSl9fTtmdW5jdGlvbiBpcyhlLHIpe3JldHVybiBlPT09cj8wIT09ZXx8MS9lPT0xL3I6ZSE9ZSYmciE9cn1mdW5jdGlvbiBQcm9wVHlwZUVycm9yKGUpe3RoaXMubWVzc2FnZT1lLHRoaXMuc3RhY2s9XCJcIn1mdW5jdGlvbiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcihlKXtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXZhciBuPXt9LHQ9MDtmdW5jdGlvbiBjaGVja1R5cGUobyxpLHAsYyx1LGwseSl7aWYoYz1jfHxhLGw9bHx8cCx5IT09UmVhY3RQcm9wVHlwZXNTZWNyZXQpe2lmKHIpe3ZhciBzPW5ldyBFcnJvcihcIkNhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuIFVzZSBgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKClgIHRvIGNhbGwgdGhlbS4gUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlc1wiKTt0aHJvdyBzLm5hbWU9XCJJbnZhcmlhbnQgVmlvbGF0aW9uXCIsc31pZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgY29uc29sZSl7dmFyIGY9YytcIjpcIitwOyFuW2ZdJiZ0PDMmJihwcmludFdhcm5pbmcoXCJZb3UgYXJlIG1hbnVhbGx5IGNhbGxpbmcgYSBSZWFjdC5Qcm9wVHlwZXMgdmFsaWRhdGlvbiBmdW5jdGlvbiBmb3IgdGhlIGBcIitsK1wiYCBwcm9wIG9uIGBcIitjK1wiYC4gVGhpcyBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIHRocm93IGluIHRoZSBzdGFuZGFsb25lIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiBZb3UgbWF5IGJlIHNlZWluZyB0aGlzIHdhcm5pbmcgZHVlIHRvIGEgdGhpcmQtcGFydHkgUHJvcFR5cGVzIGxpYnJhcnkuIFNlZSBodHRwczovL2ZiLm1lL3JlYWN0LXdhcm5pbmctZG9udC1jYWxsLXByb3B0eXBlcyBmb3IgZGV0YWlscy5cIiksbltmXT0hMCx0KyspfX1yZXR1cm4gbnVsbD09aVtwXT9vP251bGw9PT1pW3BdP25ldyBQcm9wVHlwZUVycm9yKFwiVGhlIFwiK3UrXCIgYFwiK2wrXCJgIGlzIG1hcmtlZCBhcyByZXF1aXJlZCBpbiBgXCIrYytcImAsIGJ1dCBpdHMgdmFsdWUgaXMgYG51bGxgLlwiKTpuZXcgUHJvcFR5cGVFcnJvcihcIlRoZSBcIit1K1wiIGBcIitsK1wiYCBpcyBtYXJrZWQgYXMgcmVxdWlyZWQgaW4gYFwiK2MrXCJgLCBidXQgaXRzIHZhbHVlIGlzIGB1bmRlZmluZWRgLlwiKTpudWxsOmUoaSxwLGMsdSxsKX12YXIgbz1jaGVja1R5cGUuYmluZChudWxsLCExKTtyZXR1cm4gby5pc1JlcXVpcmVkPWNoZWNrVHlwZS5iaW5kKG51bGwsITApLG99ZnVuY3Rpb24gY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoZSl7cmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKGZ1bmN0aW9uIHZhbGlkYXRlKHIsbix0LGEsbyxpKXt2YXIgcD1yW25dO3JldHVybiBnZXRQcm9wVHlwZShwKSE9PWU/bmV3IFByb3BUeXBlRXJyb3IoXCJJbnZhbGlkIFwiK2ErXCIgYFwiK28rXCJgIG9mIHR5cGUgYFwiK2dldFByZWNpc2VUeXBlKHApK1wiYCBzdXBwbGllZCB0byBgXCIrdCtcImAsIGV4cGVjdGVkIGBcIitlK1wiYC5cIik6bnVsbH0pfWZ1bmN0aW9uIGlzTm9kZShyKXtzd2l0Y2godHlwZW9mIHIpe2Nhc2VcIm51bWJlclwiOmNhc2VcInN0cmluZ1wiOmNhc2VcInVuZGVmaW5lZFwiOnJldHVybiEwO2Nhc2VcImJvb2xlYW5cIjpyZXR1cm4hcjtjYXNlXCJvYmplY3RcIjppZihBcnJheS5pc0FycmF5KHIpKXJldHVybiByLmV2ZXJ5KGlzTm9kZSk7aWYobnVsbD09PXJ8fGUocikpcmV0dXJuITA7dmFyIGE9ZnVuY3Rpb24gZ2V0SXRlcmF0b3JGbihlKXt2YXIgcj1lJiYobiYmZVtuXXx8ZVt0XSk7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgcilyZXR1cm4gcn0ocik7aWYoIWEpcmV0dXJuITE7dmFyIG8saT1hLmNhbGwocik7aWYoYSE9PXIuZW50cmllcyl7Zm9yKDshKG89aS5uZXh0KCkpLmRvbmU7KWlmKCFpc05vZGUoby52YWx1ZSkpcmV0dXJuITF9ZWxzZSBmb3IoOyEobz1pLm5leHQoKSkuZG9uZTspe3ZhciBwPW8udmFsdWU7aWYocCYmIWlzTm9kZShwWzFdKSlyZXR1cm4hMX1yZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBnZXRQcm9wVHlwZShlKXt2YXIgcj10eXBlb2YgZTtyZXR1cm4gQXJyYXkuaXNBcnJheShlKT9cImFycmF5XCI6ZSBpbnN0YW5jZW9mIFJlZ0V4cD9cIm9iamVjdFwiOmZ1bmN0aW9uIGlzU3ltYm9sKGUscil7cmV0dXJuXCJzeW1ib2xcIj09PWV8fFwiU3ltYm9sXCI9PT1yW1wiQEB0b1N0cmluZ1RhZ1wiXXx8XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZyIGluc3RhbmNlb2YgU3ltYm9sfShyLGUpP1wic3ltYm9sXCI6cn1mdW5jdGlvbiBnZXRQcmVjaXNlVHlwZShlKXtpZihudWxsPT1lKXJldHVyblwiXCIrZTt2YXIgcj1nZXRQcm9wVHlwZShlKTtpZihcIm9iamVjdFwiPT09cil7aWYoZSBpbnN0YW5jZW9mIERhdGUpcmV0dXJuXCJkYXRlXCI7aWYoZSBpbnN0YW5jZW9mIFJlZ0V4cClyZXR1cm5cInJlZ2V4cFwifXJldHVybiByfWZ1bmN0aW9uIGdldFBvc3RmaXhGb3JUeXBlV2FybmluZyhlKXt2YXIgcj1nZXRQcmVjaXNlVHlwZShlKTtzd2l0Y2gocil7Y2FzZVwiYXJyYXlcIjpjYXNlXCJvYmplY3RcIjpyZXR1cm5cImFuIFwiK3I7Y2FzZVwiYm9vbGVhblwiOmNhc2VcImRhdGVcIjpjYXNlXCJyZWdleHBcIjpyZXR1cm5cImEgXCIrcjtkZWZhdWx0OnJldHVybiByfX1yZXR1cm4gUHJvcFR5cGVFcnJvci5wcm90b3R5cGU9RXJyb3IucHJvdG90eXBlLG8uY2hlY2tQcm9wVHlwZXM9Y2hlY2tQcm9wVHlwZXMsby5Qcm9wVHlwZXM9byxvfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltWmhZM1J2Y25sWGFYUm9WSGx3WlVOb1pXTnJaWEp6TG1weklsMHNJbTVoYldWeklqcGJJbUZ6YzJsbmJpSXNJbkpsY1hWcGNtVWlMQ0pTWldGamRGQnliM0JVZVhCbGMxTmxZM0psZENJc0ltTm9aV05yVUhKdmNGUjVjR1Z6SWl3aWNISnBiblJYWVhKdWFXNW5JaXdpWlcxd2RIbEdkVzVqZEdsdmJsUm9ZWFJTWlhSMWNtNXpUblZzYkNJc0luQnliMk5sYzNNaUxDSmxibllpTENKT1QwUkZYMFZPVmlJc0luUmxlSFFpTENKdFpYTnpZV2RsSWl3aVkyOXVjMjlzWlNJc0ltVnljbTl5SWl3aVJYSnliM0lpTENKNElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SXNJbWx6Vm1Gc2FXUkZiR1Z0Wlc1MElpd2lkR2h5YjNkUGJrUnBjbVZqZEVGalkyVnpjeUlzSWtsVVJWSkJWRTlTWDFOWlRVSlBUQ0lzSWxONWJXSnZiQ0lzSW1sMFpYSmhkRzl5SWl3aVJrRlZXRjlKVkVWU1FWUlBVbDlUV1UxQ1Qwd2lMQ0pCVGs5T1dVMVBWVk1pTENKU1pXRmpkRkJ5YjNCVWVYQmxjeUlzSW1GeWNtRjVJaXdpWTNKbFlYUmxVSEpwYldsMGFYWmxWSGx3WlVOb1pXTnJaWElpTENKaWIyOXNJaXdpWm5WdVl5SXNJbTUxYldKbGNpSXNJbTlpYW1WamRDSXNJbk4wY21sdVp5SXNJbk41YldKdmJDSXNJbUZ1ZVNJc0ltTnlaV0YwWlVGdWVWUjVjR1ZEYUdWamEyVnlJaXdpWTNKbFlYUmxRMmhoYVc1aFlteGxWSGx3WlVOb1pXTnJaWElpTENKaGNuSmhlVTltSWl3aVkzSmxZWFJsUVhKeVlYbFBabFI1Y0dWRGFHVmphMlZ5SWl3aWRIbHdaVU5vWldOclpYSWlMQ0oyWVd4cFpHRjBaU0lzSW5CeWIzQnpJaXdpY0hKdmNFNWhiV1VpTENKamIyMXdiMjVsYm5ST1lXMWxJaXdpYkc5allYUnBiMjRpTENKd2NtOXdSblZzYkU1aGJXVWlMQ0pRY205d1ZIbHdaVVZ5Y205eUlpd2ljSEp2Y0ZaaGJIVmxJaXdpUVhKeVlYa2lMQ0pwYzBGeWNtRjVJaXdpY0hKdmNGUjVjR1VpTENKblpYUlFjbTl3Vkhsd1pTSXNJbWtpTENKc1pXNW5kR2dpTENKbGJHVnRaVzUwSWl3aVkzSmxZWFJsUld4bGJXVnVkRlI1Y0dWRGFHVmphMlZ5SWl3aWFXNXpkR0Z1WTJWUFppSXNJbU55WldGMFpVbHVjM1JoYm1ObFZIbHdaVU5vWldOclpYSWlMQ0psZUhCbFkzUmxaRU5zWVhOeklpd2laWGh3WldOMFpXUkRiR0Z6YzA1aGJXVWlMQ0p1WVcxbElpd2lZV04wZFdGc1EyeGhjM05PWVcxbElpd2laMlYwUTJ4aGMzTk9ZVzFsSWl3aVkyOXVjM1J5ZFdOMGIzSWlMQ0p1YjJSbElpd2lZM0psWVhSbFRtOWtaVU5vWldOclpYSWlMQ0pwYzA1dlpHVWlMQ0p2WW1wbFkzUlBaaUlzSW1OeVpXRjBaVTlpYW1WamRFOW1WSGx3WlVOb1pXTnJaWElpTENKclpYa2lMQ0pvWVhOUGQyNVFjbTl3WlhKMGVTSXNJbTl1WlU5bUlpd2lZM0psWVhSbFJXNTFiVlI1Y0dWRGFHVmphMlZ5SWl3aVpYaHdaV04wWldSV1lXeDFaWE1pTENKcGN5SXNJblpoYkhWbGMxTjBjbWx1WnlJc0lrcFRUMDRpTENKemRISnBibWRwWm5raUxDSnZibVZQWmxSNWNHVWlMQ0pqY21WaGRHVlZibWx2YmxSNWNHVkRhR1ZqYTJWeUlpd2lZWEp5WVhsUFpsUjVjR1ZEYUdWamEyVnljeUlzSW1Ob1pXTnJaWElpTENKblpYUlFiM04wWm1sNFJtOXlWSGx3WlZkaGNtNXBibWNpTENKemFHRndaU0lzSW1OeVpXRjBaVk5vWVhCbFZIbHdaVU5vWldOclpYSWlMQ0p6YUdGd1pWUjVjR1Z6SWl3aVpYaGhZM1FpTENKamNtVmhkR1ZUZEhKcFkzUlRhR0Z3WlZSNWNHVkRhR1ZqYTJWeUlpd2lZV3hzUzJWNWN5SXNJazlpYW1WamRDSXNJbXRsZVhNaUxDSjVJaXdpZEdocGN5SXNJbk4wWVdOcklpd2liV0Z1ZFdGc1VISnZjRlI1Y0dWRFlXeHNRMkZqYUdVaUxDSnRZVzUxWVd4UWNtOXdWSGx3WlZkaGNtNXBibWREYjNWdWRDSXNJbU5vWldOclZIbHdaU0lzSW1selVtVnhkV2x5WldRaUxDSnpaV055WlhRaUxDSmxjbklpTENKallXTm9aVXRsZVNJc0ltTm9ZV2x1WldSRGFHVmphMVI1Y0dVaUxDSmlhVzVrSWl3aVpYaHdaV04wWldSVWVYQmxJaXdpWjJWMFVISmxZMmx6WlZSNWNHVWlMQ0psZG1WeWVTSXNJbWwwWlhKaGRHOXlSbTRpTENKblpYUkpkR1Z5WVhSdmNrWnVJaXdpYldGNVltVkpkR1Z5WVdKc1pTSXNJbk4wWlhBaUxDSmpZV3hzSWl3aVpXNTBjbWxsY3lJc0ltNWxlSFFpTENKa2IyNWxJaXdpZG1Gc2RXVWlMQ0psYm5SeWVTSXNJbEpsWjBWNGNDSXNJbWx6VTNsdFltOXNJaXdpUkdGMFpTSXNJblI1Y0dVaUxDSndjbTkwYjNSNWNHVWlMQ0pRY205d1ZIbHdaWE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVTlCTEdGQlJVRXNTVUZCU1VFc1QwRkJVME1zVVVGQlVTeHBRa0ZGYWtKRExIRkNRVUYxUWtRc1VVRkJVU3c0UWtGREwwSkZMR1ZCUVdsQ1JpeFJRVUZSTEc5Q1FVVjZRa2NzWVVGQlpTeGhRV2xDYmtJc1UwRkJVME1zSzBKQlExQXNUMEZCVHl4TFFXaENiMElzWlVGQmVrSkRMRkZCUVZGRExFbEJRVWxETEZkQlEyUktMR0ZCUVdVc1UwRkJVMHNzUjBGRGRFSXNTVUZCU1VNc1JVRkJWU3haUVVGalJDeEZRVU5NTEc5Q1FVRmFSU3hUUVVOVVFTeFJRVUZSUXl4TlFVRk5SaXhIUVVWb1FpeEpRVWxGTEUxQlFVMHNTVUZCU1Vjc1RVRkJUVWdzUjBGRGFFSXNUVUZCVDBrc1QwRlJZa01zVDBGQlQwTXNVVUZCVlN4VFFVRlRReXhGUVVGblFrTXNSMEZGZUVNc1NVRkJTVU1zUlVGQmIwTXNiVUpCUVZoRExGRkJRWGxDUVN4UFFVRlBReXhUUVVONlJFTXNSVUZCZFVJc1lVRnpSVE5DTEVsQlFVbERMRVZCUVZrc1owSkJTVnBETEVWQlFXbENMRU5CUTI1Q1F5eE5RVUZQUXl3eVFrRkJNa0lzVTBGRGJFTkRMRXRCUVUxRUxESkNRVUV5UWl4WFFVTnFRMFVzUzBGQlRVWXNNa0pCUVRKQ0xGbEJRMnBEUnl4UFFVRlJTQ3d5UWtGQk1rSXNWVUZEYmtOSkxFOUJRVkZLTERKQ1FVRXlRaXhWUVVOdVEwc3NUMEZCVVV3c01rSkJRVEpDTEZWQlEyNURUU3hQUVVGUlRpd3lRa0ZCTWtJc1ZVRkZia05QTEVsQmRVaEdMRk5CUVZORExIVkNRVU5RTEU5QlFVOURMREpDUVVFeVFqbENMRGhDUVhoSU4wSTJRaXhIUVVOTVJTeFJRVEJJUml4VFFVRlRReXg1UWtGQmVVSkRMRWRCYTBKb1F5eFBRVUZQU0N3eVFrRnFRbEFzVTBGQlUwa3NVMEZCVTBNc1JVRkJUME1zUlVGQlZVTXNSVUZCWlVNc1JVRkJWVU1zUjBGRE1VUXNSMEZCTWtJc2JVSkJRV2hDVGl4RlFVTlVMRTlCUVU4c1NVRkJTVThzWTBGQll5eGhRVUZsUkN4RlFVRmxMRzFDUVVGeFFrWXNSVUZCWjBJc2JVUkJSVGxHTEVsQlFVbEpMRVZCUVZsT0xFVkJRVTFETEVkQlEzUkNMRWxCUVV0TkxFMUJRVTFETEZGQlFWRkdMRWRCUVZrc1EwRkROMElzU1VGQlNVY3NSVUZCVjBNc1dVRkJXVW9zUjBGRE0wSXNUMEZCVHl4SlFVRkpSQ3hqUVVGakxGZEJRV0ZHTEVWQlFWY3NTMEZCVDBNc1JVRkJaU3hqUVVGelFrc3NSVUZCVnl4clFrRkJiMEpRTEVWQlFXZENMSGxDUVVVNVNTeEpRVUZMTEVsQlFVbFRMRVZCUVVrc1JVRkJSMEVzUlVGQlNVd3NSVUZCVlUwc1QwRkJVVVFzU1VGQlN5eERRVU42UXl4SlFVRkpka01zUlVGQlVUQkNMRVZCUVZsUkxFVkJRVmRMTEVWQlFVZFVMRVZCUVdWRExFVkJRVlZETEVWQlFXVXNTVUZCVFU4c1JVRkJTU3hKUVVGTGFrUXNjMEpCUXpkR0xFZEJRVWxWTEdGQlFXbENReXhOUVVOdVFpeFBRVUZQUkN4RlFVZFlMRTlCUVU4c1VVRjZTVlI1UXl4UlFUaEpSaXhUUVVGVFF5d3lRa0ZUVUN4UFFVRlBia0lzTWtKQlVsQXNVMEZCVTBrc1UwRkJVME1zUlVGQlQwTXNSVUZCVlVNc1JVRkJaVU1zUlVGQlZVTXNSMEZETVVRc1NVRkJTVVVzUlVGQldVNHNSVUZCVFVNc1IwRkRkRUlzU1VGQlMzaENMRVZCUVdVMlFpeEhRVUZaTEVOQlF6bENMRWxCUVVsSExFVkJRVmRETEZsQlFWbEtMRWRCUXpOQ0xFOUJRVThzU1VGQlNVUXNZMEZCWXl4WFFVRmhSaXhGUVVGWExFdEJRVTlETEVWQlFXVXNZMEZCYzBKTExFVkJRVmNzYTBKQlFXOUNVQ3hGUVVGblFpeHpRMEZGT1Vrc1QwRkJUeXhQUVhKS1FWa3NSMEZEVkVNc1YwRjVTa1lzVTBGQlUwTXNNRUpCUVRCQ1F5eEhRVk5xUXl4UFFVRlBkRUlzTWtKQlVsQXNVMEZCVTBrc1UwRkJVME1zUlVGQlQwTXNSVUZCVlVNc1JVRkJaVU1zUlVGQlZVTXNSMEZETVVRc1MwRkJUVW9zUlVGQlRVTXNZVUZCY1VKblFpeEhRVUZuUWl4RFFVTXZReXhKUVVGSlF5eEZRVUZ2UWtRc1JVRkJZMFVzVFVGQlVYQkRMRVZCUXpGRGNVTXNSVUZ6VVZZc1UwRkJVME1zWVVGQllXWXNSMEZEY0VJc1NVRkJTMEVzUlVGQlZXZENMR05CUVdkQ2FFSXNSVUZCVldkQ0xGbEJRVmxJTEV0QlEyNUVMRTlCUVU5d1F5eEZRVVZVTEU5QlFVOTFRaXhGUVVGVlowSXNXVUZCV1Vnc1MwRXhVVWhGTEVOQlFXRnlRaXhGUVVGTlF5eEpRVU42UXl4UFFVRlBMRWxCUVVsSkxHTkJRV01zVjBGQllVWXNSVUZCVnl4TFFVRlBReXhGUVVGbExHTkJRWE5DWjBJc1JVRkJhMElzYTBKQlFXOUNiRUlzUlVGQlowSXNORUpCUVhGRFowSXNSVUZCYjBJc1RVRkZPVTBzVDBGQlR5eFJRUzlLVkVzc1MwRTJUMFlzVTBGQlUwTXNiMEpCVDFBc1QwRkJUemRDTERKQ1FVNVFMRk5CUVZOSkxGTkJRVk5ETEVWQlFVOURMRVZCUVZWRExFVkJRV1ZETEVWQlFWVkRMRWRCUXpGRUxFbEJRVXR4UWl4UFFVRlBla0lzUlVGQlRVTXNTVUZEYUVJc1QwRkJUeXhKUVVGSlNTeGpRVUZqTEZkQlFXRkdMRVZCUVZjc1MwRkJUME1zUlVGQlpTeHJRa0ZCTUVKR0xFVkJRV2RDTERSQ1FVVnVTQ3hQUVVGUExFOUJiRkJJYzBJc1IwRkRUa1VzVTBGMVRFWXNVMEZCVTBNc01FSkJRVEJDTjBJc1IwRnZRbXBETEU5QlFVOUlMREpDUVc1Q1VDeFRRVUZUU1N4VFFVRlRReXhGUVVGUFF5eEZRVUZWUXl4RlFVRmxReXhGUVVGVlF5eEhRVU14UkN4SFFVRXlRaXh0UWtGQmFFSk9MRVZCUTFRc1QwRkJUeXhKUVVGSlR5eGpRVUZqTEdGQlFXVkVMRVZCUVdVc2JVSkJRWEZDUml4RlFVRm5RaXh2UkVGRk9VWXNTVUZCU1Vrc1JVRkJXVTRzUlVGQlRVTXNSMEZEYkVKUkxFVkJRVmRETEZsQlFWbEtMRWRCUXpOQ0xFZEJRV2xDTEZkQlFXSkhMRVZCUTBZc1QwRkJUeXhKUVVGSlNpeGpRVUZqTEZkQlFXRkdMRVZCUVZjc1MwRkJUME1zUlVGQlpTeGpRVUZ6UWtzc1JVRkJWeXhyUWtGQmIwSlFMRVZCUVdkQ0xEQkNRVVU1U1N4SlFVRkxMRWxCUVVrd1FpeExRVUZQZEVJc1JVRkRaQ3hIUVVGSlFTeEZRVUZWZFVJc1pVRkJaVVFzUjBGQlRTeERRVU5xUXl4SlFVRkplRVFzUlVGQlVUQkNMRVZCUVZsUkxFVkJRVmR6UWl4RlFVRkxNVUlzUlVGQlpVTXNSVUZCVlVNc1JVRkJaU3hKUVVGTmQwSXNSVUZCUzJ4RkxITkNRVU16Uml4SFFVRkpWU3hoUVVGcFFrTXNUVUZEYmtJc1QwRkJUMFFzUlVGSllpeFBRVUZQTEZGQmVFMVVNRVFzVFVGclMwWXNVMEZCVTBNc2MwSkJRWE5DUXl4SFFVTTNRaXhKUVVGTGVrSXNUVUZCVFVNc1VVRkJVWGRDTEVkQlJXcENMRTFCUkhsQ0xHVkJRWHBDYkVVc1VVRkJVVU1zU1VGQlNVTXNWVUZCTkVKS0xHRkJRV0VzYzBWQlF6bERReXcyUWtGalZDeFBRVUZQT0VJc01rSkJXRkFzVTBGQlUwa3NVMEZCVTBNc1JVRkJUME1zUlVGQlZVTXNSVUZCWlVNc1JVRkJWVU1zUjBGRk1VUXNTVUZFUVN4SlFVRkpSU3hGUVVGWlRpeEZRVUZOUXl4SFFVTmlWU3hGUVVGSkxFVkJRVWRCTEVWQlFVbHhRaXhGUVVGbGNFSXNUMEZCVVVRc1NVRkRla01zUjBGQlNYTkNMRWRCUVVjelFpeEZRVUZYTUVJc1JVRkJaWEpDTEVsQlF5OUNMRTlCUVU4c1MwRkpXQ3hKUVVGSmRVSXNSVUZCWlVNc1MwRkJTME1zVlVGQlZVb3NSMEZEYkVNc1QwRkJUeXhKUVVGSk0wSXNZMEZCWXl4WFFVRmhSaXhGUVVGWExFdEJRVTlETEVWQlFXVXNaVUZCYVVKRkxFVkJRVmtzYTBKQlFUQkNTaXhGUVVGblFpeHpRa0ZCZDBKblF5eEZRVUZsTEZGQmFFeDJURWNzVlVFMFRVWXNVMEZCVTBNc2RVSkJRWFZDUXl4SFFVTTVRaXhKUVVGTGFFTXNUVUZCVFVNc1VVRkJVU3RDTEVkQlJXcENMRTFCUkhsQ0xHVkJRWHBDZWtVc1VVRkJVVU1zU1VGQlNVTXNWVUZCTkVKS0xHRkJRV0VzTUVWQlF6bERReXcyUWtGSFZDeEpRVUZMTEVsQlFVazRReXhGUVVGSkxFVkJRVWRCTEVWQlFVazBRaXhGUVVGdlFqTkNMRTlCUVZGRUxFbEJRVXNzUTBGRGJrUXNTVUZCU1RaQ0xFVkJRVlZFTEVWQlFXOUNOVUlzUjBGRGJFTXNSMEZCZFVJc2JVSkJRVm8yUWl4RlFVdFVMRTlCU2tFMVJTeGhRVU5GTERoR1FVTmpOa1VzZVVKQlFYbENSQ3hIUVVGWExHRkJRV1UzUWl4RlFVRkpMRXRCUldoRk9VTXNOa0pCWTFnc1QwRkJUemhDTERKQ1FWWlFMRk5CUVZOSkxGTkJRVk5ETEVWQlFVOURMRVZCUVZWRExFVkJRV1ZETEVWQlFWVkRMRWRCUXpGRUxFbEJRVXNzU1VGQlNVOHNSVUZCU1N4RlFVRkhRU3hGUVVGSk5FSXNSVUZCYjBJelFpeFBRVUZSUkN4SlFVRkxMRU5CUTI1RUxFbEJRVWsyUWl4RlFVRlZSQ3hGUVVGdlFqVkNMRWRCUTJ4RExFZEJRVFpHTEUxQlFYcEdOa0lzUlVGQlVYaERMRVZCUVU5RExFVkJRVlZETEVWQlFXVkRMRVZCUVZWRExFVkJRV014UXl4elFrRkRiRVVzVDBGQlR5eExRVWxZTEU5QlFVOHNTVUZCU1RKRExHTkJRV01zVjBGQllVWXNSVUZCVnl4TFFVRlBReXhGUVVGbExHdENRVUV3UWtZc1JVRkJaMElzVTBGd1QyNUlkME1zVFVGdFVFWXNVMEZCVTBNc2RVSkJRWFZDUXl4SFFXMUNPVUlzVDBGQlQycEVMREpDUVd4Q1VDeFRRVUZUU1N4VFFVRlRReXhGUVVGUFF5eEZRVUZWUXl4RlFVRmxReXhGUVVGVlF5eEhRVU14UkN4SlFVRkpSU3hGUVVGWlRpeEZRVUZOUXl4SFFVTnNRbEVzUlVGQlYwTXNXVUZCV1Vvc1IwRkRNMElzUjBGQmFVSXNWMEZCWWtjc1JVRkRSaXhQUVVGUExFbEJRVWxLTEdOQlFXTXNWMEZCWVVZc1JVRkJWeXhMUVVGUFF5eEZRVUZsTEdOQlFXZENTeXhGUVVGWExHdENRVUV3UWxBc1JVRkJaMElzZVVKQlJUbEpMRWxCUVVzc1NVRkJTVEJDTEV0QlFVOW5RaXhGUVVGWkxFTkJRekZDTEVsQlFVbEtMRVZCUVZWSkxFVkJRVmRvUWl4SFFVTjZRaXhIUVVGTFdTeEZRVUZNTEVOQlIwRXNTVUZCU1hCRkxFVkJRVkZ2UlN4RlFVRlJiRU1zUlVGQlYzTkNMRVZCUVVzeFFpeEZRVUZsUXl4RlFVRlZReXhGUVVGbExFbEJRVTEzUWl4RlFVRkxiRVVzYzBKQlEzWkdMRWRCUVVsVkxFVkJRMFlzVDBGQlQwRXNSMEZIV0N4UFFVRlBMRkZCYmxGVWVVVXNUVUYzVVVZc1UwRkJVME1zTmtKQlFUWkNSaXhIUVRKQ2NFTXNUMEZCVDJwRUxESkNRVEZDVUN4VFFVRlRTU3hUUVVGVFF5eEZRVUZQUXl4RlFVRlZReXhGUVVGbFF5eEZRVUZWUXl4SFFVTXhSQ3hKUVVGSlJTeEZRVUZaVGl4RlFVRk5ReXhIUVVOc1FsRXNSVUZCVjBNc1dVRkJXVW9zUjBGRE0wSXNSMEZCYVVJc1YwRkJZa2NzUlVGRFJpeFBRVUZQTEVsQlFVbEtMR05CUVdNc1YwRkJZVVlzUlVGQlZ5eExRVUZQUXl4RlFVRmxMR05CUVdkQ1N5eEZRVUZYTEd0Q1FVRXdRbEFzUlVGQlowSXNlVUpCU1RsSkxFbEJRVWsyUXl4RlFVRlZka1lzVDBGQlR5eEhRVUZKZDBNc1JVRkJUVU1zUjBGQlZ6SkRMRWRCUXpGRExFbEJRVXNzU1VGQlNXaENMRXRCUVU5dFFpeEZRVUZUTEVOQlEzWkNMRWxCUVVsUUxFVkJRVlZKTEVWQlFWZG9RaXhIUVVONlFpeEpRVUZMV1N4RlFVTklMRTlCUVU4c1NVRkJTVzVETEdOQlExUXNWMEZCWVVZc1JVRkJWeXhMUVVGUFF5eEZRVUZsTEZWQlFWbDNRaXhGUVVGTkxHdENRVUZ2UWpGQ0xFVkJRV2RDTEcxQ1FVTnFSbWxETEV0QlFVdERMRlZCUVZWd1F5eEZRVUZOUXl4SFFVRlhMRXRCUVUwc1RVRkRla1FzYVVKQlFXOUNhME1zUzBGQlMwTXNWVUZCVlZrc1QwRkJUME1zUzBGQlMwd3NSMEZCWVN4TFFVRk5MRTlCUjNSRkxFbEJRVWw0UlN4RlFVRlJiMFVzUlVGQlVXeERMRVZCUVZkelFpeEZRVUZMTVVJc1JVRkJaVU1zUlVGQlZVTXNSVUZCWlN4SlFVRk5kMElzUlVGQlMyeEZMSE5DUVVOMlJpeEhRVUZKVlN4RlFVTkdMRTlCUVU5QkxFVkJSMWdzVDBGQlR5eFRRWGhTV0N4VFFVRlROa1FzUjBGQlJ6TkVMRVZCUVVjMFJTeEhRVVZpTEU5QlFVazFSU3hKUVVGTk5FVXNSVUZIU3l4SlFVRk9OVVVzUjBGQlZ5eEZRVUZKUVN4SFFVRk5MRVZCUVVrMFJTeEZRVWQ2UWpWRkxFZEJRVTFCTEVkQlFVczBSU3hIUVVGTlFTeEZRVmsxUWl4VFFVRlROME1zWTBGQlkyNURMRWRCUTNKQ2FVWXNTMEZCUzJwR0xGRkJRVlZCTEVWQlEyWnBSaXhMUVVGTFF5eE5RVUZSTEVkQlMyWXNVMEZCVTNwRUxESkNRVUV5UWtrc1IwRkRiRU1zUjBGQk5rSXNaVUZCZWtKcVF5eFJRVUZSUXl4SlFVRkpReXhUUVVOa0xFbEJRVWx4Uml4RlFVRXdRaXhIUVVNeFFrTXNSVUZCTmtJc1JVRkZia01zVTBGQlUwTXNWVUZCVlVNc1JVRkJXWGhFTEVWQlFVOURMRVZCUVZWRExFVkJRV1ZETEVWQlFWVkRMRVZCUVdOeFJDeEhRVWx5Uml4SFFVaEJka1FzUlVGQlowSkJMRWRCUVdsQ2JrSXNSVUZEYWtOeFFpeEZRVUZsUVN4SFFVRm5Ra2dzUlVGRk0wSjNSQ3hKUVVGWEwwWXNjVUpCUVhOQ0xFTkJRMjVETEVkQlFVbG5RaXhGUVVGeFFpeERRVVYyUWl4SlFVRkpaMFlzUlVGQlRTeEpRVUZKY2tZc1RVRkRXaXh4VEVGTFJpeE5RVVJCY1VZc1JVRkJTWFpETEV0QlFVOHNjMEpCUTB4MVF5eEZRVU5FTEVkQlFUWkNMR1ZCUVhwQ05VWXNVVUZCVVVNc1NVRkJTVU1zVlVGQlowUXNiMEpCUVZwSExGRkJRWGxDTEVOQlJXeEdMRWxCUVVsM1JpeEZRVUZYZWtRc1JVRkJaMElzU1VGQlRVUXNSMEZGYkVOdlJDeEZRVUYzUWswc1NVRkZla0pNTEVWQlFUWkNMRWxCUlRkQ01VWXNZVUZEUlN3eVJVRkRkVUozUXl4RlFVRmxMR05CUVdkQ1JpeEZRVUZwUWl4M1RrRkxla1Z0UkN4RlFVRjNRazBzU1VGQldTeEZRVU53UTB3c1RVRkpUaXhQUVVGMVFpeE5RVUZ1UW5SRUxFVkJRVTFETEVkQlEwcDFSQ3hGUVVOelFpeFBRVUZ3UW5oRUxFVkJRVTFETEVkQlEwUXNTVUZCU1Vrc1kwRkJZeXhQUVVGVFJpeEZRVUZYTEV0QlFVOURMRVZCUVdVc0swSkJRWFZEUml4RlFVRm5RaXdyUWtGRmNrZ3NTVUZCU1Vjc1kwRkJZeXhQUVVGVFJpeEZRVUZYTEV0QlFVOURMRVZCUVdVc0swSkJRWFZEUml4RlFVRm5RaXh2UTBGRmNrZ3NTMEZGUVVnc1JVRkJVME1zUlVGQlQwTXNSVUZCVlVNc1JVRkJaVU1zUlVGQlZVTXNSMEZKT1VRc1NVRkJTWGRFTEVWQlFXMUNUQ3hWUVVGVlRTeExRVUZMTEUxQlFVMHNSMEZITlVNc1QwRkdRVVFzUlVGQmFVSktMRmRCUVdGRUxGVkJRVlZOTEV0QlFVc3NUVUZCVFN4SFFVVTFRMFFzUlVGSFZDeFRRVUZUTVVVc01rSkJRVEpDTkVVc1IwRmpiRU1zVDBGQlQyNUZMREpDUVdKUUxGTkJRVk5KTEZOQlFWTkRMRVZCUVU5RExFVkJRVlZETEVWQlFXVkRMRVZCUVZWRExFVkJRV054UkN4SFFVTjRSU3hKUVVGSmJrUXNSVUZCV1U0c1JVRkJUVU1zUjBGRmRFSXNUMEZFWlZNc1dVRkJXVW9zUzBGRFZuZEVMRVZCVFZJc1NVRkJTWHBFTEdOQlFXTXNWMEZCWVVZc1JVRkJWeXhMUVVGUFF5eEZRVUZsTEdOQlJuSkVNa1FzWlVGQlpYcEVMRWRCUlRCRkxHdENRVUZ2UWtvc1JVRkJaMElzWjBKQlFYbENORVFzUlVGQlpTeE5RVVZzVEN4UFFUWk1XQ3hUUVVGVGNrTXNUMEZCVDI1Q0xFZEJRMlFzWTBGQlpVRXNSMEZEWWl4SlFVRkxMRk5CUTB3c1NVRkJTeXhUUVVOTUxFbEJRVXNzV1VGRFNDeFBRVUZQTEVWQlExUXNTVUZCU3l4VlFVTklMRTlCUVZGQkxFVkJRMVlzU1VGQlN5eFRRVU5JTEVkQlFVbERMRTFCUVUxRExGRkJRVkZHTEVkQlEyaENMRTlCUVU5QkxFVkJRVlV3UkN4TlFVRk5ka01zVVVGRmVrSXNSMEZCYTBJc1QwRkJaRzVDTEVkQlFYTkNOMElzUlVGQlpUWkNMRWRCUTNaRExFOUJRVThzUlVGSFZDeEpRVUZKTWtRc1JVRnNXVllzVTBGQlUwTXNZMEZCWTBNc1IwRkRja0lzU1VGQlNVWXNSVUZCWVVVc1NVRkJhMEo0Uml4SFFVRnRRbmRHTEVWQlFXTjRSaXhKUVVGdlFuZEdMRVZCUVdOeVJpeEpRVU4wUnl4SFFVRXdRaXh0UWtGQlptMUdMRVZCUTFRc1QwRkJUMEVzUlVFcldGbERMRU5CUVdNMVJDeEhRVU12UWl4SlFVRkpNa1FzUlVGeFFrWXNUMEZCVHl4RlFYQkNVQ3hKUVVOSlJ5eEZRVVJCZGtZc1JVRkJWMjlHTEVWQlFWZEpMRXRCUVVzdlJDeEhRVVV2UWl4SFFVRkpNa1FzU1VGQlpUTkVMRVZCUVZWblJTeFRRVU16UWl4UFFVRlRSaXhGUVVGUGRrWXNSVUZCVXpCR0xGRkJRVkZETEUxQlF5OUNMRWxCUVVzdlF5eFBRVUZQTWtNc1JVRkJTMHNzVDBGRFppeFBRVUZQTEU5QlMxZ3NUMEZCVTB3c1JVRkJUM1pHTEVWQlFWTXdSaXhSUVVGUlF5eE5RVUZOTEVOQlEzSkRMRWxCUVVsRkxFVkJRVkZPTEVWQlFVdExMRTFCUTJwQ0xFZEJRVWxETEVsQlEwZHFSQ3hQUVVGUGFVUXNSVUZCVFN4SlFVTm9RaXhQUVVGUExFVkJVMnBDTEU5QlFVOHNSVUZEVkN4UlFVTkZMRTlCUVU4c1IwRjNRbUlzVTBGQlUyaEZMRmxCUVZsS0xFZEJRMjVDTEVsQlFVbEhMRk5CUVd0Q1NDeEZRVU4wUWl4UFFVRkpReXhOUVVGTlF5eFJRVUZSUml4SFFVTlVMRkZCUlV4QkxHRkJRWEZDY1VVc1QwRkphRUlzVTBFM1FsZ3NVMEZCVTBNc1UwRkJVMjVGTEVWQlFWVklMRWRCUlRGQ0xFMUJRV2xDTEZkQlFXSkhMRWRCU3l0Q0xGZEJRUzlDU0N4RlFVRlZMR3RDUVV0UkxHMUNRVUZZTVVJc1VVRkJlVUl3UWl4aFFVRnhRakZDTEU5QmJVSnlSR2RITEVOQlFWTnVSU3hGUVVGVlNDeEhRVU5rTEZOQlJVWkhMRVZCUzFRc1UwRkJVM05FTEdWQlFXVjZSQ3hIUVVOMFFpeEhRVUZKTEUxQlFVOUJMRVZCUTFRc1RVRkJUeXhIUVVGTFFTeEZRVVZrTEVsQlFVbEhMRVZCUVZkRExGbEJRVmxLTEVkQlF6TkNMRWRCUVdsQ0xGZEJRV0pITEVWQlFYVkNMRU5CUTNwQ0xFZEJRVWxJTEdGQlFYRkNkVVVzUzBGRGRrSXNUVUZCVHl4UFFVTkdMRWRCUVVsMlJTeGhRVUZ4UW5GRkxFOUJRemxDTEUxQlFVOHNVMEZIV0N4UFFVRlBiRVVzUlVGTFZDeFRRVUZUWjBNc2VVSkJRWGxDWjBNc1IwRkRhRU1zU1VGQlNVc3NSVUZCVDJZc1pVRkJaVlVzUjBGRE1VSXNUMEZCVVVzc1IwRkRUaXhKUVVGTExGRkJRMHdzU1VGQlN5eFRRVU5JTEUxQlFVOHNUVUZCVVVFc1JVRkRha0lzU1VGQlN5eFZRVU5NTEVsQlFVc3NUMEZEVEN4SlFVRkxMRk5CUTBnc1RVRkJUeXhMUVVGUFFTeEZRVU5vUWl4UlFVTkZMRTlCUVU5QkxFZEJaV0lzVDBGMFdVRjZSU3hqUVVGak1FVXNWVUZCV1RGSExFMUJRVTB3Unl4VlFXMVphRU12Uml4RlFVRmxja0lzWlVGQmFVSkJMR1ZCUTJoRGNVSXNSVUZCWldkSExGVkJRVmxvUnl4RlFVVndRa0VpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjSEp2Y0MxMGVYQmxjeTltWVdOMGIzSjVWMmwwYUZSNWNHVkRhR1ZqYTJWeWN5NXFjeUo5IiwiaWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVil7dmFyIFJFQUNUX0VMRU1FTlRfVFlQRT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3ImJlN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpfHw2MDEwMyxpc1ZhbGlkRWxlbWVudD1mdW5jdGlvbihlKXtyZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgZSYmbnVsbCE9PWUmJmUuJCR0eXBlb2Y9PT1SRUFDVF9FTEVNRU5UX1RZUEV9LHRocm93T25EaXJlY3RBY2Nlc3M9ITA7bW9kdWxlLmV4cG9ydHM9cmVxdWlyZShcIi4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnNcIikoaXNWYWxpZEVsZW1lbnQsdGhyb3dPbkRpcmVjdEFjY2Vzcyl9ZWxzZSBtb2R1bGUuZXhwb3J0cz1yZXF1aXJlKFwiLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXNcIikoKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltbHVaR1Y0TG1weklsMHNJbTVoYldWeklqcGJJbkJ5YjJObGMzTWlMQ0psYm5ZaUxDSk9UMFJGWDBWT1ZpSXNJbEpGUVVOVVgwVk1SVTFGVGxSZlZGbFFSU0lzSWxONWJXSnZiQ0lzSW1admNpSXNJbWx6Vm1Gc2FXUkZiR1Z0Wlc1MElpd2liMkpxWldOMElpd2lKQ1IwZVhCbGIyWWlMQ0owYUhKdmQwOXVSR2x5WldOMFFXTmpaWE56SWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0luSmxjWFZwY21VaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVU5QkxFZEJRVFpDTEdWQlFYcENRU3hSUVVGUlF5eEpRVUZKUXl4VFFVRXlRaXhEUVVONlF5eEpRVUZKUXl4dFFrRkJkME1zYlVKQlFWaERMRkZCUXk5Q1FTeFBRVUZQUXl4TFFVTlFSQ3hQUVVGUFF5eEpRVUZKTEd0Q1FVTllMRTFCUlVWRExHVkJRV2xDTEZOQlFWTkRMRWRCUXpWQ0xFMUJRWGxDTEdsQ1FVRllRU3hIUVVORUxFOUJRVmhCTEVkQlEwRkJMRVZCUVU5RExGZEJRV0ZNTEc5Q1FVdHdRazBzY1VKQlFYTkNMRVZCUXpGQ1F5eFBRVUZQUXl4UlFVRlZReXhSUVVGUkxEUkNRVUZTUVN4RFFVRnhRMDRzWlVGQlowSkhMREJDUVVsMFJVTXNUMEZCVDBNc1VVRkJWVU1zVVVGQlVTdzJRa0ZCVWtFaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Y0hKdmNDMTBlWEJsY3k5cGJtUmxlQzVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBSZWFjdFByb3BUeXBlc1NlY3JldD1cIlNFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEXCI7bW9kdWxlLmV4cG9ydHM9UmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbEpsWVdOMFVISnZjRlI1Y0dWelUyVmpjbVYwTG1weklsMHNJbTVoYldWeklqcGJJbEpsWVdOMFVISnZjRlI1Y0dWelUyVmpjbVYwSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCVDBFc1lVRkZRU3hKUVVGSlFTeHhRa0ZCZFVJc0swTkJSVE5DUXl4UFFVRlBReXhSUVVGVlJpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5d2NtOXdMWFI1Y0dWekwyeHBZaTlTWldGamRGQnliM0JVZVhCbGMxTmxZM0psZEM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PXZvaWQgMDt2YXIgX2V4dGVuZHMyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9yZWFjdD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSksX1BhbmVsR3JvdXA9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9QYW5lbEdyb3VwXCIpKSxBY2NvcmRpb249ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gQWNjb3JkaW9uKCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybigwLF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShBY2NvcmRpb24sZSksQWNjb3JkaW9uLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7cmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1BhbmVsR3JvdXAuZGVmYXVsdCwoMCxfZXh0ZW5kczIuZGVmYXVsdCkoe30sdGhpcy5wcm9wcyx7YWNjb3JkaW9uOiEwfSksdGhpcy5wcm9wcy5jaGlsZHJlbil9LEFjY29yZGlvbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KSxfZGVmYXVsdD1BY2NvcmRpb247ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrRmpZMjl5WkdsdmJpNXFjeUpkTENKdVlXMWxjeUk2V3lKZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBJaXdpY21WeGRXbHlaU0lzSW1WNGNHOXlkSE1pTENKZlgyVnpUVzlrZFd4bElpd2laR1ZtWVhWc2RDSXNJbDlsZUhSbGJtUnpNaUlzSWw5cGJtaGxjbWwwYzB4dmIzTmxNaUlzSWw5eVpXRmpkQ0lzSWw5UVlXNWxiRWR5YjNWd0lpd2lRV05qYjNKa2FXOXVJaXdpWDFKbFlXTjBKRU52YlhCdmJtVnVkQ0lzSW1Gd2NHeDVJaXdpZEdocGN5SXNJbUZ5WjNWdFpXNTBjeUlzSW5CeWIzUnZkSGx3WlNJc0luSmxibVJsY2lJc0ltTnlaV0YwWlVWc1pXMWxiblFpTENKd2NtOXdjeUlzSW1GalkyOXlaR2x2YmlJc0ltTm9hV3hrY21WdUlpd2lRMjl0Y0c5dVpXNTBJaXdpWDJSbFptRjFiSFFpTENKdGIyUjFiR1VpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlJVRXNTVUZCU1VFc2RVSkJRWGxDUXl4UlFVRlJMSGRFUVVWeVEwTXNVVUZCVVVNc1dVRkJZU3hGUVVOeVFrUXNVVUZCVVVVc1lVRkJWU3hGUVVWc1FpeEpRVUZKUXl4VlFVRlpUQ3gxUWtGQmRVSkRMRkZCUVZFc01rTkJSVE5EU3l4blFrRkJhMEpPTEhWQ1FVRjFRa01zVVVGQlVTeHBSRUZGYWtSTkxFOUJRVk5RTEhWQ1FVRjFRa01zVVVGQlVTeFZRVVY0UTA4c1dVRkJZMUlzZFVKQlFYVkNReXhSUVVGUkxHbENRVVUzUTFFc1ZVRkZTaXhUUVVGVlF5eEhRVWRTTEZOQlFWTkVMRmxCUTFBc1QwRkJUME1zUlVGQmFVSkRMRTFCUVUxRExFdEJRVTFETEZsQlFXTkVMRXRCVjNCRUxFOUJaRUVzUlVGQlNVNHNaMEpCUVdkQ1JpeFRRVUZUU3l4VlFVRlhReXhIUVUwelFrUXNWVUZCVlVzc1ZVRkZhRUpETEU5QlFWTXNVMEZCVTBFc1UwRkRka0lzVDBGQlQxSXNUMEZCVDBnc1VVRkJVVmtzWTBGQlkxSXNXVUZCV1Vvc1UwRkJVeXhGUVVGSlF5eFZRVUZWUkN4VFFVRlRMRWRCUVVsUkxFdEJRVXRMTEUxQlFVOHNRMEZET1VaRExGZEJRVmNzU1VGRFZFNHNTMEZCUzBzc1RVRkJUVVVzVjBGSFZsWXNWVUZtVkN4RFFXZENSVVlzVDBGQlQwZ3NVVUZCVVdkQ0xGZEJSV0pETEZOQlFWZGFMRlZCUTJaUUxGRkJRVkZGTEZGQlFWVnBRaXhUUVVOc1FrTXNUMEZCVDNCQ0xGRkJRVlZCTEZGQlFXbENJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwzSmxZV04wTFdKdmIzUnpkSEpoY0M5c2FXSXZRV05qYjNKa2FXOXVMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0PXJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO2V4cG9ydHMuX19lc01vZHVsZT0hMCxleHBvcnRzLmRlZmF1bHQ9dm9pZCAwO3ZhciBfdmFsdWVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9vYmplY3QvdmFsdWVzXCIpKSxfZXh0ZW5kczM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSksX2luaGVyaXRzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKSxfY2xhc3NuYW1lcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKSxfcmVhY3Q9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpLF9wcm9wVHlwZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSksX2Jvb3RzdHJhcFV0aWxzPXJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpLF9TdHlsZUNvbmZpZz1yZXF1aXJlKFwiLi91dGlscy9TdHlsZUNvbmZpZ1wiKSxfQ2xvc2VCdXR0b249X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9DbG9zZUJ1dHRvblwiKSkscHJvcFR5cGVzPXtvbkRpc21pc3M6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsY2xvc2VMYWJlbDpfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nfSxkZWZhdWx0UHJvcHM9e2Nsb3NlTGFiZWw6XCJDbG9zZSBhbGVydFwifSxBbGVydD1mdW5jdGlvbihlKXtmdW5jdGlvbiBBbGVydCgpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4oMCxfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoQWxlcnQsZSksQWxlcnQucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXt2YXIgZSx0PXRoaXMucHJvcHMscj10Lm9uRGlzbWlzcyxzPXQuY2xvc2VMYWJlbCxsPXQuY2xhc3NOYW1lLG89dC5jaGlsZHJlbixpPSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KSh0LFtcIm9uRGlzbWlzc1wiLFwiY2xvc2VMYWJlbFwiLFwiY2xhc3NOYW1lXCIsXCJjaGlsZHJlblwiXSksYT0oMCxfYm9vdHN0cmFwVXRpbHMuc3BsaXRCc1Byb3BzKShpKSx1PWFbMF0scD1hWzFdLG49ISFyLF89KDAsX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCgwLF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkodSksKChlPXt9KVsoMCxfYm9vdHN0cmFwVXRpbHMucHJlZml4KSh1LFwiZGlzbWlzc2FibGVcIildPW4sZSkpO3JldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsKDAsX2V4dGVuZHMzLmRlZmF1bHQpKHt9LHAse3JvbGU6XCJhbGVydFwiLGNsYXNzTmFtZTooMCxfY2xhc3NuYW1lcy5kZWZhdWx0KShsLF8pfSksbiYmX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfQ2xvc2VCdXR0b24uZGVmYXVsdCx7b25DbGljazpyLGxhYmVsOnN9KSxvKX0sQWxlcnR9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7QWxlcnQucHJvcFR5cGVzPXByb3BUeXBlcyxBbGVydC5kZWZhdWx0UHJvcHM9ZGVmYXVsdFByb3BzO3ZhciBfZGVmYXVsdD0oMCxfYm9vdHN0cmFwVXRpbHMuYnNTdHlsZXMpKCgwLF92YWx1ZXMuZGVmYXVsdCkoX1N0eWxlQ29uZmlnLlN0YXRlKSxfU3R5bGVDb25maWcuU3RhdGUuSU5GTywoMCxfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoXCJhbGVydFwiLEFsZXJ0KSk7ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrRnNaWEowTG1weklsMHNJbTVoYldWeklqcGJJbDlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRaUxDSnlaWEYxYVhKbElpd2laWGh3YjNKMGN5SXNJbDlmWlhOTmIyUjFiR1VpTENKa1pXWmhkV3gwSWl3aVgzWmhiSFZsY3lJc0lsOWxlSFJsYm1Sek15SXNJbDl2WW1wbFkzUlhhWFJvYjNWMFVISnZjR1Z5ZEdsbGMweHZiM05sTWlJc0lsOXBibWhsY21sMGMweHZiM05sTWlJc0lsOWpiR0Z6YzI1aGJXVnpJaXdpWDNKbFlXTjBJaXdpWDNCeWIzQlVlWEJsY3lJc0lsOWliMjkwYzNSeVlYQlZkR2xzY3lJc0lsOVRkSGxzWlVOdmJtWnBaeUlzSWw5RGJHOXpaVUoxZEhSdmJpSXNJbkJ5YjNCVWVYQmxjeUlzSW05dVJHbHpiV2x6Y3lJc0ltWjFibU1pTENKamJHOXpaVXhoWW1Wc0lpd2ljM1J5YVc1bklpd2laR1ZtWVhWc2RGQnliM0J6SWl3aVFXeGxjblFpTENKZlVtVmhZM1FrUTI5dGNHOXVaVzUwSWl3aVlYQndiSGtpTENKMGFHbHpJaXdpWVhKbmRXMWxiblJ6SWl3aWNISnZkRzkwZVhCbElpd2ljbVZ1WkdWeUlpd2lYMlY0ZEdWdVpITXlJaXdpWDNSb2FYTWtjSEp2Y0hNaUxDSndjbTl3Y3lJc0ltTnNZWE56VG1GdFpTSXNJbU5vYVd4a2NtVnVJaXdpWDNOd2JHbDBRbk5RY205d2N5SXNJbk53YkdsMFFuTlFjbTl3Y3lJc0ltSnpVSEp2Y0hNaUxDSmxiR1Z0Wlc1MFVISnZjSE1pTENKa2FYTnRhWE56WVdKc1pTSXNJbU5zWVhOelpYTWlMQ0puWlhSRGJHRnpjMU5sZENJc0luQnlaV1pwZUNJc0ltTnlaV0YwWlVWc1pXMWxiblFpTENKeWIyeGxJaXdpYjI1RGJHbGpheUlzSW14aFltVnNJaXdpUTI5dGNHOXVaVzUwSWl3aVgyUmxabUYxYkhRaUxDSmljMU4wZVd4bGN5SXNJbE4wWVhSbElpd2lTVTVHVHlJc0ltSnpRMnhoYzNNaUxDSnRiMlIxYkdVaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJSVUVzU1VGQlNVRXNkVUpCUVhsQ1F5eFJRVUZSTEhkRVFVVnlRME1zVVVGQlVVTXNXVUZCWVN4RlFVTnlRa1FzVVVGQlVVVXNZVUZCVlN4RlFVVnNRaXhKUVVGSlF5eFJRVUZWVEN4MVFrRkJkVUpETEZGQlFWRXNhVVJCUlhwRFN5eFZRVUZaVGl4MVFrRkJkVUpETEZGQlFWRXNNa05CUlRORFRTd3JRa0ZCYVVOUUxIVkNRVUYxUWtNc1VVRkJVU3huUlVGRmFFVlBMR2RDUVVGclFsSXNkVUpCUVhWQ1F5eFJRVUZSTEdsRVFVVnFSRkVzV1VGQlkxUXNkVUpCUVhWQ1F5eFJRVUZSTEdWQlJUZERVeXhQUVVGVFZpeDFRa0ZCZFVKRExGRkJRVkVzVlVGRmVFTlZMRmRCUVdGWUxIVkNRVUYxUWtNc1VVRkJVU3hsUVVVMVExY3NaMEpCUVd0Q1dDeFJRVUZSTERCQ1FVVXhRbGtzWVVGQlpWb3NVVUZCVVN4MVFrRkZka0poTEdGQlFXVmtMSFZDUVVGMVFrTXNVVUZCVVN4clFrRkZPVU5qTEZWQlFWa3NRMEZEWkVNc1ZVRkJWMHdzVjBGQlYxQXNVVUZCVVdFc1MwRkRPVUpETEZkQlFWbFFMRmRCUVZkUUxGRkJRVkZsTEZGQlJUZENReXhoUVVGbExFTkJRMnBDUml4WFFVRlpMR1ZCUjFaSExFMUJSVW9zVTBGQlZVTXNSMEZIVWl4VFFVRlRSQ3hSUVVOUUxFOUJRVTlETEVWQlFXbENReXhOUVVGTlF5eExRVUZOUXl4WlFVRmpSQ3hMUVRoQ2NFUXNUMEZxUTBFc1JVRkJTV2hDTEdkQ1FVRm5Ra29zVTBGQlUybENMRTFCUVU5RExFZEJUWFpDUkN4TlFVRk5TeXhWUVVWYVF5eFBRVUZUTEZOQlFWTkJMRk5CUTNaQ0xFbEJRVWxETEVWQlJVRkRMRVZCUVdOTUxFdEJRVXROTEUxQlEyNUNaQ3hGUVVGWllTeEZRVUZaWWl4VlFVTjRRa1VzUlVGQllWY3NSVUZCV1Znc1YwRkRla0poTEVWQlFWbEdMRVZCUVZsRkxGVkJRM2hDUXl4RlFVRlhTQ3hGUVVGWlJ5eFRRVU4yUWtZc1IwRkJVU3hGUVVGSmRrSXNLMEpCUVN0Q1NDeFRRVUZUZVVJc1JVRkJZU3hEUVVGRExGbEJRV0VzWVVGQll5eFpRVUZoTEdGQlJURkhTU3hIUVVGblFpeEZRVUZKY2tJc1owSkJRV2RDYzBJc1kwRkJZMG9zUjBGRGJFUkxMRVZCUVZWR0xFVkJRV01zUjBGRGVFSkhMRVZCUVdWSUxFVkJRV01zUjBGRk4wSkpMRWxCUVdkQ2NrSXNSVUZEYUVKelFpeEhRVUZWTEVWQlFVbG9ReXhWUVVGVlJpeFRRVUZUTEVsQlFVa3NSVUZCU1ZFc1owSkJRV2RDTWtJc1lVRkJZVW9zUzBGQlYxQXNSVUZCV1N4TFFVRmpMRVZCUVVsb1FpeG5Ra0ZCWjBJMFFpeFJRVUZSVEN4RlFVRlRMR2RDUVVGclFrVXNSVUZCWVZRc1NVRkRia3dzVDBGQlQyeENMRTlCUVU5T0xGRkJRVkZ4UXl4alFVRmpMRTlCUVU4c1JVRkJTVzVETEZWQlFWVkdMRk5CUVZNc1IwRkJTV2RETEVWQlFXTXNRMEZEYkVaTkxFdEJRVTBzVVVGRFRsZ3NWMEZCVnl4RlFVRkpkRUlzV1VGQldVd3NVMEZCVXpKQ0xFVkJRVmRQTEV0QlF6ZERSQ3hIUVVGbE0wSXNUMEZCVDA0c1VVRkJVWEZETEdOQlFXTXpRaXhoUVVGaFZpeFJRVUZUTEVOQlEzQkZkVU1zVVVGQlV6TkNMRVZCUTFRMFFpeE5RVUZQTVVJc1NVRkRUR01zU1VGSFExZ3NUVUZzUTFRc1EwRnRRMFZZTEU5QlFVOU9MRkZCUVZGNVF5eFhRVVZxUW5oQ0xFMUJRVTFPTEZWQlFWbEJMRlZCUTJ4Q1RTeE5RVUZOUkN4aFFVRmxRU3hoUVVWeVFpeEpRVUZKTUVJc1ZVRkJWeXhGUVVGSmJFTXNaMEpCUVdkQ2JVTXNWMEZCVlN4RlFVRkpNVU1zVVVGQlVVUXNVMEZCVTFNc1lVRkJZVzFETEU5QlFWRnVReXhoUVVGaGJVTXNUVUZCVFVNc1RVRkJUU3hGUVVGSmNrTXNaMEpCUVdkQ2MwTXNVMEZCVXl4UlFVRlROMElzVVVGRmRFcHVRaXhSUVVGUlJTeFJRVUZWTUVNc1UwRkRiRUpMTEU5QlFVOXFSQ3hSUVVGVlFTeFJRVUZwUWlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDMWliMjkwYzNSeVlYQXZiR2xpTDBGc1pYSjBMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0PXJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO2V4cG9ydHMuX19lc01vZHVsZT0hMCxleHBvcnRzLmRlZmF1bHQ9dm9pZCAwO3ZhciBfZXh0ZW5kczI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSksX2luaGVyaXRzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKSxfY2xhc3NuYW1lcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKSxfcmVhY3Q9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpLF9wcm9wVHlwZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSksX2Jvb3RzdHJhcFV0aWxzPXJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpLHByb3BUeXBlcz17cHVsbFJpZ2h0Ol9wcm9wVHlwZXMuZGVmYXVsdC5ib29sfSxkZWZhdWx0UHJvcHM9e3B1bGxSaWdodDohMX0sQmFkZ2U9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gQmFkZ2UoKXtyZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9KDAsX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKEJhZGdlLGUpO3ZhciB0PUJhZGdlLnByb3RvdHlwZTtyZXR1cm4gdC5oYXNDb250ZW50PWZ1bmN0aW9uIGhhc0NvbnRlbnQoZSl7dmFyIHQ9ITE7cmV0dXJuIF9yZWFjdC5kZWZhdWx0LkNoaWxkcmVuLmZvckVhY2goZSxmdW5jdGlvbihlKXt0fHwoZXx8MD09PWUpJiYodD0hMCl9KSx0fSx0LnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXt2YXIgZT10aGlzLnByb3BzLHQ9ZS5wdWxsUmlnaHQscj1lLmNsYXNzTmFtZSxzPWUuY2hpbGRyZW4sbz0oMCxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoZSxbXCJwdWxsUmlnaHRcIixcImNsYXNzTmFtZVwiLFwiY2hpbGRyZW5cIl0pLGE9KDAsX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykobyksaT1hWzBdLGw9YVsxXSx1PSgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSwoMCxfYm9vdHN0cmFwVXRpbHMuZ2V0Q2xhc3NTZXQpKGkpLHtcInB1bGwtcmlnaHRcIjp0LGhpZGRlbjohdGhpcy5oYXNDb250ZW50KHMpfSk7cmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LGwse2NsYXNzTmFtZTooMCxfY2xhc3NuYW1lcy5kZWZhdWx0KShyLHUpfSkscyl9LEJhZGdlfShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO0JhZGdlLnByb3BUeXBlcz1wcm9wVHlwZXMsQmFkZ2UuZGVmYXVsdFByb3BzPWRlZmF1bHRQcm9wczt2YXIgX2RlZmF1bHQ9KDAsX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKFwiYmFkZ2VcIixCYWRnZSk7ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrSmhaR2RsTG1weklsMHNJbTVoYldWeklqcGJJbDlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRaUxDSnlaWEYxYVhKbElpd2laWGh3YjNKMGN5SXNJbDlmWlhOTmIyUjFiR1VpTENKa1pXWmhkV3gwSWl3aVgyVjRkR1Z1WkhNeUlpd2lYMjlpYW1WamRGZHBkR2h2ZFhSUWNtOXdaWEowYVdWelRHOXZjMlV5SWl3aVgybHVhR1Z5YVhSelRHOXZjMlV5SWl3aVgyTnNZWE56Ym1GdFpYTWlMQ0pmY21WaFkzUWlMQ0pmY0hKdmNGUjVjR1Z6SWl3aVgySnZiM1J6ZEhKaGNGVjBhV3h6SWl3aWNISnZjRlI1Y0dWeklpd2ljSFZzYkZKcFoyaDBJaXdpWW05dmJDSXNJbVJsWm1GMWJIUlFjbTl3Y3lJc0lrSmhaR2RsSWl3aVgxSmxZV04wSkVOdmJYQnZibVZ1ZENJc0ltRndjR3g1SWl3aWRHaHBjeUlzSW1GeVozVnRaVzUwY3lJc0lsOXdjbTkwYnlJc0luQnliM1J2ZEhsd1pTSXNJbWhoYzBOdmJuUmxiblFpTENKamFHbHNaSEpsYmlJc0luSmxjM1ZzZENJc0lrTm9hV3hrY21WdUlpd2labTl5UldGamFDSXNJbU5vYVd4a0lpd2ljbVZ1WkdWeUlpd2lYM1JvYVhNa2NISnZjSE1pTENKd2NtOXdjeUlzSW1Oc1lYTnpUbUZ0WlNJc0lsOXpjR3hwZEVKelVISnZjSE1pTENKemNHeHBkRUp6VUhKdmNITWlMQ0ppYzFCeWIzQnpJaXdpWld4bGJXVnVkRkJ5YjNCeklpd2lZMnhoYzNObGN5SXNJbWRsZEVOc1lYTnpVMlYwSWl3aWNIVnNiQzF5YVdkb2RDSXNJbWhwWkdSbGJpSXNJbU55WldGMFpVVnNaVzFsYm5RaUxDSkRiMjF3YjI1bGJuUWlMQ0pmWkdWbVlYVnNkQ0lzSW1KelEyeGhjM01pTENKdGIyUjFiR1VpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlJVRXNTVUZCU1VFc2RVSkJRWGxDUXl4UlFVRlJMSGRFUVVWeVEwTXNVVUZCVVVNc1dVRkJZU3hGUVVOeVFrUXNVVUZCVVVVc1lVRkJWU3hGUVVWc1FpeEpRVUZKUXl4VlFVRlpUQ3gxUWtGQmRVSkRMRkZCUVZFc01rTkJSVE5EU3l3clFrRkJhVU5PTEhWQ1FVRjFRa01zVVVGQlVTeG5SVUZGYUVWTkxHZENRVUZyUWxBc2RVSkJRWFZDUXl4UlFVRlJMR2xFUVVWcVJFOHNXVUZCWTFJc2RVSkJRWFZDUXl4UlFVRlJMR1ZCUlRkRFVTeFBRVUZUVkN4MVFrRkJkVUpETEZGQlFWRXNWVUZGZUVOVExGZEJRV0ZXTEhWQ1FVRjFRa01zVVVGQlVTeGxRVVUxUTFVc1owSkJRV3RDVml4UlFVRlJMREJDUVVjeFFsY3NWVUZCV1N4RFFVTmtReXhWUVVGWFNDeFhRVUZYVGl4UlFVRlJWU3hOUVVVMVFrTXNZVUZCWlN4RFFVTnFRa1lzVjBGQlZ5eEhRVWRVUnl4TlFVVktMRk5CUVZWRExFZEJSMUlzVTBGQlUwUXNVVUZEVUN4UFFVRlBReXhGUVVGcFFrTXNUVUZCVFVNc1MwRkJUVU1zV1VGQlkwUXNUVUZJY0VRc1JVRkJTVm9zWjBKQlFXZENTQ3hUUVVGVFdTeE5RVUZQUXl4SFFVMXdReXhKUVVGSlNTeEZRVUZUVEN4TlFVRk5UU3hWUVhWRGJrSXNUMEZ5UTBGRUxFVkJRVTlGTEZkQlFXRXNVMEZCVTBFc1YwRkJWME1zUjBGRGRFTXNTVUZCU1VNc1IwRkJVeXhGUVZsaUxFOUJWa0ZvUWl4UFFVRlBUQ3hSUVVGUmMwSXNVMEZCVTBNc1VVRkJVVWdzUlVGQlZTeFRRVUZWU1N4SFFVTTVRMGdzU1VGSlFVY3NSMEZCYlVJc1NVRkJWa0VzUzBGRFdFZ3NSMEZCVXl4TFFVbE9RU3hIUVVkVVNpeEZRVUZQVVN4UFFVRlRMRk5CUVZOQkxGTkJRM1pDTEVsQlFVbERMRVZCUVdOWUxFdEJRVXRaTEUxQlEyNUNiRUlzUlVGQldXbENMRVZCUVZscVFpeFZRVU40UW0xQ0xFVkJRVmxHTEVWQlFWbEZMRlZCUTNoQ1VpeEZRVUZYVFN4RlFVRlpUaXhUUVVOMlFrOHNSMEZCVVN4RlFVRkpla0lzSzBKQlFTdENSaXhUUVVGVE1FSXNSVUZCWVN4RFFVRkRMRmxCUVdFc1dVRkJZU3hoUVVVMVJrY3NSMEZCWjBJc1JVRkJTWFJDTEdkQ1FVRm5RblZDTEdOQlFXTklMRWRCUTJ4RVNTeEZRVUZWUml4RlFVRmpMRWRCUTNoQ1J5eEZRVUZsU0N4RlFVRmpMRWRCUlRkQ1NTeEhRVUZWTEVWQlFVbG9ReXhWUVVGVlJDeFRRVUZUTEVsQlFVa3NSVUZCU1U4c1owSkJRV2RDTWtJc1lVRkJZVWdzUjBGQlZTeERRVU5zUmtrc1lVRkJZekZDTEVWQlJXUXlRaXhSUVVGVGNrSXNTMEZCUzBrc1YwRkJWME1zUzBGRk0wSXNUMEZCVDJZc1QwRkJUMHdzVVVGQlVYRkRMR05CUVdNc1VVRkJVU3hGUVVGSmNFTXNWVUZCVlVRc1UwRkJVeXhIUVVGSlowTXNSVUZCWXl4RFFVTnVSa29zVjBGQlZ5eEZRVUZKZUVJc1dVRkJXVW9zVTBGQlV6UkNMRVZCUVZkTExFdEJRemREWWl4SlFVZERVaXhOUVRsRFZDeERRU3REUlZBc1QwRkJUMHdzVVVGQlVYTkRMRmRCUldwQ01VSXNUVUZCVFVvc1ZVRkJXVUVzVlVGRGJFSkpMRTFCUVUxRUxHRkJRV1ZCTEdGQlJYSkNMRWxCUVVrMFFpeFZRVUZYTEVWQlFVbG9ReXhuUWtGQlowSnBReXhUUVVGVExGRkJRVk0xUWl4UFFVVnlSR1FzVVVGQlVVVXNVVUZCVlhWRExGTkJRMnhDUlN4UFFVRlBNME1zVVVGQlZVRXNVVUZCYVVJaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Y21WaFkzUXRZbTl2ZEhOMGNtRndMMnhwWWk5Q1lXUm5aUzVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0PXJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO2V4cG9ydHMuX19lc01vZHVsZT0hMCxleHBvcnRzLmRlZmF1bHQ9dm9pZCAwO3ZhciBfZXh0ZW5kczI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSksX2luaGVyaXRzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKSxfY2xhc3NuYW1lcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKSxfcmVhY3Q9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpLF9CcmVhZGNydW1iSXRlbT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0JyZWFkY3J1bWJJdGVtXCIpKSxfYm9vdHN0cmFwVXRpbHM9cmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIiksQnJlYWRjcnVtYj1mdW5jdGlvbihlKXtmdW5jdGlvbiBCcmVhZGNydW1iKCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybigwLF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShCcmVhZGNydW1iLGUpLEJyZWFkY3J1bWIucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXt2YXIgZT10aGlzLnByb3BzLHI9ZS5jbGFzc05hbWUsdD0oMCxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoZSxbXCJjbGFzc05hbWVcIl0pLGE9KDAsX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykodCkscz1hWzBdLHU9YVsxXSxvPSgwLF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkocyk7cmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJvbFwiLCgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSx1LHtyb2xlOlwibmF2aWdhdGlvblwiLFwiYXJpYS1sYWJlbFwiOlwiYnJlYWRjcnVtYnNcIixjbGFzc05hbWU6KDAsX2NsYXNzbmFtZXMuZGVmYXVsdCkocixvKX0pKX0sQnJlYWRjcnVtYn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtCcmVhZGNydW1iLkl0ZW09X0JyZWFkY3J1bWJJdGVtLmRlZmF1bHQ7dmFyIF9kZWZhdWx0PSgwLF9ib290c3RyYXBVdGlscy5ic0NsYXNzKShcImJyZWFkY3J1bWJcIixCcmVhZGNydW1iKTtleHBvcnRzLmRlZmF1bHQ9X2RlZmF1bHQsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtKeVpXRmtZM0oxYldJdWFuTWlYU3dpYm1GdFpYTWlPbHNpWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDSXNJbkpsY1hWcGNtVWlMQ0psZUhCdmNuUnpJaXdpWDE5bGMwMXZaSFZzWlNJc0ltUmxabUYxYkhRaUxDSmZaWGgwWlc1a2N6SWlMQ0pmYjJKcVpXTjBWMmwwYUc5MWRGQnliM0JsY25ScFpYTk1iMjl6WlRJaUxDSmZhVzVvWlhKcGRITk1iMjl6WlRJaUxDSmZZMnhoYzNOdVlXMWxjeUlzSWw5eVpXRmpkQ0lzSWw5Q2NtVmhaR055ZFcxaVNYUmxiU0lzSWw5aWIyOTBjM1J5WVhCVmRHbHNjeUlzSWtKeVpXRmtZM0oxYldJaUxDSmZVbVZoWTNRa1EyOXRjRzl1Wlc1MElpd2lZWEJ3YkhraUxDSjBhR2x6SWl3aVlYSm5kVzFsYm5Seklpd2ljSEp2ZEc5MGVYQmxJaXdpY21WdVpHVnlJaXdpWDNSb2FYTWtjSEp2Y0hNaUxDSndjbTl3Y3lJc0ltTnNZWE56VG1GdFpTSXNJbDl6Y0d4cGRFSnpVSEp2Y0hNaUxDSnpjR3hwZEVKelVISnZjSE1pTENKaWMxQnliM0J6SWl3aVpXeGxiV1Z1ZEZCeWIzQnpJaXdpWTJ4aGMzTmxjeUlzSW1kbGRFTnNZWE56VTJWMElpd2lZM0psWVhSbFJXeGxiV1Z1ZENJc0luSnZiR1VpTENKaGNtbGhMV3hoWW1Wc0lpd2lRMjl0Y0c5dVpXNTBJaXdpU1hSbGJTSXNJbDlrWldaaGRXeDBJaXdpWW5ORGJHRnpjeUlzSW0xdlpIVnNaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRlFTeEpRVUZKUVN4MVFrRkJlVUpETEZGQlFWRXNkMFJCUlhKRFF5eFJRVUZSUXl4WlFVRmhMRVZCUTNKQ1JDeFJRVUZSUlN4aFFVRlZMRVZCUld4Q0xFbEJRVWxETEZWQlFWbE1MSFZDUVVGMVFrTXNVVUZCVVN3eVEwRkZNME5MTEN0Q1FVRnBRMDRzZFVKQlFYVkNReXhSUVVGUkxHZEZRVVZvUlUwc1owSkJRV3RDVUN4MVFrRkJkVUpETEZGQlFWRXNhVVJCUldwRVR5eFpRVUZqVWl4MVFrRkJkVUpETEZGQlFWRXNaVUZGTjBOUkxFOUJRVk5VTEhWQ1FVRjFRa01zVVVGQlVTeFZRVVY0UTFNc1owSkJRV3RDVml4MVFrRkJkVUpETEZGQlFWRXNjVUpCUldwRVZTeG5Ra0ZCYTBKV0xGRkJRVkVzTUVKQlJURkNWeXhYUVVWS0xGTkJRVlZETEVkQlIxSXNVMEZCVTBRc1lVRkRVQ3hQUVVGUFF5eEZRVUZwUWtNc1RVRkJUVU1zUzBGQlRVTXNXVUZCWTBRc1MwRnpRbkJFTEU5QmVrSkJMRVZCUVVsU0xHZENRVUZuUWtnc1UwRkJVMUVzVjBGQldVTXNSMEZOTlVKRUxGZEJRVmRMTEZWQlJXcENReXhQUVVGVExGTkJRVk5CTEZOQlEzWkNMRWxCUVVsRExFVkJRV05LTEV0QlFVdExMRTFCUTI1Q1F5eEZRVUZaUml4RlFVRlpSU3hWUVVONFFrUXNSMEZCVVN4RlFVRkpaQ3dyUWtGQkswSkdMRk5CUVZObExFVkJRV0VzUTBGQlF5eGpRVVZzUlVjc1IwRkJaMElzUlVGQlNWZ3NaMEpCUVdkQ1dTeGpRVUZqU0N4SFFVTnNSRWtzUlVGQlZVWXNSVUZCWXl4SFFVTjRRa2NzUlVGQlpVZ3NSVUZCWXl4SFFVVTNRa2tzUjBGQlZTeEZRVUZKWml4blFrRkJaMEpuUWl4aFFVRmhTQ3hIUVVNdlF5eFBRVUZQWml4UFFVRlBUQ3hSUVVGUmQwSXNZMEZCWXl4TlFVRk5MRVZCUVVsMlFpeFZRVUZWUkN4VFFVRlRMRWRCUVVseFFpeEZRVUZqTEVOQlEycEdTU3hMUVVGTkxHRkJRMDVETEdGQlFXTXNZMEZEWkZRc1YwRkJWeXhGUVVGSllpeFpRVUZaU2l4VFFVRlRhVUlzUlVGQlYwc3NUMEZKTlVOa0xGZEJNVUpVTEVOQk1rSkZTQ3hQUVVGUFRDeFJRVUZSTWtJc1YwRkZha0p1UWl4WFFVRlhiMElzUzBGQlQzUkNMR2RDUVVGblFrNHNVVUZGYkVNc1NVRkJTVFpDTEZWQlFWY3NSVUZCU1hSQ0xHZENRVUZuUW5WQ0xGTkJRVk1zWVVGQlkzUkNMRmxCUlRGRVZpeFJRVUZSUlN4UlFVRlZOa0lzVTBGRGJFSkZMRTlCUVU5cVF5eFJRVUZWUVN4UlFVRnBRaUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEMxaWIyOTBjM1J5WVhBdmJHbGlMMEp5WldGa1kzSjFiV0l1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PXZvaWQgMDt2YXIgX2V4dGVuZHMyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKSxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpLF9pbmhlcml0c0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSksX2NsYXNzbmFtZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKSxfcHJvcFR5cGVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpLF9TYWZlQW5jaG9yPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vU2FmZUFuY2hvclwiKSkscHJvcFR5cGVzPXthY3RpdmU6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsaHJlZjpfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLHRpdGxlOl9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLHRhcmdldDpfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nfSxkZWZhdWx0UHJvcHM9e2FjdGl2ZTohMX0sQnJlYWRjcnVtYkl0ZW09ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gQnJlYWRjcnVtYkl0ZW0oKXtyZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9cmV0dXJuKDAsX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKEJyZWFkY3J1bWJJdGVtLGUpLEJyZWFkY3J1bWJJdGVtLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIGU9dGhpcy5wcm9wcyxyPWUuYWN0aXZlLHQ9ZS5ocmVmLGE9ZS50aXRsZSx1PWUudGFyZ2V0LG89ZS5jbGFzc05hbWUscz0oMCxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoZSxbXCJhY3RpdmVcIixcImhyZWZcIixcInRpdGxlXCIsXCJ0YXJnZXRcIixcImNsYXNzTmFtZVwiXSksaT17aHJlZjp0LHRpdGxlOmEsdGFyZ2V0OnV9O3JldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwibGlcIix7Y2xhc3NOYW1lOigwLF9jbGFzc25hbWVzLmRlZmF1bHQpKG8se2FjdGl2ZTpyfSl9LHI/X3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInNwYW5cIixzKTpfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9TYWZlQW5jaG9yLmRlZmF1bHQsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LHMsaSkpKX0sQnJlYWRjcnVtYkl0ZW19KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7QnJlYWRjcnVtYkl0ZW0ucHJvcFR5cGVzPXByb3BUeXBlcyxCcmVhZGNydW1iSXRlbS5kZWZhdWx0UHJvcHM9ZGVmYXVsdFByb3BzO3ZhciBfZGVmYXVsdD1CcmVhZGNydW1iSXRlbTtleHBvcnRzLmRlZmF1bHQ9X2RlZmF1bHQsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtKeVpXRmtZM0oxYldKSmRHVnRMbXB6SWwwc0ltNWhiV1Z6SWpwYklsOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFpTENKeVpYRjFhWEpsSWl3aVpYaHdiM0owY3lJc0lsOWZaWE5OYjJSMWJHVWlMQ0prWldaaGRXeDBJaXdpWDJWNGRHVnVaSE15SWl3aVgyOWlhbVZqZEZkcGRHaHZkWFJRY205d1pYSjBhV1Z6VEc5dmMyVXlJaXdpWDJsdWFHVnlhWFJ6VEc5dmMyVXlJaXdpWDJOc1lYTnpibUZ0WlhNaUxDSmZjbVZoWTNRaUxDSmZjSEp2Y0ZSNWNHVnpJaXdpWDFOaFptVkJibU5vYjNJaUxDSndjbTl3Vkhsd1pYTWlMQ0poWTNScGRtVWlMQ0ppYjI5c0lpd2lhSEpsWmlJc0luTjBjbWx1WnlJc0luUnBkR3hsSWl3aWJtOWtaU0lzSW5SaGNtZGxkQ0lzSW1SbFptRjFiSFJRY205d2N5SXNJa0p5WldGa1kzSjFiV0pKZEdWdElpd2lYMUpsWVdOMEpFTnZiWEJ2Ym1WdWRDSXNJbUZ3Y0d4NUlpd2lkR2hwY3lJc0ltRnlaM1Z0Wlc1MGN5SXNJbkJ5YjNSdmRIbHdaU0lzSW5KbGJtUmxjaUlzSWw5MGFHbHpKSEJ5YjNCeklpd2ljSEp2Y0hNaUxDSmpiR0Z6YzA1aGJXVWlMQ0pzYVc1clVISnZjSE1pTENKamNtVmhkR1ZGYkdWdFpXNTBJaXdpUTI5dGNHOXVaVzUwSWl3aVgyUmxabUYxYkhRaUxDSnRiMlIxYkdVaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJSVUVzU1VGQlNVRXNkVUpCUVhsQ1F5eFJRVUZSTEhkRVFVVnlRME1zVVVGQlVVTXNXVUZCWVN4RlFVTnlRa1FzVVVGQlVVVXNZVUZCVlN4RlFVVnNRaXhKUVVGSlF5eFZRVUZaVEN4MVFrRkJkVUpETEZGQlFWRXNNa05CUlRORFN5d3JRa0ZCYVVOT0xIVkNRVUYxUWtNc1VVRkJVU3huUlVGRmFFVk5MR2RDUVVGclFsQXNkVUpCUVhWQ1F5eFJRVUZSTEdsRVFVVnFSRThzV1VGQlkxSXNkVUpCUVhWQ1F5eFJRVUZSTEdWQlJUZERVU3hQUVVGVFZDeDFRa0ZCZFVKRExGRkJRVkVzVlVGRmVFTlRMRmRCUVdGV0xIVkNRVUYxUWtNc1VVRkJVU3hsUVVVMVExVXNXVUZCWTFnc2RVSkJRWFZDUXl4UlFVRlJMR2xDUVVVM1ExY3NWVUZCV1N4RFFVbGtReXhQUVVGUlNDeFhRVUZYVGl4UlFVRlJWU3hMUVVzelFrTXNTMEZCVFV3c1YwRkJWMDRzVVVGQlVWa3NUMEZMZWtKRExFMUJRVTlRTEZkQlFWZE9MRkZCUVZGakxFdEJTekZDUXl4UFFVRlJWQ3hYUVVGWFRpeFJRVUZSV1N4UlFVVjZRa2tzWVVGQlpTeERRVU5xUWxBc1VVRkJVU3hIUVVkT1VTeGxRVVZLTEZOQlFWVkRMRWRCUjFJc1UwRkJVMFFzYVVKQlExQXNUMEZCVDBNc1JVRkJhVUpETEUxQlFVMURMRXRCUVUxRExGbEJRV05FTEV0Qk1FSndSQ3hQUVRkQ1FTeEZRVUZKYWtJc1owSkJRV2RDU0N4VFFVRlRhVUlzWlVGQlowSkRMRWRCVFdoRFJDeGxRVUZsU3l4VlFVVnlRa01zVDBGQlV5eFRRVUZUUVN4VFFVTjJRaXhKUVVGSlF5eEZRVUZqU2l4TFFVRkxTeXhOUVVOdVFtaENMRVZCUVZObExFVkJRVmxtTEU5QlEzSkNSU3hGUVVGUFlTeEZRVUZaWWl4TFFVTnVRa1VzUlVGQlVWY3NSVUZCV1Znc1RVRkRjRUpGTEVWQlFWTlRMRVZCUVZsVUxFOUJRM0pDVnl4RlFVRlpSaXhGUVVGWlJTeFZRVU40UWtRc1IwRkJVU3hGUVVGSmRrSXNLMEpCUVN0Q1JpeFRRVUZUZDBJc1JVRkJZU3hEUVVGRExGTkJRVlVzVDBGQlVTeFJRVUZUTEZOQlFWVXNZMEZGZGtkSExFVkJRVmtzUTBGRFpHaENMRXRCUVUxQkxFVkJRMDVGTEUxQlFVOUJMRVZCUTFCRkxFOUJRVkZCTEVkQlJWWXNUMEZCVDFZc1QwRkJUMHdzVVVGQlVUUkNMR05CUVdNc1MwRkJUU3hEUVVONFEwWXNWMEZCVnl4RlFVRkpkRUlzV1VGQldVb3NVMEZCVXpCQ0xFVkJRVmNzUTBGRE4wTnFRaXhQUVVGUlFTeExRVVZVUVN4RlFVRlRTaXhQUVVGUFRDeFJRVUZSTkVJc1kwRkJZeXhQUVVGUlNDeEhRVUZUY0VJc1QwRkJUMHdzVVVGQlVUUkNMR05CUVdOeVFpeFpRVUZaVUN4VFFVRlRMRVZCUVVsRExGVkJRVlZFTEZOQlFWTXNSMEZCU1hsQ0xFVkJRVTlGTEUxQlIzcEpWaXhsUVRsQ1ZDeERRU3RDUlZvc1QwRkJUMHdzVVVGQlVUWkNMRmRCUldwQ1dpeGxRVUZsVkN4VlFVRlpRU3hWUVVNelFsTXNaVUZCWlVRc1lVRkJaVUVzWVVGRE9VSXNTVUZCU1dNc1UwRkJWMklzWlVGRFptNUNMRkZCUVZGRkxGRkJRVlU0UWl4VFFVTnNRa01zVDBGQlQycERMRkZCUVZWQkxGRkJRV2xDSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdOMExXSnZiM1J6ZEhKaGNDOXNhV0l2UW5KbFlXUmpjblZ0WWtsMFpXMHVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0PXJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO2V4cG9ydHMuX19lc01vZHVsZT0hMCxleHBvcnRzLmRlZmF1bHQ9dm9pZCAwO3ZhciBfdmFsdWVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9vYmplY3QvdmFsdWVzXCIpKSxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpLF9leHRlbmRzMz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSksX2luaGVyaXRzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKSxfY2xhc3NuYW1lcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKSxfcmVhY3Q9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpLF9wcm9wVHlwZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSksX2VsZW1lbnRUeXBlPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlXCIpKSxfYm9vdHN0cmFwVXRpbHM9cmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIiksX1N0eWxlQ29uZmlnPXJlcXVpcmUoXCIuL3V0aWxzL1N0eWxlQ29uZmlnXCIpLF9TYWZlQW5jaG9yPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vU2FmZUFuY2hvclwiKSkscHJvcFR5cGVzPXthY3RpdmU6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsZGlzYWJsZWQ6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsYmxvY2s6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsb25DbGljazpfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxjb21wb25lbnRDbGFzczpfZWxlbWVudFR5cGUuZGVmYXVsdCxocmVmOl9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsdHlwZTpfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoW1wiYnV0dG9uXCIsXCJyZXNldFwiLFwic3VibWl0XCJdKX0sZGVmYXVsdFByb3BzPXthY3RpdmU6ITEsYmxvY2s6ITEsZGlzYWJsZWQ6ITF9LEJ1dHRvbj1mdW5jdGlvbihlKXtmdW5jdGlvbiBCdXR0b24oKXtyZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9KDAsX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKEJ1dHRvbixlKTt2YXIgdD1CdXR0b24ucHJvdG90eXBlO3JldHVybiB0LnJlbmRlckFuY2hvcj1mdW5jdGlvbiByZW5kZXJBbmNob3IoZSx0KXtyZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU2FmZUFuY2hvci5kZWZhdWx0LCgwLF9leHRlbmRzMy5kZWZhdWx0KSh7fSxlLHtjbGFzc05hbWU6KDAsX2NsYXNzbmFtZXMuZGVmYXVsdCkodCxlLmRpc2FibGVkJiZcImRpc2FibGVkXCIpfSkpfSx0LnJlbmRlckJ1dHRvbj1mdW5jdGlvbiByZW5kZXJCdXR0b24oZSx0KXt2YXIgcj1lLmNvbXBvbmVudENsYXNzLG89KDAsX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKGUsW1wiY29tcG9uZW50Q2xhc3NcIl0pLHM9cnx8XCJidXR0b25cIjtyZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChzLCgwLF9leHRlbmRzMy5kZWZhdWx0KSh7fSxvLHt0eXBlOm8udHlwZXx8XCJidXR0b25cIixjbGFzc05hbWU6dH0pKX0sdC5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIGUsdD10aGlzLnByb3BzLHI9dC5hY3RpdmUsbz10LmJsb2NrLHM9dC5jbGFzc05hbWUsbD0oMCxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkodCxbXCJhY3RpdmVcIixcImJsb2NrXCIsXCJjbGFzc05hbWVcIl0pLGE9KDAsX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykobCksdT1hWzBdLGk9YVsxXSxuPSgwLF9leHRlbmRzMy5kZWZhdWx0KSh7fSwoMCxfYm9vdHN0cmFwVXRpbHMuZ2V0Q2xhc3NTZXQpKHUpLCgoZT17YWN0aXZlOnJ9KVsoMCxfYm9vdHN0cmFwVXRpbHMucHJlZml4KSh1LFwiYmxvY2tcIildPW8sZSkpLHA9KDAsX2NsYXNzbmFtZXMuZGVmYXVsdCkocyxuKTtyZXR1cm4gaS5ocmVmP3RoaXMucmVuZGVyQW5jaG9yKGkscCk6dGhpcy5yZW5kZXJCdXR0b24oaSxwKX0sQnV0dG9ufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO0J1dHRvbi5wcm9wVHlwZXM9cHJvcFR5cGVzLEJ1dHRvbi5kZWZhdWx0UHJvcHM9ZGVmYXVsdFByb3BzO3ZhciBfZGVmYXVsdD0oMCxfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoXCJidG5cIiwoMCxfYm9vdHN0cmFwVXRpbHMuYnNTaXplcykoW19TdHlsZUNvbmZpZy5TaXplLkxBUkdFLF9TdHlsZUNvbmZpZy5TaXplLlNNQUxMLF9TdHlsZUNvbmZpZy5TaXplLlhTTUFMTF0sKDAsX2Jvb3RzdHJhcFV0aWxzLmJzU3R5bGVzKSgoMCxfdmFsdWVzLmRlZmF1bHQpKF9TdHlsZUNvbmZpZy5TdGF0ZSkuY29uY2F0KFtfU3R5bGVDb25maWcuU3R5bGUuREVGQVVMVCxfU3R5bGVDb25maWcuU3R5bGUuUFJJTUFSWSxfU3R5bGVDb25maWcuU3R5bGUuTElOS10pLF9TdHlsZUNvbmZpZy5TdHlsZS5ERUZBVUxULEJ1dHRvbikpKTtleHBvcnRzLmRlZmF1bHQ9X2RlZmF1bHQsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtKMWRIUnZiaTVxY3lKZExDSnVZVzFsY3lJNld5SmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwSWl3aWNtVnhkV2x5WlNJc0ltVjRjRzl5ZEhNaUxDSmZYMlZ6VFc5a2RXeGxJaXdpWkdWbVlYVnNkQ0lzSWw5MllXeDFaWE1pTENKZmIySnFaV04wVjJsMGFHOTFkRkJ5YjNCbGNuUnBaWE5NYjI5elpUSWlMQ0pmWlhoMFpXNWtjek1pTENKZmFXNW9aWEpwZEhOTWIyOXpaVElpTENKZlkyeGhjM051WVcxbGN5SXNJbDl5WldGamRDSXNJbDl3Y205d1ZIbHdaWE1pTENKZlpXeGxiV1Z1ZEZSNWNHVWlMQ0pmWW05dmRITjBjbUZ3VlhScGJITWlMQ0pmVTNSNWJHVkRiMjVtYVdjaUxDSmZVMkZtWlVGdVkyaHZjaUlzSW5CeWIzQlVlWEJsY3lJc0ltRmpkR2wyWlNJc0ltSnZiMndpTENKa2FYTmhZbXhsWkNJc0ltSnNiMk5ySWl3aWIyNURiR2xqYXlJc0ltWjFibU1pTENKamIyMXdiMjVsYm5SRGJHRnpjeUlzSW1oeVpXWWlMQ0p6ZEhKcGJtY2lMQ0owZVhCbElpd2liMjVsVDJZaUxDSmtaV1poZFd4MFVISnZjSE1pTENKQ2RYUjBiMjRpTENKZlVtVmhZM1FrUTI5dGNHOXVaVzUwSWl3aVlYQndiSGtpTENKMGFHbHpJaXdpWVhKbmRXMWxiblJ6SWl3aVgzQnliM1J2SWl3aWNISnZkRzkwZVhCbElpd2ljbVZ1WkdWeVFXNWphRzl5SWl3aVpXeGxiV1Z1ZEZCeWIzQnpJaXdpWTJ4aGMzTk9ZVzFsSWl3aVkzSmxZWFJsUld4bGJXVnVkQ0lzSW5KbGJtUmxja0oxZEhSdmJpSXNJbDl5WldZaUxDSkRiMjF3YjI1bGJuUWlMQ0p5Wlc1a1pYSWlMQ0pmWlhoMFpXNWtjeklpTENKZmRHaHBjeVJ3Y205d2N5SXNJbkJ5YjNCeklpd2lYM053YkdsMFFuTlFjbTl3Y3lJc0luTndiR2wwUW5OUWNtOXdjeUlzSW1KelVISnZjSE1pTENKamJHRnpjMlZ6SWl3aVoyVjBRMnhoYzNOVFpYUWlMQ0p3Y21WbWFYZ2lMQ0ptZFd4c1EyeGhjM05PWVcxbElpd2lYMlJsWm1GMWJIUWlMQ0ppYzBOc1lYTnpJaXdpWW5OVGFYcGxjeUlzSWxOcGVtVWlMQ0pNUVZKSFJTSXNJbE5OUVV4TUlpd2lXRk5OUVV4TUlpd2lZbk5UZEhsc1pYTWlMQ0pUZEdGMFpTSXNJbU52Ym1OaGRDSXNJbE4wZVd4bElpd2lSRVZHUVZWTVZDSXNJbEJTU1UxQlVsa2lMQ0pNU1U1TElpd2liVzlrZFd4bElsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVVZCTEVsQlFVbEJMSFZDUVVGNVFrTXNVVUZCVVN4M1JFRkZja05ETEZGQlFWRkRMRmxCUVdFc1JVRkRja0pFTEZGQlFWRkZMR0ZCUVZVc1JVRkZiRUlzU1VGQlNVTXNVVUZCVlV3c2RVSkJRWFZDUXl4UlFVRlJMR2xFUVVWNlEwc3NLMEpCUVdsRFRpeDFRa0ZCZFVKRExGRkJRVkVzWjBWQlJXaEZUU3hWUVVGWlVDeDFRa0ZCZFVKRExGRkJRVkVzTWtOQlJUTkRUeXhuUWtGQmEwSlNMSFZDUVVGMVFrTXNVVUZCVVN4cFJFRkZha1JSTEZsQlFXTlVMSFZDUVVGMVFrTXNVVUZCVVN4bFFVVTNRMU1zVDBGQlUxWXNkVUpCUVhWQ1F5eFJRVUZSTEZWQlJYaERWU3hYUVVGaFdDeDFRa0ZCZFVKRExGRkJRVkVzWlVGRk5VTlhMR0ZCUVdWYUxIVkNRVUYxUWtNc1VVRkJVU3h4UTBGRk9VTlpMR2RDUVVGclFsb3NVVUZCVVN3d1FrRkZNVUpoTEdGQlFXVmlMRkZCUVZFc2RVSkJSWFpDWXl4WlFVRmpaaXgxUWtGQmRVSkRMRkZCUVZFc2FVSkJSVGREWlN4VlFVRlpMRU5CUTJSRExFOUJRVkZPTEZkQlFWZFFMRkZCUVZGakxFdEJRek5DUXl4VFFVRlZVaXhYUVVGWFVDeFJRVUZSWXl4TFFVTTNRa1VzVFVGQlQxUXNWMEZCVjFBc1VVRkJVV01zUzBGRE1VSkhMRkZCUVZOV0xGZEJRVmRRTEZGQlFWRnJRaXhMUVVNMVFrTXNaVUZCWjBKWUxHRkJRV0ZTTEZGQlF6ZENiMElzUzBGQlRXSXNWMEZCVjFBc1VVRkJVWEZDTEU5QlRYcENReXhMUVVGTlppeFhRVUZYVUN4UlFVRlJkVUlzVFVGQlRTeERRVUZETEZOQlFWVXNVVUZCVXl4WlFVVnFSRU1zWVVGQlpTeERRVU5xUWxnc1VVRkJVU3hGUVVOU1J5eFBRVUZQTEVWQlExQkVMRlZCUVZVc1IwRkhVbFVzVDBGRlNpeFRRVUZWUXl4SFFVZFNMRk5CUVZORUxGTkJRMUFzVDBGQlQwTXNSVUZCYVVKRExFMUJRVTFETEV0QlFVMURMRmxCUVdORUxFMUJTSEJFTEVWQlFVbDRRaXhuUWtGQlowSktMRk5CUVZONVFpeFBRVUZSUXl4SFFVMXlReXhKUVVGSlNTeEZRVUZUVEN4UFFVRlBUU3hWUVRKRGNFSXNUMEY2UTBGRUxFVkJRVTlGTEdGQlFXVXNVMEZCVTBFc1lVRkJZVU1zUlVGQlkwTXNSMEZEZUVRc1QwRkJUelZDTEU5QlFVOU9MRkZCUVZGdFF5eGpRVUZqZUVJc1dVRkJXVmdzVTBGQlV5eEZRVUZKUnl4VlFVRlZTQ3hUUVVGVExFZEJRVWxwUXl4RlFVRmpMRU5CUTJoSFF5eFhRVUZYTEVWQlFVazNRaXhaUVVGWlRDeFRRVUZUYTBNc1JVRkJWMFFzUlVGQllXeENMRlZCUVZrc1owSkJTVFZGWlN4RlFVRlBUU3hoUVVGbExGTkJRVk5CTEdGQlFXRkRMRVZCUVUxSUxFZEJRMmhFTEVsQlFVbG1MRVZCUVdsQ2EwSXNSVUZCUzJ4Q0xHVkJRM1JDWXl4SFFVRmxMRVZCUVVrdlFpd3JRa0ZCSzBKR0xGTkJRVk54UXl4RlFVRk5MRU5CUVVNc2JVSkJRMnhGUXl4RlFVRlpia0lzUjBGQmEwSXNVMEZEYkVNc1QwRkJUMklzVDBGQlQwNHNVVUZCVVcxRExHTkJRV05ITEVkQlFWY3NSVUZCU1c1RExGVkJRVlZJTEZOQlFWTXNSMEZCU1dsRExFVkJRV01zUTBGRGRFWllMRXRCUVUxWExFVkJRV0ZZTEUxQlFWRXNVMEZETTBKWkxGVkJRVmRCTEUxQlNXWktMRVZCUVU5VExFOUJRVk1zVTBGQlUwRXNVMEZEZGtJc1NVRkJTVU1zUlVGRlFVTXNSVUZCWTJJc1MwRkJTMk1zVFVGRGJrSTNRaXhGUVVGVE5FSXNSVUZCV1RWQ0xFOUJRM0pDUnl4RlFVRlJlVUlzUlVGQldYcENMRTFCUTNCQ2EwSXNSVUZCV1U4c1JVRkJXVkFzVlVGRGVFSlJMRWRCUVZFc1JVRkJTWGhETEN0Q1FVRXJRa1lzVTBGQlUzbERMRVZCUVdFc1EwRkJReXhUUVVGVkxGRkJRVk1zWTBGRmNrWkZMRWRCUVdkQ0xFVkJRVWxzUXl4blFrRkJaMEp0UXl4alFVRmpSaXhIUVVOc1JFY3NSVUZCVlVZc1JVRkJZeXhIUVVONFFsWXNSVUZCWlZVc1JVRkJZeXhIUVVVM1FrY3NSMEZCVlN4RlFVRkpNME1zVlVGQlZVZ3NVMEZCVXl4SlFVRkpMRVZCUVVsVExHZENRVUZuUW5ORExHRkJRV0ZHTEV0QlFWZE1MRVZCUVZrc1EwRkRMMFl6UWl4UFFVRlJRU3hMUVVOSExFVkJRVWxLTEdkQ1FVRm5RblZETEZGQlFWRklMRVZCUVZNc1ZVRkJXVGRDTEVWQlFVOTNRaXhKUVVOcVJWTXNSMEZCWjBJc1JVRkJTVFZETEZsQlFWbE1MRk5CUVZOclF5eEZRVUZYV1N4SFFVVjRSQ3hQUVVGSllpeEZRVUZoWWl4TFFVTlNVU3hMUVVGTFNTeGhRVUZoUXl4RlFVRmpaMElzUjBGSGJFTnlRaXhMUVVGTFVTeGhRVUZoU0N4RlFVRmpaMElzU1VGSGJFTjRRaXhQUVd4RVZDeERRVzFFUlc1Q0xFOUJRVTlPTEZGQlFWRnpReXhYUVVWcVFtSXNUMEZCVDJJc1ZVRkJXVUVzVlVGRGJrSmhMRTlCUVU5RUxHRkJRV1ZCTEdGQlJYUkNMRWxCUVVrd1FpeFZRVUZYTEVWQlFVbDZReXhuUWtGQlowSXdReXhUUVVGVExFOUJRVThzUlVGQlNURkRMR2RDUVVGblFqSkRMRk5CUVZNc1EwRkJRekZETEdGQlFXRXlReXhMUVVGTFF5eE5RVUZQTlVNc1lVRkJZVEpETEV0QlFVdEZMRTFCUVU4M1F5eGhRVUZoTWtNc1MwRkJTMGNzVTBGQlV5eEZRVUZKTDBNc1owSkJRV2RDWjBRc1YwRkJWU3hGUVVGSmVFUXNVVUZCVVVRc1UwRkJVMVVzWVVGQllXZEVMRTlCUVU5RExFOUJRVThzUTBGQlEycEVMR0ZCUVdGclJDeE5RVUZOUXl4UlFVRlRia1FzWVVGQllXdEVMRTFCUVUxRkxGRkJRVk53UkN4aFFVRmhhMFFzVFVGQlRVY3NUMEZCVVhKRUxHRkJRV0ZyUkN4TlFVRk5ReXhSUVVGVGNFTXNWVUZGTlZZelFpeFJRVUZSUlN4UlFVRlZhMFFzVTBGRGJFSmpMRTlCUVU5c1JTeFJRVUZWUVN4UlFVRnBRaUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEMxaWIyOTBjM1J5WVhBdmJHbGlMMEoxZEhSdmJpNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9leHRlbmRzMz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSksX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9jbGFzc25hbWVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpLF9yZWFjdD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSksX3Byb3BUeXBlcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKSxfYWxsPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXMtZXh0cmEvbGliL2FsbFwiKSksX0J1dHRvbj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0J1dHRvblwiKSksX2Jvb3RzdHJhcFV0aWxzPXJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpLHByb3BUeXBlcz17dmVydGljYWw6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsanVzdGlmaWVkOl9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLGJsb2NrOigwLF9hbGwuZGVmYXVsdCkoX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsZnVuY3Rpb24oZSl7dmFyIHQ9ZS5ibG9jayxyPWUudmVydGljYWw7cmV0dXJuIHQmJiFyP25ldyBFcnJvcihcImBibG9ja2AgcmVxdWlyZXMgYHZlcnRpY2FsYCB0byBiZSBzZXQgdG8gaGF2ZSBhbnkgZWZmZWN0XCIpOm51bGx9KX0sZGVmYXVsdFByb3BzPXtibG9jazohMSxqdXN0aWZpZWQ6ITEsdmVydGljYWw6ITF9LEJ1dHRvbkdyb3VwPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIEJ1dHRvbkdyb3VwKCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybigwLF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShCdXR0b25Hcm91cCxlKSxCdXR0b25Hcm91cC5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uIHJlbmRlcigpe3ZhciBlLHQ9dGhpcy5wcm9wcyxyPXQuYmxvY2ssbz10Lmp1c3RpZmllZCxzPXQudmVydGljYWwsdT10LmNsYXNzTmFtZSxpPSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KSh0LFtcImJsb2NrXCIsXCJqdXN0aWZpZWRcIixcInZlcnRpY2FsXCIsXCJjbGFzc05hbWVcIl0pLGw9KDAsX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykoaSkscD1sWzBdLGE9bFsxXSxuPSgwLF9leHRlbmRzMy5kZWZhdWx0KSh7fSwoMCxfYm9vdHN0cmFwVXRpbHMuZ2V0Q2xhc3NTZXQpKHApLCgoZT17fSlbKDAsX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkocCldPSFzLGVbKDAsX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkocCxcInZlcnRpY2FsXCIpXT1zLGVbKDAsX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkocCxcImp1c3RpZmllZFwiKV09byxlWygwLF9ib290c3RyYXBVdGlscy5wcmVmaXgpKF9CdXR0b24uZGVmYXVsdC5kZWZhdWx0UHJvcHMsXCJibG9ja1wiKV09cixlKSk7cmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwoMCxfZXh0ZW5kczMuZGVmYXVsdCkoe30sYSx7Y2xhc3NOYW1lOigwLF9jbGFzc25hbWVzLmRlZmF1bHQpKHUsbil9KSl9LEJ1dHRvbkdyb3VwfShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO0J1dHRvbkdyb3VwLnByb3BUeXBlcz1wcm9wVHlwZXMsQnV0dG9uR3JvdXAuZGVmYXVsdFByb3BzPWRlZmF1bHRQcm9wczt2YXIgX2RlZmF1bHQ9KDAsX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKFwiYnRuLWdyb3VwXCIsQnV0dG9uR3JvdXApO2V4cG9ydHMuZGVmYXVsdD1fZGVmYXVsdCxtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa0oxZEhSdmJrZHliM1Z3TG1weklsMHNJbTVoYldWeklqcGJJbDlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRaUxDSnlaWEYxYVhKbElpd2laWGh3YjNKMGN5SXNJbDlmWlhOTmIyUjFiR1VpTENKa1pXWmhkV3gwSWl3aVgyVjRkR1Z1WkhNeklpd2lYMjlpYW1WamRGZHBkR2h2ZFhSUWNtOXdaWEowYVdWelRHOXZjMlV5SWl3aVgybHVhR1Z5YVhSelRHOXZjMlV5SWl3aVgyTnNZWE56Ym1GdFpYTWlMQ0pmY21WaFkzUWlMQ0pmY0hKdmNGUjVjR1Z6SWl3aVgyRnNiQ0lzSWw5Q2RYUjBiMjRpTENKZlltOXZkSE4wY21Gd1ZYUnBiSE1pTENKd2NtOXdWSGx3WlhNaUxDSjJaWEowYVdOaGJDSXNJbUp2YjJ3aUxDSnFkWE4wYVdacFpXUWlMQ0ppYkc5amF5SXNJbDl5WldZaUxDSkZjbkp2Y2lJc0ltUmxabUYxYkhSUWNtOXdjeUlzSWtKMWRIUnZia2R5YjNWd0lpd2lYMUpsWVdOMEpFTnZiWEJ2Ym1WdWRDSXNJbUZ3Y0d4NUlpd2lkR2hwY3lJc0ltRnlaM1Z0Wlc1MGN5SXNJbkJ5YjNSdmRIbHdaU0lzSW5KbGJtUmxjaUlzSWw5bGVIUmxibVJ6TWlJc0lsOTBhR2x6SkhCeWIzQnpJaXdpY0hKdmNITWlMQ0pqYkdGemMwNWhiV1VpTENKZmMzQnNhWFJDYzFCeWIzQnpJaXdpYzNCc2FYUkNjMUJ5YjNCeklpd2lZbk5RY205d2N5SXNJbVZzWlcxbGJuUlFjbTl3Y3lJc0ltTnNZWE56WlhNaUxDSm5aWFJEYkdGemMxTmxkQ0lzSW5CeVpXWnBlQ0lzSW1OeVpXRjBaVVZzWlcxbGJuUWlMQ0pEYjIxd2IyNWxiblFpTENKZlpHVm1ZWFZzZENJc0ltSnpRMnhoYzNNaUxDSnRiMlIxYkdVaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJSVUVzU1VGQlNVRXNkVUpCUVhsQ1F5eFJRVUZSTEhkRVFVVnlRME1zVVVGQlVVTXNXVUZCWVN4RlFVTnlRa1FzVVVGQlVVVXNZVUZCVlN4RlFVVnNRaXhKUVVGSlF5eFZRVUZaVEN4MVFrRkJkVUpETEZGQlFWRXNNa05CUlRORFN5d3JRa0ZCYVVOT0xIVkNRVUYxUWtNc1VVRkJVU3huUlVGRmFFVk5MR2RDUVVGclFsQXNkVUpCUVhWQ1F5eFJRVUZSTEdsRVFVVnFSRThzV1VGQlkxSXNkVUpCUVhWQ1F5eFJRVUZSTEdWQlJUZERVU3hQUVVGVFZDeDFRa0ZCZFVKRExGRkJRVkVzVlVGRmVFTlRMRmRCUVdGV0xIVkNRVUYxUWtNc1VVRkJVU3hsUVVVMVExVXNTMEZCVDFnc2RVSkJRWFZDUXl4UlFVRlJMRFpDUVVWMFExY3NVVUZCVlZvc2RVSkJRWFZDUXl4UlFVRlJMR0ZCUlhwRFdTeG5Ra0ZCYTBKYUxGRkJRVkVzTUVKQlJURkNZU3hWUVVGWkxFTkJRMlJETEZOQlFWVk1MRmRCUVZkT0xGRkJRVkZaTEV0QlF6ZENReXhWUVVGWFVDeFhRVUZYVGl4UlFVRlJXU3hMUVUwNVFrVXNUMEZCVHl4RlFVRkpVQ3hMUVVGTFVDeFRRVUZUVFN4WFFVRlhUaXhSUVVGUldTeExRVUZOTEZOQlFWVkhMRWRCUXpGRUxFbEJRVWxFTEVWQlFWRkRMRVZCUVV0RUxFMUJRMkpJTEVWQlFWZEpMRVZCUVV0S0xGTkJRM0JDTEU5QlFVOUhMRWxCUVZWSUxFVkJRVmNzU1VGQlNVc3NUVUZCVFN3MFJFRkJPRVFzVVVGSGNFZERMR0ZCUVdVc1EwRkRha0pJTEU5QlFVOHNSVUZEVUVRc1YwRkJWeXhGUVVOWVJpeFZRVUZWTEVkQlIxSlBMRmxCUlVvc1UwRkJWVU1zUjBGSFVpeFRRVUZUUkN4alFVTlFMRTlCUVU5RExFVkJRV2xDUXl4TlFVRk5ReXhMUVVGTlF5eFpRVUZqUkN4TFFYbENjRVFzVDBFMVFrRXNSVUZCU1d4Q0xHZENRVUZuUWtnc1UwRkJVMnRDTEZsQlFXRkRMRWRCVFRkQ1JDeFpRVUZaU3l4VlFVVnNRa01zVDBGQlV5eFRRVUZUUVN4VFFVTjJRaXhKUVVGSlF5eEZRVVZCUXl4RlFVRmpUQ3hMUVVGTFRTeE5RVU51UW1Jc1JVRkJVVmtzUlVGQldWb3NUVUZEY0VKRUxFVkJRVmxoTEVWQlFWbGlMRlZCUTNoQ1JpeEZRVUZYWlN4RlFVRlpaaXhUUVVOMlFtbENMRVZCUVZsR0xFVkJRVmxGTEZWQlEzaENSQ3hIUVVGUkxFVkJRVWw2UWl3clFrRkJLMEpHTEZOQlFWTXdRaXhGUVVGaExFTkJRVU1zVVVGQlV5eFpRVUZoTEZkQlFWa3NZMEZGY0VkSExFZEJRV2RDTEVWQlFVbHdRaXhuUWtGQlowSnhRaXhqUVVGalNDeEhRVU5zUkVrc1JVRkJWVVlzUlVGQll5eEhRVU40UWtjc1JVRkJaVWdzUlVGQll5eEhRVVUzUWtrc1IwRkJWU3hGUVVGSmFFTXNWVUZCVlVRc1UwRkJVeXhKUVVGSkxFVkJRVWxUTEdkQ1FVRm5RbmxDTEdGQlFXRklMRXRCUVZkT0xFVkJRVmtzUzBGQll5eEZRVUZKYUVJc1owSkJRV2RDTUVJc1VVRkJVVW9zUzBGQllYQkNMRVZCUVZWakxFZEJRVlVzUlVGQlNXaENMR2RDUVVGblFqQkNMRkZCUVZGS0xFVkJRVk1zWVVGQlpYQkNMRVZCUVZWakxFZEJRVlVzUlVGQlNXaENMR2RDUVVGblFqQkNMRkZCUVZGS0xFVkJRVk1zWTBGQlowSnNRaXhGUVVGWFdTeEhRVUZWTEVWQlFVbG9RaXhuUWtGQlowSXdRaXhSUVVGUk0wSXNVVUZCVVZJc1VVRkJVV2xDTEdGQlFXTXNWVUZCV1Vnc1JVRkJUMWNzU1VGRE0xa3NUMEZCVDNCQ0xFOUJRVTlNTEZGQlFWRnZReXhqUVVGakxFOUJRVThzUlVGQlNXNURMRlZCUVZWRUxGTkJRVk1zUjBGQlNXZERMRVZCUVdNc1EwRkRiRVpLTEZkQlFWY3NSVUZCU1hoQ0xGbEJRVmxLTEZOQlFWTTBRaXhGUVVGWFN5eFBRVWsxUTJZc1dVRTNRbFFzUTBFNFFrVmlMRTlCUVU5TUxGRkJRVkZ4UXl4WFFVVnFRbTVDTEZsQlFWbFNMRlZCUVZsQkxGVkJRM2hDVVN4WlFVRlpSQ3hoUVVGbFFTeGhRVVV6UWl4SlFVRkpjVUlzVlVGQlZ5eEZRVUZKTjBJc1owSkJRV2RDT0VJc1UwRkJVeXhaUVVGaGNrSXNZVUZGZWtSd1FpeFJRVUZSUlN4UlFVRlZjME1zVTBGRGJFSkZMRTlCUVU4eFF5eFJRVUZWUVN4UlFVRnBRaUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEMxaWIyOTBjM1J5WVhBdmJHbGlMMEoxZEhSdmJrZHliM1Z3TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PXZvaWQgMDt2YXIgX2V4dGVuZHMyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKSxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpLF9pbmhlcml0c0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSksX2NsYXNzbmFtZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKSxfYm9vdHN0cmFwVXRpbHM9cmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIiksQnV0dG9uVG9vbGJhcj1mdW5jdGlvbihlKXtmdW5jdGlvbiBCdXR0b25Ub29sYmFyKCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybigwLF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShCdXR0b25Ub29sYmFyLGUpLEJ1dHRvblRvb2xiYXIucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXt2YXIgZT10aGlzLnByb3BzLHQ9ZS5jbGFzc05hbWUscj0oMCxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoZSxbXCJjbGFzc05hbWVcIl0pLG89KDAsX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykocikscz1vWzBdLGE9b1sxXSx1PSgwLF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkocyk7cmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwoMCxfZXh0ZW5kczIuZGVmYXVsdCkoe30sYSx7cm9sZTpcInRvb2xiYXJcIixjbGFzc05hbWU6KDAsX2NsYXNzbmFtZXMuZGVmYXVsdCkodCx1KX0pKX0sQnV0dG9uVG9vbGJhcn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KSxfZGVmYXVsdD0oMCxfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoXCJidG4tdG9vbGJhclwiLEJ1dHRvblRvb2xiYXIpO2V4cG9ydHMuZGVmYXVsdD1fZGVmYXVsdCxtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa0oxZEhSdmJsUnZiMnhpWVhJdWFuTWlYU3dpYm1GdFpYTWlPbHNpWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDSXNJbkpsY1hWcGNtVWlMQ0psZUhCdmNuUnpJaXdpWDE5bGMwMXZaSFZzWlNJc0ltUmxabUYxYkhRaUxDSmZaWGgwWlc1a2N6SWlMQ0pmYjJKcVpXTjBWMmwwYUc5MWRGQnliM0JsY25ScFpYTk1iMjl6WlRJaUxDSmZhVzVvWlhKcGRITk1iMjl6WlRJaUxDSmZZMnhoYzNOdVlXMWxjeUlzSWw5eVpXRmpkQ0lzSWw5aWIyOTBjM1J5WVhCVmRHbHNjeUlzSWtKMWRIUnZibFJ2YjJ4aVlYSWlMQ0pmVW1WaFkzUWtRMjl0Y0c5dVpXNTBJaXdpWVhCd2JIa2lMQ0owYUdseklpd2lZWEpuZFcxbGJuUnpJaXdpY0hKdmRHOTBlWEJsSWl3aWNtVnVaR1Z5SWl3aVgzUm9hWE1rY0hKdmNITWlMQ0p3Y205d2N5SXNJbU5zWVhOelRtRnRaU0lzSWw5emNHeHBkRUp6VUhKdmNITWlMQ0p6Y0d4cGRFSnpVSEp2Y0hNaUxDSmljMUJ5YjNCeklpd2laV3hsYldWdWRGQnliM0J6SWl3aVkyeGhjM05sY3lJc0ltZGxkRU5zWVhOelUyVjBJaXdpWTNKbFlYUmxSV3hsYldWdWRDSXNJbkp2YkdVaUxDSkRiMjF3YjI1bGJuUWlMQ0pmWkdWbVlYVnNkQ0lzSW1KelEyeGhjM01pTENKdGIyUjFiR1VpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlJVRXNTVUZCU1VFc2RVSkJRWGxDUXl4UlFVRlJMSGRFUVVWeVEwTXNVVUZCVVVNc1dVRkJZU3hGUVVOeVFrUXNVVUZCVVVVc1lVRkJWU3hGUVVWc1FpeEpRVUZKUXl4VlFVRlpUQ3gxUWtGQmRVSkRMRkZCUVZFc01rTkJSVE5EU3l3clFrRkJhVU5PTEhWQ1FVRjFRa01zVVVGQlVTeG5SVUZGYUVWTkxHZENRVUZyUWxBc2RVSkJRWFZDUXl4UlFVRlJMR2xFUVVWcVJFOHNXVUZCWTFJc2RVSkJRWFZDUXl4UlFVRlJMR1ZCUlRkRFVTeFBRVUZUVkN4MVFrRkJkVUpETEZGQlFWRXNWVUZGZUVOVExHZENRVUZyUWxRc1VVRkJVU3d3UWtGRk1VSlZMR05CUlVvc1UwRkJWVU1zUjBGSFVpeFRRVUZUUkN4blFrRkRVQ3hQUVVGUFF5eEZRVUZwUWtNc1RVRkJUVU1zUzBGQlRVTXNXVUZCWTBRc1MwRnhRbkJFTEU5QmVFSkJMRVZCUVVsUUxHZENRVUZuUWtnc1UwRkJVMDhzWTBGQlpVTXNSMEZOTDBKRUxHTkJRV05MTEZWQlJYQkNReXhQUVVGVExGTkJRVk5CTEZOQlEzWkNMRWxCUVVsRExFVkJRV05LTEV0QlFVdExMRTFCUTI1Q1F5eEZRVUZaUml4RlFVRlpSU3hWUVVONFFrUXNSMEZCVVN4RlFVRkpZaXdyUWtGQkswSkdMRk5CUVZOakxFVkJRV0VzUTBGQlF5eGpRVVZzUlVjc1IwRkJaMElzUlVGQlNWZ3NaMEpCUVdkQ1dTeGpRVUZqU0N4SFFVTnNSRWtzUlVGQlZVWXNSVUZCWXl4SFFVTjRRa2NzUlVGQlpVZ3NSVUZCWXl4SFFVVTNRa2tzUjBGQlZTeEZRVUZKWml4blFrRkJaMEpuUWl4aFFVRmhTQ3hIUVVNdlF5eFBRVUZQWkN4UFFVRlBUQ3hSUVVGUmRVSXNZMEZCWXl4UFFVRlBMRVZCUVVsMFFpeFZRVUZWUkN4VFFVRlRMRWRCUVVsdlFpeEZRVUZqTEVOQlEyeEdTU3hMUVVGTkxGVkJRMDVTTEZkQlFWY3NSVUZCU1Zvc1dVRkJXVW9zVTBGQlUyZENMRVZCUVZkTExFOUJTVFZEWkN4alFYcENWQ3hEUVRCQ1JVWXNUMEZCVDB3c1VVRkJVWGxDTEZkQlJXSkRMRlZCUVZjc1JVRkJTWEJDTEdkQ1FVRm5RbkZDTEZOQlFWTXNZMEZCWlhCQ0xHVkJSVE5FVkN4UlFVRlJSU3hSUVVGVk1FSXNVMEZEYkVKRkxFOUJRVTg1UWl4UlFVRlZRU3hSUVVGcFFpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzFpYjI5MGMzUnlZWEF2YkdsaUwwSjFkSFJ2YmxSdmIyeGlZWEl1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpLF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9leHRlbmRzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSksX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLF9jbGFzc25hbWVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpLF9yZWFjdD1faW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpLF9wcm9wVHlwZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSksX0Nhcm91c2VsQ2FwdGlvbj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0Nhcm91c2VsQ2FwdGlvblwiKSksX0Nhcm91c2VsSXRlbT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0Nhcm91c2VsSXRlbVwiKSksX0dseXBoaWNvbj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0dseXBoaWNvblwiKSksX1NhZmVBbmNob3I9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9TYWZlQW5jaG9yXCIpKSxfYm9vdHN0cmFwVXRpbHM9cmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIiksX1ZhbGlkQ29tcG9uZW50Q2hpbGRyZW49X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9WYWxpZENvbXBvbmVudENoaWxkcmVuXCIpKSxwcm9wVHlwZXM9e3NsaWRlOl9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLGluZGljYXRvcnM6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsaW50ZXJ2YWw6X3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixjb250cm9sczpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxwYXVzZU9uSG92ZXI6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsd3JhcDpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxvblNlbGVjdDpfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxvblNsaWRlRW5kOl9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLGFjdGl2ZUluZGV4Ol9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsZGVmYXVsdEFjdGl2ZUluZGV4Ol9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsZGlyZWN0aW9uOl9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbXCJwcmV2XCIsXCJuZXh0XCJdKSxwcmV2SWNvbjpfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxwcmV2TGFiZWw6X3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxuZXh0SWNvbjpfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxuZXh0TGFiZWw6X3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ30sZGVmYXVsdFByb3BzPXtzbGlkZTohMCxpbnRlcnZhbDo1ZTMscGF1c2VPbkhvdmVyOiEwLHdyYXA6ITAsaW5kaWNhdG9yczohMCxjb250cm9sczohMCxwcmV2SWNvbjpfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9HbHlwaGljb24uZGVmYXVsdCx7Z2x5cGg6XCJjaGV2cm9uLWxlZnRcIn0pLHByZXZMYWJlbDpcIlByZXZpb3VzXCIsbmV4dEljb246X3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfR2x5cGhpY29uLmRlZmF1bHQse2dseXBoOlwiY2hldnJvbi1yaWdodFwifSksbmV4dExhYmVsOlwiTmV4dFwifSxDYXJvdXNlbD1mdW5jdGlvbihlKXtmdW5jdGlvbiBDYXJvdXNlbCh0LGkpe3ZhciBuOyhuPWUuY2FsbCh0aGlzLHQsaSl8fHRoaXMpLmhhbmRsZU1vdXNlT3Zlcj1uLmhhbmRsZU1vdXNlT3Zlci5iaW5kKCgwLF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKG4pKSksbi5oYW5kbGVNb3VzZU91dD1uLmhhbmRsZU1vdXNlT3V0LmJpbmQoKDAsX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoKDAsX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkobikpKSxuLmhhbmRsZVByZXY9bi5oYW5kbGVQcmV2LmJpbmQoKDAsX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoKDAsX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkobikpKSxuLmhhbmRsZU5leHQ9bi5oYW5kbGVOZXh0LmJpbmQoKDAsX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoKDAsX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkobikpKSxuLmhhbmRsZUl0ZW1BbmltYXRlT3V0RW5kPW4uaGFuZGxlSXRlbUFuaW1hdGVPdXRFbmQuYmluZCgoMCxfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KSgoMCxfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShuKSkpO3ZhciByPXQuZGVmYXVsdEFjdGl2ZUluZGV4O3JldHVybiBuLnN0YXRlPXthY3RpdmVJbmRleDpudWxsIT1yP3I6MCxwcmV2aW91c0FjdGl2ZUluZGV4Om51bGwsZGlyZWN0aW9uOm51bGx9LG4uaXNVbm1vdW50ZWQ9ITEsbn0oMCxfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoQ2Fyb3VzZWwsZSk7dmFyIHQ9Q2Fyb3VzZWwucHJvdG90eXBlO3JldHVybiB0LmNvbXBvbmVudERpZE1vdW50PWZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCl7dGhpcy53YWl0Rm9yTmV4dCgpfSx0LmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM9ZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhlKXt2YXIgdD10aGlzLmdldEFjdGl2ZUluZGV4KCk7bnVsbCE9ZS5hY3RpdmVJbmRleCYmZS5hY3RpdmVJbmRleCE9PXQmJihjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KSx0aGlzLnNldFN0YXRlKHtwcmV2aW91c0FjdGl2ZUluZGV4OnQsZGlyZWN0aW9uOm51bGwhPWUuZGlyZWN0aW9uP2UuZGlyZWN0aW9uOnRoaXMuZ2V0RGlyZWN0aW9uKHQsZS5hY3RpdmVJbmRleCl9KSksbnVsbD09ZS5hY3RpdmVJbmRleCYmdGhpcy5zdGF0ZS5hY3RpdmVJbmRleD49ZS5jaGlsZHJlbi5sZW5ndGgmJnRoaXMuc2V0U3RhdGUoe2FjdGl2ZUluZGV4OjAscHJldmlvdXNBY3RpdmVJbmRleDpudWxsLGRpcmVjdGlvbjpudWxsfSl9LHQuY29tcG9uZW50V2lsbFVubW91bnQ9ZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKXtjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KSx0aGlzLmlzVW5tb3VudGVkPSEwfSx0LmdldEFjdGl2ZUluZGV4PWZ1bmN0aW9uIGdldEFjdGl2ZUluZGV4KCl7dmFyIGU9dGhpcy5wcm9wcy5hY3RpdmVJbmRleDtyZXR1cm4gbnVsbCE9ZT9lOnRoaXMuc3RhdGUuYWN0aXZlSW5kZXh9LHQuZ2V0RGlyZWN0aW9uPWZ1bmN0aW9uIGdldERpcmVjdGlvbihlLHQpe3JldHVybiBlPT09dD9udWxsOmU+dD9cInByZXZcIjpcIm5leHRcIn0sdC5oYW5kbGVJdGVtQW5pbWF0ZU91dEVuZD1mdW5jdGlvbiBoYW5kbGVJdGVtQW5pbWF0ZU91dEVuZCgpe3ZhciBlPXRoaXM7dGhpcy5zZXRTdGF0ZSh7cHJldmlvdXNBY3RpdmVJbmRleDpudWxsLGRpcmVjdGlvbjpudWxsfSxmdW5jdGlvbigpe2Uud2FpdEZvck5leHQoKSxlLnByb3BzLm9uU2xpZGVFbmQmJmUucHJvcHMub25TbGlkZUVuZCgpfSl9LHQuaGFuZGxlTW91c2VPdXQ9ZnVuY3Rpb24gaGFuZGxlTW91c2VPdXQoKXt0aGlzLmlzUGF1c2VkJiZ0aGlzLnBsYXkoKX0sdC5oYW5kbGVNb3VzZU92ZXI9ZnVuY3Rpb24gaGFuZGxlTW91c2VPdmVyKCl7dGhpcy5wcm9wcy5wYXVzZU9uSG92ZXImJnRoaXMucGF1c2UoKX0sdC5oYW5kbGVOZXh0PWZ1bmN0aW9uIGhhbmRsZU5leHQoZSl7dmFyIHQ9dGhpcy5nZXRBY3RpdmVJbmRleCgpKzE7aWYodD5fVmFsaWRDb21wb25lbnRDaGlsZHJlbi5kZWZhdWx0LmNvdW50KHRoaXMucHJvcHMuY2hpbGRyZW4pLTEpe2lmKCF0aGlzLnByb3BzLndyYXApcmV0dXJuO3Q9MH10aGlzLnNlbGVjdCh0LGUsXCJuZXh0XCIpfSx0LmhhbmRsZVByZXY9ZnVuY3Rpb24gaGFuZGxlUHJldihlKXt2YXIgdD10aGlzLmdldEFjdGl2ZUluZGV4KCktMTtpZih0PDApe2lmKCF0aGlzLnByb3BzLndyYXApcmV0dXJuO3Q9X1ZhbGlkQ29tcG9uZW50Q2hpbGRyZW4uZGVmYXVsdC5jb3VudCh0aGlzLnByb3BzLmNoaWxkcmVuKS0xfXRoaXMuc2VsZWN0KHQsZSxcInByZXZcIil9LHQucGF1c2U9ZnVuY3Rpb24gcGF1c2UoKXt0aGlzLmlzUGF1c2VkPSEwLGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpfSx0LnBsYXk9ZnVuY3Rpb24gcGxheSgpe3RoaXMuaXNQYXVzZWQ9ITEsdGhpcy53YWl0Rm9yTmV4dCgpfSx0LnNlbGVjdD1mdW5jdGlvbiBzZWxlY3QoZSx0LGkpe2lmKGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpLCF0aGlzLmlzVW5tb3VudGVkKXt2YXIgbj10aGlzLnByb3BzLnNsaWRlP3RoaXMuZ2V0QWN0aXZlSW5kZXgoKTpudWxsO2k9aXx8dGhpcy5nZXREaXJlY3Rpb24obixlKTt2YXIgcj10aGlzLnByb3BzLm9uU2VsZWN0O2lmKHImJihyLmxlbmd0aD4xPyh0Pyh0LnBlcnNpc3QoKSx0LmRpcmVjdGlvbj1pKTp0PXtkaXJlY3Rpb246aX0scihlLHQpKTpyKGUpKSxudWxsPT10aGlzLnByb3BzLmFjdGl2ZUluZGV4JiZlIT09bil7aWYobnVsbCE9dGhpcy5zdGF0ZS5wcmV2aW91c0FjdGl2ZUluZGV4KXJldHVybjt0aGlzLnNldFN0YXRlKHthY3RpdmVJbmRleDplLHByZXZpb3VzQWN0aXZlSW5kZXg6bixkaXJlY3Rpb246aX0pfX19LHQud2FpdEZvck5leHQ9ZnVuY3Rpb24gd2FpdEZvck5leHQoKXt2YXIgZT10aGlzLnByb3BzLHQ9ZS5zbGlkZSxpPWUuaW50ZXJ2YWwsbj1lLmFjdGl2ZUluZGV4OyF0aGlzLmlzUGF1c2VkJiZ0JiZpJiZudWxsPT1uJiYodGhpcy50aW1lb3V0PXNldFRpbWVvdXQodGhpcy5oYW5kbGVOZXh0LGkpKX0sdC5yZW5kZXJDb250cm9scz1mdW5jdGlvbiByZW5kZXJDb250cm9scyhlKXt2YXIgdD1lLndyYXAsaT1lLmNoaWxkcmVuLG49ZS5hY3RpdmVJbmRleCxyPWUucHJldkljb24sYT1lLm5leHRJY29uLGw9ZS5ic1Byb3BzLHM9ZS5wcmV2TGFiZWwsbz1lLm5leHRMYWJlbCx1PSgwLF9ib290c3RyYXBVdGlscy5wcmVmaXgpKGwsXCJjb250cm9sXCIpLGQ9X1ZhbGlkQ29tcG9uZW50Q2hpbGRyZW4uZGVmYXVsdC5jb3VudChpKTtyZXR1cm5bKHR8fDAhPT1uKSYmX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU2FmZUFuY2hvci5kZWZhdWx0LHtrZXk6XCJwcmV2XCIsY2xhc3NOYW1lOigwLF9jbGFzc25hbWVzLmRlZmF1bHQpKHUsXCJsZWZ0XCIpLG9uQ2xpY2s6dGhpcy5oYW5kbGVQcmV2fSxyLHMmJl9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIse2NsYXNzTmFtZTpcInNyLW9ubHlcIn0scykpLCh0fHxuIT09ZC0xKSYmX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU2FmZUFuY2hvci5kZWZhdWx0LHtrZXk6XCJuZXh0XCIsY2xhc3NOYW1lOigwLF9jbGFzc25hbWVzLmRlZmF1bHQpKHUsXCJyaWdodFwiKSxvbkNsaWNrOnRoaXMuaGFuZGxlTmV4dH0sYSxvJiZfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLHtjbGFzc05hbWU6XCJzci1vbmx5XCJ9LG8pKV19LHQucmVuZGVySW5kaWNhdG9ycz1mdW5jdGlvbiByZW5kZXJJbmRpY2F0b3JzKGUsdCxpKXt2YXIgbj10aGlzLHI9W107cmV0dXJuIF9WYWxpZENvbXBvbmVudENoaWxkcmVuLmRlZmF1bHQuZm9yRWFjaChlLGZ1bmN0aW9uKGUsaSl7ci5wdXNoKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJsaVwiLHtrZXk6aSxjbGFzc05hbWU6aT09PXQ/XCJhY3RpdmVcIjpudWxsLG9uQ2xpY2s6ZnVuY3Rpb24gb25DbGljayhlKXtyZXR1cm4gbi5zZWxlY3QoaSxlKX19KSxcIiBcIil9KSxfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwib2xcIix7Y2xhc3NOYW1lOigwLF9ib290c3RyYXBVdGlscy5wcmVmaXgpKGksXCJpbmRpY2F0b3JzXCIpfSxyKX0sdC5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIGU9dGhpcyx0PXRoaXMucHJvcHMsaT10LnNsaWRlLG49dC5pbmRpY2F0b3JzLHI9dC5jb250cm9scyxhPXQud3JhcCxsPXQucHJldkljb24scz10LnByZXZMYWJlbCxvPXQubmV4dEljb24sdT10Lm5leHRMYWJlbCxkPXQuY2xhc3NOYW1lLHA9dC5jaGlsZHJlbixjPSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KSh0LFtcInNsaWRlXCIsXCJpbmRpY2F0b3JzXCIsXCJjb250cm9sc1wiLFwid3JhcFwiLFwicHJldkljb25cIixcInByZXZMYWJlbFwiLFwibmV4dEljb25cIixcIm5leHRMYWJlbFwiLFwiY2xhc3NOYW1lXCIsXCJjaGlsZHJlblwiXSksaD10aGlzLnN0YXRlLGY9aC5wcmV2aW91c0FjdGl2ZUluZGV4LHY9aC5kaXJlY3Rpb24sXz0oMCxfYm9vdHN0cmFwVXRpbHMuc3BsaXRCc1Byb3BzQW5kT21pdCkoYyxbXCJpbnRlcnZhbFwiLFwicGF1c2VPbkhvdmVyXCIsXCJvblNlbGVjdFwiLFwib25TbGlkZUVuZFwiLFwiYWN0aXZlSW5kZXhcIixcImRlZmF1bHRBY3RpdmVJbmRleFwiLFwiZGlyZWN0aW9uXCJdKSxtPV9bMF0seD1fWzFdLEk9dGhpcy5nZXRBY3RpdmVJbmRleCgpLGI9KDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCgwLF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkobSkse3NsaWRlOml9KTtyZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSx4LHtjbGFzc05hbWU6KDAsX2NsYXNzbmFtZXMuZGVmYXVsdCkoZCxiKSxvbk1vdXNlT3Zlcjp0aGlzLmhhbmRsZU1vdXNlT3Zlcixvbk1vdXNlT3V0OnRoaXMuaGFuZGxlTW91c2VPdXR9KSxuJiZ0aGlzLnJlbmRlckluZGljYXRvcnMocCxJLG0pLF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7Y2xhc3NOYW1lOigwLF9ib290c3RyYXBVdGlscy5wcmVmaXgpKG0sXCJpbm5lclwiKX0sX1ZhbGlkQ29tcG9uZW50Q2hpbGRyZW4uZGVmYXVsdC5tYXAocCxmdW5jdGlvbih0LG4pe3ZhciByPW49PT1JLGE9aSYmbj09PWY7cmV0dXJuKDAsX3JlYWN0LmNsb25lRWxlbWVudCkodCx7YWN0aXZlOnIsaW5kZXg6bixhbmltYXRlT3V0OmEsYW5pbWF0ZUluOnImJm51bGwhPWYmJmksZGlyZWN0aW9uOnYsb25BbmltYXRlT3V0RW5kOmE/ZS5oYW5kbGVJdGVtQW5pbWF0ZU91dEVuZDpudWxsfSl9KSksciYmdGhpcy5yZW5kZXJDb250cm9scyh7d3JhcDphLGNoaWxkcmVuOnAsYWN0aXZlSW5kZXg6SSxwcmV2SWNvbjpsLHByZXZMYWJlbDpzLG5leHRJY29uOm8sbmV4dExhYmVsOnUsYnNQcm9wczptfSkpfSxDYXJvdXNlbH0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtDYXJvdXNlbC5wcm9wVHlwZXM9cHJvcFR5cGVzLENhcm91c2VsLmRlZmF1bHRQcm9wcz1kZWZhdWx0UHJvcHMsQ2Fyb3VzZWwuQ2FwdGlvbj1fQ2Fyb3VzZWxDYXB0aW9uLmRlZmF1bHQsQ2Fyb3VzZWwuSXRlbT1fQ2Fyb3VzZWxJdGVtLmRlZmF1bHQ7dmFyIF9kZWZhdWx0PSgwLF9ib290c3RyYXBVdGlscy5ic0NsYXNzKShcImNhcm91c2VsXCIsQ2Fyb3VzZWwpO2V4cG9ydHMuZGVmYXVsdD1fZGVmYXVsdCxtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa05oY205MWMyVnNMbXB6SWwwc0ltNWhiV1Z6SWpwYklsOXBiblJsY205d1VtVnhkV2x5WlZkcGJHUmpZWEprSWl3aWNtVnhkV2x5WlNJc0lsOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFpTENKbGVIQnZjblJ6SWl3aVgxOWxjMDF2WkhWc1pTSXNJbVJsWm1GMWJIUWlMQ0pmWlhoMFpXNWtjeklpTENKZmIySnFaV04wVjJsMGFHOTFkRkJ5YjNCbGNuUnBaWE5NYjI5elpUSWlMQ0pmYVc1b1pYSnBkSE5NYjI5elpUSWlMQ0pmWVhOelpYSjBWR2hwYzBsdWFYUnBZV3hwZW1Wa01pSXNJbDlqYkdGemMyNWhiV1Z6SWl3aVgzSmxZV04wSWl3aVgzQnliM0JVZVhCbGN5SXNJbDlEWVhKdmRYTmxiRU5oY0hScGIyNGlMQ0pmUTJGeWIzVnpaV3hKZEdWdElpd2lYMGRzZVhCb2FXTnZiaUlzSWw5VFlXWmxRVzVqYUc5eUlpd2lYMkp2YjNSemRISmhjRlYwYVd4eklpd2lYMVpoYkdsa1EyOXRjRzl1Wlc1MFEyaHBiR1J5Wlc0aUxDSndjbTl3Vkhsd1pYTWlMQ0p6Ykdsa1pTSXNJbUp2YjJ3aUxDSnBibVJwWTJGMGIzSnpJaXdpYVc1MFpYSjJZV3dpTENKdWRXMWlaWElpTENKamIyNTBjbTlzY3lJc0luQmhkWE5sVDI1SWIzWmxjaUlzSW5keVlYQWlMQ0p2YmxObGJHVmpkQ0lzSW1aMWJtTWlMQ0p2YmxOc2FXUmxSVzVrSWl3aVlXTjBhWFpsU1c1a1pYZ2lMQ0prWldaaGRXeDBRV04wYVhabFNXNWtaWGdpTENKa2FYSmxZM1JwYjI0aUxDSnZibVZQWmlJc0luQnlaWFpKWTI5dUlpd2libTlrWlNJc0luQnlaWFpNWVdKbGJDSXNJbk4wY21sdVp5SXNJbTVsZUhSSlkyOXVJaXdpYm1WNGRFeGhZbVZzSWl3aVpHVm1ZWFZzZEZCeWIzQnpJaXdpWTNKbFlYUmxSV3hsYldWdWRDSXNJbWRzZVhCb0lpd2lRMkZ5YjNWelpXd2lMQ0pmVW1WaFkzUWtRMjl0Y0c5dVpXNTBJaXdpY0hKdmNITWlMQ0pqYjI1MFpYaDBJaXdpWDNSb2FYTWlMQ0pqWVd4c0lpd2lkR2hwY3lJc0ltaGhibVJzWlUxdmRYTmxUM1psY2lJc0ltSnBibVFpTENKb1lXNWtiR1ZOYjNWelpVOTFkQ0lzSW1oaGJtUnNaVkJ5WlhZaUxDSm9ZVzVrYkdWT1pYaDBJaXdpYUdGdVpHeGxTWFJsYlVGdWFXMWhkR1ZQZFhSRmJtUWlMQ0p6ZEdGMFpTSXNJbkJ5WlhacGIzVnpRV04wYVhabFNXNWtaWGdpTENKcGMxVnViVzkxYm5SbFpDSXNJbDl3Y205MGJ5SXNJbkJ5YjNSdmRIbHdaU0lzSW1OdmJYQnZibVZ1ZEVScFpFMXZkVzUwSWl3aWQyRnBkRVp2Y2s1bGVIUWlMQ0pqYjIxd2IyNWxiblJYYVd4c1VtVmpaV2wyWlZCeWIzQnpJaXdpYm1WNGRGQnliM0J6SWl3aVoyVjBRV04wYVhabFNXNWtaWGdpTENKamJHVmhjbFJwYldWdmRYUWlMQ0owYVcxbGIzVjBJaXdpYzJWMFUzUmhkR1VpTENKblpYUkVhWEpsWTNScGIyNGlMQ0pqYUdsc1pISmxiaUlzSW14bGJtZDBhQ0lzSW1OdmJYQnZibVZ1ZEZkcGJHeFZibTF2ZFc1MElpd2lZV04wYVhabFNXNWtaWGhRY205d0lpd2ljSEpsZGtsdVpHVjRJaXdpYVc1a1pYZ2lMQ0pmZEdocGN6SWlMQ0pwYzFCaGRYTmxaQ0lzSW5Cc1lYa2lMQ0p3WVhWelpTSXNJbVVpTENKamIzVnVkQ0lzSW5ObGJHVmpkQ0lzSW5CbGNuTnBjM1FpTENKZmRHaHBjeVJ3Y205d2N5SXNJbk5sZEZScGJXVnZkWFFpTENKeVpXNWtaWEpEYjI1MGNtOXNjeUlzSW5CeWIzQmxjblJwWlhNaUxDSmljMUJ5YjNCeklpd2lZMjl1ZEhKdmJFTnNZWE56VG1GdFpTSXNJbkJ5WldacGVDSXNJbXRsZVNJc0ltTnNZWE56VG1GdFpTSXNJbTl1UTJ4cFkyc2lMQ0p5Wlc1a1pYSkpibVJwWTJGMGIzSnpJaXdpWDNSb2FYTXpJaXdpWm05eVJXRmphQ0lzSW1Ob2FXeGtJaXdpY0hWemFDSXNJbkpsYm1SbGNpSXNJbDkwYUdsek5DSXNJbDkwYUdsekpIQnliM0J6TWlJc0lsOTBhR2x6SkhOMFlYUmxJaXdpWDNOd2JHbDBRbk5RY205d2MwRnVaRTl0YVhRaUxDSnpjR3hwZEVKelVISnZjSE5CYm1SUGJXbDBJaXdpWld4bGJXVnVkRkJ5YjNCeklpd2lZMnhoYzNObGN5SXNJbWRsZEVOc1lYTnpVMlYwSWl3aWIyNU5iM1Z6WlU5MlpYSWlMQ0p2YmsxdmRYTmxUM1YwSWl3aWJXRndJaXdpWVdOMGFYWmxJaXdpY0hKbGRtbHZkWE5CWTNScGRtVWlMQ0pqYkc5dVpVVnNaVzFsYm5RaUxDSmhibWx0WVhSbFQzVjBJaXdpWVc1cGJXRjBaVWx1SWl3aWIyNUJibWx0WVhSbFQzVjBSVzVrSWl3aVEyOXRjRzl1Wlc1MElpd2lRMkZ3ZEdsdmJpSXNJa2wwWlcwaUxDSmZaR1ZtWVhWc2RDSXNJbUp6UTJ4aGMzTWlMQ0p0YjJSMWJHVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUlVFc1NVRkJTVUVzZDBKQlFUQkNReXhSUVVGUkxIbEVRVVZzUTBNc2RVSkJRWGxDUkN4UlFVRlJMSGRFUVVWeVEwVXNVVUZCVVVNc1dVRkJZU3hGUVVOeVFrUXNVVUZCVVVVc1lVRkJWU3hGUVVWc1FpeEpRVUZKUXl4VlFVRlpTaXgxUWtGQmRVSkVMRkZCUVZFc01rTkJSVE5EVFN3clFrRkJhVU5NTEhWQ1FVRjFRa1FzVVVGQlVTeG5SVUZGYUVWUExHZENRVUZyUWs0c2RVSkJRWFZDUkN4UlFVRlJMR2xFUVVWcVJGRXNkMEpCUVRCQ1VDeDFRa0ZCZFVKRUxGRkJRVkVzZVVSQlJYcEVVeXhaUVVGalVpeDFRa0ZCZFVKRUxGRkJRVkVzWlVGRk4wTlZMRTlCUVZOWUxIZENRVUYzUWtNc1VVRkJVU3hWUVVWNlExY3NWMEZCWVZZc2RVSkJRWFZDUkN4UlFVRlJMR1ZCUlRWRFdTeHBRa0ZCYlVKWUxIVkNRVUYxUWtRc1VVRkJVU3h6UWtGRmJFUmhMR05CUVdkQ1dpeDFRa0ZCZFVKRUxGRkJRVkVzYlVKQlJTOURZeXhYUVVGaFlpeDFRa0ZCZFVKRUxGRkJRVkVzWjBKQlJUVkRaU3haUVVGalpDeDFRa0ZCZFVKRUxGRkJRVkVzYVVKQlJUZERaMElzWjBKQlFXdENhRUlzVVVGQlVTd3dRa0ZGTVVKcFFpeDNRa0ZCTUVKb1FpeDFRa0ZCZFVKRUxGRkJRVkVzYlVOQlNYcEVhMElzVlVGQldTeERRVU5rUXl4TlFVRlBVaXhYUVVGWFVDeFJRVUZSWjBJc1MwRkRNVUpETEZkQlFWbFdMRmRCUVZkUUxGRkJRVkZuUWl4TFFVMHZRa1VzVTBGQlZWZ3NWMEZCVjFBc1VVRkJVVzFDTEU5QlF6ZENReXhUUVVGVllpeFhRVUZYVUN4UlFVRlJaMElzUzBGRE4wSkxMR0ZCUVdOa0xGZEJRVmRRTEZGQlFWRm5RaXhMUVVOcVEwMHNTMEZCVFdZc1YwRkJWMUFzVVVGQlVXZENMRXRCWVhwQ1R5eFRRVUZWYUVJc1YwRkJWMUFzVVVGQlVYZENMRXRCUXpkQ1F5eFhRVUZaYkVJc1YwRkJWMUFzVVVGQlVYZENMRXRCUXk5Q1JTeFpRVUZoYmtJc1YwRkJWMUFzVVVGQlVXMUNMRTlCUTJoRFVTeHRRa0ZCYjBKd1FpeFhRVUZYVUN4UlFVRlJiVUlzVDBGRGRrTlRMRlZCUVZkeVFpeFhRVUZYVUN4UlFVRlJOa0lzVFVGQlRTeERRVUZETEU5QlFWRXNVMEZETjBORExGTkJRVlYyUWl4WFFVRlhVQ3hSUVVGUkswSXNTMEZQTjBKRExGVkJRVmQ2UWl4WFFVRlhVQ3hSUVVGUmFVTXNUMEZET1VKRExGTkJRVlV6UWl4WFFVRlhVQ3hSUVVGUkswSXNTMEZQTjBKSkxGVkJRVmMxUWl4WFFVRlhVQ3hSUVVGUmFVTXNVVUZGTlVKSExHRkJRV1VzUTBGRGFrSnlRaXhQUVVGUExFVkJRMUJITEZOQlFWVXNTVUZEVmtjc1kwRkJZeXhGUVVOa1F5eE5RVUZOTEVWQlEwNU1MRmxCUVZrc1JVRkRXa2NzVlVGQlZTeEZRVU5XVlN4VFFVRlZlRUlzVDBGQlQwNHNVVUZCVVhGRExHTkJRV016UWl4WFFVRlhWaXhSUVVGVExFTkJRM3BFYzBNc1RVRkJUeXhwUWtGRlZFNHNWVUZCVnl4WFFVTllSU3hUUVVGVk5VSXNUMEZCVDA0c1VVRkJVWEZETEdOQlFXTXpRaXhYUVVGWFZpeFJRVUZUTEVOQlEzcEVjME1zVFVGQlR5eHJRa0ZGVkVnc1ZVRkJWeXhSUVVkVVNTeFRRVVZLTEZOQlFWVkRMRWRCUjFJc1UwRkJVMFFzVTBGQlUwVXNSVUZCVDBNc1IwRkRka0lzU1VGQlNVTXNSMEZGU2tFc1JVRkJVVWdzUlVGQmFVSkpMRXRCUVV0RExFdEJRVTFLTEVWQlFVOURMRWxCUVZsSExFMUJRMnBFUXl4blFrRkJhMEpJTEVWQlFVMUhMR2RDUVVGblFrTXNUVUZCU3l4RlFVRkpNME1zZDBKQlFYZENTaXhWUVVGVExFVkJRVWxKTEhkQ1FVRjNRa29zVTBGQlV6SkRMRXRCUXpkSVFTeEZRVUZOU3l4bFFVRnBRa3dzUlVGQlRVc3NaVUZCWlVRc1RVRkJTeXhGUVVGSk0wTXNkMEpCUVhkQ1NpeFZRVUZUTEVWQlFVbEpMSGRDUVVGM1Frb3NVMEZCVXpKRExFdEJRek5JUVN4RlFVRk5UU3hYUVVGaFRpeEZRVUZOVFN4WFFVRlhSaXhOUVVGTExFVkJRVWt6UXl4M1FrRkJkMEpLTEZWQlFWTXNSVUZCU1Vrc2QwSkJRWGRDU2l4VFFVRlRNa01zUzBGRGJraEJMRVZCUVUxUExGZEJRV0ZRTEVWQlFVMVBMRmRCUVZkSUxFMUJRVXNzUlVGQlNUTkRMSGRDUVVGM1Frb3NWVUZCVXl4RlFVRkpTU3gzUWtGQmQwSktMRk5CUVZNeVF5eExRVU51U0VFc1JVRkJUVkVzZDBKQlFUQkNVaXhGUVVGTlVTeDNRa0ZCZDBKS0xFMUJRVXNzUlVGQlNUTkRMSGRDUVVGM1Frb3NWVUZCVXl4RlFVRkpTU3gzUWtGQmQwSktMRk5CUVZNeVF5eExRVU0zU1N4SlFVRkphRUlzUlVGQmNVSmpMRVZCUVUxa0xHMUNRVTh2UWl4UFFVNUJaMElzUlVGQlRWTXNUVUZCVVN4RFFVTmFNVUlzV1VGQmJVTXNUVUZCZEVKRExFVkJRVFpDUVN4RlFVRnhRaXhGUVVNdlJEQkNMRzlDUVVGeFFpeExRVU55UW5wQ0xGVkJRVmNzVFVGRlltVXNSVUZCVFZjc1lVRkJZeXhGUVVOaVdDeEhRV3hDVkN4RlFVRkplRU1zWjBKQlFXZENTQ3hUUVVGVGRVTXNVMEZCVlVNc1IwRnhRblpETEVsQlFVbGxMRVZCUVZOb1FpeFRRVUZUYVVJc1ZVRjNVblJDTEU5QmRGSkJSQ3hGUVVGUFJTeHJRa0ZCYjBJc1UwRkJVMEVzYjBKQlEyeERXaXhMUVVGTFlTeGxRVWRRU0N4RlFVRlBTU3d3UWtGQk5FSXNVMEZCVTBFc01FSkJRVEJDUXl4SFFVTndSU3hKUVVGSmJFTXNSVUZCWTIxQ0xFdEJRVXRuUWl4cFFrRkZUU3hOUVVGNlFrUXNSVUZCVld4RExHRkJRWFZDYTBNc1JVRkJWV3hETEdOQlFXZENRU3hKUVVNM1JHOURMR0ZCUVdGcVFpeExRVUZMYTBJc1UwRkRiRUpzUWl4TFFVRkxiVUlzVTBGQlV5eERRVU5hV0N4dlFrRkJjVUl6UWl4RlFVTnlRa1VzVlVGQmEwTXNUVUZCZGtKblF5eEZRVUZWYUVNc1ZVRkJiMEpuUXl4RlFVRlZhRU1zVlVGQldXbENMRXRCUVV0dlFpeGhRVUZoZGtNc1JVRkJZV3RETEVWQlFWVnNReXhuUWtGSkwwVXNUVUZCZWtKclF5eEZRVUZWYkVNc1lVRkJkVUp0UWl4TFFVRkxUeXhOUVVGTk1VSXNZVUZCWld0RExFVkJRVlZOTEZOQlFWTkRMRkZCUTJoR2RFSXNTMEZCUzIxQ0xGTkJRVk1zUTBGRFduUkRMRmxCUVdFc1JVRkRZakpDTEc5Q1FVRnhRaXhMUVVOeVFucENMRlZCUVZjc1VVRkxha0l5UWl4RlFVRlBZU3h4UWtGQmRVSXNVMEZCVTBFc2RVSkJRM0pEVGl4aFFVRmhha0lzUzBGQlMydENMRk5CUTJ4Q2JFSXNTMEZCUzFNc1lVRkJZeXhIUVVkeVFrTXNSVUZCVDAwc1pVRkJhVUlzVTBGQlUwRXNhVUpCUXk5Q0xFbEJRVWxSTEVWQlFXdENlRUlzUzBGQlMwb3NUVUZCVFdZc1dVRkRha01zVDBGQk1FSXNUVUZCYmtJeVF5eEZRVUV3UWtFc1JVRkJhMEo0UWl4TFFVRkxUeXhOUVVGTk1VSXNZVUZIYUVVMlFpeEZRVUZQVlN4aFFVRmxMRk5CUVZOQkxHRkJRV0ZMTEVWQlFWZERMRWRCUTNKRUxFOUJRVWxFTEVsQlFXTkRMRVZCUTFRc1MwRkhSa1FzUlVGQldVTXNSVUZCVVN4UFFVRlRMRkZCUjNSRGFFSXNSVUZCVDBvc2QwSkJRVEJDTEZOQlFWTkJMREJDUVVONFF5eEpRVUZKY1VJc1JVRkJVek5DTEV0QlJXSkJMRXRCUVV0dFFpeFRRVUZUTEVOQlExcFlMRzlDUVVGeFFpeExRVU55UW5wQ0xGVkJRVmNzVFVGRFZpeFhRVU5FTkVNc1JVRkJUMlFzWTBGRlNHTXNSVUZCVHk5Q0xFMUJRVTFvUWl4WlFVTm1LME1zUlVGQlR5OUNMRTFCUVUxb1FpeG5Ra0ZMYmtJNFFpeEZRVUZQVUN4bFFVRnBRaXhUUVVGVFFTeHBRa0ZETTBKSUxFdEJRVXMwUWl4VlFVTlFOVUlzUzBGQlN6WkNMRkZCU1ZSdVFpeEZRVUZQVkN4blFrRkJhMElzVTBGQlUwRXNhMEpCUXpWQ1JDeExRVUZMU2l4TlFVRk5jRUlzWTBGRFluZENMRXRCUVVzNFFpeFRRVWxVY0VJc1JVRkJUMHdzVjBGQllTeFRRVUZUUVN4WFFVRlhNRUlzUjBGRGRFTXNTVUZCU1V3c1JVRkJVVEZDTEV0QlFVdG5RaXhwUWtGQmJVSXNSVUZKY0VNc1IwRkJTVlVzUlVGR1VURkVMSGRDUVVGM1FtSXNVVUZCVVRaRkxFMUJRVTFvUXl4TFFVRkxTaXhOUVVGTmVVSXNWVUZGZWtNc1JVRkJSeXhEUVVOeVFpeEpRVUZMY2tJc1MwRkJTMG9zVFVGQlRXNUNMRXRCUTJRc1QwRkhSbWxFTEVWQlFWRXNSVUZIVmpGQ0xFdEJRVXRwUXl4UFFVRlBVQ3hGUVVGUFN5eEZRVUZITEZOQlIzaENja0lzUlVGQlQwNHNWMEZCWVN4VFFVRlRRU3hYUVVGWE1rSXNSMEZEZEVNc1NVRkJTVXdzUlVGQlVURkNMRXRCUVV0blFpeHBRa0ZCYlVJc1JVRkZjRU1zUjBGQlNWVXNSVUZCVVN4RlFVRkhMRU5CUTJJc1NVRkJTekZDTEV0QlFVdEtMRTFCUVUxdVFpeExRVU5rTEU5QlIwWnBSQ3hGUVVGUk1VUXNkMEpCUVhkQ1lpeFJRVUZSTmtVc1RVRkJUV2hETEV0QlFVdEtMRTFCUVUxNVFpeFZRVUZaTEVWQlIzWkZja0lzUzBGQlMybERMRTlCUVU5UUxFVkJRVTlMTEVWQlFVY3NVMEZKZUVKeVFpeEZRVUZQYjBJc1RVRkJVU3hUUVVGVFFTeFJRVU4wUWpsQ0xFdEJRVXMwUWl4VlFVRlhMRVZCUTJoQ1dDeGhRVUZoYWtJc1MwRkJTMnRDTEZWQlNYQkNVaXhGUVVGUGJVSXNTMEZCVHl4VFFVRlRRU3hQUVVOeVFqZENMRXRCUVVzMFFpeFZRVUZYTEVWQlEyaENOVUlzUzBGQlMyRXNaVUZIVUVnc1JVRkJUM1ZDTEU5QlFWTXNVMEZCVTBFc1QwRkJUMUFzUlVGQlQwc3NSVUZCUjJoRUxFZEJTWGhETEVkQlNFRnJReXhoUVVGaGFrSXNTMEZCUzJ0Q0xGVkJSMlJzUWl4TFFVRkxVeXhaUVVGVUxFTkJTVUVzU1VGQlNVUXNSVUZCYzBKU0xFdEJRVXRLTEUxQlFVMHhRaXhOUVVGUk9FSXNTMEZCUzJkQ0xHbENRVUZ0UWl4TFFVTnlSV3BETEVWQlFWbEJMRWRCUVdGcFFpeExRVUZMYjBJc1lVRkJZVm9zUlVGQmNVSnJRaXhIUVVOb1JTeEpRVUZKYUVRc1JVRkJWM05DTEV0QlFVdEtMRTFCUVUxc1FpeFRRWFZDTVVJc1IwRnlRa2xCTEVsQlEwVkJMRVZCUVZNMFF5eFBRVUZUTEVkQlMyaENVeXhIUVVOR1FTeEZRVUZGUnl4VlFVTkdTQ3hGUVVGRmFFUXNWVUZCV1VFc1IwRkZaR2RFTEVWQlFVa3NRMEZEUm1oRUxGVkJRVmRCTEVkQlNXWk1MRVZCUVZOblJDeEZRVUZQU3l4SlFVVm9RbkpFTEVWQlFWTm5SQ3hKUVVscFFpeE5RVUV4UWpGQ0xFdEJRVXRLTEUxQlFVMW1MR0ZCUVhWQ05rTXNTVUZCVld4Q0xFVkJRWEZDTEVOQlEyNUZMRWRCUVhORExFMUJRV3hEVWl4TFFVRkxUeXhOUVVGTlF5eHZRa0ZKWWl4UFFVZEdVaXhMUVVGTGJVSXNVMEZCVXl4RFFVTmFkRU1zV1VGQllUWkRMRVZCUTJKc1FpeHZRa0ZCY1VKQkxFVkJRM0pDZWtJc1ZVRkJWMEVzVDBGTGFrSXlRaXhGUVVGUFJ5eFpRVUZqTEZOQlFWTkJMR05CUXpWQ0xFbEJRVWx6UWl4RlFVRmpia01zUzBGQlMwb3NUVUZEYmtJeFFpeEZRVUZSYVVVc1JVRkJXV3BGTEUxQlEzQkNSeXhGUVVGWE9FUXNSVUZCV1RsRUxGTkJRM1pDYlVRc1JVRkJhMEpYTEVWQlFWbDBSQ3hoUVVVM1FtMUNMRXRCUVVzMFFpeFZRVUZaTVVRc1IwRkJVMGNzUjBGQkswSXNUVUZCYmtKdFJDeEpRVU42UTNoQ0xFdEJRVXRyUWl4UlFVRlZhMElzVjBGQlYzQkRMRXRCUVV0TExGZEJRVmxvUXl4TFFVa3ZRM0ZETEVWQlFVOHlRaXhsUVVGcFFpeFRRVUZUUVN4bFFVRmxReXhIUVVNNVF5eEpRVUZKTjBRc1JVRkJUelpFTEVWQlFWYzNSQ3hMUVVOc1FqUkRMRVZCUVZkcFFpeEZRVUZYYWtJc1UwRkRkRUo0UXl4RlFVRmplVVFzUlVGQlYzcEVMRmxCUTNwQ1NTeEZRVUZYY1VRc1JVRkJWM0pFTEZOQlEzUkNTU3hGUVVGWGFVUXNSVUZCVjJwRUxGTkJRM1JDYTBRc1JVRkJWVVFzUlVGQlYwTXNVVUZEY2tKd1JDeEZRVUZaYlVRc1JVRkJWMjVFTEZWQlEzWkNSeXhGUVVGWlowUXNSVUZCVjJoRUxGVkJRM1pDYTBRc1IwRkJiVUlzUlVGQlNYcEZMR2RDUVVGblFqQkZMRkZCUVZGR0xFVkJRVk1zVjBGRmVFUlFMRVZCUVZGb1JTeDNRa0ZCZDBKaUxGRkJRVkUyUlN4TlFVRk5XQ3hIUVVWc1JDeE5RVUZQTEVWQlFVVTFReXhIUVVGM1FpeEpRVUZvUWtrc1NVRkJjMEp3UWl4UFFVRlBUaXhSUVVGUmNVTXNZMEZCWXpGQ0xGbEJRVmxZTEZGQlFWTXNRMEZEZGtaMVJpeEpRVUZMTEU5QlEweERMRmRCUVZjc1JVRkJTVzVHTEZsQlFWbE1MRk5CUVZOeFJpeEZRVUZyUWl4UlFVTjBSRWtzVVVGQlV6VkRMRXRCUVV0SkxGbEJRMkp1UWl4RlFVRlZSU3hIUVVGaE1VSXNUMEZCVDA0c1VVRkJVWEZETEdOQlFXTXNUMEZCVVN4RFFVTTNSRzFFTEZWQlFWY3NWMEZEVm5oRUxFdEJRV05XTEVkQlFWRkpMRWxCUVdkQ2JVUXNSVUZCVVN4SlFVRk5ka1VzVDBGQlQwNHNVVUZCVVhGRExHTkJRV014UWl4WlFVRlpXQ3hSUVVGVExFTkJRM1pIZFVZc1NVRkJTeXhQUVVOTVF5eFhRVUZYTEVWQlFVbHVSaXhaUVVGWlRDeFRRVUZUY1VZc1JVRkJhMElzVTBGRGRFUkpMRkZCUVZNMVF5eExRVUZMU3l4WlFVTmlhRUlzUlVGQlZVTXNSMEZCWVRkQ0xFOUJRVTlPTEZGQlFWRnhReXhqUVVGakxFOUJRVkVzUTBGRE4wUnRSQ3hWUVVGWExGZEJRMVp5UkN4TlFVZE1iMElzUlVGQlQyMURMR2xDUVVGdFFpeFRRVUZUUVN4cFFrRkJhVUo0UWl4RlFVRlZlRU1zUlVGQllUQkVMRWRCUTNwRkxFbEJRVWxQTEVWQlFWTTVReXhMUVVWVU5VSXNSVUZCWVN4SFFXTnFRaXhQUVZwQlNpeDNRa0ZCZDBKaUxGRkJRVkUwUml4UlFVRlJNVUlzUlVGQlZTeFRRVUZWTWtJc1JVRkJUM1JDTEVkQlEycEZkRVFzUlVGQlZ6WkZMRXRCUVV0NFJpeFBRVUZQVGl4UlFVRlJjVU1zWTBGQll5eExRVUZOTEVOQlEycEVhMFFzU1VGQlMyaENMRVZCUTB4cFFpeFZRVUZYYWtJc1NVRkJWVGRETEVWQlFXTXNVMEZCVnl4TFFVTTVReXRFTEZGQlFWTXNVMEZCVTBFc1VVRkJVV0lzUjBGRGVFSXNUMEZCVDJVc1JVRkJUMklzVDBGQlQxQXNSVUZCVDBzc1RVRkphRU1zVDBGSFMzUkZMRTlCUVU5T0xGRkJRVkZ4UXl4alFVRmpMRXRCUVUwc1EwRkRlRU50UkN4WFFVRlhMRVZCUVVrMVJTeG5Ra0ZCWjBJd1JTeFJRVUZSUml4RlFVRlRMR1ZCUXk5RGJrVXNTVUZIVEhORExFVkJRVTkzUXl4UFFVRlRMRk5CUVZOQkxGTkJRM1pDTEVsQlFVbERMRVZCUVZOdVJDeExRVVZVYjBRc1JVRkJaWEJFTEV0QlFVdEtMRTFCUTNCQ01VSXNSVUZCVVd0R0xFVkJRV0ZzUml4TlFVTnlRa1VzUlVGQllXZEdMRVZCUVdGb1JpeFhRVU14UWtjc1JVRkJWelpGTEVWQlFXRTNSU3hUUVVONFFrVXNSVUZCVHpKRkxFVkJRV0V6UlN4TFFVTndRbEVzUlVGQlYyMUZMRVZCUVdGdVJTeFRRVU40UWtVc1JVRkJXV2xGTEVWQlFXRnFSU3hWUVVONlFrVXNSVUZCVnl0RUxFVkJRV0V2UkN4VFFVTjRRa01zUlVGQldUaEVMRVZCUVdFNVJDeFZRVU42UW5GRUxFVkJRVmxUTEVWQlFXRlVMRlZCUTNwQ2RFSXNSVUZCVnl0Q0xFVkJRV0V2UWl4VFFVTjRRbnBDTEVkQlFWRXNSVUZCU1haRExDdENRVUVyUWtZc1UwRkJVMmxITEVWQlFXTXNRMEZCUXl4UlFVRlRMR0ZCUVdNc1YwRkJXU3hQUVVGUkxGZEJRVmtzV1VGQllTeFhRVUZaTEZsQlFXRXNXVUZCWVN4aFFVTTNTME1zUlVGQlkzSkVMRXRCUVV0UExFMUJRMjVDUXl4RlFVRnpRalpETEVWQlFWazNReXh2UWtGRGJFTjZRaXhGUVVGWmMwVXNSVUZCV1hSRkxGVkJSWGhDZFVVc1IwRkJkVUlzUlVGQlNYWkdMR2RDUVVGblFuZEdMSEZDUVVGeFFqTkVMRVZCUVU4c1EwRkJReXhYUVVGWkxHVkJRV2RDTEZkQlFWa3NZVUZCWXl4alFVTnNTU3h4UWtGQmMwSXNZMEZEYkVJeVF5eEZRVUZWWlN4RlFVRnhRaXhIUVVNdlFrVXNSVUZCWlVZc1JVRkJjVUlzUjBGRmNFTjZSU3hGUVVGamJVSXNTMEZCUzJkQ0xHbENRVU51UW5sRExFZEJRVlVzUlVGQlNYSkhMRlZCUVZWRUxGTkJRVk1zU1VGQlNTeEZRVUZKV1N4blFrRkJaMEl5Uml4aFFVRmhia0lzUjBGQlZTeERRVU5zUm5KRkxFMUJRVTlCTEVsQlJWUXNUMEZCVDFRc1QwRkJUMDRzVVVGQlVYRkRMR05CUVdNc1QwRkJUeXhGUVVGSmNFTXNWVUZCVlVRc1UwRkJVeXhIUVVGSmNVY3NSVUZCWXl4RFFVTnNSbUlzVjBGQlZ5eEZRVUZKYmtZc1dVRkJXVXdzVTBGQlUzZEdMRVZCUVZkakxFZEJReTlEUlN4WlFVRmhNMFFzUzBGQlMwTXNaMEpCUTJ4Q01rUXNWMEZCV1RWRUxFdEJRVXRITEdsQ1FVTm1MMElzUjBGQll6UkNMRXRCUVVzMlF5eHBRa0ZCYVVKNFFpeEZRVUZWZUVNc1JVRkJZVEJFTEVkQlFWVTVSU3hQUVVGUFRpeFJRVUZSY1VNc1kwRkJZeXhOUVVGUExFTkJRek5IYlVRc1YwRkJWeXhGUVVGSk5VVXNaMEpCUVdkQ01FVXNVVUZCVVVZc1JVRkJVeXhWUVVNdlEzWkZMSGRDUVVGM1FtSXNVVUZCVVRCSExFbEJRVWw0UXl4RlFVRlZMRk5CUVZVeVFpeEZRVUZQZEVJc1IwRkRhRVVzU1VGQlNXOURMRVZCUVZOd1F5eEpRVUZWTjBNc1JVRkRia0pyUml4RlFVRnBRamRHTEVkQlFWTjNSQ3hKUVVGVmJFSXNSVUZEZUVNc1QwRkJUeXhGUVVGSkwwTXNUMEZCVDNWSExHTkJRV05vUWl4RlFVRlBMRU5CUTNKRFl5eFBRVUZSUVN4RlFVTlNjRU1zVFVGQlQwRXNSVUZEVUhWRExGZEJRVmxHTEVWQlExcEhMRlZCUVZkS0xFZEJRV2xETEUxQlFYWkNkRVFzUjBGQkswSjBReXhGUVVOd1JHRXNWVUZCVjBFc1JVRkRXRzlHTEdkQ1FVRnBRa29zUlVGQmFVSmFMRVZCUVU4M1F5eDNRa0ZCTUVJc1ZVRkZiRVV2UWl4SFFVRlplVUlzUzBGQlMzRkRMR1ZCUVdVc1EwRkRia00xUkN4TFFVRk5RU3hGUVVOT05FTXNVMEZCVlVFc1JVRkRWbmhETEZsQlFXRkJMRVZCUTJKSkxGTkJRVlZCTEVWQlExWkZMRlZCUVZkQkxFVkJRMWhGTEZOQlFWVkJMRVZCUTFaRExGVkJRVmRCTEVWQlExaHBSQ3hSUVVGVFFTeE5RVWxPTjBNc1UwRTVVMVFzUTBFclUwVnFReXhQUVVGUFRpeFJRVUZSYVVnc1YwRkZha0l4UlN4VFFVRlRla0lzVlVGQldVRXNWVUZEY2tKNVFpeFRRVUZUU0N4aFFVRmxRU3hoUVVONFFrY3NVMEZCVXpKRkxGRkJRVlV4Unl4cFFrRkJhVUpTTEZGQlEzQkRkVU1zVTBGQlV6UkZMRXRCUVU4eFJ5eGpRVUZqVkN4UlFVVTVRaXhKUVVGSmIwZ3NWVUZCVnl4RlFVRkplRWNzWjBKQlFXZENlVWNzVTBGQlV5eFhRVUZaT1VVc1ZVRkZlRVI2UXl4UlFVRlJSU3hSUVVGVmIwZ3NVMEZEYkVKRkxFOUJRVTk0U0N4UlFVRlZRU3hSUVVGcFFpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzFpYjI5MGMzUnlZWEF2YkdsaUwwTmhjbTkxYzJWc0xtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9leHRlbmRzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSksX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9jbGFzc25hbWVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpLF9yZWFjdD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSksX2VsZW1lbnRUeXBlPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlXCIpKSxfYm9vdHN0cmFwVXRpbHM9cmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIikscHJvcFR5cGVzPXtjb21wb25lbnRDbGFzczpfZWxlbWVudFR5cGUuZGVmYXVsdH0sZGVmYXVsdFByb3BzPXtjb21wb25lbnRDbGFzczpcImRpdlwifSxDYXJvdXNlbENhcHRpb249ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gQ2Fyb3VzZWxDYXB0aW9uKCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybigwLF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShDYXJvdXNlbENhcHRpb24sZSksQ2Fyb3VzZWxDYXB0aW9uLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIGU9dGhpcy5wcm9wcyx0PWUuY29tcG9uZW50Q2xhc3Mscj1lLmNsYXNzTmFtZSxvPSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShlLFtcImNvbXBvbmVudENsYXNzXCIsXCJjbGFzc05hbWVcIl0pLHM9KDAsX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykobyksYT1zWzBdLGw9c1sxXSxpPSgwLF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkoYSk7cmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQodCwoMCxfZXh0ZW5kczIuZGVmYXVsdCkoe30sbCx7Y2xhc3NOYW1lOigwLF9jbGFzc25hbWVzLmRlZmF1bHQpKHIsaSl9KSl9LENhcm91c2VsQ2FwdGlvbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtDYXJvdXNlbENhcHRpb24ucHJvcFR5cGVzPXByb3BUeXBlcyxDYXJvdXNlbENhcHRpb24uZGVmYXVsdFByb3BzPWRlZmF1bHRQcm9wczt2YXIgX2RlZmF1bHQ9KDAsX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKFwiY2Fyb3VzZWwtY2FwdGlvblwiLENhcm91c2VsQ2FwdGlvbik7ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrTmhjbTkxYzJWc1EyRndkR2x2Ymk1cWN5SmRMQ0p1WVcxbGN5STZXeUpmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MElpd2ljbVZ4ZFdseVpTSXNJbVY0Y0c5eWRITWlMQ0pmWDJWelRXOWtkV3hsSWl3aVpHVm1ZWFZzZENJc0lsOWxlSFJsYm1Sek1pSXNJbDl2WW1wbFkzUlhhWFJvYjNWMFVISnZjR1Z5ZEdsbGMweHZiM05sTWlJc0lsOXBibWhsY21sMGMweHZiM05sTWlJc0lsOWpiR0Z6YzI1aGJXVnpJaXdpWDNKbFlXTjBJaXdpWDJWc1pXMWxiblJVZVhCbElpd2lYMkp2YjNSemRISmhjRlYwYVd4eklpd2ljSEp2Y0ZSNWNHVnpJaXdpWTI5dGNHOXVaVzUwUTJ4aGMzTWlMQ0prWldaaGRXeDBVSEp2Y0hNaUxDSkRZWEp2ZFhObGJFTmhjSFJwYjI0aUxDSmZVbVZoWTNRa1EyOXRjRzl1Wlc1MElpd2lZWEJ3YkhraUxDSjBhR2x6SWl3aVlYSm5kVzFsYm5Seklpd2ljSEp2ZEc5MGVYQmxJaXdpY21WdVpHVnlJaXdpWDNSb2FYTWtjSEp2Y0hNaUxDSndjbTl3Y3lJc0lrTnZiWEJ2Ym1WdWRDSXNJbU5zWVhOelRtRnRaU0lzSWw5emNHeHBkRUp6VUhKdmNITWlMQ0p6Y0d4cGRFSnpVSEp2Y0hNaUxDSmljMUJ5YjNCeklpd2laV3hsYldWdWRGQnliM0J6SWl3aVkyeGhjM05sY3lJc0ltZGxkRU5zWVhOelUyVjBJaXdpWTNKbFlYUmxSV3hsYldWdWRDSXNJbDlrWldaaGRXeDBJaXdpWW5ORGJHRnpjeUlzSW0xdlpIVnNaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRlFTeEpRVUZKUVN4MVFrRkJlVUpETEZGQlFWRXNkMFJCUlhKRFF5eFJRVUZSUXl4WlFVRmhMRVZCUTNKQ1JDeFJRVUZSUlN4aFFVRlZMRVZCUld4Q0xFbEJRVWxETEZWQlFWbE1MSFZDUVVGMVFrTXNVVUZCVVN3eVEwRkZNME5MTEN0Q1FVRnBRMDRzZFVKQlFYVkNReXhSUVVGUkxHZEZRVVZvUlUwc1owSkJRV3RDVUN4MVFrRkJkVUpETEZGQlFWRXNhVVJCUldwRVR5eFpRVUZqVWl4MVFrRkJkVUpETEZGQlFWRXNaVUZGTjBOUkxFOUJRVk5VTEhWQ1FVRjFRa01zVVVGQlVTeFZRVVY0UTFNc1lVRkJaVllzZFVKQlFYVkNReXhSUVVGUkxIRkRRVVU1UTFVc1owSkJRV3RDVml4UlFVRlJMREJDUVVVeFFsY3NWVUZCV1N4RFFVTmtReXhsUVVGblFrZ3NZVUZCWVU0c1UwRkZNMEpWTEdGQlFXVXNRMEZEYWtKRUxHVkJRV2RDTEU5QlIyUkZMR2RDUVVWS0xGTkJRVlZETEVkQlIxSXNVMEZCVTBRc2EwSkJRMUFzVDBGQlQwTXNSVUZCYVVKRExFMUJRVTFETEV0QlFVMURMRmxCUVdORUxFdEJjVUp3UkN4UFFYaENRU3hGUVVGSldDeG5Ra0ZCWjBKSUxGTkJRVk5YTEdkQ1FVRnBRa01zUjBGTmFrTkVMR2RDUVVGblFrc3NWVUZGZEVKRExFOUJRVk1zVTBGQlUwRXNVMEZEZGtJc1NVRkJTVU1zUlVGQlkwb3NTMEZCUzBzc1RVRkRia0pETEVWQlFWbEdMRVZCUVZsVUxHVkJRM2hDV1N4RlFVRlpTQ3hGUVVGWlJ5eFZRVU40UWtZc1IwRkJVU3hGUVVGSmFrSXNLMEpCUVN0Q1JpeFRRVUZUYTBJc1JVRkJZU3hEUVVGRExHbENRVUZyUWl4alFVVndSa2tzUjBGQlowSXNSVUZCU1dZc1owSkJRV2RDWjBJc1kwRkJZMG9zUjBGRGJFUkxMRVZCUVZWR0xFVkJRV01zUjBGRGVFSkhMRVZCUVdWSUxFVkJRV01zUjBGRk4wSkpMRWRCUVZVc1JVRkJTVzVDTEdkQ1FVRm5RbTlDTEdGQlFXRklMRWRCUXk5RExFOUJRVTl1UWl4UFFVRlBUQ3hSUVVGUk5FSXNZMEZCWTFJc1IwRkJWeXhGUVVGSmJrSXNWVUZCVlVRc1UwRkJVeXhIUVVGSmVVSXNSVUZCWXl4RFFVTjBSa29zVjBGQlZ5eEZRVUZKYWtJc1dVRkJXVW9zVTBGQlUzRkNMRVZCUVZkTExFOUJTVFZEWml4blFrRjZRbFFzUTBFd1FrVk9MRTlCUVU5TUxGRkJRVkZ2UWl4WFFVVnFRbFFzWjBKQlFXZENTQ3hWUVVGWlFTeFZRVU0xUWtjc1owSkJRV2RDUkN4aFFVRmxRU3hoUVVVdlFpeEpRVUZKYlVJc1ZVRkJWeXhGUVVGSmRFSXNaMEpCUVdkQ2RVSXNVMEZCVXl4dFFrRkJiMEp1UWl4cFFrRkZhRVZpTEZGQlFWRkZMRkZCUVZVMlFpeFRRVU5zUWtVc1QwRkJUMnBETEZGQlFWVkJMRkZCUVdsQ0lpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDNKbFlXTjBMV0p2YjNSemRISmhjQzlzYVdJdlEyRnliM1Z6Wld4RFlYQjBhVzl1TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PXZvaWQgMDt2YXIgX2V4dGVuZHMyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKSxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpLF9pbmhlcml0c0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSksX2Fzc2VydFRoaXNJbml0aWFsaXplZDI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSksX2NsYXNzbmFtZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKSxfcHJvcFR5cGVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpLF9yZWFjdERvbT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1kb21cIikpLF90cmFuc2l0aW9uPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRvbS1oZWxwZXJzL3RyYW5zaXRpb25cIikpLHByb3BUeXBlcz17ZGlyZWN0aW9uOl9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbXCJwcmV2XCIsXCJuZXh0XCJdKSxvbkFuaW1hdGVPdXRFbmQ6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsYWN0aXZlOl9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLGFuaW1hdGVJbjpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxhbmltYXRlT3V0Ol9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLGluZGV4Ol9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXJ9LGRlZmF1bHRQcm9wcz17YWN0aXZlOiExLGFuaW1hdGVJbjohMSxhbmltYXRlT3V0OiExfSxDYXJvdXNlbEl0ZW09ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gQ2Fyb3VzZWxJdGVtKHQsaSl7dmFyIHI7cmV0dXJuKHI9ZS5jYWxsKHRoaXMsdCxpKXx8dGhpcykuaGFuZGxlQW5pbWF0ZU91dEVuZD1yLmhhbmRsZUFuaW1hdGVPdXRFbmQuYmluZCgoMCxfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KSgoMCxfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShyKSkpLHIuc3RhdGU9e2RpcmVjdGlvbjpudWxsfSxyLmlzVW5tb3VudGVkPSExLHJ9KDAsX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKENhcm91c2VsSXRlbSxlKTt2YXIgdD1DYXJvdXNlbEl0ZW0ucHJvdG90eXBlO3JldHVybiB0LmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM9ZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhlKXt0aGlzLnByb3BzLmFjdGl2ZSE9PWUuYWN0aXZlJiZ0aGlzLnNldFN0YXRlKHtkaXJlY3Rpb246bnVsbH0pfSx0LmNvbXBvbmVudERpZFVwZGF0ZT1mdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoZSl7dmFyIHQ9dGhpcyxpPXRoaXMucHJvcHMuYWN0aXZlLHI9ZS5hY3RpdmU7IWkmJnImJl90cmFuc2l0aW9uLmRlZmF1bHQuZW5kKF9yZWFjdERvbS5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMpLHRoaXMuaGFuZGxlQW5pbWF0ZU91dEVuZCksaSE9PXImJnNldFRpbWVvdXQoZnVuY3Rpb24oKXtyZXR1cm4gdC5zdGFydEFuaW1hdGlvbigpfSwyMCl9LHQuY29tcG9uZW50V2lsbFVubW91bnQ9ZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKXt0aGlzLmlzVW5tb3VudGVkPSEwfSx0LmhhbmRsZUFuaW1hdGVPdXRFbmQ9ZnVuY3Rpb24gaGFuZGxlQW5pbWF0ZU91dEVuZCgpe3RoaXMuaXNVbm1vdW50ZWR8fHRoaXMucHJvcHMub25BbmltYXRlT3V0RW5kJiZ0aGlzLnByb3BzLm9uQW5pbWF0ZU91dEVuZCh0aGlzLnByb3BzLmluZGV4KX0sdC5zdGFydEFuaW1hdGlvbj1mdW5jdGlvbiBzdGFydEFuaW1hdGlvbigpe3RoaXMuaXNVbm1vdW50ZWR8fHRoaXMuc2V0U3RhdGUoe2RpcmVjdGlvbjpcInByZXZcIj09PXRoaXMucHJvcHMuZGlyZWN0aW9uP1wicmlnaHRcIjpcImxlZnRcIn0pfSx0LnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXt2YXIgZT10aGlzLnByb3BzLHQ9ZS5kaXJlY3Rpb24saT1lLmFjdGl2ZSxyPWUuYW5pbWF0ZUluLG49ZS5hbmltYXRlT3V0LGE9ZS5jbGFzc05hbWUsbz0oMCxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoZSxbXCJkaXJlY3Rpb25cIixcImFjdGl2ZVwiLFwiYW5pbWF0ZUluXCIsXCJhbmltYXRlT3V0XCIsXCJjbGFzc05hbWVcIl0pO2RlbGV0ZSBvLm9uQW5pbWF0ZU91dEVuZCxkZWxldGUgby5pbmRleDt2YXIgcz17aXRlbTohMCxhY3RpdmU6aSYmIXJ8fG59O3JldHVybiB0JiZpJiZyJiYoc1t0XT0hMCksdGhpcy5zdGF0ZS5kaXJlY3Rpb24mJihyfHxuKSYmKHNbdGhpcy5zdGF0ZS5kaXJlY3Rpb25dPSEwKSxfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LG8se2NsYXNzTmFtZTooMCxfY2xhc3NuYW1lcy5kZWZhdWx0KShhLHMpfSkpfSxDYXJvdXNlbEl0ZW19KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7Q2Fyb3VzZWxJdGVtLnByb3BUeXBlcz1wcm9wVHlwZXMsQ2Fyb3VzZWxJdGVtLmRlZmF1bHRQcm9wcz1kZWZhdWx0UHJvcHM7dmFyIF9kZWZhdWx0PUNhcm91c2VsSXRlbTtleHBvcnRzLmRlZmF1bHQ9X2RlZmF1bHQsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtOaGNtOTFjMlZzU1hSbGJTNXFjeUpkTENKdVlXMWxjeUk2V3lKZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBJaXdpY21WeGRXbHlaU0lzSW1WNGNHOXlkSE1pTENKZlgyVnpUVzlrZFd4bElpd2laR1ZtWVhWc2RDSXNJbDlsZUhSbGJtUnpNaUlzSWw5dlltcGxZM1JYYVhSb2IzVjBVSEp2Y0dWeWRHbGxjMHh2YjNObE1pSXNJbDlwYm1obGNtbDBjMHh2YjNObE1pSXNJbDloYzNObGNuUlVhR2x6U1c1cGRHbGhiR2w2WldReUlpd2lYMk5zWVhOemJtRnRaWE1pTENKZmNtVmhZM1FpTENKZmNISnZjRlI1Y0dWeklpd2lYM0psWVdOMFJHOXRJaXdpWDNSeVlXNXphWFJwYjI0aUxDSndjbTl3Vkhsd1pYTWlMQ0prYVhKbFkzUnBiMjRpTENKdmJtVlBaaUlzSW05dVFXNXBiV0YwWlU5MWRFVnVaQ0lzSW1aMWJtTWlMQ0poWTNScGRtVWlMQ0ppYjI5c0lpd2lZVzVwYldGMFpVbHVJaXdpWVc1cGJXRjBaVTkxZENJc0ltbHVaR1Y0SWl3aWJuVnRZbVZ5SWl3aVpHVm1ZWFZzZEZCeWIzQnpJaXdpUTJGeWIzVnpaV3hKZEdWdElpd2lYMUpsWVdOMEpFTnZiWEJ2Ym1WdWRDSXNJbkJ5YjNCeklpd2lZMjl1ZEdWNGRDSXNJbDkwYUdseklpd2lZMkZzYkNJc0luUm9hWE1pTENKb1lXNWtiR1ZCYm1sdFlYUmxUM1YwUlc1a0lpd2lZbWx1WkNJc0luTjBZWFJsSWl3aWFYTlZibTF2ZFc1MFpXUWlMQ0pmY0hKdmRHOGlMQ0p3Y205MGIzUjVjR1VpTENKamIyMXdiMjVsYm5SWGFXeHNVbVZqWldsMlpWQnliM0J6SWl3aWJtVjRkRkJ5YjNCeklpd2ljMlYwVTNSaGRHVWlMQ0pqYjIxd2IyNWxiblJFYVdSVmNHUmhkR1VpTENKd2NtVjJVSEp2Y0hNaUxDSmZkR2hwY3pJaUxDSndjbVYyUVdOMGFYWmxJaXdpWlc1a0lpd2labWx1WkVSUFRVNXZaR1VpTENKelpYUlVhVzFsYjNWMElpd2ljM1JoY25SQmJtbHRZWFJwYjI0aUxDSmpiMjF3YjI1bGJuUlhhV3hzVlc1dGIzVnVkQ0lzSW5KbGJtUmxjaUlzSWw5MGFHbHpKSEJ5YjNCeklpd2lZMnhoYzNOT1lXMWxJaXdpWTJ4aGMzTmxjeUlzSW1sMFpXMGlMQ0pqY21WaGRHVkZiR1Z0Wlc1MElpd2lRMjl0Y0c5dVpXNTBJaXdpWDJSbFptRjFiSFFpTENKdGIyUjFiR1VpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlJVRXNTVUZCU1VFc2RVSkJRWGxDUXl4UlFVRlJMSGRFUVVWeVEwTXNVVUZCVVVNc1dVRkJZU3hGUVVOeVFrUXNVVUZCVVVVc1lVRkJWU3hGUVVWc1FpeEpRVUZKUXl4VlFVRlpUQ3gxUWtGQmRVSkRMRkZCUVZFc01rTkJSVE5EU3l3clFrRkJhVU5PTEhWQ1FVRjFRa01zVVVGQlVTeG5SVUZGYUVWTkxHZENRVUZyUWxBc2RVSkJRWFZDUXl4UlFVRlJMR2xFUVVWcVJFOHNkMEpCUVRCQ1VpeDFRa0ZCZFVKRExGRkJRVkVzZVVSQlJYcEVVU3haUVVGalZDeDFRa0ZCZFVKRExGRkJRVkVzWlVGRk4wTlRMRTlCUVZOV0xIVkNRVUYxUWtNc1VVRkJVU3hWUVVWNFExVXNWMEZCWVZnc2RVSkJRWFZDUXl4UlFVRlJMR1ZCUlRWRFZ5eFZRVUZaV2l4MVFrRkJkVUpETEZGQlFWRXNZMEZGTTBOWkxGbEJRV05pTEhWQ1FVRjFRa01zVVVGQlVTd3lRa0ZGTjBOaExGVkJRVmtzUTBGRFpFTXNWVUZCVjBvc1YwRkJWMUFzVVVGQlVWa3NUVUZCVFN4RFFVRkRMRTlCUVZFc1UwRkROME5ETEdkQ1FVRnBRazRzVjBGQlYxQXNVVUZCVVdNc1MwRkRjRU5ETEU5QlFWRlNMRmRCUVZkUUxGRkJRVkZuUWl4TFFVTXpRa01zVlVGQlYxWXNWMEZCVjFBc1VVRkJVV2RDTEV0QlF6bENSU3hYUVVGWldDeFhRVUZYVUN4UlFVRlJaMElzUzBGREwwSkhMRTFCUVU5YUxGZEJRVmRRTEZGQlFWRnZRaXhSUVVWNFFrTXNZVUZCWlN4RFFVTnFRazRzVVVGQlVTeEZRVU5TUlN4WFFVRlhMRVZCUTFoRExGbEJRVmtzUjBGSFZra3NZVUZGU2l4VFFVRlZReXhIUVVkU0xGTkJRVk5FTEdGQlFXRkZMRVZCUVU5RExFZEJRek5DTEVsQlFVbERMRVZCVVVvc1QwRk9RVUVzUlVGQlVVZ3NSVUZCYVVKSkxFdEJRVXRETEV0QlFVMUtMRVZCUVU5RExFbEJRVmxITEUxQlEycEVReXh2UWtGQmMwSklMRVZCUVUxSExHOUNRVUZ2UWtNc1RVRkJTeXhGUVVGSk1VSXNkMEpCUVhkQ1NpeFZRVUZUTEVWQlFVbEpMSGRDUVVGM1Frb3NVMEZCVXpCQ0xFdEJRM0pKUVN4RlFVRk5TeXhOUVVGUkxFTkJRMXB3UWl4VlFVRlhMRTFCUldKbExFVkJRVTFOTEdGQlFXTXNSVUZEWWs0c1IwRllWQ3hGUVVGSmRrSXNaMEpCUVdkQ1NDeFRRVUZUYzBJc1lVRkJZME1zUjBGak0wTXNTVUZCU1ZVc1JVRkJVMWdzWVVGQllWa3NWVUVyUlRGQ0xFOUJOMFZCUkN4RlFVRlBSU3d3UWtGQk5FSXNVMEZCVTBFc01FSkJRVEJDUXl4SFFVTm9SVklzUzBGQlMwb3NUVUZCVFZRc1UwRkJWM0ZDTEVWQlFWVnlRaXhSUVVOc1EyRXNTMEZCUzFNc1UwRkJVeXhEUVVOYU1VSXNWVUZCVnl4UlFVdHFRbk5DTEVWQlFVOUxMRzFDUVVGeFFpeFRRVUZUUVN4dFFrRkJiVUpETEVkQlEzUkVMRWxCUVVsRExFVkJRVk5hTEV0QlJWUmlMRVZCUVZOaExFdEJRVXRLTEUxQlFVMVVMRTlCUTNCQ01FSXNSVUZCWVVZc1JVRkJWWGhDTEZGQlJYUkNRU3hIUVVGVk1FSXNSMEZEWW1oRExGbEJRVmxVTEZGQlFWRXdReXhKUVVGSmJFTXNWVUZCVlZJc1VVRkJVVEpETEZsQlFWbG1MRTFCUVU5QkxFdEJRVXRETEhGQ1FVZG9SV1FzU1VGQlZ6QkNMRWRCUTJKSExGZEJRVmNzVjBGRFZDeFBRVUZQU2l4RlFVRlBTeXhyUWtGRFlpeExRVWxRV2l4RlFVRlBZU3h4UWtGQmRVSXNVMEZCVTBFc2RVSkJRM0pEYkVJc1MwRkJTMGtzWVVGQll5eEhRVWR5UWtNc1JVRkJUMG9zYjBKQlFYTkNMRk5CUVZOQkxITkNRVU5vUTBRc1MwRkJTMGtzWVVGSlRFb3NTMEZCUzBvc1RVRkJUVmdzYVVKQlEySmxMRXRCUVV0S0xFMUJRVTFZTEdkQ1FVRm5RbVVzUzBGQlMwb3NUVUZCVFV3c1VVRkpNVU5qTEVWQlFVOVpMR1ZCUVdsQ0xGTkJRVk5CTEdsQ1FVTXpRbXBDTEV0QlFVdEpMR0ZCU1ZSS0xFdEJRVXRUTEZOQlFWTXNRMEZEV2pGQ0xGVkJRVzlETEZOQlFYcENhVUlzUzBGQlMwb3NUVUZCVFdJc1ZVRkJkVUlzVVVGQlZTeFZRVWt6UkhOQ0xFVkJRVTlqTEU5QlFWTXNVMEZCVTBFc1UwRkRka0lzU1VGQlNVTXNSVUZCWTNCQ0xFdEJRVXRLTEUxQlEyNUNZaXhGUVVGWmNVTXNSVUZCV1hKRExGVkJRM2hDU1N4RlFVRlRhVU1zUlVGQldXcERMRTlCUTNKQ1JTeEZRVUZaSzBJc1JVRkJXUzlDTEZWQlEzaENReXhGUVVGaE9FSXNSVUZCV1RsQ0xGZEJRM3BDSzBJc1JVRkJXVVFzUlVGQldVTXNWVUZEZUVKNlFpeEhRVUZSTEVWQlFVbDBRaXdyUWtGQkswSkdMRk5CUVZOblJDeEZRVUZoTEVOQlFVTXNXVUZCWVN4VFFVRlZMRmxCUVdFc1lVRkJZeXh4UWtGRGFraDRRaXhGUVVGTldDeDFRa0ZEVGxjc1JVRkJUVXdzVFVGRFlpeEpRVUZKSzBJc1JVRkJWU3hEUVVOYVF5eE5RVUZOTEVWQlEwNXdReXhQUVVGUlFTeEpRVUZYUlN4SFFVRmhReXhIUVZkc1F5eFBRVkpKVUN4SFFVRmhTU3hIUVVGVlJTeEpRVU42UW1sRExFVkJRVkYyUXl4SlFVRmhMRWRCUjI1Q2FVSXNTMEZCUzBjc1RVRkJUWEJDTEZsQlFXTk5MRWRCUVdGRExFdEJRM2hEWjBNc1JVRkJVWFJDTEV0QlFVdEhMRTFCUVUxd1FpeFpRVUZoTEVkQlJ6TkNUQ3hQUVVGUFRpeFJRVUZSYjBRc1kwRkJZeXhQUVVGUExFVkJRVWx1UkN4VlFVRlZSQ3hUUVVGVExFZEJRVWwzUWl4RlFVRlBMRU5CUXpORmVVSXNWMEZCVnl4RlFVRkpOVU1zV1VGQldVd3NVMEZCVTJsRUxFVkJRVmRETEU5QlNUVkROVUlzWVVFNVJsUXNRMEVyUmtWb1FpeFBRVUZQVGl4UlFVRlJjVVFzVjBGRmFrSXZRaXhoUVVGaFdpeFZRVUZaUVN4VlFVTjZRbGtzWVVGQllVUXNZVUZCWlVFc1lVRkROVUlzU1VGQlNXbERMRk5CUVZkb1F5eGhRVU5tZUVJc1VVRkJVVVVzVVVGQlZYTkVMRk5CUTJ4Q1F5eFBRVUZQZWtRc1VVRkJWVUVzVVVGQmFVSWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F0WW05dmRITjBjbUZ3TDJ4cFlpOURZWEp2ZFhObGJFbDBaVzB1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PXZvaWQgMDt2YXIgX2V4dGVuZHMyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKSxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpLF9pbmhlcml0c0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSksX2NsYXNzbmFtZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKSxfcHJvcFR5cGVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpLF93YXJuaW5nPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIndhcm5pbmdcIikpLF9ib290c3RyYXBVdGlscz1yZXF1aXJlKFwiLi91dGlscy9ib290c3RyYXBVdGlsc1wiKSxwcm9wVHlwZXM9e2lubGluZTpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxkaXNhYmxlZDpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCx0aXRsZTpfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLHZhbGlkYXRpb25TdGF0ZTpfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoW1wic3VjY2Vzc1wiLFwid2FybmluZ1wiLFwiZXJyb3JcIixudWxsXSksaW5wdXRSZWY6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmN9LGRlZmF1bHRQcm9wcz17aW5saW5lOiExLGRpc2FibGVkOiExLHRpdGxlOlwiXCJ9LENoZWNrYm94PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIENoZWNrYm94KCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybigwLF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShDaGVja2JveCxlKSxDaGVja2JveC5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uIHJlbmRlcigpe3ZhciBlPXRoaXMucHJvcHMsdD1lLmlubGluZSxyPWUuZGlzYWJsZWQsYT1lLnZhbGlkYXRpb25TdGF0ZSxpPWUuaW5wdXRSZWYscz1lLmNsYXNzTmFtZSxvPWUuc3R5bGUsbD1lLnRpdGxlLG49ZS5jaGlsZHJlbixwPSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShlLFtcImlubGluZVwiLFwiZGlzYWJsZWRcIixcInZhbGlkYXRpb25TdGF0ZVwiLFwiaW5wdXRSZWZcIixcImNsYXNzTmFtZVwiLFwic3R5bGVcIixcInRpdGxlXCIsXCJjaGlsZHJlblwiXSksdT0oMCxfYm9vdHN0cmFwVXRpbHMuc3BsaXRCc1Byb3BzKShwKSxkPXVbMF0sYz11WzFdLGY9X3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImlucHV0XCIsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LGMse3JlZjppLHR5cGU6XCJjaGVja2JveFwiLGRpc2FibGVkOnJ9KSk7aWYodCl7dmFyIF8sYj0oKF89e30pWygwLF9ib290c3RyYXBVdGlscy5wcmVmaXgpKGQsXCJpbmxpbmVcIildPSEwLF8uZGlzYWJsZWQ9cixfKTtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoMCxfd2FybmluZy5kZWZhdWx0KSghYSxcImB2YWxpZGF0aW9uU3RhdGVgIGlzIGlnbm9yZWQgb24gYDxDaGVja2JveCBpbmxpbmU+YC4gVG8gZGlzcGxheSB2YWxpZGF0aW9uIHN0YXRlIG9uIGFuIGlubGluZSBjaGVja2JveCwgc2V0IGB2YWxpZGF0aW9uU3RhdGVgIG9uIGEgcGFyZW50IGA8Rm9ybUdyb3VwPmAgb3Igb3RoZXIgZWxlbWVudCBpbnN0ZWFkLlwiKSxfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIix7Y2xhc3NOYW1lOigwLF9jbGFzc25hbWVzLmRlZmF1bHQpKHMsYiksc3R5bGU6byx0aXRsZTpsfSxmLG4pfXZhciBoPSgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSwoMCxfYm9vdHN0cmFwVXRpbHMuZ2V0Q2xhc3NTZXQpKGQpLHtkaXNhYmxlZDpyfSk7cmV0dXJuIGEmJihoW1wiaGFzLVwiK2FdPSEwKSxfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2NsYXNzTmFtZTooMCxfY2xhc3NuYW1lcy5kZWZhdWx0KShzLGgpLHN0eWxlOm99LF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiLHt0aXRsZTpsfSxmLG4pKX0sQ2hlY2tib3h9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7Q2hlY2tib3gucHJvcFR5cGVzPXByb3BUeXBlcyxDaGVja2JveC5kZWZhdWx0UHJvcHM9ZGVmYXVsdFByb3BzO3ZhciBfZGVmYXVsdD0oMCxfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoXCJjaGVja2JveFwiLENoZWNrYm94KTtleHBvcnRzLmRlZmF1bHQ9X2RlZmF1bHQsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtOb1pXTnJZbTk0TG1weklsMHNJbTVoYldWeklqcGJJbDlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRaUxDSnlaWEYxYVhKbElpd2laWGh3YjNKMGN5SXNJbDlmWlhOTmIyUjFiR1VpTENKa1pXWmhkV3gwSWl3aVgyVjRkR1Z1WkhNeUlpd2lYMjlpYW1WamRGZHBkR2h2ZFhSUWNtOXdaWEowYVdWelRHOXZjMlV5SWl3aVgybHVhR1Z5YVhSelRHOXZjMlV5SWl3aVgyTnNZWE56Ym1GdFpYTWlMQ0pmY21WaFkzUWlMQ0pmY0hKdmNGUjVjR1Z6SWl3aVgzZGhjbTVwYm1jaUxDSmZZbTl2ZEhOMGNtRndWWFJwYkhNaUxDSndjbTl3Vkhsd1pYTWlMQ0pwYm14cGJtVWlMQ0ppYjI5c0lpd2laR2x6WVdKc1pXUWlMQ0owYVhSc1pTSXNJbk4wY21sdVp5SXNJblpoYkdsa1lYUnBiMjVUZEdGMFpTSXNJbTl1WlU5bUlpd2lhVzV3ZFhSU1pXWWlMQ0ptZFc1aklpd2laR1ZtWVhWc2RGQnliM0J6SWl3aVEyaGxZMnRpYjNnaUxDSmZVbVZoWTNRa1EyOXRjRzl1Wlc1MElpd2lZWEJ3YkhraUxDSjBhR2x6SWl3aVlYSm5kVzFsYm5Seklpd2ljSEp2ZEc5MGVYQmxJaXdpY21WdVpHVnlJaXdpWDNSb2FYTWtjSEp2Y0hNaUxDSndjbTl3Y3lJc0ltTnNZWE56VG1GdFpTSXNJbk4wZVd4bElpd2lZMmhwYkdSeVpXNGlMQ0pmYzNCc2FYUkNjMUJ5YjNCeklpd2ljM0JzYVhSQ2MxQnliM0J6SWl3aVluTlFjbTl3Y3lJc0ltVnNaVzFsYm5SUWNtOXdjeUlzSW1sdWNIVjBJaXdpWTNKbFlYUmxSV3hsYldWdWRDSXNJbkpsWmlJc0luUjVjR1VpTENKZlkyeGhjM05sY3pJaUxDSmZZMnhoYzNObGN5SXNJbkJ5WldacGVDSXNJbkJ5YjJObGMzTWlMQ0psYm5ZaUxDSk9UMFJGWDBWT1ZpSXNJbU5zWVhOelpYTWlMQ0puWlhSRGJHRnpjMU5sZENJc0lrTnZiWEJ2Ym1WdWRDSXNJbDlrWldaaGRXeDBJaXdpWW5ORGJHRnpjeUlzSW0xdlpIVnNaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRlFTeEpRVUZKUVN4MVFrRkJlVUpETEZGQlFWRXNkMFJCUlhKRFF5eFJRVUZSUXl4WlFVRmhMRVZCUTNKQ1JDeFJRVUZSUlN4aFFVRlZMRVZCUld4Q0xFbEJRVWxETEZWQlFWbE1MSFZDUVVGMVFrTXNVVUZCVVN3eVEwRkZNME5MTEN0Q1FVRnBRMDRzZFVKQlFYVkNReXhSUVVGUkxHZEZRVVZvUlUwc1owSkJRV3RDVUN4MVFrRkJkVUpETEZGQlFWRXNhVVJCUldwRVR5eFpRVUZqVWl4MVFrRkJkVUpETEZGQlFWRXNaVUZGTjBOUkxFOUJRVk5VTEhWQ1FVRjFRa01zVVVGQlVTeFZRVVY0UTFNc1YwRkJZVllzZFVKQlFYVkNReXhSUVVGUkxHVkJSVFZEVlN4VFFVRlhXQ3gxUWtGQmRVSkRMRkZCUVZFc1dVRkZNVU5YTEdkQ1FVRnJRbGdzVVVGQlVTd3dRa0ZITVVKWkxGVkJRVmtzUTBGRFpFTXNUMEZCVVVvc1YwRkJWMDRzVVVGQlVWY3NTMEZETTBKRExGTkJRVlZPTEZkQlFWZE9MRkZCUVZGWExFdEJRemRDUlN4TlFVRlBVQ3hYUVVGWFRpeFJRVUZSWXl4UFFVc3hRa01zWjBKQlFXbENWQ3hYUVVGWFRpeFJRVUZSWjBJc1RVRkJUU3hEUVVGRExGVkJRVmNzVlVGQlZ5eFJRVUZUTEU5QlV6RkZReXhUUVVGVldDeFhRVUZYVGl4UlFVRlJhMElzVFVGRk0wSkRMR0ZCUVdVc1EwRkRha0pVTEZGQlFWRXNSVUZEVWtVc1ZVRkJWU3hGUVVOV1F5eE5RVUZQTEVsQlIweFBMRk5CUlVvc1UwRkJWVU1zUjBGSFVpeFRRVUZUUkN4WFFVTlFMRTlCUVU5RExFVkJRV2xDUXl4TlFVRk5ReXhMUVVGTlF5eFpRVUZqUkN4TFFUQkVjRVFzVDBFM1JFRXNSVUZCU1hCQ0xHZENRVUZuUWtnc1UwRkJVMjlDTEZOQlFWVkRMRWRCVFRGQ1JDeFRRVUZUU3l4VlFVVm1ReXhQUVVGVExGTkJRVk5CTEZOQlEzWkNMRWxCUVVsRExFVkJRV05LTEV0QlFVdExMRTFCUTI1Q2JFSXNSVUZCVTJsQ0xFVkJRVmxxUWl4UFFVTnlRa1VzUlVGQlYyVXNSVUZCV1dZc1UwRkRka0pITEVWQlFXdENXU3hGUVVGWldpeG5Ra0ZET1VKRkxFVkJRVmRWTEVWQlFWbFdMRk5CUTNaQ1dTeEZRVUZaUml4RlFVRlpSU3hWUVVONFFrTXNSVUZCVVVnc1JVRkJXVWNzVFVGRGNFSnFRaXhGUVVGUll5eEZRVUZaWkN4TlFVTndRbXRDTEVWQlFWZEtMRVZCUVZsSkxGTkJRM1pDU0N4SFFVRlJMRVZCUVVreFFpd3JRa0ZCSzBKR0xGTkJRVk15UWl4RlFVRmhMRU5CUVVNc1UwRkJWU3hYUVVGWkxHdENRVUZ0UWl4WFFVRlpMRmxCUVdFc1VVRkJVeXhSUVVGVExHRkJSWFJLU3l4SFFVRm5RaXhGUVVGSmVFSXNaMEpCUVdkQ2VVSXNZMEZCWTB3c1IwRkRiRVJOTEVWQlFWVkdMRVZCUVdNc1IwRkRlRUpITEVWQlFXVklMRVZCUVdNc1IwRkZOMEpKTEVWQlFWRXZRaXhQUVVGUFRDeFJRVUZSY1VNc1kwRkJZeXhUUVVGVExFVkJRVWx3UXl4VlFVRlZSQ3hUUVVGVExFZEJRVWx0UXl4RlFVRmpMRU5CUTNwR1J5eEpRVUZMY2tJc1JVRkRUSE5DTEV0QlFVMHNWMEZEVGpOQ0xGTkJRVlZCTEV0QlIxb3NSMEZCU1VZc1JVRkJVU3hEUVVOV0xFbEJRVWs0UWl4RlFVVkJReXhKUVVGWlJDeEZRVUZaTEV0QlFXTXNSVUZCU1doRExHZENRVUZuUW10RExGRkJRVkZTTEVWQlFWTXNXVUZCWVN4RlFVRk5UU3hGUVVGVk5VSXNVMEZCVjBFc1JVRkJWVFJDTEVkQlMycEpMRTFCUkhsQ0xHVkJRWHBDUnl4UlFVRlJReXhKUVVGSlF5eFhRVUUwUWl4RlFVRkpkRU1zVTBGQlUxQXNWVUZCVldVc1JVRkJhVUlzY1V4QlEzcEZWaXhQUVVGUFRDeFJRVUZSY1VNc1kwRkJZeXhSUVVGVExFTkJRek5EVWl4WFFVRlhMRVZCUVVsNlFpeFpRVUZaU2l4VFFVRlROa0lzUlVGQlYxa3NSMEZETDBOWUxFMUJRVTlCTEVWQlExQnFRaXhOUVVGUFFTeEhRVU5PZFVJc1JVRkJUMHdzUjBGSFdpeEpRVUZKWlN4SFFVRlZMRVZCUVVrM1F5eFZRVUZWUkN4VFFVRlRMRWxCUVVrc1JVRkJTVkVzWjBKQlFXZENkVU1zWVVGQllXSXNSMEZCVlN4RFFVTnNSblJDTEZOQlFWVkJMRWxCVDFvc1QwRktTVWNzU1VGRFJpdENMRVZCUVZFc1QwRkJVeTlDTEVsQlFXMUNMRWRCUnk5Q1ZpeFBRVUZQVEN4UlFVRlJjVU1zWTBGQll5eE5RVUZQTEVOQlEzcERVaXhYUVVGWExFVkJRVWw2UWl4WlFVRlpTaXhUUVVGVE5rSXNSVUZCVjJsQ0xFZEJReTlEYUVJc1RVRkJUMEVzUjBGRFRucENMRTlCUVU5TUxGRkJRVkZ4UXl4alFVRmpMRkZCUVZNc1EwRkRka040UWl4TlFVRlBRU3hIUVVOT2RVSXNSVUZCVDB3c1MwRkhURmdzVTBFNVJGUXNRMEVyUkVWbUxFOUJRVTlNTEZGQlFWRm5SQ3hYUVVWcVFqVkNMRk5CUVZOWUxGVkJRVmxCTEZWQlEzSkNWeXhUUVVGVFJDeGhRVUZsUVN4aFFVVjRRaXhKUVVGSk9FSXNWVUZCVnl4RlFVRkpla01zWjBKQlFXZENNRU1zVTBGQlV5eFhRVUZaT1VJc1ZVRkZlRVIwUWl4UlFVRlJSU3hSUVVGVmFVUXNVMEZEYkVKRkxFOUJRVTl5UkN4UlFVRlZRU3hSUVVGcFFpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzFpYjI5MGMzUnlZWEF2YkdsaUwwTm9aV05yWW05NExtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9leHRlbmRzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSksX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9jbGFzc25hbWVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpLF9yZWFjdD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSksX3Byb3BUeXBlcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKSxfZWxlbWVudFR5cGU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlcy1leHRyYS9saWIvZWxlbWVudFR5cGVcIikpLF9ib290c3RyYXBVdGlscz1yZXF1aXJlKFwiLi91dGlscy9ib290c3RyYXBVdGlsc1wiKSxfY2FwaXRhbGl6ZT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NhcGl0YWxpemVcIikpLF9TdHlsZUNvbmZpZz1yZXF1aXJlKFwiLi91dGlscy9TdHlsZUNvbmZpZ1wiKSxwcm9wVHlwZXM9e2NvbXBvbmVudENsYXNzOl9lbGVtZW50VHlwZS5kZWZhdWx0LHZpc2libGVYc0Jsb2NrOl9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLHZpc2libGVTbUJsb2NrOl9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLHZpc2libGVNZEJsb2NrOl9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLHZpc2libGVMZ0Jsb2NrOl9wcm9wVHlwZXMuZGVmYXVsdC5ib29sfSxkZWZhdWx0UHJvcHM9e2NvbXBvbmVudENsYXNzOlwiZGl2XCJ9LENsZWFyZml4PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIENsZWFyZml4KCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybigwLF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShDbGVhcmZpeCxlKSxDbGVhcmZpeC5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uIHJlbmRlcigpe3ZhciBlPXRoaXMucHJvcHMsdD1lLmNvbXBvbmVudENsYXNzLHI9ZS5jbGFzc05hbWUsbz0oMCxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoZSxbXCJjb21wb25lbnRDbGFzc1wiLFwiY2xhc3NOYW1lXCJdKSxsPSgwLF9ib290c3RyYXBVdGlscy5zcGxpdEJzUHJvcHMpKG8pLHM9bFswXSxpPWxbMV0sYT0oMCxfYm9vdHN0cmFwVXRpbHMuZ2V0Q2xhc3NTZXQpKHMpO3JldHVybiBfU3R5bGVDb25maWcuREVWSUNFX1NJWkVTLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9XCJ2aXNpYmxlXCIrKDAsX2NhcGl0YWxpemUuZGVmYXVsdCkoZSkrXCJCbG9ja1wiO2lbdF0mJihhW1widmlzaWJsZS1cIitlK1wiLWJsb2NrXCJdPSEwKSxkZWxldGUgaVt0XX0pLF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQodCwoMCxfZXh0ZW5kczIuZGVmYXVsdCkoe30saSx7Y2xhc3NOYW1lOigwLF9jbGFzc25hbWVzLmRlZmF1bHQpKHIsYSl9KSl9LENsZWFyZml4fShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO0NsZWFyZml4LnByb3BUeXBlcz1wcm9wVHlwZXMsQ2xlYXJmaXguZGVmYXVsdFByb3BzPWRlZmF1bHRQcm9wczt2YXIgX2RlZmF1bHQ9KDAsX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKFwiY2xlYXJmaXhcIixDbGVhcmZpeCk7ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrTnNaV0Z5Wm1sNExtcHpJbDBzSW01aGJXVnpJanBiSWw5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUWlMQ0p5WlhGMWFYSmxJaXdpWlhod2IzSjBjeUlzSWw5ZlpYTk5iMlIxYkdVaUxDSmtaV1poZFd4MElpd2lYMlY0ZEdWdVpITXlJaXdpWDI5aWFtVmpkRmRwZEdodmRYUlFjbTl3WlhKMGFXVnpURzl2YzJVeUlpd2lYMmx1YUdWeWFYUnpURzl2YzJVeUlpd2lYMk5zWVhOemJtRnRaWE1pTENKZmNtVmhZM1FpTENKZmNISnZjRlI1Y0dWeklpd2lYMlZzWlcxbGJuUlVlWEJsSWl3aVgySnZiM1J6ZEhKaGNGVjBhV3h6SWl3aVgyTmhjR2wwWVd4cGVtVWlMQ0pmVTNSNWJHVkRiMjVtYVdjaUxDSndjbTl3Vkhsd1pYTWlMQ0pqYjIxd2IyNWxiblJEYkdGemN5SXNJblpwYzJsaWJHVlljMEpzYjJOcklpd2lZbTl2YkNJc0luWnBjMmxpYkdWVGJVSnNiMk5ySWl3aWRtbHphV0pzWlUxa1FteHZZMnNpTENKMmFYTnBZbXhsVEdkQ2JHOWpheUlzSW1SbFptRjFiSFJRY205d2N5SXNJa05zWldGeVptbDRJaXdpWDFKbFlXTjBKRU52YlhCdmJtVnVkQ0lzSW1Gd2NHeDVJaXdpZEdocGN5SXNJbUZ5WjNWdFpXNTBjeUlzSW5CeWIzUnZkSGx3WlNJc0luSmxibVJsY2lJc0lsOTBhR2x6SkhCeWIzQnpJaXdpY0hKdmNITWlMQ0pEYjIxd2IyNWxiblFpTENKamJHRnpjMDVoYldVaUxDSmZjM0JzYVhSQ2MxQnliM0J6SWl3aWMzQnNhWFJDYzFCeWIzQnpJaXdpWW5OUWNtOXdjeUlzSW1Wc1pXMWxiblJRY205d2N5SXNJbU5zWVhOelpYTWlMQ0puWlhSRGJHRnpjMU5sZENJc0lrUkZWa2xEUlY5VFNWcEZVeUlzSW1admNrVmhZMmdpTENKemFYcGxJaXdpY0hKdmNFNWhiV1VpTENKamNtVmhkR1ZGYkdWdFpXNTBJaXdpWDJSbFptRjFiSFFpTENKaWMwTnNZWE56SWl3aWJXOWtkV3hsSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4aFFVVkJMRWxCUVVsQkxIVkNRVUY1UWtNc1VVRkJVU3gzUkVGRmNrTkRMRkZCUVZGRExGbEJRV0VzUlVGRGNrSkVMRkZCUVZGRkxHRkJRVlVzUlVGRmJFSXNTVUZCU1VNc1ZVRkJXVXdzZFVKQlFYVkNReXhSUVVGUkxESkRRVVV6UTBzc0swSkJRV2xEVGl4MVFrRkJkVUpETEZGQlFWRXNaMFZCUldoRlRTeG5Ra0ZCYTBKUUxIVkNRVUYxUWtNc1VVRkJVU3hwUkVGRmFrUlBMRmxCUVdOU0xIVkNRVUYxUWtNc1VVRkJVU3hsUVVVM1ExRXNUMEZCVTFRc2RVSkJRWFZDUXl4UlFVRlJMRlZCUlhoRFV5eFhRVUZoVml4MVFrRkJkVUpETEZGQlFWRXNaVUZGTlVOVkxHRkJRV1ZZTEhWQ1FVRjFRa01zVVVGQlVTeHhRMEZGT1VOWExHZENRVUZyUWxnc1VVRkJVU3d3UWtGRk1VSlpMRmxCUVdOaUxIVkNRVUYxUWtNc1VVRkJVU3gxUWtGRk4wTmhMR0ZCUVdWaUxGRkJRVkVzZFVKQlJYWkNZeXhWUVVGWkxFTkJRMlJETEdWQlFXZENUQ3hoUVVGaFVDeFJRVk0zUW1Fc1pVRkJaMEpRTEZkQlFWZE9MRkZCUVZGakxFdEJVMjVEUXl4bFFVRm5RbFFzVjBGQlYwNHNVVUZCVVdNc1MwRlRia05GTEdWQlFXZENWaXhYUVVGWFRpeFJRVUZSWXl4TFFWTnVRMGNzWlVGQlowSllMRmRCUVZkT0xGRkJRVkZqTEUxQlJXcERTU3hoUVVGbExFTkJRMnBDVGl4bFFVRm5RaXhQUVVka1R5eFRRVVZLTEZOQlFWVkRMRWRCUjFJc1UwRkJVMFFzVjBGRFVDeFBRVUZQUXl4RlFVRnBRa01zVFVGQlRVTXNTMEZCVFVNc1dVRkJZMFFzUzBGblEzQkVMRTlCYmtOQkxFVkJRVWx1UWl4blFrRkJaMEpJTEZOQlFWTnRRaXhUUVVGVlF5eEhRVTB4UWtRc1UwRkJVMHNzVlVGRlprTXNUMEZCVXl4VFFVRlRRU3hUUVVOMlFpeEpRVUZKUXl4RlFVRmpTaXhMUVVGTFN5eE5RVU51UWtNc1JVRkJXVVlzUlVGQldXUXNaVUZEZUVKcFFpeEZRVUZaU0N4RlFVRlpSeXhWUVVONFFrWXNSMEZCVVN4RlFVRkpla0lzSzBKQlFTdENSaXhUUVVGVE1FSXNSVUZCWVN4RFFVRkRMR2xDUVVGclFpeGpRVVZ3Umtrc1IwRkJaMElzUlVGQlNYUkNMR2RDUVVGblFuVkNMR05CUVdOS0xFZEJRMnhFU3l4RlFVRlZSaXhGUVVGakxFZEJRM2hDUnl4RlFVRmxTQ3hGUVVGakxFZEJSVGRDU1N4SFFVRlZMRVZCUVVreFFpeG5Ra0ZCWjBJeVFpeGhRVUZoU0N4SFFWa3ZReXhQUVZaQmRFSXNZVUZCWVRCQ0xHRkJRV0ZETEZGQlFWRXNVMEZCVlVNc1IwRkRNVU1zU1VGQlNVTXNSVUZCVnl4WFFVRlpMRVZCUVVrNVFpeFpRVUZaVkN4VFFVRlRjME1zUjBGQlVTeFJRVVY0UkV3c1JVRkJZVTBzUzBGRFprd3NSVUZCVVN4WFFVRmhTU3hGUVVGUExGZEJRVmtzVlVGSGJrTk1MRVZCUVdGTkxFdEJSMlpzUXl4UFFVRlBUQ3hSUVVGUmQwTXNZMEZCWTFvc1IwRkJWeXhGUVVGSk0wSXNWVUZCVlVRc1UwRkJVeXhIUVVGSmFVTXNSVUZCWXl4RFFVTjBSa29zVjBGQlZ5eEZRVUZKZWtJc1dVRkJXVW9zVTBGQlV6WkNMRVZCUVZkTExFOUJTVFZEWml4VFFYQkRWQ3hEUVhGRFJXUXNUMEZCVDB3c1VVRkJVVFJDTEZkQlJXcENWQ3hUUVVGVFVpeFZRVUZaUVN4VlFVTnlRbEVzVTBGQlUwUXNZVUZCWlVFc1lVRkZlRUlzU1VGQlNYVkNMRlZCUVZjc1JVRkJTV3BETEdkQ1FVRm5RbXRETEZOQlFWTXNWMEZCV1haQ0xGVkJSWGhFY2tJc1VVRkJVVVVzVVVGQlZYbERMRk5CUTJ4Q1JTeFBRVUZQTjBNc1VVRkJWVUVzVVVGQmFVSWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F0WW05dmRITjBjbUZ3TDJ4cFlpOURiR1ZoY21acGVDNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9pbmhlcml0c0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSksX3Byb3BUeXBlcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKSxfcmVhY3Q9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpLHByb3BUeXBlcz17bGFiZWw6X3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZy5pc1JlcXVpcmVkLG9uQ2xpY2s6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmN9LGRlZmF1bHRQcm9wcz17bGFiZWw6XCJDbG9zZVwifSxDbG9zZUJ1dHRvbj1mdW5jdGlvbihlKXtmdW5jdGlvbiBDbG9zZUJ1dHRvbigpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4oMCxfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoQ2xvc2VCdXR0b24sZSksQ2xvc2VCdXR0b24ucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXt2YXIgZT10aGlzLnByb3BzLHQ9ZS5sYWJlbCxyPWUub25DbGljaztyZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLHt0eXBlOlwiYnV0dG9uXCIsY2xhc3NOYW1lOlwiY2xvc2VcIixvbkNsaWNrOnJ9LF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIse1wiYXJpYS1oaWRkZW5cIjpcInRydWVcIn0sXCLDl1wiKSxfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLHtjbGFzc05hbWU6XCJzci1vbmx5XCJ9LHQpKX0sQ2xvc2VCdXR0b259KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7Q2xvc2VCdXR0b24ucHJvcFR5cGVzPXByb3BUeXBlcyxDbG9zZUJ1dHRvbi5kZWZhdWx0UHJvcHM9ZGVmYXVsdFByb3BzO3ZhciBfZGVmYXVsdD1DbG9zZUJ1dHRvbjtleHBvcnRzLmRlZmF1bHQ9X2RlZmF1bHQsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtOc2IzTmxRblYwZEc5dUxtcHpJbDBzSW01aGJXVnpJanBiSWw5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUWlMQ0p5WlhGMWFYSmxJaXdpWlhod2IzSjBjeUlzSWw5ZlpYTk5iMlIxYkdVaUxDSmtaV1poZFd4MElpd2lYMmx1YUdWeWFYUnpURzl2YzJVeUlpd2lYM0J5YjNCVWVYQmxjeUlzSWw5eVpXRmpkQ0lzSW5CeWIzQlVlWEJsY3lJc0lteGhZbVZzSWl3aWMzUnlhVzVuSWl3aWFYTlNaWEYxYVhKbFpDSXNJbTl1UTJ4cFkyc2lMQ0ptZFc1aklpd2laR1ZtWVhWc2RGQnliM0J6SWl3aVEyeHZjMlZDZFhSMGIyNGlMQ0pmVW1WaFkzUWtRMjl0Y0c5dVpXNTBJaXdpWVhCd2JIa2lMQ0owYUdseklpd2lZWEpuZFcxbGJuUnpJaXdpY0hKdmRHOTBlWEJsSWl3aWNtVnVaR1Z5SWl3aVgzUm9hWE1rY0hKdmNITWlMQ0p3Y205d2N5SXNJbU55WldGMFpVVnNaVzFsYm5RaUxDSjBlWEJsSWl3aVkyeGhjM05PWVcxbElpd2lZWEpwWVMxb2FXUmtaVzRpTENKRGIyMXdiMjVsYm5RaUxDSmZaR1ZtWVhWc2RDSXNJbTF2WkhWc1pTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZGUVN4SlFVRkpRU3gxUWtGQmVVSkRMRkZCUVZFc2QwUkJSWEpEUXl4UlFVRlJReXhaUVVGaExFVkJRM0pDUkN4UlFVRlJSU3hoUVVGVkxFVkJSV3hDTEVsQlFVbERMR2RDUVVGclFrd3NkVUpCUVhWQ1F5eFJRVUZSTEdsRVFVVnFSRXNzVjBGQllVNHNkVUpCUVhWQ1F5eFJRVUZSTEdWQlJUVkRUU3hQUVVGVFVDeDFRa0ZCZFVKRExGRkJRVkVzVlVGRmVFTlBMRlZCUVZrc1EwRkRaRU1zVFVGQlQwZ3NWMEZCVjBZc1VVRkJVVTBzVDBGQlQwTXNWMEZEYWtORExGRkJRVk5PTEZkQlFWZEdMRkZCUVZGVExFMUJSVEZDUXl4aFFVRmxMRU5CUTJwQ1RDeE5RVUZQTEZOQlIweE5MRmxCUlVvc1UwRkJWVU1zUjBGSFVpeFRRVUZUUkN4alFVTlFMRTlCUVU5RExFVkJRV2xDUXl4TlFVRk5ReXhMUVVGTlF5eFpRVUZqUkN4TFFXOUNjRVFzVDBGMlFrRXNSVUZCU1dJc1owSkJRV2RDUkN4VFFVRlRWeXhaUVVGaFF5eEhRVTAzUWtRc1dVRkJXVXNzVlVGRmJFSkRMRTlCUVZNc1UwRkJVMEVzVTBGRGRrSXNTVUZCU1VNc1JVRkJZMG9zUzBGQlMwc3NUVUZEYmtKa0xFVkJRVkZoTEVWQlFWbGlMRTFCUTNCQ1J5eEZRVUZWVlN4RlFVRlpWaXhSUVVNeFFpeFBRVUZQVEN4UFFVRlBTQ3hSUVVGUmIwSXNZMEZCWXl4VFFVRlZMRU5CUXpWRFF5eExRVUZOTEZOQlEwNURMRlZCUVZjc1VVRkRXR1FzVVVGQlUwRXNSMEZEVWt3c1QwRkJUMGdzVVVGQlVXOUNMR05CUVdNc1QwRkJVU3hEUVVOMFEwY3NZMEZCWlN4UlFVTmtMRXRCUVZOd1FpeFBRVUZQU0N4UlFVRlJiMElzWTBGQll5eFBRVUZSTEVOQlF5OURSU3hWUVVGWExGZEJRMVpxUWl4TFFVZEZUU3haUVhoQ1ZDeERRWGxDUlZJc1QwRkJUMGdzVVVGQlVYZENMRmRCUldwQ1lpeFpRVUZaVUN4VlFVRlpRU3hWUVVONFFrOHNXVUZCV1VRc1lVRkJaVUVzWVVGRE0wSXNTVUZCU1dVc1UwRkJWMlFzV1VGRFptSXNVVUZCVVVVc1VVRkJWWGxDTEZOQlEyeENReXhQUVVGUE5VSXNVVUZCVlVFc1VVRkJhVUlpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdFltOXZkSE4wY21Gd0wyeHBZaTlEYkc5elpVSjFkSFJ2Ymk1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PXZvaWQgMDt2YXIgX2V4dGVuZHMyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKSxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpLF9pbmhlcml0c0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSksX2NsYXNzbmFtZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKSxfcHJvcFR5cGVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpLF9lbGVtZW50VHlwZT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzLWV4dHJhL2xpYi9lbGVtZW50VHlwZVwiKSksX2Jvb3RzdHJhcFV0aWxzPXJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpLF9TdHlsZUNvbmZpZz1yZXF1aXJlKFwiLi91dGlscy9TdHlsZUNvbmZpZ1wiKSxwcm9wVHlwZXM9e2NvbXBvbmVudENsYXNzOl9lbGVtZW50VHlwZS5kZWZhdWx0LHhzOl9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsc206X3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixtZDpfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLGxnOl9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIseHNIaWRkZW46X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsc21IaWRkZW46X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsbWRIaWRkZW46X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsbGdIaWRkZW46X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wseHNPZmZzZXQ6X3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixzbU9mZnNldDpfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLG1kT2Zmc2V0Ol9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsbGdPZmZzZXQ6X3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcix4c1B1c2g6X3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixzbVB1c2g6X3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixtZFB1c2g6X3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixsZ1B1c2g6X3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcix4c1B1bGw6X3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixzbVB1bGw6X3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixtZFB1bGw6X3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixsZ1B1bGw6X3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcn0sZGVmYXVsdFByb3BzPXtjb21wb25lbnRDbGFzczpcImRpdlwifSxDb2w9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gQ29sKCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybigwLF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShDb2wsZSksQ29sLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIGU9dGhpcy5wcm9wcyxyPWUuY29tcG9uZW50Q2xhc3MscD1lLmNsYXNzTmFtZSx0PSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShlLFtcImNvbXBvbmVudENsYXNzXCIsXCJjbGFzc05hbWVcIl0pLG89KDAsX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykodCkscz1vWzBdLGw9b1sxXSx1PVtdO3JldHVybiBfU3R5bGVDb25maWcuREVWSUNFX1NJWkVTLmZvckVhY2goZnVuY3Rpb24oZSl7ZnVuY3Rpb24gcG9wUHJvcChyLHApe3ZhciB0PVwiXCIrZStyLG89bFt0XTtudWxsIT1vJiZ1LnB1c2goKDAsX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkocyxcIlwiK2UrcCtcIi1cIitvKSksZGVsZXRlIGxbdF19cG9wUHJvcChcIlwiLFwiXCIpLHBvcFByb3AoXCJPZmZzZXRcIixcIi1vZmZzZXRcIikscG9wUHJvcChcIlB1c2hcIixcIi1wdXNoXCIpLHBvcFByb3AoXCJQdWxsXCIsXCItcHVsbFwiKTt2YXIgcj1lK1wiSGlkZGVuXCI7bFtyXSYmdS5wdXNoKFwiaGlkZGVuLVwiK2UpLGRlbGV0ZSBsW3JdfSksX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChyLCgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSxsLHtjbGFzc05hbWU6KDAsX2NsYXNzbmFtZXMuZGVmYXVsdCkocCx1KX0pKX0sQ29sfShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO0NvbC5wcm9wVHlwZXM9cHJvcFR5cGVzLENvbC5kZWZhdWx0UHJvcHM9ZGVmYXVsdFByb3BzO3ZhciBfZGVmYXVsdD0oMCxfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoXCJjb2xcIixDb2wpO2V4cG9ydHMuZGVmYXVsdD1fZGVmYXVsdCxtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa052YkM1cWN5SmRMQ0p1WVcxbGN5STZXeUpmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MElpd2ljbVZ4ZFdseVpTSXNJbVY0Y0c5eWRITWlMQ0pmWDJWelRXOWtkV3hsSWl3aVpHVm1ZWFZzZENJc0lsOWxlSFJsYm1Sek1pSXNJbDl2WW1wbFkzUlhhWFJvYjNWMFVISnZjR1Z5ZEdsbGMweHZiM05sTWlJc0lsOXBibWhsY21sMGMweHZiM05sTWlJc0lsOWpiR0Z6YzI1aGJXVnpJaXdpWDNKbFlXTjBJaXdpWDNCeWIzQlVlWEJsY3lJc0lsOWxiR1Z0Wlc1MFZIbHdaU0lzSWw5aWIyOTBjM1J5WVhCVmRHbHNjeUlzSWw5VGRIbHNaVU52Ym1acFp5SXNJbkJ5YjNCVWVYQmxjeUlzSW1OdmJYQnZibVZ1ZEVOc1lYTnpJaXdpZUhNaUxDSnVkVzFpWlhJaUxDSnpiU0lzSW0xa0lpd2liR2NpTENKNGMwaHBaR1JsYmlJc0ltSnZiMndpTENKemJVaHBaR1JsYmlJc0ltMWtTR2xrWkdWdUlpd2liR2RJYVdSa1pXNGlMQ0o0YzA5bVpuTmxkQ0lzSW5OdFQyWm1jMlYwSWl3aWJXUlBabVp6WlhRaUxDSnNaMDltWm5ObGRDSXNJbmh6VUhWemFDSXNJbk50VUhWemFDSXNJbTFrVUhWemFDSXNJbXhuVUhWemFDSXNJbmh6VUhWc2JDSXNJbk50VUhWc2JDSXNJbTFrVUhWc2JDSXNJbXhuVUhWc2JDSXNJbVJsWm1GMWJIUlFjbTl3Y3lJc0lrTnZiQ0lzSWw5U1pXRmpkQ1JEYjIxd2IyNWxiblFpTENKaGNIQnNlU0lzSW5Sb2FYTWlMQ0poY21kMWJXVnVkSE1pTENKd2NtOTBiM1I1Y0dVaUxDSnlaVzVrWlhJaUxDSmZkR2hwY3lSd2NtOXdjeUlzSW5CeWIzQnpJaXdpUTI5dGNHOXVaVzUwSWl3aVkyeGhjM05PWVcxbElpd2lYM053YkdsMFFuTlFjbTl3Y3lJc0luTndiR2wwUW5OUWNtOXdjeUlzSW1KelVISnZjSE1pTENKbGJHVnRaVzUwVUhKdmNITWlMQ0pqYkdGemMyVnpJaXdpUkVWV1NVTkZYMU5KV2tWVElpd2labTl5UldGamFDSXNJbk5wZW1VaUxDSndiM0JRY205d0lpd2ljSEp2Y0ZOMVptWnBlQ0lzSW0xdlpHbG1hV1Z5SWl3aWNISnZjRTVoYldVaUxDSndjbTl3Vm1Gc2RXVWlMQ0p3ZFhOb0lpd2ljSEpsWm1sNElpd2lhR2xrWkdWdVVISnZjRTVoYldVaUxDSmpjbVZoZEdWRmJHVnRaVzUwSWl3aVgyUmxabUYxYkhRaUxDSmljME5zWVhOeklpd2liVzlrZFd4bElsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVVZCTEVsQlFVbEJMSFZDUVVGNVFrTXNVVUZCVVN4M1JFRkZja05ETEZGQlFWRkRMRmxCUVdFc1JVRkRja0pFTEZGQlFWRkZMR0ZCUVZVc1JVRkZiRUlzU1VGQlNVTXNWVUZCV1V3c2RVSkJRWFZDUXl4UlFVRlJMREpEUVVVelEwc3NLMEpCUVdsRFRpeDFRa0ZCZFVKRExGRkJRVkVzWjBWQlJXaEZUU3huUWtGQmEwSlFMSFZDUVVGMVFrTXNVVUZCVVN4cFJFRkZha1JQTEZsQlFXTlNMSFZDUVVGMVFrTXNVVUZCVVN4bFFVVTNRMUVzVDBGQlUxUXNkVUpCUVhWQ1F5eFJRVUZSTEZWQlJYaERVeXhYUVVGaFZpeDFRa0ZCZFVKRExGRkJRVkVzWlVGRk5VTlZMR0ZCUVdWWUxIVkNRVUYxUWtNc1VVRkJVU3h4UTBGRk9VTlhMR2RDUVVGclFsZ3NVVUZCVVN3d1FrRkZNVUpaTEdGQlFXVmFMRkZCUVZFc2RVSkJSWFpDWVN4VlFVRlpMRU5CUTJSRExHVkJRV2RDU2l4aFFVRmhVQ3hSUVZNM1Fsa3NSMEZCU1U0c1YwRkJWMDRzVVVGQlVXRXNUMEZUZGtKRExFZEJRVWxTTEZkQlFWZE9MRkZCUVZGaExFOUJVM1pDUlN4SFFVRkpWQ3hYUVVGWFRpeFJRVUZSWVN4UFFWTjJRa2NzUjBGQlNWWXNWMEZCVjA0c1VVRkJVV0VzVDBGVGRrSkpMRk5CUVZWWUxGZEJRVmRPTEZGQlFWRnJRaXhMUVZNM1FrTXNVMEZCVldJc1YwRkJWMDRzVVVGQlVXdENMRXRCVXpkQ1JTeFRRVUZWWkN4WFFVRlhUaXhSUVVGUmEwSXNTMEZUTjBKSExGTkJRVlZtTEZkQlFWZE9MRkZCUVZGclFpeExRVk0zUWtrc1UwRkJWV2hDTEZkQlFWZE9MRkZCUVZGaExFOUJVemRDVlN4VFFVRlZha0lzVjBGQlYwNHNVVUZCVVdFc1QwRlROMEpYTEZOQlFWVnNRaXhYUVVGWFRpeFJRVUZSWVN4UFFWTTNRbGtzVTBGQlZXNUNMRmRCUVZkT0xGRkJRVkZoTEU5QlV6ZENZU3hQUVVGUmNFSXNWMEZCVjA0c1VVRkJVV0VzVDBGVE0wSmpMRTlCUVZGeVFpeFhRVUZYVGl4UlFVRlJZU3hQUVZNelFtVXNUMEZCVVhSQ0xGZEJRVmRPTEZGQlFWRmhMRTlCVXpOQ1owSXNUMEZCVVhaQ0xGZEJRVmRPTEZGQlFWRmhMRTlCVXpOQ2FVSXNUMEZCVVhoQ0xGZEJRVmRPTEZGQlFWRmhMRTlCVXpOQ2EwSXNUMEZCVVhwQ0xGZEJRVmRPTEZGQlFWRmhMRTlCVXpOQ2JVSXNUMEZCVVRGQ0xGZEJRVmRPTEZGQlFWRmhMRTlCVXpOQ2IwSXNUMEZCVVROQ0xGZEJRVmRPTEZGQlFWRmhMRkZCUlhwQ2NVSXNZVUZCWlN4RFFVTnFRblpDTEdWQlFXZENMRTlCUjJSM1FpeEpRVVZLTEZOQlFWVkRMRWRCUjFJc1UwRkJVMFFzVFVGRFVDeFBRVUZQUXl4RlFVRnBRa01zVFVGQlRVTXNTMEZCVFVNc1dVRkJZMFFzUzBFclEzQkVMRTlCYkVSQkxFVkJRVWx1UXl4blFrRkJaMEpJTEZOQlFWTnRReXhKUVVGTFF5eEhRVTF5UWtRc1NVRkJTVXNzVlVGRlZrTXNUMEZCVXl4VFFVRlRRU3hUUVVOMlFpeEpRVUZKUXl4RlFVRmpTaXhMUVVGTFN5eE5RVU51UWtNc1JVRkJXVVlzUlVGQldTOUNMR1ZCUTNoQ2EwTXNSVUZCV1Vnc1JVRkJXVWNzVlVGRGVFSkdMRWRCUVZFc1JVRkJTWHBETEN0Q1FVRXJRa1lzVTBGQlV6QkRMRVZCUVdFc1EwRkJReXhwUWtGQmEwSXNZMEZGY0VaSkxFZEJRV2RDTEVWQlFVbDBReXhuUWtGQlowSjFReXhqUVVGalNpeEhRVU5zUkVzc1JVRkJWVVlzUlVGQll5eEhRVU40UWtjc1JVRkJaVWdzUlVGQll5eEhRVVUzUWtrc1JVRkJWU3hIUVRKQ1pDeFBRWHBDUVhwRExHRkJRV0V3UXl4aFFVRmhReXhSUVVGUkxGTkJRVlZETEVkQlF6RkRMRk5CUVZORExGRkJRVkZETEVWQlFWbERMRWRCUXpOQ0xFbEJRVWxETEVWQlFWY3NSMEZCUzBvc1JVRkJUMFVzUlVGRGRrSkhMRVZCUVZsVUxFVkJRV0ZSTEVkQlJWb3NUVUZCWWtNc1IwRkRSbElzUlVGQlVWTXNUVUZCU3l4RlFVRkpia1FzWjBKQlFXZENiMFFzVVVGQlVWb3NSVUZCVXl4SFFVRkxTeXhGUVVGUFJ5eEZRVUZYTEVsQlFVMUZMRmRCUnpGRlZDeEZRVUZoVVN4SFFVZDBRa2dzVVVGQlVTeEhRVUZKTEVsQlExcEJMRkZCUVZFc1UwRkJWU3hYUVVOc1FrRXNVVUZCVVN4UFFVRlJMRk5CUTJoQ1FTeFJRVUZSTEU5QlFWRXNVMEZEYUVJc1NVRkJTVThzUlVGQmFVSlNMRVZCUVU4c1UwRkZlRUpLTEVWQlFXRlpMRWxCUTJaWUxFVkJRVkZUTEV0QlFVc3NWVUZCV1U0c1ZVRkhjRUpLTEVWQlFXRlpMRXRCUjJaNFJDeFBRVUZQVEN4UlFVRlJPRVFzWTBGQlkyeENMRWRCUVZjc1JVRkJTVE5ETEZWQlFWVkVMRk5CUVZNc1IwRkJTV2xFTEVWQlFXTXNRMEZEZEVaS0xGZEJRVmNzUlVGQlNYcERMRmxCUVZsS0xGTkJRVk0yUXl4RlFVRlhTeXhQUVVrMVEyWXNTVUZ1UkZRc1EwRnZSRVU1UWl4UFFVRlBUQ3hSUVVGUk5FTXNWMEZGYWtKVUxFbEJRVWw2UWl4VlFVRlpRU3hWUVVOb1FubENMRWxCUVVsRUxHRkJRV1ZCTEdGQlJXNUNMRWxCUVVrMlFpeFZRVUZYTEVWQlFVbDJSQ3huUWtGQlowSjNSQ3hUUVVGVExFMUJRVTgzUWl4TFFVVnVSSEpETEZGQlFWRkZMRkZCUVZVclJDeFRRVU5zUWtVc1QwRkJUMjVGTEZGQlFWVkJMRkZCUVdsQ0lpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDNKbFlXTjBMV0p2YjNSemRISmhjQzlzYVdJdlEyOXNMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0PXJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkPXJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PXZvaWQgMDt2YXIgX2NvbGxhcHNlU3R5bGVzLF9leHRlbmRzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSksX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9wYXJzZUludDI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9jb3JlLWpzL3BhcnNlLWludFwiKSksX2NsYXNzbmFtZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSksX3N0eWxlPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRvbS1oZWxwZXJzL3N0eWxlXCIpKSxfcmVhY3Q9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpLF9wcm9wVHlwZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSksX1RyYW5zaXRpb249X2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0LXRyYW5zaXRpb24tZ3JvdXAvVHJhbnNpdGlvblwiKSksX2NhcGl0YWxpemU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jYXBpdGFsaXplXCIpKSxfY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uXCIpKSxNQVJHSU5TPXtoZWlnaHQ6W1wibWFyZ2luVG9wXCIsXCJtYXJnaW5Cb3R0b21cIl0sd2lkdGg6W1wibWFyZ2luTGVmdFwiLFwibWFyZ2luUmlnaHRcIl19O2Z1bmN0aW9uIHRyaWdnZXJCcm93c2VyUmVmbG93KGUpe2Uub2Zmc2V0SGVpZ2h0fWZ1bmN0aW9uIGdldERpbWVuc2lvblZhbHVlKGUsdCl7dmFyIG49dFtcIm9mZnNldFwiKygwLF9jYXBpdGFsaXplLmRlZmF1bHQpKGUpXSxpPU1BUkdJTlNbZV07cmV0dXJuIG4rKDAsX3BhcnNlSW50Mi5kZWZhdWx0KSgoMCxfc3R5bGUuZGVmYXVsdCkodCxpWzBdKSwxMCkrKDAsX3BhcnNlSW50Mi5kZWZhdWx0KSgoMCxfc3R5bGUuZGVmYXVsdCkodCxpWzFdKSwxMCl9dmFyIGNvbGxhcHNlU3R5bGVzPSgoX2NvbGxhcHNlU3R5bGVzPXt9KVtfVHJhbnNpdGlvbi5FWElURURdPVwiY29sbGFwc2VcIixfY29sbGFwc2VTdHlsZXNbX1RyYW5zaXRpb24uRVhJVElOR109XCJjb2xsYXBzaW5nXCIsX2NvbGxhcHNlU3R5bGVzW19UcmFuc2l0aW9uLkVOVEVSSU5HXT1cImNvbGxhcHNpbmdcIixfY29sbGFwc2VTdHlsZXNbX1RyYW5zaXRpb24uRU5URVJFRF09XCJjb2xsYXBzZSBpblwiLF9jb2xsYXBzZVN0eWxlcykscHJvcFR5cGVzPXtpbjpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxtb3VudE9uRW50ZXI6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsdW5tb3VudE9uRXhpdDpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxhcHBlYXI6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsdGltZW91dDpfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLG9uRW50ZXI6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsb25FbnRlcmluZzpfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxvbkVudGVyZWQ6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsb25FeGl0Ol9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLG9uRXhpdGluZzpfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxvbkV4aXRlZDpfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxkaW1lbnNpb246X3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFtcImhlaWdodFwiLFwid2lkdGhcIl0pLF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXSksZ2V0RGltZW5zaW9uVmFsdWU6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMscm9sZTpfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nfSxkZWZhdWx0UHJvcHM9e2luOiExLHRpbWVvdXQ6MzAwLG1vdW50T25FbnRlcjohMSx1bm1vdW50T25FeGl0OiExLGFwcGVhcjohMSxkaW1lbnNpb246XCJoZWlnaHRcIixnZXREaW1lbnNpb25WYWx1ZTpnZXREaW1lbnNpb25WYWx1ZX0sQ29sbGFwc2U9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gQ29sbGFwc2UoKXtmb3IodmFyIHQsbj1hcmd1bWVudHMubGVuZ3RoLGk9bmV3IEFycmF5KG4pLHI9MDtyPG47cisrKWlbcl09YXJndW1lbnRzW3JdO3JldHVybih0PWUuY2FsbC5hcHBseShlLFt0aGlzXS5jb25jYXQoaSkpfHx0aGlzKS5oYW5kbGVFbnRlcj1mdW5jdGlvbihlKXtlLnN0eWxlW3QuZ2V0RGltZW5zaW9uKCldPVwiMFwifSx0LmhhbmRsZUVudGVyaW5nPWZ1bmN0aW9uKGUpe3ZhciBuPXQuZ2V0RGltZW5zaW9uKCk7ZS5zdHlsZVtuXT10Ll9nZXRTY3JvbGxEaW1lbnNpb25WYWx1ZShlLG4pfSx0LmhhbmRsZUVudGVyZWQ9ZnVuY3Rpb24oZSl7ZS5zdHlsZVt0LmdldERpbWVuc2lvbigpXT1udWxsfSx0LmhhbmRsZUV4aXQ9ZnVuY3Rpb24oZSl7dmFyIG49dC5nZXREaW1lbnNpb24oKTtlLnN0eWxlW25dPXQucHJvcHMuZ2V0RGltZW5zaW9uVmFsdWUobixlKStcInB4XCIsdHJpZ2dlckJyb3dzZXJSZWZsb3coZSl9LHQuaGFuZGxlRXhpdGluZz1mdW5jdGlvbihlKXtlLnN0eWxlW3QuZ2V0RGltZW5zaW9uKCldPVwiMFwifSx0fSgwLF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShDb2xsYXBzZSxlKTt2YXIgdD1Db2xsYXBzZS5wcm90b3R5cGU7cmV0dXJuIHQuZ2V0RGltZW5zaW9uPWZ1bmN0aW9uIGdldERpbWVuc2lvbigpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMucHJvcHMuZGltZW5zaW9uP3RoaXMucHJvcHMuZGltZW5zaW9uKCk6dGhpcy5wcm9wcy5kaW1lbnNpb259LHQuX2dldFNjcm9sbERpbWVuc2lvblZhbHVlPWZ1bmN0aW9uIF9nZXRTY3JvbGxEaW1lbnNpb25WYWx1ZShlLHQpe3JldHVybiBlW1wic2Nyb2xsXCIrKDAsX2NhcGl0YWxpemUuZGVmYXVsdCkodCldK1wicHhcIn0sdC5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIGU9dGhpcyx0PXRoaXMucHJvcHMsbj10Lm9uRW50ZXIsaT10Lm9uRW50ZXJpbmcscj10Lm9uRW50ZXJlZCxvPXQub25FeGl0LGw9dC5vbkV4aXRpbmcsYT10LmNsYXNzTmFtZSxzPXQuY2hpbGRyZW4sdT0oMCxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkodCxbXCJvbkVudGVyXCIsXCJvbkVudGVyaW5nXCIsXCJvbkVudGVyZWRcIixcIm9uRXhpdFwiLFwib25FeGl0aW5nXCIsXCJjbGFzc05hbWVcIixcImNoaWxkcmVuXCJdKTtkZWxldGUgdS5kaW1lbnNpb24sZGVsZXRlIHUuZ2V0RGltZW5zaW9uVmFsdWU7dmFyIHA9KDAsX2NyZWF0ZUNoYWluZWRGdW5jdGlvbi5kZWZhdWx0KSh0aGlzLmhhbmRsZUVudGVyLG4pLGQ9KDAsX2NyZWF0ZUNoYWluZWRGdW5jdGlvbi5kZWZhdWx0KSh0aGlzLmhhbmRsZUVudGVyaW5nLGkpLGM9KDAsX2NyZWF0ZUNoYWluZWRGdW5jdGlvbi5kZWZhdWx0KSh0aGlzLmhhbmRsZUVudGVyZWQsciksZj0oMCxfY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uLmRlZmF1bHQpKHRoaXMuaGFuZGxlRXhpdCxvKSxfPSgwLF9jcmVhdGVDaGFpbmVkRnVuY3Rpb24uZGVmYXVsdCkodGhpcy5oYW5kbGVFeGl0aW5nLGwpO3JldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9UcmFuc2l0aW9uLmRlZmF1bHQsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LHUse1wiYXJpYS1leHBhbmRlZFwiOnUucm9sZT91LmluOm51bGwsb25FbnRlcjpwLG9uRW50ZXJpbmc6ZCxvbkVudGVyZWQ6YyxvbkV4aXQ6ZixvbkV4aXRpbmc6X30pLGZ1bmN0aW9uKHQsbil7cmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNsb25lRWxlbWVudChzLCgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSxuLHtjbGFzc05hbWU6KDAsX2NsYXNzbmFtZXMuZGVmYXVsdCkoYSxzLnByb3BzLmNsYXNzTmFtZSxjb2xsYXBzZVN0eWxlc1t0XSxcIndpZHRoXCI9PT1lLmdldERpbWVuc2lvbigpJiZcIndpZHRoXCIpfSkpfSl9LENvbGxhcHNlfShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO0NvbGxhcHNlLnByb3BUeXBlcz1wcm9wVHlwZXMsQ29sbGFwc2UuZGVmYXVsdFByb3BzPWRlZmF1bHRQcm9wczt2YXIgX2RlZmF1bHQ9Q29sbGFwc2U7ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrTnZiR3hoY0hObExtcHpJbDBzSW01aGJXVnpJanBiSWw5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUWlMQ0p5WlhGMWFYSmxJaXdpWDJsdWRHVnliM0JTWlhGMWFYSmxWMmxzWkdOaGNtUWlMQ0psZUhCdmNuUnpJaXdpWDE5bGMwMXZaSFZzWlNJc0ltUmxabUYxYkhRaUxDSmZZMjlzYkdGd2MyVlRkSGxzWlhNaUxDSmZaWGgwWlc1a2N6SWlMQ0pmYjJKcVpXTjBWMmwwYUc5MWRGQnliM0JsY25ScFpYTk1iMjl6WlRJaUxDSmZhVzVvWlhKcGRITk1iMjl6WlRJaUxDSmZjR0Z5YzJWSmJuUXlJaXdpWDJOc1lYTnpibUZ0WlhNaUxDSmZjM1I1YkdVaUxDSmZjbVZoWTNRaUxDSmZjSEp2Y0ZSNWNHVnpJaXdpWDFSeVlXNXphWFJwYjI0aUxDSmZZMkZ3YVhSaGJHbDZaU0lzSWw5amNtVmhkR1ZEYUdGcGJtVmtSblZ1WTNScGIyNGlMQ0pOUVZKSFNVNVRJaXdpYUdWcFoyaDBJaXdpZDJsa2RHZ2lMQ0owY21sbloyVnlRbkp2ZDNObGNsSmxabXh2ZHlJc0ltNXZaR1VpTENKdlptWnpaWFJJWldsbmFIUWlMQ0puWlhSRWFXMWxibk5wYjI1V1lXeDFaU0lzSW1ScGJXVnVjMmx2YmlJc0ltVnNaVzBpTENKMllXeDFaU0lzSW0xaGNtZHBibk1pTENKamIyeHNZWEJ6WlZOMGVXeGxjeUlzSWtWWVNWUkZSQ0lzSWtWWVNWUkpUa2NpTENKRlRsUkZVa2xPUnlJc0lrVk9WRVZTUlVRaUxDSndjbTl3Vkhsd1pYTWlMQ0pwYmlJc0ltSnZiMndpTENKdGIzVnVkRTl1Ulc1MFpYSWlMQ0oxYm0xdmRXNTBUMjVGZUdsMElpd2lZWEJ3WldGeUlpd2lkR2x0Wlc5MWRDSXNJbTUxYldKbGNpSXNJbTl1Ulc1MFpYSWlMQ0ptZFc1aklpd2liMjVGYm5SbGNtbHVaeUlzSW05dVJXNTBaWEpsWkNJc0ltOXVSWGhwZENJc0ltOXVSWGhwZEdsdVp5SXNJbTl1UlhocGRHVmtJaXdpYjI1bFQyWlVlWEJsSWl3aWIyNWxUMllpTENKeWIyeGxJaXdpYzNSeWFXNW5JaXdpWkdWbVlYVnNkRkJ5YjNCeklpd2lRMjlzYkdGd2MyVWlMQ0pmVW1WaFkzUWtRMjl0Y0c5dVpXNTBJaXdpWDNSb2FYTWlMQ0pmYkdWdUlpd2lZWEpuZFcxbGJuUnpJaXdpYkdWdVozUm9JaXdpWVhKbmN5SXNJa0Z5Y21GNUlpd2lYMnRsZVNJc0ltTmhiR3dpTENKaGNIQnNlU0lzSW5Sb2FYTWlMQ0pqYjI1allYUWlMQ0pvWVc1a2JHVkZiblJsY2lJc0luTjBlV3hsSWl3aVoyVjBSR2x0Wlc1emFXOXVJaXdpYUdGdVpHeGxSVzUwWlhKcGJtY2lMQ0pmWjJWMFUyTnliMnhzUkdsdFpXNXphVzl1Vm1Gc2RXVWlMQ0pvWVc1a2JHVkZiblJsY21Wa0lpd2lhR0Z1Wkd4bFJYaHBkQ0lzSW5CeWIzQnpJaXdpYUdGdVpHeGxSWGhwZEdsdVp5SXNJbDl3Y205MGJ5SXNJbkJ5YjNSdmRIbHdaU0lzSW5KbGJtUmxjaUlzSWw5MGFHbHpNaUlzSWw5MGFHbHpKSEJ5YjNCeklpd2lZMnhoYzNOT1lXMWxJaXdpWTJocGJHUnlaVzRpTENKamNtVmhkR1ZGYkdWdFpXNTBJaXdpWVhKcFlTMWxlSEJoYm1SbFpDSXNJbk4wWVhSbElpd2lhVzV1WlhKUWNtOXdjeUlzSW1Oc2IyNWxSV3hsYldWdWRDSXNJa052YlhCdmJtVnVkQ0lzSWw5a1pXWmhkV3gwSWl3aWJXOWtkV3hsSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4aFFVVkJMRWxCUVVsQkxIVkNRVUY1UWtNc1VVRkJVU3gzUkVGRmFrTkRMSGRDUVVFd1FrUXNVVUZCVVN4NVJFRkZkRU5GTEZGQlFWRkRMRmxCUVdFc1JVRkRja0pFTEZGQlFWRkZMR0ZCUVZVc1JVRkZiRUlzU1VGelFrbERMR2RDUVhSQ1FVTXNWVUZCV1ZBc2RVSkJRWFZDUXl4UlFVRlJMREpEUVVVelEwOHNLMEpCUVdsRFVpeDFRa0ZCZFVKRExGRkJRVkVzWjBWQlJXaEZVU3huUWtGQmEwSlVMSFZDUVVGMVFrTXNVVUZCVVN4cFJFRkZha1JUTEZkQlFXRldMSFZDUVVGMVFrTXNVVUZCVVN3MlEwRkZOVU5WTEZsQlFXTllMSFZDUVVGMVFrTXNVVUZCVVN4bFFVVTNRMWNzVDBGQlUxb3NkVUpCUVhWQ1F5eFJRVUZSTEhOQ1FVVjRRMWtzVDBGQlUySXNkVUpCUVhWQ1F5eFJRVUZSTEZWQlJYaERZU3hYUVVGaFpDeDFRa0ZCZFVKRExGRkJRVkVzWlVGRk5VTmpMRmxCUVdOaUxIZENRVUYzUWtRc1VVRkJVU3h6UTBGRk9VTmxMRmxCUVdOb1FpeDFRa0ZCZFVKRExGRkJRVkVzZFVKQlJUZERaMElzZFVKQlFYbENha0lzZFVKQlFYVkNReXhSUVVGUkxHdERRVWw0UkdsQ0xGRkJRVlVzUTBGRFdrTXNUMEZCVVN4RFFVRkRMRmxCUVdFc1owSkJRM1JDUXl4TlFVRlBMRU5CUVVNc1lVRkJZeXhuUWtGSmVFSXNVMEZCVTBNc2NVSkJRWEZDUXl4SFFVTTFRa0VzUlVGQlMwTXNZVUZIVUN4VFFVRlRReXhyUWtGQmEwSkRMRVZCUVZkRExFZEJRM0JETEVsQlFVbERMRVZCUVZGRUxFVkJRVXNzVlVGQlZ5eEZRVUZKVml4WlFVRlpXQ3hUUVVGVGIwSXNTVUZEYWtSSExFVkJRVlZXTEZGQlFWRlBMRWRCUTNSQ0xFOUJRVTlGTEVkQlFWRXNSVUZCU1dwQ0xGZEJRVmRNTEZWQlFWTXNSVUZCU1U4c1QwRkJUMUFzVTBGQlUzRkNMRVZCUVUxRkxFVkJRVkVzU1VGQlN5eExRVUZOTEVWQlFVbHNRaXhYUVVGWFRDeFZRVUZUTEVWQlFVbFBMRTlCUVU5UUxGTkJRVk54UWl4RlFVRk5SU3hGUVVGUkxFbEJRVXNzU1VGSGNrb3NTVUZCU1VNc2FVSkJRV3RDZGtJc1owSkJRV3RDTEVsQlFXOUNVeXhaUVVGWlpTeFJRVUZWTEZkQlFWbDRRaXhuUWtGQlowSlRMRmxCUVZsblFpeFRRVUZYTEdGQlFXTjZRaXhuUWtGQlowSlRMRmxCUVZscFFpeFZRVUZaTEdGQlFXTXhRaXhuUWtGQlowSlRMRmxCUVZsclFpeFRRVUZYTEdOQlFXVXpRaXhwUWtGRE0xQTBRaXhWUVVGWkxFTkJTV1JETEVkQlFVbHlRaXhYUVVGWFZDeFJRVUZSSzBJc1MwRkxka0pETEdGQlFXTjJRaXhYUVVGWFZDeFJRVUZSSzBJc1MwRkxha05GTEdOQlFXVjRRaXhYUVVGWFZDeFJRVUZSSzBJc1MwRk5iRU5ITEU5QlFWRjZRaXhYUVVGWFZDeFJRVUZSSzBJc1MwRlBNMEpKTEZGQlFWTXhRaXhYUVVGWFZDeFJRVUZSYjBNc1QwRkxOVUpETEZGQlFWTTFRaXhYUVVGWFZDeFJRVUZSYzBNc1MwRkxOVUpETEZkQlFWazVRaXhYUVVGWFZDeFJRVUZSYzBNc1MwRkxMMEpGTEZWQlFWY3ZRaXhYUVVGWFZDeFJRVUZSYzBNc1MwRkxPVUpITEU5QlFWRm9ReXhYUVVGWFZDeFJRVUZSYzBNc1MwRkxNMEpKTEZWQlFWZHFReXhYUVVGWFZDeFJRVUZSYzBNc1MwRkxPVUpMTEZOQlFWVnNReXhYUVVGWFZDeFJRVUZSYzBNc1MwRlROMEpzUWl4VlFVRlhXQ3hYUVVGWFZDeFJRVUZSTkVNc1ZVRkJWU3hEUVVGRGJrTXNWMEZCVjFRc1VVRkJVVFpETEUxQlFVMHNRMEZCUXl4VFFVRlZMRlZCUVZkd1F5eFhRVUZYVkN4UlFVRlJjME1zVDBGVE0wZHVRaXhyUWtGQmJVSldMRmRCUVZkVUxGRkJRVkZ6UXl4TFFVdDBRMUVzUzBGQlRYSkRMRmRCUVZkVUxGRkJRVkVyUXl4UlFVVjJRa01zWVVGQlpTeERRVU5xUW14Q0xFbEJRVWtzUlVGRFNrc3NVVUZCVXl4SlFVTlVTQ3hqUVVGakxFVkJRMlJETEdWQlFXVXNSVUZEWmtNc1VVRkJVU3hGUVVOU1pDeFZRVUZYTEZOQlExaEVMR3RDUVVGdFFrRXNiVUpCUjJwQ09FSXNVMEZGU2l4VFFVRlZReXhIUVVkU0xGTkJRVk5FTEZkQlIxQXNTVUZHUVN4SlFVRkpSU3hGUVVWTFF5eEZRVUZQUXl4VlFVRlZReXhQUVVGUlF5eEZRVUZQTEVsQlFVbERMRTFCUVUxS0xFZEJRVTlMTEVWQlFVOHNSVUZCUjBFc1JVRkJUMHdzUlVGQlRVc3NTVUZETDBWR0xFVkJRVXRGTEVkQlFWRktMRlZCUVZWSkxFZEJPRUo2UWl4UFFUTkNRVTRzUlVGQlVVUXNSVUZCYVVKUkxFdEJRVXRETEUxQlFVMVVMRVZCUVd0Q0xFTkJRVU5WTEUxQlFVMURMRTlCUVU5T0xFdEJRVlZMTEUxQlJYaEZSU3haUVVGakxGTkJRVlY2UXl4SFFVTTFRa0VzUlVGQlN6QkRMRTFCUVUxYUxFVkJRVTFoTEdkQ1FVRnJRaXhMUVVkeVEySXNSVUZCVFdNc1pVRkJhVUlzVTBGQlZUVkRMRWRCUXk5Q0xFbEJRVWxFTEVWQlFWa3JRaXhGUVVGTllTeGxRVVYwUWpORExFVkJRVXN3UXl4TlFVRk5NME1zUjBGQllTdENMRVZCUVUxbExIbENRVUY1UWpkRExFVkJRVTFFTEVsQlJ5OUVLMElzUlVGQlRXZENMR05CUVdkQ0xGTkJRVlU1UXl4SFFVTTVRa0VzUlVGQlN6QkRMRTFCUVUxYUxFVkJRVTFoTEdkQ1FVRnJRaXhOUVVkeVEySXNSVUZCVFdsQ0xGZEJRV0VzVTBGQlZTOURMRWRCUXpOQ0xFbEJRVWxFTEVWQlFWa3JRaXhGUVVGTllTeGxRVVYwUWpORExFVkJRVXN3UXl4TlFVRk5NME1zUjBGQllTdENMRVZCUVUxclFpeE5RVUZOYkVRc2EwSkJRV3RDUXl4RlFVRlhReXhIUVVGUkxFdEJRM3BGVEN4eFFrRkJjVUpMTEVsQlIzWkNPRUlzUlVGQlRXMUNMR05CUVdkQ0xGTkJRVlZxUkN4SFFVTTVRa0VzUlVGQlN6QkRMRTFCUVUxYUxFVkJRVTFoTEdkQ1FVRnJRaXhMUVVjNVFtSXNSMEZ3UTFRc1JVRkJTUzlETEdkQ1FVRm5Ra29zVTBGQlUybEVMRk5CUVZWRExFZEJkVU4yUXl4SlFVRkpjVUlzUlVGQlUzUkNMRk5CUVZOMVFpeFZRVGhEZEVJc1QwRTFRMEZFTEVWQlFVOVFMR0ZCUVdVc1UwRkJVMEVzWlVGRE4wSXNUVUZCZFVNc2JVSkJRWHBDU2l4TFFVRkxVeXhOUVVGTmFrUXNWVUZCTWtKM1F5eExRVUZMVXl4TlFVRk5ha1FzV1VGQlkzZERMRXRCUVV0VExFMUJRVTFxUkN4WFFVa3hSbTFFTEVWQlFVOU1MSGxDUVVFeVFpeFRRVUZUUVN4NVFrRkJlVUkzUXl4RlFVRk5SQ3hIUVVONFJTeFBRVUZQUXl4RlFVRkxMRlZCUVZjc1JVRkJTVllzV1VGQldWZ3NVMEZCVTI5Q0xFbEJRV01zVFVGTGFFVnRSQ3hGUVVGUFJTeFBRVUZUTEZOQlFWTkJMRk5CUTNaQ0xFbEJRVWxETEVWQlFWTmtMRXRCUlZSbExFVkJRV05tTEV0QlFVdFRMRTFCUTI1Q2FFTXNSVUZCVlhORExFVkJRVmwwUXl4UlFVTjBRa1VzUlVGQllXOURMRVZCUVZsd1F5eFhRVU42UWtNc1JVRkJXVzFETEVWQlFWbHVReXhWUVVONFFrTXNSVUZCVTJ0RExFVkJRVmxzUXl4UFFVTnlRa01zUlVGQldXbERMRVZCUVZscVF5eFZRVU40UW10RExFVkJRVmxFTEVWQlFWbERMRlZCUTNoQ1F5eEZRVUZYUml4RlFVRlpSU3hUUVVOMlFsSXNSMEZCVVN4RlFVRkpiRVVzSzBKQlFTdENTQ3hUUVVGVE1rVXNSVUZCWVN4RFFVRkRMRlZCUVZjc1lVRkJZeXhaUVVGaExGTkJRVlVzV1VGQllTeFpRVUZoTEc5Q1FVTjZTVTRzUlVGQlRXcEVMR2xDUVVOT2FVUXNSVUZCVFd4RUxHdENRVU5pTEVsQlFVa3lReXhIUVVGakxFVkJRVWxzUkN4MVFrRkJkVUphTEZOQlFWTTBSQ3hMUVVGTFJTeFpRVUZoZWtJc1IwRkRjRVUwUWl4SFFVRnBRaXhGUVVGSmNrUXNkVUpCUVhWQ1dpeFRRVUZUTkVRc1MwRkJTMHNzWlVGQlowSXhRaXhIUVVNeFJUUkNMRWRCUVdkQ0xFVkJRVWwyUkN4MVFrRkJkVUphTEZOQlFWTTBSQ3hMUVVGTFR5eGpRVUZsTTBJc1IwRkRlRVUwUWl4SFFVRmhMRVZCUVVsNFJDeDFRa0ZCZFVKYUxGTkJRVk0wUkN4TFFVRkxVU3hYUVVGWk0wSXNSMEZEYkVVMlFpeEhRVUZuUWl4RlFVRkpNVVFzZFVKQlFYVkNXaXhUUVVGVE5FUXNTMEZCUzFVc1kwRkJaVFZDTEVkQlF6VkZMRTlCUVU5c1F5eFBRVUZQVWl4UlFVRlJPRVVzWTBGQlkzQkZMRmxCUVZsV0xGTkJRVk1zUlVGQlNVVXNWVUZCVlVZc1UwRkJVeXhIUVVGSmNVVXNSVUZCVHl4RFFVTjZSbFVzWjBKQlFXbENWaXhGUVVGTmRrSXNTMEZCVDNWQ0xFVkJRVTEyUXl4SFFVRkxMRXRCUTNwRFR5eFJRVUZUZVVJc1JVRkRWSFpDTEZkQlFWa3dRaXhGUVVOYWVrSXNWVUZCVnpKQ0xFVkJRMWd4UWl4UFFVRlJNa0lzUlVGRFVqRkNMRlZCUVZjMFFpeEpRVU5VTEZOQlFWVlZMRVZCUVU5RExFZEJRMjVDTEU5QlFVOTZSU3hQUVVGUFVpeFJRVUZSYTBZc1lVRkJZVXdzUjBGQlZTeEZRVUZKTTBVc1ZVRkJWVVlzVTBGQlV5eEhRVUZKYVVZc1JVRkJXU3hEUVVOc1Jrd3NWMEZCVnl4RlFVRkpkRVVzV1VGQldVNHNVMEZCVXpSRkxFVkJRVmRETEVWQlFWTlNMRTFCUVUxUExGVkJRVmR3UkN4bFFVRmxkMFFzUjBGQmEwTXNWVUZCTVVKT0xFVkJRVTlXTEdkQ1FVRTRRaXhsUVV0d1NXWXNVMEYwUmxRc1EwRjFSa1Y2UXl4UFFVRlBVaXhSUVVGUmJVWXNWMEZGYWtKc1F5eFRRVUZUY0VJc1ZVRkJXVUVzVlVGRGNrSnZRaXhUUVVGVFJDeGhRVUZsUVN4aFFVTjRRaXhKUVVGSmIwTXNVMEZCVjI1RExGTkJRMlp1UkN4UlFVRlJSU3hSUVVGVmIwWXNVMEZEYkVKRExFOUJRVTkyUml4UlFVRlZRU3hSUVVGcFFpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzFpYjI5MGMzUnlZWEF2YkdsaUwwTnZiR3hoY0hObExtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9leHRlbmRzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSksX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9jbGFzc25hbWVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpLF9yZWFjdD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSksX3Byb3BUeXBlcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKSxfd2FybmluZz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ3YXJuaW5nXCIpKSxfYm9vdHN0cmFwVXRpbHM9cmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIikscHJvcFR5cGVzPXtodG1sRm9yOl9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsc3JPbmx5Ol9wcm9wVHlwZXMuZGVmYXVsdC5ib29sfSxkZWZhdWx0UHJvcHM9e3NyT25seTohMX0sY29udGV4dFR5cGVzPXskYnNfZm9ybUdyb3VwOl9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3R9LENvbnRyb2xMYWJlbD1mdW5jdGlvbihlKXtmdW5jdGlvbiBDb250cm9sTGFiZWwoKXtyZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9cmV0dXJuKDAsX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKENvbnRyb2xMYWJlbCxlKSxDb250cm9sTGFiZWwucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXt2YXIgZT10aGlzLmNvbnRleHQuJGJzX2Zvcm1Hcm91cCxyPWUmJmUuY29udHJvbElkLHQ9dGhpcy5wcm9wcyxvPXQuaHRtbEZvcixzPXZvaWQgMD09PW8/cjpvLGw9dC5zck9ubHksYT10LmNsYXNzTmFtZSxuPSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KSh0LFtcImh0bWxGb3JcIixcInNyT25seVwiLFwiY2xhc3NOYW1lXCJdKSxpPSgwLF9ib290c3RyYXBVdGlscy5zcGxpdEJzUHJvcHMpKG4pLHA9aVswXSx1PWlbMV07XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKDAsX3dhcm5pbmcuZGVmYXVsdCkobnVsbD09cnx8cz09PXIsXCJgY29udHJvbElkYCBpcyBpZ25vcmVkIG9uIGA8Q29udHJvbExhYmVsPmAgd2hlbiBgaHRtbEZvcmAgaXMgc3BlY2lmaWVkLlwiKTt2YXIgXz0oMCxfZXh0ZW5kczIuZGVmYXVsdCkoe30sKDAsX2Jvb3RzdHJhcFV0aWxzLmdldENsYXNzU2V0KShwKSx7XCJzci1vbmx5XCI6bH0pO3JldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIiwoMCxfZXh0ZW5kczIuZGVmYXVsdCkoe30sdSx7aHRtbEZvcjpzLGNsYXNzTmFtZTooMCxfY2xhc3NuYW1lcy5kZWZhdWx0KShhLF8pfSkpfSxDb250cm9sTGFiZWx9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7Q29udHJvbExhYmVsLnByb3BUeXBlcz1wcm9wVHlwZXMsQ29udHJvbExhYmVsLmRlZmF1bHRQcm9wcz1kZWZhdWx0UHJvcHMsQ29udHJvbExhYmVsLmNvbnRleHRUeXBlcz1jb250ZXh0VHlwZXM7dmFyIF9kZWZhdWx0PSgwLF9ib290c3RyYXBVdGlscy5ic0NsYXNzKShcImNvbnRyb2wtbGFiZWxcIixDb250cm9sTGFiZWwpO2V4cG9ydHMuZGVmYXVsdD1fZGVmYXVsdCxtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa052Ym5SeWIyeE1ZV0psYkM1cWN5SmRMQ0p1WVcxbGN5STZXeUpmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MElpd2ljbVZ4ZFdseVpTSXNJbVY0Y0c5eWRITWlMQ0pmWDJWelRXOWtkV3hsSWl3aVpHVm1ZWFZzZENJc0lsOWxlSFJsYm1Sek1pSXNJbDl2WW1wbFkzUlhhWFJvYjNWMFVISnZjR1Z5ZEdsbGMweHZiM05sTWlJc0lsOXBibWhsY21sMGMweHZiM05sTWlJc0lsOWpiR0Z6YzI1aGJXVnpJaXdpWDNKbFlXTjBJaXdpWDNCeWIzQlVlWEJsY3lJc0lsOTNZWEp1YVc1bklpd2lYMkp2YjNSemRISmhjRlYwYVd4eklpd2ljSEp2Y0ZSNWNHVnpJaXdpYUhSdGJFWnZjaUlzSW5OMGNtbHVaeUlzSW5OeVQyNXNlU0lzSW1KdmIyd2lMQ0prWldaaGRXeDBVSEp2Y0hNaUxDSmpiMjUwWlhoMFZIbHdaWE1pTENJa1luTmZabTl5YlVkeWIzVndJaXdpYjJKcVpXTjBJaXdpUTI5dWRISnZiRXhoWW1Wc0lpd2lYMUpsWVdOMEpFTnZiWEJ2Ym1WdWRDSXNJbUZ3Y0d4NUlpd2lkR2hwY3lJc0ltRnlaM1Z0Wlc1MGN5SXNJbkJ5YjNSdmRIbHdaU0lzSW5KbGJtUmxjaUlzSW1admNtMUhjbTkxY0NJc0ltTnZiblJsZUhRaUxDSmpiMjUwY205c1NXUWlMQ0pmZEdocGN5UndjbTl3Y3lJc0luQnliM0J6SWl3aVgzUm9hWE1rY0hKdmNITWthSFJ0YkVadmNpSXNJbU5zWVhOelRtRnRaU0lzSWw5emNHeHBkRUp6VUhKdmNITWlMQ0p6Y0d4cGRFSnpVSEp2Y0hNaUxDSmljMUJ5YjNCeklpd2laV3hsYldWdWRGQnliM0J6SWl3aWNISnZZMlZ6Y3lJc0ltVnVkaUlzSWs1UFJFVmZSVTVXSWl3aVkyeGhjM05sY3lJc0ltZGxkRU5zWVhOelUyVjBJaXdpYzNJdGIyNXNlU0lzSW1OeVpXRjBaVVZzWlcxbGJuUWlMQ0pEYjIxd2IyNWxiblFpTENKZlpHVm1ZWFZzZENJc0ltSnpRMnhoYzNNaUxDSnRiMlIxYkdVaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJSVUVzU1VGQlNVRXNkVUpCUVhsQ1F5eFJRVUZSTEhkRVFVVnlRME1zVVVGQlVVTXNXVUZCWVN4RlFVTnlRa1FzVVVGQlVVVXNZVUZCVlN4RlFVVnNRaXhKUVVGSlF5eFZRVUZaVEN4MVFrRkJkVUpETEZGQlFWRXNNa05CUlRORFN5d3JRa0ZCYVVOT0xIVkNRVUYxUWtNc1VVRkJVU3huUlVGRmFFVk5MR2RDUVVGclFsQXNkVUpCUVhWQ1F5eFJRVUZSTEdsRVFVVnFSRThzV1VGQlkxSXNkVUpCUVhWQ1F5eFJRVUZSTEdWQlJUZERVU3hQUVVGVFZDeDFRa0ZCZFVKRExGRkJRVkVzVlVGRmVFTlRMRmRCUVdGV0xIVkNRVUYxUWtNc1VVRkJVU3hsUVVVMVExVXNVMEZCVjFnc2RVSkJRWFZDUXl4UlFVRlJMRmxCUlRGRFZ5eG5Ra0ZCYTBKWUxGRkJRVkVzTUVKQlJURkNXU3hWUVVGWkxFTkJTV1JETEZGQlFWTktMRmRCUVZkT0xGRkJRVkZYTEU5QlF6VkNReXhQUVVGUlRpeFhRVUZYVGl4UlFVRlJZU3hOUVVWNlFrTXNZVUZCWlN4RFFVTnFRa1lzVVVGQlVTeEhRVVZPUnl4aFFVRmxMRU5CUTJwQ1F5eGpRVUZsVml4WFFVRlhUaXhSUVVGUmFVSXNVVUZIYUVORExHRkJSVW9zVTBGQlZVTXNSMEZIVWl4VFFVRlRSQ3hsUVVOUUxFOUJRVTlETEVWQlFXbENReXhOUVVGTlF5eExRVUZOUXl4WlFVRmpSQ3hMUVRaQ2NFUXNUMEZvUTBFc1JVRkJTV3hDTEdkQ1FVRm5Ra2dzVTBGQlUydENMR0ZCUVdORExFZEJUVGxDUkN4aFFVRmhTeXhWUVVWdVFrTXNUMEZCVXl4VFFVRlRRU3hUUVVOMlFpeEpRVUZKUXl4RlFVRlpTaXhMUVVGTFN5eFJRVUZSVml4alFVTjZRbGNzUlVGQldVWXNSMEZCWVVFc1JVRkJWVVVzVlVGRGJrTkRMRVZCUVdOUUxFdEJRVXRSTEUxQlEyNUNReXhGUVVGelFrWXNSVUZCV1d4Q0xGRkJRMnhEUVN4UFFVRnJReXhKUVVGNFFtOUNMRVZCUVdsRFNDeEZRVUZaUnl4RlFVTjJSR3hDTEVWQlFWTm5RaXhGUVVGWmFFSXNUMEZEY2tKdFFpeEZRVUZaU0N4RlFVRlpSeXhWUVVONFFrWXNSMEZCVVN4RlFVRkpNMElzSzBKQlFTdENSaXhUUVVGVE5FSXNSVUZCWVN4RFFVRkRMRlZCUVZjc1UwRkJWU3hqUVVWMlJra3NSMEZCWjBJc1JVRkJTWGhDTEdkQ1FVRm5RbmxDTEdOQlFXTktMRWRCUTJ4RVN5eEZRVUZWUml4RlFVRmpMRWRCUTNoQ1J5eEZRVUZsU0N4RlFVRmpMRWRCUlZJc1pVRkJla0pKTEZGQlFWRkRMRWxCUVVsRExGZEJRVFJDTEVWQlFVa3ZRaXhUUVVGVFVDeFRRVUZ6UWl4TlFVRmlNa0lzUjBGQmNVSnFRaXhKUVVGWmFVSXNSVUZCVnl3eVJVRkRNVWNzU1VGQlNWa3NSMEZCVlN4RlFVRkpkRU1zVlVGQlZVUXNVMEZCVXl4SlFVRkpMRVZCUVVsUkxHZENRVUZuUW1kRExHRkJRV0ZPTEVkQlFWVXNRMEZEYkVaUExGVkJRVmMzUWl4SlFVVmlMRTlCUVU5UUxFOUJRVTlNTEZGQlFWRXdReXhqUVVGakxGTkJRVk1zUlVGQlNYcERMRlZCUVZWRUxGTkJRVk1zUjBGQlNXMURMRVZCUVdNc1EwRkRjRVo2UWl4UlFVRlRRU3hGUVVOVWNVSXNWMEZCVnl4RlFVRkpNMElzV1VGQldVb3NVMEZCVXl0Q0xFVkJRVmRSTEU5QlNUVkRja0lzWVVGcVExUXNRMEZyUTBWaUxFOUJRVTlNTEZGQlFWRXlReXhYUVVWcVFucENMR0ZCUVdGVUxGVkJRVmxCTEZWQlEzcENVeXhoUVVGaFNpeGhRVUZsUVN4aFFVTTFRa2tzWVVGQllVZ3NZVUZCWlVFc1lVRkZOVUlzU1VGQlNUWkNMRlZCUVZjc1JVRkJTWEJETEdkQ1FVRm5RbkZETEZOQlFWTXNaMEpCUVdsQ00wSXNZMEZGTjBSd1FpeFJRVUZSUlN4UlFVRlZORU1zVTBGRGJFSkZMRTlCUVU5b1JDeFJRVUZWUVN4UlFVRnBRaUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEMxaWIyOTBjM1J5WVhBdmJHbGlMME52Ym5SeWIyeE1ZV0psYkM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpLF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9leHRlbmRzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSksX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLF9jbGFzc25hbWVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpLF9hY3RpdmVFbGVtZW50PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRvbS1oZWxwZXJzL2FjdGl2ZUVsZW1lbnRcIikpLF9jb250YWlucz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkb20taGVscGVycy9xdWVyeS9jb250YWluc1wiKSksX2tleWNvZGU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwia2V5Y29kZVwiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSksX3Byb3BUeXBlcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKSxfcmVhY3REb209X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtZG9tXCIpKSxfYWxsPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXMtZXh0cmEvbGliL2FsbFwiKSksX2VsZW1lbnRUeXBlPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlXCIpKSxfaXNSZXF1aXJlZEZvckExMXk9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlcy1leHRyYS9saWIvaXNSZXF1aXJlZEZvckExMXlcIikpLF91bmNvbnRyb2xsYWJsZT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ1bmNvbnRyb2xsYWJsZVwiKSksX3dhcm5pbmc9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSksX0J1dHRvbkdyb3VwPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQnV0dG9uR3JvdXBcIikpLF9Ecm9wZG93bk1lbnU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Ecm9wZG93bk1lbnVcIikpLF9Ecm9wZG93blRvZ2dsZT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0Ryb3Bkb3duVG9nZ2xlXCIpKSxfYm9vdHN0cmFwVXRpbHM9cmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIiksX2NyZWF0ZUNoYWluZWRGdW5jdGlvbj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZUNoYWluZWRGdW5jdGlvblwiKSksX1Byb3BUeXBlcz1yZXF1aXJlKFwiLi91dGlscy9Qcm9wVHlwZXNcIiksX1ZhbGlkQ29tcG9uZW50Q2hpbGRyZW49X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9WYWxpZENvbXBvbmVudENoaWxkcmVuXCIpKSxUT0dHTEVfUk9MRT1fRHJvcGRvd25Ub2dnbGUuZGVmYXVsdC5kZWZhdWx0UHJvcHMuYnNSb2xlLE1FTlVfUk9MRT1fRHJvcGRvd25NZW51LmRlZmF1bHQuZGVmYXVsdFByb3BzLmJzUm9sZSxwcm9wVHlwZXM9e2Ryb3B1cDpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxpZDooMCxfaXNSZXF1aXJlZEZvckExMXkuZGVmYXVsdCkoX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyXSkpLGNvbXBvbmVudENsYXNzOl9lbGVtZW50VHlwZS5kZWZhdWx0LGNoaWxkcmVuOigwLF9hbGwuZGVmYXVsdCkoKDAsX1Byb3BUeXBlcy5yZXF1aXJlZFJvbGVzKShUT0dHTEVfUk9MRSxNRU5VX1JPTEUpLCgwLF9Qcm9wVHlwZXMuZXhjbHVzaXZlUm9sZXMpKE1FTlVfUk9MRSkpLGRpc2FibGVkOl9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLHB1bGxSaWdodDpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxvcGVuOl9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLGRlZmF1bHRPcGVuOl9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLG9uVG9nZ2xlOl9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLG9uU2VsZWN0Ol9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLHJvbGU6X3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxyb290Q2xvc2VFdmVudDpfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoW1wiY2xpY2tcIixcIm1vdXNlZG93blwiXSksb25Nb3VzZUVudGVyOl9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLG9uTW91c2VMZWF2ZTpfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY30sZGVmYXVsdFByb3BzPXtjb21wb25lbnRDbGFzczpfQnV0dG9uR3JvdXAuZGVmYXVsdH0sRHJvcGRvd249ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gRHJvcGRvd24obyx0KXt2YXIgcjtyZXR1cm4ocj1lLmNhbGwodGhpcyxvLHQpfHx0aGlzKS5oYW5kbGVDbGljaz1yLmhhbmRsZUNsaWNrLmJpbmQoKDAsX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoKDAsX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkocikpKSxyLmhhbmRsZUtleURvd249ci5oYW5kbGVLZXlEb3duLmJpbmQoKDAsX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoKDAsX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkocikpKSxyLmhhbmRsZUNsb3NlPXIuaGFuZGxlQ2xvc2UuYmluZCgoMCxfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KSgoMCxfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShyKSkpLHIuX2ZvY3VzSW5Ecm9wZG93bj0hMSxyLmxhc3RPcGVuRXZlbnRUeXBlPW51bGwscn0oMCxfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoRHJvcGRvd24sZSk7dmFyIG89RHJvcGRvd24ucHJvdG90eXBlO3JldHVybiBvLmNvbXBvbmVudERpZE1vdW50PWZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCl7dGhpcy5mb2N1c05leHRPbk9wZW4oKX0sby5jb21wb25lbnRXaWxsVXBkYXRlPWZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVcGRhdGUoZSl7IWUub3BlbiYmdGhpcy5wcm9wcy5vcGVuJiYodGhpcy5fZm9jdXNJbkRyb3Bkb3duPSgwLF9jb250YWlucy5kZWZhdWx0KShfcmVhY3REb20uZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzLm1lbnUpLCgwLF9hY3RpdmVFbGVtZW50LmRlZmF1bHQpKGRvY3VtZW50KSkpfSxvLmNvbXBvbmVudERpZFVwZGF0ZT1mdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoZSl7dmFyIG89dGhpcy5wcm9wcy5vcGVuLHQ9ZS5vcGVuO28mJiF0JiZ0aGlzLmZvY3VzTmV4dE9uT3BlbigpLCFvJiZ0JiZ0aGlzLl9mb2N1c0luRHJvcGRvd24mJih0aGlzLl9mb2N1c0luRHJvcGRvd249ITEsdGhpcy5mb2N1cygpKX0sby5mb2N1cz1mdW5jdGlvbiBmb2N1cygpe3ZhciBlPV9yZWFjdERvbS5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMudG9nZ2xlKTtlJiZlLmZvY3VzJiZlLmZvY3VzKCl9LG8uZm9jdXNOZXh0T25PcGVuPWZ1bmN0aW9uIGZvY3VzTmV4dE9uT3Blbigpe3ZhciBlPXRoaXMubWVudTtlJiZlLmZvY3VzTmV4dCYmKFwia2V5ZG93blwiIT09dGhpcy5sYXN0T3BlbkV2ZW50VHlwZSYmXCJtZW51aXRlbVwiIT09dGhpcy5wcm9wcy5yb2xlfHxlLmZvY3VzTmV4dCgpKX0sby5oYW5kbGVDbGljaz1mdW5jdGlvbiBoYW5kbGVDbGljayhlKXt0aGlzLnByb3BzLmRpc2FibGVkfHx0aGlzLnRvZ2dsZU9wZW4oZSx7c291cmNlOlwiY2xpY2tcIn0pfSxvLmhhbmRsZUNsb3NlPWZ1bmN0aW9uIGhhbmRsZUNsb3NlKGUsbyl7dGhpcy5wcm9wcy5vcGVuJiZ0aGlzLnRvZ2dsZU9wZW4oZSxvKX0sby5oYW5kbGVLZXlEb3duPWZ1bmN0aW9uIGhhbmRsZUtleURvd24oZSl7aWYoIXRoaXMucHJvcHMuZGlzYWJsZWQpc3dpdGNoKGUua2V5Q29kZSl7Y2FzZSBfa2V5Y29kZS5kZWZhdWx0LmNvZGVzLmRvd246dGhpcy5wcm9wcy5vcGVuP3RoaXMubWVudS5mb2N1c05leHQmJnRoaXMubWVudS5mb2N1c05leHQoKTp0aGlzLnRvZ2dsZU9wZW4oZSx7c291cmNlOlwia2V5ZG93blwifSksZS5wcmV2ZW50RGVmYXVsdCgpO2JyZWFrO2Nhc2UgX2tleWNvZGUuZGVmYXVsdC5jb2Rlcy5lc2M6Y2FzZSBfa2V5Y29kZS5kZWZhdWx0LmNvZGVzLnRhYjp0aGlzLmhhbmRsZUNsb3NlKGUse3NvdXJjZTpcImtleWRvd25cIn0pfX0sby50b2dnbGVPcGVuPWZ1bmN0aW9uIHRvZ2dsZU9wZW4oZSxvKXt2YXIgdD0hdGhpcy5wcm9wcy5vcGVuO3QmJih0aGlzLmxhc3RPcGVuRXZlbnRUeXBlPW8uc291cmNlKSx0aGlzLnByb3BzLm9uVG9nZ2xlJiZ0aGlzLnByb3BzLm9uVG9nZ2xlKHQsZSxvKX0sby5yZW5kZXJNZW51PWZ1bmN0aW9uIHJlbmRlck1lbnUoZSxvKXt2YXIgdD10aGlzLHI9by5pZCxuPW8ub25TZWxlY3QsbD1vLnJvb3RDbG9zZUV2ZW50LHM9KDAsX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKG8sW1wiaWRcIixcIm9uU2VsZWN0XCIsXCJyb290Q2xvc2VFdmVudFwiXSksaT1mdW5jdGlvbiByZWYoZSl7dC5tZW51PWV9O3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlLnJlZj9cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoMCxfd2FybmluZy5kZWZhdWx0KSghMSxcIlN0cmluZyByZWZzIGFyZSBub3Qgc3VwcG9ydGVkIG9uIGA8RHJvcGRvd24uTWVudT5gIGNvbXBvbmVudHMuIFRvIGFwcGx5IGEgcmVmIHRvIHRoZSBjb21wb25lbnQgdXNlIHRoZSBjYWxsYmFjayBzaWduYXR1cmU6XFxuXFxuIGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvbW9yZS1hYm91dC1yZWZzLmh0bWwjdGhlLXJlZi1jYWxsYmFjay1hdHRyaWJ1dGVcIik6aT0oMCxfY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uLmRlZmF1bHQpKGUucmVmLGkpLCgwLF9yZWFjdC5jbG9uZUVsZW1lbnQpKGUsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LHMse3JlZjppLGxhYmVsbGVkQnk6cixic0NsYXNzOigwLF9ib290c3RyYXBVdGlscy5wcmVmaXgpKHMsXCJtZW51XCIpLG9uQ2xvc2U6KDAsX2NyZWF0ZUNoYWluZWRGdW5jdGlvbi5kZWZhdWx0KShlLnByb3BzLm9uQ2xvc2UsdGhpcy5oYW5kbGVDbG9zZSksb25TZWxlY3Q6KDAsX2NyZWF0ZUNoYWluZWRGdW5jdGlvbi5kZWZhdWx0KShlLnByb3BzLm9uU2VsZWN0LG4sZnVuY3Rpb24oZSxvKXtyZXR1cm4gdC5oYW5kbGVDbG9zZShvLHtzb3VyY2U6XCJzZWxlY3RcIn0pfSkscm9vdENsb3NlRXZlbnQ6bH0pKX0sby5yZW5kZXJUb2dnbGU9ZnVuY3Rpb24gcmVuZGVyVG9nZ2xlKGUsbyl7dmFyIHQ9dGhpcyxyPWZ1bmN0aW9uIHJlZihlKXt0LnRvZ2dsZT1lfTtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZS5yZWY/XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKDAsX3dhcm5pbmcuZGVmYXVsdCkoITEsXCJTdHJpbmcgcmVmcyBhcmUgbm90IHN1cHBvcnRlZCBvbiBgPERyb3Bkb3duLlRvZ2dsZT5gIGNvbXBvbmVudHMuIFRvIGFwcGx5IGEgcmVmIHRvIHRoZSBjb21wb25lbnQgdXNlIHRoZSBjYWxsYmFjayBzaWduYXR1cmU6XFxuXFxuIGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvbW9yZS1hYm91dC1yZWZzLmh0bWwjdGhlLXJlZi1jYWxsYmFjay1hdHRyaWJ1dGVcIik6cj0oMCxfY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uLmRlZmF1bHQpKGUucmVmLHIpLCgwLF9yZWFjdC5jbG9uZUVsZW1lbnQpKGUsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LG8se3JlZjpyLGJzQ2xhc3M6KDAsX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkobyxcInRvZ2dsZVwiKSxvbkNsaWNrOigwLF9jcmVhdGVDaGFpbmVkRnVuY3Rpb24uZGVmYXVsdCkoZS5wcm9wcy5vbkNsaWNrLHRoaXMuaGFuZGxlQ2xpY2spLG9uS2V5RG93bjooMCxfY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uLmRlZmF1bHQpKGUucHJvcHMub25LZXlEb3duLHRoaXMuaGFuZGxlS2V5RG93bil9KSl9LG8ucmVuZGVyPWZ1bmN0aW9uIHJlbmRlcigpe3ZhciBlLG89dGhpcyx0PXRoaXMucHJvcHMscj10LmNvbXBvbmVudENsYXNzLG49dC5pZCxsPXQuZHJvcHVwLHM9dC5kaXNhYmxlZCxpPXQucHVsbFJpZ2h0LHA9dC5vcGVuLHU9dC5vblNlbGVjdCxhPXQucm9sZSxkPXQuYnNDbGFzcyxjPXQuY2xhc3NOYW1lLGY9dC5yb290Q2xvc2VFdmVudCxfPXQuY2hpbGRyZW4saD0oMCxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkodCxbXCJjb21wb25lbnRDbGFzc1wiLFwiaWRcIixcImRyb3B1cFwiLFwiZGlzYWJsZWRcIixcInB1bGxSaWdodFwiLFwib3BlblwiLFwib25TZWxlY3RcIixcInJvbGVcIixcImJzQ2xhc3NcIixcImNsYXNzTmFtZVwiLFwicm9vdENsb3NlRXZlbnRcIixcImNoaWxkcmVuXCJdKTtkZWxldGUgaC5vblRvZ2dsZTt2YXIgYj0oKGU9e30pW2RdPSEwLGUub3Blbj1wLGUuZGlzYWJsZWQ9cyxlKTtyZXR1cm4gbCYmKGJbZF09ITEsYi5kcm9wdXA9ITApLF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQociwoMCxfZXh0ZW5kczIuZGVmYXVsdCkoe30saCx7Y2xhc3NOYW1lOigwLF9jbGFzc25hbWVzLmRlZmF1bHQpKGMsYil9KSxfVmFsaWRDb21wb25lbnRDaGlsZHJlbi5kZWZhdWx0Lm1hcChfLGZ1bmN0aW9uKGUpe3N3aXRjaChlLnByb3BzLmJzUm9sZSl7Y2FzZSBUT0dHTEVfUk9MRTpyZXR1cm4gby5yZW5kZXJUb2dnbGUoZSx7aWQ6bixkaXNhYmxlZDpzLG9wZW46cCxyb2xlOmEsYnNDbGFzczpkfSk7Y2FzZSBNRU5VX1JPTEU6cmV0dXJuIG8ucmVuZGVyTWVudShlLHtpZDpuLG9wZW46cCxwdWxsUmlnaHQ6aSxic0NsYXNzOmQsb25TZWxlY3Q6dSxyb290Q2xvc2VFdmVudDpmfSk7ZGVmYXVsdDpyZXR1cm4gZX19KSl9LERyb3Bkb3dufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO0Ryb3Bkb3duLnByb3BUeXBlcz1wcm9wVHlwZXMsRHJvcGRvd24uZGVmYXVsdFByb3BzPWRlZmF1bHRQcm9wcywoMCxfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoXCJkcm9wZG93blwiLERyb3Bkb3duKTt2YXIgVW5jb250cm9sbGVkRHJvcGRvd249KDAsX3VuY29udHJvbGxhYmxlLmRlZmF1bHQpKERyb3Bkb3duLHtvcGVuOlwib25Ub2dnbGVcIn0pO1VuY29udHJvbGxlZERyb3Bkb3duLlRvZ2dsZT1fRHJvcGRvd25Ub2dnbGUuZGVmYXVsdCxVbmNvbnRyb2xsZWREcm9wZG93bi5NZW51PV9Ecm9wZG93bk1lbnUuZGVmYXVsdDt2YXIgX2RlZmF1bHQ9VW5jb250cm9sbGVkRHJvcGRvd247ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrUnliM0JrYjNkdUxtcHpJbDBzSW01aGJXVnpJanBiSWw5cGJuUmxjbTl3VW1WeGRXbHlaVmRwYkdSallYSmtJaXdpY21WeGRXbHlaU0lzSWw5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUWlMQ0psZUhCdmNuUnpJaXdpWDE5bGMwMXZaSFZzWlNJc0ltUmxabUYxYkhRaUxDSmZaWGgwWlc1a2N6SWlMQ0pmYjJKcVpXTjBWMmwwYUc5MWRGQnliM0JsY25ScFpYTk1iMjl6WlRJaUxDSmZhVzVvWlhKcGRITk1iMjl6WlRJaUxDSmZZWE56WlhKMFZHaHBjMGx1YVhScFlXeHBlbVZrTWlJc0lsOWpiR0Z6YzI1aGJXVnpJaXdpWDJGamRHbDJaVVZzWlcxbGJuUWlMQ0pmWTI5dWRHRnBibk1pTENKZmEyVjVZMjlrWlNJc0lsOXlaV0ZqZENJc0lsOXdjbTl3Vkhsd1pYTWlMQ0pmY21WaFkzUkViMjBpTENKZllXeHNJaXdpWDJWc1pXMWxiblJVZVhCbElpd2lYMmx6VW1WeGRXbHlaV1JHYjNKQk1URjVJaXdpWDNWdVkyOXVkSEp2Ykd4aFlteGxJaXdpWDNkaGNtNXBibWNpTENKZlFuVjBkRzl1UjNKdmRYQWlMQ0pmUkhKdmNHUnZkMjVOWlc1MUlpd2lYMFJ5YjNCa2IzZHVWRzluWjJ4bElpd2lYMkp2YjNSemRISmhjRlYwYVd4eklpd2lYMk55WldGMFpVTm9ZV2x1WldSR2RXNWpkR2x2YmlJc0lsOVFjbTl3Vkhsd1pYTWlMQ0pmVm1Gc2FXUkRiMjF3YjI1bGJuUkRhR2xzWkhKbGJpSXNJbFJQUjBkTVJWOVNUMHhGSWl3aVpHVm1ZWFZzZEZCeWIzQnpJaXdpWW5OU2IyeGxJaXdpVFVWT1ZWOVNUMHhGSWl3aWNISnZjRlI1Y0dWeklpd2laSEp2Y0hWd0lpd2lZbTl2YkNJc0ltbGtJaXdpYjI1bFQyWlVlWEJsSWl3aWMzUnlhVzVuSWl3aWJuVnRZbVZ5SWl3aVkyOXRjRzl1Wlc1MFEyeGhjM01pTENKamFHbHNaSEpsYmlJc0luSmxjWFZwY21Wa1VtOXNaWE1pTENKbGVHTnNkWE5wZG1WU2IyeGxjeUlzSW1ScGMyRmliR1ZrSWl3aWNIVnNiRkpwWjJoMElpd2liM0JsYmlJc0ltUmxabUYxYkhSUGNHVnVJaXdpYjI1VWIyZG5iR1VpTENKbWRXNWpJaXdpYjI1VFpXeGxZM1FpTENKeWIyeGxJaXdpY205dmRFTnNiM05sUlhabGJuUWlMQ0p2Ym1WUFppSXNJbTl1VFc5MWMyVkZiblJsY2lJc0ltOXVUVzkxYzJWTVpXRjJaU0lzSWtSeWIzQmtiM2R1SWl3aVgxSmxZV04wSkVOdmJYQnZibVZ1ZENJc0luQnliM0J6SWl3aVkyOXVkR1Y0ZENJc0lsOTBhR2x6SWl3aVkyRnNiQ0lzSW5Sb2FYTWlMQ0pvWVc1a2JHVkRiR2xqYXlJc0ltSnBibVFpTENKb1lXNWtiR1ZMWlhsRWIzZHVJaXdpYUdGdVpHeGxRMnh2YzJVaUxDSmZabTlqZFhOSmJrUnliM0JrYjNkdUlpd2liR0Z6ZEU5d1pXNUZkbVZ1ZEZSNWNHVWlMQ0pmY0hKdmRHOGlMQ0p3Y205MGIzUjVjR1VpTENKamIyMXdiMjVsYm5SRWFXUk5iM1Z1ZENJc0ltWnZZM1Z6VG1WNGRFOXVUM0JsYmlJc0ltTnZiWEJ2Ym1WdWRGZHBiR3hWY0dSaGRHVWlMQ0p1WlhoMFVISnZjSE1pTENKbWFXNWtSRTlOVG05a1pTSXNJbTFsYm5VaUxDSmtiMk4xYldWdWRDSXNJbU52YlhCdmJtVnVkRVJwWkZWd1pHRjBaU0lzSW5CeVpYWlFjbTl3Y3lJc0luQnlaWFpQY0dWdUlpd2labTlqZFhNaUxDSjBiMmRuYkdVaUxDSm1iMk4xYzA1bGVIUWlMQ0psZG1WdWRDSXNJblJ2WjJkc1pVOXdaVzRpTENKemIzVnlZMlVpTENKbGRtVnVkRVJsZEdGcGJITWlMQ0pyWlhsRGIyUmxJaXdpWTI5a1pYTWlMQ0prYjNkdUlpd2ljSEpsZG1WdWRFUmxabUYxYkhRaUxDSmxjMk1pTENKMFlXSWlMQ0p5Wlc1a1pYSk5aVzUxSWl3aVkyaHBiR1FpTENKZmNtVm1JaXdpWDNSb2FYTXlJaXdpY21WbUlpd2lZeUlzSW5CeWIyTmxjM01pTENKbGJuWWlMQ0pPVDBSRlgwVk9WaUlzSW1Oc2IyNWxSV3hsYldWdWRDSXNJbXhoWW1Wc2JHVmtRbmtpTENKaWMwTnNZWE56SWl3aWNISmxabWw0SWl3aWIyNURiRzl6WlNJc0ltdGxlU0lzSW5KbGJtUmxjbFJ2WjJkc1pTSXNJbDkwYUdsek15SXNJbTl1UTJ4cFkyc2lMQ0p2Ymt0bGVVUnZkMjRpTENKeVpXNWtaWElpTENKZlkyeGhjM05sY3lJc0lsOTBhR2x6TkNJc0lsOTBhR2x6SkhCeWIzQnpJaXdpUTI5dGNHOXVaVzUwSWl3aVkyeGhjM05PWVcxbElpd2lZMnhoYzNObGN5SXNJbU55WldGMFpVVnNaVzFsYm5RaUxDSnRZWEFpTENKVmJtTnZiblJ5YjJ4c1pXUkVjbTl3Wkc5M2JpSXNJbFJ2WjJkc1pTSXNJazFsYm5VaUxDSmZaR1ZtWVhWc2RDSXNJbTF2WkhWc1pTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZGUVN4SlFVRkpRU3gzUWtGQk1FSkRMRkZCUVZFc2VVUkJSV3hEUXl4MVFrRkJlVUpFTEZGQlFWRXNkMFJCUlhKRFJTeFJRVUZSUXl4WlFVRmhMRVZCUTNKQ1JDeFJRVUZSUlN4aFFVRlZMRVZCUld4Q0xFbEJRVWxETEZWQlFWbEtMSFZDUVVGMVFrUXNVVUZCVVN3eVEwRkZNME5OTEN0Q1FVRnBRMHdzZFVKQlFYVkNSQ3hSUVVGUkxHZEZRVVZvUlU4c1owSkJRV3RDVGl4MVFrRkJkVUpFTEZGQlFWRXNhVVJCUldwRVVTeDNRa0ZCTUVKUUxIVkNRVUYxUWtRc1VVRkJVU3g1UkVGRmVrUlRMRmxCUVdOU0xIVkNRVUYxUWtRc1VVRkJVU3hsUVVVM1ExVXNaVUZCYVVKVUxIVkNRVUYxUWtRc1VVRkJVU3c0UWtGRmFFUlhMRlZCUVZsV0xIVkNRVUYxUWtRc1VVRkJVU3dyUWtGRk0wTlpMRk5CUVZkWUxIVkNRVUYxUWtRc1VVRkJVU3haUVVVeFEyRXNUMEZCVTJRc2QwSkJRWGRDUXl4UlFVRlJMRlZCUlhwRFl5eFhRVUZoWWl4MVFrRkJkVUpFTEZGQlFWRXNaVUZGTlVObExGVkJRVmxrTEhWQ1FVRjFRa1FzVVVGQlVTeGpRVVV6UTJkQ0xFdEJRVTltTEhWQ1FVRjFRa1FzVVVGQlVTdzJRa0ZGZEVOcFFpeGhRVUZsYUVJc2RVSkJRWFZDUkN4UlFVRlJMSEZEUVVVNVEydENMRzFDUVVGeFFtcENMSFZDUVVGMVFrUXNVVUZCVVN3eVEwRkZjRVJ0UWl4blFrRkJhMEpzUWl4MVFrRkJkVUpFTEZGQlFWRXNiVUpCUldwRWIwSXNVMEZCVjI1Q0xIVkNRVUYxUWtRc1VVRkJVU3haUVVVeFEzRkNMR0ZCUVdWd1FpeDFRa0ZCZFVKRUxGRkJRVkVzYTBKQlJUbERjMElzWTBGQlowSnlRaXgxUWtGQmRVSkVMRkZCUVZFc2JVSkJSUzlEZFVJc1owSkJRV3RDZEVJc2RVSkJRWFZDUkN4UlFVRlJMSEZDUVVWcVJIZENMR2RDUVVGclFuaENMRkZCUVZFc01FSkJSVEZDZVVJc2RVSkJRWGxDZUVJc2RVSkJRWFZDUkN4UlFVRlJMR3REUVVWNFJEQkNMRmRCUVdFeFFpeFJRVUZSTEhGQ1FVVnlRakpDTEhkQ1FVRXdRakZDTEhWQ1FVRjFRa1FzVVVGQlVTeHRRMEZGZWtRMFFpeFpRVUZqVEN4blFrRkJaMEp1UWl4UlFVRlJlVUlzWVVGQllVTXNUMEZEYmtSRExGVkJRVmxVTEdOQlFXTnNRaXhSUVVGUmVVSXNZVUZCWVVNc1QwRkRMME5GTEZWQlFWa3NRMEZKWkVNc1QwRkJVVzVDTEZkQlFWZFdMRkZCUVZFNFFpeExRVTh6UWtNc1NVRkJTU3hGUVVGSmFrSXNiVUpCUVcxQ1pDeFRRVUZUVlN4WFFVRlhWaXhSUVVGUlowTXNWVUZCVlN4RFFVRkRkRUlzVjBGQlYxWXNVVUZCVVdsRExFOUJRVkYyUWl4WFFVRlhWaXhSUVVGUmEwTXNWVUZEYUVoRExHVkJRV2RDZEVJc1lVRkJZV0lzVVVGTk4wSnZReXhWUVVGVkxFVkJRVWw0UWl4TFFVRkxXaXhWUVVGVExFVkJRVWx6UWl4WFFVRlhaU3hsUVVGbFlpeFpRVUZoUnl4WlFVRlpMRVZCUVVsTUxGZEJRVmRuUWl4blFrRkJaMEpZTEZsQlMyeElXU3hUUVVGVk4wSXNWMEZCVjFZc1VVRkJVVGhDTEV0QlN6ZENWU3hWUVVGWE9VSXNWMEZCVjFZc1VVRkJVVGhDTEV0QlR6bENWeXhMUVVGTkwwSXNWMEZCVjFZc1VVRkJVVGhDTEV0QlEzcENXU3haUVVGaGFFTXNWMEZCVjFZc1VVRkJVVGhDTEV0QlYyaERZU3hUUVVGVmFrTXNWMEZCVjFZc1VVRkJVVFJETEV0QlV6ZENReXhUUVVGVmJrTXNWMEZCVjFZc1VVRkJVVFJETEV0QlRUZENSU3hMUVVGTmNFTXNWMEZCVjFZc1VVRkJVV2xETEU5QlUzcENZeXhsUVVGblFuSkRMRmRCUVZkV0xGRkJRVkZuUkN4TlFVRk5MRU5CUVVNc1VVRkJVeXhqUVV0dVJFTXNZVUZCWTNaRExGZEJRVmRXTEZGQlFWRTBReXhMUVV0cVEwMHNZVUZCWTNoRExGZEJRVmRXTEZGQlFWRTBReXhOUVVVdlFtNUNMR0ZCUVdVc1EwRkRha0pWTEdWQlFXZENiRUlzWVVGQllXcENMRk5CUnpOQ2JVUXNVMEZGU2l4VFFVRlZReXhIUVVkU0xGTkJRVk5FTEZOQlFWTkZMRVZCUVU5RExFZEJRM1pDTEVsQlFVbERMRVZCVVVvc1QwRk9RVUVzUlVGQlVVZ3NSVUZCYVVKSkxFdEJRVXRETEV0QlFVMUtMRVZCUVU5RExFbEJRVmxITEUxQlEycEVReXhaUVVGalNDeEZRVUZOUnl4WlFVRlpReXhOUVVGTExFVkJRVWwyUkN4M1FrRkJkMEpLTEZWQlFWTXNSVUZCU1Vrc2QwSkJRWGRDU2l4VFFVRlRkVVFzUzBGRGNraEJMRVZCUVUxTExHTkJRV2RDVEN4RlFVRk5TeXhqUVVGalJDeE5RVUZMTEVWQlFVbDJSQ3gzUWtGQmQwSktMRlZCUVZNc1JVRkJTVWtzZDBKQlFYZENTaXhUUVVGVGRVUXNTMEZEZWtoQkxFVkJRVTFOTEZsQlFXTk9MRVZCUVUxTkxGbEJRVmxHTEUxQlFVc3NSVUZCU1haRUxIZENRVUYzUWtvc1ZVRkJVeXhGUVVGSlNTeDNRa0ZCZDBKS0xGTkJRVk4xUkN4TFFVTnlTRUVzUlVGQlRVOHNhMEpCUVcxQ0xFVkJRM3BDVUN4RlFVRk5VU3hyUWtGQmIwSXNTMEZEYmtKU0xFZEJXRlFzUlVGQlNYQkVMR2RDUVVGblFrZ3NVMEZCVTIxRUxGTkJRVlZETEVkQlkzWkRMRWxCUVVsWkxFVkJRVk5pTEZOQlFWTmpMRlZCTWs1MFFpeFBRWHBPUVVRc1JVRkJUMFVzYTBKQlFXOUNMRk5CUVZOQkxHOUNRVU5zUTFRc1MwRkJTMVVzYlVKQlIxQklMRVZCUVU5SkxHOUNRVUZ6UWl4VFFVRlRRU3h2UWtGQmIwSkRMRWxCUTI1RVFTeEZRVUZWTlVJc1RVRkJVV2RDTEV0QlFVdEtMRTFCUVUxYUxFOUJRMmhEWjBJc1MwRkJTMHNzYTBKQlFXMUNMRVZCUVVsMlJDeFZRVUZWVUN4VFFVRlRWeXhWUVVGVldDeFJRVUZSYzBVc1dVRkJXV0lzUzBGQlMyTXNUMEZCVHl4RlFVRkpha1VzWlVGQlpVNHNVMEZCVTNkRkxHRkJTWHBJVWl4RlFVRlBVeXh0UWtGQmNVSXNVMEZCVTBFc2JVSkJRVzFDUXl4SFFVTjBSQ3hKUVVGSmFrTXNSVUZCVDJkQ0xFdEJRVXRLTEUxQlFVMWFMRXRCUTJ4Q2EwTXNSVUZCVjBRc1JVRkJWV3BETEV0QlJYSkNRU3hKUVVGVGEwTXNSMEZEV0d4Q0xFdEJRVXRWTEcxQ1FVZEdNVUlzUjBGQlVXdERMRWRCUjFCc1FpeExRVUZMU3l4dFFrRkRVRXdzUzBGQlMwc3NhMEpCUVcxQ0xFVkJRM2hDVEN4TFFVRkxiVUlzVlVGTFdGb3NSVUZCVDFrc1RVRkJVU3hUUVVGVFFTeFJRVU4wUWl4SlFVRkpReXhGUVVGVGJFVXNWVUZCVlZnc1VVRkJVWE5GTEZsQlFWbGlMRXRCUVV0dlFpeFJRVVUxUTBFc1IwRkJWVUVzUlVGQlQwUXNUMEZEYmtKRExFVkJRVTlFTEZOQlNWaGFMRVZCUVU5SExHZENRVUZyUWl4VFFVRlRRU3hyUWtGRGFFTXNTVUZCU1Vrc1JVRkJUMlFzUzBGQlMyTXNTMEZGV0VFc1IwRkJVMEVzUlVGQlMwOHNXVUZKV1N4WlFVRXpRbkpDTEV0QlFVdE5MRzFDUVVGMVJDeGhRVUZ3UWs0c1MwRkJTMG9zVFVGQlRWQXNUVUZEY2tSNVFpeEZRVUZMVHl4alFVbFVaQ3hGUVVGUFRpeFpRVUZqTEZOQlFWTkJMRmxCUVZseFFpeEhRVU53UTNSQ0xFdEJRVXRLTEUxQlFVMWtMRlZCU1daclFpeExRVUZMZFVJc1YwRkJWMFFzUlVGQlR5eERRVU55UWtVc1QwRkJVU3hYUVVsYWFrSXNSVUZCVDBnc1dVRkJZeXhUUVVGVFFTeFpRVUZaYTBJc1JVRkJUMGNzUjBGRE1VTjZRaXhMUVVGTFNpeE5RVUZOV2l4TlFVbG9RbWRDTEV0QlFVdDFRaXhYUVVGWFJDeEZRVUZQUnl4SlFVZDZRbXhDTEVWQlFVOUtMR05CUVdkQ0xGTkJRVk5CTEdOQlFXTnRRaXhIUVVNMVF5eEpRVUZKZEVJc1MwRkJTMG9zVFVGQlRXUXNVMEZKWml4UFFVRlJkME1zUlVGQlRVa3NVMEZEV2l4TFFVRkxNMFVzVTBGQlUxSXNVVUZCVVc5R0xFMUJRVTFETEV0QlEzSkNOVUlzUzBGQlMwb3NUVUZCVFZvc1MwRkpUR2RDTEV0QlFVdGpMRXRCUVV0UExGZEJRMjVDY2tJc1MwRkJTMk1zUzBGQlMwOHNXVUZLVm5KQ0xFdEJRVXQxUWl4WFFVRlhSQ3hGUVVGUExFTkJRM0pDUlN4UFFVRlJMRmxCVFZwR0xFVkJRVTFQTEdsQ1FVTk9MRTFCUlVZc1MwRkJTemxGTEZOQlFWTlNMRkZCUVZGdlJpeE5RVUZOUnl4SlFVTTFRaXhMUVVGTEwwVXNVMEZCVTFJc1VVRkJVVzlHTEUxQlFVMUpMRWxCUXpGQ0wwSXNTMEZCUzBrc1dVRkJXV3RDTEVWQlFVOHNRMEZEZEVKRkxFOUJRVkVzWTBGUmFFSnFRaXhGUVVGUFowSXNWMEZCWVN4VFFVRlRRU3hYUVVGWFJDeEZRVUZQUnl4SFFVTTNReXhKUVVGSmVrTXNSMEZCVVdkQ0xFdEJRVXRLTEUxQlFVMWFMRXRCUlc1Q1FTeEpRVU5HWjBJc1MwRkJTMDBzYTBKQlFXOUNiVUlzUlVGQllVUXNVVUZIY0VONFFpeExRVUZMU2l4TlFVRk5WaXhWUVVOaVl5eExRVUZMU2l4TlFVRk5WaXhUUVVGVFJpeEZRVUZOYzBNc1JVRkJUMGNzU1VGSmNrTnNRaXhGUVVGUGVVSXNWMEZCWVN4VFFVRlRRU3hYUVVGWFF5eEZRVUZQUXl4SFFVTTNReXhKUVVGSlF5eEZRVUZUYmtNc1MwRkZWREZDTEVWQlFVczBSQ3hGUVVGTE5VUXNSMEZEVm1Nc1JVRkJWemhETEVWQlFVczVReXhUUVVOb1FrVXNSVUZCYVVJMFF5eEZRVUZMTlVNc1pVRkRkRUpOTEVkQlFWRXNSVUZCU1c1RUxDdENRVUVyUWtZc1UwRkJVekpHTEVWQlFVMHNRMEZCUXl4TFFVRk5MRmRCUVZrc2JVSkJSVGRGUlN4RlFVRk5MRk5CUVZOQkxFbEJRVWxETEVkQlEzSkNSaXhGUVVGUGNrSXNTMEZCVDNWQ0xFZEJVMmhDTEUxQlRubENMR2xDUVVGa1NpeEZRVUZOUnl4SlFVTlZMR1ZCUVhwQ1JTeFJRVUZSUXl4SlFVRkpReXhYUVVFMFFpeEZRVUZKYWtZc1UwRkJVMmhDTEZWQlFWTXNSVUZCVHl4M1RrRkZja1UyUml4SFFVRk5MRVZCUVVsNFJTeDFRa0ZCZFVKeVFpeFRRVUZUTUVZc1JVRkJUVWNzU1VGQlMwRXNTVUZIYUVRc1JVRkJTWEJHTEU5QlFVOTVSaXhqUVVGalVpeEhRVUZQTEVWQlFVbDZSaXhWUVVGVlJDeFRRVUZUTEVkQlFVbHhSQ3hGUVVGUExFTkJRM1pGZDBNc1NVRkJTMEVzUlVGRFRFMHNWMEZCV1hCRkxFVkJRMXB4UlN4VFFVRlRMRVZCUVVsb1JpeG5Ra0ZCWjBKcFJpeFJRVUZSYUVRc1JVRkJUeXhSUVVNMVEybEVMRk5CUVZNc1JVRkJTV3BHTEhWQ1FVRjFRbkpDTEZOQlFWTXdSaXhGUVVGTmNrTXNUVUZCVFdsRUxGRkJRVk0zUXl4TFFVRkxTU3hoUVVOMlJXaENMRlZCUVZVc1JVRkJTWGhDTEhWQ1FVRjFRbkpDTEZOQlFWTXdSaXhGUVVGTmNrTXNUVUZCVFZJc1UwRkJWVUVzUlVGQlZTeFRRVUZWTUVRc1JVRkJTM2hDTEVkQlF6TkdMRTlCUVU5aExFVkJRVTh2UWl4WlFVRlphMElzUlVGQlR5eERRVU12UWtVc1QwRkJVU3hoUVVkYWJFTXNaVUZCWjBKQkxFMUJTWEJDYVVJc1JVRkJUM2RETEdGQlFXVXNVMEZCVTBFc1lVRkJZV1FzUlVGQlQzSkRMRWRCUTJwRUxFbEJRVWx2UkN4RlFVRlRhRVFzUzBGRlZHOURMRVZCUVUwc1UwRkJVMEVzU1VGQlNVTXNSMEZEY2tKWExFVkJRVTgxUWl4UFFVRlRhVUlzUjBGVGJFSXNUVUZPZVVJc2FVSkJRV1JLTEVWQlFVMUhMRWxCUTFVc1pVRkJla0pGTEZGQlFWRkRMRWxCUVVsRExGZEJRVFJDTEVWQlFVbHFSaXhUUVVGVGFFSXNWVUZCVXl4RlFVRlBMREJPUVVWeVJUWkdMRWRCUVUwc1JVRkJTWGhGTEhWQ1FVRjFRbkpDTEZOQlFWTXdSaXhGUVVGTlJ5eEpRVUZMUVN4SlFVZG9SQ3hGUVVGSmNFWXNUMEZCVDNsR0xHTkJRV05TTEVkQlFVOHNSVUZCU1hwR0xGVkJRVlZFTEZOQlFWTXNSMEZCU1hGRUxFVkJRVThzUTBGRGRrVjNReXhKUVVGTFFTeEZRVU5NVHl4VFFVRlRMRVZCUVVsb1JpeG5Ra0ZCWjBKcFJpeFJRVUZSYUVRc1JVRkJUeXhWUVVNMVEzRkVMRk5CUVZNc1JVRkJTWEpHTEhWQ1FVRjFRbkpDTEZOQlFWTXdSaXhGUVVGTmNrTXNUVUZCVFhGRUxGRkJRVk5xUkN4TFFVRkxReXhoUVVOMlJXbEVMRmRCUVZjc1JVRkJTWFJHTEhWQ1FVRjFRbkpDTEZOQlFWTXdSaXhGUVVGTmNrTXNUVUZCVFhORUxGVkJRVmRzUkN4TFFVRkxSeXh0UWtGSkwwVkpMRVZCUVU4MFF5eFBRVUZUTEZOQlFWTkJMRk5CUTNaQ0xFbEJRVWxETEVWQlEwRkRMRVZCUVZOeVJDeExRVVZVYzBRc1JVRkJZM1JFTEV0QlFVdEtMRTFCUTI1Q01rUXNSVUZCV1VRc1JVRkJXVFZGTEdWQlEzaENTaXhGUVVGTFowWXNSVUZCV1doR0xFZEJRMnBDUml4RlFVRlRhMFlzUlVGQldXeEdMRTlCUTNKQ1ZTeEZRVUZYZDBVc1JVRkJXWGhGTEZOQlEzWkNReXhGUVVGWmRVVXNSVUZCV1haRkxGVkJRM2hDUXl4RlFVRlBjMFVzUlVGQldYUkZMRXRCUTI1Q1NTeEZRVUZYYTBVc1JVRkJXV3hGTEZOQlEzWkNReXhGUVVGUGFVVXNSVUZCV1dwRkxFdEJRMjVDYzBRc1JVRkJWVmNzUlVGQldWZ3NVVUZEZEVKaExFVkJRVmxHTEVWQlFWbEZMRlZCUTNoQ2JFVXNSVUZCYVVKblJTeEZRVUZaYUVVc1pVRkROMEpZTEVWQlFWY3lSU3hGUVVGWk0wVXNVMEZEZGtKcFFpeEhRVUZSTEVWQlFVbHVSQ3dyUWtGQkswSkdMRk5CUVZNclJ5eEZRVUZoTEVOQlFVTXNhVUpCUVd0Q0xFdEJRVTBzVTBGQlZTeFhRVUZaTEZsQlFXRXNUMEZCVVN4WFFVRlpMRTlCUVZFc1ZVRkJWeXhaUVVGaExHbENRVUZyUWl4dlFrRkRhRTB4UkN4RlFVRk5WaXhUUVVOaUxFbEJRVWwxUlN4SlFVRlhUQ3hGUVVGWExFbEJRV0ZVTEVsQlFWY3NSVUZCVFZNc1JVRkJVM0JGTEV0QlFVOUJMRVZCUVUxdlJTeEZRVUZUZEVVc1UwRkJWMEVzUlVGQlZYTkZMRWRCVXpWSExFOUJVRWxvUml4SlFVTkdjVVlzUlVGQlVXUXNTVUZCVnl4RlFVTnVRbU1zUlVGQlVYSkdMRkZCUVZNc1IwRkxXbkJDTEU5QlFVOVVMRkZCUVZGdFNDeGpRVUZqU0N4SFFVRlhMRVZCUVVrdlJ5eFZRVUZWUkN4VFFVRlRMRWRCUVVseFJDeEZRVUZQTEVOQlF5OUZORVFzVjBGQlZ5eEZRVUZKTlVjc1dVRkJXVXdzVTBGQlUybElMRVZCUVZkRExFdEJRemRETTBZc2QwSkJRWGRDZGtJc1VVRkJVVzlJTEVsQlFVbG9SaXhGUVVGVkxGTkJRVlZ6UkN4SFFVTXhSQ3hQUVVGUlFTeEZRVUZOY2tNc1RVRkJUVE5DTEZGQlEyeENMRXRCUVV0R0xGbEJRMGdzVDBGQlQzTkdMRVZCUVU5T0xHRkJRV0ZrTEVWQlFVOHNRMEZEYUVNelJDeEhRVUZKUVN4RlFVTktVU3hUUVVGVlFTeEZRVU5XUlN4TFFVRk5RU3hGUVVOT1N5eExRVUZOUVN4RlFVTk9jMFFzVVVGQlUwRXNTVUZIWWl4TFFVRkxla1VzVlVGRFNDeFBRVUZQYlVZc1JVRkJUM0pDTEZkQlFWZERMRVZCUVU4c1EwRkRPVUl6UkN4SFFVRkpRU3hGUVVOS1ZTeExRVUZOUVN4RlFVTk9SQ3hWUVVGWFFTeEZRVU5ZTkVRc1VVRkJVMEVzUlVGRFZIWkVMRk5CUVZWQkxFVkJRMVpGTEdWQlFXZENRU3hKUVVkd1FpeFJRVU5GTEU5QlFVOHlReXhQUVV0U2RrTXNVMEV4VDFRc1EwRXlUMFV4UXl4UFFVRlBWQ3hSUVVGUlowZ3NWMEZGYWtJM1JDeFRRVUZUZGtJc1ZVRkJXVUVzVlVGRGNrSjFRaXhUUVVGVE1VSXNZVUZCWlVFc1kwRkRlRUlzUlVGQlNVd3NaMEpCUVdkQ1owWXNVMEZCVXl4WFFVRlpha1FzVlVGRGVrTXNTVUZCU1d0RkxITkNRVUYxUWl4RlFVRkpkRWNzWjBKQlFXZENaaXhUUVVGVGJVUXNVMEZCVlN4RFFVTm9SVllzUzBGQlRTeGhRVVZTTkVVc2NVSkJRWEZDUXl4UFFVRlRia2NzWjBKQlFXZENia0lzVVVGRE9VTnhTQ3h4UWtGQmNVSkZMRXRCUVU5eVJ5eGpRVUZqYkVJc1VVRkRNVU1zU1VGQlNYZElMRk5CUVZkSUxIRkNRVU5tZGtnc1VVRkJVVVVzVVVGQlZYZElMRk5CUTJ4Q1F5eFBRVUZQTTBnc1VVRkJWVUVzVVVGQmFVSWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F0WW05dmRITjBjbUZ3TDJ4cFlpOUVjbTl3Wkc5M2JpNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSksX2luaGVyaXRzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKSxfZXh0ZW5kczI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpLF9yZWFjdD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSksX3Byb3BUeXBlcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKSxfRHJvcGRvd249X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Ecm9wZG93blwiKSksX3NwbGl0Q29tcG9uZW50UHJvcHMyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvc3BsaXRDb21wb25lbnRQcm9wc1wiKSkscHJvcFR5cGVzPSgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSxfRHJvcGRvd24uZGVmYXVsdC5wcm9wVHlwZXMse2JzU3R5bGU6X3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxic1NpemU6X3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyx0aXRsZTpfcHJvcFR5cGVzLmRlZmF1bHQubm9kZS5pc1JlcXVpcmVkLG5vQ2FyZXQ6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsY2hpbGRyZW46X3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGV9KSxEcm9wZG93bkJ1dHRvbj1mdW5jdGlvbihlKXtmdW5jdGlvbiBEcm9wZG93bkJ1dHRvbigpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4oMCxfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoRHJvcGRvd25CdXR0b24sZSksRHJvcGRvd25CdXR0b24ucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXt2YXIgZT10aGlzLnByb3BzLHQ9ZS5ic1NpemUscj1lLmJzU3R5bGUsbz1lLnRpdGxlLHA9ZS5jaGlsZHJlbix1PSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShlLFtcImJzU2l6ZVwiLFwiYnNTdHlsZVwiLFwidGl0bGVcIixcImNoaWxkcmVuXCJdKSxuPSgwLF9zcGxpdENvbXBvbmVudFByb3BzMi5kZWZhdWx0KSh1LF9Ecm9wZG93bi5kZWZhdWx0LkNvbnRyb2xsZWRDb21wb25lbnQpLGk9blswXSxsPW5bMV07cmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0Ryb3Bkb3duLmRlZmF1bHQsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LGkse2JzU2l6ZTp0LGJzU3R5bGU6cn0pLF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0Ryb3Bkb3duLmRlZmF1bHQuVG9nZ2xlLCgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSxsLHtic1NpemU6dCxic1N0eWxlOnJ9KSxvKSxfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Ecm9wZG93bi5kZWZhdWx0Lk1lbnUsbnVsbCxwKSl9LERyb3Bkb3duQnV0dG9ufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO0Ryb3Bkb3duQnV0dG9uLnByb3BUeXBlcz1wcm9wVHlwZXM7dmFyIF9kZWZhdWx0PURyb3Bkb3duQnV0dG9uO2V4cG9ydHMuZGVmYXVsdD1fZGVmYXVsdCxtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa1J5YjNCa2IzZHVRblYwZEc5dUxtcHpJbDBzSW01aGJXVnpJanBiSWw5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUWlMQ0p5WlhGMWFYSmxJaXdpWlhod2IzSjBjeUlzSWw5ZlpYTk5iMlIxYkdVaUxDSmtaV1poZFd4MElpd2lYMjlpYW1WamRGZHBkR2h2ZFhSUWNtOXdaWEowYVdWelRHOXZjMlV5SWl3aVgybHVhR1Z5YVhSelRHOXZjMlV5SWl3aVgyVjRkR1Z1WkhNeUlpd2lYM0psWVdOMElpd2lYM0J5YjNCVWVYQmxjeUlzSWw5RWNtOXdaRzkzYmlJc0lsOXpjR3hwZEVOdmJYQnZibVZ1ZEZCeWIzQnpNaUlzSW5CeWIzQlVlWEJsY3lJc0ltSnpVM1I1YkdVaUxDSnpkSEpwYm1jaUxDSmljMU5wZW1VaUxDSjBhWFJzWlNJc0ltNXZaR1VpTENKcGMxSmxjWFZwY21Wa0lpd2libTlEWVhKbGRDSXNJbUp2YjJ3aUxDSmphR2xzWkhKbGJpSXNJa1J5YjNCa2IzZHVRblYwZEc5dUlpd2lYMUpsWVdOMEpFTnZiWEJ2Ym1WdWRDSXNJbUZ3Y0d4NUlpd2lkR2hwY3lJc0ltRnlaM1Z0Wlc1MGN5SXNJbkJ5YjNSdmRIbHdaU0lzSW5KbGJtUmxjaUlzSWw5MGFHbHpKSEJ5YjNCeklpd2ljSEp2Y0hNaUxDSmZjM0JzYVhSRGIyMXdiMjVsYm5SUWNtOXdjeUlzSWtOdmJuUnliMnhzWldSRGIyMXdiMjVsYm5RaUxDSmtjbTl3Wkc5M2JsQnliM0J6SWl3aWRHOW5aMnhsVUhKdmNITWlMQ0pqY21WaGRHVkZiR1Z0Wlc1MElpd2lWRzluWjJ4bElpd2lUV1Z1ZFNJc0lrTnZiWEJ2Ym1WdWRDSXNJbDlrWldaaGRXeDBJaXdpYlc5a2RXeGxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVWQkxFbEJRVWxCTEhWQ1FVRjVRa01zVVVGQlVTeDNSRUZGY2tORExGRkJRVkZETEZsQlFXRXNSVUZEY2tKRUxGRkJRVkZGTEdGQlFWVXNSVUZGYkVJc1NVRkJTVU1zSzBKQlFXbERUQ3gxUWtGQmRVSkRMRkZCUVZFc1owVkJSV2hGU3l4blFrRkJhMEpPTEhWQ1FVRjFRa01zVVVGQlVTeHBSRUZGYWtSTkxGVkJRVmxRTEhWQ1FVRjFRa01zVVVGQlVTd3lRMEZGTTBOUExFOUJRVk5TTEhWQ1FVRjFRa01zVVVGQlVTeFZRVVY0UTFFc1YwRkJZVlFzZFVKQlFYVkNReXhSUVVGUkxHVkJSVFZEVXl4VlFVRlpWaXgxUWtGQmRVSkRMRkZCUVZFc1pVRkZNME5WTEhOQ1FVRjNRbGdzZFVKQlFYVkNReXhSUVVGUkxHZERRVVYyUkZjc1YwRkJXU3hGUVVGSlRDeFZRVUZWU0N4VFFVRlRMRWRCUVVsTkxGVkJRVlZPTEZGQlFWRlJMRlZCUVZjc1EwRkZkRVZETEZGQlFWTktMRmRCUVZkTUxGRkJRVkZWTEU5QlF6VkNReXhQUVVGUlRpeFhRVUZYVEN4UlFVRlJWU3hQUVVNelFrVXNUVUZCVDFBc1YwRkJWMHdzVVVGQlVXRXNTMEZCUzBNc1YwRkRMMEpETEZGQlFWTldMRmRCUVZkTUxGRkJRVkZuUWl4TFFVMDFRa01zVTBGQlZWb3NWMEZCVjB3c1VVRkJVV0VzVDBGSE0wSkxMR1ZCUlVvc1UwRkJWVU1zUjBGSFVpeFRRVUZUUkN4cFFrRkRVQ3hQUVVGUFF5eEZRVUZwUWtNc1RVRkJUVU1zUzBGQlRVTXNXVUZCWTBRc1MwRXdRbkJFTEU5Qk4wSkJMRVZCUVVsdVFpeG5Ra0ZCWjBKR0xGTkJRVk5yUWl4bFFVRm5Ra01zUjBGTmFFTkVMR1ZCUVdWTExGVkJSWEpDUXl4UFFVRlRMRk5CUVZOQkxGTkJRM1pDTEVsQlFVbERMRVZCUVdOS0xFdEJRVXRMTEUxQlEyNUNaaXhGUVVGVFl5eEZRVUZaWkN4UFFVTnlRa1lzUlVGQlZXZENMRVZCUVZsb1FpeFJRVU4wUWtjc1JVRkJVV0VzUlVGQldXSXNUVUZEY0VKTExFVkJRVmRSTEVWQlFWbFNMRk5CUTNaQ1V5eEhRVUZSTEVWQlFVbDZRaXdyUWtGQkswSkVMRk5CUVZONVFpeEZRVUZoTEVOQlFVTXNVMEZCVlN4VlFVRlhMRkZCUVZNc1lVRkZhRWRGTEVkQlFYVkNMRVZCUVVsd1FpeHpRa0ZCYzBKUUxGTkJRVk13UWl4RlFVRlBjRUlzVlVGQlZVNHNVVUZCVVRSQ0xIRkNRVU51UmtNc1JVRkJaMEpHTEVWQlFYRkNMRWRCUTNKRFJ5eEZRVUZqU0N4RlFVRnhRaXhIUVVWMlF5eFBRVUZQZGtJc1QwRkJUMG9zVVVGQlVTdENMR05CUVdONlFpeFZRVUZWVGl4VFFVRlRMRVZCUVVsSExGVkJRVlZJTEZOQlFWTXNSMEZCU1RaQ0xFVkJRV1VzUTBGREwwWnNRaXhQUVVGUlFTeEZRVU5TUml4UlFVRlRRU3hKUVVOUVRDeFBRVUZQU2l4UlFVRlJLMElzWTBGQlkzcENMRlZCUVZWT0xGRkJRVkZuUXl4UlFVRlJMRVZCUVVrM1FpeFZRVUZWU0N4VFFVRlRMRWRCUVVrNFFpeEZRVUZoTEVOQlEycEhia0lzVDBGQlVVRXNSVUZEVWtZc1VVRkJVMEVzU1VGRFVFY3NSMEZCVVZJc1QwRkJUMG9zVVVGQlVTdENMR05CUVdONlFpeFZRVUZWVGl4UlFVRlJhVU1zUzBGQlRTeExRVUZOYUVJc1MwRkhiRVZETEdWQk9VSlVMRU5CSzBKRlpDeFBRVUZQU2l4UlFVRlJhME1zVjBGRmFrSm9RaXhsUVVGbFZpeFZRVUZaUVN4VlFVTXpRaXhKUVVGSk1rSXNVMEZCVjJwQ0xHVkJRMlp3UWl4UlFVRlJSU3hSUVVGVmJVTXNVMEZEYkVKRExFOUJRVTkwUXl4UlFVRlZRU3hSUVVGcFFpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzFpYjI5MGMzUnlZWEF2YkdsaUwwUnliM0JrYjNkdVFuVjBkRzl1TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PXZvaWQgMDt2YXIgX2V4dGVuZHMzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKSxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpLF9mcm9tPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9hcnJheS9mcm9tXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLF9jbGFzc25hbWVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpLF9rZXljb2RlPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImtleWNvZGVcIikpLF9yZWFjdD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSksX3Byb3BUeXBlcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKSxfcmVhY3REb209X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtZG9tXCIpKSxfUm9vdENsb3NlV3JhcHBlcj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1vdmVybGF5cy9saWIvUm9vdENsb3NlV3JhcHBlclwiKSksX2Jvb3RzdHJhcFV0aWxzPXJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpLF9jcmVhdGVDaGFpbmVkRnVuY3Rpb249X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb25cIikpLF9WYWxpZENvbXBvbmVudENoaWxkcmVuPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvVmFsaWRDb21wb25lbnRDaGlsZHJlblwiKSkscHJvcFR5cGVzPXtvcGVuOl9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLHB1bGxSaWdodDpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxvbkNsb3NlOl9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLGxhYmVsbGVkQnk6X3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyXSksb25TZWxlY3Q6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMscm9vdENsb3NlRXZlbnQ6X3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFtcImNsaWNrXCIsXCJtb3VzZWRvd25cIl0pfSxkZWZhdWx0UHJvcHM9e2JzUm9sZTpcIm1lbnVcIixwdWxsUmlnaHQ6ITF9LERyb3Bkb3duTWVudT1mdW5jdGlvbihlKXtmdW5jdGlvbiBEcm9wZG93bk1lbnUodCl7dmFyIG87cmV0dXJuKG89ZS5jYWxsKHRoaXMsdCl8fHRoaXMpLmhhbmRsZVJvb3RDbG9zZT1vLmhhbmRsZVJvb3RDbG9zZS5iaW5kKCgwLF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKG8pKSksby5oYW5kbGVLZXlEb3duPW8uaGFuZGxlS2V5RG93bi5iaW5kKCgwLF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKG8pKSksb30oMCxfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoRHJvcGRvd25NZW51LGUpO3ZhciB0PURyb3Bkb3duTWVudS5wcm90b3R5cGU7cmV0dXJuIHQuZ2V0Rm9jdXNhYmxlTWVudUl0ZW1zPWZ1bmN0aW9uIGdldEZvY3VzYWJsZU1lbnVJdGVtcygpe3ZhciBlPV9yZWFjdERvbS5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMpO3JldHVybiBlPygwLF9mcm9tLmRlZmF1bHQpKGUucXVlcnlTZWxlY3RvckFsbCgnW3RhYkluZGV4PVwiLTFcIl0nKSk6W119LHQuZ2V0SXRlbXNBbmRBY3RpdmVJbmRleD1mdW5jdGlvbiBnZXRJdGVtc0FuZEFjdGl2ZUluZGV4KCl7dmFyIGU9dGhpcy5nZXRGb2N1c2FibGVNZW51SXRlbXMoKSx0PWUuaW5kZXhPZihkb2N1bWVudC5hY3RpdmVFbGVtZW50KTtyZXR1cm57aXRlbXM6ZSxhY3RpdmVJbmRleDp0fX0sdC5mb2N1c05leHQ9ZnVuY3Rpb24gZm9jdXNOZXh0KCl7dmFyIGU9dGhpcy5nZXRJdGVtc0FuZEFjdGl2ZUluZGV4KCksdD1lLml0ZW1zLG89ZS5hY3RpdmVJbmRleDswIT09dC5sZW5ndGgmJnRbbz09PXQubGVuZ3RoLTE/MDpvKzFdLmZvY3VzKCl9LHQuZm9jdXNQcmV2aW91cz1mdW5jdGlvbiBmb2N1c1ByZXZpb3VzKCl7dmFyIGU9dGhpcy5nZXRJdGVtc0FuZEFjdGl2ZUluZGV4KCksdD1lLml0ZW1zLG89ZS5hY3RpdmVJbmRleDswIT09dC5sZW5ndGgmJnRbMD09PW8/dC5sZW5ndGgtMTpvLTFdLmZvY3VzKCl9LHQuaGFuZGxlS2V5RG93bj1mdW5jdGlvbiBoYW5kbGVLZXlEb3duKGUpe3N3aXRjaChlLmtleUNvZGUpe2Nhc2UgX2tleWNvZGUuZGVmYXVsdC5jb2Rlcy5kb3duOnRoaXMuZm9jdXNOZXh0KCksZS5wcmV2ZW50RGVmYXVsdCgpO2JyZWFrO2Nhc2UgX2tleWNvZGUuZGVmYXVsdC5jb2Rlcy51cDp0aGlzLmZvY3VzUHJldmlvdXMoKSxlLnByZXZlbnREZWZhdWx0KCk7YnJlYWs7Y2FzZSBfa2V5Y29kZS5kZWZhdWx0LmNvZGVzLmVzYzpjYXNlIF9rZXljb2RlLmRlZmF1bHQuY29kZXMudGFiOnRoaXMucHJvcHMub25DbG9zZShlLHtzb3VyY2U6XCJrZXlkb3duXCJ9KX19LHQuaGFuZGxlUm9vdENsb3NlPWZ1bmN0aW9uIGhhbmRsZVJvb3RDbG9zZShlKXt0aGlzLnByb3BzLm9uQ2xvc2UoZSx7c291cmNlOlwicm9vdENsb3NlXCJ9KX0sdC5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIGUsdD10aGlzLG89dGhpcy5wcm9wcyxyPW8ub3BlbixuPW8ucHVsbFJpZ2h0LHM9by5sYWJlbGxlZEJ5LGw9by5vblNlbGVjdCxpPW8uY2xhc3NOYW1lLGE9by5yb290Q2xvc2VFdmVudCx1PW8uY2hpbGRyZW4sZD0oMCxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkobyxbXCJvcGVuXCIsXCJwdWxsUmlnaHRcIixcImxhYmVsbGVkQnlcIixcIm9uU2VsZWN0XCIsXCJjbGFzc05hbWVcIixcInJvb3RDbG9zZUV2ZW50XCIsXCJjaGlsZHJlblwiXSkscD0oMCxfYm9vdHN0cmFwVXRpbHMuc3BsaXRCc1Byb3BzQW5kT21pdCkoZCxbXCJvbkNsb3NlXCJdKSxjPXBbMF0sZj1wWzFdLF89KDAsX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCgwLF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkoYyksKChlPXt9KVsoMCxfYm9vdHN0cmFwVXRpbHMucHJlZml4KShjLFwicmlnaHRcIildPW4sZSkpO3JldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Sb290Q2xvc2VXcmFwcGVyLmRlZmF1bHQse2Rpc2FibGVkOiFyLG9uUm9vdENsb3NlOnRoaXMuaGFuZGxlUm9vdENsb3NlLGV2ZW50OmF9LF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJ1bFwiLCgwLF9leHRlbmRzMy5kZWZhdWx0KSh7fSxmLHtyb2xlOlwibWVudVwiLGNsYXNzTmFtZTooMCxfY2xhc3NuYW1lcy5kZWZhdWx0KShpLF8pLFwiYXJpYS1sYWJlbGxlZGJ5XCI6c30pLF9WYWxpZENvbXBvbmVudENoaWxkcmVuLmRlZmF1bHQubWFwKHUsZnVuY3Rpb24oZSl7cmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNsb25lRWxlbWVudChlLHtvbktleURvd246KDAsX2NyZWF0ZUNoYWluZWRGdW5jdGlvbi5kZWZhdWx0KShlLnByb3BzLm9uS2V5RG93bix0LmhhbmRsZUtleURvd24pLG9uU2VsZWN0OigwLF9jcmVhdGVDaGFpbmVkRnVuY3Rpb24uZGVmYXVsdCkoZS5wcm9wcy5vblNlbGVjdCxsKX0pfSkpKX0sRHJvcGRvd25NZW51fShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO0Ryb3Bkb3duTWVudS5wcm9wVHlwZXM9cHJvcFR5cGVzLERyb3Bkb3duTWVudS5kZWZhdWx0UHJvcHM9ZGVmYXVsdFByb3BzO3ZhciBfZGVmYXVsdD0oMCxfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoXCJkcm9wZG93bi1tZW51XCIsRHJvcGRvd25NZW51KTtleHBvcnRzLmRlZmF1bHQ9X2RlZmF1bHQsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtSeWIzQmtiM2R1VFdWdWRTNXFjeUpkTENKdVlXMWxjeUk2V3lKZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBJaXdpY21WeGRXbHlaU0lzSW1WNGNHOXlkSE1pTENKZlgyVnpUVzlrZFd4bElpd2laR1ZtWVhWc2RDSXNJbDlsZUhSbGJtUnpNeUlzSWw5dlltcGxZM1JYYVhSb2IzVjBVSEp2Y0dWeWRHbGxjMHh2YjNObE1pSXNJbDltY205dElpd2lYMmx1YUdWeWFYUnpURzl2YzJVeUlpd2lYMkZ6YzJWeWRGUm9hWE5KYm1sMGFXRnNhWHBsWkRJaUxDSmZZMnhoYzNOdVlXMWxjeUlzSWw5clpYbGpiMlJsSWl3aVgzSmxZV04wSWl3aVgzQnliM0JVZVhCbGN5SXNJbDl5WldGamRFUnZiU0lzSWw5U2IyOTBRMnh2YzJWWGNtRndjR1Z5SWl3aVgySnZiM1J6ZEhKaGNGVjBhV3h6SWl3aVgyTnlaV0YwWlVOb1lXbHVaV1JHZFc1amRHbHZiaUlzSWw5V1lXeHBaRU52YlhCdmJtVnVkRU5vYVd4a2NtVnVJaXdpY0hKdmNGUjVjR1Z6SWl3aWIzQmxiaUlzSW1KdmIyd2lMQ0p3ZFd4c1VtbG5hSFFpTENKdmJrTnNiM05sSWl3aVpuVnVZeUlzSW14aFltVnNiR1ZrUW5raUxDSnZibVZQWmxSNWNHVWlMQ0p6ZEhKcGJtY2lMQ0p1ZFcxaVpYSWlMQ0p2YmxObGJHVmpkQ0lzSW5KdmIzUkRiRzl6WlVWMlpXNTBJaXdpYjI1bFQyWWlMQ0prWldaaGRXeDBVSEp2Y0hNaUxDSmljMUp2YkdVaUxDSkVjbTl3Wkc5M2JrMWxiblVpTENKZlVtVmhZM1FrUTI5dGNHOXVaVzUwSWl3aWNISnZjSE1pTENKZmRHaHBjeUlzSW1OaGJHd2lMQ0owYUdseklpd2lhR0Z1Wkd4bFVtOXZkRU5zYjNObElpd2lZbWx1WkNJc0ltaGhibVJzWlV0bGVVUnZkMjRpTENKZmNISnZkRzhpTENKd2NtOTBiM1I1Y0dVaUxDSm5aWFJHYjJOMWMyRmliR1ZOWlc1MVNYUmxiWE1pTENKdWIyUmxJaXdpWm1sdVpFUlBUVTV2WkdVaUxDSnhkV1Z5ZVZObGJHVmpkRzl5UVd4c0lpd2laMlYwU1hSbGJYTkJibVJCWTNScGRtVkpibVJsZUNJc0ltbDBaVzF6SWl3aVlXTjBhWFpsU1c1a1pYZ2lMQ0pwYm1SbGVFOW1JaXdpWkc5amRXMWxiblFpTENKaFkzUnBkbVZGYkdWdFpXNTBJaXdpWm05amRYTk9aWGgwSWl3aVgzUm9hWE1rWjJWMFNYUmxiWE5CYm1SQlkzUnBJaXdpYkdWdVozUm9JaXdpWm05amRYTWlMQ0ptYjJOMWMxQnlaWFpwYjNWeklpd2lYM1JvYVhNa1oyVjBTWFJsYlhOQmJtUkJZM1JwTWlJc0ltVjJaVzUwSWl3aWEyVjVRMjlrWlNJc0ltTnZaR1Z6SWl3aVpHOTNiaUlzSW5CeVpYWmxiblJFWldaaGRXeDBJaXdpZFhBaUxDSmxjMk1pTENKMFlXSWlMQ0p6YjNWeVkyVWlMQ0p5Wlc1a1pYSWlMQ0pmWlhoMFpXNWtjeklpTENKZmRHaHBjeklpTENKZmRHaHBjeVJ3Y205d2N5SXNJbU5zWVhOelRtRnRaU0lzSW1Ob2FXeGtjbVZ1SWl3aVgzTndiR2wwUW5OUWNtOXdjMEZ1WkU5dGFYUWlMQ0p6Y0d4cGRFSnpVSEp2Y0hOQmJtUlBiV2wwSWl3aVluTlFjbTl3Y3lJc0ltVnNaVzFsYm5SUWNtOXdjeUlzSW1Oc1lYTnpaWE1pTENKblpYUkRiR0Z6YzFObGRDSXNJbkJ5WldacGVDSXNJbU55WldGMFpVVnNaVzFsYm5RaUxDSmthWE5oWW14bFpDSXNJbTl1VW05dmRFTnNiM05sSWl3aWNtOXNaU0lzSW1GeWFXRXRiR0ZpWld4c1pXUmllU0lzSW0xaGNDSXNJbU5vYVd4a0lpd2lZMnh2Ym1WRmJHVnRaVzUwSWl3aWIyNUxaWGxFYjNkdUlpd2lRMjl0Y0c5dVpXNTBJaXdpWDJSbFptRjFiSFFpTENKaWMwTnNZWE56SWl3aWJXOWtkV3hsSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4aFFVVkJMRWxCUVVsQkxIVkNRVUY1UWtNc1VVRkJVU3gzUkVGRmNrTkRMRkZCUVZGRExGbEJRV0VzUlVGRGNrSkVMRkZCUVZGRkxHRkJRVlVzUlVGRmJFSXNTVUZCU1VNc1ZVRkJXVXdzZFVKQlFYVkNReXhSUVVGUkxESkRRVVV6UTBzc0swSkJRV2xEVGl4MVFrRkJkVUpETEZGQlFWRXNaMFZCUldoRlRTeE5RVUZSVUN4MVFrRkJkVUpETEZGQlFWRXNPRU5CUlhaRFR5eG5Ra0ZCYTBKU0xIVkNRVUYxUWtNc1VVRkJVU3hwUkVGRmFrUlJMSGRDUVVFd1FsUXNkVUpCUVhWQ1F5eFJRVUZSTEhsRVFVVjZSRk1zV1VGQlkxWXNkVUpCUVhWQ1F5eFJRVUZSTEdWQlJUZERWU3hUUVVGWFdDeDFRa0ZCZFVKRExGRkJRVkVzV1VGRk1VTlhMRTlCUVZOYUxIVkNRVUYxUWtNc1VVRkJVU3hWUVVWNFExa3NWMEZCWVdJc2RVSkJRWFZDUXl4UlFVRlJMR1ZCUlRWRFlTeFZRVUZaWkN4MVFrRkJkVUpETEZGQlFWRXNZMEZGTTBOakxHdENRVUZ2UW1Zc2RVSkJRWFZDUXl4UlFVRlJMSGREUVVWdVJHVXNaMEpCUVd0Q1ppeFJRVUZSTERCQ1FVVXhRbWRDTEhWQ1FVRjVRbXBDTEhWQ1FVRjFRa01zVVVGQlVTeHJRMEZGZUVScFFpeDNRa0ZCTUVKc1FpeDFRa0ZCZFVKRExGRkJRVkVzYlVOQlJYcEVhMElzVlVGQldTeERRVU5rUXl4TFFVRk5VQ3hYUVVGWFZDeFJRVUZSYVVJc1MwRkRla0pETEZWQlFWZFVMRmRCUVZkVUxGRkJRVkZwUWl4TFFVTTVRa1VzVVVGQlUxWXNWMEZCVjFRc1VVRkJVVzlDTEV0QlF6VkNReXhYUVVGWldpeFhRVUZYVkN4UlFVRlJjMElzVlVGQlZTeERRVUZEWWl4WFFVRlhWQ3hSUVVGUmRVSXNUMEZCVVdRc1YwRkJWMVFzVVVGQlVYZENMRk5CUTNoR1F5eFRRVUZWYUVJc1YwRkJWMVFzVVVGQlVXOUNMRXRCUXpkQ1RTeGxRVUZuUW1wQ0xGZEJRVmRVTEZGQlFWRXlRaXhOUVVGTkxFTkJRVU1zVVVGQlV5eGxRVVZxUkVNc1lVRkJaU3hEUVVOcVFrTXNUMEZCVVN4UFFVTlNXQ3hYUVVGWExFZEJSMVJaTEdGQlJVb3NVMEZCVlVNc1IwRkhVaXhUUVVGVFJDeGhRVUZoUlN4SFFVTndRaXhKUVVGSlF5eEZRVXRLTEU5QlNFRkJMRVZCUVZGR0xFVkJRV2xDUnl4TFFVRkxReXhMUVVGTlNDeEpRVUZWUnl4TlFVTjRRME1zWjBKQlFXdENTQ3hGUVVGTlJ5eG5Ra0ZCWjBKRExFMUJRVXNzUlVGQlNXaERMSGRDUVVGM1Frd3NWVUZCVXl4RlFVRkpTeXgzUWtGQmQwSk1MRk5CUVZOcFF5eExRVU0zU0VFc1JVRkJUVXNzWTBGQlowSk1MRVZCUVUxTExHTkJRV05FTEUxQlFVc3NSVUZCU1doRExIZENRVUYzUWt3c1ZVRkJVeXhGUVVGSlN5eDNRa0ZCZDBKTUxGTkJRVk5wUXl4TFFVTnNTRUVzUjBGU1ZDeEZRVUZKTjBJc1owSkJRV2RDU2l4VFFVRlRPRUlzWVVGQlkwTXNSMEZYTTBNc1NVRkJTVkVzUlVGQlUxUXNZVUZCWVZVc1ZVRXJSekZDTEU5Qk4wZEJSQ3hGUVVGUFJTeHpRa0ZCZDBJc1UwRkJVMEVzZDBKQlEzUkRMRWxCUVVsRExFVkJRVTlvUXl4VlFVRlZWaXhSUVVGUk1rTXNXVUZCV1ZJc1RVRkZla01zVDBGQlMwOHNSMEZKUlN4RlFVRkpka01zVFVGQlRVZ3NVMEZCVXpCRExFVkJRVXRGTEdsQ1FVRnBRaXh2UWtGSWRrTXNTVUZOV0V3c1JVRkJUMDBzZFVKQlFYbENMRk5CUVZOQkxIbENRVU4yUXl4SlFVRkpReXhGUVVGUldDeExRVUZMVFN4M1FrRkRZazBzUlVGQlkwUXNSVUZCVFVVc1VVRkJVVU1zVTBGQlUwTXNaVUZEZWtNc1RVRkJUeXhEUVVOTVNpeE5RVUZQUVN4RlFVTlFReXhaUVVGaFFTeEpRVWxxUWxJc1JVRkJUMWtzVlVGQldTeFRRVUZUUVN4WlFVTXhRaXhKUVVGSlF5eEZRVUYzUW1wQ0xFdEJRVXRWTEhsQ1FVTTNRa01zUlVGQlVVMHNSVUZCYzBKT0xFMUJRemxDUXl4RlFVRmpTeXhGUVVGelFrd3NXVUZGYmtJc1NVRkJha0pFTEVWQlFVMVBMRkZCUzFaUUxFVkJSR2RDUXl4SlFVRm5Ra1FzUlVGQlRVOHNUMEZCVXl4RlFVRkpMRVZCUVVsT0xFVkJRV01zUjBGRGNFUlBMRk5CUjI1Q1ppeEZRVUZQWjBJc1kwRkJaMElzVTBGQlUwRXNaMEpCUXpsQ0xFbEJRVWxETEVWQlFYbENja0lzUzBGQlMxVXNlVUpCUXpsQ1F5eEZRVUZSVlN4RlFVRjFRbFlzVFVGREwwSkRMRVZCUVdOVExFVkJRWFZDVkN4WlFVVndRaXhKUVVGcVFrUXNSVUZCVFU4c1VVRkxWbEFzUlVGRVowTXNTVUZCYUVKRExFVkJRVzlDUkN4RlFVRk5UeXhQUVVGVExFVkJRVWxPTEVWQlFXTXNSMEZEY0VSUExGTkJSMjVDWml4RlFVRlBSQ3hqUVVGblFpeFRRVUZUUVN4alFVRmpiVUlzUjBGRE5VTXNUMEZCVVVFc1JVRkJUVU1zVTBGRFdpeExRVUZMYmtRc1UwRkJVMUFzVVVGQlVUSkVMRTFCUVUxRExFdEJRekZDZWtJc1MwRkJTMmRDTEZsQlEweE5MRVZCUVUxSkxHbENRVU5PTEUxQlJVWXNTMEZCUzNSRUxGTkJRVk5RTEZGQlFWRXlSQ3hOUVVGTlJ5eEhRVU14UWpOQ0xFdEJRVXR2UWl4blFrRkRURVVzUlVGQlRVa3NhVUpCUTA0c1RVRkZSaXhMUVVGTGRFUXNVMEZCVTFBc1VVRkJVVEpFTEUxQlFVMUpMRWxCUXpWQ0xFdEJRVXQ0UkN4VFFVRlRVQ3hSUVVGUk1rUXNUVUZCVFVzc1NVRkRNVUkzUWl4TFFVRkxTQ3hOUVVGTllpeFJRVUZSYzBNc1JVRkJUeXhEUVVONFFsRXNUMEZCVVN4alFWRm9RakZDTEVWQlFVOUlMR2RDUVVGclFpeFRRVUZUUVN4blFrRkJaMEp4UWl4SFFVTm9SSFJDTEV0QlFVdElMRTFCUVUxaUxGRkJRVkZ6UXl4RlFVRlBMRU5CUTNoQ1VTeFBRVUZSTEdWQlNWb3hRaXhGUVVGUE1rSXNUMEZCVXl4VFFVRlRRU3hUUVVOMlFpeEpRVUZKUXl4RlFVTkJReXhGUVVGVGFrTXNTMEZGVkd0RExFVkJRV05zUXl4TFFVRkxTQ3hOUVVOdVFtaENMRVZCUVU5eFJDeEZRVUZaY2tRc1MwRkRia0pGTEVWQlFWbHRSQ3hGUVVGWmJrUXNWVUZEZUVKSExFVkJRV0ZuUkN4RlFVRlphRVFzVjBGRGVrSkpMRVZCUVZjMFF5eEZRVUZaTlVNc1UwRkRka0kyUXl4RlFVRlpSQ3hGUVVGWlF5eFZRVU40UWpWRExFVkJRV2xDTWtNc1JVRkJXVE5ETEdWQlF6ZENOa01zUlVGQlYwWXNSVUZCV1VVc1UwRkRka0oyUXl4SFFVRlJMRVZCUVVrNVFpd3JRa0ZCSzBKR0xGTkJRVk54UlN4RlFVRmhMRU5CUVVNc1QwRkJVU3haUVVGaExHRkJRV01zVjBGQldTeFpRVUZoTEdsQ1FVRnJRaXhoUVVWb1NrY3NSMEZCZFVJc1JVRkJTVFZFTEdkQ1FVRm5RalpFTEhGQ1FVRnhRbnBETEVWQlFVOHNRMEZCUXl4WlFVTjRSVEJETEVWQlFWVkdMRVZCUVhGQ0xFZEJReTlDUnl4RlFVRmxTQ3hGUVVGeFFpeEhRVVZ3UTBrc1IwRkJWU3hGUVVGSk0wVXNWVUZCVlVRc1UwRkJVeXhKUVVGSkxFVkJRVWxaTEdkQ1FVRm5RbWxGTEdGQlFXRklMRXRCUVZkUUxFVkJRVmtzUzBGQll5eEZRVUZKZGtRc1owSkJRV2RDYTBVc1VVRkJVVW9zUlVGQlV5eFZRVUZaZUVRc1JVRkJWMmxFTEVsQlF6TkxMRTlCUVU4elJDeFBRVUZQVWl4UlFVRlJLMFVzWTBGQlkzQkZMR3RDUVVGclFsZ3NVVUZCVXl4RFFVTTNSR2RHTEZWQlFWZG9SU3hGUVVOWWFVVXNXVUZCWVRsRExFdEJRVXRETEdkQ1FVTnNRbkZDTEUxQlFVOHZRaXhIUVVOT2JFSXNUMEZCVDFJc1VVRkJVU3RGTEdOQlFXTXNUVUZCVFN4RlFVRkpPVVVzVlVGQlZVUXNVMEZCVXl4SFFVRkpNa1VzUlVGQll5eERRVU0zUlU4c1MwRkJUU3hQUVVOT1dpeFhRVUZYTEVWQlFVbG9SU3haUVVGWlRpeFRRVUZUYzBVc1JVRkJWMDBzUjBGREwwTlBMR3RDUVVGdFFqbEVMRWxCUTJwQ1VDeDNRa0ZCZDBKa0xGRkJRVkZ2Uml4SlFVRkpZaXhGUVVGVkxGTkJRVlZqTEVkQlF6RkVMRTlCUVU4M1JTeFBRVUZQVWl4UlFVRlJjMFlzWVVGQllVUXNSVUZCVHl4RFFVTjRRMFVzVjBGQlZ5eEZRVUZKTVVVc2RVSkJRWFZDWWl4VFFVRlRjVVlzUlVGQlRYSkVMRTFCUVUxMVJDeFZRVUZYYmtJc1JVRkJUemxDTEdWQlF6ZEZZaXhWUVVGVkxFVkJRVWxhTEhWQ1FVRjFRbUlzVTBGQlUzRkdMRVZCUVUxeVJDeE5RVUZOVUN4VFFVRlZRU3hWUVV0dVJVc3NZVUV6U0ZRc1EwRTBTRVYwUWl4UFFVRlBVaXhSUVVGUmQwWXNWMEZGYWtJeFJDeGhRVUZoWml4VlFVRlpRU3hWUVVONlFtVXNZVUZCWVVZc1lVRkJaVUVzWVVGRk5VSXNTVUZCU1RaRUxGVkJRVmNzUlVGQlNUZEZMR2RDUVVGblFqaEZMRk5CUVZNc1owSkJRV2xDTlVRc1kwRkZOMFJvUXl4UlFVRlJSU3hSUVVGVmVVWXNVMEZEYkVKRkxFOUJRVTgzUml4UlFVRlZRU3hSUVVGcFFpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzFpYjI5MGMzUnlZWEF2YkdsaUwwUnliM0JrYjNkdVRXVnVkUzVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0PXJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO2V4cG9ydHMuX19lc01vZHVsZT0hMCxleHBvcnRzLmRlZmF1bHQ9dm9pZCAwO3ZhciBfZXh0ZW5kczI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSksX2luaGVyaXRzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKSxfcmVhY3Q9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpLF9wcm9wVHlwZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSksX2NsYXNzbmFtZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSksX0J1dHRvbj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0J1dHRvblwiKSksX1NhZmVBbmNob3I9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9TYWZlQW5jaG9yXCIpKSxfYm9vdHN0cmFwVXRpbHM9cmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIikscHJvcFR5cGVzPXtub0NhcmV0Ol9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLG9wZW46X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsdGl0bGU6X3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyx1c2VBbmNob3I6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2x9LGRlZmF1bHRQcm9wcz17b3BlbjohMSx1c2VBbmNob3I6ITEsYnNSb2xlOlwidG9nZ2xlXCJ9LERyb3Bkb3duVG9nZ2xlPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIERyb3Bkb3duVG9nZ2xlKCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybigwLF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShEcm9wZG93blRvZ2dsZSxlKSxEcm9wZG93blRvZ2dsZS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uIHJlbmRlcigpe3ZhciBlPXRoaXMucHJvcHMscj1lLm5vQ2FyZXQsbz1lLm9wZW4sdD1lLnVzZUFuY2hvcixzPWUuYnNDbGFzcyxhPWUuY2xhc3NOYW1lLHA9ZS5jaGlsZHJlbixsPSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShlLFtcIm5vQ2FyZXRcIixcIm9wZW5cIixcInVzZUFuY2hvclwiLFwiYnNDbGFzc1wiLFwiY2xhc3NOYW1lXCIsXCJjaGlsZHJlblwiXSk7ZGVsZXRlIGwuYnNSb2xlO3ZhciB1PXQ/X1NhZmVBbmNob3IuZGVmYXVsdDpfQnV0dG9uLmRlZmF1bHQsbj0hcjtyZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCh1LCgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSxsLHtyb2xlOlwiYnV0dG9uXCIsY2xhc3NOYW1lOigwLF9jbGFzc25hbWVzLmRlZmF1bHQpKGEscyksXCJhcmlhLWhhc3BvcHVwXCI6ITAsXCJhcmlhLWV4cGFuZGVkXCI6b30pLHB8fGwudGl0bGUsbiYmXCIgXCIsbiYmX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInNwYW5cIix7Y2xhc3NOYW1lOlwiY2FyZXRcIn0pKX0sRHJvcGRvd25Ub2dnbGV9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7RHJvcGRvd25Ub2dnbGUucHJvcFR5cGVzPXByb3BUeXBlcyxEcm9wZG93blRvZ2dsZS5kZWZhdWx0UHJvcHM9ZGVmYXVsdFByb3BzO3ZhciBfZGVmYXVsdD0oMCxfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoXCJkcm9wZG93bi10b2dnbGVcIixEcm9wZG93blRvZ2dsZSk7ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrUnliM0JrYjNkdVZHOW5aMnhsTG1weklsMHNJbTVoYldWeklqcGJJbDlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRaUxDSnlaWEYxYVhKbElpd2laWGh3YjNKMGN5SXNJbDlmWlhOTmIyUjFiR1VpTENKa1pXWmhkV3gwSWl3aVgyVjRkR1Z1WkhNeUlpd2lYMjlpYW1WamRGZHBkR2h2ZFhSUWNtOXdaWEowYVdWelRHOXZjMlV5SWl3aVgybHVhR1Z5YVhSelRHOXZjMlV5SWl3aVgzSmxZV04wSWl3aVgzQnliM0JVZVhCbGN5SXNJbDlqYkdGemMyNWhiV1Z6SWl3aVgwSjFkSFJ2YmlJc0lsOVRZV1psUVc1amFHOXlJaXdpWDJKdmIzUnpkSEpoY0ZWMGFXeHpJaXdpY0hKdmNGUjVjR1Z6SWl3aWJtOURZWEpsZENJc0ltSnZiMndpTENKdmNHVnVJaXdpZEdsMGJHVWlMQ0p6ZEhKcGJtY2lMQ0oxYzJWQmJtTm9iM0lpTENKa1pXWmhkV3gwVUhKdmNITWlMQ0ppYzFKdmJHVWlMQ0pFY205d1pHOTNibFJ2WjJkc1pTSXNJbDlTWldGamRDUkRiMjF3YjI1bGJuUWlMQ0poY0hCc2VTSXNJblJvYVhNaUxDSmhjbWQxYldWdWRITWlMQ0p3Y205MGIzUjVjR1VpTENKeVpXNWtaWElpTENKZmRHaHBjeVJ3Y205d2N5SXNJbkJ5YjNCeklpd2lZbk5EYkdGemN5SXNJbU5zWVhOelRtRnRaU0lzSW1Ob2FXeGtjbVZ1SWl3aVEyOXRjRzl1Wlc1MElpd2lkWE5sUTJGeVpYUWlMQ0pqY21WaGRHVkZiR1Z0Wlc1MElpd2ljbTlzWlNJc0ltRnlhV0V0YUdGemNHOXdkWEFpTENKaGNtbGhMV1Y0Y0dGdVpHVmtJaXdpWDJSbFptRjFiSFFpTENKdGIyUjFiR1VpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlJVRXNTVUZCU1VFc2RVSkJRWGxDUXl4UlFVRlJMSGRFUVVWeVEwTXNVVUZCVVVNc1dVRkJZU3hGUVVOeVFrUXNVVUZCVVVVc1lVRkJWU3hGUVVWc1FpeEpRVUZKUXl4VlFVRlpUQ3gxUWtGQmRVSkRMRkZCUVZFc01rTkJSVE5EU3l3clFrRkJhVU5PTEhWQ1FVRjFRa01zVVVGQlVTeG5SVUZGYUVWTkxHZENRVUZyUWxBc2RVSkJRWFZDUXl4UlFVRlJMR2xFUVVWcVJFOHNUMEZCVTFJc2RVSkJRWFZDUXl4UlFVRlJMRlZCUlhoRFVTeFhRVUZoVkN4MVFrRkJkVUpETEZGQlFWRXNaVUZGTlVOVExGbEJRV05XTEhWQ1FVRjFRa01zVVVGQlVTeGxRVVUzUTFVc1VVRkJWVmdzZFVKQlFYVkNReXhSUVVGUkxHRkJSWHBEVnl4WlFVRmpXaXgxUWtGQmRVSkRMRkZCUVZFc2FVSkJSVGREV1N4blFrRkJhMEphTEZGQlFWRXNNRUpCUlRGQ1lTeFZRVUZaTEVOQlEyUkRMRkZCUVZOT0xGZEJRVmRNTEZGQlFWRlpMRXRCUXpWQ1F5eExRVUZOVWl4WFFVRlhUQ3hSUVVGUldTeExRVU42UWtVc1RVRkJUMVFzVjBGQlYwd3NVVUZCVVdVc1QwRkRNVUpETEZWQlFWZFlMRmRCUVZkTUxGRkJRVkZaTEUxQlJUVkNTeXhoUVVGbExFTkJRMnBDU2l4TlFVRk5MRVZCUTA1SExGZEJRVmNzUlVGRFdFVXNUMEZCVVN4VlFVZE9ReXhsUVVWS0xGTkJRVlZETEVkQlIxSXNVMEZCVTBRc2FVSkJRMUFzVDBGQlQwTXNSVUZCYVVKRExFMUJRVTFETEV0QlFVMURMRmxCUVdORUxFdEJPRUp3UkN4UFFXcERRU3hGUVVGSmJrSXNaMEpCUVdkQ1NDeFRRVUZUYlVJc1pVRkJaMEpETEVkQlRXaERSQ3hsUVVGbFN5eFZRVVZ5UWtNc1QwRkJVeXhUUVVGVFFTeFRRVU4yUWl4SlFVRkpReXhGUVVGalNpeExRVUZMU3l4TlFVTnVRbWhDTEVWQlFWVmxMRVZCUVZsbUxGRkJRM1JDUlN4RlFVRlBZU3hGUVVGWllpeExRVU51UWtjc1JVRkJXVlVzUlVGQldWWXNWVUZEZUVKWkxFVkJRVlZHTEVWQlFWbEZMRkZCUTNSQ1F5eEZRVUZaU0N4RlFVRlpSeXhWUVVONFFrTXNSVUZCVjBvc1JVRkJXVWtzVTBGRGRrSklMRWRCUVZFc1JVRkJTWHBDTEN0Q1FVRXJRa1lzVTBGQlV6QkNMRVZCUVdFc1EwRkJReXhWUVVGWExFOUJRVkVzV1VGQllTeFZRVUZYTEZsQlFXRXNiMEpCUTNaSVF5eEZRVUZOVkN4UFFVTmlMRWxCUVVsaExFVkJRVmxtTEVWQlFWbFNMRmxCUVZsU0xGRkJRVlZQTEZGQlFWRlFMRkZCUTNSRVowTXNSMEZCV1hKQ0xFVkJTV2hDTEU5QlFVOVFMRTlCUVU5S0xGRkJRVkZwUXl4alFVRmpSaXhIUVVGWExFVkJRVWs1UWl4VlFVRlZSQ3hUUVVGVExFZEJRVWt5UWl4RlFVRlBMRU5CUXk5RlR5eExRVUZOTEZOQlEwNU1MRmRCUVZjc1JVRkJTWFpDTEZsQlFWbE9MRk5CUVZNMlFpeEZRVUZYUkN4SFFVTXZRMDhzYVVKQlFXbENMRVZCUTJwQ1F5eG5Ra0ZCYVVKMlFpeEpRVU5tYVVJc1IwRkJXVWdzUlVGQlRXSXNUVUZCVDJ0Q0xFZEJRVmtzU1VGQlMwRXNSMEZCV1RWQ0xFOUJRVTlLTEZGQlFWRnBReXhqUVVGakxFOUJRVkVzUTBGRE4wWktMRlZCUVZjc1dVRkpVbFlzWlVGc1ExUXNRMEZ0UTBWbUxFOUJRVTlLTEZGQlFWRXJRaXhYUVVWcVFsb3NaVUZCWlZRc1ZVRkJXVUVzVlVGRE0wSlRMR1ZCUVdWR0xHRkJRV1ZCTEdGQlJUbENMRWxCUVVsdlFpeFZRVUZYTEVWQlFVazFRaXhuUWtGQlowSnRRaXhUUVVGVExHdENRVUZ0UWxRc1owSkJSUzlFY2tJc1VVRkJVVVVzVVVGQlZYRkRMRk5CUTJ4Q1F5eFBRVUZQZUVNc1VVRkJWVUVzVVVGQmFVSWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F0WW05dmRITjBjbUZ3TDJ4cFlpOUVjbTl3Wkc5M2JsUnZaMmRzWlM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKSxfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9mYWRlU3R5bGVzLF9leHRlbmRzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSksX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9jbGFzc25hbWVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpLF9yZWFjdD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSksX3Byb3BUeXBlcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKSxfVHJhbnNpdGlvbj1faW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3QtdHJhbnNpdGlvbi1ncm91cC9UcmFuc2l0aW9uXCIpKSxwcm9wVHlwZXM9e2luOl9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLG1vdW50T25FbnRlcjpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCx1bm1vdW50T25FeGl0Ol9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLGFwcGVhcjpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCx0aW1lb3V0Ol9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsb25FbnRlcjpfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxvbkVudGVyaW5nOl9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLG9uRW50ZXJlZDpfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxvbkV4aXQ6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsb25FeGl0aW5nOl9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLG9uRXhpdGVkOl9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jfSxkZWZhdWx0UHJvcHM9e2luOiExLHRpbWVvdXQ6MzAwLG1vdW50T25FbnRlcjohMSx1bm1vdW50T25FeGl0OiExLGFwcGVhcjohMX0sZmFkZVN0eWxlcz0oKF9mYWRlU3R5bGVzPXt9KVtfVHJhbnNpdGlvbi5FTlRFUklOR109XCJpblwiLF9mYWRlU3R5bGVzW19UcmFuc2l0aW9uLkVOVEVSRURdPVwiaW5cIixfZmFkZVN0eWxlcyksRmFkZT1mdW5jdGlvbihlKXtmdW5jdGlvbiBGYWRlKCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybigwLF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShGYWRlLGUpLEZhZGUucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXt2YXIgZT10aGlzLnByb3BzLHI9ZS5jbGFzc05hbWUsdD1lLmNoaWxkcmVuLG89KDAsX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKGUsW1wiY2xhc3NOYW1lXCIsXCJjaGlsZHJlblwiXSk7cmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1RyYW5zaXRpb24uZGVmYXVsdCxvLGZ1bmN0aW9uKGUsbyl7cmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNsb25lRWxlbWVudCh0LCgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSxvLHtjbGFzc05hbWU6KDAsX2NsYXNzbmFtZXMuZGVmYXVsdCkoXCJmYWRlXCIscix0LnByb3BzLmNsYXNzTmFtZSxmYWRlU3R5bGVzW2VdKX0pKX0pfSxGYWRlfShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO0ZhZGUucHJvcFR5cGVzPXByb3BUeXBlcyxGYWRlLmRlZmF1bHRQcm9wcz1kZWZhdWx0UHJvcHM7dmFyIF9kZWZhdWx0PUZhZGU7ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrWmhaR1V1YW5NaVhTd2libUZ0WlhNaU9sc2lYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENJc0luSmxjWFZwY21VaUxDSmZhVzUwWlhKdmNGSmxjWFZwY21WWGFXeGtZMkZ5WkNJc0ltVjRjRzl5ZEhNaUxDSmZYMlZ6VFc5a2RXeGxJaXdpWkdWbVlYVnNkQ0lzSWw5bVlXUmxVM1I1YkdWeklpd2lYMlY0ZEdWdVpITXlJaXdpWDI5aWFtVmpkRmRwZEdodmRYUlFjbTl3WlhKMGFXVnpURzl2YzJVeUlpd2lYMmx1YUdWeWFYUnpURzl2YzJVeUlpd2lYMk5zWVhOemJtRnRaWE1pTENKZmNtVmhZM1FpTENKZmNISnZjRlI1Y0dWeklpd2lYMVJ5WVc1emFYUnBiMjRpTENKd2NtOXdWSGx3WlhNaUxDSnBiaUlzSW1KdmIyd2lMQ0p0YjNWdWRFOXVSVzUwWlhJaUxDSjFibTF2ZFc1MFQyNUZlR2wwSWl3aVlYQndaV0Z5SWl3aWRHbHRaVzkxZENJc0ltNTFiV0psY2lJc0ltOXVSVzUwWlhJaUxDSm1kVzVqSWl3aWIyNUZiblJsY21sdVp5SXNJbTl1Ulc1MFpYSmxaQ0lzSW05dVJYaHBkQ0lzSW05dVJYaHBkR2x1WnlJc0ltOXVSWGhwZEdWa0lpd2laR1ZtWVhWc2RGQnliM0J6SWl3aVptRmtaVk4wZVd4bGN5SXNJa1ZPVkVWU1NVNUhJaXdpUlU1VVJWSkZSQ0lzSWtaaFpHVWlMQ0pmVW1WaFkzUWtRMjl0Y0c5dVpXNTBJaXdpWVhCd2JIa2lMQ0owYUdseklpd2lZWEpuZFcxbGJuUnpJaXdpY0hKdmRHOTBlWEJsSWl3aWNtVnVaR1Z5SWl3aVgzUm9hWE1rY0hKdmNITWlMQ0p3Y205d2N5SXNJbU5zWVhOelRtRnRaU0lzSW1Ob2FXeGtjbVZ1SWl3aVkzSmxZWFJsUld4bGJXVnVkQ0lzSW5OMFlYUjFjeUlzSW1sdWJtVnlVSEp2Y0hNaUxDSmpiRzl1WlVWc1pXMWxiblFpTENKRGIyMXdiMjVsYm5RaUxDSmZaR1ZtWVhWc2RDSXNJbTF2WkhWc1pTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZGUVN4SlFVRkpRU3gxUWtGQmVVSkRMRkZCUVZFc2QwUkJSV3BEUXl4M1FrRkJNRUpFTEZGQlFWRXNlVVJCUlhSRFJTeFJRVUZSUXl4WlFVRmhMRVZCUTNKQ1JDeFJRVUZSUlN4aFFVRlZMRVZCUld4Q0xFbEJZMGxETEZsQlpFRkRMRlZCUVZsUUxIVkNRVUYxUWtNc1VVRkJVU3d5UTBGRk0wTlBMQ3RDUVVGcFExSXNkVUpCUVhWQ1F5eFJRVUZSTEdkRlFVVm9SVkVzWjBKQlFXdENWQ3gxUWtGQmRVSkRMRkZCUVZFc2FVUkJSV3BFVXl4WlFVRmpWaXgxUWtGQmRVSkRMRkZCUVZFc1pVRkZOME5WTEU5QlFWTllMSFZDUVVGMVFrTXNVVUZCVVN4VlFVVjRRMWNzVjBGQllWb3NkVUpCUVhWQ1F5eFJRVUZSTEdWQlJUVkRXU3haUVVGaldDeDNRa0ZCZDBKRUxGRkJRVkVzYzBOQlNUbERZU3hWUVVGWkxFTkJTV1JETEVkQlFVbElMRmRCUVZkUUxGRkJRVkZYTEV0QlMzWkNReXhoUVVGalRDeFhRVUZYVUN4UlFVRlJWeXhMUVV0cVEwVXNZMEZCWlU0c1YwRkJWMUFzVVVGQlVWY3NTMEZOYkVOSExFOUJRVkZRTEZkQlFWZFFMRkZCUVZGWExFdEJUek5DU1N4UlFVRlRVaXhYUVVGWFVDeFJRVUZSWjBJc1QwRkxOVUpETEZGQlFWTldMRmRCUVZkUUxGRkJRVkZyUWl4TFFVczFRa01zVjBGQldWb3NWMEZCVjFBc1VVRkJVV3RDTEV0QlN5OUNSU3hWUVVGWFlpeFhRVUZYVUN4UlFVRlJhMElzUzBGTE9VSkhMRTlCUVZGa0xGZEJRVmRRTEZGQlFWRnJRaXhMUVVzelFra3NWVUZCVjJZc1YwRkJWMUFzVVVGQlVXdENMRXRCU3psQ1N5eFRRVUZWYUVJc1YwRkJWMUFzVVVGQlVXdENMRTFCUlROQ1RTeGhRVUZsTEVOQlEycENaQ3hKUVVGSkxFVkJRMHBMTEZGQlFWTXNTVUZEVkVnc1kwRkJZeXhGUVVOa1F5eGxRVUZsTEVWQlEyWkRMRkZCUVZFc1IwRkZUbGNzWVVGQlkzaENMRmxCUVdNc1NVRkJaMEpQTEZsQlFWbHJRaXhWUVVGWkxFdEJRVTE2UWl4WlFVRlpUeXhaUVVGWmJVSXNVMEZCVnl4TFFVRk5NVUlzWVVGRmJrZ3lRaXhMUVVWS0xGTkJRVlZETEVkQlIxSXNVMEZCVTBRc1QwRkRVQ3hQUVVGUFF5eEZRVUZwUWtNc1RVRkJUVU1zUzBGQlRVTXNXVUZCWTBRc1MwRnBRbkJFTEU5QmNFSkJMRVZCUVVrelFpeG5Ra0ZCWjBKS0xGTkJRVk0wUWl4TFFVRk5ReXhIUVUxMFFrUXNTMEZCUzBzc1ZVRkZXRU1zVDBGQlV5eFRRVUZUUVN4VFFVTjJRaXhKUVVGSlF5eEZRVUZqU2l4TFFVRkxTeXhOUVVOdVFrTXNSVUZCV1VZc1JVRkJXVVVzVlVGRGVFSkRMRVZCUVZkSUxFVkJRVmxITEZOQlEzWkNSaXhIUVVGUkxFVkJRVWxxUXl3clFrRkJLMEpJTEZOQlFWTnRReXhGUVVGaExFTkJRVU1zV1VGQllTeGhRVU51Uml4UFFVRlBOMElzVDBGQlQwNHNVVUZCVVhWRExHTkJRV012UWl4WlFVRlpVaXhSUVVGVGIwTXNSVUZCVHl4VFFVRlZTU3hGUVVGUlF5eEhRVU5vUml4UFFVRlBia01zVDBGQlQwNHNVVUZCVVRCRExHRkJRV0ZLTEVkQlFWVXNSVUZCU1hCRExGVkJRVlZHTEZOQlFWTXNSMEZCU1hsRExFVkJRVmtzUTBGRGJFWktMRmRCUVZjc1JVRkJTV2hETEZsQlFWbE1MRk5CUVZNc1QwRkJVWEZETEVWQlFWZERMRVZCUVZOR0xFMUJRVTFETEZWQlFWZGFMRmRCUVZkbExGVkJTek5HV2l4TFFYSkNWQ3hEUVhOQ1JYUkNMRTlCUVU5T0xGRkJRVkV5UXl4WFFVVnFRbVlzUzBGQlMyNUNMRlZCUVZsQkxGVkJRMnBDYlVJc1MwRkJTMG9zWVVGQlpVRXNZVUZEY0VJc1NVRkJTVzlDTEZOQlFWZG9RaXhMUVVObU9VSXNVVUZCVVVVc1VVRkJWVFJETEZOQlEyeENReXhQUVVGUEwwTXNVVUZCVlVFc1VVRkJhVUlpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdFltOXZkSE4wY21Gd0wyeHBZaTlHWVdSbExtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9leHRlbmRzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSksX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9jbGFzc25hbWVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpLF9yZWFjdD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSksX3Byb3BUeXBlcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKSxfZWxlbWVudFR5cGU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlcy1leHRyYS9saWIvZWxlbWVudFR5cGVcIikpLF9ib290c3RyYXBVdGlscz1yZXF1aXJlKFwiLi91dGlscy9ib290c3RyYXBVdGlsc1wiKSxwcm9wVHlwZXM9e2hvcml6b250YWw6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsaW5saW5lOl9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLGNvbXBvbmVudENsYXNzOl9lbGVtZW50VHlwZS5kZWZhdWx0fSxkZWZhdWx0UHJvcHM9e2hvcml6b250YWw6ITEsaW5saW5lOiExLGNvbXBvbmVudENsYXNzOlwiZm9ybVwifSxGb3JtPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIEZvcm0oKXtyZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9cmV0dXJuKDAsX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKEZvcm0sZSksRm9ybS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uIHJlbmRlcigpe3ZhciBlPXRoaXMucHJvcHMscj1lLmhvcml6b250YWwsdD1lLmlubGluZSxvPWUuY29tcG9uZW50Q2xhc3Mscz1lLmNsYXNzTmFtZSxpPSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShlLFtcImhvcml6b250YWxcIixcImlubGluZVwiLFwiY29tcG9uZW50Q2xhc3NcIixcImNsYXNzTmFtZVwiXSkscD0oMCxfYm9vdHN0cmFwVXRpbHMuc3BsaXRCc1Byb3BzKShpKSxsPXBbMF0sYT1wWzFdLHU9W107cmV0dXJuIHImJnUucHVzaCgoMCxfYm9vdHN0cmFwVXRpbHMucHJlZml4KShsLFwiaG9yaXpvbnRhbFwiKSksdCYmdS5wdXNoKCgwLF9ib290c3RyYXBVdGlscy5wcmVmaXgpKGwsXCJpbmxpbmVcIikpLF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQobywoMCxfZXh0ZW5kczIuZGVmYXVsdCkoe30sYSx7Y2xhc3NOYW1lOigwLF9jbGFzc25hbWVzLmRlZmF1bHQpKHMsdSl9KSl9LEZvcm19KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7Rm9ybS5wcm9wVHlwZXM9cHJvcFR5cGVzLEZvcm0uZGVmYXVsdFByb3BzPWRlZmF1bHRQcm9wczt2YXIgX2RlZmF1bHQ9KDAsX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKFwiZm9ybVwiLEZvcm0pO2V4cG9ydHMuZGVmYXVsdD1fZGVmYXVsdCxtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa1p2Y20wdWFuTWlYU3dpYm1GdFpYTWlPbHNpWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDSXNJbkpsY1hWcGNtVWlMQ0psZUhCdmNuUnpJaXdpWDE5bGMwMXZaSFZzWlNJc0ltUmxabUYxYkhRaUxDSmZaWGgwWlc1a2N6SWlMQ0pmYjJKcVpXTjBWMmwwYUc5MWRGQnliM0JsY25ScFpYTk1iMjl6WlRJaUxDSmZhVzVvWlhKcGRITk1iMjl6WlRJaUxDSmZZMnhoYzNOdVlXMWxjeUlzSWw5eVpXRmpkQ0lzSWw5d2NtOXdWSGx3WlhNaUxDSmZaV3hsYldWdWRGUjVjR1VpTENKZlltOXZkSE4wY21Gd1ZYUnBiSE1pTENKd2NtOXdWSGx3WlhNaUxDSm9iM0pwZW05dWRHRnNJaXdpWW05dmJDSXNJbWx1YkdsdVpTSXNJbU52YlhCdmJtVnVkRU5zWVhOeklpd2laR1ZtWVhWc2RGQnliM0J6SWl3aVJtOXliU0lzSWw5U1pXRmpkQ1JEYjIxd2IyNWxiblFpTENKaGNIQnNlU0lzSW5Sb2FYTWlMQ0poY21kMWJXVnVkSE1pTENKd2NtOTBiM1I1Y0dVaUxDSnlaVzVrWlhJaUxDSmZkR2hwY3lSd2NtOXdjeUlzSW5CeWIzQnpJaXdpUTI5dGNHOXVaVzUwSWl3aVkyeGhjM05PWVcxbElpd2lYM053YkdsMFFuTlFjbTl3Y3lJc0luTndiR2wwUW5OUWNtOXdjeUlzSW1KelVISnZjSE1pTENKbGJHVnRaVzUwVUhKdmNITWlMQ0pqYkdGemMyVnpJaXdpY0hWemFDSXNJbkJ5WldacGVDSXNJbU55WldGMFpVVnNaVzFsYm5RaUxDSmZaR1ZtWVhWc2RDSXNJbUp6UTJ4aGMzTWlMQ0p0YjJSMWJHVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUlVFc1NVRkJTVUVzZFVKQlFYbENReXhSUVVGUkxIZEVRVVZ5UTBNc1VVRkJVVU1zV1VGQllTeEZRVU55UWtRc1VVRkJVVVVzWVVGQlZTeEZRVVZzUWl4SlFVRkpReXhWUVVGWlRDeDFRa0ZCZFVKRExGRkJRVkVzTWtOQlJUTkRTeXdyUWtGQmFVTk9MSFZDUVVGMVFrTXNVVUZCVVN4blJVRkZhRVZOTEdkQ1FVRnJRbEFzZFVKQlFYVkNReXhSUVVGUkxHbEVRVVZxUkU4c1dVRkJZMUlzZFVKQlFYVkNReXhSUVVGUkxHVkJSVGREVVN4UFFVRlRWQ3gxUWtGQmRVSkRMRkZCUVZFc1ZVRkZlRU5UTEZkQlFXRldMSFZDUVVGMVFrTXNVVUZCVVN4bFFVVTFRMVVzWVVGQlpWZ3NkVUpCUVhWQ1F5eFJRVUZSTEhGRFFVVTVRMWNzWjBKQlFXdENXQ3hSUVVGUkxEQkNRVVV4UWxrc1ZVRkJXU3hEUVVOa1F5eFhRVUZaU2l4WFFVRlhUaXhSUVVGUlZ5eExRVU12UWtNc1QwRkJVVTRzVjBGQlYwNHNVVUZCVVZjc1MwRkRNMEpGTEdWQlFXZENUaXhoUVVGaFVDeFRRVVV6UW1Nc1lVRkJaU3hEUVVOcVFrb3NXVUZCV1N4RlFVTmFSU3hSUVVGUkxFVkJRMUpETEdWQlFXZENMRkZCUjJSRkxFdEJSVW9zVTBGQlZVTXNSMEZIVWl4VFFVRlRSQ3hQUVVOUUxFOUJRVTlETEVWQlFXbENReXhOUVVGTlF5eExRVUZOUXl4WlFVRmpSQ3hMUVdkRGNFUXNUMEZ1UTBFc1JVRkJTV1lzWjBKQlFXZENTQ3hUUVVGVFpTeExRVUZOUXl4SFFVMTBRa1FzUzBGQlMwc3NWVUZGV0VNc1QwRkJVeXhUUVVGVFFTeFRRVU4yUWl4SlFVRkpReXhGUVVGalNpeExRVUZMU3l4TlFVTnVRbUlzUlVGQllWa3NSVUZCV1Zvc1YwRkRla0pGTEVWQlFWTlZMRVZCUVZsV0xFOUJRM0pDV1N4RlFVRlpSaXhGUVVGWlZDeGxRVU40UWxrc1JVRkJXVWdzUlVGQldVY3NWVUZEZUVKR0xFZEJRVkVzUlVGQlNYSkNMQ3RDUVVFclFrWXNVMEZCVTNOQ0xFVkJRV0VzUTBGQlF5eGhRVUZqTEZOQlFWVXNhVUpCUVd0Q0xHTkJSVFZIU1N4SFFVRm5RaXhGUVVGSmJFSXNaMEpCUVdkQ2JVSXNZMEZCWTBvc1IwRkRiRVJMTEVWQlFWVkdMRVZCUVdNc1IwRkRlRUpITEVWQlFXVklMRVZCUVdNc1IwRkZOMEpKTEVWQlFWVXNSMEZWWkN4UFFWSkpjRUlzUjBGRFJtOUNMRVZCUVZGRExFMUJRVXNzUlVGQlNYWkNMR2RDUVVGblFuZENMRkZCUVZGS0xFVkJRVk1zWlVGSGFFUm9RaXhIUVVOR2EwSXNSVUZCVVVNc1RVRkJTeXhGUVVGSmRrSXNaMEpCUVdkQ2QwSXNVVUZCVVVvc1JVRkJVeXhYUVVjM1EzWkNMRTlCUVU5TUxGRkJRVkZwUXl4alFVRmpWQ3hIUVVGWExFVkJRVWwyUWl4VlFVRlZSQ3hUUVVGVExFZEJRVWsyUWl4RlFVRmpMRU5CUTNSR1NpeFhRVUZYTEVWQlFVbHlRaXhaUVVGWlNpeFRRVUZUZVVJc1JVRkJWMHNzVDBGSk5VTm1MRXRCY0VOVUxFTkJjVU5GVml4UFFVRlBUQ3hSUVVGUmQwSXNWMEZGYWtKVUxFdEJRVXRPTEZWQlFWbEJMRlZCUTJwQ1RTeExRVUZMUkN4aFFVRmxRU3hoUVVWd1FpeEpRVUZKYjBJc1ZVRkJWeXhGUVVGSk1VSXNaMEpCUVdkQ01rSXNVMEZCVXl4UFFVRlJjRUlzVFVGRmNFUnFRaXhSUVVGUlJTeFJRVUZWYTBNc1UwRkRiRUpGTEU5QlFVOTBReXhSUVVGVlFTeFJRVUZwUWlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDMWliMjkwYzNSeVlYQXZiR2xpTDBadmNtMHVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0PXJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO2V4cG9ydHMuX19lc01vZHVsZT0hMCxleHBvcnRzLmRlZmF1bHQ9dm9pZCAwO3ZhciBfZXh0ZW5kczI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSksX2luaGVyaXRzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKSxfY2xhc3NuYW1lcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKSxfcmVhY3Q9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpLF9wcm9wVHlwZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSksX2VsZW1lbnRUeXBlPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlXCIpKSxfd2FybmluZz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ3YXJuaW5nXCIpKSxfRm9ybUNvbnRyb2xGZWVkYmFjaz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0Zvcm1Db250cm9sRmVlZGJhY2tcIikpLF9Gb3JtQ29udHJvbFN0YXRpYz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0Zvcm1Db250cm9sU3RhdGljXCIpKSxfYm9vdHN0cmFwVXRpbHM9cmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIiksX1N0eWxlQ29uZmlnPXJlcXVpcmUoXCIuL3V0aWxzL1N0eWxlQ29uZmlnXCIpLHByb3BUeXBlcz17Y29tcG9uZW50Q2xhc3M6X2VsZW1lbnRUeXBlLmRlZmF1bHQsdHlwZTpfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLGlkOl9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsaW5wdXRSZWY6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmN9LGRlZmF1bHRQcm9wcz17Y29tcG9uZW50Q2xhc3M6XCJpbnB1dFwifSxjb250ZXh0VHlwZXM9eyRic19mb3JtR3JvdXA6X3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdH0sRm9ybUNvbnRyb2w9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gRm9ybUNvbnRyb2woKXtyZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9cmV0dXJuKDAsX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKEZvcm1Db250cm9sLGUpLEZvcm1Db250cm9sLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIGUsdD10aGlzLmNvbnRleHQuJGJzX2Zvcm1Hcm91cCxyPXQmJnQuY29udHJvbElkLG89dGhpcy5wcm9wcyxzPW8uY29tcG9uZW50Q2xhc3MsaT1vLnR5cGUsbD1vLmlkLG49dm9pZCAwPT09bD9yOmwscD1vLmlucHV0UmVmLGE9by5jbGFzc05hbWUsdT1vLmJzU2l6ZSxmPSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShvLFtcImNvbXBvbmVudENsYXNzXCIsXCJ0eXBlXCIsXCJpZFwiLFwiaW5wdXRSZWZcIixcImNsYXNzTmFtZVwiLFwiYnNTaXplXCJdKSxfPSgwLF9ib290c3RyYXBVdGlscy5zcGxpdEJzUHJvcHMpKGYpLGM9X1swXSxkPV9bMV07aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKDAsX3dhcm5pbmcuZGVmYXVsdCkobnVsbD09cnx8bj09PXIsXCJgY29udHJvbElkYCBpcyBpZ25vcmVkIG9uIGA8Rm9ybUNvbnRyb2w+YCB3aGVuIGBpZGAgaXMgc3BlY2lmaWVkLlwiKSxcImZpbGVcIiE9PWkmJihlPSgwLF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkoYykpLHUpe3ZhciBtPV9TdHlsZUNvbmZpZy5TSVpFX01BUFt1XXx8dTtlWygwLF9ib290c3RyYXBVdGlscy5wcmVmaXgpKHtic0NsYXNzOlwiaW5wdXRcIn0sbSldPSEwfXJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KHMsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LGQse3R5cGU6aSxpZDpuLHJlZjpwLGNsYXNzTmFtZTooMCxfY2xhc3NuYW1lcy5kZWZhdWx0KShhLGUpfSkpfSxGb3JtQ29udHJvbH0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtGb3JtQ29udHJvbC5wcm9wVHlwZXM9cHJvcFR5cGVzLEZvcm1Db250cm9sLmRlZmF1bHRQcm9wcz1kZWZhdWx0UHJvcHMsRm9ybUNvbnRyb2wuY29udGV4dFR5cGVzPWNvbnRleHRUeXBlcyxGb3JtQ29udHJvbC5GZWVkYmFjaz1fRm9ybUNvbnRyb2xGZWVkYmFjay5kZWZhdWx0LEZvcm1Db250cm9sLlN0YXRpYz1fRm9ybUNvbnRyb2xTdGF0aWMuZGVmYXVsdDt2YXIgX2RlZmF1bHQ9KDAsX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKFwiZm9ybS1jb250cm9sXCIsKDAsX2Jvb3RzdHJhcFV0aWxzLmJzU2l6ZXMpKFtfU3R5bGVDb25maWcuU2l6ZS5TTUFMTCxfU3R5bGVDb25maWcuU2l6ZS5MQVJHRV0sRm9ybUNvbnRyb2wpKTtleHBvcnRzLmRlZmF1bHQ9X2RlZmF1bHQsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtadmNtMURiMjUwY205c0xtcHpJbDBzSW01aGJXVnpJanBiSWw5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUWlMQ0p5WlhGMWFYSmxJaXdpWlhod2IzSjBjeUlzSWw5ZlpYTk5iMlIxYkdVaUxDSmtaV1poZFd4MElpd2lYMlY0ZEdWdVpITXlJaXdpWDI5aWFtVmpkRmRwZEdodmRYUlFjbTl3WlhKMGFXVnpURzl2YzJVeUlpd2lYMmx1YUdWeWFYUnpURzl2YzJVeUlpd2lYMk5zWVhOemJtRnRaWE1pTENKZmNtVmhZM1FpTENKZmNISnZjRlI1Y0dWeklpd2lYMlZzWlcxbGJuUlVlWEJsSWl3aVgzZGhjbTVwYm1jaUxDSmZSbTl5YlVOdmJuUnliMnhHWldWa1ltRmpheUlzSWw5R2IzSnRRMjl1ZEhKdmJGTjBZWFJwWXlJc0lsOWliMjkwYzNSeVlYQlZkR2xzY3lJc0lsOVRkSGxzWlVOdmJtWnBaeUlzSW5CeWIzQlVlWEJsY3lJc0ltTnZiWEJ2Ym1WdWRFTnNZWE56SWl3aWRIbHdaU0lzSW5OMGNtbHVaeUlzSW1sa0lpd2lhVzV3ZFhSU1pXWWlMQ0ptZFc1aklpd2laR1ZtWVhWc2RGQnliM0J6SWl3aVkyOXVkR1Y0ZEZSNWNHVnpJaXdpSkdKelgyWnZjbTFIY205MWNDSXNJbTlpYW1WamRDSXNJa1p2Y20xRGIyNTBjbTlzSWl3aVgxSmxZV04wSkVOdmJYQnZibVZ1ZENJc0ltRndjR3g1SWl3aWRHaHBjeUlzSW1GeVozVnRaVzUwY3lJc0luQnliM1J2ZEhsd1pTSXNJbkpsYm1SbGNpSXNJbU5zWVhOelpYTWlMQ0ptYjNKdFIzSnZkWEFpTENKamIyNTBaWGgwSWl3aVkyOXVkSEp2YkVsa0lpd2lYM1JvYVhNa2NISnZjSE1pTENKd2NtOXdjeUlzSWtOdmJYQnZibVZ1ZENJc0lsOTBhR2x6SkhCeWIzQnpKR2xrSWl3aVkyeGhjM05PWVcxbElpd2lZbk5UYVhwbElpd2lYM053YkdsMFFuTlFjbTl3Y3lJc0luTndiR2wwUW5OUWNtOXdjeUlzSW1KelVISnZjSE1pTENKbGJHVnRaVzUwVUhKdmNITWlMQ0p3Y205alpYTnpJaXdpWlc1Mklpd2lUazlFUlY5RlRsWWlMQ0puWlhSRGJHRnpjMU5sZENJc0luTnBlbVVpTENKVFNWcEZYMDFCVUNJc0luQnlaV1pwZUNJc0ltSnpRMnhoYzNNaUxDSmpjbVZoZEdWRmJHVnRaVzUwSWl3aWNtVm1JaXdpUm1WbFpHSmhZMnNpTENKVGRHRjBhV01pTENKZlpHVm1ZWFZzZENJc0ltSnpVMmw2WlhNaUxDSlRhWHBsSWl3aVUwMUJURXdpTENKTVFWSkhSU0lzSW0xdlpIVnNaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRlFTeEpRVUZKUVN4MVFrRkJlVUpETEZGQlFWRXNkMFJCUlhKRFF5eFJRVUZSUXl4WlFVRmhMRVZCUTNKQ1JDeFJRVUZSUlN4aFFVRlZMRVZCUld4Q0xFbEJRVWxETEZWQlFWbE1MSFZDUVVGMVFrTXNVVUZCVVN3eVEwRkZNME5MTEN0Q1FVRnBRMDRzZFVKQlFYVkNReXhSUVVGUkxHZEZRVVZvUlUwc1owSkJRV3RDVUN4MVFrRkJkVUpETEZGQlFWRXNhVVJCUldwRVR5eFpRVUZqVWl4MVFrRkJkVUpETEZGQlFWRXNaVUZGTjBOUkxFOUJRVk5VTEhWQ1FVRjFRa01zVVVGQlVTeFZRVVY0UTFNc1YwRkJZVllzZFVKQlFYVkNReXhSUVVGUkxHVkJSVFZEVlN4aFFVRmxXQ3gxUWtGQmRVSkRMRkZCUVZFc2NVTkJSVGxEVnl4VFFVRlhXaXgxUWtGQmRVSkRMRkZCUVZFc1dVRkZNVU5aTEhGQ1FVRjFRbUlzZFVKQlFYVkNReXhSUVVGUkxEQkNRVVYwUkdFc2JVSkJRWEZDWkN4MVFrRkJkVUpETEZGQlFWRXNkMEpCUlhCRVl5eG5Ra0ZCYTBKa0xGRkJRVkVzTUVKQlJURkNaU3hoUVVGbFppeFJRVUZSTEhWQ1FVVjJRbWRDTEZWQlFWa3NRMEZEWkVNc1pVRkJaMEpRTEdGQlFXRlFMRkZCU3pkQ1pTeExRVUZOVkN4WFFVRlhUaXhSUVVGUlowSXNUMEZMZWtKRExFZEJRVWxZTEZkQlFWZE9MRkZCUVZGblFpeFBRVk4yUWtVc1UwRkJWVm9zVjBGQlYwNHNVVUZCVVcxQ0xFMUJSVE5DUXl4aFFVRmxMRU5CUTJwQ1RpeGxRVUZuUWl4VFFVVmtUeXhoUVVGbExFTkJRMnBDUXl4alFVRmxhRUlzVjBGQlYwNHNVVUZCVVhWQ0xGRkJSMmhEUXl4WlFVVktMRk5CUVZWRExFZEJSMUlzVTBGQlUwUXNZMEZEVUN4UFFVRlBReXhGUVVGcFFrTXNUVUZCVFVNc1MwRkJUVU1zV1VGQlkwUXNTMEVyUTNCRUxFOUJiRVJCTEVWQlFVbDRRaXhuUWtGQlowSklMRk5CUVZOM1FpeFpRVUZoUXl4SFFVMDNRa1FzV1VGQldVc3NWVUZGYkVKRExFOUJRVk1zVTBGQlUwRXNVMEZEZGtJc1NVRnJRa2xETEVWQmJFSkJReXhGUVVGWlRDeExRVUZMVFN4UlFVRlJXQ3hqUVVONlFsa3NSVUZCV1VZc1IwRkJZVUVzUlVGQlZVVXNWVUZEYmtORExFVkJRV05TTEV0QlFVdFRMRTFCUTI1Q1F5eEZRVUZaUml4RlFVRlpja0lzWlVGRGVFSkRMRVZCUVU5dlFpeEZRVUZaY0VJc1MwRkRia0oxUWl4RlFVRnBRa2dzUlVGQldXeENMRWRCUXpkQ1FTeFBRVUYzUWl4SlFVRnVRbkZDTEVWQlFUUkNTaXhGUVVGWlNTeEZRVU0zUTNCQ0xFVkJRVmRwUWl4RlFVRlpha0lzVTBGRGRrSnhRaXhGUVVGWlNpeEZRVUZaU1N4VlFVTjRRa01zUlVGQlUwd3NSVUZCV1Vzc1QwRkRja0pLTEVkQlFWRXNSVUZCU1d4RExDdENRVUVyUWtZc1UwRkJVMjFETEVWQlFXRXNRMEZCUXl4cFFrRkJhMElzVDBGQlVTeExRVUZOTEZkQlFWa3NXVUZCWVN4WFFVVXpTRTBzUjBGQlowSXNSVUZCU1RsQ0xHZENRVUZuUWl0Q0xHTkJRV05PTEVkQlEyeEVUeXhGUVVGVlJpeEZRVUZqTEVkQlEzaENSeXhGUVVGbFNDeEZRVUZqTEVkQldXcERMRWRCVm5sQ0xHVkJRWHBDU1N4UlFVRlJReXhKUVVGSlF5eFhRVUUwUWl4RlFVRkpka01zVTBGQlUxSXNVMEZCYzBJc1RVRkJZbXRETEVkQlFYRkNha0lzU1VGQlQybENMRVZCUVZjc2NVVkJTWGhHTEZOQlFWUnVRaXhKUVVOR1owSXNSMEZCVlN4RlFVRkpjRUlzWjBKQlFXZENjVU1zWVVGQllVd3NTVUZMZWtOSUxFVkJRVkVzUTBGRFZpeEpRVUZKVXl4RlFVRlBja01zWVVGQllYTkRMRk5CUVZOV0xFbEJRVmRCTEVWQlF6VkRWQ3hIUVVGUkxFVkJRVWx3UWl4blFrRkJaMEozUXl4UlFVRlJMRU5CUTJ4RFF5eFJRVUZUTEZOQlExSklMRXRCUVZNc1JVRkhaQ3hQUVVGUE5VTXNUMEZCVDB3c1VVRkJVWEZFTEdOQlFXTm9RaXhIUVVGWExFVkJRVWx3UXl4VlFVRlZSQ3hUUVVGVExFZEJRVWswUXl4RlFVRmpMRU5CUTNSR04wSXNTMEZCVFVFc1JVRkRUa1VzUjBGQlNVRXNSVUZEU25GRExFbEJRVXR3UXl4RlFVTk1jVUlzVjBGQlZ5eEZRVUZKYmtNc1dVRkJXVW9zVTBGQlUzVkRMRVZCUVZkU0xFOUJTVFZEVUN4WlFXNUVWQ3hEUVc5RVJXNUNMRTlCUVU5TUxGRkJRVkZ4UXl4WFFVVnFRbUlzV1VGQldWZ3NWVUZCV1VFc1ZVRkRlRUpYTEZsQlFWbEtMR0ZCUVdWQkxHRkJRek5DU1N4WlFVRlpTQ3hoUVVGbFFTeGhRVU16UWtjc1dVRkJXU3RDTEZOQlFWYzVReXh4UWtGQmNVSlVMRkZCUXpWRGQwSXNXVUZCV1dkRExFOUJRVk01UXl4dFFrRkJiVUpXTEZGQlJYaERMRWxCUVVsNVJDeFZRVUZYTEVWQlFVazVReXhuUWtGQlowSjVReXhUUVVGVExHZENRVUZuUWl4RlFVRkpla01zWjBKQlFXZENLME1zVTBGQlV5eERRVUZET1VNc1lVRkJZU3RETEV0QlFVdERMRTFCUVU5b1JDeGhRVUZoSzBNc1MwRkJTMFVzVDBGQlVYSkRMR05CUlRkSk1VSXNVVUZCVVVVc1VVRkJWWGxFTEZOQlEyeENTeXhQUVVGUGFFVXNVVUZCVlVFc1VVRkJhVUlpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdFltOXZkSE4wY21Gd0wyeHBZaTlHYjNKdFEyOXVkSEp2YkM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PXZvaWQgMDt2YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfZXh0ZW5kczI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpLF9pbmhlcml0c0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSksX2NsYXNzbmFtZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKSxfcHJvcFR5cGVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpLF9HbHlwaGljb249X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9HbHlwaGljb25cIikpLF9ib290c3RyYXBVdGlscz1yZXF1aXJlKFwiLi91dGlscy9ib290c3RyYXBVdGlsc1wiKSxkZWZhdWx0UHJvcHM9e2JzUm9sZTpcImZlZWRiYWNrXCJ9LGNvbnRleHRUeXBlcz17JGJzX2Zvcm1Hcm91cDpfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0fSxGb3JtQ29udHJvbEZlZWRiYWNrPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIEZvcm1Db250cm9sRmVlZGJhY2soKXtyZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9KDAsX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKEZvcm1Db250cm9sRmVlZGJhY2ssZSk7dmFyIHI9Rm9ybUNvbnRyb2xGZWVkYmFjay5wcm90b3R5cGU7cmV0dXJuIHIuZ2V0R2x5cGg9ZnVuY3Rpb24gZ2V0R2x5cGgoZSl7c3dpdGNoKGUpe2Nhc2VcInN1Y2Nlc3NcIjpyZXR1cm5cIm9rXCI7Y2FzZVwid2FybmluZ1wiOnJldHVyblwid2FybmluZy1zaWduXCI7Y2FzZVwiZXJyb3JcIjpyZXR1cm5cInJlbW92ZVwiO2RlZmF1bHQ6cmV0dXJuIG51bGx9fSxyLnJlbmRlckRlZmF1bHRGZWVkYmFjaz1mdW5jdGlvbiByZW5kZXJEZWZhdWx0RmVlZGJhY2soZSxyLHQsbyl7dmFyIHM9dGhpcy5nZXRHbHlwaChlJiZlLnZhbGlkYXRpb25TdGF0ZSk7cmV0dXJuIHM/X3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfR2x5cGhpY29uLmRlZmF1bHQsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LG8se2dseXBoOnMsY2xhc3NOYW1lOigwLF9jbGFzc25hbWVzLmRlZmF1bHQpKHIsdCl9KSk6bnVsbH0sci5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIGU9dGhpcy5wcm9wcyxyPWUuY2xhc3NOYW1lLHQ9ZS5jaGlsZHJlbixvPSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShlLFtcImNsYXNzTmFtZVwiLFwiY2hpbGRyZW5cIl0pLHM9KDAsX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykobyksYT1zWzBdLGw9c1sxXSxuPSgwLF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkoYSk7aWYoIXQpcmV0dXJuIHRoaXMucmVuZGVyRGVmYXVsdEZlZWRiYWNrKHRoaXMuY29udGV4dC4kYnNfZm9ybUdyb3VwLHIsbixsKTt2YXIgdT1fcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5vbmx5KHQpO3JldHVybiBfcmVhY3QuZGVmYXVsdC5jbG9uZUVsZW1lbnQodSwoMCxfZXh0ZW5kczIuZGVmYXVsdCkoe30sbCx7Y2xhc3NOYW1lOigwLF9jbGFzc25hbWVzLmRlZmF1bHQpKHUucHJvcHMuY2xhc3NOYW1lLHIsbil9KSl9LEZvcm1Db250cm9sRmVlZGJhY2t9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7Rm9ybUNvbnRyb2xGZWVkYmFjay5kZWZhdWx0UHJvcHM9ZGVmYXVsdFByb3BzLEZvcm1Db250cm9sRmVlZGJhY2suY29udGV4dFR5cGVzPWNvbnRleHRUeXBlczt2YXIgX2RlZmF1bHQ9KDAsX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKFwiZm9ybS1jb250cm9sLWZlZWRiYWNrXCIsRm9ybUNvbnRyb2xGZWVkYmFjayk7ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrWnZjbTFEYjI1MGNtOXNSbVZsWkdKaFkyc3Vhbk1pWFN3aWJtRnRaWE1pT2xzaVgybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ0lzSW5KbGNYVnBjbVVpTENKbGVIQnZjblJ6SWl3aVgxOWxjMDF2WkhWc1pTSXNJbVJsWm1GMWJIUWlMQ0pmYjJKcVpXTjBWMmwwYUc5MWRGQnliM0JsY25ScFpYTk1iMjl6WlRJaUxDSmZaWGgwWlc1a2N6SWlMQ0pmYVc1b1pYSnBkSE5NYjI5elpUSWlMQ0pmWTJ4aGMzTnVZVzFsY3lJc0lsOXlaV0ZqZENJc0lsOXdjbTl3Vkhsd1pYTWlMQ0pmUjJ4NWNHaHBZMjl1SWl3aVgySnZiM1J6ZEhKaGNGVjBhV3h6SWl3aVpHVm1ZWFZzZEZCeWIzQnpJaXdpWW5OU2IyeGxJaXdpWTI5dWRHVjRkRlI1Y0dWeklpd2lKR0p6WDJadmNtMUhjbTkxY0NJc0ltOWlhbVZqZENJc0lrWnZjbTFEYjI1MGNtOXNSbVZsWkdKaFkyc2lMQ0pmVW1WaFkzUWtRMjl0Y0c5dVpXNTBJaXdpWVhCd2JIa2lMQ0owYUdseklpd2lZWEpuZFcxbGJuUnpJaXdpWDNCeWIzUnZJaXdpY0hKdmRHOTBlWEJsSWl3aVoyVjBSMng1Y0dnaUxDSjJZV3hwWkdGMGFXOXVVM1JoZEdVaUxDSnlaVzVrWlhKRVpXWmhkV3gwUm1WbFpHSmhZMnNpTENKbWIzSnRSM0p2ZFhBaUxDSmpiR0Z6YzA1aGJXVWlMQ0pqYkdGemMyVnpJaXdpWld4bGJXVnVkRkJ5YjNCeklpd2laMng1Y0dnaUxDSmpjbVZoZEdWRmJHVnRaVzUwSWl3aWNtVnVaR1Z5SWl3aVgzUm9hWE1rY0hKdmNITWlMQ0p3Y205d2N5SXNJbU5vYVd4a2NtVnVJaXdpWDNOd2JHbDBRbk5RY205d2N5SXNJbk53YkdsMFFuTlFjbTl3Y3lJc0ltSnpVSEp2Y0hNaUxDSm5aWFJEYkdGemMxTmxkQ0lzSW1OdmJuUmxlSFFpTENKamFHbHNaQ0lzSWtOb2FXeGtjbVZ1SWl3aWIyNXNlU0lzSW1Oc2IyNWxSV3hsYldWdWRDSXNJa052YlhCdmJtVnVkQ0lzSWw5a1pXWmhkV3gwSWl3aVluTkRiR0Z6Y3lJc0ltMXZaSFZzWlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkZRU3hKUVVGSlFTeDFRa0ZCZVVKRExGRkJRVkVzZDBSQlJYSkRReXhSUVVGUlF5eFpRVUZoTEVWQlEzSkNSQ3hSUVVGUlJTeGhRVUZWTEVWQlJXeENMRWxCUVVsRExDdENRVUZwUTB3c2RVSkJRWFZDUXl4UlFVRlJMR2RGUVVWb1JVc3NWVUZCV1U0c2RVSkJRWFZDUXl4UlFVRlJMREpEUVVVelEwMHNaMEpCUVd0Q1VDeDFRa0ZCZFVKRExGRkJRVkVzYVVSQlJXcEVUeXhaUVVGalVpeDFRa0ZCZFVKRExGRkJRVkVzWlVGRk4wTlJMRTlCUVZOVUxIVkNRVUYxUWtNc1VVRkJVU3hWUVVWNFExTXNWMEZCWVZZc2RVSkJRWFZDUXl4UlFVRlJMR1ZCUlRWRFZTeFhRVUZoV0N4MVFrRkJkVUpETEZGQlFWRXNaMEpCUlRWRFZ5eG5Ra0ZCYTBKWUxGRkJRVkVzTUVKQlJURkNXU3hoUVVGbExFTkJRMnBDUXl4UFFVRlJMRmxCUlU1RExHRkJRV1VzUTBGRGFrSkRMR05CUVdWT0xGZEJRVmRPTEZGQlFWRmhMRkZCUjJoRFF5eHZRa0ZGU2l4VFFVRlZReXhIUVVkU0xGTkJRVk5FTEhOQ1FVTlFMRTlCUVU5RExFVkJRV2xDUXl4TlFVRk5ReXhMUVVGTlF5eFpRVUZqUkN4TlFVaHdSQ3hGUVVGSlpDeG5Ra0ZCWjBKSUxGTkJRVk5qTEc5Q1FVRnhRa01zUjBGTmJFUXNTVUZCU1Vrc1JVRkJVMHdzYjBKQlFXOUNUU3hWUVhORWFrTXNUMEZ3UkVGRUxFVkJRVTlGTEZOQlFWY3NVMEZCVTBFc1UwRkJVME1zUjBGRGJFTXNUMEZCVVVFc1IwRkRUaXhKUVVGTExGVkJRMGdzVFVGQlR5eExRVVZVTEVsQlFVc3NWVUZEU0N4TlFVRlBMR1ZCUlZRc1NVRkJTeXhSUVVOSUxFMUJRVThzVTBGRlZDeFJRVU5GTEU5QlFVOHNUMEZKWWtnc1JVRkJUMGtzYzBKQlFYZENMRk5CUVZOQkxITkNRVUZ6UWtNc1JVRkJWME1zUlVGQlYwTXNSVUZCVTBNc1IwRkRNMFlzU1VGQlNVTXNSVUZCVVZnc1MwRkJTMGtzVTBGQlUwY3NSMEZCWVVFc1JVRkJWVVlzYVVKQlJXcEVMRTlCUVV0TkxFVkJTVVYyUWl4UFFVRlBUQ3hSUVVGUk5rSXNZMEZCWTNSQ0xGZEJRVmRRTEZOQlFWTXNSVUZCU1VVc1ZVRkJWVVlzVTBGQlV5eEhRVUZKTWtJc1JVRkJZeXhEUVVNdlJrTXNUVUZCVDBFc1JVRkRVRWdzVjBGQlZ5eEZRVUZKY2tJc1dVRkJXVW9zVTBGQlUzbENMRVZCUVZkRExFMUJUSGhETEUxQlUxaFFMRVZCUVU5WExFOUJRVk1zVTBGQlUwRXNVMEZEZGtJc1NVRkJTVU1zUlVGQlkyUXNTMEZCUzJVc1RVRkRia0pRTEVWQlFWbE5MRVZCUVZsT0xGVkJRM2hDVVN4RlFVRlhSaXhGUVVGWlJTeFRRVU4yUWtRc1IwRkJVU3hGUVVGSkwwSXNLMEpCUVN0Q1JDeFRRVUZUSzBJc1JVRkJZU3hEUVVGRExGbEJRV0VzWVVGRkwwVkhMRWRCUVdkQ0xFVkJRVWt4UWl4blFrRkJaMEl5UWl4alFVRmpTQ3hIUVVOc1JFa3NSVUZCVlVZc1JVRkJZeXhIUVVONFFsQXNSVUZCWlU4c1JVRkJZeXhIUVVVM1FsSXNSMEZCVlN4RlFVRkpiRUlzWjBKQlFXZENOa0lzWVVGQllVUXNSMEZGTDBNc1NVRkJTMGdzUlVGRFNDeFBRVUZQYUVJc1MwRkJTMDBzYzBKQlFYTkNUaXhMUVVGTGNVSXNVVUZCVVRGQ0xHTkJRV1ZoTEVWQlFWZERMRVZCUVZORExFZEJSM0JHTEVsQlFVbFpMRVZCUVZGc1F5eFBRVUZQVEN4UlFVRlJkME1zVTBGQlUwTXNTMEZCUzFJc1IwRkZla01zVDBGQlR6VkNMRTlCUVU5TUxGRkJRVkV3UXl4aFFVRmhTQ3hIUVVGUExFVkJRVWx5UXl4VlFVRlZSaXhUUVVGVExFZEJRVWt5UWl4RlFVRmpMRU5CUTJwR1JpeFhRVUZYTEVWQlFVbHlRaXhaUVVGWlNpeFRRVUZUZFVNc1JVRkJUVkFzVFVGQlRWQXNWVUZCVjBFc1JVRkJWME1zVDBGSmJrVmFMRzlDUVRkRVZDeERRVGhFUlZRc1QwRkJUMHdzVVVGQlVUSkRMRmRCUldwQ04wSXNiMEpCUVc5Q1RDeGhRVUZsUVN4aFFVTnVRMHNzYjBKQlFXOUNTQ3hoUVVGbFFTeGhRVVZ1UXl4SlFVRkphVU1zVlVGQlZ5eEZRVUZKY0VNc1owSkJRV2RDY1VNc1UwRkJVeXgzUWtGQmVVSXZRaXh4UWtGRmNrVm9RaXhSUVVGUlJTeFJRVUZWTkVNc1UwRkRiRUpGTEU5QlFVOW9SQ3hSUVVGVlFTeFJRVUZwUWlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDMWliMjkwYzNSeVlYQXZiR2xpTDBadmNtMURiMjUwY205c1JtVmxaR0poWTJzdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9leHRlbmRzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSksX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9jbGFzc25hbWVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpLF9yZWFjdD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSksX2VsZW1lbnRUeXBlPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlXCIpKSxfYm9vdHN0cmFwVXRpbHM9cmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIikscHJvcFR5cGVzPXtjb21wb25lbnRDbGFzczpfZWxlbWVudFR5cGUuZGVmYXVsdH0sZGVmYXVsdFByb3BzPXtjb21wb25lbnRDbGFzczpcInBcIn0sRm9ybUNvbnRyb2xTdGF0aWM9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gRm9ybUNvbnRyb2xTdGF0aWMoKXtyZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9cmV0dXJuKDAsX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKEZvcm1Db250cm9sU3RhdGljLGUpLEZvcm1Db250cm9sU3RhdGljLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIGU9dGhpcy5wcm9wcyx0PWUuY29tcG9uZW50Q2xhc3Mscj1lLmNsYXNzTmFtZSxvPSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShlLFtcImNvbXBvbmVudENsYXNzXCIsXCJjbGFzc05hbWVcIl0pLHM9KDAsX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykobyksYT1zWzBdLGw9c1sxXSxpPSgwLF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkoYSk7cmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQodCwoMCxfZXh0ZW5kczIuZGVmYXVsdCkoe30sbCx7Y2xhc3NOYW1lOigwLF9jbGFzc25hbWVzLmRlZmF1bHQpKHIsaSl9KSl9LEZvcm1Db250cm9sU3RhdGljfShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO0Zvcm1Db250cm9sU3RhdGljLnByb3BUeXBlcz1wcm9wVHlwZXMsRm9ybUNvbnRyb2xTdGF0aWMuZGVmYXVsdFByb3BzPWRlZmF1bHRQcm9wczt2YXIgX2RlZmF1bHQ9KDAsX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKFwiZm9ybS1jb250cm9sLXN0YXRpY1wiLEZvcm1Db250cm9sU3RhdGljKTtleHBvcnRzLmRlZmF1bHQ9X2RlZmF1bHQsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtadmNtMURiMjUwY205c1UzUmhkR2xqTG1weklsMHNJbTVoYldWeklqcGJJbDlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRaUxDSnlaWEYxYVhKbElpd2laWGh3YjNKMGN5SXNJbDlmWlhOTmIyUjFiR1VpTENKa1pXWmhkV3gwSWl3aVgyVjRkR1Z1WkhNeUlpd2lYMjlpYW1WamRGZHBkR2h2ZFhSUWNtOXdaWEowYVdWelRHOXZjMlV5SWl3aVgybHVhR1Z5YVhSelRHOXZjMlV5SWl3aVgyTnNZWE56Ym1GdFpYTWlMQ0pmY21WaFkzUWlMQ0pmWld4bGJXVnVkRlI1Y0dVaUxDSmZZbTl2ZEhOMGNtRndWWFJwYkhNaUxDSndjbTl3Vkhsd1pYTWlMQ0pqYjIxd2IyNWxiblJEYkdGemN5SXNJbVJsWm1GMWJIUlFjbTl3Y3lJc0lrWnZjbTFEYjI1MGNtOXNVM1JoZEdsaklpd2lYMUpsWVdOMEpFTnZiWEJ2Ym1WdWRDSXNJbUZ3Y0d4NUlpd2lkR2hwY3lJc0ltRnlaM1Z0Wlc1MGN5SXNJbkJ5YjNSdmRIbHdaU0lzSW5KbGJtUmxjaUlzSWw5MGFHbHpKSEJ5YjNCeklpd2ljSEp2Y0hNaUxDSkRiMjF3YjI1bGJuUWlMQ0pqYkdGemMwNWhiV1VpTENKZmMzQnNhWFJDYzFCeWIzQnpJaXdpYzNCc2FYUkNjMUJ5YjNCeklpd2lZbk5RY205d2N5SXNJbVZzWlcxbGJuUlFjbTl3Y3lJc0ltTnNZWE56WlhNaUxDSm5aWFJEYkdGemMxTmxkQ0lzSW1OeVpXRjBaVVZzWlcxbGJuUWlMQ0pmWkdWbVlYVnNkQ0lzSW1KelEyeGhjM01pTENKdGIyUjFiR1VpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlJVRXNTVUZCU1VFc2RVSkJRWGxDUXl4UlFVRlJMSGRFUVVWeVEwTXNVVUZCVVVNc1dVRkJZU3hGUVVOeVFrUXNVVUZCVVVVc1lVRkJWU3hGUVVWc1FpeEpRVUZKUXl4VlFVRlpUQ3gxUWtGQmRVSkRMRkZCUVZFc01rTkJSVE5EU3l3clFrRkJhVU5PTEhWQ1FVRjFRa01zVVVGQlVTeG5SVUZGYUVWTkxHZENRVUZyUWxBc2RVSkJRWFZDUXl4UlFVRlJMR2xFUVVWcVJFOHNXVUZCWTFJc2RVSkJRWFZDUXl4UlFVRlJMR1ZCUlRkRFVTeFBRVUZUVkN4MVFrRkJkVUpETEZGQlFWRXNWVUZGZUVOVExHRkJRV1ZXTEhWQ1FVRjFRa01zVVVGQlVTeHhRMEZGT1VOVkxHZENRVUZyUWxZc1VVRkJVU3d3UWtGRk1VSlhMRlZCUVZrc1EwRkRaRU1zWlVGQlowSklMR0ZCUVdGT0xGTkJSVE5DVlN4aFFVRmxMRU5CUTJwQ1JDeGxRVUZuUWl4TFFVZGtSU3hyUWtGRlNpeFRRVUZWUXl4SFFVZFNMRk5CUVZORUxHOUNRVU5RTEU5QlFVOURMRVZCUVdsQ1F5eE5RVUZOUXl4TFFVRk5ReXhaUVVGalJDeExRWEZDY0VRc1QwRjRRa0VzUlVGQlNWZ3NaMEpCUVdkQ1NDeFRRVUZUVnl4clFrRkJiVUpETEVkQlRXNURSQ3hyUWtGQmEwSkxMRlZCUlhoQ1F5eFBRVUZUTEZOQlFWTkJMRk5CUTNaQ0xFbEJRVWxETEVWQlFXTktMRXRCUVV0TExFMUJRMjVDUXl4RlFVRlpSaXhGUVVGWlZDeGxRVU40UWxrc1JVRkJXVWdzUlVGQldVY3NWVUZEZUVKR0xFZEJRVkVzUlVGQlNXcENMQ3RDUVVFclFrWXNVMEZCVTJ0Q0xFVkJRV0VzUTBGQlF5eHBRa0ZCYTBJc1kwRkZjRVpKTEVkQlFXZENMRVZCUVVsbUxHZENRVUZuUW1kQ0xHTkJRV05LTEVkQlEyeEVTeXhGUVVGVlJpeEZRVUZqTEVkQlEzaENSeXhGUVVGbFNDeEZRVUZqTEVkQlJUZENTU3hIUVVGVkxFVkJRVWx1UWl4blFrRkJaMEp2UWl4aFFVRmhTQ3hIUVVNdlF5eFBRVUZQYmtJc1QwRkJUMHdzVVVGQlVUUkNMR05CUVdOU0xFZEJRVmNzUlVGQlNXNUNMRlZCUVZWRUxGTkJRVk1zUjBGQlNYbENMRVZCUVdNc1EwRkRkRVpLTEZkQlFWY3NSVUZCU1dwQ0xGbEJRVmxLTEZOQlFWTnhRaXhGUVVGWFN5eFBRVWsxUTJZc2EwSkJla0pVTEVOQk1FSkZUaXhQUVVGUFRDeFJRVUZSYjBJc1YwRkZha0pVTEd0Q1FVRnJRa2dzVlVGQldVRXNWVUZET1VKSExHdENRVUZyUWtRc1lVRkJaVUVzWVVGRmFrTXNTVUZCU1cxQ0xGVkJRVmNzUlVGQlNYUkNMR2RDUVVGblFuVkNMRk5CUVZNc2MwSkJRWFZDYmtJc2JVSkJSVzVGWWl4UlFVRlJSU3hSUVVGVk5rSXNVMEZEYkVKRkxFOUJRVTlxUXl4UlFVRlZRU3hSUVVGcFFpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzFpYjI5MGMzUnlZWEF2YkdsaUwwWnZjbTFEYjI1MGNtOXNVM1JoZEdsakxtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9leHRlbmRzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSksX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9jbGFzc25hbWVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpLF9yZWFjdD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSksX3Byb3BUeXBlcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKSxfYm9vdHN0cmFwVXRpbHM9cmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIiksX1N0eWxlQ29uZmlnPXJlcXVpcmUoXCIuL3V0aWxzL1N0eWxlQ29uZmlnXCIpLF9WYWxpZENvbXBvbmVudENoaWxkcmVuPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvVmFsaWRDb21wb25lbnRDaGlsZHJlblwiKSkscHJvcFR5cGVzPXtjb250cm9sSWQ6X3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyx2YWxpZGF0aW9uU3RhdGU6X3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFtcInN1Y2Nlc3NcIixcIndhcm5pbmdcIixcImVycm9yXCIsbnVsbF0pfSxjaGlsZENvbnRleHRUeXBlcz17JGJzX2Zvcm1Hcm91cDpfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWR9LEZvcm1Hcm91cD1mdW5jdGlvbihlKXtmdW5jdGlvbiBGb3JtR3JvdXAoKXtyZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9KDAsX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKEZvcm1Hcm91cCxlKTt2YXIgdD1Gb3JtR3JvdXAucHJvdG90eXBlO3JldHVybiB0LmdldENoaWxkQ29udGV4dD1mdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKXt2YXIgZT10aGlzLnByb3BzO3JldHVybnskYnNfZm9ybUdyb3VwOntjb250cm9sSWQ6ZS5jb250cm9sSWQsdmFsaWRhdGlvblN0YXRlOmUudmFsaWRhdGlvblN0YXRlfX19LHQuaGFzRmVlZGJhY2s9ZnVuY3Rpb24gaGFzRmVlZGJhY2soZSl7dmFyIHQ9dGhpcztyZXR1cm4gX1ZhbGlkQ29tcG9uZW50Q2hpbGRyZW4uZGVmYXVsdC5zb21lKGUsZnVuY3Rpb24oZSl7cmV0dXJuXCJmZWVkYmFja1wiPT09ZS5wcm9wcy5ic1JvbGV8fGUucHJvcHMuY2hpbGRyZW4mJnQuaGFzRmVlZGJhY2soZS5wcm9wcy5jaGlsZHJlbil9KX0sdC5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIGU9dGhpcy5wcm9wcyx0PWUudmFsaWRhdGlvblN0YXRlLHI9ZS5jbGFzc05hbWUsbz1lLmNoaWxkcmVuLHM9KDAsX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKGUsW1widmFsaWRhdGlvblN0YXRlXCIsXCJjbGFzc05hbWVcIixcImNoaWxkcmVuXCJdKSxpPSgwLF9ib290c3RyYXBVdGlscy5zcGxpdEJzUHJvcHNBbmRPbWl0KShzLFtcImNvbnRyb2xJZFwiXSksYT1pWzBdLGw9aVsxXSxwPSgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSwoMCxfYm9vdHN0cmFwVXRpbHMuZ2V0Q2xhc3NTZXQpKGEpLHtcImhhcy1mZWVkYmFja1wiOnRoaXMuaGFzRmVlZGJhY2sobyl9KTtyZXR1cm4gdCYmKHBbXCJoYXMtXCIrdF09ITApLF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwoMCxfZXh0ZW5kczIuZGVmYXVsdCkoe30sbCx7Y2xhc3NOYW1lOigwLF9jbGFzc25hbWVzLmRlZmF1bHQpKHIscCl9KSxvKX0sRm9ybUdyb3VwfShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO0Zvcm1Hcm91cC5wcm9wVHlwZXM9cHJvcFR5cGVzLEZvcm1Hcm91cC5jaGlsZENvbnRleHRUeXBlcz1jaGlsZENvbnRleHRUeXBlczt2YXIgX2RlZmF1bHQ9KDAsX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKFwiZm9ybS1ncm91cFwiLCgwLF9ib290c3RyYXBVdGlscy5ic1NpemVzKShbX1N0eWxlQ29uZmlnLlNpemUuTEFSR0UsX1N0eWxlQ29uZmlnLlNpemUuU01BTExdLEZvcm1Hcm91cCkpO2V4cG9ydHMuZGVmYXVsdD1fZGVmYXVsdCxtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa1p2Y20xSGNtOTFjQzVxY3lKZExDSnVZVzFsY3lJNld5SmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwSWl3aWNtVnhkV2x5WlNJc0ltVjRjRzl5ZEhNaUxDSmZYMlZ6VFc5a2RXeGxJaXdpWkdWbVlYVnNkQ0lzSWw5bGVIUmxibVJ6TWlJc0lsOXZZbXBsWTNSWGFYUm9iM1YwVUhKdmNHVnlkR2xsYzB4dmIzTmxNaUlzSWw5cGJtaGxjbWwwYzB4dmIzTmxNaUlzSWw5amJHRnpjMjVoYldWeklpd2lYM0psWVdOMElpd2lYM0J5YjNCVWVYQmxjeUlzSWw5aWIyOTBjM1J5WVhCVmRHbHNjeUlzSWw5VGRIbHNaVU52Ym1acFp5SXNJbDlXWVd4cFpFTnZiWEJ2Ym1WdWRFTm9hV3hrY21WdUlpd2ljSEp2Y0ZSNWNHVnpJaXdpWTI5dWRISnZiRWxrSWl3aWMzUnlhVzVuSWl3aWRtRnNhV1JoZEdsdmJsTjBZWFJsSWl3aWIyNWxUMllpTENKamFHbHNaRU52Ym5SbGVIUlVlWEJsY3lJc0lpUmljMTltYjNKdFIzSnZkWEFpTENKdlltcGxZM1FpTENKcGMxSmxjWFZwY21Wa0lpd2lSbTl5YlVkeWIzVndJaXdpWDFKbFlXTjBKRU52YlhCdmJtVnVkQ0lzSW1Gd2NHeDVJaXdpZEdocGN5SXNJbUZ5WjNWdFpXNTBjeUlzSWw5d2NtOTBieUlzSW5CeWIzUnZkSGx3WlNJc0ltZGxkRU5vYVd4a1EyOXVkR1Y0ZENJc0lsOTBhR2x6SkhCeWIzQnpJaXdpY0hKdmNITWlMQ0pvWVhOR1pXVmtZbUZqYXlJc0ltTm9hV3hrY21WdUlpd2lYM1JvYVhNaUxDSnpiMjFsSWl3aVkyaHBiR1FpTENKaWMxSnZiR1VpTENKeVpXNWtaWElpTENKZmRHaHBjeVJ3Y205d2N6SWlMQ0pqYkdGemMwNWhiV1VpTENKZmMzQnNhWFJDYzFCeWIzQnpRVzVrVDIxcGRDSXNJbk53YkdsMFFuTlFjbTl3YzBGdVpFOXRhWFFpTENKaWMxQnliM0J6SWl3aVpXeGxiV1Z1ZEZCeWIzQnpJaXdpWTJ4aGMzTmxjeUlzSW1kbGRFTnNZWE56VTJWMElpd2lhR0Z6TFdabFpXUmlZV05ySWl3aVkzSmxZWFJsUld4bGJXVnVkQ0lzSWtOdmJYQnZibVZ1ZENJc0lsOWtaV1poZFd4MElpd2lZbk5EYkdGemN5SXNJbUp6VTJsNlpYTWlMQ0pUYVhwbElpd2lURUZTUjBVaUxDSlRUVUZNVENJc0ltMXZaSFZzWlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkZRU3hKUVVGSlFTeDFRa0ZCZVVKRExGRkJRVkVzZDBSQlJYSkRReXhSUVVGUlF5eFpRVUZoTEVWQlEzSkNSQ3hSUVVGUlJTeGhRVUZWTEVWQlJXeENMRWxCUVVsRExGVkJRVmxNTEhWQ1FVRjFRa01zVVVGQlVTd3lRMEZGTTBOTExDdENRVUZwUTA0c2RVSkJRWFZDUXl4UlFVRlJMR2RGUVVWb1JVMHNaMEpCUVd0Q1VDeDFRa0ZCZFVKRExGRkJRVkVzYVVSQlJXcEVUeXhaUVVGalVpeDFRa0ZCZFVKRExGRkJRVkVzWlVGRk4wTlJMRTlCUVZOVUxIVkNRVUYxUWtNc1VVRkJVU3hWUVVWNFExTXNWMEZCWVZZc2RVSkJRWFZDUXl4UlFVRlJMR1ZCUlRWRFZTeG5Ra0ZCYTBKV0xGRkJRVkVzTUVKQlJURkNWeXhoUVVGbFdDeFJRVUZSTEhWQ1FVVjJRbGtzZDBKQlFUQkNZaXgxUWtGQmRVSkRMRkZCUVZFc2JVTkJSWHBFWVN4VlFVRlpMRU5CU1dSRExGVkJRVmRNTEZkQlFWZE9MRkZCUVZGWkxFOUJRemxDUXl4blFrRkJhVUpRTEZkQlFWZE9MRkZCUVZGakxFMUJRVTBzUTBGQlF5eFZRVUZYTEZWQlFWY3NVVUZCVXl4UlFVVjRSVU1zYTBKQlFXOUNMRU5CUTNSQ1F5eGpRVUZsVml4WFFVRlhUaXhSUVVGUmFVSXNUMEZCVDBNc1dVRkhka05ETEZWQlJVb3NVMEZCVlVNc1IwRkhVaXhUUVVGVFJDeFpRVU5RTEU5QlFVOURMRVZCUVdsQ1F5eE5RVUZOUXl4TFFVRk5ReXhaUVVGalJDeE5RVWh3UkN4RlFVRkpia0lzWjBKQlFXZENTQ3hUUVVGVGJVSXNWVUZCVjBNc1IwRk5lRU1zU1VGQlNVa3NSVUZCVTB3c1ZVRkJWVTBzVlVFNFEzWkNMRTlCTlVOQlJDeEZRVUZQUlN4blFrRkJhMElzVTBGQlUwRXNhMEpCUTJoRExFbEJRVWxETEVWQlFXTk1MRXRCUVV0TkxFMUJSM1pDTEUxQlFVOHNRMEZEVEZvc1kwRkJaU3hEUVVOaVRDeFZRVXBaWjBJc1JVRkJXV2hDTEZWQlMzaENSU3huUWtGS2EwSmpMRVZCUVZsa0xHMUNRVk53UTFjc1JVRkJUMHNzV1VGQll5eFRRVUZUUVN4WlFVRlpReXhIUVVONFF5eEpRVUZKUXl4RlFVRlJWQ3hMUVVWYUxFOUJRVTlpTEhkQ1FVRjNRbFFzVVVGQlVXZERMRXRCUVV0R0xFVkJRVlVzVTBGQlZVY3NSMEZET1VRc1RVRkJPRUlzWVVGQmRrSkJMRVZCUVUxTUxFMUJRVTFOTEZGQlFYbENSQ3hGUVVGTlRDeE5RVUZOUlN4VlFVRlpReXhGUVVGTlJpeFpRVUZaU1N4RlFVRk5UQ3hOUVVGTlJTeGhRVWwwUjA0c1JVRkJUMWNzVDBGQlV5eFRRVUZUUVN4VFFVTjJRaXhKUVVGSlF5eEZRVUZsWkN4TFFVRkxUU3hOUVVOd1FtWXNSVUZCYTBKMVFpeEZRVUZoZGtJc1owSkJReTlDZDBJc1JVRkJXVVFzUlVGQllVTXNWVUZEZWtKUUxFVkJRVmROTEVWQlFXRk9MRk5CUTNoQ1JpeEhRVUZSTEVWQlFVa3hRaXdyUWtGQkswSkdMRk5CUVZOdlF5eEZRVUZqTEVOQlFVTXNhMEpCUVcxQ0xGbEJRV0VzWVVGRmJrZEZMRWRCUVhWQ0xFVkJRVWt2UWl4blFrRkJaMEpuUXl4eFFrRkJjVUpZTEVWQlFVOHNRMEZCUXl4alFVTjRSVmtzUlVGQlZVWXNSVUZCY1VJc1IwRkRMMEpITEVWQlFXVklMRVZCUVhGQ0xFZEJSWEJEU1N4SFFVRlZMRVZCUVVsNlF5eFZRVUZWUkN4VFFVRlRMRWxCUVVrc1JVRkJTVThzWjBKQlFXZENiME1zWVVGQllVZ3NSMEZCVlN4RFFVTnNSa2tzWlVGQlowSjBRaXhMUVVGTFR5eFpRVUZaUXl4TFFVOXVReXhQUVVwSmFrSXNTVUZEUmpaQ0xFVkJRVkVzVDBGQlV6ZENMRWxCUVcxQ0xFZEJSeTlDVWl4UFFVRlBUQ3hSUVVGUk5rTXNZMEZCWXl4UFFVRlBMRVZCUVVrMVF5eFZRVUZWUkN4VFFVRlRMRWRCUVVsNVF5eEZRVUZqTEVOQlEyeEdTaXhYUVVGWExFVkJRVWxxUXl4WlFVRlpTaXhUUVVGVGNVTXNSVUZCVjBzc1MwRkROME5hTEVsQlIwTllMRlZCY2tSVUxFTkJjMFJGWkN4UFFVRlBUQ3hSUVVGUk9FTXNWMEZGYWtJelFpeFZRVUZWVkN4VlFVRlpRU3hWUVVOMFFsTXNWVUZCVlVvc2EwSkJRVzlDUVN4clFrRkZPVUlzU1VGQlNXZERMRlZCUVZjc1JVRkJTWGhETEdkQ1FVRm5RbmxETEZOQlFWTXNZMEZCWXl4RlFVRkpla01zWjBKQlFXZENNRU1zVTBGQlV5eERRVUZEZWtNc1lVRkJZVEJETEV0QlFVdERMRTFCUVU4elF5eGhRVUZoTUVNc1MwRkJTMFVzVDBGQlVXcERMRmxCUlROSmNrSXNVVUZCVVVVc1VVRkJWU3RETEZOQlEyeENUU3hQUVVGUGRrUXNVVUZCVlVFc1VVRkJhVUlpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdFltOXZkSE4wY21Gd0wyeHBZaTlHYjNKdFIzSnZkWEF1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PXZvaWQgMDt2YXIgX2V4dGVuZHMzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKSxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpLF9pbmhlcml0c0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSksX2NsYXNzbmFtZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKSxfcHJvcFR5cGVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpLF9ib290c3RyYXBVdGlscz1yZXF1aXJlKFwiLi91dGlscy9ib290c3RyYXBVdGlsc1wiKSxwcm9wVHlwZXM9e2dseXBoOl9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcuaXNSZXF1aXJlZH0sR2x5cGhpY29uPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIEdseXBoaWNvbigpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4oMCxfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoR2x5cGhpY29uLGUpLEdseXBoaWNvbi5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uIHJlbmRlcigpe3ZhciBlLHQ9dGhpcy5wcm9wcyxyPXQuZ2x5cGgscz10LmNsYXNzTmFtZSxvPSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KSh0LFtcImdseXBoXCIsXCJjbGFzc05hbWVcIl0pLGk9KDAsX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykobykscD1pWzBdLGw9aVsxXSxhPSgwLF9leHRlbmRzMy5kZWZhdWx0KSh7fSwoMCxfYm9vdHN0cmFwVXRpbHMuZ2V0Q2xhc3NTZXQpKHApLCgoZT17fSlbKDAsX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkocCxyKV09ITAsZSkpO3JldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCgwLF9leHRlbmRzMy5kZWZhdWx0KSh7fSxsLHtjbGFzc05hbWU6KDAsX2NsYXNzbmFtZXMuZGVmYXVsdCkocyxhKX0pKX0sR2x5cGhpY29ufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO0dseXBoaWNvbi5wcm9wVHlwZXM9cHJvcFR5cGVzO3ZhciBfZGVmYXVsdD0oMCxfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoXCJnbHlwaGljb25cIixHbHlwaGljb24pO2V4cG9ydHMuZGVmYXVsdD1fZGVmYXVsdCxtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa2RzZVhCb2FXTnZiaTVxY3lKZExDSnVZVzFsY3lJNld5SmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwSWl3aWNtVnhkV2x5WlNJc0ltVjRjRzl5ZEhNaUxDSmZYMlZ6VFc5a2RXeGxJaXdpWkdWbVlYVnNkQ0lzSWw5bGVIUmxibVJ6TXlJc0lsOXZZbXBsWTNSWGFYUm9iM1YwVUhKdmNHVnlkR2xsYzB4dmIzTmxNaUlzSWw5cGJtaGxjbWwwYzB4dmIzTmxNaUlzSWw5amJHRnpjMjVoYldWeklpd2lYM0psWVdOMElpd2lYM0J5YjNCVWVYQmxjeUlzSWw5aWIyOTBjM1J5WVhCVmRHbHNjeUlzSW5CeWIzQlVlWEJsY3lJc0ltZHNlWEJvSWl3aWMzUnlhVzVuSWl3aWFYTlNaWEYxYVhKbFpDSXNJa2RzZVhCb2FXTnZiaUlzSWw5U1pXRmpkQ1JEYjIxd2IyNWxiblFpTENKaGNIQnNlU0lzSW5Sb2FYTWlMQ0poY21kMWJXVnVkSE1pTENKd2NtOTBiM1I1Y0dVaUxDSnlaVzVrWlhJaUxDSmZaWGgwWlc1a2N6SWlMQ0pmZEdocGN5UndjbTl3Y3lJc0luQnliM0J6SWl3aVkyeGhjM05PWVcxbElpd2lYM053YkdsMFFuTlFjbTl3Y3lJc0luTndiR2wwUW5OUWNtOXdjeUlzSW1KelVISnZjSE1pTENKbGJHVnRaVzUwVUhKdmNITWlMQ0pqYkdGemMyVnpJaXdpWjJWMFEyeGhjM05UWlhRaUxDSndjbVZtYVhnaUxDSmpjbVZoZEdWRmJHVnRaVzUwSWl3aVEyOXRjRzl1Wlc1MElpd2lYMlJsWm1GMWJIUWlMQ0ppYzBOc1lYTnpJaXdpYlc5a2RXeGxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVWQkxFbEJRVWxCTEhWQ1FVRjVRa01zVVVGQlVTeDNSRUZGY2tORExGRkJRVkZETEZsQlFXRXNSVUZEY2tKRUxGRkJRVkZGTEdGQlFWVXNSVUZGYkVJc1NVRkJTVU1zVlVGQldVd3NkVUpCUVhWQ1F5eFJRVUZSTERKRFFVVXpRMHNzSzBKQlFXbERUaXgxUWtGQmRVSkRMRkZCUVZFc1owVkJSV2hGVFN4blFrRkJhMEpRTEhWQ1FVRjFRa01zVVVGQlVTeHBSRUZGYWtSUExGbEJRV05TTEhWQ1FVRjFRa01zVVVGQlVTeGxRVVUzUTFFc1QwRkJVMVFzZFVKQlFYVkNReXhSUVVGUkxGVkJSWGhEVXl4WFFVRmhWaXgxUWtGQmRVSkRMRkZCUVZFc1pVRkZOVU5WTEdkQ1FVRnJRbFlzVVVGQlVTd3dRa0ZGTVVKWExGVkJRVmtzUTBGSlpFTXNUVUZCVDBnc1YwRkJWMDRzVVVGQlVWVXNUMEZCVDBNc1dVRkhMMEpETEZWQlJVb3NVMEZCVlVNc1IwRkhVaXhUUVVGVFJDeFpRVU5RTEU5QlFVOURMRVZCUVdsQ1F5eE5RVUZOUXl4TFFVRk5ReXhaUVVGalJDeExRWFZDY0VRc1QwRXhRa0VzUlVGQlNWb3NaMEpCUVdkQ1NDeFRRVUZUV1N4VlFVRlhReXhIUVUwelFrUXNWVUZCVlVzc1ZVRkZhRUpETEU5QlFWTXNVMEZCVTBFc1UwRkRka0lzU1VGQlNVTXNSVUZGUVVNc1JVRkJZMHdzUzBGQlMwMHNUVUZEYmtKYUxFVkJRVkZYTEVWQlFWbFlMRTFCUTNCQ1lTeEZRVUZaUml4RlFVRlpSU3hWUVVONFFrUXNSMEZCVVN4RlFVRkpia0lzSzBKQlFTdENSaXhUUVVGVGIwSXNSVUZCWVN4RFFVRkRMRkZCUVZNc1kwRkZNMFZITEVkQlFXZENMRVZCUVVsb1FpeG5Ra0ZCWjBKcFFpeGpRVUZqU0N4SFFVTnNSRWtzUlVGQlZVWXNSVUZCWXl4SFFVTjRRa2NzUlVGQlpVZ3NSVUZCWXl4SFFVVTNRa2tzUjBGQlZTeEZRVUZKTVVJc1ZVRkJWVVFzVTBGQlV5eEpRVUZKTEVWQlFVbFBMR2RDUVVGblFuRkNMR0ZCUVdGSUxFdEJRVmRPTEVWQlFWa3NTMEZCWXl4RlFVRkpXaXhuUWtGQlowSnpRaXhSUVVGUlNpeEZRVUZUYUVJc1MwRkJWU3hGUVVGTlZTeEpRVU53U3l4UFFVRlBaQ3hQUVVGUFRDeFJRVUZST0VJc1kwRkJZeXhSUVVGUkxFVkJRVWszUWl4VlFVRlZSQ3hUUVVGVExFZEJRVWt3UWl4RlFVRmpMRU5CUTI1R1NpeFhRVUZYTEVWQlFVbHNRaXhaUVVGWlNpeFRRVUZUYzBJc1JVRkJWMHNzVDBGSk5VTm1MRlZCTTBKVUxFTkJORUpGVUN4UFFVRlBUQ3hSUVVGUkswSXNWMEZGYWtKdVFpeFZRVUZWU2l4VlFVRlpRU3hWUVVWMFFpeEpRVUZKZDBJc1ZVRkJWeXhGUVVGSmVrSXNaMEpCUVdkQ01FSXNVMEZCVXl4WlFVRmhja0lzVjBGRmVrUmtMRkZCUVZGRkxGRkJRVlZuUXl4VFFVTnNRa1VzVDBGQlQzQkRMRkZCUVZWQkxGRkJRV2xDSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdOMExXSnZiM1J6ZEhKaGNDOXNhV0l2UjJ4NWNHaHBZMjl1TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PXZvaWQgMDt2YXIgX2V4dGVuZHMyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKSxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpLF9pbmhlcml0c0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSksX2NsYXNzbmFtZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKSxfcHJvcFR5cGVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpLF9lbGVtZW50VHlwZT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzLWV4dHJhL2xpYi9lbGVtZW50VHlwZVwiKSksX2Jvb3RzdHJhcFV0aWxzPXJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpLHByb3BUeXBlcz17Zmx1aWQ6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsY29tcG9uZW50Q2xhc3M6X2VsZW1lbnRUeXBlLmRlZmF1bHR9LGRlZmF1bHRQcm9wcz17Y29tcG9uZW50Q2xhc3M6XCJkaXZcIixmbHVpZDohMX0sR3JpZD1mdW5jdGlvbihlKXtmdW5jdGlvbiBHcmlkKCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybigwLF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShHcmlkLGUpLEdyaWQucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXt2YXIgZT10aGlzLnByb3BzLHI9ZS5mbHVpZCx0PWUuY29tcG9uZW50Q2xhc3Mscz1lLmNsYXNzTmFtZSxvPSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShlLFtcImZsdWlkXCIsXCJjb21wb25lbnRDbGFzc1wiLFwiY2xhc3NOYW1lXCJdKSxpPSgwLF9ib290c3RyYXBVdGlscy5zcGxpdEJzUHJvcHMpKG8pLHA9aVswXSxsPWlbMV0sdT0oMCxfYm9vdHN0cmFwVXRpbHMucHJlZml4KShwLHImJlwiZmx1aWRcIik7cmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQodCwoMCxfZXh0ZW5kczIuZGVmYXVsdCkoe30sbCx7Y2xhc3NOYW1lOigwLF9jbGFzc25hbWVzLmRlZmF1bHQpKHMsdSl9KSl9LEdyaWR9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7R3JpZC5wcm9wVHlwZXM9cHJvcFR5cGVzLEdyaWQuZGVmYXVsdFByb3BzPWRlZmF1bHRQcm9wczt2YXIgX2RlZmF1bHQ9KDAsX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKFwiY29udGFpbmVyXCIsR3JpZCk7ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrZHlhV1F1YW5NaVhTd2libUZ0WlhNaU9sc2lYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENJc0luSmxjWFZwY21VaUxDSmxlSEJ2Y25Seklpd2lYMTlsYzAxdlpIVnNaU0lzSW1SbFptRjFiSFFpTENKZlpYaDBaVzVrY3pJaUxDSmZiMkpxWldOMFYybDBhRzkxZEZCeWIzQmxjblJwWlhOTWIyOXpaVElpTENKZmFXNW9aWEpwZEhOTWIyOXpaVElpTENKZlkyeGhjM051WVcxbGN5SXNJbDl5WldGamRDSXNJbDl3Y205d1ZIbHdaWE1pTENKZlpXeGxiV1Z1ZEZSNWNHVWlMQ0pmWW05dmRITjBjbUZ3VlhScGJITWlMQ0p3Y205d1ZIbHdaWE1pTENKbWJIVnBaQ0lzSW1KdmIyd2lMQ0pqYjIxd2IyNWxiblJEYkdGemN5SXNJbVJsWm1GMWJIUlFjbTl3Y3lJc0lrZHlhV1FpTENKZlVtVmhZM1FrUTI5dGNHOXVaVzUwSWl3aVlYQndiSGtpTENKMGFHbHpJaXdpWVhKbmRXMWxiblJ6SWl3aWNISnZkRzkwZVhCbElpd2ljbVZ1WkdWeUlpd2lYM1JvYVhNa2NISnZjSE1pTENKd2NtOXdjeUlzSWtOdmJYQnZibVZ1ZENJc0ltTnNZWE56VG1GdFpTSXNJbDl6Y0d4cGRFSnpVSEp2Y0hNaUxDSnpjR3hwZEVKelVISnZjSE1pTENKaWMxQnliM0J6SWl3aVpXeGxiV1Z1ZEZCeWIzQnpJaXdpWTJ4aGMzTmxjeUlzSW5CeVpXWnBlQ0lzSW1OeVpXRjBaVVZzWlcxbGJuUWlMQ0pmWkdWbVlYVnNkQ0lzSW1KelEyeGhjM01pTENKdGIyUjFiR1VpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlJVRXNTVUZCU1VFc2RVSkJRWGxDUXl4UlFVRlJMSGRFUVVWeVEwTXNVVUZCVVVNc1dVRkJZU3hGUVVOeVFrUXNVVUZCVVVVc1lVRkJWU3hGUVVWc1FpeEpRVUZKUXl4VlFVRlpUQ3gxUWtGQmRVSkRMRkZCUVZFc01rTkJSVE5EU3l3clFrRkJhVU5PTEhWQ1FVRjFRa01zVVVGQlVTeG5SVUZGYUVWTkxHZENRVUZyUWxBc2RVSkJRWFZDUXl4UlFVRlJMR2xFUVVWcVJFOHNXVUZCWTFJc2RVSkJRWFZDUXl4UlFVRlJMR1ZCUlRkRFVTeFBRVUZUVkN4MVFrRkJkVUpETEZGQlFWRXNWVUZGZUVOVExGZEJRV0ZXTEhWQ1FVRjFRa01zVVVGQlVTeGxRVVUxUTFVc1lVRkJaVmdzZFVKQlFYVkNReXhSUVVGUkxIRkRRVVU1UTFjc1owSkJRV3RDV0N4UlFVRlJMREJDUVVVeFFsa3NWVUZCV1N4RFFVMWtReXhOUVVGUFNpeFhRVUZYVGl4UlFVRlJWeXhMUVVzeFFrTXNaVUZCWjBKTUxHRkJRV0ZRTEZOQlJUTkNZU3hoUVVGbExFTkJRMnBDUkN4bFFVRm5RaXhOUVVOb1FrWXNUMEZCVHl4SFFVZE1TU3hMUVVWS0xGTkJRVlZETEVkQlIxSXNVMEZCVTBRc1QwRkRVQ3hQUVVGUFF5eEZRVUZwUWtNc1RVRkJUVU1zUzBGQlRVTXNXVUZCWTBRc1MwRnpRbkJFTEU5QmVrSkJMRVZCUVVsa0xHZENRVUZuUWtnc1UwRkJVMk1zUzBGQlRVTXNSMEZOZEVKRUxFdEJRVXRMTEZWQlJWaERMRTlCUVZNc1UwRkJVMEVzVTBGRGRrSXNTVUZCU1VNc1JVRkJZMG9zUzBGQlMwc3NUVUZEYmtKYUxFVkJRVkZYTEVWQlFWbFlMRTFCUTNCQ1lTeEZRVUZaUml4RlFVRlpWQ3hsUVVONFFsa3NSVUZCV1Vnc1JVRkJXVWNzVlVGRGVFSkdMRWRCUVZFc1JVRkJTWEJDTEN0Q1FVRXJRa1lzVTBGQlUzRkNMRVZCUVdFc1EwRkJReXhSUVVGVExHbENRVUZyUWl4alFVVTNSa2tzUjBGQlowSXNSVUZCU1dwQ0xHZENRVUZuUW10Q0xHTkJRV05LTEVkQlEyeEVTeXhGUVVGVlJpeEZRVUZqTEVkQlEzaENSeXhGUVVGbFNDeEZRVUZqTEVkQlJUZENTU3hIUVVGVkxFVkJRVWx5UWl4blFrRkJaMEp6UWl4UlFVRlJTQ3hGUVVGVGFrSXNSMEZCVXl4VFFVTTFSQ3hQUVVGUFRDeFBRVUZQVEN4UlFVRlJLMElzWTBGQlkxSXNSMEZCVnl4RlFVRkpkRUlzVlVGQlZVUXNVMEZCVXl4SFFVRkpORUlzUlVGQll5eERRVU4wUmtvc1YwRkJWeXhGUVVGSmNFSXNXVUZCV1Vvc1UwRkJVM2RDTEVWQlFWZExMRTlCU1RWRFppeExRVEZDVkN4RFFUSkNSVlFzVDBGQlQwd3NVVUZCVVhWQ0xGZEJSV3BDVkN4TFFVRkxUQ3hWUVVGWlFTeFZRVU5xUWtzc1MwRkJTMFFzWVVGQlpVRXNZVUZGY0VJc1NVRkJTVzFDTEZWQlFWY3NSVUZCU1hoQ0xHZENRVUZuUW5sQ0xGTkJRVk1zV1VGQllXNUNMRTFCUlhwRWFFSXNVVUZCVVVVc1VVRkJWV2RETEZOQlEyeENSU3hQUVVGUGNFTXNVVUZCVlVFc1VVRkJhVUlpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdFltOXZkSE4wY21Gd0wyeHBZaTlIY21sa0xtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9leHRlbmRzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSksX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9jbGFzc25hbWVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpLF9yZWFjdD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSksX2Jvb3RzdHJhcFV0aWxzPXJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpLEhlbHBCbG9jaz1mdW5jdGlvbihlKXtmdW5jdGlvbiBIZWxwQmxvY2soKXtyZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9cmV0dXJuKDAsX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKEhlbHBCbG9jayxlKSxIZWxwQmxvY2sucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXt2YXIgZT10aGlzLnByb3BzLHQ9ZS5jbGFzc05hbWUscj0oMCxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoZSxbXCJjbGFzc05hbWVcIl0pLHM9KDAsX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykociksbz1zWzBdLGw9c1sxXSxpPSgwLF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkobyk7cmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LGwse2NsYXNzTmFtZTooMCxfY2xhc3NuYW1lcy5kZWZhdWx0KSh0LGkpfSkpfSxIZWxwQmxvY2t9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCksX2RlZmF1bHQ9KDAsX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKFwiaGVscC1ibG9ja1wiLEhlbHBCbG9jayk7ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklraGxiSEJDYkc5amF5NXFjeUpkTENKdVlXMWxjeUk2V3lKZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBJaXdpY21WeGRXbHlaU0lzSW1WNGNHOXlkSE1pTENKZlgyVnpUVzlrZFd4bElpd2laR1ZtWVhWc2RDSXNJbDlsZUhSbGJtUnpNaUlzSWw5dlltcGxZM1JYYVhSb2IzVjBVSEp2Y0dWeWRHbGxjMHh2YjNObE1pSXNJbDlwYm1obGNtbDBjMHh2YjNObE1pSXNJbDlqYkdGemMyNWhiV1Z6SWl3aVgzSmxZV04wSWl3aVgySnZiM1J6ZEhKaGNGVjBhV3h6SWl3aVNHVnNjRUpzYjJOcklpd2lYMUpsWVdOMEpFTnZiWEJ2Ym1WdWRDSXNJbUZ3Y0d4NUlpd2lkR2hwY3lJc0ltRnlaM1Z0Wlc1MGN5SXNJbkJ5YjNSdmRIbHdaU0lzSW5KbGJtUmxjaUlzSWw5MGFHbHpKSEJ5YjNCeklpd2ljSEp2Y0hNaUxDSmpiR0Z6YzA1aGJXVWlMQ0pmYzNCc2FYUkNjMUJ5YjNCeklpd2ljM0JzYVhSQ2MxQnliM0J6SWl3aVluTlFjbTl3Y3lJc0ltVnNaVzFsYm5SUWNtOXdjeUlzSW1Oc1lYTnpaWE1pTENKblpYUkRiR0Z6YzFObGRDSXNJbU55WldGMFpVVnNaVzFsYm5RaUxDSkRiMjF3YjI1bGJuUWlMQ0pmWkdWbVlYVnNkQ0lzSW1KelEyeGhjM01pTENKdGIyUjFiR1VpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlJVRXNTVUZCU1VFc2RVSkJRWGxDUXl4UlFVRlJMSGRFUVVWeVEwTXNVVUZCVVVNc1dVRkJZU3hGUVVOeVFrUXNVVUZCVVVVc1lVRkJWU3hGUVVWc1FpeEpRVUZKUXl4VlFVRlpUQ3gxUWtGQmRVSkRMRkZCUVZFc01rTkJSVE5EU3l3clFrRkJhVU5PTEhWQ1FVRjFRa01zVVVGQlVTeG5SVUZGYUVWTkxHZENRVUZyUWxBc2RVSkJRWFZDUXl4UlFVRlJMR2xFUVVWcVJFOHNXVUZCWTFJc2RVSkJRWFZDUXl4UlFVRlJMR1ZCUlRkRFVTeFBRVUZUVkN4MVFrRkJkVUpETEZGQlFWRXNWVUZGZUVOVExHZENRVUZyUWxRc1VVRkJVU3d3UWtGRk1VSlZMRlZCUlVvc1UwRkJWVU1zUjBGSFVpeFRRVUZUUkN4WlFVTlFMRTlCUVU5RExFVkJRV2xDUXl4TlFVRk5ReXhMUVVGTlF5eFpRVUZqUkN4TFFXOUNjRVFzVDBGMlFrRXNSVUZCU1ZBc1owSkJRV2RDU0N4VFFVRlRUeXhWUVVGWFF5eEhRVTB6UWtRc1ZVRkJWVXNzVlVGRmFFSkRMRTlCUVZNc1UwRkJVMEVzVTBGRGRrSXNTVUZCU1VNc1JVRkJZMG9zUzBGQlMwc3NUVUZEYmtKRExFVkJRVmxHTEVWQlFWbEZMRlZCUTNoQ1JDeEhRVUZSTEVWQlFVbGlMQ3RDUVVFclFrWXNVMEZCVTJNc1JVRkJZU3hEUVVGRExHTkJSV3hGUnl4SFFVRm5RaXhGUVVGSldDeG5Ra0ZCWjBKWkxHTkJRV05JTEVkQlEyeEVTU3hGUVVGVlJpeEZRVUZqTEVkQlEzaENSeXhGUVVGbFNDeEZRVUZqTEVkQlJUZENTU3hIUVVGVkxFVkJRVWxtTEdkQ1FVRm5RbWRDTEdGQlFXRklMRWRCUXk5RExFOUJRVTlrTEU5QlFVOU1MRkZCUVZGMVFpeGpRVUZqTEZGQlFWRXNSVUZCU1hSQ0xGVkJRVlZFTEZOQlFWTXNSMEZCU1c5Q0xFVkJRV01zUTBGRGJrWktMRmRCUVZjc1JVRkJTVm9zV1VGQldVb3NVMEZCVTJkQ0xFVkJRVmRMTEU5QlNUVkRaQ3hWUVhoQ1ZDeERRWGxDUlVZc1QwRkJUMHdzVVVGQlVYZENMRmRCUldKRExGVkJRVmNzUlVGQlNXNUNMR2RDUVVGblFtOUNMRk5CUVZNc1lVRkJZMjVDTEZkQlJURkVWQ3hSUVVGUlJTeFJRVUZWZVVJc1UwRkRiRUpGTEU5QlFVODNRaXhSUVVGVlFTeFJRVUZwUWlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDMWliMjkwYzNSeVlYQXZiR2xpTDBobGJIQkNiRzlqYXk1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PXZvaWQgMDt2YXIgX2V4dGVuZHMyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKSxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpLF9pbmhlcml0c0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSksX2NsYXNzbmFtZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKSxfcHJvcFR5cGVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpLF9ib290c3RyYXBVdGlscz1yZXF1aXJlKFwiLi91dGlscy9ib290c3RyYXBVdGlsc1wiKSxwcm9wVHlwZXM9e3Jlc3BvbnNpdmU6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wscm91bmRlZDpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxjaXJjbGU6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsdGh1bWJuYWlsOl9wcm9wVHlwZXMuZGVmYXVsdC5ib29sfSxkZWZhdWx0UHJvcHM9e3Jlc3BvbnNpdmU6ITEscm91bmRlZDohMSxjaXJjbGU6ITEsdGh1bWJuYWlsOiExfSxJbWFnZT1mdW5jdGlvbihlKXtmdW5jdGlvbiBJbWFnZSgpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4oMCxfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoSW1hZ2UsZSksSW1hZ2UucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXt2YXIgZSxyPXRoaXMucHJvcHMsdD1yLnJlc3BvbnNpdmUsbz1yLnJvdW5kZWQscz1yLmNpcmNsZSxpPXIudGh1bWJuYWlsLHA9ci5jbGFzc05hbWUsYT0oMCxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkocixbXCJyZXNwb25zaXZlXCIsXCJyb3VuZGVkXCIsXCJjaXJjbGVcIixcInRodW1ibmFpbFwiLFwiY2xhc3NOYW1lXCJdKSxsPSgwLF9ib290c3RyYXBVdGlscy5zcGxpdEJzUHJvcHMpKGEpLHU9bFswXSxuPWxbMV0sZD0oKGU9e30pWygwLF9ib290c3RyYXBVdGlscy5wcmVmaXgpKHUsXCJyZXNwb25zaXZlXCIpXT10LGVbKDAsX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkodSxcInJvdW5kZWRcIildPW8sZVsoMCxfYm9vdHN0cmFwVXRpbHMucHJlZml4KSh1LFwiY2lyY2xlXCIpXT1zLGVbKDAsX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkodSxcInRodW1ibmFpbFwiKV09aSxlKTtyZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImltZ1wiLCgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSxuLHtjbGFzc05hbWU6KDAsX2NsYXNzbmFtZXMuZGVmYXVsdCkocCxkKX0pKX0sSW1hZ2V9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7SW1hZ2UucHJvcFR5cGVzPXByb3BUeXBlcyxJbWFnZS5kZWZhdWx0UHJvcHM9ZGVmYXVsdFByb3BzO3ZhciBfZGVmYXVsdD0oMCxfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoXCJpbWdcIixJbWFnZSk7ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrbHRZV2RsTG1weklsMHNJbTVoYldWeklqcGJJbDlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRaUxDSnlaWEYxYVhKbElpd2laWGh3YjNKMGN5SXNJbDlmWlhOTmIyUjFiR1VpTENKa1pXWmhkV3gwSWl3aVgyVjRkR1Z1WkhNeUlpd2lYMjlpYW1WamRGZHBkR2h2ZFhSUWNtOXdaWEowYVdWelRHOXZjMlV5SWl3aVgybHVhR1Z5YVhSelRHOXZjMlV5SWl3aVgyTnNZWE56Ym1GdFpYTWlMQ0pmY21WaFkzUWlMQ0pmY0hKdmNGUjVjR1Z6SWl3aVgySnZiM1J6ZEhKaGNGVjBhV3h6SWl3aWNISnZjRlI1Y0dWeklpd2ljbVZ6Y0c5dWMybDJaU0lzSW1KdmIyd2lMQ0p5YjNWdVpHVmtJaXdpWTJseVkyeGxJaXdpZEdoMWJXSnVZV2xzSWl3aVpHVm1ZWFZzZEZCeWIzQnpJaXdpU1cxaFoyVWlMQ0pmVW1WaFkzUWtRMjl0Y0c5dVpXNTBJaXdpWVhCd2JIa2lMQ0owYUdseklpd2lZWEpuZFcxbGJuUnpJaXdpY0hKdmRHOTBlWEJsSWl3aWNtVnVaR1Z5SWl3aVgyTnNZWE56WlhNaUxDSmZkR2hwY3lSd2NtOXdjeUlzSW5CeWIzQnpJaXdpWTJ4aGMzTk9ZVzFsSWl3aVgzTndiR2wwUW5OUWNtOXdjeUlzSW5Od2JHbDBRbk5RY205d2N5SXNJbUp6VUhKdmNITWlMQ0psYkdWdFpXNTBVSEp2Y0hNaUxDSmpiR0Z6YzJWeklpd2ljSEpsWm1sNElpd2lZM0psWVhSbFJXeGxiV1Z1ZENJc0lrTnZiWEJ2Ym1WdWRDSXNJbDlrWldaaGRXeDBJaXdpWW5ORGJHRnpjeUlzSW0xdlpIVnNaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRlFTeEpRVUZKUVN4MVFrRkJlVUpETEZGQlFWRXNkMFJCUlhKRFF5eFJRVUZSUXl4WlFVRmhMRVZCUTNKQ1JDeFJRVUZSUlN4aFFVRlZMRVZCUld4Q0xFbEJRVWxETEZWQlFWbE1MSFZDUVVGMVFrTXNVVUZCVVN3eVEwRkZNME5MTEN0Q1FVRnBRMDRzZFVKQlFYVkNReXhSUVVGUkxHZEZRVVZvUlUwc1owSkJRV3RDVUN4MVFrRkJkVUpETEZGQlFWRXNhVVJCUldwRVR5eFpRVUZqVWl4MVFrRkJkVUpETEZGQlFWRXNaVUZGTjBOUkxFOUJRVk5VTEhWQ1FVRjFRa01zVVVGQlVTeFZRVVY0UTFNc1YwRkJZVllzZFVKQlFYVkNReXhSUVVGUkxHVkJSVFZEVlN4blFrRkJhMEpXTEZGQlFWRXNNRUpCUlRGQ1Z5eFZRVUZaTEVOQlNXUkRMRmRCUVZsSUxGZEJRVmRPTEZGQlFWRlZMRXRCU3k5Q1F5eFJRVUZUVEN4WFFVRlhUaXhSUVVGUlZTeExRVXMxUWtVc1QwRkJVVTRzVjBGQlYwNHNVVUZCVVZVc1MwRkxNMEpITEZWQlFWZFFMRmRCUVZkT0xGRkJRVkZWTEUxQlJUVkNTU3hoUVVGbExFTkJRMnBDVEN4WlFVRlpMRVZCUTFwRkxGTkJRVk1zUlVGRFZFTXNVVUZCVVN4RlFVTlNReXhYUVVGWExFZEJSMVJGTEUxQlJVb3NVMEZCVlVNc1IwRkhVaXhUUVVGVFJDeFJRVU5RTEU5QlFVOURMRVZCUVdsQ1F5eE5RVUZOUXl4TFFVRk5ReXhaUVVGalJDeExRVEJDY0VRc1QwRTNRa0VzUlVGQlNXWXNaMEpCUVdkQ1NDeFRRVUZUWlN4TlFVRlBReXhIUVUxMlFrUXNUVUZCVFVzc1ZVRkZXa01zVDBGQlV5eFRRVUZUUVN4VFFVTjJRaXhKUVVGSlF5eEZRVVZCUXl4RlFVRmpUQ3hMUVVGTFRTeE5RVU51UW1Zc1JVRkJZV01zUlVGQldXUXNWMEZEZWtKRkxFVkJRVlZaTEVWQlFWbGFMRkZCUTNSQ1F5eEZRVUZUVnl4RlFVRlpXQ3hQUVVOeVFrTXNSVUZCV1ZVc1JVRkJXVllzVlVGRGVFSlpMRVZCUVZsR0xFVkJRVmxGTEZWQlEzaENSQ3hIUVVGUkxFVkJRVWwwUWl3clFrRkJLMEpHTEZOQlFWTjFRaXhGUVVGaExFTkJRVU1zWVVGQll5eFZRVUZYTEZOQlFWVXNXVUZCWVN4alFVVnNTRWNzUjBGQlowSXNSVUZCU1c1Q0xHZENRVUZuUW05Q0xHTkJRV05JTEVkQlEyeEVTU3hGUVVGVlJpeEZRVUZqTEVkQlEzaENSeXhGUVVGbFNDeEZRVUZqTEVkQlJUZENTU3hKUVVGWFVpeEZRVUZYTEV0QlFXRXNSVUZCU1dZc1owSkJRV2RDZDBJc1VVRkJVVWdzUlVGQlV5eGxRVUZwUW01Q0xFVkJRVmxoTEVkQlFWTXNSVUZCU1dZc1owSkJRV2RDZDBJc1VVRkJVVWdzUlVGQlV5eFpRVUZqYWtJc1JVRkJVMWNzUjBGQlV5eEZRVUZKWml4blFrRkJaMEozUWl4UlFVRlJTQ3hGUVVGVExGZEJRV0ZvUWl4RlFVRlJWU3hIUVVGVExFVkJRVWxtTEdkQ1FVRm5RbmRDTEZGQlFWRklMRVZCUVZNc1kwRkJaMEptTEVWQlFWZFRMRWRCUXpGVUxFOUJRVTlxUWl4UFFVRlBUQ3hSUVVGUlowTXNZMEZCWXl4UFFVRlBMRVZCUVVrdlFpeFZRVUZWUkN4VFFVRlRMRWRCUVVrMlFpeEZRVUZqTEVOQlEyeEdTaXhYUVVGWExFVkJRVWx5UWl4WlFVRlpTaXhUUVVGVGVVSXNSVUZCVjBzc1QwRkpOVU5tTEUxQk9VSlVMRU5CSzBKRlZpeFBRVUZQVEN4UlFVRlJhVU1zVjBGRmFrSnNRaXhOUVVGTlVDeFZRVUZaUVN4VlFVTnNRazhzVFVGQlRVUXNZVUZCWlVFc1lVRkZja0lzU1VGQlNXOUNMRlZCUVZjc1JVRkJTVE5DTEdkQ1FVRm5RalJDTEZOQlFWTXNUVUZCVDNCQ0xFOUJSVzVFYWtJc1VVRkJVVVVzVVVGQlZXdERMRk5CUTJ4Q1JTeFBRVUZQZEVNc1VVRkJWVUVzVVVGQmFVSWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F0WW05dmRITjBjbUZ3TDJ4cFlpOUpiV0ZuWlM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PXZvaWQgMDt2YXIgX2V4dGVuZHMyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKSxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpLF9pbmhlcml0c0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSksX2NsYXNzbmFtZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKSxfSW5wdXRHcm91cEFkZG9uPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vSW5wdXRHcm91cEFkZG9uXCIpKSxfSW5wdXRHcm91cEJ1dHRvbj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0lucHV0R3JvdXBCdXR0b25cIikpLF9ib290c3RyYXBVdGlscz1yZXF1aXJlKFwiLi91dGlscy9ib290c3RyYXBVdGlsc1wiKSxfU3R5bGVDb25maWc9cmVxdWlyZShcIi4vdXRpbHMvU3R5bGVDb25maWdcIiksSW5wdXRHcm91cD1mdW5jdGlvbihlKXtmdW5jdGlvbiBJbnB1dEdyb3VwKCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybigwLF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShJbnB1dEdyb3VwLGUpLElucHV0R3JvdXAucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXt2YXIgZT10aGlzLnByb3BzLHQ9ZS5jbGFzc05hbWUscj0oMCxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoZSxbXCJjbGFzc05hbWVcIl0pLHU9KDAsX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykociksbz11WzBdLHM9dVsxXSxpPSgwLF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkobyk7cmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LHMse2NsYXNzTmFtZTooMCxfY2xhc3NuYW1lcy5kZWZhdWx0KSh0LGkpfSkpfSxJbnB1dEdyb3VwfShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO0lucHV0R3JvdXAuQWRkb249X0lucHV0R3JvdXBBZGRvbi5kZWZhdWx0LElucHV0R3JvdXAuQnV0dG9uPV9JbnB1dEdyb3VwQnV0dG9uLmRlZmF1bHQ7dmFyIF9kZWZhdWx0PSgwLF9ib290c3RyYXBVdGlscy5ic0NsYXNzKShcImlucHV0LWdyb3VwXCIsKDAsX2Jvb3RzdHJhcFV0aWxzLmJzU2l6ZXMpKFtfU3R5bGVDb25maWcuU2l6ZS5MQVJHRSxfU3R5bGVDb25maWcuU2l6ZS5TTUFMTF0sSW5wdXRHcm91cCkpO2V4cG9ydHMuZGVmYXVsdD1fZGVmYXVsdCxtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa2x1Y0hWMFIzSnZkWEF1YW5NaVhTd2libUZ0WlhNaU9sc2lYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENJc0luSmxjWFZwY21VaUxDSmxlSEJ2Y25Seklpd2lYMTlsYzAxdlpIVnNaU0lzSW1SbFptRjFiSFFpTENKZlpYaDBaVzVrY3pJaUxDSmZiMkpxWldOMFYybDBhRzkxZEZCeWIzQmxjblJwWlhOTWIyOXpaVElpTENKZmFXNW9aWEpwZEhOTWIyOXpaVElpTENKZlkyeGhjM051WVcxbGN5SXNJbDl5WldGamRDSXNJbDlKYm5CMWRFZHliM1Z3UVdSa2IyNGlMQ0pmU1c1d2RYUkhjbTkxY0VKMWRIUnZiaUlzSWw5aWIyOTBjM1J5WVhCVmRHbHNjeUlzSWw5VGRIbHNaVU52Ym1acFp5SXNJa2x1Y0hWMFIzSnZkWEFpTENKZlVtVmhZM1FrUTI5dGNHOXVaVzUwSWl3aVlYQndiSGtpTENKMGFHbHpJaXdpWVhKbmRXMWxiblJ6SWl3aWNISnZkRzkwZVhCbElpd2ljbVZ1WkdWeUlpd2lYM1JvYVhNa2NISnZjSE1pTENKd2NtOXdjeUlzSW1Oc1lYTnpUbUZ0WlNJc0lsOXpjR3hwZEVKelVISnZjSE1pTENKemNHeHBkRUp6VUhKdmNITWlMQ0ppYzFCeWIzQnpJaXdpWld4bGJXVnVkRkJ5YjNCeklpd2lZMnhoYzNObGN5SXNJbWRsZEVOc1lYTnpVMlYwSWl3aVkzSmxZWFJsUld4bGJXVnVkQ0lzSWtOdmJYQnZibVZ1ZENJc0lrRmtaRzl1SWl3aVFuVjBkRzl1SWl3aVgyUmxabUYxYkhRaUxDSmljME5zWVhOeklpd2lZbk5UYVhwbGN5SXNJbE5wZW1VaUxDSk1RVkpIUlNJc0lsTk5RVXhNSWl3aWJXOWtkV3hsSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4aFFVVkJMRWxCUVVsQkxIVkNRVUY1UWtNc1VVRkJVU3gzUkVGRmNrTkRMRkZCUVZGRExGbEJRV0VzUlVGRGNrSkVMRkZCUVZGRkxHRkJRVlVzUlVGRmJFSXNTVUZCU1VNc1ZVRkJXVXdzZFVKQlFYVkNReXhSUVVGUkxESkRRVVV6UTBzc0swSkJRV2xEVGl4MVFrRkJkVUpETEZGQlFWRXNaMFZCUldoRlRTeG5Ra0ZCYTBKUUxIVkNRVUYxUWtNc1VVRkJVU3hwUkVGRmFrUlBMRmxCUVdOU0xIVkNRVUYxUWtNc1VVRkJVU3hsUVVVM1ExRXNUMEZCVTFRc2RVSkJRWFZDUXl4UlFVRlJMRlZCUlhoRFV5eHBRa0ZCYlVKV0xIVkNRVUYxUWtNc1VVRkJVU3h6UWtGRmJFUlZMR3RDUVVGdlFsZ3NkVUpCUVhWQ1F5eFJRVUZSTEhWQ1FVVnVSRmNzWjBKQlFXdENXQ3hSUVVGUkxEQkNRVVV4UWxrc1lVRkJaVm9zVVVGQlVTeDFRa0ZGZGtKaExGZEJSVW9zVTBGQlZVTXNSMEZIVWl4VFFVRlRSQ3hoUVVOUUxFOUJRVTlETEVWQlFXbENReXhOUVVGTlF5eExRVUZOUXl4WlFVRmpSQ3hMUVc5Q2NFUXNUMEYyUWtFc1JVRkJTVllzWjBKQlFXZENTQ3hUUVVGVFZTeFhRVUZaUXl4SFFVMDFRa1FzVjBGQlYwc3NWVUZGYWtKRExFOUJRVk1zVTBGQlUwRXNVMEZEZGtJc1NVRkJTVU1zUlVGQlkwb3NTMEZCUzBzc1RVRkRia0pETEVWQlFWbEdMRVZCUVZsRkxGVkJRM2hDUkN4SFFVRlJMRVZCUVVsb1Fpd3JRa0ZCSzBKR0xGTkJRVk5wUWl4RlFVRmhMRU5CUVVNc1kwRkZiRVZITEVkQlFXZENMRVZCUVVsYUxHZENRVUZuUW1Fc1kwRkJZMGdzUjBGRGJFUkpMRVZCUVZWR0xFVkJRV01zUjBGRGVFSkhMRVZCUVdWSUxFVkJRV01zUjBGRk4wSkpMRWRCUVZVc1JVRkJTV2hDTEdkQ1FVRm5RbWxDTEdGQlFXRklMRWRCUXk5RExFOUJRVTlxUWl4UFFVRlBUQ3hSUVVGUk1FSXNZMEZCWXl4UlFVRlJMRVZCUVVsNlFpeFZRVUZWUkN4VFFVRlRMRWRCUVVsMVFpeEZRVUZqTEVOQlEyNUdTaXhYUVVGWExFVkJRVWxtTEZsQlFWbEtMRk5CUVZOdFFpeEZRVUZYU3l4UFFVazFRMlFzVjBGNFFsUXNRMEY1UWtWTUxFOUJRVTlNTEZGQlFWRXlRaXhYUVVWcVFtcENMRmRCUVZkclFpeE5RVUZSZEVJc2FVSkJRV2xDVGl4UlFVTndRMVVzVjBGQlYyMUNMRTlCUVZOMFFpeHJRa0ZCYTBKUUxGRkJSWFJETEVsQlFVazRRaXhWUVVGWExFVkJRVWwwUWl4blFrRkJaMEoxUWl4VFFVRlRMR1ZCUVdVc1JVRkJTWFpDTEdkQ1FVRm5RbmRDTEZOQlFWTXNRMEZCUTNaQ0xHRkJRV0YzUWl4TFFVRkxReXhOUVVGUGVrSXNZVUZCWVhkQ0xFdEJRVXRGTEU5QlFWRjZRaXhoUVVVMVNWb3NVVUZCVVVVc1VVRkJWVGhDTEZOQlEyeENUU3hQUVVGUGRFTXNVVUZCVlVFc1VVRkJhVUlpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdFltOXZkSE4wY21Gd0wyeHBZaTlKYm5CMWRFZHliM1Z3TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PXZvaWQgMDt2YXIgX2V4dGVuZHMyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKSxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpLF9pbmhlcml0c0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSksX2NsYXNzbmFtZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKSxfYm9vdHN0cmFwVXRpbHM9cmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIiksSW5wdXRHcm91cEFkZG9uPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIElucHV0R3JvdXBBZGRvbigpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4oMCxfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoSW5wdXRHcm91cEFkZG9uLGUpLElucHV0R3JvdXBBZGRvbi5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uIHJlbmRlcigpe3ZhciBlPXRoaXMucHJvcHMsdD1lLmNsYXNzTmFtZSxyPSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShlLFtcImNsYXNzTmFtZVwiXSksbz0oMCxfYm9vdHN0cmFwVXRpbHMuc3BsaXRCc1Byb3BzKShyKSxzPW9bMF0sdT1vWzFdLGk9KDAsX2Jvb3RzdHJhcFV0aWxzLmdldENsYXNzU2V0KShzKTtyZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInNwYW5cIiwoMCxfZXh0ZW5kczIuZGVmYXVsdCkoe30sdSx7Y2xhc3NOYW1lOigwLF9jbGFzc25hbWVzLmRlZmF1bHQpKHQsaSl9KSl9LElucHV0R3JvdXBBZGRvbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KSxfZGVmYXVsdD0oMCxfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoXCJpbnB1dC1ncm91cC1hZGRvblwiLElucHV0R3JvdXBBZGRvbik7ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrbHVjSFYwUjNKdmRYQkJaR1J2Ymk1cWN5SmRMQ0p1WVcxbGN5STZXeUpmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MElpd2ljbVZ4ZFdseVpTSXNJbVY0Y0c5eWRITWlMQ0pmWDJWelRXOWtkV3hsSWl3aVpHVm1ZWFZzZENJc0lsOWxlSFJsYm1Sek1pSXNJbDl2WW1wbFkzUlhhWFJvYjNWMFVISnZjR1Z5ZEdsbGMweHZiM05sTWlJc0lsOXBibWhsY21sMGMweHZiM05sTWlJc0lsOWpiR0Z6YzI1aGJXVnpJaXdpWDNKbFlXTjBJaXdpWDJKdmIzUnpkSEpoY0ZWMGFXeHpJaXdpU1c1d2RYUkhjbTkxY0VGa1pHOXVJaXdpWDFKbFlXTjBKRU52YlhCdmJtVnVkQ0lzSW1Gd2NHeDVJaXdpZEdocGN5SXNJbUZ5WjNWdFpXNTBjeUlzSW5CeWIzUnZkSGx3WlNJc0luSmxibVJsY2lJc0lsOTBhR2x6SkhCeWIzQnpJaXdpY0hKdmNITWlMQ0pqYkdGemMwNWhiV1VpTENKZmMzQnNhWFJDYzFCeWIzQnpJaXdpYzNCc2FYUkNjMUJ5YjNCeklpd2lZbk5RY205d2N5SXNJbVZzWlcxbGJuUlFjbTl3Y3lJc0ltTnNZWE56WlhNaUxDSm5aWFJEYkdGemMxTmxkQ0lzSW1OeVpXRjBaVVZzWlcxbGJuUWlMQ0pEYjIxd2IyNWxiblFpTENKZlpHVm1ZWFZzZENJc0ltSnpRMnhoYzNNaUxDSnRiMlIxYkdVaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJSVUVzU1VGQlNVRXNkVUpCUVhsQ1F5eFJRVUZSTEhkRVFVVnlRME1zVVVGQlVVTXNXVUZCWVN4RlFVTnlRa1FzVVVGQlVVVXNZVUZCVlN4RlFVVnNRaXhKUVVGSlF5eFZRVUZaVEN4MVFrRkJkVUpETEZGQlFWRXNNa05CUlRORFN5d3JRa0ZCYVVOT0xIVkNRVUYxUWtNc1VVRkJVU3huUlVGRmFFVk5MR2RDUVVGclFsQXNkVUpCUVhWQ1F5eFJRVUZSTEdsRVFVVnFSRThzV1VGQlkxSXNkVUpCUVhWQ1F5eFJRVUZSTEdWQlJUZERVU3hQUVVGVFZDeDFRa0ZCZFVKRExGRkJRVkVzVlVGRmVFTlRMR2RDUVVGclFsUXNVVUZCVVN3d1FrRkZNVUpWTEdkQ1FVVktMRk5CUVZWRExFZEJSMUlzVTBGQlUwUXNhMEpCUTFBc1QwRkJUME1zUlVGQmFVSkRMRTFCUVUxRExFdEJRVTFETEZsQlFXTkVMRXRCYjBKd1JDeFBRWFpDUVN4RlFVRkpVQ3huUWtGQlowSklMRk5CUVZOUExHZENRVUZwUWtNc1IwRk5ha05FTEdkQ1FVRm5Ra3NzVlVGRmRFSkRMRTlCUVZNc1UwRkJVMEVzVTBGRGRrSXNTVUZCU1VNc1JVRkJZMG9zUzBGQlMwc3NUVUZEYmtKRExFVkJRVmxHTEVWQlFWbEZMRlZCUTNoQ1JDeEhRVUZSTEVWQlFVbGlMQ3RDUVVFclFrWXNVMEZCVTJNc1JVRkJZU3hEUVVGRExHTkJSV3hGUnl4SFFVRm5RaXhGUVVGSldDeG5Ra0ZCWjBKWkxHTkJRV05JTEVkQlEyeEVTU3hGUVVGVlJpeEZRVUZqTEVkQlEzaENSeXhGUVVGbFNDeEZRVUZqTEVkQlJUZENTU3hIUVVGVkxFVkJRVWxtTEdkQ1FVRm5RbWRDTEdGQlFXRklMRWRCUXk5RExFOUJRVTlrTEU5QlFVOU1MRkZCUVZGMVFpeGpRVUZqTEZGQlFWRXNSVUZCU1hSQ0xGVkJRVlZFTEZOQlFWTXNSMEZCU1c5Q0xFVkJRV01zUTBGRGJrWktMRmRCUVZjc1JVRkJTVm9zV1VGQldVb3NVMEZCVTJkQ0xFVkJRVmRMTEU5QlNUVkRaQ3huUWtGNFFsUXNRMEY1UWtWR0xFOUJRVTlNTEZGQlFWRjNRaXhYUVVWaVF5eFZRVUZYTEVWQlFVbHVRaXhuUWtGQlowSnZRaXhUUVVGVExHOUNRVUZ4UW01Q0xHbENRVVZxUlZRc1VVRkJVVVVzVVVGQlZYbENMRk5CUTJ4Q1JTeFBRVUZQTjBJc1VVRkJWVUVzVVVGQmFVSWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F0WW05dmRITjBjbUZ3TDJ4cFlpOUpibkIxZEVkeWIzVndRV1JrYjI0dWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9leHRlbmRzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSksX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9jbGFzc25hbWVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpLF9yZWFjdD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSksX2Jvb3RzdHJhcFV0aWxzPXJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpLElucHV0R3JvdXBCdXR0b249ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gSW5wdXRHcm91cEJ1dHRvbigpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4oMCxfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoSW5wdXRHcm91cEJ1dHRvbixlKSxJbnB1dEdyb3VwQnV0dG9uLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIGU9dGhpcy5wcm9wcyx0PWUuY2xhc3NOYW1lLHI9KDAsX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKGUsW1wiY2xhc3NOYW1lXCJdKSxvPSgwLF9ib290c3RyYXBVdGlscy5zcGxpdEJzUHJvcHMpKHIpLHM9b1swXSx1PW9bMV0saT0oMCxfYm9vdHN0cmFwVXRpbHMuZ2V0Q2xhc3NTZXQpKHMpO3JldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSx1LHtjbGFzc05hbWU6KDAsX2NsYXNzbmFtZXMuZGVmYXVsdCkodCxpKX0pKX0sSW5wdXRHcm91cEJ1dHRvbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KSxfZGVmYXVsdD0oMCxfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoXCJpbnB1dC1ncm91cC1idG5cIixJbnB1dEdyb3VwQnV0dG9uKTtleHBvcnRzLmRlZmF1bHQ9X2RlZmF1bHQsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtsdWNIVjBSM0p2ZFhCQ2RYUjBiMjR1YW5NaVhTd2libUZ0WlhNaU9sc2lYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENJc0luSmxjWFZwY21VaUxDSmxlSEJ2Y25Seklpd2lYMTlsYzAxdlpIVnNaU0lzSW1SbFptRjFiSFFpTENKZlpYaDBaVzVrY3pJaUxDSmZiMkpxWldOMFYybDBhRzkxZEZCeWIzQmxjblJwWlhOTWIyOXpaVElpTENKZmFXNW9aWEpwZEhOTWIyOXpaVElpTENKZlkyeGhjM051WVcxbGN5SXNJbDl5WldGamRDSXNJbDlpYjI5MGMzUnlZWEJWZEdsc2N5SXNJa2x1Y0hWMFIzSnZkWEJDZFhSMGIyNGlMQ0pmVW1WaFkzUWtRMjl0Y0c5dVpXNTBJaXdpWVhCd2JIa2lMQ0owYUdseklpd2lZWEpuZFcxbGJuUnpJaXdpY0hKdmRHOTBlWEJsSWl3aWNtVnVaR1Z5SWl3aVgzUm9hWE1rY0hKdmNITWlMQ0p3Y205d2N5SXNJbU5zWVhOelRtRnRaU0lzSWw5emNHeHBkRUp6VUhKdmNITWlMQ0p6Y0d4cGRFSnpVSEp2Y0hNaUxDSmljMUJ5YjNCeklpd2laV3hsYldWdWRGQnliM0J6SWl3aVkyeGhjM05sY3lJc0ltZGxkRU5zWVhOelUyVjBJaXdpWTNKbFlYUmxSV3hsYldWdWRDSXNJa052YlhCdmJtVnVkQ0lzSWw5a1pXWmhkV3gwSWl3aVluTkRiR0Z6Y3lJc0ltMXZaSFZzWlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkZRU3hKUVVGSlFTeDFRa0ZCZVVKRExGRkJRVkVzZDBSQlJYSkRReXhSUVVGUlF5eFpRVUZoTEVWQlEzSkNSQ3hSUVVGUlJTeGhRVUZWTEVWQlJXeENMRWxCUVVsRExGVkJRVmxNTEhWQ1FVRjFRa01zVVVGQlVTd3lRMEZGTTBOTExDdENRVUZwUTA0c2RVSkJRWFZDUXl4UlFVRlJMR2RGUVVWb1JVMHNaMEpCUVd0Q1VDeDFRa0ZCZFVKRExGRkJRVkVzYVVSQlJXcEVUeXhaUVVGalVpeDFRa0ZCZFVKRExGRkJRVkVzWlVGRk4wTlJMRTlCUVZOVUxIVkNRVUYxUWtNc1VVRkJVU3hWUVVWNFExTXNaMEpCUVd0Q1ZDeFJRVUZSTERCQ1FVVXhRbFVzYVVKQlJVb3NVMEZCVlVNc1IwRkhVaXhUUVVGVFJDeHRRa0ZEVUN4UFFVRlBReXhGUVVGcFFrTXNUVUZCVFVNc1MwRkJUVU1zV1VGQlkwUXNTMEZ2UW5CRUxFOUJka0pCTEVWQlFVbFFMR2RDUVVGblFrZ3NVMEZCVTA4c2FVSkJRV3RDUXl4SFFVMXNRMFFzYVVKQlFXbENTeXhWUVVWMlFrTXNUMEZCVXl4VFFVRlRRU3hUUVVOMlFpeEpRVUZKUXl4RlFVRmpTaXhMUVVGTFN5eE5RVU51UWtNc1JVRkJXVVlzUlVGQldVVXNWVUZEZUVKRUxFZEJRVkVzUlVGQlNXSXNLMEpCUVN0Q1JpeFRRVUZUWXl4RlFVRmhMRU5CUVVNc1kwRkZiRVZITEVkQlFXZENMRVZCUVVsWUxHZENRVUZuUWxrc1kwRkJZMGdzUjBGRGJFUkpMRVZCUVZWR0xFVkJRV01zUjBGRGVFSkhMRVZCUVdWSUxFVkJRV01zUjBGRk4wSkpMRWRCUVZVc1JVRkJTV1lzWjBKQlFXZENaMElzWVVGQllVZ3NSMEZETDBNc1QwRkJUMlFzVDBGQlQwd3NVVUZCVVhWQ0xHTkJRV01zVVVGQlVTeEZRVUZKZEVJc1ZVRkJWVVFzVTBGQlV5eEhRVUZKYjBJc1JVRkJZeXhEUVVOdVJrb3NWMEZCVnl4RlFVRkpXaXhaUVVGWlNpeFRRVUZUWjBJc1JVRkJWMHNzVDBGSk5VTmtMR2xDUVhoQ1ZDeERRWGxDUlVZc1QwRkJUMHdzVVVGQlVYZENMRmRCUldKRExGVkJRVmNzUlVGQlNXNUNMR2RDUVVGblFtOUNMRk5CUVZNc2EwSkJRVzFDYmtJc2EwSkJSUzlFVkN4UlFVRlJSU3hSUVVGVmVVSXNVMEZEYkVKRkxFOUJRVTgzUWl4UlFVRlZRU3hSUVVGcFFpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzFpYjI5MGMzUnlZWEF2YkdsaUwwbHVjSFYwUjNKdmRYQkNkWFIwYjI0dWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9leHRlbmRzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSksX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9yZWFjdD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSksX2NsYXNzbmFtZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSksX2VsZW1lbnRUeXBlPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlXCIpKSxfYm9vdHN0cmFwVXRpbHM9cmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIikscHJvcFR5cGVzPXtjb21wb25lbnRDbGFzczpfZWxlbWVudFR5cGUuZGVmYXVsdH0sZGVmYXVsdFByb3BzPXtjb21wb25lbnRDbGFzczpcImRpdlwifSxKdW1ib3Ryb249ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gSnVtYm90cm9uKCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybigwLF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShKdW1ib3Ryb24sZSksSnVtYm90cm9uLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIGU9dGhpcy5wcm9wcyx0PWUuY29tcG9uZW50Q2xhc3Mscj1lLmNsYXNzTmFtZSxvPSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShlLFtcImNvbXBvbmVudENsYXNzXCIsXCJjbGFzc05hbWVcIl0pLHM9KDAsX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykobyksdT1zWzBdLGE9c1sxXSxsPSgwLF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkodSk7cmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQodCwoMCxfZXh0ZW5kczIuZGVmYXVsdCkoe30sYSx7Y2xhc3NOYW1lOigwLF9jbGFzc25hbWVzLmRlZmF1bHQpKHIsbCl9KSl9LEp1bWJvdHJvbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtKdW1ib3Ryb24ucHJvcFR5cGVzPXByb3BUeXBlcyxKdW1ib3Ryb24uZGVmYXVsdFByb3BzPWRlZmF1bHRQcm9wczt2YXIgX2RlZmF1bHQ9KDAsX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKFwianVtYm90cm9uXCIsSnVtYm90cm9uKTtleHBvcnRzLmRlZmF1bHQ9X2RlZmF1bHQsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtwMWJXSnZkSEp2Ymk1cWN5SmRMQ0p1WVcxbGN5STZXeUpmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MElpd2ljbVZ4ZFdseVpTSXNJbVY0Y0c5eWRITWlMQ0pmWDJWelRXOWtkV3hsSWl3aVpHVm1ZWFZzZENJc0lsOWxlSFJsYm1Sek1pSXNJbDl2WW1wbFkzUlhhWFJvYjNWMFVISnZjR1Z5ZEdsbGMweHZiM05sTWlJc0lsOXBibWhsY21sMGMweHZiM05sTWlJc0lsOXlaV0ZqZENJc0lsOWpiR0Z6YzI1aGJXVnpJaXdpWDJWc1pXMWxiblJVZVhCbElpd2lYMkp2YjNSemRISmhjRlYwYVd4eklpd2ljSEp2Y0ZSNWNHVnpJaXdpWTI5dGNHOXVaVzUwUTJ4aGMzTWlMQ0prWldaaGRXeDBVSEp2Y0hNaUxDSktkVzFpYjNSeWIyNGlMQ0pmVW1WaFkzUWtRMjl0Y0c5dVpXNTBJaXdpWVhCd2JIa2lMQ0owYUdseklpd2lZWEpuZFcxbGJuUnpJaXdpY0hKdmRHOTBlWEJsSWl3aWNtVnVaR1Z5SWl3aVgzUm9hWE1rY0hKdmNITWlMQ0p3Y205d2N5SXNJa052YlhCdmJtVnVkQ0lzSW1Oc1lYTnpUbUZ0WlNJc0lsOXpjR3hwZEVKelVISnZjSE1pTENKemNHeHBkRUp6VUhKdmNITWlMQ0ppYzFCeWIzQnpJaXdpWld4bGJXVnVkRkJ5YjNCeklpd2lZMnhoYzNObGN5SXNJbWRsZEVOc1lYTnpVMlYwSWl3aVkzSmxZWFJsUld4bGJXVnVkQ0lzSWw5a1pXWmhkV3gwSWl3aVluTkRiR0Z6Y3lJc0ltMXZaSFZzWlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkZRU3hKUVVGSlFTeDFRa0ZCZVVKRExGRkJRVkVzZDBSQlJYSkRReXhSUVVGUlF5eFpRVUZoTEVWQlEzSkNSQ3hSUVVGUlJTeGhRVUZWTEVWQlJXeENMRWxCUVVsRExGVkJRVmxNTEhWQ1FVRjFRa01zVVVGQlVTd3lRMEZGTTBOTExDdENRVUZwUTA0c2RVSkJRWFZDUXl4UlFVRlJMR2RGUVVWb1JVMHNaMEpCUVd0Q1VDeDFRa0ZCZFVKRExGRkJRVkVzYVVSQlJXcEVUeXhQUVVGVFVpeDFRa0ZCZFVKRExGRkJRVkVzVlVGRmVFTlJMRmxCUVdOVUxIVkNRVUYxUWtNc1VVRkJVU3hsUVVVM1ExTXNZVUZCWlZZc2RVSkJRWFZDUXl4UlFVRlJMSEZEUVVVNVExVXNaMEpCUVd0Q1ZpeFJRVUZSTERCQ1FVVXhRbGNzVlVGQldTeERRVU5rUXl4bFFVRm5Ra2dzWVVGQllVNHNVMEZGTTBKVkxHRkJRV1VzUTBGRGFrSkVMR1ZCUVdkQ0xFOUJSMlJGTEZWQlJVb3NVMEZCVlVNc1IwRkhVaXhUUVVGVFJDeFpRVU5RTEU5QlFVOURMRVZCUVdsQ1F5eE5RVUZOUXl4TFFVRk5ReXhaUVVGalJDeExRWEZDY0VRc1QwRjRRa0VzUlVGQlNWZ3NaMEpCUVdkQ1NDeFRRVUZUVnl4VlFVRlhReXhIUVUwelFrUXNWVUZCVlVzc1ZVRkZhRUpETEU5QlFWTXNVMEZCVTBFc1UwRkRka0lzU1VGQlNVTXNSVUZCWTBvc1MwRkJTMHNzVFVGRGJrSkRMRVZCUVZsR0xFVkJRVmxVTEdWQlEzaENXU3hGUVVGWlNDeEZRVUZaUnl4VlFVTjRRa1lzUjBGQlVTeEZRVUZKYWtJc0swSkJRU3RDUml4VFFVRlRhMElzUlVGQllTeERRVUZETEdsQ1FVRnJRaXhqUVVWd1Jra3NSMEZCWjBJc1JVRkJTV1lzWjBKQlFXZENaMElzWTBGQlkwb3NSMEZEYkVSTExFVkJRVlZHTEVWQlFXTXNSMEZEZUVKSExFVkJRV1ZJTEVWQlFXTXNSMEZGTjBKSkxFZEJRVlVzUlVGQlNXNUNMR2RDUVVGblFtOUNMR0ZCUVdGSUxFZEJReTlETEU5QlFVOXdRaXhQUVVGUFNpeFJRVUZSTkVJc1kwRkJZMUlzUjBGQlZ5eEZRVUZKYmtJc1ZVRkJWVVFzVTBGQlV5eEhRVUZKZVVJc1JVRkJZeXhEUVVOMFJrb3NWMEZCVnl4RlFVRkphRUlzV1VGQldVd3NVMEZCVTNGQ0xFVkJRVmRMTEU5QlNUVkRaaXhWUVhwQ1ZDeERRVEJDUlZBc1QwRkJUMG9zVVVGQlVXOUNMRmRCUldwQ1ZDeFZRVUZWU0N4VlFVRlpRU3hWUVVOMFFrY3NWVUZCVlVRc1lVRkJaVUVzWVVGRmVrSXNTVUZCU1cxQ0xGVkJRVmNzUlVGQlNYUkNMR2RDUVVGblFuVkNMRk5CUVZNc1dVRkJZVzVDTEZkQlJYcEVZaXhSUVVGUlJTeFJRVUZWTmtJc1UwRkRiRUpGTEU5QlFVOXFReXhSUVVGVlFTeFJRVUZwUWlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDMWliMjkwYzNSeVlYQXZiR2xpTDBwMWJXSnZkSEp2Ymk1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PXZvaWQgMDt2YXIgX3ZhbHVlcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2NvcmUtanMvb2JqZWN0L3ZhbHVlc1wiKSksX2V4dGVuZHMyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKSxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpLF9pbmhlcml0c0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSksX2NsYXNzbmFtZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKSxfYm9vdHN0cmFwVXRpbHM9cmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIiksX1N0eWxlQ29uZmlnPXJlcXVpcmUoXCIuL3V0aWxzL1N0eWxlQ29uZmlnXCIpLExhYmVsPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIExhYmVsKCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfSgwLF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShMYWJlbCxlKTt2YXIgdD1MYWJlbC5wcm90b3R5cGU7cmV0dXJuIHQuaGFzQ29udGVudD1mdW5jdGlvbiBoYXNDb250ZW50KGUpe3ZhciB0PSExO3JldHVybiBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5mb3JFYWNoKGUsZnVuY3Rpb24oZSl7dHx8KGV8fDA9PT1lKSYmKHQ9ITApfSksdH0sdC5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIGU9dGhpcy5wcm9wcyx0PWUuY2xhc3NOYW1lLHI9ZS5jaGlsZHJlbixzPSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShlLFtcImNsYXNzTmFtZVwiLFwiY2hpbGRyZW5cIl0pLG89KDAsX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykocyksYT1vWzBdLGw9b1sxXSxpPSgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSwoMCxfYm9vdHN0cmFwVXRpbHMuZ2V0Q2xhc3NTZXQpKGEpLHtoaWRkZW46IXRoaXMuaGFzQ29udGVudChyKX0pO3JldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSxsLHtjbGFzc05hbWU6KDAsX2NsYXNzbmFtZXMuZGVmYXVsdCkodCxpKX0pLHIpfSxMYWJlbH0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KSxfZGVmYXVsdD0oMCxfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoXCJsYWJlbFwiLCgwLF9ib290c3RyYXBVdGlscy5ic1N0eWxlcykoKDAsX3ZhbHVlcy5kZWZhdWx0KShfU3R5bGVDb25maWcuU3RhdGUpLmNvbmNhdChbX1N0eWxlQ29uZmlnLlN0eWxlLkRFRkFVTFQsX1N0eWxlQ29uZmlnLlN0eWxlLlBSSU1BUlldKSxfU3R5bGVDb25maWcuU3R5bGUuREVGQVVMVCxMYWJlbCkpO2V4cG9ydHMuZGVmYXVsdD1fZGVmYXVsdCxtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa3hoWW1Wc0xtcHpJbDBzSW01aGJXVnpJanBiSWw5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUWlMQ0p5WlhGMWFYSmxJaXdpWlhod2IzSjBjeUlzSWw5ZlpYTk5iMlIxYkdVaUxDSmtaV1poZFd4MElpd2lYM1poYkhWbGN5SXNJbDlsZUhSbGJtUnpNaUlzSWw5dlltcGxZM1JYYVhSb2IzVjBVSEp2Y0dWeWRHbGxjMHh2YjNObE1pSXNJbDlwYm1obGNtbDBjMHh2YjNObE1pSXNJbDlqYkdGemMyNWhiV1Z6SWl3aVgzSmxZV04wSWl3aVgySnZiM1J6ZEhKaGNGVjBhV3h6SWl3aVgxTjBlV3hsUTI5dVptbG5JaXdpVEdGaVpXd2lMQ0pmVW1WaFkzUWtRMjl0Y0c5dVpXNTBJaXdpWVhCd2JIa2lMQ0owYUdseklpd2lZWEpuZFcxbGJuUnpJaXdpWDNCeWIzUnZJaXdpY0hKdmRHOTBlWEJsSWl3aWFHRnpRMjl1ZEdWdWRDSXNJbU5vYVd4a2NtVnVJaXdpY21WemRXeDBJaXdpUTJocGJHUnlaVzRpTENKbWIzSkZZV05vSWl3aVkyaHBiR1FpTENKeVpXNWtaWElpTENKZmRHaHBjeVJ3Y205d2N5SXNJbkJ5YjNCeklpd2lZMnhoYzNOT1lXMWxJaXdpWDNOd2JHbDBRbk5RY205d2N5SXNJbk53YkdsMFFuTlFjbTl3Y3lJc0ltSnpVSEp2Y0hNaUxDSmxiR1Z0Wlc1MFVISnZjSE1pTENKamJHRnpjMlZ6SWl3aVoyVjBRMnhoYzNOVFpYUWlMQ0pvYVdSa1pXNGlMQ0pqY21WaGRHVkZiR1Z0Wlc1MElpd2lRMjl0Y0c5dVpXNTBJaXdpWDJSbFptRjFiSFFpTENKaWMwTnNZWE56SWl3aVluTlRkSGxzWlhNaUxDSlRkR0YwWlNJc0ltTnZibU5oZENJc0lsTjBlV3hsSWl3aVJFVkdRVlZNVkNJc0lsQlNTVTFCVWxraUxDSnRiMlIxYkdVaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJSVUVzU1VGQlNVRXNkVUpCUVhsQ1F5eFJRVUZSTEhkRVFVVnlRME1zVVVGQlVVTXNXVUZCWVN4RlFVTnlRa1FzVVVGQlVVVXNZVUZCVlN4RlFVVnNRaXhKUVVGSlF5eFJRVUZWVEN4MVFrRkJkVUpETEZGQlFWRXNhVVJCUlhwRFN5eFZRVUZaVGl4MVFrRkJkVUpETEZGQlFWRXNNa05CUlRORFRTd3JRa0ZCYVVOUUxIVkNRVUYxUWtNc1VVRkJVU3huUlVGRmFFVlBMR2RDUVVGclFsSXNkVUpCUVhWQ1F5eFJRVUZSTEdsRVFVVnFSRkVzV1VGQlkxUXNkVUpCUVhWQ1F5eFJRVUZSTEdWQlJUZERVeXhQUVVGVFZpeDFRa0ZCZFVKRExGRkJRVkVzVlVGRmVFTlZMR2RDUVVGclFsWXNVVUZCVVN3d1FrRkZNVUpYTEdGQlFXVllMRkZCUVZFc2RVSkJSWFpDV1N4TlFVVktMRk5CUVZWRExFZEJSMUlzVTBGQlUwUXNVVUZEVUN4UFFVRlBReXhGUVVGcFFrTXNUVUZCVFVNc1MwRkJUVU1zV1VGQlkwUXNUVUZJY0VRc1JVRkJTVklzWjBKQlFXZENTaXhUUVVGVFV5eE5RVUZQUXl4SFFVMXdReXhKUVVGSlNTeEZRVUZUVEN4TlFVRk5UU3hWUVhGRGJrSXNUMEZ1UTBGRUxFVkJRVTlGTEZkQlFXRXNVMEZCVTBFc1YwRkJWME1zUjBGRGRFTXNTVUZCU1VNc1IwRkJVeXhGUVZsaUxFOUJWa0ZhTEU5QlFVOU9MRkZCUVZGdFFpeFRRVUZUUXl4UlFVRlJTQ3hGUVVGVkxGTkJRVlZKTEVkQlF6bERTQ3hKUVVsQlJ5eEhRVUZ0UWl4SlFVRldRU3hMUVVOWVNDeEhRVUZUTEV0QlNVNUJMRWRCUjFSS0xFVkJRVTlSTEU5QlFWTXNVMEZCVTBFc1UwRkRka0lzU1VGQlNVTXNSVUZCWTFnc1MwRkJTMWtzVFVGRGJrSkRMRVZCUVZsR0xFVkJRVmxGTEZWQlEzaENVaXhGUVVGWFRTeEZRVUZaVGl4VFFVTjJRazhzUjBGQlVTeEZRVUZKY2tJc0swSkJRU3RDU0N4VFFVRlRkVUlzUlVGQllTeERRVUZETEZsQlFXRXNZVUZGTDBWSExFZEJRV2RDTEVWQlFVbHVRaXhuUWtGQlowSnZRaXhqUVVGalNDeEhRVU5zUkVrc1JVRkJWVVlzUlVGQll5eEhRVU40UWtjc1JVRkJaVWdzUlVGQll5eEhRVVUzUWtrc1IwRkJWU3hGUVVGSk5VSXNWVUZCVlVZc1UwRkJVeXhKUVVGSkxFVkJRVWxQTEdkQ1FVRm5RbmRDTEdGQlFXRklMRWRCUVZVc1EwRkZiRVpKTEZGQlFWTndRaXhMUVVGTFNTeFhRVUZYUXl4TFFVVXpRaXhQUVVGUFdDeFBRVUZQVGl4UlFVRlJhVU1zWTBGQll5eFJRVUZSTEVWQlFVa3ZRaXhWUVVGVlJpeFRRVUZUTEVkQlFVazJRaXhGUVVGakxFTkJRMjVHU2l4WFFVRlhMRVZCUVVsd1FpeFpRVUZaVEN4VFFVRlRlVUlzUlVGQlYwc3NTMEZETjBOaUxFbEJSME5TTEUxQk5VTlVMRU5CTmtORlNDeFBRVUZQVGl4UlFVRlJhME1zVjBGRllrTXNWVUZCVnl4RlFVRkpOVUlzWjBKQlFXZENOa0lzVTBGQlV5eFRRVUZUTEVWQlFVazNRaXhuUWtGQlowSTRRaXhYUVVGVkxFVkJRVWx3UXl4UlFVRlJSQ3hUUVVGVFVTeGhRVUZoT0VJc1QwRkJUME1zVDBGQlR5eERRVUZETDBJc1lVRkJZV2RETEUxQlFVMURMRkZCUVZOcVF5eGhRVUZoWjBNc1RVRkJUVVVzVlVGQlYyeERMR0ZCUVdGblF5eE5RVUZOUXl4UlFVRlRhRU1zVVVGRk1VNVlMRkZCUVZGRkxGRkJRVlZ0UXl4VFFVTnNRbEVzVDBGQlR6ZERMRkZCUVZWQkxGRkJRV2xDSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdOMExXSnZiM1J6ZEhKaGNDOXNhV0l2VEdGaVpXd3Vhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIiksX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PXZvaWQgMDt2YXIgX2V4dGVuZHMyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKSxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpLF9pbmhlcml0c0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSksX2NsYXNzbmFtZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSksX2VsZW1lbnRUeXBlPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlXCIpKSxfTGlzdEdyb3VwSXRlbT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0xpc3RHcm91cEl0ZW1cIikpLF9ib290c3RyYXBVdGlscz1yZXF1aXJlKFwiLi91dGlscy9ib290c3RyYXBVdGlsc1wiKSxfVmFsaWRDb21wb25lbnRDaGlsZHJlbj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL1ZhbGlkQ29tcG9uZW50Q2hpbGRyZW5cIikpLHByb3BUeXBlcz17Y29tcG9uZW50Q2xhc3M6X2VsZW1lbnRUeXBlLmRlZmF1bHR9O2Z1bmN0aW9uIGdldERlZmF1bHRDb21wb25lbnQoZSl7cmV0dXJuIGU/X1ZhbGlkQ29tcG9uZW50Q2hpbGRyZW4uZGVmYXVsdC5zb21lKGUsZnVuY3Rpb24oZSl7cmV0dXJuIGUudHlwZSE9PV9MaXN0R3JvdXBJdGVtLmRlZmF1bHR8fGUucHJvcHMuaHJlZnx8ZS5wcm9wcy5vbkNsaWNrfSk/XCJkaXZcIjpcInVsXCI6XCJkaXZcIn12YXIgTGlzdEdyb3VwPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIExpc3RHcm91cCgpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4oMCxfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoTGlzdEdyb3VwLGUpLExpc3RHcm91cC5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uIHJlbmRlcigpe3ZhciBlPXRoaXMucHJvcHMsdD1lLmNoaWxkcmVuLHI9ZS5jb21wb25lbnRDbGFzcyxvPXZvaWQgMD09PXI/Z2V0RGVmYXVsdENvbXBvbmVudCh0KTpyLGk9ZS5jbGFzc05hbWUscz0oMCxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoZSxbXCJjaGlsZHJlblwiLFwiY29tcG9uZW50Q2xhc3NcIixcImNsYXNzTmFtZVwiXSksdT0oMCxfYm9vdHN0cmFwVXRpbHMuc3BsaXRCc1Byb3BzKShzKSxsPXVbMF0sbj11WzFdLHA9KDAsX2Jvb3RzdHJhcFV0aWxzLmdldENsYXNzU2V0KShsKSxhPVwidWxcIj09PW8mJl9WYWxpZENvbXBvbmVudENoaWxkcmVuLmRlZmF1bHQuZXZlcnkodCxmdW5jdGlvbihlKXtyZXR1cm4gZS50eXBlPT09X0xpc3RHcm91cEl0ZW0uZGVmYXVsdH0pO3JldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KG8sKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LG4se2NsYXNzTmFtZTooMCxfY2xhc3NuYW1lcy5kZWZhdWx0KShpLHApfSksYT9fVmFsaWRDb21wb25lbnRDaGlsZHJlbi5kZWZhdWx0Lm1hcCh0LGZ1bmN0aW9uKGUpe3JldHVybigwLF9yZWFjdC5jbG9uZUVsZW1lbnQpKGUse2xpc3RJdGVtOiEwfSl9KTp0KX0sTGlzdEdyb3VwfShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO0xpc3RHcm91cC5wcm9wVHlwZXM9cHJvcFR5cGVzO3ZhciBfZGVmYXVsdD0oMCxfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoXCJsaXN0LWdyb3VwXCIsTGlzdEdyb3VwKTtleHBvcnRzLmRlZmF1bHQ9X2RlZmF1bHQsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWt4cGMzUkhjbTkxY0M1cWN5SmRMQ0p1WVcxbGN5STZXeUpmYVc1MFpYSnZjRkpsY1hWcGNtVlhhV3hrWTJGeVpDSXNJbkpsY1hWcGNtVWlMQ0pmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MElpd2laWGh3YjNKMGN5SXNJbDlmWlhOTmIyUjFiR1VpTENKa1pXWmhkV3gwSWl3aVgyVjRkR1Z1WkhNeUlpd2lYMjlpYW1WamRGZHBkR2h2ZFhSUWNtOXdaWEowYVdWelRHOXZjMlV5SWl3aVgybHVhR1Z5YVhSelRHOXZjMlV5SWl3aVgyTnNZWE56Ym1GdFpYTWlMQ0pmY21WaFkzUWlMQ0pmWld4bGJXVnVkRlI1Y0dVaUxDSmZUR2x6ZEVkeWIzVndTWFJsYlNJc0lsOWliMjkwYzNSeVlYQlZkR2xzY3lJc0lsOVdZV3hwWkVOdmJYQnZibVZ1ZEVOb2FXeGtjbVZ1SWl3aWNISnZjRlI1Y0dWeklpd2lZMjl0Y0c5dVpXNTBRMnhoYzNNaUxDSm5aWFJFWldaaGRXeDBRMjl0Y0c5dVpXNTBJaXdpWTJocGJHUnlaVzRpTENKemIyMWxJaXdpWTJocGJHUWlMQ0owZVhCbElpd2ljSEp2Y0hNaUxDSm9jbVZtSWl3aWIyNURiR2xqYXlJc0lreHBjM1JIY205MWNDSXNJbDlTWldGamRDUkRiMjF3YjI1bGJuUWlMQ0poY0hCc2VTSXNJblJvYVhNaUxDSmhjbWQxYldWdWRITWlMQ0p3Y205MGIzUjVjR1VpTENKeVpXNWtaWElpTENKZmRHaHBjeVJ3Y205d2N5SXNJbDkwYUdsekpIQnliM0J6SkdOdmJYQnZibVZ1ZENJc0lrTnZiWEJ2Ym1WdWRDSXNJbU5zWVhOelRtRnRaU0lzSWw5emNHeHBkRUp6VUhKdmNITWlMQ0p6Y0d4cGRFSnpVSEp2Y0hNaUxDSmljMUJ5YjNCeklpd2laV3hsYldWdWRGQnliM0J6SWl3aVkyeGhjM05sY3lJc0ltZGxkRU5zWVhOelUyVjBJaXdpZFhObFRHbHpkRWwwWlcwaUxDSmxkbVZ5ZVNJc0ltTnlaV0YwWlVWc1pXMWxiblFpTENKdFlYQWlMQ0pqYkc5dVpVVnNaVzFsYm5RaUxDSnNhWE4wU1hSbGJTSXNJbDlrWldaaGRXeDBJaXdpWW5ORGJHRnpjeUlzSW0xdlpIVnNaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRlFTeEpRVUZKUVN4M1FrRkJNRUpETEZGQlFWRXNlVVJCUld4RFF5eDFRa0ZCZVVKRUxGRkJRVkVzZDBSQlJYSkRSU3hSUVVGUlF5eFpRVUZoTEVWQlEzSkNSQ3hSUVVGUlJTeGhRVUZWTEVWQlJXeENMRWxCUVVsRExGVkJRVmxLTEhWQ1FVRjFRa1FzVVVGQlVTd3lRMEZGTTBOTkxDdENRVUZwUTB3c2RVSkJRWFZDUkN4UlFVRlJMR2RGUVVWb1JVOHNaMEpCUVd0Q1RpeDFRa0ZCZFVKRUxGRkJRVkVzYVVSQlJXcEVVU3haUVVGalVDeDFRa0ZCZFVKRUxGRkJRVkVzWlVGRk4wTlRMRTlCUVZOV0xIZENRVUYzUWtNc1VVRkJVU3hWUVVWNlExVXNZVUZCWlZRc2RVSkJRWFZDUkN4UlFVRlJMSEZEUVVVNVExY3NaVUZCYVVKV0xIVkNRVUYxUWtRc1VVRkJVU3h2UWtGRmFFUlpMR2RDUVVGclFsb3NVVUZCVVN3d1FrRkZNVUpoTEhkQ1FVRXdRbG9zZFVKQlFYVkNSQ3hSUVVGUkxHMURRVVY2UkdNc1ZVRkJXU3hEUVU5a1F5eGxRVUZuUWt3c1lVRkJZVTRzVTBGSEwwSXNVMEZCVTFrc2IwSkJRVzlDUXl4SFFVTXpRaXhQUVVGTFFTeEZRVXRFU2l4M1FrRkJkMEpVTEZGQlFWRmpMRXRCUVV0RUxFVkJRVlVzVTBGQlZVVXNSMEZETTBRc1QwRkJUMEVzUlVGQlRVTXNUMEZCVTFRc1pVRkJaVkFzVTBGQlYyVXNSVUZCVFVVc1RVRkJUVU1zVFVGQlVVZ3NSVUZCVFVVc1RVRkJUVVVzVlVGRmVrVXNUVUZIUml4TFFWUkZMRTFCV1Znc1NVRkJTVU1zVlVGRlNpeFRRVUZWUXl4SFFVZFNMRk5CUVZORUxGbEJRMUFzVDBGQlQwTXNSVUZCYVVKRExFMUJRVTFETEV0QlFVMURMRmxCUVdORUxFdEJaME53UkN4UFFXNURRU3hGUVVGSmNFSXNaMEpCUVdkQ1NDeFRRVUZUYjBJc1ZVRkJWME1zUjBGTk0wSkVMRlZCUVZWTExGVkJSV2hDUXl4UFFVRlRMRk5CUVZOQkxGTkJRM1pDTEVsQlFVbERMRVZCUVdOS0xFdEJRVXRPTEUxQlEyNUNTaXhGUVVGWFl5eEZRVUZaWkN4VFFVTjJRbVVzUlVGQmQwSkVMRVZCUVZsb1FpeGxRVU53UTJ0Q0xFOUJRWE5ETEVsQlFURkNSQ3hGUVVGdFEyaENMRzlDUVVGdlFrTXNSMEZCV1dVc1JVRkRMMFZGTEVWQlFWbElMRVZCUVZsSExGVkJRM2hDWWl4SFFVRlJMRVZCUVVsbUxDdENRVUVyUWtZc1UwRkJVekpDTEVWQlFXRXNRMEZCUXl4WFFVRlpMR2xDUVVGclFpeGpRVVZvUjBrc1IwRkJaMElzUlVGQlNYWkNMR2RDUVVGblFuZENMR05CUVdObUxFZEJRMnhFWjBJc1JVRkJWVVlzUlVGQll5eEhRVU40UWtjc1JVRkJaVWdzUlVGQll5eEhRVVUzUWtrc1IwRkJWU3hGUVVGSk0wSXNaMEpCUVdkQ05FSXNZVUZCWVVnc1IwRkZNME5KTEVWQlFUUkNMRTlCUVdSU0xFZEJRWE5DY0VJc2QwSkJRWGRDVkN4UlFVRlJjME1zVFVGQlRYcENMRVZCUVZVc1UwRkJWVVVzUjBGRGFFY3NUMEZCVDBFc1JVRkJUVU1zVDBGQlUxUXNaVUZCWlZBc1ZVRkhka01zVDBGQlQwc3NUMEZCVDB3c1VVRkJVWFZETEdOQlFXTldMRWRCUVZjc1JVRkJTVFZDTEZWQlFWVkVMRk5CUVZNc1IwRkJTV3RETEVWQlFXTXNRMEZEZEVaS0xGZEJRVmNzUlVGQlNURkNMRmxCUVZsS0xGTkJRVk00UWl4RlFVRlhTeXhMUVVNM1EwVXNSVUZCWXpWQ0xIZENRVUYzUWxRc1VVRkJVWGRETEVsQlFVa3pRaXhGUVVGVkxGTkJRVlZGTEVkQlEzaEZMRTlCUVU4c1JVRkJTVllzVDBGQlQyOURMR05CUVdNeFFpeEZRVUZQTEVOQlEzSkRNa0lzVlVGQlZTeE5RVVZVTjBJc1NVRkhRVThzVlVGd1ExUXNRMEZ4UTBWbUxFOUJRVTlNTEZGQlFWRTJRaXhYUVVWcVFsUXNWVUZCVlZZc1ZVRkJXVUVzVlVGRmRFSXNTVUZCU1dsRExGVkJRVmNzUlVGQlNXNURMR2RDUVVGblFtOURMRk5CUVZNc1lVRkJZM2hDTEZkQlJURkVkRUlzVVVGQlVVVXNVVUZCVlRKRExGTkJRMnhDUlN4UFFVRlBMME1zVVVGQlZVRXNVVUZCYVVJaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Y21WaFkzUXRZbTl2ZEhOMGNtRndMMnhwWWk5TWFYTjBSM0p2ZFhBdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkPXJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKSxfaW50ZXJvcFJlcXVpcmVEZWZhdWx0PXJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO2V4cG9ydHMuX19lc01vZHVsZT0hMCxleHBvcnRzLmRlZmF1bHQ9dm9pZCAwO3ZhciBfdmFsdWVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9vYmplY3QvdmFsdWVzXCIpKSxfZXh0ZW5kczI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSksX2luaGVyaXRzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKSxfY2xhc3NuYW1lcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKSxfcmVhY3Q9X2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKSxfcHJvcFR5cGVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpLF9ib290c3RyYXBVdGlscz1yZXF1aXJlKFwiLi91dGlscy9ib290c3RyYXBVdGlsc1wiKSxfU3R5bGVDb25maWc9cmVxdWlyZShcIi4vdXRpbHMvU3R5bGVDb25maWdcIikscHJvcFR5cGVzPXthY3RpdmU6X3Byb3BUeXBlcy5kZWZhdWx0LmFueSxkaXNhYmxlZDpfcHJvcFR5cGVzLmRlZmF1bHQuYW55LGhlYWRlcjpfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxsaXN0SXRlbTpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxvbkNsaWNrOl9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLGhyZWY6X3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyx0eXBlOl9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmd9LGRlZmF1bHRQcm9wcz17bGlzdEl0ZW06ITF9LExpc3RHcm91cEl0ZW09ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gTGlzdEdyb3VwSXRlbSgpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc30oMCxfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoTGlzdEdyb3VwSXRlbSxlKTt2YXIgdD1MaXN0R3JvdXBJdGVtLnByb3RvdHlwZTtyZXR1cm4gdC5yZW5kZXJIZWFkZXI9ZnVuY3Rpb24gcmVuZGVySGVhZGVyKGUsdCl7cmV0dXJuIF9yZWFjdC5kZWZhdWx0LmlzVmFsaWRFbGVtZW50KGUpPygwLF9yZWFjdC5jbG9uZUVsZW1lbnQpKGUse2NsYXNzTmFtZTooMCxfY2xhc3NuYW1lcy5kZWZhdWx0KShlLnByb3BzLmNsYXNzTmFtZSx0KX0pOl9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJoNFwiLHtjbGFzc05hbWU6dH0sZSl9LHQucmVuZGVyPWZ1bmN0aW9uIHJlbmRlcigpe3ZhciBlLHQ9dGhpcy5wcm9wcyxyPXQuYWN0aXZlLHM9dC5kaXNhYmxlZCxhPXQuY2xhc3NOYW1lLGk9dC5oZWFkZXIsbz10Lmxpc3RJdGVtLGw9dC5jaGlsZHJlbixwPSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KSh0LFtcImFjdGl2ZVwiLFwiZGlzYWJsZWRcIixcImNsYXNzTmFtZVwiLFwiaGVhZGVyXCIsXCJsaXN0SXRlbVwiLFwiY2hpbGRyZW5cIl0pLHU9KDAsX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykocCksbj11WzBdLGQ9dVsxXSxjPSgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSwoMCxfYm9vdHN0cmFwVXRpbHMuZ2V0Q2xhc3NTZXQpKG4pLHthY3RpdmU6cixkaXNhYmxlZDpzfSk7cmV0dXJuIGQuaHJlZj9lPVwiYVwiOmQub25DbGljaz8oZT1cImJ1dHRvblwiLGQudHlwZT1kLnR5cGV8fFwiYnV0dG9uXCIpOmU9bz9cImxpXCI6XCJzcGFuXCIsZC5jbGFzc05hbWU9KDAsX2NsYXNzbmFtZXMuZGVmYXVsdCkoYSxjKSxpP19yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoZSxkLHRoaXMucmVuZGVySGVhZGVyKGksKDAsX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkobixcImhlYWRpbmdcIikpLF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwXCIse2NsYXNzTmFtZTooMCxfYm9vdHN0cmFwVXRpbHMucHJlZml4KShuLFwidGV4dFwiKX0sbCkpOl9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoZSxkLGwpfSxMaXN0R3JvdXBJdGVtfShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO0xpc3RHcm91cEl0ZW0ucHJvcFR5cGVzPXByb3BUeXBlcyxMaXN0R3JvdXBJdGVtLmRlZmF1bHRQcm9wcz1kZWZhdWx0UHJvcHM7dmFyIF9kZWZhdWx0PSgwLF9ib290c3RyYXBVdGlscy5ic0NsYXNzKShcImxpc3QtZ3JvdXAtaXRlbVwiLCgwLF9ib290c3RyYXBVdGlscy5ic1N0eWxlcykoKDAsX3ZhbHVlcy5kZWZhdWx0KShfU3R5bGVDb25maWcuU3RhdGUpLExpc3RHcm91cEl0ZW0pKTtleHBvcnRzLmRlZmF1bHQ9X2RlZmF1bHQsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWt4cGMzUkhjbTkxY0VsMFpXMHVhbk1pWFN3aWJtRnRaWE1pT2xzaVgybHVkR1Z5YjNCU1pYRjFhWEpsVjJsc1pHTmhjbVFpTENKeVpYRjFhWEpsSWl3aVgybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ0lzSW1WNGNHOXlkSE1pTENKZlgyVnpUVzlrZFd4bElpd2laR1ZtWVhWc2RDSXNJbDkyWVd4MVpYTWlMQ0pmWlhoMFpXNWtjeklpTENKZmIySnFaV04wVjJsMGFHOTFkRkJ5YjNCbGNuUnBaWE5NYjI5elpUSWlMQ0pmYVc1b1pYSnBkSE5NYjI5elpUSWlMQ0pmWTJ4aGMzTnVZVzFsY3lJc0lsOXlaV0ZqZENJc0lsOXdjbTl3Vkhsd1pYTWlMQ0pmWW05dmRITjBjbUZ3VlhScGJITWlMQ0pmVTNSNWJHVkRiMjVtYVdjaUxDSndjbTl3Vkhsd1pYTWlMQ0poWTNScGRtVWlMQ0poYm5raUxDSmthWE5oWW14bFpDSXNJbWhsWVdSbGNpSXNJbTV2WkdVaUxDSnNhWE4wU1hSbGJTSXNJbUp2YjJ3aUxDSnZia05zYVdOcklpd2lablZ1WXlJc0ltaHlaV1lpTENKemRISnBibWNpTENKMGVYQmxJaXdpWkdWbVlYVnNkRkJ5YjNCeklpd2lUR2x6ZEVkeWIzVndTWFJsYlNJc0lsOVNaV0ZqZENSRGIyMXdiMjVsYm5RaUxDSmhjSEJzZVNJc0luUm9hWE1pTENKaGNtZDFiV1Z1ZEhNaUxDSmZjSEp2ZEc4aUxDSndjbTkwYjNSNWNHVWlMQ0p5Wlc1a1pYSklaV0ZrWlhJaUxDSm9aV0ZrYVc1blEyeGhjM05PWVcxbElpd2lhWE5XWVd4cFpFVnNaVzFsYm5RaUxDSmpiRzl1WlVWc1pXMWxiblFpTENKamJHRnpjMDVoYldVaUxDSndjbTl3Y3lJc0ltTnlaV0YwWlVWc1pXMWxiblFpTENKeVpXNWtaWElpTENKRGIyMXdiMjVsYm5RaUxDSmZkR2hwY3lSd2NtOXdjeUlzSW1Ob2FXeGtjbVZ1SWl3aVgzTndiR2wwUW5OUWNtOXdjeUlzSW5Od2JHbDBRbk5RY205d2N5SXNJbUp6VUhKdmNITWlMQ0psYkdWdFpXNTBVSEp2Y0hNaUxDSmpiR0Z6YzJWeklpd2laMlYwUTJ4aGMzTlRaWFFpTENKd2NtVm1hWGdpTENKZlpHVm1ZWFZzZENJc0ltSnpRMnhoYzNNaUxDSmljMU4wZVd4bGN5SXNJbE4wWVhSbElpd2liVzlrZFd4bElsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVVZCTEVsQlFVbEJMSGRDUVVFd1FrTXNVVUZCVVN4NVJFRkZiRU5ETEhWQ1FVRjVRa1FzVVVGQlVTeDNSRUZGY2tORkxGRkJRVkZETEZsQlFXRXNSVUZEY2tKRUxGRkJRVkZGTEdGQlFWVXNSVUZGYkVJc1NVRkJTVU1zVVVGQlZVb3NkVUpCUVhWQ1JDeFJRVUZSTEdsRVFVVjZRMDBzVlVGQldVd3NkVUpCUVhWQ1JDeFJRVUZSTERKRFFVVXpRMDhzSzBKQlFXbERUaXgxUWtGQmRVSkVMRkZCUVZFc1owVkJSV2hGVVN4blFrRkJhMEpRTEhWQ1FVRjFRa1FzVVVGQlVTeHBSRUZGYWtSVExGbEJRV05TTEhWQ1FVRjFRa1FzVVVGQlVTeGxRVVUzUTFVc1QwRkJVMWdzZDBKQlFYZENReXhSUVVGUkxGVkJSWHBEVnl4WFFVRmhWaXgxUWtGQmRVSkVMRkZCUVZFc1pVRkZOVU5aTEdkQ1FVRnJRbG9zVVVGQlVTd3dRa0ZGTVVKaExHRkJRV1ZpTEZGQlFWRXNkVUpCUlhaQ1l5eFZRVUZaTEVOQlEyUkRMRTlCUVZGS0xGZEJRVmRRTEZGQlFWRlpMRWxCUXpOQ1F5eFRRVUZWVGl4WFFVRlhVQ3hSUVVGUldTeEpRVU0zUWtVc1QwRkJVVkFzVjBGQlYxQXNVVUZCVVdVc1MwRkRNMEpETEZOQlFWVlVMRmRCUVZkUUxGRkJRVkZwUWl4TFFVTTNRa01zVVVGQlUxZ3NWMEZCVjFBc1VVRkJVVzFDTEV0QlF6VkNReXhMUVVGTllpeFhRVUZYVUN4UlFVRlJjVUlzVDBGRGVrSkRMRXRCUVUxbUxGZEJRVmRRTEZGQlFWRnhRaXhSUVVWMlFrVXNZVUZCWlN4RFFVTnFRbEFzVlVGQlZTeEhRVWRTVVN4alFVVktMRk5CUVZWRExFZEJSMUlzVTBGQlUwUXNaMEpCUTFBc1QwRkJUME1zUlVGQmFVSkRMRTFCUVUxRExFdEJRVTFETEZsQlFXTkVMRTFCU0hCRUxFVkJRVWwyUWl4blFrRkJaMEpLTEZOQlFWTjNRaXhqUVVGbFF5eEhRVTAxUXl4SlFVRkpTU3hGUVVGVFRDeGpRVUZqVFN4VlFYZEVNMElzVDBGMFJFRkVMRVZCUVU5RkxHRkJRV1VzVTBGQlUwRXNZVUZCWVdwQ0xFVkJRVkZyUWl4SFFVTnNSQ3hQUVVGSk1VSXNUMEZCVDA0c1VVRkJVV2xETEdWQlFXVnVRaXhKUVVONlFpeEZRVUZKVWl4UFFVRlBORUlzWTBGQlkzQkNMRVZCUVZFc1EwRkRkRU54UWl4WFFVRlhMRVZCUVVrNVFpeFpRVUZaVEN4VFFVRlRZeXhGUVVGUGMwSXNUVUZCVFVRc1ZVRkJWMGdzUzBGSmVrUXhRaXhQUVVGUFRpeFJRVUZSY1VNc1kwRkJZeXhMUVVGTkxFTkJRM2hEUml4VlFVRlhTQ3hIUVVOV2JFSXNTVUZIVEdVc1JVRkJUMU1zVDBGQlV5eFRRVUZUUVN4VFFVTjJRaXhKUVdsQ1NVTXNSVUZxUWtGRExFVkJRV05pTEV0QlFVdFRMRTFCUTI1Q2VrSXNSVUZCVXpaQ0xFVkJRVmszUWl4UFFVTnlRa1VzUlVGQlZ6SkNMRVZCUVZrelFpeFRRVU4yUW5OQ0xFVkJRVmxMTEVWQlFWbE1MRlZCUTNoQ2NrSXNSVUZCVXpCQ0xFVkJRVmt4UWl4UFFVTnlRa1VzUlVGQlYzZENMRVZCUVZsNFFpeFRRVU4yUW5sQ0xFVkJRVmRFTEVWQlFWbERMRk5CUTNaQ1RDeEhRVUZSTEVWQlFVbHFReXdyUWtGQkswSklMRk5CUVZOM1F5eEZRVUZoTEVOQlFVTXNVMEZCVlN4WFFVRlpMRmxCUVdFc1UwRkJWU3hYUVVGWkxHRkJSVE5JUlN4SFFVRm5RaXhGUVVGSmJFTXNaMEpCUVdkQ2JVTXNZMEZCWTFBc1IwRkRiRVJSTEVWQlFWVkdMRVZCUVdNc1IwRkRlRUpITEVWQlFXVklMRVZCUVdNc1IwRkZOMEpKTEVkQlFWVXNSVUZCU1RWRExGVkJRVlZHTEZOQlFWTXNTVUZCU1N4RlFVRkpVU3huUWtGQlowSjFReXhoUVVGaFNDeEhRVUZWTEVOQlEyeEdha01zVDBGQlVVRXNSVUZEVWtVc1UwRkJWVUVzU1VGcFFsb3NUMEZpU1dkRExFVkJRV0Y2UWl4TFFVTm1iVUlzUlVGQldTeEpRVU5JVFN4RlFVRmhNMElzVTBGRGRFSnhRaXhGUVVGWkxGTkJRMXBOTEVWQlFXRjJRaXhMUVVGUGRVSXNSVUZCWVhaQ0xFMUJRVkVzVlVGRmVrTnBRaXhGUVVSVGRrSXNSVUZEUnl4TFFVVkJMRTlCUjJRMlFpeEZRVUZoVml4WFFVRlpMRVZCUVVrNVFpeFpRVUZaVEN4VFFVRlRiVU1zUlVGQlYxY3NSMEZGZWtSb1F5eEZRVU5MVWl4UFFVRlBUaXhSUVVGUmNVTXNZMEZCWTBVc1JVRkJWMDBzUlVGQlkyeENMRXRCUVV0SkxHRkJRV0ZxUWl4SFFVRlJMRVZCUVVsT0xHZENRVUZuUW5kRExGRkJRVkZLTEVWQlFWTXNXVUZCWVhSRExFOUJRVTlPTEZGQlFWRnhReXhqUVVGakxFbEJRVXNzUTBGRGVrdEdMRmRCUVZjc1JVRkJTVE5DTEdkQ1FVRm5RbmRETEZGQlFWRktMRVZCUVZNc1UwRkRMME5JTEVsQlIwVnVReXhQUVVGUFRpeFJRVUZSY1VNc1kwRkJZMFVzUlVGQlYwMHNSVUZCWTBvc1NVRkhlRVJxUWl4alFTOUVWQ3hEUVdkRlJXeENMRTlCUVU5T0xGRkJRVkYxUXl4WFFVVnFRbVlzWTBGQlkyUXNWVUZCV1VFc1ZVRkRNVUpqTEdOQlFXTkVMR0ZCUVdWQkxHRkJSVGRDTEVsQlFVa3dRaXhWUVVGWExFVkJRVWw2UXl4blFrRkJaMEl3UXl4VFFVRlRMRzFDUVVGdFFpeEZRVUZKTVVNc1owSkJRV2RDTWtNc1YwRkJWU3hGUVVGSmJFUXNVVUZCVVVRc1UwRkJVMU1zWVVGQllUSkRMRTlCUVZFMVFpeG5Ra0ZGZGtreFFpeFJRVUZSUlN4UlFVRlZhVVFzVTBGRGJFSkpMRTlCUVU5MlJDeFJRVUZWUVN4UlFVRnBRaUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEMxaWIyOTBjM1J5WVhBdmJHbGlMMHhwYzNSSGNtOTFjRWwwWlcwdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9leHRlbmRzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSksX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9jbGFzc25hbWVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpLF9yZWFjdD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSksX2VsZW1lbnRUeXBlPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlXCIpKSxfTWVkaWFCb2R5PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTWVkaWFCb2R5XCIpKSxfTWVkaWFIZWFkaW5nPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTWVkaWFIZWFkaW5nXCIpKSxfTWVkaWFMZWZ0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTWVkaWFMZWZ0XCIpKSxfTWVkaWFMaXN0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTWVkaWFMaXN0XCIpKSxfTWVkaWFMaXN0SXRlbT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL01lZGlhTGlzdEl0ZW1cIikpLF9NZWRpYVJpZ2h0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTWVkaWFSaWdodFwiKSksX2Jvb3RzdHJhcFV0aWxzPXJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpLHByb3BUeXBlcz17Y29tcG9uZW50Q2xhc3M6X2VsZW1lbnRUeXBlLmRlZmF1bHR9LGRlZmF1bHRQcm9wcz17Y29tcG9uZW50Q2xhc3M6XCJkaXZcIn0sTWVkaWE9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gTWVkaWEoKXtyZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9cmV0dXJuKDAsX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKE1lZGlhLGUpLE1lZGlhLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIGU9dGhpcy5wcm9wcyx0PWUuY29tcG9uZW50Q2xhc3MsaT1lLmNsYXNzTmFtZSxyPSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShlLFtcImNvbXBvbmVudENsYXNzXCIsXCJjbGFzc05hbWVcIl0pLGE9KDAsX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykocikscz1hWzBdLG89YVsxXSx1PSgwLF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkocyk7cmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQodCwoMCxfZXh0ZW5kczIuZGVmYXVsdCkoe30sbyx7Y2xhc3NOYW1lOigwLF9jbGFzc25hbWVzLmRlZmF1bHQpKGksdSl9KSl9LE1lZGlhfShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO01lZGlhLnByb3BUeXBlcz1wcm9wVHlwZXMsTWVkaWEuZGVmYXVsdFByb3BzPWRlZmF1bHRQcm9wcyxNZWRpYS5IZWFkaW5nPV9NZWRpYUhlYWRpbmcuZGVmYXVsdCxNZWRpYS5Cb2R5PV9NZWRpYUJvZHkuZGVmYXVsdCxNZWRpYS5MZWZ0PV9NZWRpYUxlZnQuZGVmYXVsdCxNZWRpYS5SaWdodD1fTWVkaWFSaWdodC5kZWZhdWx0LE1lZGlhLkxpc3Q9X01lZGlhTGlzdC5kZWZhdWx0LE1lZGlhLkxpc3RJdGVtPV9NZWRpYUxpc3RJdGVtLmRlZmF1bHQ7dmFyIF9kZWZhdWx0PSgwLF9ib290c3RyYXBVdGlscy5ic0NsYXNzKShcIm1lZGlhXCIsTWVkaWEpO2V4cG9ydHMuZGVmYXVsdD1fZGVmYXVsdCxtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJazFsWkdsaExtcHpJbDBzSW01aGJXVnpJanBiSWw5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUWlMQ0p5WlhGMWFYSmxJaXdpWlhod2IzSjBjeUlzSWw5ZlpYTk5iMlIxYkdVaUxDSmtaV1poZFd4MElpd2lYMlY0ZEdWdVpITXlJaXdpWDI5aWFtVmpkRmRwZEdodmRYUlFjbTl3WlhKMGFXVnpURzl2YzJVeUlpd2lYMmx1YUdWeWFYUnpURzl2YzJVeUlpd2lYMk5zWVhOemJtRnRaWE1pTENKZmNtVmhZM1FpTENKZlpXeGxiV1Z1ZEZSNWNHVWlMQ0pmVFdWa2FXRkNiMlI1SWl3aVgwMWxaR2xoU0dWaFpHbHVaeUlzSWw5TlpXUnBZVXhsWm5RaUxDSmZUV1ZrYVdGTWFYTjBJaXdpWDAxbFpHbGhUR2x6ZEVsMFpXMGlMQ0pmVFdWa2FXRlNhV2RvZENJc0lsOWliMjkwYzNSeVlYQlZkR2xzY3lJc0luQnliM0JVZVhCbGN5SXNJbU52YlhCdmJtVnVkRU5zWVhOeklpd2laR1ZtWVhWc2RGQnliM0J6SWl3aVRXVmthV0VpTENKZlVtVmhZM1FrUTI5dGNHOXVaVzUwSWl3aVlYQndiSGtpTENKMGFHbHpJaXdpWVhKbmRXMWxiblJ6SWl3aWNISnZkRzkwZVhCbElpd2ljbVZ1WkdWeUlpd2lYM1JvYVhNa2NISnZjSE1pTENKd2NtOXdjeUlzSWtOdmJYQnZibVZ1ZENJc0ltTnNZWE56VG1GdFpTSXNJbDl6Y0d4cGRFSnpVSEp2Y0hNaUxDSnpjR3hwZEVKelVISnZjSE1pTENKaWMxQnliM0J6SWl3aVpXeGxiV1Z1ZEZCeWIzQnpJaXdpWTJ4aGMzTmxjeUlzSW1kbGRFTnNZWE56VTJWMElpd2lZM0psWVhSbFJXeGxiV1Z1ZENJc0lraGxZV1JwYm1jaUxDSkNiMlI1SWl3aVRHVm1kQ0lzSWxKcFoyaDBJaXdpVEdsemRDSXNJa3hwYzNSSmRHVnRJaXdpWDJSbFptRjFiSFFpTENKaWMwTnNZWE56SWl3aWJXOWtkV3hsSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4aFFVVkJMRWxCUVVsQkxIVkNRVUY1UWtNc1VVRkJVU3gzUkVGRmNrTkRMRkZCUVZGRExGbEJRV0VzUlVGRGNrSkVMRkZCUVZGRkxHRkJRVlVzUlVGRmJFSXNTVUZCU1VNc1ZVRkJXVXdzZFVKQlFYVkNReXhSUVVGUkxESkRRVVV6UTBzc0swSkJRV2xEVGl4MVFrRkJkVUpETEZGQlFWRXNaMFZCUldoRlRTeG5Ra0ZCYTBKUUxIVkNRVUYxUWtNc1VVRkJVU3hwUkVGRmFrUlBMRmxCUVdOU0xIVkNRVUYxUWtNc1VVRkJVU3hsUVVVM1ExRXNUMEZCVTFRc2RVSkJRWFZDUXl4UlFVRlJMRlZCUlhoRFV5eGhRVUZsVml4MVFrRkJkVUpETEZGQlFWRXNjVU5CUlRsRFZTeFhRVUZoV0N4MVFrRkJkVUpETEZGQlFWRXNaMEpCUlRWRFZ5eGpRVUZuUWxvc2RVSkJRWFZDUXl4UlFVRlJMRzFDUVVVdlExa3NWMEZCWVdJc2RVSkJRWFZDUXl4UlFVRlJMR2RDUVVVMVEyRXNWMEZCWVdRc2RVSkJRWFZDUXl4UlFVRlJMR2RDUVVVMVEyTXNaVUZCYVVKbUxIVkNRVUYxUWtNc1VVRkJVU3h2UWtGRmFFUmxMRmxCUVdOb1FpeDFRa0ZCZFVKRExGRkJRVkVzYVVKQlJUZERaMElzWjBKQlFXdENhRUlzVVVGQlVTd3dRa0ZGTVVKcFFpeFZRVUZaTEVOQlEyUkRMR1ZCUVdkQ1ZDeGhRVUZoVGl4VFFVVXpRbWRDTEdGQlFXVXNRMEZEYWtKRUxHVkJRV2RDTEU5QlIyUkZMRTFCUlVvc1UwRkJWVU1zUjBGSFVpeFRRVUZUUkN4UlFVTlFMRTlCUVU5RExFVkJRV2xDUXl4TlFVRk5ReXhMUVVGTlF5eFpRVUZqUkN4TFFYRkNjRVFzVDBGNFFrRXNSVUZCU1dwQ0xHZENRVUZuUWtnc1UwRkJVMmxDTEUxQlFVOURMRWRCVFhaQ1JDeE5RVUZOU3l4VlFVVmFReXhQUVVGVExGTkJRVk5CTEZOQlEzWkNMRWxCUVVsRExFVkJRV05LTEV0QlFVdExMRTFCUTI1Q1F5eEZRVUZaUml4RlFVRlpWQ3hsUVVONFFsa3NSVUZCV1Vnc1JVRkJXVWNzVlVGRGVFSkdMRWRCUVZFc1JVRkJTWFpDTEN0Q1FVRXJRa1lzVTBGQlUzZENMRVZCUVdFc1EwRkJReXhwUWtGQmEwSXNZMEZGY0VaSkxFZEJRV2RDTEVWQlFVbG1MR2RDUVVGblFtZENMR05CUVdOS0xFZEJRMnhFU3l4RlFVRlZSaXhGUVVGakxFZEJRM2hDUnl4RlFVRmxTQ3hGUVVGakxFZEJSVGRDU1N4SFFVRlZMRVZCUVVsdVFpeG5Ra0ZCWjBKdlFpeGhRVUZoU0N4SFFVTXZReXhQUVVGUGVrSXNUMEZCVDB3c1VVRkJVV3RETEdOQlFXTlNMRWRCUVZjc1JVRkJTWHBDTEZWQlFWVkVMRk5CUVZNc1IwRkJTU3RDTEVWQlFXTXNRMEZEZEVaS0xGZEJRVmNzUlVGQlNYWkNMRmxCUVZsS0xGTkJRVk15UWl4RlFVRlhTeXhQUVVrMVEyWXNUVUY2UWxRc1EwRXdRa1ZhTEU5QlFVOU1MRkZCUVZFd1FpeFhRVVZxUWxRc1RVRkJUVWdzVlVGQldVRXNWVUZEYkVKSExFMUJRVTFFTEdGQlFXVkJMR0ZCUTNKQ1F5eE5RVUZOYTBJc1VVRkJWVE5DTEdOQlFXTlNMRkZCUXpsQ2FVSXNUVUZCVFcxQ0xFdEJRVTgzUWl4WFFVRlhVQ3hSUVVONFFtbENMRTFCUVUxdlFpeExRVUZQTlVJc1YwRkJWMVFzVVVGRGVFSnBRaXhOUVVGTmNVSXNUVUZCVVRGQ0xGbEJRVmxhTEZGQlF6RkNhVUlzVFVGQlRYTkNMRXRCUVU4M1FpeFhRVUZYVml4UlFVTjRRbWxDTEUxQlFVMTFRaXhUUVVGWE4wSXNaVUZCWlZnc1VVRkZhRU1zU1VGQlNYbERMRlZCUVZjc1JVRkJTVFZDTEdkQ1FVRm5RalpDTEZOQlFWTXNVVUZCVTNwQ0xFOUJSWEpFYmtJc1VVRkJVVVVzVVVGQlZYbERMRk5CUTJ4Q1JTeFBRVUZQTjBNc1VVRkJWVUVzVVVGQmFVSWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F0WW05dmRITjBjbUZ3TDJ4cFlpOU5aV1JwWVM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PXZvaWQgMDt2YXIgX2V4dGVuZHMyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKSxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpLF9pbmhlcml0c0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSksX2NsYXNzbmFtZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKSxfcHJvcFR5cGVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpLF9lbGVtZW50VHlwZT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzLWV4dHJhL2xpYi9lbGVtZW50VHlwZVwiKSksX01lZGlhPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTWVkaWFcIikpLF9ib290c3RyYXBVdGlscz1yZXF1aXJlKFwiLi91dGlscy9ib290c3RyYXBVdGlsc1wiKSxwcm9wVHlwZXM9e2FsaWduOl9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbXCJ0b3BcIixcIm1pZGRsZVwiLFwiYm90dG9tXCJdKSxjb21wb25lbnRDbGFzczpfZWxlbWVudFR5cGUuZGVmYXVsdH0sZGVmYXVsdFByb3BzPXtjb21wb25lbnRDbGFzczpcImRpdlwifSxNZWRpYUJvZHk9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gTWVkaWFCb2R5KCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybigwLF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShNZWRpYUJvZHksZSksTWVkaWFCb2R5LnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIGU9dGhpcy5wcm9wcyx0PWUuY29tcG9uZW50Q2xhc3Mscj1lLmFsaWduLG89ZS5jbGFzc05hbWUscz0oMCxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoZSxbXCJjb21wb25lbnRDbGFzc1wiLFwiYWxpZ25cIixcImNsYXNzTmFtZVwiXSksYT0oMCxfYm9vdHN0cmFwVXRpbHMuc3BsaXRCc1Byb3BzKShzKSxpPWFbMF0scD1hWzFdLGw9KDAsX2Jvb3RzdHJhcFV0aWxzLmdldENsYXNzU2V0KShpKTtyZXR1cm4gciYmKGxbKDAsX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkoX01lZGlhLmRlZmF1bHQuZGVmYXVsdFByb3BzLHIpXT0hMCksX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCh0LCgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSxwLHtjbGFzc05hbWU6KDAsX2NsYXNzbmFtZXMuZGVmYXVsdCkobyxsKX0pKX0sTWVkaWFCb2R5fShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO01lZGlhQm9keS5wcm9wVHlwZXM9cHJvcFR5cGVzLE1lZGlhQm9keS5kZWZhdWx0UHJvcHM9ZGVmYXVsdFByb3BzO3ZhciBfZGVmYXVsdD0oMCxfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoXCJtZWRpYS1ib2R5XCIsTWVkaWFCb2R5KTtleHBvcnRzLmRlZmF1bHQ9X2RlZmF1bHQsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWsxbFpHbGhRbTlrZVM1cWN5SmRMQ0p1WVcxbGN5STZXeUpmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MElpd2ljbVZ4ZFdseVpTSXNJbVY0Y0c5eWRITWlMQ0pmWDJWelRXOWtkV3hsSWl3aVpHVm1ZWFZzZENJc0lsOWxlSFJsYm1Sek1pSXNJbDl2WW1wbFkzUlhhWFJvYjNWMFVISnZjR1Z5ZEdsbGMweHZiM05sTWlJc0lsOXBibWhsY21sMGMweHZiM05sTWlJc0lsOWpiR0Z6YzI1aGJXVnpJaXdpWDNKbFlXTjBJaXdpWDNCeWIzQlVlWEJsY3lJc0lsOWxiR1Z0Wlc1MFZIbHdaU0lzSWw5TlpXUnBZU0lzSWw5aWIyOTBjM1J5WVhCVmRHbHNjeUlzSW5CeWIzQlVlWEJsY3lJc0ltRnNhV2R1SWl3aWIyNWxUMllpTENKamIyMXdiMjVsYm5SRGJHRnpjeUlzSW1SbFptRjFiSFJRY205d2N5SXNJazFsWkdsaFFtOWtlU0lzSWw5U1pXRmpkQ1JEYjIxd2IyNWxiblFpTENKaGNIQnNlU0lzSW5Sb2FYTWlMQ0poY21kMWJXVnVkSE1pTENKd2NtOTBiM1I1Y0dVaUxDSnlaVzVrWlhJaUxDSmZkR2hwY3lSd2NtOXdjeUlzSW5CeWIzQnpJaXdpUTI5dGNHOXVaVzUwSWl3aVkyeGhjM05PWVcxbElpd2lYM053YkdsMFFuTlFjbTl3Y3lJc0luTndiR2wwUW5OUWNtOXdjeUlzSW1KelVISnZjSE1pTENKbGJHVnRaVzUwVUhKdmNITWlMQ0pqYkdGemMyVnpJaXdpWjJWMFEyeGhjM05UWlhRaUxDSndjbVZtYVhnaUxDSmpjbVZoZEdWRmJHVnRaVzUwSWl3aVgyUmxabUYxYkhRaUxDSmljME5zWVhOeklpd2liVzlrZFd4bElsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVVZCTEVsQlFVbEJMSFZDUVVGNVFrTXNVVUZCVVN4M1JFRkZja05ETEZGQlFWRkRMRmxCUVdFc1JVRkRja0pFTEZGQlFWRkZMR0ZCUVZVc1JVRkZiRUlzU1VGQlNVTXNWVUZCV1V3c2RVSkJRWFZDUXl4UlFVRlJMREpEUVVVelEwc3NLMEpCUVdsRFRpeDFRa0ZCZFVKRExGRkJRVkVzWjBWQlJXaEZUU3huUWtGQmEwSlFMSFZDUVVGMVFrTXNVVUZCVVN4cFJFRkZha1JQTEZsQlFXTlNMSFZDUVVGMVFrTXNVVUZCVVN4bFFVVTNRMUVzVDBGQlUxUXNkVUpCUVhWQ1F5eFJRVUZSTEZWQlJYaERVeXhYUVVGaFZpeDFRa0ZCZFVKRExGRkJRVkVzWlVGRk5VTlZMR0ZCUVdWWUxIVkNRVUYxUWtNc1VVRkJVU3h4UTBGRk9VTlhMRTlCUVZOYUxIVkNRVUYxUWtNc1VVRkJVU3haUVVWNFExa3NaMEpCUVd0Q1dpeFJRVUZSTERCQ1FVVXhRbUVzVlVGQldTeERRVWxrUXl4TlFVRlBUQ3hYUVVGWFRpeFJRVUZSV1N4TlFVRk5MRU5CUVVNc1RVRkJUeXhUUVVGVkxGZEJRMnhFUXl4bFFVRm5RazRzWVVGQllWQXNVMEZGTTBKakxHRkJRV1VzUTBGRGFrSkVMR1ZCUVdkQ0xFOUJSMlJGTEZWQlJVb3NVMEZCVlVNc1IwRkhVaXhUUVVGVFJDeFpRVU5RTEU5QlFVOURMRVZCUVdsQ1F5eE5RVUZOUXl4TFFVRk5ReXhaUVVGalJDeExRVFJDY0VRc1QwRXZRa0VzUlVGQlNXWXNaMEpCUVdkQ1NDeFRRVUZUWlN4VlFVRlhReXhIUVUwelFrUXNWVUZCVlVzc1ZVRkZhRUpETEU5QlFWTXNVMEZCVTBFc1UwRkRka0lzU1VGQlNVTXNSVUZCWTBvc1MwRkJTMHNzVFVGRGJrSkRMRVZCUVZsR0xFVkJRVmxVTEdWQlEzaENSaXhGUVVGUlZ5eEZRVUZaV0N4TlFVTndRbU1zUlVGQldVZ3NSVUZCV1Vjc1ZVRkRlRUpHTEVkQlFWRXNSVUZCU1hKQ0xDdENRVUVyUWtZc1UwRkJVM05DTEVWQlFXRXNRMEZCUXl4cFFrRkJhMElzVVVGQlV5eGpRVVUzUmtrc1IwRkJaMElzUlVGQlNXcENMR2RDUVVGblFtdENMR05CUVdOS0xFZEJRMnhFU3l4RlFVRlZSaXhGUVVGakxFZEJRM2hDUnl4RlFVRmxTQ3hGUVVGakxFZEJSVGRDU1N4SFFVRlZMRVZCUVVseVFpeG5Ra0ZCWjBKelFpeGhRVUZoU0N4SFFVOHZReXhQUVV4SmFrSXNTVUZGUm0xQ0xFZEJRVkVzUlVGQlNYSkNMR2RDUVVGblFuVkNMRkZCUVZGNFFpeFBRVUZQVWl4UlFVRlJZeXhoUVVGalNDeExRVUZWTEVkQlIzUkZUaXhQUVVGUFRDeFJRVUZSYVVNc1kwRkJZMVFzUjBGQlZ5eEZRVUZKZGtJc1ZVRkJWVVFzVTBGQlV5eEhRVUZKTmtJc1JVRkJZeXhEUVVOMFJrb3NWMEZCVnl4RlFVRkpja0lzV1VGQldVb3NVMEZCVTNsQ0xFVkJRVmRMTEU5QlNUVkRaaXhWUVdoRFZDeERRV2xEUlZZc1QwRkJUMHdzVVVGQlVYZENMRmRCUldwQ1ZDeFZRVUZWVEN4VlFVRlpRU3hWUVVOMFFrc3NWVUZCVlVRc1lVRkJaVUVzWVVGRmVrSXNTVUZCU1c5Q0xGVkJRVmNzUlVGQlNYcENMR2RDUVVGblFqQkNMRk5CUVZNc1lVRkJZM0JDTEZkQlJURkVha0lzVVVGQlVVVXNVVUZCVld0RExGTkJRMnhDUlN4UFFVRlBkRU1zVVVGQlZVRXNVVUZCYVVJaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Y21WaFkzUXRZbTl2ZEhOMGNtRndMMnhwWWk5TlpXUnBZVUp2WkhrdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9leHRlbmRzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSksX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9jbGFzc25hbWVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpLF9yZWFjdD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSksX2VsZW1lbnRUeXBlPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlXCIpKSxfYm9vdHN0cmFwVXRpbHM9cmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIikscHJvcFR5cGVzPXtjb21wb25lbnRDbGFzczpfZWxlbWVudFR5cGUuZGVmYXVsdH0sZGVmYXVsdFByb3BzPXtjb21wb25lbnRDbGFzczpcImg0XCJ9LE1lZGlhSGVhZGluZz1mdW5jdGlvbihlKXtmdW5jdGlvbiBNZWRpYUhlYWRpbmcoKXtyZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9cmV0dXJuKDAsX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKE1lZGlhSGVhZGluZyxlKSxNZWRpYUhlYWRpbmcucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXt2YXIgZT10aGlzLnByb3BzLHQ9ZS5jb21wb25lbnRDbGFzcyxyPWUuY2xhc3NOYW1lLHM9KDAsX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKGUsW1wiY29tcG9uZW50Q2xhc3NcIixcImNsYXNzTmFtZVwiXSksYT0oMCxfYm9vdHN0cmFwVXRpbHMuc3BsaXRCc1Byb3BzKShzKSxvPWFbMF0saT1hWzFdLGw9KDAsX2Jvb3RzdHJhcFV0aWxzLmdldENsYXNzU2V0KShvKTtyZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCh0LCgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSxpLHtjbGFzc05hbWU6KDAsX2NsYXNzbmFtZXMuZGVmYXVsdCkocixsKX0pKX0sTWVkaWFIZWFkaW5nfShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO01lZGlhSGVhZGluZy5wcm9wVHlwZXM9cHJvcFR5cGVzLE1lZGlhSGVhZGluZy5kZWZhdWx0UHJvcHM9ZGVmYXVsdFByb3BzO3ZhciBfZGVmYXVsdD0oMCxfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoXCJtZWRpYS1oZWFkaW5nXCIsTWVkaWFIZWFkaW5nKTtleHBvcnRzLmRlZmF1bHQ9X2RlZmF1bHQsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWsxbFpHbGhTR1ZoWkdsdVp5NXFjeUpkTENKdVlXMWxjeUk2V3lKZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBJaXdpY21WeGRXbHlaU0lzSW1WNGNHOXlkSE1pTENKZlgyVnpUVzlrZFd4bElpd2laR1ZtWVhWc2RDSXNJbDlsZUhSbGJtUnpNaUlzSWw5dlltcGxZM1JYYVhSb2IzVjBVSEp2Y0dWeWRHbGxjMHh2YjNObE1pSXNJbDlwYm1obGNtbDBjMHh2YjNObE1pSXNJbDlqYkdGemMyNWhiV1Z6SWl3aVgzSmxZV04wSWl3aVgyVnNaVzFsYm5SVWVYQmxJaXdpWDJKdmIzUnpkSEpoY0ZWMGFXeHpJaXdpY0hKdmNGUjVjR1Z6SWl3aVkyOXRjRzl1Wlc1MFEyeGhjM01pTENKa1pXWmhkV3gwVUhKdmNITWlMQ0pOWldScFlVaGxZV1JwYm1jaUxDSmZVbVZoWTNRa1EyOXRjRzl1Wlc1MElpd2lZWEJ3YkhraUxDSjBhR2x6SWl3aVlYSm5kVzFsYm5Seklpd2ljSEp2ZEc5MGVYQmxJaXdpY21WdVpHVnlJaXdpWDNSb2FYTWtjSEp2Y0hNaUxDSndjbTl3Y3lJc0lrTnZiWEJ2Ym1WdWRDSXNJbU5zWVhOelRtRnRaU0lzSWw5emNHeHBkRUp6VUhKdmNITWlMQ0p6Y0d4cGRFSnpVSEp2Y0hNaUxDSmljMUJ5YjNCeklpd2laV3hsYldWdWRGQnliM0J6SWl3aVkyeGhjM05sY3lJc0ltZGxkRU5zWVhOelUyVjBJaXdpWTNKbFlYUmxSV3hsYldWdWRDSXNJbDlrWldaaGRXeDBJaXdpWW5ORGJHRnpjeUlzSW0xdlpIVnNaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRlFTeEpRVUZKUVN4MVFrRkJlVUpETEZGQlFWRXNkMFJCUlhKRFF5eFJRVUZSUXl4WlFVRmhMRVZCUTNKQ1JDeFJRVUZSUlN4aFFVRlZMRVZCUld4Q0xFbEJRVWxETEZWQlFWbE1MSFZDUVVGMVFrTXNVVUZCVVN3eVEwRkZNME5MTEN0Q1FVRnBRMDRzZFVKQlFYVkNReXhSUVVGUkxHZEZRVVZvUlUwc1owSkJRV3RDVUN4MVFrRkJkVUpETEZGQlFWRXNhVVJCUldwRVR5eFpRVUZqVWl4MVFrRkJkVUpETEZGQlFWRXNaVUZGTjBOUkxFOUJRVk5VTEhWQ1FVRjFRa01zVVVGQlVTeFZRVVY0UTFNc1lVRkJaVllzZFVKQlFYVkNReXhSUVVGUkxIRkRRVVU1UTFVc1owSkJRV3RDVml4UlFVRlJMREJDUVVVeFFsY3NWVUZCV1N4RFFVTmtReXhsUVVGblFrZ3NZVUZCWVU0c1UwRkZNMEpWTEdGQlFXVXNRMEZEYWtKRUxHVkJRV2RDTEUxQlIyUkZMR0ZCUlVvc1UwRkJWVU1zUjBGSFVpeFRRVUZUUkN4bFFVTlFMRTlCUVU5RExFVkJRV2xDUXl4TlFVRk5ReXhMUVVGTlF5eFpRVUZqUkN4TFFYRkNjRVFzVDBGNFFrRXNSVUZCU1Znc1owSkJRV2RDU0N4VFFVRlRWeXhoUVVGalF5eEhRVTA1UWtRc1lVRkJZVXNzVlVGRmJrSkRMRTlCUVZNc1UwRkJVMEVzVTBGRGRrSXNTVUZCU1VNc1JVRkJZMG9zUzBGQlMwc3NUVUZEYmtKRExFVkJRVmxHTEVWQlFWbFVMR1ZCUTNoQ1dTeEZRVUZaU0N4RlFVRlpSeXhWUVVONFFrWXNSMEZCVVN4RlFVRkpha0lzSzBKQlFTdENSaXhUUVVGVGEwSXNSVUZCWVN4RFFVRkRMR2xDUVVGclFpeGpRVVZ3Umtrc1IwRkJaMElzUlVGQlNXWXNaMEpCUVdkQ1owSXNZMEZCWTBvc1IwRkRiRVJMTEVWQlFWVkdMRVZCUVdNc1IwRkRlRUpITEVWQlFXVklMRVZCUVdNc1IwRkZOMEpKTEVkQlFWVXNSVUZCU1c1Q0xHZENRVUZuUW05Q0xHRkJRV0ZJTEVkQlF5OURMRTlCUVU5dVFpeFBRVUZQVEN4UlFVRlJORUlzWTBGQlkxSXNSMEZCVnl4RlFVRkpia0lzVlVGQlZVUXNVMEZCVXl4SFFVRkplVUlzUlVGQll5eERRVU4wUmtvc1YwRkJWeXhGUVVGSmFrSXNXVUZCV1Vvc1UwRkJVM0ZDTEVWQlFWZExMRTlCU1RWRFppeGhRWHBDVkN4RFFUQkNSVTRzVDBGQlQwd3NVVUZCVVc5Q0xGZEJSV3BDVkN4aFFVRmhTQ3hWUVVGWlFTeFZRVU42UWtjc1lVRkJZVVFzWVVGQlpVRXNZVUZGTlVJc1NVRkJTVzFDTEZWQlFWY3NSVUZCU1hSQ0xHZENRVUZuUW5WQ0xGTkJRVk1zWjBKQlFXbENia0lzWTBGRk4wUmlMRkZCUVZGRkxGRkJRVlUyUWl4VFFVTnNRa1VzVDBGQlQycERMRkZCUVZWQkxGRkJRV2xDSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdOMExXSnZiM1J6ZEhKaGNDOXNhV0l2VFdWa2FXRklaV0ZrYVc1bkxtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9leHRlbmRzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSksX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9jbGFzc25hbWVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpLF9yZWFjdD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSksX3Byb3BUeXBlcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKSxfTWVkaWE9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9NZWRpYVwiKSksX2Jvb3RzdHJhcFV0aWxzPXJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpLHByb3BUeXBlcz17YWxpZ246X3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFtcInRvcFwiLFwibWlkZGxlXCIsXCJib3R0b21cIl0pfSxNZWRpYUxlZnQ9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gTWVkaWFMZWZ0KCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybigwLF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShNZWRpYUxlZnQsZSksTWVkaWFMZWZ0LnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIGU9dGhpcy5wcm9wcyx0PWUuYWxpZ24scj1lLmNsYXNzTmFtZSxzPSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShlLFtcImFsaWduXCIsXCJjbGFzc05hbWVcIl0pLGk9KDAsX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykocyksbz1pWzBdLGE9aVsxXSx1PSgwLF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkobyk7cmV0dXJuIHQmJih1WygwLF9ib290c3RyYXBVdGlscy5wcmVmaXgpKF9NZWRpYS5kZWZhdWx0LmRlZmF1bHRQcm9wcyx0KV09ITApLF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwoMCxfZXh0ZW5kczIuZGVmYXVsdCkoe30sYSx7Y2xhc3NOYW1lOigwLF9jbGFzc25hbWVzLmRlZmF1bHQpKHIsdSl9KSl9LE1lZGlhTGVmdH0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtNZWRpYUxlZnQucHJvcFR5cGVzPXByb3BUeXBlczt2YXIgX2RlZmF1bHQ9KDAsX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKFwibWVkaWEtbGVmdFwiLE1lZGlhTGVmdCk7ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrMWxaR2xoVEdWbWRDNXFjeUpkTENKdVlXMWxjeUk2V3lKZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBJaXdpY21WeGRXbHlaU0lzSW1WNGNHOXlkSE1pTENKZlgyVnpUVzlrZFd4bElpd2laR1ZtWVhWc2RDSXNJbDlsZUhSbGJtUnpNaUlzSWw5dlltcGxZM1JYYVhSb2IzVjBVSEp2Y0dWeWRHbGxjMHh2YjNObE1pSXNJbDlwYm1obGNtbDBjMHh2YjNObE1pSXNJbDlqYkdGemMyNWhiV1Z6SWl3aVgzSmxZV04wSWl3aVgzQnliM0JVZVhCbGN5SXNJbDlOWldScFlTSXNJbDlpYjI5MGMzUnlZWEJWZEdsc2N5SXNJbkJ5YjNCVWVYQmxjeUlzSW1Gc2FXZHVJaXdpYjI1bFQyWWlMQ0pOWldScFlVeGxablFpTENKZlVtVmhZM1FrUTI5dGNHOXVaVzUwSWl3aVlYQndiSGtpTENKMGFHbHpJaXdpWVhKbmRXMWxiblJ6SWl3aWNISnZkRzkwZVhCbElpd2ljbVZ1WkdWeUlpd2lYM1JvYVhNa2NISnZjSE1pTENKd2NtOXdjeUlzSW1Oc1lYTnpUbUZ0WlNJc0lsOXpjR3hwZEVKelVISnZjSE1pTENKemNHeHBkRUp6VUhKdmNITWlMQ0ppYzFCeWIzQnpJaXdpWld4bGJXVnVkRkJ5YjNCeklpd2lZMnhoYzNObGN5SXNJbWRsZEVOc1lYTnpVMlYwSWl3aWNISmxabWw0SWl3aVpHVm1ZWFZzZEZCeWIzQnpJaXdpWTNKbFlYUmxSV3hsYldWdWRDSXNJa052YlhCdmJtVnVkQ0lzSWw5a1pXWmhkV3gwSWl3aVluTkRiR0Z6Y3lJc0ltMXZaSFZzWlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkZRU3hKUVVGSlFTeDFRa0ZCZVVKRExGRkJRVkVzZDBSQlJYSkRReXhSUVVGUlF5eFpRVUZoTEVWQlEzSkNSQ3hSUVVGUlJTeGhRVUZWTEVWQlJXeENMRWxCUVVsRExGVkJRVmxNTEhWQ1FVRjFRa01zVVVGQlVTd3lRMEZGTTBOTExDdENRVUZwUTA0c2RVSkJRWFZDUXl4UlFVRlJMR2RGUVVWb1JVMHNaMEpCUVd0Q1VDeDFRa0ZCZFVKRExGRkJRVkVzYVVSQlJXcEVUeXhaUVVGalVpeDFRa0ZCZFVKRExGRkJRVkVzWlVGRk4wTlJMRTlCUVZOVUxIVkNRVUYxUWtNc1VVRkJVU3hWUVVWNFExTXNWMEZCWVZZc2RVSkJRWFZDUXl4UlFVRlJMR1ZCUlRWRFZTeFBRVUZUV0N4MVFrRkJkVUpETEZGQlFWRXNXVUZGZUVOWExHZENRVUZyUWxnc1VVRkJVU3d3UWtGRk1VSlpMRlZCUVZrc1EwRkpaRU1zVFVGQlQwb3NWMEZCVjA0c1VVRkJVVmNzVFVGQlRTeERRVUZETEUxQlFVOHNVMEZCVlN4WlFVZG9SRU1zVlVGRlNpeFRRVUZWUXl4SFFVZFNMRk5CUVZORUxGbEJRMUFzVDBGQlQwTXNSVUZCYVVKRExFMUJRVTFETEV0QlFVMURMRmxCUVdORUxFdEJNa0p3UkN4UFFUbENRU3hGUVVGSldpeG5Ra0ZCWjBKSUxGTkJRVk5aTEZWQlFWZERMRWRCVFROQ1JDeFZRVUZWU3l4VlFVVm9Ra01zVDBGQlV5eFRRVUZUUVN4VFFVTjJRaXhKUVVGSlF5eEZRVUZqU2l4TFFVRkxTeXhOUVVOdVFsWXNSVUZCVVZNc1JVRkJXVlFzVFVGRGNFSlhMRVZCUVZsR0xFVkJRVmxGTEZWQlEzaENSQ3hIUVVGUkxFVkJRVWxzUWl3clFrRkJLMEpHTEZOQlFWTnRRaXhGUVVGaExFTkJRVU1zVVVGQlV5eGpRVVV6UlVjc1IwRkJaMElzUlVGQlNXUXNaMEpCUVdkQ1pTeGpRVUZqU0N4SFFVTnNSRWtzUlVGQlZVWXNSVUZCWXl4SFFVTjRRa2NzUlVGQlpVZ3NSVUZCWXl4SFFVVTNRa2tzUjBGQlZTeEZRVUZKYkVJc1owSkJRV2RDYlVJc1lVRkJZVWdzUjBGUEwwTXNUMEZNU1dRc1NVRkZSbWRDTEVkQlFWRXNSVUZCU1d4Q0xHZENRVUZuUW05Q0xGRkJRVkZ5UWl4UFFVRlBVQ3hSUVVGUk5rSXNZVUZCWTI1Q0xFdEJRVlVzUjBGSGRFVk1MRTlCUVU5TUxGRkJRVkU0UWl4alFVRmpMRTlCUVU4c1JVRkJTVGRDTEZWQlFWVkVMRk5CUVZNc1IwRkJTWGxDTEVWQlFXTXNRMEZEYkVaS0xGZEJRVmNzUlVGQlNXcENMRmxCUVZsS0xGTkJRVk54UWl4RlFVRlhTeXhQUVVrMVEyUXNWVUV2UWxRc1EwRm5RMFZRTEU5QlFVOU1MRkZCUVZFclFpeFhRVVZxUW01Q0xGVkJRVlZJTEZWQlFWbEJMRlZCUlhSQ0xFbEJRVWwxUWl4VlFVRlhMRVZCUVVsNFFpeG5Ra0ZCWjBKNVFpeFRRVUZUTEdGQlFXTnlRaXhYUVVVeFJHUXNVVUZCVVVVc1VVRkJWV2RETEZOQlEyeENSU3hQUVVGUGNFTXNVVUZCVlVFc1VVRkJhVUlpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdFltOXZkSE4wY21Gd0wyeHBZaTlOWldScFlVeGxablF1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PXZvaWQgMDt2YXIgX2V4dGVuZHMyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKSxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpLF9pbmhlcml0c0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSksX2NsYXNzbmFtZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKSxfYm9vdHN0cmFwVXRpbHM9cmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIiksTWVkaWFMaXN0PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIE1lZGlhTGlzdCgpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4oMCxfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoTWVkaWFMaXN0LGUpLE1lZGlhTGlzdC5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uIHJlbmRlcigpe3ZhciBlPXRoaXMucHJvcHMsdD1lLmNsYXNzTmFtZSxyPSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShlLFtcImNsYXNzTmFtZVwiXSkscz0oMCxfYm9vdHN0cmFwVXRpbHMuc3BsaXRCc1Byb3BzKShyKSxpPXNbMF0sbz1zWzFdLGE9KDAsX2Jvb3RzdHJhcFV0aWxzLmdldENsYXNzU2V0KShpKTtyZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInVsXCIsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LG8se2NsYXNzTmFtZTooMCxfY2xhc3NuYW1lcy5kZWZhdWx0KSh0LGEpfSkpfSxNZWRpYUxpc3R9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCksX2RlZmF1bHQ9KDAsX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKFwibWVkaWEtbGlzdFwiLE1lZGlhTGlzdCk7ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrMWxaR2xoVEdsemRDNXFjeUpkTENKdVlXMWxjeUk2V3lKZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBJaXdpY21WeGRXbHlaU0lzSW1WNGNHOXlkSE1pTENKZlgyVnpUVzlrZFd4bElpd2laR1ZtWVhWc2RDSXNJbDlsZUhSbGJtUnpNaUlzSWw5dlltcGxZM1JYYVhSb2IzVjBVSEp2Y0dWeWRHbGxjMHh2YjNObE1pSXNJbDlwYm1obGNtbDBjMHh2YjNObE1pSXNJbDlqYkdGemMyNWhiV1Z6SWl3aVgzSmxZV04wSWl3aVgySnZiM1J6ZEhKaGNGVjBhV3h6SWl3aVRXVmthV0ZNYVhOMElpd2lYMUpsWVdOMEpFTnZiWEJ2Ym1WdWRDSXNJbUZ3Y0d4NUlpd2lkR2hwY3lJc0ltRnlaM1Z0Wlc1MGN5SXNJbkJ5YjNSdmRIbHdaU0lzSW5KbGJtUmxjaUlzSWw5MGFHbHpKSEJ5YjNCeklpd2ljSEp2Y0hNaUxDSmpiR0Z6YzA1aGJXVWlMQ0pmYzNCc2FYUkNjMUJ5YjNCeklpd2ljM0JzYVhSQ2MxQnliM0J6SWl3aVluTlFjbTl3Y3lJc0ltVnNaVzFsYm5SUWNtOXdjeUlzSW1Oc1lYTnpaWE1pTENKblpYUkRiR0Z6YzFObGRDSXNJbU55WldGMFpVVnNaVzFsYm5RaUxDSkRiMjF3YjI1bGJuUWlMQ0pmWkdWbVlYVnNkQ0lzSW1KelEyeGhjM01pTENKdGIyUjFiR1VpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlJVRXNTVUZCU1VFc2RVSkJRWGxDUXl4UlFVRlJMSGRFUVVWeVEwTXNVVUZCVVVNc1dVRkJZU3hGUVVOeVFrUXNVVUZCVVVVc1lVRkJWU3hGUVVWc1FpeEpRVUZKUXl4VlFVRlpUQ3gxUWtGQmRVSkRMRkZCUVZFc01rTkJSVE5EU3l3clFrRkJhVU5PTEhWQ1FVRjFRa01zVVVGQlVTeG5SVUZGYUVWTkxHZENRVUZyUWxBc2RVSkJRWFZDUXl4UlFVRlJMR2xFUVVWcVJFOHNXVUZCWTFJc2RVSkJRWFZDUXl4UlFVRlJMR1ZCUlRkRFVTeFBRVUZUVkN4MVFrRkJkVUpETEZGQlFWRXNWVUZGZUVOVExHZENRVUZyUWxRc1VVRkJVU3d3UWtGRk1VSlZMRlZCUlVvc1UwRkJWVU1zUjBGSFVpeFRRVUZUUkN4WlFVTlFMRTlCUVU5RExFVkJRV2xDUXl4TlFVRk5ReXhMUVVGTlF5eFpRVUZqUkN4TFFXOUNjRVFzVDBGMlFrRXNSVUZCU1ZBc1owSkJRV2RDU0N4VFFVRlRUeXhWUVVGWFF5eEhRVTB6UWtRc1ZVRkJWVXNzVlVGRmFFSkRMRTlCUVZNc1UwRkJVMEVzVTBGRGRrSXNTVUZCU1VNc1JVRkJZMG9zUzBGQlMwc3NUVUZEYmtKRExFVkJRVmxHTEVWQlFWbEZMRlZCUTNoQ1JDeEhRVUZSTEVWQlFVbGlMQ3RDUVVFclFrWXNVMEZCVTJNc1JVRkJZU3hEUVVGRExHTkJSV3hGUnl4SFFVRm5RaXhGUVVGSldDeG5Ra0ZCWjBKWkxHTkJRV05JTEVkQlEyeEVTU3hGUVVGVlJpeEZRVUZqTEVkQlEzaENSeXhGUVVGbFNDeEZRVUZqTEVkQlJUZENTU3hIUVVGVkxFVkJRVWxtTEdkQ1FVRm5RbWRDTEdGQlFXRklMRWRCUXk5RExFOUJRVTlrTEU5QlFVOU1MRkZCUVZGMVFpeGpRVUZqTEUxQlFVMHNSVUZCU1hSQ0xGVkJRVlZFTEZOQlFWTXNSMEZCU1c5Q0xFVkJRV01zUTBGRGFrWktMRmRCUVZjc1JVRkJTVm9zV1VGQldVb3NVMEZCVTJkQ0xFVkJRVmRMTEU5QlNUVkRaQ3hWUVhoQ1ZDeERRWGxDUlVZc1QwRkJUMHdzVVVGQlVYZENMRmRCUldKRExGVkJRVmNzUlVGQlNXNUNMR2RDUVVGblFtOUNMRk5CUVZNc1lVRkJZMjVDTEZkQlJURkVWQ3hSUVVGUlJTeFJRVUZWZVVJc1UwRkRiRUpGTEU5QlFVODNRaXhSUVVGVlFTeFJRVUZwUWlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDMWliMjkwYzNSeVlYQXZiR2xpTDAxbFpHbGhUR2x6ZEM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PXZvaWQgMDt2YXIgX2V4dGVuZHMyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKSxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpLF9pbmhlcml0c0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSksX2NsYXNzbmFtZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKSxfYm9vdHN0cmFwVXRpbHM9cmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIiksTWVkaWFMaXN0SXRlbT1mdW5jdGlvbihlKXtmdW5jdGlvbiBNZWRpYUxpc3RJdGVtKCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybigwLF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShNZWRpYUxpc3RJdGVtLGUpLE1lZGlhTGlzdEl0ZW0ucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXt2YXIgZT10aGlzLnByb3BzLHQ9ZS5jbGFzc05hbWUscj0oMCxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoZSxbXCJjbGFzc05hbWVcIl0pLHM9KDAsX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykociksaT1zWzBdLG89c1sxXSxhPSgwLF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkoaSk7cmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJsaVwiLCgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSxvLHtjbGFzc05hbWU6KDAsX2NsYXNzbmFtZXMuZGVmYXVsdCkodCxhKX0pKX0sTWVkaWFMaXN0SXRlbX0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KSxfZGVmYXVsdD0oMCxfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoXCJtZWRpYVwiLE1lZGlhTGlzdEl0ZW0pO2V4cG9ydHMuZGVmYXVsdD1fZGVmYXVsdCxtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJazFsWkdsaFRHbHpkRWwwWlcwdWFuTWlYU3dpYm1GdFpYTWlPbHNpWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDSXNJbkpsY1hWcGNtVWlMQ0psZUhCdmNuUnpJaXdpWDE5bGMwMXZaSFZzWlNJc0ltUmxabUYxYkhRaUxDSmZaWGgwWlc1a2N6SWlMQ0pmYjJKcVpXTjBWMmwwYUc5MWRGQnliM0JsY25ScFpYTk1iMjl6WlRJaUxDSmZhVzVvWlhKcGRITk1iMjl6WlRJaUxDSmZZMnhoYzNOdVlXMWxjeUlzSWw5eVpXRmpkQ0lzSWw5aWIyOTBjM1J5WVhCVmRHbHNjeUlzSWsxbFpHbGhUR2x6ZEVsMFpXMGlMQ0pmVW1WaFkzUWtRMjl0Y0c5dVpXNTBJaXdpWVhCd2JIa2lMQ0owYUdseklpd2lZWEpuZFcxbGJuUnpJaXdpY0hKdmRHOTBlWEJsSWl3aWNtVnVaR1Z5SWl3aVgzUm9hWE1rY0hKdmNITWlMQ0p3Y205d2N5SXNJbU5zWVhOelRtRnRaU0lzSWw5emNHeHBkRUp6VUhKdmNITWlMQ0p6Y0d4cGRFSnpVSEp2Y0hNaUxDSmljMUJ5YjNCeklpd2laV3hsYldWdWRGQnliM0J6SWl3aVkyeGhjM05sY3lJc0ltZGxkRU5zWVhOelUyVjBJaXdpWTNKbFlYUmxSV3hsYldWdWRDSXNJa052YlhCdmJtVnVkQ0lzSWw5a1pXWmhkV3gwSWl3aVluTkRiR0Z6Y3lJc0ltMXZaSFZzWlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkZRU3hKUVVGSlFTeDFRa0ZCZVVKRExGRkJRVkVzZDBSQlJYSkRReXhSUVVGUlF5eFpRVUZoTEVWQlEzSkNSQ3hSUVVGUlJTeGhRVUZWTEVWQlJXeENMRWxCUVVsRExGVkJRVmxNTEhWQ1FVRjFRa01zVVVGQlVTd3lRMEZGTTBOTExDdENRVUZwUTA0c2RVSkJRWFZDUXl4UlFVRlJMR2RGUVVWb1JVMHNaMEpCUVd0Q1VDeDFRa0ZCZFVKRExGRkJRVkVzYVVSQlJXcEVUeXhaUVVGalVpeDFRa0ZCZFVKRExGRkJRVkVzWlVGRk4wTlJMRTlCUVZOVUxIVkNRVUYxUWtNc1VVRkJVU3hWUVVWNFExTXNaMEpCUVd0Q1ZDeFJRVUZSTERCQ1FVVXhRbFVzWTBGRlNpeFRRVUZWUXl4SFFVZFNMRk5CUVZORUxHZENRVU5RTEU5QlFVOURMRVZCUVdsQ1F5eE5RVUZOUXl4TFFVRk5ReXhaUVVGalJDeExRVzlDY0VRc1QwRjJRa0VzUlVGQlNWQXNaMEpCUVdkQ1NDeFRRVUZUVHl4alFVRmxReXhIUVUwdlFrUXNZMEZCWTBzc1ZVRkZjRUpETEU5QlFWTXNVMEZCVTBFc1UwRkRka0lzU1VGQlNVTXNSVUZCWTBvc1MwRkJTMHNzVFVGRGJrSkRMRVZCUVZsR0xFVkJRVmxGTEZWQlEzaENSQ3hIUVVGUkxFVkJRVWxpTEN0Q1FVRXJRa1lzVTBGQlUyTXNSVUZCWVN4RFFVRkRMR05CUld4RlJ5eEhRVUZuUWl4RlFVRkpXQ3huUWtGQlowSlpMR05CUVdOSUxFZEJRMnhFU1N4RlFVRlZSaXhGUVVGakxFZEJRM2hDUnl4RlFVRmxTQ3hGUVVGakxFZEJSVGRDU1N4SFFVRlZMRVZCUVVsbUxHZENRVUZuUW1kQ0xHRkJRV0ZJTEVkQlF5OURMRTlCUVU5a0xFOUJRVTlNTEZGQlFWRjFRaXhqUVVGakxFMUJRVTBzUlVGQlNYUkNMRlZCUVZWRUxGTkJRVk1zUjBGQlNXOUNMRVZCUVdNc1EwRkRha1pLTEZkQlFWY3NSVUZCU1Zvc1dVRkJXVW9zVTBGQlUyZENMRVZCUVZkTExFOUJTVFZEWkN4alFYaENWQ3hEUVhsQ1JVWXNUMEZCVDB3c1VVRkJVWGRDTEZkQlJXSkRMRlZCUVZjc1JVRkJTVzVDTEdkQ1FVRm5RbTlDTEZOQlFWTXNVVUZCVTI1Q0xHVkJSWEpFVkN4UlFVRlJSU3hSUVVGVmVVSXNVMEZEYkVKRkxFOUJRVTgzUWl4UlFVRlZRU3hSUVVGcFFpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzFpYjI5MGMzUnlZWEF2YkdsaUwwMWxaR2xoVEdsemRFbDBaVzB1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PXZvaWQgMDt2YXIgX2V4dGVuZHMyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKSxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpLF9pbmhlcml0c0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSksX2NsYXNzbmFtZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKSxfcHJvcFR5cGVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpLF9NZWRpYT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL01lZGlhXCIpKSxfYm9vdHN0cmFwVXRpbHM9cmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIikscHJvcFR5cGVzPXthbGlnbjpfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoW1widG9wXCIsXCJtaWRkbGVcIixcImJvdHRvbVwiXSl9LE1lZGlhUmlnaHQ9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gTWVkaWFSaWdodCgpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4oMCxfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoTWVkaWFSaWdodCxlKSxNZWRpYVJpZ2h0LnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIGU9dGhpcy5wcm9wcyx0PWUuYWxpZ24scj1lLmNsYXNzTmFtZSxpPSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShlLFtcImFsaWduXCIsXCJjbGFzc05hbWVcIl0pLHM9KDAsX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykoaSksbz1zWzBdLGE9c1sxXSx1PSgwLF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkobyk7cmV0dXJuIHQmJih1WygwLF9ib290c3RyYXBVdGlscy5wcmVmaXgpKF9NZWRpYS5kZWZhdWx0LmRlZmF1bHRQcm9wcyx0KV09ITApLF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwoMCxfZXh0ZW5kczIuZGVmYXVsdCkoe30sYSx7Y2xhc3NOYW1lOigwLF9jbGFzc25hbWVzLmRlZmF1bHQpKHIsdSl9KSl9LE1lZGlhUmlnaHR9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7TWVkaWFSaWdodC5wcm9wVHlwZXM9cHJvcFR5cGVzO3ZhciBfZGVmYXVsdD0oMCxfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoXCJtZWRpYS1yaWdodFwiLE1lZGlhUmlnaHQpO2V4cG9ydHMuZGVmYXVsdD1fZGVmYXVsdCxtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJazFsWkdsaFVtbG5hSFF1YW5NaVhTd2libUZ0WlhNaU9sc2lYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENJc0luSmxjWFZwY21VaUxDSmxlSEJ2Y25Seklpd2lYMTlsYzAxdlpIVnNaU0lzSW1SbFptRjFiSFFpTENKZlpYaDBaVzVrY3pJaUxDSmZiMkpxWldOMFYybDBhRzkxZEZCeWIzQmxjblJwWlhOTWIyOXpaVElpTENKZmFXNW9aWEpwZEhOTWIyOXpaVElpTENKZlkyeGhjM051WVcxbGN5SXNJbDl5WldGamRDSXNJbDl3Y205d1ZIbHdaWE1pTENKZlRXVmthV0VpTENKZlltOXZkSE4wY21Gd1ZYUnBiSE1pTENKd2NtOXdWSGx3WlhNaUxDSmhiR2xuYmlJc0ltOXVaVTltSWl3aVRXVmthV0ZTYVdkb2RDSXNJbDlTWldGamRDUkRiMjF3YjI1bGJuUWlMQ0poY0hCc2VTSXNJblJvYVhNaUxDSmhjbWQxYldWdWRITWlMQ0p3Y205MGIzUjVjR1VpTENKeVpXNWtaWElpTENKZmRHaHBjeVJ3Y205d2N5SXNJbkJ5YjNCeklpd2lZMnhoYzNOT1lXMWxJaXdpWDNOd2JHbDBRbk5RY205d2N5SXNJbk53YkdsMFFuTlFjbTl3Y3lJc0ltSnpVSEp2Y0hNaUxDSmxiR1Z0Wlc1MFVISnZjSE1pTENKamJHRnpjMlZ6SWl3aVoyVjBRMnhoYzNOVFpYUWlMQ0p3Y21WbWFYZ2lMQ0prWldaaGRXeDBVSEp2Y0hNaUxDSmpjbVZoZEdWRmJHVnRaVzUwSWl3aVEyOXRjRzl1Wlc1MElpd2lYMlJsWm1GMWJIUWlMQ0ppYzBOc1lYTnpJaXdpYlc5a2RXeGxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVWQkxFbEJRVWxCTEhWQ1FVRjVRa01zVVVGQlVTeDNSRUZGY2tORExGRkJRVkZETEZsQlFXRXNSVUZEY2tKRUxGRkJRVkZGTEdGQlFWVXNSVUZGYkVJc1NVRkJTVU1zVlVGQldVd3NkVUpCUVhWQ1F5eFJRVUZSTERKRFFVVXpRMHNzSzBKQlFXbERUaXgxUWtGQmRVSkRMRkZCUVZFc1owVkJSV2hGVFN4blFrRkJhMEpRTEhWQ1FVRjFRa01zVVVGQlVTeHBSRUZGYWtSUExGbEJRV05TTEhWQ1FVRjFRa01zVVVGQlVTeGxRVVUzUTFFc1QwRkJVMVFzZFVKQlFYVkNReXhSUVVGUkxGVkJSWGhEVXl4WFFVRmhWaXgxUWtGQmRVSkRMRkZCUVZFc1pVRkZOVU5WTEU5QlFWTllMSFZDUVVGMVFrTXNVVUZCVVN4WlFVVjRRMWNzWjBKQlFXdENXQ3hSUVVGUkxEQkNRVVV4UWxrc1ZVRkJXU3hEUVVsa1F5eE5RVUZQU2l4WFFVRlhUaXhSUVVGUlZ5eE5RVUZOTEVOQlFVTXNUVUZCVHl4VFFVRlZMRmxCUjJoRVF5eFhRVVZLTEZOQlFWVkRMRWRCUjFJc1UwRkJVMFFzWVVGRFVDeFBRVUZQUXl4RlFVRnBRa01zVFVGQlRVTXNTMEZCVFVNc1dVRkJZMFFzUzBFeVFuQkVMRTlCT1VKQkxFVkJRVWxhTEdkQ1FVRm5Ra2dzVTBGQlUxa3NWMEZCV1VNc1IwRk5OVUpFTEZkQlFWZExMRlZCUldwQ1F5eFBRVUZUTEZOQlFWTkJMRk5CUTNaQ0xFbEJRVWxETEVWQlFXTktMRXRCUVV0TExFMUJRMjVDVml4RlFVRlJVeXhGUVVGWlZDeE5RVU53UWxjc1JVRkJXVVlzUlVGQldVVXNWVUZEZUVKRUxFZEJRVkVzUlVGQlNXeENMQ3RDUVVFclFrWXNVMEZCVTIxQ0xFVkJRV0VzUTBGQlF5eFJRVUZUTEdOQlJUTkZSeXhIUVVGblFpeEZRVUZKWkN4blFrRkJaMEpsTEdOQlFXTklMRWRCUTJ4RVNTeEZRVUZWUml4RlFVRmpMRWRCUTNoQ1J5eEZRVUZsU0N4RlFVRmpMRWRCUlRkQ1NTeEhRVUZWTEVWQlFVbHNRaXhuUWtGQlowSnRRaXhoUVVGaFNDeEhRVTh2UXl4UFFVeEpaQ3hKUVVWR1owSXNSMEZCVVN4RlFVRkpiRUlzWjBKQlFXZENiMElzVVVGQlVYSkNMRTlCUVU5UUxGRkJRVkUyUWl4aFFVRmpia0lzUzBGQlZTeEhRVWQwUlV3c1QwRkJUMHdzVVVGQlVUaENMR05CUVdNc1QwRkJUeXhGUVVGSk4wSXNWVUZCVlVRc1UwRkJVeXhIUVVGSmVVSXNSVUZCWXl4RFFVTnNSa29zVjBGQlZ5eEZRVUZKYWtJc1dVRkJXVW9zVTBGQlUzRkNMRVZCUVZkTExFOUJTVFZEWkN4WFFTOUNWQ3hEUVdkRFJWQXNUMEZCVDB3c1VVRkJVU3RDTEZkQlJXcENia0lzVjBGQlYwZ3NWVUZCV1VFc1ZVRkZka0lzU1VGQlNYVkNMRlZCUVZjc1JVRkJTWGhDTEdkQ1FVRm5RbmxDTEZOQlFWTXNZMEZCWlhKQ0xGbEJSVE5FWkN4UlFVRlJSU3hSUVVGVlowTXNVMEZEYkVKRkxFOUJRVTl3UXl4UlFVRlZRU3hSUVVGcFFpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzFpYjI5MGMzUnlZWEF2YkdsaUwwMWxaR2xoVW1sbmFIUXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0PXJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO2V4cG9ydHMuX19lc01vZHVsZT0hMCxleHBvcnRzLmRlZmF1bHQ9dm9pZCAwO3ZhciBfZXh0ZW5kczI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSksX2luaGVyaXRzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKSxfYXNzZXJ0VGhpc0luaXRpYWxpemVkMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKSxfY2xhc3NuYW1lcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKSxfcmVhY3Q9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpLF9wcm9wVHlwZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSksX2FsbD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzLWV4dHJhL2xpYi9hbGxcIikpLF9TYWZlQW5jaG9yPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vU2FmZUFuY2hvclwiKSksX2Jvb3RzdHJhcFV0aWxzPXJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpLF9jcmVhdGVDaGFpbmVkRnVuY3Rpb249X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb25cIikpLHByb3BUeXBlcz17YWN0aXZlOl9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLGRpc2FibGVkOl9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLGRpdmlkZXI6KDAsX2FsbC5kZWZhdWx0KShfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxmdW5jdGlvbihlKXt2YXIgdD1lLmRpdmlkZXIscj1lLmNoaWxkcmVuO3JldHVybiB0JiZyP25ldyBFcnJvcihcIkNoaWxkcmVuIHdpbGwgbm90IGJlIHJlbmRlcmVkIGZvciBkaXZpZGVyc1wiKTpudWxsfSksZXZlbnRLZXk6X3Byb3BUeXBlcy5kZWZhdWx0LmFueSxoZWFkZXI6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsaHJlZjpfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLG9uQ2xpY2s6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsb25TZWxlY3Q6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmN9LGRlZmF1bHRQcm9wcz17ZGl2aWRlcjohMSxkaXNhYmxlZDohMSxoZWFkZXI6ITF9LE1lbnVJdGVtPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIE1lbnVJdGVtKHQscil7dmFyIGE7cmV0dXJuKGE9ZS5jYWxsKHRoaXMsdCxyKXx8dGhpcykuaGFuZGxlQ2xpY2s9YS5oYW5kbGVDbGljay5iaW5kKCgwLF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKGEpKSksYX0oMCxfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoTWVudUl0ZW0sZSk7dmFyIHQ9TWVudUl0ZW0ucHJvdG90eXBlO3JldHVybiB0LmhhbmRsZUNsaWNrPWZ1bmN0aW9uIGhhbmRsZUNsaWNrKGUpe3ZhciB0PXRoaXMucHJvcHMscj10LmhyZWYsYT10LmRpc2FibGVkLGk9dC5vblNlbGVjdCxsPXQuZXZlbnRLZXk7ciYmIWF8fGUucHJldmVudERlZmF1bHQoKSxhfHxpJiZpKGwsZSl9LHQucmVuZGVyPWZ1bmN0aW9uIHJlbmRlcigpe3ZhciBlPXRoaXMucHJvcHMsdD1lLmFjdGl2ZSxyPWUuZGlzYWJsZWQsYT1lLmRpdmlkZXIsaT1lLmhlYWRlcixsPWUub25DbGljayxzPWUuY2xhc3NOYW1lLG89ZS5zdHlsZSxuPSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShlLFtcImFjdGl2ZVwiLFwiZGlzYWJsZWRcIixcImRpdmlkZXJcIixcImhlYWRlclwiLFwib25DbGlja1wiLFwiY2xhc3NOYW1lXCIsXCJzdHlsZVwiXSksdT0oMCxfYm9vdHN0cmFwVXRpbHMuc3BsaXRCc1Byb3BzQW5kT21pdCkobixbXCJldmVudEtleVwiLFwib25TZWxlY3RcIl0pLGQ9dVswXSxwPXVbMV07cmV0dXJuIGE/KHAuY2hpbGRyZW49dm9pZCAwLF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJsaVwiLCgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSxwLHtyb2xlOlwic2VwYXJhdG9yXCIsY2xhc3NOYW1lOigwLF9jbGFzc25hbWVzLmRlZmF1bHQpKHMsXCJkaXZpZGVyXCIpLHN0eWxlOm99KSkpOmk/X3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImxpXCIsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LHAse3JvbGU6XCJoZWFkaW5nXCIsY2xhc3NOYW1lOigwLF9jbGFzc25hbWVzLmRlZmF1bHQpKHMsKDAsX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkoZCxcImhlYWRlclwiKSksc3R5bGU6b30pKTpfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwibGlcIix7cm9sZTpcInByZXNlbnRhdGlvblwiLGNsYXNzTmFtZTooMCxfY2xhc3NuYW1lcy5kZWZhdWx0KShzLHthY3RpdmU6dCxkaXNhYmxlZDpyfSksc3R5bGU6b30sX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU2FmZUFuY2hvci5kZWZhdWx0LCgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSxwLHtyb2xlOlwibWVudWl0ZW1cIix0YWJJbmRleDpcIi0xXCIsb25DbGljazooMCxfY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uLmRlZmF1bHQpKGwsdGhpcy5oYW5kbGVDbGljayl9KSkpfSxNZW51SXRlbX0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtNZW51SXRlbS5wcm9wVHlwZXM9cHJvcFR5cGVzLE1lbnVJdGVtLmRlZmF1bHRQcm9wcz1kZWZhdWx0UHJvcHM7dmFyIF9kZWZhdWx0PSgwLF9ib290c3RyYXBVdGlscy5ic0NsYXNzKShcImRyb3Bkb3duXCIsTWVudUl0ZW0pO2V4cG9ydHMuZGVmYXVsdD1fZGVmYXVsdCxtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJazFsYm5WSmRHVnRMbXB6SWwwc0ltNWhiV1Z6SWpwYklsOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFpTENKeVpYRjFhWEpsSWl3aVpYaHdiM0owY3lJc0lsOWZaWE5OYjJSMWJHVWlMQ0prWldaaGRXeDBJaXdpWDJWNGRHVnVaSE15SWl3aVgyOWlhbVZqZEZkcGRHaHZkWFJRY205d1pYSjBhV1Z6VEc5dmMyVXlJaXdpWDJsdWFHVnlhWFJ6VEc5dmMyVXlJaXdpWDJGemMyVnlkRlJvYVhOSmJtbDBhV0ZzYVhwbFpESWlMQ0pmWTJ4aGMzTnVZVzFsY3lJc0lsOXlaV0ZqZENJc0lsOXdjbTl3Vkhsd1pYTWlMQ0pmWVd4c0lpd2lYMU5oWm1WQmJtTm9iM0lpTENKZlltOXZkSE4wY21Gd1ZYUnBiSE1pTENKZlkzSmxZWFJsUTJoaGFXNWxaRVoxYm1OMGFXOXVJaXdpY0hKdmNGUjVjR1Z6SWl3aVlXTjBhWFpsSWl3aVltOXZiQ0lzSW1ScGMyRmliR1ZrSWl3aVpHbDJhV1JsY2lJc0lsOXlaV1lpTENKamFHbHNaSEpsYmlJc0lrVnljbTl5SWl3aVpYWmxiblJMWlhraUxDSmhibmtpTENKb1pXRmtaWElpTENKb2NtVm1JaXdpYzNSeWFXNW5JaXdpYjI1RGJHbGpheUlzSW1aMWJtTWlMQ0p2YmxObGJHVmpkQ0lzSW1SbFptRjFiSFJRY205d2N5SXNJazFsYm5WSmRHVnRJaXdpWDFKbFlXTjBKRU52YlhCdmJtVnVkQ0lzSW5CeWIzQnpJaXdpWTI5dWRHVjRkQ0lzSWw5MGFHbHpJaXdpWTJGc2JDSXNJblJvYVhNaUxDSm9ZVzVrYkdWRGJHbGpheUlzSW1KcGJtUWlMQ0pmY0hKdmRHOGlMQ0p3Y205MGIzUjVjR1VpTENKbGRtVnVkQ0lzSWw5MGFHbHpKSEJ5YjNCeklpd2ljSEpsZG1WdWRFUmxabUYxYkhRaUxDSnlaVzVrWlhJaUxDSmZkR2hwY3lSd2NtOXdjeklpTENKamJHRnpjMDVoYldVaUxDSnpkSGxzWlNJc0lsOXpjR3hwZEVKelVISnZjSE5CYm1SUGJXbDBJaXdpYzNCc2FYUkNjMUJ5YjNCelFXNWtUMjFwZENJc0ltSnpVSEp2Y0hNaUxDSmxiR1Z0Wlc1MFVISnZjSE1pTENKMWJtUmxabWx1WldRaUxDSmpjbVZoZEdWRmJHVnRaVzUwSWl3aWNtOXNaU0lzSW5CeVpXWnBlQ0lzSW5SaFlrbHVaR1Y0SWl3aVEyOXRjRzl1Wlc1MElpd2lYMlJsWm1GMWJIUWlMQ0ppYzBOc1lYTnpJaXdpYlc5a2RXeGxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVWQkxFbEJRVWxCTEhWQ1FVRjVRa01zVVVGQlVTeDNSRUZGY2tORExGRkJRVkZETEZsQlFXRXNSVUZEY2tKRUxGRkJRVkZGTEdGQlFWVXNSVUZGYkVJc1NVRkJTVU1zVlVGQldVd3NkVUpCUVhWQ1F5eFJRVUZSTERKRFFVVXpRMHNzSzBKQlFXbERUaXgxUWtGQmRVSkRMRkZCUVZFc1owVkJSV2hGVFN4blFrRkJhMEpRTEhWQ1FVRjFRa01zVVVGQlVTeHBSRUZGYWtSUExIZENRVUV3UWxJc2RVSkJRWFZDUXl4UlFVRlJMSGxFUVVWNlJGRXNXVUZCWTFRc2RVSkJRWFZDUXl4UlFVRlJMR1ZCUlRkRFV5eFBRVUZUVml4MVFrRkJkVUpETEZGQlFWRXNWVUZGZUVOVkxGZEJRV0ZZTEhWQ1FVRjFRa01zVVVGQlVTeGxRVVUxUTFjc1MwRkJUMW9zZFVKQlFYVkNReXhSUVVGUkxEWkNRVVYwUTFrc1dVRkJZMklzZFVKQlFYVkNReXhSUVVGUkxHbENRVVUzUTJFc1owSkJRV3RDWWl4UlFVRlJMREJDUVVVeFFtTXNkVUpCUVhsQ1ppeDFRa0ZCZFVKRExGRkJRVkVzYTBOQlJYaEVaU3hWUVVGWkxFTkJTV1JETEU5QlFWRk9MRmRCUVZkUUxGRkJRVkZqTEV0QlN6TkNReXhUUVVGVlVpeFhRVUZYVUN4UlFVRlJZeXhMUVUwM1FrVXNVMEZCVXl4RlFVRkpVaXhMUVVGTFVpeFRRVUZUVHl4WFFVRlhVQ3hSUVVGUll5eExRVUZOTEZOQlFWVkhMRWRCUXpWRUxFbEJRVWxFTEVWQlFWVkRMRVZCUVV0RUxGRkJRMlpGTEVWQlFWZEVMRVZCUVV0RExGTkJRM0JDTEU5QlFVOUdMRWRCUVZkRkxFVkJRVmNzU1VGQlNVTXNUVUZCVFN3NFEwRkJaMFFzVDBGTmVrWkRMRk5CUVZWaUxGZEJRVmRRTEZGQlFWRnhRaXhKUVVzM1FrTXNUMEZCVVdZc1YwRkJWMUFzVVVGQlVXTXNTMEZMTTBKVExFdEJRVTFvUWl4WFFVRlhVQ3hSUVVGUmQwSXNUMEZMZWtKRExGRkJRVk5zUWl4WFFVRlhVQ3hSUVVGUk1FSXNTMEZUTlVKRExGTkJRVlZ3UWl4WFFVRlhVQ3hSUVVGUk1FSXNUVUZGTTBKRkxHRkJRV1VzUTBGRGFrSmFMRk5CUVZNc1JVRkRWRVFzVlVGQlZTeEZRVU5XVHl4UlFVRlJMRWRCUjA1UExGTkJSVW9zVTBGQlZVTXNSMEZIVWl4VFFVRlRSQ3hUUVVGVFJTeEZRVUZQUXl4SFFVTjJRaXhKUVVGSlF5eEZRVWxLTEU5QlJrRkJMRVZCUVZGSUxFVkJRV2xDU1N4TFFVRkxReXhMUVVGTlNpeEZRVUZQUXl4SlFVRlpSeXhOUVVOcVJFTXNXVUZCWTBnc1JVRkJUVWNzV1VGQldVTXNUVUZCU3l4RlFVRkpha01zZDBKQlFYZENTaXhWUVVGVExFVkJRVWxKTEhkQ1FVRjNRa29zVTBGQlUybERMRXRCUXpsSFFTeEhRVkJVTEVWQlFVazVRaXhuUWtGQlowSklMRk5CUVZNMlFpeFRRVUZWUXl4SFFWVjJReXhKUVVGSlVTeEZRVUZUVkN4VFFVRlRWU3hWUVhGRmRFSXNUMEZ1UlVGRUxFVkJRVTlHTEZsQlFXTXNVMEZCVTBFc1dVRkJXVWtzUjBGRGVFTXNTVUZCU1VNc1JVRkJZMDRzUzBGQlMwb3NUVUZEYmtKU0xFVkJRVTlyUWl4RlFVRlpiRUlzUzBGRGJrSlNMRVZCUVZjd1FpeEZRVUZaTVVJc1UwRkRka0paTEVWQlFWZGpMRVZCUVZsa0xGTkJRM1pDVUN4RlFVRlhjVUlzUlVGQldYSkNMRk5CUlhSQ1J5eEpRVUZSVWl4SFFVTlllVUlzUlVGQlRVVXNhVUpCUjBvelFpeEhRVWxCV1N4SFFVTkdRU3hGUVVGVFVDeEZRVUZWYjBJc1NVRkpka0pHTEVWQlFVOUxMRTlCUVZNc1UwRkJVMEVzVTBGRGRrSXNTVUZCU1VNc1JVRkJaVlFzUzBGQlMwb3NUVUZEY0VKc1FpeEZRVUZUSzBJc1JVRkJZUzlDTEU5QlEzUkNSU3hGUVVGWE5rSXNSVUZCWVRkQ0xGTkJRM2hDUXl4RlFVRlZORUlzUlVGQllUVkNMRkZCUTNaQ1RTeEZRVUZUYzBJc1JVRkJZWFJDTEU5QlEzUkNSeXhGUVVGVmJVSXNSVUZCWVc1Q0xGRkJRM1pDYjBJc1JVRkJXVVFzUlVGQllVTXNWVUZEZWtKRExFVkJRVkZHTEVWQlFXRkZMRTFCUTNKQ1ppeEhRVUZSTEVWQlFVazNRaXdyUWtGQkswSkdMRk5CUVZNMFF5eEZRVUZqTEVOQlFVTXNVMEZCVlN4WFFVRlpMRlZCUVZjc1UwRkJWU3hWUVVGWExGbEJRV0VzVlVGRmRFbEhMRWRCUVhWQ0xFVkJRVWx5UXl4blFrRkJaMEp6UXl4eFFrRkJjVUpxUWl4RlFVRlBMRU5CUVVNc1YwRkJXU3hoUVVOd1JtdENMRVZCUVZWR0xFVkJRWEZDTEVkQlF5OUNSeXhGUVVGbFNDeEZRVUZ4UWl4SFFVVjRReXhQUVVGSkwwSXNSMEZGUm10RExFVkJRV0ZvUXl4alFVRlhhVU1zUlVGRGFrSTNReXhQUVVGUFRpeFJRVUZSYjBRc1kwRkJZeXhOUVVGTkxFVkJRVWx1UkN4VlFVRlZSQ3hUUVVGVExFZEJRVWxyUkN4RlFVRmpMRU5CUTJwR1J5eExRVUZOTEZsQlEwNVNMRmRCUVZjc1JVRkJTWGhETEZsQlFWbE1MRk5CUVZNMlF5eEZRVUZYTEZkQlF5OURReXhOUVVGUFFTeE5RVWxRZUVJc1JVRkRTMmhDTEU5QlFVOU9MRkZCUVZGdlJDeGpRVUZqTEUxQlFVMHNSVUZCU1c1RUxGVkJRVlZFTEZOQlFWTXNSMEZCU1d0RUxFVkJRV01zUTBGRGFrWkhMRXRCUVUwc1ZVRkRUbElzVjBGQlZ5eEZRVUZKZUVNc1dVRkJXVXdzVTBGQlV6WkRMRWRCUVZjc1JVRkJTVzVETEdkQ1FVRm5RalJETEZGQlFWRk1MRVZCUVZNc1YwRkRjRVpJTEUxQlFVOUJMRXRCU1VwNFF5eFBRVUZQVGl4UlFVRlJiMFFzWTBGQll5eExRVUZOTEVOQlEzaERReXhMUVVGTkxHVkJRMDVTTEZkQlFWY3NSVUZCU1hoRExGbEJRVmxNTEZOQlFWTTJReXhGUVVGWExFTkJRemREYUVNc1QwRkJVVUVzUlVGRFVrVXNVMEZCVlVFc1NVRkZXaXRDTEUxQlFVOUJMRWRCUTA1NFF5eFBRVUZQVGl4UlFVRlJiMFFzWTBGQll6TkRMRmxCUVZsVUxGTkJRVk1zUlVGQlNVTXNWVUZCVlVRc1UwRkJVeXhIUVVGSmEwUXNSVUZCWXl4RFFVTTFSa2NzUzBGQlRTeFhRVU5PUlN4VFFVRlZMRXRCUTFZNVFpeFRRVUZUTEVWQlFVbGtMSFZDUVVGMVFsZ3NVMEZCVTNsQ0xFVkJRVk5WTEV0QlFVdERMR3RDUVVsNFJGQXNVMEZvUmxRc1EwRnBSa1YyUWl4UFFVRlBUaXhSUVVGUmQwUXNWMEZGYWtJelFpeFRRVUZUYWtJc1ZVRkJXVUVzVlVGRGNrSnBRaXhUUVVGVFJDeGhRVUZsUVN4aFFVVjRRaXhKUVVGSk5rSXNWVUZCVnl4RlFVRkpMME1zWjBKQlFXZENaMFFzVTBGQlV5eFhRVUZaTjBJc1ZVRkZlRVF2UWl4UlFVRlJSU3hSUVVGVmVVUXNVMEZEYkVKRkxFOUJRVTgzUkN4UlFVRlZRU3hSUVVGcFFpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzFpYjI5MGMzUnlZWEF2YkdsaUwwMWxiblZKZEdWdExtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSksX2luaGVyaXRzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKSxfYXNzZXJ0VGhpc0luaXRpYWxpemVkMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKSxfZXh0ZW5kczI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpLF9jbGFzc25hbWVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpLF9ldmVudHM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZG9tLWhlbHBlcnMvZXZlbnRzXCIpKSxfb3duZXJEb2N1bWVudD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkb20taGVscGVycy9vd25lckRvY3VtZW50XCIpKSxfaW5ET009X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZG9tLWhlbHBlcnMvdXRpbC9pbkRPTVwiKSksX3Njcm9sbGJhclNpemU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZG9tLWhlbHBlcnMvdXRpbC9zY3JvbGxiYXJTaXplXCIpKSxfcmVhY3Q9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpLF9wcm9wVHlwZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSksX3JlYWN0RG9tPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LWRvbVwiKSksX01vZGFsPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LW92ZXJsYXlzL2xpYi9Nb2RhbFwiKSksX2lzT3ZlcmZsb3dpbmc9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3Qtb3ZlcmxheXMvbGliL3V0aWxzL2lzT3ZlcmZsb3dpbmdcIikpLF9lbGVtZW50VHlwZT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzLWV4dHJhL2xpYi9lbGVtZW50VHlwZVwiKSksX0ZhZGU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9GYWRlXCIpKSxfTW9kYWxCb2R5PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTW9kYWxCb2R5XCIpKSxfTW9kYWxEaWFsb2c9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Nb2RhbERpYWxvZ1wiKSksX01vZGFsRm9vdGVyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTW9kYWxGb290ZXJcIikpLF9Nb2RhbEhlYWRlcj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL01vZGFsSGVhZGVyXCIpKSxfTW9kYWxUaXRsZT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL01vZGFsVGl0bGVcIikpLF9ib290c3RyYXBVdGlscz1yZXF1aXJlKFwiLi91dGlscy9ib290c3RyYXBVdGlsc1wiKSxfY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uXCIpKSxfc3BsaXRDb21wb25lbnRQcm9wczI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9zcGxpdENvbXBvbmVudFByb3BzXCIpKSxfU3R5bGVDb25maWc9cmVxdWlyZShcIi4vdXRpbHMvU3R5bGVDb25maWdcIikscHJvcFR5cGVzPSgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSxfTW9kYWwuZGVmYXVsdC5wcm9wVHlwZXMsX01vZGFsRGlhbG9nLmRlZmF1bHQucHJvcFR5cGVzLHtiYWNrZHJvcDpfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoW1wic3RhdGljXCIsITAsITFdKSxiYWNrZHJvcENsYXNzTmFtZTpfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLGtleWJvYXJkOl9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLGFuaW1hdGlvbjpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxkaWFsb2dDb21wb25lbnRDbGFzczpfZWxlbWVudFR5cGUuZGVmYXVsdCxhdXRvRm9jdXM6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsZW5mb3JjZUZvY3VzOl9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLHJlc3RvcmVGb2N1czpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxzaG93Ol9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLG9uSGlkZTpfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxvbkVudGVyOl9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLG9uRW50ZXJpbmc6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsb25FbnRlcmVkOl9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLG9uRXhpdDpfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxvbkV4aXRpbmc6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsb25FeGl0ZWQ6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsY29udGFpbmVyOl9Nb2RhbC5kZWZhdWx0LnByb3BUeXBlcy5jb250YWluZXJ9KSxkZWZhdWx0UHJvcHM9KDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LF9Nb2RhbC5kZWZhdWx0LmRlZmF1bHRQcm9wcyx7YW5pbWF0aW9uOiEwLGRpYWxvZ0NvbXBvbmVudENsYXNzOl9Nb2RhbERpYWxvZy5kZWZhdWx0fSksY2hpbGRDb250ZXh0VHlwZXM9eyRic19tb2RhbDpfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe29uSGlkZTpfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY30pfTtmdW5jdGlvbiBEaWFsb2dUcmFuc2l0aW9uKGUpe3JldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9GYWRlLmRlZmF1bHQsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LGUse3RpbWVvdXQ6TW9kYWwuVFJBTlNJVElPTl9EVVJBVElPTn0pKX1mdW5jdGlvbiBCYWNrZHJvcFRyYW5zaXRpb24oZSl7cmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0ZhZGUuZGVmYXVsdCwoMCxfZXh0ZW5kczIuZGVmYXVsdCkoe30sZSx7dGltZW91dDpNb2RhbC5CQUNLRFJPUF9UUkFOU0lUSU9OX0RVUkFUSU9OfSkpfXZhciBNb2RhbD1mdW5jdGlvbihlKXtmdW5jdGlvbiBNb2RhbCh0LGEpe3ZhciBvO3JldHVybihvPWUuY2FsbCh0aGlzLHQsYSl8fHRoaXMpLmhhbmRsZUVudGVyaW5nPW8uaGFuZGxlRW50ZXJpbmcuYmluZCgoMCxfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KSgoMCxfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShvKSkpLG8uaGFuZGxlRXhpdGVkPW8uaGFuZGxlRXhpdGVkLmJpbmQoKDAsX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoKDAsX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkobykpKSxvLmhhbmRsZVdpbmRvd1Jlc2l6ZT1vLmhhbmRsZVdpbmRvd1Jlc2l6ZS5iaW5kKCgwLF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKG8pKSksby5oYW5kbGVEaWFsb2dDbGljaz1vLmhhbmRsZURpYWxvZ0NsaWNrLmJpbmQoKDAsX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoKDAsX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkobykpKSxvLnNldE1vZGFsUmVmPW8uc2V0TW9kYWxSZWYuYmluZCgoMCxfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KSgoMCxfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShvKSkpLG8uc3RhdGU9e3N0eWxlOnt9fSxvfSgwLF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShNb2RhbCxlKTt2YXIgdD1Nb2RhbC5wcm90b3R5cGU7cmV0dXJuIHQuZ2V0Q2hpbGRDb250ZXh0PWZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpe3JldHVybnskYnNfbW9kYWw6e29uSGlkZTp0aGlzLnByb3BzLm9uSGlkZX19fSx0LmNvbXBvbmVudFdpbGxVbm1vdW50PWZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCl7dGhpcy5oYW5kbGVFeGl0ZWQoKX0sdC5zZXRNb2RhbFJlZj1mdW5jdGlvbiBzZXRNb2RhbFJlZihlKXt0aGlzLl9tb2RhbD1lfSx0LmhhbmRsZURpYWxvZ0NsaWNrPWZ1bmN0aW9uIGhhbmRsZURpYWxvZ0NsaWNrKGUpe2UudGFyZ2V0PT09ZS5jdXJyZW50VGFyZ2V0JiZ0aGlzLnByb3BzLm9uSGlkZSgpfSx0LmhhbmRsZUVudGVyaW5nPWZ1bmN0aW9uIGhhbmRsZUVudGVyaW5nKCl7X2V2ZW50cy5kZWZhdWx0Lm9uKHdpbmRvdyxcInJlc2l6ZVwiLHRoaXMuaGFuZGxlV2luZG93UmVzaXplKSx0aGlzLnVwZGF0ZVN0eWxlKCl9LHQuaGFuZGxlRXhpdGVkPWZ1bmN0aW9uIGhhbmRsZUV4aXRlZCgpe19ldmVudHMuZGVmYXVsdC5vZmYod2luZG93LFwicmVzaXplXCIsdGhpcy5oYW5kbGVXaW5kb3dSZXNpemUpfSx0LmhhbmRsZVdpbmRvd1Jlc2l6ZT1mdW5jdGlvbiBoYW5kbGVXaW5kb3dSZXNpemUoKXt0aGlzLnVwZGF0ZVN0eWxlKCl9LHQudXBkYXRlU3R5bGU9ZnVuY3Rpb24gdXBkYXRlU3R5bGUoKXtpZihfaW5ET00uZGVmYXVsdCl7dmFyIGU9dGhpcy5fbW9kYWwuZ2V0RGlhbG9nRWxlbWVudCgpLHQ9ZS5zY3JvbGxIZWlnaHQsYT0oMCxfb3duZXJEb2N1bWVudC5kZWZhdWx0KShlKSxvPSgwLF9pc092ZXJmbG93aW5nLmRlZmF1bHQpKF9yZWFjdERvbS5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMucHJvcHMuY29udGFpbmVyfHxhLmJvZHkpKSxpPXQ+YS5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0O3RoaXMuc2V0U3RhdGUoe3N0eWxlOntwYWRkaW5nUmlnaHQ6byYmIWk/KDAsX3Njcm9sbGJhclNpemUuZGVmYXVsdCkoKTp2b2lkIDAscGFkZGluZ0xlZnQ6IW8mJmk/KDAsX3Njcm9sbGJhclNpemUuZGVmYXVsdCkoKTp2b2lkIDB9fSl9fSx0LnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXt2YXIgZT10aGlzLnByb3BzLHQ9ZS5iYWNrZHJvcCxhPWUuYmFja2Ryb3BDbGFzc05hbWUsbz1lLmFuaW1hdGlvbixpPWUuc2hvdyxsPWUuZGlhbG9nQ29tcG9uZW50Q2xhc3Mscj1lLmNsYXNzTmFtZSxuPWUuc3R5bGUsZD1lLmNoaWxkcmVuLHM9ZS5vbkVudGVyaW5nLHU9ZS5vbkV4aXRlZCxwPSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShlLFtcImJhY2tkcm9wXCIsXCJiYWNrZHJvcENsYXNzTmFtZVwiLFwiYW5pbWF0aW9uXCIsXCJzaG93XCIsXCJkaWFsb2dDb21wb25lbnRDbGFzc1wiLFwiY2xhc3NOYW1lXCIsXCJzdHlsZVwiLFwiY2hpbGRyZW5cIixcIm9uRW50ZXJpbmdcIixcIm9uRXhpdGVkXCJdKSxmPSgwLF9zcGxpdENvbXBvbmVudFByb3BzMi5kZWZhdWx0KShwLF9Nb2RhbC5kZWZhdWx0KSxfPWZbMF0sYz1mWzFdLGg9aSYmIW8mJlwiaW5cIjtyZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfTW9kYWwuZGVmYXVsdCwoMCxfZXh0ZW5kczIuZGVmYXVsdCkoe30sXyx7cmVmOnRoaXMuc2V0TW9kYWxSZWYsc2hvdzppLGNvbnRhaW5lckNsYXNzTmFtZTooMCxfYm9vdHN0cmFwVXRpbHMucHJlZml4KShwLFwib3BlblwiKSx0cmFuc2l0aW9uOm8/RGlhbG9nVHJhbnNpdGlvbjp2b2lkIDAsYmFja2Ryb3A6dCxiYWNrZHJvcFRyYW5zaXRpb246bz9CYWNrZHJvcFRyYW5zaXRpb246dm9pZCAwLGJhY2tkcm9wQ2xhc3NOYW1lOigwLF9jbGFzc25hbWVzLmRlZmF1bHQpKCgwLF9ib290c3RyYXBVdGlscy5wcmVmaXgpKHAsXCJiYWNrZHJvcFwiKSxhLGgpLG9uRW50ZXJpbmc6KDAsX2NyZWF0ZUNoYWluZWRGdW5jdGlvbi5kZWZhdWx0KShzLHRoaXMuaGFuZGxlRW50ZXJpbmcpLG9uRXhpdGVkOigwLF9jcmVhdGVDaGFpbmVkRnVuY3Rpb24uZGVmYXVsdCkodSx0aGlzLmhhbmRsZUV4aXRlZCl9KSxfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KGwsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LGMse3N0eWxlOigwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSx0aGlzLnN0YXRlLnN0eWxlLG4pLGNsYXNzTmFtZTooMCxfY2xhc3NuYW1lcy5kZWZhdWx0KShyLGgpLG9uQ2xpY2s6ITA9PT10P3RoaXMuaGFuZGxlRGlhbG9nQ2xpY2s6bnVsbH0pLGQpKX0sTW9kYWx9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7TW9kYWwucHJvcFR5cGVzPXByb3BUeXBlcyxNb2RhbC5kZWZhdWx0UHJvcHM9ZGVmYXVsdFByb3BzLE1vZGFsLmNoaWxkQ29udGV4dFR5cGVzPWNoaWxkQ29udGV4dFR5cGVzLE1vZGFsLkJvZHk9X01vZGFsQm9keS5kZWZhdWx0LE1vZGFsLkhlYWRlcj1fTW9kYWxIZWFkZXIuZGVmYXVsdCxNb2RhbC5UaXRsZT1fTW9kYWxUaXRsZS5kZWZhdWx0LE1vZGFsLkZvb3Rlcj1fTW9kYWxGb290ZXIuZGVmYXVsdCxNb2RhbC5EaWFsb2c9X01vZGFsRGlhbG9nLmRlZmF1bHQsTW9kYWwuVFJBTlNJVElPTl9EVVJBVElPTj0zMDAsTW9kYWwuQkFDS0RST1BfVFJBTlNJVElPTl9EVVJBVElPTj0xNTA7dmFyIF9kZWZhdWx0PSgwLF9ib290c3RyYXBVdGlscy5ic0NsYXNzKShcIm1vZGFsXCIsKDAsX2Jvb3RzdHJhcFV0aWxzLmJzU2l6ZXMpKFtfU3R5bGVDb25maWcuU2l6ZS5MQVJHRSxfU3R5bGVDb25maWcuU2l6ZS5TTUFMTF0sTW9kYWwpKTtleHBvcnRzLmRlZmF1bHQ9X2RlZmF1bHQsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWsxdlpHRnNMbXB6SWwwc0ltNWhiV1Z6SWpwYklsOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFpTENKeVpYRjFhWEpsSWl3aVpYaHdiM0owY3lJc0lsOWZaWE5OYjJSMWJHVWlMQ0prWldaaGRXeDBJaXdpWDI5aWFtVmpkRmRwZEdodmRYUlFjbTl3WlhKMGFXVnpURzl2YzJVeUlpd2lYMmx1YUdWeWFYUnpURzl2YzJVeUlpd2lYMkZ6YzJWeWRGUm9hWE5KYm1sMGFXRnNhWHBsWkRJaUxDSmZaWGgwWlc1a2N6SWlMQ0pmWTJ4aGMzTnVZVzFsY3lJc0lsOWxkbVZ1ZEhNaUxDSmZiM2R1WlhKRWIyTjFiV1Z1ZENJc0lsOXBia1JQVFNJc0lsOXpZM0p2Ykd4aVlYSlRhWHBsSWl3aVgzSmxZV04wSWl3aVgzQnliM0JVZVhCbGN5SXNJbDl5WldGamRFUnZiU0lzSWw5TmIyUmhiQ0lzSWw5cGMwOTJaWEptYkc5M2FXNW5JaXdpWDJWc1pXMWxiblJVZVhCbElpd2lYMFpoWkdVaUxDSmZUVzlrWVd4Q2IyUjVJaXdpWDAxdlpHRnNSR2xoYkc5bklpd2lYMDF2WkdGc1JtOXZkR1Z5SWl3aVgwMXZaR0ZzU0dWaFpHVnlJaXdpWDAxdlpHRnNWR2wwYkdVaUxDSmZZbTl2ZEhOMGNtRndWWFJwYkhNaUxDSmZZM0psWVhSbFEyaGhhVzVsWkVaMWJtTjBhVzl1SWl3aVgzTndiR2wwUTI5dGNHOXVaVzUwVUhKdmNITXlJaXdpWDFOMGVXeGxRMjl1Wm1sbklpd2ljSEp2Y0ZSNWNHVnpJaXdpWW1GamEyUnliM0FpTENKdmJtVlBaaUlzSW1KaFkydGtjbTl3UTJ4aGMzTk9ZVzFsSWl3aWMzUnlhVzVuSWl3aWEyVjVZbTloY21RaUxDSmliMjlzSWl3aVlXNXBiV0YwYVc5dUlpd2laR2xoYkc5blEyOXRjRzl1Wlc1MFEyeGhjM01pTENKaGRYUnZSbTlqZFhNaUxDSmxibVp2Y21ObFJtOWpkWE1pTENKeVpYTjBiM0psUm05amRYTWlMQ0p6YUc5M0lpd2liMjVJYVdSbElpd2lablZ1WXlJc0ltOXVSVzUwWlhJaUxDSnZia1Z1ZEdWeWFXNW5JaXdpYjI1RmJuUmxjbVZrSWl3aWIyNUZlR2wwSWl3aWIyNUZlR2wwYVc1bklpd2liMjVGZUdsMFpXUWlMQ0pqYjI1MFlXbHVaWElpTENKa1pXWmhkV3gwVUhKdmNITWlMQ0pqYUdsc1pFTnZiblJsZUhSVWVYQmxjeUlzSWlSaWMxOXRiMlJoYkNJc0luTm9ZWEJsSWl3aVJHbGhiRzluVkhKaGJuTnBkR2x2YmlJc0luQnliM0J6SWl3aVkzSmxZWFJsUld4bGJXVnVkQ0lzSW5ScGJXVnZkWFFpTENKTmIyUmhiQ0lzSWxSU1FVNVRTVlJKVDA1ZlJGVlNRVlJKVDA0aUxDSkNZV05yWkhKdmNGUnlZVzV6YVhScGIyNGlMQ0pDUVVOTFJGSlBVRjlVVWtGT1UwbFVTVTlPWDBSVlVrRlVTVTlPSWl3aVgxSmxZV04wSkVOdmJYQnZibVZ1ZENJc0ltTnZiblJsZUhRaUxDSmZkR2hwY3lJc0ltTmhiR3dpTENKMGFHbHpJaXdpYUdGdVpHeGxSVzUwWlhKcGJtY2lMQ0ppYVc1a0lpd2lhR0Z1Wkd4bFJYaHBkR1ZrSWl3aWFHRnVaR3hsVjJsdVpHOTNVbVZ6YVhwbElpd2lhR0Z1Wkd4bFJHbGhiRzluUTJ4cFkyc2lMQ0p6WlhSTmIyUmhiRkpsWmlJc0luTjBZWFJsSWl3aWMzUjViR1VpTENKZmNISnZkRzhpTENKd2NtOTBiM1I1Y0dVaUxDSm5aWFJEYUdsc1pFTnZiblJsZUhRaUxDSmpiMjF3YjI1bGJuUlhhV3hzVlc1dGIzVnVkQ0lzSW5KbFppSXNJbDl0YjJSaGJDSXNJbVVpTENKMFlYSm5aWFFpTENKamRYSnlaVzUwVkdGeVoyVjBJaXdpYjI0aUxDSjNhVzVrYjNjaUxDSjFjR1JoZEdWVGRIbHNaU0lzSW05bVppSXNJbVJwWVd4dlowNXZaR1VpTENKblpYUkVhV0ZzYjJkRmJHVnRaVzUwSWl3aVpHbGhiRzluU0dWcFoyaDBJaXdpYzJOeWIyeHNTR1ZwWjJoMElpd2laRzlqZFcxbGJuUWlMQ0ppYjJSNVNYTlBkbVZ5Wm14dmQybHVaeUlzSW1acGJtUkVUMDFPYjJSbElpd2lZbTlrZVNJc0ltMXZaR0ZzU1hOUGRtVnlabXh2ZDJsdVp5SXNJbVJ2WTNWdFpXNTBSV3hsYldWdWRDSXNJbU5zYVdWdWRFaGxhV2RvZENJc0luTmxkRk4wWVhSbElpd2ljR0ZrWkdsdVoxSnBaMmgwSWl3aWRXNWtaV1pwYm1Wa0lpd2ljR0ZrWkdsdVoweGxablFpTENKeVpXNWtaWElpTENKZmRHaHBjeVJ3Y205d2N5SXNJa1JwWVd4dlp5SXNJbU5zWVhOelRtRnRaU0lzSW1Ob2FXeGtjbVZ1SWl3aVgzTndiR2wwUTI5dGNHOXVaVzUwVUhKdmNITWlMQ0ppWVhObFRXOWtZV3hRY205d2N5SXNJbVJwWVd4dloxQnliM0J6SWl3aWFXNURiR0Z6YzA1aGJXVWlMQ0pqYjI1MFlXbHVaWEpEYkdGemMwNWhiV1VpTENKd2NtVm1hWGdpTENKMGNtRnVjMmwwYVc5dUlpd2lZbUZqYTJSeWIzQlVjbUZ1YzJsMGFXOXVJaXdpYjI1RGJHbGpheUlzSWtOdmJYQnZibVZ1ZENJc0lrSnZaSGtpTENKSVpXRmtaWElpTENKVWFYUnNaU0lzSWtadmIzUmxjaUlzSWw5a1pXWmhkV3gwSWl3aVluTkRiR0Z6Y3lJc0ltSnpVMmw2WlhNaUxDSlRhWHBsSWl3aVRFRlNSMFVpTENKVFRVRk1UQ0lzSW0xdlpIVnNaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRlFTeEpRVUZKUVN4MVFrRkJlVUpETEZGQlFWRXNkMFJCUlhKRFF5eFJRVUZSUXl4WlFVRmhMRVZCUTNKQ1JDeFJRVUZSUlN4aFFVRlZMRVZCUld4Q0xFbEJRVWxETEN0Q1FVRnBRMHdzZFVKQlFYVkNReXhSUVVGUkxHZEZRVVZvUlVzc1owSkJRV3RDVGl4MVFrRkJkVUpETEZGQlFWRXNhVVJCUldwRVRTeDNRa0ZCTUVKUUxIVkNRVUYxUWtNc1VVRkJVU3g1UkVGRmVrUlBMRlZCUVZsU0xIVkNRVUYxUWtNc1VVRkJVU3d5UTBGRk0wTlJMRmxCUVdOVUxIVkNRVUYxUWtNc1VVRkJVU3hsUVVVM1ExTXNVVUZCVlZZc2RVSkJRWFZDUXl4UlFVRlJMSFZDUVVWNlExVXNaVUZCYVVKWUxIVkNRVUYxUWtNc1VVRkJVU3c0UWtGRmFFUlhMRTlCUVZOYUxIVkNRVUYxUWtNc1VVRkJVU3d5UWtGRmVFTlpMR1ZCUVdsQ1lpeDFRa0ZCZFVKRExGRkJRVkVzYlVOQlJXaEVZU3hQUVVGVFpDeDFRa0ZCZFVKRExGRkJRVkVzVlVGRmVFTmpMRmRCUVdGbUxIVkNRVUYxUWtNc1VVRkJVU3hsUVVVMVEyVXNWVUZCV1doQ0xIVkNRVUYxUWtNc1VVRkJVU3hqUVVVelEyZENMRTlCUVZOcVFpeDFRa0ZCZFVKRExGRkJRVkVzTmtKQlJYaERhVUlzWlVGQmFVSnNRaXgxUWtGQmRVSkRMRkZCUVZFc01rTkJSV2hFYTBJc1lVRkJaVzVDTEhWQ1FVRjFRa01zVVVGQlVTeHhRMEZGT1VOdFFpeE5RVUZSY0VJc2RVSkJRWFZDUXl4UlFVRlJMRmRCUlhaRGIwSXNWMEZCWVhKQ0xIVkNRVUYxUWtNc1VVRkJVU3huUWtGRk5VTnhRaXhoUVVGbGRFSXNkVUpCUVhWQ1F5eFJRVUZSTEd0Q1FVVTVRM05DTEdGQlFXVjJRaXgxUWtGQmRVSkRMRkZCUVZFc2EwSkJSVGxEZFVJc1lVRkJaWGhDTEhWQ1FVRjFRa01zVVVGQlVTeHJRa0ZGT1VOM1FpeFpRVUZqZWtJc2RVSkJRWFZDUXl4UlFVRlJMR2xDUVVVM1EzbENMR2RDUVVGclFucENMRkZCUVZFc01FSkJSVEZDTUVJc2RVSkJRWGxDTTBJc2RVSkJRWFZDUXl4UlFVRlJMR3REUVVWNFJESkNMSE5DUVVGM1FqVkNMSFZDUVVGMVFrTXNVVUZCVVN4blEwRkZka1EwUWl4aFFVRmxOVUlzVVVGQlVTeDFRa0ZGZGtJMlFpeFhRVUZaTEVWQlFVbDBRaXhWUVVGVlNpeFRRVUZUTEVkQlFVbGhMRTlCUVU5aUxGRkJRVkV3UWl4VlFVRlhVaXhoUVVGaGJFSXNVVUZCVVRCQ0xGVkJRVmNzUTBGTGJrZERMRk5CUVZWb1FpeFhRVUZYV0N4UlFVRlJORUlzVFVGQlRTeERRVUZETEZWQlFWVXNSMEZCVFN4SlFVMXdSRU1zYTBKQlFXMUNiRUlzVjBGQlYxZ3NVVUZCVVRoQ0xFOUJTM1JEUXl4VFFVRlZjRUlzVjBGQlYxZ3NVVUZCVVdkRExFdEJTemRDUXl4VlFVRlhkRUlzVjBGQlYxZ3NVVUZCVVdkRExFdEJUemxDUlN4eFFrRkJjMEp1UWl4aFFVRmhaaXhSUVZGdVEyMURMRlZCUVZkNFFpeFhRVUZYV0N4UlFVRlJaME1zUzBGUE9VSkpMR0ZCUVdONlFpeFhRVUZYV0N4UlFVRlJaME1zUzBGTmFrTkxMR0ZCUVdNeFFpeFhRVUZYV0N4UlFVRlJaME1zUzBGTGFrTk5MRXRCUVUwelFpeFhRVUZYV0N4UlFVRlJaME1zUzBGTmVrSlBMRTlCUVZFMVFpeFhRVUZYV0N4UlFVRlJkME1zUzBGTE0wSkRMRkZCUVZNNVFpeFhRVUZYV0N4UlFVRlJkME1zUzBGTE5VSkZMRmRCUVZrdlFpeFhRVUZYV0N4UlFVRlJkME1zUzBGTEwwSkhMRlZCUVZkb1F5eFhRVUZYV0N4UlFVRlJkME1zUzBGTE9VSkpMRTlCUVZGcVF5eFhRVUZYV0N4UlFVRlJkME1zUzBGTE0wSkxMRlZCUVZkc1F5eFhRVUZYV0N4UlFVRlJkME1zUzBGTE9VSk5MRk5CUVZWdVF5eFhRVUZYV0N4UlFVRlJkME1zUzBGTE4wSlBMRlZCUVZkc1F5eFBRVUZQWWl4UlFVRlJNRUlzVlVGQlZYRkNMRmxCUld4RFF5eGpRVUZsTEVWQlFVazFReXhWUVVGVlNpeFRRVUZUTEVkQlFVbGhMRTlCUVU5aUxGRkJRVkZuUkN4aFFVRmpMRU5CUTNwRlppeFhRVUZYTEVWQlExaERMSEZDUVVGelFtaENMR0ZCUVdGc1FpeFZRVVZxUTJsRUxHdENRVUZ2UWl4RFFVTjBRa01zVlVGQlYzWkRMRmRCUVZkWUxGRkJRVkZ0UkN4TlFVRk5MRU5CUTJ4RFdpeFBRVUZSTlVJc1YwRkJWMWdzVVVGQlVYZERMRkZCU3k5Q0xGTkJRVk5aTEdsQ1FVRnBRa01zUjBGRGVFSXNUMEZCVHpORExFOUJRVTlXTEZGQlFWRnpSQ3hqUVVGamRFTXNUVUZCVFdoQ0xGTkJRVk1zUlVGQlNVa3NWVUZCVlVvc1UwRkJVeXhIUVVGSmNVUXNSVUZCVHl4RFFVTnVSa1VzVVVGQlUwTXNUVUZCVFVNc2RVSkJTVzVDTEZOQlFWTkRMRzFDUVVGdFFrd3NSMEZETVVJc1QwRkJUek5ETEU5QlFVOVdMRkZCUVZGelJDeGpRVUZqZEVNc1RVRkJUV2hDTEZOQlFWTXNSVUZCU1Vrc1ZVRkJWVW9zVTBGQlV5eEhRVUZKY1VRc1JVRkJUeXhEUVVOdVJrVXNVVUZCVTBNc1RVRkJUVWNzWjBOQlRXNUNMRWxCUVVsSUxFMUJSVW9zVTBGQlZVa3NSMEZIVWl4VFFVRlRTaXhOUVVGTlNDeEZRVUZQVVN4SFFVTndRaXhKUVVGSlF5eEZRVmRLTEU5QlZFRkJMRVZCUVZGR0xFVkJRV2xDUnl4TFFVRkxReXhMUVVGTldDeEZRVUZQVVN4SlFVRlpSeXhOUVVOcVJFTXNaVUZCYVVKSUxFVkJRVTFITEdWQlFXVkRMRTFCUVVzc1JVRkJTUzlFTEhkQ1FVRjNRa2dzVlVGQlV5eEZRVUZKUnl4M1FrRkJkMEpJTEZOQlFWTTRSQ3hMUVVNelNFRXNSVUZCVFVzc1lVRkJaVXdzUlVGQlRVc3NZVUZCWVVRc1RVRkJTeXhGUVVGSkwwUXNkMEpCUVhkQ1NDeFZRVUZUTEVWQlFVbEhMSGRDUVVGM1FrZ3NVMEZCVXpoRUxFdEJRM1pJUVN4RlFVRk5UU3h0UWtGQmNVSk9MRVZCUVUxTkxHMUNRVUZ0UWtZc1RVRkJTeXhGUVVGSkwwUXNkMEpCUVhkQ1NDeFZRVUZUTEVWQlFVbEhMSGRDUVVGM1FrZ3NVMEZCVXpoRUxFdEJRMjVKUVN4RlFVRk5UeXhyUWtGQmIwSlFMRVZCUVUxUExHdENRVUZyUWtnc1RVRkJTeXhGUVVGSkwwUXNkMEpCUVhkQ1NDeFZRVUZUTEVWQlFVbEhMSGRDUVVGM1FrZ3NVMEZCVXpoRUxFdEJRMnBKUVN4RlFVRk5VU3haUVVGalVpeEZRVUZOVVN4WlFVRlpTaXhOUVVGTExFVkJRVWt2UkN4M1FrRkJkMEpJTEZWQlFWTXNSVUZCU1Vjc2QwSkJRWGRDU0N4VFFVRlRPRVFzUzBGRGNraEJMRVZCUVUxVExFMUJRVkVzUTBGRFdrTXNUVUZCVHl4SlFVVkdWaXhIUVdSVUxFVkJRVWsxUkN4blFrRkJaMEpHTEZOQlFWTjNSQ3hOUVVGUFNTeEhRV2xDY0VNc1NVRkJTV0VzUlVGQlUycENMRTFCUVUxclFpeFZRV3RIYmtJc1QwRm9SMEZFTEVWQlFVOUZMR2RDUVVGclFpeFRRVUZUUVN4clFrRkRhRU1zVFVGQlR5eERRVU5NZWtJc1ZVRkJWeXhEUVVOVVdDeFBRVUZSZVVJc1MwRkJTMWdzVFVGQlRXUXNWVUZMZWtKclF5eEZRVUZQUnl4eFFrRkJkVUlzVTBGQlUwRXNkVUpCUlhKRFdpeExRVUZMUnl4blFrRkhVRTBzUlVGQlQwZ3NXVUZCWXl4VFFVRlRRU3haUVVGWlR5eEhRVU40UTJJc1MwRkJTMk1zVDBGQlUwUXNSMEZIYUVKS0xFVkJRVTlLTEd0Q1FVRnZRaXhUUVVGVFFTeHJRa0ZCYTBKVkxFZEJRMmhFUVN4RlFVRkZReXhUUVVGWFJDeEZRVUZGUlN4bFFVbHVRbXBDTEV0QlFVdFlMRTFCUVUxa0xGVkJSMkpyUXl4RlFVRlBVaXhsUVVGcFFpeFRRVUZUUVN4cFFrRkZMMEl6UkN4UlFVRlJUaXhSUVVGUmEwWXNSMEZCUjBNc1QwRkJVU3hUUVVGVmJrSXNTMEZCUzBrc2IwSkJSVEZEU2l4TFFVRkxiMElzWlVGSFVGZ3NSVUZCVDA0c1lVRkJaU3hUUVVGVFFTeGxRVVUzUWpkRUxGRkJRVkZPTEZGQlFWRnhSaXhKUVVGSlJpeFBRVUZSTEZOQlFWVnVRaXhMUVVGTFNTeHhRa0ZITjBOTExFVkJRVTlNTEcxQ1FVRnhRaXhUUVVGVFFTeHhRa0ZEYmtOS0xFdEJRVXR2UWl4bFFVZFFXQ3hGUVVGUFZ5eFpRVUZqTEZOQlFWTkJMR05CUXpWQ0xFZEJRVXMxUlN4UFFVRlBVaXhSUVVGYUxFTkJTVUVzU1VGQlNYTkdMRVZCUVdGMFFpeExRVUZMWXl4UFFVRlBVeXh0UWtGRmVrSkRMRVZCUVdWR0xFVkJRVmRITEdGQlF6RkNReXhIUVVGWExFVkJRVWx1Uml4bFFVRmxVQ3hUUVVGVGMwWXNSMEZEZGtOTExFZEJRVzlDTEVWQlFVazNSU3hsUVVGbFpDeFRRVUZUV1N4VlFVRlZXaXhSUVVGUk5FWXNXVUZCV1RWQ0xFdEJRVXRZTEUxQlFVMU9MRmRCUVdFeVF5eEZRVUZUUnl4UFFVTXZSME1zUlVGQmNVSk9MRVZCUVdWRkxFVkJRVk5MTEdkQ1FVRm5Ra01zWVVGRGFrVm9ReXhMUVVGTGFVTXNVMEZCVXl4RFFVTmFla0lzVFVGQlR5eERRVU5NTUVJc1lVRkJZMUFzU1VGQmMwSkhMRWRCUVhGQ0xFVkJRVWx5Uml4bFFVRmxWQ3huUWtGQllXMUhMRVZCUTNwR1F5eGhRVUZqVkN4SFFVRnhRa2NzUjBGQmNVSXNSVUZCU1hKR0xHVkJRV1ZVTEdkQ1FVRmhiVWNzVDBGTE9VWXhRaXhGUVVGUE5FSXNUMEZCVXl4VFFVRlRRU3hUUVVOMlFpeEpRVUZKUXl4RlFVRmpkRU1zUzBGQlMxZ3NUVUZEYmtJeFFpeEZRVUZYTWtVc1JVRkJXVE5GTEZOQlEzWkNSU3hGUVVGdlFubEZMRVZCUVZsNlJTeHJRa0ZEYUVOSkxFVkJRVmx4UlN4RlFVRlpja1VzVlVGRGVFSkxMRVZCUVU5blJTeEZRVUZaYUVVc1MwRkRia0pwUlN4RlFVRlRSQ3hGUVVGWmNFVXNjVUpCUTNKQ2MwVXNSVUZCV1VZc1JVRkJXVVVzVlVGRGVFSm9ReXhGUVVGUk9FSXNSVUZCV1RsQ0xFMUJRM0JDYVVNc1JVRkJWMGdzUlVGQldVY3NVMEZEZGtJdlJDeEZRVUZoTkVRc1JVRkJXVFZFTEZkQlEzcENTU3hGUVVGWGQwUXNSVUZCV1hoRUxGTkJRM1pDVHl4SFFVRlJMRVZCUVVsd1JDd3JRa0ZCSzBKRUxGTkJRVk56Unl4RlFVRmhMRU5CUVVNc1YwRkJXU3h2UWtGQmNVSXNXVUZCWVN4UFFVRlJMSFZDUVVGM1FpeFpRVUZoTEZGQlFWTXNWMEZCV1N4aFFVRmpMR0ZCUldoTlNTeEhRVUYxUWl4RlFVRkpiRVlzYzBKQlFYTkNlRUlzVTBGQlUzRkVMRVZCUVU5NFF5eFBRVUZQWWl4VFFVTjRSVEpITEVWQlFXbENSQ3hGUVVGeFFpeEhRVU4wUTBVc1JVRkJZMFlzUlVGQmNVSXNSMEZGYmtOSExFVkJRV04yUlN4SlFVRlRUQ3hIUVVGaExFdEJRM2hETEU5QlFVOTJRaXhQUVVGUFZpeFJRVUZSYzBRc1kwRkJZM3BETEU5QlFVOWlMRk5CUVZNc1JVRkJTVWtzVlVGQlZVb3NVMEZCVXl4SFFVRkpNa2NzUlVGQlowSXNRMEZETjBZNVFpeEpRVUZMWWl4TFFVRkxUU3haUVVOV2FFTXNTMEZCVFVFc1JVRkRUbmRGTEc5Q1FVRnZRaXhGUVVGSmVFWXNaMEpCUVdkQ2VVWXNVVUZCVVRGRUxFVkJRVThzVVVGRGRrUXlSQ3hYUVVGWkwwVXNSVUZCV1cxQ0xITkNRVUZ0UWl0RExFVkJRek5EZUVVc1UwRkJWVUVzUlVGRFZuTkdMRzFDUVVGdlFtaEdMRVZCUVZsNVFpeDNRa0ZCY1VKNVF5eEZRVU55UkhSRkxHMUNRVUZ0UWl4RlFVRkplRUlzV1VGQldVd3NWVUZCVXl4RlFVRkpjMElzWjBKQlFXZENlVVlzVVVGQlVURkVMRVZCUVU4c1dVRkJZWGhDTEVWQlFXMUNaMFlzUjBGREwwZHVSU3haUVVGWkxFVkJRVWx1UWl4MVFrRkJkVUoyUWl4VFFVRlRNRU1zUlVGQldYTkNMRXRCUVV0RExHZENRVU5xUlc1Q0xGVkJRVlVzUlVGQlNYWkNMSFZDUVVGMVFuWkNMRk5CUVZNNFF5eEZRVUZWYTBJc1MwRkJTMGNzWjBKQlF6TkVla1FzVDBGQlQxWXNVVUZCVVhORUxHTkJRV05wUkN4SFFVRlJMRVZCUVVsdVJ5eFZRVUZWU2l4VFFVRlRMRWRCUVVrMFJ5eEZRVUZoTEVOQlF5OUZjRU1zVDBGQlR5eEZRVUZKY0VVc1ZVRkJWVW9zVTBGQlV5eEhRVUZKWjBVc1MwRkJTMDhzVFVGQlRVTXNUVUZCVDBFc1IwRkRjRVJuUXl4WFFVRlhMRVZCUVVsdVJ5eFpRVUZaVEN4VFFVRlRkMGNzUlVGQlYwc3NSMEZETDBOTExGTkJRWE5DTEVsQlFXSjJSaXhGUVVGdlFuRkRMRXRCUVV0TExHdENRVUZ2UWl4UFFVTndSRzlETEV0QlIwTnFSQ3hOUVhCSVZDeERRWEZJUlRsRExFOUJRVTlXTEZGQlFWRnRTQ3hYUVVWcVFqTkVMRTFCUVUwNVFpeFZRVUZaUVN4VlFVTnNRamhDTEUxQlFVMVNMR0ZCUVdWQkxHRkJRM0pDVVN4TlFVRk5VQ3hyUWtGQmIwSkJMR3RDUVVNeFFrOHNUVUZCVFRSRUxFdEJRVTl1Unl4WFFVRlhha0lzVVVGRGVFSjNSQ3hOUVVGTk5rUXNUMEZCVTJwSExHRkJRV0Z3UWl4UlFVTTFRbmRFTEUxQlFVMDRSQ3hOUVVGUmFrY3NXVUZCV1hKQ0xGRkJRekZDZDBRc1RVRkJUU3RFTEU5QlFWTndSeXhoUVVGaGJrSXNVVUZETlVKM1JDeE5RVUZOSzBNc1QwRkJVM0pHTEdGQlFXRnNRaXhSUVVNMVFuZEVMRTFCUVUxRExHOUNRVUZ6UWl4SlFVTTFRa1FzVFVGQlRVY3NOa0pCUVN0Q0xFbEJSWEpETEVsQlFVazJSQ3hWUVVGWExFVkJRVWxzUnl4blFrRkJaMEp0Unl4VFFVRlRMRk5CUVZNc1JVRkJTVzVITEdkQ1FVRm5RbTlITEZOQlFWTXNRMEZCUTJwSExHRkJRV0ZyUnl4TFFVRkxReXhOUVVGUGJrY3NZVUZCWVd0SExFdEJRVXRGTEU5QlFWRnlSU3hSUVVWMFNURkVMRkZCUVZGRkxGRkJRVlYzU0N4VFFVTnNRazBzVDBGQlQyaEpMRkZCUVZWQkxGRkJRV2xDSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdOMExXSnZiM1J6ZEhKaGNDOXNhV0l2VFc5a1lXd3Vhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0PXJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO2V4cG9ydHMuX19lc01vZHVsZT0hMCxleHBvcnRzLmRlZmF1bHQ9dm9pZCAwO3ZhciBfZXh0ZW5kczI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSksX2luaGVyaXRzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKSxfY2xhc3NuYW1lcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKSxfcmVhY3Q9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpLF9lbGVtZW50VHlwZT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzLWV4dHJhL2xpYi9lbGVtZW50VHlwZVwiKSksX2Jvb3RzdHJhcFV0aWxzPXJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpLHByb3BUeXBlcz17Y29tcG9uZW50Q2xhc3M6X2VsZW1lbnRUeXBlLmRlZmF1bHR9LGRlZmF1bHRQcm9wcz17Y29tcG9uZW50Q2xhc3M6XCJkaXZcIn0sTW9kYWxCb2R5PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIE1vZGFsQm9keSgpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4oMCxfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoTW9kYWxCb2R5LGUpLE1vZGFsQm9keS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uIHJlbmRlcigpe3ZhciBlPXRoaXMucHJvcHMsdD1lLmNvbXBvbmVudENsYXNzLHI9ZS5jbGFzc05hbWUsbz0oMCxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoZSxbXCJjb21wb25lbnRDbGFzc1wiLFwiY2xhc3NOYW1lXCJdKSxzPSgwLF9ib290c3RyYXBVdGlscy5zcGxpdEJzUHJvcHMpKG8pLGE9c1swXSxsPXNbMV0saT0oMCxfYm9vdHN0cmFwVXRpbHMuZ2V0Q2xhc3NTZXQpKGEpO3JldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KHQsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LGwse2NsYXNzTmFtZTooMCxfY2xhc3NuYW1lcy5kZWZhdWx0KShyLGkpfSkpfSxNb2RhbEJvZHl9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7TW9kYWxCb2R5LnByb3BUeXBlcz1wcm9wVHlwZXMsTW9kYWxCb2R5LmRlZmF1bHRQcm9wcz1kZWZhdWx0UHJvcHM7dmFyIF9kZWZhdWx0PSgwLF9ib290c3RyYXBVdGlscy5ic0NsYXNzKShcIm1vZGFsLWJvZHlcIixNb2RhbEJvZHkpO2V4cG9ydHMuZGVmYXVsdD1fZGVmYXVsdCxtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJazF2WkdGc1FtOWtlUzVxY3lKZExDSnVZVzFsY3lJNld5SmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwSWl3aWNtVnhkV2x5WlNJc0ltVjRjRzl5ZEhNaUxDSmZYMlZ6VFc5a2RXeGxJaXdpWkdWbVlYVnNkQ0lzSWw5bGVIUmxibVJ6TWlJc0lsOXZZbXBsWTNSWGFYUm9iM1YwVUhKdmNHVnlkR2xsYzB4dmIzTmxNaUlzSWw5cGJtaGxjbWwwYzB4dmIzTmxNaUlzSWw5amJHRnpjMjVoYldWeklpd2lYM0psWVdOMElpd2lYMlZzWlcxbGJuUlVlWEJsSWl3aVgySnZiM1J6ZEhKaGNGVjBhV3h6SWl3aWNISnZjRlI1Y0dWeklpd2lZMjl0Y0c5dVpXNTBRMnhoYzNNaUxDSmtaV1poZFd4MFVISnZjSE1pTENKTmIyUmhiRUp2WkhraUxDSmZVbVZoWTNRa1EyOXRjRzl1Wlc1MElpd2lZWEJ3YkhraUxDSjBhR2x6SWl3aVlYSm5kVzFsYm5Seklpd2ljSEp2ZEc5MGVYQmxJaXdpY21WdVpHVnlJaXdpWDNSb2FYTWtjSEp2Y0hNaUxDSndjbTl3Y3lJc0lrTnZiWEJ2Ym1WdWRDSXNJbU5zWVhOelRtRnRaU0lzSWw5emNHeHBkRUp6VUhKdmNITWlMQ0p6Y0d4cGRFSnpVSEp2Y0hNaUxDSmljMUJ5YjNCeklpd2laV3hsYldWdWRGQnliM0J6SWl3aVkyeGhjM05sY3lJc0ltZGxkRU5zWVhOelUyVjBJaXdpWTNKbFlYUmxSV3hsYldWdWRDSXNJbDlrWldaaGRXeDBJaXdpWW5ORGJHRnpjeUlzSW0xdlpIVnNaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRlFTeEpRVUZKUVN4MVFrRkJlVUpETEZGQlFWRXNkMFJCUlhKRFF5eFJRVUZSUXl4WlFVRmhMRVZCUTNKQ1JDeFJRVUZSUlN4aFFVRlZMRVZCUld4Q0xFbEJRVWxETEZWQlFWbE1MSFZDUVVGMVFrTXNVVUZCVVN3eVEwRkZNME5MTEN0Q1FVRnBRMDRzZFVKQlFYVkNReXhSUVVGUkxHZEZRVVZvUlUwc1owSkJRV3RDVUN4MVFrRkJkVUpETEZGQlFWRXNhVVJCUldwRVR5eFpRVUZqVWl4MVFrRkJkVUpETEZGQlFWRXNaVUZGTjBOUkxFOUJRVk5VTEhWQ1FVRjFRa01zVVVGQlVTeFZRVVY0UTFNc1lVRkJaVllzZFVKQlFYVkNReXhSUVVGUkxIRkRRVVU1UTFVc1owSkJRV3RDVml4UlFVRlJMREJDUVVVeFFsY3NWVUZCV1N4RFFVTmtReXhsUVVGblFrZ3NZVUZCWVU0c1UwRkZNMEpWTEdGQlFXVXNRMEZEYWtKRUxHVkJRV2RDTEU5QlIyUkZMRlZCUlVvc1UwRkJWVU1zUjBGSFVpeFRRVUZUUkN4WlFVTlFMRTlCUVU5RExFVkJRV2xDUXl4TlFVRk5ReXhMUVVGTlF5eFpRVUZqUkN4TFFYRkNjRVFzVDBGNFFrRXNSVUZCU1Znc1owSkJRV2RDU0N4VFFVRlRWeXhWUVVGWFF5eEhRVTB6UWtRc1ZVRkJWVXNzVlVGRmFFSkRMRTlCUVZNc1UwRkJVMEVzVTBGRGRrSXNTVUZCU1VNc1JVRkJZMG9zUzBGQlMwc3NUVUZEYmtKRExFVkJRVmxHTEVWQlFWbFVMR1ZCUTNoQ1dTeEZRVUZaU0N4RlFVRlpSeXhWUVVONFFrWXNSMEZCVVN4RlFVRkpha0lzSzBKQlFTdENSaXhUUVVGVGEwSXNSVUZCWVN4RFFVRkRMR2xDUVVGclFpeGpRVVZ3Umtrc1IwRkJaMElzUlVGQlNXWXNaMEpCUVdkQ1owSXNZMEZCWTBvc1IwRkRiRVJMTEVWQlFWVkdMRVZCUVdNc1IwRkRlRUpITEVWQlFXVklMRVZCUVdNc1IwRkZOMEpKTEVkQlFWVXNSVUZCU1c1Q0xHZENRVUZuUW05Q0xHRkJRV0ZJTEVkQlF5OURMRTlCUVU5dVFpeFBRVUZQVEN4UlFVRlJORUlzWTBGQlkxSXNSMEZCVnl4RlFVRkpia0lzVlVGQlZVUXNVMEZCVXl4SFFVRkplVUlzUlVGQll5eERRVU4wUmtvc1YwRkJWeXhGUVVGSmFrSXNXVUZCV1Vvc1UwRkJVM0ZDTEVWQlFWZExMRTlCU1RWRFppeFZRWHBDVkN4RFFUQkNSVTRzVDBGQlQwd3NVVUZCVVc5Q0xGZEJSV3BDVkN4VlFVRlZTQ3hWUVVGWlFTeFZRVU4wUWtjc1ZVRkJWVVFzWVVGQlpVRXNZVUZGZWtJc1NVRkJTVzFDTEZWQlFWY3NSVUZCU1hSQ0xHZENRVUZuUW5WQ0xGTkJRVk1zWVVGQlkyNUNMRmRCUlRGRVlpeFJRVUZSUlN4UlFVRlZOa0lzVTBGRGJFSkZMRTlCUVU5cVF5eFJRVUZWUVN4UlFVRnBRaUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEMxaWIyOTBjM1J5WVhBdmJHbGlMMDF2WkdGc1FtOWtlUzVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0PXJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO2V4cG9ydHMuX19lc01vZHVsZT0hMCxleHBvcnRzLmRlZmF1bHQ9dm9pZCAwO3ZhciBfZXh0ZW5kczM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSksX2luaGVyaXRzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKSxfY2xhc3NuYW1lcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKSxfcmVhY3Q9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpLF9wcm9wVHlwZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSksX2Jvb3RzdHJhcFV0aWxzPXJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpLF9TdHlsZUNvbmZpZz1yZXF1aXJlKFwiLi91dGlscy9TdHlsZUNvbmZpZ1wiKSxwcm9wVHlwZXM9e2RpYWxvZ0NsYXNzTmFtZTpfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nfSxNb2RhbERpYWxvZz1mdW5jdGlvbihlKXtmdW5jdGlvbiBNb2RhbERpYWxvZygpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4oMCxfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoTW9kYWxEaWFsb2csZSksTW9kYWxEaWFsb2cucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXt2YXIgZSx0PXRoaXMucHJvcHMscj10LmRpYWxvZ0NsYXNzTmFtZSxzPXQuY2xhc3NOYW1lLG89dC5zdHlsZSxhPXQuY2hpbGRyZW4sbD0oMCxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkodCxbXCJkaWFsb2dDbGFzc05hbWVcIixcImNsYXNzTmFtZVwiLFwic3R5bGVcIixcImNoaWxkcmVuXCJdKSxpPSgwLF9ib290c3RyYXBVdGlscy5zcGxpdEJzUHJvcHMpKGwpLHU9aVswXSxwPWlbMV0sbj0oMCxfYm9vdHN0cmFwVXRpbHMucHJlZml4KSh1KSxkPSgwLF9leHRlbmRzMy5kZWZhdWx0KSh7ZGlzcGxheTpcImJsb2NrXCJ9LG8pLF89KDAsX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCgwLF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkodSksKChlPXt9KVtuXT0hMSxlWygwLF9ib290c3RyYXBVdGlscy5wcmVmaXgpKHUsXCJkaWFsb2dcIildPSEwLGUpKTtyZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCgwLF9leHRlbmRzMy5kZWZhdWx0KSh7fSxwLHt0YWJJbmRleDpcIi0xXCIscm9sZTpcImRpYWxvZ1wiLHN0eWxlOmQsY2xhc3NOYW1lOigwLF9jbGFzc25hbWVzLmRlZmF1bHQpKHMsbil9KSxfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2NsYXNzTmFtZTooMCxfY2xhc3NuYW1lcy5kZWZhdWx0KShyLF8pfSxfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2NsYXNzTmFtZTooMCxfYm9vdHN0cmFwVXRpbHMucHJlZml4KSh1LFwiY29udGVudFwiKSxyb2xlOlwiZG9jdW1lbnRcIn0sYSkpKX0sTW9kYWxEaWFsb2d9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7TW9kYWxEaWFsb2cucHJvcFR5cGVzPXByb3BUeXBlczt2YXIgX2RlZmF1bHQ9KDAsX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKFwibW9kYWxcIiwoMCxfYm9vdHN0cmFwVXRpbHMuYnNTaXplcykoW19TdHlsZUNvbmZpZy5TaXplLkxBUkdFLF9TdHlsZUNvbmZpZy5TaXplLlNNQUxMXSxNb2RhbERpYWxvZykpO2V4cG9ydHMuZGVmYXVsdD1fZGVmYXVsdCxtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJazF2WkdGc1JHbGhiRzluTG1weklsMHNJbTVoYldWeklqcGJJbDlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRaUxDSnlaWEYxYVhKbElpd2laWGh3YjNKMGN5SXNJbDlmWlhOTmIyUjFiR1VpTENKa1pXWmhkV3gwSWl3aVgyVjRkR1Z1WkhNeklpd2lYMjlpYW1WamRGZHBkR2h2ZFhSUWNtOXdaWEowYVdWelRHOXZjMlV5SWl3aVgybHVhR1Z5YVhSelRHOXZjMlV5SWl3aVgyTnNZWE56Ym1GdFpYTWlMQ0pmY21WaFkzUWlMQ0pmY0hKdmNGUjVjR1Z6SWl3aVgySnZiM1J6ZEhKaGNGVjBhV3h6SWl3aVgxTjBlV3hsUTI5dVptbG5JaXdpY0hKdmNGUjVjR1Z6SWl3aVpHbGhiRzluUTJ4aGMzTk9ZVzFsSWl3aWMzUnlhVzVuSWl3aVRXOWtZV3hFYVdGc2IyY2lMQ0pmVW1WaFkzUWtRMjl0Y0c5dVpXNTBJaXdpWVhCd2JIa2lMQ0owYUdseklpd2lZWEpuZFcxbGJuUnpJaXdpY0hKdmRHOTBlWEJsSWl3aWNtVnVaR1Z5SWl3aVgyVjRkR1Z1WkhNeUlpd2lYM1JvYVhNa2NISnZjSE1pTENKd2NtOXdjeUlzSW1Oc1lYTnpUbUZ0WlNJc0luTjBlV3hsSWl3aVkyaHBiR1J5Wlc0aUxDSmZjM0JzYVhSQ2MxQnliM0J6SWl3aWMzQnNhWFJDYzFCeWIzQnpJaXdpWW5OUWNtOXdjeUlzSW1Wc1pXMWxiblJRY205d2N5SXNJbUp6UTJ4aGMzTk9ZVzFsSWl3aWNISmxabWw0SWl3aWJXOWtZV3hUZEhsc1pTSXNJbVJwYzNCc1lYa2lMQ0prYVdGc2IyZERiR0Z6YzJWeklpd2laMlYwUTJ4aGMzTlRaWFFpTENKamNtVmhkR1ZGYkdWdFpXNTBJaXdpZEdGaVNXNWtaWGdpTENKeWIyeGxJaXdpUTI5dGNHOXVaVzUwSWl3aVgyUmxabUYxYkhRaUxDSmljME5zWVhOeklpd2lZbk5UYVhwbGN5SXNJbE5wZW1VaUxDSk1RVkpIUlNJc0lsTk5RVXhNSWl3aWJXOWtkV3hsSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4aFFVVkJMRWxCUVVsQkxIVkNRVUY1UWtNc1VVRkJVU3gzUkVGRmNrTkRMRkZCUVZGRExGbEJRV0VzUlVGRGNrSkVMRkZCUVZGRkxHRkJRVlVzUlVGRmJFSXNTVUZCU1VNc1ZVRkJXVXdzZFVKQlFYVkNReXhSUVVGUkxESkRRVVV6UTBzc0swSkJRV2xEVGl4MVFrRkJkVUpETEZGQlFWRXNaMFZCUldoRlRTeG5Ra0ZCYTBKUUxIVkNRVUYxUWtNc1VVRkJVU3hwUkVGRmFrUlBMRmxCUVdOU0xIVkNRVUYxUWtNc1VVRkJVU3hsUVVVM1ExRXNUMEZCVTFRc2RVSkJRWFZDUXl4UlFVRlJMRlZCUlhoRFV5eFhRVUZoVml4MVFrRkJkVUpETEZGQlFWRXNaVUZGTlVOVkxHZENRVUZyUWxZc1VVRkJVU3d3UWtGRk1VSlhMR0ZCUVdWWUxGRkJRVkVzZFVKQlJYWkNXU3hWUVVGWkxFTkJTV1JETEdkQ1FVRnBRa29zVjBGQlYwNHNVVUZCVVZjc1VVRkhiRU5ETEZsQlJVb3NVMEZCVlVNc1IwRkhVaXhUUVVGVFJDeGpRVU5RTEU5QlFVOURMRVZCUVdsQ1F5eE5RVUZOUXl4TFFVRk5ReXhaUVVGalJDeExRWEZEY0VRc1QwRjRRMEVzUlVGQlNWb3NaMEpCUVdkQ1NDeFRRVUZUV1N4WlFVRmhReXhIUVUwM1FrUXNXVUZCV1Vzc1ZVRkZiRUpETEU5QlFWTXNVMEZCVTBFc1UwRkRka0lzU1VGQlNVTXNSVUZGUVVNc1JVRkJZMHdzUzBGQlMwMHNUVUZEYmtKWUxFVkJRV3RDVlN4RlFVRlpWaXhuUWtGRE9VSlpMRVZCUVZsR0xFVkJRVmxGTEZWQlEzaENReXhGUVVGUlNDeEZRVUZaUnl4TlFVTndRa01zUlVGQlYwb3NSVUZCV1Vrc1UwRkRka0pJTEVkQlFWRXNSVUZCU1c1Q0xDdENRVUVyUWtZc1UwRkJVMjlDTEVWQlFXRXNRMEZCUXl4clFrRkJiVUlzV1VGQllTeFJRVUZUTEdGQlJUTkhTeXhIUVVGblFpeEZRVUZKYkVJc1owSkJRV2RDYlVJc1kwRkJZMHdzUjBGRGJFUk5MRVZCUVZWR0xFVkJRV01zUjBGRGVFSkhMRVZCUVdWSUxFVkJRV01zUjBGRk4wSkpMRWRCUVdNc1JVRkJTWFJDTEdkQ1FVRm5RblZDTEZGQlFWRklMRWRCUXpGRFNTeEhRVUZoTEVWQlFVazVRaXhWUVVGVlJDeFRRVUZUTEVOQlEzUkRaME1zVVVGQlV5eFRRVU5TVkN4SFFVTkRWU3hIUVVGblFpeEZRVUZKYUVNc1ZVRkJWVVFzVTBGQlV5eEpRVUZKTEVWQlFVbFBMR2RDUVVGblFqSkNMR0ZCUVdGUUxFdEJRVmRTTEVWQlFWa3NTVUZCWTFVc1NVRkJaU3hGUVVGUFZpeEhRVUZWTEVWQlFVbGFMR2RDUVVGblFuVkNMRkZCUVZGSUxFVkJRVk1zV1VGQllTeEZRVUZOVWl4SlFVTTNUU3hQUVVGUFpDeFBRVUZQVEN4UlFVRlJiVU1zWTBGQll5eFBRVUZQTEVWQlFVbHNReXhWUVVGVlJDeFRRVUZUTEVkQlFVazBRaXhGUVVGakxFTkJRMnhHVVN4VFFVRlZMRXRCUTFaRExFdEJRVTBzVTBGRFRtUXNUVUZCVDFFc1JVRkRVRlFzVjBGQlZ5eEZRVUZKYkVJc1dVRkJXVW9zVTBGQlUzTkNMRVZCUVZkUExFdEJRemREZUVJc1QwRkJUMHdzVVVGQlVXMURMR05CUVdNc1RVRkJUeXhEUVVOMFEySXNWMEZCVnl4RlFVRkpiRUlzV1VGQldVb3NVMEZCVTFVc1JVRkJhVUoxUWl4SlFVTndSRFZDTEU5QlFVOU1MRkZCUVZGdFF5eGpRVUZqTEUxQlFVOHNRMEZEY2tOaUxGZEJRVmNzUlVGQlNXWXNaMEpCUVdkQ2RVSXNVVUZCVVVnc1JVRkJVeXhYUVVOb1JGVXNTMEZCVFN4WlFVTk1ZaXhOUVVkRldpeFpRWHBEVkN4RFFUQkRSVkFzVDBGQlQwd3NVVUZCVVhORExGZEJSV3BDTVVJc1dVRkJXVWdzVlVGQldVRXNWVUZGZUVJc1NVRkJTVGhDTEZWQlFWY3NSVUZCU1doRExHZENRVUZuUW1sRExGTkJRVk1zVTBGQlV5eEZRVUZKYWtNc1owSkJRV2RDYTBNc1UwRkJVeXhEUVVGRGFrTXNZVUZCWVd0RExFdEJRVXRETEUxQlFVOXVReXhoUVVGaGEwTXNTMEZCUzBVc1QwRkJVV2hETEdOQlJYUkpaQ3hSUVVGUlJTeFJRVUZWZFVNc1UwRkRiRUpOTEU5QlFVOHZReXhSUVVGVlFTeFJRVUZwUWlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDMWliMjkwYzNSeVlYQXZiR2xpTDAxdlpHRnNSR2xoYkc5bkxtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9leHRlbmRzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSksX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9jbGFzc25hbWVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpLF9yZWFjdD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSksX2VsZW1lbnRUeXBlPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlXCIpKSxfYm9vdHN0cmFwVXRpbHM9cmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIikscHJvcFR5cGVzPXtjb21wb25lbnRDbGFzczpfZWxlbWVudFR5cGUuZGVmYXVsdH0sZGVmYXVsdFByb3BzPXtjb21wb25lbnRDbGFzczpcImRpdlwifSxNb2RhbEZvb3Rlcj1mdW5jdGlvbihlKXtmdW5jdGlvbiBNb2RhbEZvb3Rlcigpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4oMCxfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoTW9kYWxGb290ZXIsZSksTW9kYWxGb290ZXIucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXt2YXIgZT10aGlzLnByb3BzLHQ9ZS5jb21wb25lbnRDbGFzcyxyPWUuY2xhc3NOYW1lLG89KDAsX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKGUsW1wiY29tcG9uZW50Q2xhc3NcIixcImNsYXNzTmFtZVwiXSkscz0oMCxfYm9vdHN0cmFwVXRpbHMuc3BsaXRCc1Byb3BzKShvKSxhPXNbMF0sbD1zWzFdLGk9KDAsX2Jvb3RzdHJhcFV0aWxzLmdldENsYXNzU2V0KShhKTtyZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCh0LCgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSxsLHtjbGFzc05hbWU6KDAsX2NsYXNzbmFtZXMuZGVmYXVsdCkocixpKX0pKX0sTW9kYWxGb290ZXJ9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7TW9kYWxGb290ZXIucHJvcFR5cGVzPXByb3BUeXBlcyxNb2RhbEZvb3Rlci5kZWZhdWx0UHJvcHM9ZGVmYXVsdFByb3BzO3ZhciBfZGVmYXVsdD0oMCxfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoXCJtb2RhbC1mb290ZXJcIixNb2RhbEZvb3Rlcik7ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrMXZaR0ZzUm05dmRHVnlMbXB6SWwwc0ltNWhiV1Z6SWpwYklsOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFpTENKeVpYRjFhWEpsSWl3aVpYaHdiM0owY3lJc0lsOWZaWE5OYjJSMWJHVWlMQ0prWldaaGRXeDBJaXdpWDJWNGRHVnVaSE15SWl3aVgyOWlhbVZqZEZkcGRHaHZkWFJRY205d1pYSjBhV1Z6VEc5dmMyVXlJaXdpWDJsdWFHVnlhWFJ6VEc5dmMyVXlJaXdpWDJOc1lYTnpibUZ0WlhNaUxDSmZjbVZoWTNRaUxDSmZaV3hsYldWdWRGUjVjR1VpTENKZlltOXZkSE4wY21Gd1ZYUnBiSE1pTENKd2NtOXdWSGx3WlhNaUxDSmpiMjF3YjI1bGJuUkRiR0Z6Y3lJc0ltUmxabUYxYkhSUWNtOXdjeUlzSWsxdlpHRnNSbTl2ZEdWeUlpd2lYMUpsWVdOMEpFTnZiWEJ2Ym1WdWRDSXNJbUZ3Y0d4NUlpd2lkR2hwY3lJc0ltRnlaM1Z0Wlc1MGN5SXNJbkJ5YjNSdmRIbHdaU0lzSW5KbGJtUmxjaUlzSWw5MGFHbHpKSEJ5YjNCeklpd2ljSEp2Y0hNaUxDSkRiMjF3YjI1bGJuUWlMQ0pqYkdGemMwNWhiV1VpTENKZmMzQnNhWFJDYzFCeWIzQnpJaXdpYzNCc2FYUkNjMUJ5YjNCeklpd2lZbk5RY205d2N5SXNJbVZzWlcxbGJuUlFjbTl3Y3lJc0ltTnNZWE56WlhNaUxDSm5aWFJEYkdGemMxTmxkQ0lzSW1OeVpXRjBaVVZzWlcxbGJuUWlMQ0pmWkdWbVlYVnNkQ0lzSW1KelEyeGhjM01pTENKdGIyUjFiR1VpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlJVRXNTVUZCU1VFc2RVSkJRWGxDUXl4UlFVRlJMSGRFUVVWeVEwTXNVVUZCVVVNc1dVRkJZU3hGUVVOeVFrUXNVVUZCVVVVc1lVRkJWU3hGUVVWc1FpeEpRVUZKUXl4VlFVRlpUQ3gxUWtGQmRVSkRMRkZCUVZFc01rTkJSVE5EU3l3clFrRkJhVU5PTEhWQ1FVRjFRa01zVVVGQlVTeG5SVUZGYUVWTkxHZENRVUZyUWxBc2RVSkJRWFZDUXl4UlFVRlJMR2xFUVVWcVJFOHNXVUZCWTFJc2RVSkJRWFZDUXl4UlFVRlJMR1ZCUlRkRFVTeFBRVUZUVkN4MVFrRkJkVUpETEZGQlFWRXNWVUZGZUVOVExHRkJRV1ZXTEhWQ1FVRjFRa01zVVVGQlVTeHhRMEZGT1VOVkxHZENRVUZyUWxZc1VVRkJVU3d3UWtGRk1VSlhMRlZCUVZrc1EwRkRaRU1zWlVGQlowSklMR0ZCUVdGT0xGTkJSVE5DVlN4aFFVRmxMRU5CUTJwQ1JDeGxRVUZuUWl4UFFVZGtSU3haUVVWS0xGTkJRVlZETEVkQlIxSXNVMEZCVTBRc1kwRkRVQ3hQUVVGUFF5eEZRVUZwUWtNc1RVRkJUVU1zUzBGQlRVTXNXVUZCWTBRc1MwRnhRbkJFTEU5QmVFSkJMRVZCUVVsWUxHZENRVUZuUWtnc1UwRkJVMWNzV1VGQllVTXNSMEZOTjBKRUxGbEJRVmxMTEZWQlJXeENReXhQUVVGVExGTkJRVk5CTEZOQlEzWkNMRWxCUVVsRExFVkJRV05LTEV0QlFVdExMRTFCUTI1Q1F5eEZRVUZaUml4RlFVRlpWQ3hsUVVONFFsa3NSVUZCV1Vnc1JVRkJXVWNzVlVGRGVFSkdMRWRCUVZFc1JVRkJTV3BDTEN0Q1FVRXJRa1lzVTBGQlUydENMRVZCUVdFc1EwRkJReXhwUWtGQmEwSXNZMEZGY0VaSkxFZEJRV2RDTEVWQlFVbG1MR2RDUVVGblFtZENMR05CUVdOS0xFZEJRMnhFU3l4RlFVRlZSaXhGUVVGakxFZEJRM2hDUnl4RlFVRmxTQ3hGUVVGakxFZEJSVGRDU1N4SFFVRlZMRVZCUVVsdVFpeG5Ra0ZCWjBKdlFpeGhRVUZoU0N4SFFVTXZReXhQUVVGUGJrSXNUMEZCVDB3c1VVRkJVVFJDTEdOQlFXTlNMRWRCUVZjc1JVRkJTVzVDTEZWQlFWVkVMRk5CUVZNc1IwRkJTWGxDTEVWQlFXTXNRMEZEZEVaS0xGZEJRVmNzUlVGQlNXcENMRmxCUVZsS0xGTkJRVk54UWl4RlFVRlhTeXhQUVVrMVEyWXNXVUY2UWxRc1EwRXdRa1ZPTEU5QlFVOU1MRkZCUVZGdlFpeFhRVVZxUWxRc1dVRkJXVWdzVlVGQldVRXNWVUZEZUVKSExGbEJRVmxFTEdGQlFXVkJMR0ZCUlROQ0xFbEJRVWx0UWl4VlFVRlhMRVZCUVVsMFFpeG5Ra0ZCWjBKMVFpeFRRVUZUTEdWQlFXZENia0lzWVVGRk5VUmlMRkZCUVZGRkxGRkJRVlUyUWl4VFFVTnNRa1VzVDBGQlQycERMRkZCUVZWQkxGRkJRV2xDSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdOMExXSnZiM1J6ZEhKaGNDOXNhV0l2VFc5a1lXeEdiMjkwWlhJdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9leHRlbmRzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSksX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9jbGFzc25hbWVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpLF9wcm9wVHlwZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKSxfYm9vdHN0cmFwVXRpbHM9cmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIiksX2NyZWF0ZUNoYWluZWRGdW5jdGlvbj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZUNoYWluZWRGdW5jdGlvblwiKSksX0Nsb3NlQnV0dG9uPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQ2xvc2VCdXR0b25cIikpLHByb3BUeXBlcz17Y2xvc2VMYWJlbDpfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLGNsb3NlQnV0dG9uOl9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLG9uSGlkZTpfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY30sZGVmYXVsdFByb3BzPXtjbG9zZUxhYmVsOlwiQ2xvc2VcIixjbG9zZUJ1dHRvbjohMX0sY29udGV4dFR5cGVzPXskYnNfbW9kYWw6X3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtvbkhpZGU6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmN9KX0sTW9kYWxIZWFkZXI9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gTW9kYWxIZWFkZXIoKXtyZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9cmV0dXJuKDAsX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKE1vZGFsSGVhZGVyLGUpLE1vZGFsSGVhZGVyLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIGU9dGhpcy5wcm9wcyx0PWUuY2xvc2VMYWJlbCxyPWUuY2xvc2VCdXR0b24sbz1lLm9uSGlkZSxzPWUuY2xhc3NOYW1lLGE9ZS5jaGlsZHJlbixsPSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShlLFtcImNsb3NlTGFiZWxcIixcImNsb3NlQnV0dG9uXCIsXCJvbkhpZGVcIixcImNsYXNzTmFtZVwiLFwiY2hpbGRyZW5cIl0pLHU9dGhpcy5jb250ZXh0LiRic19tb2RhbCxpPSgwLF9ib290c3RyYXBVdGlscy5zcGxpdEJzUHJvcHMpKGwpLHA9aVswXSxuPWlbMV0sZD0oMCxfYm9vdHN0cmFwVXRpbHMuZ2V0Q2xhc3NTZXQpKHApO3JldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LG4se2NsYXNzTmFtZTooMCxfY2xhc3NuYW1lcy5kZWZhdWx0KShzLGQpfSksciYmX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfQ2xvc2VCdXR0b24uZGVmYXVsdCx7bGFiZWw6dCxvbkNsaWNrOigwLF9jcmVhdGVDaGFpbmVkRnVuY3Rpb24uZGVmYXVsdCkodSYmdS5vbkhpZGUsbyl9KSxhKX0sTW9kYWxIZWFkZXJ9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7TW9kYWxIZWFkZXIucHJvcFR5cGVzPXByb3BUeXBlcyxNb2RhbEhlYWRlci5kZWZhdWx0UHJvcHM9ZGVmYXVsdFByb3BzLE1vZGFsSGVhZGVyLmNvbnRleHRUeXBlcz1jb250ZXh0VHlwZXM7dmFyIF9kZWZhdWx0PSgwLF9ib290c3RyYXBVdGlscy5ic0NsYXNzKShcIm1vZGFsLWhlYWRlclwiLE1vZGFsSGVhZGVyKTtleHBvcnRzLmRlZmF1bHQ9X2RlZmF1bHQsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWsxdlpHRnNTR1ZoWkdWeUxtcHpJbDBzSW01aGJXVnpJanBiSWw5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUWlMQ0p5WlhGMWFYSmxJaXdpWlhod2IzSjBjeUlzSWw5ZlpYTk5iMlIxYkdVaUxDSmtaV1poZFd4MElpd2lYMlY0ZEdWdVpITXlJaXdpWDI5aWFtVmpkRmRwZEdodmRYUlFjbTl3WlhKMGFXVnpURzl2YzJVeUlpd2lYMmx1YUdWeWFYUnpURzl2YzJVeUlpd2lYMk5zWVhOemJtRnRaWE1pTENKZmNISnZjRlI1Y0dWeklpd2lYM0psWVdOMElpd2lYMkp2YjNSemRISmhjRlYwYVd4eklpd2lYMk55WldGMFpVTm9ZV2x1WldSR2RXNWpkR2x2YmlJc0lsOURiRzl6WlVKMWRIUnZiaUlzSW5CeWIzQlVlWEJsY3lJc0ltTnNiM05sVEdGaVpXd2lMQ0p6ZEhKcGJtY2lMQ0pqYkc5elpVSjFkSFJ2YmlJc0ltSnZiMndpTENKdmJraHBaR1VpTENKbWRXNWpJaXdpWkdWbVlYVnNkRkJ5YjNCeklpd2lZMjl1ZEdWNGRGUjVjR1Z6SWl3aUpHSnpYMjF2WkdGc0lpd2ljMmhoY0dVaUxDSk5iMlJoYkVobFlXUmxjaUlzSWw5U1pXRmpkQ1JEYjIxd2IyNWxiblFpTENKaGNIQnNlU0lzSW5Sb2FYTWlMQ0poY21kMWJXVnVkSE1pTENKd2NtOTBiM1I1Y0dVaUxDSnlaVzVrWlhJaUxDSmZkR2hwY3lSd2NtOXdjeUlzSW5CeWIzQnpJaXdpWTJ4aGMzTk9ZVzFsSWl3aVkyaHBiR1J5Wlc0aUxDSnRiMlJoYkNJc0ltTnZiblJsZUhRaUxDSmZjM0JzYVhSQ2MxQnliM0J6SWl3aWMzQnNhWFJDYzFCeWIzQnpJaXdpWW5OUWNtOXdjeUlzSW1Wc1pXMWxiblJRY205d2N5SXNJbU5zWVhOelpYTWlMQ0puWlhSRGJHRnpjMU5sZENJc0ltTnlaV0YwWlVWc1pXMWxiblFpTENKc1lXSmxiQ0lzSW05dVEyeHBZMnNpTENKRGIyMXdiMjVsYm5RaUxDSmZaR1ZtWVhWc2RDSXNJbUp6UTJ4aGMzTWlMQ0p0YjJSMWJHVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUlVFc1NVRkJTVUVzZFVKQlFYbENReXhSUVVGUkxIZEVRVVZ5UTBNc1VVRkJVVU1zV1VGQllTeEZRVU55UWtRc1VVRkJVVVVzWVVGQlZTeEZRVVZzUWl4SlFVRkpReXhWUVVGWlRDeDFRa0ZCZFVKRExGRkJRVkVzTWtOQlJUTkRTeXdyUWtGQmFVTk9MSFZDUVVGMVFrTXNVVUZCVVN4blJVRkZhRVZOTEdkQ1FVRnJRbEFzZFVKQlFYVkNReXhSUVVGUkxHbEVRVVZxUkU4c1dVRkJZMUlzZFVKQlFYVkNReXhSUVVGUkxHVkJSVGREVVN4WFFVRmhWQ3gxUWtGQmRVSkRMRkZCUVZFc1pVRkZOVU5UTEU5QlFWTldMSFZDUVVGMVFrTXNVVUZCVVN4VlFVVjRRMVVzWjBKQlFXdENWaXhSUVVGUkxEQkNRVVV4UWxjc2RVSkJRWGxDV2l4MVFrRkJkVUpETEZGQlFWRXNhME5CUlhoRVdTeGhRVUZsWWl4MVFrRkJkVUpETEZGQlFWRXNhMEpCUnpsRFlTeFZRVUZaTEVOQlRXUkRMRmRCUVZsT0xGZEJRVmRNTEZGQlFWRlpMRTlCU3k5Q1F5eFpRVUZoVWl4WFFVRlhUQ3hSUVVGUll5eExRVTlvUTBNc1QwRkJVVllzVjBGQlYwd3NVVUZCVVdkQ0xFMUJSWHBDUXl4aFFVRmxMRU5CUTJwQ1RpeFhRVUZaTEZGQlExcEZMR0ZCUVdFc1IwRkZXRXNzWVVGQlpTeERRVU5xUWtNc1ZVRkJWMlFzVjBGQlYwd3NVVUZCVVc5Q0xFMUJRVTBzUTBGRGJFTk1MRTlCUVZGV0xGZEJRVmRNTEZGQlFWRm5RaXhSUVVrelFrc3NXVUZGU2l4VFFVRlZReXhIUVVkU0xGTkJRVk5FTEdOQlExQXNUMEZCVDBNc1JVRkJhVUpETEUxQlFVMURMRXRCUVUxRExGbEJRV05FTEV0Qk5FSndSQ3hQUVM5Q1FTeEZRVUZKY2tJc1owSkJRV2RDU0N4VFFVRlRjVUlzV1VGQllVTXNSMEZOTjBKRUxGbEJRVmxMTEZWQlJXeENReXhQUVVGVExGTkJRVk5CTEZOQlEzWkNMRWxCUVVsRExFVkJRV05LTEV0QlFVdExMRTFCUTI1Q2JFSXNSVUZCWVdsQ0xFVkJRVmxxUWl4WFFVTjZRa1VzUlVGQlkyVXNSVUZCV1dZc1dVRkRNVUpGTEVWQlFWTmhMRVZCUVZsaUxFOUJRM0pDWlN4RlFVRlpSaXhGUVVGWlJTeFZRVU40UWtNc1JVRkJWMGdzUlVGQldVY3NVMEZEZGtKR0xFZEJRVkVzUlVGQlNUTkNMQ3RDUVVFclFrWXNVMEZCVXpSQ0xFVkJRV0VzUTBGQlF5eGhRVUZqTEdOQlFXVXNVMEZCVlN4WlFVRmhMR0ZCUTNSSVNTeEZRVUZSVWl4TFFVRkxVeXhSUVVGUlpDeFZRVVZ5UW1Vc1IwRkJaMElzUlVGQlNUTkNMR2RDUVVGblFqUkNMR05CUVdOT0xFZEJRMnhFVHl4RlFVRlZSaXhGUVVGakxFZEJRM2hDUnl4RlFVRmxTQ3hGUVVGakxFZEJSVGRDU1N4SFFVRlZMRVZCUVVrdlFpeG5Ra0ZCWjBKblF5eGhRVUZoU0N4SFFVTXZReXhQUVVGUE9VSXNUMEZCVDA0c1VVRkJVWGRETEdOQlFXTXNUMEZCVHl4RlFVRkpka01zVlVGQlZVUXNVMEZCVXl4SFFVRkpjVU1zUlVGQll5eERRVU5zUmxBc1YwRkJWeXhGUVVGSk1VSXNXVUZCV1Vvc1UwRkJVemhDTEVWQlFWZFJMRXRCUXpkRGVrSXNSMEZCWlZBc1QwRkJUMDRzVVVGQlVYZERMR05CUVdNdlFpeGhRVUZoVkN4UlFVRlRMRU5CUTNCRmVVTXNUVUZCVHpsQ0xFVkJRMUFyUWl4VFFVRlRMRVZCUVVsc1F5eDFRa0ZCZFVKU0xGTkJRVk5uUXl4SFFVRlRRU3hGUVVGTmFrSXNUMEZCVVVFc1MwRkRiRVZuUWl4SlFVZERWaXhaUVdoRFZDeERRV2xEUldZc1QwRkJUMDRzVVVGQlVUSkRMRmRCUldwQ2RFSXNXVUZCV1Znc1ZVRkJXVUVzVlVGRGVFSlhMRmxCUVZsS0xHRkJRV1ZCTEdGQlF6TkNTU3haUVVGWlNDeGhRVUZsUVN4aFFVVXpRaXhKUVVGSk1FSXNWVUZCVnl4RlFVRkpja01zWjBKQlFXZENjME1zVTBGQlV5eGxRVUZuUW5oQ0xHRkJSVFZFZGtJc1VVRkJVVVVzVVVGQlZUUkRMRk5CUTJ4Q1JTeFBRVUZQYUVRc1VVRkJWVUVzVVVGQmFVSWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F0WW05dmRITjBjbUZ3TDJ4cFlpOU5iMlJoYkVobFlXUmxjaTVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0PXJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO2V4cG9ydHMuX19lc01vZHVsZT0hMCxleHBvcnRzLmRlZmF1bHQ9dm9pZCAwO3ZhciBfZXh0ZW5kczI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSksX2luaGVyaXRzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKSxfY2xhc3NuYW1lcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKSxfcmVhY3Q9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpLF9lbGVtZW50VHlwZT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzLWV4dHJhL2xpYi9lbGVtZW50VHlwZVwiKSksX2Jvb3RzdHJhcFV0aWxzPXJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpLHByb3BUeXBlcz17Y29tcG9uZW50Q2xhc3M6X2VsZW1lbnRUeXBlLmRlZmF1bHR9LGRlZmF1bHRQcm9wcz17Y29tcG9uZW50Q2xhc3M6XCJoNFwifSxNb2RhbFRpdGxlPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIE1vZGFsVGl0bGUoKXtyZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9cmV0dXJuKDAsX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKE1vZGFsVGl0bGUsZSksTW9kYWxUaXRsZS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uIHJlbmRlcigpe3ZhciBlPXRoaXMucHJvcHMsdD1lLmNvbXBvbmVudENsYXNzLHI9ZS5jbGFzc05hbWUsbz0oMCxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoZSxbXCJjb21wb25lbnRDbGFzc1wiLFwiY2xhc3NOYW1lXCJdKSxzPSgwLF9ib290c3RyYXBVdGlscy5zcGxpdEJzUHJvcHMpKG8pLGw9c1swXSxhPXNbMV0saT0oMCxfYm9vdHN0cmFwVXRpbHMuZ2V0Q2xhc3NTZXQpKGwpO3JldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KHQsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LGEse2NsYXNzTmFtZTooMCxfY2xhc3NuYW1lcy5kZWZhdWx0KShyLGkpfSkpfSxNb2RhbFRpdGxlfShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO01vZGFsVGl0bGUucHJvcFR5cGVzPXByb3BUeXBlcyxNb2RhbFRpdGxlLmRlZmF1bHRQcm9wcz1kZWZhdWx0UHJvcHM7dmFyIF9kZWZhdWx0PSgwLF9ib290c3RyYXBVdGlscy5ic0NsYXNzKShcIm1vZGFsLXRpdGxlXCIsTW9kYWxUaXRsZSk7ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrMXZaR0ZzVkdsMGJHVXVhbk1pWFN3aWJtRnRaWE1pT2xzaVgybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ0lzSW5KbGNYVnBjbVVpTENKbGVIQnZjblJ6SWl3aVgxOWxjMDF2WkhWc1pTSXNJbVJsWm1GMWJIUWlMQ0pmWlhoMFpXNWtjeklpTENKZmIySnFaV04wVjJsMGFHOTFkRkJ5YjNCbGNuUnBaWE5NYjI5elpUSWlMQ0pmYVc1b1pYSnBkSE5NYjI5elpUSWlMQ0pmWTJ4aGMzTnVZVzFsY3lJc0lsOXlaV0ZqZENJc0lsOWxiR1Z0Wlc1MFZIbHdaU0lzSWw5aWIyOTBjM1J5WVhCVmRHbHNjeUlzSW5CeWIzQlVlWEJsY3lJc0ltTnZiWEJ2Ym1WdWRFTnNZWE56SWl3aVpHVm1ZWFZzZEZCeWIzQnpJaXdpVFc5a1lXeFVhWFJzWlNJc0lsOVNaV0ZqZENSRGIyMXdiMjVsYm5RaUxDSmhjSEJzZVNJc0luUm9hWE1pTENKaGNtZDFiV1Z1ZEhNaUxDSndjbTkwYjNSNWNHVWlMQ0p5Wlc1a1pYSWlMQ0pmZEdocGN5UndjbTl3Y3lJc0luQnliM0J6SWl3aVEyOXRjRzl1Wlc1MElpd2lZMnhoYzNOT1lXMWxJaXdpWDNOd2JHbDBRbk5RY205d2N5SXNJbk53YkdsMFFuTlFjbTl3Y3lJc0ltSnpVSEp2Y0hNaUxDSmxiR1Z0Wlc1MFVISnZjSE1pTENKamJHRnpjMlZ6SWl3aVoyVjBRMnhoYzNOVFpYUWlMQ0pqY21WaGRHVkZiR1Z0Wlc1MElpd2lYMlJsWm1GMWJIUWlMQ0ppYzBOc1lYTnpJaXdpYlc5a2RXeGxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVWQkxFbEJRVWxCTEhWQ1FVRjVRa01zVVVGQlVTeDNSRUZGY2tORExGRkJRVkZETEZsQlFXRXNSVUZEY2tKRUxGRkJRVkZGTEdGQlFWVXNSVUZGYkVJc1NVRkJTVU1zVlVGQldVd3NkVUpCUVhWQ1F5eFJRVUZSTERKRFFVVXpRMHNzSzBKQlFXbERUaXgxUWtGQmRVSkRMRkZCUVZFc1owVkJSV2hGVFN4blFrRkJhMEpRTEhWQ1FVRjFRa01zVVVGQlVTeHBSRUZGYWtSUExGbEJRV05TTEhWQ1FVRjFRa01zVVVGQlVTeGxRVVUzUTFFc1QwRkJVMVFzZFVKQlFYVkNReXhSUVVGUkxGVkJSWGhEVXl4aFFVRmxWaXgxUWtGQmRVSkRMRkZCUVZFc2NVTkJSVGxEVlN4blFrRkJhMEpXTEZGQlFWRXNNRUpCUlRGQ1Z5eFZRVUZaTEVOQlEyUkRMR1ZCUVdkQ1NDeGhRVUZoVGl4VFFVVXpRbFVzWVVGQlpTeERRVU5xUWtRc1pVRkJaMElzVFVGSFpFVXNWMEZGU2l4VFFVRlZReXhIUVVkU0xGTkJRVk5FTEdGQlExQXNUMEZCVDBNc1JVRkJhVUpETEUxQlFVMURMRXRCUVUxRExGbEJRV05FTEV0QmNVSndSQ3hQUVhoQ1FTeEZRVUZKV0N4blFrRkJaMEpJTEZOQlFWTlhMRmRCUVZsRExFZEJUVFZDUkN4WFFVRlhTeXhWUVVWcVFrTXNUMEZCVXl4VFFVRlRRU3hUUVVOMlFpeEpRVUZKUXl4RlFVRmpTaXhMUVVGTFN5eE5RVU51UWtNc1JVRkJXVVlzUlVGQldWUXNaVUZEZUVKWkxFVkJRVmxJTEVWQlFWbEhMRlZCUTNoQ1JpeEhRVUZSTEVWQlFVbHFRaXdyUWtGQkswSkdMRk5CUVZOclFpeEZRVUZoTEVOQlFVTXNhVUpCUVd0Q0xHTkJSWEJHU1N4SFFVRm5RaXhGUVVGSlppeG5Ra0ZCWjBKblFpeGpRVUZqU2l4SFFVTnNSRXNzUlVGQlZVWXNSVUZCWXl4SFFVTjRRa2NzUlVGQlpVZ3NSVUZCWXl4SFFVVTNRa2tzUjBGQlZTeEZRVUZKYmtJc1owSkJRV2RDYjBJc1lVRkJZVWdzUjBGREwwTXNUMEZCVDI1Q0xFOUJRVTlNTEZGQlFWRTBRaXhqUVVGalVpeEhRVUZYTEVWQlFVbHVRaXhWUVVGVlJDeFRRVUZUTEVkQlFVbDVRaXhGUVVGakxFTkJRM1JHU2l4WFFVRlhMRVZCUVVscVFpeFpRVUZaU2l4VFFVRlRjVUlzUlVGQlYwc3NUMEZKTlVObUxGZEJla0pVTEVOQk1FSkZUaXhQUVVGUFRDeFJRVUZSYjBJc1YwRkZha0pVTEZkQlFWZElMRlZCUVZsQkxGVkJRM1pDUnl4WFFVRlhSQ3hoUVVGbFFTeGhRVVV4UWl4SlFVRkpiVUlzVlVGQlZ5eEZRVUZKZEVJc1owSkJRV2RDZFVJc1UwRkJVeXhqUVVGbGJrSXNXVUZGTTBSaUxGRkJRVkZGTEZGQlFWVTJRaXhUUVVOc1FrVXNUMEZCVDJwRExGRkJRVlZCTEZGQlFXbENJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwzSmxZV04wTFdKdmIzUnpkSEpoY0M5c2FXSXZUVzlrWVd4VWFYUnNaUzVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIiksX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PXZvaWQgMDt2YXIgX2V4dGVuZHMzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKSxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpLF9pbmhlcml0c0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSksX2NsYXNzbmFtZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSksX2tleWNvZGU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwia2V5Y29kZVwiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSksX3Byb3BUeXBlcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKSxfcmVhY3REb209X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtZG9tXCIpKSxfYWxsPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXMtZXh0cmEvbGliL2FsbFwiKSksX3dhcm5pbmc9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSksX2Jvb3RzdHJhcFV0aWxzPXJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpLF9jcmVhdGVDaGFpbmVkRnVuY3Rpb249X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb25cIikpLF9WYWxpZENvbXBvbmVudENoaWxkcmVuPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvVmFsaWRDb21wb25lbnRDaGlsZHJlblwiKSkscHJvcFR5cGVzPXthY3RpdmVLZXk6X3Byb3BUeXBlcy5kZWZhdWx0LmFueSxhY3RpdmVIcmVmOl9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsc3RhY2tlZDpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxqdXN0aWZpZWQ6KDAsX2FsbC5kZWZhdWx0KShfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxmdW5jdGlvbihlKXt2YXIgdD1lLmp1c3RpZmllZCxyPWUubmF2YmFyO3JldHVybiB0JiZyP0Vycm9yKFwianVzdGlmaWVkIG5hdmJhciBgTmF2YHMgYXJlIG5vdCBzdXBwb3J0ZWRcIik6bnVsbH0pLG9uU2VsZWN0Ol9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLHJvbGU6X3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxuYXZiYXI6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wscHVsbFJpZ2h0Ol9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLHB1bGxMZWZ0Ol9wcm9wVHlwZXMuZGVmYXVsdC5ib29sfSxkZWZhdWx0UHJvcHM9e2p1c3RpZmllZDohMSxwdWxsUmlnaHQ6ITEscHVsbExlZnQ6ITEsc3RhY2tlZDohMX0sY29udGV4dFR5cGVzPXskYnNfbmF2YmFyOl9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7YnNDbGFzczpfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLG9uU2VsZWN0Ol9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jfSksJGJzX3RhYkNvbnRhaW5lcjpfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe2FjdGl2ZUtleTpfcHJvcFR5cGVzLmRlZmF1bHQuYW55LG9uU2VsZWN0Ol9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQsZ2V0VGFiSWQ6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZCxnZXRQYW5lSWQ6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZH0pfSxOYXY9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gTmF2KCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfSgwLF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShOYXYsZSk7dmFyIHQ9TmF2LnByb3RvdHlwZTtyZXR1cm4gdC5jb21wb25lbnREaWRVcGRhdGU9ZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCl7dmFyIGU9dGhpcztpZih0aGlzLl9uZWVkc1JlZm9jdXMpe3RoaXMuX25lZWRzUmVmb2N1cz0hMTt2YXIgdD10aGlzLnByb3BzLmNoaWxkcmVuLHI9dGhpcy5nZXRBY3RpdmVQcm9wcygpLGk9ci5hY3RpdmVLZXksYT1yLmFjdGl2ZUhyZWYsbz1fVmFsaWRDb21wb25lbnRDaGlsZHJlbi5kZWZhdWx0LmZpbmQodCxmdW5jdGlvbih0KXtyZXR1cm4gZS5pc0FjdGl2ZSh0LGksYSl9KSxuPV9WYWxpZENvbXBvbmVudENoaWxkcmVuLmRlZmF1bHQudG9BcnJheSh0KS5pbmRleE9mKG8pLHM9X3JlYWN0RG9tLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcykuY2hpbGRyZW4sbD1zJiZzW25dO2wmJmwuZmlyc3RDaGlsZCYmbC5maXJzdENoaWxkLmZvY3VzKCl9fSx0LmdldEFjdGl2ZVByb3BzPWZ1bmN0aW9uIGdldEFjdGl2ZVByb3BzKCl7dmFyIGU9dGhpcy5jb250ZXh0LiRic190YWJDb250YWluZXI7cmV0dXJuIGU/KFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJigwLF93YXJuaW5nLmRlZmF1bHQpKG51bGw9PXRoaXMucHJvcHMuYWN0aXZlS2V5JiYhdGhpcy5wcm9wcy5hY3RpdmVIcmVmLFwiU3BlY2lmeWluZyBhIGA8TmF2PmAgYGFjdGl2ZUtleWAgb3IgYGFjdGl2ZUhyZWZgIGluIHRoZSBjb250ZXh0IG9mIGEgYDxUYWJDb250YWluZXI+YCBpcyBub3Qgc3VwcG9ydGVkLiBJbnN0ZWFkIHVzZSBgPFRhYkNvbnRhaW5lciBhY3RpdmVLZXk9e1wiK3RoaXMucHJvcHMuYWN0aXZlS2V5K1wifSAvPmAuXCIpLGUpOnRoaXMucHJvcHN9LHQuZ2V0TmV4dEFjdGl2ZUNoaWxkPWZ1bmN0aW9uIGdldE5leHRBY3RpdmVDaGlsZChlKXt2YXIgdD10aGlzLHI9dGhpcy5wcm9wcy5jaGlsZHJlbixpPXIuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiBudWxsIT1lLnByb3BzLmV2ZW50S2V5JiYhZS5wcm9wcy5kaXNhYmxlZH0pLGE9dGhpcy5nZXRBY3RpdmVQcm9wcygpLG89YS5hY3RpdmVLZXksbj1hLmFjdGl2ZUhyZWYscz1fVmFsaWRDb21wb25lbnRDaGlsZHJlbi5kZWZhdWx0LmZpbmQocixmdW5jdGlvbihlKXtyZXR1cm4gdC5pc0FjdGl2ZShlLG8sbil9KSxsPWkuaW5kZXhPZihzKTtpZigtMT09PWwpcmV0dXJuIGlbMF07dmFyIHA9bCtlLHU9aS5sZW5ndGg7cmV0dXJuIHA+PXU/cD0wOnA8MCYmKHA9dS0xKSxpW3BdfSx0LmdldFRhYlByb3BzPWZ1bmN0aW9uIGdldFRhYlByb3BzKGUsdCxyLGksYSl7dmFyIG89dGhpcztpZighdCYmXCJ0YWJsaXN0XCIhPT1yKXJldHVybiBudWxsO3ZhciBuPWUucHJvcHMscz1uLmlkLGw9bltcImFyaWEtY29udHJvbHNcIl0scD1uLmV2ZW50S2V5LHU9bi5yb2xlLGQ9bi5vbktleURvd24sYz1uLnRhYkluZGV4O3JldHVybiB0JiYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKDAsX3dhcm5pbmcuZGVmYXVsdCkoIXMmJiFsLFwiSW4gdGhlIGNvbnRleHQgb2YgYSBgPFRhYkNvbnRhaW5lcj5gLCBgPE5hdkl0ZW0+YHMgYXJlIGdpdmVuIGdlbmVyYXRlZCBgaWRgIGFuZCBgYXJpYS1jb250cm9sc2AgYXR0cmlidXRlcyBmb3IgdGhlIHNha2Ugb2YgcHJvcGVyIGNvbXBvbmVudCBhY2Nlc3NpYmlsaXR5LiBBbnkgcHJvdmlkZWQgb25lcyB3aWxsIGJlIGlnbm9yZWQuIFRvIGNvbnRyb2wgdGhlc2UgYXR0cmlidXRlcyBkaXJlY3RseSwgcHJvdmlkZSBhIGBnZW5lcmF0ZUNoaWxkSWRgIHByb3AgdG8gdGhlIHBhcmVudCBgPFRhYkNvbnRhaW5lcj5gLlwiKSxzPXQuZ2V0VGFiSWQocCksbD10LmdldFBhbmVJZChwKSksXCJ0YWJsaXN0XCI9PT1yJiYodT11fHxcInRhYlwiLGQ9KDAsX2NyZWF0ZUNoYWluZWRGdW5jdGlvbi5kZWZhdWx0KShmdW5jdGlvbihlKXtyZXR1cm4gby5oYW5kbGVUYWJLZXlEb3duKGEsZSl9LGQpLGM9aT9jOi0xKSx7aWQ6cyxyb2xlOnUsb25LZXlEb3duOmQsXCJhcmlhLWNvbnRyb2xzXCI6bCx0YWJJbmRleDpjfX0sdC5oYW5kbGVUYWJLZXlEb3duPWZ1bmN0aW9uIGhhbmRsZVRhYktleURvd24oZSx0KXt2YXIgcjtzd2l0Y2godC5rZXlDb2RlKXtjYXNlIF9rZXljb2RlLmRlZmF1bHQuY29kZXMubGVmdDpjYXNlIF9rZXljb2RlLmRlZmF1bHQuY29kZXMudXA6cj10aGlzLmdldE5leHRBY3RpdmVDaGlsZCgtMSk7YnJlYWs7Y2FzZSBfa2V5Y29kZS5kZWZhdWx0LmNvZGVzLnJpZ2h0OmNhc2UgX2tleWNvZGUuZGVmYXVsdC5jb2Rlcy5kb3duOnI9dGhpcy5nZXROZXh0QWN0aXZlQ2hpbGQoMSk7YnJlYWs7ZGVmYXVsdDpyZXR1cm59dC5wcmV2ZW50RGVmYXVsdCgpLGUmJnImJm51bGwhPXIucHJvcHMuZXZlbnRLZXkmJmUoci5wcm9wcy5ldmVudEtleSksdGhpcy5fbmVlZHNSZWZvY3VzPSEwfSx0LmlzQWN0aXZlPWZ1bmN0aW9uIGlzQWN0aXZlKGUsdCxyKXt2YXIgaT1lLnByb3BzO3JldHVybiEhKGkuYWN0aXZlfHxudWxsIT10JiZpLmV2ZW50S2V5PT09dHx8ciYmaS5ocmVmPT09cil8fGkuYWN0aXZlfSx0LnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXt2YXIgZSx0PXRoaXMscj10aGlzLnByb3BzLGk9ci5zdGFja2VkLGE9ci5qdXN0aWZpZWQsbz1yLm9uU2VsZWN0LG49ci5yb2xlLHM9ci5uYXZiYXIsbD1yLnB1bGxSaWdodCxwPXIucHVsbExlZnQsdT1yLmNsYXNzTmFtZSxkPXIuY2hpbGRyZW4sYz0oMCxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkocixbXCJzdGFja2VkXCIsXCJqdXN0aWZpZWRcIixcIm9uU2VsZWN0XCIsXCJyb2xlXCIsXCJuYXZiYXJcIixcInB1bGxSaWdodFwiLFwicHVsbExlZnRcIixcImNsYXNzTmFtZVwiLFwiY2hpbGRyZW5cIl0pLGY9dGhpcy5jb250ZXh0LiRic190YWJDb250YWluZXIsXz1ufHwoZj9cInRhYmxpc3RcIjpudWxsKSx2PXRoaXMuZ2V0QWN0aXZlUHJvcHMoKSxoPXYuYWN0aXZlS2V5LGI9di5hY3RpdmVIcmVmO2RlbGV0ZSBjLmFjdGl2ZUtleSxkZWxldGUgYy5hY3RpdmVIcmVmO3ZhciB5LGcsVD0oMCxfYm9vdHN0cmFwVXRpbHMuc3BsaXRCc1Byb3BzKShjKSxDPVRbMF0scT1UWzFdLHg9KDAsX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCgwLF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkoQyksKChlPXt9KVsoMCxfYm9vdHN0cmFwVXRpbHMucHJlZml4KShDLFwic3RhY2tlZFwiKV09aSxlWygwLF9ib290c3RyYXBVdGlscy5wcmVmaXgpKEMsXCJqdXN0aWZpZWRcIildPWEsZSkpLG09bnVsbCE9cz9zOnRoaXMuY29udGV4dC4kYnNfbmF2YmFyO2lmKG0pe3ZhciBEPXRoaXMuY29udGV4dC4kYnNfbmF2YmFyfHx7YnNDbGFzczpcIm5hdmJhclwifTt4WygwLF9ib290c3RyYXBVdGlscy5wcmVmaXgpKEQsXCJuYXZcIildPSEwLGc9KDAsX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkoRCxcInJpZ2h0XCIpLHk9KDAsX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkoRCxcImxlZnRcIil9ZWxzZSBnPVwicHVsbC1yaWdodFwiLHk9XCJwdWxsLWxlZnRcIjtyZXR1cm4geFtnXT1sLHhbeV09cCxfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwidWxcIiwoMCxfZXh0ZW5kczMuZGVmYXVsdCkoe30scSx7cm9sZTpfLGNsYXNzTmFtZTooMCxfY2xhc3NuYW1lcy5kZWZhdWx0KSh1LHgpfSksX1ZhbGlkQ29tcG9uZW50Q2hpbGRyZW4uZGVmYXVsdC5tYXAoZCxmdW5jdGlvbihlKXt2YXIgcj10LmlzQWN0aXZlKGUsaCxiKSxpPSgwLF9jcmVhdGVDaGFpbmVkRnVuY3Rpb24uZGVmYXVsdCkoZS5wcm9wcy5vblNlbGVjdCxvLG0mJm0ub25TZWxlY3QsZiYmZi5vblNlbGVjdCk7cmV0dXJuKDAsX3JlYWN0LmNsb25lRWxlbWVudCkoZSwoMCxfZXh0ZW5kczMuZGVmYXVsdCkoe30sdC5nZXRUYWJQcm9wcyhlLGYsXyxyLGkpLHthY3RpdmU6cixhY3RpdmVLZXk6aCxhY3RpdmVIcmVmOmIsb25TZWxlY3Q6aX0pKX0pKX0sTmF2fShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO05hdi5wcm9wVHlwZXM9cHJvcFR5cGVzLE5hdi5kZWZhdWx0UHJvcHM9ZGVmYXVsdFByb3BzLE5hdi5jb250ZXh0VHlwZXM9Y29udGV4dFR5cGVzO3ZhciBfZGVmYXVsdD0oMCxfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoXCJuYXZcIiwoMCxfYm9vdHN0cmFwVXRpbHMuYnNTdHlsZXMpKFtcInRhYnNcIixcInBpbGxzXCJdLE5hdikpO2V4cG9ydHMuZGVmYXVsdD1fZGVmYXVsdCxtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJazVoZGk1cWN5SmRMQ0p1WVcxbGN5STZXeUpmYVc1MFpYSnZjRkpsY1hWcGNtVlhhV3hrWTJGeVpDSXNJbkpsY1hWcGNtVWlMQ0pmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MElpd2laWGh3YjNKMGN5SXNJbDlmWlhOTmIyUjFiR1VpTENKa1pXWmhkV3gwSWl3aVgyVjRkR1Z1WkhNeklpd2lYMjlpYW1WamRGZHBkR2h2ZFhSUWNtOXdaWEowYVdWelRHOXZjMlV5SWl3aVgybHVhR1Z5YVhSelRHOXZjMlV5SWl3aVgyTnNZWE56Ym1GdFpYTWlMQ0pmYTJWNVkyOWtaU0lzSWw5eVpXRmpkQ0lzSWw5d2NtOXdWSGx3WlhNaUxDSmZjbVZoWTNSRWIyMGlMQ0pmWVd4c0lpd2lYM2RoY201cGJtY2lMQ0pmWW05dmRITjBjbUZ3VlhScGJITWlMQ0pmWTNKbFlYUmxRMmhoYVc1bFpFWjFibU4wYVc5dUlpd2lYMVpoYkdsa1EyOXRjRzl1Wlc1MFEyaHBiR1J5Wlc0aUxDSndjbTl3Vkhsd1pYTWlMQ0poWTNScGRtVkxaWGtpTENKaGJua2lMQ0poWTNScGRtVkljbVZtSWl3aWMzUnlhVzVuSWl3aWMzUmhZMnRsWkNJc0ltSnZiMndpTENKcWRYTjBhV1pwWldRaUxDSmZjbVZtSWl3aWJtRjJZbUZ5SWl3aVJYSnliM0lpTENKdmJsTmxiR1ZqZENJc0ltWjFibU1pTENKeWIyeGxJaXdpY0hWc2JGSnBaMmgwSWl3aWNIVnNiRXhsWm5RaUxDSmtaV1poZFd4MFVISnZjSE1pTENKamIyNTBaWGgwVkhsd1pYTWlMQ0lrWW5OZmJtRjJZbUZ5SWl3aWMyaGhjR1VpTENKaWMwTnNZWE56SWl3aUpHSnpYM1JoWWtOdmJuUmhhVzVsY2lJc0ltbHpVbVZ4ZFdseVpXUWlMQ0puWlhSVVlXSkpaQ0lzSW1kbGRGQmhibVZKWkNJc0lrNWhkaUlzSWw5U1pXRmpkQ1JEYjIxd2IyNWxiblFpTENKaGNIQnNlU0lzSW5Sb2FYTWlMQ0poY21kMWJXVnVkSE1pTENKZmNISnZkRzhpTENKd2NtOTBiM1I1Y0dVaUxDSmpiMjF3YjI1bGJuUkVhV1JWY0dSaGRHVWlMQ0pmZEdocGN5SXNJbDl1WldWa2MxSmxabTlqZFhNaUxDSmphR2xzWkhKbGJpSXNJbkJ5YjNCeklpd2lYM1JvYVhNa1oyVjBRV04wYVhabFVISnZjSE1pTENKblpYUkJZM1JwZG1WUWNtOXdjeUlzSW1GamRHbDJaVU5vYVd4a0lpd2labWx1WkNJc0ltTm9hV3hrSWl3aWFYTkJZM1JwZG1VaUxDSmhZM1JwZG1WRGFHbHNaRWx1WkdWNElpd2lkRzlCY25KaGVTSXNJbWx1WkdWNFQyWWlMQ0pqYUdsc1pFNXZaR1Z6SWl3aVptbHVaRVJQVFU1dlpHVWlMQ0poWTNScGRtVk9iMlJsSWl3aVptbHljM1JEYUdsc1pDSXNJbVp2WTNWeklpd2lkR0ZpUTI5dWRHRnBibVZ5SWl3aVkyOXVkR1Y0ZENJc0luQnliMk5sYzNNaUxDSmxibllpTENKT1QwUkZYMFZPVmlJc0ltZGxkRTVsZUhSQlkzUnBkbVZEYUdsc1pDSXNJbTltWm5ObGRDSXNJbDkwYUdsek1pSXNJblpoYkdsa1EyaHBiR1J5Wlc0aUxDSm1hV3gwWlhJaUxDSmxkbVZ1ZEV0bGVTSXNJbVJwYzJGaWJHVmtJaXdpWDNSb2FYTWtaMlYwUVdOMGFYWmxVSEp2Y0hNeUlpd2libVY0ZEVsdVpHVjRJaXdpYm5WdFZtRnNhV1JEYUdsc1pISmxiaUlzSW14bGJtZDBhQ0lzSW1kbGRGUmhZbEJ5YjNCeklpd2libUYyVW05c1pTSXNJbUZqZEdsMlpTSXNJbDkwYUdsek15SXNJbDlqYUdsc1pDUndjbTl3Y3lJc0ltbGtJaXdpWTI5dWRISnZiSE1pTENKdmJrdGxlVVJ2ZDI0aUxDSjBZV0pKYm1SbGVDSXNJbVYyWlc1MElpd2lhR0Z1Wkd4bFZHRmlTMlY1Ukc5M2JpSXNJbUZ5YVdFdFkyOXVkSEp2YkhNaUxDSnVaWGgwUVdOMGFYWmxRMmhwYkdRaUxDSnJaWGxEYjJSbElpd2lZMjlrWlhNaUxDSnNaV1owSWl3aWRYQWlMQ0p5YVdkb2RDSXNJbVJ2ZDI0aUxDSndjbVYyWlc1MFJHVm1ZWFZzZENJc0lsOXlaV1l5SWl3aWFISmxaaUlzSW5KbGJtUmxjaUlzSWw5bGVIUmxibVJ6TWlJc0lsOTBhR2x6TkNJc0lsOTBhR2x6SkhCeWIzQnpJaXdpY0hKdmNITlNiMnhsSWl3aWNISnZjSE5PWVhaaVlYSWlMQ0pqYkdGemMwNWhiV1VpTENKZmRHaHBjeVJuWlhSQlkzUnBkbVZRY205d2N6TWlMQ0p3ZFd4c1RHVm1kRU5zWVhOelRtRnRaU0lzSW5CMWJHeFNhV2RvZEVOc1lYTnpUbUZ0WlNJc0lsOXpjR3hwZEVKelVISnZjSE1pTENKemNHeHBkRUp6VUhKdmNITWlMQ0ppYzFCeWIzQnpJaXdpWld4bGJXVnVkRkJ5YjNCeklpd2lZMnhoYzNObGN5SXNJbWRsZEVOc1lYTnpVMlYwSWl3aWNISmxabWw0SWl3aWJtRjJZbUZ5VUhKdmNITWlMQ0pqY21WaGRHVkZiR1Z0Wlc1MElpd2liV0Z3SWl3aVkyaHBiR1JQYmxObGJHVmpkQ0lzSW1Oc2IyNWxSV3hsYldWdWRDSXNJa052YlhCdmJtVnVkQ0lzSWw5a1pXWmhkV3gwSWl3aVluTlRkSGxzWlhNaUxDSnRiMlIxYkdVaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJSVUVzU1VGQlNVRXNkMEpCUVRCQ1F5eFJRVUZSTEhsRVFVVnNRME1zZFVKQlFYbENSQ3hSUVVGUkxIZEVRVVZ5UTBVc1VVRkJVVU1zV1VGQllTeEZRVU55UWtRc1VVRkJVVVVzWVVGQlZTeEZRVVZzUWl4SlFVRkpReXhWUVVGWlNpeDFRa0ZCZFVKRUxGRkJRVkVzTWtOQlJUTkRUU3dyUWtGQmFVTk1MSFZDUVVGMVFrUXNVVUZCVVN4blJVRkZhRVZQTEdkQ1FVRnJRazRzZFVKQlFYVkNSQ3hSUVVGUkxHbEVRVVZxUkZFc1dVRkJZMUFzZFVKQlFYVkNSQ3hSUVVGUkxHVkJSVGREVXl4VFFVRlhVaXgxUWtGQmRVSkVMRkZCUVZFc1dVRkZNVU5WTEU5QlFWTllMSGRDUVVGM1FrTXNVVUZCVVN4VlFVVjZRMWNzVjBGQllWWXNkVUpCUVhWQ1JDeFJRVUZSTEdWQlJUVkRXU3hWUVVGWldDeDFRa0ZCZFVKRUxGRkJRVkVzWTBGRk0wTmhMRXRCUVU5YUxIVkNRVUYxUWtRc1VVRkJVU3cyUWtGRmRFTmpMRk5CUVZkaUxIVkNRVUYxUWtRc1VVRkJVU3haUVVVeFEyVXNaMEpCUVd0Q1ppeFJRVUZSTERCQ1FVVXhRbWRDTEhWQ1FVRjVRbVlzZFVKQlFYVkNSQ3hSUVVGUkxHdERRVVY0UkdsQ0xIZENRVUV3UW1oQ0xIVkNRVUYxUWtRc1VVRkJVU3h0UTBGTmVrUnJRaXhWUVVGWkxFTkJTMlJETEZWQlFWZFNMRmRCUVZkUUxGRkJRVkZuUWl4SlFVczVRa01zVjBGQldWWXNWMEZCVjFBc1VVRkJVV3RDTEU5QlN5OUNReXhSUVVGVFdpeFhRVUZYVUN4UlFVRlJiMElzUzBGRE5VSkRMRmRCUVZjc1JVRkJTVm9zUzBGQlMxUXNVMEZCVTA4c1YwRkJWMUFzVVVGQlVXOUNMRXRCUVUwc1UwRkJWVVVzUjBGRE9VUXNTVUZCU1VRc1JVRkJXVU1zUlVGQlMwUXNWVUZEYWtKRkxFVkJRVk5FTEVWQlFVdERMRTlCUTJ4Q0xFOUJRVTlHTEVkQlFXRkZMRVZCUVZORExFMUJRVTBzTmtOQlFTdERMRTlCWVhCR1F5eFRRVUZWYkVJc1YwRkJWMUFzVVVGQlVUQkNMRXRCVlRkQ1F5eExRVUZOY0VJc1YwRkJWMUFzVVVGQlVXdENMRTlCVFhwQ1N5eFBRVUZSYUVJc1YwRkJWMUFzVVVGQlVXOUNMRXRCVFROQ1VTeFZRVUZYY2tJc1YwRkJWMUFzVVVGQlVXOUNMRXRCVFRsQ1V5eFRRVUZWZEVJc1YwRkJWMUFzVVVGQlVXOUNMRTFCUlROQ1ZTeGhRVUZsTEVOQlEycENWQ3hYUVVGWExFVkJRMWhQTEZkQlFWY3NSVUZEV0VNc1ZVRkJWU3hGUVVOV1ZpeFRRVUZUTEVkQlJWQlpMR0ZCUVdVc1EwRkRha0pETEZkQlFWbDZRaXhYUVVGWFVDeFJRVUZSYVVNc1RVRkJUU3hEUVVOdVEwTXNVVUZCVXpOQ0xGZEJRVmRRTEZGQlFWRnJRaXhQUVVNMVFrOHNVMEZCVld4Q0xGZEJRVmRRTEZGQlFWRXdRaXhQUVVVdlFsTXNhVUpCUVd0Q05VSXNWMEZCVjFBc1VVRkJVV2xETEUxQlFVMHNRMEZEZWtOc1FpeFZRVUZYVWl4WFFVRlhVQ3hSUVVGUlowSXNTVUZET1VKVExGTkJRVlZzUWl4WFFVRlhVQ3hSUVVGUk1FSXNTMEZCUzFVc1YwRkRiRU5ETEZOQlFWVTVRaXhYUVVGWFVDeFJRVUZSTUVJc1MwRkJTMVVzVjBGRGJFTkZMRlZCUVZjdlFpeFhRVUZYVUN4UlFVRlJNRUlzUzBGQlMxVXNZMEZKYmtOSExFbEJSVW9zVTBGQlZVTXNSMEZIVWl4VFFVRlRSQ3hOUVVOUUxFOUJRVTlETEVWQlFXbENReXhOUVVGTlF5eExRVUZOUXl4WlFVRmpSQ3hOUVVod1JDeEZRVUZKZGtNc1owSkJRV2RDU0N4VFFVRlRkVU1zU1VGQlMwTXNSMEZOYkVNc1NVRkJTVWtzUlVGQlUwd3NTVUZCU1Uwc1ZVRm5UMnBDTEU5Qk9VNUJSQ3hGUVVGUFJTeHRRa0ZCY1VJc1UwRkJVMEVzY1VKQlEyNURMRWxCUVVsRExFVkJRVkZNTEV0QlJWb3NSMEZCUzBFc1MwRkJTMDBzWTBGQlZpeERRVWxCVGl4TFFVRkxUU3hsUVVGblFpeEZRVU55UWl4SlFVRkpReXhGUVVGWFVDeExRVUZMVVN4TlFVRk5SQ3hUUVVWMFFrVXNSVUZCZFVKVUxFdEJRVXRWTEdsQ1FVTTFRbkpETEVWQlFWbHZReXhGUVVGeFFuQkRMRlZCUTJwRFJTeEZRVUZoYTBNc1JVRkJjVUpzUXl4WFFVVnNRMjlETEVWQlFXTjRReXgzUWtGQmQwSmlMRkZCUVZGelJDeExRVUZMVEN4RlFVRlZMRk5CUVZWTkxFZEJRM3BGTEU5QlFVOVNMRVZCUVUxVExGTkJRVk5FTEVWQlFVOTRReXhGUVVGWFJTeExRVXQwUTNkRExFVkJSbWRDTlVNc2QwSkJRWGRDWWl4UlFVRlJNRVFzVVVGQlVWUXNSMEZGZGtKVkxGRkJRVkZPTEVkQlJYcERUeXhGUVVGaGNFUXNWVUZCVlZJc1VVRkJVVFpFTEZsQlFWbHVRaXhOUVVGTlR5eFRRVVZxUkdFc1JVRkJZVVlzUjBGQlkwRXNSVUZCVjBnc1IwRkZja05MTEVkQlFXVkJMRVZCUVZkRExGbEJTUzlDUkN4RlFVRlhReXhYUVVGWFF5eFZRVWQ0UW5CQ0xFVkJRVTlSTEdWQlFXbENMRk5CUVZOQkxHbENRVU12UWl4SlFVRkpZU3hGUVVGbGRrSXNTMEZCUzNkQ0xGRkJRVkV2UWl4cFFrRkZhRU1zVDBGQlNUaENMRWRCUTNWQ0xHVkJRWHBDUlN4UlFVRlJReXhKUVVGSlF5eFhRVUUwUWl4RlFVRkpNMFFzVTBGQlUxWXNVMEZCYVVNc1RVRkJlRUl3UXl4TFFVRkxVU3hOUVVGTmJrTXNXVUZCYzBJeVFpeExRVUZMVVN4TlFVRk5ha01zVjBGQldTeHBTa0ZCT0VwNVFpeExRVUZMVVN4TlFVRk5ia01zVlVGQldTeFZRVU53VTJ0RUxFZEJSMFoyUWl4TFFVRkxVU3hQUVVka1RpeEZRVUZQTUVJc2JVSkJRWEZDTEZOQlFWTkJMRzFDUVVGdFFrTXNSMEZEZEVRc1NVRkJTVU1zUlVGQlV6bENMRXRCUlZSUExFVkJRVmRRTEV0QlFVdFJMRTFCUVUxRUxGTkJRM1JDZDBJc1JVRkJaMEo0UWl4RlFVRlRlVUlzVDBGQlR5eFRRVUZWYmtJc1IwRkROVU1zVDBGQkswSXNUVUZCZUVKQkxFVkJRVTFNTEUxQlFVMTVRaXhYUVVGeFFuQkNMRVZCUVUxTUxFMUJRVTB3UWl4WFFVZHNSRU1zUlVGQmQwSnVReXhMUVVGTFZTeHBRa0ZETjBKeVF5eEZRVUZaT0VRc1JVRkJjMEk1UkN4VlFVTnNRMFVzUlVGQllUUkVMRVZCUVhOQ05VUXNWMEZGYmtOdlF5eEZRVUZqZUVNc2QwSkJRWGRDWWl4UlFVRlJjMFFzUzBGQlMwd3NSVUZCVlN4VFFVRlZUU3hIUVVONlJTeFBRVUZQYVVJc1JVRkJUMmhDTEZOQlFWTkVMRVZCUVU5NFF5eEZRVUZYUlN4TFFVbDJRM2RETEVWQlFXMUNaMElzUlVGQlkyUXNVVUZCVVU0c1IwRkZOME1zU1VGQk1FSXNTVUZCZEVKSkxFVkJSVVlzVDBGQlQyZENMRVZCUVdNc1IwRkhka0lzU1VGQlNVc3NSVUZCV1hKQ0xFVkJRVzFDWXl4RlFVTXZRbEVzUlVGQmJVSk9MRVZCUVdOUExFOUJVWEpETEU5QlRrbEdMRWRCUVdGRExFVkJRMlpFTEVWQlFWa3NSVUZEU0VFc1JVRkJXU3hKUVVOeVFrRXNSVUZCV1VNc1JVRkJiVUlzUjBGSE1VSk9MRVZCUVdOTExFbEJSM1pDYkVNc1JVRkJUM0ZETEZsQlFXTXNVMEZCVTBFc1dVRkJXVEZDTEVWQlFVOVZMRVZCUVdOcFFpeEZRVUZUUXl4RlFVRlJNVVFzUjBGRE9VVXNTVUZCU1RKRUxFVkJRVk14UXl4TFFVVmlMRWxCUVV0MVFpeEhRVUUwUWl4WlFVRmFhVUlzUlVGRmJrSXNUMEZCVHl4TFFVZFVMRWxCUVVsSExFVkJRV1U1UWl4RlFVRk5UQ3hOUVVOeVFtOURMRVZCUVV0RUxFVkJRV0ZETEVkQlEyeENReXhGUVVGWFJpeEZRVUZoTEdsQ1FVTjRRbFlzUlVGQlYxVXNSVUZCWVZZc1UwRkRlRUpvUkN4RlFVRlBNRVFzUlVGQllURkVMRXRCUTNCQ05rUXNSVUZCV1Vnc1JVRkJZVWNzVlVGRGVrSkRMRVZCUVZkS0xFVkJRV0ZKTEZOQlowSTFRaXhQUVdSSmVFSXNTVUZEZFVJc1pVRkJla0pGTEZGQlFWRkRMRWxCUVVsRExGZEJRVFJDTEVWQlFVa3pSQ3hUUVVGVFZpeFZRVUZWYzBZc1NVRkJUME1zUlVGQlZTeDNVMEZEYUVaRUxFVkJRVXR5UWl4RlFVRmhOVUlzVTBGQlUzTkRMRWRCUXpOQ1dTeEZRVUZYZEVJc1JVRkJZVE5DTEZWQlFWVnhReXhKUVVkd1FpeFpRVUZhVHl4SlFVTkdka1FzUlVGQlQwRXNSMEZCVVN4TlFVTm1Oa1FzUjBGQldTeEZRVUZKTlVVc2RVSkJRWFZDV2l4VFFVRlRMRk5CUVZVd1JpeEhRVU40UkN4UFFVRlBUaXhGUVVGUFR5eHBRa0ZCYVVKc1JTeEZRVUZWYVVVc1NVRkRlRU5HTEVkQlEwaERMRVZCUVZkT0xFVkJRVk5OTEVkQlFWa3NSMEZITTBJc1EwRkRURWdzUjBGQlNVRXNSVUZEU2pORUxFdEJRVTFCTEVWQlEwNDJSQ3hWUVVGWFFTeEZRVU5ZU1N4blFrRkJhVUpNTEVWQlEycENSU3hUUVVGVlFTeEpRVWxrTjBNc1JVRkJUeXRETEdsQ1FVRnRRaXhUUVVGVFFTeHBRa0ZCYVVKc1JTeEZRVUZWYVVVc1IwRkROVVFzU1VGQlNVY3NSVUZGU2l4UFFVRlJTQ3hGUVVGTlNTeFRRVU5hTEV0QlFVdDZSaXhUUVVGVFRDeFJRVUZSSzBZc1RVRkJUVU1zUzBGRE5VSXNTMEZCU3pOR0xGTkJRVk5NTEZGQlFWRXJSaXhOUVVGTlJTeEhRVU14UWtvc1JVRkJhMEp1UkN4TFFVRkxORUlzYjBKQlFXOUNMRWRCUXpORExFMUJSVVlzUzBGQlMycEZMRk5CUVZOTUxGRkJRVkVyUml4TlFVRk5SeXhOUVVNMVFpeExRVUZMTjBZc1UwRkJVMHdzVVVGQlVTdEdMRTFCUVUxSkxFdEJRekZDVGl4RlFVRnJRbTVFTEV0QlFVczBRaXh0UWtGQmJVSXNSMEZETVVNc1RVRkZSaXhSUVVWRkxFOUJSMHB2UWl4RlFVRk5WU3hwUWtGRlJqTkZMRWRCUVZsdlJTeEhRVUZ4UkN4TlFVRnNRMEVzUlVGQlowSXpReXhOUVVGTmVVSXNWVUZEZGtSc1JDeEZRVUZUYjBVc1JVRkJaMEl6UXl4TlFVRk5lVUlzVlVGSGFrTnFReXhMUVVGTFRTeGxRVUZuUWl4SFFVZDJRa29zUlVGQlQxa3NVMEZCVnl4VFFVRlRRU3hUUVVGVE5rTXNSVUZCVDNSR0xFVkJRVmRGTEVkQlEzQkVMRWxCUVVscFF5eEZRVUZSYlVRc1JVRkJUVzVFTEUxQlJXeENMRk5CUVVsQkxFVkJRVTFwUXl4UlFVRjFRaXhOUVVGaWNFVXNSMEZCY1VKdFF5eEZRVUZOZVVJc1YwRkJZVFZFTEVkQlFXRkZMRWRCUVdOcFF5eEZRVUZOYjBRc1QwRkJVM0pHTEVsQlNTOUdhVU1zUlVGQlRXbERMRkZCUjJaMlF5eEZRVUZQTWtRc1QwRkJVeXhUUVVGVFFTeFRRVU4yUWl4SlFVRkpReXhGUVVOQlF5eEZRVUZUTDBRc1MwRkZWR2RGTEVWQlFXTm9SU3hMUVVGTFVTeE5RVU51UWk5Q0xFVkJRVlYxUml4RlFVRlpka1lzVVVGRGRFSkZMRVZCUVZseFJpeEZRVUZaY2tZc1ZVRkRlRUpKTEVWQlFWZHBSaXhGUVVGWmFrWXNVMEZEZGtKclJpeEZRVUZaUkN4RlFVRlpMMFVzUzBGRGVFSnBSaXhGUVVGalJpeEZRVUZaYmtZc1QwRkRNVUpMTEVWQlFWazRSU3hGUVVGWk9VVXNWVUZEZUVKRExFVkJRVmMyUlN4RlFVRlpOMFVzVTBGRGRrSm5SaXhGUVVGWlNDeEZRVUZaUnl4VlFVTjRRalZFTEVWQlFWZDVSQ3hGUVVGWmVrUXNVMEZEZGtKRExFZEJRVkVzUlVGQlNXaEVMQ3RDUVVFclFrWXNVMEZCVXpCSExFVkJRV0VzUTBGQlF5eFZRVUZYTEZsQlFXRXNWMEZCV1N4UFFVRlJMRk5CUVZVc1dVRkJZU3hYUVVGWkxGbEJRV0VzWVVGRE9VcDZReXhGUVVGbGRrSXNTMEZCUzNkQ0xGRkJRVkV2UWl4cFFrRkROVUpTTEVWQlFVOW5SaXhKUVVGak1VTXNSVUZCWlN4VlFVRlpMRTFCUldoRU5rTXNSVUZCZDBKd1JTeExRVUZMVlN4cFFrRkROMEp5UXl4RlFVRlpLMFlzUlVGQmMwSXZSaXhWUVVOc1EwVXNSVUZCWVRaR0xFVkJRWE5DTjBZc2EwSkJSV2hEYVVNc1JVRkJUVzVETEdsQ1FVVk9iVU1zUlVGQlRXcERMRmRCUldJc1NVRk5TVGhHTEVWQlEwRkRMRVZCVUVGRExFZEJRV2RDTEVWQlFVbDBSeXhuUWtGQlowSjFSeXhqUVVGamFFVXNSMEZEYkVScFJTeEZRVUZWUml4RlFVRmpMRWRCUTNoQ1J5eEZRVUZsU0N4RlFVRmpMRWRCUlRkQ1NTeEhRVUZWTEVWQlFVbHdTQ3hWUVVGVlJDeFRRVUZUTEVsQlFVa3NSVUZCU1Zjc1owSkJRV2RDTWtjc1lVRkJZVWdzUzBGQlYxZ3NSVUZCV1N4TFFVRmpMRVZCUVVrM1JpeG5Ra0ZCWjBJMFJ5eFJRVUZSU2l4RlFVRlRMRmxCUVdOb1J5eEZRVUZUY1VZc1IwRkJWU3hGUVVGSk4wWXNaMEpCUVdkQ05FY3NVVUZCVVVvc1JVRkJVeXhqUVVGblFqbEdMRVZCUVZkdFJpeEpRVU5xVUdwR0xFVkJRWGRDTEUxQlFXWnhSaXhGUVVGelFrRXNSVUZCWTJ4RkxFdEJRVXQzUWl4UlFVRlJiRU1zVjBGSk9VUXNSMEZCU1ZRc1JVRkJVU3hEUVVOV0xFbEJRVWxwUnl4RlFVRmpPVVVzUzBGQlMzZENMRkZCUVZGc1F5eFpRVUZqTEVOQlF6TkRSU3hSUVVGVExGVkJSVmh0Uml4SFFVRlJMRVZCUVVreFJ5eG5Ra0ZCWjBJMFJ5eFJRVUZSUXl4RlFVRmhMRk5CUVZVc1JVRkRNMFJTTEVkQlFYRkNMRVZCUVVseVJ5eG5Ra0ZCWjBJMFJ5eFJRVUZSUXl4RlFVRmhMRk5CUXpsRVZDeEhRVUZ2UWl4RlFVRkpjRWNzWjBKQlFXZENORWNzVVVGQlVVTXNSVUZCWVN4aFFVVTNSRklzUlVGQmNVSXNZVUZEY2tKRUxFVkJRVzlDTEZsQlMzUkNMRTlCUmtGTkxFVkJRVkZNTEVkQlFYTkNjRVlzUlVGRE9VSjVSaXhGUVVGUlRpeEhRVUZ4UW14R0xFVkJRM1JDZGtJc1QwRkJUMDRzVVVGQlVYbElMR05CUVdNc1RVRkJUU3hGUVVGSmVFZ3NWVUZCVlVRc1UwRkJVeXhIUVVGSmIwZ3NSVUZCWXl4RFFVTnFSbnBHTEV0QlFVMUJMRVZCUTA1clJpeFhRVUZYTEVWQlFVbDZSeXhaUVVGWlNpeFRRVUZUTmtjc1JVRkJWMUVzUzBGRE4wTjRSeXgzUWtGQmQwSmlMRkZCUVZFd1NDeEpRVUZKZWtVc1JVRkJWU3hUUVVGVlRTeEhRVU14UkN4SlFVRkpORUlzUlVGQlUzTkNMRVZCUVU5cVJDeFRRVUZUUkN4RlFVRlBlRU1zUlVGQlYwVXNSMEZGTTBNd1J5eEhRVUZuUWl4RlFVRkpMMGNzZFVKQlFYVkNXaXhUUVVGVGRVUXNSVUZCVFV3c1RVRkJUWHBDTEZOQlFWVkJMRVZCUVZWR0xFZEJRVlZCTEVWQlFVOUZMRk5CUVZWM1F5eEhRVUZuUWtFc1JVRkJZWGhETEZWQlEyaEtMRTlCUVU4c1JVRkJTVzVDTEU5QlFVOXpTQ3hqUVVGamNrVXNSMEZCVHl4RlFVRkpkRVFzVlVGQlZVUXNVMEZCVXl4SFFVRkplVWNzUlVGQlQzaENMRmxCUVZreFFpeEZRVUZQVlN4RlFVRmpkRU1zUlVGQlRYZEVMRVZCUVZGM1F5eEhRVUZuUWl4RFFVTjBTWGhETEU5QlFWRkJMRVZCUTFKd1JTeFZRVUZYUVN4RlFVTllSU3hYUVVGWlFTeEZRVU5hVVN4VFFVRlZhMGNzVTBGTFZIQkdMRWxCZGs5VUxFTkJkMDlGYWtNc1QwRkJUMDRzVVVGQlVUWklMRmRCUldwQ2RFWXNTVUZCU1hwQ0xGVkJRVmxCTEZWQlEyaENlVUlzU1VGQlNWUXNZVUZCWlVFc1lVRkRia0pUTEVsQlFVbFNMR0ZCUVdWQkxHRkJSVzVDTEVsQlFVa3JSaXhWUVVGWExFVkJRVWx1U0N4blFrRkJaMEoxUWl4VFFVRlRMRTlCUVU4c1JVRkJTWFpDTEdkQ1FVRm5RbTlJTEZWQlFWVXNRMEZCUXl4UFFVRlJMRk5CUVZWNFJpeE5RVVZ3UjNwRExGRkJRVkZGTEZGQlFWVTRTQ3hUUVVOc1FrVXNUMEZCVDJ4SkxGRkJRVlZCTEZGQlFXbENJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwzSmxZV04wTFdKdmIzUnpkSEpoY0M5c2FXSXZUbUYyTG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PXZvaWQgMDt2YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9leHRlbmRzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSksX2NsYXNzbmFtZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKSxfcHJvcFR5cGVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpLF9Ecm9wZG93bj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0Ryb3Bkb3duXCIpKSxfc3BsaXRDb21wb25lbnRQcm9wczI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9zcGxpdENvbXBvbmVudFByb3BzXCIpKSxfVmFsaWRDb21wb25lbnRDaGlsZHJlbj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL1ZhbGlkQ29tcG9uZW50Q2hpbGRyZW5cIikpLHByb3BUeXBlcz0oMCxfZXh0ZW5kczIuZGVmYXVsdCkoe30sX0Ryb3Bkb3duLmRlZmF1bHQucHJvcFR5cGVzLHt0aXRsZTpfcHJvcFR5cGVzLmRlZmF1bHQubm9kZS5pc1JlcXVpcmVkLG5vQ2FyZXQ6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsYWN0aXZlOl9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLGFjdGl2ZUtleTpfcHJvcFR5cGVzLmRlZmF1bHQuYW55LGFjdGl2ZUhyZWY6X3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxjaGlsZHJlbjpfcHJvcFR5cGVzLmRlZmF1bHQubm9kZX0pLE5hdkRyb3Bkb3duPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIE5hdkRyb3Bkb3duKCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfSgwLF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShOYXZEcm9wZG93bixlKTt2YXIgdD1OYXZEcm9wZG93bi5wcm90b3R5cGU7cmV0dXJuIHQuaXNBY3RpdmU9ZnVuY3Rpb24gaXNBY3RpdmUoZSx0LHIpe3ZhciBvPXRoaXMsaT1lLnByb3BzO3JldHVybiEhKGkuYWN0aXZlfHxudWxsIT10JiZpLmV2ZW50S2V5PT09dHx8ciYmaS5ocmVmPT09cil8fCghIV9WYWxpZENvbXBvbmVudENoaWxkcmVuLmRlZmF1bHQuc29tZShpLmNoaWxkcmVuLGZ1bmN0aW9uKGUpe3JldHVybiBvLmlzQWN0aXZlKGUsdCxyKX0pfHxpLmFjdGl2ZSl9LHQucmVuZGVyPWZ1bmN0aW9uIHJlbmRlcigpe3ZhciBlPXRoaXMsdD10aGlzLnByb3BzLHI9dC50aXRsZSxvPXQuYWN0aXZlS2V5LGk9dC5hY3RpdmVIcmVmLG49dC5jbGFzc05hbWUsYT10LnN0eWxlLGw9dC5jaGlsZHJlbixwPSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KSh0LFtcInRpdGxlXCIsXCJhY3RpdmVLZXlcIixcImFjdGl2ZUhyZWZcIixcImNsYXNzTmFtZVwiLFwic3R5bGVcIixcImNoaWxkcmVuXCJdKSxzPXRoaXMuaXNBY3RpdmUodGhpcyxvLGkpO2RlbGV0ZSBwLmFjdGl2ZSxkZWxldGUgcC5ldmVudEtleTt2YXIgdT0oMCxfc3BsaXRDb21wb25lbnRQcm9wczIuZGVmYXVsdCkocCxfRHJvcGRvd24uZGVmYXVsdC5Db250cm9sbGVkQ29tcG9uZW50KSxkPXVbMF0sYz11WzFdO3JldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Ecm9wZG93bi5kZWZhdWx0LCgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSxkLHtjb21wb25lbnRDbGFzczpcImxpXCIsY2xhc3NOYW1lOigwLF9jbGFzc25hbWVzLmRlZmF1bHQpKG4se2FjdGl2ZTpzfSksc3R5bGU6YX0pLF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0Ryb3Bkb3duLmRlZmF1bHQuVG9nZ2xlLCgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSxjLHt1c2VBbmNob3I6ITB9KSxyKSxfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Ecm9wZG93bi5kZWZhdWx0Lk1lbnUsbnVsbCxfVmFsaWRDb21wb25lbnRDaGlsZHJlbi5kZWZhdWx0Lm1hcChsLGZ1bmN0aW9uKHQpe3JldHVybiBfcmVhY3QuZGVmYXVsdC5jbG9uZUVsZW1lbnQodCx7YWN0aXZlOmUuaXNBY3RpdmUodCxvLGkpfSl9KSkpfSxOYXZEcm9wZG93bn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtOYXZEcm9wZG93bi5wcm9wVHlwZXM9cHJvcFR5cGVzO3ZhciBfZGVmYXVsdD1OYXZEcm9wZG93bjtleHBvcnRzLmRlZmF1bHQ9X2RlZmF1bHQsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWs1aGRrUnliM0JrYjNkdUxtcHpJbDBzSW01aGJXVnpJanBiSWw5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUWlMQ0p5WlhGMWFYSmxJaXdpWlhod2IzSjBjeUlzSWw5ZlpYTk5iMlIxYkdVaUxDSmtaV1poZFd4MElpd2lYMjlpYW1WamRGZHBkR2h2ZFhSUWNtOXdaWEowYVdWelRHOXZjMlV5SWl3aVgybHVhR1Z5YVhSelRHOXZjMlV5SWl3aVgyVjRkR1Z1WkhNeUlpd2lYMk5zWVhOemJtRnRaWE1pTENKZmNtVmhZM1FpTENKZmNISnZjRlI1Y0dWeklpd2lYMFJ5YjNCa2IzZHVJaXdpWDNOd2JHbDBRMjl0Y0c5dVpXNTBVSEp2Y0hNeUlpd2lYMVpoYkdsa1EyOXRjRzl1Wlc1MFEyaHBiR1J5Wlc0aUxDSndjbTl3Vkhsd1pYTWlMQ0owYVhSc1pTSXNJbTV2WkdVaUxDSnBjMUpsY1hWcGNtVmtJaXdpYm05RFlYSmxkQ0lzSW1KdmIyd2lMQ0poWTNScGRtVWlMQ0poWTNScGRtVkxaWGtpTENKaGJua2lMQ0poWTNScGRtVkljbVZtSWl3aWMzUnlhVzVuSWl3aVkyaHBiR1J5Wlc0aUxDSk9ZWFpFY205d1pHOTNiaUlzSWw5U1pXRmpkQ1JEYjIxd2IyNWxiblFpTENKaGNIQnNlU0lzSW5Sb2FYTWlMQ0poY21kMWJXVnVkSE1pTENKZmNISnZkRzhpTENKd2NtOTBiM1I1Y0dVaUxDSnBjMEZqZEdsMlpTSXNJbDl5WldZaUxDSmZkR2hwY3lJc0luQnliM0J6SWl3aVpYWmxiblJMWlhraUxDSm9jbVZtSWl3aWMyOXRaU0lzSW1Ob2FXeGtJaXdpY21WdVpHVnlJaXdpWDNSb2FYTXlJaXdpWDNSb2FYTWtjSEp2Y0hNaUxDSmpiR0Z6YzA1aGJXVWlMQ0p6ZEhsc1pTSXNJbDl6Y0d4cGRFTnZiWEJ2Ym1WdWRGQnliM0J6SWl3aVEyOXVkSEp2Ykd4bFpFTnZiWEJ2Ym1WdWRDSXNJbVJ5YjNCa2IzZHVVSEp2Y0hNaUxDSjBiMmRuYkdWUWNtOXdjeUlzSW1OeVpXRjBaVVZzWlcxbGJuUWlMQ0pqYjIxd2IyNWxiblJEYkdGemN5SXNJbFJ2WjJkc1pTSXNJblZ6WlVGdVkyaHZjaUlzSWsxbGJuVWlMQ0p0WVhBaUxDSmpiRzl1WlVWc1pXMWxiblFpTENKRGIyMXdiMjVsYm5RaUxDSmZaR1ZtWVhWc2RDSXNJbTF2WkhWc1pTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZGUVN4SlFVRkpRU3gxUWtGQmVVSkRMRkZCUVZFc2QwUkJSWEpEUXl4UlFVRlJReXhaUVVGaExFVkJRM0pDUkN4UlFVRlJSU3hoUVVGVkxFVkJSV3hDTEVsQlFVbERMQ3RDUVVGcFEwd3NkVUpCUVhWQ1F5eFJRVUZSTEdkRlFVVm9SVXNzWjBKQlFXdENUaXgxUWtGQmRVSkRMRkZCUVZFc2FVUkJSV3BFVFN4VlFVRlpVQ3gxUWtGQmRVSkRMRkZCUVZFc01rTkJSVE5EVHl4WlFVRmpVaXgxUWtGQmRVSkRMRkZCUVZFc1pVRkZOME5STEU5QlFWTlVMSFZDUVVGMVFrTXNVVUZCVVN4VlFVVjRRMU1zVjBGQllWWXNkVUpCUVhWQ1F5eFJRVUZSTEdWQlJUVkRWU3hWUVVGWldDeDFRa0ZCZFVKRExGRkJRVkVzWlVGRk0wTlhMSE5DUVVGM1Fsb3NkVUpCUVhWQ1F5eFJRVUZSTEdkRFFVVjJSRmtzZDBKQlFUQkNZaXgxUWtGQmRVSkRMRkZCUVZFc2JVTkJSWHBFWVN4WFFVRlpMRVZCUVVsUUxGVkJRVlZJTEZOQlFWTXNSMEZCU1U4c1ZVRkJWVkFzVVVGQlVWVXNWVUZCVnl4RFFVVjBSVU1zVFVGQlQwd3NWMEZCVjA0c1VVRkJVVmtzUzBGQlMwTXNWMEZETDBKRExGRkJRVk5TTEZkQlFWZE9MRkZCUVZGbExFdEJRelZDUXl4UFFVRlJWaXhYUVVGWFRpeFJRVUZSWlN4TFFVTXpRa1VzVlVGQlYxZ3NWMEZCVjA0c1VVRkJVV3RDTEVsQlF6bENReXhYUVVGWllpeFhRVUZYVGl4UlFVRlJiMElzVDBGTkwwSkRMRk5CUVZWbUxGZEJRVmRPTEZGQlFWRlpMRTlCUnpOQ1ZTeFpRVVZLTEZOQlFWVkRMRWRCUjFJc1UwRkJVMFFzWTBGRFVDeFBRVUZQUXl4RlFVRnBRa01zVFVGQlRVTXNTMEZCVFVNc1dVRkJZMFFzVFVGSWNFUXNSVUZCU1haQ0xHZENRVUZuUWtZc1UwRkJVM05DTEZsQlFXRkRMRWRCVFRGRExFbEJRVWxKTEVWQlFWTk1MRmxCUVZsTkxGVkJlVVI2UWl4UFFYWkVRVVFzUlVGQlQwVXNVMEZCVnl4VFFVRlRRU3hUUVVGVFF5eEZRVUZOWWl4RlFVRlhSU3hIUVVOdVJDeEpRVUZKV1N4RlFVRlJUaXhMUVVWU1R5eEZRVUZSUml4RlFVRkxSU3hOUVVWcVFpeFRRVUZKUVN4RlFVRk5hRUlzVVVGQmRVSXNUVUZCWWtNc1IwRkJjVUpsTEVWQlFVMURMRmRCUVdGb1FpeEhRVUZoUlN4SFFVRmpZU3hGUVVGTlJTeFBRVUZUWml4UFFVbHNSMVlzZDBKQlFYZENWQ3hSUVVGUmJVTXNTMEZCUzBnc1JVRkJUVmdzVTBGQlZTeFRRVUZWWlN4SFFVTnFSU3hQUVVGUFRDeEZRVUZOUml4VFFVRlRUeXhGUVVGUGJrSXNSVUZCVjBVc1RVRkxia05oTEVWQlFVMW9RaXhUUVVkbVZ5eEZRVUZQVlN4UFFVRlRMRk5CUVZOQkxGTkJRM1pDTEVsQlFVbERMRVZCUVZOaUxFdEJSVlJqTEVWQlFXTmtMRXRCUVV0UExFMUJRMjVDY2tJc1JVRkJVVFJDTEVWQlFWazFRaXhOUVVOd1FrMHNSVUZCV1hOQ0xFVkJRVmwwUWl4VlFVTjRRa1VzUlVGQllXOUNMRVZCUVZsd1FpeFhRVU42UW5GQ0xFVkJRVmxFTEVWQlFWbERMRlZCUTNoQ1F5eEZRVUZSUml4RlFVRlpSU3hOUVVOd1FuQkNMRVZCUVZkclFpeEZRVUZaYkVJc1UwRkRka0pYTEVkQlFWRXNSVUZCU1M5Q0xDdENRVUVyUWtRc1UwRkJVM1ZETEVWQlFXRXNRMEZCUXl4UlFVRlRMRmxCUVdFc1lVRkJZeXhaUVVGaExGRkJRVk1zWVVGRE5VaDJRaXhGUVVGVFV5eExRVUZMU1N4VFFVRlRTaXhMUVVGTlVpeEZRVUZYUlN4VlFVTnlRMkVzUlVGQlRXaENMR05CUlU1blFpeEZRVUZOUXl4VFFVVmlMRWxCUVVsVExFZEJRWFZDTEVWQlFVbHNReXh6UWtGQmMwSlNMRk5CUVZOblF5eEZRVUZQZWtJc1ZVRkJWVkFzVVVGQlVUSkRMSEZDUVVOdVJrTXNSVUZCWjBKR0xFVkJRWEZDTEVkQlEzSkRSeXhGUVVGalNDeEZRVUZ4UWl4SFFVbDJReXhQUVVGUGNrTXNUMEZCVDB3c1VVRkJVVGhETEdOQlFXTjJReXhWUVVGVlVDeFRRVUZUTEVWQlFVbEhMRlZCUVZWSUxGTkJRVk1zUjBGQlNUUkRMRVZCUVdVc1EwRkRMMFpITEdWQlFXZENMRXRCUTJoQ1VDeFhRVUZYTEVWQlFVbHdReXhaUVVGWlNpeFRRVUZUZDBNc1JVRkJWeXhEUVVNM1EzaENMRTlCUVZGQkxFbEJSVlo1UWl4TlFVRlBRU3hKUVVOTWNFTXNUMEZCVDB3c1VVRkJVVGhETEdOQlFXTjJReXhWUVVGVlVDeFJRVUZSWjBRc1VVRkJVU3hGUVVGSk4wTXNWVUZCVlVnc1UwRkJVeXhIUVVGSk5rTXNSVUZCWVN4RFFVTnFSMGtzVjBGQlZ5eEpRVU5VZEVNc1IwRkJVVTRzVDBGQlQwd3NVVUZCVVRoRExHTkJRV04yUXl4VlFVRlZVQ3hSUVVGUmEwUXNTMEZCVFN4TFFVRk5la01zZDBKQlFYZENWQ3hSUVVGUmJVUXNTVUZCU1RsQ0xFVkJRVlVzVTBGQlZXVXNSMEZETjBnc1QwRkJUeTlDTEU5QlFVOU1MRkZCUVZGdlJDeGhRVUZoYUVJc1JVRkJUeXhEUVVONFEzQkNMRTlCUVZGelFpeEZRVUZQVkN4VFFVRlRUeXhGUVVGUGJrSXNSVUZCVjBVc1ZVRkxla05ITEZsQmFFVlVMRU5CYVVWRmFrSXNUMEZCVDB3c1VVRkJVWEZFTEZkQlJXcENMMElzV1VGQldWb3NWVUZCV1VFc1ZVRkRlRUlzU1VGQlNUUkRMRk5CUVZkb1F5eFpRVU5tZUVJc1VVRkJVVVVzVVVGQlZYTkVMRk5CUTJ4Q1F5eFBRVUZQZWtRc1VVRkJWVUVzVVVGQmFVSWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F0WW05dmRITjBjbUZ3TDJ4cFlpOU9ZWFpFY205d1pHOTNiaTVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0PXJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO2V4cG9ydHMuX19lc01vZHVsZT0hMCxleHBvcnRzLmRlZmF1bHQ9dm9pZCAwO3ZhciBfZXh0ZW5kczI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSksX2luaGVyaXRzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKSxfYXNzZXJ0VGhpc0luaXRpYWxpemVkMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKSxfY2xhc3NuYW1lcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKSxfcmVhY3Q9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpLF9wcm9wVHlwZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSksX1NhZmVBbmNob3I9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9TYWZlQW5jaG9yXCIpKSxfY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uXCIpKSxwcm9wVHlwZXM9e2FjdGl2ZTpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxkaXNhYmxlZDpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxyb2xlOl9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsaHJlZjpfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLG9uQ2xpY2s6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsb25TZWxlY3Q6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsZXZlbnRLZXk6X3Byb3BUeXBlcy5kZWZhdWx0LmFueX0sZGVmYXVsdFByb3BzPXthY3RpdmU6ITEsZGlzYWJsZWQ6ITF9LE5hdkl0ZW09ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gTmF2SXRlbSh0LHIpe3ZhciBhO3JldHVybihhPWUuY2FsbCh0aGlzLHQscil8fHRoaXMpLmhhbmRsZUNsaWNrPWEuaGFuZGxlQ2xpY2suYmluZCgoMCxfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KSgoMCxfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShhKSkpLGF9KDAsX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKE5hdkl0ZW0sZSk7dmFyIHQ9TmF2SXRlbS5wcm90b3R5cGU7cmV0dXJuIHQuaGFuZGxlQ2xpY2s9ZnVuY3Rpb24gaGFuZGxlQ2xpY2soZSl7dGhpcy5wcm9wcy5kaXNhYmxlZD9lLnByZXZlbnREZWZhdWx0KCk6dGhpcy5wcm9wcy5vblNlbGVjdCYmdGhpcy5wcm9wcy5vblNlbGVjdCh0aGlzLnByb3BzLmV2ZW50S2V5LGUpfSx0LnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXt2YXIgZT10aGlzLnByb3BzLHQ9ZS5hY3RpdmUscj1lLmRpc2FibGVkLGE9ZS5vbkNsaWNrLGk9ZS5jbGFzc05hbWUsbD1lLnN0eWxlLHM9KDAsX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKGUsW1wiYWN0aXZlXCIsXCJkaXNhYmxlZFwiLFwib25DbGlja1wiLFwiY2xhc3NOYW1lXCIsXCJzdHlsZVwiXSk7cmV0dXJuIGRlbGV0ZSBzLm9uU2VsZWN0LGRlbGV0ZSBzLmV2ZW50S2V5LGRlbGV0ZSBzLmFjdGl2ZUtleSxkZWxldGUgcy5hY3RpdmVIcmVmLHMucm9sZT9cInRhYlwiPT09cy5yb2xlJiYoc1tcImFyaWEtc2VsZWN0ZWRcIl09dCk6XCIjXCI9PT1zLmhyZWYmJihzLnJvbGU9XCJidXR0b25cIiksX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImxpXCIse3JvbGU6XCJwcmVzZW50YXRpb25cIixjbGFzc05hbWU6KDAsX2NsYXNzbmFtZXMuZGVmYXVsdCkoaSx7YWN0aXZlOnQsZGlzYWJsZWQ6cn0pLHN0eWxlOmx9LF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1NhZmVBbmNob3IuZGVmYXVsdCwoMCxfZXh0ZW5kczIuZGVmYXVsdCkoe30scyx7ZGlzYWJsZWQ6cixvbkNsaWNrOigwLF9jcmVhdGVDaGFpbmVkRnVuY3Rpb24uZGVmYXVsdCkoYSx0aGlzLmhhbmRsZUNsaWNrKX0pKSl9LE5hdkl0ZW19KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7TmF2SXRlbS5wcm9wVHlwZXM9cHJvcFR5cGVzLE5hdkl0ZW0uZGVmYXVsdFByb3BzPWRlZmF1bHRQcm9wczt2YXIgX2RlZmF1bHQ9TmF2SXRlbTtleHBvcnRzLmRlZmF1bHQ9X2RlZmF1bHQsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWs1aGRrbDBaVzB1YW5NaVhTd2libUZ0WlhNaU9sc2lYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENJc0luSmxjWFZwY21VaUxDSmxlSEJ2Y25Seklpd2lYMTlsYzAxdlpIVnNaU0lzSW1SbFptRjFiSFFpTENKZlpYaDBaVzVrY3pJaUxDSmZiMkpxWldOMFYybDBhRzkxZEZCeWIzQmxjblJwWlhOTWIyOXpaVElpTENKZmFXNW9aWEpwZEhOTWIyOXpaVElpTENKZllYTnpaWEowVkdocGMwbHVhWFJwWVd4cGVtVmtNaUlzSWw5amJHRnpjMjVoYldWeklpd2lYM0psWVdOMElpd2lYM0J5YjNCVWVYQmxjeUlzSWw5VFlXWmxRVzVqYUc5eUlpd2lYMk55WldGMFpVTm9ZV2x1WldSR2RXNWpkR2x2YmlJc0luQnliM0JVZVhCbGN5SXNJbUZqZEdsMlpTSXNJbUp2YjJ3aUxDSmthWE5oWW14bFpDSXNJbkp2YkdVaUxDSnpkSEpwYm1jaUxDSm9jbVZtSWl3aWIyNURiR2xqYXlJc0ltWjFibU1pTENKdmJsTmxiR1ZqZENJc0ltVjJaVzUwUzJWNUlpd2lZVzU1SWl3aVpHVm1ZWFZzZEZCeWIzQnpJaXdpVG1GMlNYUmxiU0lzSWw5U1pXRmpkQ1JEYjIxd2IyNWxiblFpTENKd2NtOXdjeUlzSW1OdmJuUmxlSFFpTENKZmRHaHBjeUlzSW1OaGJHd2lMQ0owYUdseklpd2lhR0Z1Wkd4bFEyeHBZMnNpTENKaWFXNWtJaXdpWDNCeWIzUnZJaXdpY0hKdmRHOTBlWEJsSWl3aVpTSXNJbkJ5WlhabGJuUkVaV1poZFd4MElpd2ljbVZ1WkdWeUlpd2lYM1JvYVhNa2NISnZjSE1pTENKamJHRnpjMDVoYldVaUxDSnpkSGxzWlNJc0ltRmpkR2wyWlV0bGVTSXNJbUZqZEdsMlpVaHlaV1lpTENKamNtVmhkR1ZGYkdWdFpXNTBJaXdpUTI5dGNHOXVaVzUwSWl3aVgyUmxabUYxYkhRaUxDSnRiMlIxYkdVaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJSVUVzU1VGQlNVRXNkVUpCUVhsQ1F5eFJRVUZSTEhkRVFVVnlRME1zVVVGQlVVTXNXVUZCWVN4RlFVTnlRa1FzVVVGQlVVVXNZVUZCVlN4RlFVVnNRaXhKUVVGSlF5eFZRVUZaVEN4MVFrRkJkVUpETEZGQlFWRXNNa05CUlRORFN5d3JRa0ZCYVVOT0xIVkNRVUYxUWtNc1VVRkJVU3huUlVGRmFFVk5MR2RDUVVGclFsQXNkVUpCUVhWQ1F5eFJRVUZSTEdsRVFVVnFSRThzZDBKQlFUQkNVaXgxUWtGQmRVSkRMRkZCUVZFc2VVUkJSWHBFVVN4WlFVRmpWQ3gxUWtGQmRVSkRMRkZCUVZFc1pVRkZOME5UTEU5QlFWTldMSFZDUVVGMVFrTXNVVUZCVVN4VlFVVjRRMVVzVjBGQllWZ3NkVUpCUVhWQ1F5eFJRVUZSTEdWQlJUVkRWeXhaUVVGaldpeDFRa0ZCZFVKRExGRkJRVkVzYVVKQlJUZERXU3gxUWtGQmVVSmlMSFZDUVVGMVFrTXNVVUZCVVN4clEwRkZlRVJoTEZWQlFWa3NRMEZEWkVNc1QwRkJVVW9zVjBGQlYxQXNVVUZCVVZrc1MwRkRNMEpETEZOQlFWVk9MRmRCUVZkUUxGRkJRVkZaTEV0QlF6ZENSU3hMUVVGTlVDeFhRVUZYVUN4UlFVRlJaU3hQUVVONlFrTXNTMEZCVFZRc1YwRkJWMUFzVVVGQlVXVXNUMEZEZWtKRkxGRkJRVk5XTEZkQlFWZFFMRkZCUVZGclFpeExRVU0xUWtNc1UwRkJWVm9zVjBGQlYxQXNVVUZCVVd0Q0xFdEJRemRDUlN4VFFVRlZZaXhYUVVGWFVDeFJRVUZSY1VJc1MwRkZNMEpETEdGQlFXVXNRMEZEYWtKWUxGRkJRVkVzUlVGRFVrVXNWVUZCVlN4SFFVZFNWU3hSUVVWS0xGTkJRVlZETEVkQlIxSXNVMEZCVTBRc1VVRkJVVVVzUlVGQlQwTXNSMEZEZEVJc1NVRkJTVU1zUlVGSlNpeFBRVVpCUVN4RlFVRlJTQ3hGUVVGcFFra3NTMEZCUzBNc1MwRkJUVW9zUlVGQlQwTXNTVUZCV1Vjc1RVRkRha1JETEZsQlFXTklMRVZCUVUxSExGbEJRVmxETEUxQlFVc3NSVUZCU1ROQ0xIZENRVUYzUWtvc1ZVRkJVeXhGUVVGSlNTeDNRa0ZCZDBKS0xGTkJRVk15UWl4TFFVTTVSMEVzUjBGUVZDeEZRVUZKZUVJc1owSkJRV2RDU0N4VFFVRlRkVUlzVVVGQlUwTXNSMEZWZEVNc1NVRkJTVkVzUlVGQlUxUXNVVUZCVVZVc1ZVRm5SSEpDTEU5Qk9VTkJSQ3hGUVVGUFJpeFpRVUZqTEZOQlFWTkJMRmxCUVZsSkxFZEJRM0JEVEN4TFFVRkxTaXhOUVVGTldpeFRRVU5pY1VJc1JVRkJSVU1zYVVKQlNVRk9MRXRCUVV0S0xFMUJRVTFPTEZWQlEySlZMRXRCUVV0S0xFMUJRVTFPTEZOQlFWTlZMRXRCUVV0S0xFMUJRVTFNTEZOQlFWVmpMRWxCU1RkRFJpeEZRVUZQU1N4UFFVRlRMRk5CUVZOQkxGTkJRM1pDTEVsQlFVbERMRVZCUVdOU0xFdEJRVXRLTEUxQlEyNUNaQ3hGUVVGVE1FSXNSVUZCV1RGQ0xFOUJRM0pDUlN4RlFVRlhkMElzUlVGQldYaENMRk5CUTNaQ1NTeEZRVUZWYjBJc1JVRkJXWEJDTEZGQlEzUkNjVUlzUlVGQldVUXNSVUZCV1VNc1ZVRkRlRUpETEVWQlFWRkdMRVZCUVZsRkxFMUJRM0JDWkN4SFFVRlJMRVZCUVVsMlFpd3JRa0ZCSzBKR0xGTkJRVk54UXl4RlFVRmhMRU5CUVVNc1UwRkJWU3hYUVVGWkxGVkJRVmNzV1VGQllTeFZRV1Z3U0N4alFXUlBXaXhGUVVGTlRpeG5Ra0ZEVGswc1JVRkJUVXdzWjBKQlJVNUxMRVZCUVUxbExHbENRVU5PWml4RlFVRk5aMElzVjBGRlVtaENMRVZCUVUxWUxFdEJTV1VzVVVGQlpsY3NSVUZCVFZnc1QwRkRabGNzUlVGQlRTeHBRa0ZCYlVKa0xFZEJTazRzVFVGQlptTXNSVUZCVFZRc1QwRkRVbE1zUlVGQlRWZ3NTMEZCVHl4VlFVMVdVaXhQUVVGUFRpeFJRVUZSTUVNc1kwRkJZeXhMUVVGTkxFTkJRM2hETlVJc1MwRkJUU3hsUVVOT2QwSXNWMEZCVnl4RlFVRkpha01zV1VGQldVd3NVMEZCVTNORExFVkJRVmNzUTBGRE4wTXpRaXhQUVVGUlFTeEZRVU5TUlN4VFFVRlZRU3hKUVVWYU1FSXNUVUZCVDBFc1IwRkRUbXBETEU5QlFVOU9MRkZCUVZFd1F5eGpRVUZqYkVNc1dVRkJXVklzVTBGQlV5eEZRVUZKUXl4VlFVRlZSQ3hUUVVGVExFZEJRVWw1UWl4RlFVRlBMRU5CUTNKR1dpeFRRVUZWUVN4RlFVTldTU3hUUVVGVExFVkJRVWxTTEhWQ1FVRjFRbFFzVTBGQlUybENMRVZCUVZOWkxFdEJRVXRETEd0Q1FVbDRSRkFzVVVFelJGUXNRMEUwUkVWcVFpeFBRVUZQVGl4UlFVRlJNa01zVjBGRmFrSndRaXhSUVVGUllpeFZRVUZaUVN4VlFVTndRbUVzVVVGQlVVUXNZVUZCWlVFc1lVRkRka0lzU1VGQlNYTkNMRk5CUVZkeVFpeFJRVU5tZWtJc1VVRkJVVVVzVVVGQlZUUkRMRk5CUTJ4Q1F5eFBRVUZQTDBNc1VVRkJWVUVzVVVGQmFVSWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F0WW05dmRITjBjbUZ3TDJ4cFlpOU9ZWFpKZEdWdExtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9leHRlbmRzMz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSksX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLF9jbGFzc25hbWVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpLF9yZWFjdD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSksX3Byb3BUeXBlcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKSxfZWxlbWVudFR5cGU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlcy1leHRyYS9saWIvZWxlbWVudFR5cGVcIikpLF91bmNvbnRyb2xsYWJsZT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ1bmNvbnRyb2xsYWJsZVwiKSksX0dyaWQ9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9HcmlkXCIpKSxfTmF2YmFyQnJhbmQ9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9OYXZiYXJCcmFuZFwiKSksX05hdmJhckNvbGxhcHNlPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTmF2YmFyQ29sbGFwc2VcIikpLF9OYXZiYXJIZWFkZXI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9OYXZiYXJIZWFkZXJcIikpLF9OYXZiYXJUb2dnbGU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9OYXZiYXJUb2dnbGVcIikpLF9ib290c3RyYXBVdGlscz1yZXF1aXJlKFwiLi91dGlscy9ib290c3RyYXBVdGlsc1wiKSxfU3R5bGVDb25maWc9cmVxdWlyZShcIi4vdXRpbHMvU3R5bGVDb25maWdcIiksX2NyZWF0ZUNoYWluZWRGdW5jdGlvbj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZUNoYWluZWRGdW5jdGlvblwiKSkscHJvcFR5cGVzPXtmaXhlZFRvcDpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxmaXhlZEJvdHRvbTpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxzdGF0aWNUb3A6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsaW52ZXJzZTpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxmbHVpZDpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxjb21wb25lbnRDbGFzczpfZWxlbWVudFR5cGUuZGVmYXVsdCxvblRvZ2dsZTpfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxvblNlbGVjdDpfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxjb2xsYXBzZU9uU2VsZWN0Ol9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLGV4cGFuZGVkOl9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLHJvbGU6X3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ30sZGVmYXVsdFByb3BzPXtjb21wb25lbnRDbGFzczpcIm5hdlwiLGZpeGVkVG9wOiExLGZpeGVkQm90dG9tOiExLHN0YXRpY1RvcDohMSxpbnZlcnNlOiExLGZsdWlkOiExLGNvbGxhcHNlT25TZWxlY3Q6ITF9LGNoaWxkQ29udGV4dFR5cGVzPXskYnNfbmF2YmFyOl9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7YnNDbGFzczpfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLGV4cGFuZGVkOl9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLG9uVG9nZ2xlOl9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQsb25TZWxlY3Q6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmN9KX0sTmF2YmFyPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIE5hdmJhcih0LGEpe3ZhciBsO3JldHVybihsPWUuY2FsbCh0aGlzLHQsYSl8fHRoaXMpLmhhbmRsZVRvZ2dsZT1sLmhhbmRsZVRvZ2dsZS5iaW5kKCgwLF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKGwpKSksbC5oYW5kbGVDb2xsYXBzZT1sLmhhbmRsZUNvbGxhcHNlLmJpbmQoKDAsX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoKDAsX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkobCkpKSxsfSgwLF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShOYXZiYXIsZSk7dmFyIHQ9TmF2YmFyLnByb3RvdHlwZTtyZXR1cm4gdC5nZXRDaGlsZENvbnRleHQ9ZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCl7dmFyIGU9dGhpcy5wcm9wcyx0PWUuYnNDbGFzcyxhPWUuZXhwYW5kZWQsbD1lLm9uU2VsZWN0LHI9ZS5jb2xsYXBzZU9uU2VsZWN0O3JldHVybnskYnNfbmF2YmFyOntic0NsYXNzOnQsZXhwYW5kZWQ6YSxvblRvZ2dsZTp0aGlzLmhhbmRsZVRvZ2dsZSxvblNlbGVjdDooMCxfY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uLmRlZmF1bHQpKGwscj90aGlzLmhhbmRsZUNvbGxhcHNlOm51bGwpfX19LHQuaGFuZGxlQ29sbGFwc2U9ZnVuY3Rpb24gaGFuZGxlQ29sbGFwc2UoKXt2YXIgZT10aGlzLnByb3BzLHQ9ZS5vblRvZ2dsZTtlLmV4cGFuZGVkJiZ0KCExKX0sdC5oYW5kbGVUb2dnbGU9ZnVuY3Rpb24gaGFuZGxlVG9nZ2xlKCl7dmFyIGU9dGhpcy5wcm9wczsoMCxlLm9uVG9nZ2xlKSghZS5leHBhbmRlZCl9LHQucmVuZGVyPWZ1bmN0aW9uIHJlbmRlcigpe3ZhciBlLHQ9dGhpcy5wcm9wcyxhPXQuY29tcG9uZW50Q2xhc3MsbD10LmZpeGVkVG9wLHI9dC5maXhlZEJvdHRvbSxvPXQuc3RhdGljVG9wLHM9dC5pbnZlcnNlLHA9dC5mbHVpZCxpPXQuY2xhc3NOYW1lLG49dC5jaGlsZHJlbix1PSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KSh0LFtcImNvbXBvbmVudENsYXNzXCIsXCJmaXhlZFRvcFwiLFwiZml4ZWRCb3R0b21cIixcInN0YXRpY1RvcFwiLFwiaW52ZXJzZVwiLFwiZmx1aWRcIixcImNsYXNzTmFtZVwiLFwiY2hpbGRyZW5cIl0pLGQ9KDAsX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wc0FuZE9taXQpKHUsW1wiZXhwYW5kZWRcIixcIm9uVG9nZ2xlXCIsXCJvblNlbGVjdFwiLFwiY29sbGFwc2VPblNlbGVjdFwiXSksZj1kWzBdLGI9ZFsxXTt2b2lkIDA9PT1iLnJvbGUmJlwibmF2XCIhPT1hJiYoYi5yb2xlPVwibmF2aWdhdGlvblwiKSxzJiYoZi5ic1N0eWxlPV9TdHlsZUNvbmZpZy5TdHlsZS5JTlZFUlNFKTt2YXIgXz0oMCxfZXh0ZW5kczMuZGVmYXVsdCkoe30sKDAsX2Jvb3RzdHJhcFV0aWxzLmdldENsYXNzU2V0KShmKSwoKGU9e30pWygwLF9ib290c3RyYXBVdGlscy5wcmVmaXgpKGYsXCJmaXhlZC10b3BcIildPWwsZVsoMCxfYm9vdHN0cmFwVXRpbHMucHJlZml4KShmLFwiZml4ZWQtYm90dG9tXCIpXT1yLGVbKDAsX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkoZixcInN0YXRpYy10b3BcIildPW8sZSkpO3JldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KGEsKDAsX2V4dGVuZHMzLmRlZmF1bHQpKHt9LGIse2NsYXNzTmFtZTooMCxfY2xhc3NuYW1lcy5kZWZhdWx0KShpLF8pfSksX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfR3JpZC5kZWZhdWx0LHtmbHVpZDpwfSxuKSl9LE5hdmJhcn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtOYXZiYXIucHJvcFR5cGVzPXByb3BUeXBlcyxOYXZiYXIuZGVmYXVsdFByb3BzPWRlZmF1bHRQcm9wcyxOYXZiYXIuY2hpbGRDb250ZXh0VHlwZXM9Y2hpbGRDb250ZXh0VHlwZXMsKDAsX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKFwibmF2YmFyXCIsTmF2YmFyKTt2YXIgVW5jb250cm9sbGFibGVOYXZiYXI9KDAsX3VuY29udHJvbGxhYmxlLmRlZmF1bHQpKE5hdmJhcix7ZXhwYW5kZWQ6XCJvblRvZ2dsZVwifSk7ZnVuY3Rpb24gY3JlYXRlU2ltcGxlV3JhcHBlcihlLHQsYSl7dmFyIGw9ZnVuY3Rpb24gV3JhcHBlcihlLGEpe3ZhciBsPWUuY29tcG9uZW50Q2xhc3Mscj1lLmNsYXNzTmFtZSxvPWUucHVsbFJpZ2h0LHM9ZS5wdWxsTGVmdCxwPSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShlLFtcImNvbXBvbmVudENsYXNzXCIsXCJjbGFzc05hbWVcIixcInB1bGxSaWdodFwiLFwicHVsbExlZnRcIl0pLGk9YS4kYnNfbmF2YmFyLG49dm9pZCAwPT09aT97YnNDbGFzczpcIm5hdmJhclwifTppO3JldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KGwsKDAsX2V4dGVuZHMzLmRlZmF1bHQpKHt9LHAse2NsYXNzTmFtZTooMCxfY2xhc3NuYW1lcy5kZWZhdWx0KShyLCgwLF9ib290c3RyYXBVdGlscy5wcmVmaXgpKG4sdCksbyYmKDAsX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkobixcInJpZ2h0XCIpLHMmJigwLF9ib290c3RyYXBVdGlscy5wcmVmaXgpKG4sXCJsZWZ0XCIpKX0pKX07cmV0dXJuIGwuZGlzcGxheU5hbWU9YSxsLnByb3BUeXBlcz17Y29tcG9uZW50Q2xhc3M6X2VsZW1lbnRUeXBlLmRlZmF1bHQscHVsbFJpZ2h0Ol9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLHB1bGxMZWZ0Ol9wcm9wVHlwZXMuZGVmYXVsdC5ib29sfSxsLmRlZmF1bHRQcm9wcz17Y29tcG9uZW50Q2xhc3M6ZSxwdWxsUmlnaHQ6ITEscHVsbExlZnQ6ITF9LGwuY29udGV4dFR5cGVzPXskYnNfbmF2YmFyOl9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7YnNDbGFzczpfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nfSl9LGx9VW5jb250cm9sbGFibGVOYXZiYXIuQnJhbmQ9X05hdmJhckJyYW5kLmRlZmF1bHQsVW5jb250cm9sbGFibGVOYXZiYXIuSGVhZGVyPV9OYXZiYXJIZWFkZXIuZGVmYXVsdCxVbmNvbnRyb2xsYWJsZU5hdmJhci5Ub2dnbGU9X05hdmJhclRvZ2dsZS5kZWZhdWx0LFVuY29udHJvbGxhYmxlTmF2YmFyLkNvbGxhcHNlPV9OYXZiYXJDb2xsYXBzZS5kZWZhdWx0LFVuY29udHJvbGxhYmxlTmF2YmFyLkZvcm09Y3JlYXRlU2ltcGxlV3JhcHBlcihcImRpdlwiLFwiZm9ybVwiLFwiTmF2YmFyRm9ybVwiKSxVbmNvbnRyb2xsYWJsZU5hdmJhci5UZXh0PWNyZWF0ZVNpbXBsZVdyYXBwZXIoXCJwXCIsXCJ0ZXh0XCIsXCJOYXZiYXJUZXh0XCIpLFVuY29udHJvbGxhYmxlTmF2YmFyLkxpbms9Y3JlYXRlU2ltcGxlV3JhcHBlcihcImFcIixcImxpbmtcIixcIk5hdmJhckxpbmtcIik7dmFyIF9kZWZhdWx0PSgwLF9ib290c3RyYXBVdGlscy5ic1N0eWxlcykoW19TdHlsZUNvbmZpZy5TdHlsZS5ERUZBVUxULF9TdHlsZUNvbmZpZy5TdHlsZS5JTlZFUlNFXSxfU3R5bGVDb25maWcuU3R5bGUuREVGQVVMVCxVbmNvbnRyb2xsYWJsZU5hdmJhcik7ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrNWhkbUpoY2k1cWN5SmRMQ0p1WVcxbGN5STZXeUpmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MElpd2ljbVZ4ZFdseVpTSXNJbVY0Y0c5eWRITWlMQ0pmWDJWelRXOWtkV3hsSWl3aVpHVm1ZWFZzZENJc0lsOWxlSFJsYm1Sek15SXNJbDl2WW1wbFkzUlhhWFJvYjNWMFVISnZjR1Z5ZEdsbGMweHZiM05sTWlJc0lsOXBibWhsY21sMGMweHZiM05sTWlJc0lsOWhjM05sY25SVWFHbHpTVzVwZEdsaGJHbDZaV1F5SWl3aVgyTnNZWE56Ym1GdFpYTWlMQ0pmY21WaFkzUWlMQ0pmY0hKdmNGUjVjR1Z6SWl3aVgyVnNaVzFsYm5SVWVYQmxJaXdpWDNWdVkyOXVkSEp2Ykd4aFlteGxJaXdpWDBkeWFXUWlMQ0pmVG1GMlltRnlRbkpoYm1RaUxDSmZUbUYyWW1GeVEyOXNiR0Z3YzJVaUxDSmZUbUYyWW1GeVNHVmhaR1Z5SWl3aVgwNWhkbUpoY2xSdloyZHNaU0lzSWw5aWIyOTBjM1J5WVhCVmRHbHNjeUlzSWw5VGRIbHNaVU52Ym1acFp5SXNJbDlqY21WaGRHVkRhR0ZwYm1Wa1JuVnVZM1JwYjI0aUxDSndjbTl3Vkhsd1pYTWlMQ0ptYVhobFpGUnZjQ0lzSW1KdmIyd2lMQ0ptYVhobFpFSnZkSFJ2YlNJc0luTjBZWFJwWTFSdmNDSXNJbWx1ZG1WeWMyVWlMQ0ptYkhWcFpDSXNJbU52YlhCdmJtVnVkRU5zWVhOeklpd2liMjVVYjJkbmJHVWlMQ0ptZFc1aklpd2liMjVUWld4bFkzUWlMQ0pqYjJ4c1lYQnpaVTl1VTJWc1pXTjBJaXdpWlhod1lXNWtaV1FpTENKeWIyeGxJaXdpYzNSeWFXNW5JaXdpWkdWbVlYVnNkRkJ5YjNCeklpd2lZMmhwYkdSRGIyNTBaWGgwVkhsd1pYTWlMQ0lrWW5OZmJtRjJZbUZ5SWl3aWMyaGhjR1VpTENKaWMwTnNZWE56SWl3aWFYTlNaWEYxYVhKbFpDSXNJazVoZG1KaGNpSXNJbDlTWldGamRDUkRiMjF3YjI1bGJuUWlMQ0p3Y205d2N5SXNJbU52Ym5SbGVIUWlMQ0pmZEdocGN5SXNJbU5oYkd3aUxDSjBhR2x6SWl3aWFHRnVaR3hsVkc5bloyeGxJaXdpWW1sdVpDSXNJbWhoYm1Sc1pVTnZiR3hoY0hObElpd2lYM0J5YjNSdklpd2ljSEp2ZEc5MGVYQmxJaXdpWjJWMFEyaHBiR1JEYjI1MFpYaDBJaXdpWDNSb2FYTWtjSEp2Y0hNaUxDSmZkR2hwY3lSd2NtOXdjeklpTENKZmRHaHBjeVJ3Y205d2N6TWlMQ0p5Wlc1a1pYSWlMQ0pmWlhoMFpXNWtjeklpTENKZmRHaHBjeVJ3Y205d2N6UWlMQ0pEYjIxd2IyNWxiblFpTENKamJHRnpjMDVoYldVaUxDSmphR2xzWkhKbGJpSXNJbDl6Y0d4cGRFSnpVSEp2Y0hOQmJtUlBiV2wwSWl3aWMzQnNhWFJDYzFCeWIzQnpRVzVrVDIxcGRDSXNJbUp6VUhKdmNITWlMQ0psYkdWdFpXNTBVSEp2Y0hNaUxDSjFibVJsWm1sdVpXUWlMQ0ppYzFOMGVXeGxJaXdpVTNSNWJHVWlMQ0pKVGxaRlVsTkZJaXdpWTJ4aGMzTmxjeUlzSW1kbGRFTnNZWE56VTJWMElpd2ljSEpsWm1sNElpd2lZM0psWVhSbFJXeGxiV1Z1ZENJc0lsVnVZMjl1ZEhKdmJHeGhZbXhsVG1GMlltRnlJaXdpWTNKbFlYUmxVMmx0Y0d4bFYzSmhjSEJsY2lJc0luUmhaeUlzSW5OMVptWnBlQ0lzSW1ScGMzQnNZWGxPWVcxbElpd2lWM0poY0hCbGNpSXNJbDl5WldZaUxDSmZjbVZtTWlJc0luQjFiR3hTYVdkb2RDSXNJbkIxYkd4TVpXWjBJaXdpWDNKbFpqSWtKR0p6WDI1aGRtSmhjaUlzSW01aGRtSmhjbEJ5YjNCeklpd2lZMjl1ZEdWNGRGUjVjR1Z6SWl3aVFuSmhibVFpTENKSVpXRmtaWElpTENKVWIyZG5iR1VpTENKRGIyeHNZWEJ6WlNJc0lrWnZjbTBpTENKVVpYaDBJaXdpVEdsdWF5SXNJbDlrWldaaGRXeDBJaXdpWW5OVGRIbHNaWE1pTENKRVJVWkJWVXhVSWl3aWJXOWtkV3hsSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4aFFVVkJMRWxCUVVsQkxIVkNRVUY1UWtNc1VVRkJVU3gzUkVGRmNrTkRMRkZCUVZGRExGbEJRV0VzUlVGRGNrSkVMRkZCUVZGRkxHRkJRVlVzUlVGRmJFSXNTVUZCU1VNc1ZVRkJXVXdzZFVKQlFYVkNReXhSUVVGUkxESkRRVVV6UTBzc0swSkJRV2xEVGl4MVFrRkJkVUpETEZGQlFWRXNaMFZCUldoRlRTeG5Ra0ZCYTBKUUxIVkNRVUYxUWtNc1VVRkJVU3hwUkVGRmFrUlBMSGRDUVVFd1FsSXNkVUpCUVhWQ1F5eFJRVUZSTEhsRVFVVjZSRkVzV1VGQlkxUXNkVUpCUVhWQ1F5eFJRVUZSTEdWQlJUZERVeXhQUVVGVFZpeDFRa0ZCZFVKRExGRkJRVkVzVlVGRmVFTlZMRmRCUVdGWUxIVkNRVUYxUWtNc1VVRkJVU3hsUVVVMVExY3NZVUZCWlZvc2RVSkJRWFZDUXl4UlFVRlJMSEZEUVVVNVExa3NaMEpCUVd0Q1lpeDFRa0ZCZFVKRExGRkJRVkVzYlVKQlJXcEVZU3hOUVVGUlpDeDFRa0ZCZFVKRExGRkJRVkVzVjBGRmRrTmpMR0ZCUVdWbUxIVkNRVUYxUWtNc1VVRkJVU3hyUWtGRk9VTmxMR2RDUVVGclFtaENMSFZDUVVGMVFrTXNVVUZCVVN4eFFrRkZha1JuUWl4alFVRm5RbXBDTEhWQ1FVRjFRa01zVVVGQlVTeHRRa0ZGTDBOcFFpeGpRVUZuUW14Q0xIVkNRVUYxUWtNc1VVRkJVU3h0UWtGRkwwTnJRaXhuUWtGQmEwSnNRaXhSUVVGUkxEQkNRVVV4UW0xQ0xHRkJRV1Z1UWl4UlFVRlJMSFZDUVVWMlFtOUNMSFZDUVVGNVFuSkNMSFZDUVVGMVFrTXNVVUZCVVN4clEwRkxlRVJ4UWl4VlFVRlpMRU5CUzJSRExGTkJRVlZhTEZkQlFWZFFMRkZCUVZGdlFpeExRVTAzUWtNc1dVRkJZV1FzVjBGQlYxQXNVVUZCVVc5Q0xFdEJTMmhEUlN4VlFVRlhaaXhYUVVGWFVDeFJRVUZSYjBJc1MwRkxPVUpITEZGQlFWTm9RaXhYUVVGWFVDeFJRVUZSYjBJc1MwRk5OVUpKTEUxQlFVOXFRaXhYUVVGWFVDeFJRVUZSYjBJc1MwRkxNVUpMTEdWQlFXZENha0lzWVVGQllWSXNVVUZUTjBJd1FpeFRRVUZWYmtJc1YwRkJWMUFzVVVGQlVUSkNMRXRCZFVJM1FrTXNVMEZCVlhKQ0xGZEJRVmRRTEZGQlFWRXlRaXhMUVZNM1FrVXNhVUpCUVd0Q2RFSXNWMEZCVjFBc1VVRkJVVzlDTEV0QlQzSkRWU3hUUVVGVmRrSXNWMEZCVjFBc1VVRkJVVzlDTEV0QlF6ZENWeXhMUVVGTmVFSXNWMEZCVjFBc1VVRkJVV2RETEZGQlJYWkNReXhoUVVGbExFTkJRMnBDVWl4bFFVRm5RaXhOUVVOb1FrNHNWVUZCVlN4RlFVTldSU3hoUVVGaExFVkJRMkpETEZkQlFWY3NSVUZEV0VNc1UwRkJVeXhGUVVOVVF5eFBRVUZQTEVWQlExQkxMR3RDUVVGclFpeEhRVVZvUWtzc2EwSkJRVzlDTEVOQlEzUkNReXhYUVVGWk5VSXNWMEZCVjFBc1VVRkJVVzlETEUxQlFVMHNRMEZEYmtORExGRkJRVk01UWl4WFFVRlhVQ3hSUVVGUlowTXNUMEZETlVKR0xGTkJRVlYyUWl4WFFVRlhVQ3hSUVVGUmIwSXNTMEZETjBKTkxGTkJRVlZ1UWl4WFFVRlhVQ3hSUVVGUk1rSXNTMEZCUzFjc1YwRkRiRU5XTEZOQlFWVnlRaXhYUVVGWFVDeFJRVUZSTWtJc1VVRkpOMEpaTEU5QlJVb3NVMEZCVlVNc1IwRkhVaXhUUVVGVFJDeFBRVUZQUlN4RlFVRlBReXhIUVVOeVFpeEpRVUZKUXl4RlFVdEtMRTlCU0VGQkxFVkJRVkZJTEVWQlFXbENTU3hMUVVGTFF5eExRVUZOU2l4RlFVRlBReXhKUVVGWlJ5eE5RVU5xUkVNc1lVRkJaVWdzUlVGQlRVY3NZVUZCWVVNc1RVRkJTeXhGUVVGSk0wTXNkMEpCUVhkQ1NpeFZRVUZUTEVWQlFVbEpMSGRDUVVGM1Frb3NVMEZCVXpKRExFdEJRM1pJUVN4RlFVRk5TeXhsUVVGcFFrd3NSVUZCVFVzc1pVRkJaVVFzVFVGQlN5eEZRVUZKTTBNc2QwSkJRWGRDU2l4VlFVRlRMRVZCUVVsSkxIZENRVUYzUWtvc1UwRkJVekpETEV0QlEzQklRU3hIUVZKVUxFVkJRVWw0UXl4blFrRkJaMEpJTEZOQlFWTjFReXhQUVVGUlF5eEhRVmR5UXl4SlFVRkpVeXhGUVVGVFZpeFBRVUZQVnl4VlFYZEZjRUlzVDBGMFJVRkVMRVZCUVU5RkxHZENRVUZyUWl4VFFVRlRRU3hyUWtGRGFFTXNTVUZCU1VNc1JVRkJZMUFzUzBGQlMwb3NUVUZEYmtKS0xFVkJRVlZsTEVWQlFWbG1MRkZCUTNSQ1VDeEZRVUZYYzBJc1JVRkJXWFJDTEZOQlEzWkNSaXhGUVVGWGQwSXNSVUZCV1hoQ0xGTkJRM1pDUXl4RlFVRnRRblZDTEVWQlFWbDJRaXhwUWtGRGJrTXNUVUZCVHl4RFFVTk1UU3hYUVVGWkxFTkJRMVpGTEZGQlFWTkJMRVZCUTFSUUxGTkJRVlZCTEVWQlExWktMRk5CUVZWdFFpeExRVUZMUXl4aFFVTm1iRUlzVlVGQlZTeEZRVUZKV0N4MVFrRkJkVUpxUWl4VFFVRlRORUlzUlVGQlZVTXNSVUZCYlVKblFpeExRVUZMUnl4bFFVRnBRaXhUUVV0MlIwTXNSVUZCVDBRc1pVRkJhVUlzVTBGQlUwRXNhVUpCUXk5Q0xFbEJRVWxMTEVWQlFXVlNMRXRCUVV0S0xFMUJRM0JDWml4RlFVRlhNa0lzUlVGQllUTkNMRk5CUTJJeVFpeEZRVUZoZGtJc1ZVRkhNVUpLTEVkQlFWTXNTVUZKWW5WQ0xFVkJRVTlJTEdGQlFXVXNVMEZCVTBFc1pVRkROMElzU1VGQlNWRXNSVUZCWlZRc1MwRkJTMG9zVDBGSGVFSm1MRVZCUm1VMFFpeEZRVUZoTlVJc1YwRkRZalJDTEVWQlFXRjRRaXhYUVVrNVFtMUNMRVZCUVU5TkxFOUJRVk1zVTBGQlUwRXNVMEZEZGtJc1NVRkJTVU1zUlVGRlFVTXNSVUZCWlZvc1MwRkJTMG9zVFVGRGNFSnBRaXhGUVVGWlJDeEZRVUZoYUVNc1pVRkRla0pPTEVWQlFWZHpReXhGUVVGaGRFTXNVMEZEZUVKRkxFVkJRV052UXl4RlFVRmhjRU1zV1VGRE0wSkRMRVZCUVZsdFF5eEZRVUZoYmtNc1ZVRkRla0pETEVWQlFWVnJReXhGUVVGaGJFTXNVVUZEZGtKRExFVkJRVkZwUXl4RlFVRmhha01zVFVGRGNrSnRReXhGUVVGWlJpeEZRVUZoUlN4VlFVTjZRa01zUlVGQlYwZ3NSVUZCWVVjc1UwRkRlRUp1UWl4SFFVRlJMRVZCUVVsMlF5d3JRa0ZCSzBKR0xGTkJRVk41UkN4RlFVRmpMRU5CUVVNc2FVSkJRV3RDTEZkQlFWa3NZMEZCWlN4WlFVRmhMRlZCUVZjc1VVRkJVeXhaUVVGaExHRkJSVGxLU1N4SFFVRjFRaXhGUVVGSk9VTXNaMEpCUVdkQ0swTXNjVUpCUVhGQ2NrSXNSVUZCVHl4RFFVRkRMRmRCUVZrc1YwRkJXU3hYUVVGWkxIRkNRVU0xUjNOQ0xFVkJRVlZHTEVWQlFYRkNMRWRCUXk5Q1J5eEZRVUZsU0N4RlFVRnhRaXhSUVV0a1NTeEpRVUYwUWtRc1JVRkJZV3BETEUxQlFXOURMRkZCUVdReVFpeEpRVU55UTAwc1JVRkJZV3BETEV0QlFVOHNZMEZIYkVKU0xFbEJRMFozUXl4RlFVRlJSeXhSUVVGVmJFUXNZVUZCWVcxRUxFMUJRVTFETEZOQlIzWkRMRWxCUVVsRExFZEJRVlVzUlVGQlNYQkZMRlZCUVZWRUxGTkJRVk1zU1VGQlNTeEZRVUZKWlN4blFrRkJaMEoxUkN4aFFVRmhVQ3hMUVVGWFVDeEZRVUZaTEV0QlFXTXNSVUZCU1hwRExHZENRVUZuUW5kRUxGRkJRVkZTTEVWQlFWTXNZMEZCWjBJMVF5eEZRVUZWY1VNc1IwRkJWU3hGUVVGSmVrTXNaMEpCUVdkQ2QwUXNVVUZCVVZJc1JVRkJVeXhwUWtGQmJVSXhReXhGUVVGaGJVTXNSMEZCVlN4RlFVRkpla01zWjBKQlFXZENkMFFzVVVGQlVWSXNSVUZCVXl4bFFVRnBRbnBETEVWQlFWZHJReXhKUVVONFZTeFBRVUZQYkVRc1QwRkJUMDRzVVVGQlVYZEZMR05CUVdOa0xFZEJRVmNzUlVGQlNYcEVMRlZCUVZWRUxGTkJRVk1zUjBGQlNXZEZMRVZCUVdNc1EwRkRkRVpNTEZkQlFWY3NSVUZCU1hSRUxGbEJRVmxNTEZOQlFWTXlSQ3hGUVVGWFZTeExRVU0zUXk5RUxFOUJRVTlPTEZGQlFWRjNSU3hqUVVGak9VUXNUVUZCVFZZc1VVRkJVeXhEUVVNNVEzZENMRTFCUVU5QkxFZEJRMDV2UXl4TFFVZEZja0lzVDBGd1JsUXNRMEZ4UmtWcVF5eFBRVUZQVGl4UlFVRlJNRVFzVjBGRmFrSnVRaXhQUVVGUGNrSXNWVUZCV1VFc1ZVRkRia0p4UWl4UFFVRlBUaXhoUVVGbFFTeGhRVU4wUWswc1QwRkJUMHdzYTBKQlFXOUNRU3h0UWtGRE0wSXNSVUZCU1c1Q0xHZENRVUZuUW5OQ0xGTkJRVk1zVTBGQlZVVXNVVUZEZGtNc1NVRkJTV3RETEhOQ1FVRjFRaXhGUVVGSmFFVXNaMEpCUVdkQ1ZDeFRRVUZUZFVNc1QwRkJVU3hEUVVNNVJGUXNVMEZCVlN4aFFVZGFMRk5CUVZNMFF5eHZRa0ZCYjBKRExFVkJRVXRETEVWQlFWRkRMRWRCUTNoRExFbEJRVWxETEVWQlFWVXNVMEZCVTBFc1VVRkJVVU1zUlVGQlRVTXNSMEZEYmtNc1NVRkJTWFJDTEVWQlFWbHhRaXhGUVVGTGRFUXNaVUZEYWtKclF5eEZRVUZaYjBJc1JVRkJTM0JDTEZWQlEycENjMElzUlVGQldVWXNSVUZCUzBVc1ZVRkRha0pETEVWQlFWZElMRVZCUVV0SExGTkJRMmhDZWtNc1IwRkJVU3hGUVVGSmRrTXNLMEpCUVN0Q1JpeFRRVUZUSzBVc1JVRkJUU3hEUVVGRExHbENRVUZyUWl4WlFVRmhMRmxCUVdFc1lVRkRka2RKTEVWQlFXMUNTQ3hGUVVGTk4wTXNWMEZEZWtKcFJDeFBRVUZ0UXl4SlFVRnlRa1FzUlVGQk9FSXNRMEZET1VNNVF5eFJRVUZUTEZWQlExQTRReXhGUVVOS0xFOUJRVTgzUlN4UFFVRlBUaXhSUVVGUmQwVXNZMEZCWTJRc1IwRkJWeXhGUVVGSmVrUXNWVUZCVlVRc1UwRkJVeXhIUVVGSmVVTXNSVUZCVHl4RFFVTXZSV3RDTEZkQlFWY3NSVUZCU1hSRUxGbEJRVmxNTEZOQlFWTXlSQ3hIUVVGWExFVkJRVWsxUXl4blFrRkJaMEozUkN4UlFVRlJZU3hGUVVGaFVpeEhRVUZUU3l4SlFVRmhMRVZCUVVsc1JTeG5Ra0ZCWjBKM1JDeFJRVUZSWVN4RlFVRmhMRk5CUVZWR0xFbEJRVmtzUlVGQlNXNUZMR2RDUVVGblFuZEVMRkZCUVZGaExFVkJRV0VzWVVGdlFqRk9MRTlCYUVKQlRpeEZRVUZSUkN4WlFVRmpRU3hGUVVOMFFrTXNSVUZCVVRWRUxGVkJRVmtzUTBGRGJFSlBMR1ZCUVdkQ2FrSXNZVUZCWVZJc1VVRkROMEpwUml4VlFVRlhNVVVzVjBGQlYxQXNVVUZCVVc5Q0xFdEJRemxDT0VRc1UwRkJWVE5GTEZkQlFWZFFMRkZCUVZGdlFpeE5RVVV2UWpCRUxFVkJRVkUzUXl4aFFVRmxMRU5CUTNKQ1VpeGxRVUZuUW10RUxFVkJRMmhDVFN4WFFVRlhMRVZCUTFoRExGVkJRVlVzUjBGRldrb3NSVUZCVVU4c1lVRkJaU3hEUVVOeVFteEVMRmRCUVZrMVFpeFhRVUZYVUN4UlFVRlJiME1zVFVGQlRTeERRVU51UTBNc1VVRkJVemxDTEZkQlFWZFFMRkZCUVZGblF5eFZRVWQ2UWpoRExFVkJSMVJNTEhGQ1FVRnhRbUVzVFVGQlVUTkZMR0ZCUVdGWUxGRkJRekZEZVVVc2NVSkJRWEZDWXl4UFFVRlRNVVVzWTBGQlkySXNVVUZETlVONVJTeHhRa0ZCY1VKbExFOUJRVk14UlN4alFVRmpaQ3hSUVVNMVEzbEZMSEZDUVVGeFFtZENMRk5CUVZjM1JTeG5Ra0ZCWjBKYUxGRkJRMmhFZVVVc2NVSkJRWEZDYVVJc1MwRkJUMmhDTEc5Q1FVRnZRaXhOUVVGUExFOUJRVkVzWTBGREwwUkVMSEZDUVVGeFFtdENMRXRCUVU5cVFpeHZRa0ZCYjBJc1NVRkJTeXhQUVVGUkxHTkJRemRFUkN4eFFrRkJjVUp0UWl4TFFVRlBiRUlzYjBKQlFXOUNMRWxCUVVzc1QwRkJVU3hqUVVVM1JDeEpRVUZKYlVJc1ZVRkJWeXhGUVVGSk9VVXNaMEpCUVdkQ0swVXNWVUZCVlN4RFFVRkRPVVVzWVVGQllXMUVMRTFCUVUwMFFpeFJRVUZUTDBVc1lVRkJZVzFFTEUxQlFVMURMRk5CUVZWd1JDeGhRVUZoYlVRc1RVRkJUVFJDTEZGQlFWTjBRaXh6UWtGRmJra3pSU3hSUVVGUlJTeFJRVUZWTmtZc1UwRkRiRUpITEU5QlFVOXNSeXhSUVVGVlFTeFJRVUZwUWlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDMWliMjkwYzNSeVlYQXZiR2xpTDA1aGRtSmhjaTVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0PXJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO2V4cG9ydHMuX19lc01vZHVsZT0hMCxleHBvcnRzLmRlZmF1bHQ9dm9pZCAwO3ZhciBfZXh0ZW5kczI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSksX2luaGVyaXRzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKSxfY2xhc3NuYW1lcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKSxfcmVhY3Q9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpLF9wcm9wVHlwZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSksX2Jvb3RzdHJhcFV0aWxzPXJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpLGNvbnRleHRUeXBlcz17JGJzX25hdmJhcjpfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe2JzQ2xhc3M6X3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ30pfSxOYXZiYXJCcmFuZD1mdW5jdGlvbihlKXtmdW5jdGlvbiBOYXZiYXJCcmFuZCgpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4oMCxfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoTmF2YmFyQnJhbmQsZSksTmF2YmFyQnJhbmQucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXt2YXIgZT10aGlzLnByb3BzLHI9ZS5jbGFzc05hbWUsdD1lLmNoaWxkcmVuLGE9KDAsX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKGUsW1wiY2xhc3NOYW1lXCIsXCJjaGlsZHJlblwiXSkscz10aGlzLmNvbnRleHQuJGJzX25hdmJhcnx8e2JzQ2xhc3M6XCJuYXZiYXJcIn0sbz0oMCxfYm9vdHN0cmFwVXRpbHMucHJlZml4KShzLFwiYnJhbmRcIik7cmV0dXJuIF9yZWFjdC5kZWZhdWx0LmlzVmFsaWRFbGVtZW50KHQpP19yZWFjdC5kZWZhdWx0LmNsb25lRWxlbWVudCh0LHtjbGFzc05hbWU6KDAsX2NsYXNzbmFtZXMuZGVmYXVsdCkodC5wcm9wcy5jbGFzc05hbWUscixvKX0pOl9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LGEse2NsYXNzTmFtZTooMCxfY2xhc3NuYW1lcy5kZWZhdWx0KShyLG8pfSksdCl9LE5hdmJhckJyYW5kfShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO05hdmJhckJyYW5kLmNvbnRleHRUeXBlcz1jb250ZXh0VHlwZXM7dmFyIF9kZWZhdWx0PU5hdmJhckJyYW5kO2V4cG9ydHMuZGVmYXVsdD1fZGVmYXVsdCxtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJazVoZG1KaGNrSnlZVzVrTG1weklsMHNJbTVoYldWeklqcGJJbDlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRaUxDSnlaWEYxYVhKbElpd2laWGh3YjNKMGN5SXNJbDlmWlhOTmIyUjFiR1VpTENKa1pXWmhkV3gwSWl3aVgyVjRkR1Z1WkhNeUlpd2lYMjlpYW1WamRGZHBkR2h2ZFhSUWNtOXdaWEowYVdWelRHOXZjMlV5SWl3aVgybHVhR1Z5YVhSelRHOXZjMlV5SWl3aVgyTnNZWE56Ym1GdFpYTWlMQ0pmY21WaFkzUWlMQ0pmY0hKdmNGUjVjR1Z6SWl3aVgySnZiM1J6ZEhKaGNGVjBhV3h6SWl3aVkyOXVkR1Y0ZEZSNWNHVnpJaXdpSkdKelgyNWhkbUpoY2lJc0luTm9ZWEJsSWl3aVluTkRiR0Z6Y3lJc0luTjBjbWx1WnlJc0lrNWhkbUpoY2tKeVlXNWtJaXdpWDFKbFlXTjBKRU52YlhCdmJtVnVkQ0lzSW1Gd2NHeDVJaXdpZEdocGN5SXNJbUZ5WjNWdFpXNTBjeUlzSW5CeWIzUnZkSGx3WlNJc0luSmxibVJsY2lJc0lsOTBhR2x6SkhCeWIzQnpJaXdpY0hKdmNITWlMQ0pqYkdGemMwNWhiV1VpTENKamFHbHNaSEpsYmlJc0ltNWhkbUpoY2xCeWIzQnpJaXdpWTI5dWRHVjRkQ0lzSW1KelEyeGhjM05PWVcxbElpd2ljSEpsWm1sNElpd2lhWE5XWVd4cFpFVnNaVzFsYm5RaUxDSmpiRzl1WlVWc1pXMWxiblFpTENKamNtVmhkR1ZGYkdWdFpXNTBJaXdpUTI5dGNHOXVaVzUwSWl3aVgyUmxabUYxYkhRaUxDSnRiMlIxYkdVaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJSVUVzU1VGQlNVRXNkVUpCUVhsQ1F5eFJRVUZSTEhkRVFVVnlRME1zVVVGQlVVTXNXVUZCWVN4RlFVTnlRa1FzVVVGQlVVVXNZVUZCVlN4RlFVVnNRaXhKUVVGSlF5eFZRVUZaVEN4MVFrRkJkVUpETEZGQlFWRXNNa05CUlRORFN5d3JRa0ZCYVVOT0xIVkNRVUYxUWtNc1VVRkJVU3huUlVGRmFFVk5MR2RDUVVGclFsQXNkVUpCUVhWQ1F5eFJRVUZSTEdsRVFVVnFSRThzV1VGQlkxSXNkVUpCUVhWQ1F5eFJRVUZSTEdWQlJUZERVU3hQUVVGVFZDeDFRa0ZCZFVKRExGRkJRVkVzVlVGRmVFTlRMRmRCUVdGV0xIVkNRVUYxUWtNc1VVRkJVU3hsUVVVMVExVXNaMEpCUVd0Q1ZpeFJRVUZSTERCQ1FVVXhRbGNzWVVGQlpTeERRVU5xUWtNc1YwRkJXVWdzVjBGQlYwNHNVVUZCVVZVc1RVRkJUU3hEUVVOdVEwTXNVVUZCVTB3c1YwRkJWMDRzVVVGQlVWa3NWVUZKTlVKRExGbEJSVW9zVTBGQlZVTXNSMEZIVWl4VFFVRlRSQ3hqUVVOUUxFOUJRVTlETEVWQlFXbENReXhOUVVGTlF5eExRVUZOUXl4WlFVRmpSQ3hMUVRCQ2NFUXNUMEUzUWtFc1JVRkJTV0lzWjBKQlFXZENTQ3hUUVVGVFlTeFpRVUZoUXl4SFFVMDNRa1FzV1VGQldVc3NWVUZGYkVKRExFOUJRVk1zVTBGQlUwRXNVMEZEZGtJc1NVRkJTVU1zUlVGQlkwb3NTMEZCUzBzc1RVRkRia0pETEVWQlFWbEdMRVZCUVZsRkxGVkJRM2hDUXl4RlFVRlhTQ3hGUVVGWlJ5eFRRVU4yUWtZc1IwRkJVU3hGUVVGSmJrSXNLMEpCUVN0Q1JpeFRRVUZUYjBJc1JVRkJZU3hEUVVGRExGbEJRV0VzWVVGREwwVkpMRVZCUVdOU0xFdEJRVXRUTEZGQlFWRm9RaXhaUVVGakxFTkJRek5EUlN4UlFVRlRMRlZCUlZCbExFZEJRV01zUlVGQlNXNUNMR2RDUVVGblFtOUNMRkZCUVZGSUxFVkJRV0VzVTBGRk0wUXNUMEZCU1c1Q0xFOUJRVTlNTEZGQlFWRTBRaXhsUVVGbFRDeEhRVU42UW14Q0xFOUJRVTlNTEZGQlFWRTJRaXhoUVVGaFRpeEZRVUZWTEVOQlF6TkRSQ3hYUVVGWExFVkJRVWxzUWl4WlFVRlpTaXhUUVVGVGRVSXNSVUZCVTBZc1RVRkJUVU1zVlVGQlYwRXNSVUZCVjBrc1MwRkpkRVZ5UWl4UFFVRlBUQ3hSUVVGUk9FSXNZMEZCWXl4UlFVRlJMRVZCUVVrM1FpeFZRVUZWUkN4VFFVRlRMRWRCUVVseFFpeEZRVUZQTEVOQlF6VkZReXhYUVVGWExFVkJRVWxzUWl4WlFVRlpTaXhUUVVGVGMwSXNSVUZCVjBrc1MwRkROME5JTEVsQlIwTldMRmxCT1VKVUxFTkJLMEpGVWl4UFFVRlBUQ3hSUVVGUkswSXNWMEZGYWtKc1FpeFpRVUZaVEN4aFFVRmxRU3hoUVVNelFpeEpRVUZKZDBJc1UwRkJWMjVDTEZsQlEyWm1MRkZCUVZGRkxGRkJRVlZuUXl4VFFVTnNRa01zVDBGQlQyNURMRkZCUVZWQkxGRkJRV2xDSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdOMExXSnZiM1J6ZEhKaGNDOXNhV0l2VG1GMlltRnlRbkpoYm1RdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9leHRlbmRzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSksX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9yZWFjdD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSksX3Byb3BUeXBlcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKSxfQ29sbGFwc2U9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Db2xsYXBzZVwiKSksX2Jvb3RzdHJhcFV0aWxzPXJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpLGNvbnRleHRUeXBlcz17JGJzX25hdmJhcjpfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe2JzQ2xhc3M6X3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxleHBhbmRlZDpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbH0pfSxOYXZiYXJDb2xsYXBzZT1mdW5jdGlvbihlKXtmdW5jdGlvbiBOYXZiYXJDb2xsYXBzZSgpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4oMCxfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoTmF2YmFyQ29sbGFwc2UsZSksTmF2YmFyQ29sbGFwc2UucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXt2YXIgZT10aGlzLnByb3BzLHI9ZS5jaGlsZHJlbix0PSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShlLFtcImNoaWxkcmVuXCJdKSxhPXRoaXMuY29udGV4dC4kYnNfbmF2YmFyfHx7YnNDbGFzczpcIm5hdmJhclwifSxvPSgwLF9ib290c3RyYXBVdGlscy5wcmVmaXgpKGEsXCJjb2xsYXBzZVwiKTtyZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfQ29sbGFwc2UuZGVmYXVsdCwoMCxfZXh0ZW5kczIuZGVmYXVsdCkoe2luOmEuZXhwYW5kZWR9LHQpLF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7Y2xhc3NOYW1lOm99LHIpKX0sTmF2YmFyQ29sbGFwc2V9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7TmF2YmFyQ29sbGFwc2UuY29udGV4dFR5cGVzPWNvbnRleHRUeXBlczt2YXIgX2RlZmF1bHQ9TmF2YmFyQ29sbGFwc2U7ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrNWhkbUpoY2tOdmJHeGhjSE5sTG1weklsMHNJbTVoYldWeklqcGJJbDlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRaUxDSnlaWEYxYVhKbElpd2laWGh3YjNKMGN5SXNJbDlmWlhOTmIyUjFiR1VpTENKa1pXWmhkV3gwSWl3aVgyVjRkR1Z1WkhNeUlpd2lYMjlpYW1WamRGZHBkR2h2ZFhSUWNtOXdaWEowYVdWelRHOXZjMlV5SWl3aVgybHVhR1Z5YVhSelRHOXZjMlV5SWl3aVgzSmxZV04wSWl3aVgzQnliM0JVZVhCbGN5SXNJbDlEYjJ4c1lYQnpaU0lzSWw5aWIyOTBjM1J5WVhCVmRHbHNjeUlzSW1OdmJuUmxlSFJVZVhCbGN5SXNJaVJpYzE5dVlYWmlZWElpTENKemFHRndaU0lzSW1KelEyeGhjM01pTENKemRISnBibWNpTENKbGVIQmhibVJsWkNJc0ltSnZiMndpTENKT1lYWmlZWEpEYjJ4c1lYQnpaU0lzSWw5U1pXRmpkQ1JEYjIxd2IyNWxiblFpTENKaGNIQnNlU0lzSW5Sb2FYTWlMQ0poY21kMWJXVnVkSE1pTENKd2NtOTBiM1I1Y0dVaUxDSnlaVzVrWlhJaUxDSmZkR2hwY3lSd2NtOXdjeUlzSW5CeWIzQnpJaXdpWTJocGJHUnlaVzRpTENKdVlYWmlZWEpRY205d2N5SXNJbU52Ym5SbGVIUWlMQ0ppYzBOc1lYTnpUbUZ0WlNJc0luQnlaV1pwZUNJc0ltTnlaV0YwWlVWc1pXMWxiblFpTENKcGJpSXNJbU5zWVhOelRtRnRaU0lzSWtOdmJYQnZibVZ1ZENJc0lsOWtaV1poZFd4MElpd2liVzlrZFd4bElsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVVZCTEVsQlFVbEJMSFZDUVVGNVFrTXNVVUZCVVN4M1JFRkZja05ETEZGQlFWRkRMRmxCUVdFc1JVRkRja0pFTEZGQlFWRkZMR0ZCUVZVc1JVRkZiRUlzU1VGQlNVTXNWVUZCV1V3c2RVSkJRWFZDUXl4UlFVRlJMREpEUVVVelEwc3NLMEpCUVdsRFRpeDFRa0ZCZFVKRExGRkJRVkVzWjBWQlJXaEZUU3huUWtGQmEwSlFMSFZDUVVGMVFrTXNVVUZCVVN4cFJFRkZha1JQTEU5QlFWTlNMSFZDUVVGMVFrTXNVVUZCVVN4VlFVVjRRMUVzVjBGQllWUXNkVUpCUVhWQ1F5eFJRVUZSTEdWQlJUVkRVeXhWUVVGWlZpeDFRa0ZCZFVKRExGRkJRVkVzWlVGRk0wTlZMR2RDUVVGclFsWXNVVUZCVVN3d1FrRkZNVUpYTEdGQlFXVXNRMEZEYWtKRExGZEJRVmxLTEZkQlFWZE1MRkZCUVZGVkxFMUJRVTBzUTBGRGJrTkRMRkZCUVZOT0xGZEJRVmRNTEZGQlFWRlpMRTlCUXpWQ1F5eFRRVUZWVWl4WFFVRlhUQ3hSUVVGUll5eFJRVWszUWtNc1pVRkZTaXhUUVVGVlF5eEhRVWRTTEZOQlFWTkVMR2xDUVVOUUxFOUJRVTlETEVWQlFXbENReXhOUVVGTlF5eExRVUZOUXl4WlFVRmpSQ3hMUVc5Q2NFUXNUMEYyUWtFc1JVRkJTV1lzWjBKQlFXZENTQ3hUUVVGVFpTeGxRVUZuUWtNc1IwRk5hRU5FTEdWQlFXVkxMRlZCUlhKQ1F5eFBRVUZUTEZOQlFWTkJMRk5CUTNaQ0xFbEJRVWxETEVWQlFXTktMRXRCUVV0TExFMUJRMjVDUXl4RlFVRlhSaXhGUVVGWlJTeFRRVU4yUWtRc1IwRkJVU3hGUVVGSmNrSXNLMEpCUVN0Q1JpeFRRVUZUYzBJc1JVRkJZU3hEUVVGRExHRkJRMnhGUnl4RlFVRmpVQ3hMUVVGTFVTeFJRVUZSYWtJc1dVRkJZeXhEUVVNelEwVXNVVUZCVXl4VlFVVlFaMElzUjBGQll5eEZRVUZKY0VJc1owSkJRV2RDY1VJc1VVRkJVVWdzUlVGQllTeFpRVU16UkN4UFFVRlBja0lzVDBGQlQwb3NVVUZCVVRaQ0xHTkJRV04yUWl4VlFVRlZUaXhUUVVGVExFVkJRVWxETEZWQlFWVkVMRk5CUVZNc1EwRkROVVU0UWl4SFFVRkpUQ3hGUVVGWldpeFZRVU5tVlN4SFFVRlJia0lzVDBGQlQwb3NVVUZCVVRaQ0xHTkJRV01zVFVGQlR5eERRVU0zUTBVc1ZVRkJWMG9zUjBGRFZrZ3NTMEZIUlZRc1pVRjRRbFFzUTBGNVFrVllMRTlCUVU5S0xGRkJRVkZuUXl4WFFVVnFRbXBDTEdWQlFXVlFMR0ZCUVdWQkxHRkJRemxDTEVsQlFVbDVRaXhUUVVGWGJFSXNaVUZEWm1wQ0xGRkJRVkZGTEZGQlFWVnBReXhUUVVOc1FrTXNUMEZCVDNCRExGRkJRVlZCTEZGQlFXbENJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwzSmxZV04wTFdKdmIzUnpkSEpoY0M5c2FXSXZUbUYyWW1GeVEyOXNiR0Z3YzJVdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9leHRlbmRzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSksX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9jbGFzc25hbWVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpLF9yZWFjdD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSksX3Byb3BUeXBlcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKSxfYm9vdHN0cmFwVXRpbHM9cmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIiksY29udGV4dFR5cGVzPXskYnNfbmF2YmFyOl9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7YnNDbGFzczpfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nfSl9LE5hdmJhckhlYWRlcj1mdW5jdGlvbihlKXtmdW5jdGlvbiBOYXZiYXJIZWFkZXIoKXtyZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9cmV0dXJuKDAsX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKE5hdmJhckhlYWRlcixlKSxOYXZiYXJIZWFkZXIucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXt2YXIgZT10aGlzLnByb3BzLHI9ZS5jbGFzc05hbWUsdD0oMCxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoZSxbXCJjbGFzc05hbWVcIl0pLGE9dGhpcy5jb250ZXh0LiRic19uYXZiYXJ8fHtic0NsYXNzOlwibmF2YmFyXCJ9LHM9KDAsX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkoYSxcImhlYWRlclwiKTtyZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSx0LHtjbGFzc05hbWU6KDAsX2NsYXNzbmFtZXMuZGVmYXVsdCkocixzKX0pKX0sTmF2YmFySGVhZGVyfShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO05hdmJhckhlYWRlci5jb250ZXh0VHlwZXM9Y29udGV4dFR5cGVzO3ZhciBfZGVmYXVsdD1OYXZiYXJIZWFkZXI7ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrNWhkbUpoY2tobFlXUmxjaTVxY3lKZExDSnVZVzFsY3lJNld5SmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwSWl3aWNtVnhkV2x5WlNJc0ltVjRjRzl5ZEhNaUxDSmZYMlZ6VFc5a2RXeGxJaXdpWkdWbVlYVnNkQ0lzSWw5bGVIUmxibVJ6TWlJc0lsOXZZbXBsWTNSWGFYUm9iM1YwVUhKdmNHVnlkR2xsYzB4dmIzTmxNaUlzSWw5cGJtaGxjbWwwYzB4dmIzTmxNaUlzSWw5amJHRnpjMjVoYldWeklpd2lYM0psWVdOMElpd2lYM0J5YjNCVWVYQmxjeUlzSWw5aWIyOTBjM1J5WVhCVmRHbHNjeUlzSW1OdmJuUmxlSFJVZVhCbGN5SXNJaVJpYzE5dVlYWmlZWElpTENKemFHRndaU0lzSW1KelEyeGhjM01pTENKemRISnBibWNpTENKT1lYWmlZWEpJWldGa1pYSWlMQ0pmVW1WaFkzUWtRMjl0Y0c5dVpXNTBJaXdpWVhCd2JIa2lMQ0owYUdseklpd2lZWEpuZFcxbGJuUnpJaXdpY0hKdmRHOTBlWEJsSWl3aWNtVnVaR1Z5SWl3aVgzUm9hWE1rY0hKdmNITWlMQ0p3Y205d2N5SXNJbU5zWVhOelRtRnRaU0lzSW01aGRtSmhjbEJ5YjNCeklpd2lZMjl1ZEdWNGRDSXNJbUp6UTJ4aGMzTk9ZVzFsSWl3aWNISmxabWw0SWl3aVkzSmxZWFJsUld4bGJXVnVkQ0lzSWtOdmJYQnZibVZ1ZENJc0lsOWtaV1poZFd4MElpd2liVzlrZFd4bElsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVVZCTEVsQlFVbEJMSFZDUVVGNVFrTXNVVUZCVVN4M1JFRkZja05ETEZGQlFWRkRMRmxCUVdFc1JVRkRja0pFTEZGQlFWRkZMR0ZCUVZVc1JVRkZiRUlzU1VGQlNVTXNWVUZCV1V3c2RVSkJRWFZDUXl4UlFVRlJMREpEUVVVelEwc3NLMEpCUVdsRFRpeDFRa0ZCZFVKRExGRkJRVkVzWjBWQlJXaEZUU3huUWtGQmEwSlFMSFZDUVVGMVFrTXNVVUZCVVN4cFJFRkZha1JQTEZsQlFXTlNMSFZDUVVGMVFrTXNVVUZCVVN4bFFVVTNRMUVzVDBGQlUxUXNkVUpCUVhWQ1F5eFJRVUZSTEZWQlJYaERVeXhYUVVGaFZpeDFRa0ZCZFVKRExGRkJRVkVzWlVGRk5VTlZMR2RDUVVGclFsWXNVVUZCVVN3d1FrRkZNVUpYTEdGQlFXVXNRMEZEYWtKRExGZEJRVmxJTEZkQlFWZE9MRkZCUVZGVkxFMUJRVTBzUTBGRGJrTkRMRkZCUVZOTUxGZEJRVmRPTEZGQlFWRlpMRlZCU1RWQ1F5eGhRVVZLTEZOQlFWVkRMRWRCUjFJc1UwRkJVMFFzWlVGRFVDeFBRVUZQUXl4RlFVRnBRa01zVFVGQlRVTXNTMEZCVFVNc1dVRkJZMFFzUzBGclFuQkVMRTlCY2tKQkxFVkJRVWxpTEdkQ1FVRm5Ra2dzVTBGQlUyRXNZVUZCWTBNc1IwRk5PVUpFTEdGQlFXRkxMRlZCUlc1Q1F5eFBRVUZUTEZOQlFWTkJMRk5CUTNaQ0xFbEJRVWxETEVWQlFXTktMRXRCUVV0TExFMUJRMjVDUXl4RlFVRlpSaXhGUVVGWlJTeFZRVU40UWtRc1IwRkJVU3hGUVVGSmJrSXNLMEpCUVN0Q1JpeFRRVUZUYjBJc1JVRkJZU3hEUVVGRExHTkJRMnhGUnl4RlFVRmpVQ3hMUVVGTFVTeFJRVUZSWml4WlFVRmpMRU5CUXpORFJTeFJRVUZUTEZWQlJWQmpMRWRCUVdNc1JVRkJTV3hDTEdkQ1FVRm5RbTFDTEZGQlFWRklMRVZCUVdFc1ZVRkRNMFFzVDBGQlQyeENMRTlCUVU5TUxGRkJRVkV5UWl4alFVRmpMRTlCUVU4c1JVRkJTVEZDTEZWQlFWVkVMRk5CUVZNc1IwRkJTWEZDTEVWQlFVOHNRMEZETTBWRExGZEJRVmNzUlVGQlNXeENMRmxCUVZsS0xGTkJRVk56UWl4RlFVRlhSeXhQUVVrMVExb3NZVUYwUWxRc1EwRjFRa1ZTTEU5QlFVOU1MRkZCUVZFMFFpeFhRVVZxUW1Zc1lVRkJZVXdzWVVGQlpVRXNZVUZETlVJc1NVRkJTWEZDTEZOQlFWZG9RaXhoUVVObVppeFJRVUZSUlN4UlFVRlZOa0lzVTBGRGJFSkRMRTlCUVU5b1F5eFJRVUZWUVN4UlFVRnBRaUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEMxaWIyOTBjM1J5WVhBdmJHbGlMMDVoZG1KaGNraGxZV1JsY2k1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PXZvaWQgMDt2YXIgX2V4dGVuZHMyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKSxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpLF9pbmhlcml0c0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSksX2NsYXNzbmFtZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKSxfcHJvcFR5cGVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpLF9ib290c3RyYXBVdGlscz1yZXF1aXJlKFwiLi91dGlscy9ib290c3RyYXBVdGlsc1wiKSxfY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uXCIpKSxwcm9wVHlwZXM9e29uQ2xpY2s6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsY2hpbGRyZW46X3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGV9LGNvbnRleHRUeXBlcz17JGJzX25hdmJhcjpfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe2JzQ2xhc3M6X3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxleHBhbmRlZDpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxvblRvZ2dsZTpfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYy5pc1JlcXVpcmVkfSl9LE5hdmJhclRvZ2dsZT1mdW5jdGlvbihlKXtmdW5jdGlvbiBOYXZiYXJUb2dnbGUoKXtyZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9cmV0dXJuKDAsX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKE5hdmJhclRvZ2dsZSxlKSxOYXZiYXJUb2dnbGUucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXt2YXIgZT10aGlzLnByb3BzLHQ9ZS5vbkNsaWNrLHI9ZS5jbGFzc05hbWUsYT1lLmNoaWxkcmVuLG89KDAsX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKGUsW1wib25DbGlja1wiLFwiY2xhc3NOYW1lXCIsXCJjaGlsZHJlblwiXSkscz10aGlzLmNvbnRleHQuJGJzX25hdmJhcnx8e2JzQ2xhc3M6XCJuYXZiYXJcIn0sbD0oMCxfZXh0ZW5kczIuZGVmYXVsdCkoe3R5cGU6XCJidXR0b25cIn0sbyx7b25DbGljazooMCxfY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uLmRlZmF1bHQpKHQscy5vblRvZ2dsZSksY2xhc3NOYW1lOigwLF9jbGFzc25hbWVzLmRlZmF1bHQpKHIsKDAsX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkocyxcInRvZ2dsZVwiKSwhcy5leHBhbmRlZCYmXCJjb2xsYXBzZWRcIil9KTtyZXR1cm4gYT9fcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsbCxhKTpfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsbCxfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLHtjbGFzc05hbWU6XCJzci1vbmx5XCJ9LFwiVG9nZ2xlIG5hdmlnYXRpb25cIiksX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInNwYW5cIix7Y2xhc3NOYW1lOlwiaWNvbi1iYXJcIn0pLF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIse2NsYXNzTmFtZTpcImljb24tYmFyXCJ9KSxfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLHtjbGFzc05hbWU6XCJpY29uLWJhclwifSkpfSxOYXZiYXJUb2dnbGV9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7TmF2YmFyVG9nZ2xlLnByb3BUeXBlcz1wcm9wVHlwZXMsTmF2YmFyVG9nZ2xlLmNvbnRleHRUeXBlcz1jb250ZXh0VHlwZXM7dmFyIF9kZWZhdWx0PU5hdmJhclRvZ2dsZTtleHBvcnRzLmRlZmF1bHQ9X2RlZmF1bHQsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWs1aGRtSmhjbFJ2WjJkc1pTNXFjeUpkTENKdVlXMWxjeUk2V3lKZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBJaXdpY21WeGRXbHlaU0lzSW1WNGNHOXlkSE1pTENKZlgyVnpUVzlrZFd4bElpd2laR1ZtWVhWc2RDSXNJbDlsZUhSbGJtUnpNaUlzSWw5dlltcGxZM1JYYVhSb2IzVjBVSEp2Y0dWeWRHbGxjMHh2YjNObE1pSXNJbDlwYm1obGNtbDBjMHh2YjNObE1pSXNJbDlqYkdGemMyNWhiV1Z6SWl3aVgzSmxZV04wSWl3aVgzQnliM0JVZVhCbGN5SXNJbDlpYjI5MGMzUnlZWEJWZEdsc2N5SXNJbDlqY21WaGRHVkRhR0ZwYm1Wa1JuVnVZM1JwYjI0aUxDSndjbTl3Vkhsd1pYTWlMQ0p2YmtOc2FXTnJJaXdpWm5WdVl5SXNJbU5vYVd4a2NtVnVJaXdpYm05a1pTSXNJbU52Ym5SbGVIUlVlWEJsY3lJc0lpUmljMTl1WVhaaVlYSWlMQ0p6YUdGd1pTSXNJbUp6UTJ4aGMzTWlMQ0p6ZEhKcGJtY2lMQ0psZUhCaGJtUmxaQ0lzSW1KdmIyd2lMQ0p2YmxSdloyZHNaU0lzSW1selVtVnhkV2x5WldRaUxDSk9ZWFppWVhKVWIyZG5iR1VpTENKZlVtVmhZM1FrUTI5dGNHOXVaVzUwSWl3aVlYQndiSGtpTENKMGFHbHpJaXdpWVhKbmRXMWxiblJ6SWl3aWNISnZkRzkwZVhCbElpd2ljbVZ1WkdWeUlpd2lYM1JvYVhNa2NISnZjSE1pTENKd2NtOXdjeUlzSW1Oc1lYTnpUbUZ0WlNJc0ltNWhkbUpoY2xCeWIzQnpJaXdpWTI5dWRHVjRkQ0lzSW1KMWRIUnZibEJ5YjNCeklpd2lkSGx3WlNJc0luQnlaV1pwZUNJc0ltTnlaV0YwWlVWc1pXMWxiblFpTENKRGIyMXdiMjVsYm5RaUxDSmZaR1ZtWVhWc2RDSXNJbTF2WkhWc1pTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZGUVN4SlFVRkpRU3gxUWtGQmVVSkRMRkZCUVZFc2QwUkJSWEpEUXl4UlFVRlJReXhaUVVGaExFVkJRM0pDUkN4UlFVRlJSU3hoUVVGVkxFVkJSV3hDTEVsQlFVbERMRlZCUVZsTUxIVkNRVUYxUWtNc1VVRkJVU3d5UTBGRk0wTkxMQ3RDUVVGcFEwNHNkVUpCUVhWQ1F5eFJRVUZSTEdkRlFVVm9SVTBzWjBKQlFXdENVQ3gxUWtGQmRVSkRMRkZCUVZFc2FVUkJSV3BFVHl4WlFVRmpVaXgxUWtGQmRVSkRMRkZCUVZFc1pVRkZOME5STEU5QlFWTlVMSFZDUVVGMVFrTXNVVUZCVVN4VlFVVjRRMU1zVjBGQllWWXNkVUpCUVhWQ1F5eFJRVUZSTEdWQlJUVkRWU3huUWtGQmEwSldMRkZCUVZFc01FSkJSVEZDVnl4MVFrRkJlVUphTEhWQ1FVRjFRa01zVVVGQlVTeHJRMEZGZUVSWkxGVkJRVmtzUTBGRFpFTXNVVUZCVTBvc1YwRkJWMDRzVVVGQlVWY3NTMEZMTlVKRExGTkJRVlZPTEZkQlFWZE9MRkZCUVZGaExFMUJSVE5DUXl4aFFVRmxMRU5CUTJwQ1F5eFhRVUZaVkN4WFFVRlhUaXhSUVVGUlowSXNUVUZCVFN4RFFVTnVRME1zVVVGQlUxZ3NWMEZCVjA0c1VVRkJVV3RDTEU5QlF6VkNReXhUUVVGVllpeFhRVUZYVGl4UlFVRlJiMElzUzBGRE4wSkRMRk5CUVZWbUxGZEJRVmRPTEZGQlFWRlhMRXRCUVV0WExHTkJTV3hEUXl4aFFVVktMRk5CUVZWRExFZEJSMUlzVTBGQlUwUXNaVUZEVUN4UFFVRlBReXhGUVVGcFFrTXNUVUZCVFVNc1MwRkJUVU1zV1VGQlkwUXNTMEZ2UTNCRUxFOUJka05CTEVWQlFVbDJRaXhuUWtGQlowSklMRk5CUVZOMVFpeGhRVUZqUXl4SFFVMDVRa1FzWVVGQllVc3NWVUZGYmtKRExFOUJRVk1zVTBGQlUwRXNVMEZEZGtJc1NVRkJTVU1zUlVGQlkwb3NTMEZCUzBzc1RVRkRia0p5UWl4RlFVRlZiMElzUlVGQldYQkNMRkZCUTNSQ2MwSXNSVUZCV1VZc1JVRkJXVVVzVlVGRGVFSndRaXhGUVVGWGEwSXNSVUZCV1d4Q0xGTkJRM1pDYlVJc1IwRkJVU3hGUVVGSk4wSXNLMEpCUVN0Q1JpeFRRVUZUT0VJc1JVRkJZU3hEUVVGRExGVkJRVmNzV1VGQllTeGhRVU14Umtjc1JVRkJZMUFzUzBGQlMxRXNVVUZCVVc1Q0xGbEJRV01zUTBGRE0wTkZMRkZCUVZNc1ZVRkZVR3RDTEVkQlFXTXNSVUZCU1d4RExGVkJRVlZFTEZOQlFWTXNRMEZEZGtOdlF5eExRVUZOTEZWQlEweE1MRVZCUVU4c1EwRkRVbkpDTEZOQlFWTXNSVUZCU1VZc2RVSkJRWFZDVWl4VFFVRlRWU3hGUVVGVGRVSXNSVUZCV1Zvc1ZVRkRiRVZYTEZkQlFWY3NSVUZCU1RWQ0xGbEJRVmxLTEZOQlFWTm5ReXhIUVVGWExFVkJRVWw2UWl4blFrRkJaMEk0UWl4UlFVRlJTaXhGUVVGaExGZEJRVmxCTEVWQlFWbGtMRlZCUVZrc1pVRkhPVWdzVDBGQlNWQXNSVUZEUzFBc1QwRkJUMHdzVVVGQlVYTkRMR05CUVdNc1UwRkJWVWdzUlVGQllYWkNMRWRCUjNSRVVDeFBRVUZQVEN4UlFVRlJjME1zWTBGQll5eFRRVUZWU0N4RlFVRmhPVUlzVDBGQlQwd3NVVUZCVVhORExHTkJRV01zVDBGQlVTeERRVU01Ums0c1ZVRkJWeXhYUVVOV0xIRkNRVUZ6UWpOQ0xFOUJRVTlNTEZGQlFWRnpReXhqUVVGakxFOUJRVkVzUTBGRE5VUk9MRlZCUVZjc1lVRkRWRE5DTEU5QlFVOU1MRkZCUVZGelF5eGpRVUZqTEU5QlFWRXNRMEZEZGtOT0xGVkJRVmNzWVVGRFZETkNMRTlCUVU5TUxGRkJRVkZ6UXl4alFVRmpMRTlCUVZFc1EwRkRka05PTEZWQlFWY3NaVUZKVWxRc1lVRjRRMVFzUTBGNVEwVnNRaXhQUVVGUFRDeFJRVUZSZFVNc1YwRkZha0pvUWl4aFFVRmhaQ3hWUVVGWlFTeFZRVU42UW1Nc1lVRkJZVlFzWVVGQlpVRXNZVUZETlVJc1NVRkJTVEJDTEZOQlFWZHFRaXhoUVVObWVrSXNVVUZCVVVVc1VVRkJWWGRETEZOQlEyeENReXhQUVVGUE0wTXNVVUZCVlVFc1VVRkJhVUlpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdFltOXZkSE4wY21Gd0wyeHBZaTlPWVhaaVlYSlViMmRuYkdVdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkPXJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKSxfaW50ZXJvcFJlcXVpcmVEZWZhdWx0PXJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO2V4cG9ydHMuX19lc01vZHVsZT0hMCxleHBvcnRzLmRlZmF1bHQ9dm9pZCAwO3ZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpLF9pbmhlcml0c0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSksX2V4dGVuZHMyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKSxfY2xhc3NuYW1lcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKSxfcmVhY3Q9X2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKSxfcHJvcFR5cGVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpLF9PdmVybGF5PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LW92ZXJsYXlzL2xpYi9PdmVybGF5XCIpKSxfZWxlbWVudFR5cGU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlcy1leHRyYS9saWIvZWxlbWVudFR5cGVcIikpLF9GYWRlPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRmFkZVwiKSkscHJvcFR5cGVzPSgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSxfT3ZlcmxheS5kZWZhdWx0LnByb3BUeXBlcyx7c2hvdzpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxyb290Q2xvc2U6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsb25IaWRlOl9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLGFuaW1hdGlvbjpfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxfZWxlbWVudFR5cGUuZGVmYXVsdF0pLG9uRW50ZXI6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsb25FbnRlcmluZzpfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxvbkVudGVyZWQ6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsb25FeGl0Ol9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLG9uRXhpdGluZzpfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxvbkV4aXRlZDpfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxwbGFjZW1lbnQ6X3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFtcInRvcFwiLFwicmlnaHRcIixcImJvdHRvbVwiLFwibGVmdFwiXSl9KSxkZWZhdWx0UHJvcHM9e2FuaW1hdGlvbjpfRmFkZS5kZWZhdWx0LHJvb3RDbG9zZTohMSxzaG93OiExLHBsYWNlbWVudDpcInJpZ2h0XCJ9LE92ZXJsYXk9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gT3ZlcmxheSgpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4oMCxfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoT3ZlcmxheSxlKSxPdmVybGF5LnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIGUscj10aGlzLnByb3BzLHQ9ci5hbmltYXRpb24sbz1yLmNoaWxkcmVuLHA9KDAsX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKHIsW1wiYW5pbWF0aW9uXCIsXCJjaGlsZHJlblwiXSksYT0hMD09PXQ/X0ZhZGUuZGVmYXVsdDp0fHxudWxsO3JldHVybiBlPWE/bzooMCxfcmVhY3QuY2xvbmVFbGVtZW50KShvLHtjbGFzc05hbWU6KDAsX2NsYXNzbmFtZXMuZGVmYXVsdCkoby5wcm9wcy5jbGFzc05hbWUsXCJpblwiKX0pLF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX092ZXJsYXkuZGVmYXVsdCwoMCxfZXh0ZW5kczIuZGVmYXVsdCkoe30scCx7dHJhbnNpdGlvbjphfSksZSl9LE92ZXJsYXl9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7T3ZlcmxheS5wcm9wVHlwZXM9cHJvcFR5cGVzLE92ZXJsYXkuZGVmYXVsdFByb3BzPWRlZmF1bHRQcm9wczt2YXIgX2RlZmF1bHQ9T3ZlcmxheTtleHBvcnRzLmRlZmF1bHQ9X2RlZmF1bHQsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWs5MlpYSnNZWGt1YW5NaVhTd2libUZ0WlhNaU9sc2lYMmx1ZEdWeWIzQlNaWEYxYVhKbFYybHNaR05oY21RaUxDSnlaWEYxYVhKbElpd2lYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENJc0ltVjRjRzl5ZEhNaUxDSmZYMlZ6VFc5a2RXeGxJaXdpWkdWbVlYVnNkQ0lzSWw5dlltcGxZM1JYYVhSb2IzVjBVSEp2Y0dWeWRHbGxjMHh2YjNObE1pSXNJbDlwYm1obGNtbDBjMHh2YjNObE1pSXNJbDlsZUhSbGJtUnpNaUlzSWw5amJHRnpjMjVoYldWeklpd2lYM0psWVdOMElpd2lYM0J5YjNCVWVYQmxjeUlzSWw5UGRtVnliR0Y1SWl3aVgyVnNaVzFsYm5SVWVYQmxJaXdpWDBaaFpHVWlMQ0p3Y205d1ZIbHdaWE1pTENKemFHOTNJaXdpWW05dmJDSXNJbkp2YjNSRGJHOXpaU0lzSW05dVNHbGtaU0lzSW1aMWJtTWlMQ0poYm1sdFlYUnBiMjRpTENKdmJtVlBabFI1Y0dVaUxDSnZia1Z1ZEdWeUlpd2liMjVGYm5SbGNtbHVaeUlzSW05dVJXNTBaWEpsWkNJc0ltOXVSWGhwZENJc0ltOXVSWGhwZEdsdVp5SXNJbTl1UlhocGRHVmtJaXdpY0d4aFkyVnRaVzUwSWl3aWIyNWxUMllpTENKa1pXWmhkV3gwVUhKdmNITWlMQ0pQZG1WeWJHRjVJaXdpWDFKbFlXTjBKRU52YlhCdmJtVnVkQ0lzSW1Gd2NHeDVJaXdpZEdocGN5SXNJbUZ5WjNWdFpXNTBjeUlzSW5CeWIzUnZkSGx3WlNJc0luSmxibVJsY2lJc0ltTm9hV3hrSWl3aVgzUm9hWE1rY0hKdmNITWlMQ0p3Y205d2N5SXNJbU5vYVd4a2NtVnVJaXdpZEhKaGJuTnBkR2x2YmlJc0ltTnNiMjVsUld4bGJXVnVkQ0lzSW1Oc1lYTnpUbUZ0WlNJc0ltTnlaV0YwWlVWc1pXMWxiblFpTENKRGIyMXdiMjVsYm5RaUxDSmZaR1ZtWVhWc2RDSXNJbTF2WkhWc1pTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZGUVN4SlFVRkpRU3gzUWtGQk1FSkRMRkZCUVZFc2VVUkJSV3hEUXl4MVFrRkJlVUpFTEZGQlFWRXNkMFJCUlhKRFJTeFJRVUZSUXl4WlFVRmhMRVZCUTNKQ1JDeFJRVUZSUlN4aFFVRlZMRVZCUld4Q0xFbEJRVWxETEN0Q1FVRnBRMG9zZFVKQlFYVkNSQ3hSUVVGUkxHZEZRVVZvUlUwc1owSkJRV3RDVEN4MVFrRkJkVUpFTEZGQlFWRXNhVVJCUldwRVR5eFZRVUZaVGl4MVFrRkJkVUpFTEZGQlFWRXNNa05CUlRORFVTeFpRVUZqVUN4MVFrRkJkVUpFTEZGQlFWRXNaVUZGTjBOVExFOUJRVk5XTEhkQ1FVRjNRa01zVVVGQlVTeFZRVVY2UTFVc1YwRkJZVlFzZFVKQlFYVkNSQ3hSUVVGUkxHVkJSVFZEVnl4VFFVRlhWaXgxUWtGQmRVSkVMRkZCUVZFc0swSkJSVEZEV1N4aFFVRmxXQ3gxUWtGQmRVSkVMRkZCUVZFc2NVTkJSVGxEWVN4TlFVRlJXaXgxUWtGQmRVSkVMRkZCUVZFc1YwRkZka05qTEZkQlFWa3NSVUZCU1ZBc1ZVRkJWVWdzVTBGQlV5eEhRVUZKVHl4VFFVRlRVQ3hSUVVGUlZTeFZRVUZYTEVOQlNYSkZReXhMUVVGTlRDeFhRVUZYVGl4UlFVRlJXU3hMUVV0NlFrTXNWVUZCVjFBc1YwRkJWMDRzVVVGQlVWa3NTMEZOT1VKRkxFOUJRVkZTTEZkQlFWZE9MRkZCUVZGbExFdEJTek5DUXl4VlFVRlhWaXhYUVVGWFRpeFJRVUZSYVVJc1ZVRkJWU3hEUVVGRFdDeFhRVUZYVGl4UlFVRlJXU3hMUVVGTlNpeGhRVUZoVWl4VlFVc3ZSV3RDTEZGQlFWTmFMRmRCUVZkT0xGRkJRVkZsTEV0QlN6VkNTU3hYUVVGWllpeFhRVUZYVGl4UlFVRlJaU3hMUVVzdlFrc3NWVUZCVjJRc1YwRkJWMDRzVVVGQlVXVXNTMEZMT1VKTkxFOUJRVkZtTEZkQlFWZE9MRkZCUVZGbExFdEJTek5DVHl4VlFVRlhhRUlzVjBGQlYwNHNVVUZCVVdVc1MwRkxPVUpSTEZOQlFWVnFRaXhYUVVGWFRpeFJRVUZSWlN4TFFVczNRbE1zVlVGQlYyeENMRmRCUVZkT0xGRkJRVkY1UWl4TlFVRk5MRU5CUVVNc1RVRkJUeXhSUVVGVExGTkJRVlVzVjBGRk4wUkRMR0ZCUVdVc1EwRkRha0pXTEZWQlFWZFFMRTFCUVUxVUxGRkJRMnBDWVN4WFFVRlhMRVZCUTFoR0xFMUJRVTBzUlVGRFRtRXNWVUZCVnl4VFFVZFVSeXhSUVVWS0xGTkJRVlZETEVkQlIxSXNVMEZCVTBRc1ZVRkRVQ3hQUVVGUFF5eEZRVUZwUWtNc1RVRkJUVU1zUzBGQlRVTXNXVUZCWTBRc1MwRXdRbkJFTEU5Qk4wSkJMRVZCUVVrMVFpeG5Ra0ZCWjBKR0xGTkJRVk15UWl4UlFVRlRReXhIUVUxNlFrUXNVVUZCVVVzc1ZVRkZaRU1zVDBGQlV5eFRRVUZUUVN4VFFVTjJRaXhKUVV0SlF5eEZRVXhCUXl4RlFVRmpUQ3hMUVVGTFRTeE5RVU51UW5CQ0xFVkJRVmx0UWl4RlFVRlpia0lzVlVGRGVFSnhRaXhGUVVGWFJpeEZRVUZaUlN4VFFVTjJRa1FzUjBGQlVTeEZRVUZKYmtNc0swSkJRU3RDUkN4VFFVRlRiVU1zUlVGQllTeERRVUZETEZsQlFXRXNZVUZETDBWSExFZEJRVEpDTEVsQlFXUjBRaXhGUVVGeFFsQXNUVUZCVFZRc1VVRkJWV2RDTEVkQlFXRXNTMEZYYmtVc1QwRklSV3RDTEVWQlRFZEpMRVZCUzB0RUxFZEJTa0VzUlVGQlNXaERMRTlCUVU5clF5eGpRVUZqUml4RlFVRlZMRU5CUTNwRFJ5eFhRVUZYTEVWQlFVbHdReXhaUVVGWlNpeFRRVUZUY1VNc1JVRkJVMFFzVFVGQlRVa3NWVUZCVnl4UlFVMHpSRzVETEU5QlFVOU1MRkZCUVZGNVF5eGpRVUZqYkVNc1UwRkJVMUFzVTBGQlV5eEZRVUZKUnl4VlFVRlZTQ3hUUVVGVExFZEJRVWx2UXl4RlFVRlBMRU5CUTNSR1JTeFhRVUZaUVN4SlFVTldTaXhKUVVkRFVDeFJRVGxDVkN4RFFTdENSWFJDTEU5QlFVOU1MRkZCUVZFd1F5eFhRVVZxUW1Zc1VVRkJVV3BDTEZWQlFWbEJMRlZCUTNCQ2FVSXNVVUZCVVVRc1lVRkJaVUVzWVVGRGRrSXNTVUZCU1dsQ0xGTkJRVmRvUWl4UlFVTm1OMElzVVVGQlVVVXNVVUZCVlRKRExGTkJRMnhDUXl4UFFVRlBPVU1zVVVGQlZVRXNVVUZCYVVJaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Y21WaFkzUXRZbTl2ZEhOMGNtRndMMnhwWWk5UGRtVnliR0Y1TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpLF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSksX2luaGVyaXRzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKSxfYXNzZXJ0VGhpc0luaXRpYWxpemVkMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKSxfZXh0ZW5kczI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpLF9pc0FycmF5PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9hcnJheS9pcy1hcnJheVwiKSksX2NvbnRhaW5zPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRvbS1oZWxwZXJzL3F1ZXJ5L2NvbnRhaW5zXCIpKSxfcmVhY3Q9X2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKSxfcHJvcFR5cGVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpLF9yZWFjdERvbT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1kb21cIikpLF93YXJuaW5nPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIndhcm5pbmdcIikpLF9PdmVybGF5PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vT3ZlcmxheVwiKSksX2NyZWF0ZUNoYWluZWRGdW5jdGlvbj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZUNoYWluZWRGdW5jdGlvblwiKSk7ZnVuY3Rpb24gaXNPbmVPZihlLHQpe3JldHVybigwLF9pc0FycmF5LmRlZmF1bHQpKHQpP3QuaW5kZXhPZihlKT49MDplPT09dH12YXIgdHJpZ2dlclR5cGU9X3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFtcImNsaWNrXCIsXCJob3ZlclwiLFwiZm9jdXNcIl0pLHByb3BUeXBlcz0oMCxfZXh0ZW5kczIuZGVmYXVsdCkoe30sX092ZXJsYXkuZGVmYXVsdC5wcm9wVHlwZXMse3RyaWdnZXI6X3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbdHJpZ2dlclR5cGUsX3Byb3BUeXBlcy5kZWZhdWx0LmFycmF5T2YodHJpZ2dlclR5cGUpXSksZGVsYXk6X3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixkZWxheVNob3c6X3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixkZWxheUhpZGU6X3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixkZWZhdWx0T3ZlcmxheVNob3duOl9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLG92ZXJsYXk6X3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUuaXNSZXF1aXJlZCxvbkJsdXI6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsb25DbGljazpfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxvbkZvY3VzOl9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLG9uTW91c2VPdXQ6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsb25Nb3VzZU92ZXI6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsdGFyZ2V0Ol9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbbnVsbF0pLG9uSGlkZTpfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoW251bGxdKSxzaG93Ol9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbbnVsbF0pfSksZGVmYXVsdFByb3BzPXtkZWZhdWx0T3ZlcmxheVNob3duOiExLHRyaWdnZXI6W1wiaG92ZXJcIixcImZvY3VzXCJdfSxPdmVybGF5VHJpZ2dlcj1mdW5jdGlvbihlKXtmdW5jdGlvbiBPdmVybGF5VHJpZ2dlcih0LHIpe3ZhciBvO3JldHVybihvPWUuY2FsbCh0aGlzLHQscil8fHRoaXMpLmhhbmRsZVRvZ2dsZT1vLmhhbmRsZVRvZ2dsZS5iaW5kKCgwLF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKG8pKSksby5oYW5kbGVEZWxheWVkU2hvdz1vLmhhbmRsZURlbGF5ZWRTaG93LmJpbmQoKDAsX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoKDAsX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkobykpKSxvLmhhbmRsZURlbGF5ZWRIaWRlPW8uaGFuZGxlRGVsYXllZEhpZGUuYmluZCgoMCxfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KSgoMCxfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShvKSkpLG8uaGFuZGxlSGlkZT1vLmhhbmRsZUhpZGUuYmluZCgoMCxfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KSgoMCxfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShvKSkpLG8uaGFuZGxlTW91c2VPdmVyPWZ1bmN0aW9uKGUpe3JldHVybiBvLmhhbmRsZU1vdXNlT3Zlck91dChvLmhhbmRsZURlbGF5ZWRTaG93LGUsXCJmcm9tRWxlbWVudFwiKX0sby5oYW5kbGVNb3VzZU91dD1mdW5jdGlvbihlKXtyZXR1cm4gby5oYW5kbGVNb3VzZU92ZXJPdXQoby5oYW5kbGVEZWxheWVkSGlkZSxlLFwidG9FbGVtZW50XCIpfSxvLl9tb3VudE5vZGU9bnVsbCxvLnN0YXRlPXtzaG93OnQuZGVmYXVsdE92ZXJsYXlTaG93bn0sb30oMCxfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoT3ZlcmxheVRyaWdnZXIsZSk7dmFyIHQ9T3ZlcmxheVRyaWdnZXIucHJvdG90eXBlO3JldHVybiB0LmNvbXBvbmVudERpZE1vdW50PWZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCl7dGhpcy5fbW91bnROb2RlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksdGhpcy5yZW5kZXJPdmVybGF5KCl9LHQuY29tcG9uZW50RGlkVXBkYXRlPWZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpe3RoaXMucmVuZGVyT3ZlcmxheSgpfSx0LmNvbXBvbmVudFdpbGxVbm1vdW50PWZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCl7X3JlYWN0RG9tLmRlZmF1bHQudW5tb3VudENvbXBvbmVudEF0Tm9kZSh0aGlzLl9tb3VudE5vZGUpLHRoaXMuX21vdW50Tm9kZT1udWxsLGNsZWFyVGltZW91dCh0aGlzLl9ob3ZlclNob3dEZWxheSksY2xlYXJUaW1lb3V0KHRoaXMuX2hvdmVySGlkZURlbGF5KX0sdC5oYW5kbGVEZWxheWVkSGlkZT1mdW5jdGlvbiBoYW5kbGVEZWxheWVkSGlkZSgpe3ZhciBlPXRoaXM7aWYobnVsbCE9dGhpcy5faG92ZXJTaG93RGVsYXkpcmV0dXJuIGNsZWFyVGltZW91dCh0aGlzLl9ob3ZlclNob3dEZWxheSksdm9pZCh0aGlzLl9ob3ZlclNob3dEZWxheT1udWxsKTtpZih0aGlzLnN0YXRlLnNob3cmJm51bGw9PXRoaXMuX2hvdmVySGlkZURlbGF5KXt2YXIgdD1udWxsIT10aGlzLnByb3BzLmRlbGF5SGlkZT90aGlzLnByb3BzLmRlbGF5SGlkZTp0aGlzLnByb3BzLmRlbGF5O3Q/dGhpcy5faG92ZXJIaWRlRGVsYXk9c2V0VGltZW91dChmdW5jdGlvbigpe2UuX2hvdmVySGlkZURlbGF5PW51bGwsZS5oaWRlKCl9LHQpOnRoaXMuaGlkZSgpfX0sdC5oYW5kbGVEZWxheWVkU2hvdz1mdW5jdGlvbiBoYW5kbGVEZWxheWVkU2hvdygpe3ZhciBlPXRoaXM7aWYobnVsbCE9dGhpcy5faG92ZXJIaWRlRGVsYXkpcmV0dXJuIGNsZWFyVGltZW91dCh0aGlzLl9ob3ZlckhpZGVEZWxheSksdm9pZCh0aGlzLl9ob3ZlckhpZGVEZWxheT1udWxsKTtpZighdGhpcy5zdGF0ZS5zaG93JiZudWxsPT10aGlzLl9ob3ZlclNob3dEZWxheSl7dmFyIHQ9bnVsbCE9dGhpcy5wcm9wcy5kZWxheVNob3c/dGhpcy5wcm9wcy5kZWxheVNob3c6dGhpcy5wcm9wcy5kZWxheTt0P3RoaXMuX2hvdmVyU2hvd0RlbGF5PXNldFRpbWVvdXQoZnVuY3Rpb24oKXtlLl9ob3ZlclNob3dEZWxheT1udWxsLGUuc2hvdygpfSx0KTp0aGlzLnNob3coKX19LHQuaGFuZGxlSGlkZT1mdW5jdGlvbiBoYW5kbGVIaWRlKCl7dGhpcy5oaWRlKCl9LHQuaGFuZGxlTW91c2VPdmVyT3V0PWZ1bmN0aW9uIGhhbmRsZU1vdXNlT3Zlck91dChlLHQscil7dmFyIG89dC5jdXJyZW50VGFyZ2V0LGk9dC5yZWxhdGVkVGFyZ2V0fHx0Lm5hdGl2ZUV2ZW50W3JdO2kmJmk9PT1vfHwoMCxfY29udGFpbnMuZGVmYXVsdCkobyxpKXx8ZSh0KX0sdC5oYW5kbGVUb2dnbGU9ZnVuY3Rpb24gaGFuZGxlVG9nZ2xlKCl7dGhpcy5zdGF0ZS5zaG93P3RoaXMuaGlkZSgpOnRoaXMuc2hvdygpfSx0LmhpZGU9ZnVuY3Rpb24gaGlkZSgpe3RoaXMuc2V0U3RhdGUoe3Nob3c6ITF9KX0sdC5tYWtlT3ZlcmxheT1mdW5jdGlvbiBtYWtlT3ZlcmxheShlLHQpe3JldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9PdmVybGF5LmRlZmF1bHQsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LHQse3Nob3c6dGhpcy5zdGF0ZS5zaG93LG9uSGlkZTp0aGlzLmhhbmRsZUhpZGUsdGFyZ2V0OnRoaXN9KSxlKX0sdC5zaG93PWZ1bmN0aW9uIHNob3coKXt0aGlzLnNldFN0YXRlKHtzaG93OiEwfSl9LHQucmVuZGVyT3ZlcmxheT1mdW5jdGlvbiByZW5kZXJPdmVybGF5KCl7X3JlYWN0RG9tLmRlZmF1bHQudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIodGhpcyx0aGlzLl9vdmVybGF5LHRoaXMuX21vdW50Tm9kZSl9LHQucmVuZGVyPWZ1bmN0aW9uIHJlbmRlcigpe3ZhciBlPXRoaXMucHJvcHMsdD1lLnRyaWdnZXIscj1lLm92ZXJsYXksbz1lLmNoaWxkcmVuLGk9ZS5vbkJsdXIsbj1lLm9uQ2xpY2ssYT1lLm9uRm9jdXMsbD1lLm9uTW91c2VPdXQsdT1lLm9uTW91c2VPdmVyLHM9KDAsX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKGUsW1widHJpZ2dlclwiLFwib3ZlcmxheVwiLFwiY2hpbGRyZW5cIixcIm9uQmx1clwiLFwib25DbGlja1wiLFwib25Gb2N1c1wiLFwib25Nb3VzZU91dFwiLFwib25Nb3VzZU92ZXJcIl0pO2RlbGV0ZSBzLmRlbGF5LGRlbGV0ZSBzLmRlbGF5U2hvdyxkZWxldGUgcy5kZWxheUhpZGUsZGVsZXRlIHMuZGVmYXVsdE92ZXJsYXlTaG93bjt2YXIgZD1fcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5vbmx5KG8pLGg9ZC5wcm9wcyxwPXt9O3JldHVybiB0aGlzLnN0YXRlLnNob3cmJihwW1wiYXJpYS1kZXNjcmliZWRieVwiXT1yLnByb3BzLmlkKSxwLm9uQ2xpY2s9KDAsX2NyZWF0ZUNoYWluZWRGdW5jdGlvbi5kZWZhdWx0KShoLm9uQ2xpY2ssbiksaXNPbmVPZihcImNsaWNrXCIsdCkmJihwLm9uQ2xpY2s9KDAsX2NyZWF0ZUNoYWluZWRGdW5jdGlvbi5kZWZhdWx0KShwLm9uQ2xpY2ssdGhpcy5oYW5kbGVUb2dnbGUpKSxpc09uZU9mKFwiaG92ZXJcIix0KSYmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJigwLF93YXJuaW5nLmRlZmF1bHQpKCEoXCJob3ZlclwiPT09dCksJ1tyZWFjdC1ib290c3RyYXBdIFNwZWNpZnlpbmcgb25seSB0aGUgYFwiaG92ZXJcImAgdHJpZ2dlciBsaW1pdHMgdGhlIHZpc2liaWxpdHkgb2YgdGhlIG92ZXJsYXkgdG8ganVzdCBtb3VzZSB1c2Vycy4gQ29uc2lkZXIgYWxzbyBpbmNsdWRpbmcgdGhlIGBcImZvY3VzXCJgIHRyaWdnZXIgc28gdGhhdCB0b3VjaCBhbmQga2V5Ym9hcmQgb25seSB1c2VycyBjYW4gc2VlIHRoZSBvdmVybGF5IGFzIHdlbGwuJykscC5vbk1vdXNlT3Zlcj0oMCxfY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uLmRlZmF1bHQpKGgub25Nb3VzZU92ZXIsdSx0aGlzLmhhbmRsZU1vdXNlT3ZlcikscC5vbk1vdXNlT3V0PSgwLF9jcmVhdGVDaGFpbmVkRnVuY3Rpb24uZGVmYXVsdCkoaC5vbk1vdXNlT3V0LGwsdGhpcy5oYW5kbGVNb3VzZU91dCkpLGlzT25lT2YoXCJmb2N1c1wiLHQpJiYocC5vbkZvY3VzPSgwLF9jcmVhdGVDaGFpbmVkRnVuY3Rpb24uZGVmYXVsdCkoaC5vbkZvY3VzLGEsdGhpcy5oYW5kbGVEZWxheWVkU2hvdykscC5vbkJsdXI9KDAsX2NyZWF0ZUNoYWluZWRGdW5jdGlvbi5kZWZhdWx0KShoLm9uQmx1cixpLHRoaXMuaGFuZGxlRGVsYXllZEhpZGUpKSx0aGlzLl9vdmVybGF5PXRoaXMubWFrZU92ZXJsYXkocixzKSwoMCxfcmVhY3QuY2xvbmVFbGVtZW50KShkLHApfSxPdmVybGF5VHJpZ2dlcn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtPdmVybGF5VHJpZ2dlci5wcm9wVHlwZXM9cHJvcFR5cGVzLE92ZXJsYXlUcmlnZ2VyLmRlZmF1bHRQcm9wcz1kZWZhdWx0UHJvcHM7dmFyIF9kZWZhdWx0PU92ZXJsYXlUcmlnZ2VyO2V4cG9ydHMuZGVmYXVsdD1fZGVmYXVsdCxtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJazkyWlhKc1lYbFVjbWxuWjJWeUxtcHpJbDBzSW01aGJXVnpJanBiSWw5cGJuUmxjbTl3VW1WeGRXbHlaVmRwYkdSallYSmtJaXdpY21WeGRXbHlaU0lzSWw5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUWlMQ0psZUhCdmNuUnpJaXdpWDE5bGMwMXZaSFZzWlNJc0ltUmxabUYxYkhRaUxDSmZiMkpxWldOMFYybDBhRzkxZEZCeWIzQmxjblJwWlhOTWIyOXpaVElpTENKZmFXNW9aWEpwZEhOTWIyOXpaVElpTENKZllYTnpaWEowVkdocGMwbHVhWFJwWVd4cGVtVmtNaUlzSWw5bGVIUmxibVJ6TWlJc0lsOXBjMEZ5Y21GNUlpd2lYMk52Ym5SaGFXNXpJaXdpWDNKbFlXTjBJaXdpWDNCeWIzQlVlWEJsY3lJc0lsOXlaV0ZqZEVSdmJTSXNJbDkzWVhKdWFXNW5JaXdpWDA5MlpYSnNZWGtpTENKZlkzSmxZWFJsUTJoaGFXNWxaRVoxYm1OMGFXOXVJaXdpYVhOUGJtVlBaaUlzSW05dVpTSXNJbTltSWl3aWFXNWtaWGhQWmlJc0luUnlhV2RuWlhKVWVYQmxJaXdpYjI1bFQyWWlMQ0p3Y205d1ZIbHdaWE1pTENKMGNtbG5aMlZ5SWl3aWIyNWxUMlpVZVhCbElpd2lZWEp5WVhsUFppSXNJbVJsYkdGNUlpd2liblZ0WW1WeUlpd2laR1ZzWVhsVGFHOTNJaXdpWkdWc1lYbElhV1JsSWl3aVpHVm1ZWFZzZEU5MlpYSnNZWGxUYUc5M2JpSXNJbUp2YjJ3aUxDSnZkbVZ5YkdGNUlpd2libTlrWlNJc0ltbHpVbVZ4ZFdseVpXUWlMQ0p2YmtKc2RYSWlMQ0ptZFc1aklpd2liMjVEYkdsamF5SXNJbTl1Um05amRYTWlMQ0p2YmsxdmRYTmxUM1YwSWl3aWIyNU5iM1Z6WlU5MlpYSWlMQ0owWVhKblpYUWlMQ0p2YmtocFpHVWlMQ0p6YUc5M0lpd2laR1ZtWVhWc2RGQnliM0J6SWl3aVQzWmxjbXhoZVZSeWFXZG5aWElpTENKZlVtVmhZM1FrUTI5dGNHOXVaVzUwSWl3aWNISnZjSE1pTENKamIyNTBaWGgwSWl3aVgzUm9hWE1pTENKallXeHNJaXdpZEdocGN5SXNJbWhoYm1Sc1pWUnZaMmRzWlNJc0ltSnBibVFpTENKb1lXNWtiR1ZFWld4aGVXVmtVMmh2ZHlJc0ltaGhibVJzWlVSbGJHRjVaV1JJYVdSbElpd2lhR0Z1Wkd4bFNHbGtaU0lzSW1oaGJtUnNaVTF2ZFhObFQzWmxjaUlzSW1VaUxDSm9ZVzVrYkdWTmIzVnpaVTkyWlhKUGRYUWlMQ0pvWVc1a2JHVk5iM1Z6WlU5MWRDSXNJbDl0YjNWdWRFNXZaR1VpTENKemRHRjBaU0lzSWw5d2NtOTBieUlzSW5CeWIzUnZkSGx3WlNJc0ltTnZiWEJ2Ym1WdWRFUnBaRTF2ZFc1MElpd2laRzlqZFcxbGJuUWlMQ0pqY21WaGRHVkZiR1Z0Wlc1MElpd2ljbVZ1WkdWeVQzWmxjbXhoZVNJc0ltTnZiWEJ2Ym1WdWRFUnBaRlZ3WkdGMFpTSXNJbU52YlhCdmJtVnVkRmRwYkd4VmJtMXZkVzUwSWl3aWRXNXRiM1Z1ZEVOdmJYQnZibVZ1ZEVGMFRtOWtaU0lzSW1Oc1pXRnlWR2x0Wlc5MWRDSXNJbDlvYjNabGNsTm9iM2RFWld4aGVTSXNJbDlvYjNabGNraHBaR1ZFWld4aGVTSXNJbDkwYUdsek1pSXNJbk5sZEZScGJXVnZkWFFpTENKb2FXUmxJaXdpWDNSb2FYTXpJaXdpYUdGdVpHeGxjaUlzSW5KbGJHRjBaV1JPWVhScGRtVWlMQ0pqZFhKeVpXNTBWR0Z5WjJWMElpd2ljbVZzWVhSbFpDSXNJbkpsYkdGMFpXUlVZWEpuWlhRaUxDSnVZWFJwZG1WRmRtVnVkQ0lzSW5ObGRGTjBZWFJsSWl3aWJXRnJaVTkyWlhKc1lYa2lMQ0oxYm5OMFlXSnNaVjl5Wlc1a1pYSlRkV0owY21WbFNXNTBiME52Ym5SaGFXNWxjaUlzSWw5dmRtVnliR0Y1SWl3aWNtVnVaR1Z5SWl3aVgzUm9hWE1rY0hKdmNITWlMQ0pqYUdsc1pISmxiaUlzSW1Ob2FXeGtJaXdpUTJocGJHUnlaVzRpTENKdmJteDVJaXdpWTJocGJHUlFjbTl3Y3lJc0luUnlhV2RuWlhKUWNtOXdjeUlzSW1sa0lpd2ljSEp2WTJWemN5SXNJbVZ1ZGlJc0lrNVBSRVZmUlU1V0lpd2lZMnh2Ym1WRmJHVnRaVzUwSWl3aVEyOXRjRzl1Wlc1MElpd2lYMlJsWm1GMWJIUWlMQ0p0YjJSMWJHVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUlVFc1NVRkJTVUVzZDBKQlFUQkNReXhSUVVGUkxIbEVRVVZzUTBNc2RVSkJRWGxDUkN4UlFVRlJMSGRFUVVWeVEwVXNVVUZCVVVNc1dVRkJZU3hGUVVOeVFrUXNVVUZCVVVVc1lVRkJWU3hGUVVWc1FpeEpRVUZKUXl3clFrRkJhVU5LTEhWQ1FVRjFRa1FzVVVGQlVTeG5SVUZGYUVWTkxHZENRVUZyUWt3c2RVSkJRWFZDUkN4UlFVRlJMR2xFUVVWcVJFOHNkMEpCUVRCQ1RpeDFRa0ZCZFVKRUxGRkJRVkVzZVVSQlJYcEVVU3hWUVVGWlVDeDFRa0ZCZFVKRUxGRkJRVkVzTWtOQlJUTkRVeXhUUVVGWFVpeDFRa0ZCZFVKRUxGRkJRVkVzYTBSQlJURkRWU3hWUVVGWlZDeDFRa0ZCZFVKRUxGRkJRVkVzSzBKQlJUTkRWeXhQUVVGVFdpeDNRa0ZCZDBKRExGRkJRVkVzVlVGRmVrTlpMRmRCUVdGWUxIVkNRVUYxUWtRc1VVRkJVU3hsUVVVMVEyRXNWVUZCV1Zvc2RVSkJRWFZDUkN4UlFVRlJMR05CUlRORFl5eFRRVUZYWWl4MVFrRkJkVUpFTEZGQlFWRXNXVUZGTVVObExGTkJRVmRrTEhWQ1FVRjFRa1FzVVVGQlVTeGpRVVV4UTJkQ0xIVkNRVUY1UW1Zc2RVSkJRWFZDUkN4UlFVRlJMR3REUVZNMVJDeFRRVUZUYVVJc1VVRkJVVU1zUlVGQlMwTXNSMEZEY0VJc1QwRkJTU3hGUVVGSlZpeFRRVUZUVEN4VFFVRlRaU3hIUVVOcVFrRXNSVUZCUjBNc1VVRkJVVVlzU1VGQlVTeEZRVWR5UWtFc1NVRkJVVU1zUlVGSGFrSXNTVUZCU1VVc1dVRkJZMVFzVjBGQlYxSXNVVUZCVVd0Q0xFMUJRVTBzUTBGQlF5eFJRVUZUTEZGQlFWTXNWVUZGTVVSRExGZEJRVmtzUlVGQlNXWXNWVUZCVlVvc1UwRkJVeXhIUVVGSlZ5eFRRVUZUV0N4UlFVRlJiVUlzVlVGQlZ5eERRVWx5UlVNc1VVRkJVMW9zVjBGQlYxSXNVVUZCVVhGQ0xGVkJRVlVzUTBGQlEwb3NXVUZCWVZRc1YwRkJWMUlzVVVGQlVYTkNMRkZCUVZGTUxHVkJTeTlGVFN4TlFVRlBaaXhYUVVGWFVpeFJRVUZSZDBJc1QwRkxNVUpETEZWQlFWZHFRaXhYUVVGWFVpeFJRVUZSZDBJc1QwRkxPVUpGTEZWQlFWZHNRaXhYUVVGWFVpeFJRVUZSZDBJc1QwRlBPVUpITEc5Q1FVRnhRbTVDTEZkQlFWZFNMRkZCUVZFMFFpeExRVXQ0UTBNc1VVRkJVM0pDTEZkQlFWZFNMRkZCUVZFNFFpeExRVUZMUXl4WFFVdHFRME1zVDBGQlVYaENMRmRCUVZkU0xGRkJRVkZwUXl4TFFVc3pRa01zVVVGQlV6RkNMRmRCUVZkU0xGRkJRVkZwUXl4TFFVczFRa1VzVVVGQlV6TkNMRmRCUVZkU0xGRkJRVkZwUXl4TFFVczFRa2NzVjBGQldUVkNMRmRCUVZkU0xGRkJRVkZwUXl4TFFVc3ZRa2tzV1VGQllUZENMRmRCUVZkU0xGRkJRVkZwUXl4TFFVMW9RMHNzVDBGQlVUbENMRmRCUVZkU0xGRkJRVkZyUWl4TlFVRk5MRU5CUVVNc1QwRkxiRU54UWl4UFFVRlJMMElzVjBGQlYxSXNVVUZCVVd0Q0xFMUJRVTBzUTBGQlF5eFBRVXRzUTNOQ0xFdEJRVTFvUXl4WFFVRlhVaXhSUVVGUmEwSXNUVUZCVFN4RFFVRkRMRk5CUlRsQ2RVSXNZVUZCWlN4RFFVTnFRbVFzY1VKQlFYRkNMRVZCUTNKQ1VDeFJRVUZUTEVOQlFVTXNVVUZCVXl4VlFVZHFRbk5DTEdWQlJVb3NVMEZCVlVNc1IwRkhVaXhUUVVGVFJDeGxRVUZsUlN4RlFVRlBReXhIUVVNM1FpeEpRVUZKUXl4RlFXOUNTaXhQUVd4Q1FVRXNSVUZCVVVnc1JVRkJhVUpKTEV0QlFVdERMRXRCUVUxS0xFVkJRVTlETEVsQlFWbEhMRTFCUTJwRVF5eGhRVUZsU0N4RlFVRk5SeXhoUVVGaFF5eE5RVUZMTEVWQlFVa3ZReXgzUWtGQmQwSklMRlZCUVZNc1JVRkJTVWNzZDBKQlFYZENTQ3hUUVVGVE9FTXNTMEZEZGtoQkxFVkJRVTFMTEd0Q1FVRnZRa3dzUlVGQlRVc3NhMEpCUVd0Q1JDeE5RVUZMTEVWQlFVa3ZReXgzUWtGQmQwSklMRlZCUVZNc1JVRkJTVWNzZDBKQlFYZENTQ3hUUVVGVE9FTXNTMEZEYWtsQkxFVkJRVTFOTEd0Q1FVRnZRazRzUlVGQlRVMHNhMEpCUVd0Q1JpeE5RVUZMTEVWQlFVa3ZReXgzUWtGQmQwSklMRlZCUVZNc1JVRkJTVWNzZDBKQlFYZENTQ3hUUVVGVE9FTXNTMEZEYWtsQkxFVkJRVTFQTEZkQlFXRlFMRVZCUVUxUExGZEJRVmRJTEUxQlFVc3NSVUZCU1M5RExIZENRVUYzUWtnc1ZVRkJVeXhGUVVGSlJ5eDNRa0ZCZDBKSUxGTkJRVk00UXl4TFFVVnVTRUVzUlVGQlRWRXNaMEpCUVd0Q0xGTkJRVlZETEVkQlEyaERMRTlCUVU5VUxFVkJRVTFWTEcxQ1FVRnRRbFlzUlVGQlRVc3NhMEpCUVcxQ1NTeEZRVUZITEdkQ1FVYzVSRlFzUlVGQlRWY3NaVUZCYVVJc1UwRkJWVVlzUjBGREwwSXNUMEZCVDFRc1JVRkJUVlVzYlVKQlFXMUNWaXhGUVVGTlRTeHJRa0ZCYlVKSExFVkJRVWNzWTBGSE9VUlVMRVZCUVUxWkxGZEJRV0VzUzBGRGJrSmFMRVZCUVUxaExFMUJRVkVzUTBGRFdtNUNMRXRCUVUxSkxFVkJRVTFxUWl4eFFrRkZVRzFDTEVkQmRrSlVMRVZCUVVrMVF5eG5Ra0ZCWjBKR0xGTkJRVk13UXl4bFFVRm5Ra01zUjBFd1FqZERMRWxCUVVscFFpeEZRVUZUYkVJc1pVRkJaVzFDTEZWQk1FczFRaXhQUVhoTFFVUXNSVUZCVDBVc2EwSkJRVzlDTEZOQlFWTkJMRzlDUVVOc1EyUXNTMEZCUzFVc1YwRkJZVXNzVTBGQlUwTXNZMEZCWXl4UFFVTjZRMmhDTEV0QlFVdHBRaXhwUWtGSFVFd3NSVUZCVDAwc2JVSkJRWEZDTEZOQlFWTkJMSEZDUVVOdVEyeENMRXRCUVV0cFFpeHBRa0ZIVUV3c1JVRkJUMDhzY1VKQlFYVkNMRk5CUVZOQkxIVkNRVU55UXpGRUxGVkJRVlZVTEZGQlFWRnZSU3gxUWtGQmRVSndRaXhMUVVGTFZTeFpRVVU1UTFZc1MwRkJTMVVzVjBGQllTeExRVU5zUWxjc1lVRkJZWEpDTEV0QlFVdHpRaXhwUWtGRGJFSkVMR0ZCUVdGeVFpeExRVUZMZFVJc2EwSkJSM0JDV0N4RlFVRlBVaXhyUWtGQmIwSXNVMEZCVTBFc2IwSkJRMnhETEVsQlFVbHZRaXhGUVVGVGVFSXNTMEZGWWl4SFFVRTBRaXhOUVVGNFFrRXNTMEZCUzNOQ0xHZENRVWRRTEU5QlJrRkVMR0ZCUVdGeVFpeExRVUZMYzBJc2MwSkJRMnhDZEVJc1MwRkJTM05DTEdkQ1FVRnJRaXhOUVVsNlFpeEhRVUZMZEVJc1MwRkJTMWNzVFVGQlRXNUNMRTFCUVdkRExFMUJRWGhDVVN4TFFVRkxkVUlzWjBKQlFUZENMRU5CU1VFc1NVRkJTV2hFTEVWQlFXZERMRTFCUVhoQ2VVSXNTMEZCUzBvc1RVRkJUV3hDTEZWQlFXOUNjMElzUzBGQlMwb3NUVUZCVFd4Q0xGVkJRVmx6UWl4TFFVRkxTaXhOUVVGTmNrSXNUVUZGZUVWQkxFVkJTMHg1UWl4TFFVRkxkVUlzWjBKQlFXdENSU3hYUVVGWExGZEJRMmhEUkN4RlFVRlBSQ3huUWtGQmEwSXNTMEZGZWtKRExFVkJRVTlGTEZGQlEwNXVSQ3hIUVZKRWVVSXNTMEZCU3pCQ0xGTkJWMVJrTEVWQlFVOVVMR3RDUVVGdlFpeFRRVUZUUVN4dlFrRkRiRU1zU1VGQlNYZENMRVZCUVZNelFpeExRVVZpTEVkQlFUUkNMRTFCUVhoQ1FTeExRVUZMZFVJc1owSkJSMUFzVDBGR1FVWXNZVUZCWVhKQ0xFdEJRVXQxUWl4elFrRkRiRUoyUWl4TFFVRkxkVUlzWjBKQlFXdENMRTFCU1hwQ0xFbEJRVWwyUWl4TFFVRkxWeXhOUVVGTmJrSXNUVUZCWjBNc1RVRkJlRUpSTEV0QlFVdHpRaXhuUWtGQk5VSXNRMEZKUVN4SlFVRkpMME1zUlVGQlowTXNUVUZCZUVKNVFpeExRVUZMU2l4TlFVRk5ia0lzVlVGQmIwSjFRaXhMUVVGTFNpeE5RVUZOYmtJc1ZVRkJXWFZDTEV0QlFVdEtMRTFCUVUxeVFpeE5RVVY0UlVFc1JVRkxUSGxDTEV0QlFVdHpRaXhuUWtGQmEwSkhMRmRCUVZjc1YwRkRhRU5GTEVWQlFVOU1MR2RDUVVGclFpeExRVVY2UWtzc1JVRkJUMjVETEZGQlEwNXFRaXhIUVZKRWVVSXNTMEZCUzFJc1UwRlhWRzlDTEVWQlFVOVFMRmRCUVdFc1UwRkJVMEVzWVVGRE0wSk1MRXRCUVVzd1FpeFJRVTlRWkN4RlFVRlBTaXh0UWtGQmNVSXNVMEZCVTBFc2JVSkJRVzFDYjBJc1JVRkJVM0pDTEVWQlFVZHpRaXhIUVVOc1JTeEpRVUZKZGtNc1JVRkJVMmxDTEVWQlFVVjFRaXhqUVVOWVF5eEZRVUZWZUVJc1JVRkJSWGxDTEdWQlFXbENla0lzUlVGQlJUQkNMRmxCUVZsS0xFZEJSWHBEUlN4SFFVRlhRU3hKUVVGWmVrTXNTVUZCV1N4RlFVRkphRU1zVlVGQlZVNHNVMEZCVTNORExFVkJRVkY1UXl4SlFVTjBSVWdzUlVGQlVYSkNMRWxCU1ZwTExFVkJRVTlZTEdGQlFXVXNVMEZCVTBFc1pVRkRla0pFTEV0QlFVdFhMRTFCUVUxdVFpeExRVU5pVVN4TFFVRkxNRUlzVDBGRlRERkNMRXRCUVV0U0xGRkJTVlJ2UWl4RlFVRlBZeXhMUVVGUExGTkJRVk5CTEU5QlEzSkNNVUlzUzBGQlMydERMRk5CUVZNc1EwRkRXakZETEUxQlFVMHNTMEZKVm05Q0xFVkJRVTkxUWl4WlFVRmpMRk5CUVZOQkxGbEJRVmwwUkN4RlFVRlRaU3hIUVVOcVJDeFBRVUZQY2tNc1QwRkJUMUFzVVVGQlVXZEZMR05CUVdOeVJDeFRRVUZUV0N4VFFVRlRMRVZCUVVsSkxGVkJRVlZLTEZOQlFWTXNSMEZCU1RSRExFVkJRVThzUTBGRGRFWktMRXRCUVUxUkxFdEJRVXRYTEUxQlFVMXVRaXhMUVVOcVFrUXNUMEZCVVZNc1MwRkJTMHNzVjBGRFltWXNUMEZCVVZVc1QwRkRUbTVDTEVsQlIwNHJRaXhGUVVGUGNFSXNTMEZCVHl4VFFVRlRRU3hQUVVOeVFsRXNTMEZCUzJ0RExGTkJRVk1zUTBGRFdqRkRMRTFCUVUwc1MwRkpWbTlDTEVWQlFVOUxMR05CUVdkQ0xGTkJRVk5CTEdkQ1FVTTVRbmhFTEZWQlFWVlVMRkZCUVZGdlJpeHZRMEZCYjBOd1F5eExRVUZOUVN4TFFVRkxjVU1zVTBGQlZYSkRMRXRCUVV0VkxHRkJSMnhHUlN4RlFVRlBNRUlzVDBGQlV5eFRRVUZUUVN4VFFVTjJRaXhKUVVGSlF5eEZRVUZqZGtNc1MwRkJTMG9zVFVGRGJrSjRRaXhGUVVGVmJVVXNSVUZCV1c1RkxGRkJRM1JDVXl4RlFVRlZNRVFzUlVGQldURkVMRkZCUTNSQ01rUXNSVUZCVjBRc1JVRkJXVU1zVTBGRGRrSjRSQ3hGUVVGVGRVUXNSVUZCV1haRUxFOUJRM0pDUlN4RlFVRlZjVVFzUlVGQldYSkVMRkZCUTNSQ1F5eEZRVUZWYjBRc1JVRkJXWEJFTEZGQlEzUkNReXhGUVVGaGJVUXNSVUZCV1c1RUxGZEJRM3BDUXl4RlFVRmphMFFzUlVGQldXeEVMRmxCUXpGQ1R5eEhRVUZSTEVWQlFVa3pReXdyUWtGQkswSkVMRk5CUVZOMVJpeEZRVUZoTEVOQlFVTXNWVUZCVnl4VlFVRlhMRmRCUVZrc1UwRkJWU3hWUVVGWExGVkJRVmNzWVVGQll5eDFRa0ZETDBrelF5eEZRVUZOY2tJc1lVRkRUbkZDTEVWQlFVMXVRaXhwUWtGRFRtMUNMRVZCUVUxc1FpeHBRa0ZEVG10Q0xFVkJRVTFxUWl4dlFrRkZZaXhKUVVGSk9FUXNSVUZCVVd4R0xFOUJRVTlRTEZGQlFWRXdSaXhUUVVGVFF5eExRVUZMU0N4SFFVVnlRMGtzUlVGQllVZ3NSVUZCVFRkRExFMUJRMjVDYVVRc1JVRkJaU3hIUVRCQ2JrSXNUMEY0UWtrM1F5eExRVUZMVnl4TlFVRk5ia0lzVDBGRFluRkVMRVZCUVdFc2IwSkJRWE5DYUVVc1JVRkJVV1VzVFVGQlRXdEVMRWxCUzI1RVJDeEZRVUZoTTBRc1UwRkJWU3hGUVVGSmRFSXNkVUpCUVhWQ1dpeFRRVUZUTkVZc1JVRkJWekZFTEZGQlFWTkJMRWRCUlRORmNrSXNVVUZCVVN4UlFVRlRUeXhMUVVOdVFubEZMRVZCUVdFelJDeFRRVUZWTEVWQlFVbDBRaXgxUWtGQmRVSmFMRk5CUVZNMlJpeEZRVUZoTTBRc1VVRkJVMk1zUzBGQlMwTXNaVUZIY0Vad1F5eFJRVUZSTEZGQlFWTlBMRXRCUTAwc1pVRkJla0l5UlN4UlFVRlJReXhKUVVGSlF5eFhRVUUwUWl4RlFVRkpka1lzVTBGQlUxWXNWMEZCZFVJc1ZVRkJXbTlDTEVkQlFYTkNMSE5QUVVOMFJubEZMRVZCUVdGNFJDeGhRVUZqTEVWQlFVbDZRaXgxUWtGQmRVSmFMRk5CUVZNMFJpeEZRVUZYZGtRc1dVRkJZVUVzUlVGQllWY3NTMEZCUzAwc2FVSkJRM3BIZFVNc1JVRkJZWHBFTEZsQlFXRXNSVUZCU1hoQ0xIVkNRVUYxUWxvc1UwRkJVelJHTEVWQlFWZDRSQ3hYUVVGWlFTeEZRVUZaV1N4TFFVRkxVeXhwUWtGSGNFYzFReXhSUVVGUkxGRkJRVk5QTEV0QlEyNUNlVVVzUlVGQllURkVMRk5CUVZVc1JVRkJTWFpDTEhWQ1FVRjFRbG9zVTBGQlV6UkdMRVZCUVZkNlJDeFJRVUZUUVN4RlFVRlRZU3hMUVVGTFJ5eHRRa0ZETjBZd1F5eEZRVUZoTjBRc1VVRkJVeXhGUVVGSmNFSXNkVUpCUVhWQ1dpeFRRVUZUTkVZc1JVRkJWelZFTEU5QlFWRkJMRVZCUVZGblFpeExRVUZMU1N4dlFrRkhOVVpLTEV0QlFVdHhReXhUUVVGWGNrTXNTMEZCUzIxRExGbEJRVmwwUkN4RlFVRlRaU3hKUVVOdVF5eEZRVUZKY2tNc1QwRkJUekpHTEdOQlFXTlVMRVZCUVU5SkxFbEJSMnhEYmtRc1pVRnlUVlFzUTBGelRVVnVReXhQUVVGUFVDeFJRVUZSYlVjc1YwRkZha0o2UkN4bFFVRmxka0lzVlVGQldVRXNWVUZETTBKMVFpeGxRVUZsUkN4aFFVRmxRU3hoUVVNNVFpeEpRVUZKTWtRc1UwRkJWekZFTEdWQlEyWTFReXhSUVVGUlJTeFJRVUZWYjBjc1UwRkRiRUpETEU5QlFVOTJSeXhSUVVGVlFTeFJRVUZwUWlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDMWliMjkwYzNSeVlYQXZiR2xpTDA5MlpYSnNZWGxVY21sbloyVnlMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0PXJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO2V4cG9ydHMuX19lc01vZHVsZT0hMCxleHBvcnRzLmRlZmF1bHQ9dm9pZCAwO3ZhciBfZXh0ZW5kczI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSksX2luaGVyaXRzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKSxfY2xhc3NuYW1lcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKSxfcmVhY3Q9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpLF9ib290c3RyYXBVdGlscz1yZXF1aXJlKFwiLi91dGlscy9ib290c3RyYXBVdGlsc1wiKSxQYWdlSGVhZGVyPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIFBhZ2VIZWFkZXIoKXtyZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9cmV0dXJuKDAsX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKFBhZ2VIZWFkZXIsZSksUGFnZUhlYWRlci5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uIHJlbmRlcigpe3ZhciBlPXRoaXMucHJvcHMsdD1lLmNsYXNzTmFtZSxyPWUuY2hpbGRyZW4scz0oMCxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoZSxbXCJjbGFzc05hbWVcIixcImNoaWxkcmVuXCJdKSxhPSgwLF9ib290c3RyYXBVdGlscy5zcGxpdEJzUHJvcHMpKHMpLG89YVswXSxpPWFbMV0sbD0oMCxfYm9vdHN0cmFwVXRpbHMuZ2V0Q2xhc3NTZXQpKG8pO3JldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LGkse2NsYXNzTmFtZTooMCxfY2xhc3NuYW1lcy5kZWZhdWx0KSh0LGwpfSksX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImgxXCIsbnVsbCxyKSl9LFBhZ2VIZWFkZXJ9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCksX2RlZmF1bHQ9KDAsX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKFwicGFnZS1oZWFkZXJcIixQYWdlSGVhZGVyKTtleHBvcnRzLmRlZmF1bHQ9X2RlZmF1bHQsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxCaFoyVklaV0ZrWlhJdWFuTWlYU3dpYm1GdFpYTWlPbHNpWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDSXNJbkpsY1hWcGNtVWlMQ0psZUhCdmNuUnpJaXdpWDE5bGMwMXZaSFZzWlNJc0ltUmxabUYxYkhRaUxDSmZaWGgwWlc1a2N6SWlMQ0pmYjJKcVpXTjBWMmwwYUc5MWRGQnliM0JsY25ScFpYTk1iMjl6WlRJaUxDSmZhVzVvWlhKcGRITk1iMjl6WlRJaUxDSmZZMnhoYzNOdVlXMWxjeUlzSWw5eVpXRmpkQ0lzSWw5aWIyOTBjM1J5WVhCVmRHbHNjeUlzSWxCaFoyVklaV0ZrWlhJaUxDSmZVbVZoWTNRa1EyOXRjRzl1Wlc1MElpd2lZWEJ3YkhraUxDSjBhR2x6SWl3aVlYSm5kVzFsYm5Seklpd2ljSEp2ZEc5MGVYQmxJaXdpY21WdVpHVnlJaXdpWDNSb2FYTWtjSEp2Y0hNaUxDSndjbTl3Y3lJc0ltTnNZWE56VG1GdFpTSXNJbU5vYVd4a2NtVnVJaXdpWDNOd2JHbDBRbk5RY205d2N5SXNJbk53YkdsMFFuTlFjbTl3Y3lJc0ltSnpVSEp2Y0hNaUxDSmxiR1Z0Wlc1MFVISnZjSE1pTENKamJHRnpjMlZ6SWl3aVoyVjBRMnhoYzNOVFpYUWlMQ0pqY21WaGRHVkZiR1Z0Wlc1MElpd2lRMjl0Y0c5dVpXNTBJaXdpWDJSbFptRjFiSFFpTENKaWMwTnNZWE56SWl3aWJXOWtkV3hsSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4aFFVVkJMRWxCUVVsQkxIVkNRVUY1UWtNc1VVRkJVU3gzUkVGRmNrTkRMRkZCUVZGRExGbEJRV0VzUlVGRGNrSkVMRkZCUVZGRkxHRkJRVlVzUlVGRmJFSXNTVUZCU1VNc1ZVRkJXVXdzZFVKQlFYVkNReXhSUVVGUkxESkRRVVV6UTBzc0swSkJRV2xEVGl4MVFrRkJkVUpETEZGQlFWRXNaMFZCUldoRlRTeG5Ra0ZCYTBKUUxIVkNRVUYxUWtNc1VVRkJVU3hwUkVGRmFrUlBMRmxCUVdOU0xIVkNRVUYxUWtNc1VVRkJVU3hsUVVVM1ExRXNUMEZCVTFRc2RVSkJRWFZDUXl4UlFVRlJMRlZCUlhoRFV5eG5Ra0ZCYTBKVUxGRkJRVkVzTUVKQlJURkNWU3hYUVVWS0xGTkJRVlZETEVkQlIxSXNVMEZCVTBRc1lVRkRVQ3hQUVVGUFF5eEZRVUZwUWtNc1RVRkJUVU1zUzBGQlRVTXNXVUZCWTBRc1MwRnhRbkJFTEU5QmVFSkJMRVZCUVVsUUxHZENRVUZuUWtnc1UwRkJVMDhzVjBGQldVTXNSMEZOTlVKRUxGZEJRVmRMTEZWQlJXcENReXhQUVVGVExGTkJRVk5CTEZOQlEzWkNMRWxCUVVsRExFVkJRV05LTEV0QlFVdExMRTFCUTI1Q1F5eEZRVUZaUml4RlFVRlpSU3hWUVVONFFrTXNSVUZCVjBnc1JVRkJXVWNzVTBGRGRrSkdMRWRCUVZFc1JVRkJTV0lzSzBKQlFTdENSaXhUUVVGVFl5eEZRVUZoTEVOQlFVTXNXVUZCWVN4aFFVVXZSVWtzUjBGQlowSXNSVUZCU1Zvc1owSkJRV2RDWVN4alFVRmpTaXhIUVVOc1JFc3NSVUZCVlVZc1JVRkJZeXhIUVVONFFrY3NSVUZCWlVnc1JVRkJZeXhIUVVVM1Fra3NSMEZCVlN4RlFVRkphRUlzWjBKQlFXZENhVUlzWVVGQllVZ3NSMEZETDBNc1QwRkJUMllzVDBGQlQwd3NVVUZCVVhkQ0xHTkJRV01zVDBGQlR5eEZRVUZKZGtJc1ZVRkJWVVFzVTBGQlV5eEhRVUZKY1VJc1JVRkJZeXhEUVVOc1Jrd3NWMEZCVnl4RlFVRkpXaXhaUVVGWlNpeFRRVUZUWjBJc1JVRkJWMDBzUzBGRE4wTnFRaXhQUVVGUFRDeFJRVUZSZDBJc1kwRkJZeXhMUVVGTkxFdEJRVTFRTEV0QlIzaERWaXhYUVhwQ1ZDeERRVEJDUlVZc1QwRkJUMHdzVVVGQlVYbENMRmRCUldKRExGVkJRVmNzUlVGQlNYQkNMR2RDUVVGblFuRkNMRk5CUVZNc1kwRkJaWEJDTEZsQlJUTkVWQ3hSUVVGUlJTeFJRVUZWTUVJc1UwRkRiRUpGTEU5QlFVODVRaXhSUVVGVlFTeFJRVUZwUWlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDMWliMjkwYzNSeVlYQXZiR2xpTDFCaFoyVklaV0ZrWlhJdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9QYWdlckl0ZW09X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9QYWdlckl0ZW1cIikpLF9kZXByZWNhdGlvbldhcm5pbmc9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9kZXByZWNhdGlvbldhcm5pbmdcIikpLF9kZWZhdWx0PV9kZXByZWNhdGlvbldhcm5pbmcuZGVmYXVsdC53cmFwcGVyKF9QYWdlckl0ZW0uZGVmYXVsdCxcImA8UGFnZUl0ZW0+YFwiLFwiYDxQYWdlci5JdGVtPmBcIik7ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsQmhaMlZKZEdWdExtcHpJbDBzSW01aGJXVnpJanBiSWw5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUWlMQ0p5WlhGMWFYSmxJaXdpWlhod2IzSjBjeUlzSWw5ZlpYTk5iMlIxYkdVaUxDSmtaV1poZFd4MElpd2lYMUJoWjJWeVNYUmxiU0lzSWw5a1pYQnlaV05oZEdsdmJsZGhjbTVwYm1jaUxDSmZaR1ZtWVhWc2RDSXNJbmR5WVhCd1pYSWlMQ0p0YjJSMWJHVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUlVFc1NVRkJTVUVzZFVKQlFYbENReXhSUVVGUkxIZEVRVVZ5UTBNc1VVRkJVVU1zV1VGQllTeEZRVU55UWtRc1VVRkJVVVVzWVVGQlZTeEZRVVZzUWl4SlFVRkpReXhYUVVGaFRDeDFRa0ZCZFVKRExGRkJRVkVzWjBKQlJUVkRTeXh2UWtGQmMwSk9MSFZDUVVGMVFrTXNVVUZCVVN3clFrRkZja1JOTEZOQlFWZEVMRzlDUVVGdlFrWXNVVUZCVVVrc1VVRkJVVWdzVjBGQlYwUXNVVUZCVXl4bFFVRm5RaXhyUWtGRmRrWkdMRkZCUVZGRkxGRkJRVlZITEZOQlEyeENSU3hQUVVGUFVDeFJRVUZWUVN4UlFVRnBRaUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEMxaWIyOTBjM1J5WVhBdmJHbGlMMUJoWjJWSmRHVnRMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIiksX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PXZvaWQgMDt2YXIgX2V4dGVuZHMyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKSxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpLF9pbmhlcml0c0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSksX2NsYXNzbmFtZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSksX3Byb3BUeXBlcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKSxfUGFnZXJJdGVtPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vUGFnZXJJdGVtXCIpKSxfYm9vdHN0cmFwVXRpbHM9cmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIiksX2NyZWF0ZUNoYWluZWRGdW5jdGlvbj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZUNoYWluZWRGdW5jdGlvblwiKSksX1ZhbGlkQ29tcG9uZW50Q2hpbGRyZW49X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9WYWxpZENvbXBvbmVudENoaWxkcmVuXCIpKSxwcm9wVHlwZXM9e29uU2VsZWN0Ol9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jfSxQYWdlcj1mdW5jdGlvbihlKXtmdW5jdGlvbiBQYWdlcigpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4oMCxfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoUGFnZXIsZSksUGFnZXIucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXt2YXIgZT10aGlzLnByb3BzLHI9ZS5vblNlbGVjdCx0PWUuY2xhc3NOYW1lLGk9ZS5jaGlsZHJlbixvPSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShlLFtcIm9uU2VsZWN0XCIsXCJjbGFzc05hbWVcIixcImNoaWxkcmVuXCJdKSxhPSgwLF9ib290c3RyYXBVdGlscy5zcGxpdEJzUHJvcHMpKG8pLHM9YVswXSx1PWFbMV0sbD0oMCxfYm9vdHN0cmFwVXRpbHMuZ2V0Q2xhc3NTZXQpKHMpO3JldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwidWxcIiwoMCxfZXh0ZW5kczIuZGVmYXVsdCkoe30sdSx7Y2xhc3NOYW1lOigwLF9jbGFzc25hbWVzLmRlZmF1bHQpKHQsbCl9KSxfVmFsaWRDb21wb25lbnRDaGlsZHJlbi5kZWZhdWx0Lm1hcChpLGZ1bmN0aW9uKGUpe3JldHVybigwLF9yZWFjdC5jbG9uZUVsZW1lbnQpKGUse29uU2VsZWN0OigwLF9jcmVhdGVDaGFpbmVkRnVuY3Rpb24uZGVmYXVsdCkoZS5wcm9wcy5vblNlbGVjdCxyKX0pfSkpfSxQYWdlcn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtQYWdlci5wcm9wVHlwZXM9cHJvcFR5cGVzLFBhZ2VyLkl0ZW09X1BhZ2VySXRlbS5kZWZhdWx0O3ZhciBfZGVmYXVsdD0oMCxfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoXCJwYWdlclwiLFBhZ2VyKTtleHBvcnRzLmRlZmF1bHQ9X2RlZmF1bHQsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxCaFoyVnlMbXB6SWwwc0ltNWhiV1Z6SWpwYklsOXBiblJsY205d1VtVnhkV2x5WlZkcGJHUmpZWEprSWl3aWNtVnhkV2x5WlNJc0lsOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFpTENKbGVIQnZjblJ6SWl3aVgxOWxjMDF2WkhWc1pTSXNJbVJsWm1GMWJIUWlMQ0pmWlhoMFpXNWtjeklpTENKZmIySnFaV04wVjJsMGFHOTFkRkJ5YjNCbGNuUnBaWE5NYjI5elpUSWlMQ0pmYVc1b1pYSnBkSE5NYjI5elpUSWlMQ0pmWTJ4aGMzTnVZVzFsY3lJc0lsOXlaV0ZqZENJc0lsOXdjbTl3Vkhsd1pYTWlMQ0pmVUdGblpYSkpkR1Z0SWl3aVgySnZiM1J6ZEhKaGNGVjBhV3h6SWl3aVgyTnlaV0YwWlVOb1lXbHVaV1JHZFc1amRHbHZiaUlzSWw5V1lXeHBaRU52YlhCdmJtVnVkRU5vYVd4a2NtVnVJaXdpY0hKdmNGUjVjR1Z6SWl3aWIyNVRaV3hsWTNRaUxDSm1kVzVqSWl3aVVHRm5aWElpTENKZlVtVmhZM1FrUTI5dGNHOXVaVzUwSWl3aVlYQndiSGtpTENKMGFHbHpJaXdpWVhKbmRXMWxiblJ6SWl3aWNISnZkRzkwZVhCbElpd2ljbVZ1WkdWeUlpd2lYM1JvYVhNa2NISnZjSE1pTENKd2NtOXdjeUlzSW1Oc1lYTnpUbUZ0WlNJc0ltTm9hV3hrY21WdUlpd2lYM053YkdsMFFuTlFjbTl3Y3lJc0luTndiR2wwUW5OUWNtOXdjeUlzSW1KelVISnZjSE1pTENKbGJHVnRaVzUwVUhKdmNITWlMQ0pqYkdGemMyVnpJaXdpWjJWMFEyeGhjM05UWlhRaUxDSmpjbVZoZEdWRmJHVnRaVzUwSWl3aWJXRndJaXdpWTJocGJHUWlMQ0pqYkc5dVpVVnNaVzFsYm5RaUxDSkRiMjF3YjI1bGJuUWlMQ0pKZEdWdElpd2lYMlJsWm1GMWJIUWlMQ0ppYzBOc1lYTnpJaXdpYlc5a2RXeGxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVWQkxFbEJRVWxCTEhkQ1FVRXdRa01zVVVGQlVTeDVSRUZGYkVORExIVkNRVUY1UWtRc1VVRkJVU3gzUkVGRmNrTkZMRkZCUVZGRExGbEJRV0VzUlVGRGNrSkVMRkZCUVZGRkxHRkJRVlVzUlVGRmJFSXNTVUZCU1VNc1ZVRkJXVW9zZFVKQlFYVkNSQ3hSUVVGUkxESkRRVVV6UTAwc0swSkJRV2xEVEN4MVFrRkJkVUpFTEZGQlFWRXNaMFZCUldoRlR5eG5Ra0ZCYTBKT0xIVkNRVUYxUWtRc1VVRkJVU3hwUkVGRmFrUlJMRmxCUVdOUUxIVkNRVUYxUWtRc1VVRkJVU3hsUVVVM1ExTXNUMEZCVTFZc2QwSkJRWGRDUXl4UlFVRlJMRlZCUlhwRFZTeFhRVUZoVkN4MVFrRkJkVUpFTEZGQlFWRXNaVUZGTlVOWExGZEJRV0ZXTEhWQ1FVRjFRa1FzVVVGQlVTeG5Ra0ZGTlVOWkxHZENRVUZyUWxvc1VVRkJVU3d3UWtGRk1VSmhMSFZDUVVGNVFsb3NkVUpCUVhWQ1JDeFJRVUZSTEd0RFFVVjRSR01zZDBKQlFUQkNZaXgxUWtGQmRVSkVMRkZCUVZFc2JVTkJSWHBFWlN4VlFVRlpMRU5CUTJSRExGTkJRVlZPTEZkQlFWZE9MRkZCUVZGaExFMUJSek5DUXl4TlFVVktMRk5CUVZWRExFZEJSMUlzVTBGQlUwUXNVVUZEVUN4UFFVRlBReXhGUVVGcFFrTXNUVUZCVFVNc1MwRkJUVU1zV1VGQlkwUXNTMEV3UW5CRUxFOUJOMEpCTEVWQlFVbGtMR2RDUVVGblFrZ3NVMEZCVTJNc1RVRkJUME1zUjBGTmRrSkVMRTFCUVUxTExGVkJSVnBETEU5QlFWTXNVMEZCVTBFc1UwRkRka0lzU1VGQlNVTXNSVUZCWTBvc1MwRkJTMHNzVFVGRGJrSldMRVZCUVZkVExFVkJRVmxVTEZOQlEzWkNWeXhGUVVGWlJpeEZRVUZaUlN4VlFVTjRRa01zUlVGQlYwZ3NSVUZCV1Vjc1UwRkRka0pHTEVkQlFWRXNSVUZCU1hCQ0xDdENRVUVyUWtZc1UwRkJVM0ZDTEVWQlFXRXNRMEZCUXl4WFFVRlpMRmxCUVdFc1lVRkZNMFpKTEVkQlFXZENMRVZCUVVscVFpeG5Ra0ZCWjBKclFpeGpRVUZqU2l4SFFVTnNSRXNzUlVGQlZVWXNSVUZCWXl4SFFVTjRRa2NzUlVGQlpVZ3NSVUZCWXl4SFFVVTNRa2tzUjBGQlZTeEZRVUZKY2tJc1owSkJRV2RDYzBJc1lVRkJZVWdzUjBGREwwTXNUMEZCVDNSQ0xFOUJRVTlNTEZGQlFWRXJRaXhqUVVGakxFMUJRVTBzUlVGQlNUbENMRlZCUVZWRUxGTkJRVk1zUjBGQlNUUkNMRVZCUVdNc1EwRkRha1pNTEZkQlFWY3NSVUZCU1c1Q0xGbEJRVmxLTEZOQlFWTjFRaXhGUVVGWFRTeExRVU0zUTI1Q0xIZENRVUYzUWxZc1VVRkJVV2RETEVsQlFVbFNMRVZCUVZVc1UwRkJWVk1zUjBGRE1VUXNUMEZCVHl4RlFVRkpOVUlzVDBGQlR6WkNMR05CUVdORUxFVkJRVThzUTBGRGNrTnlRaXhWUVVGVkxFVkJRVWxJTEhWQ1FVRjFRbFFzVTBGQlUybERMRVZCUVUxWUxFMUJRVTFXTEZOQlFWVkJMRk5CUzI1RlJTeE5RVGxDVkN4RFFTdENSVlFzVDBGQlQwd3NVVUZCVVcxRExGZEJSV3BDY2tJc1RVRkJUVWdzVlVGQldVRXNWVUZEYkVKSExFMUJRVTF6UWl4TFFVRlBOMElzVjBGQlYxQXNVVUZGZUVJc1NVRkJTWEZETEZWQlFWY3NSVUZCU1RkQ0xHZENRVUZuUWpoQ0xGTkJRVk1zVVVGQlUzaENMRTlCUlhKRWFFSXNVVUZCVVVVc1VVRkJWWEZETEZOQlEyeENSU3hQUVVGUGVrTXNVVUZCVlVFc1VVRkJhVUlpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdFltOXZkSE4wY21Gd0wyeHBZaTlRWVdkbGNpNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9leHRlbmRzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSksX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLF9jbGFzc25hbWVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpLF9yZWFjdD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSksX3Byb3BUeXBlcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKSxfU2FmZUFuY2hvcj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1NhZmVBbmNob3JcIikpLF9jcmVhdGVDaGFpbmVkRnVuY3Rpb249X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb25cIikpLHByb3BUeXBlcz17ZGlzYWJsZWQ6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wscHJldmlvdXM6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsbmV4dDpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxvbkNsaWNrOl9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLG9uU2VsZWN0Ol9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLGV2ZW50S2V5Ol9wcm9wVHlwZXMuZGVmYXVsdC5hbnl9LGRlZmF1bHRQcm9wcz17ZGlzYWJsZWQ6ITEscHJldmlvdXM6ITEsbmV4dDohMX0sUGFnZXJJdGVtPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIFBhZ2VySXRlbSh0LHIpe3ZhciBhO3JldHVybihhPWUuY2FsbCh0aGlzLHQscil8fHRoaXMpLmhhbmRsZVNlbGVjdD1hLmhhbmRsZVNlbGVjdC5iaW5kKCgwLF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKGEpKSksYX0oMCxfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoUGFnZXJJdGVtLGUpO3ZhciB0PVBhZ2VySXRlbS5wcm90b3R5cGU7cmV0dXJuIHQuaGFuZGxlU2VsZWN0PWZ1bmN0aW9uIGhhbmRsZVNlbGVjdChlKXt2YXIgdD10aGlzLnByb3BzLHI9dC5kaXNhYmxlZCxhPXQub25TZWxlY3QsaT10LmV2ZW50S2V5O3I/ZS5wcmV2ZW50RGVmYXVsdCgpOmEmJmEoaSxlKX0sdC5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIGU9dGhpcy5wcm9wcyx0PWUuZGlzYWJsZWQscj1lLnByZXZpb3VzLGE9ZS5uZXh0LGk9ZS5vbkNsaWNrLGw9ZS5jbGFzc05hbWUscz1lLnN0eWxlLG89KDAsX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKGUsW1wiZGlzYWJsZWRcIixcInByZXZpb3VzXCIsXCJuZXh0XCIsXCJvbkNsaWNrXCIsXCJjbGFzc05hbWVcIixcInN0eWxlXCJdKTtyZXR1cm4gZGVsZXRlIG8ub25TZWxlY3QsZGVsZXRlIG8uZXZlbnRLZXksX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImxpXCIse2NsYXNzTmFtZTooMCxfY2xhc3NuYW1lcy5kZWZhdWx0KShsLHtkaXNhYmxlZDp0LHByZXZpb3VzOnIsbmV4dDphfSksc3R5bGU6c30sX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU2FmZUFuY2hvci5kZWZhdWx0LCgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSxvLHtkaXNhYmxlZDp0LG9uQ2xpY2s6KDAsX2NyZWF0ZUNoYWluZWRGdW5jdGlvbi5kZWZhdWx0KShpLHRoaXMuaGFuZGxlU2VsZWN0KX0pKSl9LFBhZ2VySXRlbX0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtQYWdlckl0ZW0ucHJvcFR5cGVzPXByb3BUeXBlcyxQYWdlckl0ZW0uZGVmYXVsdFByb3BzPWRlZmF1bHRQcm9wczt2YXIgX2RlZmF1bHQ9UGFnZXJJdGVtO2V4cG9ydHMuZGVmYXVsdD1fZGVmYXVsdCxtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbEJoWjJWeVNYUmxiUzVxY3lKZExDSnVZVzFsY3lJNld5SmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwSWl3aWNtVnhkV2x5WlNJc0ltVjRjRzl5ZEhNaUxDSmZYMlZ6VFc5a2RXeGxJaXdpWkdWbVlYVnNkQ0lzSWw5bGVIUmxibVJ6TWlJc0lsOXZZbXBsWTNSWGFYUm9iM1YwVUhKdmNHVnlkR2xsYzB4dmIzTmxNaUlzSWw5cGJtaGxjbWwwYzB4dmIzTmxNaUlzSWw5aGMzTmxjblJVYUdselNXNXBkR2xoYkdsNlpXUXlJaXdpWDJOc1lYTnpibUZ0WlhNaUxDSmZjbVZoWTNRaUxDSmZjSEp2Y0ZSNWNHVnpJaXdpWDFOaFptVkJibU5vYjNJaUxDSmZZM0psWVhSbFEyaGhhVzVsWkVaMWJtTjBhVzl1SWl3aWNISnZjRlI1Y0dWeklpd2laR2x6WVdKc1pXUWlMQ0ppYjI5c0lpd2ljSEpsZG1sdmRYTWlMQ0p1WlhoMElpd2liMjVEYkdsamF5SXNJbVoxYm1NaUxDSnZibE5sYkdWamRDSXNJbVYyWlc1MFMyVjVJaXdpWVc1NUlpd2laR1ZtWVhWc2RGQnliM0J6SWl3aVVHRm5aWEpKZEdWdElpd2lYMUpsWVdOMEpFTnZiWEJ2Ym1WdWRDSXNJbkJ5YjNCeklpd2lZMjl1ZEdWNGRDSXNJbDkwYUdseklpd2lZMkZzYkNJc0luUm9hWE1pTENKb1lXNWtiR1ZUWld4bFkzUWlMQ0ppYVc1a0lpd2lYM0J5YjNSdklpd2ljSEp2ZEc5MGVYQmxJaXdpWlNJc0lsOTBhR2x6SkhCeWIzQnpJaXdpY0hKbGRtVnVkRVJsWm1GMWJIUWlMQ0p5Wlc1a1pYSWlMQ0pmZEdocGN5UndjbTl3Y3pJaUxDSmpiR0Z6YzA1aGJXVWlMQ0p6ZEhsc1pTSXNJbU55WldGMFpVVnNaVzFsYm5RaUxDSkRiMjF3YjI1bGJuUWlMQ0pmWkdWbVlYVnNkQ0lzSW0xdlpIVnNaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRlFTeEpRVUZKUVN4MVFrRkJlVUpETEZGQlFWRXNkMFJCUlhKRFF5eFJRVUZSUXl4WlFVRmhMRVZCUTNKQ1JDeFJRVUZSUlN4aFFVRlZMRVZCUld4Q0xFbEJRVWxETEZWQlFWbE1MSFZDUVVGMVFrTXNVVUZCVVN3eVEwRkZNME5MTEN0Q1FVRnBRMDRzZFVKQlFYVkNReXhSUVVGUkxHZEZRVVZvUlUwc1owSkJRV3RDVUN4MVFrRkJkVUpETEZGQlFWRXNhVVJCUldwRVR5eDNRa0ZCTUVKU0xIVkNRVUYxUWtNc1VVRkJVU3g1UkVGRmVrUlJMRmxCUVdOVUxIVkNRVUYxUWtNc1VVRkJVU3hsUVVVM1ExTXNUMEZCVTFZc2RVSkJRWFZDUXl4UlFVRlJMRlZCUlhoRFZTeFhRVUZoV0N4MVFrRkJkVUpETEZGQlFWRXNaVUZGTlVOWExGbEJRV05hTEhWQ1FVRjFRa01zVVVGQlVTeHBRa0ZGTjBOWkxIVkNRVUY1UW1Jc2RVSkJRWFZDUXl4UlFVRlJMR3REUVVWNFJHRXNWVUZCV1N4RFFVTmtReXhUUVVGVlNpeFhRVUZYVUN4UlFVRlJXU3hMUVVNM1FrTXNVMEZCVlU0c1YwRkJWMUFzVVVGQlVWa3NTMEZETjBKRkxFdEJRVTFRTEZkQlFWZFFMRkZCUVZGWkxFdEJRM3BDUnl4UlFVRlRVaXhYUVVGWFVDeFJRVUZSWjBJc1MwRkROVUpETEZOQlFWVldMRmRCUVZkUUxGRkJRVkZuUWl4TFFVTTNRa1VzVTBGQlZWZ3NWMEZCVjFBc1VVRkJVVzFDTEV0QlJUTkNReXhoUVVGbExFTkJRMnBDVkN4VlFVRlZMRVZCUTFaRkxGVkJRVlVzUlVGRFZrTXNUVUZCVFN4SFFVZEtUeXhWUVVWS0xGTkJRVlZETEVkQlIxSXNVMEZCVTBRc1ZVRkJWVVVzUlVGQlQwTXNSMEZEZUVJc1NVRkJTVU1zUlVGSlNpeFBRVVpCUVN4RlFVRlJTQ3hGUVVGcFFra3NTMEZCUzBNc1MwRkJUVW9zUlVGQlQwTXNTVUZCV1Vjc1RVRkRha1JETEdGQlFXVklMRVZCUVUxSExHRkJRV0ZETEUxQlFVc3NSVUZCU1hwQ0xIZENRVUYzUWtvc1ZVRkJVeXhGUVVGSlNTeDNRa0ZCZDBKS0xGTkJRVk41UWl4TFFVTm9TRUVzUjBGUVZDeEZRVUZKZEVJc1owSkJRV2RDU0N4VFFVRlRjVUlzVlVGQlYwTXNSMEZWZUVNc1NVRkJTVkVzUlVGQlUxUXNWVUZCVlZVc1ZVRXdRM1pDTEU5QmVFTkJSQ3hGUVVGUFJpeGhRVUZsTEZOQlFWTkJMR0ZCUVdGSkxFZEJRekZETEVsQlFVbERMRVZCUVdOT0xFdEJRVXRLTEUxQlEyNUNXaXhGUVVGWGMwSXNSVUZCV1hSQ0xGTkJRM1pDVFN4RlFVRlhaMElzUlVGQldXaENMRk5CUTNaQ1F5eEZRVUZYWlN4RlFVRlpaaXhUUVVWMlFsQXNSVUZEUm5GQ0xFVkJRVVZGTEdsQ1FVbEJha0lzUjBGRFJrRXNSVUZCVTBNc1JVRkJWV01zU1VGSmRrSkdMRVZCUVU5TExFOUJRVk1zVTBGQlUwRXNVMEZEZGtJc1NVRkJTVU1zUlVGQlpWUXNTMEZCUzBvc1RVRkRjRUphTEVWQlFWZDVRaXhGUVVGaGVrSXNVMEZEZUVKRkxFVkJRVmQxUWl4RlFVRmhka0lzVTBGRGVFSkRMRVZCUVU5elFpeEZRVUZoZEVJc1MwRkRjRUpETEVWQlFWVnhRaXhGUVVGaGNrSXNVVUZEZGtKelFpeEZRVUZaUkN4RlFVRmhReXhWUVVONlFrTXNSVUZCVVVZc1JVRkJZVVVzVFVGRGNrSm1MRWRCUVZFc1JVRkJTWEpDTEN0Q1FVRXJRa1lzVTBGQlUyOURMRVZCUVdNc1EwRkJReXhYUVVGWkxGZEJRVmtzVDBGQlVTeFZRVUZYTEZsQlFXRXNWVUZITDBnc1kwRkdUMklzUlVGQlRVNHNaMEpCUTA1TkxFVkJRVTFNTEZOQlEwNWFMRTlCUVU5T0xGRkJRVkYxUXl4alFVRmpMRXRCUVUwc1EwRkRlRU5HTEZkQlFWY3NSVUZCU1doRExGbEJRVmxNTEZOQlFWTnhReXhGUVVGWExFTkJRemRETVVJc1UwRkJWVUVzUlVGRFZrVXNVMEZCVlVFc1JVRkRWa01zUzBGQlRVRXNTVUZGVW5kQ0xFMUJRVTlCTEVkQlEwNW9ReXhQUVVGUFRpeFJRVUZSZFVNc1kwRkJZeTlDTEZsQlFWbFNMRk5CUVZNc1JVRkJTVU1zVlVGQlZVUXNVMEZCVXl4SFFVRkpkVUlzUlVGQlR5eERRVU55Umxvc1UwRkJWVUVzUlVGRFZra3NVMEZCVXl4RlFVRkpUaXgxUWtGQmRVSlVMRk5CUVZObExFVkJRVk5aTEV0QlFVdERMRzFDUVVsNFJGQXNWVUZ5UkZRc1EwRnpSRVZtTEU5QlFVOU9MRkZCUVZGM1F5eFhRVVZxUW01Q0xGVkJRVlZZTEZWQlFWbEJMRlZCUTNSQ1Z5eFZRVUZWUkN4aFFVRmxRU3hoUVVONlFpeEpRVUZKY1VJc1UwRkJWM0JDTEZWQlEyWjJRaXhSUVVGUlJTeFJRVUZWZVVNc1UwRkRiRUpETEU5QlFVODFReXhSUVVGVlFTeFJRVUZwUWlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDMWliMjkwYzNSeVlYQXZiR2xpTDFCaFoyVnlTWFJsYlM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpLF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9leHRlbmRzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSksX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9jbGFzc25hbWVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpLF9yZWFjdD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSksX1BhZ2luYXRpb25JdGVtPV9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL1BhZ2luYXRpb25JdGVtXCIpKSxfYm9vdHN0cmFwVXRpbHM9cmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIiksUGFnaW5hdGlvbj1mdW5jdGlvbihlKXtmdW5jdGlvbiBQYWdpbmF0aW9uKCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybigwLF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShQYWdpbmF0aW9uLGUpLFBhZ2luYXRpb24ucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXt2YXIgZT10aGlzLnByb3BzLHQ9ZS5jbGFzc05hbWUsaT1lLmNoaWxkcmVuLHI9KDAsX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKGUsW1wiY2xhc3NOYW1lXCIsXCJjaGlsZHJlblwiXSksYT0oMCxfYm9vdHN0cmFwVXRpbHMuc3BsaXRCc1Byb3BzKShyKSxvPWFbMF0sbj1hWzFdLHM9KDAsX2Jvb3RzdHJhcFV0aWxzLmdldENsYXNzU2V0KShvKTtyZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInVsXCIsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LG4se2NsYXNzTmFtZTooMCxfY2xhc3NuYW1lcy5kZWZhdWx0KSh0LHMpfSksaSl9LFBhZ2luYXRpb259KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7KDAsX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKFwicGFnaW5hdGlvblwiLFBhZ2luYXRpb24pLFBhZ2luYXRpb24uRmlyc3Q9X1BhZ2luYXRpb25JdGVtLkZpcnN0LFBhZ2luYXRpb24uUHJldj1fUGFnaW5hdGlvbkl0ZW0uUHJldixQYWdpbmF0aW9uLkVsbGlwc2lzPV9QYWdpbmF0aW9uSXRlbS5FbGxpcHNpcyxQYWdpbmF0aW9uLkl0ZW09X1BhZ2luYXRpb25JdGVtLmRlZmF1bHQsUGFnaW5hdGlvbi5OZXh0PV9QYWdpbmF0aW9uSXRlbS5OZXh0LFBhZ2luYXRpb24uTGFzdD1fUGFnaW5hdGlvbkl0ZW0uTGFzdDt2YXIgX2RlZmF1bHQ9UGFnaW5hdGlvbjtleHBvcnRzLmRlZmF1bHQ9X2RlZmF1bHQsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxCaFoybHVZWFJwYjI0dWFuTWlYU3dpYm1GdFpYTWlPbHNpWDJsdWRHVnliM0JTWlhGMWFYSmxWMmxzWkdOaGNtUWlMQ0p5WlhGMWFYSmxJaXdpWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDSXNJbVY0Y0c5eWRITWlMQ0pmWDJWelRXOWtkV3hsSWl3aVpHVm1ZWFZzZENJc0lsOWxlSFJsYm1Sek1pSXNJbDl2WW1wbFkzUlhhWFJvYjNWMFVISnZjR1Z5ZEdsbGMweHZiM05sTWlJc0lsOXBibWhsY21sMGMweHZiM05sTWlJc0lsOWpiR0Z6YzI1aGJXVnpJaXdpWDNKbFlXTjBJaXdpWDFCaFoybHVZWFJwYjI1SmRHVnRJaXdpWDJKdmIzUnpkSEpoY0ZWMGFXeHpJaXdpVUdGbmFXNWhkR2x2YmlJc0lsOVNaV0ZqZENSRGIyMXdiMjVsYm5RaUxDSmhjSEJzZVNJc0luUm9hWE1pTENKaGNtZDFiV1Z1ZEhNaUxDSndjbTkwYjNSNWNHVWlMQ0p5Wlc1a1pYSWlMQ0pmZEdocGN5UndjbTl3Y3lJc0luQnliM0J6SWl3aVkyeGhjM05PWVcxbElpd2lZMmhwYkdSeVpXNGlMQ0pmYzNCc2FYUkNjMUJ5YjNCeklpd2ljM0JzYVhSQ2MxQnliM0J6SWl3aVluTlFjbTl3Y3lJc0ltVnNaVzFsYm5SUWNtOXdjeUlzSW1Oc1lYTnpaWE1pTENKblpYUkRiR0Z6YzFObGRDSXNJbU55WldGMFpVVnNaVzFsYm5RaUxDSkRiMjF3YjI1bGJuUWlMQ0ppYzBOc1lYTnpJaXdpUm1seWMzUWlMQ0pRY21WMklpd2lSV3hzYVhCemFYTWlMQ0pKZEdWdElpd2lUbVY0ZENJc0lreGhjM1FpTENKZlpHVm1ZWFZzZENJc0ltMXZaSFZzWlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkZRU3hKUVVGSlFTeDNRa0ZCTUVKRExGRkJRVkVzZVVSQlJXeERReXgxUWtGQmVVSkVMRkZCUVZFc2QwUkJSWEpEUlN4UlFVRlJReXhaUVVGaExFVkJRM0pDUkN4UlFVRlJSU3hoUVVGVkxFVkJSV3hDTEVsQlFVbERMRlZCUVZsS0xIVkNRVUYxUWtRc1VVRkJVU3d5UTBGRk0wTk5MQ3RDUVVGcFEwd3NkVUpCUVhWQ1JDeFJRVUZSTEdkRlFVVm9SVThzWjBKQlFXdENUaXgxUWtGQmRVSkVMRkZCUVZFc2FVUkJSV3BFVVN4WlFVRmpVQ3gxUWtGQmRVSkVMRkZCUVZFc1pVRkZOME5UTEU5QlFWTlNMSFZDUVVGMVFrUXNVVUZCVVN4VlFVVjRRMVVzWjBKQlFXdENXQ3gzUWtGQmQwSkRMRkZCUVZFc2NVSkJSV3hFVnl4blFrRkJhMEpZTEZGQlFWRXNNRUpCUlRGQ1dTeFhRVVZLTEZOQlFWVkRMRWRCUjFJc1UwRkJVMFFzWVVGRFVDeFBRVUZQUXl4RlFVRnBRa01zVFVGQlRVTXNTMEZCVFVNc1dVRkJZMFFzUzBGeFFuQkVMRTlCZUVKQkxFVkJRVWxTTEdkQ1FVRm5Ra2dzVTBGQlUxRXNWMEZCV1VNc1IwRk5OVUpFTEZkQlFWZExMRlZCUldwQ1F5eFBRVUZUTEZOQlFWTkJMRk5CUTNaQ0xFbEJRVWxETEVWQlFXTktMRXRCUVV0TExFMUJRMjVDUXl4RlFVRlpSaXhGUVVGWlJTeFZRVU40UWtNc1JVRkJWMGdzUlVGQldVY3NVMEZEZGtKR0xFZEJRVkVzUlVGQlNXUXNLMEpCUVN0Q1JpeFRRVUZUWlN4RlFVRmhMRU5CUVVNc1dVRkJZU3hoUVVVdlJVa3NSMEZCWjBJc1JVRkJTVm9zWjBKQlFXZENZU3hqUVVGalNpeEhRVU5zUkVzc1JVRkJWVVlzUlVGQll5eEhRVU40UWtjc1JVRkJaVWdzUlVGQll5eEhRVVUzUWtrc1IwRkJWU3hGUVVGSmFFSXNaMEpCUVdkQ2FVSXNZVUZCWVVnc1IwRkRMME1zVDBGQlQyaENMRTlCUVU5TUxGRkJRVkY1UWl4alFVRmpMRTFCUVUwc1JVRkJTWGhDTEZWQlFWVkVMRk5CUVZNc1IwRkJTWE5DTEVWQlFXTXNRMEZEYWtaTUxGZEJRVmNzUlVGQlNXSXNXVUZCV1Vvc1UwRkJVMmxDTEVWQlFWZE5MRXRCUXpkRFRDeEpRVWREVml4WFFYcENWQ3hEUVRCQ1JVZ3NUMEZCVDB3c1VVRkJVVEJDTEZsQlJXcENMRVZCUVVsdVFpeG5Ra0ZCWjBKdlFpeFRRVUZUTEdGQlFXTnVRaXhaUVVNelEwRXNWMEZCVjI5Q0xFMUJRVkYwUWl4blFrRkJaMEp6UWl4TlFVTnVRM0JDTEZkQlFWZHhRaXhMUVVGUGRrSXNaMEpCUVdkQ2RVSXNTMEZEYkVOeVFpeFhRVUZYYzBJc1UwRkJWM2hDTEdkQ1FVRm5RbmRDTEZOQlEzUkRkRUlzVjBGQlYzVkNMRXRCUVU5NlFpeG5Ra0ZCWjBKT0xGRkJRMnhEVVN4WFFVRlhkMElzUzBGQlR6RkNMR2RDUVVGblFqQkNMRXRCUTJ4RGVFSXNWMEZCVjNsQ0xFdEJRVTh6UWl4blFrRkJaMEl5UWl4TFFVTnNReXhKUVVGSlF5eFRRVUZYTVVJc1YwRkRabFlzVVVGQlVVVXNVVUZCVld0RExGTkJRMnhDUXl4UFFVRlBja01zVVVGQlZVRXNVVUZCYVVJaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Y21WaFkzUXRZbTl2ZEhOMGNtRndMMnhwWWk5UVlXZHBibUYwYVc5dUxtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD1QYWdpbmF0aW9uSXRlbSxleHBvcnRzLkxhc3Q9ZXhwb3J0cy5OZXh0PWV4cG9ydHMuRWxsaXBzaXM9ZXhwb3J0cy5QcmV2PWV4cG9ydHMuRmlyc3Q9dm9pZCAwO3ZhciBfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9leHRlbmRzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSksX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfY2xhc3NuYW1lcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKSxfcHJvcFR5cGVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpLF9yZWFjdD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSksX1NhZmVBbmNob3I9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9TYWZlQW5jaG9yXCIpKSxwcm9wVHlwZXM9e2V2ZW50S2V5Ol9wcm9wVHlwZXMuZGVmYXVsdC5hbnksY2xhc3NOYW1lOl9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsb25TZWxlY3Q6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsZGlzYWJsZWQ6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsYWN0aXZlOl9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLGFjdGl2ZUxhYmVsOl9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcuaXNSZXF1aXJlZH0sZGVmYXVsdFByb3BzPXthY3RpdmU6ITEsZGlzYWJsZWQ6ITEsYWN0aXZlTGFiZWw6XCIoY3VycmVudClcIn07ZnVuY3Rpb24gUGFnaW5hdGlvbkl0ZW0oZSl7dmFyIHQ9ZS5hY3RpdmUscj1lLmRpc2FibGVkLGE9ZS5jbGFzc05hbWUscz1lLnN0eWxlLGk9ZS5hY3RpdmVMYWJlbCxsPWUuY2hpbGRyZW4sbz0oMCxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoZSxbXCJhY3RpdmVcIixcImRpc2FibGVkXCIsXCJjbGFzc05hbWVcIixcInN0eWxlXCIsXCJhY3RpdmVMYWJlbFwiLFwiY2hpbGRyZW5cIl0pLHA9dHx8cj9cInNwYW5cIjpfU2FmZUFuY2hvci5kZWZhdWx0O3JldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwibGlcIix7c3R5bGU6cyxjbGFzc05hbWU6KDAsX2NsYXNzbmFtZXMuZGVmYXVsdCkoYSx7YWN0aXZlOnQsZGlzYWJsZWQ6cn0pfSxfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KHAsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHtkaXNhYmxlZDpyfSxvKSxsLHQmJl9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIse2NsYXNzTmFtZTpcInNyLW9ubHlcIn0saSkpKX1mdW5jdGlvbiBjcmVhdGVCdXR0b24oZSx0LHIpe3ZhciBhLHM7cmV0dXJuIHZvaWQgMD09PXImJihyPWUpLHM9YT1mdW5jdGlvbihlKXtmdW5jdGlvbiBfY2xhc3MoKXtyZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9cmV0dXJuKDAsX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKF9jbGFzcyxlKSxfY2xhc3MucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXt2YXIgZT10aGlzLnByb3BzLGE9ZS5kaXNhYmxlZCxzPWUuY2hpbGRyZW4saT1lLmNsYXNzTmFtZSxsPSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShlLFtcImRpc2FibGVkXCIsXCJjaGlsZHJlblwiLFwiY2xhc3NOYW1lXCJdKSxvPWE/XCJzcGFuXCI6X1NhZmVBbmNob3IuZGVmYXVsdDtyZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImxpXCIsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHtcImFyaWEtbGFiZWxcIjpyLGNsYXNzTmFtZTooMCxfY2xhc3NuYW1lcy5kZWZhdWx0KShpLHtkaXNhYmxlZDphfSl9LGwpLF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQobyxudWxsLHN8fHQpKX0sX2NsYXNzfShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpLGEuZGlzcGxheU5hbWU9ZSxhLnByb3BUeXBlcz17ZGlzYWJsZWQ6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2x9LHN9UGFnaW5hdGlvbkl0ZW0ucHJvcFR5cGVzPXByb3BUeXBlcyxQYWdpbmF0aW9uSXRlbS5kZWZhdWx0UHJvcHM9ZGVmYXVsdFByb3BzO3ZhciBGaXJzdD1jcmVhdGVCdXR0b24oXCJGaXJzdFwiLFwiwqtcIik7ZXhwb3J0cy5GaXJzdD1GaXJzdDt2YXIgUHJldj1jcmVhdGVCdXR0b24oXCJQcmV2XCIsXCLigLlcIik7ZXhwb3J0cy5QcmV2PVByZXY7dmFyIEVsbGlwc2lzPWNyZWF0ZUJ1dHRvbihcIkVsbGlwc2lzXCIsXCLigKZcIixcIk1vcmVcIik7ZXhwb3J0cy5FbGxpcHNpcz1FbGxpcHNpczt2YXIgTmV4dD1jcmVhdGVCdXR0b24oXCJOZXh0XCIsXCLigLpcIik7ZXhwb3J0cy5OZXh0PU5leHQ7dmFyIExhc3Q9Y3JlYXRlQnV0dG9uKFwiTGFzdFwiLFwiwrtcIik7ZXhwb3J0cy5MYXN0PUxhc3Q7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbEJoWjJsdVlYUnBiMjVKZEdWdExtcHpJbDBzSW01aGJXVnpJanBiSWw5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUWlMQ0p5WlhGMWFYSmxJaXdpWlhod2IzSjBjeUlzSWw5ZlpYTk5iMlIxYkdVaUxDSmtaV1poZFd4MElpd2lVR0ZuYVc1aGRHbHZia2wwWlcwaUxDSk1ZWE4wSWl3aVRtVjRkQ0lzSWtWc2JHbHdjMmx6SWl3aVVISmxkaUlzSWtacGNuTjBJaXdpWDJsdWFHVnlhWFJ6VEc5dmMyVXlJaXdpWDJWNGRHVnVaSE15SWl3aVgyOWlhbVZqZEZkcGRHaHZkWFJRY205d1pYSjBhV1Z6VEc5dmMyVXlJaXdpWDJOc1lYTnpibUZ0WlhNaUxDSmZjSEp2Y0ZSNWNHVnpJaXdpWDNKbFlXTjBJaXdpWDFOaFptVkJibU5vYjNJaUxDSndjbTl3Vkhsd1pYTWlMQ0psZG1WdWRFdGxlU0lzSW1GdWVTSXNJbU5zWVhOelRtRnRaU0lzSW5OMGNtbHVaeUlzSW05dVUyVnNaV04wSWl3aVpuVnVZeUlzSW1ScGMyRmliR1ZrSWl3aVltOXZiQ0lzSW1GamRHbDJaU0lzSW1GamRHbDJaVXhoWW1Wc0lpd2lhWE5TWlhGMWFYSmxaQ0lzSW1SbFptRjFiSFJRY205d2N5SXNJbDl5WldZaUxDSnpkSGxzWlNJc0ltTm9hV3hrY21WdUlpd2ljSEp2Y0hNaUxDSkRiMjF3YjI1bGJuUWlMQ0pqY21WaGRHVkZiR1Z0Wlc1MElpd2lZM0psWVhSbFFuVjBkRzl1SWl3aWJtRnRaU0lzSW1SbFptRjFiSFJXWVd4MVpTSXNJbXhoWW1Wc0lpd2lYMk5zWVhOeklpd2lYM1JsYlhBaUxDSmZVbVZoWTNRa1EyOXRjRzl1Wlc1MElpd2lZWEJ3YkhraUxDSjBhR2x6SWl3aVlYSm5kVzFsYm5Seklpd2ljSEp2ZEc5MGVYQmxJaXdpY21WdVpHVnlJaXdpWDNSb2FYTWtjSEp2Y0hNaUxDSmhjbWxoTFd4aFltVnNJaXdpWkdsemNHeGhlVTVoYldVaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJSVUVzU1VGQlNVRXNkVUpCUVhsQ1F5eFJRVUZSTEhkRVFVVnlRME1zVVVGQlVVTXNXVUZCWVN4RlFVTnlRa1FzVVVGQlVVVXNVVUZCVlVNc1pVRkRiRUpJTEZGQlFWRkpMRXRCUVU5S0xGRkJRVkZMTEV0QlFVOU1MRkZCUVZGTkxGTkJRVmRPTEZGQlFWRlBMRXRCUVU5UUxGRkJRVkZSTEZkQlFWRXNSVUZGYUVZc1NVRkJTVU1zWjBKQlFXdENXQ3gxUWtGQmRVSkRMRkZCUVZFc2FVUkJSV3BFVnl4VlFVRlpXaXgxUWtGQmRVSkRMRkZCUVZFc01rTkJSVE5EV1N3clFrRkJhVU5pTEhWQ1FVRjFRa01zVVVGQlVTeG5SVUZGYUVWaExGbEJRV05rTEhWQ1FVRjFRa01zVVVGQlVTeGxRVVUzUTJNc1YwRkJZV1lzZFVKQlFYVkNReXhSUVVGUkxHVkJSVFZEWlN4UFFVRlRhRUlzZFVKQlFYVkNReXhSUVVGUkxGVkJSWGhEWjBJc1dVRkJZMnBDTEhWQ1FVRjFRa01zVVVGQlVTeHBRa0ZITjBOcFFpeFZRVUZaTEVOQlEyUkRMRk5CUVZWS0xGZEJRVmRZTEZGQlFWRm5RaXhKUVVNM1FrTXNWVUZCVjA0c1YwRkJWMWdzVVVGQlVXdENMRTlCUXpsQ1F5eFRRVUZWVWl4WFFVRlhXQ3hSUVVGUmIwSXNTMEZETjBKRExGTkJRVlZXTEZkQlFWZFlMRkZCUVZGelFpeExRVU0zUWtNc1QwRkJVVm9zVjBGQlYxZ3NVVUZCVVhOQ0xFdEJRek5DUlN4WlFVRmhZaXhYUVVGWFdDeFJRVUZSYTBJc1QwRkJUMDhzV1VGRmNrTkRMR0ZCUVdVc1EwRkRha0pJTEZGQlFWRXNSVUZEVWtZc1ZVRkJWU3hGUVVOV1J5eFpRVUZoTEdGQlIyWXNVMEZCVTNaQ0xHVkJRV1V3UWl4SFFVTjBRaXhKUVVGSlNpeEZRVUZUU1N4RlFVRkxTaXhQUVVOa1JpeEZRVUZYVFN4RlFVRkxUaXhUUVVOb1Frb3NSVUZCV1ZVc1JVRkJTMVlzVlVGRGFrSlhMRVZCUVZGRUxFVkJRVXRETEUxQlEySktMRVZCUVdOSExFVkJRVXRJTEZsQlEyNUNTeXhGUVVGWFJpeEZRVUZMUlN4VFFVTm9Ra01zUjBGQlVTeEZRVUZKY2tJc0swSkJRU3RDVkN4VFFVRlRNa0lzUlVGQlRTeERRVUZETEZOQlFWVXNWMEZCV1N4WlFVRmhMRkZCUVZNc1kwRkJaU3hoUVVOMFNFa3NSVUZCV1ZJc1IwRkJWVVlzUlVGQlZ5eFBRVUZUVWl4WlFVRlpZaXhSUVVNeFJDeFBRVUZQV1N4UFFVRlBXaXhSUVVGUlowTXNZMEZCWXl4TFFVRk5MRU5CUTNoRFNpeE5RVUZQUVN4RlFVTlFXQ3hYUVVGWExFVkJRVWxRTEZsQlFWbFdMRk5CUVZOcFFpeEZRVUZYTEVOQlF6ZERUU3hQUVVGUlFTeEZRVU5TUml4VFFVRlZRU3hMUVVWWVZDeFBRVUZQV2l4UlFVRlJaME1zWTBGQlkwUXNSMEZCVnl4RlFVRkpka0lzVlVGQlZWSXNVMEZCVXl4RFFVTm9SWEZDTEZOQlFWVkJMRWRCUTFSVExFZEJRVkZFTEVWQlFWVk9MRWRCUVZWWUxFOUJRVTlhTEZGQlFWRm5ReXhqUVVGakxFOUJRVkVzUTBGRGJFVm1MRlZCUVZjc1YwRkRWazhzUzBGTlRDeFRRVUZUVXl4aFFVRmhReXhGUVVGTlF5eEZRVUZqUXl4SFFVTjRReXhKUVVGSlF5eEZRVUZSUXl4RlFVMWFMRmxCU21Nc1NVRkJWa1lzU1VGRFJrRXNSVUZCVVVZc1IwRkhTRWtzUlVGQlVVUXNSVUZGWml4VFFVRlZSU3hIUVVkU0xGTkJRVk5HTEZOQlExQXNUMEZCVDBVc1JVRkJhVUpETEUxQlFVMURMRXRCUVUxRExGbEJRV05FTEV0QmIwSndSQ3hQUVhaQ1FTeEZRVUZKYkVNc1owSkJRV2RDVUN4VFFVRlRjVU1zVDBGQlVVVXNSMEZOZUVKR0xFOUJRVTlOTEZWQlJXSkRMRTlCUVZNc1UwRkJVMEVzVTBGRGRrSXNTVUZCU1VNc1JVRkJZMG9zUzBGQlMxZ3NUVUZEYmtKVUxFVkJRVmQzUWl4RlFVRlplRUlzVTBGRGRrSlJMRVZCUVZkblFpeEZRVUZaYUVJc1UwRkRka0phTEVWQlFWazBRaXhGUVVGWk5VSXNWVUZEZUVKaExFZEJRVkVzUlVGQlNYSkNMQ3RDUVVFclFsUXNVMEZCVXpaRExFVkJRV0VzUTBGQlF5eFhRVUZaTEZkQlFWa3NZMEZETVVaa0xFVkJRVmxXTEVWQlFWY3NUMEZCVTFJc1dVRkJXV0lzVVVGRGFFUXNUMEZCVDFrc1QwRkJUMW9zVVVGQlVXZERMR05CUVdNc1RVRkJUU3hGUVVGSmVFSXNWVUZCVlZJc1UwRkJVeXhEUVVNdlJEaERMR0ZCUVdOV0xFVkJRMlJ1UWl4WFFVRlhMRVZCUVVsUUxGbEJRVmxXTEZOQlFWTnBRaXhGUVVGWExFTkJRemREU1N4VFFVRlZRU3hMUVVWWVV5eEhRVUZSYkVJc1QwRkJUMW9zVVVGQlVXZERMR05CUVdORUxFVkJRVmNzUzBGQlRVWXNSMEZCV1Uwc1MwRkhhRVZGTEU5QmVFSlVMRU5CZVVKRmVrSXNUMEZCVDFvc1VVRkJVU3RDTEZkQlFWbE5MRVZCUVU5VkxGbEJRV05pTEVWQlFVMUhMRVZCUVU5MlFpeFZRVUZaTEVOQlEzcEZUeXhUUVVGVlZpeFhRVUZYV0N4UlFVRlJjMElzVFVGRE5VSm5RaXhGUVhaRFRISkRMR1ZCUVdWaExGVkJRVmxCTEZWQlF6TkNZaXhsUVVGbGVVSXNZVUZCWlVFc1lVRjVRemxDTEVsQlFVbHdRaXhOUVVGUk1rSXNZVUZCWVN4UlFVRlRMRXRCUTJ4RGJrTXNVVUZCVVZFc1RVRkJVVUVzVFVGRGFFSXNTVUZCU1VRc1MwRkJUelJDTEdGQlFXRXNUMEZCVVN4TFFVTm9RMjVETEZGQlFWRlBMRXRCUVU5QkxFdEJRMllzU1VGQlNVUXNVMEZCVnpaQ0xHRkJRV0VzVjBGQldTeEpRVUZWTEZGQlEyeEVia01zVVVGQlVVMHNVMEZCVjBFc1UwRkRia0lzU1VGQlNVUXNTMEZCVHpoQ0xHRkJRV0VzVDBGQlVTeExRVU5vUTI1RExGRkJRVkZMTEV0QlFVOUJMRXRCUTJZc1NVRkJTVVFzUzBGQlR5dENMR0ZCUVdFc1QwRkJVU3hMUVVOb1EyNURMRkZCUVZGSkxFdEJRVTlCSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdOMExXSnZiM1J6ZEhKaGNDOXNhV0l2VUdGbmFXNWhkR2x2YmtsMFpXMHVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0PXJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO2V4cG9ydHMuX19lc01vZHVsZT0hMCxleHBvcnRzLmRlZmF1bHQ9dm9pZCAwO3ZhciBfYXNzaWduPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9vYmplY3QvYXNzaWduXCIpKSxfdmFsdWVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9vYmplY3QvdmFsdWVzXCIpKSxfZXh0ZW5kczI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpLF9pbmhlcml0c0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSksX2NsYXNzbmFtZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSksX3Byb3BUeXBlcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKSxfcmVhY3Q9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpLF91bmNvbnRyb2xsYWJsZT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ1bmNvbnRyb2xsYWJsZVwiKSksX3dhcm5pbmc9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSksX2Jvb3RzdHJhcFV0aWxzPXJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpLF9TdHlsZUNvbmZpZz1yZXF1aXJlKFwiLi91dGlscy9TdHlsZUNvbmZpZ1wiKSxfUGFuZWxCb2R5PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vUGFuZWxCb2R5XCIpKSxfUGFuZWxIZWFkaW5nPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vUGFuZWxIZWFkaW5nXCIpKSxfUGFuZWxUaXRsZT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1BhbmVsVGl0bGVcIikpLF9QYW5lbEZvb3Rlcj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1BhbmVsRm9vdGVyXCIpKSxfUGFuZWxUb2dnbGU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9QYW5lbFRvZ2dsZVwiKSksX1BhbmVsQ29sbGFwc2U9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9QYW5lbENvbGxhcHNlXCIpKSxoYXM9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxkZWZhdWx0R2V0SWQ9ZnVuY3Rpb24gZGVmYXVsdEdldElkKGUsdCl7cmV0dXJuIGU/ZStcIi0tXCIrdDpudWxsfSxwcm9wVHlwZXM9e2V4cGFuZGVkOl9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLG9uVG9nZ2xlOl9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLGV2ZW50S2V5Ol9wcm9wVHlwZXMuZGVmYXVsdC5hbnksaWQ6X3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ30sY29udGV4dFR5cGVzPXskYnNfcGFuZWxHcm91cDpfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe2dldElkOl9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLGFjdGl2ZUtleTpfcHJvcFR5cGVzLmRlZmF1bHQuYW55LG9uVG9nZ2xlOl9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jfSl9LGNoaWxkQ29udGV4dFR5cGVzPXskYnNfcGFuZWw6X3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtoZWFkaW5nSWQ6X3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxib2R5SWQ6X3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxic0NsYXNzOl9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsb25Ub2dnbGU6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsZXhwYW5kZWQ6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2x9KX0sUGFuZWw9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gUGFuZWwoKXtmb3IodmFyIHQsbD1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KGwpLHI9MDtyPGw7cisrKW5bcl09YXJndW1lbnRzW3JdO3JldHVybih0PWUuY2FsbC5hcHBseShlLFt0aGlzXS5jb25jYXQobikpfHx0aGlzKS5oYW5kbGVUb2dnbGU9ZnVuY3Rpb24oZSl7dmFyIGw9dC5jb250ZXh0LiRic19wYW5lbEdyb3VwLG49IXQuZ2V0RXhwYW5kZWQoKTtsJiZsLm9uVG9nZ2xlP2wub25Ub2dnbGUodC5wcm9wcy5ldmVudEtleSxuLGUpOnQucHJvcHMub25Ub2dnbGUobixlKX0sdH0oMCxfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoUGFuZWwsZSk7dmFyIHQ9UGFuZWwucHJvdG90eXBlO3JldHVybiB0LmdldENoaWxkQ29udGV4dD1mdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKXt2YXIgZSx0PXRoaXMucHJvcHMsbD10LmV2ZW50S2V5LG49dC5pZCxyPW51bGw9PWw/bjpsO2lmKG51bGwhPT1yKXt2YXIgYT10aGlzLmNvbnRleHQuJGJzX3BhbmVsR3JvdXAsbz1hJiZhLmdldElkfHxkZWZhdWx0R2V0SWQ7ZT17aGVhZGluZ0lkOm8ocixcImhlYWRpbmdcIiksYm9keUlkOm8ocixcImJvZHlcIil9fXJldHVybnskYnNfcGFuZWw6KDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LGUse2JzQ2xhc3M6dGhpcy5wcm9wcy5ic0NsYXNzLGV4cGFuZGVkOnRoaXMuZ2V0RXhwYW5kZWQoKSxvblRvZ2dsZTp0aGlzLmhhbmRsZVRvZ2dsZX0pfX0sdC5nZXRFeHBhbmRlZD1mdW5jdGlvbiBnZXRFeHBhbmRlZCgpe3ZhciBlPXRoaXMuY29udGV4dC4kYnNfcGFuZWxHcm91cDtyZXR1cm4gZSYmaGFzLmNhbGwoZSxcImFjdGl2ZUtleVwiKT8oXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKDAsX3dhcm5pbmcuZGVmYXVsdCkobnVsbD09dGhpcy5wcm9wcy5leHBhbmRlZCxcIlNwZWNpZnlpbmcgYDxQYW5lbD5gIGBleHBhbmRlZGAgaW4gdGhlIGNvbnRleHQgb2YgYW4gYWNjb3JkaW9uIGA8UGFuZWxHcm91cD5gIGlzIG5vdCBzdXBwb3J0ZWQuIFNldCBgYWN0aXZlS2V5YCBvbiB0aGUgYDxQYW5lbEdyb3VwPmAgaW5zdGVhZC5cIiksZS5hY3RpdmVLZXk9PT10aGlzLnByb3BzLmV2ZW50S2V5KTohIXRoaXMucHJvcHMuZXhwYW5kZWR9LHQucmVuZGVyPWZ1bmN0aW9uIHJlbmRlcigpe3ZhciBlPXRoaXMucHJvcHMsdD1lLmNsYXNzTmFtZSxsPWUuY2hpbGRyZW4sbj0oMCxfYm9vdHN0cmFwVXRpbHMuc3BsaXRCc1Byb3BzQW5kT21pdCkodGhpcy5wcm9wcyxbXCJvblRvZ2dsZVwiLFwiZXZlbnRLZXlcIixcImV4cGFuZGVkXCJdKSxyPW5bMF0sYT1uWzFdO3JldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LGEse2NsYXNzTmFtZTooMCxfY2xhc3NuYW1lcy5kZWZhdWx0KSh0LCgwLF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkocikpfSksbCl9LFBhbmVsfShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1BhbmVsLnByb3BUeXBlcz1wcm9wVHlwZXMsUGFuZWwuY29udGV4dFR5cGVzPWNvbnRleHRUeXBlcyxQYW5lbC5jaGlsZENvbnRleHRUeXBlcz1jaGlsZENvbnRleHRUeXBlczt2YXIgVW5jb250cm9sbGVkUGFuZWw9KDAsX3VuY29udHJvbGxhYmxlLmRlZmF1bHQpKCgwLF9ib290c3RyYXBVdGlscy5ic0NsYXNzKShcInBhbmVsXCIsKDAsX2Jvb3RzdHJhcFV0aWxzLmJzU3R5bGVzKSgoMCxfdmFsdWVzLmRlZmF1bHQpKF9TdHlsZUNvbmZpZy5TdGF0ZSkuY29uY2F0KFtfU3R5bGVDb25maWcuU3R5bGUuREVGQVVMVCxfU3R5bGVDb25maWcuU3R5bGUuUFJJTUFSWV0pLF9TdHlsZUNvbmZpZy5TdHlsZS5ERUZBVUxULFBhbmVsKSkse2V4cGFuZGVkOlwib25Ub2dnbGVcIn0pOygwLF9hc3NpZ24uZGVmYXVsdCkoVW5jb250cm9sbGVkUGFuZWwse0hlYWRpbmc6X1BhbmVsSGVhZGluZy5kZWZhdWx0LFRpdGxlOl9QYW5lbFRpdGxlLmRlZmF1bHQsQm9keTpfUGFuZWxCb2R5LmRlZmF1bHQsRm9vdGVyOl9QYW5lbEZvb3Rlci5kZWZhdWx0LFRvZ2dsZTpfUGFuZWxUb2dnbGUuZGVmYXVsdCxDb2xsYXBzZTpfUGFuZWxDb2xsYXBzZS5kZWZhdWx0fSk7dmFyIF9kZWZhdWx0PVVuY29udHJvbGxlZFBhbmVsO2V4cG9ydHMuZGVmYXVsdD1fZGVmYXVsdCxtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbEJoYm1Wc0xtcHpJbDBzSW01aGJXVnpJanBiSWw5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUWlMQ0p5WlhGMWFYSmxJaXdpWlhod2IzSjBjeUlzSWw5ZlpYTk5iMlIxYkdVaUxDSmtaV1poZFd4MElpd2lYMkZ6YzJsbmJpSXNJbDkyWVd4MVpYTWlMQ0pmWlhoMFpXNWtjeklpTENKZmFXNW9aWEpwZEhOTWIyOXpaVElpTENKZlkyeGhjM051WVcxbGN5SXNJbDl3Y205d1ZIbHdaWE1pTENKZmNtVmhZM1FpTENKZmRXNWpiMjUwY205c2JHRmliR1VpTENKZmQyRnlibWx1WnlJc0lsOWliMjkwYzNSeVlYQlZkR2xzY3lJc0lsOVRkSGxzWlVOdmJtWnBaeUlzSWw5UVlXNWxiRUp2WkhraUxDSmZVR0Z1Wld4SVpXRmthVzVuSWl3aVgxQmhibVZzVkdsMGJHVWlMQ0pmVUdGdVpXeEdiMjkwWlhJaUxDSmZVR0Z1Wld4VWIyZG5iR1VpTENKZlVHRnVaV3hEYjJ4c1lYQnpaU0lzSW1oaGN5SXNJazlpYW1WamRDSXNJbkJ5YjNSdmRIbHdaU0lzSW1oaGMwOTNibEJ5YjNCbGNuUjVJaXdpWkdWbVlYVnNkRWRsZEVsa0lpd2lhV1FpTENKMGVYQmxJaXdpY0hKdmNGUjVjR1Z6SWl3aVpYaHdZVzVrWldRaUxDSmliMjlzSWl3aWIyNVViMmRuYkdVaUxDSm1kVzVqSWl3aVpYWmxiblJMWlhraUxDSmhibmtpTENKemRISnBibWNpTENKamIyNTBaWGgwVkhsd1pYTWlMQ0lrWW5OZmNHRnVaV3hIY205MWNDSXNJbk5vWVhCbElpd2laMlYwU1dRaUxDSmhZM1JwZG1WTFpYa2lMQ0pqYUdsc1pFTnZiblJsZUhSVWVYQmxjeUlzSWlSaWMxOXdZVzVsYkNJc0ltaGxZV1JwYm1kSlpDSXNJbUp2WkhsSlpDSXNJbUp6UTJ4aGMzTWlMQ0pRWVc1bGJDSXNJbDlTWldGamRDUkRiMjF3YjI1bGJuUWlMQ0pmZEdocGN5SXNJbDlzWlc0aUxDSmhjbWQxYldWdWRITWlMQ0pzWlc1bmRHZ2lMQ0poY21keklpd2lRWEp5WVhraUxDSmZhMlY1SWl3aVkyRnNiQ0lzSW1Gd2NHeDVJaXdpZEdocGN5SXNJbU52Ym1OaGRDSXNJbWhoYm1Sc1pWUnZaMmRzWlNJc0ltVWlMQ0p3WVc1bGJFZHliM1Z3SWl3aVkyOXVkR1Y0ZENJc0ltZGxkRVY0Y0dGdVpHVmtJaXdpY0hKdmNITWlMQ0pmY0hKdmRHOGlMQ0puWlhSRGFHbHNaRU52Ym5SbGVIUWlMQ0pwWkhNaUxDSmZkR2hwY3lSd2NtOXdjeUlzSW1sa1MyVjVJaXdpY0hKdlkyVnpjeUlzSW1WdWRpSXNJazVQUkVWZlJVNVdJaXdpY21WdVpHVnlJaXdpWDNSb2FYTWtjSEp2Y0hNeUlpd2lZMnhoYzNOT1lXMWxJaXdpWTJocGJHUnlaVzRpTENKZmMzQnNhWFJDYzFCeWIzQnpRVzVrVDIxcGRDSXNJbk53YkdsMFFuTlFjbTl3YzBGdVpFOXRhWFFpTENKaWMxQnliM0J6SWl3aVkzSmxZWFJsUld4bGJXVnVkQ0lzSW1kbGRFTnNZWE56VTJWMElpd2lRMjl0Y0c5dVpXNTBJaXdpVlc1amIyNTBjbTlzYkdWa1VHRnVaV3dpTENKaWMxTjBlV3hsY3lJc0lsTjBZWFJsSWl3aVUzUjViR1VpTENKRVJVWkJWVXhVSWl3aVVGSkpUVUZTV1NJc0lraGxZV1JwYm1jaUxDSlVhWFJzWlNJc0lrSnZaSGtpTENKR2IyOTBaWElpTENKVWIyZG5iR1VpTENKRGIyeHNZWEJ6WlNJc0lsOWtaV1poZFd4MElpd2liVzlrZFd4bElsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVVZCTEVsQlFVbEJMSFZDUVVGNVFrTXNVVUZCVVN4M1JFRkZja05ETEZGQlFWRkRMRmxCUVdFc1JVRkRja0pFTEZGQlFWRkZMR0ZCUVZVc1JVRkZiRUlzU1VGQlNVTXNVVUZCVlV3c2RVSkJRWFZDUXl4UlFVRlJMR2xFUVVWNlEwc3NVVUZCVlU0c2RVSkJRWFZDUXl4UlFVRlJMR2xFUVVWNlEwMHNWVUZCV1ZBc2RVSkJRWFZDUXl4UlFVRlJMREpEUVVVelEwOHNaMEpCUVd0Q1VpeDFRa0ZCZFVKRExGRkJRVkVzYVVSQlJXcEVVU3haUVVGalZDeDFRa0ZCZFVKRExGRkJRVkVzWlVGRk4wTlRMRmRCUVdGV0xIVkNRVUYxUWtNc1VVRkJVU3hsUVVVMVExVXNUMEZCVTFnc2RVSkJRWFZDUXl4UlFVRlJMRlZCUlhoRFZ5eG5Ra0ZCYTBKYUxIVkNRVUYxUWtNc1VVRkJVU3h0UWtGRmFrUlpMRk5CUVZkaUxIVkNRVUYxUWtNc1VVRkJVU3haUVVVeFEyRXNaMEpCUVd0Q1lpeFJRVUZSTERCQ1FVVXhRbU1zWVVGQlpXUXNVVUZCVVN4MVFrRkZka0psTEZkQlFXRm9RaXgxUWtGQmRVSkRMRkZCUVZFc1owSkJSVFZEWjBJc1kwRkJaMEpxUWl4MVFrRkJkVUpETEZGQlFWRXNiVUpCUlM5RGFVSXNXVUZCWTJ4Q0xIVkNRVUYxUWtNc1VVRkJVU3hwUWtGRk4wTnJRaXhoUVVGbGJrSXNkVUpCUVhWQ1F5eFJRVUZSTEd0Q1FVVTVRMjFDTEdGQlFXVndRaXgxUWtGQmRVSkRMRkZCUVZFc2EwSkJSVGxEYjBJc1pVRkJhVUp5UWl4MVFrRkJkVUpETEZGQlFWRXNiMEpCUldoRWNVSXNTVUZCVFVNc1QwRkJUME1zVlVGQlZVTXNaVUZGZGtKRExHRkJRV1VzVTBGQlUwRXNZVUZCWVVNc1JVRkJTVU1zUjBGRE0wTXNUMEZCVDBRc1JVRkJTMEVzUlVGQlN5eExRVUZQUXl4RlFVRlBMRTFCUnpkQ1F5eFZRVUZaTEVOQlVXUkRMRk5CUVZWd1FpeFhRVUZYVGl4UlFVRlJNa0lzUzBGUE4wSkRMRk5CUVZWMFFpeFhRVUZYVGl4UlFVRlJOa0lzUzBGRE4wSkRMRk5CUVZWNFFpeFhRVUZYVGl4UlFVRlJLMElzU1VGTE4wSlNMRWRCUVVscVFpeFhRVUZYVGl4UlFVRlJaME1zVVVGRmNrSkRMR0ZCUVdVc1EwRkRha0pETEdWQlFXZENOVUlzVjBGQlYwNHNVVUZCVVcxRExFMUJRVTBzUTBGRGRrTkRMRTFCUVU4NVFpeFhRVUZYVGl4UlFVRlJOa0lzUzBGRE1VSlJMRlZCUVZjdlFpeFhRVUZYVGl4UlFVRlJLMElzU1VGRE9VSklMRk5CUVZWMFFpeFhRVUZYVGl4UlFVRlJOa0lzVVVGSE4wSlRMR3RDUVVGdlFpeERRVU4wUWtNc1ZVRkJWMnBETEZkQlFWZE9MRkZCUVZGdFF5eE5RVUZOTEVOQlEyeERTeXhWUVVGWGJFTXNWMEZCVjA0c1VVRkJVV2RETEU5QlF6bENVeXhQUVVGUmJrTXNWMEZCVjA0c1VVRkJVV2RETEU5QlF6TkNWU3hSUVVGVGNFTXNWMEZCVjA0c1VVRkJVV2RETEU5QlF6VkNTaXhUUVVGVmRFSXNWMEZCVjA0c1VVRkJVVFpDTEV0QlF6ZENTQ3hUUVVGVmNFSXNWMEZCVjA0c1VVRkJVVEpDTEZGQlNUZENaMElzVFVGRlNpeFRRVUZWUXl4SFFVZFNMRk5CUVZORUxGRkJSMUFzU1VGR1FTeEpRVUZKUlN4RlFVVkxReXhGUVVGUFF5eFZRVUZWUXl4UFFVRlJReXhGUVVGUExFbEJRVWxETEUxQlFVMUtMRWRCUVU5TExFVkJRVThzUlVGQlIwRXNSVUZCVDB3c1JVRkJUVXNzU1VGREwwVkdMRVZCUVV0RkxFZEJRVkZLTEZWQlFWVkpMRWRCWjBKNlFpeFBRV0pCVGl4RlFVRlJSQ3hGUVVGcFFsRXNTMEZCUzBNc1RVRkJUVlFzUlVGQmEwSXNRMEZCUTFVc1RVRkJUVU1zVDBGQlQwNHNTMEZCVlVzc1RVRkZlRVZGTEdGQlFXVXNVMEZCVlVNc1IwRkROMElzU1VGQlNVTXNSVUZCWVdJc1JVRkJUV01zVVVGQlVYcENMR1ZCUXpOQ1VpeEhRVUZaYlVJc1JVRkJUV1VzWTBGRmJFSkdMRWRCUVdOQkxFVkJRVmM1UWl4VFFVTXpRamhDTEVWQlFWYzVRaXhUUVVGVGFVSXNSVUZCVFdkQ0xFMUJRVTB2UWl4VFFVRlZTaXhGUVVGVkswSXNSMEZGY0VSYUxFVkJRVTFuUWl4TlFVRk5ha01zVTBGQlUwWXNSVUZCVlN0Q0xFbEJTVFZDV2l4SFFYUkNWQ3hGUVVGSmVrTXNaMEpCUVdkQ1NpeFRRVUZUTWtNc1RVRkJUME1zUjBGNVFuQkRMRWxCUVVsclFpeEZRVUZUYmtJc1RVRkJUWFpDTEZWQmIwUnVRaXhQUVd4RVFUQkRMRVZCUVU5RExHZENRVUZyUWl4VFFVRlRRU3hyUWtGRGFFTXNTVUZKU1VNc1JVRktRVU1zUlVGQlkxZ3NTMEZCUzA4c1RVRkRia0l2UWl4RlFVRlhiVU1zUlVGQldXNURMRk5CUTNaQ1VDeEZRVUZMTUVNc1JVRkJXVEZETEVkQlEycENNa01zUlVGQmIwSXNUVUZCV25CRExFVkJRVzFDVUN4RlFVRkxUeXhGUVVkd1F5eEhRVUZqTEU5QlFWWnZReXhGUVVGblFpeERRVU5zUWl4SlFVRkpVaXhGUVVGaFNpeExRVUZMU3l4UlFVRlJla0lzWlVGRE1VSkZMRVZCUVZGelFpeEhRVUZqUVN4RlFVRlhkRUlzVDBGQlUyUXNZVUZET1VNd1F5eEZRVUZOTEVOQlEwcDRRaXhWUVVGWFNpeEZRVUZOT0VJc1JVRkJUeXhYUVVONFFucENMRTlCUVZGTUxFVkJRVTA0UWl4RlFVRlBMRk5CU1hwQ0xFMUJRVThzUTBGRFRETkNMRmRCUVZjc1JVRkJTWEJETEZWQlFWVklMRk5CUVZNc1IwRkJTV2RGTEVWQlFVc3NRMEZEZWtOMFFpeFJRVUZUV1N4TFFVRkxUeXhOUVVGTmJrSXNVVUZEY0VKb1FpeFRRVUZWTkVJc1MwRkJTMDBzWTBGRFptaERMRk5CUVZVd1FpeExRVUZMUlN4cFFrRkxja0pOTEVWQlFVOUdMRmxCUVdNc1UwRkJVMEVzWTBGRE5VSXNTVUZCU1VZc1JVRkJZVW9zUzBGQlMwc3NVVUZCVVhwQ0xHVkJSVGxDTEU5QlFVbDNRaXhIUVVGamVFTXNTVUZCU1d0RExFdEJRVXROTEVWQlFWa3NZMEZEV2l4bFFVRjZRbE1zVVVGQlVVTXNTVUZCU1VNc1YwRkJORUlzUlVGQlNUVkVMRk5CUVZOVUxGTkJRV2RETEUxQlFYWkNjMFFzUzBGQlMwOHNUVUZCVFc1RExGTkJRV3RDTEd0S1FVTndSbWRETEVWQlFWZHlRaXhaUVVGamFVSXNTMEZCUzA4c1RVRkJUUzlDTEZsQlIzQkRkMElzUzBGQlMwOHNUVUZCVFc1RExGVkJSM1JDYjBNc1JVRkJUMUVzVDBGQlV5eFRRVUZUUVN4VFFVTjJRaXhKUVVGSlF5eEZRVUZsYWtJc1MwRkJTMDhzVFVGRGNFSlhMRVZCUVZsRUxFVkJRV0ZETEZWQlEzcENReXhGUVVGWFJpeEZRVUZoUlN4VFFVVjRRa01zUjBGQmRVSXNSVUZCU1doRkxHZENRVUZuUW1sRkxIRkNRVUZ4UW5KQ0xFdEJRVXRQTEUxQlFVOHNRMEZCUXl4WFFVRlpMRmRCUVZrc1lVRkRja2RsTEVWQlFWVkdMRVZCUVhGQ0xFZEJReTlDWWl4RlFVRlJZU3hGUVVGeFFpeEhRVVZxUXl4UFFVRlBia1VzVDBGQlQxQXNVVUZCVVRaRkxHTkJRV01zVDBGQlR5eEZRVUZKTVVVc1ZVRkJWVWdzVTBGQlV5eEhRVUZKTmtRc1JVRkJUeXhEUVVNelJWY3NWMEZCVnl4RlFVRkpia1VzV1VGQldVd3NVMEZCVTNkRkxFZEJRVmNzUlVGQlNUbEVMR2RDUVVGblFtOUZMR0ZCUVdGR0xFMUJRemxGU0N4SlFVZERPVUlzVFVFNVJWUXNRMEVyUlVWd1F5eFBRVUZQVUN4UlFVRlJLMFVzVjBGRmFrSndReXhOUVVGTmJFSXNWVUZCV1VFc1ZVRkRiRUpyUWl4TlFVRk5WaXhoUVVGbFFTeGhRVU55UWxVc1RVRkJUVXdzYTBKQlFXOUNRU3hyUWtGRE1VSXNTVUZCU1RCRExHMUNRVUZ2UWl4RlFVRkplRVVzWjBKQlFXZENVaXhWUVVGVExFVkJRVWxWTEdkQ1FVRm5RbWRETEZOQlFWTXNVMEZCVXl4RlFVRkphRU1zWjBKQlFXZENkVVVzVjBGQlZTeEZRVUZKTDBVc1VVRkJVVVlzVTBGQlUxY3NZVUZCWVhWRkxFOUJRVTh6UWl4UFFVRlBMRU5CUVVNMVF5eGhRVUZoZDBVc1RVRkJUVU1zVVVGQlUzcEZMR0ZCUVdGM1JTeE5RVUZOUlN4VlFVRlhNVVVzWVVGQllYZEZMRTFCUVUxRExGRkJRVk42UXl4UlFVRlRMRU5CUTNaUmFrSXNVMEZCVlN4alFVVmFMRVZCUVVsNlFpeFJRVUZSUkN4VFFVRlRaMFlzYTBKQlFXMUNMRU5CUTNSRFRTeFJRVUZUZWtVc1kwRkJZMklzVVVGRGRrSjFSaXhOUVVGUGVrVXNXVUZCV1dRc1VVRkRia0ozUml4TFFVRk5OVVVzVjBGQlYxb3NVVUZEYWtKNVJpeFBRVUZSTVVVc1lVRkJZV1lzVVVGRGNrSXdSaXhQUVVGUk1VVXNZVUZCWVdoQ0xGRkJRM0pDTWtZc1UwRkJWVEZGTEdWQlFXVnFRaXhWUVVVelFpeEpRVUZKTkVZc1UwRkJWMW9zYTBKQlEyWnNSaXhSUVVGUlJTeFJRVUZWTkVZc1UwRkRiRUpETEU5QlFVOHZSaXhSUVVGVlFTeFJRVUZwUWlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDMWliMjkwYzNSeVlYQXZiR2xpTDFCaGJtVnNMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0PXJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO2V4cG9ydHMuX19lc01vZHVsZT0hMCxleHBvcnRzLmRlZmF1bHQ9dm9pZCAwO3ZhciBfZXh0ZW5kczI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpLF9pbmhlcml0c0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSksX3Byb3BUeXBlcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKSxfcmVhY3Q9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpLF9jbGFzc25hbWVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpLF9ib290c3RyYXBVdGlscz1yZXF1aXJlKFwiLi91dGlscy9ib290c3RyYXBVdGlsc1wiKSxfUGFuZWxDb2xsYXBzZT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1BhbmVsQ29sbGFwc2VcIikpLHByb3BUeXBlcz17Y29sbGFwc2libGU6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wuaXNSZXF1aXJlZH0sZGVmYXVsdFByb3BzPXtjb2xsYXBzaWJsZTohMX0sY29udGV4dFR5cGVzPXskYnNfcGFuZWw6X3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtic0NsYXNzOl9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmd9KX0sUGFuZWxCb2R5PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIFBhbmVsQm9keSgpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4oMCxfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoUGFuZWxCb2R5LGUpLFBhbmVsQm9keS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uIHJlbmRlcigpe3ZhciBlPXRoaXMucHJvcHMsdD1lLmNoaWxkcmVuLHM9ZS5jbGFzc05hbWUscj1lLmNvbGxhcHNpYmxlLGw9KHRoaXMuY29udGV4dC4kYnNfcGFuZWx8fHt9KS5ic0NsYXNzLGE9KDAsX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wc0FuZE9taXQpKHRoaXMucHJvcHMsW1wiY29sbGFwc2libGVcIl0pLG89YVswXSxwPWFbMV07by5ic0NsYXNzPWx8fG8uYnNDbGFzczt2YXIgaT1fcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LHAse2NsYXNzTmFtZTooMCxfY2xhc3NuYW1lcy5kZWZhdWx0KShzLCgwLF9ib290c3RyYXBVdGlscy5wcmVmaXgpKG8sXCJib2R5XCIpKX0pLHQpO3JldHVybiByJiYoaT1fcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9QYW5lbENvbGxhcHNlLmRlZmF1bHQsbnVsbCxpKSksaX0sUGFuZWxCb2R5fShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1BhbmVsQm9keS5wcm9wVHlwZXM9cHJvcFR5cGVzLFBhbmVsQm9keS5kZWZhdWx0UHJvcHM9ZGVmYXVsdFByb3BzLFBhbmVsQm9keS5jb250ZXh0VHlwZXM9Y29udGV4dFR5cGVzO3ZhciBfZGVmYXVsdD0oMCxfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoXCJwYW5lbFwiLFBhbmVsQm9keSk7ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsQmhibVZzUW05a2VTNXFjeUpkTENKdVlXMWxjeUk2V3lKZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBJaXdpY21WeGRXbHlaU0lzSW1WNGNHOXlkSE1pTENKZlgyVnpUVzlrZFd4bElpd2laR1ZtWVhWc2RDSXNJbDlsZUhSbGJtUnpNaUlzSWw5cGJtaGxjbWwwYzB4dmIzTmxNaUlzSWw5d2NtOXdWSGx3WlhNaUxDSmZjbVZoWTNRaUxDSmZZMnhoYzNOdVlXMWxjeUlzSWw5aWIyOTBjM1J5WVhCVmRHbHNjeUlzSWw5UVlXNWxiRU52Ykd4aGNITmxJaXdpY0hKdmNGUjVjR1Z6SWl3aVkyOXNiR0Z3YzJsaWJHVWlMQ0ppYjI5c0lpd2lhWE5TWlhGMWFYSmxaQ0lzSW1SbFptRjFiSFJRY205d2N5SXNJbU52Ym5SbGVIUlVlWEJsY3lJc0lpUmljMTl3WVc1bGJDSXNJbk5vWVhCbElpd2lZbk5EYkdGemN5SXNJbk4wY21sdVp5SXNJbEJoYm1Wc1FtOWtlU0lzSWw5U1pXRmpkQ1JEYjIxd2IyNWxiblFpTENKaGNIQnNlU0lzSW5Sb2FYTWlMQ0poY21kMWJXVnVkSE1pTENKd2NtOTBiM1I1Y0dVaUxDSnlaVzVrWlhJaUxDSmZkR2hwY3lSd2NtOXdjeUlzSW5CeWIzQnpJaXdpWTJocGJHUnlaVzRpTENKamJHRnpjMDVoYldVaUxDSmZZbk5EYkdGemN5SXNJbU52Ym5SbGVIUWlMQ0pmYzNCc2FYUkNjMUJ5YjNCelFXNWtUMjFwZENJc0luTndiR2wwUW5OUWNtOXdjMEZ1WkU5dGFYUWlMQ0ppYzFCeWIzQnpJaXdpWld4bGJXVnVkRkJ5YjNCeklpd2lZbTlrZVNJc0ltTnlaV0YwWlVWc1pXMWxiblFpTENKd2NtVm1hWGdpTENKRGIyMXdiMjVsYm5RaUxDSmZaR1ZtWVhWc2RDSXNJbTF2WkhWc1pTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZGUVN4SlFVRkpRU3gxUWtGQmVVSkRMRkZCUVZFc2QwUkJSWEpEUXl4UlFVRlJReXhaUVVGaExFVkJRM0pDUkN4UlFVRlJSU3hoUVVGVkxFVkJSV3hDTEVsQlFVbERMRlZCUVZsTUxIVkNRVUYxUWtNc1VVRkJVU3d5UTBGRk0wTkxMR2RDUVVGclFrNHNkVUpCUVhWQ1F5eFJRVUZSTEdsRVFVVnFSRTBzVjBGQllWQXNkVUpCUVhWQ1F5eFJRVUZSTEdWQlJUVkRUeXhQUVVGVFVpeDFRa0ZCZFVKRExGRkJRVkVzVlVGRmVFTlJMRmxCUVdOVUxIVkNRVUYxUWtNc1VVRkJVU3hsUVVVM1ExTXNaMEpCUVd0Q1ZDeFJRVUZSTERCQ1FVVXhRbFVzWlVGQmFVSllMSFZDUVVGMVFrTXNVVUZCVVN4dlFrRkZhRVJYTEZWQlFWa3NRMEZaWkVNc1dVRkJZVTRzVjBGQlYwZ3NVVUZCVVZVc1MwRkJTME1zV1VGRmJrTkRMR0ZCUVdVc1EwRkRha0pJTEdGQlFXRXNSMEZGV0Vrc1lVRkJaU3hEUVVOcVFrTXNWVUZCVjFnc1YwRkJWMGdzVVVGQlVXVXNUVUZCVFN4RFFVTnNRME1zVVVGQlUySXNWMEZCVjBnc1VVRkJVV2xDTEZWQlNUVkNReXhWUVVWS0xGTkJRVlZETEVkQlIxSXNVMEZCVTBRc1dVRkRVQ3hQUVVGUFF5eEZRVUZwUWtNc1RVRkJUVU1zUzBGQlRVTXNXVUZCWTBRc1MwRXJRbkJFTEU5QmJFTkJMRVZCUVVsdVFpeG5Ra0ZCWjBKR0xGTkJRVk5yUWl4VlFVRlhReXhIUVUwelFrUXNWVUZCVlVzc1ZVRkZhRUpETEU5QlFWTXNVMEZCVTBFc1UwRkRka0lzU1VGQlNVTXNSVUZCWTBvc1MwRkJTMHNzVFVGRGJrSkRMRVZCUVZkR0xFVkJRVmxGTEZOQlEzWkNReXhGUVVGWlNDeEZRVUZaUnl4VlFVTjRRbTVDTEVWQlFXTm5RaXhGUVVGWmFFSXNXVUZITVVKdlFpeEhRVVJQVWl4TFFVRkxVeXhSUVVGUmFFSXNWMEZCWVN4SlFVTnFRa1VzVVVGRmFFSmxMRWRCUVhWQ0xFVkJRVWw2UWl4blFrRkJaMEl3UWl4eFFrRkJjVUpZTEV0QlFVdExMRTFCUVU4c1EwRkJReXhuUWtGRE4wVlBMRVZCUVZWR0xFVkJRWEZDTEVkQlF5OUNSeXhGUVVGbFNDeEZRVUZ4UWl4SFFVVjRRMFVzUlVGQlVXcENMRkZCUVZWaExFZEJRVmxKTEVWQlFWRnFRaXhSUVVWMFF5eEpRVUZKYlVJc1JVRkJUeTlDTEU5QlFVOUtMRkZCUVZGdlF5eGpRVUZqTEU5QlFVOHNSVUZCU1c1RExGVkJRVlZFTEZOQlFWTXNSMEZCU1d0RExFVkJRV01zUTBGRGRFWk9MRmRCUVZjc1JVRkJTWFpDTEZsQlFWbE1MRk5CUVZNMFFpeEhRVUZYTEVWQlFVbDBRaXhuUWtGQlowSXJRaXhSUVVGUlNpeEZRVUZUTEZkQlEyeEdUaXhIUVUxS0xFOUJTa2xzUWl4SlFVTkdNRUlzUlVGQlR5OUNMRTlCUVU5S0xGRkJRVkZ2UXl4alFVRmpOMElzWlVGQlpWQXNVVUZCVXl4TFFVRk5iVU1zU1VGSE4wUkJMRWRCUjBacVFpeFZRVzVEVkN4RFFXOURSV1FzVDBGQlQwb3NVVUZCVVhORExGZEJSV3BDY0VJc1ZVRkJWVllzVlVGQldVRXNWVUZEZEVKVkxGVkJRVlZPTEdGQlFXVkJMR0ZCUTNwQ1RTeFZRVUZWVEN4aFFVRmxRU3hoUVVWNlFpeEpRVUZKTUVJc1ZVRkJWeXhGUVVGSmFrTXNaMEpCUVdkQ1ZTeFRRVUZUTEZGQlFWTkZMRmRCUlhKRWNFSXNVVUZCVVVVc1VVRkJWWFZETEZOQlEyeENReXhQUVVGUE1VTXNVVUZCVlVFc1VVRkJhVUlpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdFltOXZkSE4wY21Gd0wyeHBZaTlRWVc1bGJFSnZaSGt1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PXZvaWQgMDt2YXIgX2V4dGVuZHMyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9wcm9wVHlwZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKSxfYm9vdHN0cmFwVXRpbHM9cmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIiksX0NvbGxhcHNlPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQ29sbGFwc2VcIikpLHByb3BUeXBlcz17b25FbnRlcjpfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxvbkVudGVyaW5nOl9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLG9uRW50ZXJlZDpfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxvbkV4aXQ6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsb25FeGl0aW5nOl9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLG9uRXhpdGVkOl9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jfSxjb250ZXh0VHlwZXM9eyRic19wYW5lbDpfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe2hlYWRpbmdJZDpfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLGJvZHlJZDpfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLGJzQ2xhc3M6X3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxleHBhbmRlZDpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbH0pfSxQYW5lbENvbGxhcHNlPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIFBhbmVsQ29sbGFwc2UoKXtyZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9cmV0dXJuKDAsX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKFBhbmVsQ29sbGFwc2UsZSksUGFuZWxDb2xsYXBzZS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uIHJlbmRlcigpe3ZhciBlPXRoaXMucHJvcHMuY2hpbGRyZW4sdD10aGlzLmNvbnRleHQuJGJzX3BhbmVsfHx7fSxyPXQuaGVhZGluZ0lkLHA9dC5ib2R5SWQscz10LmJzQ2xhc3MsbD10LmV4cGFuZGVkLGE9KDAsX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykodGhpcy5wcm9wcyksbz1hWzBdLG49YVsxXTtyZXR1cm4gby5ic0NsYXNzPXN8fG8uYnNDbGFzcyxyJiZwJiYobi5pZD1wLG4ucm9sZT1uLnJvbGV8fFwidGFicGFuZWxcIixuW1wiYXJpYS1sYWJlbGxlZGJ5XCJdPXIpLF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0NvbGxhcHNlLmRlZmF1bHQsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHtpbjpsfSxuKSxfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2NsYXNzTmFtZTooMCxfYm9vdHN0cmFwVXRpbHMucHJlZml4KShvLFwiY29sbGFwc2VcIil9LGUpKX0sUGFuZWxDb2xsYXBzZX0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtQYW5lbENvbGxhcHNlLnByb3BUeXBlcz1wcm9wVHlwZXMsUGFuZWxDb2xsYXBzZS5jb250ZXh0VHlwZXM9Y29udGV4dFR5cGVzO3ZhciBfZGVmYXVsdD0oMCxfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoXCJwYW5lbFwiLFBhbmVsQ29sbGFwc2UpO2V4cG9ydHMuZGVmYXVsdD1fZGVmYXVsdCxtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbEJoYm1Wc1EyOXNiR0Z3YzJVdWFuTWlYU3dpYm1GdFpYTWlPbHNpWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDSXNJbkpsY1hWcGNtVWlMQ0psZUhCdmNuUnpJaXdpWDE5bGMwMXZaSFZzWlNJc0ltUmxabUYxYkhRaUxDSmZaWGgwWlc1a2N6SWlMQ0pmYVc1b1pYSnBkSE5NYjI5elpUSWlMQ0pmY0hKdmNGUjVjR1Z6SWl3aVgzSmxZV04wSWl3aVgySnZiM1J6ZEhKaGNGVjBhV3h6SWl3aVgwTnZiR3hoY0hObElpd2ljSEp2Y0ZSNWNHVnpJaXdpYjI1RmJuUmxjaUlzSW1aMWJtTWlMQ0p2YmtWdWRHVnlhVzVuSWl3aWIyNUZiblJsY21Wa0lpd2liMjVGZUdsMElpd2liMjVGZUdsMGFXNW5JaXdpYjI1RmVHbDBaV1FpTENKamIyNTBaWGgwVkhsd1pYTWlMQ0lrWW5OZmNHRnVaV3dpTENKemFHRndaU0lzSW1obFlXUnBibWRKWkNJc0luTjBjbWx1WnlJc0ltSnZaSGxKWkNJc0ltSnpRMnhoYzNNaUxDSmxlSEJoYm1SbFpDSXNJbUp2YjJ3aUxDSlFZVzVsYkVOdmJHeGhjSE5sSWl3aVgxSmxZV04wSkVOdmJYQnZibVZ1ZENJc0ltRndjR3g1SWl3aWRHaHBjeUlzSW1GeVozVnRaVzUwY3lJc0luQnliM1J2ZEhsd1pTSXNJbkpsYm1SbGNpSXNJbU5vYVd4a2NtVnVJaXdpY0hKdmNITWlMQ0pmY21WbUlpd2lZMjl1ZEdWNGRDSXNJbDlpYzBOc1lYTnpJaXdpWDNOd2JHbDBRbk5RY205d2N5SXNJbk53YkdsMFFuTlFjbTl3Y3lJc0ltSnpVSEp2Y0hNaUxDSnBaQ0lzSW5KdmJHVWlMQ0pqY21WaGRHVkZiR1Z0Wlc1MElpd2lhVzRpTENKamJHRnpjMDVoYldVaUxDSndjbVZtYVhnaUxDSkRiMjF3YjI1bGJuUWlMQ0pmWkdWbVlYVnNkQ0lzSW0xdlpIVnNaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRlFTeEpRVUZKUVN4MVFrRkJlVUpETEZGQlFWRXNkMFJCUlhKRFF5eFJRVUZSUXl4WlFVRmhMRVZCUTNKQ1JDeFJRVUZSUlN4aFFVRlZMRVZCUld4Q0xFbEJRVWxETEZWQlFWbE1MSFZDUVVGMVFrTXNVVUZCVVN3eVEwRkZNME5MTEdkQ1FVRnJRazRzZFVKQlFYVkNReXhSUVVGUkxHbEVRVVZxUkUwc1YwRkJZVkFzZFVKQlFYVkNReXhSUVVGUkxHVkJSVFZEVHl4UFFVRlRVaXgxUWtGQmRVSkRMRkZCUVZFc1ZVRkZlRU5STEdkQ1FVRnJRbElzVVVGQlVTd3dRa0ZGTVVKVExGVkJRVmxXTEhWQ1FVRjFRa01zVVVGQlVTeGxRVVV6UTFVc1ZVRkJXU3hEUVVsa1F5eFJRVUZUVEN4WFFVRlhTQ3hSUVVGUlV5eExRVXMxUWtNc1YwRkJXVkFzVjBGQlYwZ3NVVUZCVVZNc1MwRkxMMEpGTEZWQlFWZFNMRmRCUVZkSUxGRkJRVkZUTEV0QlN6bENSeXhQUVVGUlZDeFhRVUZYU0N4UlFVRlJVeXhMUVVzelFra3NWVUZCVjFZc1YwRkJWMGdzVVVGQlVWTXNTMEZMT1VKTExGTkJRVlZZTEZkQlFWZElMRkZCUVZGVExFMUJSVE5DVFN4aFFVRmxMRU5CUTJwQ1F5eFZRVUZYWWl4WFFVRlhTQ3hSUVVGUmFVSXNUVUZCVFN4RFFVTnNRME1zVlVGQlYyWXNWMEZCVjBnc1VVRkJVVzFDTEU5QlF6bENReXhQUVVGUmFrSXNWMEZCVjBnc1VVRkJVVzFDTEU5QlF6TkNSU3hSUVVGVGJFSXNWMEZCVjBnc1VVRkJVVzFDTEU5QlF6VkNSeXhUUVVGVmJrSXNWMEZCVjBnc1VVRkJVWFZDTEZGQlNUZENReXhqUVVWS0xGTkJRVlZETEVkQlIxSXNVMEZCVTBRc1owSkJRMUFzVDBGQlQwTXNSVUZCYVVKRExFMUJRVTFETEV0QlFVMURMRmxCUVdORUxFdEJhVU53UkN4UFFYQkRRU3hGUVVGSmVrSXNaMEpCUVdkQ1JpeFRRVUZUZDBJc1kwRkJaVU1zUjBGTkwwSkVMR05CUVdOTExGVkJSWEJDUXl4UFFVRlRMRk5CUVZOQkxGTkJRM1pDTEVsQlFVbERMRVZCUVZkS0xFdEJRVXRMTEUxQlFVMUVMRk5CUlhSQ1JTeEZRVUZQVGl4TFFVRkxUeXhSUVVGUmJFSXNWMEZCWVN4SFFVTnFRMFVzUlVGQldXVXNSVUZCUzJZc1ZVRkRha0pGTEVWQlFWTmhMRVZCUVV0aUxFOUJRMlJsTEVWQlFWZEdMRVZCUVV0YUxGRkJRMmhDUXl4RlFVRlhWeXhGUVVGTFdDeFRRVVZvUW1Nc1IwRkJaMElzUlVGQlNTOUNMR2RDUVVGblFtZERMR05CUVdOV0xFdEJRVXRMTEU5QlEzWkVUU3hGUVVGVlJpeEZRVUZqTEVkQlEzaENTaXhGUVVGUlNTeEZRVUZqTEVkQlZURkNMRTlCVWtGRkxFVkJRVkZxUWl4UlFVRlZZeXhIUVVGWlJ5eEZRVUZSYWtJc1VVRkZiRU5JTEVkQlFXRkZMRWxCUTJaWkxFVkJRVTFQTEVkQlFVdHVRaXhGUVVOWVdTeEZRVUZOVVN4TFFVRlBVaXhGUVVGTlVTeE5RVUZSTEZkQlF6TkNVaXhGUVVGTkxHMUNRVUZ4UW1Rc1IwRkhkRUprTEU5QlFVOUtMRkZCUVZGNVF5eGpRVUZqYmtNc1ZVRkJWVTRzVTBGQlV5eEZRVUZKUXl4VlFVRlZSQ3hUUVVGVExFTkJRelZGTUVNc1IwRkJTWEJDTEVkQlEwaFZMRWRCUVZFMVFpeFBRVUZQU2l4UlFVRlJlVU1zWTBGQll5eE5RVUZQTEVOQlF6ZERSU3hYUVVGWExFVkJRVWwwUXl4blFrRkJaMEoxUXl4UlFVRlJUaXhGUVVGVExHRkJReTlEVUN4TFFVZEZVQ3hqUVhKRFZDeERRWE5EUlhCQ0xFOUJRVTlLTEZGQlFWRTJReXhYUVVWcVFuSkNMR05CUVdOcVFpeFZRVUZaUVN4VlFVTXhRbWxDTEdOQlFXTlVMR0ZCUVdWQkxHRkJSVGRDTEVsQlFVa3JRaXhWUVVGWExFVkJRVWw2UXl4blFrRkJaMEpuUWl4VFFVRlRMRkZCUVZOSExHVkJSWEpFTVVJc1VVRkJVVVVzVVVGQlZUaERMRk5CUTJ4Q1F5eFBRVUZQYWtRc1VVRkJWVUVzVVVGQmFVSWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F0WW05dmRITjBjbUZ3TDJ4cFlpOVFZVzVsYkVOdmJHeGhjSE5sTG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PXZvaWQgMDt2YXIgX2V4dGVuZHMyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9wcm9wVHlwZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKSxfY2xhc3NuYW1lcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKSxfYm9vdHN0cmFwVXRpbHM9cmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIiksY29udGV4dFR5cGVzPXskYnNfcGFuZWw6X3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtic0NsYXNzOl9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmd9KX0sUGFuZWxGb290ZXI9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gUGFuZWxGb290ZXIoKXtyZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9cmV0dXJuKDAsX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKFBhbmVsRm9vdGVyLGUpLFBhbmVsRm9vdGVyLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIGU9dGhpcy5wcm9wcyx0PWUuY2hpbGRyZW4scj1lLmNsYXNzTmFtZSxzPSh0aGlzLmNvbnRleHQuJGJzX3BhbmVsfHx7fSkuYnNDbGFzcyxvPSgwLF9ib290c3RyYXBVdGlscy5zcGxpdEJzUHJvcHMpKHRoaXMucHJvcHMpLGE9b1swXSxsPW9bMV07cmV0dXJuIGEuYnNDbGFzcz1zfHxhLmJzQ2xhc3MsX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSxsLHtjbGFzc05hbWU6KDAsX2NsYXNzbmFtZXMuZGVmYXVsdCkociwoMCxfYm9vdHN0cmFwVXRpbHMucHJlZml4KShhLFwiZm9vdGVyXCIpKX0pLHQpfSxQYW5lbEZvb3Rlcn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtQYW5lbEZvb3Rlci5jb250ZXh0VHlwZXM9Y29udGV4dFR5cGVzO3ZhciBfZGVmYXVsdD0oMCxfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoXCJwYW5lbFwiLFBhbmVsRm9vdGVyKTtleHBvcnRzLmRlZmF1bHQ9X2RlZmF1bHQsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxCaGJtVnNSbTl2ZEdWeUxtcHpJbDBzSW01aGJXVnpJanBiSWw5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUWlMQ0p5WlhGMWFYSmxJaXdpWlhod2IzSjBjeUlzSWw5ZlpYTk5iMlIxYkdVaUxDSmtaV1poZFd4MElpd2lYMlY0ZEdWdVpITXlJaXdpWDJsdWFHVnlhWFJ6VEc5dmMyVXlJaXdpWDNCeWIzQlVlWEJsY3lJc0lsOXlaV0ZqZENJc0lsOWpiR0Z6YzI1aGJXVnpJaXdpWDJKdmIzUnpkSEpoY0ZWMGFXeHpJaXdpWTI5dWRHVjRkRlI1Y0dWeklpd2lKR0p6WDNCaGJtVnNJaXdpYzJoaGNHVWlMQ0ppYzBOc1lYTnpJaXdpYzNSeWFXNW5JaXdpVUdGdVpXeEdiMjkwWlhJaUxDSmZVbVZoWTNRa1EyOXRjRzl1Wlc1MElpd2lZWEJ3YkhraUxDSjBhR2x6SWl3aVlYSm5kVzFsYm5Seklpd2ljSEp2ZEc5MGVYQmxJaXdpY21WdVpHVnlJaXdpWDNSb2FYTWtjSEp2Y0hNaUxDSndjbTl3Y3lJc0ltTm9hV3hrY21WdUlpd2lZMnhoYzNOT1lXMWxJaXdpWDJKelEyeGhjM01pTENKamIyNTBaWGgwSWl3aVgzTndiR2wwUW5OUWNtOXdjeUlzSW5Od2JHbDBRbk5RY205d2N5SXNJbUp6VUhKdmNITWlMQ0psYkdWdFpXNTBVSEp2Y0hNaUxDSmpjbVZoZEdWRmJHVnRaVzUwSWl3aWNISmxabWw0SWl3aVEyOXRjRzl1Wlc1MElpd2lYMlJsWm1GMWJIUWlMQ0p0YjJSMWJHVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUlVFc1NVRkJTVUVzZFVKQlFYbENReXhSUVVGUkxIZEVRVVZ5UTBNc1VVRkJVVU1zV1VGQllTeEZRVU55UWtRc1VVRkJVVVVzWVVGQlZTeEZRVVZzUWl4SlFVRkpReXhWUVVGWlRDeDFRa0ZCZFVKRExGRkJRVkVzTWtOQlJUTkRTeXhuUWtGQmEwSk9MSFZDUVVGMVFrTXNVVUZCVVN4cFJFRkZha1JOTEZkQlFXRlFMSFZDUVVGMVFrTXNVVUZCVVN4bFFVVTFRMDhzVDBGQlUxSXNkVUpCUVhWQ1F5eFJRVUZSTEZWQlJYaERVU3haUVVGalZDeDFRa0ZCZFVKRExGRkJRVkVzWlVGRk4wTlRMR2RDUVVGclFsUXNVVUZCVVN3d1FrRkZNVUpWTEdGQlFXVXNRMEZEYWtKRExGVkJRVmRNTEZkQlFWZElMRkZCUVZGVExFMUJRVTBzUTBGRGJFTkRMRkZCUVZOUUxGZEJRVmRJTEZGQlFWRlhMRlZCU1RWQ1F5eFpRVVZLTEZOQlFWVkRMRWRCUjFJc1UwRkJVMFFzWTBGRFVDeFBRVUZQUXl4RlFVRnBRa01zVFVGQlRVTXNTMEZCVFVNc1dVRkJZMFFzUzBGMVFuQkVMRTlCTVVKQkxFVkJRVWxpTEdkQ1FVRm5Ra1lzVTBGQlUxa3NXVUZCWVVNc1IwRk5OMEpFTEZsQlFWbExMRlZCUld4Q1F5eFBRVUZUTEZOQlFWTkJMRk5CUTNaQ0xFbEJRVWxETEVWQlFXTktMRXRCUVV0TExFMUJRMjVDUXl4RlFVRlhSaXhGUVVGWlJTeFRRVU4yUWtNc1JVRkJXVWdzUlVGQldVY3NWVUZIZUVKRExFZEJSRTlTTEV0QlFVdFRMRkZCUVZGb1FpeFhRVUZoTEVsQlEycENSU3hSUVVWb1FtVXNSMEZCWjBJc1JVRkJTVzVDTEdkQ1FVRm5RbTlDTEdOQlFXTllMRXRCUVV0TExFOUJRM1pFVHl4RlFVRlZSaXhGUVVGakxFZEJRM2hDUnl4RlFVRmxTQ3hGUVVGakxFZEJSMnBETEU5QlJFRkZMRVZCUVZGcVFpeFJRVUZWWVN4SFFVRlpTU3hGUVVGUmFrSXNVVUZETDBKT0xFOUJRVTlLTEZGQlFWRTJRaXhqUVVGakxFOUJRVThzUlVGQlNUVkNMRlZCUVZWRUxGTkJRVk1zUjBGQlNUUkNMRVZCUVdNc1EwRkRiRVpPTEZkQlFWY3NSVUZCU1dwQ0xGbEJRVmxNTEZOQlFWTnpRaXhIUVVGWExFVkJRVWxvUWl4blFrRkJaMEozUWl4UlFVRlJTQ3hGUVVGVExHRkJRMnhHVGl4SlFVZERWQ3haUVROQ1ZDeERRVFJDUlZJc1QwRkJUMG9zVVVGQlVTdENMRmRCUldwQ2JrSXNXVUZCV1V3c1lVRkJaVUVzWVVGRk0wSXNTVUZCU1hsQ0xGVkJRVmNzUlVGQlNURkNMR2RDUVVGblFra3NVMEZCVXl4UlFVRlRSU3hoUVVWeVJHUXNVVUZCVVVVc1VVRkJWV2RETEZOQlEyeENReXhQUVVGUGJrTXNVVUZCVlVFc1VVRkJhVUlpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdFltOXZkSE4wY21Gd0wyeHBZaTlRWVc1bGJFWnZiM1JsY2k1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpLF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSksX2V4dGVuZHMyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9jbGFzc25hbWVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpLF9wcm9wVHlwZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSksX3VuY29udHJvbGxhYmxlPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInVuY29udHJvbGxhYmxlXCIpKSxfYm9vdHN0cmFwVXRpbHM9cmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIiksX1ZhbGlkQ29tcG9uZW50Q2hpbGRyZW49X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9WYWxpZENvbXBvbmVudENoaWxkcmVuXCIpKSxfUHJvcFR5cGVzPXJlcXVpcmUoXCIuL3V0aWxzL1Byb3BUeXBlc1wiKSxwcm9wVHlwZXM9e2FjY29yZGlvbjpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxhY3RpdmVLZXk6X3Byb3BUeXBlcy5kZWZhdWx0LmFueSxvblNlbGVjdDpfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxyb2xlOl9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsZ2VuZXJhdGVDaGlsZElkOl9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLGlkOigwLF9Qcm9wVHlwZXMuZ2VuZXJhdGVkSWQpKFwiUGFuZWxHcm91cFwiKX0sZGVmYXVsdFByb3BzPXthY2NvcmRpb246ITF9LGNoaWxkQ29udGV4dFR5cGVzPXskYnNfcGFuZWxHcm91cDpfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe2dldElkOl9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLGhlYWRlclJvbGU6X3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxwYW5lbFJvbGU6X3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxhY3RpdmVLZXk6X3Byb3BUeXBlcy5kZWZhdWx0LmFueSxvblRvZ2dsZTpfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY30pfSxQYW5lbEdyb3VwPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIFBhbmVsR3JvdXAoKXtmb3IodmFyIHIsdD1hcmd1bWVudHMubGVuZ3RoLG89bmV3IEFycmF5KHQpLGw9MDtsPHQ7bCsrKW9bbF09YXJndW1lbnRzW2xdO3JldHVybihyPWUuY2FsbC5hcHBseShlLFt0aGlzXS5jb25jYXQobykpfHx0aGlzKS5oYW5kbGVTZWxlY3Q9ZnVuY3Rpb24oZSx0LG8pe3Q/ci5wcm9wcy5vblNlbGVjdChlLG8pOnIucHJvcHMuYWN0aXZlS2V5PT09ZSYmci5wcm9wcy5vblNlbGVjdChudWxsLG8pfSxyfSgwLF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShQYW5lbEdyb3VwLGUpO3ZhciByPVBhbmVsR3JvdXAucHJvdG90eXBlO3JldHVybiByLmdldENoaWxkQ29udGV4dD1mdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKXt2YXIgZT10aGlzLnByb3BzLHI9ZS5hY3RpdmVLZXksdD1lLmFjY29yZGlvbixvPWUuZ2VuZXJhdGVDaGlsZElkLGw9ZS5pZCxwPW51bGw7cmV0dXJuIHQmJihwPW98fGZ1bmN0aW9uKGUscil7cmV0dXJuIGw/bCtcIi1cIityK1wiLVwiK2U6bnVsbH0pLHskYnNfcGFuZWxHcm91cDooMCxfZXh0ZW5kczIuZGVmYXVsdCkoe2dldElkOnAsaGVhZGVyUm9sZTpcInRhYlwiLHBhbmVsUm9sZTpcInRhYnBhbmVsXCJ9LHQmJnthY3RpdmVLZXk6cixvblRvZ2dsZTp0aGlzLmhhbmRsZVNlbGVjdH0pfX0sci5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIGU9dGhpcy5wcm9wcyxyPWUuYWNjb3JkaW9uLHQ9ZS5jbGFzc05hbWUsbz1lLmNoaWxkcmVuLGw9KDAsX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKGUsW1wiYWNjb3JkaW9uXCIsXCJjbGFzc05hbWVcIixcImNoaWxkcmVuXCJdKSxwPSgwLF9ib290c3RyYXBVdGlscy5zcGxpdEJzUHJvcHNBbmRPbWl0KShsLFtcIm9uU2VsZWN0XCIsXCJhY3RpdmVLZXlcIl0pLGE9cFswXSxuPXBbMV07ciYmKG4ucm9sZT1uLnJvbGV8fFwidGFibGlzdFwiKTt2YXIgcz0oMCxfYm9vdHN0cmFwVXRpbHMuZ2V0Q2xhc3NTZXQpKGEpO3JldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LG4se2NsYXNzTmFtZTooMCxfY2xhc3NuYW1lcy5kZWZhdWx0KSh0LHMpfSksX1ZhbGlkQ29tcG9uZW50Q2hpbGRyZW4uZGVmYXVsdC5tYXAobyxmdW5jdGlvbihlKXtyZXR1cm4oMCxfcmVhY3QuY2xvbmVFbGVtZW50KShlLHtic1N0eWxlOmUucHJvcHMuYnNTdHlsZXx8YS5ic1N0eWxlfSl9KSl9LFBhbmVsR3JvdXB9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7UGFuZWxHcm91cC5wcm9wVHlwZXM9cHJvcFR5cGVzLFBhbmVsR3JvdXAuZGVmYXVsdFByb3BzPWRlZmF1bHRQcm9wcyxQYW5lbEdyb3VwLmNoaWxkQ29udGV4dFR5cGVzPWNoaWxkQ29udGV4dFR5cGVzO3ZhciBfZGVmYXVsdD0oMCxfdW5jb250cm9sbGFibGUuZGVmYXVsdCkoKDAsX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKFwicGFuZWwtZ3JvdXBcIixQYW5lbEdyb3VwKSx7YWN0aXZlS2V5Olwib25TZWxlY3RcIn0pO2V4cG9ydHMuZGVmYXVsdD1fZGVmYXVsdCxtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbEJoYm1Wc1IzSnZkWEF1YW5NaVhTd2libUZ0WlhNaU9sc2lYMmx1ZEdWeWIzQlNaWEYxYVhKbFYybHNaR05oY21RaUxDSnlaWEYxYVhKbElpd2lYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENJc0ltVjRjRzl5ZEhNaUxDSmZYMlZ6VFc5a2RXeGxJaXdpWkdWbVlYVnNkQ0lzSWw5dlltcGxZM1JYYVhSb2IzVjBVSEp2Y0dWeWRHbGxjMHh2YjNObE1pSXNJbDlsZUhSbGJtUnpNaUlzSWw5cGJtaGxjbWwwYzB4dmIzTmxNaUlzSWw5amJHRnpjMjVoYldWeklpd2lYM0J5YjNCVWVYQmxjeUlzSWw5eVpXRmpkQ0lzSWw5MWJtTnZiblJ5YjJ4c1lXSnNaU0lzSWw5aWIyOTBjM1J5WVhCVmRHbHNjeUlzSWw5V1lXeHBaRU52YlhCdmJtVnVkRU5vYVd4a2NtVnVJaXdpWDFCeWIzQlVlWEJsY3lJc0luQnliM0JVZVhCbGN5SXNJbUZqWTI5eVpHbHZiaUlzSW1KdmIyd2lMQ0poWTNScGRtVkxaWGtpTENKaGJua2lMQ0p2YmxObGJHVmpkQ0lzSW1aMWJtTWlMQ0p5YjJ4bElpd2ljM1J5YVc1bklpd2laMlZ1WlhKaGRHVkRhR2xzWkVsa0lpd2lhV1FpTENKblpXNWxjbUYwWldSSlpDSXNJbVJsWm1GMWJIUlFjbTl3Y3lJc0ltTm9hV3hrUTI5dWRHVjRkRlI1Y0dWeklpd2lKR0p6WDNCaGJtVnNSM0p2ZFhBaUxDSnphR0Z3WlNJc0ltZGxkRWxrSWl3aWFHVmhaR1Z5VW05c1pTSXNJbkJoYm1Wc1VtOXNaU0lzSW05dVZHOW5aMnhsSWl3aVVHRnVaV3hIY205MWNDSXNJbDlTWldGamRDUkRiMjF3YjI1bGJuUWlMQ0pmZEdocGN5SXNJbDlzWlc0aUxDSmhjbWQxYldWdWRITWlMQ0pzWlc1bmRHZ2lMQ0poY21keklpd2lRWEp5WVhraUxDSmZhMlY1SWl3aVkyRnNiQ0lzSW1Gd2NHeDVJaXdpZEdocGN5SXNJbU52Ym1OaGRDSXNJbWhoYm1Sc1pWTmxiR1ZqZENJc0ltdGxlU0lzSW1WNGNHRnVaR1ZrSWl3aVpTSXNJbkJ5YjNCeklpd2lYM0J5YjNSdklpd2ljSEp2ZEc5MGVYQmxJaXdpWjJWMFEyaHBiR1JEYjI1MFpYaDBJaXdpWDNSb2FYTWtjSEp2Y0hNaUxDSjBlWEJsSWl3aWNtVnVaR1Z5SWl3aVgzUm9hWE1rY0hKdmNITXlJaXdpWTJ4aGMzTk9ZVzFsSWl3aVkyaHBiR1J5Wlc0aUxDSmZjM0JzYVhSQ2MxQnliM0J6UVc1a1QyMXBkQ0lzSW5Od2JHbDBRbk5RY205d2MwRnVaRTl0YVhRaUxDSmljMUJ5YjNCeklpd2laV3hsYldWdWRGQnliM0J6SWl3aVkyeGhjM05sY3lJc0ltZGxkRU5zWVhOelUyVjBJaXdpWTNKbFlYUmxSV3hsYldWdWRDSXNJbTFoY0NJc0ltTm9hV3hrSWl3aVkyeHZibVZGYkdWdFpXNTBJaXdpWW5OVGRIbHNaU0lzSWtOdmJYQnZibVZ1ZENJc0lsOWtaV1poZFd4MElpd2lZbk5EYkdGemN5SXNJbTF2WkhWc1pTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZGUVN4SlFVRkpRU3gzUWtGQk1FSkRMRkZCUVZFc2VVUkJSV3hEUXl4MVFrRkJlVUpFTEZGQlFWRXNkMFJCUlhKRFJTeFJRVUZSUXl4WlFVRmhMRVZCUTNKQ1JDeFJRVUZSUlN4aFFVRlZMRVZCUld4Q0xFbEJRVWxETEN0Q1FVRnBRMG9zZFVKQlFYVkNSQ3hSUVVGUkxHZEZRVVZvUlUwc1ZVRkJXVXdzZFVKQlFYVkNSQ3hSUVVGUkxESkRRVVV6UTA4c1owSkJRV3RDVGl4MVFrRkJkVUpFTEZGQlFWRXNhVVJCUldwRVVTeFpRVUZqVUN4MVFrRkJkVUpFTEZGQlFWRXNaVUZGTjBOVExGZEJRV0ZTTEhWQ1FVRjFRa1FzVVVGQlVTeGxRVVUxUTFVc1QwRkJVMWdzZDBKQlFYZENReXhSUVVGUkxGVkJSWHBEVnl4blFrRkJhMEpXTEhWQ1FVRjFRa1FzVVVGQlVTeHRRa0ZGYWtSWkxHZENRVUZyUWxvc1VVRkJVU3d3UWtGRk1VSmhMSGRDUVVFd1Fsb3NkVUpCUVhWQ1JDeFJRVUZSTEcxRFFVVjZSR01zVjBGQllXUXNVVUZCVVN4eFFrRkZja0psTEZWQlFWa3NRMEZEWkVNc1ZVRkJWMUFzVjBGQlYwd3NVVUZCVVdFc1MwRlJPVUpETEZWQlFWZFVMRmRCUVZkTUxGRkJRVkZsTEVsQlR6bENReXhUUVVGVldDeFhRVUZYVEN4UlFVRlJhVUlzUzBGTE4wSkRMRXRCUVUxaUxGZEJRVmRNTEZGQlFWRnRRaXhQUVZsNlFrTXNaMEpCUVdsQ1ppeFhRVUZYVEN4UlFVRlJhVUlzUzBGTmNFTkpMRWxCUVVrc1JVRkJTVmdzVjBGQlYxa3NZVUZCWVN4bFFVVTVRa01zWVVGQlpTeERRVU5xUWxnc1YwRkJWeXhIUVVWVVdTeHJRa0ZCYjBJc1EwRkRkRUpETEdWQlFXZENjRUlzVjBGQlYwd3NVVUZCVVRCQ0xFMUJRVTBzUTBGRGRrTkRMRTFCUVU5MFFpeFhRVUZYVEN4UlFVRlJhVUlzUzBGRE1VSlhMRmRCUVZsMlFpeFhRVUZYVEN4UlFVRlJiVUlzVDBGREwwSlZMRlZCUVZkNFFpeFhRVUZYVEN4UlFVRlJiVUlzVDBGRE9VSk1MRlZCUVZkVUxGZEJRVmRNTEZGQlFWRmxMRWxCUXpsQ1pTeFRRVUZWZWtJc1YwRkJWMHdzVVVGQlVXbENMRkZCU1RkQ1l5eFhRVVZLTEZOQlFWVkRMRWRCUjFJc1UwRkJVMFFzWVVGSFVDeEpRVVpCTEVsQlFVbEZMRVZCUlV0RExFVkJRVTlETEZWQlFWVkRMRTlCUVZGRExFVkJRVThzU1VGQlNVTXNUVUZCVFVvc1IwRkJUMHNzUlVGQlR5eEZRVUZIUVN4RlFVRlBUQ3hGUVVGTlN5eEpRVU12UlVZc1JVRkJTMFVzUjBGQlVVb3NWVUZCVlVrc1IwRmhla0lzVDBGV1FVNHNSVUZCVVVRc1JVRkJhVUpSTEV0QlFVdERMRTFCUVUxVUxFVkJRV3RDTEVOQlFVTlZMRTFCUVUxRExFOUJRVTlPTEV0QlFWVkxMRTFCUlhoRlJTeGhRVUZsTEZOQlFWVkRMRVZCUVV0RExFVkJRVlZETEVkQlEzaERSQ3hGUVVOR1lpeEZRVUZOWlN4TlFVRk5hRU1zVTBGQlV6WkNMRVZCUVV0RkxFZEJRMnBDWkN4RlFVRk5aU3hOUVVGTmJFTXNXVUZCWXl0Q0xFZEJRMjVEV2l4RlFVRk5aU3hOUVVGTmFFTXNVMEZCVXl4TFFVRk5LMElzU1VGSmVFSmtMRWRCYmtKVUxFVkJRVWs1UWl4blFrRkJaMEpJTEZOQlFWTXJRaXhYUVVGWlF5eEhRWE5DZWtNc1NVRkJTV2xDTEVWQlFWTnNRaXhYUVVGWGJVSXNWVUZ4UkhoQ0xFOUJia1JCUkN4RlFVRlBSU3huUWtGQmEwSXNVMEZCVTBFc2EwSkJRMmhETEVsQlFVbERMRVZCUVdOV0xFdEJRVXROTEUxQlEyNUNiRU1zUlVGQldYTkRMRVZCUVZsMFF5eFZRVU40UWtZc1JVRkJXWGRETEVWQlFWbDRReXhWUVVONFFsRXNSVUZCYTBKblF5eEZRVUZaYUVNc1owSkJRemxDUXl4RlFVRkxLMElzUlVGQldTOUNMRWRCUTJwQ1RTeEZRVUZSTEV0QlVWb3NUMEZPU1dZc1NVRkRSbVVzUlVGQlVWQXNSMEZCYlVJc1UwRkJWWGxDTEVWQlFVdFJMRWRCUTNoRExFOUJRVTlvUXl4RlFVRkxRU3hGUVVGTExFbEJRVTFuUXl4RlFVRlBMRWxCUVUxU0xFVkJRVTBzVDBGSmRrTXNRMEZEVEhCQ0xHZENRVUZuUWl4RlFVRkpka0lzVlVGQlZVWXNVMEZCVXl4RFFVTnlRekpDTEUxQlFVOUJMRVZCUTFCRExGZEJRVmtzVFVGRFdrTXNWVUZCVnl4WlFVTldha0lzUjBGQllTeERRVU5rUlN4VlFVRlhRU3hGUVVOWVowSXNVMEZCVlZrc1MwRkJTMFVzYVVKQlMzSkNTeXhGUVVGUFN5eFBRVUZUTEZOQlFWTkJMRk5CUTNaQ0xFbEJRVWxETEVWQlFXVmlMRXRCUVV0TkxFMUJRM0JDY0VNc1JVRkJXVEpETEVWQlFXRXpReXhWUVVONlFqUkRMRVZCUVZsRUxFVkJRV0ZETEZWQlEzcENReXhGUVVGWFJpeEZRVUZoUlN4VFFVTjRRbFFzUjBGQlVTeEZRVUZKTDBNc0swSkJRU3RDUkN4VFFVRlRkVVFzUlVGQll5eERRVUZETEZsQlFXRXNXVUZCWVN4aFFVVTNSa2NzUjBGQmRVSXNSVUZCU1d4RUxHZENRVUZuUW0xRUxIRkNRVUZ4UWxnc1JVRkJUeXhEUVVGRExGZEJRVmtzWTBGRGNFWlpMRVZCUVZWR0xFVkJRWEZDTEVkQlF5OUNSeXhGUVVGbFNDeEZRVUZ4UWl4SFFVVndRemxETEVsQlEwWnBSQ3hGUVVGaE0wTXNTMEZCVHpKRExFVkJRV0V6UXl4TlFVRlJMRmRCUnpORExFbEJRVWswUXl4SFFVRlZMRVZCUVVsMFJDeG5Ra0ZCWjBKMVJDeGhRVUZoU0N4SFFVTXZReXhQUVVGUGRFUXNUMEZCVDA0c1VVRkJVV2RGTEdOQlFXTXNUMEZCVHl4RlFVRkpPVVFzVlVGQlZVWXNVMEZCVXl4SFFVRkpOa1FzUlVGQll5eERRVU5zUmt3c1YwRkJWeXhGUVVGSmNFUXNXVUZCV1Vvc1UwRkJVM2RFTEVWQlFWZE5MRXRCUXpkRGNrUXNkMEpCUVhkQ1ZDeFJRVUZSYVVVc1NVRkJTVklzUlVGQlZTeFRRVUZWVXl4SFFVTXhSQ3hQUVVGUExFVkJRVWsxUkN4UFFVRlBOa1FzWTBGQlkwUXNSVUZCVHl4RFFVTnlRMFVzVVVGQlUwWXNSVUZCVFd4Q0xFMUJRVTF2UWl4VFFVRlhVaXhGUVVGUlVTeGpRVXQyUTNKRExGZEJOVVZVTEVOQk5rVkZla0lzVDBGQlQwNHNVVUZCVVhGRkxGZEJSV3BDZEVNc1YwRkJWM0JDTEZWQlFWbEJMRlZCUTNaQ2IwSXNWMEZCVjFJc1lVRkJaVUVzWVVGRE1VSlJMRmRCUVZkUUxHdENRVUZ2UWtFc2EwSkJSUzlDTEVsQlFVazRReXhWUVVGWExFVkJRVWt2UkN4blFrRkJaMEpRTEZWQlFWTXNSVUZCU1ZFc1owSkJRV2RDSzBRc1UwRkJVeXhqUVVGbGVFTXNXVUZCWVN4RFFVTnVSMnBDTEZWQlFWY3NZVUZIWW1oQ0xGRkJRVkZGTEZGQlFWVnpSU3hUUVVOc1FrVXNUMEZCVHpGRkxGRkJRVlZCTEZGQlFXbENJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwzSmxZV04wTFdKdmIzUnpkSEpoY0M5c2FXSXZVR0Z1Wld4SGNtOTFjQzVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0PXJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO2V4cG9ydHMuX19lc01vZHVsZT0hMCxleHBvcnRzLmRlZmF1bHQ9dm9pZCAwO3ZhciBfZXh0ZW5kczI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSksX2luaGVyaXRzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKSxfcHJvcFR5cGVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpLF9yZWFjdD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSksX2NsYXNzbmFtZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSksX2VsZW1lbnRUeXBlPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LXByb3AtdHlwZXMvbGliL2VsZW1lbnRUeXBlXCIpKSxfYm9vdHN0cmFwVXRpbHM9cmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIikscHJvcFR5cGVzPXtjb21wb25lbnRDbGFzczpfZWxlbWVudFR5cGUuZGVmYXVsdH0sZGVmYXVsdFByb3BzPXtjb21wb25lbnRDbGFzczpcImRpdlwifSxjb250ZXh0VHlwZXM9eyRic19wYW5lbDpfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe2hlYWRpbmdJZDpfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLGJzQ2xhc3M6X3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ30pfSxQYW5lbEhlYWRpbmc9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gUGFuZWxIZWFkaW5nKCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybigwLF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShQYW5lbEhlYWRpbmcsZSksUGFuZWxIZWFkaW5nLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIGU9dGhpcy5wcm9wcyx0PWUuY2hpbGRyZW4scj1lLmNsYXNzTmFtZSxzPWUuY29tcG9uZW50Q2xhc3MsYT0oMCxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoZSxbXCJjaGlsZHJlblwiLFwiY2xhc3NOYW1lXCIsXCJjb21wb25lbnRDbGFzc1wiXSksbz10aGlzLmNvbnRleHQuJGJzX3BhbmVsfHx7fSxsPW8uaGVhZGluZ0lkLHA9by5ic0NsYXNzLGk9KDAsX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykoYSksbj1pWzBdLHU9aVsxXTtyZXR1cm4gbi5ic0NsYXNzPXB8fG4uYnNDbGFzcyxsJiYodS5yb2xlPXUucm9sZXx8XCJ0YWJcIix1LmlkPWwpLF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQocywoMCxfZXh0ZW5kczIuZGVmYXVsdCkoe30sdSx7Y2xhc3NOYW1lOigwLF9jbGFzc25hbWVzLmRlZmF1bHQpKHIsKDAsX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkobixcImhlYWRpbmdcIikpfSksdCl9LFBhbmVsSGVhZGluZ30oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtQYW5lbEhlYWRpbmcucHJvcFR5cGVzPXByb3BUeXBlcyxQYW5lbEhlYWRpbmcuZGVmYXVsdFByb3BzPWRlZmF1bHRQcm9wcyxQYW5lbEhlYWRpbmcuY29udGV4dFR5cGVzPWNvbnRleHRUeXBlczt2YXIgX2RlZmF1bHQ9KDAsX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKFwicGFuZWxcIixQYW5lbEhlYWRpbmcpO2V4cG9ydHMuZGVmYXVsdD1fZGVmYXVsdCxtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbEJoYm1Wc1NHVmhaR2x1Wnk1cWN5SmRMQ0p1WVcxbGN5STZXeUpmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MElpd2ljbVZ4ZFdseVpTSXNJbVY0Y0c5eWRITWlMQ0pmWDJWelRXOWtkV3hsSWl3aVpHVm1ZWFZzZENJc0lsOWxlSFJsYm1Sek1pSXNJbDl2WW1wbFkzUlhhWFJvYjNWMFVISnZjR1Z5ZEdsbGMweHZiM05sTWlJc0lsOXBibWhsY21sMGMweHZiM05sTWlJc0lsOXdjbTl3Vkhsd1pYTWlMQ0pmY21WaFkzUWlMQ0pmWTJ4aGMzTnVZVzFsY3lJc0lsOWxiR1Z0Wlc1MFZIbHdaU0lzSWw5aWIyOTBjM1J5WVhCVmRHbHNjeUlzSW5CeWIzQlVlWEJsY3lJc0ltTnZiWEJ2Ym1WdWRFTnNZWE56SWl3aVpHVm1ZWFZzZEZCeWIzQnpJaXdpWTI5dWRHVjRkRlI1Y0dWeklpd2lKR0p6WDNCaGJtVnNJaXdpYzJoaGNHVWlMQ0pvWldGa2FXNW5TV1FpTENKemRISnBibWNpTENKaWMwTnNZWE56SWl3aVVHRnVaV3hJWldGa2FXNW5JaXdpWDFKbFlXTjBKRU52YlhCdmJtVnVkQ0lzSW1Gd2NHeDVJaXdpZEdocGN5SXNJbUZ5WjNWdFpXNTBjeUlzSW5CeWIzUnZkSGx3WlNJc0luSmxibVJsY2lJc0lsOTBhR2x6SkhCeWIzQnpJaXdpY0hKdmNITWlMQ0pqYUdsc1pISmxiaUlzSW1Oc1lYTnpUbUZ0WlNJc0lrTnZiWEJ2Ym1WdWRDSXNJbDl5WldZaUxDSmpiMjUwWlhoMElpd2lYMkp6UTJ4aGMzTWlMQ0pmYzNCc2FYUkNjMUJ5YjNCeklpd2ljM0JzYVhSQ2MxQnliM0J6SWl3aVluTlFjbTl3Y3lJc0ltVnNaVzFsYm5SUWNtOXdjeUlzSW5KdmJHVWlMQ0pwWkNJc0ltTnlaV0YwWlVWc1pXMWxiblFpTENKd2NtVm1hWGdpTENKZlpHVm1ZWFZzZENJc0ltMXZaSFZzWlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkZRU3hKUVVGSlFTeDFRa0ZCZVVKRExGRkJRVkVzZDBSQlJYSkRReXhSUVVGUlF5eFpRVUZoTEVWQlEzSkNSQ3hSUVVGUlJTeGhRVUZWTEVWQlJXeENMRWxCUVVsRExGVkJRVmxNTEhWQ1FVRjFRa01zVVVGQlVTd3lRMEZGTTBOTExDdENRVUZwUTA0c2RVSkJRWFZDUXl4UlFVRlJMR2RGUVVWb1JVMHNaMEpCUVd0Q1VDeDFRa0ZCZFVKRExGRkJRVkVzYVVSQlJXcEVUeXhYUVVGaFVpeDFRa0ZCZFVKRExGRkJRVkVzWlVGRk5VTlJMRTlCUVZOVUxIVkNRVUYxUWtNc1VVRkJVU3hWUVVWNFExTXNXVUZCWTFZc2RVSkJRWFZDUXl4UlFVRlJMR1ZCUlRkRFZTeGhRVUZsV0N4MVFrRkJkVUpETEZGQlFWRXNjVU5CUlRsRFZ5eG5Ra0ZCYTBKWUxGRkJRVkVzTUVKQlJURkNXU3hWUVVGWkxFTkJRMlJETEdWQlFXZENTQ3hoUVVGaFVDeFRRVVV6UWxjc1lVRkJaU3hEUVVOcVFrUXNaVUZCWjBJc1QwRkZaRVVzWVVGQlpTeERRVU5xUWtNc1ZVRkJWMVFzVjBGQlYwb3NVVUZCVVdNc1RVRkJUU3hEUVVOc1EwTXNWVUZCVjFnc1YwRkJWMG9zVVVGQlVXZENMRTlCUXpsQ1F5eFJRVUZUWWl4WFFVRlhTaXhSUVVGUlowSXNWVUZKTlVKRkxHRkJSVW9zVTBGQlZVTXNSMEZIVWl4VFFVRlRSQ3hsUVVOUUxFOUJRVTlETEVWQlFXbENReXhOUVVGTlF5eExRVUZOUXl4WlFVRmpSQ3hMUVdkRGNFUXNUMEZ1UTBFc1JVRkJTV3hDTEdkQ1FVRm5Ra2dzVTBGQlUydENMR0ZCUVdORExFZEJUVGxDUkN4aFFVRmhTeXhWUVVWdVFrTXNUMEZCVXl4VFFVRlRRU3hUUVVOMlFpeEpRVUZKUXl4RlFVRmpTaXhMUVVGTFN5eE5RVU51UWtNc1JVRkJWMFlzUlVGQldVVXNVMEZEZGtKRExFVkJRVmxJTEVWQlFWbEhMRlZCUTNoQ1F5eEZRVUZaU2l4RlFVRlpaaXhsUVVONFFtZENMRWRCUVZFc1JVRkJTWGhDTEN0Q1FVRXJRa1lzVTBGQlUzbENMRVZCUVdFc1EwRkJReXhYUVVGWkxGbEJRV0VzYlVKQlJUTkdTeXhGUVVGUFZDeExRVUZMVlN4UlFVRlJiRUlzVjBGQllTeEhRVU5xUTBVc1JVRkJXV1VzUlVGQlMyWXNWVUZEYWtKcFFpeEZRVUZYUml4RlFVRkxZaXhSUVVWb1FtZENMRWRCUVdkQ0xFVkJRVWw2UWl4blFrRkJaMEl3UWl4alFVRmpVaXhIUVVOc1JGTXNSVUZCVlVZc1JVRkJZeXhIUVVONFFrY3NSVUZCWlVnc1JVRkJZeXhIUVZOcVF5eFBRVkJCUlN4RlFVRlJiRUlzVVVGQlZXVXNSMEZCV1Vjc1JVRkJVV3hDTEZGQlJXeERSaXhKUVVOR2NVSXNSVUZCWVVNc1MwRkJUMFFzUlVGQllVTXNUVUZCVVN4TlFVTjZRMFFzUlVGQllVVXNSMEZCUzNaQ0xFZEJSMkpXTEU5QlFVOU1MRkZCUVZGMVF5eGpRVUZqVml4SFFVRlhMRVZCUVVrMVFpeFZRVUZWUkN4VFFVRlRMRWRCUVVsdlF5eEZRVUZqTEVOQlEzUkdVaXhYUVVGWExFVkJRVWwwUWl4WlFVRlpUaXhUUVVGVE5FSXNSMEZCVnl4RlFVRkpjRUlzWjBKQlFXZENaME1zVVVGQlVVd3NSVUZCVXl4alFVTnNSbElzU1VGSFExUXNZVUZ3UTFRc1EwRnhRMFZpTEU5QlFVOU1MRkZCUVZFMlFpeFhRVVZxUWxnc1lVRkJZVlFzVlVGQldVRXNWVUZEZWtKVExHRkJRV0ZRTEdGQlFXVkJMR0ZCUXpWQ1R5eGhRVUZoVGl4aFFVRmxRU3hoUVVVMVFpeEpRVUZKTmtJc1ZVRkJWeXhGUVVGSmFrTXNaMEpCUVdkQ1V5eFRRVUZUTEZGQlFWTkRMR05CUlhKRWNFSXNVVUZCVVVVc1VVRkJWWGxETEZOQlEyeENReXhQUVVGUE5VTXNVVUZCVlVFc1VVRkJhVUlpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdFltOXZkSE4wY21Gd0wyeHBZaTlRWVc1bGJFaGxZV1JwYm1jdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9leHRlbmRzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSksX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9jbGFzc25hbWVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpLF9wcm9wVHlwZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKSxfZWxlbWVudFR5cGU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtcHJvcC10eXBlcy9saWIvZWxlbWVudFR5cGVcIikpLF9ib290c3RyYXBVdGlscz1yZXF1aXJlKFwiLi91dGlscy9ib290c3RyYXBVdGlsc1wiKSxfUGFuZWxUb2dnbGU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9QYW5lbFRvZ2dsZVwiKSkscHJvcFR5cGVzPXtjb21wb25lbnRDbGFzczpfZWxlbWVudFR5cGUuZGVmYXVsdCx0b2dnbGU6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2x9LGNvbnRleHRUeXBlcz17JGJzX3BhbmVsOl9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7YnNDbGFzczpfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nfSl9LGRlZmF1bHRQcm9wcz17Y29tcG9uZW50Q2xhc3M6XCJkaXZcIn0sUGFuZWxUaXRsZT1mdW5jdGlvbihlKXtmdW5jdGlvbiBQYW5lbFRpdGxlKCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybigwLF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShQYW5lbFRpdGxlLGUpLFBhbmVsVGl0bGUucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXt2YXIgZT10aGlzLnByb3BzLHQ9ZS5jaGlsZHJlbixyPWUuY2xhc3NOYW1lLHM9ZS50b2dnbGUsbD1lLmNvbXBvbmVudENsYXNzLG89KDAsX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKGUsW1wiY2hpbGRyZW5cIixcImNsYXNzTmFtZVwiLFwidG9nZ2xlXCIsXCJjb21wb25lbnRDbGFzc1wiXSksYT0odGhpcy5jb250ZXh0LiRic19wYW5lbHx8e30pLmJzQ2xhc3MscD0oMCxfYm9vdHN0cmFwVXRpbHMuc3BsaXRCc1Byb3BzKShvKSxpPXBbMF0sbj1wWzFdO3JldHVybiBpLmJzQ2xhc3M9YXx8aS5ic0NsYXNzLHMmJih0PV9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1BhbmVsVG9nZ2xlLmRlZmF1bHQsbnVsbCx0KSksX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChsLCgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSxuLHtjbGFzc05hbWU6KDAsX2NsYXNzbmFtZXMuZGVmYXVsdCkociwoMCxfYm9vdHN0cmFwVXRpbHMucHJlZml4KShpLFwidGl0bGVcIikpfSksdCl9LFBhbmVsVGl0bGV9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7UGFuZWxUaXRsZS5wcm9wVHlwZXM9cHJvcFR5cGVzLFBhbmVsVGl0bGUuZGVmYXVsdFByb3BzPWRlZmF1bHRQcm9wcyxQYW5lbFRpdGxlLmNvbnRleHRUeXBlcz1jb250ZXh0VHlwZXM7dmFyIF9kZWZhdWx0PSgwLF9ib290c3RyYXBVdGlscy5ic0NsYXNzKShcInBhbmVsXCIsUGFuZWxUaXRsZSk7ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsQmhibVZzVkdsMGJHVXVhbk1pWFN3aWJtRnRaWE1pT2xzaVgybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ0lzSW5KbGNYVnBjbVVpTENKbGVIQnZjblJ6SWl3aVgxOWxjMDF2WkhWc1pTSXNJbVJsWm1GMWJIUWlMQ0pmWlhoMFpXNWtjeklpTENKZmIySnFaV04wVjJsMGFHOTFkRkJ5YjNCbGNuUnBaWE5NYjI5elpUSWlMQ0pmYVc1b1pYSnBkSE5NYjI5elpUSWlMQ0pmWTJ4aGMzTnVZVzFsY3lJc0lsOXdjbTl3Vkhsd1pYTWlMQ0pmY21WaFkzUWlMQ0pmWld4bGJXVnVkRlI1Y0dVaUxDSmZZbTl2ZEhOMGNtRndWWFJwYkhNaUxDSmZVR0Z1Wld4VWIyZG5iR1VpTENKd2NtOXdWSGx3WlhNaUxDSmpiMjF3YjI1bGJuUkRiR0Z6Y3lJc0luUnZaMmRzWlNJc0ltSnZiMndpTENKamIyNTBaWGgwVkhsd1pYTWlMQ0lrWW5OZmNHRnVaV3dpTENKemFHRndaU0lzSW1KelEyeGhjM01pTENKemRISnBibWNpTENKa1pXWmhkV3gwVUhKdmNITWlMQ0pRWVc1bGJGUnBkR3hsSWl3aVgxSmxZV04wSkVOdmJYQnZibVZ1ZENJc0ltRndjR3g1SWl3aWRHaHBjeUlzSW1GeVozVnRaVzUwY3lJc0luQnliM1J2ZEhsd1pTSXNJbkpsYm1SbGNpSXNJbDkwYUdsekpIQnliM0J6SWl3aWNISnZjSE1pTENKamFHbHNaSEpsYmlJc0ltTnNZWE56VG1GdFpTSXNJa052YlhCdmJtVnVkQ0lzSWw5aWMwTnNZWE56SWl3aVkyOXVkR1Y0ZENJc0lsOXpjR3hwZEVKelVISnZjSE1pTENKemNHeHBkRUp6VUhKdmNITWlMQ0ppYzFCeWIzQnpJaXdpWld4bGJXVnVkRkJ5YjNCeklpd2lZM0psWVhSbFJXeGxiV1Z1ZENJc0luQnlaV1pwZUNJc0lsOWtaV1poZFd4MElpd2liVzlrZFd4bElsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVVZCTEVsQlFVbEJMSFZDUVVGNVFrTXNVVUZCVVN4M1JFRkZja05ETEZGQlFWRkRMRmxCUVdFc1JVRkRja0pFTEZGQlFWRkZMR0ZCUVZVc1JVRkZiRUlzU1VGQlNVTXNWVUZCV1V3c2RVSkJRWFZDUXl4UlFVRlJMREpEUVVVelEwc3NLMEpCUVdsRFRpeDFRa0ZCZFVKRExGRkJRVkVzWjBWQlJXaEZUU3huUWtGQmEwSlFMSFZDUVVGMVFrTXNVVUZCVVN4cFJFRkZha1JQTEZsQlFXTlNMSFZDUVVGMVFrTXNVVUZCVVN4bFFVVTNRMUVzVjBGQllWUXNkVUpCUVhWQ1F5eFJRVUZSTEdWQlJUVkRVeXhQUVVGVFZpeDFRa0ZCZFVKRExGRkJRVkVzVlVGRmVFTlZMR0ZCUVdWWUxIVkNRVUYxUWtNc1VVRkJVU3h4UTBGRk9VTlhMR2RDUVVGclFsZ3NVVUZCVVN3d1FrRkZNVUpaTEdGQlFXVmlMSFZDUVVGMVFrTXNVVUZCVVN4clFrRkZPVU5oTEZWQlFWa3NRMEZEWkVNc1pVRkJaMEpLTEdGQlFXRlFMRkZCVFRkQ1dTeFBRVUZSVUN4WFFVRlhUQ3hSUVVGUllTeE5RVVY2UWtNc1lVRkJaU3hEUVVOcVFrTXNWVUZCVjFZc1YwRkJWMHdzVVVGQlVXZENMRTFCUVUwc1EwRkRiRU5ETEZGQlFWTmFMRmRCUVZkTUxGRkJRVkZyUWl4VlFVYzFRa01zWVVGQlpTeERRVU5xUWxJc1pVRkJaMElzVDBGSFpGTXNWMEZGU2l4VFFVRlZReXhIUVVkU0xGTkJRVk5FTEdGQlExQXNUMEZCVDBNc1JVRkJhVUpETEUxQlFVMURMRXRCUVUxRExGbEJRV05FTEV0QkswSndSQ3hQUVd4RFFTeEZRVUZKY0VJc1owSkJRV2RDU0N4VFFVRlRiMElzVjBGQldVTXNSMEZOTlVKRUxGZEJRVmRMTEZWQlJXcENReXhQUVVGVExGTkJRVk5CTEZOQlEzWkNMRWxCUVVsRExFVkJRV05LTEV0QlFVdExMRTFCUTI1Q1F5eEZRVUZYUml4RlFVRlpSU3hUUVVOMlFrTXNSVUZCV1Vnc1JVRkJXVWNzVlVGRGVFSnNRaXhGUVVGVFpTeEZRVUZaWml4UFFVTnlRbTFDTEVWQlFWbEtMRVZCUVZsb1FpeGxRVU40UW1sQ0xFZEJRVkVzUlVGQlNURkNMQ3RDUVVFclFrWXNVMEZCVXpKQ0xFVkJRV0VzUTBGQlF5eFhRVUZaTEZsQlFXRXNVMEZCVlN4dFFrRkhja2RMTEVkQlJFOVVMRXRCUVV0VkxGRkJRVkZzUWl4WFFVRmhMRWxCUTJwQ1JTeFJRVVZvUW1sQ0xFZEJRV2RDTEVWQlFVa3hRaXhuUWtGQlowSXlRaXhqUVVGalVDeEhRVU5zUkZFc1JVRkJWVVlzUlVGQll5eEhRVU40UWtjc1JVRkJaVWdzUlVGQll5eEhRVkZxUXl4UFFVNUJSU3hGUVVGUmJrSXNVVUZCVldVc1IwRkJXVWtzUlVGQlVXNUNMRkZCUld4RFRDeEpRVU5HYVVJc1JVRkJWM1pDTEU5QlFVOU9MRkZCUVZGelF5eGpRVUZqTjBJc1lVRkJZVlFzVVVGQlV5eExRVUZOTmtJc1NVRkhMMFIyUWl4UFFVRlBUaXhSUVVGUmMwTXNZMEZCWTFBc1IwRkJWeXhGUVVGSk9VSXNWVUZCVlVRc1UwRkJVeXhIUVVGSmNVTXNSVUZCWXl4RFFVTjBSbEFzVjBGQlZ5eEZRVUZKTVVJc1dVRkJXVW9zVTBGQlV6aENMRWRCUVZjc1JVRkJTWFJDTEdkQ1FVRm5RaXRDTEZGQlFWRklMRVZCUVZNc1dVRkRiRVpRTEVsQlIwTlVMRmRCYmtOVUxFTkJiME5GWkN4UFFVRlBUaXhSUVVGUkswSXNWMEZGYWtKWUxGZEJRVmRXTEZWQlFWbEJMRlZCUTNaQ1ZTeFhRVUZYUkN4aFFVRmxRU3hoUVVNeFFrTXNWMEZCVjA0c1lVRkJaVUVzWVVGRk1VSXNTVUZCU1RCQ0xGVkJRVmNzUlVGQlNXaERMR2RDUVVGblFsTXNVMEZCVXl4UlFVRlRSeXhaUVVWeVJIUkNMRkZCUVZGRkxGRkJRVlYzUXl4VFFVTnNRa01zVDBGQlR6TkRMRkZCUVZWQkxGRkJRV2xDSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdOMExXSnZiM1J6ZEhKaGNDOXNhV0l2VUdGdVpXeFVhWFJzWlM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PXZvaWQgMDt2YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLF9wcm9wVHlwZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKSxfY2xhc3NuYW1lcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKSxfZWxlbWVudFR5cGU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtcHJvcC10eXBlcy9saWIvZWxlbWVudFR5cGVcIikpLF9TYWZlQW5jaG9yPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vU2FmZUFuY2hvclwiKSksX2NyZWF0ZUNoYWluZWRGdW5jdGlvbj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZUNoYWluZWRGdW5jdGlvblwiKSkscHJvcFR5cGVzPXtvbkNsaWNrOl9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLGNvbXBvbmVudENsYXNzOl9lbGVtZW50VHlwZS5kZWZhdWx0fSxkZWZhdWx0UHJvcHM9e2NvbXBvbmVudENsYXNzOl9TYWZlQW5jaG9yLmRlZmF1bHR9LGNvbnRleHRUeXBlcz17JGJzX3BhbmVsOl9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7Ym9keUlkOl9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsb25Ub2dnbGU6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsZXhwYW5kZWQ6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2x9KX0sUGFuZWxUb2dnbGU9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gUGFuZWxUb2dnbGUoKXtmb3IodmFyIHQscj1hcmd1bWVudHMubGVuZ3RoLG89bmV3IEFycmF5KHIpLGE9MDthPHI7YSsrKW9bYV09YXJndW1lbnRzW2FdO3JldHVybih0PWUuY2FsbC5hcHBseShlLFt0aGlzXS5jb25jYXQobykpfHx0aGlzKS5oYW5kbGVUb2dnbGU9dC5oYW5kbGVUb2dnbGUuYmluZCgoMCxfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KSgoMCxfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KSh0KSkpLHR9KDAsX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKFBhbmVsVG9nZ2xlLGUpO3ZhciB0PVBhbmVsVG9nZ2xlLnByb3RvdHlwZTtyZXR1cm4gdC5oYW5kbGVUb2dnbGU9ZnVuY3Rpb24gaGFuZGxlVG9nZ2xlKGUpe3ZhciB0PSh0aGlzLmNvbnRleHQuJGJzX3BhbmVsfHx7fSkub25Ub2dnbGU7dCYmdChlKX0sdC5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIGU9dGhpcy5wcm9wcyx0PWUub25DbGljayxyPWUuY2xhc3NOYW1lLG89ZS5jb21wb25lbnRDbGFzcyxhPSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShlLFtcIm9uQ2xpY2tcIixcImNsYXNzTmFtZVwiLFwiY29tcG9uZW50Q2xhc3NcIl0pLGw9dGhpcy5jb250ZXh0LiRic19wYW5lbHx8e30sbj1sLmV4cGFuZGVkLHM9bC5ib2R5SWQsaT1vO3JldHVybiBhLm9uQ2xpY2s9KDAsX2NyZWF0ZUNoYWluZWRGdW5jdGlvbi5kZWZhdWx0KSh0LHRoaXMuaGFuZGxlVG9nZ2xlKSxhW1wiYXJpYS1leHBhbmRlZFwiXT1uLGEuY2xhc3NOYW1lPSgwLF9jbGFzc25hbWVzLmRlZmF1bHQpKHIsIW4mJlwiY29sbGFwc2VkXCIpLHMmJihhW1wiYXJpYS1jb250cm9sc1wiXT1zKSxfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KGksYSl9LFBhbmVsVG9nZ2xlfShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1BhbmVsVG9nZ2xlLnByb3BUeXBlcz1wcm9wVHlwZXMsUGFuZWxUb2dnbGUuZGVmYXVsdFByb3BzPWRlZmF1bHRQcm9wcyxQYW5lbFRvZ2dsZS5jb250ZXh0VHlwZXM9Y29udGV4dFR5cGVzO3ZhciBfZGVmYXVsdD1QYW5lbFRvZ2dsZTtleHBvcnRzLmRlZmF1bHQ9X2RlZmF1bHQsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxCaGJtVnNWRzluWjJ4bExtcHpJbDBzSW01aGJXVnpJanBiSWw5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUWlMQ0p5WlhGMWFYSmxJaXdpWlhod2IzSjBjeUlzSWw5ZlpYTk5iMlIxYkdVaUxDSmtaV1poZFd4MElpd2lYMjlpYW1WamRGZHBkR2h2ZFhSUWNtOXdaWEowYVdWelRHOXZjMlV5SWl3aVgybHVhR1Z5YVhSelRHOXZjMlV5SWl3aVgyRnpjMlZ5ZEZSb2FYTkpibWwwYVdGc2FYcGxaRElpTENKZmNISnZjRlI1Y0dWeklpd2lYM0psWVdOMElpd2lYMk5zWVhOemJtRnRaWE1pTENKZlpXeGxiV1Z1ZEZSNWNHVWlMQ0pmVTJGbVpVRnVZMmh2Y2lJc0lsOWpjbVZoZEdWRGFHRnBibVZrUm5WdVkzUnBiMjRpTENKd2NtOXdWSGx3WlhNaUxDSnZia05zYVdOcklpd2lablZ1WXlJc0ltTnZiWEJ2Ym1WdWRFTnNZWE56SWl3aVpHVm1ZWFZzZEZCeWIzQnpJaXdpWTI5dWRHVjRkRlI1Y0dWeklpd2lKR0p6WDNCaGJtVnNJaXdpYzJoaGNHVWlMQ0ppYjJSNVNXUWlMQ0p6ZEhKcGJtY2lMQ0p2YmxSdloyZHNaU0lzSW1WNGNHRnVaR1ZrSWl3aVltOXZiQ0lzSWxCaGJtVnNWRzluWjJ4bElpd2lYMUpsWVdOMEpFTnZiWEJ2Ym1WdWRDSXNJbDkwYUdseklpd2lYMnhsYmlJc0ltRnlaM1Z0Wlc1MGN5SXNJbXhsYm1kMGFDSXNJbUZ5WjNNaUxDSkJjbkpoZVNJc0lsOXJaWGtpTENKallXeHNJaXdpWVhCd2JIa2lMQ0owYUdseklpd2lZMjl1WTJGMElpd2lhR0Z1Wkd4bFZHOW5aMnhsSWl3aVltbHVaQ0lzSWw5d2NtOTBieUlzSW5CeWIzUnZkSGx3WlNJc0ltVjJaVzUwSWl3aVkyOXVkR1Y0ZENJc0luSmxibVJsY2lJc0lsOTBhR2x6SkhCeWIzQnpJaXdpY0hKdmNITWlMQ0pqYkdGemMwNWhiV1VpTENKZmNtVm1NaUlzSWtOdmJYQnZibVZ1ZENJc0ltTnlaV0YwWlVWc1pXMWxiblFpTENKZlpHVm1ZWFZzZENJc0ltMXZaSFZzWlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkZRU3hKUVVGSlFTeDFRa0ZCZVVKRExGRkJRVkVzZDBSQlJYSkRReXhSUVVGUlF5eFpRVUZoTEVWQlEzSkNSQ3hSUVVGUlJTeGhRVUZWTEVWQlJXeENMRWxCUVVsRExDdENRVUZwUTB3c2RVSkJRWFZDUXl4UlFVRlJMR2RGUVVWb1JVc3NaMEpCUVd0Q1RpeDFRa0ZCZFVKRExGRkJRVkVzYVVSQlJXcEVUU3gzUWtGQk1FSlFMSFZDUVVGMVFrTXNVVUZCVVN4NVJFRkZla1JQTEZkQlFXRlNMSFZDUVVGMVFrTXNVVUZCVVN4bFFVVTFRMUVzVDBGQlUxUXNkVUpCUVhWQ1F5eFJRVUZSTEZWQlJYaERVeXhaUVVGalZpeDFRa0ZCZFVKRExGRkJRVkVzWlVGRk4wTlZMR0ZCUVdWWUxIVkNRVUYxUWtNc1VVRkJVU3h4UTBGRk9VTlhMRmxCUVdOYUxIVkNRVUYxUWtNc1VVRkJVU3hwUWtGRk4wTlpMSFZDUVVGNVFtSXNkVUpCUVhWQ1F5eFJRVUZSTEd0RFFVVjRSR0VzVlVGQldTeERRVTFrUXl4UlFVRlRVQ3hYUVVGWFNpeFJRVUZSV1N4TFFVczFRa01zWlVGQlowSk9MR0ZCUVdGUUxGTkJSVE5DWXl4aFFVRmxMRU5CUTJwQ1JDeGxRVUZuUWt3c1dVRkJXVklzVTBGRk1VSmxMR0ZCUVdVc1EwRkRha0pETEZWQlFWZGFMRmRCUVZkS0xGRkJRVkZwUWl4TlFVRk5MRU5CUTJ4RFF5eFBRVUZSWkN4WFFVRlhTaXhSUVVGUmJVSXNUMEZETTBKRExGTkJRVlZvUWl4WFFVRlhTaXhSUVVGUldTeExRVU0zUWxNc1UwRkJWV3BDTEZkQlFWZEtMRkZCUVZGelFpeFJRVWszUWtNc1dVRkZTaXhUUVVGVlF5eEhRVWRTTEZOQlFWTkVMR05CUjFBc1NVRkdRU3hKUVVGSlJTeEZRVVZMUXl4RlFVRlBReXhWUVVGVlF5eFBRVUZSUXl4RlFVRlBMRWxCUVVsRExFMUJRVTFLTEVkQlFVOUxMRVZCUVU4c1JVRkJSMEVzUlVGQlQwd3NSVUZCVFVzc1NVRkRMMFZHTEVWQlFVdEZMRWRCUVZGS0xGVkJRVlZKTEVkQlMzcENMRTlCUmtGT0xFVkJRVkZFTEVWQlFXbENVU3hMUVVGTFF5eE5RVUZOVkN4RlFVRnJRaXhEUVVGRFZTeE5RVUZOUXl4UFFVRlBUaXhMUVVGVlN5eE5RVU40UlVVc1lVRkJaVmdzUlVGQlRWY3NZVUZCWVVNc1RVRkJTeXhGUVVGSmJFTXNkMEpCUVhkQ1NDeFZRVUZUTEVWQlFVbEhMSGRDUVVGM1FrZ3NVMEZCVTNsQ0xFdEJRMmhJUVN4SFFWaFVMRVZCUVVsMlFpeG5Ra0ZCWjBKR0xGTkJRVk4xUWl4WlFVRmhReXhIUVdNeFF5eEpRVUZKWXl4RlFVRlRaaXhaUVVGWlowSXNWVUZyUTNwQ0xFOUJhRU5CUkN4RlFVRlBSaXhoUVVGbExGTkJRVk5CTEdGQlFXRkpMRWRCUXpGRExFbEJRMGx3UWl4SFFVUlBZeXhMUVVGTFR5eFJRVUZSZWtJc1YwRkJZU3hKUVVOcVFra3NVMEZGYUVKQkxFZEJRMFpCTEVWQlFWTnZRaXhKUVVsaVJpeEZRVUZQU1N4UFFVRlRMRk5CUVZOQkxGTkJRM1pDTEVsQlFVbERMRVZCUVdOVUxFdEJRVXRWTEUxQlEyNUNha01zUlVGQlZXZERMRVZCUVZsb1F5eFJRVU4wUW10RExFVkJRVmxHTEVWQlFWbEZMRlZCUTNoQ2FFTXNSVUZCYVVJNFFpeEZRVUZaT1VJc1pVRkROMElyUWl4SFFVRlJMRVZCUVVrelF5d3JRa0ZCSzBKRUxGTkJRVk15UXl4RlFVRmhMRU5CUVVNc1ZVRkJWeXhaUVVGaExHMUNRVVV4Umtjc1JVRkJVVm9zUzBGQlMwOHNVVUZCVVhwQ0xGZEJRV0VzUjBGRGJFTkxMRVZCUVZkNVFpeEZRVUZOZWtJc1UwRkRha0pJTEVWQlFWTTBRaXhGUVVGTk5VSXNUMEZGWmpaQ0xFVkJRVmxzUXl4RlFWTm9RaXhQUVZKQkswSXNSVUZCVFdwRExGTkJRVlVzUlVGQlNVWXNkVUpCUVhWQ1ZDeFRRVUZUVnl4RlFVRlRkVUlzUzBGQlMwVXNZMEZEYkVWUkxFVkJRVTBzYVVKQlFXMUNka0lzUlVGRGVrSjFRaXhGUVVGTlF5eFhRVUZaTEVWQlFVbDJReXhaUVVGWlRpeFRRVUZUTmtNc1IwRkJXWGhDTEVkQlFWa3NZVUZGTDBSSUxFbEJRMFl3UWl4RlFVRk5MR2xDUVVGdFFqRkNMRWRCUjNCQ1lpeFBRVUZQVEN4UlFVRlJaMFFzWTBGQlkwUXNSVUZCVjBnc1NVRkhNVU55UWl4WlFXcEVWQ3hEUVd0RVJXeENMRTlCUVU5TUxGRkJRVkVyUXl4WFFVVnFRbmhDTEZsQlFWbGlMRlZCUVZsQkxGVkJRM2hDWVN4WlFVRlpWQ3hoUVVGbFFTeGhRVU16UWxNc1dVRkJXVklzWVVGQlpVRXNZVUZETTBJc1NVRkJTV3RETEZOQlFWY3hRaXhaUVVObWVrSXNVVUZCVVVVc1VVRkJWV2xFTEZOQlEyeENReXhQUVVGUGNFUXNVVUZCVlVFc1VVRkJhVUlpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdFltOXZkSE4wY21Gd0wyeHBZaTlRWVc1bGJGUnZaMmRzWlM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PXZvaWQgMDt2YXIgX2V4dGVuZHMzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKSxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpLF9pbmhlcml0c0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSksX2NsYXNzbmFtZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKSxfcHJvcFR5cGVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpLF9pc1JlcXVpcmVkRm9yQTExeT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzLWV4dHJhL2xpYi9pc1JlcXVpcmVkRm9yQTExeVwiKSksX2Jvb3RzdHJhcFV0aWxzPXJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpLHByb3BUeXBlcz17aWQ6KDAsX2lzUmVxdWlyZWRGb3JBMTF5LmRlZmF1bHQpKF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcl0pKSxwbGFjZW1lbnQ6X3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFtcInRvcFwiLFwicmlnaHRcIixcImJvdHRvbVwiLFwibGVmdFwiXSkscG9zaXRpb25Ub3A6X3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXSkscG9zaXRpb25MZWZ0Ol9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ10pLGFycm93T2Zmc2V0VG9wOl9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ10pLGFycm93T2Zmc2V0TGVmdDpfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmddKSx0aXRsZTpfcHJvcFR5cGVzLmRlZmF1bHQubm9kZX0sZGVmYXVsdFByb3BzPXtwbGFjZW1lbnQ6XCJyaWdodFwifSxQb3BvdmVyPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIFBvcG92ZXIoKXtyZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9cmV0dXJuKDAsX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKFBvcG92ZXIsZSksUG9wb3Zlci5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uIHJlbmRlcigpe3ZhciBlLHQ9dGhpcy5wcm9wcyxyPXQucGxhY2VtZW50LG89dC5wb3NpdGlvblRvcCxwPXQucG9zaXRpb25MZWZ0LHM9dC5hcnJvd09mZnNldFRvcCxhPXQuYXJyb3dPZmZzZXRMZWZ0LGw9dC50aXRsZSxpPXQuY2xhc3NOYW1lLHU9dC5zdHlsZSxmPXQuY2hpbGRyZW4sbj0oMCxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkodCxbXCJwbGFjZW1lbnRcIixcInBvc2l0aW9uVG9wXCIsXCJwb3NpdGlvbkxlZnRcIixcImFycm93T2Zmc2V0VG9wXCIsXCJhcnJvd09mZnNldExlZnRcIixcInRpdGxlXCIsXCJjbGFzc05hbWVcIixcInN0eWxlXCIsXCJjaGlsZHJlblwiXSksZD0oMCxfYm9vdHN0cmFwVXRpbHMuc3BsaXRCc1Byb3BzKShuKSxfPWRbMF0sYz1kWzFdLHk9KDAsX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCgwLF9ib290c3RyYXBVdGlscy5nZXRDbGFzc1NldCkoXyksKChlPXt9KVtyXT0hMCxlKSksVD0oMCxfZXh0ZW5kczMuZGVmYXVsdCkoe2Rpc3BsYXk6XCJibG9ja1wiLHRvcDpvLGxlZnQ6cH0sdSksbT17dG9wOnMsbGVmdDphfTtyZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCgwLF9leHRlbmRzMy5kZWZhdWx0KSh7fSxjLHtyb2xlOlwidG9vbHRpcFwiLGNsYXNzTmFtZTooMCxfY2xhc3NuYW1lcy5kZWZhdWx0KShpLHkpLHN0eWxlOlR9KSxfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2NsYXNzTmFtZTpcImFycm93XCIsc3R5bGU6bX0pLGwmJl9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJoM1wiLHtjbGFzc05hbWU6KDAsX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkoXyxcInRpdGxlXCIpfSxsKSxfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2NsYXNzTmFtZTooMCxfYm9vdHN0cmFwVXRpbHMucHJlZml4KShfLFwiY29udGVudFwiKX0sZikpfSxQb3BvdmVyfShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1BvcG92ZXIucHJvcFR5cGVzPXByb3BUeXBlcyxQb3BvdmVyLmRlZmF1bHRQcm9wcz1kZWZhdWx0UHJvcHM7dmFyIF9kZWZhdWx0PSgwLF9ib290c3RyYXBVdGlscy5ic0NsYXNzKShcInBvcG92ZXJcIixQb3BvdmVyKTtleHBvcnRzLmRlZmF1bHQ9X2RlZmF1bHQsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxCdmNHOTJaWEl1YW5NaVhTd2libUZ0WlhNaU9sc2lYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENJc0luSmxjWFZwY21VaUxDSmxlSEJ2Y25Seklpd2lYMTlsYzAxdlpIVnNaU0lzSW1SbFptRjFiSFFpTENKZlpYaDBaVzVrY3pNaUxDSmZiMkpxWldOMFYybDBhRzkxZEZCeWIzQmxjblJwWlhOTWIyOXpaVElpTENKZmFXNW9aWEpwZEhOTWIyOXpaVElpTENKZlkyeGhjM051WVcxbGN5SXNJbDl5WldGamRDSXNJbDl3Y205d1ZIbHdaWE1pTENKZmFYTlNaWEYxYVhKbFpFWnZja0V4TVhraUxDSmZZbTl2ZEhOMGNtRndWWFJwYkhNaUxDSndjbTl3Vkhsd1pYTWlMQ0pwWkNJc0ltOXVaVTltVkhsd1pTSXNJbk4wY21sdVp5SXNJbTUxYldKbGNpSXNJbkJzWVdObGJXVnVkQ0lzSW05dVpVOW1JaXdpY0c5emFYUnBiMjVVYjNBaUxDSndiM05wZEdsdmJreGxablFpTENKaGNuSnZkMDltWm5ObGRGUnZjQ0lzSW1GeWNtOTNUMlptYzJWMFRHVm1kQ0lzSW5ScGRHeGxJaXdpYm05a1pTSXNJbVJsWm1GMWJIUlFjbTl3Y3lJc0lsQnZjRzkyWlhJaUxDSmZVbVZoWTNRa1EyOXRjRzl1Wlc1MElpd2lZWEJ3YkhraUxDSjBhR2x6SWl3aVlYSm5kVzFsYm5Seklpd2ljSEp2ZEc5MGVYQmxJaXdpY21WdVpHVnlJaXdpWDJWNGRHVnVaSE15SWl3aVgzUm9hWE1rY0hKdmNITWlMQ0p3Y205d2N5SXNJbU5zWVhOelRtRnRaU0lzSW5OMGVXeGxJaXdpWTJocGJHUnlaVzRpTENKZmMzQnNhWFJDYzFCeWIzQnpJaXdpYzNCc2FYUkNjMUJ5YjNCeklpd2lZbk5RY205d2N5SXNJbVZzWlcxbGJuUlFjbTl3Y3lJc0ltTnNZWE56WlhNaUxDSm5aWFJEYkdGemMxTmxkQ0lzSW05MWRHVnlVM1I1YkdVaUxDSmthWE53YkdGNUlpd2lkRzl3SWl3aWJHVm1kQ0lzSW1GeWNtOTNVM1I1YkdVaUxDSmpjbVZoZEdWRmJHVnRaVzUwSWl3aWNtOXNaU0lzSW5CeVpXWnBlQ0lzSWtOdmJYQnZibVZ1ZENJc0lsOWtaV1poZFd4MElpd2lZbk5EYkdGemN5SXNJbTF2WkhWc1pTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZGUVN4SlFVRkpRU3gxUWtGQmVVSkRMRkZCUVZFc2QwUkJSWEpEUXl4UlFVRlJReXhaUVVGaExFVkJRM0pDUkN4UlFVRlJSU3hoUVVGVkxFVkJSV3hDTEVsQlFVbERMRlZCUVZsTUxIVkNRVUYxUWtNc1VVRkJVU3d5UTBGRk0wTkxMQ3RDUVVGcFEwNHNkVUpCUVhWQ1F5eFJRVUZSTEdkRlFVVm9SVTBzWjBKQlFXdENVQ3gxUWtGQmRVSkRMRkZCUVZFc2FVUkJSV3BFVHl4WlFVRmpVaXgxUWtGQmRVSkRMRkZCUVZFc1pVRkZOME5STEU5QlFWTlVMSFZDUVVGMVFrTXNVVUZCVVN4VlFVVjRRMU1zVjBGQllWWXNkVUpCUVhWQ1F5eFJRVUZSTEdWQlJUVkRWU3h0UWtGQmNVSllMSFZDUVVGMVFrTXNVVUZCVVN3eVEwRkZjRVJYTEdkQ1FVRnJRbGdzVVVGQlVTd3dRa0ZGTVVKWkxGVkJRVmtzUTBGTlpFTXNTVUZCU1N4RlFVRkpTQ3h0UWtGQmJVSlFMRk5CUVZOTkxGZEJRVmRPTEZGQlFWRlhMRlZCUVZVc1EwRkJRMHdzVjBGQlYwNHNVVUZCVVZrc1QwRkJVVTRzVjBGQlYwNHNVVUZCVVdFc1ZVRkxhRWhETEZWQlFWZFNMRmRCUVZkT0xGRkJRVkZsTEUxQlFVMHNRMEZCUXl4TlFVRlBMRkZCUVZNc1UwRkJWU3hUUVVzdlJFTXNXVUZCWVZZc1YwRkJWMDRzVVVGQlVWY3NWVUZCVlN4RFFVRkRUQ3hYUVVGWFRpeFJRVUZSWVN4UFFVRlJVQ3hYUVVGWFRpeFJRVUZSV1N4VFFVdDZSa3NzWVVGQlkxZ3NWMEZCVjA0c1VVRkJVVmNzVlVGQlZTeERRVUZEVEN4WFFVRlhUaXhSUVVGUllTeFBRVUZSVUN4WFFVRlhUaXhSUVVGUldTeFRRVXN4Umswc1pVRkJaMEphTEZkQlFWZE9MRkZCUVZGWExGVkJRVlVzUTBGQlEwd3NWMEZCVjA0c1VVRkJVV0VzVDBGQlVWQXNWMEZCVjA0c1VVRkJVVmtzVTBGTE5VWlBMR2RDUVVGcFFtSXNWMEZCVjA0c1VVRkJVVmNzVlVGQlZTeERRVUZEVEN4WFFVRlhUaXhSUVVGUllTeFBRVUZSVUN4WFFVRlhUaXhSUVVGUldTeFRRVXMzUmxFc1RVRkJUMlFzVjBGQlYwNHNVVUZCVVhGQ0xFMUJSWGhDUXl4aFFVRmxMRU5CUTJwQ1VpeFZRVUZYTEZOQlIxUlRMRkZCUlVvc1UwRkJWVU1zUjBGSFVpeFRRVUZUUkN4VlFVTlFMRTlCUVU5RExFVkJRV2xDUXl4TlFVRk5ReXhMUVVGTlF5eFpRVUZqUkN4TFFXZEVjRVFzVDBGdVJFRXNSVUZCU1haQ0xHZENRVUZuUWtnc1UwRkJVM1ZDTEZGQlFWTkRMRWRCVFhwQ1JDeFJRVUZSU3l4VlFVVmtReXhQUVVGVExGTkJRVk5CTEZOQlEzWkNMRWxCUVVsRExFVkJSVUZETEVWQlFXTk1MRXRCUVV0TkxFMUJRMjVDYkVJc1JVRkJXV2xDTEVWQlFWbHFRaXhWUVVONFFrVXNSVUZCWTJVc1JVRkJXV1lzV1VGRE1VSkRMRVZCUVdWakxFVkJRVmxrTEdGQlF6TkNReXhGUVVGcFFtRXNSVUZCV1dJc1pVRkROMEpETEVWQlFXdENXU3hGUVVGWldpeG5Ra0ZET1VKRExFVkJRVkZYTEVWQlFWbFlMRTFCUTNCQ1lTeEZRVUZaUml4RlFVRlpSU3hWUVVONFFrTXNSVUZCVVVnc1JVRkJXVWNzVFVGRGNFSkRMRVZCUVZkS0xFVkJRVmxKTEZOQlEzWkNTQ3hIUVVGUkxFVkJRVWs1UWl3clFrRkJLMEpHTEZOQlFWTXJRaXhGUVVGaExFTkJRVU1zV1VGQllTeGpRVUZsTEdWQlFXZENMR2xDUVVGclFpeHJRa0ZCYlVJc1VVRkJVeXhaUVVGaExGRkJRVk1zWVVGRmJFeExMRWRCUVdkQ0xFVkJRVWsxUWl4blFrRkJaMEkyUWl4alFVRmpUQ3hIUVVOc1JFMHNSVUZCVlVZc1JVRkJZeXhIUVVONFFrY3NSVUZCWlVnc1JVRkJZeXhIUVVVM1Fra3NSMEZCVlN4RlFVRkpka01zVlVGQlZVUXNVMEZCVXl4SlFVRkpMRVZCUVVsUkxHZENRVUZuUW1sRExHRkJRV0ZJTEV0QlFWZFNMRVZCUVZrc1NVRkJZMmhDTEVsQlFXRXNSVUZCVFdkQ0xFbEJRemxJV1N4SFFVRmhMRVZCUVVsNlF5eFZRVUZWUkN4VFFVRlRMRU5CUTNSRE1rTXNVVUZCVXl4UlFVTlVReXhKUVVGTE5VSXNSVUZEVERaQ0xFdEJRVTAxUWl4SFFVTk1hVUlzUjBGRFExa3NSVUZCWVN4RFFVTm1SaXhKUVVGTE1VSXNSVUZEVERKQ0xFdEJRVTB4UWl4SFFVVlNMRTlCUVU5a0xFOUJRVTlNTEZGQlFWRXJReXhqUVVGakxFOUJRVThzUlVGQlNUbERMRlZCUVZWRUxGTkJRVk1zUjBGQlNYVkRMRVZCUVdNc1EwRkRiRVpUTEV0QlFVMHNWVUZEVG1Zc1YwRkJWeXhGUVVGSk4wSXNXVUZCV1Vvc1UwRkJVMmxETEVWQlFWZFBMRWRCUXk5RFRpeE5RVUZQVVN4SlFVTk1ja01zVDBGQlQwd3NVVUZCVVN0RExHTkJRV01zVFVGQlR5eERRVU4wUTJRc1ZVRkJWeXhSUVVOWVF5eE5RVUZQV1N4SlFVTk1NVUlzUjBGQlUyWXNUMEZCVDB3c1VVRkJVU3RETEdOQlFXTXNTMEZCVFN4RFFVTTVRMlFzVjBGQlZ5eEZRVUZKZWtJc1owSkJRV2RDZVVNc1VVRkJVVmdzUlVGQlV5eFZRVU12UTJ4Q0xFZEJRVkZtTEU5QlFVOU1MRkZCUVZFclF5eGpRVUZqTEUxQlFVOHNRMEZETjBOa0xGZEJRVmNzUlVGQlNYcENMR2RDUVVGblFubERMRkZCUVZGWUxFVkJRVk1zV1VGREwwTklMRXRCUjBWYUxGRkJjRVJVTEVOQmNVUkZiRUlzVDBGQlQwd3NVVUZCVVd0RUxGZEJSV3BDTTBJc1VVRkJVV1FzVlVGQldVRXNWVUZEY0VKakxGRkJRVkZFTEdGQlFXVkJMR0ZCUlhaQ0xFbEJRVWsyUWl4VlFVRlhMRVZCUVVrelF5eG5Ra0ZCWjBJMFF5eFRRVUZUTEZWQlFWYzNRaXhUUVVWMlJIcENMRkZCUVZGRkxGRkJRVlZ0UkN4VFFVTnNRa1VzVDBGQlQzWkVMRkZCUVZWQkxGRkJRV2xDSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdOMExXSnZiM1J6ZEhKaGNDOXNhV0l2VUc5d2IzWmxjaTVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIiksX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PXZvaWQgMDt2YXIgX3ZhbHVlcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2NvcmUtanMvb2JqZWN0L3ZhbHVlc1wiKSksX2V4dGVuZHMzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKSxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpLF9pbmhlcml0c0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSksX2NsYXNzbmFtZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSksX3Byb3BUeXBlcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKSxfYm9vdHN0cmFwVXRpbHM9cmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIiksX1N0eWxlQ29uZmlnPXJlcXVpcmUoXCIuL3V0aWxzL1N0eWxlQ29uZmlnXCIpLF9WYWxpZENvbXBvbmVudENoaWxkcmVuPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvVmFsaWRDb21wb25lbnRDaGlsZHJlblwiKSksUk9VTkRfUFJFQ0lTSU9OPTFlMztmdW5jdGlvbiBvbmx5UHJvZ3Jlc3NCYXIoZSxyLHQpe3ZhciBzPWVbcl07aWYoIXMpcmV0dXJuIG51bGw7dmFyIGE9bnVsbDtyZXR1cm4gX3JlYWN0LmRlZmF1bHQuQ2hpbGRyZW4uZm9yRWFjaChzLGZ1bmN0aW9uKGUpe2lmKCFhKXt2YXIgcj1fcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFByb2dyZXNzQmFyLG51bGwpO2lmKGUudHlwZSE9PXIudHlwZSl7dmFyIHM9X3JlYWN0LmRlZmF1bHQuaXNWYWxpZEVsZW1lbnQoZSk/ZS50eXBlLmRpc3BsYXlOYW1lfHxlLnR5cGUubmFtZXx8ZS50eXBlOmU7YT1uZXcgRXJyb3IoXCJDaGlsZHJlbiBvZiBcIit0K1wiIGNhbiBjb250YWluIG9ubHkgUHJvZ3Jlc3NCYXIgY29tcG9uZW50cy4gRm91bmQgXCIrcytcIi5cIil9fX0pLGF9dmFyIHByb3BUeXBlcz17bWluOl9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsbm93Ol9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsbWF4Ol9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsbGFiZWw6X3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsc3JPbmx5Ol9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLHN0cmlwZWQ6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsYWN0aXZlOl9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLGNoaWxkcmVuOm9ubHlQcm9ncmVzc0Jhcixpc0NoaWxkOl9wcm9wVHlwZXMuZGVmYXVsdC5ib29sfSxkZWZhdWx0UHJvcHM9e21pbjowLG1heDoxMDAsYWN0aXZlOiExLGlzQ2hpbGQ6ITEsc3JPbmx5OiExLHN0cmlwZWQ6ITF9O2Z1bmN0aW9uIGdldFBlcmNlbnRhZ2UoZSxyLHQpe3ZhciBzPShlLXIpLyh0LXIpKjEwMDtyZXR1cm4gTWF0aC5yb3VuZChzKlJPVU5EX1BSRUNJU0lPTikvUk9VTkRfUFJFQ0lTSU9OfXZhciBQcm9ncmVzc0Jhcj1mdW5jdGlvbihlKXtmdW5jdGlvbiBQcm9ncmVzc0Jhcigpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc30oMCxfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoUHJvZ3Jlc3NCYXIsZSk7dmFyIHI9UHJvZ3Jlc3NCYXIucHJvdG90eXBlO3JldHVybiByLnJlbmRlclByb2dyZXNzQmFyPWZ1bmN0aW9uIHJlbmRlclByb2dyZXNzQmFyKGUpe3ZhciByLHQ9ZS5taW4scz1lLm5vdyxhPWUubWF4LGw9ZS5sYWJlbCxvPWUuc3JPbmx5LGk9ZS5zdHJpcGVkLG49ZS5hY3RpdmUsdT1lLmNsYXNzTmFtZSxwPWUuc3R5bGUsZD0oMCxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoZSxbXCJtaW5cIixcIm5vd1wiLFwibWF4XCIsXCJsYWJlbFwiLFwic3JPbmx5XCIsXCJzdHJpcGVkXCIsXCJhY3RpdmVcIixcImNsYXNzTmFtZVwiLFwic3R5bGVcIl0pLGM9KDAsX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykoZCksZj1jWzBdLF89Y1sxXSxtPSgwLF9leHRlbmRzMy5kZWZhdWx0KSh7fSwoMCxfYm9vdHN0cmFwVXRpbHMuZ2V0Q2xhc3NTZXQpKGYpLCgocj17YWN0aXZlOm59KVsoMCxfYm9vdHN0cmFwVXRpbHMucHJlZml4KShmLFwic3RyaXBlZFwiKV09bnx8aSxyKSk7cmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwoMCxfZXh0ZW5kczMuZGVmYXVsdCkoe30sXyx7cm9sZTpcInByb2dyZXNzYmFyXCIsY2xhc3NOYW1lOigwLF9jbGFzc25hbWVzLmRlZmF1bHQpKHUsbSksc3R5bGU6KDAsX2V4dGVuZHMzLmRlZmF1bHQpKHt3aWR0aDpnZXRQZXJjZW50YWdlKHMsdCxhKStcIiVcIn0scCksXCJhcmlhLXZhbHVlbm93XCI6cyxcImFyaWEtdmFsdWVtaW5cIjp0LFwiYXJpYS12YWx1ZW1heFwiOmF9KSxvP19yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIse2NsYXNzTmFtZTpcInNyLW9ubHlcIn0sbCk6bCl9LHIucmVuZGVyPWZ1bmN0aW9uIHJlbmRlcigpe3ZhciBlPXRoaXMucHJvcHMscj1lLmlzQ2hpbGQsdD0oMCxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoZSxbXCJpc0NoaWxkXCJdKTtpZihyKXJldHVybiB0aGlzLnJlbmRlclByb2dyZXNzQmFyKHQpO3ZhciBzPXQubWluLGE9dC5ub3csbD10Lm1heCxvPXQubGFiZWwsaT10LnNyT25seSxuPXQuc3RyaXBlZCx1PXQuYWN0aXZlLHA9dC5ic0NsYXNzLGQ9dC5ic1N0eWxlLGM9dC5jbGFzc05hbWUsZj10LmNoaWxkcmVuLF89KDAsX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKHQsW1wibWluXCIsXCJub3dcIixcIm1heFwiLFwibGFiZWxcIixcInNyT25seVwiLFwic3RyaXBlZFwiLFwiYWN0aXZlXCIsXCJic0NsYXNzXCIsXCJic1N0eWxlXCIsXCJjbGFzc05hbWVcIixcImNoaWxkcmVuXCJdKTtyZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCgwLF9leHRlbmRzMy5kZWZhdWx0KSh7fSxfLHtjbGFzc05hbWU6KDAsX2NsYXNzbmFtZXMuZGVmYXVsdCkoYyxcInByb2dyZXNzXCIpfSksZj9fVmFsaWRDb21wb25lbnRDaGlsZHJlbi5kZWZhdWx0Lm1hcChmLGZ1bmN0aW9uKGUpe3JldHVybigwLF9yZWFjdC5jbG9uZUVsZW1lbnQpKGUse2lzQ2hpbGQ6ITB9KX0pOnRoaXMucmVuZGVyUHJvZ3Jlc3NCYXIoe21pbjpzLG5vdzphLG1heDpsLGxhYmVsOm8sc3JPbmx5Omksc3RyaXBlZDpuLGFjdGl2ZTp1LGJzQ2xhc3M6cCxic1N0eWxlOmR9KSl9LFByb2dyZXNzQmFyfShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1Byb2dyZXNzQmFyLnByb3BUeXBlcz1wcm9wVHlwZXMsUHJvZ3Jlc3NCYXIuZGVmYXVsdFByb3BzPWRlZmF1bHRQcm9wczt2YXIgX2RlZmF1bHQ9KDAsX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKFwicHJvZ3Jlc3MtYmFyXCIsKDAsX2Jvb3RzdHJhcFV0aWxzLmJzU3R5bGVzKSgoMCxfdmFsdWVzLmRlZmF1bHQpKF9TdHlsZUNvbmZpZy5TdGF0ZSksUHJvZ3Jlc3NCYXIpKTtleHBvcnRzLmRlZmF1bHQ9X2RlZmF1bHQsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxCeWIyZHlaWE56UW1GeUxtcHpJbDBzSW01aGJXVnpJanBiSWw5cGJuUmxjbTl3VW1WeGRXbHlaVmRwYkdSallYSmtJaXdpY21WeGRXbHlaU0lzSWw5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUWlMQ0psZUhCdmNuUnpJaXdpWDE5bGMwMXZaSFZzWlNJc0ltUmxabUYxYkhRaUxDSmZkbUZzZFdWeklpd2lYMlY0ZEdWdVpITXpJaXdpWDI5aWFtVmpkRmRwZEdodmRYUlFjbTl3WlhKMGFXVnpURzl2YzJVeUlpd2lYMmx1YUdWeWFYUnpURzl2YzJVeUlpd2lYMk5zWVhOemJtRnRaWE1pTENKZmNtVmhZM1FpTENKZmNISnZjRlI1Y0dWeklpd2lYMkp2YjNSemRISmhjRlYwYVd4eklpd2lYMU4wZVd4bFEyOXVabWxuSWl3aVgxWmhiR2xrUTI5dGNHOXVaVzUwUTJocGJHUnlaVzRpTENKU1QxVk9SRjlRVWtWRFNWTkpUMDRpTENKdmJteDVVSEp2WjNKbGMzTkNZWElpTENKd2NtOXdjeUlzSW5CeWIzQk9ZVzFsSWl3aVkyOXRjRzl1Wlc1MFRtRnRaU0lzSW1Ob2FXeGtjbVZ1SWl3aVpYSnliM0lpTENKRGFHbHNaSEpsYmlJc0ltWnZja1ZoWTJnaUxDSmphR2xzWkNJc0ltVnNaVzFsYm5RaUxDSmpjbVZoZEdWRmJHVnRaVzUwSWl3aVVISnZaM0psYzNOQ1lYSWlMQ0owZVhCbElpd2lZMmhwYkdSSlpHVnVkR2xtYVdWeUlpd2lhWE5XWVd4cFpFVnNaVzFsYm5RaUxDSmthWE53YkdGNVRtRnRaU0lzSW01aGJXVWlMQ0pGY25KdmNpSXNJbkJ5YjNCVWVYQmxjeUlzSW0xcGJpSXNJbTUxYldKbGNpSXNJbTV2ZHlJc0ltMWhlQ0lzSW14aFltVnNJaXdpYm05a1pTSXNJbk55VDI1c2VTSXNJbUp2YjJ3aUxDSnpkSEpwY0dWa0lpd2lZV04wYVhabElpd2lhWE5EYUdsc1pDSXNJbVJsWm1GMWJIUlFjbTl3Y3lJc0ltZGxkRkJsY21ObGJuUmhaMlVpTENKd1pYSmpaVzUwWVdkbElpd2lUV0YwYUNJc0luSnZkVzVrSWl3aVgxSmxZV04wSkVOdmJYQnZibVZ1ZENJc0ltRndjR3g1SWl3aWRHaHBjeUlzSW1GeVozVnRaVzUwY3lJc0lsOXdjbTkwYnlJc0luQnliM1J2ZEhsd1pTSXNJbkpsYm1SbGNsQnliMmR5WlhOelFtRnlJaXdpWDNKbFppSXNJbDlsZUhSbGJtUnpNaUlzSW1Oc1lYTnpUbUZ0WlNJc0luTjBlV3hsSWl3aVgzTndiR2wwUW5OUWNtOXdjeUlzSW5Od2JHbDBRbk5RY205d2N5SXNJbUp6VUhKdmNITWlMQ0psYkdWdFpXNTBVSEp2Y0hNaUxDSmpiR0Z6YzJWeklpd2laMlYwUTJ4aGMzTlRaWFFpTENKd2NtVm1hWGdpTENKeWIyeGxJaXdpZDJsa2RHZ2lMQ0poY21saExYWmhiSFZsYm05M0lpd2lZWEpwWVMxMllXeDFaVzFwYmlJc0ltRnlhV0V0ZG1Gc2RXVnRZWGdpTENKeVpXNWtaWElpTENKZmRHaHBjeVJ3Y205d2N5SXNJbUp6UTJ4aGMzTWlMQ0ppYzFOMGVXeGxJaXdpZDNKaGNIQmxjbEJ5YjNCeklpd2liV0Z3SWl3aVkyeHZibVZGYkdWdFpXNTBJaXdpUTI5dGNHOXVaVzUwSWl3aVgyUmxabUYxYkhRaUxDSmljMU4wZVd4bGN5SXNJbE4wWVhSbElpd2liVzlrZFd4bElsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVVZCTEVsQlFVbEJMSGRDUVVFd1FrTXNVVUZCVVN4NVJFRkZiRU5ETEhWQ1FVRjVRa1FzVVVGQlVTeDNSRUZGY2tORkxGRkJRVkZETEZsQlFXRXNSVUZEY2tKRUxGRkJRVkZGTEdGQlFWVXNSVUZGYkVJc1NVRkJTVU1zVVVGQlZVb3NkVUpCUVhWQ1JDeFJRVUZSTEdsRVFVVjZRMDBzVlVGQldVd3NkVUpCUVhWQ1JDeFJRVUZSTERKRFFVVXpRMDhzSzBKQlFXbERUaXgxUWtGQmRVSkVMRkZCUVZFc1owVkJSV2hGVVN4blFrRkJhMEpRTEhWQ1FVRjFRa1FzVVVGQlVTeHBSRUZGYWtSVExGbEJRV05TTEhWQ1FVRjFRa1FzVVVGQlVTeGxRVVUzUTFVc1QwRkJVMWdzZDBKQlFYZENReXhSUVVGUkxGVkJSWHBEVnl4WFFVRmhWaXgxUWtGQmRVSkVMRkZCUVZFc1pVRkZOVU5aTEdkQ1FVRnJRbG9zVVVGQlVTd3dRa0ZGTVVKaExHRkJRV1ZpTEZGQlFWRXNkVUpCUlhaQ1l5eDNRa0ZCTUVKaUxIVkNRVUYxUWtRc1VVRkJVU3h0UTBGRmVrUmxMR2RDUVVGclFpeEpRVXQwUWl4VFFVRlRReXhuUWtGQlowSkRMRVZCUVU5RExFVkJRVlZETEVkQlEzaERMRWxCUVVsRExFVkJRVmRJTEVWQlFVMURMRWRCUlhKQ0xFbEJRVXRGTEVWQlEwZ3NUMEZCVHl4TFFVZFVMRWxCUVVsRExFVkJRVkVzUzBGeFFsb3NUMEZ1UWtGWUxFOUJRVTlPTEZGQlFWRnJRaXhUUVVGVFF5eFJRVUZSU0N4RlFVRlZMRk5CUVZWSkxFZEJRMnhFTEVsQlFVbElMRVZCUVVvc1EwRlhRU3hKUVVGSlNTeEZRVUZWWml4UFFVRlBUaXhSUVVGUmMwSXNZMEZCWTBNc1dVRkJZU3hOUVVWNFJDeEhRVUZKU0N4RlFVRk5TU3hQUVVGVFNDeEZRVUZSUnl4TFFVRXpRaXhEUVVOQkxFbEJRVWxETEVWQlFXdENia0lzVDBGQlQwNHNVVUZCVVRCQ0xHVkJRV1ZPTEVkQlFWTkJMRVZCUVUxSkxFdEJRVXRITEdGQlFXVlFMRVZCUVUxSkxFdEJRVXRKTEUxQlFWRlNMRVZCUVUxSkxFdEJRVTlLTEVWQlEzWklTQ3hGUVVGUkxFbEJRVWxaTEUxQlFVMHNaVUZCYVVKa0xFVkJRV2RDTEcxRVFVRXlSRlVzUlVGQmEwSXNVMEZITTBoU0xFVkJSMVFzU1VGQlNXRXNWVUZCV1N4RFFVTmtReXhKUVVGTGVFSXNWMEZCVjFBc1VVRkJVV2RETEU5QlEzaENReXhKUVVGTE1VSXNWMEZCVjFBc1VVRkJVV2RETEU5QlEzaENSU3hKUVVGTE0wSXNWMEZCVjFBc1VVRkJVV2RETEU5QlEzaENSeXhOUVVGUE5VSXNWMEZCVjFBc1VVRkJVVzlETEV0QlF6RkNReXhQUVVGUk9VSXNWMEZCVjFBc1VVRkJVWE5ETEV0QlF6TkNReXhSUVVGVGFFTXNWMEZCVjFBc1VVRkJVWE5ETEV0QlF6VkNSU3hQUVVGUmFrTXNWMEZCVjFBc1VVRkJVWE5ETEV0QlF6TkNkRUlzVTBGQlZVb3NaMEpCUzFZMlFpeFJRVUZUYkVNc1YwRkJWMUFzVVVGQlVYTkRMRTFCUlRGQ1NTeGhRVUZsTEVOQlEycENXQ3hKUVVGTExFVkJRMHhITEVsQlFVc3NTVUZEVEUwc1VVRkJVU3hGUVVOU1F5eFRRVUZUTEVWQlExUktMRkZCUVZFc1JVRkRVa1VzVTBGQlV5eEhRVWRZTEZOQlFWTkpMR05CUVdOV0xFVkJRVXRHTEVWQlFVdEhMRWRCUXk5Q0xFbEJRVWxWTEVkQlFXTllMRVZCUVUxR0xFbEJRVkZITEVWQlFVMUlMRWRCUVU4c1NVRkROME1zVDBGQlQyTXNTMEZCUzBNc1RVRkJUVVlzUlVGQllXcERMR2xDUVVGdFFrRXNaMEpCUjNCRUxFbEJRVWxaTEZsQlJVb3NVMEZCVlhkQ0xFZEJSMUlzVTBGQlUzaENMR05CUTFBc1QwRkJUM2RDTEVWQlFXbENReXhOUVVGTlF5eExRVUZOUXl4WlFVRmpSQ3hOUVVod1JDeEZRVUZKTjBNc1owSkJRV2RDU2l4VFFVRlRkVUlzV1VGQllYZENMRWRCVFRGRExFbEJRVWxKTEVWQlFWTTFRaXhaUVVGWk5rSXNWVUUyUlhwQ0xFOUJNMFZCUkN4RlFVRlBSU3hyUWtGQmIwSXNVMEZCVTBFc2EwSkJRV3RDUXl4SFFVTndSQ3hKUVVGSlF5eEZRVVZCZUVJc1JVRkJUWFZDTEVWQlFVdDJRaXhKUVVOWVJTeEZRVUZOY1VJc1JVRkJTM0pDTEVsQlExaERMRVZCUVUxdlFpeEZRVUZMY0VJc1NVRkRXRU1zUlVGQlVXMUNMRVZCUVV0dVFpeE5RVU5pUlN4RlFVRlRhVUlzUlVGQlMycENMRTlCUTJSRkxFVkJRVlZsTEVWQlFVdG1MRkZCUTJaRExFVkJRVk5qTEVWQlFVdGtMRTlCUTJSblFpeEZRVUZaUml4RlFVRkxSU3hWUVVOcVFrTXNSVUZCVVVnc1JVRkJTMGNzVFVGRFlqVkRMRWRCUVZFc1JVRkJTVllzSzBKQlFTdENTQ3hUUVVGVGMwUXNSVUZCVFN4RFFVRkRMRTFCUVU4c1RVRkJUeXhOUVVGUExGRkJRVk1zVTBGQlZTeFZRVUZYTEZOQlFWVXNXVUZCWVN4VlFVVnlTVWtzUjBGQlowSXNSVUZCU1d4RUxHZENRVUZuUW0xRUxHTkJRV001UXl4SFFVTnNSQ3RETEVWQlFWVkdMRVZCUVdNc1IwRkRlRUpITEVWQlFXVklMRVZCUVdNc1IwRkZOMEpKTEVkQlFWVXNSVUZCU1RWRUxGVkJRVlZHTEZOQlFWTXNTVUZCU1N4RlFVRkpVU3huUWtGQlowSjFSQ3hoUVVGaFNDeExRVUZYVEN4RlFVRlpMRU5CUXk5R1ppeFBRVUZSUVN4TFFVTkhMRVZCUVVsb1F5eG5Ra0ZCWjBKM1JDeFJRVUZSU2l4RlFVRlRMRmxCUVdOd1FpeEhRVUZWUkN4RlFVRlRaMElzU1VGRGJrWXNUMEZCVDJwRUxFOUJRVTlPTEZGQlFWRnpRaXhqUVVGakxFOUJRVThzUlVGQlNYQkNMRlZCUVZWR0xGTkJRVk1zUjBGQlNUWkVMRVZCUVdNc1EwRkRiRVpKTEV0QlFVMHNZMEZEVGxRc1YwRkJWeXhGUVVGSmJrUXNXVUZCV1V3c1UwRkJVM2RFTEVWQlFWZE5MRWRCUXk5RFRDeFBRVUZQTEVWQlFVbDJSQ3hWUVVGVlJpeFRRVUZUTEVOQlF6VkNhMFVzVFVGQlQzWkNMR05CUVdOV0xFVkJRVXRHTEVWQlFVdEhMRWRCUVU4c1MwRkRja04xUWl4SFFVTklWU3huUWtGQmFVSnNReXhGUVVOcVFtMURMR2RDUVVGcFFuSkRMRVZCUTJwQ2MwTXNaMEpCUVdsQ2JrTXNTVUZEWmtjc1JVRkJVeTlDTEU5QlFVOU9MRkZCUVZGelFpeGpRVUZqTEU5QlFWRXNRMEZEYUVSclF5eFZRVUZYTEZkQlExWnlRaXhIUVVGVFFTeEpRVWRrWjBJc1JVRkJUMjFDTEU5QlFWTXNVMEZCVTBFc1UwRkRka0lzU1VGQlNVTXNSVUZCWTNSQ0xFdEJRVXR3UXl4TlFVTnVRalJDTEVWQlFWVTRRaXhGUVVGWk9VSXNVVUZEZEVJMVFpeEhRVUZSTEVWQlFVbFdMQ3RDUVVFclFrZ3NVMEZCVTNWRkxFVkJRV0VzUTBGQlF5eFpRVVYwUlN4SFFVRkpPVUlzUlVGRFJpeFBRVUZQVVN4TFFVRkxTU3hyUWtGQmEwSjRReXhIUVVkb1F5eEpRVUZKYTBJc1JVRkJUV3hDTEVWQlFVMXJRaXhKUVVOYVJTeEZRVUZOY0VJc1JVRkJUVzlDTEVsQlExcERMRVZCUVUxeVFpeEZRVUZOY1VJc1NVRkRXa01zUlVGQlVYUkNMRVZCUVUxelFpeE5RVU5rUlN4RlFVRlRlRUlzUlVGQlRYZENMRTlCUTJaRkxFVkJRVlV4UWl4RlFVRk5NRUlzVVVGRGFFSkRMRVZCUVZNelFpeEZRVUZOTWtJc1QwRkRabWRETEVWQlFWVXpSQ3hGUVVGTk1rUXNVVUZEYUVKRExFVkJRVlUxUkN4RlFVRk5ORVFzVVVGRGFFSnFRaXhGUVVGWk0wTXNSVUZCVFRKRExGVkJRMnhDZUVNc1JVRkJWMGdzUlVGQlRVY3NVMEZEYWtJd1JDeEhRVUZsTEVWQlFVbDJSU3dyUWtGQkswSklMRk5CUVZOaExFVkJRVThzUTBGQlF5eE5RVUZQTEUxQlFVOHNUVUZCVHl4UlFVRlRMRk5CUVZVc1ZVRkJWeXhUUVVGVkxGVkJRVmNzVlVGQlZ5eFpRVUZoTEdGQlEzWkxMRTlCUVU5UUxFOUJRVTlPTEZGQlFWRnpRaXhqUVVGakxFOUJRVThzUlVGQlNYQkNMRlZCUVZWR0xGTkJRVk1zUjBGQlNUQkZMRVZCUVdNc1EwRkRiRVpzUWl4WFFVRlhMRVZCUVVsdVJDeFpRVUZaVEN4VFFVRlRkMFFzUlVGQlZ5eGpRVU0zUTNoRExFVkJRVmRPTEhkQ1FVRjNRbFlzVVVGQlVUSkZMRWxCUVVrelJDeEZRVUZWTEZOQlFWVkpMRWRCUTNKRkxFOUJRVThzUlVGQlNXUXNUMEZCVDNORkxHTkJRV040UkN4RlFVRlBMRU5CUTNKRGNVSXNVMEZCVXl4TlFVVlNVU3hMUVVGTFNTeHJRa0ZCYTBJc1EwRkRNVUowUWl4SlFVRkxRU3hGUVVOTVJTeEpRVUZMUVN4RlFVTk1ReXhKUVVGTFFTeEZRVU5NUXl4TlFVRlBRU3hGUVVOUVJTeFBRVUZSUVN4RlFVTlNSU3hSUVVGVFFTeEZRVU5VUXl4UFFVRlJRU3hGUVVOU1owTXNVVUZCVTBFc1JVRkRWRU1zVVVGQlUwRXNUVUZKVG14RUxGbEJjRVpVTEVOQmNVWkZha0lzVDBGQlQwNHNVVUZCVVRaRkxGZEJSV3BDZEVRc1dVRkJXVThzVlVGQldVRXNWVUZEZUVKUUxGbEJRVmx0UWl4aFFVRmxRU3hoUVVVelFpeEpRVUZKYjBNc1ZVRkJWeXhGUVVGSmRFVXNaMEpCUVdkQ1owVXNVMEZCVXl4blFrRkJaMElzUlVGQlNXaEZMR2RDUVVGblFuVkZMRmRCUVZVc1JVRkJTVGxGTEZGQlFWRkVMRk5CUVZOVExHRkJRV0YxUlN4UFFVRlJla1FzWTBGRmNFbDZRaXhSUVVGUlJTeFJRVUZWT0VVc1UwRkRiRUpITEU5QlFVOXVSaXhSUVVGVlFTeFJRVUZwUWlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDMWliMjkwYzNSeVlYQXZiR2xpTDFCeWIyZHlaWE56UW1GeUxtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9leHRlbmRzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSksX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9jbGFzc25hbWVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpLF9yZWFjdD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSksX3Byb3BUeXBlcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKSxfd2FybmluZz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ3YXJuaW5nXCIpKSxfYm9vdHN0cmFwVXRpbHM9cmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIikscHJvcFR5cGVzPXtpbmxpbmU6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsZGlzYWJsZWQ6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsdGl0bGU6X3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyx2YWxpZGF0aW9uU3RhdGU6X3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFtcInN1Y2Nlc3NcIixcIndhcm5pbmdcIixcImVycm9yXCIsbnVsbF0pLGlucHV0UmVmOl9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jfSxkZWZhdWx0UHJvcHM9e2lubGluZTohMSxkaXNhYmxlZDohMSx0aXRsZTpcIlwifSxSYWRpbz1mdW5jdGlvbihlKXtmdW5jdGlvbiBSYWRpbygpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4oMCxfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoUmFkaW8sZSksUmFkaW8ucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXt2YXIgZT10aGlzLnByb3BzLHQ9ZS5pbmxpbmUscj1lLmRpc2FibGVkLGE9ZS52YWxpZGF0aW9uU3RhdGUsaT1lLmlucHV0UmVmLHM9ZS5jbGFzc05hbWUsbz1lLnN0eWxlLGw9ZS50aXRsZSxuPWUuY2hpbGRyZW4scD0oMCxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoZSxbXCJpbmxpbmVcIixcImRpc2FibGVkXCIsXCJ2YWxpZGF0aW9uU3RhdGVcIixcImlucHV0UmVmXCIsXCJjbGFzc05hbWVcIixcInN0eWxlXCIsXCJ0aXRsZVwiLFwiY2hpbGRyZW5cIl0pLHU9KDAsX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykocCksZD11WzBdLGY9dVsxXSxfPV9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSxmLHtyZWY6aSx0eXBlOlwicmFkaW9cIixkaXNhYmxlZDpyfSkpO2lmKHQpe3ZhciBjLGI9KChjPXt9KVsoMCxfYm9vdHN0cmFwVXRpbHMucHJlZml4KShkLFwiaW5saW5lXCIpXT0hMCxjLmRpc2FibGVkPXIsYyk7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKDAsX3dhcm5pbmcuZGVmYXVsdCkoIWEsXCJgdmFsaWRhdGlvblN0YXRlYCBpcyBpZ25vcmVkIG9uIGA8UmFkaW8gaW5saW5lPmAuIFRvIGRpc3BsYXkgdmFsaWRhdGlvbiBzdGF0ZSBvbiBhbiBpbmxpbmUgcmFkaW8sIHNldCBgdmFsaWRhdGlvblN0YXRlYCBvbiBhIHBhcmVudCBgPEZvcm1Hcm91cD5gIG9yIG90aGVyIGVsZW1lbnQgaW5zdGVhZC5cIiksX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIse2NsYXNzTmFtZTooMCxfY2xhc3NuYW1lcy5kZWZhdWx0KShzLGIpLHN0eWxlOm8sdGl0bGU6bH0sXyxuKX12YXIgUj0oMCxfZXh0ZW5kczIuZGVmYXVsdCkoe30sKDAsX2Jvb3RzdHJhcFV0aWxzLmdldENsYXNzU2V0KShkKSx7ZGlzYWJsZWQ6cn0pO3JldHVybiBhJiYoUltcImhhcy1cIithXT0hMCksX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6KDAsX2NsYXNzbmFtZXMuZGVmYXVsdCkocyxSKSxzdHlsZTpvfSxfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIix7dGl0bGU6bH0sXyxuKSl9LFJhZGlvfShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1JhZGlvLnByb3BUeXBlcz1wcm9wVHlwZXMsUmFkaW8uZGVmYXVsdFByb3BzPWRlZmF1bHRQcm9wczt2YXIgX2RlZmF1bHQ9KDAsX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKFwicmFkaW9cIixSYWRpbyk7ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSmhaR2x2TG1weklsMHNJbTVoYldWeklqcGJJbDlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRaUxDSnlaWEYxYVhKbElpd2laWGh3YjNKMGN5SXNJbDlmWlhOTmIyUjFiR1VpTENKa1pXWmhkV3gwSWl3aVgyVjRkR1Z1WkhNeUlpd2lYMjlpYW1WamRGZHBkR2h2ZFhSUWNtOXdaWEowYVdWelRHOXZjMlV5SWl3aVgybHVhR1Z5YVhSelRHOXZjMlV5SWl3aVgyTnNZWE56Ym1GdFpYTWlMQ0pmY21WaFkzUWlMQ0pmY0hKdmNGUjVjR1Z6SWl3aVgzZGhjbTVwYm1jaUxDSmZZbTl2ZEhOMGNtRndWWFJwYkhNaUxDSndjbTl3Vkhsd1pYTWlMQ0pwYm14cGJtVWlMQ0ppYjI5c0lpd2laR2x6WVdKc1pXUWlMQ0owYVhSc1pTSXNJbk4wY21sdVp5SXNJblpoYkdsa1lYUnBiMjVUZEdGMFpTSXNJbTl1WlU5bUlpd2lhVzV3ZFhSU1pXWWlMQ0ptZFc1aklpd2laR1ZtWVhWc2RGQnliM0J6SWl3aVVtRmthVzhpTENKZlVtVmhZM1FrUTI5dGNHOXVaVzUwSWl3aVlYQndiSGtpTENKMGFHbHpJaXdpWVhKbmRXMWxiblJ6SWl3aWNISnZkRzkwZVhCbElpd2ljbVZ1WkdWeUlpd2lYM1JvYVhNa2NISnZjSE1pTENKd2NtOXdjeUlzSW1Oc1lYTnpUbUZ0WlNJc0luTjBlV3hsSWl3aVkyaHBiR1J5Wlc0aUxDSmZjM0JzYVhSQ2MxQnliM0J6SWl3aWMzQnNhWFJDYzFCeWIzQnpJaXdpWW5OUWNtOXdjeUlzSW1Wc1pXMWxiblJRY205d2N5SXNJbWx1Y0hWMElpd2lZM0psWVhSbFJXeGxiV1Z1ZENJc0luSmxaaUlzSW5SNWNHVWlMQ0pmWTJ4aGMzTmxjeklpTENKZlkyeGhjM05sY3lJc0luQnlaV1pwZUNJc0luQnliMk5sYzNNaUxDSmxibllpTENKT1QwUkZYMFZPVmlJc0ltTnNZWE56WlhNaUxDSm5aWFJEYkdGemMxTmxkQ0lzSWtOdmJYQnZibVZ1ZENJc0lsOWtaV1poZFd4MElpd2lZbk5EYkdGemN5SXNJbTF2WkhWc1pTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZGUVN4SlFVRkpRU3gxUWtGQmVVSkRMRkZCUVZFc2QwUkJSWEpEUXl4UlFVRlJReXhaUVVGaExFVkJRM0pDUkN4UlFVRlJSU3hoUVVGVkxFVkJSV3hDTEVsQlFVbERMRlZCUVZsTUxIVkNRVUYxUWtNc1VVRkJVU3d5UTBGRk0wTkxMQ3RDUVVGcFEwNHNkVUpCUVhWQ1F5eFJRVUZSTEdkRlFVVm9SVTBzWjBKQlFXdENVQ3gxUWtGQmRVSkRMRkZCUVZFc2FVUkJSV3BFVHl4WlFVRmpVaXgxUWtGQmRVSkRMRkZCUVZFc1pVRkZOME5STEU5QlFWTlVMSFZDUVVGMVFrTXNVVUZCVVN4VlFVVjRRMU1zVjBGQllWWXNkVUpCUVhWQ1F5eFJRVUZSTEdWQlJUVkRWU3hUUVVGWFdDeDFRa0ZCZFVKRExGRkJRVkVzV1VGRk1VTlhMR2RDUVVGclFsZ3NVVUZCVVN3d1FrRkhNVUpaTEZWQlFWa3NRMEZEWkVNc1QwRkJVVW9zVjBGQlYwNHNVVUZCVVZjc1MwRkRNMEpETEZOQlFWVk9MRmRCUVZkT0xGRkJRVkZYTEV0QlF6ZENSU3hOUVVGUFVDeFhRVUZYVGl4UlFVRlJZeXhQUVVzeFFrTXNaMEpCUVdsQ1ZDeFhRVUZYVGl4UlFVRlJaMElzVFVGQlRTeERRVUZETEZWQlFWY3NWVUZCVnl4UlFVRlRMRTlCVXpGRlF5eFRRVUZWV0N4WFFVRlhUaXhSUVVGUmEwSXNUVUZGTTBKRExHRkJRV1VzUTBGRGFrSlVMRkZCUVZFc1JVRkRVa1VzVlVGQlZTeEZRVU5XUXl4TlFVRlBMRWxCUjB4UExFMUJSVW9zVTBGQlZVTXNSMEZIVWl4VFFVRlRSQ3hSUVVOUUxFOUJRVTlETEVWQlFXbENReXhOUVVGTlF5eExRVUZOUXl4WlFVRmpSQ3hMUVRCRWNFUXNUMEUzUkVFc1JVRkJTWEJDTEdkQ1FVRm5Ra2dzVTBGQlUyOUNMRTFCUVU5RExFZEJUWFpDUkN4TlFVRk5TeXhWUVVWYVF5eFBRVUZUTEZOQlFWTkJMRk5CUTNaQ0xFbEJRVWxETEVWQlFXTktMRXRCUVV0TExFMUJRMjVDYkVJc1JVRkJVMmxDTEVWQlFWbHFRaXhQUVVOeVFrVXNSVUZCVjJVc1JVRkJXV1lzVTBGRGRrSkhMRVZCUVd0Q1dTeEZRVUZaV2l4blFrRkRPVUpGTEVWQlFWZFZMRVZCUVZsV0xGTkJRM1pDV1N4RlFVRlpSaXhGUVVGWlJTeFZRVU40UWtNc1JVRkJVVWdzUlVGQldVY3NUVUZEY0VKcVFpeEZRVUZSWXl4RlFVRlpaQ3hOUVVOd1FtdENMRVZCUVZkS0xFVkJRVmxKTEZOQlEzWkNTQ3hIUVVGUkxFVkJRVWt4UWl3clFrRkJLMEpHTEZOQlFWTXlRaXhGUVVGaExFTkJRVU1zVTBGQlZTeFhRVUZaTEd0Q1FVRnRRaXhYUVVGWkxGbEJRV0VzVVVGQlV5eFJRVUZUTEdGQlJYUktTeXhIUVVGblFpeEZRVUZKZUVJc1owSkJRV2RDZVVJc1kwRkJZMHdzUjBGRGJFUk5MRVZCUVZWR0xFVkJRV01zUjBGRGVFSkhMRVZCUVdWSUxFVkJRV01zUjBGRk4wSkpMRVZCUVZFdlFpeFBRVUZQVEN4UlFVRlJjVU1zWTBGQll5eFRRVUZUTEVWQlFVbHdReXhWUVVGVlJDeFRRVUZUTEVkQlFVbHRReXhGUVVGakxFTkJRM3BHUnl4SlFVRkxja0lzUlVGRFRITkNMRXRCUVUwc1VVRkRUak5DTEZOQlFWVkJMRXRCUjFvc1IwRkJTVVlzUlVGQlVTeERRVU5XTEVsQlFVazRRaXhGUVVWQlF5eEpRVUZaUkN4RlFVRlpMRXRCUVdNc1JVRkJTV2hETEdkQ1FVRm5RbXRETEZGQlFWRlNMRVZCUVZNc1dVRkJZU3hGUVVGTlRTeEZRVUZWTlVJc1UwRkJWMEVzUlVGQlZUUkNMRWRCUzJwSkxFMUJSSGxDTEdWQlFYcENSeXhSUVVGUlF5eEpRVUZKUXl4WFFVRTBRaXhGUVVGSmRFTXNVMEZCVTFBc1ZVRkJWV1VzUlVGQmFVSXNLMHRCUTNwRlZpeFBRVUZQVEN4UlFVRlJjVU1zWTBGQll5eFJRVUZUTEVOQlF6TkRVaXhYUVVGWExFVkJRVWw2UWl4WlFVRlpTaXhUUVVGVE5rSXNSVUZCVjFrc1IwRkRMME5ZTEUxQlFVOUJMRVZCUTFCcVFpeE5RVUZQUVN4SFFVTk9kVUlzUlVGQlQwd3NSMEZIV2l4SlFVRkpaU3hIUVVGVkxFVkJRVWszUXl4VlFVRlZSQ3hUUVVGVExFbEJRVWtzUlVGQlNWRXNaMEpCUVdkQ2RVTXNZVUZCWVdJc1IwRkJWU3hEUVVOc1JuUkNMRk5CUVZWQkxFbEJUMW9zVDBGS1NVY3NTVUZEUml0Q0xFVkJRVkVzVDBGQlV5OUNMRWxCUVcxQ0xFZEJSeTlDVml4UFFVRlBUQ3hSUVVGUmNVTXNZMEZCWXl4TlFVRlBMRU5CUTNwRFVpeFhRVUZYTEVWQlFVbDZRaXhaUVVGWlNpeFRRVUZUTmtJc1JVRkJWMmxDTEVkQlF5OURhRUlzVFVGQlQwRXNSMEZEVG5wQ0xFOUJRVTlNTEZGQlFWRnhReXhqUVVGakxGRkJRVk1zUTBGRGRrTjRRaXhOUVVGUFFTeEhRVU5PZFVJc1JVRkJUMHdzUzBGSFRGZ3NUVUU1UkZRc1EwRXJSRVZtTEU5QlFVOU1MRkZCUVZGblJDeFhRVVZxUWpWQ0xFMUJRVTFZTEZWQlFWbEJMRlZCUTJ4Q1Z5eE5RVUZOUkN4aFFVRmxRU3hoUVVWeVFpeEpRVUZKT0VJc1ZVRkJWeXhGUVVGSmVrTXNaMEpCUVdkQ01FTXNVMEZCVXl4UlFVRlRPVUlzVDBGRmNrUjBRaXhSUVVGUlJTeFJRVUZWYVVRc1UwRkRiRUpGTEU5QlFVOXlSQ3hSUVVGVlFTeFJRVUZwUWlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDMWliMjkwYzNSeVlYQXZiR2xpTDFKaFpHbHZMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIiksX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PXZvaWQgMDt2YXIgX2V4dGVuZHMzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKSxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpLF9pbmhlcml0c0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSksX2NsYXNzbmFtZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSksX3Byb3BUeXBlcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKSxfd2FybmluZz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ3YXJuaW5nXCIpKSxfYm9vdHN0cmFwVXRpbHM9cmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIikscHJvcFR5cGVzPXtjaGlsZHJlbjpfcHJvcFR5cGVzLmRlZmF1bHQuZWxlbWVudC5pc1JlcXVpcmVkLGExNmJ5OTpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxhNGJ5MzpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbH0sZGVmYXVsdFByb3BzPXthMTZieTk6ITEsYTRieTM6ITF9LFJlc3BvbnNpdmVFbWJlZD1mdW5jdGlvbihlKXtmdW5jdGlvbiBSZXNwb25zaXZlRW1iZWQoKXtyZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9cmV0dXJuKDAsX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKFJlc3BvbnNpdmVFbWJlZCxlKSxSZXNwb25zaXZlRW1iZWQucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXt2YXIgZSxyPXRoaXMucHJvcHMsdD1yLmExNmJ5OSxzPXIuYTRieTMsbz1yLmNsYXNzTmFtZSxpPXIuY2hpbGRyZW4sYT0oMCxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkocixbXCJhMTZieTlcIixcImE0YnkzXCIsXCJjbGFzc05hbWVcIixcImNoaWxkcmVuXCJdKSxwPSgwLF9ib290c3RyYXBVdGlscy5zcGxpdEJzUHJvcHMpKGEpLGw9cFswXSx1PXBbMV07XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKDAsX3dhcm5pbmcuZGVmYXVsdCkodHx8cyxcIkVpdGhlciBgYTE2Ynk5YCBvciBgYTRieTNgIG11c3QgYmUgc2V0LlwiKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoMCxfd2FybmluZy5kZWZhdWx0KSghKHQmJnMpLFwiT25seSBvbmUgb2YgYGExNmJ5OWAgb3IgYGE0YnkzYCBjYW4gYmUgc2V0LlwiKTt2YXIgbj0oMCxfZXh0ZW5kczMuZGVmYXVsdCkoe30sKDAsX2Jvb3RzdHJhcFV0aWxzLmdldENsYXNzU2V0KShsKSwoKGU9e30pWygwLF9ib290c3RyYXBVdGlscy5wcmVmaXgpKGwsXCIxNmJ5OVwiKV09dCxlWygwLF9ib290c3RyYXBVdGlscy5wcmVmaXgpKGwsXCI0YnkzXCIpXT1zLGUpKTtyZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6KDAsX2NsYXNzbmFtZXMuZGVmYXVsdCkobil9LCgwLF9yZWFjdC5jbG9uZUVsZW1lbnQpKGksKDAsX2V4dGVuZHMzLmRlZmF1bHQpKHt9LHUse2NsYXNzTmFtZTooMCxfY2xhc3NuYW1lcy5kZWZhdWx0KShvLCgwLF9ib290c3RyYXBVdGlscy5wcmVmaXgpKGwsXCJpdGVtXCIpKX0pKSl9LFJlc3BvbnNpdmVFbWJlZH0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtSZXNwb25zaXZlRW1iZWQucHJvcFR5cGVzPXByb3BUeXBlcyxSZXNwb25zaXZlRW1iZWQuZGVmYXVsdFByb3BzPWRlZmF1bHRQcm9wczt2YXIgX2RlZmF1bHQ9KDAsX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKFwiZW1iZWQtcmVzcG9uc2l2ZVwiLFJlc3BvbnNpdmVFbWJlZCk7ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSmxjM0J2Ym5OcGRtVkZiV0psWkM1cWN5SmRMQ0p1WVcxbGN5STZXeUpmYVc1MFpYSnZjRkpsY1hWcGNtVlhhV3hrWTJGeVpDSXNJbkpsY1hWcGNtVWlMQ0pmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MElpd2laWGh3YjNKMGN5SXNJbDlmWlhOTmIyUjFiR1VpTENKa1pXWmhkV3gwSWl3aVgyVjRkR1Z1WkhNeklpd2lYMjlpYW1WamRGZHBkR2h2ZFhSUWNtOXdaWEowYVdWelRHOXZjMlV5SWl3aVgybHVhR1Z5YVhSelRHOXZjMlV5SWl3aVgyTnNZWE56Ym1GdFpYTWlMQ0pmY21WaFkzUWlMQ0pmY0hKdmNGUjVjR1Z6SWl3aVgzZGhjbTVwYm1jaUxDSmZZbTl2ZEhOMGNtRndWWFJwYkhNaUxDSndjbTl3Vkhsd1pYTWlMQ0pqYUdsc1pISmxiaUlzSW1Wc1pXMWxiblFpTENKcGMxSmxjWFZwY21Wa0lpd2lZVEUyWW5rNUlpd2lZbTl2YkNJc0ltRTBZbmt6SWl3aVpHVm1ZWFZzZEZCeWIzQnpJaXdpVW1WemNHOXVjMmwyWlVWdFltVmtJaXdpWDFKbFlXTjBKRU52YlhCdmJtVnVkQ0lzSW1Gd2NHeDVJaXdpZEdocGN5SXNJbUZ5WjNWdFpXNTBjeUlzSW5CeWIzUnZkSGx3WlNJc0luSmxibVJsY2lJc0lsOWxlSFJsYm1Sek1pSXNJbDkwYUdsekpIQnliM0J6SWl3aWNISnZjSE1pTENKamJHRnpjMDVoYldVaUxDSmZjM0JzYVhSQ2MxQnliM0J6SWl3aWMzQnNhWFJDYzFCeWIzQnpJaXdpWW5OUWNtOXdjeUlzSW1Wc1pXMWxiblJRY205d2N5SXNJbkJ5YjJObGMzTWlMQ0psYm5ZaUxDSk9UMFJGWDBWT1ZpSXNJbU5zWVhOelpYTWlMQ0puWlhSRGJHRnpjMU5sZENJc0luQnlaV1pwZUNJc0ltTnlaV0YwWlVWc1pXMWxiblFpTENKamJHOXVaVVZzWlcxbGJuUWlMQ0pEYjIxd2IyNWxiblFpTENKZlpHVm1ZWFZzZENJc0ltSnpRMnhoYzNNaUxDSnRiMlIxYkdVaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJSVUVzU1VGQlNVRXNkMEpCUVRCQ1F5eFJRVUZSTEhsRVFVVnNRME1zZFVKQlFYbENSQ3hSUVVGUkxIZEVRVVZ5UTBVc1VVRkJVVU1zV1VGQllTeEZRVU55UWtRc1VVRkJVVVVzWVVGQlZTeEZRVVZzUWl4SlFVRkpReXhWUVVGWlNpeDFRa0ZCZFVKRUxGRkJRVkVzTWtOQlJUTkRUU3dyUWtGQmFVTk1MSFZDUVVGMVFrUXNVVUZCVVN4blJVRkZhRVZQTEdkQ1FVRnJRazRzZFVKQlFYVkNSQ3hSUVVGUkxHbEVRVVZxUkZFc1dVRkJZMUFzZFVKQlFYVkNSQ3hSUVVGUkxHVkJSVGREVXl4UFFVRlRWaXgzUWtGQmQwSkRMRkZCUVZFc1ZVRkZla05WTEZkQlFXRlVMSFZDUVVGMVFrUXNVVUZCVVN4bFFVVTFRMWNzVTBGQlYxWXNkVUpCUVhWQ1JDeFJRVUZSTEZsQlJURkRXU3huUWtGQmEwSmFMRkZCUVZFc01FSkJSekZDWVN4VlFVRlpMRU5CU1dSRExGTkJRVlZLTEZkQlFWZE9MRkZCUVZGWExGRkJRVkZETEZkQlMzSkRReXhQUVVGUlVDeFhRVUZYVGl4UlFVRlJZeXhMUVVzelFrTXNUVUZCVDFRc1YwRkJWMDRzVVVGQlVXTXNUVUZGZUVKRkxHRkJRV1VzUTBGRGFrSklMRkZCUVZFc1JVRkRVa1VzVDBGQlR5eEhRVWRNUlN4blFrRkZTaXhUUVVGVlF5eEhRVWRTTEZOQlFWTkVMR3RDUVVOUUxFOUJRVTlETEVWQlFXbENReXhOUVVGTlF5eExRVUZOUXl4WlFVRmpSQ3hMUVRaQ2NFUXNUMEZvUTBFc1JVRkJTV3BDTEdkQ1FVRm5Ra2dzVTBGQlUybENMR2RDUVVGcFFrTXNSMEZOYWtORUxHZENRVUZuUWtzc1ZVRkZkRUpETEU5QlFWTXNVMEZCVTBFc1UwRkRka0lzU1VGQlNVTXNSVUZGUVVNc1JVRkJZMHdzUzBGQlMwMHNUVUZEYmtKaUxFVkJRVk5aTEVWQlFWbGFMRTlCUTNKQ1JTeEZRVUZSVlN4RlFVRlpWaXhOUVVOd1Fsa3NSVUZCV1VZc1JVRkJXVVVzVlVGRGVFSnFRaXhGUVVGWFpTeEZRVUZaWml4VFFVTjJRbWRDTEVkQlFWRXNSVUZCU1hoQ0xDdENRVUVyUWtZc1UwRkJVM2xDTEVWQlFXRXNRMEZCUXl4VFFVRlZMRkZCUVZNc1dVRkJZU3hoUVVWc1IwY3NSMEZCWjBJc1JVRkJTWEJDTEdkQ1FVRm5RbkZDTEdOQlFXTklMRWRCUTJ4RVNTeEZRVUZWUml4RlFVRmpMRWRCUTNoQ1J5eEZRVUZsU0N4RlFVRmpMRWRCUlZJc1pVRkJla0pKTEZGQlFWRkRMRWxCUVVsRExGZEJRVFJDTEVWQlFVa3pRaXhUUVVGVFVDeFRRVUZUWVN4SFFVRlZSU3hGUVVGUExESkRRVU4wUkN4bFFVRjZRbWxDTEZGQlFWRkRMRWxCUVVsRExGZEJRVFJDTEVWQlFVa3pRaXhUUVVGVFVDeFhRVUZYWVN4SFFVRlZSU3hIUVVGUkxDdERRVU5zUml4SlFVRkpiMElzUjBGQlZTeEZRVUZKYkVNc1ZVRkJWVVFzVTBGQlV5eEpRVUZKTEVWQlFVbFJMR2RDUVVGblFqUkNMR0ZCUVdGT0xFdEJRVmRPTEVWQlFWa3NTMEZCWXl4RlFVRkphRUlzWjBKQlFXZENOa0lzVVVGQlVWQXNSVUZCVXl4VlFVRlpha0lzUlVGQlVWY3NSMEZCVlN4RlFVRkphRUlzWjBKQlFXZENOa0lzVVVGQlVWQXNSVUZCVXl4VFFVRlhaaXhGUVVGUFV5eEpRVU42VHl4UFFVRlBia0lzVDBGQlQwd3NVVUZCVVhORExHTkJRV01zVFVGQlR5eERRVU42UTFnc1YwRkJWeXhGUVVGSmRrSXNXVUZCV1Vvc1UwRkJVMjFETEV0QlEyNURMRVZCUVVrNVFpeFBRVUZQYTBNc1kwRkJZemRDTEVkQlFWVXNSVUZCU1ZRc1ZVRkJWVVFzVTBGQlV5eEhRVUZKSzBJc1JVRkJZeXhEUVVNM1JVb3NWMEZCVnl4RlFVRkpka0lzV1VGQldVb3NVMEZCVXpKQ0xFZEJRVmNzUlVGQlNXNUNMR2RDUVVGblFqWkNMRkZCUVZGUUxFVkJRVk1zWTBGSmFrWmlMR2RDUVdwRFZDeERRV3REUlZvc1QwRkJUMHdzVVVGQlVYZERMRmRCUldwQ2RrSXNaMEpCUVdkQ1VpeFZRVUZaUVN4VlFVTTFRbEVzWjBKQlFXZENSQ3hoUVVGbFFTeGhRVVV2UWl4SlFVRkplVUlzVlVGQlZ5eEZRVUZKYWtNc1owSkJRV2RDYTBNc1UwRkJVeXh0UWtGQmIwSjZRaXhwUWtGRmFFVnVRaXhSUVVGUlJTeFJRVUZWZVVNc1UwRkRiRUpGTEU5QlFVODNReXhSUVVGVlFTeFJRVUZwUWlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDMWliMjkwYzNSeVlYQXZiR2xpTDFKbGMzQnZibk5wZG1WRmJXSmxaQzVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0PXJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO2V4cG9ydHMuX19lc01vZHVsZT0hMCxleHBvcnRzLmRlZmF1bHQ9dm9pZCAwO3ZhciBfZXh0ZW5kczI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSksX2luaGVyaXRzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKSxfY2xhc3NuYW1lcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKSxfcmVhY3Q9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpLF9lbGVtZW50VHlwZT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzLWV4dHJhL2xpYi9lbGVtZW50VHlwZVwiKSksX2Jvb3RzdHJhcFV0aWxzPXJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpLHByb3BUeXBlcz17Y29tcG9uZW50Q2xhc3M6X2VsZW1lbnRUeXBlLmRlZmF1bHR9LGRlZmF1bHRQcm9wcz17Y29tcG9uZW50Q2xhc3M6XCJkaXZcIn0sUm93PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIFJvdygpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4oMCxfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoUm93LGUpLFJvdy5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uIHJlbmRlcigpe3ZhciBlPXRoaXMucHJvcHMsdD1lLmNvbXBvbmVudENsYXNzLHI9ZS5jbGFzc05hbWUsbz0oMCxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoZSxbXCJjb21wb25lbnRDbGFzc1wiLFwiY2xhc3NOYW1lXCJdKSxzPSgwLF9ib290c3RyYXBVdGlscy5zcGxpdEJzUHJvcHMpKG8pLGE9c1swXSxsPXNbMV0saT0oMCxfYm9vdHN0cmFwVXRpbHMuZ2V0Q2xhc3NTZXQpKGEpO3JldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KHQsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LGwse2NsYXNzTmFtZTooMCxfY2xhc3NuYW1lcy5kZWZhdWx0KShyLGkpfSkpfSxSb3d9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7Um93LnByb3BUeXBlcz1wcm9wVHlwZXMsUm93LmRlZmF1bHRQcm9wcz1kZWZhdWx0UHJvcHM7dmFyIF9kZWZhdWx0PSgwLF9ib290c3RyYXBVdGlscy5ic0NsYXNzKShcInJvd1wiLFJvdyk7ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSnZkeTVxY3lKZExDSnVZVzFsY3lJNld5SmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwSWl3aWNtVnhkV2x5WlNJc0ltVjRjRzl5ZEhNaUxDSmZYMlZ6VFc5a2RXeGxJaXdpWkdWbVlYVnNkQ0lzSWw5bGVIUmxibVJ6TWlJc0lsOXZZbXBsWTNSWGFYUm9iM1YwVUhKdmNHVnlkR2xsYzB4dmIzTmxNaUlzSWw5cGJtaGxjbWwwYzB4dmIzTmxNaUlzSWw5amJHRnpjMjVoYldWeklpd2lYM0psWVdOMElpd2lYMlZzWlcxbGJuUlVlWEJsSWl3aVgySnZiM1J6ZEhKaGNGVjBhV3h6SWl3aWNISnZjRlI1Y0dWeklpd2lZMjl0Y0c5dVpXNTBRMnhoYzNNaUxDSmtaV1poZFd4MFVISnZjSE1pTENKU2IzY2lMQ0pmVW1WaFkzUWtRMjl0Y0c5dVpXNTBJaXdpWVhCd2JIa2lMQ0owYUdseklpd2lZWEpuZFcxbGJuUnpJaXdpY0hKdmRHOTBlWEJsSWl3aWNtVnVaR1Z5SWl3aVgzUm9hWE1rY0hKdmNITWlMQ0p3Y205d2N5SXNJa052YlhCdmJtVnVkQ0lzSW1Oc1lYTnpUbUZ0WlNJc0lsOXpjR3hwZEVKelVISnZjSE1pTENKemNHeHBkRUp6VUhKdmNITWlMQ0ppYzFCeWIzQnpJaXdpWld4bGJXVnVkRkJ5YjNCeklpd2lZMnhoYzNObGN5SXNJbWRsZEVOc1lYTnpVMlYwSWl3aVkzSmxZWFJsUld4bGJXVnVkQ0lzSWw5a1pXWmhkV3gwSWl3aVluTkRiR0Z6Y3lJc0ltMXZaSFZzWlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkZRU3hKUVVGSlFTeDFRa0ZCZVVKRExGRkJRVkVzZDBSQlJYSkRReXhSUVVGUlF5eFpRVUZoTEVWQlEzSkNSQ3hSUVVGUlJTeGhRVUZWTEVWQlJXeENMRWxCUVVsRExGVkJRVmxNTEhWQ1FVRjFRa01zVVVGQlVTd3lRMEZGTTBOTExDdENRVUZwUTA0c2RVSkJRWFZDUXl4UlFVRlJMR2RGUVVWb1JVMHNaMEpCUVd0Q1VDeDFRa0ZCZFVKRExGRkJRVkVzYVVSQlJXcEVUeXhaUVVGalVpeDFRa0ZCZFVKRExGRkJRVkVzWlVGRk4wTlJMRTlCUVZOVUxIVkNRVUYxUWtNc1VVRkJVU3hWUVVWNFExTXNZVUZCWlZZc2RVSkJRWFZDUXl4UlFVRlJMSEZEUVVVNVExVXNaMEpCUVd0Q1ZpeFJRVUZSTERCQ1FVVXhRbGNzVlVGQldTeERRVU5rUXl4bFFVRm5Ra2dzWVVGQllVNHNVMEZGTTBKVkxHRkJRV1VzUTBGRGFrSkVMR1ZCUVdkQ0xFOUJSMlJGTEVsQlJVb3NVMEZCVlVNc1IwRkhVaXhUUVVGVFJDeE5RVU5RTEU5QlFVOURMRVZCUVdsQ1F5eE5RVUZOUXl4TFFVRk5ReXhaUVVGalJDeExRWEZDY0VRc1QwRjRRa0VzUlVGQlNWZ3NaMEpCUVdkQ1NDeFRRVUZUVnl4SlFVRkxReXhIUVUxeVFrUXNTVUZCU1Vzc1ZVRkZWa01zVDBGQlV5eFRRVUZUUVN4VFFVTjJRaXhKUVVGSlF5eEZRVUZqU2l4TFFVRkxTeXhOUVVOdVFrTXNSVUZCV1VZc1JVRkJXVlFzWlVGRGVFSlpMRVZCUVZsSUxFVkJRVmxITEZWQlEzaENSaXhIUVVGUkxFVkJRVWxxUWl3clFrRkJLMEpHTEZOQlFWTnJRaXhGUVVGaExFTkJRVU1zYVVKQlFXdENMR05CUlhCR1NTeEhRVUZuUWl4RlFVRkpaaXhuUWtGQlowSm5RaXhqUVVGalNpeEhRVU5zUkVzc1JVRkJWVVlzUlVGQll5eEhRVU40UWtjc1JVRkJaVWdzUlVGQll5eEhRVVUzUWtrc1IwRkJWU3hGUVVGSmJrSXNaMEpCUVdkQ2IwSXNZVUZCWVVnc1IwRkRMME1zVDBGQlQyNUNMRTlCUVU5TUxGRkJRVkUwUWl4alFVRmpVaXhIUVVGWExFVkJRVWx1UWl4VlFVRlZSQ3hUUVVGVExFZEJRVWw1UWl4RlFVRmpMRU5CUTNSR1NpeFhRVUZYTEVWQlFVbHFRaXhaUVVGWlNpeFRRVUZUY1VJc1JVRkJWMHNzVDBGSk5VTm1MRWxCZWtKVUxFTkJNRUpGVGl4UFFVRlBUQ3hSUVVGUmIwSXNWMEZGYWtKVUxFbEJRVWxJTEZWQlFWbEJMRlZCUTJoQ1J5eEpRVUZKUkN4aFFVRmxRU3hoUVVWdVFpeEpRVUZKYlVJc1ZVRkJWeXhGUVVGSmRFSXNaMEpCUVdkQ2RVSXNVMEZCVXl4TlFVRlBia0lzUzBGRmJrUmlMRkZCUVZGRkxGRkJRVlUyUWl4VFFVTnNRa1VzVDBGQlQycERMRkZCUVZWQkxGRkJRV2xDSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdOMExXSnZiM1J6ZEhKaGNDOXNhV0l2VW05M0xtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9leHRlbmRzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSksX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpLF9yZWFjdD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSksX3Byb3BUeXBlcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKSxfZWxlbWVudFR5cGU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlcy1leHRyYS9saWIvZWxlbWVudFR5cGVcIikpLF9jcmVhdGVDaGFpbmVkRnVuY3Rpb249X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb25cIikpLHByb3BUeXBlcz17aHJlZjpfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLG9uQ2xpY2s6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsb25LZXlEb3duOl9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLGRpc2FibGVkOl9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLHJvbGU6X3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyx0YWJJbmRleDpfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmddKSxjb21wb25lbnRDbGFzczpfZWxlbWVudFR5cGUuZGVmYXVsdH0sZGVmYXVsdFByb3BzPXtjb21wb25lbnRDbGFzczpcImFcIn07ZnVuY3Rpb24gaXNUcml2aWFsSHJlZihlKXtyZXR1cm4hZXx8XCIjXCI9PT1lLnRyaW0oKX12YXIgU2FmZUFuY2hvcj1mdW5jdGlvbihlKXtmdW5jdGlvbiBTYWZlQW5jaG9yKHIsdCl7dmFyIGk7cmV0dXJuKGk9ZS5jYWxsKHRoaXMscix0KXx8dGhpcykuaGFuZGxlQ2xpY2s9aS5oYW5kbGVDbGljay5iaW5kKCgwLF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKGkpKSksaS5oYW5kbGVLZXlEb3duPWkuaGFuZGxlS2V5RG93bi5iaW5kKCgwLF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKGkpKSksaX0oMCxfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoU2FmZUFuY2hvcixlKTt2YXIgcj1TYWZlQW5jaG9yLnByb3RvdHlwZTtyZXR1cm4gci5oYW5kbGVDbGljaz1mdW5jdGlvbiBoYW5kbGVDbGljayhlKXt2YXIgcj10aGlzLnByb3BzLHQ9ci5kaXNhYmxlZCxpPXIuaHJlZixuPXIub25DbGljazsodHx8aXNUcml2aWFsSHJlZihpKSkmJmUucHJldmVudERlZmF1bHQoKSx0P2Uuc3RvcFByb3BhZ2F0aW9uKCk6biYmbihlKX0sci5oYW5kbGVLZXlEb3duPWZ1bmN0aW9uIGhhbmRsZUtleURvd24oZSl7XCIgXCI9PT1lLmtleSYmKGUucHJldmVudERlZmF1bHQoKSx0aGlzLmhhbmRsZUNsaWNrKGUpKX0sci5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIGU9dGhpcy5wcm9wcyxyPWUuY29tcG9uZW50Q2xhc3MsdD1lLmRpc2FibGVkLGk9ZS5vbktleURvd24sbj0oMCxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoZSxbXCJjb21wb25lbnRDbGFzc1wiLFwiZGlzYWJsZWRcIixcIm9uS2V5RG93blwiXSk7cmV0dXJuIGlzVHJpdmlhbEhyZWYobi5ocmVmKSYmKG4ucm9sZT1uLnJvbGV8fFwiYnV0dG9uXCIsbi5ocmVmPW4uaHJlZnx8XCIjXCIpLHQmJihuLnRhYkluZGV4PS0xLG4uc3R5bGU9KDAsX2V4dGVuZHMyLmRlZmF1bHQpKHtwb2ludGVyRXZlbnRzOlwibm9uZVwifSxuLnN0eWxlKSksX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChyLCgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSxuLHtvbkNsaWNrOnRoaXMuaGFuZGxlQ2xpY2ssb25LZXlEb3duOigwLF9jcmVhdGVDaGFpbmVkRnVuY3Rpb24uZGVmYXVsdCkodGhpcy5oYW5kbGVLZXlEb3duLGkpfSkpfSxTYWZlQW5jaG9yfShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1NhZmVBbmNob3IucHJvcFR5cGVzPXByb3BUeXBlcyxTYWZlQW5jaG9yLmRlZmF1bHRQcm9wcz1kZWZhdWx0UHJvcHM7dmFyIF9kZWZhdWx0PVNhZmVBbmNob3I7ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsTmhabVZCYm1Ob2IzSXVhbk1pWFN3aWJtRnRaWE1pT2xzaVgybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ0lzSW5KbGNYVnBjbVVpTENKbGVIQnZjblJ6SWl3aVgxOWxjMDF2WkhWc1pTSXNJbVJsWm1GMWJIUWlMQ0pmWlhoMFpXNWtjeklpTENKZmIySnFaV04wVjJsMGFHOTFkRkJ5YjNCbGNuUnBaWE5NYjI5elpUSWlMQ0pmYVc1b1pYSnBkSE5NYjI5elpUSWlMQ0pmWVhOelpYSjBWR2hwYzBsdWFYUnBZV3hwZW1Wa01pSXNJbDl5WldGamRDSXNJbDl3Y205d1ZIbHdaWE1pTENKZlpXeGxiV1Z1ZEZSNWNHVWlMQ0pmWTNKbFlYUmxRMmhoYVc1bFpFWjFibU4wYVc5dUlpd2ljSEp2Y0ZSNWNHVnpJaXdpYUhKbFppSXNJbk4wY21sdVp5SXNJbTl1UTJ4cFkyc2lMQ0ptZFc1aklpd2liMjVMWlhsRWIzZHVJaXdpWkdsellXSnNaV1FpTENKaWIyOXNJaXdpY205c1pTSXNJblJoWWtsdVpHVjRJaXdpYjI1bFQyWlVlWEJsSWl3aWJuVnRZbVZ5SWl3aVkyOXRjRzl1Wlc1MFEyeGhjM01pTENKa1pXWmhkV3gwVUhKdmNITWlMQ0pwYzFSeWFYWnBZV3hJY21WbUlpd2lkSEpwYlNJc0lsTmhabVZCYm1Ob2IzSWlMQ0pmVW1WaFkzUWtRMjl0Y0c5dVpXNTBJaXdpY0hKdmNITWlMQ0pqYjI1MFpYaDBJaXdpWDNSb2FYTWlMQ0pqWVd4c0lpd2lkR2hwY3lJc0ltaGhibVJzWlVOc2FXTnJJaXdpWW1sdVpDSXNJbWhoYm1Sc1pVdGxlVVJ2ZDI0aUxDSmZjSEp2ZEc4aUxDSndjbTkwYjNSNWNHVWlMQ0psZG1WdWRDSXNJbDkwYUdsekpIQnliM0J6SWl3aWNISmxkbVZ1ZEVSbFptRjFiSFFpTENKemRHOXdVSEp2Y0dGbllYUnBiMjRpTENKclpYa2lMQ0p5Wlc1a1pYSWlMQ0pmZEdocGN5UndjbTl3Y3pJaUxDSkRiMjF3YjI1bGJuUWlMQ0p6ZEhsc1pTSXNJbkJ2YVc1MFpYSkZkbVZ1ZEhNaUxDSmpjbVZoZEdWRmJHVnRaVzUwSWl3aVgyUmxabUYxYkhRaUxDSnRiMlIxYkdVaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJSVUVzU1VGQlNVRXNkVUpCUVhsQ1F5eFJRVUZSTEhkRVFVVnlRME1zVVVGQlVVTXNXVUZCWVN4RlFVTnlRa1FzVVVGQlVVVXNZVUZCVlN4RlFVVnNRaXhKUVVGSlF5eFZRVUZaVEN4MVFrRkJkVUpETEZGQlFWRXNNa05CUlRORFN5d3JRa0ZCYVVOT0xIVkNRVUYxUWtNc1VVRkJVU3huUlVGRmFFVk5MR2RDUVVGclFsQXNkVUpCUVhWQ1F5eFJRVUZSTEdsRVFVVnFSRThzZDBKQlFUQkNVaXgxUWtGQmRVSkRMRkZCUVZFc2VVUkJSWHBFVVN4UFFVRlRWQ3gxUWtGQmRVSkRMRkZCUVZFc1ZVRkZlRU5UTEZkQlFXRldMSFZDUVVGMVFrTXNVVUZCVVN4bFFVVTFRMVVzWVVGQlpWZ3NkVUpCUVhWQ1F5eFJRVUZSTEhGRFFVVTVRMWNzZFVKQlFYbENXaXgxUWtGQmRVSkRMRkZCUVZFc2EwTkJSWGhFV1N4VlFVRlpMRU5CUTJSRExFdEJRVTFLTEZkQlFWZE9MRkZCUVZGWExFOUJRM3BDUXl4UlFVRlRUaXhYUVVGWFRpeFJRVUZSWVN4TFFVTTFRa01zVlVGQlYxSXNWMEZCVjA0c1VVRkJVV0VzUzBGRE9VSkZMRk5CUVZWVUxGZEJRVmRPTEZGQlFWRm5RaXhMUVVNM1FrTXNTMEZCVFZnc1YwRkJWMDRzVVVGQlVWY3NUMEZEZWtKUExGTkJRVlZhTEZkQlFWZE9MRkZCUVZGdFFpeFZRVUZWTEVOQlFVTmlMRmRCUVZkT0xGRkJRVkZ2UWl4UFFVRlJaQ3hYUVVGWFRpeFJRVUZSVnl4VFFVdDBSbFVzWlVGQlowSmtMR0ZCUVdGUUxGTkJSVE5DYzBJc1lVRkJaU3hEUVVOcVFrUXNaVUZCWjBJc1MwRkhiRUlzVTBGQlUwVXNZMEZCWTJJc1IwRkRja0lzVDBGQlVVRXNSMEZCZDBJc1RVRkJhRUpCTEVWQlFVdGpMRTlCVjNaQ0xFbEJRVWxETEZkQlJVb3NVMEZCVlVNc1IwRkhVaXhUUVVGVFJDeFhRVUZYUlN4RlFVRlBReXhIUVVONlFpeEpRVUZKUXl4RlFVdEtMRTlCU0VGQkxFVkJRVkZJTEVWQlFXbENTU3hMUVVGTFF5eExRVUZOU2l4RlFVRlBReXhKUVVGWlJ5eE5RVU5xUkVNc1dVRkJZMGdzUlVGQlRVY3NXVUZCV1VNc1RVRkJTeXhGUVVGSk4wSXNkMEpCUVhkQ1NpeFZRVUZUTEVWQlFVbEpMSGRDUVVGM1Frb3NVMEZCVXpaQ0xFdEJRM0pJUVN4RlFVRk5TeXhqUVVGblFrd3NSVUZCVFVzc1kwRkJZMFFzVFVGQlN5eEZRVUZKTjBJc2QwSkJRWGRDU2l4VlFVRlRMRVZCUVVsSkxIZENRVUYzUWtvc1UwRkJVelpDTEV0QlEyeElRU3hIUVZKVUxFVkJRVWt4UWl4blFrRkJaMEpJTEZOQlFWTjVRaXhYUVVGWlF5eEhRVmQ2UXl4SlFVRkpVeXhGUVVGVFZpeFhRVUZYVnl4VlFYZEVlRUlzVDBGMFJFRkVMRVZCUVU5SUxGbEJRV01zVTBGQlUwRXNXVUZCV1Vzc1IwRkRlRU1zU1VGQlNVTXNSVUZCWTFBc1MwRkJTMG9zVFVGRGJrSmFMRVZCUVZkMVFpeEZRVUZaZGtJc1UwRkRka0pNTEVWQlFVODBRaXhGUVVGWk5VSXNTMEZEYmtKRkxFVkJRVlV3UWl4RlFVRlpNVUlzVTBGRmRFSkhMRWRCUVZsUkxHTkJRV05pTEV0QlF6VkNNa0lzUlVGQlRVVXNhVUpCUjBwNFFpeEZRVU5HYzBJc1JVRkJUVWNzYTBKQlNVbzFRaXhIUVVOR1FTeEZRVUZSZVVJc1NVRkpXa1lzUlVGQlQwUXNZMEZCWjBJc1UwRkJVMEVzWTBGQlkwY3NSMEZETVVJc1RVRkJaRUVzUlVGQlRVa3NUVUZEVWtvc1JVRkJUVVVzYVVKQlEwNVNMRXRCUVV0RExGbEJRVmxMTEV0QlNYSkNSaXhGUVVGUFR5eFBRVUZUTEZOQlFWTkJMRk5CUTNaQ0xFbEJRVWxETEVWQlFXVmFMRXRCUVV0S0xFMUJRM0JDYVVJc1JVRkJXVVFzUlVGQllYUkNMR1ZCUTNwQ1RpeEZRVUZYTkVJc1JVRkJZVFZDTEZOQlEzaENSQ3hGUVVGWk5rSXNSVUZCWVRkQ0xGVkJRM3BDWVN4SFFVRlJMRVZCUVVsNlFpd3JRa0ZCSzBKR0xGTkJRVk15UXl4RlFVRmpMRU5CUVVNc2FVSkJRV3RDTEZkQlFWa3NZMEZuUW5KSExFOUJaRWx3UWl4alFVRmpTU3hGUVVGTmFrSXNVVUZEZEVKcFFpeEZRVUZOVml4TFFVRlBWU3hGUVVGTlZpeE5RVUZSTEZOQlJ6TkNWU3hGUVVGTmFrSXNTMEZCVDJsQ0xFVkJRVTFxUWl4TlFVRlJMRXRCUjNwQ1N5eEpRVU5HV1N4RlFVRk5WQ3hWUVVGWkxFVkJRMnhDVXl4RlFVRk5hMElzVDBGQlVTeEZRVUZKTlVNc1ZVRkJWVVFzVTBGQlV5eERRVU51UXpoRExHTkJRV1VzVVVGRFpHNUNMRVZCUVUxclFpeFJRVWRLZUVNc1QwRkJUMHdzVVVGQlVTdERMR05CUVdOSUxFZEJRVmNzUlVGQlNUTkRMRlZCUVZWRUxGTkJRVk1zUjBGQlNUSkNMRVZCUVU4c1EwRkRMMFZtTEZGQlFWTnRRaXhMUVVGTFF5eFpRVU5rYkVJc1YwRkJWeXhGUVVGSlRpeDFRa0ZCZFVKU0xGTkJRVk1yUWl4TFFVRkxSeXhqUVVGbGNFSXNUMEZKYUVWWExGZEJjRVZVTEVOQmNVVkZjRUlzVDBGQlQwd3NVVUZCVVRSRExGZEJSV3BDYmtJc1YwRkJWMmhDTEZWQlFWbEJMRlZCUTNaQ1owSXNWMEZCVjBnc1lVRkJaVUVzWVVGRE1VSXNTVUZCU1RCQ0xGTkJRVmQyUWl4WFFVTm1NMElzVVVGQlVVVXNVVUZCVldkRUxGTkJRMnhDUXl4UFFVRlBia1FzVVVGQlZVRXNVVUZCYVVJaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Y21WaFkzUXRZbTl2ZEhOMGNtRndMMnhwWWk5VFlXWmxRVzVqYUc5eUxtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSksX2luaGVyaXRzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKSxfZXh0ZW5kczI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpLF9yZWFjdD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSksX3Byb3BUeXBlcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKSxfQnV0dG9uPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQnV0dG9uXCIpKSxfRHJvcGRvd249X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Ecm9wZG93blwiKSksX1NwbGl0VG9nZ2xlPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vU3BsaXRUb2dnbGVcIikpLF9zcGxpdENvbXBvbmVudFByb3BzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL3NwbGl0Q29tcG9uZW50UHJvcHNcIikpLHByb3BUeXBlcz0oMCxfZXh0ZW5kczIuZGVmYXVsdCkoe30sX0Ryb3Bkb3duLmRlZmF1bHQucHJvcFR5cGVzLHtic1N0eWxlOl9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsYnNTaXplOl9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsaHJlZjpfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLG9uQ2xpY2s6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsdGl0bGU6X3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUuaXNSZXF1aXJlZCx0b2dnbGVMYWJlbDpfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLGNoaWxkcmVuOl9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlfSksU3BsaXRCdXR0b249ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gU3BsaXRCdXR0b24oKXtyZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9cmV0dXJuKDAsX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKFNwbGl0QnV0dG9uLGUpLFNwbGl0QnV0dG9uLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIGU9dGhpcy5wcm9wcyx0PWUuYnNTaXplLHI9ZS5ic1N0eWxlLG89ZS50aXRsZSxsPWUudG9nZ2xlTGFiZWwscD1lLmNoaWxkcmVuLGk9KDAsX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKGUsW1wiYnNTaXplXCIsXCJic1N0eWxlXCIsXCJ0aXRsZVwiLFwidG9nZ2xlTGFiZWxcIixcImNoaWxkcmVuXCJdKSx1PSgwLF9zcGxpdENvbXBvbmVudFByb3BzMi5kZWZhdWx0KShpLF9Ecm9wZG93bi5kZWZhdWx0LkNvbnRyb2xsZWRDb21wb25lbnQpLG49dVswXSxzPXVbMV07cmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0Ryb3Bkb3duLmRlZmF1bHQsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LG4se2JzU2l6ZTp0LGJzU3R5bGU6cn0pLF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0J1dHRvbi5kZWZhdWx0LCgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSxzLHtkaXNhYmxlZDppLmRpc2FibGVkLGJzU2l6ZTp0LGJzU3R5bGU6cn0pLG8pLF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1NwbGl0VG9nZ2xlLmRlZmF1bHQse1wiYXJpYS1sYWJlbFwiOmx8fG8sYnNTaXplOnQsYnNTdHlsZTpyfSksX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfRHJvcGRvd24uZGVmYXVsdC5NZW51LG51bGwscCkpfSxTcGxpdEJ1dHRvbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtTcGxpdEJ1dHRvbi5wcm9wVHlwZXM9cHJvcFR5cGVzLFNwbGl0QnV0dG9uLlRvZ2dsZT1fU3BsaXRUb2dnbGUuZGVmYXVsdDt2YXIgX2RlZmF1bHQ9U3BsaXRCdXR0b247ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsTndiR2wwUW5WMGRHOXVMbXB6SWwwc0ltNWhiV1Z6SWpwYklsOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFpTENKeVpYRjFhWEpsSWl3aVpYaHdiM0owY3lJc0lsOWZaWE5OYjJSMWJHVWlMQ0prWldaaGRXeDBJaXdpWDI5aWFtVmpkRmRwZEdodmRYUlFjbTl3WlhKMGFXVnpURzl2YzJVeUlpd2lYMmx1YUdWeWFYUnpURzl2YzJVeUlpd2lYMlY0ZEdWdVpITXlJaXdpWDNKbFlXTjBJaXdpWDNCeWIzQlVlWEJsY3lJc0lsOUNkWFIwYjI0aUxDSmZSSEp2Y0dSdmQyNGlMQ0pmVTNCc2FYUlViMmRuYkdVaUxDSmZjM0JzYVhSRGIyMXdiMjVsYm5SUWNtOXdjeklpTENKd2NtOXdWSGx3WlhNaUxDSmljMU4wZVd4bElpd2ljM1J5YVc1bklpd2lZbk5UYVhwbElpd2lhSEpsWmlJc0ltOXVRMnhwWTJzaUxDSm1kVzVqSWl3aWRHbDBiR1VpTENKdWIyUmxJaXdpYVhOU1pYRjFhWEpsWkNJc0luUnZaMmRzWlV4aFltVnNJaXdpWTJocGJHUnlaVzRpTENKVGNHeHBkRUoxZEhSdmJpSXNJbDlTWldGamRDUkRiMjF3YjI1bGJuUWlMQ0poY0hCc2VTSXNJblJvYVhNaUxDSmhjbWQxYldWdWRITWlMQ0p3Y205MGIzUjVjR1VpTENKeVpXNWtaWElpTENKZmRHaHBjeVJ3Y205d2N5SXNJbkJ5YjNCeklpd2lYM053YkdsMFEyOXRjRzl1Wlc1MFVISnZjSE1pTENKRGIyNTBjbTlzYkdWa1EyOXRjRzl1Wlc1MElpd2laSEp2Y0dSdmQyNVFjbTl3Y3lJc0ltSjFkSFJ2YmxCeWIzQnpJaXdpWTNKbFlYUmxSV3hsYldWdWRDSXNJbVJwYzJGaWJHVmtJaXdpWVhKcFlTMXNZV0psYkNJc0lrMWxiblVpTENKRGIyMXdiMjVsYm5RaUxDSlViMmRuYkdVaUxDSmZaR1ZtWVhWc2RDSXNJbTF2WkhWc1pTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZGUVN4SlFVRkpRU3gxUWtGQmVVSkRMRkZCUVZFc2QwUkJSWEpEUXl4UlFVRlJReXhaUVVGaExFVkJRM0pDUkN4UlFVRlJSU3hoUVVGVkxFVkJSV3hDTEVsQlFVbERMQ3RDUVVGcFEwd3NkVUpCUVhWQ1F5eFJRVUZSTEdkRlFVVm9SVXNzWjBKQlFXdENUaXgxUWtGQmRVSkRMRkZCUVZFc2FVUkJSV3BFVFN4VlFVRlpVQ3gxUWtGQmRVSkRMRkZCUVZFc01rTkJSVE5EVHl4UFFVRlRVaXgxUWtGQmRVSkRMRkZCUVZFc1ZVRkZlRU5STEZkQlFXRlVMSFZDUVVGMVFrTXNVVUZCVVN4bFFVVTFRMU1zVVVGQlZWWXNkVUpCUVhWQ1F5eFJRVUZSTEdGQlJYcERWU3hWUVVGWldDeDFRa0ZCZFVKRExGRkJRVkVzWlVGRk0wTlhMR0ZCUVdWYUxIVkNRVUYxUWtNc1VVRkJVU3hyUWtGRk9VTlpMSE5DUVVGM1FtSXNkVUpCUVhWQ1F5eFJRVUZSTEdkRFFVVjJSR0VzVjBGQldTeEZRVUZKVUN4VlFVRlZTQ3hUUVVGVExFZEJRVWxQTEZWQlFWVlFMRkZCUVZGVkxGVkJRVmNzUTBGRmRFVkRMRkZCUVZOT0xGZEJRVmRNTEZGQlFWRlpMRTlCUXpWQ1F5eFBRVUZSVWl4WFFVRlhUQ3hSUVVGUldTeFBRVU16UWtVc1MwRkJUVlFzVjBGQlYwd3NVVUZCVVZrc1QwRkRla0pITEZGQlFWTldMRmRCUVZkTUxGRkJRVkZuUWl4TFFVczFRa01zVFVGQlQxb3NWMEZCVjB3c1VVRkJVV3RDTEV0QlFVdERMRmRCU3k5Q1F5eFpRVUZoWml4WFFVRlhUQ3hSUVVGUldTeFBRVTFvUTFNc1UwRkJWV2hDTEZkQlFWZE1MRkZCUVZGclFpeFBRVWN6UWtrc1dVRkZTaXhUUVVGVlF5eEhRVWRTTEZOQlFWTkVMR05CUTFBc1QwRkJUME1zUlVGQmFVSkRMRTFCUVUxRExFdEJRVTFETEZsQlFXTkVMRXRCWjBOd1JDeFBRVzVEUVN4RlFVRkpka0lzWjBKQlFXZENSaXhUUVVGVGMwSXNXVUZCWVVNc1IwRk5OMEpFTEZsQlFWbExMRlZCUld4Q1F5eFBRVUZUTEZOQlFWTkJMRk5CUTNaQ0xFbEJRVWxETEVWQlFXTktMRXRCUVV0TExFMUJRMjVDYWtJc1JVRkJVMmRDTEVWQlFWbG9RaXhQUVVOeVFrWXNSVUZCVld0Q0xFVkJRVmxzUWl4UlFVTjBRazBzUlVGQlVWa3NSVUZCV1Zvc1RVRkRjRUpITEVWQlFXTlRMRVZCUVZsVUxGbEJRekZDUXl4RlFVRlhVU3hGUVVGWlVpeFRRVU4yUWxNc1IwRkJVU3hGUVVGSk4wSXNLMEpCUVN0Q1JDeFRRVUZUTmtJc1JVRkJZU3hEUVVGRExGTkJRVlVzVlVGQlZ5eFJRVUZUTEdOQlFXVXNZVUZGTDBkRkxFZEJRWFZDTEVWQlFVbDBRaXh6UWtGQmMwSlVMRk5CUVZNNFFpeEZRVUZQZGtJc1ZVRkJWVkFzVVVGQlVXZERMSEZDUVVOdVJrTXNSVUZCWjBKR0xFVkJRWEZDTEVkQlEzSkRSeXhGUVVGalNDeEZRVUZ4UWl4SFFVVjJReXhQUVVGUE0wSXNUMEZCVDBvc1VVRkJVVzFETEdOQlFXTTFRaXhWUVVGVlVDeFRRVUZUTEVWQlFVbEhMRlZCUVZWSUxGTkJRVk1zUjBGQlNXbERMRVZCUVdVc1EwRkRMMFp3UWl4UFFVRlJRU3hGUVVOU1JpeFJRVUZUUVN4SlFVTlFVQ3hQUVVGUFNpeFJRVUZSYlVNc1kwRkJZemRDTEZGQlFWRk9MRk5CUVZNc1JVRkJTVWNzVlVGQlZVZ3NVMEZCVXl4SFFVRkphME1zUlVGQllTeERRVU40UmtVc1UwRkJWVTRzUlVGQlRVMHNVMEZEYUVKMlFpeFBRVUZSUVN4RlFVTlNSaXhSUVVGVFFTeEpRVU5RVFN4SFFVRlJZaXhQUVVGUFNpeFJRVUZSYlVNc1kwRkJZek5DTEdGQlFXRlNMRkZCUVZNc1EwRkROMFJ4UXl4aFFVRmpha0lzUjBGQlpVZ3NSVUZETjBKS0xFOUJRVkZCTEVWQlExSkdMRkZCUVZOQkxFbEJRMUJRTEU5QlFVOUtMRkZCUVZGdFF5eGpRVUZqTlVJc1ZVRkJWVkFzVVVGQlVYTkRMRXRCUVUwc1MwRkJUV3BDTEV0QlJ6RkVReXhaUVhCRFZDeERRWEZEUld4Q0xFOUJRVTlLTEZGQlFWRjFReXhYUVVWcVFtcENMRmxCUVZsYUxGVkJRVmxCTEZWQlEzaENXU3haUVVGWmEwSXNUMEZCVTJoRExHRkJRV0ZTTEZGQlEyeERMRWxCUVVsNVF5eFRRVUZYYmtJc1dVRkRabmhDTEZGQlFWRkZMRkZCUVZWNVF5eFRRVU5zUWtNc1QwRkJUelZETEZGQlFWVkJMRkZCUVdsQ0lpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDNKbFlXTjBMV0p2YjNSemRISmhjQzlzYVdJdlUzQnNhWFJDZFhSMGIyNHVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0PXJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO2V4cG9ydHMuX19lc01vZHVsZT0hMCxleHBvcnRzLmRlZmF1bHQ9dm9pZCAwO3ZhciBfZXh0ZW5kczI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpLF9pbmhlcml0c0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKSxfRHJvcGRvd25Ub2dnbGU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Ecm9wZG93blRvZ2dsZVwiKSksU3BsaXRUb2dnbGU9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gU3BsaXRUb2dnbGUoKXtyZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9cmV0dXJuKDAsX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKFNwbGl0VG9nZ2xlLGUpLFNwbGl0VG9nZ2xlLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7cmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0Ryb3Bkb3duVG9nZ2xlLmRlZmF1bHQsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LHRoaXMucHJvcHMse3VzZUFuY2hvcjohMSxub0NhcmV0OiExfSkpfSxTcGxpdFRvZ2dsZX0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtTcGxpdFRvZ2dsZS5kZWZhdWx0UHJvcHM9X0Ryb3Bkb3duVG9nZ2xlLmRlZmF1bHQuZGVmYXVsdFByb3BzO3ZhciBfZGVmYXVsdD1TcGxpdFRvZ2dsZTtleHBvcnRzLmRlZmF1bHQ9X2RlZmF1bHQsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxOd2JHbDBWRzluWjJ4bExtcHpJbDBzSW01aGJXVnpJanBiSWw5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUWlMQ0p5WlhGMWFYSmxJaXdpWlhod2IzSjBjeUlzSWw5ZlpYTk5iMlIxYkdVaUxDSmtaV1poZFd4MElpd2lYMlY0ZEdWdVpITXlJaXdpWDJsdWFHVnlhWFJ6VEc5dmMyVXlJaXdpWDNKbFlXTjBJaXdpWDBSeWIzQmtiM2R1Vkc5bloyeGxJaXdpVTNCc2FYUlViMmRuYkdVaUxDSmZVbVZoWTNRa1EyOXRjRzl1Wlc1MElpd2lZWEJ3YkhraUxDSjBhR2x6SWl3aVlYSm5kVzFsYm5Seklpd2ljSEp2ZEc5MGVYQmxJaXdpY21WdVpHVnlJaXdpWTNKbFlYUmxSV3hsYldWdWRDSXNJbkJ5YjNCeklpd2lkWE5sUVc1amFHOXlJaXdpYm05RFlYSmxkQ0lzSWtOdmJYQnZibVZ1ZENJc0ltUmxabUYxYkhSUWNtOXdjeUlzSWw5a1pXWmhkV3gwSWl3aWJXOWtkV3hsSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4aFFVVkJMRWxCUVVsQkxIVkNRVUY1UWtNc1VVRkJVU3gzUkVGRmNrTkRMRkZCUVZGRExGbEJRV0VzUlVGRGNrSkVMRkZCUVZGRkxHRkJRVlVzUlVGRmJFSXNTVUZCU1VNc1ZVRkJXVXdzZFVKQlFYVkNReXhSUVVGUkxESkRRVVV6UTBzc1owSkJRV3RDVGl4MVFrRkJkVUpETEZGQlFWRXNhVVJCUldwRVRTeFBRVUZUVUN4MVFrRkJkVUpETEZGQlFWRXNWVUZGZUVOUExHZENRVUZyUWxJc2RVSkJRWFZDUXl4UlFVRlJMSEZDUVVWcVJGRXNXVUZGU2l4VFFVRlZReXhIUVVkU0xGTkJRVk5FTEdOQlExQXNUMEZCVDBNc1JVRkJhVUpETEUxQlFVMURMRXRCUVUxRExGbEJRV05FTEV0QldYQkVMRTlCWmtFc1JVRkJTVTRzWjBKQlFXZENSaXhUUVVGVFN5eFpRVUZoUXl4SFFVMDNRa1FzV1VGQldVc3NWVUZGYkVKRExFOUJRVk1zVTBGQlUwRXNVMEZEZGtJc1QwRkJUMUlzVDBGQlQwZ3NVVUZCVVZrc1kwRkJZMUlzWjBKQlFXZENTaXhUUVVGVExFVkJRVWxETEZWQlFWVkVMRk5CUVZNc1IwRkJTVkVzUzBGQlMwc3NUVUZCVHl4RFFVTnNSME1zVjBGQlZ5eEZRVU5ZUXl4VFFVRlRMRTFCU1U1V0xGbEJhRUpVTEVOQmFVSkZSaXhQUVVGUFNDeFJRVUZSWjBJc1YwRkZha0pZTEZsQlFWbFpMR0ZCUVdWaUxHZENRVUZuUWtvc1VVRkJVV2xDTEdGQlEyNUVMRWxCUVVsRExGTkJRVmRpTEZsQlEyWlFMRkZCUVZGRkxGRkJRVlZyUWl4VFFVTnNRa01zVDBGQlQzSkNMRkZCUVZWQkxGRkJRV2xDSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdOMExXSnZiM1J6ZEhKaGNDOXNhV0l2VTNCc2FYUlViMmRuYkdVdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9pbmhlcml0c0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSksX2V4dGVuZHMyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKSxfcmVhY3Q9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpLF9wcm9wVHlwZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSksX1RhYkNvbnRhaW5lcj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1RhYkNvbnRhaW5lclwiKSksX1RhYkNvbnRlbnQ9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9UYWJDb250ZW50XCIpKSxfVGFiUGFuZT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1RhYlBhbmVcIikpLHByb3BUeXBlcz0oMCxfZXh0ZW5kczIuZGVmYXVsdCkoe30sX1RhYlBhbmUuZGVmYXVsdC5wcm9wVHlwZXMse2Rpc2FibGVkOl9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLHRpdGxlOl9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLHRhYkNsYXNzTmFtZTpfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nfSksVGFiPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIFRhYigpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4oMCxfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoVGFiLGUpLFRhYi5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uIHJlbmRlcigpe3ZhciBlPSgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSx0aGlzLnByb3BzKTtyZXR1cm4gZGVsZXRlIGUudGl0bGUsZGVsZXRlIGUuZGlzYWJsZWQsZGVsZXRlIGUudGFiQ2xhc3NOYW1lLF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1RhYlBhbmUuZGVmYXVsdCxlKX0sVGFifShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1RhYi5wcm9wVHlwZXM9cHJvcFR5cGVzLFRhYi5Db250YWluZXI9X1RhYkNvbnRhaW5lci5kZWZhdWx0LFRhYi5Db250ZW50PV9UYWJDb250ZW50LmRlZmF1bHQsVGFiLlBhbmU9X1RhYlBhbmUuZGVmYXVsdDt2YXIgX2RlZmF1bHQ9VGFiO2V4cG9ydHMuZGVmYXVsdD1fZGVmYXVsdCxtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbFJoWWk1cWN5SmRMQ0p1WVcxbGN5STZXeUpmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MElpd2ljbVZ4ZFdseVpTSXNJbVY0Y0c5eWRITWlMQ0pmWDJWelRXOWtkV3hsSWl3aVpHVm1ZWFZzZENJc0lsOXBibWhsY21sMGMweHZiM05sTWlJc0lsOWxlSFJsYm1Sek1pSXNJbDl5WldGamRDSXNJbDl3Y205d1ZIbHdaWE1pTENKZlZHRmlRMjl1ZEdGcGJtVnlJaXdpWDFSaFlrTnZiblJsYm5RaUxDSmZWR0ZpVUdGdVpTSXNJbkJ5YjNCVWVYQmxjeUlzSW1ScGMyRmliR1ZrSWl3aVltOXZiQ0lzSW5ScGRHeGxJaXdpYm05a1pTSXNJblJoWWtOc1lYTnpUbUZ0WlNJc0luTjBjbWx1WnlJc0lsUmhZaUlzSWw5U1pXRmpkQ1JEYjIxd2IyNWxiblFpTENKaGNIQnNlU0lzSW5Sb2FYTWlMQ0poY21kMWJXVnVkSE1pTENKd2NtOTBiM1I1Y0dVaUxDSnlaVzVrWlhJaUxDSndjbTl3Y3lJc0ltTnlaV0YwWlVWc1pXMWxiblFpTENKRGIyMXdiMjVsYm5RaUxDSkRiMjUwWVdsdVpYSWlMQ0pEYjI1MFpXNTBJaXdpVUdGdVpTSXNJbDlrWldaaGRXeDBJaXdpYlc5a2RXeGxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVWQkxFbEJRVWxCTEhWQ1FVRjVRa01zVVVGQlVTeDNSRUZGY2tORExGRkJRVkZETEZsQlFXRXNSVUZEY2tKRUxGRkJRVkZGTEdGQlFWVXNSVUZGYkVJc1NVRkJTVU1zWjBKQlFXdENUQ3gxUWtGQmRVSkRMRkZCUVZFc2FVUkJSV3BFU3l4VlFVRlpUaXgxUWtGQmRVSkRMRkZCUVZFc01rTkJSVE5EVFN4UFFVRlRVQ3gxUWtGQmRVSkRMRkZCUVZFc1ZVRkZlRU5QTEZkQlFXRlNMSFZDUVVGMVFrTXNVVUZCVVN4bFFVVTFRMUVzWTBGQlowSlVMSFZDUVVGMVFrTXNVVUZCVVN4dFFrRkZMME5UTEZsQlFXTldMSFZDUVVGMVFrTXNVVUZCVVN4cFFrRkZOME5WTEZOQlFWZFlMSFZDUVVGMVFrTXNVVUZCVVN4alFVVXhRMWNzVjBGQldTeEZRVUZKVGl4VlFVRlZSaXhUUVVGVExFZEJRVWxQTEZOQlFWTlFMRkZCUVZGUkxGVkJRVmNzUTBGRGNrVkRMRk5CUVZWTUxGZEJRVmRLTEZGQlFWRlZMRXRCUXpkQ1F5eE5RVUZQVUN4WFFVRlhTaXhSUVVGUldTeExRVXN4UWtNc1lVRkJZMVFzVjBGQlYwb3NVVUZCVVdNc1UwRkhMMEpETEVsQlJVb3NVMEZCVlVNc1IwRkhVaXhUUVVGVFJDeE5RVU5RTEU5QlFVOURMRVZCUVdsQ1F5eE5RVUZOUXl4TFFVRk5ReXhaUVVGalJDeExRV053UkN4UFFXcENRU3hGUVVGSmFrSXNaMEpCUVdkQ1JDeFRRVUZUWlN4SlFVRkxReXhIUVUxeVFrUXNTVUZCU1Vzc1ZVRkZWa01zVDBGQlV5eFRRVUZUUVN4VFFVTjJRaXhKUVVGSlF5eEhRVUZSTEVWQlFVbHdRaXhWUVVGVlJpeFRRVUZUTEVkQlFVbHJRaXhMUVVGTFNTeFBRVXMxUXl4alFVaFBRU3hGUVVGTldDeGhRVU5PVnl4RlFVRk5ZaXhuUWtGRFRtRXNSVUZCVFZRc1lVRkRUbFlzVDBGQlQwZ3NVVUZCVVhWQ0xHTkJRV05vUWl4VFFVRlRVQ3hSUVVGVGMwSXNTVUZIYWtSUUxFbEJiRUpVTEVOQmJVSkZXaXhQUVVGUFNDeFJRVUZSZDBJc1YwRkZha0pVTEVsQlFVbFFMRlZCUVZsQkxGVkJRMmhDVHl4SlFVRkpWU3hWUVVGWmNFSXNZMEZCWTB3c1VVRkRPVUpsTEVsQlFVbFhMRkZCUVZWd1FpeFpRVUZaVGl4UlFVTXhRbVVzU1VGQlNWa3NTMEZCVDNCQ0xGTkJRVk5RTEZGQlEzQkNMRWxCUVVrMFFpeFRRVUZYWWl4SlFVTm1ha0lzVVVGQlVVVXNVVUZCVlRSQ0xGTkJRMnhDUXl4UFFVRlBMMElzVVVGQlZVRXNVVUZCYVVJaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Y21WaFkzUXRZbTl2ZEhOMGNtRndMMnhwWWk5VVlXSXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0PXJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO2V4cG9ydHMuX19lc01vZHVsZT0hMCxleHBvcnRzLmRlZmF1bHQ9dm9pZCAwO3ZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpLF9pbmhlcml0c0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKSxfcHJvcFR5cGVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpLF91bmNvbnRyb2xsYWJsZT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ1bmNvbnRyb2xsYWJsZVwiKSksVEFCPVwidGFiXCIsUEFORT1cInBhbmVcIixpZFByb3BUeXBlPV9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcl0pLHByb3BUeXBlcz17aWQ6ZnVuY3Rpb24gaWQoZSl7dmFyIHQ9bnVsbDtpZighZS5nZW5lcmF0ZUNoaWxkSWQpe2Zvcih2YXIgcj1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KHI+MT9yLTE6MCksbz0xO288cjtvKyspbltvLTFdPWFyZ3VtZW50c1tvXTsodD1pZFByb3BUeXBlLmFwcGx5KHZvaWQgMCxbZV0uY29uY2F0KG4pKSl8fGUuaWR8fCh0PW5ldyBFcnJvcihcIkluIG9yZGVyIHRvIHByb3Blcmx5IGluaXRpYWxpemUgVGFicyBpbiBhIHdheSB0aGF0IGlzIGFjY2Vzc2libGUgdG8gYXNzaXN0aXZlIHRlY2hub2xvZ2llcyAoc3VjaCBhcyBzY3JlZW4gcmVhZGVycykgYW4gYGlkYCBvciBhIGBnZW5lcmF0ZUNoaWxkSWRgIHByb3AgdG8gVGFiQ29udGFpbmVyIGlzIHJlcXVpcmVkXCIpKX1yZXR1cm4gdH0sZ2VuZXJhdGVDaGlsZElkOl9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLG9uU2VsZWN0Ol9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLGFjdGl2ZUtleTpfcHJvcFR5cGVzLmRlZmF1bHQuYW55fSxjaGlsZENvbnRleHRUeXBlcz17JGJzX3RhYkNvbnRhaW5lcjpfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe2FjdGl2ZUtleTpfcHJvcFR5cGVzLmRlZmF1bHQuYW55LG9uU2VsZWN0Ol9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQsZ2V0VGFiSWQ6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZCxnZXRQYW5lSWQ6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZH0pfSxUYWJDb250YWluZXI9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gVGFiQ29udGFpbmVyKCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfSgwLF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShUYWJDb250YWluZXIsZSk7dmFyIHQ9VGFiQ29udGFpbmVyLnByb3RvdHlwZTtyZXR1cm4gdC5nZXRDaGlsZENvbnRleHQ9ZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCl7dmFyIGU9dGhpcy5wcm9wcyx0PWUuYWN0aXZlS2V5LHI9ZS5vblNlbGVjdCxuPWUuZ2VuZXJhdGVDaGlsZElkLG89ZS5pZCxhPW58fGZ1bmN0aW9uKGUsdCl7cmV0dXJuIG8/bytcIi1cIit0K1wiLVwiK2U6bnVsbH07cmV0dXJueyRic190YWJDb250YWluZXI6e2FjdGl2ZUtleTp0LG9uU2VsZWN0OnIsZ2V0VGFiSWQ6ZnVuY3Rpb24gZ2V0VGFiSWQoZSl7cmV0dXJuIGEoZSxUQUIpfSxnZXRQYW5lSWQ6ZnVuY3Rpb24gZ2V0UGFuZUlkKGUpe3JldHVybiBhKGUsUEFORSl9fX19LHQucmVuZGVyPWZ1bmN0aW9uIHJlbmRlcigpe3ZhciBlPXRoaXMucHJvcHMsdD1lLmNoaWxkcmVuLHI9KDAsX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKGUsW1wiY2hpbGRyZW5cIl0pO3JldHVybiBkZWxldGUgci5nZW5lcmF0ZUNoaWxkSWQsZGVsZXRlIHIub25TZWxlY3QsZGVsZXRlIHIuYWN0aXZlS2V5LF9yZWFjdC5kZWZhdWx0LmNsb25lRWxlbWVudChfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5vbmx5KHQpLHIpfSxUYWJDb250YWluZXJ9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7VGFiQ29udGFpbmVyLnByb3BUeXBlcz1wcm9wVHlwZXMsVGFiQ29udGFpbmVyLmNoaWxkQ29udGV4dFR5cGVzPWNoaWxkQ29udGV4dFR5cGVzO3ZhciBfZGVmYXVsdD0oMCxfdW5jb250cm9sbGFibGUuZGVmYXVsdCkoVGFiQ29udGFpbmVyLHthY3RpdmVLZXk6XCJvblNlbGVjdFwifSk7ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsUmhZa052Ym5SaGFXNWxjaTVxY3lKZExDSnVZVzFsY3lJNld5SmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwSWl3aWNtVnhkV2x5WlNJc0ltVjRjRzl5ZEhNaUxDSmZYMlZ6VFc5a2RXeGxJaXdpWkdWbVlYVnNkQ0lzSWw5dlltcGxZM1JYYVhSb2IzVjBVSEp2Y0dWeWRHbGxjMHh2YjNObE1pSXNJbDlwYm1obGNtbDBjMHh2YjNObE1pSXNJbDl5WldGamRDSXNJbDl3Y205d1ZIbHdaWE1pTENKZmRXNWpiMjUwY205c2JHRmliR1VpTENKVVFVSWlMQ0pRUVU1Rklpd2lhV1JRY205d1ZIbHdaU0lzSW05dVpVOW1WSGx3WlNJc0luTjBjbWx1WnlJc0ltNTFiV0psY2lJc0luQnliM0JVZVhCbGN5SXNJbWxrSWl3aWNISnZjSE1pTENKbGNuSnZjaUlzSW1kbGJtVnlZWFJsUTJocGJHUkpaQ0lzSWw5c1pXNGlMQ0poY21kMWJXVnVkSE1pTENKc1pXNW5kR2dpTENKaGNtZHpJaXdpUVhKeVlYa2lMQ0pmYTJWNUlpd2lZWEJ3YkhraUxDSmpiMjVqWVhRaUxDSkZjbkp2Y2lJc0ltWjFibU1pTENKdmJsTmxiR1ZqZENJc0ltRmpkR2wyWlV0bGVTSXNJbUZ1ZVNJc0ltTm9hV3hrUTI5dWRHVjRkRlI1Y0dWeklpd2lKR0p6WDNSaFlrTnZiblJoYVc1bGNpSXNJbk5vWVhCbElpd2lhWE5TWlhGMWFYSmxaQ0lzSW1kbGRGUmhZa2xrSWl3aVoyVjBVR0Z1WlVsa0lpd2lWR0ZpUTI5dWRHRnBibVZ5SWl3aVgxSmxZV04wSkVOdmJYQnZibVZ1ZENJc0luUm9hWE1pTENKZmNISnZkRzhpTENKd2NtOTBiM1I1Y0dVaUxDSm5aWFJEYUdsc1pFTnZiblJsZUhRaUxDSmZkR2hwY3lSd2NtOXdjeUlzSW1kbGRFbGtJaXdpYTJWNUlpd2lkSGx3WlNJc0luSmxibVJsY2lJc0lsOTBhR2x6SkhCeWIzQnpNaUlzSW1Ob2FXeGtjbVZ1SWl3aVkyeHZibVZGYkdWdFpXNTBJaXdpUTJocGJHUnlaVzRpTENKdmJteDVJaXdpUTI5dGNHOXVaVzUwSWl3aVgyUmxabUYxYkhRaUxDSnRiMlIxYkdVaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJSVUVzU1VGQlNVRXNkVUpCUVhsQ1F5eFJRVUZSTEhkRVFVVnlRME1zVVVGQlVVTXNXVUZCWVN4RlFVTnlRa1FzVVVGQlVVVXNZVUZCVlN4RlFVVnNRaXhKUVVGSlF5d3JRa0ZCYVVOTUxIVkNRVUYxUWtNc1VVRkJVU3huUlVGRmFFVkxMR2RDUVVGclFrNHNkVUpCUVhWQ1F5eFJRVUZSTEdsRVFVVnFSRTBzVDBGQlUxQXNkVUpCUVhWQ1F5eFJRVUZSTEZWQlJYaERUeXhYUVVGaFVpeDFRa0ZCZFVKRExGRkJRVkVzWlVGRk5VTlJMR2RDUVVGclFsUXNkVUpCUVhWQ1F5eFJRVUZSTEcxQ1FVVnFSRk1zU1VGQlRTeE5RVU5PUXl4TFFVRlBMRTlCUlZCRExGZEJRV0ZLTEZkQlFWZEtMRkZCUVZGVExGVkJRVlVzUTBGQlEwd3NWMEZCVjBvc1VVRkJVVlVzVDBGQlVVNHNWMEZCVjBvc1VVRkJVVmNzVTBGRmVrWkRMRlZCUVZrc1EwRkxaRU1zUjBGQlNTeFRRVUZUUVN4SFFVRkhReXhIUVVOa0xFbEJRVWxETEVWQlFWRXNTMEZGV2l4SlFVRkxSQ3hGUVVGTlJTeG5Ra0ZCYVVJc1EwRkRNVUlzU1VGQlN5eEpRVUZKUXl4RlFVRlBReXhWUVVGVlF5eFBRVUZSUXl4RlFVRlBMRWxCUVVsRExFMUJRVTFLTEVWQlFVOHNSVUZCU1VFc1JVRkJUeXhGUVVGSkxFZEJRVWxMTEVWQlFVOHNSVUZCUjBFc1JVRkJUMHdzUlVGQlRVc3NTVUZEYkVkR0xFVkJRVXRGTEVWQlFVOHNSMEZCUzBvc1ZVRkJWVWtzU1VGSE4wSlFMRVZCUVZGUUxGZEJRVmRsTEZkQlFVMHNSVUZCVVN4RFFVRkRWQ3hIUVVGUFZTeFBRVUZQU2l4TlFVVnFRMDRzUlVGQlRVUXNTMEZEYmtKRkxFVkJRVkVzU1VGQlNWVXNUVUZCVFN4M1RFRkpkRUlzVDBGQlQxWXNSMEZqVkVNc1owSkJRV2xDV2l4WFFVRlhTaXhSUVVGUk1FSXNTMEZQY0VORExGTkJRVlYyUWl4WFFVRlhTaXhSUVVGUk1FSXNTMEZQTjBKRkxGVkJRVmQ0UWl4WFFVRlhTaXhSUVVGUk5rSXNTMEZGTlVKRExHdENRVUZ2UWl4RFFVTjBRa01zYVVKQlFXdENNMElzVjBGQlYwb3NVVUZCVVdkRExFMUJRVTBzUTBGRGVrTktMRlZCUVZkNFFpeFhRVUZYU2l4UlFVRlJOa0lzU1VGRE9VSkdMRk5CUVZWMlFpeFhRVUZYU2l4UlFVRlJNRUlzUzBGQlMwOHNWMEZEYkVORExGTkJRVlU1UWl4WFFVRlhTaXhSUVVGUk1FSXNTMEZCUzA4c1YwRkRiRU5GTEZWQlFWY3ZRaXhYUVVGWFNpeFJRVUZSTUVJc1MwRkJTMDhzWTBGSmJrTkhMR0ZCUlVvc1UwRkJWVU1zUjBGSFVpeFRRVUZUUkN4bFFVTlFMRTlCUVU5RExFVkJRV2xDWkN4TlFVRk5aU3hMUVVGTmNFSXNXVUZCWTI5Q0xFMUJTSEJFTEVWQlFVbHdReXhuUWtGQlowSkdMRk5CUVZOdlF5eGhRVUZqUXl4SFFVMHpReXhKUVVGSlJTeEZRVUZUU0N4aFFVRmhTU3hWUVhGRE1VSXNUMEZ1UTBGRUxFVkJRVTlGTEdkQ1FVRnJRaXhUUVVGVFFTeHJRa0ZEYUVNc1NVRkJTVU1zUlVGQlkwb3NTMEZCUzNoQ0xFMUJRMjVDWXl4RlFVRlpZeXhGUVVGWlpDeFZRVU40UWtRc1JVRkJWMlVzUlVGQldXWXNVMEZEZGtKWUxFVkJRV3RDTUVJc1JVRkJXVEZDTEdkQ1FVTTVRa2dzUlVGQlN6WkNMRVZCUVZrM1FpeEhRVVZxUWpoQ0xFVkJRVkV6UWl4SFFVRnRRaXhUUVVGVk5FSXNSVUZCUzBNc1IwRkROVU1zVDBGQlQyaERMRVZCUVV0QkxFVkJRVXNzU1VGQlRXZERMRVZCUVU4c1NVRkJUVVFzUlVGQlRTeE5RVWMxUXl4TlFVRlBMRU5CUTB4aUxHbENRVUZyUWl4RFFVTm9Ra2dzVlVGQlYwRXNSVUZEV0VRc1UwRkJWVUVzUlVGRFZrOHNVMEZCVlN4VFFVRlRRU3hUUVVGVFZTeEhRVU14UWl4UFFVRlBSQ3hGUVVGTlF5eEZRVUZMZEVNc1RVRkZjRUkyUWl4VlFVRlhMRk5CUVZOQkxGVkJRVlZUTEVkQlF6VkNMRTlCUVU5RUxFVkJRVTFETEVWQlFVdHlReXhWUVUweFFtZERMRVZCUVU5UExFOUJRVk1zVTBGQlUwRXNVMEZEZGtJc1NVRkJTVU1zUlVGQlpWUXNTMEZCUzNoQ0xFMUJRM0JDYTBNc1JVRkJWMFFzUlVGQllVTXNVMEZEZUVKc1F5eEhRVUZSTEVWQlFVbGlMQ3RDUVVFclFrUXNVMEZCVXl0RExFVkJRV01zUTBGQlF5eGhRVWwyUlN4alFVaFBha01zUlVGQlRVVXNkVUpCUTA1R0xFVkJRVTFoTEdkQ1FVTk9ZaXhGUVVGTll5eFZRVU5PZWtJc1QwRkJUMGdzVVVGQlVXbEVMR0ZCUVdFNVF5eFBRVUZQU0N4UlFVRlJhMFFzVTBGQlUwTXNTMEZCUzBnc1IwRkJWMnhETEVsQlIzUkZjMElzWVVFMVExUXNRMEUyUTBWcVF5eFBRVUZQU0N4UlFVRlJiMFFzVjBGRmFrSm9RaXhoUVVGaGVFSXNWVUZCV1VFc1ZVRkRla0ozUWl4aFFVRmhUaXhyUWtGQmIwSkJMR3RDUVVWcVF5eEpRVUZKZFVJc1ZVRkJWeXhGUVVGSmFFUXNaMEpCUVdkQ1RDeFRRVUZUYjBNc1lVRkJZeXhEUVVONFJGSXNWVUZCVnl4aFFVZGlPVUlzVVVGQlVVVXNVVUZCVlhGRUxGTkJRMnhDUXl4UFFVRlBlRVFzVVVGQlZVRXNVVUZCYVVJaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Y21WaFkzUXRZbTl2ZEhOMGNtRndMMnhwWWk5VVlXSkRiMjUwWVdsdVpYSXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0PXJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO2V4cG9ydHMuX19lc01vZHVsZT0hMCxleHBvcnRzLmRlZmF1bHQ9dm9pZCAwO3ZhciBfZXh0ZW5kczI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSksX2luaGVyaXRzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKSxfYXNzZXJ0VGhpc0luaXRpYWxpemVkMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKSxfY2xhc3NuYW1lcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKSxfcmVhY3Q9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpLF9wcm9wVHlwZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSksX2VsZW1lbnRUeXBlPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlXCIpKSxfYm9vdHN0cmFwVXRpbHM9cmVxdWlyZShcIi4vdXRpbHMvYm9vdHN0cmFwVXRpbHNcIikscHJvcFR5cGVzPXtjb21wb25lbnRDbGFzczpfZWxlbWVudFR5cGUuZGVmYXVsdCxhbmltYXRpb246X3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsX2VsZW1lbnRUeXBlLmRlZmF1bHRdKSxtb3VudE9uRW50ZXI6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsdW5tb3VudE9uRXhpdDpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbH0sZGVmYXVsdFByb3BzPXtjb21wb25lbnRDbGFzczpcImRpdlwiLGFuaW1hdGlvbjohMCxtb3VudE9uRW50ZXI6ITEsdW5tb3VudE9uRXhpdDohMX0sY29udGV4dFR5cGVzPXskYnNfdGFiQ29udGFpbmVyOl9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7YWN0aXZlS2V5Ol9wcm9wVHlwZXMuZGVmYXVsdC5hbnl9KX0sY2hpbGRDb250ZXh0VHlwZXM9eyRic190YWJDb250ZW50Ol9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7YnNDbGFzczpfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLGFuaW1hdGlvbjpfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxfZWxlbWVudFR5cGUuZGVmYXVsdF0pLGFjdGl2ZUtleTpfcHJvcFR5cGVzLmRlZmF1bHQuYW55LG1vdW50T25FbnRlcjpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCx1bm1vdW50T25FeGl0Ol9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLG9uUGFuZUVudGVyOl9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQsb25QYW5lRXhpdGVkOl9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQsZXhpdGluZzpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbC5pc1JlcXVpcmVkfSl9LFRhYkNvbnRlbnQ9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gVGFiQ29udGVudCh0LG4pe3ZhciBpO3JldHVybihpPWUuY2FsbCh0aGlzLHQsbil8fHRoaXMpLmhhbmRsZVBhbmVFbnRlcj1pLmhhbmRsZVBhbmVFbnRlci5iaW5kKCgwLF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKGkpKSksaS5oYW5kbGVQYW5lRXhpdGVkPWkuaGFuZGxlUGFuZUV4aXRlZC5iaW5kKCgwLF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKGkpKSksaS5zdGF0ZT17YWN0aXZlS2V5Om51bGwsYWN0aXZlQ2hpbGQ6bnVsbH0saX0oMCxfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoVGFiQ29udGVudCxlKTt2YXIgdD1UYWJDb250ZW50LnByb3RvdHlwZTtyZXR1cm4gdC5nZXRDaGlsZENvbnRleHQ9ZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCl7dmFyIGU9dGhpcy5wcm9wcyx0PWUuYnNDbGFzcyxuPWUuYW5pbWF0aW9uLGk9ZS5tb3VudE9uRW50ZXIsYT1lLnVubW91bnRPbkV4aXQsbz10aGlzLnN0YXRlLmFjdGl2ZUtleSxzPXRoaXMuZ2V0Q29udGFpbmVyQWN0aXZlS2V5KCkscj1udWxsIT1vJiZvIT09cztyZXR1cm57JGJzX3RhYkNvbnRlbnQ6e2JzQ2xhc3M6dCxhbmltYXRpb246bixhY3RpdmVLZXk6bnVsbCE9bz9vOnMsbW91bnRPbkVudGVyOmksdW5tb3VudE9uRXhpdDphLG9uUGFuZUVudGVyOnRoaXMuaGFuZGxlUGFuZUVudGVyLG9uUGFuZUV4aXRlZDp0aGlzLmhhbmRsZVBhbmVFeGl0ZWQsZXhpdGluZzpyfX19LHQuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcz1mdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGUpeyFlLmFuaW1hdGlvbiYmdGhpcy5zdGF0ZS5hY3RpdmVDaGlsZCYmdGhpcy5zZXRTdGF0ZSh7YWN0aXZlS2V5Om51bGwsYWN0aXZlQ2hpbGQ6bnVsbH0pfSx0LmNvbXBvbmVudFdpbGxVbm1vdW50PWZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCl7dGhpcy5pc1VubW91bnRlZD0hMH0sdC5nZXRDb250YWluZXJBY3RpdmVLZXk9ZnVuY3Rpb24gZ2V0Q29udGFpbmVyQWN0aXZlS2V5KCl7dmFyIGU9dGhpcy5jb250ZXh0LiRic190YWJDb250YWluZXI7cmV0dXJuIGUmJmUuYWN0aXZlS2V5fSx0LmhhbmRsZVBhbmVFbnRlcj1mdW5jdGlvbiBoYW5kbGVQYW5lRW50ZXIoZSx0KXtyZXR1cm4hIXRoaXMucHJvcHMuYW5pbWF0aW9uJiYodD09PXRoaXMuZ2V0Q29udGFpbmVyQWN0aXZlS2V5KCkmJih0aGlzLnNldFN0YXRlKHthY3RpdmVLZXk6dCxhY3RpdmVDaGlsZDplfSksITApKX0sdC5oYW5kbGVQYW5lRXhpdGVkPWZ1bmN0aW9uIGhhbmRsZVBhbmVFeGl0ZWQoZSl7dGhpcy5pc1VubW91bnRlZHx8dGhpcy5zZXRTdGF0ZShmdW5jdGlvbih0KXtyZXR1cm4gdC5hY3RpdmVDaGlsZCE9PWU/bnVsbDp7YWN0aXZlS2V5Om51bGwsYWN0aXZlQ2hpbGQ6bnVsbH19KX0sdC5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIGU9dGhpcy5wcm9wcyx0PWUuY29tcG9uZW50Q2xhc3Msbj1lLmNsYXNzTmFtZSxpPSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShlLFtcImNvbXBvbmVudENsYXNzXCIsXCJjbGFzc05hbWVcIl0pLGE9KDAsX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wc0FuZE9taXQpKGksW1wiYW5pbWF0aW9uXCIsXCJtb3VudE9uRW50ZXJcIixcInVubW91bnRPbkV4aXRcIl0pLG89YVswXSxzPWFbMV07cmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQodCwoMCxfZXh0ZW5kczIuZGVmYXVsdCkoe30scyx7Y2xhc3NOYW1lOigwLF9jbGFzc25hbWVzLmRlZmF1bHQpKG4sKDAsX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkobyxcImNvbnRlbnRcIikpfSkpfSxUYWJDb250ZW50fShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1RhYkNvbnRlbnQucHJvcFR5cGVzPXByb3BUeXBlcyxUYWJDb250ZW50LmRlZmF1bHRQcm9wcz1kZWZhdWx0UHJvcHMsVGFiQ29udGVudC5jb250ZXh0VHlwZXM9Y29udGV4dFR5cGVzLFRhYkNvbnRlbnQuY2hpbGRDb250ZXh0VHlwZXM9Y2hpbGRDb250ZXh0VHlwZXM7dmFyIF9kZWZhdWx0PSgwLF9ib290c3RyYXBVdGlscy5ic0NsYXNzKShcInRhYlwiLFRhYkNvbnRlbnQpO2V4cG9ydHMuZGVmYXVsdD1fZGVmYXVsdCxtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbFJoWWtOdmJuUmxiblF1YW5NaVhTd2libUZ0WlhNaU9sc2lYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENJc0luSmxjWFZwY21VaUxDSmxlSEJ2Y25Seklpd2lYMTlsYzAxdlpIVnNaU0lzSW1SbFptRjFiSFFpTENKZlpYaDBaVzVrY3pJaUxDSmZiMkpxWldOMFYybDBhRzkxZEZCeWIzQmxjblJwWlhOTWIyOXpaVElpTENKZmFXNW9aWEpwZEhOTWIyOXpaVElpTENKZllYTnpaWEowVkdocGMwbHVhWFJwWVd4cGVtVmtNaUlzSWw5amJHRnpjMjVoYldWeklpd2lYM0psWVdOMElpd2lYM0J5YjNCVWVYQmxjeUlzSWw5bGJHVnRaVzUwVkhsd1pTSXNJbDlpYjI5MGMzUnlZWEJWZEdsc2N5SXNJbkJ5YjNCVWVYQmxjeUlzSW1OdmJYQnZibVZ1ZEVOc1lYTnpJaXdpWVc1cGJXRjBhVzl1SWl3aWIyNWxUMlpVZVhCbElpd2lZbTl2YkNJc0ltMXZkVzUwVDI1RmJuUmxjaUlzSW5WdWJXOTFiblJQYmtWNGFYUWlMQ0prWldaaGRXeDBVSEp2Y0hNaUxDSmpiMjUwWlhoMFZIbHdaWE1pTENJa1luTmZkR0ZpUTI5dWRHRnBibVZ5SWl3aWMyaGhjR1VpTENKaFkzUnBkbVZMWlhraUxDSmhibmtpTENKamFHbHNaRU52Ym5SbGVIUlVlWEJsY3lJc0lpUmljMTkwWVdKRGIyNTBaVzUwSWl3aVluTkRiR0Z6Y3lJc0luTjBjbWx1WnlJc0ltOXVVR0Z1WlVWdWRHVnlJaXdpWm5WdVl5SXNJbWx6VW1WeGRXbHlaV1FpTENKdmJsQmhibVZGZUdsMFpXUWlMQ0psZUdsMGFXNW5JaXdpVkdGaVEyOXVkR1Z1ZENJc0lsOVNaV0ZqZENSRGIyMXdiMjVsYm5RaUxDSndjbTl3Y3lJc0ltTnZiblJsZUhRaUxDSmZkR2hwY3lJc0ltTmhiR3dpTENKMGFHbHpJaXdpYUdGdVpHeGxVR0Z1WlVWdWRHVnlJaXdpWW1sdVpDSXNJbWhoYm1Sc1pWQmhibVZGZUdsMFpXUWlMQ0p6ZEdGMFpTSXNJbUZqZEdsMlpVTm9hV3hrSWl3aVgzQnliM1J2SWl3aWNISnZkRzkwZVhCbElpd2laMlYwUTJocGJHUkRiMjUwWlhoMElpd2lYM1JvYVhNa2NISnZjSE1pTENKemRHRjBaVUZqZEdsMlpVdGxlU0lzSW1OdmJuUmhhVzVsY2tGamRHbDJaVXRsZVNJc0ltZGxkRU52Ym5SaGFXNWxja0ZqZEdsMlpVdGxlU0lzSW1OdmJYQnZibVZ1ZEZkcGJHeFNaV05sYVhabFVISnZjSE1pTENKdVpYaDBVSEp2Y0hNaUxDSnpaWFJUZEdGMFpTSXNJbU52YlhCdmJtVnVkRmRwYkd4VmJtMXZkVzUwSWl3aWFYTlZibTF2ZFc1MFpXUWlMQ0owWVdKRGIyNTBZV2x1WlhJaUxDSmphR2xzWkNJc0ltTm9hV3hrUzJWNUlpd2lYM0psWmlJc0luSmxibVJsY2lJc0lsOTBhR2x6SkhCeWIzQnpNaUlzSWtOdmJYQnZibVZ1ZENJc0ltTnNZWE56VG1GdFpTSXNJbDl6Y0d4cGRFSnpVSEp2Y0hOQmJtUlBiV2wwSWl3aWMzQnNhWFJDYzFCeWIzQnpRVzVrVDIxcGRDSXNJbUp6VUhKdmNITWlMQ0psYkdWdFpXNTBVSEp2Y0hNaUxDSmpjbVZoZEdWRmJHVnRaVzUwSWl3aWNISmxabWw0SWl3aVgyUmxabUYxYkhRaUxDSnRiMlIxYkdVaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJSVUVzU1VGQlNVRXNkVUpCUVhsQ1F5eFJRVUZSTEhkRVFVVnlRME1zVVVGQlVVTXNXVUZCWVN4RlFVTnlRa1FzVVVGQlVVVXNZVUZCVlN4RlFVVnNRaXhKUVVGSlF5eFZRVUZaVEN4MVFrRkJkVUpETEZGQlFWRXNNa05CUlRORFN5d3JRa0ZCYVVOT0xIVkNRVUYxUWtNc1VVRkJVU3huUlVGRmFFVk5MR2RDUVVGclFsQXNkVUpCUVhWQ1F5eFJRVUZSTEdsRVFVVnFSRThzZDBKQlFUQkNVaXgxUWtGQmRVSkRMRkZCUVZFc2VVUkJSWHBFVVN4WlFVRmpWQ3gxUWtGQmRVSkRMRkZCUVZFc1pVRkZOME5UTEU5QlFWTldMSFZDUVVGMVFrTXNVVUZCVVN4VlFVVjRRMVVzVjBGQllWZ3NkVUpCUVhWQ1F5eFJRVUZSTEdWQlJUVkRWeXhoUVVGbFdpeDFRa0ZCZFVKRExGRkJRVkVzY1VOQlJUbERXU3huUWtGQmEwSmFMRkZCUVZFc01FSkJSVEZDWVN4VlFVRlpMRU5CUTJSRExHVkJRV2RDU0N4aFFVRmhVaXhSUVU4M1Fsa3NWVUZCVjB3c1YwRkJWMUFzVVVGQlVXRXNWVUZCVlN4RFFVRkRUaXhYUVVGWFVDeFJRVUZSWXl4TFFVRk5UaXhoUVVGaFVpeFZRVXN2UldVc1lVRkJZMUlzVjBGQlYxQXNVVUZCVVdNc1MwRkxha05GTEdOQlFXVlVMRmRCUVZkUUxGRkJRVkZqTEUxQlJXaERSeXhoUVVGbExFTkJRMnBDVGl4bFFVRm5RaXhOUVVOb1FrTXNWMEZCVnl4RlFVTllSeXhqUVVGakxFVkJRMlJETEdWQlFXVXNSMEZGWWtVc1lVRkJaU3hEUVVOcVFrTXNhVUpCUVd0Q1dpeFhRVUZYVUN4UlFVRlJiMElzVFVGQlRTeERRVU42UTBNc1ZVRkJWMlFzVjBGQlYxQXNVVUZCVVhOQ0xFOUJSemxDUXl4clFrRkJiMElzUTBGRGRFSkRMR1ZCUVdkQ2FrSXNWMEZCVjFBc1VVRkJVVzlDTEUxQlFVMHNRMEZEZGtOTExGRkJRVk5zUWl4WFFVRlhVQ3hSUVVGUk1FSXNUMEZETlVKa0xGVkJRVmRNTEZkQlFWZFFMRkZCUVZGaExGVkJRVlVzUTBGQlEwNHNWMEZCVjFBc1VVRkJVV01zUzBGQlRVNHNZVUZCWVZJc1ZVRkRMMFZ4UWl4VlFVRlhaQ3hYUVVGWFVDeFJRVUZSYzBJc1NVRkRPVUpRTEdGQlFXTlNMRmRCUVZkUUxGRkJRVkZqTEV0QlEycERSU3hqUVVGbFZDeFhRVUZYVUN4UlFVRlJZeXhMUVVOc1EyRXNXVUZCWVhCQ0xGZEJRVmRRTEZGQlFWRTBRaXhMUVVGTFF5eFhRVU55UTBNc1lVRkJZM1pDTEZkQlFWZFFMRkZCUVZFMFFpeExRVUZMUXl4WFFVTjBRMFVzVVVGQlUzaENMRmRCUVZkUUxGRkJRVkZqTEV0QlFVdGxMR05CU1dwRFJ5eFhRVVZLTEZOQlFWVkRMRWRCUjFJc1UwRkJVMFFzVjBGQlYwVXNSVUZCVDBNc1IwRkRla0lzU1VGQlNVTXNSVUZaU2l4UFFWWkJRU3hGUVVGUlNDeEZRVUZwUWtrc1MwRkJTME1zUzBGQlRVb3NSVUZCVDBNc1NVRkJXVWNzVFVGRGFrUkRMR2RDUVVGclFrZ3NSVUZCVFVjc1owSkJRV2RDUXl4TlFVRkxMRVZCUVVsd1F5eDNRa0ZCZDBKS0xGVkJRVk1zUlVGQlNVa3NkMEpCUVhkQ1NpeFRRVUZUYjBNc1MwRkROMGhCTEVWQlFVMUxMR2xDUVVGdFFrd3NSVUZCVFVzc2FVSkJRV2xDUkN4TlFVRkxMRVZCUVVsd1F5eDNRa0ZCZDBKS0xGVkJRVk1zUlVGQlNVa3NkMEpCUVhkQ1NpeFRRVUZUYjBNc1MwRkpMMGhCTEVWQlFVMU5MRTFCUVZFc1EwRkRXbkpDTEZWQlFWY3NTMEZEV0hOQ0xGbEJRV0VzVFVGRlVsQXNSMEZtVkN4RlFVRkpha01zWjBKQlFXZENTQ3hUUVVGVFowTXNWMEZCV1VNc1IwRnJRbnBETEVsQlFVbFhMRVZCUVZOYUxGZEJRVmRoTEZWQlowZDRRaXhQUVRsR1FVUXNSVUZCVDBVc1owSkJRV3RDTEZOQlFWTkJMR3RDUVVOb1F5eEpRVUZKUXl4RlFVRmpWQ3hMUVVGTFNpeE5RVU51UWxRc1JVRkJWWE5DTEVWQlFWbDBRaXhSUVVOMFFtSXNSVUZCV1cxRExFVkJRVmx1UXl4VlFVTjRRa2NzUlVGQlpXZERMRVZCUVZsb1F5eGhRVU16UWtNc1JVRkJaMElyUWl4RlFVRlpMMElzWTBGRE5VSm5ReXhGUVVGcFFsWXNTMEZCUzBrc1RVRkJUWEpDTEZWQlF6VkNORUlzUlVGQmNVSllMRXRCUVV0WkxIZENRVVV4UW01Q0xFVkJRVFJDTEUxQlFXeENhVUlzUjBGQk1FSkJMRWxCUVcxQ1F5eEZRVU16UkN4TlFVRlBMRU5CUTB4NlFpeGxRVUZuUWl4RFFVTmtReXhSUVVGVFFTeEZRVU5VWWl4VlFVRlhRU3hGUVVOWVV5eFZRVTQ0UWl4TlFVRnNRakpDTEVWQlFYbENRU3hGUVVGcFFrTXNSVUZQZEVSc1F5eGhRVUZqUVN4RlFVTmtReXhqUVVGbFFTeEZRVU5tVnl4WlFVRmhWeXhMUVVGTFF5eG5Ra0ZEYkVKVUxHRkJRV05STEV0QlFVdEhMR2xDUVVOdVFsWXNVVUZCVTBFc1MwRkxabUVzUlVGQlQwOHNNRUpCUVRSQ0xGTkJRVk5CTERCQ1FVRXdRa01zU1VGREwwUkJMRVZCUVZWNFF5eFhRVUZoTUVJc1MwRkJTMGtzVFVGQlRVTXNZVUZEY2tOTUxFdEJRVXRsTEZOQlFWTXNRMEZEV21oRExGVkJRVmNzUzBGRFdITkNMRmxCUVdFc1VVRkxia0pETEVWQlFVOVZMSEZDUVVGMVFpeFRRVUZUUVN4MVFrRkRja05vUWl4TFFVRkxhVUlzWVVGQll5eEhRVWR5UWxnc1JVRkJUMDBzYzBKQlFYZENMRk5CUVZOQkxIZENRVU4wUXl4SlFVRkpUU3hGUVVGbGJFSXNTMEZCUzBnc1VVRkJVV2hDTEdsQ1FVTm9ReXhQUVVGUGNVTXNSMEZCWjBKQkxFVkJRV0Z1UXl4WFFVZDBRM1ZDTEVWQlFVOU1MR2RDUVVGclFpeFRRVUZUUVN4blFrRkJaMEpyUWl4RlFVRlBReXhIUVVOMlJDeFJRVUZMY0VJc1MwRkJTMG9zVFVGQlRYUkNMRmxCUzFvNFF5eEpRVUZoY0VJc1MwRkJTMWtzTUVKQlNYUkNXaXhMUVVGTFpTeFRRVUZUTEVOQlExcG9ReXhWUVVGWGNVTXNSVUZEV0dZc1dVRkJZV01zUzBGRlVpeExRVWRVWWl4RlFVRlBTQ3hwUWtGQmJVSXNVMEZCVTBFc2FVSkJRV2xDWjBJc1IwRkZPVU51UWl4TFFVRkxhVUlzWVVGSlZHcENMRXRCUVV0bExGTkJRVk1zVTBGQlZVMHNSMEZIZEVJc1QwRkdhMEpCTEVWQlFVdG9RaXhqUVVWSVl5eEZRVU5ZTEV0QlIwWXNRMEZEVEhCRExGVkJRVmNzUzBGRFdITkNMRmxCUVdFc1UwRkxia0pETEVWQlFVOW5RaXhQUVVGVExGTkJRVk5CTEZOQlEzWkNMRWxCUVVsRExFVkJRV1YyUWl4TFFVRkxTaXhOUVVOd1FqUkNMRVZCUVZsRUxFVkJRV0ZzUkN4bFFVTjZRbTlFTEVWQlFWbEdMRVZCUVdGRkxGVkJRM3BDTjBJc1IwRkJVU3hGUVVGSmFFTXNLMEpCUVN0Q1JpeFRRVUZUTmtRc1JVRkJZeXhEUVVGRExHbENRVUZyUWl4alFVVnlSa2NzUjBGQmRVSXNSVUZCU1haRUxHZENRVUZuUW5kRUxIRkNRVUZ4UWk5Q0xFVkJRVThzUTBGQlF5eFpRVUZoTEdWQlFXZENMR3RDUVVOeVIyZERMRVZCUVZWR0xFVkJRWEZDTEVkQlF5OUNSeXhGUVVGbFNDeEZRVUZ4UWl4SFFVVjRReXhQUVVGUE1VUXNUMEZCVDA0c1VVRkJVVzlGTEdOQlFXTk9MRWRCUVZjc1JVRkJTVGRFTEZWQlFWVkVMRk5CUVZNc1IwRkJTVzFGTEVWQlFXTXNRMEZEZEVaS0xGZEJRVmNzUlVGQlNURkVMRmxCUVZsTUxGTkJRVk1yUkN4SFFVRlhMRVZCUVVsMFJDeG5Ra0ZCWjBJMFJDeFJRVUZSU0N4RlFVRlRMR2RDUVVscVJteERMRmRCYmtoVUxFTkJiMGhGTVVJc1QwRkJUMDRzVVVGQlVUaEVMRmRCUldwQ09VSXNWMEZCVjNSQ0xGVkJRVmxCTEZWQlEzWkNjMElzVjBGQlYyWXNZVUZCWlVFc1lVRkRNVUpsTEZkQlFWZGtMR0ZCUVdWQkxHRkJRekZDWXl4WFFVRlhWQ3hyUWtGQmIwSkJMR3RDUVVVdlFpeEpRVUZKSzBNc1ZVRkJWeXhGUVVGSk4wUXNaMEpCUVdkQ1owSXNVMEZCVXl4TlFVRlBUeXhaUVVWdVJHeERMRkZCUVZGRkxGRkJRVlZ6UlN4VFFVTnNRa01zVDBGQlQzcEZMRkZCUVZWQkxGRkJRV2xDSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdOMExXSnZiM1J6ZEhKaGNDOXNhV0l2VkdGaVEyOXVkR1Z1ZEM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PXZvaWQgMDt2YXIgX2V4dGVuZHMyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKSxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpLF9pbmhlcml0c0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSksX2Fzc2VydFRoaXNJbml0aWFsaXplZDI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSksX2NsYXNzbmFtZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKSxfcHJvcFR5cGVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpLF9lbGVtZW50VHlwZT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzLWV4dHJhL2xpYi9lbGVtZW50VHlwZVwiKSksX3dhcm5pbmc9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSksX2Jvb3RzdHJhcFV0aWxzPXJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpLF9jcmVhdGVDaGFpbmVkRnVuY3Rpb249X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb25cIikpLF9GYWRlPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRmFkZVwiKSkscHJvcFR5cGVzPXtldmVudEtleTpfcHJvcFR5cGVzLmRlZmF1bHQuYW55LGFuaW1hdGlvbjpfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxfZWxlbWVudFR5cGUuZGVmYXVsdF0pLGlkOl9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXCJhcmlhLWxhYmVsbGVkYnlcIjpfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLGJzQ2xhc3M6X3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxvbkVudGVyOl9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLG9uRW50ZXJpbmc6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsb25FbnRlcmVkOl9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLG9uRXhpdDpfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxvbkV4aXRpbmc6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsb25FeGl0ZWQ6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsbW91bnRPbkVudGVyOl9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLHVubW91bnRPbkV4aXQ6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2x9LGNvbnRleHRUeXBlcz17JGJzX3RhYkNvbnRhaW5lcjpfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe2dldFRhYklkOl9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLGdldFBhbmVJZDpfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY30pLCRic190YWJDb250ZW50Ol9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7YnNDbGFzczpfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLGFuaW1hdGlvbjpfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxfZWxlbWVudFR5cGUuZGVmYXVsdF0pLGFjdGl2ZUtleTpfcHJvcFR5cGVzLmRlZmF1bHQuYW55LG1vdW50T25FbnRlcjpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCx1bm1vdW50T25FeGl0Ol9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLG9uUGFuZUVudGVyOl9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQsb25QYW5lRXhpdGVkOl9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQsZXhpdGluZzpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbC5pc1JlcXVpcmVkfSl9LGNoaWxkQ29udGV4dFR5cGVzPXskYnNfdGFiQ29udGFpbmVyOl9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbbnVsbF0pfSxUYWJQYW5lPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIFRhYlBhbmUodCxuKXt2YXIgaTtyZXR1cm4oaT1lLmNhbGwodGhpcyx0LG4pfHx0aGlzKS5oYW5kbGVFbnRlcj1pLmhhbmRsZUVudGVyLmJpbmQoKDAsX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoKDAsX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoaSkpKSxpLmhhbmRsZUV4aXRlZD1pLmhhbmRsZUV4aXRlZC5iaW5kKCgwLF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKGkpKSksaS5pbj0hMSxpfSgwLF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShUYWJQYW5lLGUpO3ZhciB0PVRhYlBhbmUucHJvdG90eXBlO3JldHVybiB0LmdldENoaWxkQ29udGV4dD1mdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKXtyZXR1cm57JGJzX3RhYkNvbnRhaW5lcjpudWxsfX0sdC5jb21wb25lbnREaWRNb3VudD1mdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpe3RoaXMuc2hvdWxkQmVJbigpJiZ0aGlzLmhhbmRsZUVudGVyKCl9LHQuY29tcG9uZW50RGlkVXBkYXRlPWZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpe3RoaXMuaW4/dGhpcy5zaG91bGRCZUluKCl8fHRoaXMuaGFuZGxlRXhpdGVkKCk6dGhpcy5zaG91bGRCZUluKCkmJnRoaXMuaGFuZGxlRW50ZXIoKX0sdC5jb21wb25lbnRXaWxsVW5tb3VudD1mdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpe3RoaXMuaW4mJnRoaXMuaGFuZGxlRXhpdGVkKCl9LHQuZ2V0QW5pbWF0aW9uPWZ1bmN0aW9uIGdldEFuaW1hdGlvbigpe2lmKG51bGwhPXRoaXMucHJvcHMuYW5pbWF0aW9uKXJldHVybiB0aGlzLnByb3BzLmFuaW1hdGlvbjt2YXIgZT10aGlzLmNvbnRleHQuJGJzX3RhYkNvbnRlbnQ7cmV0dXJuIGUmJmUuYW5pbWF0aW9ufSx0LmhhbmRsZUVudGVyPWZ1bmN0aW9uIGhhbmRsZUVudGVyKCl7dmFyIGU9dGhpcy5jb250ZXh0LiRic190YWJDb250ZW50O2UmJih0aGlzLmluPWUub25QYW5lRW50ZXIodGhpcyx0aGlzLnByb3BzLmV2ZW50S2V5KSl9LHQuaGFuZGxlRXhpdGVkPWZ1bmN0aW9uIGhhbmRsZUV4aXRlZCgpe3ZhciBlPXRoaXMuY29udGV4dC4kYnNfdGFiQ29udGVudDtlJiYoZS5vblBhbmVFeGl0ZWQodGhpcyksdGhpcy5pbj0hMSl9LHQuaXNBY3RpdmU9ZnVuY3Rpb24gaXNBY3RpdmUoKXt2YXIgZT10aGlzLmNvbnRleHQuJGJzX3RhYkNvbnRlbnQsdD1lJiZlLmFjdGl2ZUtleTtyZXR1cm4gdGhpcy5wcm9wcy5ldmVudEtleT09PXR9LHQuc2hvdWxkQmVJbj1mdW5jdGlvbiBzaG91bGRCZUluKCl7cmV0dXJuIHRoaXMuZ2V0QW5pbWF0aW9uKCkmJnRoaXMuaXNBY3RpdmUoKX0sdC5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIGU9dGhpcy5wcm9wcyx0PWUuZXZlbnRLZXksbj1lLmNsYXNzTmFtZSxpPWUub25FbnRlcixhPWUub25FbnRlcmluZyxvPWUub25FbnRlcmVkLHI9ZS5vbkV4aXQscz1lLm9uRXhpdGluZyxwPWUub25FeGl0ZWQsbD1lLm1vdW50T25FbnRlcix1PWUudW5tb3VudE9uRXhpdCxkPSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShlLFtcImV2ZW50S2V5XCIsXCJjbGFzc05hbWVcIixcIm9uRW50ZXJcIixcIm9uRW50ZXJpbmdcIixcIm9uRW50ZXJlZFwiLFwib25FeGl0XCIsXCJvbkV4aXRpbmdcIixcIm9uRXhpdGVkXCIsXCJtb3VudE9uRW50ZXJcIixcInVubW91bnRPbkV4aXRcIl0pLGY9dGhpcy5jb250ZXh0LF89Zi4kYnNfdGFiQ29udGVudCxjPWYuJGJzX3RhYkNvbnRhaW5lcixoPSgwLF9ib290c3RyYXBVdGlscy5zcGxpdEJzUHJvcHNBbmRPbWl0KShkLFtcImFuaW1hdGlvblwiXSksYj1oWzBdLFQ9aFsxXSx5PXRoaXMuaXNBY3RpdmUoKSxFPXRoaXMuZ2V0QW5pbWF0aW9uKCkseD1udWxsIT1sP2w6XyYmXy5tb3VudE9uRW50ZXIsbT1udWxsIT11P3U6XyYmXy51bm1vdW50T25FeGl0O2lmKCF5JiYhRSYmbSlyZXR1cm4gbnVsbDt2YXIgZz0hMD09PUU/X0ZhZGUuZGVmYXVsdDpFfHxudWxsO18mJihiLmJzQ2xhc3M9KDAsX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkoXyxcInBhbmVcIikpO3ZhciB2PSgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSwoMCxfYm9vdHN0cmFwVXRpbHMuZ2V0Q2xhc3NTZXQpKGIpLHthY3RpdmU6eX0pO2MmJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoMCxfd2FybmluZy5kZWZhdWx0KSghVC5pZCYmIVRbXCJhcmlhLWxhYmVsbGVkYnlcIl0sXCJJbiB0aGUgY29udGV4dCBvZiBhIGA8VGFiQ29udGFpbmVyPmAsIGA8VGFiUGFuZXM+YCBhcmUgZ2l2ZW4gZ2VuZXJhdGVkIGBpZGAgYW5kIGBhcmlhLWxhYmVsbGVkYnlgIGF0dHJpYnV0ZXMgZm9yIHRoZSBzYWtlIG9mIHByb3BlciBjb21wb25lbnQgYWNjZXNzaWJpbGl0eS4gQW55IHByb3ZpZGVkIG9uZXMgd2lsbCBiZSBpZ25vcmVkLiBUbyBjb250cm9sIHRoZXNlIGF0dHJpYnV0ZXMgZGlyZWN0bHkgcHJvdmlkZSBhIGBnZW5lcmF0ZUNoaWxkSWRgIHByb3AgdG8gdGhlIHBhcmVudCBgPFRhYkNvbnRhaW5lcj5gLlwiKSxULmlkPWMuZ2V0UGFuZUlkKHQpLFRbXCJhcmlhLWxhYmVsbGVkYnlcIl09Yy5nZXRUYWJJZCh0KSk7dmFyIEM9X3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSxULHtyb2xlOlwidGFicGFuZWxcIixcImFyaWEtaGlkZGVuXCI6IXksY2xhc3NOYW1lOigwLF9jbGFzc25hbWVzLmRlZmF1bHQpKG4sdil9KSk7aWYoZyl7dmFyIHE9XyYmXy5leGl0aW5nO3JldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KGcse2luOnkmJiFxLG9uRW50ZXI6KDAsX2NyZWF0ZUNoYWluZWRGdW5jdGlvbi5kZWZhdWx0KSh0aGlzLmhhbmRsZUVudGVyLGkpLG9uRW50ZXJpbmc6YSxvbkVudGVyZWQ6byxvbkV4aXQ6cixvbkV4aXRpbmc6cyxvbkV4aXRlZDooMCxfY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uLmRlZmF1bHQpKHRoaXMuaGFuZGxlRXhpdGVkLHApLG1vdW50T25FbnRlcjp4LHVubW91bnRPbkV4aXQ6bX0sQyl9cmV0dXJuIEN9LFRhYlBhbmV9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7VGFiUGFuZS5wcm9wVHlwZXM9cHJvcFR5cGVzLFRhYlBhbmUuY29udGV4dFR5cGVzPWNvbnRleHRUeXBlcyxUYWJQYW5lLmNoaWxkQ29udGV4dFR5cGVzPWNoaWxkQ29udGV4dFR5cGVzO3ZhciBfZGVmYXVsdD0oMCxfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoXCJ0YWItcGFuZVwiLFRhYlBhbmUpO2V4cG9ydHMuZGVmYXVsdD1fZGVmYXVsdCxtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbFJoWWxCaGJtVXVhbk1pWFN3aWJtRnRaWE1pT2xzaVgybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ0lzSW5KbGNYVnBjbVVpTENKbGVIQnZjblJ6SWl3aVgxOWxjMDF2WkhWc1pTSXNJbVJsWm1GMWJIUWlMQ0pmWlhoMFpXNWtjeklpTENKZmIySnFaV04wVjJsMGFHOTFkRkJ5YjNCbGNuUnBaWE5NYjI5elpUSWlMQ0pmYVc1b1pYSnBkSE5NYjI5elpUSWlMQ0pmWVhOelpYSjBWR2hwYzBsdWFYUnBZV3hwZW1Wa01pSXNJbDlqYkdGemMyNWhiV1Z6SWl3aVgzSmxZV04wSWl3aVgzQnliM0JVZVhCbGN5SXNJbDlsYkdWdFpXNTBWSGx3WlNJc0lsOTNZWEp1YVc1bklpd2lYMkp2YjNSemRISmhjRlYwYVd4eklpd2lYMk55WldGMFpVTm9ZV2x1WldSR2RXNWpkR2x2YmlJc0lsOUdZV1JsSWl3aWNISnZjRlI1Y0dWeklpd2laWFpsYm5STFpYa2lMQ0poYm5raUxDSmhibWx0WVhScGIyNGlMQ0p2Ym1WUFpsUjVjR1VpTENKaWIyOXNJaXdpYVdRaUxDSnpkSEpwYm1jaUxDSmhjbWxoTFd4aFltVnNiR1ZrWW5raUxDSmljME5zWVhOeklpd2liMjVGYm5SbGNpSXNJbVoxYm1NaUxDSnZia1Z1ZEdWeWFXNW5JaXdpYjI1RmJuUmxjbVZrSWl3aWIyNUZlR2wwSWl3aWIyNUZlR2wwYVc1bklpd2liMjVGZUdsMFpXUWlMQ0p0YjNWdWRFOXVSVzUwWlhJaUxDSjFibTF2ZFc1MFQyNUZlR2wwSWl3aVkyOXVkR1Y0ZEZSNWNHVnpJaXdpSkdKelgzUmhZa052Ym5SaGFXNWxjaUlzSW5Ob1lYQmxJaXdpWjJWMFZHRmlTV1FpTENKblpYUlFZVzVsU1dRaUxDSWtZbk5mZEdGaVEyOXVkR1Z1ZENJc0ltRmpkR2wyWlV0bGVTSXNJbTl1VUdGdVpVVnVkR1Z5SWl3aWFYTlNaWEYxYVhKbFpDSXNJbTl1VUdGdVpVVjRhWFJsWkNJc0ltVjRhWFJwYm1jaUxDSmphR2xzWkVOdmJuUmxlSFJVZVhCbGN5SXNJbTl1WlU5bUlpd2lWR0ZpVUdGdVpTSXNJbDlTWldGamRDUkRiMjF3YjI1bGJuUWlMQ0p3Y205d2N5SXNJbU52Ym5SbGVIUWlMQ0pmZEdocGN5SXNJbU5oYkd3aUxDSjBhR2x6SWl3aWFHRnVaR3hsUlc1MFpYSWlMQ0ppYVc1a0lpd2lhR0Z1Wkd4bFJYaHBkR1ZrSWl3aWFXNGlMQ0pmY0hKdmRHOGlMQ0p3Y205MGIzUjVjR1VpTENKblpYUkRhR2xzWkVOdmJuUmxlSFFpTENKamIyMXdiMjVsYm5SRWFXUk5iM1Z1ZENJc0luTm9iM1ZzWkVKbFNXNGlMQ0pqYjIxd2IyNWxiblJFYVdSVmNHUmhkR1VpTENKamIyMXdiMjVsYm5SWGFXeHNWVzV0YjNWdWRDSXNJbWRsZEVGdWFXMWhkR2x2YmlJc0luUmhZa052Ym5SbGJuUWlMQ0pwYzBGamRHbDJaU0lzSW5KbGJtUmxjaUlzSWw5MGFHbHpKSEJ5YjNCeklpd2lZMnhoYzNOT1lXMWxJaXdpY0hKdmNITk5iM1Z1ZEU5dVJXNTBaWElpTENKd2NtOXdjMVZ1Ylc5MWJuUlBia1Y0YVhRaUxDSmZkR2hwY3lSamIyNTBaWGgwSWl3aWRHRmlRMjl1ZEdGcGJtVnlJaXdpWDNOd2JHbDBRbk5RY205d2MwRnVaRTl0YVhRaUxDSnpjR3hwZEVKelVISnZjSE5CYm1SUGJXbDBJaXdpWW5OUWNtOXdjeUlzSW1Wc1pXMWxiblJRY205d2N5SXNJbUZqZEdsMlpTSXNJbFJ5WVc1emFYUnBiMjRpTENKd2NtVm1hWGdpTENKamJHRnpjMlZ6SWl3aVoyVjBRMnhoYzNOVFpYUWlMQ0p3Y205alpYTnpJaXdpWlc1Mklpd2lUazlFUlY5RlRsWWlMQ0p3WVc1bElpd2lZM0psWVhSbFJXeGxiV1Z1ZENJc0luSnZiR1VpTENKaGNtbGhMV2hwWkdSbGJpSXNJa052YlhCdmJtVnVkQ0lzSWw5a1pXWmhkV3gwSWl3aWJXOWtkV3hsSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4aFFVVkJMRWxCUVVsQkxIVkNRVUY1UWtNc1VVRkJVU3gzUkVGRmNrTkRMRkZCUVZGRExGbEJRV0VzUlVGRGNrSkVMRkZCUVZGRkxHRkJRVlVzUlVGRmJFSXNTVUZCU1VNc1ZVRkJXVXdzZFVKQlFYVkNReXhSUVVGUkxESkRRVVV6UTBzc0swSkJRV2xEVGl4MVFrRkJkVUpETEZGQlFWRXNaMFZCUldoRlRTeG5Ra0ZCYTBKUUxIVkNRVUYxUWtNc1VVRkJVU3hwUkVGRmFrUlBMSGRDUVVFd1FsSXNkVUpCUVhWQ1F5eFJRVUZSTEhsRVFVVjZSRkVzV1VGQlkxUXNkVUpCUVhWQ1F5eFJRVUZSTEdWQlJUZERVeXhQUVVGVFZpeDFRa0ZCZFVKRExGRkJRVkVzVlVGRmVFTlZMRmRCUVdGWUxIVkNRVUYxUWtNc1VVRkJVU3hsUVVVMVExY3NZVUZCWlZvc2RVSkJRWFZDUXl4UlFVRlJMSEZEUVVVNVExa3NVMEZCVjJJc2RVSkJRWFZDUXl4UlFVRlJMRmxCUlRGRFlTeG5Ra0ZCYTBKaUxGRkJRVkVzTUVKQlJURkNZeXgxUWtGQmVVSm1MSFZDUVVGMVFrTXNVVUZCVVN4clEwRkZlRVJsTEUxQlFWRm9RaXgxUWtGQmRVSkRMRkZCUVZFc1YwRkZka05uUWl4VlFVRlpMRU5CU1dSRExGTkJRVlZRTEZkQlFWZFFMRkZCUVZGbExFbEJUemRDUXl4VlFVRlhWQ3hYUVVGWFVDeFJRVUZSYVVJc1ZVRkJWU3hEUVVGRFZpeFhRVUZYVUN4UlFVRlJhMElzUzBGQlRWWXNZVUZCWVZJc1ZVRkhMMFZ0UWl4SFFVRkpXaXhYUVVGWFVDeFJRVUZSYjBJc1QwRkhka0pETEd0Q1FVRnRRbVFzVjBGQlYxQXNVVUZCVVc5Q0xFOUJUM1JEUlN4UlFVRlRaaXhYUVVGWFVDeFJRVUZSYjBJc1QwRkxOVUpITEZGQlFWTm9RaXhYUVVGWFVDeFJRVUZSZDBJc1MwRkxOVUpETEZkQlFWbHNRaXhYUVVGWFVDeFJRVUZSZDBJc1MwRkxMMEpGTEZWQlFWZHVRaXhYUVVGWFVDeFJRVUZSZDBJc1MwRkxPVUpITEU5QlFWRndRaXhYUVVGWFVDeFJRVUZSZDBJc1MwRkxNMEpKTEZWQlFWZHlRaXhYUVVGWFVDeFJRVUZSZDBJc1MwRkxPVUpMTEZOQlFWVjBRaXhYUVVGWFVDeFJRVUZSZDBJc1MwRkxOMEpOTEdGQlFXTjJRaXhYUVVGWFVDeFJRVUZSYTBJc1MwRkxha05oTEdOQlFXVjRRaXhYUVVGWFVDeFJRVUZSYTBJc1RVRkZhRU5qTEdGQlFXVXNRMEZEYWtKRExHbENRVUZyUWpGQ0xGZEJRVmRRTEZGQlFWRnJReXhOUVVGTkxFTkJRM3BEUXl4VFFVRlZOVUlzVjBGQlYxQXNVVUZCVVhkQ0xFdEJRemRDV1N4VlFVRlhOMElzVjBGQlYxQXNVVUZCVVhkQ0xFOUJSV2hEWVN4bFFVRm5RamxDTEZkQlFWZFFMRkZCUVZGclF5eE5RVUZOTEVOQlEzWkRXaXhSUVVGVFppeFhRVUZYVUN4UlFVRlJiMElzVDBGRE5VSktMRlZCUVZkVUxGZEJRVmRRTEZGQlFWRnBRaXhWUVVGVkxFTkJRVU5XTEZkQlFWZFFMRkZCUVZGclFpeExRVUZOVml4aFFVRmhVaXhWUVVNdlJYTkRMRlZCUVZjdlFpeFhRVUZYVUN4UlFVRlJaU3hKUVVNNVFtVXNZVUZCWTNaQ0xGZEJRVmRRTEZGQlFWRnJRaXhMUVVOcVEyRXNZMEZCWlhoQ0xGZEJRVmRRTEZGQlFWRnJRaXhMUVVOc1EzRkNMRmxCUVdGb1F5eFhRVUZYVUN4UlFVRlJkMElzUzBGQlMyZENMRmRCUTNKRFF5eGhRVUZqYkVNc1YwRkJWMUFzVVVGQlVYZENMRXRCUVV0blFpeFhRVU4wUTBVc1VVRkJVMjVETEZkQlFWZFFMRkZCUVZGclFpeExRVUZMYzBJc1kwRlJha05ITEd0Q1FVRnZRaXhEUVVOMFFsWXNhVUpCUVd0Q01VSXNWMEZCVjFBc1VVRkJVVFJETEUxQlFVMHNRMEZCUXl4UlFVY3hRME1zVVVGRlNpeFRRVUZWUXl4SFFVZFNMRk5CUVZORUxGRkJRVkZGTEVWQlFVOURMRWRCUTNSQ0xFbEJRVWxETEVWQlRVb3NUMEZLUVVFc1JVRkJVVWdzUlVGQmFVSkpMRXRCUVV0RExFdEJRVTFLTEVWQlFVOURMRWxCUVZsSExFMUJRMnBFUXl4WlFVRmpTQ3hGUVVGTlJ5eFpRVUZaUXl4TlFVRkxMRVZCUVVscVJDeDNRa0ZCZDBKS0xGVkJRVk1zUlVGQlNVa3NkMEpCUVhkQ1NpeFRRVUZUYVVRc1MwRkRja2hCTEVWQlFVMUxMR0ZCUVdWTUxFVkJRVTFMTEdGQlFXRkVMRTFCUVVzc1JVRkJTV3BFTEhkQ1FVRjNRa29zVlVGQlV5eEZRVUZKU1N4M1FrRkJkMEpLTEZOQlFWTnBSQ3hMUVVOMlNFRXNSVUZCVFUwc1NVRkJTeXhGUVVOS1RpeEhRVlJVTEVWQlFVazVReXhuUWtGQlowSklMRk5CUVZNMlF5eFJRVUZUUXl4SFFWbDBReXhKUVVGSlZTeEZRVUZUV0N4UlFVRlJXU3hWUVdkS2NrSXNUMEU1U1VGRUxFVkJRVTlGTEdkQ1FVRnJRaXhUUVVGVFFTeHJRa0ZEYUVNc1RVRkJUeXhEUVVOTWVrSXNhVUpCUVd0Q0xFOUJTWFJDZFVJc1JVRkJUMGNzYTBKQlFXOUNMRk5CUVZOQkxHOUNRVU01UWxJc1MwRkJTMU1zWTBGRlVGUXNTMEZCUzBNc1pVRkpWRWtzUlVGQlQwc3NiVUpCUVhGQ0xGTkJRVk5CTEhGQ1FVTXZRbFlzUzBGQlMwa3NSMEZEUmtvc1MwRkJTMU1zWTBGRlVsUXNTMEZCUzBjc1pVRkZSVWdzUzBGQlMxTXNZMEZGWkZRc1MwRkJTME1zWlVGSlZFa3NSVUZCVDAwc2NVSkJRWFZDTEZOQlFWTkJMSFZDUVVOcVExZ3NTMEZCUzBrc1NVRkZVRW9zUzBGQlMwY3NaMEpCU1ZSRkxFVkJRVTlQTEdGQlFXVXNVMEZCVTBFc1pVRkROMElzUjBGQk5FSXNUVUZCZUVKYUxFdEJRVXRLTEUxQlFVMHZRaXhWUVVOaUxFOUJRVTl0UXl4TFFVRkxTaXhOUVVGTkwwSXNWVUZIY0VJc1NVRkJTV2RFTEVWQlFXRmlMRXRCUVV0SUxGRkJRVkZZTEdWQlF6bENMRTlCUVU4eVFpeEhRVUZqUVN4RlFVRlhhRVFzVjBGSGJFTjNReXhGUVVGUFNpeFpRVUZqTEZOQlFWTkJMR05CUXpWQ0xFbEJRVWxaTEVWQlFXRmlMRXRCUVV0SUxGRkJRVkZZTEdWQlJYcENNa0lzU1VGSlRHSXNTMEZCUzBrc1IwRkJTMU1zUlVGQlYzcENMRmxCUVZsWkxFdEJRVTFCTEV0QlFVdEtMRTFCUVUxcVF5eFpRVWR3UkRCRExFVkJRVTlHTEdGQlFXVXNVMEZCVTBFc1pVRkROMElzU1VGQlNWVXNSVUZCWVdJc1MwRkJTMGdzVVVGQlVWZ3NaVUZGZWtJeVFpeEpRVWxNUVN4RlFVRlhka0lzWVVGQllWVXNUVUZEZUVKQkxFdEJRVXRKTEVsQlFVc3NTVUZIV2tNc1JVRkJUMU1zVTBGQlZ5eFRRVUZUUVN4WFFVTjZRaXhKUVVGSlJDeEZRVUZoWWl4TFFVRkxTQ3hSUVVGUldDeGxRVU14UWtNc1JVRkJXVEJDTEVkQlFXTkJMRVZCUVZjeFFpeFZRVU42UXl4UFFVRlBZU3hMUVVGTFNpeE5RVUZOYWtNc1YwRkJZWGRDTEVkQlIycERhMElzUlVGQlQwa3NWMEZCWVN4VFFVRlRRU3hoUVVNelFpeFBRVUZQVkN4TFFVRkxXU3huUWtGQmEwSmFMRXRCUVV0akxGbEJSM0pEVkN4RlFVRlBWU3hQUVVGVExGTkJRVk5CTEZOQlEzWkNMRWxCUVVsRExFVkJRV05vUWl4TFFVRkxTaXhOUVVOdVFtcERMRVZCUVZkeFJDeEZRVUZaY2tRc1UwRkRka0p6UkN4RlFVRlpSQ3hGUVVGWlF5eFZRVU40UWpkRExFVkJRVlUwUXl4RlFVRlpOVU1zVVVGRGRFSkZMRVZCUVdFd1F5eEZRVUZaTVVNc1YwRkRla0pETEVWQlFWbDVReXhGUVVGWmVrTXNWVUZEZUVKRExFVkJRVk4zUXl4RlFVRlplRU1zVDBGRGNrSkRMRVZCUVZsMVF5eEZRVUZaZGtNc1ZVRkRlRUpETEVWQlFWZHpReXhGUVVGWmRFTXNVMEZEZGtKM1F5eEZRVUZ2UWtZc1JVRkJXWEpETEdGQlEyaERkME1zUlVGQmNVSklMRVZCUVZsd1F5eGpRVU5xUTJkQ0xFZEJRVkVzUlVGQlNUZERMQ3RDUVVFclFrWXNVMEZCVTIxRkxFVkJRV0VzUTBGQlF5eFhRVUZaTEZsQlFXRXNWVUZCVnl4aFFVRmpMRmxCUVdFc1UwRkJWU3haUVVGaExGZEJRVmtzWlVGQlowSXNhMEpCUTNCTVNTeEZRVUZuUW5CQ0xFdEJRVXRJTEZGQlEzSkNaMElzUlVGQllVOHNSVUZCWTJ4RExHVkJRek5DYlVNc1JVRkJaVVFzUlVGQlkzUkRMR2xDUVVVM1FuZERMRWRCUVhWQ0xFVkJRVWt2UkN4blFrRkJaMEpuUlN4eFFrRkJjVUl6UWl4RlFVRlBMRU5CUVVNc1kwRkRlRVUwUWl4RlFVRlZSaXhGUVVGeFFpeEhRVU12UWtjc1JVRkJaVWdzUlVGQmNVSXNSMEZGY0VOSkxFVkJRVk14UWl4TFFVRkxZeXhYUVVOa2FrUXNSVUZCV1cxRExFdEJRVXRaTEdWQlEycENha01zUlVGQmIwTXNUVUZCY2tKMVF5eEZRVUUwUWtFc1JVRkJiMEpNTEVkQlFXTkJMRVZCUVZkc1F5eGhRVU40UmtNc1JVRkJjME1zVFVGQmRFSjFReXhGUVVFMlFrRXNSVUZCY1VKT0xFZEJRV05CTEVWQlFWZHFReXhqUVVVdlJpeEpRVUZMT0VNc1NVRkJWemRFTEVkQlFXRmxMRVZCUXpOQ0xFOUJRVThzUzBGSFZDeEpRVUZKSzBNc1IwRkJNa0lzU1VGQlpEbEVMRVZCUVhGQ1NpeE5RVUZOV2l4UlFVRlZaMElzUjBGQllTeExRVVV2UkdkRUxFbEJRMFpYTEVWQlFWRnlSQ3hUUVVGVkxFVkJRVWxhTEdkQ1FVRm5RbkZGTEZGQlFWRm1MRVZCUVZrc1UwRkhOVVFzU1VGQlNXZENMRWRCUVZVc1JVRkJTUzlGTEZWQlFWVkVMRk5CUVZNc1NVRkJTU3hGUVVGSlZTeG5Ra0ZCWjBKMVJTeGhRVUZoVGl4SFFVRlZMRU5CUTJ4R1JTeFBRVUZSUVN4SlFVZE9UQ3hKUVVOMVFpeGxRVUY2UWxVc1VVRkJVVU1zU1VGQlNVTXNWMEZCTkVJc1JVRkJTVE5GTEZOQlFWTlVMRlZCUVZVMFJTeEZRVUZoZWtRc1MwRkJUM2xFTEVWQlFXRXNiVUpCUVc5Q0xIbFRRVU53U0VFc1JVRkJZWHBFTEVkQlFVdHhSQ3hGUVVGaGNFTXNWVUZCVlhSQ0xFZEJRM3BET0VRc1JVRkJZU3h0UWtGQmNVSktMRVZCUVdGeVF5eFRRVUZUY2tJc1NVRkhNVVFzU1VGQlNYVkZMRVZCUVU4dlJTeFBRVUZQVGl4UlFVRlJjMFlzWTBGQll5eFBRVUZQTEVWQlFVbHlSaXhWUVVGVlJDeFRRVUZUTEVkQlFVazBSU3hGUVVGakxFTkJRM1JHVnl4TFFVRk5MRmRCUTA1RExHVkJRV2RDV0N4RlFVTm9RbFFzVjBGQlZ5eEZRVUZKTDBRc1dVRkJXVXdzVTBGQlUyOUZMRVZCUVZkWkxFMUJSMnBFTEVkQlFVbEdMRVZCUVZrc1EwRkRaQ3hKUVVGSmNFTXNSVUZCVlhOQ0xFZEJRV05CTEVWQlFWZDBRaXhSUVVOMlF5eFBRVUZQY0VNc1QwRkJUMDRzVVVGQlVYTkdMR05CUVdOU0xFVkJRVmtzUTBGRE9VTjJRaXhIUVVGSmMwSXNTVUZCVjI1RExFVkJRMlp1UWl4VFFVRlRMRVZCUVVsYUxIVkNRVUYxUWxnc1UwRkJVMjFFTEV0QlFVdERMRmxCUVdFM1FpeEhRVU12UkVVc1YwRkJXVUVzUlVGRFdrTXNWVUZCVjBFc1JVRkRXRU1zVDBGQlVVRXNSVUZEVWtNc1ZVRkJWMEVzUlVGRFdFTXNWVUZCVlN4RlFVRkpiRUlzZFVKQlFYVkNXQ3hUUVVGVGJVUXNTMEZCUzBjc1lVRkJZM3BDTEVkQlEycEZReXhoUVVGalFTeEZRVU5rUXl4alFVRmxRU3hIUVVOa2MwUXNSMEZIVEN4UFFVRlBRU3hIUVVkR2VFTXNVVUUzU2xRc1EwRTRTa1YyUXl4UFFVRlBUaXhSUVVGUmVVWXNWMEZGYWtJMVF5eFJRVUZSYUVNc1ZVRkJXVUVzVlVGRGNFSm5ReXhSUVVGUllpeGhRVUZsUVN4aFFVTjJRbUVzVVVGQlVVWXNhMEpCUVc5Q1FTeHJRa0ZGTlVJc1NVRkJTU3RETEZWQlFWY3NSVUZCU1doR0xHZENRVUZuUWxrc1UwRkJVeXhYUVVGWmRVSXNVMEZGZUVRdlF5eFJRVUZSUlN4UlFVRlZNRVlzVTBGRGJFSkRMRTlCUVU4M1JpeFJRVUZWUVN4UlFVRnBRaUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEMxaWIyOTBjM1J5WVhBdmJHbGlMMVJoWWxCaGJtVXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0PXJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO2V4cG9ydHMuX19lc01vZHVsZT0hMCxleHBvcnRzLmRlZmF1bHQ9dm9pZCAwO3ZhciBfZXh0ZW5kczM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2V4dGVuZHNcIikpLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSksX2luaGVyaXRzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKSxfY2xhc3NuYW1lcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKSxfcmVhY3Q9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpLF9wcm9wVHlwZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSksX2Jvb3RzdHJhcFV0aWxzPXJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpLHByb3BUeXBlcz17c3RyaXBlZDpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxib3JkZXJlZDpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxjb25kZW5zZWQ6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsaG92ZXI6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wscmVzcG9uc2l2ZTpfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbH0sZGVmYXVsdFByb3BzPXtib3JkZXJlZDohMSxjb25kZW5zZWQ6ITEsaG92ZXI6ITEscmVzcG9uc2l2ZTohMSxzdHJpcGVkOiExfSxUYWJsZT1mdW5jdGlvbihlKXtmdW5jdGlvbiBUYWJsZSgpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4oMCxfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoVGFibGUsZSksVGFibGUucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXt2YXIgZSxyPXRoaXMucHJvcHMsdD1yLnN0cmlwZWQscz1yLmJvcmRlcmVkLG89ci5jb25kZW5zZWQscD1yLmhvdmVyLGE9ci5yZXNwb25zaXZlLGw9ci5jbGFzc05hbWUsaT0oMCxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkocixbXCJzdHJpcGVkXCIsXCJib3JkZXJlZFwiLFwiY29uZGVuc2VkXCIsXCJob3ZlclwiLFwicmVzcG9uc2l2ZVwiLFwiY2xhc3NOYW1lXCJdKSx1PSgwLF9ib290c3RyYXBVdGlscy5zcGxpdEJzUHJvcHMpKGkpLGQ9dVswXSxuPXVbMV0sYj0oMCxfZXh0ZW5kczMuZGVmYXVsdCkoe30sKDAsX2Jvb3RzdHJhcFV0aWxzLmdldENsYXNzU2V0KShkKSwoKGU9e30pWygwLF9ib290c3RyYXBVdGlscy5wcmVmaXgpKGQsXCJzdHJpcGVkXCIpXT10LGVbKDAsX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkoZCxcImJvcmRlcmVkXCIpXT1zLGVbKDAsX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkoZCxcImNvbmRlbnNlZFwiKV09byxlWygwLF9ib290c3RyYXBVdGlscy5wcmVmaXgpKGQsXCJob3ZlclwiKV09cCxlKSksXz1fcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwidGFibGVcIiwoMCxfZXh0ZW5kczMuZGVmYXVsdCkoe30sbix7Y2xhc3NOYW1lOigwLF9jbGFzc25hbWVzLmRlZmF1bHQpKGwsYil9KSk7cmV0dXJuIGE/X3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6KDAsX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkoZCxcInJlc3BvbnNpdmVcIil9LF8pOl99LFRhYmxlfShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1RhYmxlLnByb3BUeXBlcz1wcm9wVHlwZXMsVGFibGUuZGVmYXVsdFByb3BzPWRlZmF1bHRQcm9wczt2YXIgX2RlZmF1bHQ9KDAsX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKFwidGFibGVcIixUYWJsZSk7ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsUmhZbXhsTG1weklsMHNJbTVoYldWeklqcGJJbDlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRaUxDSnlaWEYxYVhKbElpd2laWGh3YjNKMGN5SXNJbDlmWlhOTmIyUjFiR1VpTENKa1pXWmhkV3gwSWl3aVgyVjRkR1Z1WkhNeklpd2lYMjlpYW1WamRGZHBkR2h2ZFhSUWNtOXdaWEowYVdWelRHOXZjMlV5SWl3aVgybHVhR1Z5YVhSelRHOXZjMlV5SWl3aVgyTnNZWE56Ym1GdFpYTWlMQ0pmY21WaFkzUWlMQ0pmY0hKdmNGUjVjR1Z6SWl3aVgySnZiM1J6ZEhKaGNGVjBhV3h6SWl3aWNISnZjRlI1Y0dWeklpd2ljM1J5YVhCbFpDSXNJbUp2YjJ3aUxDSmliM0prWlhKbFpDSXNJbU52Ym1SbGJuTmxaQ0lzSW1odmRtVnlJaXdpY21WemNHOXVjMmwyWlNJc0ltUmxabUYxYkhSUWNtOXdjeUlzSWxSaFlteGxJaXdpWDFKbFlXTjBKRU52YlhCdmJtVnVkQ0lzSW1Gd2NHeDVJaXdpZEdocGN5SXNJbUZ5WjNWdFpXNTBjeUlzSW5CeWIzUnZkSGx3WlNJc0luSmxibVJsY2lJc0lsOWxlSFJsYm1Sek1pSXNJbDkwYUdsekpIQnliM0J6SWl3aWNISnZjSE1pTENKamJHRnpjMDVoYldVaUxDSmZjM0JzYVhSQ2MxQnliM0J6SWl3aWMzQnNhWFJDYzFCeWIzQnpJaXdpWW5OUWNtOXdjeUlzSW1Wc1pXMWxiblJRY205d2N5SXNJbU5zWVhOelpYTWlMQ0puWlhSRGJHRnpjMU5sZENJc0luQnlaV1pwZUNJc0luUmhZbXhsSWl3aVkzSmxZWFJsUld4bGJXVnVkQ0lzSWtOdmJYQnZibVZ1ZENJc0lsOWtaV1poZFd4MElpd2lZbk5EYkdGemN5SXNJbTF2WkhWc1pTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZGUVN4SlFVRkpRU3gxUWtGQmVVSkRMRkZCUVZFc2QwUkJSWEpEUXl4UlFVRlJReXhaUVVGaExFVkJRM0pDUkN4UlFVRlJSU3hoUVVGVkxFVkJSV3hDTEVsQlFVbERMRlZCUVZsTUxIVkNRVUYxUWtNc1VVRkJVU3d5UTBGRk0wTkxMQ3RDUVVGcFEwNHNkVUpCUVhWQ1F5eFJRVUZSTEdkRlFVVm9SVTBzWjBKQlFXdENVQ3gxUWtGQmRVSkRMRkZCUVZFc2FVUkJSV3BFVHl4WlFVRmpVaXgxUWtGQmRVSkRMRkZCUVZFc1pVRkZOME5STEU5QlFWTlVMSFZDUVVGMVFrTXNVVUZCVVN4VlFVVjRRMU1zVjBGQllWWXNkVUpCUVhWQ1F5eFJRVUZSTEdWQlJUVkRWU3huUWtGQmEwSldMRkZCUVZFc01FSkJSVEZDVnl4VlFVRlpMRU5CUTJSRExGRkJRVk5JTEZkQlFWZE9MRkZCUVZGVkxFdEJRelZDUXl4VFFVRlZUQ3hYUVVGWFRpeFJRVUZSVlN4TFFVTTNRa1VzVlVGQlYwNHNWMEZCVjA0c1VVRkJVVlVzUzBGRE9VSkhMRTFCUVU5UUxGZEJRVmRPTEZGQlFWRlZMRXRCUXpGQ1NTeFhRVUZaVWl4WFFVRlhUaXhSUVVGUlZTeE5RVVUzUWtzc1lVRkJaU3hEUVVOcVFrb3NWVUZCVlN4RlFVTldReXhYUVVGWExFVkJRMWhETEU5QlFVOHNSVUZEVUVNc1dVRkJXU3hGUVVOYVRDeFRRVUZUTEVkQlIxQlBMRTFCUlVvc1UwRkJWVU1zUjBGSFVpeFRRVUZUUkN4UlFVTlFMRTlCUVU5RExFVkJRV2xDUXl4TlFVRk5ReXhMUVVGTlF5eFpRVUZqUkN4TFFXOURjRVFzVDBGMlEwRXNSVUZCU1doQ0xHZENRVUZuUWtnc1UwRkJVMmRDTEUxQlFVOURMRWRCVFhaQ1JDeE5RVUZOU3l4VlFVVmFReXhQUVVGVExGTkJRVk5CTEZOQlEzWkNMRWxCUVVsRExFVkJSVUZETEVWQlFXTk1MRXRCUVV0TkxFMUJRMjVDYUVJc1JVRkJWV1VzUlVGQldXWXNVVUZEZEVKRkxFVkJRVmRoTEVWQlFWbGlMRk5CUTNaQ1F5eEZRVUZaV1N4RlFVRlpXaXhWUVVONFFrTXNSVUZCVVZjc1JVRkJXVmdzVFVGRGNFSkRMRVZCUVdGVkxFVkJRVmxXTEZkQlEzcENXU3hGUVVGWlJpeEZRVUZaUlN4VlFVTjRRa1FzUjBGQlVTeEZRVUZKZGtJc0swSkJRU3RDUml4VFFVRlRkMElzUlVGQllTeERRVUZETEZWQlFWY3NWMEZCV1N4WlFVRmhMRkZCUVZNc1lVRkJZeXhqUVVVM1NFY3NSMEZCWjBJc1JVRkJTWEJDTEdkQ1FVRm5RbkZDTEdOQlFXTklMRWRCUTJ4RVNTeEZRVUZWUml4RlFVRmpMRWRCUTNoQ1J5eEZRVUZsU0N4RlFVRmpMRWRCUlRkQ1NTeEhRVUZWTEVWQlFVazVRaXhWUVVGVlJDeFRRVUZUTEVsQlFVa3NSVUZCU1U4c1owSkJRV2RDZVVJc1lVRkJZVWdzUzBGQlYwNHNSVUZCV1N4TFFVRmpMRVZCUVVsb1FpeG5Ra0ZCWjBJd1FpeFJRVUZSU2l4RlFVRlRMRmxCUVdOd1FpeEZRVUZUWXl4SFFVRlZMRVZCUVVsb1FpeG5Ra0ZCWjBJd1FpeFJRVUZSU2l4RlFVRlRMR0ZCUVdWc1FpeEZRVUZWV1N4SFFVRlZMRVZCUVVsb1FpeG5Ra0ZCWjBJd1FpeFJRVUZSU2l4RlFVRlRMR05CUVdkQ2FrSXNSVUZCVjFjc1IwRkJWU3hGUVVGSmFFSXNaMEpCUVdkQ01FSXNVVUZCVVVvc1JVRkJVeXhWUVVGWmFFSXNSVUZCVDFVc1NVRkZNMWhYTEVWQlFWRTNRaXhQUVVGUFRDeFJRVUZSYlVNc1kwRkJZeXhUUVVGVExFVkJRVWxzUXl4VlFVRlZSQ3hUUVVGVExFZEJRVWs0UWl4RlFVRmpMRU5CUTNwR1NpeFhRVUZYTEVWQlFVbDBRaXhaUVVGWlNpeFRRVUZUTUVJc1JVRkJWMHNzVFVGSGFrUXNUMEZCU1dwQ0xFVkJRMHRVTEU5QlFVOU1MRkZCUVZGdFF5eGpRVUZqTEUxQlFVOHNRMEZEZWtOVUxGZEJRVmNzUlVGQlNXNUNMR2RDUVVGblFqQkNMRkZCUVZGS0xFVkJRVk1zWlVGREwwTkxMRWRCUjBWQkxFZEJSMFpzUWl4TlFYaERWQ3hEUVhsRFJWZ3NUMEZCVDB3c1VVRkJVVzlETEZkQlJXcENjRUlzVFVGQlRWSXNWVUZCV1VFc1ZVRkRiRUpSTEUxQlFVMUVMR0ZCUVdWQkxHRkJSWEpDTEVsQlFVbHpRaXhWUVVGWExFVkJRVWs1UWl4blFrRkJaMElyUWl4VFFVRlRMRkZCUVZOMFFpeFBRVVZ5Ukd4Q0xGRkJRVkZGTEZGQlFWVnhReXhUUVVOc1FrVXNUMEZCVDNwRExGRkJRVlZCTEZGQlFXbENJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwzSmxZV04wTFdKdmIzUnpkSEpoY0M5c2FXSXZWR0ZpYkdVdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9leHRlbmRzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSksX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9yZWFjdD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSksX3Byb3BUeXBlcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKSxfaXNSZXF1aXJlZEZvckExMXk9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlcy1leHRyYS9saWIvaXNSZXF1aXJlZEZvckExMXlcIikpLF91bmNvbnRyb2xsYWJsZT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ1bmNvbnRyb2xsYWJsZVwiKSksX2VsZW1lbnRUeXBlPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlXCIpKSxfTmF2PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTmF2XCIpKSxfTmF2SXRlbT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL05hdkl0ZW1cIikpLF9UYWJDb250YWluZXI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9UYWJDb250YWluZXJcIikpLF9UYWJDb250ZW50PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVGFiQ29udGVudFwiKSksX2Jvb3RzdHJhcFV0aWxzPXJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpLF9WYWxpZENvbXBvbmVudENoaWxkcmVuPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvVmFsaWRDb21wb25lbnRDaGlsZHJlblwiKSksVGFiQ29udGFpbmVyPV9UYWJDb250YWluZXIuZGVmYXVsdC5Db250cm9sbGVkQ29tcG9uZW50LHByb3BUeXBlcz17YWN0aXZlS2V5Ol9wcm9wVHlwZXMuZGVmYXVsdC5hbnksYnNTdHlsZTpfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoW1widGFic1wiLFwicGlsbHNcIl0pLGFuaW1hdGlvbjpfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxfZWxlbWVudFR5cGUuZGVmYXVsdF0pLGlkOigwLF9pc1JlcXVpcmVkRm9yQTExeS5kZWZhdWx0KShfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXJdKSksb25TZWxlY3Q6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsbW91bnRPbkVudGVyOl9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLHVubW91bnRPbkV4aXQ6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2x9LGRlZmF1bHRQcm9wcz17YnNTdHlsZTpcInRhYnNcIixhbmltYXRpb246ITAsbW91bnRPbkVudGVyOiExLHVubW91bnRPbkV4aXQ6ITF9O2Z1bmN0aW9uIGdldERlZmF1bHRBY3RpdmVLZXkoZSl7dmFyIHQ7cmV0dXJuIF9WYWxpZENvbXBvbmVudENoaWxkcmVuLmRlZmF1bHQuZm9yRWFjaChlLGZ1bmN0aW9uKGUpe251bGw9PXQmJih0PWUucHJvcHMuZXZlbnRLZXkpfSksdH12YXIgVGFicz1mdW5jdGlvbihlKXtmdW5jdGlvbiBUYWJzKCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfSgwLF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShUYWJzLGUpO3ZhciB0PVRhYnMucHJvdG90eXBlO3JldHVybiB0LnJlbmRlclRhYj1mdW5jdGlvbiByZW5kZXJUYWIoZSl7dmFyIHQ9ZS5wcm9wcyxyPXQudGl0bGUsYT10LmV2ZW50S2V5LG49dC5kaXNhYmxlZCxvPXQudGFiQ2xhc3NOYW1lO3JldHVybiBudWxsPT1yP251bGw6X3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfTmF2SXRlbS5kZWZhdWx0LHtldmVudEtleTphLGRpc2FibGVkOm4sY2xhc3NOYW1lOm99LHIpfSx0LnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXt2YXIgZT10aGlzLnByb3BzLHQ9ZS5pZCxyPWUub25TZWxlY3QsYT1lLmFuaW1hdGlvbixuPWUubW91bnRPbkVudGVyLG89ZS51bm1vdW50T25FeGl0LGw9ZS5ic0NsYXNzLGk9ZS5jbGFzc05hbWUsdT1lLnN0eWxlLHM9ZS5jaGlsZHJlbixwPWUuYWN0aXZlS2V5LGQ9dm9pZCAwPT09cD9nZXREZWZhdWx0QWN0aXZlS2V5KHMpOnAsZj0oMCxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoZSxbXCJpZFwiLFwib25TZWxlY3RcIixcImFuaW1hdGlvblwiLFwibW91bnRPbkVudGVyXCIsXCJ1bm1vdW50T25FeGl0XCIsXCJic0NsYXNzXCIsXCJjbGFzc05hbWVcIixcInN0eWxlXCIsXCJjaGlsZHJlblwiLFwiYWN0aXZlS2V5XCJdKTtyZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChUYWJDb250YWluZXIse2lkOnQsYWN0aXZlS2V5OmQsb25TZWxlY3Q6cixjbGFzc05hbWU6aSxzdHlsZTp1fSxfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsbnVsbCxfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9OYXYuZGVmYXVsdCwoMCxfZXh0ZW5kczIuZGVmYXVsdCkoe30sZix7cm9sZTpcInRhYmxpc3RcIn0pLF9WYWxpZENvbXBvbmVudENoaWxkcmVuLmRlZmF1bHQubWFwKHMsdGhpcy5yZW5kZXJUYWIpKSxfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9UYWJDb250ZW50LmRlZmF1bHQse2JzQ2xhc3M6bCxhbmltYXRpb246YSxtb3VudE9uRW50ZXI6bix1bm1vdW50T25FeGl0Om99LHMpKSl9LFRhYnN9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7VGFicy5wcm9wVHlwZXM9cHJvcFR5cGVzLFRhYnMuZGVmYXVsdFByb3BzPWRlZmF1bHRQcm9wcywoMCxfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoXCJ0YWJcIixUYWJzKTt2YXIgX2RlZmF1bHQ9KDAsX3VuY29udHJvbGxhYmxlLmRlZmF1bHQpKFRhYnMse2FjdGl2ZUtleTpcIm9uU2VsZWN0XCJ9KTtleHBvcnRzLmRlZmF1bHQ9X2RlZmF1bHQsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxSaFluTXVhbk1pWFN3aWJtRnRaWE1pT2xzaVgybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ0lzSW5KbGNYVnBjbVVpTENKbGVIQnZjblJ6SWl3aVgxOWxjMDF2WkhWc1pTSXNJbVJsWm1GMWJIUWlMQ0pmWlhoMFpXNWtjeklpTENKZmIySnFaV04wVjJsMGFHOTFkRkJ5YjNCbGNuUnBaWE5NYjI5elpUSWlMQ0pmYVc1b1pYSnBkSE5NYjI5elpUSWlMQ0pmY21WaFkzUWlMQ0pmY0hKdmNGUjVjR1Z6SWl3aVgybHpVbVZ4ZFdseVpXUkdiM0pCTVRGNUlpd2lYM1Z1WTI5dWRISnZiR3hoWW14bElpd2lYMlZzWlcxbGJuUlVlWEJsSWl3aVgwNWhkaUlzSWw5T1lYWkpkR1Z0SWl3aVgxUmhZa052Ym5SaGFXNWxjaUlzSWw5VVlXSkRiMjUwWlc1MElpd2lYMkp2YjNSemRISmhjRlYwYVd4eklpd2lYMVpoYkdsa1EyOXRjRzl1Wlc1MFEyaHBiR1J5Wlc0aUxDSlVZV0pEYjI1MFlXbHVaWElpTENKRGIyNTBjbTlzYkdWa1EyOXRjRzl1Wlc1MElpd2ljSEp2Y0ZSNWNHVnpJaXdpWVdOMGFYWmxTMlY1SWl3aVlXNTVJaXdpWW5OVGRIbHNaU0lzSW05dVpVOW1JaXdpWVc1cGJXRjBhVzl1SWl3aWIyNWxUMlpVZVhCbElpd2lZbTl2YkNJc0ltbGtJaXdpYzNSeWFXNW5JaXdpYm5WdFltVnlJaXdpYjI1VFpXeGxZM1FpTENKbWRXNWpJaXdpYlc5MWJuUlBia1Z1ZEdWeUlpd2lkVzV0YjNWdWRFOXVSWGhwZENJc0ltUmxabUYxYkhSUWNtOXdjeUlzSW1kbGRFUmxabUYxYkhSQlkzUnBkbVZMWlhraUxDSmphR2xzWkhKbGJpSXNJbVJsWm1GMWJIUkJZM1JwZG1WTFpYa2lMQ0ptYjNKRllXTm9JaXdpWTJocGJHUWlMQ0p3Y205d2N5SXNJbVYyWlc1MFMyVjVJaXdpVkdGaWN5SXNJbDlTWldGamRDUkRiMjF3YjI1bGJuUWlMQ0poY0hCc2VTSXNJblJvYVhNaUxDSmhjbWQxYldWdWRITWlMQ0pmY0hKdmRHOGlMQ0p3Y205MGIzUjVjR1VpTENKeVpXNWtaWEpVWVdJaUxDSmZZMmhwYkdRa2NISnZjSE1pTENKMGFYUnNaU0lzSW1ScGMyRmliR1ZrSWl3aWRHRmlRMnhoYzNOT1lXMWxJaXdpWTNKbFlYUmxSV3hsYldWdWRDSXNJbU5zWVhOelRtRnRaU0lzSW5KbGJtUmxjaUlzSWw5MGFHbHpKSEJ5YjNCeklpd2lZbk5EYkdGemN5SXNJbk4wZVd4bElpd2lYM1JvYVhNa2NISnZjSE1rWVdOMGFYWmxTMlY1SWl3aWNtOXNaU0lzSW0xaGNDSXNJa052YlhCdmJtVnVkQ0lzSWw5a1pXWmhkV3gwSWl3aWJXOWtkV3hsSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4aFFVVkJMRWxCUVVsQkxIVkNRVUY1UWtNc1VVRkJVU3gzUkVGRmNrTkRMRkZCUVZGRExGbEJRV0VzUlVGRGNrSkVMRkZCUVZGRkxHRkJRVlVzUlVGRmJFSXNTVUZCU1VNc1ZVRkJXVXdzZFVKQlFYVkNReXhSUVVGUkxESkRRVVV6UTBzc0swSkJRV2xEVGl4MVFrRkJkVUpETEZGQlFWRXNaMFZCUldoRlRTeG5Ra0ZCYTBKUUxIVkNRVUYxUWtNc1VVRkJVU3hwUkVGRmFrUlBMRTlCUVZOU0xIVkNRVUYxUWtNc1VVRkJVU3hWUVVWNFExRXNWMEZCWVZRc2RVSkJRWFZDUXl4UlFVRlJMR1ZCUlRWRFV5eHRRa0ZCY1VKV0xIVkNRVUYxUWtNc1VVRkJVU3d5UTBGRmNFUlZMR2RDUVVGclFsZ3NkVUpCUVhWQ1F5eFJRVUZSTEcxQ1FVVnFSRmNzWVVGQlpWb3NkVUpCUVhWQ1F5eFJRVUZSTEhGRFFVVTVRMWtzUzBGQlQySXNkVUpCUVhWQ1F5eFJRVUZSTEZWQlJYUkRZU3hUUVVGWFpDeDFRa0ZCZFVKRExGRkJRVkVzWTBGRk1VTmpMR05CUVdkQ1ppeDFRa0ZCZFVKRExGRkJRVkVzYlVKQlJTOURaU3haUVVGamFFSXNkVUpCUVhWQ1F5eFJRVUZSTEdsQ1FVVTNRMmRDTEdkQ1FVRnJRbWhDTEZGQlFWRXNNRUpCUlRGQ2FVSXNkMEpCUVRCQ2JFSXNkVUpCUVhWQ1F5eFJRVUZSTEcxRFFVVjZSR3RDTEdGQlFXVktMR05CUVdOWUxGRkJRVkZuUWl4dlFrRkRja05ETEZWQlFWa3NRMEZOWkVNc1ZVRkJWMklzVjBGQlYwd3NVVUZCVVcxQ0xFbEJTemxDUXl4UlFVRlRaaXhYUVVGWFRDeFJRVUZSY1VJc1RVRkJUU3hEUVVGRExFOUJRVkVzVlVGUE0wTkRMRlZCUVZkcVFpeFhRVUZYVEN4UlFVRlJkVUlzVlVGQlZTeERRVUZEYkVJc1YwRkJWMHdzVVVGQlVYZENMRXRCUVUxb1FpeGhRVUZoVWl4VlFVTXZSWGxDTEVsQlFVa3NSVUZCU1c1Q0xHMUNRVUZ0UWs0c1UwRkJVMHNzVjBGQlYwd3NVVUZCVVhWQ0xGVkJRVlVzUTBGQlEyeENMRmRCUVZkTUxGRkJRVkV3UWl4UFFVRlJja0lzVjBGQlYwd3NVVUZCVVRKQ0xGVkJZMmhJUXl4VFFVRlZka0lzVjBGQlYwd3NVVUZCVVRaQ0xFdEJTemRDUXl4aFFVRmpla0lzVjBGQlYwd3NVVUZCVVhkQ0xFdEJTMnBEVHl4alFVRmxNVUlzVjBGQlYwd3NVVUZCVVhkQ0xFMUJSV2hEVVN4aFFVRmxMRU5CUTJwQ1dpeFJRVUZUTEU5QlExUkZMRmRCUVZjc1JVRkRXRkVzWTBGQll5eEZRVU5rUXl4bFFVRmxMRWRCUjJwQ0xGTkJRVk5GTEc5Q1FVRnZRa01zUjBGRE0wSXNTVUZCU1VNc1JVRlJTaXhQUVU1QmNrSXNkMEpCUVhkQ1pDeFJRVUZSYjBNc1VVRkJVVVlzUlVGQlZTeFRRVUZWUnl4SFFVTnNReXhOUVVGd1FrWXNTVUZEUmtFc1JVRkJiVUpGTEVWQlFVMURMRTFCUVUxRExGbEJTVFZDU2l4RlFVZFVMRWxCUVVsTExFdEJSVW9zVTBGQlZVTXNSMEZIVWl4VFFVRlRSQ3hQUVVOUUxFOUJRVTlETEVWQlFXbENReXhOUVVGTlF5eExRVUZOUXl4WlFVRmpSQ3hOUVVod1JDeEZRVUZKZUVNc1owSkJRV2RDU0N4VFFVRlRkME1zUzBGQlRVTXNSMEZOYmtNc1NVRkJTVWtzUlVGQlUwd3NTMEZCUzAwc1ZVRnJSR3hDTEU5QmFFUkJSQ3hGUVVGUFJTeFZRVUZaTEZOQlFWTkJMRlZCUVZWV0xFZEJRM0JETEVsQlFVbFhMRVZCUVdWWUxFVkJRVTFETEUxQlEzSkNWeXhGUVVGUlJDeEZRVUZoUXl4TlFVTnlRbFlzUlVGQlYxTXNSVUZCWVZRc1UwRkRlRUpYTEVWQlFWZEdMRVZCUVdGRkxGTkJRM2hDUXl4RlFVRmxTQ3hGUVVGaFJ5eGhRVVZvUXl4UFFVRmhMRTFCUVZSR0xFVkJRMHNzUzBGSFJqZERMRTlCUVU5S0xGRkJRVkZ2UkN4alFVRmpNVU1zVTBGQlUxWXNVVUZCVXl4RFFVTndSSFZETEZOQlFWVkJMRVZCUTFaWExGTkJRVlZCTEVWQlExWkhMRlZCUVZkR0xFZEJRMVpHTEVsQlIweEtMRVZCUVU5VExFOUJRVk1zVTBGQlUwRXNVMEZEZGtJc1NVRkJTVU1zUlVGQlkxb3NTMEZCUzB3c1RVRkRia0ppTEVWQlFVczRRaXhGUVVGWk9VSXNSMEZEYWtKSExFVkJRVmN5UWl4RlFVRlpNMElzVTBGRGRrSk9MRVZCUVZscFF5eEZRVUZaYWtNc1ZVRkRlRUpSTEVWQlFXVjVRaXhGUVVGWmVrSXNZVUZETTBKRExFVkJRV2RDZDBJc1JVRkJXWGhDTEdOQlF6VkNlVUlzUlVGQlZVUXNSVUZCV1VNc1VVRkRkRUpJTEVWQlFWbEZMRVZCUVZsR0xGVkJRM2hDU1N4RlFVRlJSaXhGUVVGWlJTeE5RVU53UW5aQ0xFVkJRVmR4UWl4RlFVRlpja0lzVTBGRGRrSjNRaXhGUVVGM1FrZ3NSVUZCV1hKRExGVkJRM0JEUVN4UFFVRnpReXhKUVVFeFFuZERMRVZCUVcxRGVrSXNiMEpCUVc5Q1F5eEhRVUZaZDBJc1JVRkRMMFZ3UWl4SFFVRlJMRVZCUVVsd1F5d3JRa0ZCSzBKR0xGTkJRVk4xUkN4RlFVRmhMRU5CUVVNc1MwRkJUU3hYUVVGWkxGbEJRV0VzWlVGQlowSXNaMEpCUVdsQ0xGVkJRVmNzV1VGQllTeFJRVUZUTEZkQlFWa3NZMEZEYmt3c1QwRkJUMjVFTEU5QlFVOUtMRkZCUVZGdlJDeGpRVUZqY2tNc1lVRkJZeXhEUVVOb1JGVXNSMEZCU1VFc1JVRkRTbEFzVlVGQlYwRXNSVUZEV0ZVc1UwRkJWVUVzUlVGRFZubENMRlZCUVZkQkxFVkJRMWhKTEUxQlFVOUJMRWRCUTA1eVJDeFBRVUZQU2l4UlFVRlJiMFFzWTBGQll5eE5RVUZQTEV0QlFVMW9SQ3hQUVVGUFNpeFJRVUZSYjBRc1kwRkJZek5ETEV0QlFVdFVMRk5CUVZNc1JVRkJTVU1zVlVGQlZVUXNVMEZCVXl4SFFVRkpjME1zUlVGQlR5eERRVU40U0hGQ0xFdEJRVTBzV1VGRFNqZERMSGRDUVVGM1FtUXNVVUZCVVRSRUxFbEJRVWt4UWl4RlFVRlZVeXhMUVVGTFNTeFpRVUZoTTBNc1QwRkJUMG9zVVVGQlVXOUVMR05CUVdONFF5eFpRVUZaV2l4UlFVRlRMRU5CUTNCSWQwUXNVVUZCVTBFc1JVRkRWR3hETEZWQlFWZEJMRVZCUTFoUkxHRkJRV05CTEVWQlEyUkRMR05CUVdWQkxFZEJRMlJITEUxQlIwVk5MRXRCZWtSVUxFTkJNRVJGY0VNc1QwRkJUMG9zVVVGQlVUWkVMRmRCUldwQ2NrSXNTMEZCUzNaQ0xGVkJRVmxCTEZWQlEycENkVUlzUzBGQlMxSXNZVUZCWlVFc1kwRkRjRUlzUlVGQlNXNUNMR2RDUVVGblFqSkRMRk5CUVZNc1RVRkJUMmhDTEUxQlJYQkRMRWxCUVVselFpeFZRVUZYTEVWQlFVbDJSQ3huUWtGQlowSlFMRk5CUVZOM1F5eExRVUZOTEVOQlEyaEVkRUlzVlVGQlZ5eGhRVWRpY0VJc1VVRkJVVVVzVVVGQlZUaEVMRk5CUTJ4Q1F5eFBRVUZQYWtVc1VVRkJWVUVzVVVGQmFVSWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F0WW05dmRITjBjbUZ3TDJ4cFlpOVVZV0p6TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PXZvaWQgMDt2YXIgX2V4dGVuZHMyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKSxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpLF9pbmhlcml0c0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSksX2NsYXNzbmFtZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKSxfcHJvcFR5cGVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpLF9TYWZlQW5jaG9yPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vU2FmZUFuY2hvclwiKSksX2Jvb3RzdHJhcFV0aWxzPXJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpLHByb3BUeXBlcz17c3JjOl9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsYWx0Ol9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsaHJlZjpfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLG9uRXJyb3I6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsb25Mb2FkOl9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jfSxUaHVtYm5haWw9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gVGh1bWJuYWlsKCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybigwLF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShUaHVtYm5haWwsZSksVGh1bWJuYWlsLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIGU9dGhpcy5wcm9wcyxyPWUuc3JjLHQ9ZS5hbHQsbz1lLm9uRXJyb3Iscz1lLm9uTG9hZCxhPWUuY2xhc3NOYW1lLGk9ZS5jaGlsZHJlbix1PSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShlLFtcInNyY1wiLFwiYWx0XCIsXCJvbkVycm9yXCIsXCJvbkxvYWRcIixcImNsYXNzTmFtZVwiLFwiY2hpbGRyZW5cIl0pLGw9KDAsX2Jvb3RzdHJhcFV0aWxzLnNwbGl0QnNQcm9wcykodSkscD1sWzBdLG49bFsxXSxjPW4uaHJlZj9fU2FmZUFuY2hvci5kZWZhdWx0OlwiZGl2XCIsZj0oMCxfYm9vdHN0cmFwVXRpbHMuZ2V0Q2xhc3NTZXQpKHApO3JldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KGMsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LG4se2NsYXNzTmFtZTooMCxfY2xhc3NuYW1lcy5kZWZhdWx0KShhLGYpfSksX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImltZ1wiLHtzcmM6cixhbHQ6dCxvbkVycm9yOm8sb25Mb2FkOnN9KSxpJiZfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2NsYXNzTmFtZTpcImNhcHRpb25cIn0saSkpfSxUaHVtYm5haWx9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7VGh1bWJuYWlsLnByb3BUeXBlcz1wcm9wVHlwZXM7dmFyIF9kZWZhdWx0PSgwLF9ib290c3RyYXBVdGlscy5ic0NsYXNzKShcInRodW1ibmFpbFwiLFRodW1ibmFpbCk7ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsUm9kVzFpYm1GcGJDNXFjeUpkTENKdVlXMWxjeUk2V3lKZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBJaXdpY21WeGRXbHlaU0lzSW1WNGNHOXlkSE1pTENKZlgyVnpUVzlrZFd4bElpd2laR1ZtWVhWc2RDSXNJbDlsZUhSbGJtUnpNaUlzSWw5dlltcGxZM1JYYVhSb2IzVjBVSEp2Y0dWeWRHbGxjMHh2YjNObE1pSXNJbDlwYm1obGNtbDBjMHh2YjNObE1pSXNJbDlqYkdGemMyNWhiV1Z6SWl3aVgzSmxZV04wSWl3aVgzQnliM0JVZVhCbGN5SXNJbDlUWVdabFFXNWphRzl5SWl3aVgySnZiM1J6ZEhKaGNGVjBhV3h6SWl3aWNISnZjRlI1Y0dWeklpd2ljM0pqSWl3aWMzUnlhVzVuSWl3aVlXeDBJaXdpYUhKbFppSXNJbTl1UlhKeWIzSWlMQ0ptZFc1aklpd2liMjVNYjJGa0lpd2lWR2gxYldKdVlXbHNJaXdpWDFKbFlXTjBKRU52YlhCdmJtVnVkQ0lzSW1Gd2NHeDVJaXdpZEdocGN5SXNJbUZ5WjNWdFpXNTBjeUlzSW5CeWIzUnZkSGx3WlNJc0luSmxibVJsY2lJc0lsOTBhR2x6SkhCeWIzQnpJaXdpY0hKdmNITWlMQ0pqYkdGemMwNWhiV1VpTENKamFHbHNaSEpsYmlJc0lsOXpjR3hwZEVKelVISnZjSE1pTENKemNHeHBkRUp6VUhKdmNITWlMQ0ppYzFCeWIzQnpJaXdpWld4bGJXVnVkRkJ5YjNCeklpd2lRMjl0Y0c5dVpXNTBJaXdpWTJ4aGMzTmxjeUlzSW1kbGRFTnNZWE56VTJWMElpd2lZM0psWVhSbFJXeGxiV1Z1ZENJc0lsOWtaV1poZFd4MElpd2lZbk5EYkdGemN5SXNJbTF2WkhWc1pTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZGUVN4SlFVRkpRU3gxUWtGQmVVSkRMRkZCUVZFc2QwUkJSWEpEUXl4UlFVRlJReXhaUVVGaExFVkJRM0pDUkN4UlFVRlJSU3hoUVVGVkxFVkJSV3hDTEVsQlFVbERMRlZCUVZsTUxIVkNRVUYxUWtNc1VVRkJVU3d5UTBGRk0wTkxMQ3RDUVVGcFEwNHNkVUpCUVhWQ1F5eFJRVUZSTEdkRlFVVm9SVTBzWjBKQlFXdENVQ3gxUWtGQmRVSkRMRkZCUVZFc2FVUkJSV3BFVHl4WlFVRmpVaXgxUWtGQmRVSkRMRkZCUVZFc1pVRkZOME5STEU5QlFWTlVMSFZDUVVGMVFrTXNVVUZCVVN4VlFVVjRRMU1zVjBGQllWWXNkVUpCUVhWQ1F5eFJRVUZSTEdWQlJUVkRWU3haUVVGaldDeDFRa0ZCZFVKRExGRkJRVkVzYVVKQlJUZERWeXhuUWtGQmEwSllMRkZCUVZFc01FSkJSekZDV1N4VlFVRlpMRU5CU1dSRExFbEJRVXRLTEZkQlFWZE9MRkZCUVZGWExFOUJTM2hDUXl4SlFVRkxUaXhYUVVGWFRpeFJRVUZSVnl4UFFVdDRRa1VzUzBGQlRWQXNWMEZCVjA0c1VVRkJVVmNzVDBGTGVrSkhMRkZCUVZOU0xGZEJRVmRPTEZGQlFWRmxMRXRCU3pWQ1F5eFBRVUZSVml4WFFVRlhUaXhSUVVGUlpTeE5RVWQ2UWtVc1ZVRkZTaXhUUVVGVlF5eEhRVWRTTEZOQlFWTkVMRmxCUTFBc1QwRkJUME1zUlVGQmFVSkRMRTFCUVUxRExFdEJRVTFETEZsQlFXTkVMRXRCYVVOd1JDeFBRWEJEUVN4RlFVRkpha0lzWjBKQlFXZENTQ3hUUVVGVGFVSXNWVUZCVjBNc1IwRk5NMEpFTEZWQlFWVkxMRlZCUldoQ1F5eFBRVUZUTEZOQlFWTkJMRk5CUTNaQ0xFbEJRVWxETEVWQlFXTktMRXRCUVV0TExFMUJRMjVDWml4RlFVRk5ZeXhGUVVGWlpDeEpRVU5zUWtVc1JVRkJUVmtzUlVGQldWb3NTVUZEYkVKRkxFVkJRVlZWTEVWQlFWbFdMRkZCUTNSQ1JTeEZRVUZUVVN4RlFVRlpVaXhQUVVOeVFsVXNSVUZCV1VZc1JVRkJXVVVzVlVGRGVFSkRMRVZCUVZkSUxFVkJRVmxITEZOQlEzWkNSaXhIUVVGUkxFVkJRVWwyUWl3clFrRkJLMEpHTEZOQlFWTjNRaXhGUVVGaExFTkJRVU1zVFVGQlR5eE5RVUZQTEZWQlFWY3NVMEZCVlN4WlFVRmhMR0ZCUld4SVNTeEhRVUZuUWl4RlFVRkpjRUlzWjBKQlFXZENjVUlzWTBGQlkwb3NSMEZEYkVSTExFVkJRVlZHTEVWQlFXTXNSMEZEZUVKSExFVkJRV1ZJTEVWQlFXTXNSMEZGTjBKSkxFVkJRVmxFTEVWQlFXRnNRaXhMUVVGUFRpeFpRVUZaVUN4UlFVRlZMRTFCUTNSRWFVTXNSMEZCVlN4RlFVRkpla0lzWjBKQlFXZENNRUlzWVVGQllVb3NSMEZETDBNc1QwRkJUM3BDTEU5QlFVOU1MRkZCUVZGdFF5eGpRVUZqU0N4SFFVRlhMRVZCUVVrdlFpeFZRVUZWUkN4VFFVRlRMRWRCUVVrclFpeEZRVUZqTEVOQlEzUkdUQ3hYUVVGWExFVkJRVWwwUWl4WlFVRlpTaXhUUVVGVE1FSXNSVUZCVjA4c1MwRkROME0xUWl4UFFVRlBUQ3hSUVVGUmJVTXNZMEZCWXl4TlFVRlBMRU5CUTNSRGVrSXNTVUZCUzBFc1JVRkRURVVzU1VGQlMwRXNSVUZEVEVVc1VVRkJVMEVzUlVGRFZFVXNUMEZCVVVFc1NVRkRUbGNzUjBGQldYUkNMRTlCUVU5TUxGRkJRVkZ0UXl4alFVRmpMRTFCUVU4c1EwRkRiRVJVTEZWQlFWY3NWMEZEVmtNc1MwRkhSVllzVlVGeVExUXNRMEZ6UTBWYUxFOUJRVTlNTEZGQlFWRm5ReXhYUVVWcVFtWXNWVUZCVlZJc1ZVRkJXVUVzVlVGRmRFSXNTVUZCU1RKQ0xGVkJRVmNzUlVGQlNUVkNMR2RDUVVGblFqWkNMRk5CUVZNc1dVRkJZWEJDTEZkQlJYcEVia0lzVVVGQlVVVXNVVUZCVlc5RExGTkJRMnhDUlN4UFFVRlBlRU1zVVVGQlZVRXNVVUZCYVVJaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Y21WaFkzUXRZbTl2ZEhOMGNtRndMMnhwWWk5VWFIVnRZbTVoYVd3dWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9leHRlbmRzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSksX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9wcm9wVHlwZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKSxfQnV0dG9uPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQnV0dG9uXCIpKSxwcm9wVHlwZXM9e3R5cGU6X3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFtcImNoZWNrYm94XCIsXCJyYWRpb1wiXSksbmFtZTpfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLGNoZWNrZWQ6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsZGlzYWJsZWQ6X3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsb25DaGFuZ2U6X3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsdmFsdWU6X3Byb3BUeXBlcy5kZWZhdWx0LmFueS5pc1JlcXVpcmVkfSxUb2dnbGVCdXR0b249ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gVG9nZ2xlQnV0dG9uKCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybigwLF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShUb2dnbGVCdXR0b24sZSksVG9nZ2xlQnV0dG9uLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIGU9dGhpcy5wcm9wcyx0PWUuY2hpbGRyZW4scj1lLm5hbWUsbz1lLmNoZWNrZWQsdT1lLnR5cGUscD1lLm9uQ2hhbmdlLG49ZS52YWx1ZSxhPSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShlLFtcImNoaWxkcmVuXCIsXCJuYW1lXCIsXCJjaGVja2VkXCIsXCJ0eXBlXCIsXCJvbkNoYW5nZVwiLFwidmFsdWVcIl0pLGw9YS5kaXNhYmxlZDtyZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfQnV0dG9uLmRlZmF1bHQsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LGEse2FjdGl2ZTohIW8sY29tcG9uZW50Q2xhc3M6XCJsYWJlbFwifSksX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImlucHV0XCIse25hbWU6cix0eXBlOnUsYXV0b0NvbXBsZXRlOlwib2ZmXCIsdmFsdWU6bixjaGVja2VkOiEhbyxkaXNhYmxlZDohIWwsb25DaGFuZ2U6cH0pLHQpfSxUb2dnbGVCdXR0b259KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7VG9nZ2xlQnV0dG9uLnByb3BUeXBlcz1wcm9wVHlwZXM7dmFyIF9kZWZhdWx0PVRvZ2dsZUJ1dHRvbjtleHBvcnRzLmRlZmF1bHQ9X2RlZmF1bHQsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxSdloyZHNaVUoxZEhSdmJpNXFjeUpkTENKdVlXMWxjeUk2V3lKZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBJaXdpY21WeGRXbHlaU0lzSW1WNGNHOXlkSE1pTENKZlgyVnpUVzlrZFd4bElpd2laR1ZtWVhWc2RDSXNJbDlsZUhSbGJtUnpNaUlzSWw5dlltcGxZM1JYYVhSb2IzVjBVSEp2Y0dWeWRHbGxjMHh2YjNObE1pSXNJbDlwYm1obGNtbDBjMHh2YjNObE1pSXNJbDl3Y205d1ZIbHdaWE1pTENKZmNtVmhZM1FpTENKZlFuVjBkRzl1SWl3aWNISnZjRlI1Y0dWeklpd2lkSGx3WlNJc0ltOXVaVTltSWl3aWJtRnRaU0lzSW5OMGNtbHVaeUlzSW1Ob1pXTnJaV1FpTENKaWIyOXNJaXdpWkdsellXSnNaV1FpTENKdmJrTm9ZVzVuWlNJc0ltWjFibU1pTENKMllXeDFaU0lzSW1GdWVTSXNJbWx6VW1WeGRXbHlaV1FpTENKVWIyZG5iR1ZDZFhSMGIyNGlMQ0pmVW1WaFkzUWtRMjl0Y0c5dVpXNTBJaXdpWVhCd2JIa2lMQ0owYUdseklpd2lZWEpuZFcxbGJuUnpJaXdpY0hKdmRHOTBlWEJsSWl3aWNtVnVaR1Z5SWl3aVgzUm9hWE1rY0hKdmNITWlMQ0p3Y205d2N5SXNJbU5vYVd4a2NtVnVJaXdpWTNKbFlYUmxSV3hsYldWdWRDSXNJbUZqZEdsMlpTSXNJbU52YlhCdmJtVnVkRU5zWVhOeklpd2lZWFYwYjBOdmJYQnNaWFJsSWl3aVEyOXRjRzl1Wlc1MElpd2lYMlJsWm1GMWJIUWlMQ0p0YjJSMWJHVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUlVFc1NVRkJTVUVzZFVKQlFYbENReXhSUVVGUkxIZEVRVVZ5UTBNc1VVRkJVVU1zV1VGQllTeEZRVU55UWtRc1VVRkJVVVVzWVVGQlZTeEZRVVZzUWl4SlFVRkpReXhWUVVGWlRDeDFRa0ZCZFVKRExGRkJRVkVzTWtOQlJUTkRTeXdyUWtGQmFVTk9MSFZDUVVGMVFrTXNVVUZCVVN4blJVRkZhRVZOTEdkQ1FVRnJRbEFzZFVKQlFYVkNReXhSUVVGUkxHbEVRVVZxUkU4c1YwRkJZVklzZFVKQlFYVkNReXhSUVVGUkxHVkJSVFZEVVN4UFFVRlRWQ3gxUWtGQmRVSkRMRkZCUVZFc1ZVRkZlRU5UTEZGQlFWVldMSFZDUVVGMVFrTXNVVUZCVVN4aFFVVjZRMVVzVlVGQldTeERRVXRrUXl4TFFVRk5TaXhYUVVGWFNpeFJRVUZSVXl4TlFVRk5MRU5CUVVNc1YwRkJXU3hWUVUwMVEwTXNTMEZCVFU0c1YwRkJWMG9zVVVGQlVWY3NUMEZMZWtKRExGRkJRVk5TTEZkQlFWZEtMRkZCUVZGaExFdEJTelZDUXl4VFFVRlZWaXhYUVVGWFNpeFJRVUZSWVN4TFFVczNRa1VzVTBGQlZWZ3NWMEZCVjBvc1VVRkJVV2RDTEV0QlN6ZENReXhOUVVGUFlpeFhRVUZYU2l4UlFVRlJhMElzU1VGQlNVTXNXVUZITlVKRExHRkJSVW9zVTBGQlZVTXNSMEZIVWl4VFFVRlRSQ3hsUVVOUUxFOUJRVTlETEVWQlFXbENReXhOUVVGTlF5eExRVUZOUXl4WlFVRmpSQ3hMUVRaQ2NFUXNUMEZvUTBFc1JVRkJTWEJDTEdkQ1FVRm5Ra2dzVTBGQlUyOUNMR0ZCUVdORExFZEJUVGxDUkN4aFFVRmhTeXhWUVVWdVFrTXNUMEZCVXl4VFFVRlRRU3hUUVVOMlFpeEpRVUZKUXl4RlFVRmpTaXhMUVVGTFN5eE5RVU51UWtNc1JVRkJWMFlzUlVGQldVVXNVMEZEZGtKdVFpeEZRVUZQYVVJc1JVRkJXV3BDTEV0QlEyNUNSU3hGUVVGVlpTeEZRVUZaWml4UlFVTjBRa29zUlVGQlQyMUNMRVZCUVZsdVFpeExRVU51UWs4c1JVRkJWMWtzUlVGQldWb3NVMEZEZGtKRkxFVkJRVkZWTEVWQlFWbFdMRTFCUTNCQ1Z5eEhRVUZSTEVWQlFVa3hRaXdyUWtGQkswSkdMRk5CUVZNeVFpeEZRVUZoTEVOQlFVTXNWMEZCV1N4UFFVRlJMRlZCUVZjc1QwRkJVU3hYUVVGWkxGVkJRM0pJWWl4RlFVRlhZeXhGUVVGTlpDeFRRVU55UWl4UFFVRlBWQ3hQUVVGUFRDeFJRVUZST0VJc1kwRkJZM2hDTEZGQlFWRk9MRk5CUVZNc1JVRkJTVU1zVlVGQlZVUXNVMEZCVXl4SFFVRkpORUlzUlVGQlR5eERRVU55Umtjc1UwRkJWVzVDTEVWQlExWnZRaXhsUVVGblFpeFZRVU5rTTBJc1QwRkJUMHdzVVVGQlVUaENMR05CUVdNc1VVRkJVeXhEUVVONFEzQkNMRXRCUVUxQkxFVkJRMDVHTEV0QlFVMUJMRVZCUTA1NVFpeGhRVUZqTEUxQlEyUm9RaXhOUVVGUFFTeEZRVU5RVEN4VlFVRlhRU3hGUVVOWVJTeFhRVUZaUVN4RlFVTmFReXhUUVVGVlFTeEpRVU5TWXl4SlFVZERWQ3hoUVdwRFZDeERRV3REUldZc1QwRkJUMHdzVVVGQlVXdERMRmRCUldwQ1pDeGhRVUZoWWl4VlFVRlpRU3hWUVVONlFpeEpRVUZKTkVJc1UwRkJWMllzWVVGRFpuUkNMRkZCUVZGRkxGRkJRVlZ0UXl4VFFVTnNRa01zVDBGQlQzUkRMRkZCUVZWQkxGRkJRV2xDSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdOMExXSnZiM1J6ZEhKaGNDOXNhV0l2Vkc5bloyeGxRblYwZEc5dUxtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9leHRlbmRzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSksX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9wcm9wVHlwZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSksX3JlYWN0PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKSxfaW52YXJpYW50PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImludmFyaWFudFwiKSksX3VuY29udHJvbGxhYmxlPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInVuY29udHJvbGxhYmxlXCIpKSxfY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uXCIpKSxfVmFsaWRDb21wb25lbnRDaGlsZHJlbj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL1ZhbGlkQ29tcG9uZW50Q2hpbGRyZW5cIikpLF9CdXR0b25Hcm91cD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0J1dHRvbkdyb3VwXCIpKSxfVG9nZ2xlQnV0dG9uPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVG9nZ2xlQnV0dG9uXCIpKSxwcm9wVHlwZXM9e25hbWU6X3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyx2YWx1ZTpfcHJvcFR5cGVzLmRlZmF1bHQuYW55LG9uQ2hhbmdlOl9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLHR5cGU6X3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFtcImNoZWNrYm94XCIsXCJyYWRpb1wiXSkuaXNSZXF1aXJlZH0sZGVmYXVsdFByb3BzPXt0eXBlOlwicmFkaW9cIn0sVG9nZ2xlQnV0dG9uR3JvdXA9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gVG9nZ2xlQnV0dG9uR3JvdXAoKXtyZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9KDAsX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKFRvZ2dsZUJ1dHRvbkdyb3VwLGUpO3ZhciB0PVRvZ2dsZUJ1dHRvbkdyb3VwLnByb3RvdHlwZTtyZXR1cm4gdC5nZXRWYWx1ZXM9ZnVuY3Rpb24gZ2V0VmFsdWVzKCl7dmFyIGU9dGhpcy5wcm9wcy52YWx1ZTtyZXR1cm4gbnVsbD09ZT9bXTpbXS5jb25jYXQoZSl9LHQuaGFuZGxlVG9nZ2xlPWZ1bmN0aW9uIGhhbmRsZVRvZ2dsZShlKXt2YXIgdD10aGlzLnByb3BzLHI9dC50eXBlLG89dC5vbkNoYW5nZSxuPXRoaXMuZ2V0VmFsdWVzKCksdT0tMSE9PW4uaW5kZXhPZihlKTtcInJhZGlvXCIhPT1yP28odT9uLmZpbHRlcihmdW5jdGlvbih0KXtyZXR1cm4gdCE9PWV9KTpuLmNvbmNhdChbZV0pKTp1fHxvKGUpfSx0LnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXt2YXIgZT10aGlzLHQ9dGhpcy5wcm9wcyxyPXQuY2hpbGRyZW4sbz10LnR5cGUsbj10Lm5hbWUsdT0oMCxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkodCxbXCJjaGlsZHJlblwiLFwidHlwZVwiLFwibmFtZVwiXSksYT10aGlzLmdldFZhbHVlcygpO3JldHVyblwicmFkaW9cIiE9PW98fG58fChcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WPygwLF9pbnZhcmlhbnQuZGVmYXVsdCkoITEsJ0EgYG5hbWVgIGlzIHJlcXVpcmVkIHRvIGdyb3VwIHRoZSB0b2dnbGUgYnV0dG9ucyB3aGVuIHRoZSBgdHlwZWAgaXMgc2V0IHRvIFwicmFkaW9cIicpOmludmFyaWFudCghMSkpLGRlbGV0ZSB1Lm9uQ2hhbmdlLGRlbGV0ZSB1LnZhbHVlLF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0J1dHRvbkdyb3VwLmRlZmF1bHQsKDAsX2V4dGVuZHMyLmRlZmF1bHQpKHt9LHUse1wiZGF0YS10b2dnbGVcIjpcImJ1dHRvbnNcIn0pLF9WYWxpZENvbXBvbmVudENoaWxkcmVuLmRlZmF1bHQubWFwKHIsZnVuY3Rpb24odCl7dmFyIHI9dC5wcm9wcyx1PXIudmFsdWUsbD1yLm9uQ2hhbmdlO3JldHVybiBfcmVhY3QuZGVmYXVsdC5jbG9uZUVsZW1lbnQodCx7dHlwZTpvLG5hbWU6dC5uYW1lfHxuLGNoZWNrZWQ6LTEhPT1hLmluZGV4T2YodSksb25DaGFuZ2U6KDAsX2NyZWF0ZUNoYWluZWRGdW5jdGlvbi5kZWZhdWx0KShsLGZ1bmN0aW9uIGhhbmRsZXIoKXtyZXR1cm4gZS5oYW5kbGVUb2dnbGUodSl9KX0pfSkpfSxUb2dnbGVCdXR0b25Hcm91cH0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtUb2dnbGVCdXR0b25Hcm91cC5wcm9wVHlwZXM9cHJvcFR5cGVzLFRvZ2dsZUJ1dHRvbkdyb3VwLmRlZmF1bHRQcm9wcz1kZWZhdWx0UHJvcHM7dmFyIFVuY29udHJvbGxlZFRvZ2dsZUJ1dHRvbkdyb3VwPSgwLF91bmNvbnRyb2xsYWJsZS5kZWZhdWx0KShUb2dnbGVCdXR0b25Hcm91cCx7dmFsdWU6XCJvbkNoYW5nZVwifSk7VW5jb250cm9sbGVkVG9nZ2xlQnV0dG9uR3JvdXAuQnV0dG9uPV9Ub2dnbGVCdXR0b24uZGVmYXVsdDt2YXIgX2RlZmF1bHQ9VW5jb250cm9sbGVkVG9nZ2xlQnV0dG9uR3JvdXA7ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsUnZaMmRzWlVKMWRIUnZia2R5YjNWd0xtcHpJbDBzSW01aGJXVnpJanBiSWw5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUWlMQ0p5WlhGMWFYSmxJaXdpWlhod2IzSjBjeUlzSWw5ZlpYTk5iMlIxYkdVaUxDSmtaV1poZFd4MElpd2lYMlY0ZEdWdVpITXlJaXdpWDI5aWFtVmpkRmRwZEdodmRYUlFjbTl3WlhKMGFXVnpURzl2YzJVeUlpd2lYMmx1YUdWeWFYUnpURzl2YzJVeUlpd2lYM0J5YjNCVWVYQmxjeUlzSWw5eVpXRmpkQ0lzSWw5cGJuWmhjbWxoYm5RaUxDSmZkVzVqYjI1MGNtOXNiR0ZpYkdVaUxDSmZZM0psWVhSbFEyaGhhVzVsWkVaMWJtTjBhVzl1SWl3aVgxWmhiR2xrUTI5dGNHOXVaVzUwUTJocGJHUnlaVzRpTENKZlFuVjBkRzl1UjNKdmRYQWlMQ0pmVkc5bloyeGxRblYwZEc5dUlpd2ljSEp2Y0ZSNWNHVnpJaXdpYm1GdFpTSXNJbk4wY21sdVp5SXNJblpoYkhWbElpd2lZVzU1SWl3aWIyNURhR0Z1WjJVaUxDSm1kVzVqSWl3aWRIbHdaU0lzSW05dVpVOW1JaXdpYVhOU1pYRjFhWEpsWkNJc0ltUmxabUYxYkhSUWNtOXdjeUlzSWxSdloyZHNaVUoxZEhSdmJrZHliM1Z3SWl3aVgxSmxZV04wSkVOdmJYQnZibVZ1ZENJc0ltRndjR3g1SWl3aWRHaHBjeUlzSW1GeVozVnRaVzUwY3lJc0lsOXdjbTkwYnlJc0luQnliM1J2ZEhsd1pTSXNJbWRsZEZaaGJIVmxjeUlzSW5CeWIzQnpJaXdpWTI5dVkyRjBJaXdpYUdGdVpHeGxWRzluWjJ4bElpd2lYM1JvYVhNa2NISnZjSE1pTENKMllXeDFaWE1pTENKcGMwRmpkR2wyWlNJc0ltbHVaR1Y0VDJZaUxDSm1hV3gwWlhJaUxDSnVJaXdpY21WdVpHVnlJaXdpWDNSb2FYTWlMQ0pmZEdocGN5UndjbTl3Y3pJaUxDSmphR2xzWkhKbGJpSXNJbkJ5YjJObGMzTWlMQ0psYm5ZaUxDSk9UMFJGWDBWT1ZpSXNJbWx1ZG1GeWFXRnVkQ0lzSW1OeVpXRjBaVVZzWlcxbGJuUWlMQ0prWVhSaExYUnZaMmRzWlNJc0ltMWhjQ0lzSW1Ob2FXeGtJaXdpWDJOb2FXeGtKSEJ5YjNCeklpd2lZMnh2Ym1WRmJHVnRaVzUwSWl3aVkyaGxZMnRsWkNJc0ltaGhibVJzWlhJaUxDSkRiMjF3YjI1bGJuUWlMQ0pWYm1OdmJuUnliMnhzWldSVWIyZG5iR1ZDZFhSMGIyNUhjbTkxY0NJc0lrSjFkSFJ2YmlJc0lsOWtaV1poZFd4MElpd2liVzlrZFd4bElsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVVZCTEVsQlFVbEJMSFZDUVVGNVFrTXNVVUZCVVN4M1JFRkZja05ETEZGQlFWRkRMRmxCUVdFc1JVRkRja0pFTEZGQlFWRkZMR0ZCUVZVc1JVRkZiRUlzU1VGQlNVTXNWVUZCV1V3c2RVSkJRWFZDUXl4UlFVRlJMREpEUVVVelEwc3NLMEpCUVdsRFRpeDFRa0ZCZFVKRExGRkJRVkVzWjBWQlJXaEZUU3huUWtGQmEwSlFMSFZDUVVGMVFrTXNVVUZCVVN4cFJFRkZha1JQTEZkQlFXRlNMSFZDUVVGMVFrTXNVVUZCVVN4bFFVVTFRMUVzVDBGQlUxUXNkVUpCUVhWQ1F5eFJRVUZSTEZWQlJYaERVeXhYUVVGaFZpeDFRa0ZCZFVKRExGRkJRVkVzWTBGRk5VTlZMR2RDUVVGclFsZ3NkVUpCUVhWQ1F5eFJRVUZSTEcxQ1FVVnFSRmNzZFVKQlFYbENXaXgxUWtGQmRVSkRMRkZCUVZFc2EwTkJSWGhFV1N4M1FrRkJNRUppTEhWQ1FVRjFRa01zVVVGQlVTeHRRMEZGZWtSaExHRkJRV1ZrTEhWQ1FVRjFRa01zVVVGQlVTeHJRa0ZGT1VOakxHTkJRV2RDWml4MVFrRkJkVUpETEZGQlFWRXNiVUpCUlM5RFpTeFZRVUZaTEVOQlRXUkRMRXRCUVUxVUxGZEJRVmRLTEZGQlFWRmpMRTlCVDNwQ1F5eE5RVUZQV0N4WFFVRlhTaXhSUVVGUlowSXNTVUZUTVVKRExGTkJRVlZpTEZkQlFWZEtMRkZCUVZGclFpeExRVTAzUWtNc1MwRkJUV1lzVjBGQlYwb3NVVUZCVVc5Q0xFMUJRVTBzUTBGQlF5eFhRVUZaTEZWQlFWVkRMRmxCUlhCRVF5eGhRVUZsTEVOQlEycENTQ3hMUVVGTkxGTkJSMHBKTEd0Q1FVVktMRk5CUVZWRExFZEJSMUlzVTBGQlUwUXNiMEpCUTFBc1QwRkJUME1zUlVGQmFVSkRMRTFCUVUxRExFdEJRVTFETEZsQlFXTkVMRTFCU0hCRUxFVkJRVWwyUWl4blFrRkJaMEpJTEZOQlFWTjFRaXhyUWtGQmJVSkRMRWRCVFdoRUxFbEJRVWxKTEVWQlFWTk1MR3RDUVVGclFrMHNWVUZuUlM5Q0xFOUJPVVJCUkN4RlFVRlBSU3hWUVVGWkxGTkJRVk5CTEZsQlF6RkNMRWxCUVVsbUxFVkJRVkZYTEV0QlFVdExMRTFCUVUxb1FpeE5RVU4yUWl4UFFVRm5RaXhOUVVGVVFTeEZRVUZuUWl4SFFVRkxMRWRCUVVkcFFpeFBRVUZQYWtJc1NVRkhlRU5oTEVWQlFVOUxMR0ZCUVdVc1UwRkJVMEVzWVVGQllXeENMRWRCUXpGRExFbEJRVWx0UWl4RlFVRmpVaXhMUVVGTFN5eE5RVU51UWxvc1JVRkJUMlVzUlVGQldXWXNTMEZEYmtKR0xFVkJRVmRwUWl4RlFVRlpha0lzVTBGRGRrSnJRaXhGUVVGVFZDeExRVUZMU1N4WlFVTmtUU3hIUVVGelF5eEpRVUV6UWtRc1JVRkJUMFVzVVVGQlVYUkNMRWRCUldwQ0xGVkJRVlJKTEVWQlUwWkdMRVZCUkVWdFFpeEZRVU5QUkN4RlFVRlBSeXhQUVVGUExGTkJRVlZETEVkQlF5OUNMRTlCUVU5QkxFbEJRVTE0UWl4SlFVZE9iMElzUlVGQlQwZ3NUMEZCVHl4RFFVRkRha0lzUzBGYWJrSnhRaXhIUVVOSWJrSXNSVUZCVTBZc1NVRmxabUVzUlVGQlQxa3NUMEZCVXl4VFFVRlRRU3hUUVVOMlFpeEpRVUZKUXl4RlFVRlJaaXhMUVVWU1owSXNSVUZCWldoQ0xFdEJRVXRMTEUxQlEzQkNXU3hGUVVGWFJDeEZRVUZoUXl4VFFVTjRRbmhDTEVWQlFVOTFRaXhGUVVGaGRrSXNTMEZEY0VKT0xFVkJRVTgyUWl4RlFVRmhOMElzUzBGRGNFSnJRaXhIUVVGUkxFVkJRVWszUWl3clFrRkJLMEpHTEZOQlFWTXdReXhGUVVGakxFTkJRVU1zVjBGQldTeFBRVUZSTEZOQlEzWkdVQ3hGUVVGVFZDeExRVUZMU1N4WlFVdHNRaXhOUVVwWExGVkJRVlJZTEVkQlFYTkNUaXhKUVVGcFF5eGxRVUY2UWl0Q0xGRkJRVkZETEVsQlFVbERMRlZCUVRSQ0xFVkJRVWw0UXl4WFFVRlhUaXhWUVVGVExFVkJRVThzYzBaQlFUWkdLME1zVjBGQlZTeFhRVU4yVFdoQ0xFVkJRVTFrTEdkQ1FVTk9ZeXhGUVVGTmFFSXNUVUZGVGxZc1QwRkJUMHdzVVVGQlVXZEVMR05CUVdOMFF5eGhRVUZoVml4VFFVRlRMRVZCUVVsRExGVkJRVlZFTEZOQlFWTXNSMEZCU1N0Q0xFVkJRVThzUTBGRE1VWnJRaXhqUVVGbExGbEJRMko0UXl4M1FrRkJkMEpVTEZGQlFWRnJSQ3hKUVVGSlVDeEZRVUZWTEZOQlFWVlJMRWRCUXpGRUxFbEJRVWxETEVWQlFXVkVMRVZCUVUxd1FpeE5RVU55UW1oQ0xFVkJRVkZ4UXl4RlFVRmhja01zVFVGRGNrSkZMRVZCUVZkdFF5eEZRVUZoYmtNc1UwRk5OVUlzVDBGQlQxb3NUMEZCVDB3c1VVRkJVWEZFTEdGQlFXRkdMRVZCUVU4c1EwRkRlRU5vUXl4TFFVRk5RU3hGUVVOT1RpeExRVUZOYzBNc1JVRkJUWFJETEUxQlFWRkJMRVZCUTNCQ2VVTXNVMEZCYjBNc1NVRkJNMEp1UWl4RlFVRlBSU3hSUVVGUmRFSXNSMEZEZUVKRkxGVkJRVlVzUlVGQlNWUXNkVUpCUVhWQ1VpeFRRVUZUYVVJc1JVRlNiRU1zVTBGQlUzTkRMRlZCUTNKQ0xFOUJRVTlrTEVWQlFVMVNMR0ZCUVdGc1FpeFhRVmw2UWxFc2EwSkJka1ZVTEVOQmQwVkZiRUlzVDBGQlQwd3NVVUZCVVhkRUxGZEJSV3BDYWtNc2EwSkJRV3RDV0N4VlFVRlpRU3hWUVVNNVFsY3NhMEpCUVd0Q1JDeGhRVUZsUVN4aFFVTnFReXhKUVVGSmJVTXNLMEpCUVdkRExFVkJRVWxzUkN4blFrRkJaMEpRTEZOQlFWTjFRaXhyUWtGQmJVSXNRMEZEYkVaU0xFMUJRVThzWVVGRlZEQkRMRGhDUVVFNFFrTXNUMEZCVXk5RExHTkJRV05ZTEZGQlEzSkVMRWxCUVVreVJDeFRRVUZYUml3NFFrRkRaak5FTEZGQlFWRkZMRkZCUVZVeVJDeFRRVU5zUWtNc1QwRkJUemxFTEZGQlFWVkJMRkZCUVdsQ0lpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDNKbFlXTjBMV0p2YjNSemRISmhjQzlzYVdJdlZHOW5aMnhsUW5WMGRHOXVSM0p2ZFhBdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9leHRlbmRzMz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSksX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9jbGFzc25hbWVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpLF9yZWFjdD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSksX3Byb3BUeXBlcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKSxfaXNSZXF1aXJlZEZvckExMXk9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlcy1leHRyYS9saWIvaXNSZXF1aXJlZEZvckExMXlcIikpLF9ib290c3RyYXBVdGlscz1yZXF1aXJlKFwiLi91dGlscy9ib290c3RyYXBVdGlsc1wiKSxwcm9wVHlwZXM9e2lkOigwLF9pc1JlcXVpcmVkRm9yQTExeS5kZWZhdWx0KShfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXJdKSkscGxhY2VtZW50Ol9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbXCJ0b3BcIixcInJpZ2h0XCIsXCJib3R0b21cIixcImxlZnRcIl0pLHBvc2l0aW9uVG9wOl9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ10pLHBvc2l0aW9uTGVmdDpfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmddKSxhcnJvd09mZnNldFRvcDpfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmddKSxhcnJvd09mZnNldExlZnQ6X3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXSl9LGRlZmF1bHRQcm9wcz17cGxhY2VtZW50OlwicmlnaHRcIn0sVG9vbHRpcD1mdW5jdGlvbihlKXtmdW5jdGlvbiBUb29sdGlwKCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybigwLF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShUb29sdGlwLGUpLFRvb2x0aXAucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXt2YXIgZSx0PXRoaXMucHJvcHMscj10LnBsYWNlbWVudCxvPXQucG9zaXRpb25Ub3AscD10LnBvc2l0aW9uTGVmdCxzPXQuYXJyb3dPZmZzZXRUb3AsaT10LmFycm93T2Zmc2V0TGVmdCxsPXQuY2xhc3NOYW1lLGE9dC5zdHlsZSx1PXQuY2hpbGRyZW4sZj0oMCxfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkodCxbXCJwbGFjZW1lbnRcIixcInBvc2l0aW9uVG9wXCIsXCJwb3NpdGlvbkxlZnRcIixcImFycm93T2Zmc2V0VG9wXCIsXCJhcnJvd09mZnNldExlZnRcIixcImNsYXNzTmFtZVwiLFwic3R5bGVcIixcImNoaWxkcmVuXCJdKSxuPSgwLF9ib290c3RyYXBVdGlscy5zcGxpdEJzUHJvcHMpKGYpLGQ9blswXSxfPW5bMV0sVD0oMCxfZXh0ZW5kczMuZGVmYXVsdCkoe30sKDAsX2Jvb3RzdHJhcFV0aWxzLmdldENsYXNzU2V0KShkKSwoKGU9e30pW3JdPSEwLGUpKSx5PSgwLF9leHRlbmRzMy5kZWZhdWx0KSh7dG9wOm8sbGVmdDpwfSxhKSxjPXt0b3A6cyxsZWZ0Oml9O3JldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsKDAsX2V4dGVuZHMzLmRlZmF1bHQpKHt9LF8se3JvbGU6XCJ0b29sdGlwXCIsY2xhc3NOYW1lOigwLF9jbGFzc25hbWVzLmRlZmF1bHQpKGwsVCksc3R5bGU6eX0pLF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7Y2xhc3NOYW1lOigwLF9ib290c3RyYXBVdGlscy5wcmVmaXgpKGQsXCJhcnJvd1wiKSxzdHlsZTpjfSksX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6KDAsX2Jvb3RzdHJhcFV0aWxzLnByZWZpeCkoZCxcImlubmVyXCIpfSx1KSl9LFRvb2x0aXB9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7VG9vbHRpcC5wcm9wVHlwZXM9cHJvcFR5cGVzLFRvb2x0aXAuZGVmYXVsdFByb3BzPWRlZmF1bHRQcm9wczt2YXIgX2RlZmF1bHQ9KDAsX2Jvb3RzdHJhcFV0aWxzLmJzQ2xhc3MpKFwidG9vbHRpcFwiLFRvb2x0aXApO2V4cG9ydHMuZGVmYXVsdD1fZGVmYXVsdCxtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbFJ2YjJ4MGFYQXVhbk1pWFN3aWJtRnRaWE1pT2xzaVgybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ0lzSW5KbGNYVnBjbVVpTENKbGVIQnZjblJ6SWl3aVgxOWxjMDF2WkhWc1pTSXNJbVJsWm1GMWJIUWlMQ0pmWlhoMFpXNWtjek1pTENKZmIySnFaV04wVjJsMGFHOTFkRkJ5YjNCbGNuUnBaWE5NYjI5elpUSWlMQ0pmYVc1b1pYSnBkSE5NYjI5elpUSWlMQ0pmWTJ4aGMzTnVZVzFsY3lJc0lsOXlaV0ZqZENJc0lsOXdjbTl3Vkhsd1pYTWlMQ0pmYVhOU1pYRjFhWEpsWkVadmNrRXhNWGtpTENKZlltOXZkSE4wY21Gd1ZYUnBiSE1pTENKd2NtOXdWSGx3WlhNaUxDSnBaQ0lzSW05dVpVOW1WSGx3WlNJc0luTjBjbWx1WnlJc0ltNTFiV0psY2lJc0luQnNZV05sYldWdWRDSXNJbTl1WlU5bUlpd2ljRzl6YVhScGIyNVViM0FpTENKd2IzTnBkR2x2Ymt4bFpuUWlMQ0poY25KdmQwOW1abk5sZEZSdmNDSXNJbUZ5Y205M1QyWm1jMlYwVEdWbWRDSXNJbVJsWm1GMWJIUlFjbTl3Y3lJc0lsUnZiMngwYVhBaUxDSmZVbVZoWTNRa1EyOXRjRzl1Wlc1MElpd2lZWEJ3YkhraUxDSjBhR2x6SWl3aVlYSm5kVzFsYm5Seklpd2ljSEp2ZEc5MGVYQmxJaXdpY21WdVpHVnlJaXdpWDJWNGRHVnVaSE15SWl3aVgzUm9hWE1rY0hKdmNITWlMQ0p3Y205d2N5SXNJbU5zWVhOelRtRnRaU0lzSW5OMGVXeGxJaXdpWTJocGJHUnlaVzRpTENKZmMzQnNhWFJDYzFCeWIzQnpJaXdpYzNCc2FYUkNjMUJ5YjNCeklpd2lZbk5RY205d2N5SXNJbVZzWlcxbGJuUlFjbTl3Y3lJc0ltTnNZWE56WlhNaUxDSm5aWFJEYkdGemMxTmxkQ0lzSW05MWRHVnlVM1I1YkdVaUxDSjBiM0FpTENKc1pXWjBJaXdpWVhKeWIzZFRkSGxzWlNJc0ltTnlaV0YwWlVWc1pXMWxiblFpTENKeWIyeGxJaXdpY0hKbFptbDRJaXdpUTI5dGNHOXVaVzUwSWl3aVgyUmxabUYxYkhRaUxDSmljME5zWVhOeklpd2liVzlrZFd4bElsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVVZCTEVsQlFVbEJMSFZDUVVGNVFrTXNVVUZCVVN4M1JFRkZja05ETEZGQlFWRkRMRmxCUVdFc1JVRkRja0pFTEZGQlFWRkZMR0ZCUVZVc1JVRkZiRUlzU1VGQlNVTXNWVUZCV1V3c2RVSkJRWFZDUXl4UlFVRlJMREpEUVVVelEwc3NLMEpCUVdsRFRpeDFRa0ZCZFVKRExGRkJRVkVzWjBWQlJXaEZUU3huUWtGQmEwSlFMSFZDUVVGMVFrTXNVVUZCVVN4cFJFRkZha1JQTEZsQlFXTlNMSFZDUVVGMVFrTXNVVUZCVVN4bFFVVTNRMUVzVDBGQlUxUXNkVUpCUVhWQ1F5eFJRVUZSTEZWQlJYaERVeXhYUVVGaFZpeDFRa0ZCZFVKRExGRkJRVkVzWlVGRk5VTlZMRzFDUVVGeFFsZ3NkVUpCUVhWQ1F5eFJRVUZSTERKRFFVVndSRmNzWjBKQlFXdENXQ3hSUVVGUkxEQkNRVVV4UWxrc1ZVRkJXU3hEUVUxa1F5eEpRVUZKTEVWQlFVbElMRzFDUVVGdFFsQXNVMEZCVTAwc1YwRkJWMDRzVVVGQlVWY3NWVUZCVlN4RFFVRkRUQ3hYUVVGWFRpeFJRVUZSV1N4UFFVRlJUaXhYUVVGWFRpeFJRVUZSWVN4VlFVdG9TRU1zVlVGQlYxSXNWMEZCVjA0c1VVRkJVV1VzVFVGQlRTeERRVUZETEUxQlFVOHNVVUZCVXl4VFFVRlZMRk5CU3k5RVF5eFpRVUZoVml4WFFVRlhUaXhSUVVGUlZ5eFZRVUZWTEVOQlFVTk1MRmRCUVZkT0xGRkJRVkZoTEU5QlFWRlFMRmRCUVZkT0xGRkJRVkZaTEZOQlMzcEdTeXhoUVVGaldDeFhRVUZYVGl4UlFVRlJWeXhWUVVGVkxFTkJRVU5NTEZkQlFWZE9MRkZCUVZGaExFOUJRVkZRTEZkQlFWZE9MRkZCUVZGWkxGTkJTekZHVFN4bFFVRm5RbG9zVjBGQlYwNHNVVUZCVVZjc1ZVRkJWU3hEUVVGRFRDeFhRVUZYVGl4UlFVRlJZU3hQUVVGUlVDeFhRVUZYVGl4UlFVRlJXU3hUUVVzMVJrOHNaMEpCUVdsQ1lpeFhRVUZYVGl4UlFVRlJWeXhWUVVGVkxFTkJRVU5NTEZkQlFWZE9MRkZCUVZGaExFOUJRVkZRTEZkQlFWZE9MRkZCUVZGWkxGVkJSVE5HVVN4aFFVRmxMRU5CUTJwQ1RpeFZRVUZYTEZOQlIxUlBMRkZCUlVvc1UwRkJWVU1zUjBGSFVpeFRRVUZUUkN4VlFVTlFMRTlCUVU5RExFVkJRV2xDUXl4TlFVRk5ReXhMUVVGTlF5eFpRVUZqUkN4TFFUUkRjRVFzVDBFdlEwRXNSVUZCU1hKQ0xHZENRVUZuUWtnc1UwRkJVM0ZDTEZGQlFWTkRMRWRCVFhwQ1JDeFJRVUZSU3l4VlFVVmtReXhQUVVGVExGTkJRVk5CTEZOQlEzWkNMRWxCUVVsRExFVkJSVUZETEVWQlFXTk1MRXRCUVV0TkxFMUJRMjVDYUVJc1JVRkJXV1VzUlVGQldXWXNWVUZEZUVKRkxFVkJRV05oTEVWQlFWbGlMRmxCUXpGQ1F5eEZRVUZsV1N4RlFVRlpXaXhoUVVNelFrTXNSVUZCYVVKWExFVkJRVmxZTEdWQlF6ZENReXhGUVVGclFsVXNSVUZCV1ZZc1owSkJRemxDV1N4RlFVRlpSaXhGUVVGWlJTeFZRVU40UWtNc1JVRkJVVWdzUlVGQldVY3NUVUZEY0VKRExFVkJRVmRLTEVWQlFWbEpMRk5CUTNaQ1NDeEhRVUZSTEVWQlFVazFRaXdyUWtGQkswSkdMRk5CUVZNMlFpeEZRVUZoTEVOQlFVTXNXVUZCWVN4alFVRmxMR1ZCUVdkQ0xHbENRVUZyUWl4clFrRkJiVUlzV1VGQllTeFJRVUZUTEdGQlJYcExTeXhIUVVGblFpeEZRVUZKTVVJc1owSkJRV2RDTWtJc1kwRkJZMHdzUjBGRGJFUk5MRVZCUVZWR0xFVkJRV01zUjBGRGVFSkhMRVZCUVdWSUxFVkJRV01zUjBGRk4wSkpMRWRCUVZVc1JVRkJTWEpETEZWQlFWVkVMRk5CUVZNc1NVRkJTU3hGUVVGSlVTeG5Ra0ZCWjBJclFpeGhRVUZoU0N4TFFVRlhVaXhGUVVGWkxFbEJRV05rTEVsQlFXRXNSVUZCVFdNc1NVRkRPVWhaTEVkQlFXRXNSVUZCU1haRExGVkJRVlZFTEZOQlFWTXNRMEZEZEVONVF5eEpRVUZMZWtJc1JVRkRUREJDTEV0QlFVMTZRaXhIUVVOTVpTeEhRVU5EVnl4RlFVRmhMRU5CUTJaR0xFbEJRVXQyUWl4RlFVTk1kMElzUzBGQlRYWkNMRWRCUlZJc1QwRkJUMlFzVDBGQlQwd3NVVUZCVVRSRExHTkJRV01zVDBGQlR5eEZRVUZKTTBNc1ZVRkJWVVFzVTBGQlV5eEhRVUZKY1VNc1JVRkJZeXhEUVVOc1JsRXNTMEZCVFN4VlFVTk9aQ3hYUVVGWExFVkJRVWt6UWl4WlFVRlpTaXhUUVVGVEswSXNSVUZCVjA4c1IwRkRMME5PTEUxQlFVOVJMRWxCUTB4dVF5eFBRVUZQVEN4UlFVRlJORU1zWTBGQll5eE5RVUZQTEVOQlEzUkRZaXhYUVVGWExFVkJRVWwyUWl4blFrRkJaMEp6UXl4UlFVRlJWaXhGUVVGVExGTkJRMmhFU2l4TlFVRlBWeXhKUVVOTWRFTXNUMEZCVDB3c1VVRkJVVFJETEdOQlFXTXNUVUZCVHl4RFFVTjBRMklzVjBGQlZ5eEZRVUZKZGtJc1owSkJRV2RDYzBNc1VVRkJVVllzUlVGQlV5eFZRVU12UTBnc1MwRkhSVm9zVVVGb1JGUXNRMEZwUkVWb1FpeFBRVUZQVEN4UlFVRlJLME1zVjBGRmFrSXhRaXhSUVVGUldpeFZRVUZaUVN4VlFVTndRbGtzVVVGQlVVUXNZVUZCWlVFc1lVRkZka0lzU1VGQlNUUkNMRlZCUVZjc1JVRkJTWGhETEdkQ1FVRm5RbmxETEZOQlFWTXNWVUZCVnpWQ0xGTkJSWFpFZGtJc1VVRkJVVVVzVVVGQlZXZEVMRk5CUTJ4Q1JTeFBRVUZQY0VRc1VVRkJWVUVzVVVGQmFVSWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F0WW05dmRITjBjbUZ3TDJ4cFlpOVViMjlzZEdsd0xtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9leHRlbmRzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXh0ZW5kc1wiKSksX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKSxfaW5oZXJpdHNMb29zZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpLF9jbGFzc25hbWVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpLF9yZWFjdD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSksX2Jvb3RzdHJhcFV0aWxzPXJlcXVpcmUoXCIuL3V0aWxzL2Jvb3RzdHJhcFV0aWxzXCIpLF9TdHlsZUNvbmZpZz1yZXF1aXJlKFwiLi91dGlscy9TdHlsZUNvbmZpZ1wiKSxXZWxsPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIFdlbGwoKXtyZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9cmV0dXJuKDAsX2luaGVyaXRzTG9vc2UyLmRlZmF1bHQpKFdlbGwsZSksV2VsbC5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uIHJlbmRlcigpe3ZhciBlPXRoaXMucHJvcHMsdD1lLmNsYXNzTmFtZSxyPSgwLF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShlLFtcImNsYXNzTmFtZVwiXSkscz0oMCxfYm9vdHN0cmFwVXRpbHMuc3BsaXRCc1Byb3BzKShyKSxsPXNbMF0sbz1zWzFdLGk9KDAsX2Jvb3RzdHJhcFV0aWxzLmdldENsYXNzU2V0KShsKTtyZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSxvLHtjbGFzc05hbWU6KDAsX2NsYXNzbmFtZXMuZGVmYXVsdCkodCxpKX0pKX0sV2VsbH0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KSxfZGVmYXVsdD0oMCxfYm9vdHN0cmFwVXRpbHMuYnNDbGFzcykoXCJ3ZWxsXCIsKDAsX2Jvb3RzdHJhcFV0aWxzLmJzU2l6ZXMpKFtfU3R5bGVDb25maWcuU2l6ZS5MQVJHRSxfU3R5bGVDb25maWcuU2l6ZS5TTUFMTF0sV2VsbCkpO2V4cG9ydHMuZGVmYXVsdD1fZGVmYXVsdCxtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbGRsYkd3dWFuTWlYU3dpYm1GdFpYTWlPbHNpWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDSXNJbkpsY1hWcGNtVWlMQ0psZUhCdmNuUnpJaXdpWDE5bGMwMXZaSFZzWlNJc0ltUmxabUYxYkhRaUxDSmZaWGgwWlc1a2N6SWlMQ0pmYjJKcVpXTjBWMmwwYUc5MWRGQnliM0JsY25ScFpYTk1iMjl6WlRJaUxDSmZhVzVvWlhKcGRITk1iMjl6WlRJaUxDSmZZMnhoYzNOdVlXMWxjeUlzSWw5eVpXRmpkQ0lzSWw5aWIyOTBjM1J5WVhCVmRHbHNjeUlzSWw5VGRIbHNaVU52Ym1acFp5SXNJbGRsYkd3aUxDSmZVbVZoWTNRa1EyOXRjRzl1Wlc1MElpd2lZWEJ3YkhraUxDSjBhR2x6SWl3aVlYSm5kVzFsYm5Seklpd2ljSEp2ZEc5MGVYQmxJaXdpY21WdVpHVnlJaXdpWDNSb2FYTWtjSEp2Y0hNaUxDSndjbTl3Y3lJc0ltTnNZWE56VG1GdFpTSXNJbDl6Y0d4cGRFSnpVSEp2Y0hNaUxDSnpjR3hwZEVKelVISnZjSE1pTENKaWMxQnliM0J6SWl3aVpXeGxiV1Z1ZEZCeWIzQnpJaXdpWTJ4aGMzTmxjeUlzSW1kbGRFTnNZWE56VTJWMElpd2lZM0psWVhSbFJXeGxiV1Z1ZENJc0lrTnZiWEJ2Ym1WdWRDSXNJbDlrWldaaGRXeDBJaXdpWW5ORGJHRnpjeUlzSW1KelUybDZaWE1pTENKVGFYcGxJaXdpVEVGU1IwVWlMQ0pUVFVGTVRDSXNJbTF2WkhWc1pTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZGUVN4SlFVRkpRU3gxUWtGQmVVSkRMRkZCUVZFc2QwUkJSWEpEUXl4UlFVRlJReXhaUVVGaExFVkJRM0pDUkN4UlFVRlJSU3hoUVVGVkxFVkJSV3hDTEVsQlFVbERMRlZCUVZsTUxIVkNRVUYxUWtNc1VVRkJVU3d5UTBGRk0wTkxMQ3RDUVVGcFEwNHNkVUpCUVhWQ1F5eFJRVUZSTEdkRlFVVm9SVTBzWjBKQlFXdENVQ3gxUWtGQmRVSkRMRkZCUVZFc2FVUkJSV3BFVHl4WlFVRmpVaXgxUWtGQmRVSkRMRkZCUVZFc1pVRkZOME5STEU5QlFWTlVMSFZDUVVGMVFrTXNVVUZCVVN4VlFVVjRRMU1zWjBKQlFXdENWQ3hSUVVGUkxEQkNRVVV4UWxVc1lVRkJaVllzVVVGQlVTeDFRa0ZGZGtKWExFdEJSVW9zVTBGQlZVTXNSMEZIVWl4VFFVRlRSQ3hQUVVOUUxFOUJRVTlETEVWQlFXbENReXhOUVVGTlF5eExRVUZOUXl4WlFVRmpSQ3hMUVc5Q2NFUXNUMEYyUWtFc1JVRkJTVklzWjBKQlFXZENTQ3hUUVVGVFVTeExRVUZOUXl4SFFVMTBRa1FzUzBGQlMwc3NWVUZGV0VNc1QwRkJVeXhUUVVGVFFTeFRRVU4yUWl4SlFVRkpReXhGUVVGalNpeExRVUZMU3l4TlFVTnVRa01zUlVGQldVWXNSVUZCV1VVc1ZVRkRlRUpFTEVkQlFWRXNSVUZCU1dRc0swSkJRU3RDUml4VFFVRlRaU3hGUVVGaExFTkJRVU1zWTBGRmJFVkhMRWRCUVdkQ0xFVkJRVWxhTEdkQ1FVRm5RbUVzWTBGQlkwZ3NSMEZEYkVSSkxFVkJRVlZHTEVWQlFXTXNSMEZEZUVKSExFVkJRV1ZJTEVWQlFXTXNSMEZGTjBKSkxFZEJRVlVzUlVGQlNXaENMR2RDUVVGblFtbENMR0ZCUVdGSUxFZEJReTlETEU5QlFVOW1MRTlCUVU5TUxGRkJRVkYzUWl4alFVRmpMRTlCUVU4c1JVRkJTWFpDTEZWQlFWVkVMRk5CUVZNc1IwRkJTWEZDTEVWQlFXTXNRMEZEYkVaS0xGZEJRVmNzUlVGQlNXSXNXVUZCV1Vvc1UwRkJVMmxDTEVWQlFWZExMRTlCU1RWRFpDeExRWGhDVkN4RFFYbENSVWdzVDBGQlQwd3NVVUZCVVhsQ0xGZEJSV0pETEZWQlFWY3NSVUZCU1hCQ0xHZENRVUZuUW5GQ0xGTkJRVk1zVVVGQlVTeEZRVUZKY2tJc1owSkJRV2RDYzBJc1UwRkJVeXhEUVVGRGNrSXNZVUZCWVhOQ0xFdEJRVXRETEUxQlFVOTJRaXhoUVVGaGMwSXNTMEZCUzBVc1QwRkJVWFpDTEU5QlJYSkpWaXhSUVVGUlJTeFJRVUZWTUVJc1UwRkRiRUpOTEU5QlFVOXNReXhSUVVGVlFTeFJRVUZwUWlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDMWliMjkwYzNSeVlYQXZiR2xpTDFkbGJHd3Vhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIiksX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy51dGlscz12b2lkIDA7dmFyIF9BY2NvcmRpb24yPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQWNjb3JkaW9uXCIpKTtleHBvcnRzLkFjY29yZGlvbj1fQWNjb3JkaW9uMi5kZWZhdWx0O3ZhciBfQWxlcnQyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQWxlcnRcIikpO2V4cG9ydHMuQWxlcnQ9X0FsZXJ0Mi5kZWZhdWx0O3ZhciBfQmFkZ2UyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQmFkZ2VcIikpO2V4cG9ydHMuQmFkZ2U9X0JhZGdlMi5kZWZhdWx0O3ZhciBfQnJlYWRjcnVtYjI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9CcmVhZGNydW1iXCIpKTtleHBvcnRzLkJyZWFkY3J1bWI9X0JyZWFkY3J1bWIyLmRlZmF1bHQ7dmFyIF9CcmVhZGNydW1iSXRlbTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9CcmVhZGNydW1iSXRlbVwiKSk7ZXhwb3J0cy5CcmVhZGNydW1iSXRlbT1fQnJlYWRjcnVtYkl0ZW0yLmRlZmF1bHQ7dmFyIF9CdXR0b24yPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQnV0dG9uXCIpKTtleHBvcnRzLkJ1dHRvbj1fQnV0dG9uMi5kZWZhdWx0O3ZhciBfQnV0dG9uR3JvdXAyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQnV0dG9uR3JvdXBcIikpO2V4cG9ydHMuQnV0dG9uR3JvdXA9X0J1dHRvbkdyb3VwMi5kZWZhdWx0O3ZhciBfQnV0dG9uVG9vbGJhcjI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9CdXR0b25Ub29sYmFyXCIpKTtleHBvcnRzLkJ1dHRvblRvb2xiYXI9X0J1dHRvblRvb2xiYXIyLmRlZmF1bHQ7dmFyIF9DYXJvdXNlbDI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9DYXJvdXNlbFwiKSk7ZXhwb3J0cy5DYXJvdXNlbD1fQ2Fyb3VzZWwyLmRlZmF1bHQ7dmFyIF9DYXJvdXNlbEl0ZW0yPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQ2Fyb3VzZWxJdGVtXCIpKTtleHBvcnRzLkNhcm91c2VsSXRlbT1fQ2Fyb3VzZWxJdGVtMi5kZWZhdWx0O3ZhciBfQ2hlY2tib3gyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQ2hlY2tib3hcIikpO2V4cG9ydHMuQ2hlY2tib3g9X0NoZWNrYm94Mi5kZWZhdWx0O3ZhciBfQ2xlYXJmaXgyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQ2xlYXJmaXhcIikpO2V4cG9ydHMuQ2xlYXJmaXg9X0NsZWFyZml4Mi5kZWZhdWx0O3ZhciBfQ2xvc2VCdXR0b24yPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQ2xvc2VCdXR0b25cIikpO2V4cG9ydHMuQ2xvc2VCdXR0b249X0Nsb3NlQnV0dG9uMi5kZWZhdWx0O3ZhciBfQ29udHJvbExhYmVsMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0NvbnRyb2xMYWJlbFwiKSk7ZXhwb3J0cy5Db250cm9sTGFiZWw9X0NvbnRyb2xMYWJlbDIuZGVmYXVsdDt2YXIgX0NvbDI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Db2xcIikpO2V4cG9ydHMuQ29sPV9Db2wyLmRlZmF1bHQ7dmFyIF9Db2xsYXBzZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Db2xsYXBzZVwiKSk7ZXhwb3J0cy5Db2xsYXBzZT1fQ29sbGFwc2UyLmRlZmF1bHQ7dmFyIF9Ecm9wZG93bjI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Ecm9wZG93blwiKSk7ZXhwb3J0cy5Ecm9wZG93bj1fRHJvcGRvd24yLmRlZmF1bHQ7dmFyIF9Ecm9wZG93bkJ1dHRvbjI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Ecm9wZG93bkJ1dHRvblwiKSk7ZXhwb3J0cy5Ecm9wZG93bkJ1dHRvbj1fRHJvcGRvd25CdXR0b24yLmRlZmF1bHQ7dmFyIF9GYWRlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0ZhZGVcIikpO2V4cG9ydHMuRmFkZT1fRmFkZTIuZGVmYXVsdDt2YXIgX0Zvcm0yPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRm9ybVwiKSk7ZXhwb3J0cy5Gb3JtPV9Gb3JtMi5kZWZhdWx0O3ZhciBfRm9ybUNvbnRyb2wyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRm9ybUNvbnRyb2xcIikpO2V4cG9ydHMuRm9ybUNvbnRyb2w9X0Zvcm1Db250cm9sMi5kZWZhdWx0O3ZhciBfRm9ybUdyb3VwMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0Zvcm1Hcm91cFwiKSk7ZXhwb3J0cy5Gb3JtR3JvdXA9X0Zvcm1Hcm91cDIuZGVmYXVsdDt2YXIgX0dseXBoaWNvbjI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9HbHlwaGljb25cIikpO2V4cG9ydHMuR2x5cGhpY29uPV9HbHlwaGljb24yLmRlZmF1bHQ7dmFyIF9HcmlkMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0dyaWRcIikpO2V4cG9ydHMuR3JpZD1fR3JpZDIuZGVmYXVsdDt2YXIgX0hlbHBCbG9jazI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9IZWxwQmxvY2tcIikpO2V4cG9ydHMuSGVscEJsb2NrPV9IZWxwQmxvY2syLmRlZmF1bHQ7dmFyIF9JbWFnZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9JbWFnZVwiKSk7ZXhwb3J0cy5JbWFnZT1fSW1hZ2UyLmRlZmF1bHQ7dmFyIF9JbnB1dEdyb3VwMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0lucHV0R3JvdXBcIikpO2V4cG9ydHMuSW5wdXRHcm91cD1fSW5wdXRHcm91cDIuZGVmYXVsdDt2YXIgX0p1bWJvdHJvbjI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9KdW1ib3Ryb25cIikpO2V4cG9ydHMuSnVtYm90cm9uPV9KdW1ib3Ryb24yLmRlZmF1bHQ7dmFyIF9MYWJlbDI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9MYWJlbFwiKSk7ZXhwb3J0cy5MYWJlbD1fTGFiZWwyLmRlZmF1bHQ7dmFyIF9MaXN0R3JvdXAyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTGlzdEdyb3VwXCIpKTtleHBvcnRzLkxpc3RHcm91cD1fTGlzdEdyb3VwMi5kZWZhdWx0O3ZhciBfTGlzdEdyb3VwSXRlbTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9MaXN0R3JvdXBJdGVtXCIpKTtleHBvcnRzLkxpc3RHcm91cEl0ZW09X0xpc3RHcm91cEl0ZW0yLmRlZmF1bHQ7dmFyIF9NZWRpYTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9NZWRpYVwiKSk7ZXhwb3J0cy5NZWRpYT1fTWVkaWEyLmRlZmF1bHQ7dmFyIF9NZW51SXRlbTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9NZW51SXRlbVwiKSk7ZXhwb3J0cy5NZW51SXRlbT1fTWVudUl0ZW0yLmRlZmF1bHQ7dmFyIF9Nb2RhbDI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Nb2RhbFwiKSk7ZXhwb3J0cy5Nb2RhbD1fTW9kYWwyLmRlZmF1bHQ7dmFyIF9Nb2RhbEJvZHkyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTW9kYWxCb2R5XCIpKTtleHBvcnRzLk1vZGFsQm9keT1fTW9kYWxCb2R5Mi5kZWZhdWx0O3ZhciBfTW9kYWxEaWFsb2cyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTW9kYWxEaWFsb2dcIikpO2V4cG9ydHMuTW9kYWxEaWFsb2c9X01vZGFsRGlhbG9nMi5kZWZhdWx0O3ZhciBfTW9kYWxGb290ZXIyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTW9kYWxGb290ZXJcIikpO2V4cG9ydHMuTW9kYWxGb290ZXI9X01vZGFsRm9vdGVyMi5kZWZhdWx0O3ZhciBfTW9kYWxIZWFkZXIyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTW9kYWxIZWFkZXJcIikpO2V4cG9ydHMuTW9kYWxIZWFkZXI9X01vZGFsSGVhZGVyMi5kZWZhdWx0O3ZhciBfTW9kYWxUaXRsZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Nb2RhbFRpdGxlXCIpKTtleHBvcnRzLk1vZGFsVGl0bGU9X01vZGFsVGl0bGUyLmRlZmF1bHQ7dmFyIF9OYXYyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTmF2XCIpKTtleHBvcnRzLk5hdj1fTmF2Mi5kZWZhdWx0O3ZhciBfTmF2YmFyMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL05hdmJhclwiKSk7ZXhwb3J0cy5OYXZiYXI9X05hdmJhcjIuZGVmYXVsdDt2YXIgX05hdmJhckJyYW5kMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL05hdmJhckJyYW5kXCIpKTtleHBvcnRzLk5hdmJhckJyYW5kPV9OYXZiYXJCcmFuZDIuZGVmYXVsdDt2YXIgX05hdkRyb3Bkb3duMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL05hdkRyb3Bkb3duXCIpKTtleHBvcnRzLk5hdkRyb3Bkb3duPV9OYXZEcm9wZG93bjIuZGVmYXVsdDt2YXIgX05hdkl0ZW0yPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTmF2SXRlbVwiKSk7ZXhwb3J0cy5OYXZJdGVtPV9OYXZJdGVtMi5kZWZhdWx0O3ZhciBfT3ZlcmxheTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9PdmVybGF5XCIpKTtleHBvcnRzLk92ZXJsYXk9X092ZXJsYXkyLmRlZmF1bHQ7dmFyIF9PdmVybGF5VHJpZ2dlcjI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9PdmVybGF5VHJpZ2dlclwiKSk7ZXhwb3J0cy5PdmVybGF5VHJpZ2dlcj1fT3ZlcmxheVRyaWdnZXIyLmRlZmF1bHQ7dmFyIF9QYWdlSGVhZGVyMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1BhZ2VIZWFkZXJcIikpO2V4cG9ydHMuUGFnZUhlYWRlcj1fUGFnZUhlYWRlcjIuZGVmYXVsdDt2YXIgX1BhZ2VJdGVtMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1BhZ2VJdGVtXCIpKTtleHBvcnRzLlBhZ2VJdGVtPV9QYWdlSXRlbTIuZGVmYXVsdDt2YXIgX1BhZ2VyMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1BhZ2VyXCIpKTtleHBvcnRzLlBhZ2VyPV9QYWdlcjIuZGVmYXVsdDt2YXIgX1BhZ2luYXRpb24yPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vUGFnaW5hdGlvblwiKSk7ZXhwb3J0cy5QYWdpbmF0aW9uPV9QYWdpbmF0aW9uMi5kZWZhdWx0O3ZhciBfUGFuZWwyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vUGFuZWxcIikpO2V4cG9ydHMuUGFuZWw9X1BhbmVsMi5kZWZhdWx0O3ZhciBfUGFuZWxHcm91cDI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9QYW5lbEdyb3VwXCIpKTtleHBvcnRzLlBhbmVsR3JvdXA9X1BhbmVsR3JvdXAyLmRlZmF1bHQ7dmFyIF9Qb3BvdmVyMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1BvcG92ZXJcIikpO2V4cG9ydHMuUG9wb3Zlcj1fUG9wb3ZlcjIuZGVmYXVsdDt2YXIgX1Byb2dyZXNzQmFyMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1Byb2dyZXNzQmFyXCIpKTtleHBvcnRzLlByb2dyZXNzQmFyPV9Qcm9ncmVzc0JhcjIuZGVmYXVsdDt2YXIgX1JhZGlvMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1JhZGlvXCIpKTtleHBvcnRzLlJhZGlvPV9SYWRpbzIuZGVmYXVsdDt2YXIgX1Jlc3BvbnNpdmVFbWJlZDI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9SZXNwb25zaXZlRW1iZWRcIikpO2V4cG9ydHMuUmVzcG9uc2l2ZUVtYmVkPV9SZXNwb25zaXZlRW1iZWQyLmRlZmF1bHQ7dmFyIF9Sb3cyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vUm93XCIpKTtleHBvcnRzLlJvdz1fUm93Mi5kZWZhdWx0O3ZhciBfU2FmZUFuY2hvcjI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9TYWZlQW5jaG9yXCIpKTtleHBvcnRzLlNhZmVBbmNob3I9X1NhZmVBbmNob3IyLmRlZmF1bHQ7dmFyIF9TcGxpdEJ1dHRvbjI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9TcGxpdEJ1dHRvblwiKSk7ZXhwb3J0cy5TcGxpdEJ1dHRvbj1fU3BsaXRCdXR0b24yLmRlZmF1bHQ7dmFyIF9UYWIyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVGFiXCIpKTtleHBvcnRzLlRhYj1fVGFiMi5kZWZhdWx0O3ZhciBfVGFiQ29udGFpbmVyMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1RhYkNvbnRhaW5lclwiKSk7ZXhwb3J0cy5UYWJDb250YWluZXI9X1RhYkNvbnRhaW5lcjIuZGVmYXVsdDt2YXIgX1RhYkNvbnRlbnQyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVGFiQ29udGVudFwiKSk7ZXhwb3J0cy5UYWJDb250ZW50PV9UYWJDb250ZW50Mi5kZWZhdWx0O3ZhciBfVGFibGUyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVGFibGVcIikpO2V4cG9ydHMuVGFibGU9X1RhYmxlMi5kZWZhdWx0O3ZhciBfVGFiUGFuZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9UYWJQYW5lXCIpKTtleHBvcnRzLlRhYlBhbmU9X1RhYlBhbmUyLmRlZmF1bHQ7dmFyIF9UYWJzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1RhYnNcIikpO2V4cG9ydHMuVGFicz1fVGFiczIuZGVmYXVsdDt2YXIgX1RodW1ibmFpbDI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9UaHVtYm5haWxcIikpO2V4cG9ydHMuVGh1bWJuYWlsPV9UaHVtYm5haWwyLmRlZmF1bHQ7dmFyIF9Ub2dnbGVCdXR0b24yPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVG9nZ2xlQnV0dG9uXCIpKTtleHBvcnRzLlRvZ2dsZUJ1dHRvbj1fVG9nZ2xlQnV0dG9uMi5kZWZhdWx0O3ZhciBfVG9nZ2xlQnV0dG9uR3JvdXAyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVG9nZ2xlQnV0dG9uR3JvdXBcIikpO2V4cG9ydHMuVG9nZ2xlQnV0dG9uR3JvdXA9X1RvZ2dsZUJ1dHRvbkdyb3VwMi5kZWZhdWx0O3ZhciBfVG9vbHRpcDI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Ub29sdGlwXCIpKTtleHBvcnRzLlRvb2x0aXA9X1Rvb2x0aXAyLmRlZmF1bHQ7dmFyIF9XZWxsMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1dlbGxcIikpO2V4cG9ydHMuV2VsbD1fV2VsbDIuZGVmYXVsdDt2YXIgX3V0aWxzPV9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL3V0aWxzXCIpKTtleHBvcnRzLnV0aWxzPV91dGlscztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltbHVaR1Y0TG1weklsMHNJbTVoYldWeklqcGJJbDlwYm5SbGNtOXdVbVZ4ZFdseVpWZHBiR1JqWVhKa0lpd2ljbVZ4ZFdseVpTSXNJbDlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRaUxDSmxlSEJ2Y25Seklpd2lYMTlsYzAxdlpIVnNaU0lzSW5WMGFXeHpJaXdpWDBGalkyOXlaR2x2YmpJaUxDSkJZMk52Y21ScGIyNGlMQ0prWldaaGRXeDBJaXdpWDBGc1pYSjBNaUlzSWtGc1pYSjBJaXdpWDBKaFpHZGxNaUlzSWtKaFpHZGxJaXdpWDBKeVpXRmtZM0oxYldJeUlpd2lRbkpsWVdSamNuVnRZaUlzSWw5Q2NtVmhaR055ZFcxaVNYUmxiVElpTENKQ2NtVmhaR055ZFcxaVNYUmxiU0lzSWw5Q2RYUjBiMjR5SWl3aVFuVjBkRzl1SWl3aVgwSjFkSFJ2YmtkeWIzVndNaUlzSWtKMWRIUnZia2R5YjNWd0lpd2lYMEoxZEhSdmJsUnZiMnhpWVhJeUlpd2lRblYwZEc5dVZHOXZiR0poY2lJc0lsOURZWEp2ZFhObGJESWlMQ0pEWVhKdmRYTmxiQ0lzSWw5RFlYSnZkWE5sYkVsMFpXMHlJaXdpUTJGeWIzVnpaV3hKZEdWdElpd2lYME5vWldOclltOTRNaUlzSWtOb1pXTnJZbTk0SWl3aVgwTnNaV0Z5Wm1sNE1pSXNJa05zWldGeVptbDRJaXdpWDBOc2IzTmxRblYwZEc5dU1pSXNJa05zYjNObFFuVjBkRzl1SWl3aVgwTnZiblJ5YjJ4TVlXSmxiRElpTENKRGIyNTBjbTlzVEdGaVpXd2lMQ0pmUTI5c01pSXNJa052YkNJc0lsOURiMnhzWVhCelpUSWlMQ0pEYjJ4c1lYQnpaU0lzSWw5RWNtOXdaRzkzYmpJaUxDSkVjbTl3Wkc5M2JpSXNJbDlFY205d1pHOTNia0oxZEhSdmJqSWlMQ0pFY205d1pHOTNia0oxZEhSdmJpSXNJbDlHWVdSbE1pSXNJa1poWkdVaUxDSmZSbTl5YlRJaUxDSkdiM0p0SWl3aVgwWnZjbTFEYjI1MGNtOXNNaUlzSWtadmNtMURiMjUwY205c0lpd2lYMFp2Y20xSGNtOTFjRElpTENKR2IzSnRSM0p2ZFhBaUxDSmZSMng1Y0docFkyOXVNaUlzSWtkc2VYQm9hV052YmlJc0lsOUhjbWxrTWlJc0lrZHlhV1FpTENKZlNHVnNjRUpzYjJOck1pSXNJa2hsYkhCQ2JHOWpheUlzSWw5SmJXRm5aVElpTENKSmJXRm5aU0lzSWw5SmJuQjFkRWR5YjNWd01pSXNJa2x1Y0hWMFIzSnZkWEFpTENKZlNuVnRZbTkwY205dU1pSXNJa3AxYldKdmRISnZiaUlzSWw5TVlXSmxiRElpTENKTVlXSmxiQ0lzSWw5TWFYTjBSM0p2ZFhBeUlpd2lUR2x6ZEVkeWIzVndJaXdpWDB4cGMzUkhjbTkxY0VsMFpXMHlJaXdpVEdsemRFZHliM1Z3U1hSbGJTSXNJbDlOWldScFlUSWlMQ0pOWldScFlTSXNJbDlOWlc1MVNYUmxiVElpTENKTlpXNTFTWFJsYlNJc0lsOU5iMlJoYkRJaUxDSk5iMlJoYkNJc0lsOU5iMlJoYkVKdlpIa3lJaXdpVFc5a1lXeENiMlI1SWl3aVgwMXZaR0ZzUkdsaGJHOW5NaUlzSWsxdlpHRnNSR2xoYkc5bklpd2lYMDF2WkdGc1JtOXZkR1Z5TWlJc0lrMXZaR0ZzUm05dmRHVnlJaXdpWDAxdlpHRnNTR1ZoWkdWeU1pSXNJazF2WkdGc1NHVmhaR1Z5SWl3aVgwMXZaR0ZzVkdsMGJHVXlJaXdpVFc5a1lXeFVhWFJzWlNJc0lsOU9ZWFl5SWl3aVRtRjJJaXdpWDA1aGRtSmhjaklpTENKT1lYWmlZWElpTENKZlRtRjJZbUZ5UW5KaGJtUXlJaXdpVG1GMlltRnlRbkpoYm1RaUxDSmZUbUYyUkhKdmNHUnZkMjR5SWl3aVRtRjJSSEp2Y0dSdmQyNGlMQ0pmVG1GMlNYUmxiVElpTENKT1lYWkpkR1Z0SWl3aVgwOTJaWEpzWVhreUlpd2lUM1psY214aGVTSXNJbDlQZG1WeWJHRjVWSEpwWjJkbGNqSWlMQ0pQZG1WeWJHRjVWSEpwWjJkbGNpSXNJbDlRWVdkbFNHVmhaR1Z5TWlJc0lsQmhaMlZJWldGa1pYSWlMQ0pmVUdGblpVbDBaVzB5SWl3aVVHRm5aVWwwWlcwaUxDSmZVR0ZuWlhJeUlpd2lVR0ZuWlhJaUxDSmZVR0ZuYVc1aGRHbHZiaklpTENKUVlXZHBibUYwYVc5dUlpd2lYMUJoYm1Wc01pSXNJbEJoYm1Wc0lpd2lYMUJoYm1Wc1IzSnZkWEF5SWl3aVVHRnVaV3hIY205MWNDSXNJbDlRYjNCdmRtVnlNaUlzSWxCdmNHOTJaWElpTENKZlVISnZaM0psYzNOQ1lYSXlJaXdpVUhKdlozSmxjM05DWVhJaUxDSmZVbUZrYVc4eUlpd2lVbUZrYVc4aUxDSmZVbVZ6Y0c5dWMybDJaVVZ0WW1Wa01pSXNJbEpsYzNCdmJuTnBkbVZGYldKbFpDSXNJbDlTYjNjeUlpd2lVbTkzSWl3aVgxTmhabVZCYm1Ob2IzSXlJaXdpVTJGbVpVRnVZMmh2Y2lJc0lsOVRjR3hwZEVKMWRIUnZiaklpTENKVGNHeHBkRUoxZEhSdmJpSXNJbDlVWVdJeUlpd2lWR0ZpSWl3aVgxUmhZa052Ym5SaGFXNWxjaklpTENKVVlXSkRiMjUwWVdsdVpYSWlMQ0pmVkdGaVEyOXVkR1Z1ZERJaUxDSlVZV0pEYjI1MFpXNTBJaXdpWDFSaFlteGxNaUlzSWxSaFlteGxJaXdpWDFSaFlsQmhibVV5SWl3aVZHRmlVR0Z1WlNJc0lsOVVZV0p6TWlJc0lsUmhZbk1pTENKZlZHaDFiV0p1WVdsc01pSXNJbFJvZFcxaWJtRnBiQ0lzSWw5VWIyZG5iR1ZDZFhSMGIyNHlJaXdpVkc5bloyeGxRblYwZEc5dUlpd2lYMVJ2WjJkc1pVSjFkSFJ2YmtkeWIzVndNaUlzSWxSdloyZHNaVUoxZEhSdmJrZHliM1Z3SWl3aVgxUnZiMngwYVhBeUlpd2lWRzl2YkhScGNDSXNJbDlYWld4c01pSXNJbGRsYkd3aUxDSmZkWFJwYkhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJSVUVzU1VGQlNVRXNkMEpCUVRCQ1F5eFJRVUZSTEhsRVFVVnNRME1zZFVKQlFYbENSQ3hSUVVGUkxIZEVRVVZ5UTBVc1VVRkJVVU1zV1VGQllTeEZRVU55UWtRc1VVRkJVVVVzVjBGQlVTeEZRVVZvUWl4SlFVRkpReXhaUVVGalNpeDFRa0ZCZFVKRUxGRkJRVkVzWjBKQlJXcEVSU3hSUVVGUlNTeFZRVUZaUkN4WlFVRlpSU3hSUVVWb1F5eEpRVUZKUXl4UlFVRlZVQ3gxUWtGQmRVSkVMRkZCUVZFc1dVRkZOME5GTEZGQlFWRlBMRTFCUVZGRUxGRkJRVkZFTEZGQlJYaENMRWxCUVVsSExGRkJRVlZVTEhWQ1FVRjFRa1FzVVVGQlVTeFpRVVUzUTBVc1VVRkJVVk1zVFVGQlVVUXNVVUZCVVVnc1VVRkZlRUlzU1VGQlNVc3NZVUZCWlZnc2RVSkJRWFZDUkN4UlFVRlJMR2xDUVVWc1JFVXNVVUZCVVZjc1YwRkJZVVFzWVVGQllVd3NVVUZGYkVNc1NVRkJTVThzYVVKQlFXMUNZaXgxUWtGQmRVSkVMRkZCUVZFc2NVSkJSWFJFUlN4UlFVRlJZU3hsUVVGcFFrUXNhVUpCUVdsQ1VDeFJRVVV4UXl4SlFVRkpVeXhUUVVGWFppeDFRa0ZCZFVKRUxGRkJRVkVzWVVGRk9VTkZMRkZCUVZGbExFOUJRVk5FTEZOQlFWTlVMRkZCUlRGQ0xFbEJRVWxYTEdOQlFXZENha0lzZFVKQlFYVkNSQ3hSUVVGUkxHdENRVVZ1UkVVc1VVRkJVV2xDTEZsQlFXTkVMR05CUVdOWUxGRkJSWEJETEVsQlFVbGhMR2RDUVVGclFtNUNMSFZDUVVGMVFrUXNVVUZCVVN4dlFrRkZja1JGTEZGQlFWRnRRaXhqUVVGblFrUXNaMEpCUVdkQ1lpeFJRVVY0UXl4SlFVRkpaU3hYUVVGaGNrSXNkVUpCUVhWQ1JDeFJRVUZSTEdWQlJXaEVSU3hSUVVGUmNVSXNVMEZCVjBRc1YwRkJWMllzVVVGRk9VSXNTVUZCU1dsQ0xHVkJRV2xDZGtJc2RVSkJRWFZDUkN4UlFVRlJMRzFDUVVWd1JFVXNVVUZCVVhWQ0xHRkJRV1ZFTEdWQlFXVnFRaXhSUVVWMFF5eEpRVUZKYlVJc1YwRkJZWHBDTEhWQ1FVRjFRa1FzVVVGQlVTeGxRVVZvUkVVc1VVRkJVWGxDTEZOQlFWZEVMRmRCUVZkdVFpeFJRVVU1UWl4SlFVRkpjVUlzVjBGQllUTkNMSFZDUVVGMVFrUXNVVUZCVVN4bFFVVm9SRVVzVVVGQlVUSkNMRk5CUVZkRUxGZEJRVmR5UWl4UlFVVTVRaXhKUVVGSmRVSXNZMEZCWjBJM1FpeDFRa0ZCZFVKRUxGRkJRVkVzYTBKQlJXNUVSU3hSUVVGUk5rSXNXVUZCWTBRc1kwRkJZM1pDTEZGQlJYQkRMRWxCUVVsNVFpeGxRVUZwUWk5Q0xIVkNRVUYxUWtRc1VVRkJVU3h0UWtGRmNFUkZMRkZCUVZFclFpeGhRVUZsUkN4bFFVRmxla0lzVVVGRmRFTXNTVUZCU1RKQ0xFMUJRVkZxUXl4MVFrRkJkVUpFTEZGQlFWRXNWVUZGTTBORkxGRkJRVkZwUXl4SlFVRk5SQ3hOUVVGTk0wSXNVVUZGY0VJc1NVRkJTVFpDTEZkQlFXRnVReXgxUWtGQmRVSkVMRkZCUVZFc1pVRkZhRVJGTEZGQlFWRnRReXhUUVVGWFJDeFhRVUZYTjBJc1VVRkZPVUlzU1VGQlNTdENMRmRCUVdGeVF5eDFRa0ZCZFVKRUxGRkJRVkVzWlVGRmFFUkZMRkZCUVZGeFF5eFRRVUZYUkN4WFFVRlhMMElzVVVGRk9VSXNTVUZCU1dsRExHbENRVUZ0UW5aRExIVkNRVUYxUWtRc1VVRkJVU3h4UWtGRmRFUkZMRkZCUVZGMVF5eGxRVUZwUWtRc2FVSkJRV2xDYWtNc1VVRkZNVU1zU1VGQlNXMURMRTlCUVZONlF5eDFRa0ZCZFVKRUxGRkJRVkVzVjBGRk5VTkZMRkZCUVZGNVF5eExRVUZQUkN4UFFVRlBia01zVVVGRmRFSXNTVUZCU1hGRExFOUJRVk16UXl4MVFrRkJkVUpFTEZGQlFWRXNWMEZGTlVORkxGRkJRVkV5UXl4TFFVRlBSQ3hQUVVGUGNrTXNVVUZGZEVJc1NVRkJTWFZETEdOQlFXZENOME1zZFVKQlFYVkNSQ3hSUVVGUkxHdENRVVZ1UkVVc1VVRkJVVFpETEZsQlFXTkVMR05CUVdOMlF5eFJRVVZ3UXl4SlFVRkplVU1zV1VGQll5OURMSFZDUVVGMVFrUXNVVUZCVVN4blFrRkZha1JGTEZGQlFWRXJReXhWUVVGWlJDeFpRVUZaZWtNc1VVRkZhRU1zU1VGQlNUSkRMRmxCUVdOcVJDeDFRa0ZCZFVKRUxGRkJRVkVzWjBKQlJXcEVSU3hSUVVGUmFVUXNWVUZCV1VRc1dVRkJXVE5ETEZGQlJXaERMRWxCUVVrMlF5eFBRVUZUYmtRc2RVSkJRWFZDUkN4UlFVRlJMRmRCUlRWRFJTeFJRVUZSYlVRc1MwRkJUMFFzVDBGQlR6ZERMRkZCUlhSQ0xFbEJRVWtyUXl4WlFVRmpja1FzZFVKQlFYVkNSQ3hSUVVGUkxHZENRVVZxUkVVc1VVRkJVWEZFTEZWQlFWbEVMRmxCUVZrdlF5eFJRVVZvUXl4SlFVRkphVVFzVVVGQlZYWkVMSFZDUVVGMVFrUXNVVUZCVVN4WlFVVTNRMFVzVVVGQlVYVkVMRTFCUVZGRUxGRkJRVkZxUkN4UlFVVjRRaXhKUVVGSmJVUXNZVUZCWlhwRUxIVkNRVUYxUWtRc1VVRkJVU3hwUWtGRmJFUkZMRkZCUVZGNVJDeFhRVUZoUkN4aFFVRmhia1FzVVVGRmJFTXNTVUZCU1hGRUxGbEJRV016UkN4MVFrRkJkVUpFTEZGQlFWRXNaMEpCUldwRVJTeFJRVUZSTWtRc1ZVRkJXVVFzV1VGQldYSkVMRkZCUldoRExFbEJRVWwxUkN4UlFVRlZOMFFzZFVKQlFYVkNSQ3hSUVVGUkxGbEJSVGREUlN4UlFVRlJOa1FzVFVGQlVVUXNVVUZCVVhaRUxGRkJSWGhDTEVsQlFVbDVSQ3haUVVGakwwUXNkVUpCUVhWQ1JDeFJRVUZSTEdkQ1FVVnFSRVVzVVVGQlVTdEVMRlZCUVZsRUxGbEJRVmw2UkN4UlFVVm9ReXhKUVVGSk1rUXNaMEpCUVd0Q2FrVXNkVUpCUVhWQ1JDeFJRVUZSTEc5Q1FVVnlSRVVzVVVGQlVXbEZMR05CUVdkQ1JDeG5Ra0ZCWjBJelJDeFJRVVY0UXl4SlFVRkpOa1FzVVVGQlZXNUZMSFZDUVVGMVFrUXNVVUZCVVN4WlFVVTNRMFVzVVVGQlVXMUZMRTFCUVZGRUxGRkJRVkUzUkN4UlFVVjRRaXhKUVVGSkswUXNWMEZCWVhKRkxIVkNRVUYxUWtRc1VVRkJVU3hsUVVWb1JFVXNVVUZCVVhGRkxGTkJRVmRFTEZkQlFWY3ZSQ3hSUVVVNVFpeEpRVUZKYVVVc1VVRkJWWFpGTEhWQ1FVRjFRa1FzVVVGQlVTeFpRVVUzUTBVc1VVRkJVWFZGTEUxQlFWRkVMRkZCUVZGcVJTeFJRVVY0UWl4SlFVRkpiVVVzV1VGQlkzcEZMSFZDUVVGMVFrUXNVVUZCVVN4blFrRkZha1JGTEZGQlFWRjVSU3hWUVVGWlJDeFpRVUZaYmtVc1VVRkZhRU1zU1VGQlNYRkZMR05CUVdkQ00wVXNkVUpCUVhWQ1JDeFJRVUZSTEd0Q1FVVnVSRVVzVVVGQlVUSkZMRmxCUVdORUxHTkJRV055UlN4UlFVVndReXhKUVVGSmRVVXNZMEZCWjBJM1JTeDFRa0ZCZFVKRUxGRkJRVkVzYTBKQlJXNUVSU3hSUVVGUk5rVXNXVUZCWTBRc1kwRkJZM1pGTEZGQlJYQkRMRWxCUVVsNVJTeGpRVUZuUWk5RkxIVkNRVUYxUWtRc1VVRkJVU3hyUWtGRmJrUkZMRkZCUVZFclJTeFpRVUZqUkN4alFVRmpla1VzVVVGRmNFTXNTVUZCU1RKRkxHRkJRV1ZxUml4MVFrRkJkVUpFTEZGQlFWRXNhVUpCUld4RVJTeFJRVUZSYVVZc1YwRkJZVVFzWVVGQllUTkZMRkZCUld4RExFbEJRVWsyUlN4TlFVRlJia1lzZFVKQlFYVkNSQ3hSUVVGUkxGVkJSVE5EUlN4UlFVRlJiVVlzU1VGQlRVUXNUVUZCVFRkRkxGRkJSWEJDTEVsQlFVa3JSU3hUUVVGWGNrWXNkVUpCUVhWQ1JDeFJRVUZSTEdGQlJUbERSU3hSUVVGUmNVWXNUMEZCVTBRc1UwRkJVeTlGTEZGQlJURkNMRWxCUVVscFJpeGpRVUZuUW5aR0xIVkNRVUYxUWtRc1VVRkJVU3hyUWtGRmJrUkZMRkZCUVZGMVJpeFpRVUZqUkN4alFVRmpha1lzVVVGRmNFTXNTVUZCU1cxR0xHTkJRV2RDZWtZc2RVSkJRWFZDUkN4UlFVRlJMR3RDUVVWdVJFVXNVVUZCVVhsR0xGbEJRV05FTEdOQlFXTnVSaXhSUVVWd1F5eEpRVUZKY1VZc1ZVRkJXVE5HTEhWQ1FVRjFRa1FzVVVGQlVTeGpRVVV2UTBVc1VVRkJVVEpHTEZGQlFWVkVMRlZCUVZWeVJpeFJRVVUxUWl4SlFVRkpkVVlzVlVGQldUZEdMSFZDUVVGMVFrUXNVVUZCVVN4alFVVXZRMFVzVVVGQlVUWkdMRkZCUVZWRUxGVkJRVlYyUml4UlFVVTFRaXhKUVVGSmVVWXNhVUpCUVcxQ0wwWXNkVUpCUVhWQ1JDeFJRVUZSTEhGQ1FVVjBSRVVzVVVGQlVTdEdMR1ZCUVdsQ1JDeHBRa0ZCYVVKNlJpeFJRVVV4UXl4SlFVRkpNa1lzWVVGQlpXcEhMSFZDUVVGMVFrUXNVVUZCVVN4cFFrRkZiRVJGTEZGQlFWRnBSeXhYUVVGaFJDeGhRVUZoTTBZc1VVRkZiRU1zU1VGQlNUWkdMRmRCUVdGdVJ5eDFRa0ZCZFVKRUxGRkJRVkVzWlVGRmFFUkZMRkZCUVZGdFJ5eFRRVUZYUkN4WFFVRlhOMFlzVVVGRk9VSXNTVUZCU1N0R0xGRkJRVlZ5Unl4MVFrRkJkVUpFTEZGQlFWRXNXVUZGTjBORkxGRkJRVkZ4Unl4TlFVRlJSQ3hSUVVGUkwwWXNVVUZGZUVJc1NVRkJTV2xITEdGQlFXVjJSeXgxUWtGQmRVSkVMRkZCUVZFc2FVSkJSV3hFUlN4UlFVRlJkVWNzVjBGQllVUXNZVUZCWVdwSExGRkJSV3hETEVsQlFVbHRSeXhSUVVGVmVrY3NkVUpCUVhWQ1JDeFJRVUZSTEZsQlJUZERSU3hSUVVGUmVVY3NUVUZCVVVRc1VVRkJVVzVITEZGQlJYaENMRWxCUVVseFJ5eGhRVUZsTTBjc2RVSkJRWFZDUkN4UlFVRlJMR2xDUVVWc1JFVXNVVUZCVVRKSExGZEJRV0ZFTEdGQlFXRnlSeXhSUVVWc1F5eEpRVUZKZFVjc1ZVRkJXVGRITEhWQ1FVRjFRa1FzVVVGQlVTeGpRVVV2UTBVc1VVRkJVVFpITEZGQlFWVkVMRlZCUVZWMlJ5eFJRVVUxUWl4SlFVRkplVWNzWTBGQlowSXZSeXgxUWtGQmRVSkVMRkZCUVZFc2EwSkJSVzVFUlN4UlFVRlJLMGNzV1VGQlkwUXNZMEZCWTNwSExGRkJSWEJETEVsQlFVa3lSeXhSUVVGVmFrZ3NkVUpCUVhWQ1JDeFJRVUZSTEZsQlJUZERSU3hSUVVGUmFVZ3NUVUZCVVVRc1VVRkJVVE5ITEZGQlJYaENMRWxCUVVrMlJ5eHJRa0ZCYjBKdVNDeDFRa0ZCZFVKRUxGRkJRVkVzYzBKQlJYWkVSU3hSUVVGUmJVZ3NaMEpCUVd0Q1JDeHJRa0ZCYTBJM1J5eFJRVVUxUXl4SlFVRkpLMGNzVFVGQlVYSklMSFZDUVVGMVFrUXNVVUZCVVN4VlFVVXpRMFVzVVVGQlVYRklMRWxCUVUxRUxFMUJRVTB2Unl4UlFVVndRaXhKUVVGSmFVZ3NZVUZCWlhaSUxIVkNRVUYxUWtRc1VVRkJVU3hwUWtGRmJFUkZMRkZCUVZGMVNDeFhRVUZoUkN4aFFVRmhha2dzVVVGRmJFTXNTVUZCU1cxSUxHTkJRV2RDZWtnc2RVSkJRWFZDUkN4UlFVRlJMR3RDUVVWdVJFVXNVVUZCVVhsSUxGbEJRV05FTEdOQlFXTnVTQ3hSUVVWd1F5eEpRVUZKY1Vnc1RVRkJVVE5JTEhWQ1FVRjFRa1FzVVVGQlVTeFZRVVV6UTBVc1VVRkJVVEpJTEVsQlFVMUVMRTFCUVUxeVNDeFJRVVZ3UWl4SlFVRkpkVWdzWlVGQmFVSTNTQ3gxUWtGQmRVSkVMRkZCUVZFc2JVSkJSWEJFUlN4UlFVRlJOa2dzWVVGQlpVUXNaVUZCWlhaSUxGRkJSWFJETEVsQlFVbDVTQ3hoUVVGbEwwZ3NkVUpCUVhWQ1JDeFJRVUZSTEdsQ1FVVnNSRVVzVVVGQlVTdElMRmRCUVdGRUxHRkJRV0Y2U0N4UlFVVnNReXhKUVVGSk1rZ3NVVUZCVldwSkxIVkNRVUYxUWtRc1VVRkJVU3haUVVVM1EwVXNVVUZCVVdsSkxFMUJRVkZFTEZGQlFWRXpTQ3hSUVVWNFFpeEpRVUZKTmtnc1ZVRkJXVzVKTEhWQ1FVRjFRa1FzVVVGQlVTeGpRVVV2UTBVc1VVRkJVVzFKTEZGQlFWVkVMRlZCUVZVM1NDeFJRVVUxUWl4SlFVRkpLMGdzVDBGQlUzSkpMSFZDUVVGMVFrUXNVVUZCVVN4WFFVVTFRMFVzVVVGQlVYRkpMRXRCUVU5RUxFOUJRVTh2U0N4UlFVVjBRaXhKUVVGSmFVa3NXVUZCWTNaSkxIVkNRVUYxUWtRc1VVRkJVU3huUWtGRmFrUkZMRkZCUVZGMVNTeFZRVUZaUkN4WlFVRlpha2tzVVVGRmFFTXNTVUZCU1cxSkxHVkJRV2xDZWtrc2RVSkJRWFZDUkN4UlFVRlJMRzFDUVVWd1JFVXNVVUZCVVhsSkxHRkJRV1ZFTEdWQlFXVnVTU3hSUVVWMFF5eEpRVUZKY1Vrc2IwSkJRWE5DTTBrc2RVSkJRWFZDUkN4UlFVRlJMSGRDUVVWNlJFVXNVVUZCVVRKSkxHdENRVUZ2UWtRc2IwSkJRVzlDY2trc1VVRkZhRVFzU1VGQlNYVkpMRlZCUVZrM1NTeDFRa0ZCZFVKRUxGRkJRVkVzWTBGRkwwTkZMRkZCUVZFMlNTeFJRVUZWUkN4VlFVRlZka2tzVVVGRk5VSXNTVUZCU1hsSkxFOUJRVk12U1N4MVFrRkJkVUpFTEZGQlFWRXNWMEZGTlVORkxGRkJRVkVyU1N4TFFVRlBSQ3hQUVVGUGVra3NVVUZGZEVJc1NVRkJTVEpKTEU5QlFWTnVTaXgzUWtGQmQwSkRMRkZCUVZFc1dVRkZOME5GTEZGQlFWRkZMRTFCUVZFNFNTSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzFpYjI5MGMzUnlZWEF2YkdsaUwybHVaR1Y0TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5nZW5lcmF0ZWRJZD1nZW5lcmF0ZWRJZCxleHBvcnRzLnJlcXVpcmVkUm9sZXM9cmVxdWlyZWRSb2xlcyxleHBvcnRzLmV4Y2x1c2l2ZVJvbGVzPWV4Y2x1c2l2ZVJvbGVzO3ZhciBfcHJvcFR5cGVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpLF9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzLWV4dHJhL2xpYi91dGlscy9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlclwiKSksX1ZhbGlkQ29tcG9uZW50Q2hpbGRyZW49X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9WYWxpZENvbXBvbmVudENoaWxkcmVuXCIpKSxpZFByb3BUeXBlPV9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcl0pO2Z1bmN0aW9uIGdlbmVyYXRlZElkKGUpe3JldHVybiBmdW5jdGlvbihyKXt2YXIgbj1udWxsO2lmKCFyLmdlbmVyYXRlQ2hpbGRJZCl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsaT1uZXcgQXJyYXkodD4xP3QtMTowKSxvPTE7bzx0O28rKylpW28tMV09YXJndW1lbnRzW29dOyhuPWlkUHJvcFR5cGUuYXBwbHkodm9pZCAwLFtyXS5jb25jYXQoaSkpKXx8ci5pZHx8KG49bmV3IEVycm9yKFwiSW4gb3JkZXIgdG8gcHJvcGVybHkgaW5pdGlhbGl6ZSB0aGUgXCIrZStcIiBpbiBhIHdheSB0aGF0IGlzIGFjY2Vzc2libGUgdG8gYXNzaXN0aXZlIHRlY2hub2xvZ2llcyAoc3VjaCBhcyBzY3JlZW4gcmVhZGVycykgYW4gYGlkYCBvciBhIGBnZW5lcmF0ZUNoaWxkSWRgIHByb3AgdG8gXCIrZStcIiBpcyByZXF1aXJlZFwiKSl9cmV0dXJuIG59fWZ1bmN0aW9uIHJlcXVpcmVkUm9sZXMoKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCxyPW5ldyBBcnJheShlKSxuPTA7bjxlO24rKylyW25dPWFyZ3VtZW50c1tuXTtyZXR1cm4oMCxfY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIuZGVmYXVsdCkoZnVuY3Rpb24oZSxuLHQpe3ZhciBpO3JldHVybiByLmV2ZXJ5KGZ1bmN0aW9uKHIpe3JldHVybiEhX1ZhbGlkQ29tcG9uZW50Q2hpbGRyZW4uZGVmYXVsdC5zb21lKGUuY2hpbGRyZW4sZnVuY3Rpb24oZSl7cmV0dXJuIGUucHJvcHMuYnNSb2xlPT09cn0pfHwoaT1yLCExKX0pLGk/bmV3IEVycm9yKFwiKGNoaWxkcmVuKSBcIit0K1wiIC0gTWlzc2luZyBhIHJlcXVpcmVkIGNoaWxkIHdpdGggYnNSb2xlOiBcIitpK1wiLiBcIit0K1wiIG11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgY2hpbGQgb2YgZWFjaCBvZiB0aGUgZm9sbG93aW5nIGJzUm9sZXM6IFwiK3Iuam9pbihcIiwgXCIpKTpudWxsfSl9ZnVuY3Rpb24gZXhjbHVzaXZlUm9sZXMoKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCxyPW5ldyBBcnJheShlKSxuPTA7bjxlO24rKylyW25dPWFyZ3VtZW50c1tuXTtyZXR1cm4oMCxfY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIuZGVmYXVsdCkoZnVuY3Rpb24oZSxuLHQpe3ZhciBpO3JldHVybiByLmV2ZXJ5KGZ1bmN0aW9uKHIpe3JldHVybiEoX1ZhbGlkQ29tcG9uZW50Q2hpbGRyZW4uZGVmYXVsdC5maWx0ZXIoZS5jaGlsZHJlbixmdW5jdGlvbihlKXtyZXR1cm4gZS5wcm9wcy5ic1JvbGU9PT1yfSkubGVuZ3RoPjEpfHwoaT1yLCExKX0pLGk/bmV3IEVycm9yKFwiKGNoaWxkcmVuKSBcIit0K1wiIC0gRHVwbGljYXRlIGNoaWxkcmVuIGRldGVjdGVkIG9mIGJzUm9sZTogXCIraStcIi4gT25seSBvbmUgY2hpbGQgZWFjaCBhbGxvd2VkIHdpdGggdGhlIGZvbGxvd2luZyBic1JvbGVzOiBcIityLmpvaW4oXCIsIFwiKSk6bnVsbH0pfVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxCeWIzQlVlWEJsY3k1cWN5SmRMQ0p1WVcxbGN5STZXeUpmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MElpd2ljbVZ4ZFdseVpTSXNJbVY0Y0c5eWRITWlMQ0pmWDJWelRXOWtkV3hsSWl3aVoyVnVaWEpoZEdWa1NXUWlMQ0p5WlhGMWFYSmxaRkp2YkdWeklpd2laWGhqYkhWemFYWmxVbTlzWlhNaUxDSmZjSEp2Y0ZSNWNHVnpJaXdpWDJOeVpXRjBaVU5vWVdsdVlXSnNaVlI1Y0dWRGFHVmphMlZ5SWl3aVgxWmhiR2xrUTI5dGNHOXVaVzUwUTJocGJHUnlaVzRpTENKcFpGQnliM0JVZVhCbElpd2laR1ZtWVhWc2RDSXNJbTl1WlU5bVZIbHdaU0lzSW5OMGNtbHVaeUlzSW01MWJXSmxjaUlzSW01aGJXVWlMQ0p3Y205d2N5SXNJbVZ5Y205eUlpd2laMlZ1WlhKaGRHVkRhR2xzWkVsa0lpd2lYMnhsYmlJc0ltRnlaM1Z0Wlc1MGN5SXNJbXhsYm1kMGFDSXNJbUZ5WjNNaUxDSkJjbkpoZVNJc0lsOXJaWGtpTENKaGNIQnNlU0lzSW1OdmJtTmhkQ0lzSW1sa0lpd2lSWEp5YjNJaUxDSmZiR1Z1TWlJc0luSnZiR1Z6SWl3aVgydGxlVElpTENKd2NtOXdUbUZ0WlNJc0ltTnZiWEJ2Ym1WdWRDSXNJbTFwYzNOcGJtY2lMQ0psZG1WeWVTSXNJbkp2YkdVaUxDSnpiMjFsSWl3aVkyaHBiR1J5Wlc0aUxDSmphR2xzWkNJc0ltSnpVbTlzWlNJc0ltcHZhVzRpTENKZmJHVnVNeUlzSWw5clpYa3pJaXdpWkhWd2JHbGpZWFJsSWl3aVptbHNkR1Z5SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4aFFVVkJMRWxCUVVsQkxIVkNRVUY1UWtNc1VVRkJVU3gzUkVGRmNrTkRMRkZCUVZGRExGbEJRV0VzUlVGRGNrSkVMRkZCUVZGRkxGbEJRV05CTEZsQlEzUkNSaXhSUVVGUlJ5eGpRVUZuUWtFc1kwRkRlRUpJTEZGQlFWRkpMR1ZCUVdsQ1FTeGxRVVY2UWl4SlFVRkpReXhYUVVGaFVDeDFRa0ZCZFVKRExGRkJRVkVzWlVGRk5VTlBMRFJDUVVFNFFsSXNkVUpCUVhWQ1F5eFJRVUZSTERCRVFVVTNSRkVzZDBKQlFUQkNWQ3gxUWtGQmRVSkRMRkZCUVZFc05rSkJSWHBFVXl4WFFVRmhTQ3hYUVVGWFNTeFJRVUZSUXl4VlFVRlZMRU5CUVVOTUxGZEJRVmRKTEZGQlFWRkZMRTlCUVZGT0xGZEJRVmRKTEZGQlFWRkhMRk5CUlRkR0xGTkJRVk5XTEZsQlFWbFhMRWRCUTI1Q0xFOUJRVThzVTBGQlZVTXNSMEZEWml4SlFVRkpReXhGUVVGUkxFdEJSVm9zU1VGQlMwUXNSVUZCVFVVc1owSkJRV2xDTEVOQlF6RkNMRWxCUVVzc1NVRkJTVU1zUlVGQlQwTXNWVUZCVlVNc1QwRkJVVU1zUlVGQlR5eEpRVUZKUXl4TlFVRk5TaXhGUVVGUExFVkJRVWxCTEVWQlFVOHNSVUZCU1N4SFFVRkpTeXhGUVVGUExFVkJRVWRCTEVWQlFVOU1MRVZCUVUxTExFbEJRMnhIUml4RlFVRkxSU3hGUVVGUExFZEJRVXRLTEZWQlFWVkpMRWxCUnpkQ1VDeEZRVUZSVUN4WFFVRlhaU3hYUVVGTkxFVkJRVkVzUTBGQlExUXNSMEZCVDFVc1QwRkJUMG9zVFVGRmFrTk9MRVZCUVUxWExFdEJRMjVDVml4RlFVRlJMRWxCUVVsWExFMUJRVTBzZFVOQlFYbERZaXhGUVVGUExEQklRVUZyU1VFc1JVRkJUeXhwUWtGSkwwMHNUMEZCVDBVc1IwRkpXQ3hUUVVGVFdpeG5Ra0ZEVUN4SlFVRkxMRWxCUVVsM1FpeEZRVUZSVkN4VlFVRlZReXhQUVVGUlV5eEZRVUZSTEVsQlFVbFFMRTFCUVUxTkxFZEJRVkZGTEVWQlFWRXNSVUZCUjBFc1JVRkJVVVlzUlVGQlQwVXNTVUZEY2taRUxFVkJRVTFETEVkQlFWTllMRlZCUVZWWExFZEJSek5DTEU5QlFVOHNSVUZCU1haQ0xEUkNRVUUwUWtjc1UwRkJVeXhUUVVGVlN5eEZRVUZQWjBJc1JVRkJWVU1zUjBGRGVrVXNTVUZCU1VNc1JVRlpTaXhQUVZoQlNpeEZRVUZOU3l4TlFVRk5MRk5CUVZWRExFZEJRM0JDTEZGQlFVc3pRaXgzUWtGQmQwSkZMRkZCUVZFd1FpeExRVUZMY2tJc1JVRkJUWE5DTEZOQlFWVXNVMEZCVlVNc1IwRkRiRVVzVDBGQlQwRXNSVUZCVFhaQ0xFMUJRVTEzUWl4VFFVRlhTaXhOUVVVNVFrWXNSVUZCVlVVc1IwRkRTQ3hMUVUxUVJpeEZRVU5MTEVsQlFVbE9MRTFCUVUwc1kwRkJaMEpMTEVWQlFWa3NORU5CUVN0RFF5eEZRVUZWTEV0QlFVOUVMRVZCUVZrc2JVVkJRVFJGU0N4RlFVRk5WeXhMUVVGTExFOUJSek5OTEU5QlNWZ3NVMEZCVTI1RExHbENRVU5RTEVsQlFVc3NTVUZCU1c5RExFVkJRVkYwUWl4VlFVRlZReXhQUVVGUlV5eEZRVUZSTEVsQlFVbFFMRTFCUVUxdFFpeEhRVUZSUXl4RlFVRlJMRVZCUVVkQkxFVkJRVkZFTEVWQlFVOURMRWxCUTNKR1lpeEZRVUZOWVN4SFFVRlRka0lzVlVGQlZYVkNMRWRCUnpOQ0xFOUJRVThzUlVGQlNXNURMRFJDUVVFMFFrY3NVMEZCVXl4VFFVRlZTeXhGUVVGUFowSXNSVUZCVlVNc1IwRkRla1VzU1VGQlNWY3NSVUZqU2l4UFFXSkJaQ3hGUVVGTlN5eE5RVUZOTEZOQlFWVkRMRWRCUzNCQ0xGRkJTblZDTTBJc2QwSkJRWGRDUlN4UlFVRlJhME1zVDBGQlR6ZENMRVZCUVUxelFpeFRRVUZWTEZOQlFWVkRMRWRCUTNSR0xFOUJRVTlCTEVWQlFVMTJRaXhOUVVGTmQwSXNVMEZCVjBvc1NVRkhXR1lzVDBGQlV5eExRVU0xUW5WQ0xFVkJRVmxTTEVkQlEwd3NTMEZOVUZFc1JVRkRTeXhKUVVGSmFFSXNUVUZCVFN4alFVRm5Ra3NzUlVGQldTdzJRMEZCWjBSWExFVkJRVmtzTmtSQlFYTkZaQ3hGUVVGTlZ5eExRVUZMTEU5QlIzSk1JaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwzSmxZV04wTFdKdmIzUnpkSEpoY0M5c2FXSXZkWFJwYkhNdlVISnZjRlI1Y0dWekxtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuU3R5bGU9ZXhwb3J0cy5TdGF0ZT1leHBvcnRzLkRFVklDRV9TSVpFUz1leHBvcnRzLlNJWkVfTUFQPWV4cG9ydHMuU2l6ZT12b2lkIDA7dmFyIFNpemU9e0xBUkdFOlwibGFyZ2VcIixTTUFMTDpcInNtYWxsXCIsWFNNQUxMOlwieHNtYWxsXCJ9O2V4cG9ydHMuU2l6ZT1TaXplO3ZhciBTSVpFX01BUD17bGFyZ2U6XCJsZ1wiLG1lZGl1bTpcIm1kXCIsc21hbGw6XCJzbVwiLHhzbWFsbDpcInhzXCIsbGc6XCJsZ1wiLG1kOlwibWRcIixzbTpcInNtXCIseHM6XCJ4c1wifTtleHBvcnRzLlNJWkVfTUFQPVNJWkVfTUFQO3ZhciBERVZJQ0VfU0laRVM9W1wibGdcIixcIm1kXCIsXCJzbVwiLFwieHNcIl07ZXhwb3J0cy5ERVZJQ0VfU0laRVM9REVWSUNFX1NJWkVTO3ZhciBTdGF0ZT17U1VDQ0VTUzpcInN1Y2Nlc3NcIixXQVJOSU5HOlwid2FybmluZ1wiLERBTkdFUjpcImRhbmdlclwiLElORk86XCJpbmZvXCJ9O2V4cG9ydHMuU3RhdGU9U3RhdGU7dmFyIFN0eWxlPXtERUZBVUxUOlwiZGVmYXVsdFwiLFBSSU1BUlk6XCJwcmltYXJ5XCIsTElOSzpcImxpbmtcIixJTlZFUlNFOlwiaW52ZXJzZVwifTtleHBvcnRzLlN0eWxlPVN0eWxlO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxOMGVXeGxRMjl1Wm1sbkxtcHpJbDBzSW01aGJXVnpJanBiSW1WNGNHOXlkSE1pTENKZlgyVnpUVzlrZFd4bElpd2lVM1I1YkdVaUxDSlRkR0YwWlNJc0lrUkZWa2xEUlY5VFNWcEZVeUlzSWxOSldrVmZUVUZRSWl3aVUybDZaU0lzSWt4QlVrZEZJaXdpVTAxQlRFd2lMQ0pZVTAxQlRFd2lMQ0pzWVhKblpTSXNJbTFsWkdsMWJTSXNJbk50WVd4c0lpd2llSE50WVd4c0lpd2liR2NpTENKdFpDSXNJbk50SWl3aWVITWlMQ0pUVlVORFJWTlRJaXdpVjBGU1RrbE9SeUlzSWtSQlRrZEZVaUlzSWtsT1JrOGlMQ0pFUlVaQlZVeFVJaXdpVUZKSlRVRlNXU0lzSWt4SlRrc2lMQ0pKVGxaRlVsTkZJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVWQlFTeFJRVUZSUXl4WlFVRmhMRVZCUTNKQ1JDeFJRVUZSUlN4TlFVRlJSaXhSUVVGUlJ5eE5RVUZSU0N4UlFVRlJTU3hoUVVGbFNpeFJRVUZSU3l4VFFVRlhUQ3hSUVVGUlRTeFZRVUZQTEVWQlEzcEdMRWxCUVVsQkxFdEJRVThzUTBGRFZFTXNUVUZCVHl4UlFVTlFReXhOUVVGUExGRkJRMUJETEU5QlFWRXNWVUZGVmxRc1VVRkJVVTBzUzBGQlQwRXNTMEZEWml4SlFVRkpSQ3hUUVVGWExFTkJRMkpMTEUxQlFVOHNTMEZEVUVNc1QwRkJVU3hMUVVOU1F5eE5RVUZQTEV0QlExQkRMRTlCUVZFc1MwRkRVa01zUjBGQlNTeExRVU5LUXl4SFFVRkpMRXRCUTBwRExFZEJRVWtzUzBGRFNrTXNSMEZCU1N4TlFVVk9ha0lzVVVGQlVVc3NVMEZCVjBFc1UwRkRia0lzU1VGQlNVUXNZVUZCWlN4RFFVRkRMRXRCUVUwc1MwRkJUU3hMUVVGTkxFMUJRM1JEU2l4UlFVRlJTU3hoUVVGbFFTeGhRVU4yUWl4SlFVRkpSQ3hOUVVGUkxFTkJRMVpsTEZGQlFWTXNWVUZEVkVNc1VVRkJVeXhWUVVOVVF5eFBRVUZSTEZOQlExSkRMRXRCUVUwc1VVRkZVbkpDTEZGQlFWRkhMRTFCUVZGQkxFMUJRMmhDTEVsQlFVbEVMRTFCUVZFc1EwRkRWbTlDTEZGQlFWTXNWVUZEVkVNc1VVRkJVeXhWUVVOVVF5eExRVUZOTEU5QlEwNURMRkZCUVZNc1YwRkZXSHBDTEZGQlFWRkZMRTFCUVZGQklpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDNKbFlXTjBMV0p2YjNSemRISmhjQzlzYVdJdmRYUnBiSE12VTNSNWJHVkRiMjVtYVdjdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9yZWFjdD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7ZnVuY3Rpb24gbWFwKGUscix0KXt2YXIgYT0wO3JldHVybiBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5tYXAoZSxmdW5jdGlvbihlKXtyZXR1cm4gX3JlYWN0LmRlZmF1bHQuaXNWYWxpZEVsZW1lbnQoZSk/ci5jYWxsKHQsZSxhKyspOmV9KX1mdW5jdGlvbiBmb3JFYWNoKGUscix0KXt2YXIgYT0wO19yZWFjdC5kZWZhdWx0LkNoaWxkcmVuLmZvckVhY2goZSxmdW5jdGlvbihlKXtfcmVhY3QuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChlKSYmci5jYWxsKHQsZSxhKyspfSl9ZnVuY3Rpb24gY291bnQoZSl7dmFyIHI9MDtyZXR1cm4gX3JlYWN0LmRlZmF1bHQuQ2hpbGRyZW4uZm9yRWFjaChlLGZ1bmN0aW9uKGUpe19yZWFjdC5kZWZhdWx0LmlzVmFsaWRFbGVtZW50KGUpJiYrK3J9KSxyfWZ1bmN0aW9uIGZpbHRlcihlLHIsdCl7dmFyIGE9MCxsPVtdO3JldHVybiBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5mb3JFYWNoKGUsZnVuY3Rpb24oZSl7X3JlYWN0LmRlZmF1bHQuaXNWYWxpZEVsZW1lbnQoZSkmJnIuY2FsbCh0LGUsYSsrKSYmbC5wdXNoKGUpfSksbH1mdW5jdGlvbiBmaW5kKGUscix0KXt2YXIgYSxsPTA7cmV0dXJuIF9yZWFjdC5kZWZhdWx0LkNoaWxkcmVuLmZvckVhY2goZSxmdW5jdGlvbihlKXthfHxfcmVhY3QuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChlKSYmci5jYWxsKHQsZSxsKyspJiYoYT1lKX0pLGF9ZnVuY3Rpb24gZXZlcnkoZSxyLHQpe3ZhciBhPTAsbD0hMDtyZXR1cm4gX3JlYWN0LmRlZmF1bHQuQ2hpbGRyZW4uZm9yRWFjaChlLGZ1bmN0aW9uKGUpe2wmJl9yZWFjdC5kZWZhdWx0LmlzVmFsaWRFbGVtZW50KGUpJiYoci5jYWxsKHQsZSxhKyspfHwobD0hMSkpfSksbH1mdW5jdGlvbiBzb21lKGUscix0KXt2YXIgYT0wLGw9ITE7cmV0dXJuIF9yZWFjdC5kZWZhdWx0LkNoaWxkcmVuLmZvckVhY2goZSxmdW5jdGlvbihlKXtsfHxfcmVhY3QuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChlKSYmci5jYWxsKHQsZSxhKyspJiYobD0hMCl9KSxsfWZ1bmN0aW9uIHRvQXJyYXkoZSl7dmFyIHI9W107cmV0dXJuIF9yZWFjdC5kZWZhdWx0LkNoaWxkcmVuLmZvckVhY2goZSxmdW5jdGlvbihlKXtfcmVhY3QuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChlKSYmci5wdXNoKGUpfSkscn12YXIgX2RlZmF1bHQ9e21hcDptYXAsZm9yRWFjaDpmb3JFYWNoLGNvdW50OmNvdW50LGZpbmQ6ZmluZCxmaWx0ZXI6ZmlsdGVyLGV2ZXJ5OmV2ZXJ5LHNvbWU6c29tZSx0b0FycmF5OnRvQXJyYXl9O2V4cG9ydHMuZGVmYXVsdD1fZGVmYXVsdCxtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbFpoYkdsa1EyOXRjRzl1Wlc1MFEyaHBiR1J5Wlc0dWFuTWlYU3dpYm1GdFpYTWlPbHNpWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDSXNJbkpsY1hWcGNtVWlMQ0psZUhCdmNuUnpJaXdpWDE5bGMwMXZaSFZzWlNJc0ltUmxabUYxYkhRaUxDSmZjbVZoWTNRaUxDSnRZWEFpTENKamFHbHNaSEpsYmlJc0ltWjFibU1pTENKamIyNTBaWGgwSWl3aWFXNWtaWGdpTENKRGFHbHNaSEpsYmlJc0ltTm9hV3hrSWl3aWFYTldZV3hwWkVWc1pXMWxiblFpTENKallXeHNJaXdpWm05eVJXRmphQ0lzSW1OdmRXNTBJaXdpY21WemRXeDBJaXdpWm1sc2RHVnlJaXdpY0hWemFDSXNJbVpwYm1RaUxDSmxkbVZ5ZVNJc0luTnZiV1VpTENKMGIwRnljbUY1SWl3aVgyUmxabUYxYkhRaUxDSnRiMlIxYkdVaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJSVUVzU1VGQlNVRXNkVUpCUVhsQ1F5eFJRVUZSTEhkRVFVVnlRME1zVVVGQlVVTXNXVUZCWVN4RlFVTnlRa1FzVVVGQlVVVXNZVUZCVlN4RlFVVnNRaXhKUVVGSlF5eFBRVUZUVEN4MVFrRkJkVUpETEZGQlFWRXNWVUZuUWpWRExGTkJRVk5MTEVsQlFVbERMRVZCUVZWRExFVkJRVTFETEVkQlF6TkNMRWxCUVVsRExFVkJRVkVzUlVGRFdpeFBRVUZQVEN4UFFVRlBSQ3hSUVVGUlR5eFRRVUZUVEN4SlFVRkpReXhGUVVGVkxGTkJRVlZMTEVkQlEzSkVMRTlCUVV0UUxFOUJRVTlFTEZGQlFWRlRMR1ZCUVdWRUxFZEJTVFZDU2l4RlFVRkxUU3hMUVVGTFRDeEZRVUZUUnl4RlFVRlBSaXhMUVVoNFFrVXNTVUZyUW1Jc1UwRkJVMGNzVVVGQlVWSXNSVUZCVlVNc1JVRkJUVU1zUjBGREwwSXNTVUZCU1VNc1JVRkJVU3hGUVVWYVRDeFBRVUZQUkN4UlFVRlJUeXhUUVVGVFNTeFJRVUZSVWl4RlFVRlZMRk5CUVZWTExFZEJRemREVUN4UFFVRlBSQ3hSUVVGUlV5eGxRVUZsUkN4SlFVbHVRMG9zUlVGQlMwMHNTMEZCUzB3c1JVRkJVMGNzUlVGQlQwWXNUMEZYT1VJc1UwRkJVMDBzVFVGQlRWUXNSMEZEWWl4SlFVRkpWU3hGUVVGVExFVkJWV0lzVDBGU1FWb3NUMEZCVDBRc1VVRkJVVThzVTBGQlUwa3NVVUZCVVZJc1JVRkJWU3hUUVVGVlN5eEhRVU0zUTFBc1QwRkJUMFFzVVVGQlVWTXNaVUZCWlVRc1RVRkpha05MTEVsQlIwZEJMRVZCWjBKVUxGTkJRVk5ETEU5QlFVOVlMRVZCUVZWRExFVkJRVTFETEVkQlF6bENMRWxCUVVsRExFVkJRVkVzUlVGRFVrOHNSVUZCVXl4SFFWbGlMRTlCVmtGYUxFOUJRVTlFTEZGQlFWRlBMRk5CUVZOSkxGRkJRVkZTTEVWQlFWVXNVMEZCVlVzc1IwRkROME5RTEU5QlFVOUVMRkZCUVZGVExHVkJRV1ZFTEVsQlNTOUNTaXhGUVVGTFRTeExRVUZMVEN4RlFVRlRSeXhGUVVGUFJpeE5RVU0xUWs4c1JVRkJUMFVzUzBGQlMxQXNTMEZKVkVzc1JVRkhWQ3hUUVVGVFJ5eExRVUZMWWl4RlFVRlZReXhGUVVGTlF5eEhRVU0xUWl4SlFVTkpVU3hGUVVSQlVDeEZRVUZSTEVWQmFVSmFMRTlCWkVGTUxFOUJRVTlFTEZGQlFWRlBMRk5CUVZOSkxGRkJRVkZTTEVWQlFWVXNVMEZCVlVzc1IwRkRPVU5MTEVkQlNVTmFMRTlCUVU5RUxGRkJRVkZUTEdWQlFXVkVMRWxCU1M5Q1NpeEZRVUZMVFN4TFFVRkxUQ3hGUVVGVFJ5eEZRVUZQUml4UFFVTTFRazhzUlVGQlUwd3NTMEZKVGtzc1JVRkhWQ3hUUVVGVFNTeE5RVUZOWkN4RlFVRlZReXhGUVVGTlF5eEhRVU0zUWl4SlFVRkpReXhGUVVGUkxFVkJRMUpQTEVkQlFWTXNSVUZuUW1Jc1QwRmtRVm9zVDBGQlQwUXNVVUZCVVU4c1UwRkJVMGtzVVVGQlVWSXNSVUZCVlN4VFFVRlZTeXhIUVVNM1Ewc3NSMEZKUVZvc1QwRkJUMFFzVVVGQlVWTXNaVUZCWlVRc1MwRkpPVUpLTEVWQlFVdE5MRXRCUVV0TUxFVkJRVk5ITEVWQlFVOUdMRTlCUXpkQ1R5eEhRVUZUTEUxQlNVNUJMRVZCUjFRc1UwRkJVMHNzUzBGQlMyWXNSVUZCVlVNc1JVRkJUVU1zUjBGRE5VSXNTVUZCU1VNc1JVRkJVU3hGUVVOU1R5eEhRVUZUTEVWQlowSmlMRTlCWkVGYUxFOUJRVTlFTEZGQlFWRlBMRk5CUVZOSkxGRkJRVkZTTEVWQlFWVXNVMEZCVlVzc1IwRkRPVU5MTEVkQlNVTmFMRTlCUVU5RUxGRkJRVkZUTEdWQlFXVkVMRWxCU1M5Q1NpeEZRVUZMVFN4TFFVRkxUQ3hGUVVGVFJ5eEZRVUZQUml4UFFVTTFRazhzUjBGQlV5eExRVWxPUVN4RlFVZFVMRk5CUVZOTkxGRkJRVkZvUWl4SFFVTm1MRWxCUVVsVkxFVkJRVk1zUjBGVllpeFBRVkpCV2l4UFFVRlBSQ3hSUVVGUlR5eFRRVUZUU1N4UlFVRlJVaXhGUVVGVkxGTkJRVlZMTEVkQlF6ZERVQ3hQUVVGUFJDeFJRVUZSVXl4bFFVRmxSQ3hKUVVsdVEwc3NSVUZCVDBVc1MwRkJTMUFzUzBGSFVFc3NSVUZIVkN4SlFVRkpUeXhUUVVGWExFTkJRMkpzUWl4SlFVRkxRU3hKUVVOTVV5eFJRVUZUUVN4UlFVTlVReXhOUVVGUFFTeE5RVU5RU1N4TFFVRk5RU3hMUVVOT1JpeFBRVUZSUVN4UFFVTlNSeXhOUVVGUFFTeE5RVU5RUXl4TFFVRk5RU3hMUVVOT1F5eFJRVUZUUVN4VFFVVllja0lzVVVGQlVVVXNVVUZCVlc5Q0xGTkJRMnhDUXl4UFFVRlBka0lzVVVGQlZVRXNVVUZCYVVJaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Y21WaFkzUXRZbTl2ZEhOMGNtRndMMnhwWWk5MWRHbHNjeTlXWVd4cFpFTnZiWEJ2Ym1WdWRFTm9hV3hrY21WdUxtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMucHJlZml4PXByZWZpeCxleHBvcnRzLmdldENsYXNzU2V0PWdldENsYXNzU2V0LGV4cG9ydHMuc3BsaXRCc1Byb3BzPXNwbGl0QnNQcm9wcyxleHBvcnRzLnNwbGl0QnNQcm9wc0FuZE9taXQ9c3BsaXRCc1Byb3BzQW5kT21pdCxleHBvcnRzLmFkZFN0eWxlPWFkZFN0eWxlLGV4cG9ydHMuX2N1cnJ5PWV4cG9ydHMuYnNTaXplcz1leHBvcnRzLmJzU3R5bGVzPWV4cG9ydHMuYnNDbGFzcz12b2lkIDA7dmFyIF9lbnRyaWVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9vYmplY3QvZW50cmllc1wiKSksX2V4dGVuZHMyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9leHRlbmRzXCIpKSxfaW52YXJpYW50PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImludmFyaWFudFwiKSksX3Byb3BUeXBlcz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKSxfU3R5bGVDb25maWc9cmVxdWlyZShcIi4vU3R5bGVDb25maWdcIik7ZnVuY3Rpb24gY3VycnkoZSl7cmV0dXJuIGZ1bmN0aW9uKCl7Zm9yKHZhciByPWFyZ3VtZW50cy5sZW5ndGgscz1uZXcgQXJyYXkociksdD0wO3Q8cjt0Kyspc1t0XT1hcmd1bWVudHNbdF07cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2Ygc1tzLmxlbmd0aC0xXT9lLmFwcGx5KHZvaWQgMCxzKTpmdW5jdGlvbihyKXtyZXR1cm4gZS5hcHBseSh2b2lkIDAscy5jb25jYXQoW3JdKSl9fX1mdW5jdGlvbiBwcmVmaXgoZSxyKXt2YXIgcz0oZS5ic0NsYXNzfHxcIlwiKS50cmltKCk7cmV0dXJuIG51bGw9PXMmJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WPygwLF9pbnZhcmlhbnQuZGVmYXVsdCkoITEsXCJBIGBic0NsYXNzYCBwcm9wIGlzIHJlcXVpcmVkIGZvciB0aGlzIGNvbXBvbmVudFwiKTppbnZhcmlhbnQoITEpKSxzKyhyP1wiLVwiK3I6XCJcIil9dmFyIGJzQ2xhc3M9Y3VycnkoZnVuY3Rpb24oZSxyKXt2YXIgcz1yLnByb3BUeXBlc3x8KHIucHJvcFR5cGVzPXt9KSx0PXIuZGVmYXVsdFByb3BzfHwoci5kZWZhdWx0UHJvcHM9e30pO3JldHVybiBzLmJzQ2xhc3M9X3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyx0LmJzQ2xhc3M9ZSxyfSk7ZXhwb3J0cy5ic0NsYXNzPWJzQ2xhc3M7dmFyIGJzU3R5bGVzPWN1cnJ5KGZ1bmN0aW9uKGUscixzKXtcInN0cmluZ1wiIT10eXBlb2YgciYmKHM9cixyPXZvaWQgMCk7dmFyIHQ9cy5TVFlMRVN8fFtdLG89cy5wcm9wVHlwZXN8fHt9O2UuZm9yRWFjaChmdW5jdGlvbihlKXstMT09PXQuaW5kZXhPZihlKSYmdC5wdXNoKGUpfSk7dmFyIGk9X3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKHQpOyhzLlNUWUxFUz10LGkuX3ZhbHVlcz10LHMucHJvcFR5cGVzPSgwLF9leHRlbmRzMi5kZWZhdWx0KSh7fSxvLHtic1N0eWxlOml9KSx2b2lkIDAhPT1yKSYmKChzLmRlZmF1bHRQcm9wc3x8KHMuZGVmYXVsdFByb3BzPXt9KSkuYnNTdHlsZT1yKTtyZXR1cm4gc30pO2V4cG9ydHMuYnNTdHlsZXM9YnNTdHlsZXM7dmFyIGJzU2l6ZXM9Y3VycnkoZnVuY3Rpb24oZSxyLHMpe1wic3RyaW5nXCIhPXR5cGVvZiByJiYocz1yLHI9dm9pZCAwKTt2YXIgdD1zLlNJWkVTfHxbXSxvPXMucHJvcFR5cGVzfHx7fTtlLmZvckVhY2goZnVuY3Rpb24oZSl7LTE9PT10LmluZGV4T2YoZSkmJnQucHVzaChlKX0pO3ZhciBpPVtdO3QuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgcj1fU3R5bGVDb25maWcuU0laRV9NQVBbZV07ciYmciE9PWUmJmkucHVzaChyKSxpLnB1c2goZSl9KTt2YXIgbj1fcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoaSk7cmV0dXJuIG4uX3ZhbHVlcz1pLHMuU0laRVM9dCxzLnByb3BUeXBlcz0oMCxfZXh0ZW5kczIuZGVmYXVsdCkoe30sbyx7YnNTaXplOm59KSx2b2lkIDAhPT1yJiYocy5kZWZhdWx0UHJvcHN8fChzLmRlZmF1bHRQcm9wcz17fSkscy5kZWZhdWx0UHJvcHMuYnNTaXplPXIpLHN9KTtmdW5jdGlvbiBnZXRDbGFzc1NldChlKXt2YXIgcixzPSgocj17fSlbcHJlZml4KGUpXT0hMCxyKTtlLmJzU2l6ZSYmKHNbcHJlZml4KGUsX1N0eWxlQ29uZmlnLlNJWkVfTUFQW2UuYnNTaXplXXx8ZS5ic1NpemUpXT0hMCk7cmV0dXJuIGUuYnNTdHlsZSYmKHNbcHJlZml4KGUsZS5ic1N0eWxlKV09ITApLHN9ZnVuY3Rpb24gZ2V0QnNQcm9wcyhlKXtyZXR1cm57YnNDbGFzczplLmJzQ2xhc3MsYnNTaXplOmUuYnNTaXplLGJzU3R5bGU6ZS5ic1N0eWxlLGJzUm9sZTplLmJzUm9sZX19ZnVuY3Rpb24gaXNCc1Byb3AoZSl7cmV0dXJuXCJic0NsYXNzXCI9PT1lfHxcImJzU2l6ZVwiPT09ZXx8XCJic1N0eWxlXCI9PT1lfHxcImJzUm9sZVwiPT09ZX1mdW5jdGlvbiBzcGxpdEJzUHJvcHMoZSl7dmFyIHI9e307cmV0dXJuKDAsX2VudHJpZXMuZGVmYXVsdCkoZSkuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgcz1lWzBdLHQ9ZVsxXTtpc0JzUHJvcChzKXx8KHJbc109dCl9KSxbZ2V0QnNQcm9wcyhlKSxyXX1mdW5jdGlvbiBzcGxpdEJzUHJvcHNBbmRPbWl0KGUscil7dmFyIHM9e307ci5mb3JFYWNoKGZ1bmN0aW9uKGUpe3NbZV09ITB9KTt2YXIgdD17fTtyZXR1cm4oMCxfZW50cmllcy5kZWZhdWx0KShlKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciByPWVbMF0sbz1lWzFdO2lzQnNQcm9wKHIpfHxzW3JdfHwodFtyXT1vKX0pLFtnZXRCc1Byb3BzKGUpLHRdfWZ1bmN0aW9uIGFkZFN0eWxlKGUpe2Zvcih2YXIgcj1hcmd1bWVudHMubGVuZ3RoLHM9bmV3IEFycmF5KHI+MT9yLTE6MCksdD0xO3Q8cjt0Kyspc1t0LTFdPWFyZ3VtZW50c1t0XTtic1N0eWxlcyhzLGUpfWV4cG9ydHMuYnNTaXplcz1ic1NpemVzO3ZhciBfY3Vycnk9Y3Vycnk7ZXhwb3J0cy5fY3Vycnk9X2N1cnJ5O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1KdmIzUnpkSEpoY0ZWMGFXeHpMbXB6SWwwc0ltNWhiV1Z6SWpwYklsOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFpTENKeVpYRjFhWEpsSWl3aVpYaHdiM0owY3lJc0lsOWZaWE5OYjJSMWJHVWlMQ0p3Y21WbWFYZ2lMQ0puWlhSRGJHRnpjMU5sZENJc0luTndiR2wwUW5OUWNtOXdjeUlzSW5Od2JHbDBRbk5RY205d2MwRnVaRTl0YVhRaUxDSmhaR1JUZEhsc1pTSXNJbDlqZFhKeWVTSXNJbUp6VTJsNlpYTWlMQ0ppYzFOMGVXeGxjeUlzSW1KelEyeGhjM01pTENKZlpXNTBjbWxsY3lJc0lsOWxlSFJsYm1Sek1pSXNJbDlwYm5aaGNtbGhiblFpTENKZmNISnZjRlI1Y0dWeklpd2lYMU4wZVd4bFEyOXVabWxuSWl3aVkzVnljbmtpTENKbWJpSXNJbDlzWlc0aUxDSmhjbWQxYldWdWRITWlMQ0pzWlc1bmRHZ2lMQ0poY21keklpd2lRWEp5WVhraUxDSmZhMlY1SWl3aVlYQndiSGtpTENKRGIyMXdiMjVsYm5RaUxDSmpiMjVqWVhRaUxDSndjbTl3Y3lJc0luWmhjbWxoYm5RaUxDSjBjbWx0SWl3aWNISnZZMlZ6Y3lJc0ltVnVkaUlzSWs1UFJFVmZSVTVXSWl3aVpHVm1ZWFZzZENJc0ltbHVkbUZ5YVdGdWRDSXNJbVJsWm1GMWJIUkRiR0Z6Y3lJc0luQnliM0JVZVhCbGN5SXNJbVJsWm1GMWJIUlFjbTl3Y3lJc0luTjBjbWx1WnlJc0luTjBlV3hsY3lJc0ltUmxabUYxYkhSVGRIbHNaU0lzSW5WdVpHVm1hVzVsWkNJc0ltVjRhWE4wYVc1bklpd2lVMVJaVEVWVElpd2labTl5UldGamFDSXNJbk4wZVd4bElpd2lhVzVrWlhoUFppSXNJbkIxYzJnaUxDSndjbTl3Vkhsd1pTSXNJbTl1WlU5bUlpd2lYM1poYkhWbGN5SXNJbUp6VTNSNWJHVWlMQ0p6YVhwbGN5SXNJbVJsWm1GMWJIUlRhWHBsSWl3aVUwbGFSVk1pTENKemFYcGxJaXdpZG1Gc2RXVnpJaXdpYldGd2NHVmtVMmw2WlNJc0lsTkpXa1ZmVFVGUUlpd2lZbk5UYVhwbElpd2lYMk5zWVhOelpYTWlMQ0pqYkdGemMyVnpJaXdpWjJWMFFuTlFjbTl3Y3lJc0ltSnpVbTlzWlNJc0ltbHpRbk5RY205d0lpd2ljSEp2Y0U1aGJXVWlMQ0psYkdWdFpXNTBVSEp2Y0hNaUxDSmZjbVZtSWl3aWNISnZjRlpoYkhWbElpd2liMjFwZEhSbFpGQnliM0JPWVcxbGN5SXNJbWx6VDIxcGRIUmxaRkJ5YjNBaUxDSmZjbVZtTWlJc0lsOXNaVzR5SWl3aWMzUjViR1ZXWVhKcFlXNTBJaXdpWDJ0bGVUSWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUlVFc1NVRkJTVUVzZFVKQlFYbENReXhSUVVGUkxIZEVRVVZ5UTBNc1VVRkJVVU1zV1VGQllTeEZRVU55UWtRc1VVRkJVVVVzVDBGQlUwRXNUMEZEYWtKR0xGRkJRVkZITEZsQlFXTkJMRmxCUTNSQ1NDeFJRVUZSU1N4aFFVRmxRU3hoUVVOMlFrb3NVVUZCVVVzc2IwSkJRWE5DUVN4dlFrRkRPVUpNTEZGQlFWRk5MRk5CUVZkQkxGTkJRMjVDVGl4UlFVRlJUeXhQUVVGVFVDeFJRVUZSVVN4UlFVRlZVaXhSUVVGUlV5eFRRVUZYVkN4UlFVRlJWU3hoUVVGVkxFVkJSWGhGTEVsQlFVbERMRk5CUVZkaUxIVkNRVUYxUWtNc1VVRkJVU3hyUkVGRk1VTmhMRlZCUVZsa0xIVkNRVUYxUWtNc1VVRkJVU3d5UTBGRk0wTmpMRmRCUVdGbUxIVkNRVUYxUWtNc1VVRkJVU3hqUVVVMVEyVXNWMEZCWVdoQ0xIVkNRVUYxUWtNc1VVRkJVU3hsUVVVMVEyZENMR0ZCUVdWb1FpeFJRVUZSTEdsQ1FVY3pRaXhUUVVGVGFVSXNUVUZCVFVNc1IwRkRZaXhQUVVGUExGZEJRMHdzU1VGQlN5eEpRVUZKUXl4RlFVRlBReXhWUVVGVlF5eFBRVUZSUXl4RlFVRlBMRWxCUVVsRExFMUJRVTFLTEVkQlFVOUxMRVZCUVU4c1JVRkJSMEVzUlVGQlQwd3NSVUZCVFVzc1NVRkRMMFZHTEVWQlFVdEZMRWRCUVZGS0xGVkJRVlZKTEVkQlMzcENMRTFCUVc5Q0xHMUNRVVpVUml4RlFVRkxRU3hGUVVGTFJDeFBRVUZUTEVkQlIzSkNTQ3hGUVVGSFR5eFhRVUZOTEVWQlFWRklMRWRCUjI1Q0xGTkJRVlZKTEVkQlEyWXNUMEZCVDFJc1JVRkJSMDhzVjBGQlRTeEZRVUZSU0N4RlFVRkxTeXhQUVVGUExFTkJRVU5FTEU5QlN6TkRMRk5CUVZOMlFpeFBRVUZQZVVJc1JVRkJUME1zUjBGRGNrSXNTVUZCU1d4Q0xFZEJRVmRwUWl4RlFVRk5ha0lzVTBGQlZ5eEpRVUZKYlVJc1QwRkZjRU1zVDBGRVlTeE5RVUZZYmtJc1NVRkJORU1zWlVGQmVrSnZRaXhSUVVGUlF5eEpRVUZKUXl4VlFVRTBRaXhGUVVGSmJrSXNWMEZCVjI5Q0xGVkJRVk1zUlVGQlR5eHRSRUZCY1VSRExGZEJRVlVzU1VGRGNFcDRRaXhIUVVGWGEwSXNSVUZCVlN4SlFVRk5RU3hGUVVGVkxFbEJSemxETEVsQlFVbHNRaXhSUVVGVlRTeE5RVUZOTEZOQlFWVnRRaXhGUVVGalZpeEhRVU14UXl4SlFVRkpWeXhGUVVGWldDeEZRVUZWVnl4WlFVRmpXQ3hGUVVGVlZ5eFZRVUZaTEVsQlF6RkVReXhGUVVGbFdpeEZRVUZWV1N4bFFVRnBRbG9zUlVGQlZWa3NZVUZCWlN4SlFVZDJSU3hQUVVaQlJDeEZRVUZWTVVJc1VVRkJWVWtzVjBGQlYyMUNMRkZCUVZGTExFOUJRM1pEUkN4RlFVRmhNMElzVVVGQlZYbENMRVZCUTJoQ1ZpeEpRVVZVZWtJc1VVRkJVVlVzVVVGQlZVRXNVVUZEYkVJc1NVRkJTVVFzVTBGQlYwOHNUVUZCVFN4VFFVRlZkVUlzUlVGQlVVTXNSVUZCWTJZc1IwRkRka0lzYVVKQlFXcENaU3hKUVVOVVppeEZRVUZaWlN4RlFVTmFRU3hQUVVGbFF5eEhRVWRxUWl4SlFVRkpReXhGUVVGWGFrSXNSVUZCVld0Q0xGRkJRVlVzUjBGREwwSlFMRVZCUVZsWUxFVkJRVlZYTEZkQlFXRXNSMEZEZGtOSExFVkJRVTlMTEZGQlFWRXNVMEZCVlVNc1NVRkRWU3hKUVVFM1FrZ3NSVUZCVTBrc1VVRkJVVVFzU1VGRGJrSklMRVZCUVZOTExFdEJRVXRHTEV0QlNXeENMRWxCUVVsSExFVkJRVmRzUXl4WFFVRlhiVUlzVVVGQlVXZENMRTFCUVUxUUxFbEJSM2hEYWtJc1JVRkJWV3RDTEU5QlFWTkVMRVZCUTI1Q1RTeEZRVUZUUlN4UlFVRlZVaXhGUVVOdVFtcENMRVZCUVZWWExGZEJRVmtzUlVGQlNYaENMRlZCUVZWeFFpeFRRVUZUTEVkQlFVbEhMRVZCUVZjc1EwRkRNVVJsTEZGQlFWTklMRk5CUjFWUUxFbEJRV3BDUkN4TlFVTnBRbVlzUlVGQlZWa3NaVUZCYVVKYUxFVkJRVlZaTEdGQlFXVXNTMEZETVVSakxGRkJRVlZZTEVkQlIzcENMRTlCUVU5bUxFbEJSVlI2UWl4UlFVRlJVeXhUUVVGWFFTeFRRVU51UWl4SlFVRkpSQ3hSUVVGVlVTeE5RVUZOTEZOQlFWVnZReXhGUVVGUFF5eEZRVUZoTlVJc1IwRkRja0lzYVVKQlFXaENORUlzU1VGRFZEVkNMRVZCUVZrMFFpeEZRVU5hUVN4UFFVRmpXaXhIUVVkb1FpeEpRVUZKUXl4RlFVRlhha0lzUlVGQlZUWkNMRTlCUVZNc1IwRkRPVUpzUWl4RlFVRlpXQ3hGUVVGVlZ5eFhRVUZoTEVkQlEzWkRaMElzUlVGQlRWSXNVVUZCVVN4VFFVRlZWeXhKUVVOVkxFbEJRVFZDWWl4RlFVRlRTU3hSUVVGUlV5eEpRVU51UW1Jc1JVRkJVMHNzUzBGQlMxRXNTMEZIYkVJc1NVRkJTVU1zUlVGQlV5eEhRVU5pWkN4RlFVRlRSU3hSUVVGUkxGTkJRVlZYTEVkQlEzcENMRWxCUVVsRkxFVkJRV0V4UXl4aFFVRmhNa01zVTBGQlUwZ3NSMEZGYmtORkxFZEJRV05CTEVsQlFXVkdMRWRCUXk5Q1F5eEZRVUZQVkN4TFFVRkxWU3hIUVVka1JDeEZRVUZQVkN4TFFVRkxVU3hMUVVka0xFbEJRVWxRTEVWQlFWZHNReXhYUVVGWGJVSXNVVUZCVVdkQ0xFMUJRVTFQTEVkQmFVSjRReXhQUVdaQlVpeEZRVUZUUlN4UlFVRlZUU3hGUVVWdVFpOUNMRVZCUVZVMlFpeE5RVUZSV2l4RlFVTnNRbXBDTEVWQlFWVlhMRmRCUVZrc1JVRkJTWGhDTEZWQlFWVnhRaXhUUVVGVExFZEJRVWxITEVWQlFWY3NRMEZETVVSMVFpeFBRVUZSV0N4VFFVZFZVQ3hKUVVGb1Fsa3NTVUZEUnpWQ0xFVkJRVlZaTEdWQlEySmFMRVZCUVZWWkxHRkJRV1VzU1VGSE0wSmFMRVZCUVZWWkxHRkJRV0Z6UWl4UFFVRlRUaXhIUVVjelFqVkNMRWxCU1ZRc1UwRkJVM1JDTEZsQlFWbDNRaXhIUVVOdVFpeEpRVUZKYVVNc1JVRkZRVU1zU1VGQlYwUXNSVUZCVnl4SlFVRmhNVVFzVDBGQlQzbENMRXRCUVZVc1JVRkJUV2xETEVkQlJURkVha01zUlVGQlRXZERMRk5CUlZKRkxFVkJRVkV6UkN4UFFVRlBlVUlzUlVGRVJsb3NZVUZCWVRKRExGTkJRVk12UWl4RlFVRk5aME1zVTBGQlYyaERMRVZCUVUxblF5eFZRVU42UWl4SFFVOXVReXhQUVVwSmFFTXNSVUZCVFhkQ0xGVkJRMUpWTEVWQlFWRXpSQ3hQUVVGUGVVSXNSVUZCVDBFc1JVRkJUWGRDTEZkQlFWa3NSMEZIYmtOVkxFVkJSMVFzVTBGQlUwTXNWMEZCVjI1RExFZEJRMnhDTEUxQlFVOHNRMEZEVEdwQ0xGRkJRVk5wUWl4RlFVRk5ha0lzVVVGRFptbEVMRTlCUVZGb1F5eEZRVUZOWjBNc1QwRkRaRklzVVVGQlUzaENMRVZCUVUxM1FpeFJRVU5tV1N4UFFVRlJjRU1zUlVGQlRXOURMRkZCU1d4Q0xGTkJRVk5ETEZOQlFWTkRMRWRCUTJoQ0xFMUJRVzlDTEZsQlFXSkJMRWRCUVhWRExGZEJRV0pCTEVkQlFYTkRMRmxCUVdKQkxFZEJRWFZETEZkQlFXSkJMRVZCUjNSR0xGTkJRVk0zUkN4aFFVRmhkVUlzUjBGRGNFSXNTVUZCU1hWRExFVkJRV1VzUjBGVGJrSXNUMEZTUVN4RlFVRkpka1FzVTBGQlUzTkNMRk5CUVZOT0xFZEJRVTlwUWl4UlFVRlJMRk5CUVZWMVFpeEhRVU0zUXl4SlFVRkpSaXhGUVVGWFJTeEZRVUZMTEVkQlEyaENReXhGUVVGWlJDeEZRVUZMTEVkQlJXaENTQ3hUUVVGVFF5eExRVU5hUXl4RlFVRmhSQ3hIUVVGWlJ5eExRVWQwUWl4RFFVRkRUaXhYUVVGWGJrTXNSMEZCVVhWRExFZEJSemRDTEZOQlFWTTNSQ3h2UWtGQmIwSnpRaXhGUVVGUE1FTXNSMEZEYkVNc1NVRkJTVU1zUlVGQlowSXNSMEZEY0VKRUxFVkJRV2xDZWtJc1VVRkJVU3hUUVVGVmNVSXNSMEZEYWtOTExFVkJRV05NTEVsQlFWa3NTVUZGTlVJc1NVRkJTVU1zUlVGQlpTeEhRVk51UWl4UFFWSkJMRVZCUVVsMlJDeFRRVUZUYzBJc1UwRkJVMDRzUjBGQlQybENMRkZCUVZFc1UwRkJWVEpDTEVkQlF6ZERMRWxCUVVsT0xFVkJRVmROTEVWQlFVMHNSMEZEYWtKSUxFVkJRVmxITEVWQlFVMHNSMEZGYWtKUUxGTkJRVk5ETEVsQlFXTkxMRVZCUVdOTUxFdEJRM2hEUXl4RlFVRmhSQ3hIUVVGWlJ5eExRVWQwUWl4RFFVRkRUaXhYUVVGWGJrTXNSMEZCVVhWRExFZEJVVGRDTEZOQlFWTTFSQ3hUUVVGVGJVSXNSMEZEYUVJc1NVRkJTeXhKUVVGSkswTXNSVUZCVVhKRUxGVkJRVlZETEU5QlFWRnhSQ3hGUVVGbExFbEJRVWx1UkN4TlFVRk5hMFFzUlVGQlVTeEZRVUZKUVN4RlFVRlJMRVZCUVVrc1IwRkJTVVVzUlVGQlVTeEZRVUZIUVN4RlFVRlJSaXhGUVVGUFJTeEpRVU5vU0VRc1JVRkJZVU1zUlVGQlVTeEhRVUZMZGtRc1ZVRkJWWFZFTEVkQlIzUkRha1VzVTBGQlUyZEZMRVZCUVdOb1JDeEhRWGhGZWtKNlFpeFJRVUZSVVN4UlFVRlZRU3hSUVRKRmJFSXNTVUZCU1VRc1QwRkJVMU1zVFVGRFltaENMRkZCUVZGUExFOUJRVk5CSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdOMExXSnZiM1J6ZEhKaGNDOXNhV0l2ZFhScGJITXZZbTl2ZEhOMGNtRndWWFJwYkhNdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gY2FwaXRhbGl6ZShlKXtyZXR1cm5cIlwiK2UuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKX1leHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PWNhcGl0YWxpemUsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1OaGNHbDBZV3hwZW1VdWFuTWlYU3dpYm1GdFpYTWlPbHNpWTJGd2FYUmhiR2w2WlNJc0luTjBjbWx1WnlJc0ltTm9ZWEpCZENJc0luUnZWWEJ3WlhKRFlYTmxJaXdpYzJ4cFkyVWlMQ0psZUhCdmNuUnpJaXdpWDE5bGMwMXZaSFZzWlNJc0ltUmxabUYxYkhRaUxDSnRiMlIxYkdVaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJTMEVzVTBGQlUwRXNWMEZCVjBNc1IwRkRiRUlzVFVGQlR5eEhRVUZMUVN4RlFVRlBReXhQUVVGUExFZEJRVWRETEdOQlFXZENSaXhGUVVGUFJ5eE5RVUZOTEVkQlNqVkVReXhSUVVGUlF5eFpRVUZoTEVWQlEzSkNSQ3hSUVVGUlJTeFJRVUZWVUN4WFFVMXNRbEVzVDBGQlQwZ3NVVUZCVlVFc1VVRkJhVUlpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdFltOXZkSE4wY21Gd0wyeHBZaTkxZEdsc2N5OWpZWEJwZEdGc2FYcGxMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO2Z1bmN0aW9uIGNyZWF0ZUNoYWluZWRGdW5jdGlvbigpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KGUpLHQ9MDt0PGU7dCsrKW5bdF09YXJndW1lbnRzW3RdO3JldHVybiBuLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gbnVsbCE9ZX0pLnJlZHVjZShmdW5jdGlvbihlLG4pe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIG4pdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBBcmd1bWVudCBUeXBlLCBtdXN0IG9ubHkgcHJvdmlkZSBmdW5jdGlvbnMsIHVuZGVmaW5lZCwgb3IgbnVsbC5cIik7cmV0dXJuIG51bGw9PT1lP246ZnVuY3Rpb24gY2hhaW5lZEZ1bmN0aW9uKCl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgscj1uZXcgQXJyYXkodCksdT0wO3U8dDt1Kyspclt1XT1hcmd1bWVudHNbdV07ZS5hcHBseSh0aGlzLHIpLG4uYXBwbHkodGhpcyxyKX19LG51bGwpfWV4cG9ydHMuX19lc01vZHVsZT0hMCxleHBvcnRzLmRlZmF1bHQ9dm9pZCAwO3ZhciBfZGVmYXVsdD1jcmVhdGVDaGFpbmVkRnVuY3Rpb247ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltTnlaV0YwWlVOb1lXbHVaV1JHZFc1amRHbHZiaTVxY3lKZExDSnVZVzFsY3lJNld5SmpjbVZoZEdWRGFHRnBibVZrUm5WdVkzUnBiMjRpTENKZmJHVnVJaXdpWVhKbmRXMWxiblJ6SWl3aWJHVnVaM1JvSWl3aVpuVnVZM01pTENKQmNuSmhlU0lzSWw5clpYa2lMQ0ptYVd4MFpYSWlMQ0ptSWl3aWNtVmtkV05sSWl3aVlXTmpJaXdpUlhKeWIzSWlMQ0pqYUdGcGJtVmtSblZ1WTNScGIyNGlMQ0pmYkdWdU1pSXNJbUZ5WjNNaUxDSmZhMlY1TWlJc0ltRndjR3g1SWl3aWRHaHBjeUlzSW1WNGNHOXlkSE1pTENKZlgyVnpUVzlrZFd4bElpd2laR1ZtWVhWc2RDSXNJbDlrWldaaGRXeDBJaXdpYlc5a2RXeGxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVdOQkxGTkJRVk5CTEhkQ1FVTlFMRWxCUVVzc1NVRkJTVU1zUlVGQlQwTXNWVUZCVlVNc1QwRkJVVU1zUlVGQlVTeEpRVUZKUXl4TlFVRk5TaXhIUVVGUFN5eEZRVUZQTEVWQlFVZEJMRVZCUVU5TUxFVkJRVTFMTEVsQlEyaEdSaXhGUVVGTlJTeEhRVUZSU2l4VlFVRlZTU3hIUVVjeFFpeFBRVUZQUml4RlFVRk5SeXhQUVVGUExGTkJRVlZETEVkQlF6VkNMRTlCUVZrc1RVRkJURUVzU1VGRFRrTXNUMEZCVHl4VFFVRlZReXhGUVVGTFJpeEhRVU4yUWl4SFFVRnBRaXh0UWtGQlRrRXNSVUZEVkN4TlFVRk5MRWxCUVVsSExFMUJRVTBzTWtWQlIyeENMRTlCUVZrc1QwRkJVa1FzUlVGRFMwWXNSVUZIUml4VFFVRlRTU3hyUWtGRFpDeEpRVUZMTEVsQlFVbERMRVZCUVZGWUxGVkJRVlZETEU5QlFWRlhMRVZCUVU4c1NVRkJTVlFzVFVGQlRWRXNSMEZCVVVVc1JVRkJVU3hGUVVGSFFTeEZRVUZSUml4RlFVRlBSU3hKUVVOd1JrUXNSVUZCUzBNc1IwRkJVMklzVlVGQlZXRXNSMEZITVVKTUxFVkJRVWxOTEUxQlFVMURMRXRCUVUxSUxFZEJRMmhDVGl4RlFVRkZVU3hOUVVGTlF5eExRVUZOU0N4TFFVVm1MRTFCY0VOTVNTeFJRVUZSUXl4WlFVRmhMRVZCUTNKQ1JDeFJRVUZSUlN4aFFVRlZMRVZCYzBOc1FpeEpRVUZKUXl4VFFVRlhja0lzYzBKQlEyWnJRaXhSUVVGUlJTeFJRVUZWUXl4VFFVTnNRa01zVDBGQlQwb3NVVUZCVlVFc1VVRkJhVUlpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdFltOXZkSE4wY21Gd0wyeHBZaTkxZEdsc2N5OWpjbVZoZEdWRGFHRnBibVZrUm5WdVkzUnBiMjR1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5fcmVzZXRXYXJuZWQ9X3Jlc2V0V2FybmVkLGV4cG9ydHMuZGVmYXVsdD12b2lkIDA7dmFyIF9pbmhlcml0c0xvb3NlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSksX3dhcm5pbmc9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSksd2FybmVkPXt9O2Z1bmN0aW9uIGRlcHJlY2F0aW9uV2FybmluZyhlLHIsbil7dmFyIHQ7XCJvYmplY3RcIj09dHlwZW9mIGU/dD1lLm1lc3NhZ2U6KHQ9ZStcIiBpcyBkZXByZWNhdGVkLiBVc2UgXCIrcitcIiBpbnN0ZWFkLlwiLG4mJih0Kz1cIlxcbllvdSBjYW4gcmVhZCBtb3JlIGFib3V0IGl0IGF0IFwiK24pKSx3YXJuZWRbdF18fChcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoMCxfd2FybmluZy5kZWZhdWx0KSghMSx0KSx3YXJuZWRbdF09ITApfWRlcHJlY2F0aW9uV2FybmluZy53cmFwcGVyPWZ1bmN0aW9uKGUpe2Zvcih2YXIgcj1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KHI+MT9yLTE6MCksdD0xO3Q8cjt0Kyspblt0LTFdPWFyZ3VtZW50c1t0XTtyZXR1cm4gZnVuY3Rpb24oZSl7ZnVuY3Rpb24gRGVwcmVjYXRlZENvbXBvbmVudCgpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4oMCxfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoRGVwcmVjYXRlZENvbXBvbmVudCxlKSxEZXByZWNhdGVkQ29tcG9uZW50LnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQ9ZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCl7aWYoZGVwcmVjYXRpb25XYXJuaW5nLmFwcGx5KHZvaWQgMCxuKSxlLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQpe2Zvcih2YXIgcix0PWFyZ3VtZW50cy5sZW5ndGgsbz1uZXcgQXJyYXkodCksYT0wO2E8dDthKyspb1thXT1hcmd1bWVudHNbYV07KHI9ZS5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50KS5jYWxsLmFwcGx5KHIsW3RoaXNdLmNvbmNhdChvKSl9fSxEZXByZWNhdGVkQ29tcG9uZW50fShlKX07dmFyIF9kZWZhdWx0PWRlcHJlY2F0aW9uV2FybmluZztmdW5jdGlvbiBfcmVzZXRXYXJuZWQoKXt3YXJuZWQ9e319ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1SbGNISmxZMkYwYVc5dVYyRnlibWx1Wnk1cWN5SmRMQ0p1WVcxbGN5STZXeUpmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MElpd2ljbVZ4ZFdseVpTSXNJbVY0Y0c5eWRITWlMQ0pmWDJWelRXOWtkV3hsSWl3aVgzSmxjMlYwVjJGeWJtVmtJaXdpWkdWbVlYVnNkQ0lzSWw5cGJtaGxjbWwwYzB4dmIzTmxNaUlzSWw5M1lYSnVhVzVuSWl3aWQyRnlibVZrSWl3aVpHVndjbVZqWVhScGIyNVhZWEp1YVc1bklpd2liMnhrYm1GdFpTSXNJbTVsZDI1aGJXVWlMQ0pzYVc1cklpd2liV1Z6YzJGblpTSXNJbkJ5YjJObGMzTWlMQ0psYm5ZaUxDSk9UMFJGWDBWT1ZpSXNJbmR5WVhCd1pYSWlMQ0pEYjIxd2IyNWxiblFpTENKZmJHVnVJaXdpWVhKbmRXMWxiblJ6SWl3aWJHVnVaM1JvSWl3aVlYSm5jeUlzSWtGeWNtRjVJaXdpWDJ0bGVTSXNJbDlEYjIxd2IyNWxiblFpTENKRVpYQnlaV05oZEdWa1EyOXRjRzl1Wlc1MElpd2lZWEJ3YkhraUxDSjBhR2x6SWl3aWNISnZkRzkwZVhCbElpd2lZMjl0Y0c5dVpXNTBWMmxzYkUxdmRXNTBJaXdpWDBOdmJYQnZibVZ1ZENSd2NtOTBiM1I1Y0dVa0lpd2lYMnhsYmpJaUxDSnRaWFJvYjJSQmNtZHpJaXdpWDJ0bGVUSWlMQ0pqWVd4c0lpd2lZMjl1WTJGMElpd2lYMlJsWm1GMWJIUWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUlVFc1NVRkJTVUVzZFVKQlFYbENReXhSUVVGUkxIZEVRVVZ5UTBNc1VVRkJVVU1zV1VGQllTeEZRVU55UWtRc1VVRkJVVVVzWVVGQlpVRXNZVUZEZGtKR0xGRkJRVkZITEdGQlFWVXNSVUZGYkVJc1NVRkJTVU1zWjBKQlFXdENUaXgxUWtGQmRVSkRMRkZCUVZFc2FVUkJSV3BFVFN4VFFVRlhVQ3gxUWtGQmRVSkRMRkZCUVZFc1dVRkZNVU5QTEU5QlFWTXNSMEZGWWl4VFFVRlRReXh0UWtGQmJVSkRMRVZCUVZORExFVkJRVk5ETEVkQlF6VkRMRWxCUVVsRExFVkJSVzFDTEdsQ1FVRmFTQ3hGUVVOVVJ5eEZRVUZWU0N4RlFVRlJSeXhUUVVWc1FrRXNSVUZCVlVnc1JVRkJWU3gxUWtGQmVVSkRMRVZCUVZVc1dVRkZia1JETEVsQlEwWkRMRWRCUVZjc2JVTkJRWEZEUkN4SlFVbG9SRW9zVDBGQlQwc3NTMEZKWXl4bFFVRjZRa01zVVVGQlVVTXNTVUZCU1VNc1YwRkJORUlzUlVGQlNWUXNVMEZCVTBZc1ZVRkJVeXhGUVVGUFVTeEhRVU55UlV3c1QwRkJUMHNzU1VGQlZ5eEhRVWR3UWtvc2JVSkJRVzFDVVN4UlFVRlZMRk5CUVZWRExFZEJRM0pETEVsQlFVc3NTVUZCU1VNc1JVRkJUME1zVlVGQlZVTXNUMEZCVVVNc1JVRkJUeXhKUVVGSlF5eE5RVUZOU2l4RlFVRlBMRVZCUVVsQkxFVkJRVThzUlVGQlNTeEhRVUZKU3l4RlFVRlBMRVZCUVVkQkxFVkJRVTlNTEVWQlFVMUxMRWxCUTJ4SFJpeEZRVUZMUlN4RlFVRlBMRWRCUVV0S0xGVkJRVlZKTEVkQlJ6ZENMRTlCUlVVc1UwRkJWVU1zUjBGSFVpeFRRVUZUUXl4elFrRkRVQ3hQUVVGUFJDeEZRVUZYUlN4TlFVRk5ReXhMUVVGTlVpeFpRVUZqVVN4TFFXMUNPVU1zVDBGMFFrRXNSVUZCU1hSQ0xHZENRVUZuUWtRc1UwRkJVM0ZDTEc5Q1FVRnhRa1FzUjBGTmNrTkRMRzlDUVVGdlFrY3NWVUZGTVVKRExHMUNRVUZ4UWl4VFFVRlRRU3h4UWtGSGJrTXNSMEZHUVhKQ0xHMUNRVUZ0UW10Q0xGZEJRVTBzUlVGQlVVd3NSMEZGTjBKSExFVkJRVmRKTEZWQlFWVkRMRzFDUVVGdlFpeERRVWN6UXl4SlFVWkJMRWxCUVVsRExFVkJSVXRETEVWQlFWRmFMRlZCUVZWRExFOUJRVkZaTEVWQlFXRXNTVUZCU1ZZc1RVRkJUVk1zUjBGQlVVVXNSVUZCVVN4RlFVRkhRU3hGUVVGUlJpeEZRVUZQUlN4SlFVTXhSa1FzUlVGQlYwTXNSMEZCVTJRc1ZVRkJWV01zU1VGSEwwSklMRVZCUVhkQ1RpeEZRVUZYU1N4VlFVRlZReXh2UWtGQmIwSkxMRXRCUVV0U0xFMUJRVTFKTEVWQlFYVkNMRU5CUVVOSUxFMUJRVTFSTEU5QlFVOUlMRTFCU1M5SFVDeHZRa0Y2UWtvc1EwRXdRa2hTTEVsQlNVNHNTVUZCU1cxQ0xGTkJRVmMxUWl4dFFrRkhaaXhUUVVGVFRDeGxRVU5RU1N4UFFVRlRMRWRCU0ZoT0xGRkJRVkZITEZGQlFWVm5ReUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEMxaWIyOTBjM1J5WVhBdmJHbGlMM1YwYVd4ekwyUmxjSEpsWTJGMGFXOXVWMkZ5Ym1sdVp5NXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIiksX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpO2V4cG9ydHMuX19lc01vZHVsZT0hMCxleHBvcnRzLmJvb3RzdHJhcFV0aWxzPXZvaWQgMDt2YXIgX2Jvb3RzdHJhcFV0aWxzPV9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL2Jvb3RzdHJhcFV0aWxzXCIpKTtleHBvcnRzLmJvb3RzdHJhcFV0aWxzPV9ib290c3RyYXBVdGlsczt2YXIgX2NyZWF0ZUNoYWluZWRGdW5jdGlvbjI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jcmVhdGVDaGFpbmVkRnVuY3Rpb25cIikpO2V4cG9ydHMuY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uPV9jcmVhdGVDaGFpbmVkRnVuY3Rpb24yLmRlZmF1bHQ7dmFyIF9WYWxpZENvbXBvbmVudENoaWxkcmVuMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1ZhbGlkQ29tcG9uZW50Q2hpbGRyZW5cIikpO2V4cG9ydHMuVmFsaWRDb21wb25lbnRDaGlsZHJlbj1fVmFsaWRDb21wb25lbnRDaGlsZHJlbjIuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltbHVaR1Y0TG1weklsMHNJbTVoYldWeklqcGJJbDlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRaUxDSnlaWEYxYVhKbElpd2lYMmx1ZEdWeWIzQlNaWEYxYVhKbFYybHNaR05oY21RaUxDSmxlSEJ2Y25Seklpd2lYMTlsYzAxdlpIVnNaU0lzSW1KdmIzUnpkSEpoY0ZWMGFXeHpJaXdpWDJKdmIzUnpkSEpoY0ZWMGFXeHpJaXdpWDJOeVpXRjBaVU5vWVdsdVpXUkdkVzVqZEdsdmJqSWlMQ0pqY21WaGRHVkRhR0ZwYm1Wa1JuVnVZM1JwYjI0aUxDSmtaV1poZFd4MElpd2lYMVpoYkdsa1EyOXRjRzl1Wlc1MFEyaHBiR1J5Wlc0eUlpd2lWbUZzYVdSRGIyMXdiMjVsYm5SRGFHbHNaSEpsYmlKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkZRU3hKUVVGSlFTeDFRa0ZCZVVKRExGRkJRVkVzZDBSQlJXcERReXgzUWtGQk1FSkVMRkZCUVZFc2VVUkJSWFJEUlN4UlFVRlJReXhaUVVGaExFVkJRM0pDUkN4UlFVRlJSU3h2UWtGQmFVSXNSVUZGZWtJc1NVRkJTVU1zWjBKQlFXdENTaXgzUWtGQmQwSkVMRkZCUVZFc2NVSkJSWFJFUlN4UlFVRlJSU3hsUVVGcFFrTXNaMEpCUlhwQ0xFbEJRVWxETEhkQ1FVRXdRbEFzZFVKQlFYVkNReXhSUVVGUkxEUkNRVVUzUkVVc1VVRkJVVXNzYzBKQlFYZENSQ3gzUWtGQmQwSkZMRkZCUlhoRUxFbEJRVWxETEhsQ1FVRXlRbFlzZFVKQlFYVkNReXhSUVVGUkxEWkNRVVU1UkVVc1VVRkJVVkVzZFVKQlFYbENSQ3g1UWtGQmVVSkVJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwzSmxZV04wTFdKdmIzUnpkSEpoY0M5c2FXSXZkWFJwYkhNdmFXNWtaWGd1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PXNwbGl0Q29tcG9uZW50UHJvcHM7dmFyIF9lbnRyaWVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9vYmplY3QvZW50cmllc1wiKSk7ZnVuY3Rpb24gc3BsaXRDb21wb25lbnRQcm9wcyhlLHIpe3ZhciB0PXIucHJvcFR5cGVzLG89e30scz17fTtyZXR1cm4oMCxfZW50cmllcy5kZWZhdWx0KShlKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciByPWVbMF0sdT1lWzFdO3Rbcl0/b1tyXT11OnNbcl09dX0pLFtvLHNdfW1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluTndiR2wwUTI5dGNHOXVaVzUwVUhKdmNITXVhbk1pWFN3aWJtRnRaWE1pT2xzaVgybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ0lzSW5KbGNYVnBjbVVpTENKbGVIQnZjblJ6SWl3aVgxOWxjMDF2WkhWc1pTSXNJbVJsWm1GMWJIUWlMQ0p6Y0d4cGRFTnZiWEJ2Ym1WdWRGQnliM0J6SWl3aVgyVnVkSEpwWlhNaUxDSndjbTl3Y3lJc0lrTnZiWEJ2Ym1WdWRDSXNJbU52YlhCdmJtVnVkRkJ5YjNCVWVYQmxjeUlzSW5CeWIzQlVlWEJsY3lJc0luQmhjbVZ1ZEZCeWIzQnpJaXdpWTJocGJHUlFjbTl3Y3lJc0ltWnZja1ZoWTJnaUxDSmZjbVZtSWl3aWNISnZjRTVoYldVaUxDSndjbTl3Vm1Gc2RXVWlMQ0p0YjJSMWJHVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUlVFc1NVRkJTVUVzZFVKQlFYbENReXhSUVVGUkxIZEVRVVZ5UTBNc1VVRkJVVU1zV1VGQllTeEZRVU55UWtRc1VVRkJVVVVzVVVGQlZVTXNiMEpCUld4Q0xFbEJRVWxETEZOQlFWZE9MSFZDUVVGMVFrTXNVVUZCVVN4clJFRkZPVU1zVTBGQlUwa3NiMEpCUVc5Q1JTeEZRVUZQUXl4SFFVTnNReXhKUVVGSlF5eEZRVUZ4UWtRc1JVRkJWVVVzVlVGREwwSkRMRVZCUVdNc1IwRkRaRU1zUlVGQllTeEhRVmRxUWl4UFFWWkJMRVZCUVVsT0xGTkJRVk5HTEZOQlFWTkhMRWRCUVU5TkxGRkJRVkVzVTBGQlZVTXNSMEZETjBNc1NVRkJTVU1zUlVGQlYwUXNSVUZCU3l4SFFVTm9Ra1VzUlVGQldVWXNSVUZCU3l4SFFVVnFRa3dzUlVGQmJVSk5MRWRCUTNKQ1NpeEZRVUZaU1N4SFFVRlpReXhGUVVWNFFrb3NSVUZCVjBjc1IwRkJXVU1zU1VGSGNFSXNRMEZCUTB3c1JVRkJZVU1zUjBGSGRrSkxMRTlCUVU5bUxGRkJRVlZCTEZGQlFXbENJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwzSmxZV04wTFdKdmIzUnpkSEpoY0M5c2FXSXZkWFJwYkhNdmMzQnNhWFJEYjIxd2IyNWxiblJRY205d2N5NXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7bW9kdWxlLmV4cG9ydHM9cmVxdWlyZShcIi4vbGliL1JlYWN0RE9NXCIpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1sdVpHVjRMbXB6SWwwc0ltNWhiV1Z6SWpwYkltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaUxDSnlaWEYxYVhKbElsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVVZCUVN4UFFVRlBReXhSUVVGVlF5eFJRVUZSSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdOMExXUnZiUzlwYm1SbGVDNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIEFSSUFET01Qcm9wZXJ0eUNvbmZpZz17UHJvcGVydGllczp7XCJhcmlhLWN1cnJlbnRcIjowLFwiYXJpYS1kZXRhaWxzXCI6MCxcImFyaWEtZGlzYWJsZWRcIjowLFwiYXJpYS1oaWRkZW5cIjowLFwiYXJpYS1pbnZhbGlkXCI6MCxcImFyaWEta2V5c2hvcnRjdXRzXCI6MCxcImFyaWEtbGFiZWxcIjowLFwiYXJpYS1yb2xlZGVzY3JpcHRpb25cIjowLFwiYXJpYS1hdXRvY29tcGxldGVcIjowLFwiYXJpYS1jaGVja2VkXCI6MCxcImFyaWEtZXhwYW5kZWRcIjowLFwiYXJpYS1oYXNwb3B1cFwiOjAsXCJhcmlhLWxldmVsXCI6MCxcImFyaWEtbW9kYWxcIjowLFwiYXJpYS1tdWx0aWxpbmVcIjowLFwiYXJpYS1tdWx0aXNlbGVjdGFibGVcIjowLFwiYXJpYS1vcmllbnRhdGlvblwiOjAsXCJhcmlhLXBsYWNlaG9sZGVyXCI6MCxcImFyaWEtcHJlc3NlZFwiOjAsXCJhcmlhLXJlYWRvbmx5XCI6MCxcImFyaWEtcmVxdWlyZWRcIjowLFwiYXJpYS1zZWxlY3RlZFwiOjAsXCJhcmlhLXNvcnRcIjowLFwiYXJpYS12YWx1ZW1heFwiOjAsXCJhcmlhLXZhbHVlbWluXCI6MCxcImFyaWEtdmFsdWVub3dcIjowLFwiYXJpYS12YWx1ZXRleHRcIjowLFwiYXJpYS1hdG9taWNcIjowLFwiYXJpYS1idXN5XCI6MCxcImFyaWEtbGl2ZVwiOjAsXCJhcmlhLXJlbGV2YW50XCI6MCxcImFyaWEtZHJvcGVmZmVjdFwiOjAsXCJhcmlhLWdyYWJiZWRcIjowLFwiYXJpYS1hY3RpdmVkZXNjZW5kYW50XCI6MCxcImFyaWEtY29sY291bnRcIjowLFwiYXJpYS1jb2xpbmRleFwiOjAsXCJhcmlhLWNvbHNwYW5cIjowLFwiYXJpYS1jb250cm9sc1wiOjAsXCJhcmlhLWRlc2NyaWJlZGJ5XCI6MCxcImFyaWEtZXJyb3JtZXNzYWdlXCI6MCxcImFyaWEtZmxvd3RvXCI6MCxcImFyaWEtbGFiZWxsZWRieVwiOjAsXCJhcmlhLW93bnNcIjowLFwiYXJpYS1wb3NpbnNldFwiOjAsXCJhcmlhLXJvd2NvdW50XCI6MCxcImFyaWEtcm93aW5kZXhcIjowLFwiYXJpYS1yb3dzcGFuXCI6MCxcImFyaWEtc2V0c2l6ZVwiOjB9LERPTUF0dHJpYnV0ZU5hbWVzOnt9LERPTVByb3BlcnR5TmFtZXM6e319O21vZHVsZS5leHBvcnRzPUFSSUFET01Qcm9wZXJ0eUNvbmZpZztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrRlNTVUZFVDAxUWNtOXdaWEowZVVOdmJtWnBaeTVxY3lKZExDSnVZVzFsY3lJNld5SkJVa2xCUkU5TlVISnZjR1Z5ZEhsRGIyNW1hV2NpTENKUWNtOXdaWEowYVdWeklpd2lZWEpwWVMxamRYSnlaVzUwSWl3aVlYSnBZUzFrWlhSaGFXeHpJaXdpWVhKcFlTMWthWE5oWW14bFpDSXNJbUZ5YVdFdGFHbGtaR1Z1SWl3aVlYSnBZUzFwYm5aaGJHbGtJaXdpWVhKcFlTMXJaWGx6YUc5eWRHTjFkSE1pTENKaGNtbGhMV3hoWW1Wc0lpd2lZWEpwWVMxeWIyeGxaR1Z6WTNKcGNIUnBiMjRpTENKaGNtbGhMV0YxZEc5amIyMXdiR1YwWlNJc0ltRnlhV0V0WTJobFkydGxaQ0lzSW1GeWFXRXRaWGh3WVc1a1pXUWlMQ0poY21saExXaGhjM0J2Y0hWd0lpd2lZWEpwWVMxc1pYWmxiQ0lzSW1GeWFXRXRiVzlrWVd3aUxDSmhjbWxoTFcxMWJIUnBiR2x1WlNJc0ltRnlhV0V0YlhWc2RHbHpaV3hsWTNSaFlteGxJaXdpWVhKcFlTMXZjbWxsYm5SaGRHbHZiaUlzSW1GeWFXRXRjR3hoWTJWb2IyeGtaWElpTENKaGNtbGhMWEJ5WlhOelpXUWlMQ0poY21saExYSmxZV1J2Ym14NUlpd2lZWEpwWVMxeVpYRjFhWEpsWkNJc0ltRnlhV0V0YzJWc1pXTjBaV1FpTENKaGNtbGhMWE52Y25RaUxDSmhjbWxoTFhaaGJIVmxiV0Y0SWl3aVlYSnBZUzEyWVd4MVpXMXBiaUlzSW1GeWFXRXRkbUZzZFdWdWIzY2lMQ0poY21saExYWmhiSFZsZEdWNGRDSXNJbUZ5YVdFdFlYUnZiV2xqSWl3aVlYSnBZUzFpZFhONUlpd2lZWEpwWVMxc2FYWmxJaXdpWVhKcFlTMXlaV3hsZG1GdWRDSXNJbUZ5YVdFdFpISnZjR1ZtWm1WamRDSXNJbUZ5YVdFdFozSmhZbUpsWkNJc0ltRnlhV0V0WVdOMGFYWmxaR1Z6WTJWdVpHRnVkQ0lzSW1GeWFXRXRZMjlzWTI5MWJuUWlMQ0poY21saExXTnZiR2x1WkdWNElpd2lZWEpwWVMxamIyeHpjR0Z1SWl3aVlYSnBZUzFqYjI1MGNtOXNjeUlzSW1GeWFXRXRaR1Z6WTNKcFltVmtZbmtpTENKaGNtbGhMV1Z5Y205eWJXVnpjMkZuWlNJc0ltRnlhV0V0Wm14dmQzUnZJaXdpWVhKcFlTMXNZV0psYkd4bFpHSjVJaXdpWVhKcFlTMXZkMjV6SWl3aVlYSnBZUzF3YjNOcGJuTmxkQ0lzSW1GeWFXRXRjbTkzWTI5MWJuUWlMQ0poY21saExYSnZkMmx1WkdWNElpd2lZWEpwWVMxeWIzZHpjR0Z1SWl3aVlYSnBZUzF6WlhSemFYcGxJaXdpUkU5TlFYUjBjbWxpZFhSbFRtRnRaWE1pTENKRVQwMVFjbTl3WlhKMGVVNWhiV1Z6SWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCVVVFc1lVRkZRU3hKUVVGSlFTeHpRa0ZCZDBJc1EwRkRNVUpETEZkQlFWa3NRMEZGVmtNc1pVRkJaMElzUlVGRGFFSkRMR1ZCUVdkQ0xFVkJRMmhDUXl4blFrRkJhVUlzUlVGRGFrSkRMR05CUVdVc1JVRkRaa01zWlVGQlowSXNSVUZEYUVKRExHOUNRVUZ4UWl4RlFVTnlRa01zWVVGQll5eEZRVU5rUXl4MVFrRkJkMElzUlVGRmVFSkRMRzlDUVVGeFFpeEZRVU55UWtNc1pVRkJaMElzUlVGRGFFSkRMR2RDUVVGcFFpeEZRVU5xUWtNc1owSkJRV2xDTEVWQlEycENReXhoUVVGakxFVkJRMlJETEdGQlFXTXNSVUZEWkVNc2FVSkJRV3RDTEVWQlEyeENReXgxUWtGQmQwSXNSVUZEZUVKRExHMUNRVUZ2UWl4RlFVTndRa01zYlVKQlFXOUNMRVZCUTNCQ1F5eGxRVUZuUWl4RlFVTm9Ra01zWjBKQlFXbENMRVZCUTJwQ1F5eG5Ra0ZCYVVJc1JVRkRha0pETEdkQ1FVRnBRaXhGUVVOcVFrTXNXVUZCWVN4RlFVTmlReXhuUWtGQmFVSXNSVUZEYWtKRExHZENRVUZwUWl4RlFVTnFRa01zWjBKQlFXbENMRVZCUTJwQ1F5eHBRa0ZCYTBJc1JVRkZiRUpETEdOQlFXVXNSVUZEWmtNc1dVRkJZU3hGUVVOaVF5eFpRVUZoTEVWQlEySkRMR2RDUVVGcFFpeEZRVVZxUWtNc2EwSkJRVzFDTEVWQlEyNUNReXhsUVVGblFpeEZRVVZvUWtNc2QwSkJRWGxDTEVWQlEzcENReXhuUWtGQmFVSXNSVUZEYWtKRExHZENRVUZwUWl4RlFVTnFRa01zWlVGQlowSXNSVUZEYUVKRExHZENRVUZwUWl4RlFVTnFRa01zYlVKQlFXOUNMRVZCUTNCQ1F5eHZRa0ZCY1VJc1JVRkRja0pETEdOQlFXVXNSVUZEWmtNc2EwSkJRVzFDTEVWQlEyNUNReXhaUVVGaExFVkJRMkpETEdkQ1FVRnBRaXhGUVVOcVFrTXNaMEpCUVdsQ0xFVkJRMnBDUXl4blFrRkJhVUlzUlVGRGFrSkRMR1ZCUVdkQ0xFVkJRMmhDUXl4bFFVRm5RaXhIUVVWc1FrTXNhMEpCUVcxQ0xFZEJRMjVDUXl4cFFrRkJhMElzU1VGSGNFSkRMRTlCUVU5RExGRkJRVlZ5UkNJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDMWtiMjB2YkdsaUwwRlNTVUZFVDAxUWNtOXdaWEowZVVOdmJtWnBaeTVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBSZWFjdERPTUNvbXBvbmVudFRyZWU9cmVxdWlyZShcIi4vUmVhY3RET01Db21wb25lbnRUcmVlXCIpLGZvY3VzTm9kZT1yZXF1aXJlKFwiZmJqcy9saWIvZm9jdXNOb2RlXCIpLEF1dG9Gb2N1c1V0aWxzPXtmb2N1c0RPTUNvbXBvbmVudDpmdW5jdGlvbigpe2ZvY3VzTm9kZShSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZSh0aGlzKSl9fTttb2R1bGUuZXhwb3J0cz1BdXRvRm9jdXNVdGlscztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrRjFkRzlHYjJOMWMxVjBhV3h6TG1weklsMHNJbTVoYldWeklqcGJJbEpsWVdOMFJFOU5RMjl0Y0c5dVpXNTBWSEpsWlNJc0luSmxjWFZwY21VaUxDSm1iMk4xYzA1dlpHVWlMQ0pCZFhSdlJtOWpkWE5WZEdsc2N5SXNJbVp2WTNWelJFOU5RMjl0Y0c5dVpXNTBJaXdpWjJWMFRtOWtaVVp5YjIxSmJuTjBZVzVqWlNJc0luUm9hWE1pTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZSUVN4aFFVVkJMRWxCUVVsQkxITkNRVUYzUWtNc1VVRkJVU3d5UWtGRmFFTkRMRlZCUVZsRUxGRkJRVkVzYzBKQlJYQkNSU3hsUVVGcFFpeERRVU51UWtNc2EwSkJRVzFDTEZkQlEycENSaXhWUVVGVlJpeHpRa0ZCYzBKTExHOUNRVUZ2UWtNc1UwRkplRVJETEU5QlFVOURMRkZCUVZWTUlpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDNKbFlXTjBMV1J2YlM5c2FXSXZRWFYwYjBadlkzVnpWWFJwYkhNdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIEV2ZW50UHJvcGFnYXRvcnM9cmVxdWlyZShcIi4vRXZlbnRQcm9wYWdhdG9yc1wiKSxFeGVjdXRpb25FbnZpcm9ubWVudD1yZXF1aXJlKFwiZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnRcIiksRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlPXJlcXVpcmUoXCIuL0ZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZVwiKSxTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50PXJlcXVpcmUoXCIuL1N5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnRcIiksU3ludGhldGljSW5wdXRFdmVudD1yZXF1aXJlKFwiLi9TeW50aGV0aWNJbnB1dEV2ZW50XCIpLEVORF9LRVlDT0RFUz1bOSwxMywyNywzMl0sU1RBUlRfS0VZQ09ERT0yMjksY2FuVXNlQ29tcG9zaXRpb25FdmVudD1FeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00mJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LGRvY3VtZW50TW9kZT1udWxsO0V4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoZG9jdW1lbnRNb2RlPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7dmFyIGNhblVzZVRleHRJbnB1dEV2ZW50PUV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIWRvY3VtZW50TW9kZSYmIWlzUHJlc3RvKCksdXNlRmFsbGJhY2tDb21wb3NpdGlvbkRhdGE9RXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NJiYoIWNhblVzZUNvbXBvc2l0aW9uRXZlbnR8fGRvY3VtZW50TW9kZSYmZG9jdW1lbnRNb2RlPjgmJmRvY3VtZW50TW9kZTw9MTEpO2Z1bmN0aW9uIGlzUHJlc3RvKCl7dmFyIHQ9d2luZG93Lm9wZXJhO3JldHVyblwib2JqZWN0XCI9PXR5cGVvZiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LnZlcnNpb24mJnBhcnNlSW50KHQudmVyc2lvbigpLDEwKTw9MTJ9dmFyIFNQQUNFQkFSX0NPREU9MzIsU1BBQ0VCQVJfQ0hBUj1TdHJpbmcuZnJvbUNoYXJDb2RlKFNQQUNFQkFSX0NPREUpLGV2ZW50VHlwZXM9e2JlZm9yZUlucHV0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQmVmb3JlSW5wdXRcIixjYXB0dXJlZDpcIm9uQmVmb3JlSW5wdXRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbXCJ0b3BDb21wb3NpdGlvbkVuZFwiLFwidG9wS2V5UHJlc3NcIixcInRvcFRleHRJbnB1dFwiLFwidG9wUGFzdGVcIl19LGNvbXBvc2l0aW9uRW5kOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25FbmRcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25FbmRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbXCJ0b3BCbHVyXCIsXCJ0b3BDb21wb3NpdGlvbkVuZFwiLFwidG9wS2V5RG93blwiLFwidG9wS2V5UHJlc3NcIixcInRvcEtleVVwXCIsXCJ0b3BNb3VzZURvd25cIl19LGNvbXBvc2l0aW9uU3RhcnQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblN0YXJ0XCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbXCJ0b3BCbHVyXCIsXCJ0b3BDb21wb3NpdGlvblN0YXJ0XCIsXCJ0b3BLZXlEb3duXCIsXCJ0b3BLZXlQcmVzc1wiLFwidG9wS2V5VXBcIixcInRvcE1vdXNlRG93blwiXX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcInRvcEJsdXJcIixcInRvcENvbXBvc2l0aW9uVXBkYXRlXCIsXCJ0b3BLZXlEb3duXCIsXCJ0b3BLZXlQcmVzc1wiLFwidG9wS2V5VXBcIixcInRvcE1vdXNlRG93blwiXX19LGhhc1NwYWNlS2V5cHJlc3M9ITE7ZnVuY3Rpb24gaXNLZXlwcmVzc0NvbW1hbmQodCl7cmV0dXJuKHQuY3RybEtleXx8dC5hbHRLZXl8fHQubWV0YUtleSkmJiEodC5jdHJsS2V5JiZ0LmFsdEtleSl9ZnVuY3Rpb24gZ2V0Q29tcG9zaXRpb25FdmVudFR5cGUodCl7c3dpdGNoKHQpe2Nhc2VcInRvcENvbXBvc2l0aW9uU3RhcnRcIjpyZXR1cm4gZXZlbnRUeXBlcy5jb21wb3NpdGlvblN0YXJ0O2Nhc2VcInRvcENvbXBvc2l0aW9uRW5kXCI6cmV0dXJuIGV2ZW50VHlwZXMuY29tcG9zaXRpb25FbmQ7Y2FzZVwidG9wQ29tcG9zaXRpb25VcGRhdGVcIjpyZXR1cm4gZXZlbnRUeXBlcy5jb21wb3NpdGlvblVwZGF0ZX19ZnVuY3Rpb24gaXNGYWxsYmFja0NvbXBvc2l0aW9uU3RhcnQodCxlKXtyZXR1cm5cInRvcEtleURvd25cIj09PXQmJmUua2V5Q29kZT09PVNUQVJUX0tFWUNPREV9ZnVuY3Rpb24gaXNGYWxsYmFja0NvbXBvc2l0aW9uRW5kKHQsZSl7c3dpdGNoKHQpe2Nhc2VcInRvcEtleVVwXCI6cmV0dXJuLTEhPT1FTkRfS0VZQ09ERVMuaW5kZXhPZihlLmtleUNvZGUpO2Nhc2VcInRvcEtleURvd25cIjpyZXR1cm4gZS5rZXlDb2RlIT09U1RBUlRfS0VZQ09ERTtjYXNlXCJ0b3BLZXlQcmVzc1wiOmNhc2VcInRvcE1vdXNlRG93blwiOmNhc2VcInRvcEJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBnZXREYXRhRnJvbUN1c3RvbUV2ZW50KHQpe3ZhciBlPXQuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PXR5cGVvZiBlJiZcImRhdGFcImluIGU/ZS5kYXRhOm51bGx9dmFyIGN1cnJlbnRDb21wb3NpdGlvbj1udWxsO2Z1bmN0aW9uIGV4dHJhY3RDb21wb3NpdGlvbkV2ZW50KHQsZSxvLG4pe3ZhciBpLHI7aWYoY2FuVXNlQ29tcG9zaXRpb25FdmVudD9pPWdldENvbXBvc2l0aW9uRXZlbnRUeXBlKHQpOmN1cnJlbnRDb21wb3NpdGlvbj9pc0ZhbGxiYWNrQ29tcG9zaXRpb25FbmQodCxvKSYmKGk9ZXZlbnRUeXBlcy5jb21wb3NpdGlvbkVuZCk6aXNGYWxsYmFja0NvbXBvc2l0aW9uU3RhcnQodCxvKSYmKGk9ZXZlbnRUeXBlcy5jb21wb3NpdGlvblN0YXJ0KSwhaSlyZXR1cm4gbnVsbDt1c2VGYWxsYmFja0NvbXBvc2l0aW9uRGF0YSYmKGN1cnJlbnRDb21wb3NpdGlvbnx8aSE9PWV2ZW50VHlwZXMuY29tcG9zaXRpb25TdGFydD9pPT09ZXZlbnRUeXBlcy5jb21wb3NpdGlvbkVuZCYmY3VycmVudENvbXBvc2l0aW9uJiYocj1jdXJyZW50Q29tcG9zaXRpb24uZ2V0RGF0YSgpKTpjdXJyZW50Q29tcG9zaXRpb249RmFsbGJhY2tDb21wb3NpdGlvblN0YXRlLmdldFBvb2xlZChuKSk7dmFyIHM9U3ludGhldGljQ29tcG9zaXRpb25FdmVudC5nZXRQb29sZWQoaSxlLG8sbik7aWYocilzLmRhdGE9cjtlbHNle3ZhciBhPWdldERhdGFGcm9tQ3VzdG9tRXZlbnQobyk7bnVsbCE9PWEmJihzLmRhdGE9YSl9cmV0dXJuIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhzKSxzfWZ1bmN0aW9uIGdldE5hdGl2ZUJlZm9yZUlucHV0Q2hhcnModCxlKXtzd2l0Y2godCl7Y2FzZVwidG9wQ29tcG9zaXRpb25FbmRcIjpyZXR1cm4gZ2V0RGF0YUZyb21DdXN0b21FdmVudChlKTtjYXNlXCJ0b3BLZXlQcmVzc1wiOnJldHVybiBlLndoaWNoIT09U1BBQ0VCQVJfQ09ERT9udWxsOihoYXNTcGFjZUtleXByZXNzPSEwLFNQQUNFQkFSX0NIQVIpO2Nhc2VcInRvcFRleHRJbnB1dFwiOnZhciBvPWUuZGF0YTtyZXR1cm4gbz09PVNQQUNFQkFSX0NIQVImJmhhc1NwYWNlS2V5cHJlc3M/bnVsbDpvO2RlZmF1bHQ6cmV0dXJuIG51bGx9fWZ1bmN0aW9uIGdldEZhbGxiYWNrQmVmb3JlSW5wdXRDaGFycyh0LGUpe2lmKGN1cnJlbnRDb21wb3NpdGlvbil7aWYoXCJ0b3BDb21wb3NpdGlvbkVuZFwiPT09dHx8IWNhblVzZUNvbXBvc2l0aW9uRXZlbnQmJmlzRmFsbGJhY2tDb21wb3NpdGlvbkVuZCh0LGUpKXt2YXIgbz1jdXJyZW50Q29tcG9zaXRpb24uZ2V0RGF0YSgpO3JldHVybiBGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUucmVsZWFzZShjdXJyZW50Q29tcG9zaXRpb24pLGN1cnJlbnRDb21wb3NpdGlvbj1udWxsLG99cmV0dXJuIG51bGx9c3dpdGNoKHQpe2Nhc2VcInRvcFBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZVwidG9wS2V5UHJlc3NcIjpyZXR1cm4gZS53aGljaCYmIWlzS2V5cHJlc3NDb21tYW5kKGUpP1N0cmluZy5mcm9tQ2hhckNvZGUoZS53aGljaCk6bnVsbDtjYXNlXCJ0b3BDb21wb3NpdGlvbkVuZFwiOnJldHVybiB1c2VGYWxsYmFja0NvbXBvc2l0aW9uRGF0YT9udWxsOmUuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1mdW5jdGlvbiBleHRyYWN0QmVmb3JlSW5wdXRFdmVudCh0LGUsbyxuKXt2YXIgaTtpZighKGk9Y2FuVXNlVGV4dElucHV0RXZlbnQ/Z2V0TmF0aXZlQmVmb3JlSW5wdXRDaGFycyh0LG8pOmdldEZhbGxiYWNrQmVmb3JlSW5wdXRDaGFycyh0LG8pKSlyZXR1cm4gbnVsbDt2YXIgcj1TeW50aGV0aWNJbnB1dEV2ZW50LmdldFBvb2xlZChldmVudFR5cGVzLmJlZm9yZUlucHV0LGUsbyxuKTtyZXR1cm4gci5kYXRhPWksRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKHIpLHJ9dmFyIEJlZm9yZUlucHV0RXZlbnRQbHVnaW49e2V2ZW50VHlwZXM6ZXZlbnRUeXBlcyxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKHQsZSxvLG4pe3JldHVybltleHRyYWN0Q29tcG9zaXRpb25FdmVudCh0LGUsbyxuKSxleHRyYWN0QmVmb3JlSW5wdXRFdmVudCh0LGUsbyxuKV19fTttb2R1bGUuZXhwb3J0cz1CZWZvcmVJbnB1dEV2ZW50UGx1Z2luO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtKbFptOXlaVWx1Y0hWMFJYWmxiblJRYkhWbmFXNHVhbk1pWFN3aWJtRnRaWE1pT2xzaVJYWmxiblJRY205d1lXZGhkRzl5Y3lJc0luSmxjWFZwY21VaUxDSkZlR1ZqZFhScGIyNUZiblpwY205dWJXVnVkQ0lzSWtaaGJHeGlZV05yUTI5dGNHOXphWFJwYjI1VGRHRjBaU0lzSWxONWJuUm9aWFJwWTBOdmJYQnZjMmwwYVc5dVJYWmxiblFpTENKVGVXNTBhR1YwYVdOSmJuQjFkRVYyWlc1MElpd2lSVTVFWDB0RldVTlBSRVZUSWl3aVUxUkJVbFJmUzBWWlEwOUVSU0lzSW1OaGJsVnpaVU52YlhCdmMybDBhVzl1UlhabGJuUWlMQ0pqWVc1VmMyVkVUMDBpTENKM2FXNWtiM2NpTENKa2IyTjFiV1Z1ZEUxdlpHVWlMQ0prYjJOMWJXVnVkQ0lzSW1OaGJsVnpaVlJsZUhSSmJuQjFkRVYyWlc1MElpd2lhWE5RY21WemRHOGlMQ0oxYzJWR1lXeHNZbUZqYTBOdmJYQnZjMmwwYVc5dVJHRjBZU0lzSW05d1pYSmhJaXdpZG1WeWMybHZiaUlzSW5CaGNuTmxTVzUwSWl3aVUxQkJRMFZDUVZKZlEwOUVSU0lzSWxOUVFVTkZRa0ZTWDBOSVFWSWlMQ0pUZEhKcGJtY2lMQ0ptY205dFEyaGhja052WkdVaUxDSmxkbVZ1ZEZSNWNHVnpJaXdpWW1WbWIzSmxTVzV3ZFhRaUxDSndhR0Z6WldSU1pXZHBjM1J5WVhScGIyNU9ZVzFsY3lJc0ltSjFZbUpzWldRaUxDSmpZWEIwZFhKbFpDSXNJbVJsY0dWdVpHVnVZMmxsY3lJc0ltTnZiWEJ2YzJsMGFXOXVSVzVrSWl3aVkyOXRjRzl6YVhScGIyNVRkR0Z5ZENJc0ltTnZiWEJ2YzJsMGFXOXVWWEJrWVhSbElpd2lhR0Z6VTNCaFkyVkxaWGx3Y21WemN5SXNJbWx6UzJWNWNISmxjM05EYjIxdFlXNWtJaXdpYm1GMGFYWmxSWFpsYm5RaUxDSmpkSEpzUzJWNUlpd2lZV3gwUzJWNUlpd2liV1YwWVV0bGVTSXNJbWRsZEVOdmJYQnZjMmwwYVc5dVJYWmxiblJVZVhCbElpd2lkRzl3VEdWMlpXeFVlWEJsSWl3aWFYTkdZV3hzWW1GamEwTnZiWEJ2YzJsMGFXOXVVM1JoY25RaUxDSnJaWGxEYjJSbElpd2lhWE5HWVd4c1ltRmphME52YlhCdmMybDBhVzl1Ulc1a0lpd2lhVzVrWlhoUFppSXNJbWRsZEVSaGRHRkdjbTl0UTNWemRHOXRSWFpsYm5RaUxDSmtaWFJoYVd3aUxDSmtZWFJoSWl3aVkzVnljbVZ1ZEVOdmJYQnZjMmwwYVc5dUlpd2laWGgwY21GamRFTnZiWEJ2YzJsMGFXOXVSWFpsYm5RaUxDSjBZWEpuWlhSSmJuTjBJaXdpYm1GMGFYWmxSWFpsYm5SVVlYSm5aWFFpTENKbGRtVnVkRlI1Y0dVaUxDSm1ZV3hzWW1GamEwUmhkR0VpTENKblpYUkVZWFJoSWl3aVoyVjBVRzl2YkdWa0lpd2laWFpsYm5RaUxDSmpkWE4wYjIxRVlYUmhJaXdpWVdOamRXMTFiR0YwWlZSM2IxQm9ZWE5sUkdsemNHRjBZMmhsY3lJc0ltZGxkRTVoZEdsMlpVSmxabTl5WlVsdWNIVjBRMmhoY25NaUxDSjNhR2xqYUNJc0ltTm9ZWEp6SWl3aVoyVjBSbUZzYkdKaFkydENaV1p2Y21WSmJuQjFkRU5vWVhKeklpd2ljbVZzWldGelpTSXNJbVY0ZEhKaFkzUkNaV1p2Y21WSmJuQjFkRVYyWlc1MElpd2lRbVZtYjNKbFNXNXdkWFJGZG1WdWRGQnNkV2RwYmlJc0ltVjRkSEpoWTNSRmRtVnVkSE1pTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZSUVN4aFFVVkJMRWxCUVVsQkxHbENRVUZ0UWtNc1VVRkJVU3h6UWtGRE0wSkRMSEZDUVVGMVFrUXNVVUZCVVN4cFEwRkRMMEpGTEhsQ1FVRXlRa1lzVVVGQlVTdzRRa0ZEYmtOSExEQkNRVUUwUWtnc1VVRkJVU3dyUWtGRGNFTkpMRzlDUVVGelFrb3NVVUZCVVN4NVFrRkZPVUpMTEdGQlFXVXNRMEZCUXl4RlFVRkhMRWRCUVVrc1IwRkJTU3hKUVVNelFrTXNZMEZCWjBJc1NVRkZhRUpETEhWQ1FVRjVRazRzY1VKQlFYRkNUeXhYUVVGaExIRkNRVUZ6UWtNc1QwRkZha1pETEdGQlFXVXNTMEZEWmxRc2NVSkJRWEZDVHl4WFFVRmhMR2xDUVVGclFrY3NWMEZEZEVSRUxHRkJRV1ZETEZOQlFWTkVMR05CVFRGQ0xFbEJRVWxGTEhGQ1FVRjFRbGdzY1VKQlFYRkNUeXhYUVVGaExHTkJRV1ZETEZOQlFWZERMR1ZCUVdsQ1J5eFhRVXR3UjBNc01rSkJRVFpDWWl4eFFrRkJjVUpQTEdGQlFXVkVMSGRDUVVFd1FrY3NZMEZCWjBKQkxHRkJRV1VzUjBGQlMwRXNZMEZCWjBJc1NVRk5ia29zVTBGQlUwY3NWMEZEVUN4SlFVRkpSU3hGUVVGUlRpeFBRVUZQVFN4TlFVTnVRaXhOUVVGM1FpeHBRa0ZCVmtFc1IwRkJLME1zYlVKQlFXeENRU3hGUVVGTlF5eFRRVUV3UWtNc1UwRkJVMFlzUlVGQlRVTXNWVUZCVnl4TFFVRlBMRWRCUnpsSExFbEJRVWxGTEdOQlFXZENMRWRCUTJoQ1F5eGpRVUZuUWtNc1QwRkJUME1zWVVGQllVZ3NaVUZIY0VOSkxGZEJRV0VzUTBGRFprTXNXVUZCWVN4RFFVTllReXgzUWtGQmVVSXNRMEZEZGtKRExGRkJRVk1zWjBKQlExUkRMRk5CUVZVc2QwSkJSVnBETEdGQlFXTXNRMEZCUXl4dlFrRkJjVUlzWTBGQlpTeGxRVUZuUWl4aFFVVnlSVU1zWlVGQlowSXNRMEZEWkVvc2QwSkJRWGxDTEVOQlEzWkNReXhSUVVGVExHMUNRVU5VUXl4VFFVRlZMREpDUVVWYVF5eGhRVUZqTEVOQlFVTXNWVUZCVnl4dlFrRkJjVUlzWVVGQll5eGpRVUZsTEZkQlFWa3NhVUpCUlRGR1JTeHBRa0ZCYTBJc1EwRkRhRUpNTEhkQ1FVRjVRaXhEUVVOMlFrTXNVVUZCVXl4eFFrRkRWRU1zVTBGQlZTdzJRa0ZGV2tNc1lVRkJZeXhEUVVGRExGVkJRVmNzYzBKQlFYVkNMR0ZCUVdNc1kwRkJaU3hYUVVGWkxHbENRVVUxUmtjc2EwSkJRVzFDTEVOQlEycENUaXgzUWtGQmVVSXNRMEZEZGtKRExGRkJRVk1zYzBKQlExUkRMRk5CUVZVc09FSkJSVnBETEdGQlFXTXNRMEZCUXl4VlFVRlhMSFZDUVVGM1FpeGhRVUZqTEdOQlFXVXNWMEZCV1N4clFrRkxNMFpKTEd0Q1FVRnRRaXhGUVU5MlFpeFRRVUZUUXl4clFrRkJhMEpETEVkQlEzcENMRTlCUVZGQkxFVkJRVmxETEZOQlFWZEVMRVZCUVZsRkxGRkJRVlZHTEVWQlFWbEhMRmxCUlM5RVNDeEZRVUZaUXl4VFFVRlhSQ3hGUVVGWlJTeFJRVk4yUXl4VFFVRlRSU3gzUWtGQmQwSkRMRWRCUXk5Q0xFOUJRVkZCTEVkQlEwNHNTVUZCU3l4elFrRkRTQ3hQUVVGUGFFSXNWMEZCVjA4c2FVSkJRM0JDTEVsQlFVc3NiMEpCUTBnc1QwRkJUMUFzVjBGQlYwMHNaVUZEY0VJc1NVRkJTeXgxUWtGRFNDeFBRVUZQVGl4WFFVRlhVU3h0UWtGWmVFSXNVMEZCVTFNc01rSkJRVEpDUkN4RlFVRmpUQ3hIUVVOb1JDeE5RVUYzUWl4bFFVRnFRa3NzUjBGQmFVTk1MRVZCUVZsUExGVkJRVmxzUXl4alFWVnNSU3hUUVVGVGJVTXNlVUpCUVhsQ1NDeEZRVUZqVEN4SFFVTTVReXhQUVVGUlN5eEhRVU5PTEVsQlFVc3NWMEZGU0N4UFFVRnpSQ3hKUVVFdlEycERMR0ZCUVdGeFF5eFJRVUZSVkN4RlFVRlpUeXhUUVVNeFF5eEpRVUZMTEdGQlIwZ3NUMEZCVDFBc1JVRkJXVThzVlVGQldXeERMR05CUTJwRExFbEJRVXNzWTBGRFRDeEpRVUZMTEdWQlEwd3NTVUZCU3l4VlFVVklMRTlCUVU4c1JVRkRWQ3hSUVVORkxFOUJRVThzUjBGaFlpeFRRVUZUY1VNc2RVSkJRWFZDVml4SFFVTTVRaXhKUVVGSlZ5eEZRVUZUV0N4RlFVRlpWeXhQUVVONlFpeE5RVUZ6UWl4cFFrRkJXRUVzUjBGQmRVSXNVMEZCVlVFc1JVRkRia05CTEVWQlFVOURMRXRCUlZRc1MwRkpWQ3hKUVVGSlF5eHRRa0ZCY1VJc1MwRkxla0lzVTBGQlUwTXNkMEpCUVhkQ1ZDeEZRVUZqVlN4RlFVRlpaaXhGUVVGaFowSXNSMEZEZEVVc1NVRkJTVU1zUlVGRFFVTXNSVUZaU2l4SFFWWkpOVU1zZFVKQlEwWXlReXhGUVVGWllpeDNRa0ZCZDBKRExFZEJRekZDVVN4dFFrRkpSRXdzZVVKQlFYbENTQ3hGUVVGalRDeExRVU5vUkdsQ0xFVkJRVmsxUWl4WFFVRlhUU3huUWtGS2JrSlhMREpDUVVFeVFrUXNSVUZCWTB3c1MwRkRNME5wUWl4RlFVRlpOVUlzVjBGQlYwOHNiVUpCVFhSQ2NVSXNSVUZEU0N4UFFVRlBMRXRCUjB4d1F5dzJRa0ZIUjJkRExHOUNRVUZ6UWtrc1NVRkJZelZDTEZkQlFWZFBMR2xDUVVWNlEzRkNMRWxCUVdNMVFpeFhRVUZYVFN4blFrRkRPVUpyUWl4eFFrRkRSa3NzUlVGQlpVd3NiVUpCUVcxQ1RTeFhRVWh3UTA0c2JVSkJRWEZDTlVNc2VVSkJRWGxDYlVRc1ZVRkJWVW9zU1VGUk5VUXNTVUZCU1Vzc1JVRkJVVzVFTERCQ1FVRXdRbXRFTEZWQlFWVklMRVZCUVZkR0xFVkJRVmxtTEVWQlFXRm5RaXhIUVVWd1JpeEhRVUZKUlN4RlFVZEdSeXhGUVVGTlZDeExRVUZQVFN4TlFVTlNMRU5CUTB3c1NVRkJTVWtzUlVGQllWb3NkVUpCUVhWQ1ZpeEhRVU55UWl4UFFVRm1jMElzU1VGRFJrUXNSVUZCVFZRc1MwRkJUMVVzUjBGTGFrSXNUMEZFUVhoRUxHbENRVUZwUW5sRUxEWkNRVUUyUWtZc1IwRkRka05CTEVWQlVWUXNVMEZCVTBjc01FSkJRVEJDYmtJc1JVRkJZMHdzUjBGREwwTXNUMEZCVVVzc1IwRkRUaXhKUVVGTExHOUNRVU5JTEU5QlFVOUxMSFZDUVVGMVFsWXNSMEZEYUVNc1NVRkJTeXhqUVdkQ1NDeFBRVVJaUVN4RlFVRlplVUlzVVVGRFZuaERMR05CUTB3c1RVRkhWR0VzYTBKQlFXMUNMRVZCUTFwYUxHVkJSVlFzU1VGQlN5eGxRVVZJTEVsQlFVbDNReXhGUVVGUk1VSXNSVUZCV1Zrc1MwRkxlRUlzVDBGQlNXTXNTVUZCVlhoRExHVkJRV2xDV1N4cFFrRkRkRUlzUzBGSFJqUkNMRVZCUlZRc1VVRkZSU3hQUVVGUExFMUJXV0lzVTBGQlUwTXNORUpCUVRSQ2RFSXNSVUZCWTB3c1IwRkxha1FzUjBGQlNXRXNiVUpCUVc5Q0xFTkJRM1JDTEVkQlFYRkNMSE5DUVVGcVFsSXNTVUZCZVVNdlFpeDNRa0ZCTUVKclF5eDVRa0ZCZVVKSUxFVkJRV05NTEVkQlFXTXNRMEZETVVnc1NVRkJTVEJDTEVWQlFWRmlMRzFDUVVGdFFrMHNWVUZITDBJc1QwRkdRV3hFTEhsQ1FVRjVRakpFTEZGQlFWRm1MRzlDUVVOcVEwRXNiVUpCUVhGQ0xFdEJRMlJoTEVWQlJWUXNUMEZCVHl4TFFVZFVMRTlCUVZGeVFpeEhRVU5PTEVsQlFVc3NWMEZIU0N4UFFVRlBMRXRCUTFRc1NVRkJTeXhqUVdsQ1NDeFBRVUZKVEN4RlFVRlplVUlzVVVGQlZURkNMR3RDUVVGclFrTXNSMEZEYmtOaUxFOUJRVTlETEdGQlFXRlpMRVZCUVZsNVFpeFBRVVZzUXl4TFFVTlVMRWxCUVVzc2IwSkJRMGdzVDBGQlR6VkRMREpDUVVFMlFpeExRVUZQYlVJc1JVRkJXVmtzUzBGRGVrUXNVVUZEUlN4UFFVRlBMRTFCVldJc1UwRkJVMmxDTEhkQ1FVRjNRbmhDTEVWQlFXTlZMRVZCUVZsbUxFVkJRV0ZuUWl4SFFVTjBSU3hKUVVGSlZTeEZRVlZLTEV0QlVFVkJMRVZCUkVVdlF5eHhRa0ZEVFRaRExEQkNRVUV3UW01Q0xFVkJRV05NTEVkQlJYaERNa0lzTkVKQlFUUkNkRUlzUlVGQlkwd3NTVUZOYkVRc1QwRkJUeXhMUVVkVUxFbEJRVWx4UWl4RlFVRlJiRVFzYjBKQlFXOUNhVVFzVlVGQlZTOUNMRmRCUVZkRExGbEJRV0Y1UWl4RlFVRlpaaXhGUVVGaFowSXNSMEZKTTBZc1QwRkdRVXNzUlVGQlRWUXNTMEZCVDJNc1JVRkRZalZFTEdsQ1FVRnBRbmxFTERaQ1FVRTJRa1lzUjBGRGRrTkJMRVZCY1VKVUxFbEJRVWxUTEhWQ1FVRjVRaXhEUVVNelFucERMRmRCUVZsQkxGZEJSVm93UXl4alFVRmxMRk5CUVZVeFFpeEZRVUZqVlN4RlFVRlpaaXhGUVVGaFowSXNSMEZET1VRc1RVRkJUeXhEUVVGRFJpeDNRa0ZCZDBKVUxFVkJRV05WTEVWQlFWbG1MRVZCUVdGblFpeEhRVUZ2UW1Fc2QwSkJRWGRDZUVJc1JVRkJZMVVzUlVGQldXWXNSVUZCWVdkQ0xFMUJTVGxLWjBJc1QwRkJUME1zVVVGQlZVZ2lMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F0Wkc5dEwyeHBZaTlDWldadmNtVkpibkIxZEVWMlpXNTBVR3gxWjJsdUxtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIGlzVW5pdGxlc3NOdW1iZXI9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLGZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9O2Z1bmN0aW9uIHByZWZpeEtleShvLHIpe3JldHVybiBvK3IuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrci5zdWJzdHJpbmcoMSl9dmFyIHByZWZpeGVzPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhpc1VuaXRsZXNzTnVtYmVyKS5mb3JFYWNoKGZ1bmN0aW9uKG8pe3ByZWZpeGVzLmZvckVhY2goZnVuY3Rpb24ocil7aXNVbml0bGVzc051bWJlcltwcmVmaXhLZXkocixvKV09aXNVbml0bGVzc051bWJlcltvXX0pfSk7dmFyIHNob3J0aGFuZFByb3BlcnR5RXhwYW5zaW9ucz17YmFja2dyb3VuZDp7YmFja2dyb3VuZEF0dGFjaG1lbnQ6ITAsYmFja2dyb3VuZENvbG9yOiEwLGJhY2tncm91bmRJbWFnZTohMCxiYWNrZ3JvdW5kUG9zaXRpb25YOiEwLGJhY2tncm91bmRQb3NpdGlvblk6ITAsYmFja2dyb3VuZFJlcGVhdDohMH0sYmFja2dyb3VuZFBvc2l0aW9uOntiYWNrZ3JvdW5kUG9zaXRpb25YOiEwLGJhY2tncm91bmRQb3NpdGlvblk6ITB9LGJvcmRlcjp7Ym9yZGVyV2lkdGg6ITAsYm9yZGVyU3R5bGU6ITAsYm9yZGVyQ29sb3I6ITB9LGJvcmRlckJvdHRvbTp7Ym9yZGVyQm90dG9tV2lkdGg6ITAsYm9yZGVyQm90dG9tU3R5bGU6ITAsYm9yZGVyQm90dG9tQ29sb3I6ITB9LGJvcmRlckxlZnQ6e2JvcmRlckxlZnRXaWR0aDohMCxib3JkZXJMZWZ0U3R5bGU6ITAsYm9yZGVyTGVmdENvbG9yOiEwfSxib3JkZXJSaWdodDp7Ym9yZGVyUmlnaHRXaWR0aDohMCxib3JkZXJSaWdodFN0eWxlOiEwLGJvcmRlclJpZ2h0Q29sb3I6ITB9LGJvcmRlclRvcDp7Ym9yZGVyVG9wV2lkdGg6ITAsYm9yZGVyVG9wU3R5bGU6ITAsYm9yZGVyVG9wQ29sb3I6ITB9LGZvbnQ6e2ZvbnRTdHlsZTohMCxmb250VmFyaWFudDohMCxmb250V2VpZ2h0OiEwLGZvbnRTaXplOiEwLGxpbmVIZWlnaHQ6ITAsZm9udEZhbWlseTohMH0sb3V0bGluZTp7b3V0bGluZVdpZHRoOiEwLG91dGxpbmVTdHlsZTohMCxvdXRsaW5lQ29sb3I6ITB9fSxDU1NQcm9wZXJ0eT17aXNVbml0bGVzc051bWJlcjppc1VuaXRsZXNzTnVtYmVyLHNob3J0aGFuZFByb3BlcnR5RXhwYW5zaW9uczpzaG9ydGhhbmRQcm9wZXJ0eUV4cGFuc2lvbnN9O21vZHVsZS5leHBvcnRzPUNTU1Byb3BlcnR5O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtOVFUxQnliM0JsY25SNUxtcHpJbDBzSW01aGJXVnpJanBiSW1selZXNXBkR3hsYzNOT2RXMWlaWElpTENKaGJtbHRZWFJwYjI1SmRHVnlZWFJwYjI1RGIzVnVkQ0lzSW1KdmNtUmxja2x0WVdkbFQzVjBjMlYwSWl3aVltOXlaR1Z5U1cxaFoyVlRiR2xqWlNJc0ltSnZjbVJsY2tsdFlXZGxWMmxrZEdnaUxDSmliM2hHYkdWNElpd2lZbTk0Um14bGVFZHliM1Z3SWl3aVltOTRUM0prYVc1aGJFZHliM1Z3SWl3aVkyOXNkVzF1UTI5MWJuUWlMQ0pqYjJ4MWJXNXpJaXdpWm14bGVDSXNJbVpzWlhoSGNtOTNJaXdpWm14bGVGQnZjMmwwYVhabElpd2labXhsZUZOb2NtbHVheUlzSW1ac1pYaE9aV2RoZEdsMlpTSXNJbVpzWlhoUGNtUmxjaUlzSW1keWFXUlNiM2NpTENKbmNtbGtVbTkzUlc1a0lpd2laM0pwWkZKdmQxTndZVzRpTENKbmNtbGtVbTkzVTNSaGNuUWlMQ0puY21sa1EyOXNkVzF1SWl3aVozSnBaRU52YkhWdGJrVnVaQ0lzSW1keWFXUkRiMngxYlc1VGNHRnVJaXdpWjNKcFpFTnZiSFZ0YmxOMFlYSjBJaXdpWm05dWRGZGxhV2RvZENJc0lteHBibVZEYkdGdGNDSXNJbXhwYm1WSVpXbG5hSFFpTENKdmNHRmphWFI1SWl3aWIzSmtaWElpTENKdmNuQm9ZVzV6SWl3aWRHRmlVMmw2WlNJc0luZHBaRzkzY3lJc0lucEpibVJsZUNJc0lucHZiMjBpTENKbWFXeHNUM0JoWTJsMGVTSXNJbVpzYjI5a1QzQmhZMmwwZVNJc0luTjBiM0JQY0dGamFYUjVJaXdpYzNSeWIydGxSR0Z6YUdGeWNtRjVJaXdpYzNSeWIydGxSR0Z6YUc5bVpuTmxkQ0lzSW5OMGNtOXJaVTFwZEdWeWJHbHRhWFFpTENKemRISnZhMlZQY0dGamFYUjVJaXdpYzNSeWIydGxWMmxrZEdnaUxDSndjbVZtYVhoTFpYa2lMQ0p3Y21WbWFYZ2lMQ0pyWlhraUxDSmphR0Z5UVhRaUxDSjBiMVZ3Y0dWeVEyRnpaU0lzSW5OMVluTjBjbWx1WnlJc0luQnlaV1pwZUdWeklpd2lUMkpxWldOMElpd2lhMlY1Y3lJc0ltWnZja1ZoWTJnaUxDSndjbTl3SWl3aWMyaHZjblJvWVc1a1VISnZjR1Z5ZEhsRmVIQmhibk5wYjI1eklpd2lZbUZqYTJkeWIzVnVaQ0lzSW1KaFkydG5jbTkxYm1SQmRIUmhZMmh0Wlc1MElpd2lZbUZqYTJkeWIzVnVaRU52Ykc5eUlpd2lZbUZqYTJkeWIzVnVaRWx0WVdkbElpd2lZbUZqYTJkeWIzVnVaRkJ2YzJsMGFXOXVXQ0lzSW1KaFkydG5jbTkxYm1SUWIzTnBkR2x2YmxraUxDSmlZV05yWjNKdmRXNWtVbVZ3WldGMElpd2lZbUZqYTJkeWIzVnVaRkJ2YzJsMGFXOXVJaXdpWW05eVpHVnlJaXdpWW05eVpHVnlWMmxrZEdnaUxDSmliM0prWlhKVGRIbHNaU0lzSW1KdmNtUmxja052Ykc5eUlpd2lZbTl5WkdWeVFtOTBkRzl0SWl3aVltOXlaR1Z5UW05MGRHOXRWMmxrZEdnaUxDSmliM0prWlhKQ2IzUjBiMjFUZEhsc1pTSXNJbUp2Y21SbGNrSnZkSFJ2YlVOdmJHOXlJaXdpWW05eVpHVnlUR1ZtZENJc0ltSnZjbVJsY2t4bFpuUlhhV1IwYUNJc0ltSnZjbVJsY2t4bFpuUlRkSGxzWlNJc0ltSnZjbVJsY2t4bFpuUkRiMnh2Y2lJc0ltSnZjbVJsY2xKcFoyaDBJaXdpWW05eVpHVnlVbWxuYUhSWGFXUjBhQ0lzSW1KdmNtUmxjbEpwWjJoMFUzUjViR1VpTENKaWIzSmtaWEpTYVdkb2RFTnZiRzl5SWl3aVltOXlaR1Z5Vkc5d0lpd2lZbTl5WkdWeVZHOXdWMmxrZEdnaUxDSmliM0prWlhKVWIzQlRkSGxzWlNJc0ltSnZjbVJsY2xSdmNFTnZiRzl5SWl3aVptOXVkQ0lzSW1admJuUlRkSGxzWlNJc0ltWnZiblJXWVhKcFlXNTBJaXdpWm05dWRGTnBlbVVpTENKbWIyNTBSbUZ0YVd4NUlpd2liM1YwYkdsdVpTSXNJbTkxZEd4cGJtVlhhV1IwYUNJc0ltOTFkR3hwYm1WVGRIbHNaU0lzSW05MWRHeHBibVZEYjJ4dmNpSXNJa05UVTFCeWIzQmxjblI1SWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCVVVFc1lVRk5RU3hKUVVGSlFTeHBRa0ZCYlVJc1EwRkRja0pETEhsQ1FVRjVRaXhGUVVONlFrTXNiVUpCUVcxQ0xFVkJRMjVDUXl4clFrRkJhMElzUlVGRGJFSkRMR3RDUVVGclFpeEZRVU5zUWtNc1UwRkJVeXhGUVVOVVF5eGpRVUZqTEVWQlEyUkRMR2xDUVVGcFFpeEZRVU5xUWtNc1lVRkJZU3hGUVVOaVF5eFRRVUZUTEVWQlExUkRMRTFCUVUwc1JVRkRUa01zVlVGQlZTeEZRVU5XUXl4alFVRmpMRVZCUTJSRExGbEJRVmtzUlVGRFdrTXNZMEZCWXl4RlFVTmtReXhYUVVGWExFVkJRMWhETEZOQlFWTXNSVUZEVkVNc1dVRkJXU3hGUVVOYVF5eGhRVUZoTEVWQlEySkRMR05CUVdNc1JVRkRaRU1zV1VGQldTeEZRVU5hUXl4bFFVRmxMRVZCUTJaRExHZENRVUZuUWl4RlFVTm9Ra01zYVVKQlFXbENMRVZCUTJwQ1F5eFpRVUZaTEVWQlExcERMRmRCUVZjc1JVRkRXRU1zV1VGQldTeEZRVU5hUXl4VFFVRlRMRVZCUTFSRExFOUJRVThzUlVGRFVFTXNVMEZCVXl4RlFVTlVReXhUUVVGVExFVkJRMVJETEZGQlFWRXNSVUZEVWtNc1VVRkJVU3hGUVVOU1F5eE5RVUZOTEVWQlIwNURMR0ZCUVdFc1JVRkRZa01zWTBGQll5eEZRVU5rUXl4aFFVRmhMRVZCUTJKRExHbENRVUZwUWl4RlFVTnFRa01zYTBKQlFXdENMRVZCUTJ4Q1F5eHJRa0ZCYTBJc1JVRkRiRUpETEdWQlFXVXNSVUZEWmtNc1lVRkJZU3hIUVZObUxGTkJRVk5ETEZWQlFWVkRMRVZCUVZGRExFZEJRM3BDTEU5QlFVOUVMRVZCUVZORExFVkJRVWxETEU5QlFVOHNSMEZCUjBNc1kwRkJaMEpHTEVWQlFVbEhMRlZCUVZVc1IwRlBPVVFzU1VGQlNVTXNVMEZCVnl4RFFVRkRMRk5CUVZVc1MwRkJUU3hOUVVGUExFdEJTWFpEUXl4UFFVRlBReXhMUVVGTGJFUXNhMEpCUVd0Q2JVUXNVVUZCVVN4VFFVRlZReXhIUVVNNVEwb3NVMEZCVTBjc1VVRkJVU3hUUVVGVlVpeEhRVU42UWpORExHbENRVUZwUWpCRExGVkJRVlZETEVWQlFWRlRMRWxCUVZOd1JDeHBRa0ZCYVVKdlJDeFBRV0ZxUlN4SlFVRkpReXcwUWtGQk9FSXNRMEZEYUVORExGZEJRVmtzUTBGRFZrTXNjMEpCUVhOQ0xFVkJRM1JDUXl4cFFrRkJhVUlzUlVGRGFrSkRMR2xDUVVGcFFpeEZRVU5xUWtNc2NVSkJRWEZDTEVWQlEzSkNReXh4UWtGQmNVSXNSVUZEY2tKRExHdENRVUZyUWl4SFFVVndRa01zYlVKQlFXOUNMRU5CUTJ4Q1NDeHhRa0ZCY1VJc1JVRkRja0pETEhGQ1FVRnhRaXhIUVVWMlFrY3NUMEZCVVN4RFFVTk9ReXhoUVVGaExFVkJRMkpETEdGQlFXRXNSVUZEWWtNc1lVRkJZU3hIUVVWbVF5eGhRVUZqTEVOQlExcERMRzFDUVVGdFFpeEZRVU51UWtNc2JVSkJRVzFDTEVWQlEyNUNReXh0UWtGQmJVSXNSMEZGY2tKRExGZEJRVmtzUTBGRFZrTXNhVUpCUVdsQ0xFVkJRMnBDUXl4cFFrRkJhVUlzUlVGRGFrSkRMR2xDUVVGcFFpeEhRVVZ1UWtNc1dVRkJZU3hEUVVOWVF5eHJRa0ZCYTBJc1JVRkRiRUpETEd0Q1FVRnJRaXhGUVVOc1FrTXNhMEpCUVd0Q0xFZEJSWEJDUXl4VlFVRlhMRU5CUTFSRExHZENRVUZuUWl4RlFVTm9Ra01zWjBKQlFXZENMRVZCUTJoQ1F5eG5Ra0ZCWjBJc1IwRkZiRUpETEV0QlFVMHNRMEZEU2tNc1YwRkJWeXhGUVVOWVF5eGhRVUZoTEVWQlEySTFSQ3haUVVGWkxFVkJRMW8yUkN4VlFVRlZMRVZCUTFZelJDeFpRVUZaTEVWQlExbzBSQ3haUVVGWkxFZEJSV1JETEZGQlFWTXNRMEZEVUVNc1kwRkJZeXhGUVVOa1F5eGpRVUZqTEVWQlEyUkRMR05CUVdNc1NVRkpaRU1zV1VGQll5eERRVU5vUWpOR0xHbENRVUZyUWtFc2FVSkJRMnhDY1VRc05FSkJRVFpDUVN3MlFrRkhMMEoxUXl4UFFVRlBReXhSUVVGVlJpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzFrYjIwdmJHbGlMME5UVTFCeWIzQmxjblI1TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgQ1NTUHJvcGVydHk9cmVxdWlyZShcIi4vQ1NTUHJvcGVydHlcIiksRXhlY3V0aW9uRW52aXJvbm1lbnQ9cmVxdWlyZShcImZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpLFJlYWN0SW5zdHJ1bWVudGF0aW9uPXJlcXVpcmUoXCIuL1JlYWN0SW5zdHJ1bWVudGF0aW9uXCIpLGNhbWVsaXplU3R5bGVOYW1lPXJlcXVpcmUoXCJmYmpzL2xpYi9jYW1lbGl6ZVN0eWxlTmFtZVwiKSxkYW5nZXJvdXNTdHlsZVZhbHVlPXJlcXVpcmUoXCIuL2Rhbmdlcm91c1N0eWxlVmFsdWVcIiksaHlwaGVuYXRlU3R5bGVOYW1lPXJlcXVpcmUoXCJmYmpzL2xpYi9oeXBoZW5hdGVTdHlsZU5hbWVcIiksbWVtb2l6ZVN0cmluZ09ubHk9cmVxdWlyZShcImZianMvbGliL21lbW9pemVTdHJpbmdPbmx5XCIpLHdhcm5pbmc9cmVxdWlyZShcImZianMvbGliL3dhcm5pbmdcIikscHJvY2Vzc1N0eWxlTmFtZT1tZW1vaXplU3RyaW5nT25seShmdW5jdGlvbihlKXtyZXR1cm4gaHlwaGVuYXRlU3R5bGVOYW1lKGUpfSksaGFzU2hvcnRoYW5kUHJvcGVydHlCdWc9ITEsc3R5bGVGbG9hdEFjY2Vzc29yPVwiY3NzRmxvYXRcIjtpZihFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pe3ZhciB0ZW1wU3R5bGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZTt0cnl7dGVtcFN0eWxlLmZvbnQ9XCJcIn1jYXRjaChlKXtoYXNTaG9ydGhhbmRQcm9wZXJ0eUJ1Zz0hMH12b2lkIDA9PT1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuY3NzRmxvYXQmJihzdHlsZUZsb2F0QWNjZXNzb3I9XCJzdHlsZUZsb2F0XCIpfWlmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYpdmFyIGJhZFZlbmRvcmVkU3R5bGVOYW1lUGF0dGVybj0vXig/OndlYmtpdHxtb3p8bylbQS1aXS8sYmFkU3R5bGVWYWx1ZVdpdGhTZW1pY29sb25QYXR0ZXJuPS87XFxzKiQvLHdhcm5lZFN0eWxlTmFtZXM9e30sd2FybmVkU3R5bGVWYWx1ZXM9e30sd2FybmVkRm9yTmFOVmFsdWU9ITEsd2Fybkh5cGhlbmF0ZWRTdHlsZU5hbWU9ZnVuY3Rpb24oZSxyKXt3YXJuZWRTdHlsZU5hbWVzLmhhc093blByb3BlcnR5KGUpJiZ3YXJuZWRTdHlsZU5hbWVzW2VdfHwod2FybmVkU3R5bGVOYW1lc1tlXT0hMCxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ3YXJuaW5nKCExLFwiVW5zdXBwb3J0ZWQgc3R5bGUgcHJvcGVydHkgJXMuIERpZCB5b3UgbWVhbiAlcz8lc1wiLGUsY2FtZWxpemVTdHlsZU5hbWUoZSksY2hlY2tSZW5kZXJNZXNzYWdlKHIpKSl9LHdhcm5CYWRWZW5kb3JlZFN0eWxlTmFtZT1mdW5jdGlvbihlLHIpe3dhcm5lZFN0eWxlTmFtZXMuaGFzT3duUHJvcGVydHkoZSkmJndhcm5lZFN0eWxlTmFtZXNbZV18fCh3YXJuZWRTdHlsZU5hbWVzW2VdPSEwLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcoITEsXCJVbnN1cHBvcnRlZCB2ZW5kb3ItcHJlZml4ZWQgc3R5bGUgcHJvcGVydHkgJXMuIERpZCB5b3UgbWVhbiAlcz8lc1wiLGUsZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStlLnNsaWNlKDEpLGNoZWNrUmVuZGVyTWVzc2FnZShyKSkpfSx3YXJuU3R5bGVWYWx1ZVdpdGhTZW1pY29sb249ZnVuY3Rpb24oZSxyLHQpe3dhcm5lZFN0eWxlVmFsdWVzLmhhc093blByb3BlcnR5KHIpJiZ3YXJuZWRTdHlsZVZhbHVlc1tyXXx8KHdhcm5lZFN0eWxlVmFsdWVzW3JdPSEwLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcoITEsJ1N0eWxlIHByb3BlcnR5IHZhbHVlcyBzaG91bGRuXFwndCBjb250YWluIGEgc2VtaWNvbG9uLiVzIFRyeSBcIiVzOiAlc1wiIGluc3RlYWQuJyxjaGVja1JlbmRlck1lc3NhZ2UodCksZSxyLnJlcGxhY2UoYmFkU3R5bGVWYWx1ZVdpdGhTZW1pY29sb25QYXR0ZXJuLFwiXCIpKSl9LHdhcm5TdHlsZVZhbHVlSXNOYU49ZnVuY3Rpb24oZSxyLHQpe3dhcm5lZEZvck5hTlZhbHVlfHwod2FybmVkRm9yTmFOVmFsdWU9ITAsXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FybmluZyghMSxcImBOYU5gIGlzIGFuIGludmFsaWQgdmFsdWUgZm9yIHRoZSBgJXNgIGNzcyBzdHlsZSBwcm9wZXJ0eS4lc1wiLGUsY2hlY2tSZW5kZXJNZXNzYWdlKHQpKSl9LGNoZWNrUmVuZGVyTWVzc2FnZT1mdW5jdGlvbihlKXtpZihlKXt2YXIgcj1lLmdldE5hbWUoKTtpZihyKXJldHVyblwiIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGBcIityK1wiYC5cIn1yZXR1cm5cIlwifSx3YXJuVmFsaWRTdHlsZT1mdW5jdGlvbihlLHIsdCl7dmFyIG47dCYmKG49dC5fY3VycmVudEVsZW1lbnQuX293bmVyKSxlLmluZGV4T2YoXCItXCIpPi0xP3dhcm5IeXBoZW5hdGVkU3R5bGVOYW1lKGUsbik6YmFkVmVuZG9yZWRTdHlsZU5hbWVQYXR0ZXJuLnRlc3QoZSk/d2FybkJhZFZlbmRvcmVkU3R5bGVOYW1lKGUsbik6YmFkU3R5bGVWYWx1ZVdpdGhTZW1pY29sb25QYXR0ZXJuLnRlc3QocikmJndhcm5TdHlsZVZhbHVlV2l0aFNlbWljb2xvbihlLHIsbiksXCJudW1iZXJcIj09dHlwZW9mIHImJmlzTmFOKHIpJiZ3YXJuU3R5bGVWYWx1ZUlzTmFOKGUscixuKX07dmFyIENTU1Byb3BlcnR5T3BlcmF0aW9ucz17Y3JlYXRlTWFya3VwRm9yU3R5bGVzOmZ1bmN0aW9uKGUscil7dmFyIHQ9XCJcIjtmb3IodmFyIG4gaW4gZSlpZihlLmhhc093blByb3BlcnR5KG4pKXt2YXIgYT0wPT09bi5pbmRleE9mKFwiLS1cIiksbz1lW25dO1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJihhfHx3YXJuVmFsaWRTdHlsZShuLG8scikpLG51bGwhPW8mJih0Kz1wcm9jZXNzU3R5bGVOYW1lKG4pK1wiOlwiLHQrPWRhbmdlcm91c1N0eWxlVmFsdWUobixvLHIsYSkrXCI7XCIpfXJldHVybiB0fHxudWxsfSxzZXRWYWx1ZUZvclN0eWxlczpmdW5jdGlvbihlLHIsdCl7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uSG9zdE9wZXJhdGlvbih7aW5zdGFuY2VJRDp0Ll9kZWJ1Z0lELHR5cGU6XCJ1cGRhdGUgc3R5bGVzXCIscGF5bG9hZDpyfSk7dmFyIG49ZS5zdHlsZTtmb3IodmFyIGEgaW4gcilpZihyLmhhc093blByb3BlcnR5KGEpKXt2YXIgbz0wPT09YS5pbmRleE9mKFwiLS1cIik7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKG98fHdhcm5WYWxpZFN0eWxlKGEsclthXSx0KSk7dmFyIHM9ZGFuZ2Vyb3VzU3R5bGVWYWx1ZShhLHJbYV0sdCxvKTtpZihcImZsb2F0XCIhPT1hJiZcImNzc0Zsb2F0XCIhPT1hfHwoYT1zdHlsZUZsb2F0QWNjZXNzb3IpLG8pbi5zZXRQcm9wZXJ0eShhLHMpO2Vsc2UgaWYocyluW2FdPXM7ZWxzZXt2YXIgbD1oYXNTaG9ydGhhbmRQcm9wZXJ0eUJ1ZyYmQ1NTUHJvcGVydHkuc2hvcnRoYW5kUHJvcGVydHlFeHBhbnNpb25zW2FdO2lmKGwpZm9yKHZhciBpIGluIGwpbltpXT1cIlwiO2Vsc2UgblthXT1cIlwifX19fTttb2R1bGUuZXhwb3J0cz1DU1NQcm9wZXJ0eU9wZXJhdGlvbnM7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa05UVTFCeWIzQmxjblI1VDNCbGNtRjBhVzl1Y3k1cWN5SmRMQ0p1WVcxbGN5STZXeUpEVTFOUWNtOXdaWEowZVNJc0luSmxjWFZwY21VaUxDSkZlR1ZqZFhScGIyNUZiblpwY205dWJXVnVkQ0lzSWxKbFlXTjBTVzV6ZEhKMWJXVnVkR0YwYVc5dUlpd2lZMkZ0Wld4cGVtVlRkSGxzWlU1aGJXVWlMQ0prWVc1blpYSnZkWE5UZEhsc1pWWmhiSFZsSWl3aWFIbHdhR1Z1WVhSbFUzUjViR1ZPWVcxbElpd2liV1Z0YjJsNlpWTjBjbWx1WjA5dWJIa2lMQ0ozWVhKdWFXNW5JaXdpY0hKdlkyVnpjMU4wZVd4bFRtRnRaU0lzSW5OMGVXeGxUbUZ0WlNJc0ltaGhjMU5vYjNKMGFHRnVaRkJ5YjNCbGNuUjVRblZuSWl3aWMzUjViR1ZHYkc5aGRFRmpZMlZ6YzI5eUlpd2lZMkZ1VlhObFJFOU5JaXdpZEdWdGNGTjBlV3hsSWl3aVpHOWpkVzFsYm5RaUxDSmpjbVZoZEdWRmJHVnRaVzUwSWl3aWMzUjViR1VpTENKbWIyNTBJaXdpWlNJc0luVnVaR1ZtYVc1bFpDSXNJbVJ2WTNWdFpXNTBSV3hsYldWdWRDSXNJbU56YzBac2IyRjBJaXdpY0hKdlkyVnpjeUlzSW1WdWRpSXNJazVQUkVWZlJVNVdJaXdpWW1Ga1ZtVnVaRzl5WldSVGRIbHNaVTVoYldWUVlYUjBaWEp1SWl3aVltRmtVM1I1YkdWV1lXeDFaVmRwZEdoVFpXMXBZMjlzYjI1UVlYUjBaWEp1SWl3aWQyRnlibVZrVTNSNWJHVk9ZVzFsY3lJc0luZGhjbTVsWkZOMGVXeGxWbUZzZFdWeklpd2lkMkZ5Ym1Wa1JtOXlUbUZPVm1Gc2RXVWlMQ0ozWVhKdVNIbHdhR1Z1WVhSbFpGTjBlV3hsVG1GdFpTSXNJbTVoYldVaUxDSnZkMjVsY2lJc0ltaGhjMDkzYmxCeWIzQmxjblI1SWl3aVkyaGxZMnRTWlc1a1pYSk5aWE56WVdkbElpd2lkMkZ5YmtKaFpGWmxibVJ2Y21Wa1UzUjViR1ZPWVcxbElpd2lZMmhoY2tGMElpd2lkRzlWY0hCbGNrTmhjMlVpTENKemJHbGpaU0lzSW5kaGNtNVRkSGxzWlZaaGJIVmxWMmwwYUZObGJXbGpiMnh2YmlJc0luWmhiSFZsSWl3aWNtVndiR0ZqWlNJc0luZGhjbTVUZEhsc1pWWmhiSFZsU1hOT1lVNGlMQ0puWlhST1lXMWxJaXdpZDJGeWJsWmhiR2xrVTNSNWJHVWlMQ0pqYjIxd2IyNWxiblFpTENKZlkzVnljbVZ1ZEVWc1pXMWxiblFpTENKZmIzZHVaWElpTENKcGJtUmxlRTltSWl3aWRHVnpkQ0lzSW1selRtRk9JaXdpUTFOVFVISnZjR1Z5ZEhsUGNHVnlZWFJwYjI1eklpd2lZM0psWVhSbFRXRnlhM1Z3Um05eVUzUjViR1Z6SWl3aWMzUjViR1Z6SWl3aWMyVnlhV0ZzYVhwbFpDSXNJbWx6UTNWemRHOXRVSEp2Y0dWeWRIa2lMQ0p6ZEhsc1pWWmhiSFZsSWl3aWMyVjBWbUZzZFdWR2IzSlRkSGxzWlhNaUxDSnViMlJsSWl3aVpHVmlkV2RVYjI5c0lpd2liMjVJYjNOMFQzQmxjbUYwYVc5dUlpd2lhVzV6ZEdGdVkyVkpSQ0lzSWw5a1pXSjFaMGxFSWl3aWRIbHdaU0lzSW5CaGVXeHZZV1FpTENKelpYUlFjbTl3WlhKMGVTSXNJbVY0Y0dGdWMybHZiaUlzSW5Ob2IzSjBhR0Z1WkZCeWIzQmxjblI1Ulhod1lXNXphVzl1Y3lJc0ltbHVaR2wyYVdSMVlXeFRkSGxzWlU1aGJXVWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRlJRU3hoUVVWQkxFbEJRVWxCTEZsQlFXTkRMRkZCUVZFc2FVSkJRM1JDUXl4eFFrRkJkVUpFTEZGQlFWRXNhVU5CUXk5Q1JTeHhRa0ZCZFVKR0xGRkJRVkVzTUVKQlJTOUNSeXhyUWtGQmIwSklMRkZCUVZFc09FSkJRelZDU1N4dlFrRkJjMEpLTEZGQlFWRXNlVUpCUXpsQ1N5eHRRa0ZCY1VKTUxGRkJRVkVzSzBKQlF6ZENUU3hyUWtGQmIwSk9MRkZCUVZFc09FSkJRelZDVHl4UlFVRlZVQ3hSUVVGUkxHOUNRVVZzUWxFc2FVSkJRVzFDUml4clFrRkJhMElzVTBGQlZVY3NSMEZEYWtRc1QwRkJUMG9zYlVKQlFXMUNTU3hMUVVkNFFrTXNlVUpCUVRCQ0xFVkJRekZDUXl4dFFrRkJjVUlzVjBGRGVrSXNSMEZCU1ZZc2NVSkJRWEZDVnl4VlFVRlhMRU5CUTJ4RExFbEJRVWxETEZWQlFWbERMRk5CUVZORExHTkJRV01zVDBGQlQwTXNUVUZET1VNc1NVRkZSVWdzVlVGQlZVa3NTMEZCVHl4SFFVTnFRaXhOUVVGUFF5eEhRVU5RVWl4NVFrRkJNRUlzVDBGSGIwSlRMRWxCUVRWRFRDeFRRVUZUVFN4blFrRkJaMEpLTEUxQlFVMUxMRmRCUTJwRFZpeHRRa0ZCY1VJc1kwRkpla0lzUjBGQk5rSXNaVUZCZWtKWExGRkJRVkZETEVsQlFVbERMRk5CUldRc1NVRkJTVU1zTkVKQlFUaENMSGxDUVVjNVFrTXNhME5CUVc5RExGRkJSWEJEUXl4cFFrRkJiVUlzUjBGRGJrSkRMR3RDUVVGdlFpeEhRVU53UWtNc2JVSkJRVzlDTEVWQlJYQkNReXgzUWtGQk1FSXNVMEZCVlVNc1JVRkJUVU1zUjBGRGVFTk1MR2xDUVVGcFFrMHNaVUZCWlVZc1NVRkJVMG9zYVVKQlFXbENTU3hMUVVrNVJFb3NhVUpCUVdsQ1NTeEpRVUZSTEVWQlEwRXNaVUZCZWtKVUxGRkJRVkZETEVsQlFVbERMRlZCUVRSQ2FrSXNVMEZCVVN4RlFVRlBMRzlFUVVGeFJIZENMRVZCUVUwMVFpeHJRa0ZCYTBJMFFpeEhRVUZQUnl4dFFrRkJiVUpHTEUxQlJ6VktSeXg1UWtGQk1rSXNVMEZCVlVvc1JVRkJUVU1zUjBGRGVrTk1MR2xDUVVGcFFrMHNaVUZCWlVZc1NVRkJVMG9zYVVKQlFXbENTU3hMUVVrNVJFb3NhVUpCUVdsQ1NTeEpRVUZSTEVWQlEwRXNaVUZCZWtKVUxGRkJRVkZETEVsQlFVbERMRlZCUVRSQ2FrSXNVMEZCVVN4RlFVRlBMRzlGUVVGeFJYZENMRVZCUVUxQkxFVkJRVXRMTEU5QlFVOHNSMEZCUjBNc1kwRkJaMEpPTEVWQlFVdFBMRTFCUVUwc1IwRkJTVW9zYlVKQlFXMUNSaXhOUVVkcVRVOHNORUpCUVRoQ0xGTkJRVlZTTEVWQlFVMVRMRVZCUVU5U0xFZEJRMjVFU2l4clFrRkJhMEpMTEdWQlFXVlBMRWxCUVZWYUxHdENRVUZyUWxrc1MwRkpha1ZhTEd0Q1FVRnJRbGtzU1VGQlV5eEZRVU5HTEdWQlFYcENiRUlzVVVGQlVVTXNTVUZCU1VNc1ZVRkJORUpxUWl4VFFVRlJMRVZCUVU4c1owWkJRWEZHTWtJc2JVSkJRVzFDUml4SFFVRlJSQ3hGUVVGTlV5eEZRVUZOUXl4UlFVRlJaaXhyUTBGQmJVTXNUMEZITlU1blFpeHZRa0ZCYzBJc1UwRkJWVmdzUlVGQlRWTXNSVUZCVDFJc1IwRkRNME5JTEc5Q1FVbEtRU3h0UWtGQmIwSXNSVUZEU3l4bFFVRjZRbEFzVVVGQlVVTXNTVUZCU1VNc1ZVRkJORUpxUWl4VFFVRlJMRVZCUVU4c0swUkJRV2RGZDBJc1JVRkJUVWNzYlVKQlFXMUNSaXhOUVVjNVNVVXNiVUpCUVhGQ0xGTkJRVlZHTEVkQlEycERMRWRCUVVsQkxFVkJRVThzUTBGRFZDeEpRVUZKUkN4RlFVRlBReXhGUVVGTlZ5eFZRVU5xUWl4SFFVRkpXaXhGUVVOR0xFMUJRVThzWjBOQlFXdERRU3hGUVVGUExFdEJSM0JFTEUxQlFVOHNTVUZSVEdFc1pVRkJhVUlzVTBGQlZXSXNSVUZCVFZNc1JVRkJUMHNzUjBGRE1VTXNTVUZCU1dJc1JVRkRRV0VzU1VGRFJtSXNSVUZCVVdFc1JVRkJWVU1zWjBKQlFXZENReXhSUVVWb1EyaENMRVZCUVV0cFFpeFJRVUZSTEUxQlFWRXNSVUZEZGtKc1FpeDNRa0ZCZDBKRExFVkJRVTFETEVkQlEzSkNVQ3cwUWtGQk5FSjNRaXhMUVVGTGJFSXNSMEZETVVOSkxIbENRVUY1UWtvc1JVRkJUVU1zUjBGRGRFSk9MR3REUVVGclEzVkNMRXRCUVV0VUxFbEJRMmhFUkN3MFFrRkJORUpTTEVWQlFVMVRMRVZCUVU5U0xFZEJSM1JDTEdsQ1FVRldVU3hIUVVGelFsVXNUVUZCVFZZc1NVRkRja05GTEc5Q1FVRnZRbGdzUlVGQlRWTXNSVUZCVDFJc1NVRlJka01zU1VGQlNXMUNMSE5DUVVGM1FpeERRV014UWtNc2MwSkJRWFZDTEZOQlFWVkRMRVZCUVZGU0xFZEJRM1pETEVsQlFVbFRMRVZCUVdFc1IwRkRha0lzU1VGQlN5eEpRVUZKTjBNc1MwRkJZVFJETEVWQlEzQkNMRWRCUVV0QkxFVkJRVTl3UWl4bFFVRmxlRUlzUjBGQk0wSXNRMEZIUVN4SlFVRkpPRU1zUlVGQkswTXNTVUZCTlVJNVF5eEZRVUZWZFVNc1VVRkJVU3hOUVVOeVExRXNSVUZCWVVnc1JVRkJUelZETEVkQlEwc3NaVUZCZWtKaExGRkJRVkZETEVsQlFVbERMRmRCUTFRclFpeEhRVU5JV0N4bFFVRmxia01zUlVGQlZ5dERMRVZCUVZsWUxFbEJSM2hDTEUxQlFXUlhMRWxCUTBaR0xFZEJRV001UXl4cFFrRkJhVUpETEVkQlFXRXNTVUZETlVNMlF5eEhRVUZqYkVRc2IwSkJRVzlDU3l4RlFVRlhLME1zUlVGQldWZ3NSVUZCVjFVc1IwRkJiMElzUzBGSE5VWXNUMEZCVDBRc1IwRkJZeXhOUVZkMlFrY3NhMEpCUVcxQ0xGTkJRVlZETEVWQlFVMU1MRVZCUVZGU0xFZEJRMW9zWlVGQmVrSjJRaXhSUVVGUlF5eEpRVUZKUXl4VlFVTmtkRUlzY1VKQlFYRkNlVVFzVlVGQlZVTXNaMEpCUVdkQ0xFTkJRemREUXl4WFFVRlphRUlzUlVGQlZXbENMRk5CUTNSQ1F5eExRVUZOTEdkQ1FVTk9ReXhSUVVGVFdDeEpRVWxpTEVsQlFVbHlReXhGUVVGUk1FTXNSVUZCU3pGRExFMUJRMnBDTEVsQlFVc3NTVUZCU1ZBc1MwRkJZVFJETEVWQlEzQkNMRWRCUVV0QkxFVkJRVTl3UWl4bFFVRmxlRUlzUjBGQk0wSXNRMEZIUVN4SlFVRkpPRU1zUlVGQkswTXNTVUZCTlVJNVF5eEZRVUZWZFVNc1VVRkJVU3hOUVVOYUxHVkJRWHBDTVVJc1VVRkJVVU1zU1VGQlNVTXNWMEZEVkN0Q0xFZEJRMGhZTEdWQlFXVnVReXhGUVVGWE5FTXNSVUZCVHpWRExFZEJRVmx2UXl4SlFVZHFSQ3hKUVVGSlZ5eEZRVUZoY0VRc2IwSkJRVzlDU3l4RlFVRlhORU1zUlVGQlR6VkRMRWRCUVZsdlF5eEZRVUZYVlN4SFFVazVSU3hIUVVoclFpeFZRVUZrT1VNc1IwRkJkVU1zWVVGQlpFRXNTVUZETTBKQkxFVkJRVmxGTEc5Q1FVVldORU1zUlVGRFJuWkRMRVZCUVUxcFJDeFpRVUZaZUVRc1JVRkJWeXRETEZGQlEzaENMRWRCUVVsQkxFVkJRMVI0UXl4RlFVRk5VQ3hIUVVGaEswTXNUVUZEWkN4RFFVTk1MRWxCUVVsVkxFVkJRVmw0UkN4NVFrRkJNa0pZTEZsQlFWbHZSU3cwUWtGQk5FSXhSQ3hIUVVOdVJpeEhRVUZKZVVRc1JVRkhSaXhKUVVGTExFbEJRVWxGTEV0QlFYVkNSaXhGUVVNNVFteEVMRVZCUVUxdlJDeEhRVUYxUWl4UlFVY3ZRbkJFTEVWQlFVMVFMRWRCUVdFc1QwRlBOMEkwUkN4UFFVRlBReXhSUVVGVmJrSWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F0Wkc5dEwyeHBZaTlEVTFOUWNtOXdaWEowZVU5d1pYSmhkR2x2Ym5NdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9wcm9kSW52YXJpYW50PXJlcXVpcmUoXCIuL3JlYWN0UHJvZEludmFyaWFudFwiKTtmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2sodCxsKXtpZighKHQgaW5zdGFuY2VvZiBsKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfXZhciBQb29sZWRDbGFzcz1yZXF1aXJlKFwiLi9Qb29sZWRDbGFzc1wiKSxpbnZhcmlhbnQ9cmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKSxDYWxsYmFja1F1ZXVlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gQ2FsbGJhY2tRdWV1ZSh0KXtfY2xhc3NDYWxsQ2hlY2sodGhpcyxDYWxsYmFja1F1ZXVlKSx0aGlzLl9jYWxsYmFja3M9bnVsbCx0aGlzLl9jb250ZXh0cz1udWxsLHRoaXMuX2FyZz10fXJldHVybiBDYWxsYmFja1F1ZXVlLnByb3RvdHlwZS5lbnF1ZXVlPWZ1bmN0aW9uIGVucXVldWUodCxsKXt0aGlzLl9jYWxsYmFja3M9dGhpcy5fY2FsbGJhY2tzfHxbXSx0aGlzLl9jYWxsYmFja3MucHVzaCh0KSx0aGlzLl9jb250ZXh0cz10aGlzLl9jb250ZXh0c3x8W10sdGhpcy5fY29udGV4dHMucHVzaChsKX0sQ2FsbGJhY2tRdWV1ZS5wcm90b3R5cGUubm90aWZ5QWxsPWZ1bmN0aW9uIG5vdGlmeUFsbCgpe3ZhciB0PXRoaXMuX2NhbGxiYWNrcyxsPXRoaXMuX2NvbnRleHRzLGU9dGhpcy5fYXJnO2lmKHQmJmwpe3QubGVuZ3RoIT09bC5sZW5ndGgmJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcIk1pc21hdGNoZWQgbGlzdCBvZiBjb250ZXh0cyBpbiBjYWxsYmFjayBxdWV1ZVwiKTpfcHJvZEludmFyaWFudChcIjI0XCIpKSx0aGlzLl9jYWxsYmFja3M9bnVsbCx0aGlzLl9jb250ZXh0cz1udWxsO2Zvcih2YXIgYT0wO2E8dC5sZW5ndGg7YSsrKXRbYV0uY2FsbChsW2FdLGUpO3QubGVuZ3RoPTAsbC5sZW5ndGg9MH19LENhbGxiYWNrUXVldWUucHJvdG90eXBlLmNoZWNrcG9pbnQ9ZnVuY3Rpb24gY2hlY2twb2ludCgpe3JldHVybiB0aGlzLl9jYWxsYmFja3M/dGhpcy5fY2FsbGJhY2tzLmxlbmd0aDowfSxDYWxsYmFja1F1ZXVlLnByb3RvdHlwZS5yb2xsYmFjaz1mdW5jdGlvbiByb2xsYmFjayh0KXt0aGlzLl9jYWxsYmFja3MmJnRoaXMuX2NvbnRleHRzJiYodGhpcy5fY2FsbGJhY2tzLmxlbmd0aD10LHRoaXMuX2NvbnRleHRzLmxlbmd0aD10KX0sQ2FsbGJhY2tRdWV1ZS5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24gcmVzZXQoKXt0aGlzLl9jYWxsYmFja3M9bnVsbCx0aGlzLl9jb250ZXh0cz1udWxsfSxDYWxsYmFja1F1ZXVlLnByb3RvdHlwZS5kZXN0cnVjdG9yPWZ1bmN0aW9uIGRlc3RydWN0b3IoKXt0aGlzLnJlc2V0KCl9LENhbGxiYWNrUXVldWV9KCk7bW9kdWxlLmV4cG9ydHM9UG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKENhbGxiYWNrUXVldWUpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtOaGJHeGlZV05yVVhWbGRXVXVhbk1pWFN3aWJtRnRaWE1pT2xzaVgzQnliMlJKYm5aaGNtbGhiblFpTENKeVpYRjFhWEpsSWl3aVgyTnNZWE56UTJGc2JFTm9aV05ySWl3aWFXNXpkR0Z1WTJVaUxDSkRiMjV6ZEhKMVkzUnZjaUlzSWxSNWNHVkZjbkp2Y2lJc0lsQnZiMnhsWkVOc1lYTnpJaXdpYVc1MllYSnBZVzUwSWl3aVEyRnNiR0poWTJ0UmRXVjFaU0lzSW1GeVp5SXNJblJvYVhNaUxDSmZZMkZzYkdKaFkydHpJaXdpWDJOdmJuUmxlSFJ6SWl3aVgyRnlaeUlzSW5CeWIzUnZkSGx3WlNJc0ltVnVjWFZsZFdVaUxDSmpZV3hzWW1GamF5SXNJbU52Ym5SbGVIUWlMQ0p3ZFhOb0lpd2libTkwYVdaNVFXeHNJaXdpWTJGc2JHSmhZMnR6SWl3aVkyOXVkR1Y0ZEhNaUxDSnNaVzVuZEdnaUxDSndjbTlqWlhOeklpd2laVzUySWl3aVRrOUVSVjlGVGxZaUxDSnBJaXdpWTJGc2JDSXNJbU5vWldOcmNHOXBiblFpTENKeWIyeHNZbUZqYXlJc0lteGxiaUlzSW5KbGMyVjBJaXdpWkdWemRISjFZM1J2Y2lJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaUxDSmhaR1JRYjI5c2FXNW5WRzhpWFN3aWJXRndjR2x1WjNNaU9pSkJRVk5CTEdGQlJVRXNTVUZCU1VFc1pVRkJhVUpETEZGQlFWRXNkMEpCUlRkQ0xGTkJRVk5ETEdkQ1FVRm5Ra01zUlVGQlZVTXNSMEZCWlN4TFFVRk5SQ3hoUVVGdlFrTXNSMEZCWjBJc1RVRkJUU3hKUVVGSlF5eFZRVUZWTEhGRFFVVm9TQ3hKUVVGSlF5eFpRVUZqVEN4UlFVRlJMR2xDUVVWMFFrMHNWVUZCV1U0c1VVRkJVU3h6UWtGamNFSlBMR05CUVdkQ0xGZEJRMnhDTEZOQlFWTkJMR05CUVdORExFZEJRM0pDVUN4blFrRkJaMEpSTEV0QlFVMUdMR1ZCUlhSQ1JTeExRVUZMUXl4WFFVRmhMRXRCUTJ4Q1JDeExRVUZMUlN4VlFVRlpMRXRCUTJwQ1JpeExRVUZMUnl4TFFVRlBTaXhGUVRKRlpDeFBRUzlFUVVRc1kwRkJZMDBzVlVGQlZVTXNVVUZCVlN4VFFVRlRRU3hSUVVGUlF5eEZRVUZWUXl4SFFVTXpSRkFzUzBGQlMwTXNWMEZCWVVRc1MwRkJTME1zV1VGQll5eEhRVU55UTBRc1MwRkJTME1zVjBGQlYwOHNTMEZCUzBZc1IwRkRja0pPTEV0QlFVdEZMRlZCUVZsR0xFdEJRVXRGTEZkQlFXRXNSMEZEYmtOR0xFdEJRVXRGTEZWQlFWVk5MRXRCUVV0RUxFbEJWM1JDVkN4alFVRmpUU3hWUVVGVlN5eFZRVUZaTEZOQlFWTkJMRmxCUXpORExFbEJRVWxETEVWQlFWbFdMRXRCUVV0RExGZEJRMnBDVlN4RlFVRlhXQ3hMUVVGTFJTeFZRVU5vUWtnc1JVRkJUVU1zUzBGQlMwY3NTMEZEWml4SFFVRkpUeXhIUVVGaFF5eEZRVUZWTEVOQlEzWkNSQ3hGUVVGVlJTeFRRVUZYUkN4RlFVRlRReXhUUVVGdFF5eGxRVUY2UWtNc1VVRkJVVU1zU1VGQlNVTXNVMEZCTkVKc1FpeFhRVUZWTEVWQlFVOHNhVVJCUVcxRVVDeGxRVUZsTEU5QlEzSkxWU3hMUVVGTFF5eFhRVUZoTEV0QlEyeENSQ3hMUVVGTFJTeFZRVUZaTEV0QlEycENMRWxCUVVzc1NVRkJTV01zUlVGQlNTeEZRVUZIUVN4RlFVRkpUaXhGUVVGVlJTeFBRVUZSU1N4SlFVTndRMDRzUlVGQlZVMHNSMEZCUjBNc1MwRkJTMDRzUlVGQlUwc3NSMEZCU1dwQ0xFZEJSV3BEVnl4RlFVRlZSU3hQUVVGVExFVkJRMjVDUkN4RlFVRlRReXhQUVVGVExFbEJTWFJDWkN4alFVRmpUU3hWUVVGVll5eFhRVUZoTEZOQlFWTkJMR0ZCUXpWRExFOUJRVTlzUWl4TFFVRkxReXhYUVVGaFJDeExRVUZMUXl4WFFVRlhWeXhQUVVGVExFZEJSM0JFWkN4alFVRmpUU3hWUVVGVlpTeFRRVUZYTEZOQlFWTkJMRk5CUVZORExFZEJReTlEY0VJc1MwRkJTME1zV1VGQlkwUXNTMEZCUzBVc1dVRkRNVUpHTEV0QlFVdERMRmRCUVZkWExFOUJRVk5STEVWQlEzcENjRUlzUzBGQlMwVXNWVUZCVlZVc1QwRkJVMUVzU1VGWE5VSjBRaXhqUVVGalRTeFZRVUZWYVVJc1RVRkJVU3hUUVVGVFFTeFJRVU4yUTNKQ0xFdEJRVXRETEZkQlFXRXNTMEZEYkVKRUxFdEJRVXRGTEZWQlFWa3NUVUZSYmtKS0xHTkJRV05OTEZWQlFWVnJRaXhYUVVGaExGTkJRVk5CTEdGQlF6VkRkRUlzUzBGQlMzRkNMRk5CUjBGMlFpeGpRV3BHVnl4SFFXOUdjRUo1UWl4UFFVRlBReXhSUVVGVk5VSXNXVUZCV1RaQ0xHRkJRV0V6UWlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDMWtiMjB2YkdsaUwwTmhiR3hpWVdOclVYVmxkV1V1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgRXZlbnRQbHVnaW5IdWI9cmVxdWlyZShcIi4vRXZlbnRQbHVnaW5IdWJcIiksRXZlbnRQcm9wYWdhdG9ycz1yZXF1aXJlKFwiLi9FdmVudFByb3BhZ2F0b3JzXCIpLEV4ZWN1dGlvbkVudmlyb25tZW50PXJlcXVpcmUoXCJmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKSxSZWFjdERPTUNvbXBvbmVudFRyZWU9cmVxdWlyZShcIi4vUmVhY3RET01Db21wb25lbnRUcmVlXCIpLFJlYWN0VXBkYXRlcz1yZXF1aXJlKFwiLi9SZWFjdFVwZGF0ZXNcIiksU3ludGhldGljRXZlbnQ9cmVxdWlyZShcIi4vU3ludGhldGljRXZlbnRcIiksaW5wdXRWYWx1ZVRyYWNraW5nPXJlcXVpcmUoXCIuL2lucHV0VmFsdWVUcmFja2luZ1wiKSxnZXRFdmVudFRhcmdldD1yZXF1aXJlKFwiLi9nZXRFdmVudFRhcmdldFwiKSxpc0V2ZW50U3VwcG9ydGVkPXJlcXVpcmUoXCIuL2lzRXZlbnRTdXBwb3J0ZWRcIiksaXNUZXh0SW5wdXRFbGVtZW50PXJlcXVpcmUoXCIuL2lzVGV4dElucHV0RWxlbWVudFwiKSxldmVudFR5cGVzPXtjaGFuZ2U6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25DaGFuZ2VcIixjYXB0dXJlZDpcIm9uQ2hhbmdlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1widG9wQmx1clwiLFwidG9wQ2hhbmdlXCIsXCJ0b3BDbGlja1wiLFwidG9wRm9jdXNcIixcInRvcElucHV0XCIsXCJ0b3BLZXlEb3duXCIsXCJ0b3BLZXlVcFwiLFwidG9wU2VsZWN0aW9uQ2hhbmdlXCJdfX07ZnVuY3Rpb24gY3JlYXRlQW5kQWNjdW11bGF0ZUNoYW5nZUV2ZW50KGUsdCxuKXt2YXIgYT1TeW50aGV0aWNFdmVudC5nZXRQb29sZWQoZXZlbnRUeXBlcy5jaGFuZ2UsZSx0LG4pO3JldHVybiBhLnR5cGU9XCJjaGFuZ2VcIixFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoYSksYX12YXIgYWN0aXZlRWxlbWVudD1udWxsLGFjdGl2ZUVsZW1lbnRJbnN0PW51bGw7ZnVuY3Rpb24gc2hvdWxkVXNlQ2hhbmdlRXZlbnQoZSl7dmFyIHQ9ZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwic2VsZWN0XCI9PT10fHxcImlucHV0XCI9PT10JiZcImZpbGVcIj09PWUudHlwZX12YXIgZG9lc0NoYW5nZUV2ZW50QnViYmxlPSExO2Z1bmN0aW9uIG1hbnVhbERpc3BhdGNoQ2hhbmdlRXZlbnQoZSl7dmFyIHQ9Y3JlYXRlQW5kQWNjdW11bGF0ZUNoYW5nZUV2ZW50KGFjdGl2ZUVsZW1lbnRJbnN0LGUsZ2V0RXZlbnRUYXJnZXQoZSkpO1JlYWN0VXBkYXRlcy5iYXRjaGVkVXBkYXRlcyhydW5FdmVudEluQmF0Y2gsdCl9ZnVuY3Rpb24gcnVuRXZlbnRJbkJhdGNoKGUpe0V2ZW50UGx1Z2luSHViLmVucXVldWVFdmVudHMoZSksRXZlbnRQbHVnaW5IdWIucHJvY2Vzc0V2ZW50UXVldWUoITEpfWZ1bmN0aW9uIHN0YXJ0V2F0Y2hpbmdGb3JDaGFuZ2VFdmVudElFOChlLHQpe2FjdGl2ZUVsZW1lbnRJbnN0PXQsKGFjdGl2ZUVsZW1lbnQ9ZSkuYXR0YWNoRXZlbnQoXCJvbmNoYW5nZVwiLG1hbnVhbERpc3BhdGNoQ2hhbmdlRXZlbnQpfWZ1bmN0aW9uIHN0b3BXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4KCl7YWN0aXZlRWxlbWVudCYmKGFjdGl2ZUVsZW1lbnQuZGV0YWNoRXZlbnQoXCJvbmNoYW5nZVwiLG1hbnVhbERpc3BhdGNoQ2hhbmdlRXZlbnQpLGFjdGl2ZUVsZW1lbnQ9bnVsbCxhY3RpdmVFbGVtZW50SW5zdD1udWxsKX1mdW5jdGlvbiBnZXRJbnN0SWZWYWx1ZUNoYW5nZWQoZSx0KXt2YXIgbj1pbnB1dFZhbHVlVHJhY2tpbmcudXBkYXRlVmFsdWVJZkNoYW5nZWQoZSksYT0hMD09PXQuc2ltdWxhdGVkJiZDaGFuZ2VFdmVudFBsdWdpbi5fYWxsb3dTaW11bGF0ZWRQYXNzVGhyb3VnaDtpZihufHxhKXJldHVybiBlfWZ1bmN0aW9uIGdldFRhcmdldEluc3RGb3JDaGFuZ2VFdmVudChlLHQpe2lmKFwidG9wQ2hhbmdlXCI9PT1lKXJldHVybiB0fWZ1bmN0aW9uIGhhbmRsZUV2ZW50c0ZvckNoYW5nZUV2ZW50SUU4KGUsdCxuKXtcInRvcEZvY3VzXCI9PT1lPyhzdG9wV2F0Y2hpbmdGb3JDaGFuZ2VFdmVudElFOCgpLHN0YXJ0V2F0Y2hpbmdGb3JDaGFuZ2VFdmVudElFOCh0LG4pKTpcInRvcEJsdXJcIj09PWUmJnN0b3BXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4KCl9RXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NJiYoZG9lc0NoYW5nZUV2ZW50QnViYmxlPWlzRXZlbnRTdXBwb3J0ZWQoXCJjaGFuZ2VcIikmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHxkb2N1bWVudC5kb2N1bWVudE1vZGU+OCkpO3ZhciBpc0lucHV0RXZlbnRTdXBwb3J0ZWQ9ITE7ZnVuY3Rpb24gc3RhcnRXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKGUsdCl7YWN0aXZlRWxlbWVudEluc3Q9dCwoYWN0aXZlRWxlbWVudD1lKS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixoYW5kbGVQcm9wZXJ0eUNoYW5nZSl9ZnVuY3Rpb24gc3RvcFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UoKXthY3RpdmVFbGVtZW50JiYoYWN0aXZlRWxlbWVudC5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixoYW5kbGVQcm9wZXJ0eUNoYW5nZSksYWN0aXZlRWxlbWVudD1udWxsLGFjdGl2ZUVsZW1lbnRJbnN0PW51bGwpfWZ1bmN0aW9uIGhhbmRsZVByb3BlcnR5Q2hhbmdlKGUpe1widmFsdWVcIj09PWUucHJvcGVydHlOYW1lJiZnZXRJbnN0SWZWYWx1ZUNoYW5nZWQoYWN0aXZlRWxlbWVudEluc3QsZSkmJm1hbnVhbERpc3BhdGNoQ2hhbmdlRXZlbnQoZSl9ZnVuY3Rpb24gaGFuZGxlRXZlbnRzRm9ySW5wdXRFdmVudFBvbHlmaWxsKGUsdCxuKXtcInRvcEZvY3VzXCI9PT1lPyhzdG9wV2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSgpLHN0YXJ0V2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSh0LG4pKTpcInRvcEJsdXJcIj09PWUmJnN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCl9ZnVuY3Rpb24gZ2V0VGFyZ2V0SW5zdEZvcklucHV0RXZlbnRQb2x5ZmlsbChlLHQsbil7aWYoXCJ0b3BTZWxlY3Rpb25DaGFuZ2VcIj09PWV8fFwidG9wS2V5VXBcIj09PWV8fFwidG9wS2V5RG93blwiPT09ZSlyZXR1cm4gZ2V0SW5zdElmVmFsdWVDaGFuZ2VkKGFjdGl2ZUVsZW1lbnRJbnN0LG4pfWZ1bmN0aW9uIHNob3VsZFVzZUNsaWNrRXZlbnQoZSl7dmFyIHQ9ZS5ub2RlTmFtZTtyZXR1cm4gdCYmXCJpbnB1dFwiPT09dC50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09ZS50eXBlfHxcInJhZGlvXCI9PT1lLnR5cGUpfWZ1bmN0aW9uIGdldFRhcmdldEluc3RGb3JDbGlja0V2ZW50KGUsdCxuKXtpZihcInRvcENsaWNrXCI9PT1lKXJldHVybiBnZXRJbnN0SWZWYWx1ZUNoYW5nZWQodCxuKX1mdW5jdGlvbiBnZXRUYXJnZXRJbnN0Rm9ySW5wdXRPckNoYW5nZUV2ZW50KGUsdCxuKXtpZihcInRvcElucHV0XCI9PT1lfHxcInRvcENoYW5nZVwiPT09ZSlyZXR1cm4gZ2V0SW5zdElmVmFsdWVDaGFuZ2VkKHQsbil9ZnVuY3Rpb24gaGFuZGxlQ29udHJvbGxlZElucHV0Qmx1cihlLHQpe2lmKG51bGwhPWUpe3ZhciBuPWUuX3dyYXBwZXJTdGF0ZXx8dC5fd3JhcHBlclN0YXRlO2lmKG4mJm4uY29udHJvbGxlZCYmXCJudW1iZXJcIj09PXQudHlwZSl7dmFyIGE9XCJcIit0LnZhbHVlO3QuZ2V0QXR0cmlidXRlKFwidmFsdWVcIikhPT1hJiZ0LnNldEF0dHJpYnV0ZShcInZhbHVlXCIsYSl9fX1FeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00mJihpc0lucHV0RXZlbnRTdXBwb3J0ZWQ9aXNFdmVudFN1cHBvcnRlZChcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlPjkpKTt2YXIgQ2hhbmdlRXZlbnRQbHVnaW49e2V2ZW50VHlwZXM6ZXZlbnRUeXBlcyxfYWxsb3dTaW11bGF0ZWRQYXNzVGhyb3VnaDohMCxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOmlzSW5wdXRFdmVudFN1cHBvcnRlZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGUsdCxuLGEpe3ZhciBvLHUscj10P1JlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKHQpOndpbmRvdztpZihzaG91bGRVc2VDaGFuZ2VFdmVudChyKT9kb2VzQ2hhbmdlRXZlbnRCdWJibGU/bz1nZXRUYXJnZXRJbnN0Rm9yQ2hhbmdlRXZlbnQ6dT1oYW5kbGVFdmVudHNGb3JDaGFuZ2VFdmVudElFODppc1RleHRJbnB1dEVsZW1lbnQocik/aXNJbnB1dEV2ZW50U3VwcG9ydGVkP289Z2V0VGFyZ2V0SW5zdEZvcklucHV0T3JDaGFuZ2VFdmVudDoobz1nZXRUYXJnZXRJbnN0Rm9ySW5wdXRFdmVudFBvbHlmaWxsLHU9aGFuZGxlRXZlbnRzRm9ySW5wdXRFdmVudFBvbHlmaWxsKTpzaG91bGRVc2VDbGlja0V2ZW50KHIpJiYobz1nZXRUYXJnZXRJbnN0Rm9yQ2xpY2tFdmVudCksbyl7dmFyIGk9byhlLHQsbik7aWYoaSlyZXR1cm4gY3JlYXRlQW5kQWNjdW11bGF0ZUNoYW5nZUV2ZW50KGksbixhKX11JiZ1KGUscix0KSxcInRvcEJsdXJcIj09PWUmJmhhbmRsZUNvbnRyb2xsZWRJbnB1dEJsdXIodCxyKX19O21vZHVsZS5leHBvcnRzPUNoYW5nZUV2ZW50UGx1Z2luO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtOb1lXNW5aVVYyWlc1MFVHeDFaMmx1TG1weklsMHNJbTVoYldWeklqcGJJa1YyWlc1MFVHeDFaMmx1U0hWaUlpd2ljbVZ4ZFdseVpTSXNJa1YyWlc1MFVISnZjR0ZuWVhSdmNuTWlMQ0pGZUdWamRYUnBiMjVGYm5acGNtOXViV1Z1ZENJc0lsSmxZV04wUkU5TlEyOXRjRzl1Wlc1MFZISmxaU0lzSWxKbFlXTjBWWEJrWVhSbGN5SXNJbE41Ym5Sb1pYUnBZMFYyWlc1MElpd2lhVzV3ZFhSV1lXeDFaVlJ5WVdOcmFXNW5JaXdpWjJWMFJYWmxiblJVWVhKblpYUWlMQ0pwYzBWMlpXNTBVM1Z3Y0c5eWRHVmtJaXdpYVhOVVpYaDBTVzV3ZFhSRmJHVnRaVzUwSWl3aVpYWmxiblJVZVhCbGN5SXNJbU5vWVc1blpTSXNJbkJvWVhObFpGSmxaMmx6ZEhKaGRHbHZiazVoYldWeklpd2lZblZpWW14bFpDSXNJbU5oY0hSMWNtVmtJaXdpWkdWd1pXNWtaVzVqYVdWeklpd2lZM0psWVhSbFFXNWtRV05qZFcxMWJHRjBaVU5vWVc1blpVVjJaVzUwSWl3aWFXNXpkQ0lzSW01aGRHbDJaVVYyWlc1MElpd2lkR0Z5WjJWMElpd2laWFpsYm5RaUxDSm5aWFJRYjI5c1pXUWlMQ0owZVhCbElpd2lZV05qZFcxMWJHRjBaVlIzYjFCb1lYTmxSR2x6Y0dGMFkyaGxjeUlzSW1GamRHbDJaVVZzWlcxbGJuUWlMQ0poWTNScGRtVkZiR1Z0Wlc1MFNXNXpkQ0lzSW5Ob2IzVnNaRlZ6WlVOb1lXNW5aVVYyWlc1MElpd2laV3hsYlNJc0ltNXZaR1ZPWVcxbElpd2lkRzlNYjNkbGNrTmhjMlVpTENKa2IyVnpRMmhoYm1kbFJYWmxiblJDZFdKaWJHVWlMQ0p0WVc1MVlXeEVhWE53WVhSamFFTm9ZVzVuWlVWMlpXNTBJaXdpWW1GMFkyaGxaRlZ3WkdGMFpYTWlMQ0p5ZFc1RmRtVnVkRWx1UW1GMFkyZ2lMQ0psYm5GMVpYVmxSWFpsYm5Seklpd2ljSEp2WTJWemMwVjJaVzUwVVhWbGRXVWlMQ0p6ZEdGeWRGZGhkR05vYVc1blJtOXlRMmhoYm1kbFJYWmxiblJKUlRnaUxDSjBZWEpuWlhSSmJuTjBJaXdpWVhSMFlXTm9SWFpsYm5RaUxDSnpkRzl3VjJGMFkyaHBibWRHYjNKRGFHRnVaMlZGZG1WdWRFbEZPQ0lzSW1SbGRHRmphRVYyWlc1MElpd2laMlYwU1c1emRFbG1WbUZzZFdWRGFHRnVaMlZrSWl3aWRYQmtZWFJsWkNJc0luVndaR0YwWlZaaGJIVmxTV1pEYUdGdVoyVmtJaXdpYzJsdGRXeGhkR1ZrSWl3aVEyaGhibWRsUlhabGJuUlFiSFZuYVc0aUxDSmZZV3hzYjNkVGFXMTFiR0YwWldSUVlYTnpWR2h5YjNWbmFDSXNJbWRsZEZSaGNtZGxkRWx1YzNSR2IzSkRhR0Z1WjJWRmRtVnVkQ0lzSW5SdmNFeGxkbVZzVkhsd1pTSXNJbWhoYm1Sc1pVVjJaVzUwYzBadmNrTm9ZVzVuWlVWMlpXNTBTVVU0SWl3aVkyRnVWWE5sUkU5Tklpd2laRzlqZFcxbGJuUWlMQ0prYjJOMWJXVnVkRTF2WkdVaUxDSnBjMGx1Y0hWMFJYWmxiblJUZFhCd2IzSjBaV1FpTENKemRHRnlkRmRoZEdOb2FXNW5SbTl5Vm1Gc2RXVkRhR0Z1WjJVaUxDSm9ZVzVrYkdWUWNtOXdaWEowZVVOb1lXNW5aU0lzSW5OMGIzQlhZWFJqYUdsdVowWnZjbFpoYkhWbFEyaGhibWRsSWl3aWNISnZjR1Z5ZEhsT1lXMWxJaXdpYUdGdVpHeGxSWFpsYm5SelJtOXlTVzV3ZFhSRmRtVnVkRkJ2YkhsbWFXeHNJaXdpWjJWMFZHRnlaMlYwU1c1emRFWnZja2x1Y0hWMFJYWmxiblJRYjJ4NVptbHNiQ0lzSW5Ob2IzVnNaRlZ6WlVOc2FXTnJSWFpsYm5RaUxDSm5aWFJVWVhKblpYUkpibk4wUm05eVEyeHBZMnRGZG1WdWRDSXNJbWRsZEZSaGNtZGxkRWx1YzNSR2IzSkpibkIxZEU5eVEyaGhibWRsUlhabGJuUWlMQ0pvWVc1a2JHVkRiMjUwY205c2JHVmtTVzV3ZFhSQ2JIVnlJaXdpYm05a1pTSXNJbk4wWVhSbElpd2lYM2R5WVhCd1pYSlRkR0YwWlNJc0ltTnZiblJ5YjJ4c1pXUWlMQ0oyWVd4MVpTSXNJbWRsZEVGMGRISnBZblYwWlNJc0luTmxkRUYwZEhKcFluVjBaU0lzSWw5cGMwbHVjSFYwUlhabGJuUlRkWEJ3YjNKMFpXUWlMQ0psZUhSeVlXTjBSWFpsYm5Seklpd2libUYwYVhabFJYWmxiblJVWVhKblpYUWlMQ0puWlhSVVlYSm5aWFJKYm5OMFJuVnVZeUlzSW1oaGJtUnNaVVYyWlc1MFJuVnVZeUlzSW5SaGNtZGxkRTV2WkdVaUxDSm5aWFJPYjJSbFJuSnZiVWx1YzNSaGJtTmxJaXdpZDJsdVpHOTNJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJVVUVzWVVGRlFTeEpRVUZKUVN4bFFVRnBRa01zVVVGQlVTeHZRa0ZEZWtKRExHbENRVUZ0UWtRc1VVRkJVU3h6UWtGRE0wSkZMSEZDUVVGMVFrWXNVVUZCVVN4cFEwRkRMMEpITEhOQ1FVRjNRa2dzVVVGQlVTd3lRa0ZEYUVOSkxHRkJRV1ZLTEZGQlFWRXNhMEpCUTNaQ1N5eGxRVUZwUWt3c1VVRkJVU3h2UWtGRmVrSk5MRzFDUVVGeFFrNHNVVUZCVVN4M1FrRkROMEpQTEdWQlFXbENVQ3hSUVVGUkxHOUNRVU42UWxFc2FVSkJRVzFDVWl4UlFVRlJMSE5DUVVNelFsTXNiVUpCUVhGQ1ZDeFJRVUZSTEhkQ1FVVTNRbFVzVjBGQllTeERRVU5tUXl4UFFVRlJMRU5CUTA1RExIZENRVUY1UWl4RFFVTjJRa01zVVVGQlV5eFhRVU5VUXl4VFFVRlZMRzFDUVVWYVF5eGhRVUZqTEVOQlFVTXNWVUZCVnl4WlFVRmhMRmRCUVZrc1YwRkJXU3hYUVVGWkxHRkJRV01zVjBGQldTeDNRa0ZKZWtjc1UwRkJVME1zSzBKQlFTdENReXhGUVVGTlF5eEZRVUZoUXl4SFFVTjZSQ3hKUVVGSlF5eEZRVUZSWml4bFFVRmxaMElzVlVGQlZWZ3NWMEZCVjBNc1QwRkJVVTBzUlVGQlRVTXNSVUZCWVVNc1IwRkhNMFVzVDBGR1FVTXNSVUZCVFVVc1MwRkJUeXhUUVVOaWNrSXNhVUpCUVdsQ2MwSXNOa0pCUVRaQ1NDeEhRVU4yUTBFc1JVRkxWQ3hKUVVGSlNTeGpRVUZuUWl4TFFVTm9Ra01zYTBKQlFXOUNMRXRCUzNoQ0xGTkJRVk5ETEhGQ1FVRnhRa01zUjBGRE5VSXNTVUZCU1VNc1JVRkJWMFFzUlVGQlMwTXNWVUZCV1VRc1JVRkJTME1zVTBGQlUwTXNZMEZET1VNc1RVRkJiMElzVjBGQllrUXNSMEZCYzBNc1ZVRkJZa0VzUjBGQmMwTXNVMEZCWkVRc1JVRkJTMHdzUzBGSEwwUXNTVUZCU1ZFc2RVSkJRWGRDTEVWQlRUVkNMRk5CUVZORExEQkNRVUV3UW1Jc1IwRkRha01zU1VGQlNVVXNSVUZCVVVvc0swSkJRU3RDVXl4clFrRkJiVUpRTEVWQlFXRllMR1ZCUVdWWExFbEJZVEZHWkN4aFFVRmhORUlzWlVGQlpVTXNaMEpCUVdsQ1lpeEhRVWN2UXl4VFFVRlRZU3huUWtGQlowSmlMRWRCUTNaQ2NrSXNaVUZCWlcxRExHTkJRV05rTEVkQlF6ZENja0lzWlVGQlpXOURMRzFDUVVGclFpeEhRVWR1UXl4VFFVRlRReXdyUWtGQkswSnFRaXhGUVVGUmEwSXNSMEZGT1VOYUxHdENRVUZ2UWxrc1IwRkVjRUppTEdOQlFXZENUQ3hIUVVWR2JVSXNXVUZCV1N4WFFVRlpVQ3d5UWtGSGVFTXNVMEZCVTFFc1owTkJRMFptTEdkQ1FVZE1RU3hqUVVGalowSXNXVUZCV1N4WFFVRlpWQ3d5UWtGRGRFTlFMR05CUVdkQ0xFdEJRMmhDUXl4clFrRkJiMElzVFVGSGRFSXNVMEZCVTJkQ0xITkNRVUZ6UWtvc1JVRkJXVzVDTEVkQlEzcERMRWxCUVVsM1FpeEZRVUZWY0VNc2JVSkJRVzFDY1VNc2NVSkJRWEZDVGl4SFFVTnNSRThzUjBGQmMwTXNTVUZCTVVJeFFpeEZRVUZaTUVJc1YwRkJjMEpETEd0Q1FVRnJRa01zTWtKQlJYQkZMRWRCUVVsS0xFZEJRVmRGTEVWQlEySXNUMEZCVDFBc1JVRkpXQ3hUUVVGVFZTdzBRa0ZCTkVKRExFVkJRV05ZTEVkQlEycEVMRWRCUVhGQ0xHTkJRV3BDVnl4RlFVTkdMRTlCUVU5WUxFVkJTVmdzVTBGQlUxa3NPRUpCUVRoQ1JDeEZRVUZqTjBJc1JVRkJVV3RDTEVkQlEzUkRMR0ZCUVdwQ1Z5eEhRVWRHVkN4blEwRkRRVWdzSzBKQlFTdENha0lzUlVGQlVXdENMRWxCUTJJc1dVRkJha0pYTEVkQlExUlVMR2REUVdoRlFYSkRMSEZDUVVGeFFtZEVMRmxCUlhaQ2NFSXNjMEpCUVhkQ2RFSXNhVUpCUVdsQ0xHRkJRV1V5UXl4VFFVRlRReXhqUVVGblFrUXNVMEZCVTBNc1lVRkJaU3hKUVhGRk0wY3NTVUZCU1VNc2RVSkJRWGRDTEVWQllUVkNMRk5CUVZORExEUkNRVUUwUW01RExFVkJRVkZyUWl4SFFVVXpRMW9zYTBKQlFXOUNXU3hIUVVSd1FtSXNZMEZCWjBKTUxFZEJSVVp0UWl4WlFVRlpMRzFDUVVGdlFtbENMSE5DUVU5b1JDeFRRVUZUUXl3MlFrRkRSbWhETEdkQ1FVZE1RU3hqUVVGalowSXNXVUZCV1N4dFFrRkJiMEpsTEhOQ1FVVTVReTlDTEdOQlFXZENMRXRCUTJoQ1F5eHJRa0ZCYjBJc1RVRlBkRUlzVTBGQlV6aENMSEZDUVVGeFFuSkRMRWRCUTBzc1ZVRkJOMEpCTEVWQlFWbDFReXhqUVVkYWFFSXNjMEpCUVhOQ2FFSXNhMEpCUVcxQ1VDeEpRVU16UTJFc01FSkJRVEJDWWl4SFFVazVRaXhUUVVGVGQwTXNhME5CUVd0RFZpeEZRVUZqTjBJc1JVRkJVV3RDTEVkQlF6RkRMR0ZCUVdwQ1Z5eEhRV05HVVN3MlFrRkRRVVlzTkVKQlFUUkNia01zUlVGQlVXdENMRWxCUTFZc1dVRkJha0pYTEVkQlExUlJMRFpDUVV0S0xGTkJRVk5ITEcxRFFVRnRRMWdzUlVGQlkxZ3NSVUZCV1c1Q0xFZEJRM0JGTEVkQlFYRkNMSFZDUVVGcVFqaENMRWRCUVRCRUxHRkJRV3BDUVN4SFFVRm5SQ3hsUVVGcVFrRXNSVUZYTVVVc1QwRkJUMUFzYzBKQlFYTkNhRUlzYTBKQlFXMUNVQ3hIUVU5d1JDeFRRVUZUTUVNc2IwSkJRVzlDYWtNc1IwRkpNMElzU1VGQlNVTXNSVUZCVjBRc1JVRkJTME1zVTBGRGNFSXNUMEZCVDBFc1IwRkJkVU1zVlVGQk0wSkJMRVZCUVZORExHZENRVUUwUXl4aFFVRmtSaXhGUVVGTFRDeE5RVUZ4UXl4VlFVRmtTeXhGUVVGTFRDeE5RVWMzUml4VFFVRlRkVU1zTWtKQlFUSkNZaXhGUVVGaldDeEZRVUZaYmtJc1IwRkROVVFzUjBGQmNVSXNZVUZCYWtJNFFpeEZRVU5HTEU5QlFVOVFMSE5DUVVGelFrb3NSVUZCV1c1Q0xFZEJTVGRETEZOQlFWTTBReXh0UTBGQmJVTmtMRVZCUVdOWUxFVkJRVmx1UWl4SFFVTndSU3hIUVVGeFFpeGhRVUZxUWpoQ0xFZEJRV2RFTEdOQlFXcENRU3hGUVVOcVF5eFBRVUZQVUN4elFrRkJjMEpLTEVWQlFWbHVRaXhIUVVrM1F5eFRRVUZUTmtNc01FSkJRVEJDT1VNc1JVRkJUU3RETEVkQlJYWkRMRWRCUVZrc1RVRkJVaTlETEVWQlFVb3NRMEZMUVN4SlFVRkpaMFFzUlVGQlVXaEVMRVZCUVV0cFJDeGxRVUZwUWtZc1JVRkJTMFVzWTBGRmRrTXNSMEZCUzBRc1IwRkJWVUVzUlVGQlRVVXNXVUZCTkVJc1YwRkJaRWdzUlVGQlN6RkRMRXRCUVhoRExFTkJTMEVzU1VGQlNUaERMRVZCUVZFc1IwRkJTMG9zUlVGQlMwa3NUVUZEYkVKS0xFVkJRVXRMTEdGQlFXRXNWMEZCWVVRc1IwRkRha05LTEVWQlFVdE5MR0ZCUVdFc1VVRkJVMFlzUzBFelNETkNiRVVzY1VKQlFYRkNaMFFzV1VGSmRrSkhMSE5DUVVGM1FqZERMR2xDUVVGcFFpeFpRVUZqTWtNc1UwRkJVME1zWTBGQlowSkVMRk5CUVZORExHRkJRV1VzU1VGeFNURkhMRWxCUVVsUUxHdENRVUZ2UWl4RFFVTjBRbTVETEZkQlFWbEJMRmRCUlZwdlF5dzBRa0ZCTkVJc1JVRkROVUo1UWl4MVFrRkJkMEpzUWl4elFrRkZlRUp0UWl4alFVRmxMRk5CUVZWNFFpeEZRVUZqV0N4RlFVRlpia0lzUlVGQllYVkVMRWRCUXpsRUxFbEJSVWxETEVWQlFXMUNReXhGUVVadVFrTXNSVUZCWVhaRExFVkJRV0ZzUXl4elFrRkJjMEl3UlN4dlFrRkJiMEo0UXl4SFFVRmplVU1zVDBGdlFuUkdMRWRCYWtKSmNFUXNjVUpCUVhGQ2EwUXNSMEZEYmtJNVF5eHpRa0ZEUmpSRExFVkJRVzlDTTBJc05FSkJSWEJDTkVJc1JVRkJhMEl4UWl3NFFrRkZXSGhETEcxQ1FVRnRRbTFGTEVkQlEzaENka0lzYzBKQlEwWnhRaXhGUVVGdlFsb3NiME5CUlhCQ1dTeEZRVUZ2UW1Zc2JVTkJRM0JDWjBJc1JVRkJhMEpxUWl4dFEwRkZXRVVzYjBKQlFXOUNaMElzUzBGRE4wSkdMRVZCUVc5Q1lpdzBRa0ZIYkVKaExFVkJRVzFDTEVOQlEzSkNMRWxCUVVsNlJDeEZRVUZQZVVRc1JVRkJhMEl4UWl4RlFVRmpXQ3hGUVVGWmJrSXNSMEZEZGtRc1IwRkJTVVFzUlVGRlJpeFBRVVJaUkN3clFrRkJLMEpETEVWQlFVMURMRVZCUVdGMVJDeEhRVXM1UkVVc1IwRkRSa0VzUlVGQlowSXpRaXhGUVVGak5FSXNSVUZCV1haRExFZEJTWFpDTEZsQlFXcENWeXhIUVVOR1pTd3dRa0ZCTUVJeFFpeEZRVUZaZFVNc1MwRkxOVU5ITEU5QlFVOURMRkZCUVZWdVF5SXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzFrYjIwdmJHbGlMME5vWVc1blpVVjJaVzUwVUd4MVoybHVMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBET01MYXp5VHJlZT1yZXF1aXJlKFwiLi9ET01MYXp5VHJlZVwiKSxEYW5nZXI9cmVxdWlyZShcIi4vRGFuZ2VyXCIpLFJlYWN0RE9NQ29tcG9uZW50VHJlZT1yZXF1aXJlKFwiLi9SZWFjdERPTUNvbXBvbmVudFRyZWVcIiksUmVhY3RJbnN0cnVtZW50YXRpb249cmVxdWlyZShcIi4vUmVhY3RJbnN0cnVtZW50YXRpb25cIiksY3JlYXRlTWljcm9zb2Z0VW5zYWZlTG9jYWxGdW5jdGlvbj1yZXF1aXJlKFwiLi9jcmVhdGVNaWNyb3NvZnRVbnNhZmVMb2NhbEZ1bmN0aW9uXCIpLHNldElubmVySFRNTD1yZXF1aXJlKFwiLi9zZXRJbm5lckhUTUxcIiksc2V0VGV4dENvbnRlbnQ9cmVxdWlyZShcIi4vc2V0VGV4dENvbnRlbnRcIik7ZnVuY3Rpb24gZ2V0Tm9kZUFmdGVyKGUsdCl7cmV0dXJuIEFycmF5LmlzQXJyYXkodCkmJih0PXRbMV0pLHQ/dC5uZXh0U2libGluZzplLmZpcnN0Q2hpbGR9dmFyIGluc2VydENoaWxkQXQ9Y3JlYXRlTWljcm9zb2Z0VW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbihlLHQsbil7ZS5pbnNlcnRCZWZvcmUodCxuKX0pO2Z1bmN0aW9uIGluc2VydExhenlUcmVlQ2hpbGRBdChlLHQsbil7RE9NTGF6eVRyZWUuaW5zZXJ0VHJlZUJlZm9yZShlLHQsbil9ZnVuY3Rpb24gbW92ZUNoaWxkKGUsdCxuKXtBcnJheS5pc0FycmF5KHQpP21vdmVEZWxpbWl0ZWRUZXh0KGUsdFswXSx0WzFdLG4pOmluc2VydENoaWxkQXQoZSx0LG4pfWZ1bmN0aW9uIHJlbW92ZUNoaWxkKGUsdCl7aWYoQXJyYXkuaXNBcnJheSh0KSl7dmFyIG49dFsxXTtyZW1vdmVEZWxpbWl0ZWRUZXh0KGUsdD10WzBdLG4pLGUucmVtb3ZlQ2hpbGQobil9ZS5yZW1vdmVDaGlsZCh0KX1mdW5jdGlvbiBtb3ZlRGVsaW1pdGVkVGV4dChlLHQsbixvKXtmb3IodmFyIHI9dDs7KXt2YXIgYT1yLm5leHRTaWJsaW5nO2lmKGluc2VydENoaWxkQXQoZSxyLG8pLHI9PT1uKWJyZWFrO3I9YX19ZnVuY3Rpb24gcmVtb3ZlRGVsaW1pdGVkVGV4dChlLHQsbil7Zm9yKDs7KXt2YXIgbz10Lm5leHRTaWJsaW5nO2lmKG89PT1uKWJyZWFrO2UucmVtb3ZlQ2hpbGQobyl9fWZ1bmN0aW9uIHJlcGxhY2VEZWxpbWl0ZWRUZXh0KGUsdCxuKXt2YXIgbz1lLnBhcmVudE5vZGUscj1lLm5leHRTaWJsaW5nO3I9PT10P24mJmluc2VydENoaWxkQXQobyxkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShuKSxyKTpuPyhzZXRUZXh0Q29udGVudChyLG4pLHJlbW92ZURlbGltaXRlZFRleHQobyxyLHQpKTpyZW1vdmVEZWxpbWl0ZWRUZXh0KG8sZSx0KSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25Ib3N0T3BlcmF0aW9uKHtpbnN0YW5jZUlEOlJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXRJbnN0YW5jZUZyb21Ob2RlKGUpLl9kZWJ1Z0lELHR5cGU6XCJyZXBsYWNlIHRleHRcIixwYXlsb2FkOm59KX12YXIgZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXA9RGFuZ2VyLmRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwO1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJihkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cD1mdW5jdGlvbihlLHQsbil7aWYoRGFuZ2VyLmRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwKGUsdCksMCE9PW4uX2RlYnVnSUQpUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uSG9zdE9wZXJhdGlvbih7aW5zdGFuY2VJRDpuLl9kZWJ1Z0lELHR5cGU6XCJyZXBsYWNlIHdpdGhcIixwYXlsb2FkOnQudG9TdHJpbmcoKX0pO2Vsc2V7dmFyIG89UmVhY3RET01Db21wb25lbnRUcmVlLmdldEluc3RhbmNlRnJvbU5vZGUodC5ub2RlKTswIT09by5fZGVidWdJRCYmUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uSG9zdE9wZXJhdGlvbih7aW5zdGFuY2VJRDpvLl9kZWJ1Z0lELHR5cGU6XCJtb3VudFwiLHBheWxvYWQ6dC50b1N0cmluZygpfSl9fSk7dmFyIERPTUNoaWxkcmVuT3BlcmF0aW9ucz17ZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXA6ZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXAscmVwbGFjZURlbGltaXRlZFRleHQ6cmVwbGFjZURlbGltaXRlZFRleHQscHJvY2Vzc1VwZGF0ZXM6ZnVuY3Rpb24oZSx0KXtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXZhciBuPVJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXRJbnN0YW5jZUZyb21Ob2RlKGUpLl9kZWJ1Z0lEO2Zvcih2YXIgbz0wO288dC5sZW5ndGg7bysrKXt2YXIgcj10W29dO3N3aXRjaChyLnR5cGUpe2Nhc2VcIklOU0VSVF9NQVJLVVBcIjppbnNlcnRMYXp5VHJlZUNoaWxkQXQoZSxyLmNvbnRlbnQsZ2V0Tm9kZUFmdGVyKGUsci5hZnRlck5vZGUpKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25Ib3N0T3BlcmF0aW9uKHtpbnN0YW5jZUlEOm4sdHlwZTpcImluc2VydCBjaGlsZFwiLHBheWxvYWQ6e3RvSW5kZXg6ci50b0luZGV4LGNvbnRlbnQ6ci5jb250ZW50LnRvU3RyaW5nKCl9fSk7YnJlYWs7Y2FzZVwiTU9WRV9FWElTVElOR1wiOm1vdmVDaGlsZChlLHIuZnJvbU5vZGUsZ2V0Tm9kZUFmdGVyKGUsci5hZnRlck5vZGUpKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25Ib3N0T3BlcmF0aW9uKHtpbnN0YW5jZUlEOm4sdHlwZTpcIm1vdmUgY2hpbGRcIixwYXlsb2FkOntmcm9tSW5kZXg6ci5mcm9tSW5kZXgsdG9JbmRleDpyLnRvSW5kZXh9fSk7YnJlYWs7Y2FzZVwiU0VUX01BUktVUFwiOnNldElubmVySFRNTChlLHIuY29udGVudCksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uSG9zdE9wZXJhdGlvbih7aW5zdGFuY2VJRDpuLHR5cGU6XCJyZXBsYWNlIGNoaWxkcmVuXCIscGF5bG9hZDpyLmNvbnRlbnQudG9TdHJpbmcoKX0pO2JyZWFrO2Nhc2VcIlRFWFRfQ09OVEVOVFwiOnNldFRleHRDb250ZW50KGUsci5jb250ZW50KSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25Ib3N0T3BlcmF0aW9uKHtpbnN0YW5jZUlEOm4sdHlwZTpcInJlcGxhY2UgdGV4dFwiLHBheWxvYWQ6ci5jb250ZW50LnRvU3RyaW5nKCl9KTticmVhaztjYXNlXCJSRU1PVkVfTk9ERVwiOnJlbW92ZUNoaWxkKGUsci5mcm9tTm9kZSksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uSG9zdE9wZXJhdGlvbih7aW5zdGFuY2VJRDpuLHR5cGU6XCJyZW1vdmUgY2hpbGRcIixwYXlsb2FkOntmcm9tSW5kZXg6ci5mcm9tSW5kZXh9fSl9fX19O21vZHVsZS5leHBvcnRzPURPTUNoaWxkcmVuT3BlcmF0aW9ucztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrUlBUVU5vYVd4a2NtVnVUM0JsY21GMGFXOXVjeTVxY3lKZExDSnVZVzFsY3lJNld5SkVUMDFNWVhwNVZISmxaU0lzSW5KbGNYVnBjbVVpTENKRVlXNW5aWElpTENKU1pXRmpkRVJQVFVOdmJYQnZibVZ1ZEZSeVpXVWlMQ0pTWldGamRFbHVjM1J5ZFcxbGJuUmhkR2x2YmlJc0ltTnlaV0YwWlUxcFkzSnZjMjltZEZWdWMyRm1aVXh2WTJGc1JuVnVZM1JwYjI0aUxDSnpaWFJKYm01bGNraFVUVXdpTENKelpYUlVaWGgwUTI5dWRHVnVkQ0lzSW1kbGRFNXZaR1ZCWm5SbGNpSXNJbkJoY21WdWRFNXZaR1VpTENKdWIyUmxJaXdpUVhKeVlYa2lMQ0pwYzBGeWNtRjVJaXdpYm1WNGRGTnBZbXhwYm1jaUxDSm1hWEp6ZEVOb2FXeGtJaXdpYVc1elpYSjBRMmhwYkdSQmRDSXNJbU5vYVd4a1RtOWtaU0lzSW5KbFptVnlaVzVqWlU1dlpHVWlMQ0pwYm5ObGNuUkNaV1p2Y21VaUxDSnBibk5sY25STVlYcDVWSEpsWlVOb2FXeGtRWFFpTENKamFHbHNaRlJ5WldVaUxDSnBibk5sY25SVWNtVmxRbVZtYjNKbElpd2liVzkyWlVOb2FXeGtJaXdpYlc5MlpVUmxiR2x0YVhSbFpGUmxlSFFpTENKeVpXMXZkbVZEYUdsc1pDSXNJbU5zYjNOcGJtZERiMjF0Wlc1MElpd2ljbVZ0YjNabFJHVnNhVzFwZEdWa1ZHVjRkQ0lzSW05d1pXNXBibWREYjIxdFpXNTBJaXdpYm1WNGRFNXZaR1VpTENKemRHRnlkRTV2WkdVaUxDSnlaWEJzWVdObFJHVnNhVzFwZEdWa1ZHVjRkQ0lzSW5OMGNtbHVaMVJsZUhRaUxDSnViMlJsUVdaMFpYSkRiMjF0Wlc1MElpd2laRzlqZFcxbGJuUWlMQ0pqY21WaGRHVlVaWGgwVG05a1pTSXNJbkJ5YjJObGMzTWlMQ0psYm5ZaUxDSk9UMFJGWDBWT1ZpSXNJbVJsWW5WblZHOXZiQ0lzSW05dVNHOXpkRTl3WlhKaGRHbHZiaUlzSW1sdWMzUmhibU5sU1VRaUxDSm5aWFJKYm5OMFlXNWpaVVp5YjIxT2IyUmxJaXdpWDJSbFluVm5TVVFpTENKMGVYQmxJaXdpY0dGNWJHOWhaQ0lzSW1SaGJtZGxjbTkxYzJ4NVVtVndiR0ZqWlU1dlpHVlhhWFJvVFdGeWEzVndJaXdpYjJ4a1EyaHBiR1FpTENKdFlYSnJkWEFpTENKd2NtVjJTVzV6ZEdGdVkyVWlMQ0owYjFOMGNtbHVaeUlzSW01bGVIUkpibk4wWVc1alpTSXNJa1JQVFVOb2FXeGtjbVZ1VDNCbGNtRjBhVzl1Y3lJc0luQnliMk5sYzNOVmNHUmhkR1Z6SWl3aWRYQmtZWFJsY3lJc0luQmhjbVZ1ZEU1dlpHVkVaV0oxWjBsRUlpd2lheUlzSW14bGJtZDBhQ0lzSW5Wd1pHRjBaU0lzSW1OdmJuUmxiblFpTENKaFpuUmxjazV2WkdVaUxDSjBiMGx1WkdWNElpd2labkp2YlU1dlpHVWlMQ0ptY205dFNXNWtaWGdpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZSUVN4aFFVVkJMRWxCUVVsQkxGbEJRV05ETEZGQlFWRXNhVUpCUTNSQ1F5eFBRVUZUUkN4UlFVRlJMRmxCUTJwQ1JTeHpRa0ZCZDBKR0xGRkJRVkVzTWtKQlEyaERSeXh4UWtGQmRVSklMRkZCUVZFc01FSkJSUzlDU1N4dFEwRkJjVU5LTEZGQlFWRXNkME5CUXpkRFN5eGhRVUZsVEN4UlFVRlJMR3RDUVVOMlFrMHNaVUZCYVVKT0xGRkJRVkVzYjBKQlJUZENMRk5CUVZOUExHRkJRV0ZETEVWQlFWbERMRWRCVFdoRExFOUJTRWxETEUxQlFVMURMRkZCUVZGR0xFdEJRMmhDUVN4RlFVRlBRU3hGUVVGTExFbEJSVkJCTEVWQlFVOUJMRVZCUVV0SExGbEJRV05LTEVWQlFWZExMRmRCVnpsRExFbEJRVWxETEdOQlFXZENWaXh0UTBGQmJVTXNVMEZCVlVrc1JVRkJXVThzUlVGQlYwTXNSMEZKZEVaU0xFVkJRVmRUTEdGQlFXRkdMRVZCUVZkRExFdEJSM0pETEZOQlFWTkZMSE5DUVVGelFsWXNSVUZCV1Zjc1JVRkJWMGdzUjBGRGNFUnFRaXhaUVVGWmNVSXNhVUpCUVdsQ1dpeEZRVUZaVnl4RlFVRlhTQ3hIUVVkMFJDeFRRVUZUU3l4VlFVRlZZaXhGUVVGWlR5eEZRVUZYUXl4SFFVTndRMDRzVFVGQlRVTXNVVUZCVVVrc1IwRkRhRUpQTEd0Q1FVRnJRbVFzUlVGQldVOHNSVUZCVlN4SFFVRkpRU3hGUVVGVkxFZEJRVWxETEVkQlJURkVSaXhqUVVGalRpeEZRVUZaVHl4RlFVRlhReXhIUVVsNlF5eFRRVUZUVHl4WlFVRlpaaXhGUVVGWlR5eEhRVU12UWl4SFFVRkpUQ3hOUVVGTlF5eFJRVUZSU1N4SFFVRlpMRU5CUXpWQ0xFbEJRVWxUTEVWQlFXbENWQ3hGUVVGVkxFZEJSUzlDVlN4dlFrRkJiMEpxUWl4RlFVUndRazhzUlVGQldVRXNSVUZCVlN4SFFVTnhRbE1zUjBGRE0wTm9RaXhGUVVGWFpTeFpRVUZaUXl4SFFVVjZRbWhDTEVWQlFWZGxMRmxCUVZsU0xFZEJSM3BDTEZOQlFWTlBMR3RDUVVGclFtUXNSVUZCV1d0Q0xFVkJRV2RDUml4RlFVRm5RbElzUjBGRmNrVXNTVUZFUVN4SlFVRkpVQ3hGUVVGUGFVSXNTVUZEUlN4RFFVTllMRWxCUVVsRExFVkJRVmRzUWl4RlFVRkxSeXhaUVVWd1FpeEhRVVJCUlN4alFVRmpUaXhGUVVGWlF5eEZRVUZOVHl4SFFVTTFRbEFzU1VGQlUyVXNSVUZEV0N4TlFVVkdaaXhGUVVGUGEwSXNSMEZKV0N4VFFVRlRSaXh2UWtGQmIwSnFRaXhGUVVGWmIwSXNSVUZCVjBvc1IwRkRiRVFzVDBGQllTeERRVU5ZTEVsQlFVbG1MRVZCUVU5dFFpeEZRVUZWYUVJc1dVRkRja0lzUjBGQlNVZ3NTVUZCVTJVc1JVRkZXQ3hOUVVWQmFFSXNSVUZCVjJVc1dVRkJXV1FzU1VGTE4wSXNVMEZCVTI5Q0xIRkNRVUZ4UWtnc1JVRkJaMEpHTEVWQlFXZENUU3hIUVVNMVJDeEpRVUZKZEVJc1JVRkJZV3RDTEVWQlFXVnNRaXhYUVVNMVFuVkNMRVZCUVcxQ1RDeEZRVUZsWkN4WlFVTnNRMjFDTEVsQlFYRkNVQ3hGUVVkdVFrMHNSMEZEUm1oQ0xHTkJRV05PTEVWQlFWbDNRaXhUUVVGVFF5eGxRVUZsU0N4SFFVRmhReXhIUVVjM1JFUXNSMEZIUm5oQ0xHVkJRV1Y1UWl4RlFVRnJRa1FzUjBGRGFrTk1MRzlDUVVGdlFtcENMRVZCUVZsMVFpeEZRVUZyUWxBc1NVRkZiRVJETEc5Q1FVRnZRbXBDTEVWQlFWbHJRaXhGUVVGblFrWXNSMEZKZGtJc1pVRkJla0pWTEZGQlFWRkRMRWxCUVVsRExGVkJRMlJxUXl4eFFrRkJjVUpyUXl4VlFVRlZReXhuUWtGQlowSXNRMEZETjBORExGZEJRVmx5UXl4elFrRkJjMEp6UXl4dlFrRkJiMEprTEVkQlFXZENaU3hUUVVOMFJVTXNTMEZCVFN4bFFVTk9ReXhSUVVGVFlpeEpRVXRtTEVsQlFVbGpMR2xEUVVGdFF6TkRMRTlCUVU4eVF5eHBRMEZEYWtJc1pVRkJla0pXTEZGQlFWRkRMRWxCUVVsRExGZEJRMlJSTEdsRFFVRnRReXhUUVVGVlF5eEZRVUZWUXl4RlFVRlJReXhIUVVVM1JDeEhRVVJCT1VNc1QwRkJUekpETEdsRFFVRnBRME1zUlVGQlZVTXNSMEZEY0VJc1NVRkJNVUpETEVWQlFXRk9MRk5CUTJaMFF5eHhRa0ZCY1VKclF5eFZRVUZWUXl4blFrRkJaMElzUTBGRE4wTkRMRmRCUVZsUkxFVkJRV0ZPTEZOQlEzcENReXhMUVVGTkxHVkJRMDVETEZGQlFWTkhMRVZCUVU5RkxHbENRVVZpTEVOQlEwd3NTVUZCU1VNc1JVRkJaUzlETEhOQ1FVRnpRbk5ETEc5Q1FVRnZRazBzUlVGQlQzSkRMRTFCUTNSRExFbEJRVEZDZDBNc1JVRkJZVklzVlVGRFpuUkRMSEZDUVVGeFFtdERMRlZCUVZWRExHZENRVUZuUWl4RFFVTTNRME1zVjBGQldWVXNSVUZCWVZJc1UwRkRla0pETEV0QlFVMHNVVUZEVGtNc1VVRkJVMGNzUlVGQlQwVXNaMEpCVlRGQ0xFbEJRVWxGTEhOQ1FVRjNRaXhEUVVNeFFrNHNhVU5CUVd0RFFTeHBRMEZGYkVObUxIRkNRVUZ6UWtFc2NVSkJVM1JDYzBJc1pVRkJaMElzVTBGQlZUTkRMRVZCUVZrMFF5eEhRVU53UXl4SFFVRTJRaXhsUVVGNlFteENMRkZCUVZGRExFbEJRVWxETEZOQlEyUXNTVUZCU1dsQ0xFVkJRVzlDYmtRc2MwSkJRWE5DYzBNc2IwSkJRVzlDYUVNc1IwRkJXV2xETEZOQlIyaEdMRWxCUVVzc1NVRkJTV0VzUlVGQlNTeEZRVUZIUVN4RlFVRkpSaXhGUVVGUlJ5eFBRVUZSUkN4SlFVRkxMRU5CUTNaRExFbEJRVWxGTEVWQlFWTktMRVZCUVZGRkxFZEJRM0pDTEU5QlFWRkZMRVZCUVU5a0xFMUJRMklzU1VGQlN5eG5Ra0ZEU0hoQ0xITkNRVUZ6UWxZc1JVRkJXV2RFTEVWQlFVOURMRkZCUVZOc1JDeGhRVUZoUXl4RlFVRlpaMFFzUlVGQlQwVXNXVUZEY2tRc1pVRkJla0o0UWl4UlFVRlJReXhKUVVGSlF5eFZRVU5rYWtNc2NVSkJRWEZDYTBNc1ZVRkJWVU1zWjBKQlFXZENMRU5CUXpkRFF5eFhRVUZaWXl4RlFVTmFXQ3hMUVVGTkxHVkJRMDVETEZGQlFWTXNRMEZEVUdkQ0xGRkJRVk5JTEVWQlFVOUhMRkZCUTJoQ1JpeFJRVUZUUkN4RlFVRlBReXhSUVVGUlZDeGpRVWs1UWl4TlFVTkdMRWxCUVVzc1owSkJRMGd6UWl4VlFVRlZZaXhGUVVGWlowUXNSVUZCVDBrc1UwRkJWWEpFTEdGQlFXRkRMRVZCUVZsblJDeEZRVUZQUlN4WlFVTXhReXhsUVVGNlFuaENMRkZCUVZGRExFbEJRVWxETEZWQlEyUnFReXh4UWtGQmNVSnJReXhWUVVGVlF5eG5Ra0ZCWjBJc1EwRkROME5ETEZkQlFWbGpMRVZCUTFwWUxFdEJRVTBzWVVGRFRrTXNVVUZCVXl4RFFVRkZhMElzVlVGQlYwd3NSVUZCVDBzc1ZVRkJWMFlzVVVGQlUwZ3NSVUZCVDBjc1YwRkhOVVFzVFVGRFJpeEpRVUZMTEdGQlEwaDBSQ3hoUVVGaFJ5eEZRVUZaWjBRc1JVRkJUME1zVTBGRFNDeGxRVUY2UW5aQ0xGRkJRVkZETEVsQlFVbERMRlZCUTJScVF5eHhRa0ZCY1VKclF5eFZRVUZWUXl4blFrRkJaMElzUTBGRE4wTkRMRmRCUVZsakxFVkJRMXBZTEV0QlFVMHNiVUpCUTA1RExGRkJRVk5oTEVWQlFVOURMRkZCUVZGVUxHRkJSelZDTEUxQlEwWXNTVUZCU3l4bFFVTklNVU1zWlVGQlpVVXNSVUZCV1dkRUxFVkJRVTlETEZOQlEwd3NaVUZCZWtKMlFpeFJRVUZSUXl4SlFVRkpReXhWUVVOa2FrTXNjVUpCUVhGQ2EwTXNWVUZCVlVNc1owSkJRV2RDTEVOQlF6ZERReXhYUVVGWll5eEZRVU5hV0N4TFFVRk5MR1ZCUTA1RExGRkJRVk5oTEVWQlFVOURMRkZCUVZGVUxHRkJSelZDTEUxQlEwWXNTVUZCU3l4alFVTklla0lzV1VGQldXWXNSVUZCV1dkRUxFVkJRVTlKTEZWQlEwWXNaVUZCZWtJeFFpeFJRVUZSUXl4SlFVRkpReXhWUVVOa2FrTXNjVUpCUVhGQ2EwTXNWVUZCVlVNc1owSkJRV2RDTEVOQlF6ZERReXhYUVVGWll5eEZRVU5hV0N4TFFVRk5MR1ZCUTA1RExGRkJRVk1zUTBGQlJXdENMRlZCUVZkTUxFVkJRVTlMTEdsQ1FWTXpRME1zVDBGQlQwTXNVVUZCVldJaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Y21WaFkzUXRaRzl0TDJ4cFlpOUVUMDFEYUdsc1pISmxiazl3WlhKaGRHbHZibk11YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgRE9NTmFtZXNwYWNlcz1yZXF1aXJlKFwiLi9ET01OYW1lc3BhY2VzXCIpLHNldElubmVySFRNTD1yZXF1aXJlKFwiLi9zZXRJbm5lckhUTUxcIiksY3JlYXRlTWljcm9zb2Z0VW5zYWZlTG9jYWxGdW5jdGlvbj1yZXF1aXJlKFwiLi9jcmVhdGVNaWNyb3NvZnRVbnNhZmVMb2NhbEZ1bmN0aW9uXCIpLHNldFRleHRDb250ZW50PXJlcXVpcmUoXCIuL3NldFRleHRDb250ZW50XCIpLEVMRU1FTlRfTk9ERV9UWVBFPTEsRE9DVU1FTlRfRlJBR01FTlRfTk9ERV9UWVBFPTExLGVuYWJsZUxhenk9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGRvY3VtZW50JiZcIm51bWJlclwiPT10eXBlb2YgZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHxcInVuZGVmaW5lZFwiIT10eXBlb2YgbmF2aWdhdG9yJiZcInN0cmluZ1wiPT10eXBlb2YgbmF2aWdhdG9yLnVzZXJBZ2VudCYmL1xcYkVkZ2VcXC9cXGQvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7ZnVuY3Rpb24gaW5zZXJ0VHJlZUNoaWxkcmVuKGUpe2lmKGVuYWJsZUxhenkpe3ZhciBuPWUubm9kZSx0PWUuY2hpbGRyZW47aWYodC5sZW5ndGgpZm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspaW5zZXJ0VHJlZUJlZm9yZShuLHRbcl0sbnVsbCk7ZWxzZSBudWxsIT1lLmh0bWw/c2V0SW5uZXJIVE1MKG4sZS5odG1sKTpudWxsIT1lLnRleHQmJnNldFRleHRDb250ZW50KG4sZS50ZXh0KX19dmFyIGluc2VydFRyZWVCZWZvcmU9Y3JlYXRlTWljcm9zb2Z0VW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbihlLG4sdCl7bi5ub2RlLm5vZGVUeXBlPT09RE9DVU1FTlRfRlJBR01FTlRfTk9ERV9UWVBFfHxuLm5vZGUubm9kZVR5cGU9PT1FTEVNRU5UX05PREVfVFlQRSYmXCJvYmplY3RcIj09PW4ubm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpJiYobnVsbD09bi5ub2RlLm5hbWVzcGFjZVVSSXx8bi5ub2RlLm5hbWVzcGFjZVVSST09PURPTU5hbWVzcGFjZXMuaHRtbCk/KGluc2VydFRyZWVDaGlsZHJlbihuKSxlLmluc2VydEJlZm9yZShuLm5vZGUsdCkpOihlLmluc2VydEJlZm9yZShuLm5vZGUsdCksaW5zZXJ0VHJlZUNoaWxkcmVuKG4pKX0pO2Z1bmN0aW9uIHJlcGxhY2VDaGlsZFdpdGhUcmVlKGUsbil7ZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChuLm5vZGUsZSksaW5zZXJ0VHJlZUNoaWxkcmVuKG4pfWZ1bmN0aW9uIHF1ZXVlQ2hpbGQoZSxuKXtlbmFibGVMYXp5P2UuY2hpbGRyZW4ucHVzaChuKTplLm5vZGUuYXBwZW5kQ2hpbGQobi5ub2RlKX1mdW5jdGlvbiBxdWV1ZUhUTUwoZSxuKXtlbmFibGVMYXp5P2UuaHRtbD1uOnNldElubmVySFRNTChlLm5vZGUsbil9ZnVuY3Rpb24gcXVldWVUZXh0KGUsbil7ZW5hYmxlTGF6eT9lLnRleHQ9bjpzZXRUZXh0Q29udGVudChlLm5vZGUsbil9ZnVuY3Rpb24gdG9TdHJpbmcoKXtyZXR1cm4gdGhpcy5ub2RlLm5vZGVOYW1lfWZ1bmN0aW9uIERPTUxhenlUcmVlKGUpe3JldHVybntub2RlOmUsY2hpbGRyZW46W10saHRtbDpudWxsLHRleHQ6bnVsbCx0b1N0cmluZzp0b1N0cmluZ319RE9NTGF6eVRyZWUuaW5zZXJ0VHJlZUJlZm9yZT1pbnNlcnRUcmVlQmVmb3JlLERPTUxhenlUcmVlLnJlcGxhY2VDaGlsZFdpdGhUcmVlPXJlcGxhY2VDaGlsZFdpdGhUcmVlLERPTUxhenlUcmVlLnF1ZXVlQ2hpbGQ9cXVldWVDaGlsZCxET01MYXp5VHJlZS5xdWV1ZUhUTUw9cXVldWVIVE1MLERPTUxhenlUcmVlLnF1ZXVlVGV4dD1xdWV1ZVRleHQsbW9kdWxlLmV4cG9ydHM9RE9NTGF6eVRyZWU7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa1JQVFV4aGVubFVjbVZsTG1weklsMHNJbTVoYldWeklqcGJJa1JQVFU1aGJXVnpjR0ZqWlhNaUxDSnlaWEYxYVhKbElpd2ljMlYwU1c1dVpYSklWRTFNSWl3aVkzSmxZWFJsVFdsamNtOXpiMlowVlc1ellXWmxURzlqWVd4R2RXNWpkR2x2YmlJc0luTmxkRlJsZUhSRGIyNTBaVzUwSWl3aVJVeEZUVVZPVkY5T1QwUkZYMVJaVUVVaUxDSkVUME5WVFVWT1ZGOUdVa0ZIVFVWT1ZGOU9UMFJGWDFSWlVFVWlMQ0psYm1GaWJHVk1ZWHA1SWl3aVpHOWpkVzFsYm5RaUxDSmtiMk4xYldWdWRFMXZaR1VpTENKdVlYWnBaMkYwYjNJaUxDSjFjMlZ5UVdkbGJuUWlMQ0owWlhOMElpd2lhVzV6WlhKMFZISmxaVU5vYVd4a2NtVnVJaXdpZEhKbFpTSXNJbTV2WkdVaUxDSmphR2xzWkhKbGJpSXNJbXhsYm1kMGFDSXNJbWtpTENKcGJuTmxjblJVY21WbFFtVm1iM0psSWl3aWFIUnRiQ0lzSW5SbGVIUWlMQ0p3WVhKbGJuUk9iMlJsSWl3aWNtVm1aWEpsYm1ObFRtOWtaU0lzSW01dlpHVlVlWEJsSWl3aWJtOWtaVTVoYldVaUxDSjBiMHh2ZDJWeVEyRnpaU0lzSW01aGJXVnpjR0ZqWlZWU1NTSXNJbWx1YzJWeWRFSmxabTl5WlNJc0luSmxjR3hoWTJWRGFHbHNaRmRwZEdoVWNtVmxJaXdpYjJ4a1RtOWtaU0lzSW01bGQxUnlaV1VpTENKeVpYQnNZV05sUTJocGJHUWlMQ0p4ZFdWMVpVTm9hV3hrSWl3aWNHRnlaVzUwVkhKbFpTSXNJbU5vYVd4a1ZISmxaU0lzSW5CMWMyZ2lMQ0poY0hCbGJtUkRhR2xzWkNJc0luRjFaWFZsU0ZSTlRDSXNJbkYxWlhWbFZHVjRkQ0lzSW5SdlUzUnlhVzVuSWl3aWRHaHBjeUlzSWtSUFRVeGhlbmxVY21WbElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlVVRXNZVUZGUVN4SlFVRkpRU3hqUVVGblFrTXNVVUZCVVN4dFFrRkRlRUpETEdGQlFXVkVMRkZCUVZFc2EwSkJSWFpDUlN4dFEwRkJjVU5HTEZGQlFWRXNkME5CUXpkRFJ5eGxRVUZwUWtnc1VVRkJVU3h2UWtGRmVrSkpMR3RDUVVGdlFpeEZRVU53UWtNc05FSkJRVGhDTEVkQllUbENReXhYUVVGcFF5eHZRa0ZCWWtNc1ZVRkJOa1FzYVVKQlFURkNRU3hUUVVGVFF5eGpRVUZyUkN4dlFrRkJaRU1zVjBGQk5FUXNhVUpCUVhoQ1FTeFZRVUZWUXl4WFFVRXdRaXhoUVVGaFF5eExRVUZMUml4VlFVRlZReXhYUVVVMVRTeFRRVUZUUlN4dFFrRkJiVUpETEVkQlF6RkNMRWRCUVV0UUxGZEJRVXdzUTBGSFFTeEpRVUZKVVN4RlFVRlBSQ3hGUVVGTFF5eExRVU5hUXl4RlFVRlhSaXhGUVVGTFJTeFRRVU53UWl4SFFVRkpRU3hGUVVGVFF5eFBRVU5ZTEVsQlFVc3NTVUZCU1VNc1JVRkJTU3hGUVVGSFFTeEZRVUZKUml4RlFVRlRReXhQUVVGUlF5eEpRVU51UTBNc2FVSkJRV2xDU2l4RlFVRk5ReXhGUVVGVFJTeEhRVUZKTEZkQlJXaENMRTFCUVdKS0xFVkJRVXROTEV0QlEyUnNRaXhoUVVGaFlTeEZRVUZOUkN4RlFVRkxUU3hOUVVOR0xFMUJRV0pPTEVWQlFVdFBMRTFCUTJScVFpeGxRVUZsVnl4RlFVRk5SQ3hGUVVGTFR5eFBRVWs1UWl4SlFVRkpSaXhwUWtGQmJVSm9RaXh0UTBGQmJVTXNVMEZCVlcxQ0xFVkJRVmxTTEVWQlFVMVRMRWRCVDJoR1ZDeEZRVUZMUXl4TFFVRkxVeXhYUVVGaGJFSXNOa0pCUVN0Q1VTeEZRVUZMUXl4TFFVRkxVeXhYUVVGaGJrSXNiVUpCUVRCRUxGZEJRWEpEVXl4RlFVRkxReXhMUVVGTFZTeFRRVUZUUXl4blFrRkJlVVFzVFVGQk1VSmFMRVZCUVV0RExFdEJRVXRaTEdOQlFYZENZaXhGUVVGTFF5eExRVUZMV1N4bFFVRnBRak5DTEdOQlFXTnZRaXhQUVVOcVQxQXNiVUpCUVcxQ1F5eEhRVU51UWxFc1JVRkJWMDBzWVVGQllXUXNSVUZCUzBNc1MwRkJUVkVzUzBGRmJrTkVMRVZCUVZkTkxHRkJRV0ZrTEVWQlFVdERMRXRCUVUxUkxFZEJRMjVEVml4dFFrRkJiVUpETEUxQlNYWkNMRk5CUVZObExIRkNRVUZ4UWtNc1JVRkJVME1zUjBGRGNrTkVMRVZCUVZGU0xGZEJRVmRWTEdGQlFXRkVMRVZCUVZGb1FpeExRVUZOWlN4SFFVTTVRMnBDTEcxQ1FVRnRRbXRDTEVkQlIzSkNMRk5CUVZORkxGZEJRVmRETEVWQlFWbERMRWRCUXpGQ05VSXNWMEZEUmpKQ0xFVkJRVmRzUWl4VFFVRlRiMElzUzBGQlMwUXNSMEZGZWtKRUxFVkJRVmR1UWl4TFFVRkxjMElzV1VGQldVWXNSVUZCVlhCQ0xFMUJTVEZETEZOQlFWTjFRaXhWUVVGVmVFSXNSVUZCVFUwc1IwRkRia0ppTEZkQlEwWlBMRVZCUVV0TkxFdEJRVTlCTEVWQlJWcHNRaXhoUVVGaFdTeEZRVUZMUXl4TFFVRk5TeXhIUVVrMVFpeFRRVUZUYlVJc1ZVRkJWWHBDTEVWQlFVMVBMRWRCUTI1Q1pDeFhRVU5HVHl4RlFVRkxUeXhMUVVGUFFTeEZRVVZhYWtJc1pVRkJaVlVzUlVGQlMwTXNTMEZCVFUwc1IwRkpPVUlzVTBGQlUyMUNMRmRCUTFBc1QwRkJUME1zUzBGQlN6RkNMRXRCUVV0VkxGTkJSMjVDTEZOQlFWTnBRaXhaUVVGWk0wSXNSMEZEYmtJc1RVRkJUeXhEUVVOTVFTeExRVUZOUVN4RlFVTk9ReXhUUVVGVkxFZEJRMVpKTEV0QlFVMHNTMEZEVGtNc1MwRkJUU3hMUVVOT2JVSXNVMEZCVlVFc1ZVRkpaRVVzV1VGQldYWkNMR2xDUVVGdFFrRXNhVUpCUXk5Q2RVSXNXVUZCV1dJc2NVSkJRWFZDUVN4eFFrRkRia05oTEZsQlFWbFVMRmRCUVdGQkxGZEJRM3BDVXl4WlFVRlpTaXhWUVVGWlFTeFZRVU40UWtrc1dVRkJXVWdzVlVGQldVRXNWVUZGZUVKSkxFOUJRVTlETEZGQlFWVkdJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwzSmxZV04wTFdSdmJTOXNhV0l2UkU5TlRHRjZlVlJ5WldVdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIERPTU5hbWVzcGFjZXM9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O21vZHVsZS5leHBvcnRzPURPTU5hbWVzcGFjZXM7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa1JQVFU1aGJXVnpjR0ZqWlhNdWFuTWlYU3dpYm1GdFpYTWlPbHNpUkU5TlRtRnRaWE53WVdObGN5SXNJbWgwYld3aUxDSnRZWFJvYld3aUxDSnpkbWNpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZSUVN4aFFVVkJMRWxCUVVsQkxHTkJRV2RDTEVOQlEyeENReXhMUVVGTkxDdENRVU5PUXl4UFFVRlJMSEZEUVVOU1F5eEpRVUZMTERoQ1FVZFFReXhQUVVGUFF5eFJRVUZWVENJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDMWtiMjB2YkdsaUwwUlBUVTVoYldWemNHRmpaWE11YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgX3Byb2RJbnZhcmlhbnQ9cmVxdWlyZShcIi4vcmVhY3RQcm9kSW52YXJpYW50XCIpLGludmFyaWFudD1yZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpO2Z1bmN0aW9uIGNoZWNrTWFzayhlLHQpe3JldHVybihlJnQpPT09dH12YXIgRE9NUHJvcGVydHlJbmplY3Rpb249e01VU1RfVVNFX1BST1BFUlRZOjEsSEFTX0JPT0xFQU5fVkFMVUU6NCxIQVNfTlVNRVJJQ19WQUxVRTo4LEhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFOjI0LEhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUU6MzIsaW5qZWN0RE9NUHJvcGVydHlDb25maWc6ZnVuY3Rpb24oZSl7dmFyIHQ9RE9NUHJvcGVydHlJbmplY3Rpb24scj1lLlByb3BlcnRpZXN8fHt9LG89ZS5ET01BdHRyaWJ1dGVOYW1lc3BhY2VzfHx7fSxhPWUuRE9NQXR0cmlidXRlTmFtZXN8fHt9LG49ZS5ET01Qcm9wZXJ0eU5hbWVzfHx7fSx1PWUuRE9NTXV0YXRpb25NZXRob2RzfHx7fTtmb3IodmFyIGkgaW4gZS5pc0N1c3RvbUF0dHJpYnV0ZSYmRE9NUHJvcGVydHkuX2lzQ3VzdG9tQXR0cmlidXRlRnVuY3Rpb25zLnB1c2goZS5pc0N1c3RvbUF0dHJpYnV0ZSkscil7RE9NUHJvcGVydHkucHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShpKSYmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwiaW5qZWN0RE9NUHJvcGVydHlDb25maWcoLi4uKTogWW91J3JlIHRyeWluZyB0byBpbmplY3QgRE9NIHByb3BlcnR5ICclcycgd2hpY2ggaGFzIGFscmVhZHkgYmVlbiBpbmplY3RlZC4gWW91IG1heSBiZSBhY2NpZGVudGFsbHkgaW5qZWN0aW5nIHRoZSBzYW1lIERPTSBwcm9wZXJ0eSBjb25maWcgdHdpY2UsIG9yIHlvdSBtYXkgYmUgaW5qZWN0aW5nIHR3byBjb25maWdzIHRoYXQgaGF2ZSBjb25mbGljdGluZyBwcm9wZXJ0eSBuYW1lcy5cIixpKTpfcHJvZEludmFyaWFudChcIjQ4XCIsaSkpO3ZhciBzPWkudG9Mb3dlckNhc2UoKSxjPXJbaV0scD17YXR0cmlidXRlTmFtZTpzLGF0dHJpYnV0ZU5hbWVzcGFjZTpudWxsLHByb3BlcnR5TmFtZTppLG11dGF0aW9uTWV0aG9kOm51bGwsbXVzdFVzZVByb3BlcnR5OmNoZWNrTWFzayhjLHQuTVVTVF9VU0VfUFJPUEVSVFkpLGhhc0Jvb2xlYW5WYWx1ZTpjaGVja01hc2soYyx0LkhBU19CT09MRUFOX1ZBTFVFKSxoYXNOdW1lcmljVmFsdWU6Y2hlY2tNYXNrKGMsdC5IQVNfTlVNRVJJQ19WQUxVRSksaGFzUG9zaXRpdmVOdW1lcmljVmFsdWU6Y2hlY2tNYXNrKGMsdC5IQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRSksaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZTpjaGVja01hc2soYyx0LkhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUUpfTtpZihwLmhhc0Jvb2xlYW5WYWx1ZStwLmhhc051bWVyaWNWYWx1ZStwLmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWU8PTF8fChcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcIkRPTVByb3BlcnR5OiBWYWx1ZSBjYW4gYmUgb25lIG9mIGJvb2xlYW4sIG92ZXJsb2FkZWQgYm9vbGVhbiwgb3IgbnVtZXJpYyB2YWx1ZSwgYnV0IG5vdCBhIGNvbWJpbmF0aW9uOiAlc1wiLGkpOl9wcm9kSW52YXJpYW50KFwiNTBcIixpKSksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKERPTVByb3BlcnR5LmdldFBvc3NpYmxlU3RhbmRhcmROYW1lW3NdPWkpLGEuaGFzT3duUHJvcGVydHkoaSkpe3ZhciBBPWFbaV07cC5hdHRyaWJ1dGVOYW1lPUEsXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKERPTVByb3BlcnR5LmdldFBvc3NpYmxlU3RhbmRhcmROYW1lW0FdPWkpfW8uaGFzT3duUHJvcGVydHkoaSkmJihwLmF0dHJpYnV0ZU5hbWVzcGFjZT1vW2ldKSxuLmhhc093blByb3BlcnR5KGkpJiYocC5wcm9wZXJ0eU5hbWU9bltpXSksdS5oYXNPd25Qcm9wZXJ0eShpKSYmKHAubXV0YXRpb25NZXRob2Q9dVtpXSksRE9NUHJvcGVydHkucHJvcGVydGllc1tpXT1wfX19LEFUVFJJQlVURV9OQU1FX1NUQVJUX0NIQVI9XCI6QS1aX2EtelxcXFx1MDBDMC1cXFxcdTAwRDZcXFxcdTAwRDgtXFxcXHUwMEY2XFxcXHUwMEY4LVxcXFx1MDJGRlxcXFx1MDM3MC1cXFxcdTAzN0RcXFxcdTAzN0YtXFxcXHUxRkZGXFxcXHUyMDBDLVxcXFx1MjAwRFxcXFx1MjA3MC1cXFxcdTIxOEZcXFxcdTJDMDAtXFxcXHUyRkVGXFxcXHUzMDAxLVxcXFx1RDdGRlxcXFx1RjkwMC1cXFxcdUZEQ0ZcXFxcdUZERjAtXFxcXHVGRkZEXCIsRE9NUHJvcGVydHk9e0lEX0FUVFJJQlVURV9OQU1FOlwiZGF0YS1yZWFjdGlkXCIsUk9PVF9BVFRSSUJVVEVfTkFNRTpcImRhdGEtcmVhY3Ryb290XCIsQVRUUklCVVRFX05BTUVfU1RBUlRfQ0hBUjpBVFRSSUJVVEVfTkFNRV9TVEFSVF9DSEFSLEFUVFJJQlVURV9OQU1FX0NIQVI6QVRUUklCVVRFX05BTUVfU1RBUlRfQ0hBUitcIlxcXFwtLjAtOVxcXFx1MDBCN1xcXFx1MDMwMC1cXFxcdTAzNkZcXFxcdTIwM0YtXFxcXHUyMDQwXCIscHJvcGVydGllczp7fSxnZXRQb3NzaWJsZVN0YW5kYXJkTmFtZTpcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP3thdXRvZm9jdXM6XCJhdXRvRm9jdXNcIn06bnVsbCxfaXNDdXN0b21BdHRyaWJ1dGVGdW5jdGlvbnM6W10saXNDdXN0b21BdHRyaWJ1dGU6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTA7dDxET01Qcm9wZXJ0eS5faXNDdXN0b21BdHRyaWJ1dGVGdW5jdGlvbnMubGVuZ3RoO3QrKyl7aWYoKDAsRE9NUHJvcGVydHkuX2lzQ3VzdG9tQXR0cmlidXRlRnVuY3Rpb25zW3RdKShlKSlyZXR1cm4hMH1yZXR1cm4hMX0saW5qZWN0aW9uOkRPTVByb3BlcnR5SW5qZWN0aW9ufTttb2R1bGUuZXhwb3J0cz1ET01Qcm9wZXJ0eTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrUlBUVkJ5YjNCbGNuUjVMbXB6SWwwc0ltNWhiV1Z6SWpwYklsOXdjbTlrU1c1MllYSnBZVzUwSWl3aWNtVnhkV2x5WlNJc0ltbHVkbUZ5YVdGdWRDSXNJbU5vWldOclRXRnpheUlzSW5aaGJIVmxJaXdpWW1sMGJXRnpheUlzSWtSUFRWQnliM0JsY25SNVNXNXFaV04wYVc5dUlpd2lUVlZUVkY5VlUwVmZVRkpQVUVWU1ZGa2lMQ0pJUVZOZlFrOVBURVZCVGw5V1FVeFZSU0lzSWtoQlUxOU9WVTFGVWtsRFgxWkJURlZGSWl3aVNFRlRYMUJQVTBsVVNWWkZYMDVWVFVWU1NVTmZWa0ZNVlVVaUxDSklRVk5mVDFaRlVreFBRVVJGUkY5Q1QwOU1SVUZPWDFaQlRGVkZJaXdpYVc1cVpXTjBSRTlOVUhKdmNHVnlkSGxEYjI1bWFXY2lMQ0prYjIxUWNtOXdaWEowZVVOdmJtWnBaeUlzSWtsdWFtVmpkR2x2YmlJc0lsQnliM0JsY25ScFpYTWlMQ0pFVDAxQmRIUnlhV0oxZEdWT1lXMWxjM0JoWTJWeklpd2lSRTlOUVhSMGNtbGlkWFJsVG1GdFpYTWlMQ0pFVDAxUWNtOXdaWEowZVU1aGJXVnpJaXdpUkU5TlRYVjBZWFJwYjI1TlpYUm9iMlJ6SWl3aWNISnZjRTVoYldVaUxDSnBjME4xYzNSdmJVRjBkSEpwWW5WMFpTSXNJa1JQVFZCeWIzQmxjblI1SWl3aVgybHpRM1Z6ZEc5dFFYUjBjbWxpZFhSbFJuVnVZM1JwYjI1eklpd2ljSFZ6YUNJc0luQnliM0JsY25ScFpYTWlMQ0pvWVhOUGQyNVFjbTl3WlhKMGVTSXNJbkJ5YjJObGMzTWlMQ0psYm5ZaUxDSk9UMFJGWDBWT1ZpSXNJbXh2ZDJWeVEyRnpaV1FpTENKMGIweHZkMlZ5UTJGelpTSXNJbkJ5YjNCRGIyNW1hV2NpTENKd2NtOXdaWEowZVVsdVptOGlMQ0poZEhSeWFXSjFkR1ZPWVcxbElpd2lZWFIwY21saWRYUmxUbUZ0WlhOd1lXTmxJaXdpY0hKdmNHVnlkSGxPWVcxbElpd2liWFYwWVhScGIyNU5aWFJvYjJRaUxDSnRkWE4wVlhObFVISnZjR1Z5ZEhraUxDSm9ZWE5DYjI5c1pXRnVWbUZzZFdVaUxDSm9ZWE5PZFcxbGNtbGpWbUZzZFdVaUxDSm9ZWE5RYjNOcGRHbDJaVTUxYldWeWFXTldZV3gxWlNJc0ltaGhjMDkyWlhKc2IyRmtaV1JDYjI5c1pXRnVWbUZzZFdVaUxDSm5aWFJRYjNOemFXSnNaVk4wWVc1a1lYSmtUbUZ0WlNJc0lrRlVWRkpKUWxWVVJWOU9RVTFGWDFOVVFWSlVYME5JUVZJaUxDSkpSRjlCVkZSU1NVSlZWRVZmVGtGTlJTSXNJbEpQVDFSZlFWUlVVa2xDVlZSRlgwNUJUVVVpTENKQlZGUlNTVUpWVkVWZlRrRk5SVjlEU0VGU0lpd2lZWFYwYjJadlkzVnpJaXdpYVNJc0lteGxibWQwYUNJc0ltbHpRM1Z6ZEc5dFFYUjBjbWxpZFhSbFJtNGlMQ0pwYm1wbFkzUnBiMjRpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZSUVN4aFFVVkJMRWxCUVVsQkxHVkJRV2xDUXl4UlFVRlJMSGRDUVVWNlFrTXNWVUZCV1VRc1VVRkJVU3h6UWtGRmVFSXNVMEZCVTBVc1ZVRkJWVU1zUlVGQlQwTXNSMEZEZUVJc1QwRkJVVVFzUlVGQlVVTXNTMEZCWVVFc1JVRkhMMElzU1VGQlNVTXNjVUpCUVhWQ0xFTkJTM3BDUXl4clFrRkJiVUlzUlVGRGJrSkRMR3RDUVVGdFFpeEZRVU51UWtNc2EwSkJRVzFDTEVWQlEyNUNReXd5UWtGQk5FSXNSMEZETlVKRExEWkNRVUU0UWl4SFFUaENPVUpETEhkQ1FVRjVRaXhUUVVGVlF5eEhRVU5xUXl4SlFVRkpReXhGUVVGWlVpeHhRa0ZEV2xNc1JVRkJZVVlzUlVGQmEwSkZMRmxCUVdNc1IwRkROME5ETEVWQlFYbENTQ3hGUVVGclFrY3NkMEpCUVRCQ0xFZEJRM0pGUXl4RlFVRnZRa29zUlVGQmEwSkpMRzFDUVVGeFFpeEhRVU16UkVNc1JVRkJiVUpNTEVWQlFXdENTeXhyUWtGQmIwSXNSMEZEZWtSRExFVkJRWEZDVGl4RlFVRnJRazBzYjBKQlFYTkNMRWRCVFdwRkxFbEJRVXNzU1VGQlNVTXNTMEZLVEZBc1JVRkJhMEpSTEcxQ1FVTndRa01zV1VGQldVTXNORUpCUVRSQ1F5eExRVUZMV0N4RlFVRnJRbEVzYlVKQlJ6VkRUaXhGUVVGWkxFTkJRemRDVHl4WlFVRlpSeXhYUVVGWFF5eGxRVUZsVGl4TFFVRnhReXhsUVVGNlFrOHNVVUZCVVVNc1NVRkJTVU1zVTBGQk5FSXpRaXhYUVVGVkxFVkJRVThzTWxCQlFTdFFhMElzUjBGQldYQkNMR1ZCUVdVc1MwRkJUVzlDTEVsQlJUZFpMRWxCUVVsVkxFVkJRV0ZXTEVWQlFWTlhMR05CUTNSQ1F5eEZRVUZoYWtJc1JVRkJWMHNzUjBGRmVFSmhMRVZCUVdVc1EwRkRha0pETEdOQlFXVktMRVZCUTJaTExHMUNRVUZ2UWl4TFFVTndRa01zWVVGQlkyaENMRVZCUTJScFFpeGxRVUZuUWl4TFFVVm9Ra01zWjBKQlFXbENia01zVlVGQlZUWkNMRVZCUVZsc1FpeEZRVUZWVUN4dFFrRkRha1JuUXl4blFrRkJhVUp3UXl4VlFVRlZOa0lzUlVGQldXeENMRVZCUVZWT0xHMUNRVU5xUkdkRExHZENRVUZwUW5KRExGVkJRVlUyUWl4RlFVRlpiRUlzUlVGQlZVd3NiVUpCUTJwRVowTXNkMEpCUVhsQ2RFTXNWVUZCVlRaQ0xFVkJRVmxzUWl4RlFVRlZTaXcwUWtGRGVrUm5ReXd3UWtGQk1rSjJReXhWUVVGVk5rSXNSVUZCV1d4Q0xFVkJRVlZJTEN0Q1FWRTNSQ3hIUVU1RmMwSXNSVUZCWVUwc1owSkJRV3RDVGl4RlFVRmhUeXhuUWtGQmEwSlFMRVZCUVdGVExESkNRVUUyUWl4SlFVRTRRaXhsUVVGNlFtWXNVVUZCVVVNc1NVRkJTVU1zVTBGQk5FSXpRaXhYUVVGVkxFVkJRVThzTkVkQlFUWkhhMElzUjBGQldYQkNMR1ZCUVdVc1MwRkJUVzlDTEVsQlJYcFNMR1ZCUVhwQ1R5eFJRVUZSUXl4SlFVRkpReXhYUVVOa1VDeFpRVUZaY1VJc2QwSkJRWGRDWWl4SFFVRmpWaXhIUVVkb1JFZ3NSVUZCYTBKVExHVkJRV1ZPTEVkQlFWY3NRMEZET1VNc1NVRkJTV01zUlVGQlowSnFRaXhGUVVGclFrY3NSMEZEZEVOaExFVkJRV0ZETEdOQlFXZENRU3hGUVVOQkxHVkJRWHBDVUN4UlFVRlJReXhKUVVGSlF5eFhRVU5rVUN4WlFVRlpjVUlzZDBKQlFYZENWQ3hIUVVGcFFtUXNSMEZKY2tSS0xFVkJRWFZDVlN4bFFVRmxUaXhMUVVONFEyRXNSVUZCWVVVc2JVSkJRWEZDYmtJc1JVRkJkVUpKTEVsQlIzWkVSaXhGUVVGcFFsRXNaVUZCWlU0c1MwRkRiRU5oTEVWQlFXRkhMR0ZCUVdWc1FpeEZRVUZwUWtVc1NVRkhNME5FTEVWQlFXMUNUeXhsUVVGbFRpeExRVU53UTJFc1JVRkJZVWtzWlVGQmFVSnNRaXhGUVVGdFFrTXNTVUZIYmtSRkxGbEJRVmxITEZkQlFWZE1MRWRCUVZsaExFdEJUWEpEVnl3d1FrRkJORUlzWjB4QlowSTFRblJDTEZsQlFXTXNRMEZEYUVKMVFpeHJRa0ZCYlVJc1pVRkRia0pETEc5Q1FVRnhRaXhwUWtGRmNrSkdMREJDUVVFeVFrRXNNRUpCUXpOQ1J5eHZRa0ZCY1VKSUxEQkNRVUUwUWl3clEwRTRRbXBFYmtJc1YwRkJXU3hIUVZkYWEwSXNkMEpCUVd0RUxHVkJRWHBDYUVJc1VVRkJVVU1zU1VGQlNVTXNVMEZCTkVJc1EwRkJSVzFDTEZWQlFWY3NZVUZCWjBJc1MwRkxPVVo2UWl3MFFrRkJOa0lzUjBGTk4wSkdMR3RDUVVGdFFpeFRRVUZWWVN4SFFVTXpRaXhKUVVGTExFbEJRVWxsTEVWQlFVa3NSVUZCUjBFc1JVRkJTVE5DTEZsQlFWbERMRFJDUVVFMFFqSkNMRTlCUVZGRUxFbEJRVXNzUTBGRmRrVXNTVUZCU1VVc1JVRkVjMEkzUWl4WlFVRlpReXcwUWtGQk5FSXdRaXhKUVVNeFEyWXNSMEZEZEVJc1QwRkJUeXhGUVVkWUxFOUJRVThzUjBGSFZHdENMRlZCUVZjNVF5eHpRa0ZIWWl0RExFOUJRVTlETEZGQlFWVm9ReUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEMxa2IyMHZiR2xpTDBSUFRWQnliM0JsY25SNUxtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIERPTVByb3BlcnR5PXJlcXVpcmUoXCIuL0RPTVByb3BlcnR5XCIpLFJlYWN0RE9NQ29tcG9uZW50VHJlZT1yZXF1aXJlKFwiLi9SZWFjdERPTUNvbXBvbmVudFRyZWVcIiksUmVhY3RJbnN0cnVtZW50YXRpb249cmVxdWlyZShcIi4vUmVhY3RJbnN0cnVtZW50YXRpb25cIikscXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXI9cmVxdWlyZShcIi4vcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXJcIiksd2FybmluZz1yZXF1aXJlKFwiZmJqcy9saWIvd2FybmluZ1wiKSxWQUxJRF9BVFRSSUJVVEVfTkFNRV9SRUdFWD1uZXcgUmVnRXhwKFwiXltcIitET01Qcm9wZXJ0eS5BVFRSSUJVVEVfTkFNRV9TVEFSVF9DSEFSK1wiXVtcIitET01Qcm9wZXJ0eS5BVFRSSUJVVEVfTkFNRV9DSEFSK1wiXSokXCIpLGlsbGVnYWxBdHRyaWJ1dGVOYW1lQ2FjaGU9e30sdmFsaWRhdGVkQXR0cmlidXRlTmFtZUNhY2hlPXt9O2Z1bmN0aW9uIGlzQXR0cmlidXRlTmFtZVNhZmUoZSl7cmV0dXJuISF2YWxpZGF0ZWRBdHRyaWJ1dGVOYW1lQ2FjaGUuaGFzT3duUHJvcGVydHkoZSl8fCFpbGxlZ2FsQXR0cmlidXRlTmFtZUNhY2hlLmhhc093blByb3BlcnR5KGUpJiYoVkFMSURfQVRUUklCVVRFX05BTUVfUkVHRVgudGVzdChlKT8odmFsaWRhdGVkQXR0cmlidXRlTmFtZUNhY2hlW2VdPSEwLCEwKTooaWxsZWdhbEF0dHJpYnV0ZU5hbWVDYWNoZVtlXT0hMCxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ3YXJuaW5nKCExLFwiSW52YWxpZCBhdHRyaWJ1dGUgbmFtZTogYCVzYFwiLGUpLCExKSl9ZnVuY3Rpb24gc2hvdWxkSWdub3JlVmFsdWUoZSx0KXtyZXR1cm4gbnVsbD09dHx8ZS5oYXNCb29sZWFuVmFsdWUmJiF0fHxlLmhhc051bWVyaWNWYWx1ZSYmaXNOYU4odCl8fGUuaGFzUG9zaXRpdmVOdW1lcmljVmFsdWUmJnQ8MXx8ZS5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlJiYhMT09PXR9dmFyIERPTVByb3BlcnR5T3BlcmF0aW9ucz17Y3JlYXRlTWFya3VwRm9ySUQ6ZnVuY3Rpb24oZSl7cmV0dXJuIERPTVByb3BlcnR5LklEX0FUVFJJQlVURV9OQU1FK1wiPVwiK3F1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyKGUpfSxzZXRBdHRyaWJ1dGVGb3JJRDpmdW5jdGlvbihlLHQpe2Uuc2V0QXR0cmlidXRlKERPTVByb3BlcnR5LklEX0FUVFJJQlVURV9OQU1FLHQpfSxjcmVhdGVNYXJrdXBGb3JSb290OmZ1bmN0aW9uKCl7cmV0dXJuIERPTVByb3BlcnR5LlJPT1RfQVRUUklCVVRFX05BTUUrJz1cIlwiJ30sc2V0QXR0cmlidXRlRm9yUm9vdDpmdW5jdGlvbihlKXtlLnNldEF0dHJpYnV0ZShET01Qcm9wZXJ0eS5ST09UX0FUVFJJQlVURV9OQU1FLFwiXCIpfSxjcmVhdGVNYXJrdXBGb3JQcm9wZXJ0eTpmdW5jdGlvbihlLHQpe3ZhciByPURPTVByb3BlcnR5LnByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkoZSk/RE9NUHJvcGVydHkucHJvcGVydGllc1tlXTpudWxsO2lmKHIpe2lmKHNob3VsZElnbm9yZVZhbHVlKHIsdCkpcmV0dXJuXCJcIjt2YXIgbz1yLmF0dHJpYnV0ZU5hbWU7cmV0dXJuIHIuaGFzQm9vbGVhblZhbHVlfHxyLmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWUmJiEwPT09dD9vKyc9XCJcIic6bytcIj1cIitxdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3Nlcih0KX1yZXR1cm4gRE9NUHJvcGVydHkuaXNDdXN0b21BdHRyaWJ1dGUoZSk/bnVsbD09dD9cIlwiOmUrXCI9XCIrcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIodCk6bnVsbH0sY3JlYXRlTWFya3VwRm9yQ3VzdG9tQXR0cmlidXRlOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGlzQXR0cmlidXRlTmFtZVNhZmUoZSkmJm51bGwhPXQ/ZStcIj1cIitxdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3Nlcih0KTpcIlwifSxzZXRWYWx1ZUZvclByb3BlcnR5OmZ1bmN0aW9uKGUsdCxyKXt2YXIgbz1ET01Qcm9wZXJ0eS5wcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KHQpP0RPTVByb3BlcnR5LnByb3BlcnRpZXNbdF06bnVsbDtpZihvKXt2YXIgYT1vLm11dGF0aW9uTWV0aG9kO2lmKGEpYShlLHIpO2Vsc2V7aWYoc2hvdWxkSWdub3JlVmFsdWUobyxyKSlyZXR1cm4gdm9pZCB0aGlzLmRlbGV0ZVZhbHVlRm9yUHJvcGVydHkoZSx0KTtpZihvLm11c3RVc2VQcm9wZXJ0eSllW28ucHJvcGVydHlOYW1lXT1yO2Vsc2V7dmFyIHU9by5hdHRyaWJ1dGVOYW1lLG49by5hdHRyaWJ1dGVOYW1lc3BhY2U7bj9lLnNldEF0dHJpYnV0ZU5TKG4sdSxcIlwiK3IpOm8uaGFzQm9vbGVhblZhbHVlfHxvLmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWUmJiEwPT09cj9lLnNldEF0dHJpYnV0ZSh1LFwiXCIpOmUuc2V0QXR0cmlidXRlKHUsXCJcIityKX19fWVsc2UgaWYoRE9NUHJvcGVydHkuaXNDdXN0b21BdHRyaWJ1dGUodCkpcmV0dXJuIHZvaWQgRE9NUHJvcGVydHlPcGVyYXRpb25zLnNldFZhbHVlRm9yQXR0cmlidXRlKGUsdCxyKTtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXt2YXIgaT17fTtpW3RdPXIsUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uSG9zdE9wZXJhdGlvbih7aW5zdGFuY2VJRDpSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0SW5zdGFuY2VGcm9tTm9kZShlKS5fZGVidWdJRCx0eXBlOlwidXBkYXRlIGF0dHJpYnV0ZVwiLHBheWxvYWQ6aX0pfX0sc2V0VmFsdWVGb3JBdHRyaWJ1dGU6ZnVuY3Rpb24oZSx0LHIpe2lmKGlzQXR0cmlidXRlTmFtZVNhZmUodCkmJihudWxsPT1yP2UucmVtb3ZlQXR0cmlidXRlKHQpOmUuc2V0QXR0cmlidXRlKHQsXCJcIityKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKSl7dmFyIG89e307b1t0XT1yLFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkhvc3RPcGVyYXRpb24oe2luc3RhbmNlSUQ6UmVhY3RET01Db21wb25lbnRUcmVlLmdldEluc3RhbmNlRnJvbU5vZGUoZSkuX2RlYnVnSUQsdHlwZTpcInVwZGF0ZSBhdHRyaWJ1dGVcIixwYXlsb2FkOm99KX19LGRlbGV0ZVZhbHVlRm9yQXR0cmlidXRlOmZ1bmN0aW9uKGUsdCl7ZS5yZW1vdmVBdHRyaWJ1dGUodCksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uSG9zdE9wZXJhdGlvbih7aW5zdGFuY2VJRDpSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0SW5zdGFuY2VGcm9tTm9kZShlKS5fZGVidWdJRCx0eXBlOlwicmVtb3ZlIGF0dHJpYnV0ZVwiLHBheWxvYWQ6dH0pfSxkZWxldGVWYWx1ZUZvclByb3BlcnR5OmZ1bmN0aW9uKGUsdCl7dmFyIHI9RE9NUHJvcGVydHkucHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eSh0KT9ET01Qcm9wZXJ0eS5wcm9wZXJ0aWVzW3RdOm51bGw7aWYocil7dmFyIG89ci5tdXRhdGlvbk1ldGhvZDtpZihvKW8oZSx2b2lkIDApO2Vsc2UgaWYoci5tdXN0VXNlUHJvcGVydHkpe3ZhciBhPXIucHJvcGVydHlOYW1lO3IuaGFzQm9vbGVhblZhbHVlP2VbYV09ITE6ZVthXT1cIlwifWVsc2UgZS5yZW1vdmVBdHRyaWJ1dGUoci5hdHRyaWJ1dGVOYW1lKX1lbHNlIERPTVByb3BlcnR5LmlzQ3VzdG9tQXR0cmlidXRlKHQpJiZlLnJlbW92ZUF0dHJpYnV0ZSh0KTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25Ib3N0T3BlcmF0aW9uKHtpbnN0YW5jZUlEOlJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXRJbnN0YW5jZUZyb21Ob2RlKGUpLl9kZWJ1Z0lELHR5cGU6XCJyZW1vdmUgYXR0cmlidXRlXCIscGF5bG9hZDp0fSl9fTttb2R1bGUuZXhwb3J0cz1ET01Qcm9wZXJ0eU9wZXJhdGlvbnM7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa1JQVFZCeWIzQmxjblI1VDNCbGNtRjBhVzl1Y3k1cWN5SmRMQ0p1WVcxbGN5STZXeUpFVDAxUWNtOXdaWEowZVNJc0luSmxjWFZwY21VaUxDSlNaV0ZqZEVSUFRVTnZiWEJ2Ym1WdWRGUnlaV1VpTENKU1pXRmpkRWx1YzNSeWRXMWxiblJoZEdsdmJpSXNJbkYxYjNSbFFYUjBjbWxpZFhSbFZtRnNkV1ZHYjNKQ2NtOTNjMlZ5SWl3aWQyRnlibWx1WnlJc0lsWkJURWxFWDBGVVZGSkpRbFZVUlY5T1FVMUZYMUpGUjBWWUlpd2lVbVZuUlhod0lpd2lRVlJVVWtsQ1ZWUkZYMDVCVFVWZlUxUkJVbFJmUTBoQlVpSXNJa0ZVVkZKSlFsVlVSVjlPUVUxRlgwTklRVklpTENKcGJHeGxaMkZzUVhSMGNtbGlkWFJsVG1GdFpVTmhZMmhsSWl3aWRtRnNhV1JoZEdWa1FYUjBjbWxpZFhSbFRtRnRaVU5oWTJobElpd2lhWE5CZEhSeWFXSjFkR1ZPWVcxbFUyRm1aU0lzSW1GMGRISnBZblYwWlU1aGJXVWlMQ0pvWVhOUGQyNVFjbTl3WlhKMGVTSXNJblJsYzNRaUxDSndjbTlqWlhOeklpd2laVzUySWl3aVRrOUVSVjlGVGxZaUxDSnphRzkxYkdSSloyNXZjbVZXWVd4MVpTSXNJbkJ5YjNCbGNuUjVTVzVtYnlJc0luWmhiSFZsSWl3aWFHRnpRbTl2YkdWaGJsWmhiSFZsSWl3aWFHRnpUblZ0WlhKcFkxWmhiSFZsSWl3aWFYTk9ZVTRpTENKb1lYTlFiM05wZEdsMlpVNTFiV1Z5YVdOV1lXeDFaU0lzSW1oaGMwOTJaWEpzYjJGa1pXUkNiMjlzWldGdVZtRnNkV1VpTENKRVQwMVFjbTl3WlhKMGVVOXdaWEpoZEdsdmJuTWlMQ0pqY21WaGRHVk5ZWEpyZFhCR2IzSkpSQ0lzSW1sa0lpd2lTVVJmUVZSVVVrbENWVlJGWDA1QlRVVWlMQ0p6WlhSQmRIUnlhV0oxZEdWR2IzSkpSQ0lzSW01dlpHVWlMQ0p6WlhSQmRIUnlhV0oxZEdVaUxDSmpjbVZoZEdWTllYSnJkWEJHYjNKU2IyOTBJaXdpVWs5UFZGOUJWRlJTU1VKVlZFVmZUa0ZOUlNJc0luTmxkRUYwZEhKcFluVjBaVVp2Y2xKdmIzUWlMQ0pqY21WaGRHVk5ZWEpyZFhCR2IzSlFjbTl3WlhKMGVTSXNJbTVoYldVaUxDSndjbTl3WlhKMGFXVnpJaXdpYVhORGRYTjBiMjFCZEhSeWFXSjFkR1VpTENKamNtVmhkR1ZOWVhKcmRYQkdiM0pEZFhOMGIyMUJkSFJ5YVdKMWRHVWlMQ0p6WlhSV1lXeDFaVVp2Y2xCeWIzQmxjblI1SWl3aWJYVjBZWFJwYjI1TlpYUm9iMlFpTENKMGFHbHpJaXdpWkdWc1pYUmxWbUZzZFdWR2IzSlFjbTl3WlhKMGVTSXNJbTExYzNSVmMyVlFjbTl3WlhKMGVTSXNJbkJ5YjNCbGNuUjVUbUZ0WlNJc0ltNWhiV1Z6Y0dGalpTSXNJbUYwZEhKcFluVjBaVTVoYldWemNHRmpaU0lzSW5ObGRFRjBkSEpwWW5WMFpVNVRJaXdpYzJWMFZtRnNkV1ZHYjNKQmRIUnlhV0oxZEdVaUxDSndZWGxzYjJGa0lpd2laR1ZpZFdkVWIyOXNJaXdpYjI1SWIzTjBUM0JsY21GMGFXOXVJaXdpYVc1emRHRnVZMlZKUkNJc0ltZGxkRWx1YzNSaGJtTmxSbkp2YlU1dlpHVWlMQ0pmWkdWaWRXZEpSQ0lzSW5SNWNHVWlMQ0p5WlcxdmRtVkJkSFJ5YVdKMWRHVWlMQ0prWld4bGRHVldZV3gxWlVadmNrRjBkSEpwWW5WMFpTSXNJblZ1WkdWbWFXNWxaQ0lzSW5CeWIzQk9ZVzFsSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCVVVFc1lVRkZRU3hKUVVGSlFTeFpRVUZqUXl4UlFVRlJMR2xDUVVOMFFrTXNjMEpCUVhkQ1JDeFJRVUZSTERKQ1FVTm9RMFVzY1VKQlFYVkNSaXhSUVVGUkxEQkNRVVV2UWtjc09FSkJRV2REU0N4UlFVRlJMRzFEUVVONFEwa3NVVUZCVlVvc1VVRkJVU3h2UWtGRmJFSkxMREpDUVVFMlFpeEpRVUZKUXl4UFFVRlBMRXRCUVU5UUxGbEJRVmxSTERCQ1FVRTBRaXhMUVVGUFVpeFpRVUZaVXl4dlFrRkJjMElzVDBGRGFFbERMREJDUVVFMFFpeEhRVU0xUWtNc05FSkJRVGhDTEVkQlJXeERMRk5CUVZORExHOUNRVUZ2UWtNc1IwRkRNMElzVVVGQlNVWXNORUpCUVRSQ1J5eGxRVUZsUkN4TFFVY3pRMGdzTUVKQlFUQkNTU3hsUVVGbFJDeExRVWQ2UTFBc01rSkJRVEpDVXl4TFFVRkxSaXhKUVVOc1EwWXNORUpCUVRSQ1JTeEpRVUZwUWl4SFFVTjBReXhKUVVWVVNDd3dRa0ZCTUVKSExFbEJRV2xDTEVWQlEyeENMR1ZCUVhwQ1J5eFJRVUZSUXl4SlFVRkpReXhWUVVFMFFtSXNVMEZCVVN4RlFVRlBMQ3RDUVVGblExRXNTVUZEYUVZc1NVRkhWQ3hUUVVGVFRTeHJRa0ZCYTBKRExFVkJRV05ETEVkQlEzWkRMRTlCUVdkQ0xFMUJRVlJCTEVkQlFXbENSQ3hGUVVGaFJTeHJRa0ZCYjBKRUxFZEJRVk5FTEVWQlFXRkhMR2xDUVVGdFFrTXNUVUZCVFVnc1NVRkJWVVFzUlVGQllVc3NlVUpCUVRKQ1NpeEZRVUZSTEVkQlFVdEVMRVZCUVdGTkxEUkNRVUYxUXl4SlFVRldUQ3hGUVUxdVRpeEpRVUZKVFN4elFrRkJkMElzUTBGUE1VSkRMR3RDUVVGdFFpeFRRVUZWUXl4SFFVTXpRaXhQUVVGUE4wSXNXVUZCV1RoQ0xHdENRVUZ2UWl4SlFVRk5NVUlzT0VKQlFUaENlVUlzU1VGSE4wVkZMR3RDUVVGdFFpeFRRVUZWUXl4RlFVRk5TQ3hIUVVOcVEwY3NSVUZCUzBNc1lVRkJZV3BETEZsQlFWazRRaXhyUWtGQmJVSkVMRWxCUjI1RVN5eHZRa0ZCY1VJc1YwRkRia0lzVDBGQlQyeERMRmxCUVZsdFF5eHZRa0ZCYzBJc1QwRkhNME5ETEc5Q1FVRnhRaXhUUVVGVlNpeEhRVU0zUWtFc1JVRkJTME1zWVVGQllXcERMRmxCUVZsdFF5eHZRa0ZCY1VJc1MwRlZja1JGTEhkQ1FVRjVRaXhUUVVGVlF5eEZRVUZOYWtJc1IwRkRka01zU1VGQlNVUXNSVUZCWlhCQ0xGbEJRVmwxUXl4WFFVRlhla0lzWlVGQlpYZENMRWRCUVZGMFF5eFpRVUZaZFVNc1YwRkJWMFFzUjBGQlVTeExRVU5vUnl4SFFVRkpiRUlzUlVGQll5eERRVU5vUWl4SFFVRkpSQ3hyUWtGQmEwSkRMRVZCUVdORExFZEJRMnhETEUxQlFVOHNSMEZGVkN4SlFVRkpVaXhGUVVGblFrOHNSVUZCWVZBc1kwRkRha01zVDBGQlNVOHNSVUZCWVVVc2FVSkJRVzFDUml4RlFVRmhUU3cwUWtGQmRVTXNTVUZCVmt3c1JVRkRja1ZTTEVWQlFXZENMRTFCUld4Q1FTeEZRVUZuUWl4SlFVRk5WQ3c0UWtGQk9FSnBRaXhIUVVOMFJDeFBRVUZKY2tJc1dVRkJXWGRETEd0Q1FVRnJRa1lzUjBGRE1VSXNUVUZCVkdwQ0xFVkJRMHNzUjBGRlJtbENMRVZCUVU4c1NVRkJUV3hETERoQ1FVRTRRbWxDTEVkQlJUZERMRTFCVlZSdlFpd3JRa0ZCWjBNc1UwRkJWVWdzUlVGQlRXcENMRWRCUXpsRExFOUJRVXRVTEc5Q1FVRnZRakJDTEVsQlFXdENMRTFCUVZScVFpeEZRVWN6UW1sQ0xFVkJRVThzU1VGQlRXeERMRGhDUVVFNFFtbENMRWRCUm5wRExFbEJXVmh4UWl4dlFrRkJjVUlzVTBGQlZWWXNSVUZCVFUwc1JVRkJUV3BDTEVkQlEzcERMRWxCUVVsRUxFVkJRV1Z3UWl4WlFVRlpkVU1zVjBGQlYzcENMR1ZCUVdWM1FpeEhRVUZSZEVNc1dVRkJXWFZETEZkQlFWZEVMRWRCUVZFc1MwRkRhRWNzUjBGQlNXeENMRVZCUVdNc1EwRkRhRUlzU1VGQlNYVkNMRVZCUVdsQ2RrSXNSVUZCWVhWQ0xHVkJRMnhETEVkQlFVbEJMRVZCUTBaQkxFVkJRV1ZZTEVWQlFVMVlMRTlCUTJoQ0xFTkJRVUVzUjBGQlNVWXNhMEpCUVd0Q1F5eEZRVUZqUXl4SFFVVjZReXhaUVVSQmRVSXNTMEZCUzBNc2RVSkJRWFZDWWl4RlFVRk5UU3hIUVVVM1FpeEhRVUZKYkVJc1JVRkJZVEJDTEdkQ1FVZDBRbVFzUlVGQlMxb3NSVUZCWVRKQ0xHTkJRV2RDTVVJc1RVRkROMElzUTBGRFRDeEpRVUZKVWl4RlFVRm5RazhzUlVGQllWQXNZMEZETjBKdFF5eEZRVUZaTlVJc1JVRkJZVFpDTEcxQ1FVZDZRa1FzUlVGRFJtaENMRVZCUVV0clFpeGxRVUZsUml4RlFVRlhia01zUlVGQlpTeEhRVUZMVVN4SFFVTXhRMFFzUlVGQllVVXNhVUpCUVcxQ1JpeEZRVUZoVFN3MFFrRkJkVU1zU1VGQlZrd3NSVUZEYmtaWExFVkJRVXRETEdGQlFXRndRaXhGUVVGbExFbEJSV3BEYlVJc1JVRkJTME1zWVVGQllYQkNMRVZCUVdVc1IwRkJTMUVzVlVGSGNrTXNSMEZCU1hKQ0xGbEJRVmwzUXl4clFrRkJhMEpHTEVkQlJYWkRMRmxCUkVGWUxITkNRVUZ6UW5kQ0xIRkNRVUZ4UW01Q0xFVkJRVTFOTEVWQlFVMXFRaXhIUVVsNlJDeEhRVUUyUWl4bFFVRjZRa3dzVVVGQlVVTXNTVUZCU1VNc1UwRkJNa0lzUTBGRGVrTXNTVUZCU1d0RExFVkJRVlVzUjBGRFpFRXNSVUZCVVdRc1IwRkJVV3BDTEVWQlEyaENiRUlzY1VKQlFYRkNhMFFzVlVGQlZVTXNaMEpCUVdkQ0xFTkJRemREUXl4WFFVRlpja1FzYzBKQlFYTkNjMFFzYjBKQlFXOUNlRUlzUjBGQlRYbENMRk5CUXpWRVF5eExRVUZOTEcxQ1FVTk9UaXhSUVVGVFFTeE5RVXRtUkN4eFFrRkJjMElzVTBGQlZXNUNMRVZCUVUxTkxFVkJRVTFxUWl4SFFVTXhReXhIUVVGTFZDeHZRa0ZCYjBJd1FpeExRVWRhTEUxQlFWUnFRaXhGUVVOR1Z5eEZRVUZMTWtJc1owSkJRV2RDY2tJc1IwRkZja0pPTEVWQlFVdERMR0ZCUVdGTExFVkJRVTBzUjBGQlMycENMRWRCUjBZc1pVRkJla0pNTEZGQlFWRkRMRWxCUVVsRExGVkJRVEpDTEVOQlEzcERMRWxCUVVsclF5eEZRVUZWTEVkQlEyUkJMRVZCUVZGa0xFZEJRVkZxUWl4RlFVTm9RbXhDTEhGQ1FVRnhRbXRFTEZWQlFWVkRMR2RDUVVGblFpeERRVU0zUTBNc1YwRkJXWEpFTEhOQ1FVRnpRbk5FTEc5Q1FVRnZRbmhDTEVkQlFVMTVRaXhUUVVNMVJFTXNTMEZCVFN4dFFrRkRUazRzVVVGQlUwRXNUVUZYWmxFc2QwSkJRWGxDTEZOQlFWVTFRaXhGUVVGTlRTeEhRVU4yUTA0c1JVRkJTekpDTEdkQ1FVRm5RbkpDTEVkQlExRXNaVUZCZWtKMFFpeFJRVUZSUXl4SlFVRkpReXhWUVVOa1ppeHhRa0ZCY1VKclJDeFZRVUZWUXl4blFrRkJaMElzUTBGRE4wTkRMRmRCUVZseVJDeHpRa0ZCYzBKelJDeHZRa0ZCYjBKNFFpeEhRVUZOZVVJc1UwRkROVVJETEV0QlFVMHNiVUpCUTA1T0xGRkJRVk5rTEV0QlYyWlBMSFZDUVVGM1FpeFRRVUZWWWl4RlFVRk5UU3hIUVVOMFF5eEpRVUZKYkVJc1JVRkJaWEJDTEZsQlFWbDFReXhYUVVGWGVrSXNaVUZCWlhkQ0xFZEJRVkYwUXl4WlFVRlpkVU1zVjBGQlYwUXNSMEZCVVN4TFFVTm9SeXhIUVVGSmJFSXNSVUZCWXl4RFFVTm9RaXhKUVVGSmRVSXNSVUZCYVVKMlFpeEZRVUZoZFVJc1pVRkRiRU1zUjBGQlNVRXNSVUZEUmtFc1JVRkJaVmdzVDBGQlRUWkNMRkZCUTJoQ0xFZEJRVWw2UXl4RlFVRmhNRUlzWjBKQlFXbENMRU5CUTNaRExFbEJRVWxuUWl4RlFVRlhNVU1zUlVGQllUSkNMR0ZCUTNoQ00wSXNSVUZCWVVVc1owSkJRMlpWTEVWQlFVczRRaXhKUVVGWkxFVkJSV3BDT1VJc1JVRkJTemhDTEVkQlFWa3NVVUZIYmtJNVFpeEZRVUZMTWtJc1owSkJRV2RDZGtNc1JVRkJZVkFzYjBKQlJUTkNZaXhaUVVGWmQwTXNhMEpCUVd0Q1JpeEpRVU4yUTA0c1JVRkJTekpDTEdkQ1FVRm5RbkpDTEVkQlIwMHNaVUZCZWtKMFFpeFJRVUZSUXl4SlFVRkpReXhWUVVOa1ppeHhRa0ZCY1VKclJDeFZRVUZWUXl4blFrRkJaMElzUTBGRE4wTkRMRmRCUVZseVJDeHpRa0ZCYzBKelJDeHZRa0ZCYjBKNFFpeEhRVUZOZVVJc1UwRkROVVJETEV0QlFVMHNiVUpCUTA1T0xGRkJRVk5rTEUxQlRXcENlVUlzVDBGQlQwTXNVVUZCVlhKRElpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDNKbFlXTjBMV1J2YlM5c2FXSXZSRTlOVUhKdmNHVnlkSGxQY0dWeVlYUnBiMjV6TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgX3Byb2RJbnZhcmlhbnQ9cmVxdWlyZShcIi4vcmVhY3RQcm9kSW52YXJpYW50XCIpLERPTUxhenlUcmVlPXJlcXVpcmUoXCIuL0RPTUxhenlUcmVlXCIpLEV4ZWN1dGlvbkVudmlyb25tZW50PXJlcXVpcmUoXCJmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKSxjcmVhdGVOb2Rlc0Zyb21NYXJrdXA9cmVxdWlyZShcImZianMvbGliL2NyZWF0ZU5vZGVzRnJvbU1hcmt1cFwiKSxlbXB0eUZ1bmN0aW9uPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uXCIpLGludmFyaWFudD1yZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpLERhbmdlcj17ZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXA6ZnVuY3Rpb24oZSxyKXtpZihFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET018fChcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcImRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwKC4uLik6IENhbm5vdCByZW5kZXIgbWFya3VwIGluIGEgd29ya2VyIHRocmVhZC4gTWFrZSBzdXJlIGB3aW5kb3dgIGFuZCBgZG9jdW1lbnRgIGFyZSBhdmFpbGFibGUgZ2xvYmFsbHkgYmVmb3JlIHJlcXVpcmluZyBSZWFjdCB3aGVuIHVuaXQgdGVzdGluZyBvciB1c2UgUmVhY3RET01TZXJ2ZXIucmVuZGVyVG9TdHJpbmcoKSBmb3Igc2VydmVyIHJlbmRlcmluZy5cIik6X3Byb2RJbnZhcmlhbnQoXCI1NlwiKSkscnx8KFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwiZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXAoLi4uKTogTWlzc2luZyBtYXJrdXAuXCIpOl9wcm9kSW52YXJpYW50KFwiNTdcIikpLFwiSFRNTFwiPT09ZS5ub2RlTmFtZSYmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwiZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXAoLi4uKTogQ2Fubm90IHJlcGxhY2UgbWFya3VwIG9mIHRoZSA8aHRtbD4gbm9kZS4gVGhpcyBpcyBiZWNhdXNlIGJyb3dzZXIgcXVpcmtzIG1ha2UgdGhpcyB1bnJlbGlhYmxlIGFuZC9vciBzbG93LiBJZiB5b3Ugd2FudCB0byByZW5kZXIgdG8gdGhlIHJvb3QgeW91IG11c3QgdXNlIHNlcnZlciByZW5kZXJpbmcuIFNlZSBSZWFjdERPTVNlcnZlci5yZW5kZXJUb1N0cmluZygpLlwiKTpfcHJvZEludmFyaWFudChcIjU4XCIpKSxcInN0cmluZ1wiPT10eXBlb2Ygcil7dmFyIG49Y3JlYXRlTm9kZXNGcm9tTWFya3VwKHIsZW1wdHlGdW5jdGlvbilbMF07ZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChuLGUpfWVsc2UgRE9NTGF6eVRyZWUucmVwbGFjZUNoaWxkV2l0aFRyZWUoZSxyKX19O21vZHVsZS5leHBvcnRzPURhbmdlcjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrUmhibWRsY2k1cWN5SmRMQ0p1WVcxbGN5STZXeUpmY0hKdlpFbHVkbUZ5YVdGdWRDSXNJbkpsY1hWcGNtVWlMQ0pFVDAxTVlYcDVWSEpsWlNJc0lrVjRaV04xZEdsdmJrVnVkbWx5YjI1dFpXNTBJaXdpWTNKbFlYUmxUbTlrWlhOR2NtOXRUV0Z5YTNWd0lpd2laVzF3ZEhsR2RXNWpkR2x2YmlJc0ltbHVkbUZ5YVdGdWRDSXNJa1JoYm1kbGNpSXNJbVJoYm1kbGNtOTFjMng1VW1Wd2JHRmpaVTV2WkdWWGFYUm9UV0Z5YTNWd0lpd2liMnhrUTJocGJHUWlMQ0p0WVhKcmRYQWlMQ0pqWVc1VmMyVkVUMDBpTENKd2NtOWpaWE56SWl3aVpXNTJJaXdpVGs5RVJWOUZUbFlpTENKdWIyUmxUbUZ0WlNJc0ltNWxkME5vYVd4a0lpd2ljR0Z5Wlc1MFRtOWtaU0lzSW5KbGNHeGhZMlZEYUdsc1pDSXNJbkpsY0d4aFkyVkRhR2xzWkZkcGRHaFVjbVZsSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCVVVFc1lVRkZRU3hKUVVGSlFTeGxRVUZwUWtNc1VVRkJVU3gzUWtGRmVrSkRMRmxCUVdORUxGRkJRVkVzYVVKQlEzUkNSU3h4UWtGQmRVSkdMRkZCUVZFc2FVTkJSUzlDUnl4elFrRkJkMEpJTEZGQlFWRXNhME5CUTJoRFNTeGpRVUZuUWtvc1VVRkJVU3d3UWtGRGVFSkxMRlZCUVZsTUxGRkJRVkVzYzBKQlJYQkNUU3hQUVVGVExFTkJVMWhETEdsRFFVRnJReXhUUVVGVlF5eEZRVUZWUXl4SFFVdHdSQ3hIUVVwRFVDeHhRa0ZCY1VKUkxGbEJRWEZETEdWQlFYcENReXhSUVVGUlF5eEpRVUZKUXl4VFFVRTBRbElzVjBGQlZTeEZRVUZQTEd0UVFVRnZVRTRzWlVGQlpTeFBRVU0zVmxVc1NVRkJhME1zWlVGQmVrSkZMRkZCUVZGRExFbEJRVWxETEZOQlFUUkNVaXhYUVVGVkxFVkJRVThzTUVSQlFUUkVUaXhsUVVGbExFOUJRM1JJTEZOQlFYUkNVeXhGUVVGVFRTeFhRVUZuUkN4bFFVRjZRa2dzVVVGQlVVTXNTVUZCU1VNc1UwRkJORUpTTEZkQlFWVXNSVUZCVHl3eVVFRkJObEJPTEdWQlFXVXNUMEZGYWxZc2FVSkJRVmhWTEVWQlFYRkNMRU5CUXpsQ0xFbEJRVWxOTEVWQlFWZGFMSE5DUVVGelFrMHNSVUZCVVV3c1pVRkJaU3hIUVVNMVJFa3NSVUZCVTFFc1YwRkJWME1zWVVGQllVWXNSVUZCVlZBc1VVRkZNME5RTEZsQlFWbHBRaXh4UWtGQmNVSldMRVZCUVZWRExFdEJTMnBFVlN4UFFVRlBReXhSUVVGVlpDSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzFrYjIwdmJHbGlMMFJoYm1kbGNpNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIERlZmF1bHRFdmVudFBsdWdpbk9yZGVyPVtcIlJlc3BvbmRlckV2ZW50UGx1Z2luXCIsXCJTaW1wbGVFdmVudFBsdWdpblwiLFwiVGFwRXZlbnRQbHVnaW5cIixcIkVudGVyTGVhdmVFdmVudFBsdWdpblwiLFwiQ2hhbmdlRXZlbnRQbHVnaW5cIixcIlNlbGVjdEV2ZW50UGx1Z2luXCIsXCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXCJdO21vZHVsZS5leHBvcnRzPURlZmF1bHRFdmVudFBsdWdpbk9yZGVyO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtSbFptRjFiSFJGZG1WdWRGQnNkV2RwYms5eVpHVnlMbXB6SWwwc0ltNWhiV1Z6SWpwYklrUmxabUYxYkhSRmRtVnVkRkJzZFdkcGJrOXlaR1Z5SWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCVVVFc1lVRlpRU3hKUVVGSlFTeDNRa0ZCTUVJc1EwRkJReXgxUWtGQmQwSXNiMEpCUVhGQ0xHbENRVUZyUWl4M1FrRkJlVUlzYjBKQlFYRkNMRzlDUVVGeFFpd3dRa0ZGYWt0RExFOUJRVTlETEZGQlFWVkdJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwzSmxZV04wTFdSdmJTOXNhV0l2UkdWbVlYVnNkRVYyWlc1MFVHeDFaMmx1VDNKa1pYSXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciBFdmVudFByb3BhZ2F0b3JzPXJlcXVpcmUoXCIuL0V2ZW50UHJvcGFnYXRvcnNcIiksUmVhY3RET01Db21wb25lbnRUcmVlPXJlcXVpcmUoXCIuL1JlYWN0RE9NQ29tcG9uZW50VHJlZVwiKSxTeW50aGV0aWNNb3VzZUV2ZW50PXJlcXVpcmUoXCIuL1N5bnRoZXRpY01vdXNlRXZlbnRcIiksZXZlbnRUeXBlcz17bW91c2VFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VFbnRlclwiLGRlcGVuZGVuY2llczpbXCJ0b3BNb3VzZU91dFwiLFwidG9wTW91c2VPdmVyXCJdfSxtb3VzZUxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUxlYXZlXCIsZGVwZW5kZW5jaWVzOltcInRvcE1vdXNlT3V0XCIsXCJ0b3BNb3VzZU92ZXJcIl19fSxFbnRlckxlYXZlRXZlbnRQbHVnaW49e2V2ZW50VHlwZXM6ZXZlbnRUeXBlcyxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGUsdCxuLG8pe2lmKFwidG9wTW91c2VPdmVyXCI9PT1lJiYobi5yZWxhdGVkVGFyZ2V0fHxuLmZyb21FbGVtZW50KSlyZXR1cm4gbnVsbDtpZihcInRvcE1vdXNlT3V0XCIhPT1lJiZcInRvcE1vdXNlT3ZlclwiIT09ZSlyZXR1cm4gbnVsbDt2YXIgcixhLHU7aWYoby53aW5kb3c9PT1vKXI9bztlbHNle3ZhciBzPW8ub3duZXJEb2N1bWVudDtyPXM/cy5kZWZhdWx0Vmlld3x8cy5wYXJlbnRXaW5kb3c6d2luZG93fWlmKFwidG9wTW91c2VPdXRcIj09PWUpe2E9dDt2YXIgdj1uLnJlbGF0ZWRUYXJnZXR8fG4udG9FbGVtZW50O3U9dj9SZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUodik6bnVsbH1lbHNlIGE9bnVsbCx1PXQ7aWYoYT09PXUpcmV0dXJuIG51bGw7dmFyIGw9bnVsbD09YT9yOlJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKGEpLHA9bnVsbD09dT9yOlJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKHUpLGk9U3ludGhldGljTW91c2VFdmVudC5nZXRQb29sZWQoZXZlbnRUeXBlcy5tb3VzZUxlYXZlLGEsbixvKTtpLnR5cGU9XCJtb3VzZWxlYXZlXCIsaS50YXJnZXQ9bCxpLnJlbGF0ZWRUYXJnZXQ9cDt2YXIgbT1TeW50aGV0aWNNb3VzZUV2ZW50LmdldFBvb2xlZChldmVudFR5cGVzLm1vdXNlRW50ZXIsdSxuLG8pO3JldHVybiBtLnR5cGU9XCJtb3VzZWVudGVyXCIsbS50YXJnZXQ9cCxtLnJlbGF0ZWRUYXJnZXQ9bCxFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlcyhpLG0sYSx1KSxbaSxtXX19O21vZHVsZS5leHBvcnRzPUVudGVyTGVhdmVFdmVudFBsdWdpbjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrVnVkR1Z5VEdWaGRtVkZkbVZ1ZEZCc2RXZHBiaTVxY3lKZExDSnVZVzFsY3lJNld5SkZkbVZ1ZEZCeWIzQmhaMkYwYjNKeklpd2ljbVZ4ZFdseVpTSXNJbEpsWVdOMFJFOU5RMjl0Y0c5dVpXNTBWSEpsWlNJc0lsTjViblJvWlhScFkwMXZkWE5sUlhabGJuUWlMQ0psZG1WdWRGUjVjR1Z6SWl3aWJXOTFjMlZGYm5SbGNpSXNJbkpsWjJsemRISmhkR2x2Yms1aGJXVWlMQ0prWlhCbGJtUmxibU5wWlhNaUxDSnRiM1Z6WlV4bFlYWmxJaXdpUlc1MFpYSk1aV0YyWlVWMlpXNTBVR3gxWjJsdUlpd2laWGgwY21GamRFVjJaVzUwY3lJc0luUnZjRXhsZG1Wc1ZIbHdaU0lzSW5SaGNtZGxkRWx1YzNRaUxDSnVZWFJwZG1WRmRtVnVkQ0lzSW01aGRHbDJaVVYyWlc1MFZHRnlaMlYwSWl3aWNtVnNZWFJsWkZSaGNtZGxkQ0lzSW1aeWIyMUZiR1Z0Wlc1MElpd2lkMmx1SWl3aVpuSnZiU0lzSW5Sdklpd2lkMmx1Wkc5M0lpd2laRzlqSWl3aWIzZHVaWEpFYjJOMWJXVnVkQ0lzSW1SbFptRjFiSFJXYVdWM0lpd2ljR0Z5Wlc1MFYybHVaRzkzSWl3aWNtVnNZWFJsWkNJc0luUnZSV3hsYldWdWRDSXNJbWRsZEVOc2IzTmxjM1JKYm5OMFlXNWpaVVp5YjIxT2IyUmxJaXdpWm5KdmJVNXZaR1VpTENKblpYUk9iMlJsUm5KdmJVbHVjM1JoYm1ObElpd2lkRzlPYjJSbElpd2liR1ZoZG1VaUxDSm5aWFJRYjI5c1pXUWlMQ0owZVhCbElpd2lkR0Z5WjJWMElpd2laVzUwWlhJaUxDSmhZMk4xYlhWc1lYUmxSVzUwWlhKTVpXRjJaVVJwYzNCaGRHTm9aWE1pTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZSUVN4aFFVVkJMRWxCUVVsQkxHbENRVUZ0UWtNc1VVRkJVU3h6UWtGRE0wSkRMSE5DUVVGM1FrUXNVVUZCVVN3eVFrRkRhRU5GTEc5Q1FVRnpRa1lzVVVGQlVTeDVRa0ZGT1VKSExGZEJRV0VzUTBGRFprTXNWMEZCV1N4RFFVTldReXhwUWtGQmEwSXNaVUZEYkVKRExHRkJRV01zUTBGQlF5eGpRVUZsTEdsQ1FVVm9RME1zVjBGQldTeERRVU5XUml4cFFrRkJhMElzWlVGRGJFSkRMR0ZCUVdNc1EwRkJReXhqUVVGbExHdENRVWs1UWtVc2MwSkJRWGRDTEVOQlF6RkNUQ3hYUVVGWlFTeFhRVk5hVFN4alFVRmxMRk5CUVZWRExFVkJRV05ETEVWQlFWbERMRVZCUVdGRExFZEJRemxFTEVkQlFYRkNMR2xDUVVGcVFrZ3NTVUZCYjBORkxFVkJRVmxGTEdWQlFXbENSaXhGUVVGWlJ5eGhRVU12UlN4UFFVRlBMRXRCUlZRc1IwRkJjVUlzWjBKQlFXcENUQ3hIUVVGdFJDeHBRa0ZCYWtKQkxFVkJSWEJETEU5QlFVOHNTMEZIVkN4SlFVRkpUU3hGUVdOQlF5eEZRVU5CUXl4RlFXUktMRWRCUVVsTUxFVkJRV3RDVFN4VFFVRlhUaXhGUVVVdlFrY3NSVUZCVFVnc1RVRkRSQ3hEUVVWTUxFbEJRVWxQTEVWQlFVMVFMRVZCUVd0Q1VTeGpRVVV4UWt3c1JVRkVSVWtzUlVGRFNVRXNSVUZCU1VVc1lVRkJaVVlzUlVGQlNVY3NZVUZGZGtKS0xFOUJUVllzUjBGQmNVSXNaMEpCUVdwQ1ZDeEZRVUZuUXl4RFFVTnNRMDhzUlVGQlQwNHNSVUZEVUN4SlFVRkpZU3hGUVVGVldpeEZRVUZaUlN4bFFVRnBRa1lzUlVGQldXRXNWVUZEZGtSUUxFVkJRVXROTEVWQlFWVjJRaXh6UWtGQmMwSjVRaXd5UWtGQk1rSkdMRWRCUVZjc1ZVRkhNMFZRTEVWQlFVOHNTMEZEVUVNc1JVRkJTMUFzUlVGSFVDeEhRVUZKVFN4SlFVRlRReXhGUVVWWUxFOUJRVThzUzBGSFZDeEpRVUZKVXl4RlFVRnRRaXhOUVVGU1ZpeEZRVUZsUkN4RlFVRk5aaXh6UWtGQmMwSXlRaXh2UWtGQmIwSllMRWRCUXpGRldTeEZRVUZsTEUxQlFVNVlMRVZCUVdGR0xFVkJRVTFtTEhOQ1FVRnpRakpDTEc5Q1FVRnZRbFlzUjBGRmRFVlpMRVZCUVZFMVFpeHZRa0ZCYjBJMlFpeFZRVUZWTlVJc1YwRkJWMGtzVjBGQldWVXNSVUZCVFV3c1JVRkJZVU1zUjBGRGNFWnBRaXhGUVVGTlJTeExRVUZQTEdGQlEySkdMRVZCUVUxSExFOUJRVk5PTEVWQlEyWkhMRVZCUVUxb1FpeGpRVUZuUW1Vc1JVRkZkRUlzU1VGQlNVc3NSVUZCVVdoRExHOUNRVUZ2UWpaQ0xGVkJRVlUxUWl4WFFVRlhReXhYUVVGWll5eEZRVUZKVGl4RlFVRmhReXhIUVU5c1JpeFBRVTVCY1VJc1JVRkJUVVlzUzBGQlR5eGhRVU5pUlN4RlFVRk5SQ3hQUVVGVFNpeEZRVU5tU3l4RlFVRk5jRUlzWTBGQlowSmhMRVZCUlhSQ05VSXNhVUpCUVdsQ2IwTXNLMEpCUVN0Q1RDeEZRVUZQU1N4RlFVRlBha0lzUlVGQlRVTXNSMEZGTjBRc1EwRkJRMWtzUlVGQlQwa3NTMEZKYmtKRkxFOUJRVTlETEZGQlFWVTNRaUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEMxa2IyMHZiR2xpTDBWdWRHVnlUR1ZoZG1WRmRtVnVkRkJzZFdkcGJpNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9wcm9kSW52YXJpYW50PXJlcXVpcmUoXCIuL3JlYWN0UHJvZEludmFyaWFudFwiKSxFdmVudFBsdWdpblJlZ2lzdHJ5PXJlcXVpcmUoXCIuL0V2ZW50UGx1Z2luUmVnaXN0cnlcIiksRXZlbnRQbHVnaW5VdGlscz1yZXF1aXJlKFwiLi9FdmVudFBsdWdpblV0aWxzXCIpLFJlYWN0RXJyb3JVdGlscz1yZXF1aXJlKFwiLi9SZWFjdEVycm9yVXRpbHNcIiksYWNjdW11bGF0ZUludG89cmVxdWlyZShcIi4vYWNjdW11bGF0ZUludG9cIiksZm9yRWFjaEFjY3VtdWxhdGVkPXJlcXVpcmUoXCIuL2ZvckVhY2hBY2N1bXVsYXRlZFwiKSxpbnZhcmlhbnQ9cmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKSxsaXN0ZW5lckJhbms9e30sZXZlbnRRdWV1ZT1udWxsLGV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZT1mdW5jdGlvbihlLHQpe2UmJihFdmVudFBsdWdpblV0aWxzLmV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlcihlLHQpLGUuaXNQZXJzaXN0ZW50KCl8fGUuY29uc3RydWN0b3IucmVsZWFzZShlKSl9LGV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZVNpbXVsYXRlZD1mdW5jdGlvbihlKXtyZXR1cm4gZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlKGUsITApfSxleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2VUb3BMZXZlbD1mdW5jdGlvbihlKXtyZXR1cm4gZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlKGUsITEpfSxnZXREaWN0aW9uYXJ5S2V5PWZ1bmN0aW9uKGUpe3JldHVyblwiLlwiK2UuX3Jvb3ROb2RlSUR9O2Z1bmN0aW9uIGlzSW50ZXJhY3RpdmUoZSl7cmV0dXJuXCJidXR0b25cIj09PWV8fFwiaW5wdXRcIj09PWV8fFwic2VsZWN0XCI9PT1lfHxcInRleHRhcmVhXCI9PT1lfWZ1bmN0aW9uIHNob3VsZFByZXZlbnRNb3VzZUV2ZW50KGUsdCxuKXtzd2l0Y2goZSl7Y2FzZVwib25DbGlja1wiOmNhc2VcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZVwib25Eb3VibGVDbGlja1wiOmNhc2VcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZVwib25Nb3VzZURvd25cIjpjYXNlXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlXCJvbk1vdXNlTW92ZVwiOmNhc2VcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2VcIm9uTW91c2VVcFwiOmNhc2VcIm9uTW91c2VVcENhcHR1cmVcIjpyZXR1cm4hKCFuLmRpc2FibGVkfHwhaXNJbnRlcmFjdGl2ZSh0KSk7ZGVmYXVsdDpyZXR1cm4hMX19dmFyIEV2ZW50UGx1Z2luSHViPXtpbmplY3Rpb246e2luamVjdEV2ZW50UGx1Z2luT3JkZXI6RXZlbnRQbHVnaW5SZWdpc3RyeS5pbmplY3RFdmVudFBsdWdpbk9yZGVyLGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTpFdmVudFBsdWdpblJlZ2lzdHJ5LmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZX0scHV0TGlzdGVuZXI6ZnVuY3Rpb24oZSx0LG4pe1wiZnVuY3Rpb25cIiE9dHlwZW9mIG4mJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcIkV4cGVjdGVkICVzIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24sIGluc3RlYWQgZ290IHR5cGUgJXNcIix0LHR5cGVvZiBuKTpfcHJvZEludmFyaWFudChcIjk0XCIsdCx0eXBlb2YgbikpO3ZhciByPWdldERpY3Rpb25hcnlLZXkoZSk7KGxpc3RlbmVyQmFua1t0XXx8KGxpc3RlbmVyQmFua1t0XT17fSkpW3JdPW47dmFyIGk9RXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlc1t0XTtpJiZpLmRpZFB1dExpc3RlbmVyJiZpLmRpZFB1dExpc3RlbmVyKGUsdCxuKX0sZ2V0TGlzdGVuZXI6ZnVuY3Rpb24oZSx0KXt2YXIgbj1saXN0ZW5lckJhbmtbdF07aWYoc2hvdWxkUHJldmVudE1vdXNlRXZlbnQodCxlLl9jdXJyZW50RWxlbWVudC50eXBlLGUuX2N1cnJlbnRFbGVtZW50LnByb3BzKSlyZXR1cm4gbnVsbDt2YXIgcj1nZXREaWN0aW9uYXJ5S2V5KGUpO3JldHVybiBuJiZuW3JdfSxkZWxldGVMaXN0ZW5lcjpmdW5jdGlvbihlLHQpe3ZhciBuPUV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbdF07biYmbi53aWxsRGVsZXRlTGlzdGVuZXImJm4ud2lsbERlbGV0ZUxpc3RlbmVyKGUsdCk7dmFyIHI9bGlzdGVuZXJCYW5rW3RdO3ImJmRlbGV0ZSByW2dldERpY3Rpb25hcnlLZXkoZSldfSxkZWxldGVBbGxMaXN0ZW5lcnM6ZnVuY3Rpb24oZSl7dmFyIHQ9Z2V0RGljdGlvbmFyeUtleShlKTtmb3IodmFyIG4gaW4gbGlzdGVuZXJCYW5rKWlmKGxpc3RlbmVyQmFuay5oYXNPd25Qcm9wZXJ0eShuKSYmbGlzdGVuZXJCYW5rW25dW3RdKXt2YXIgcj1FdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW25dO3ImJnIud2lsbERlbGV0ZUxpc3RlbmVyJiZyLndpbGxEZWxldGVMaXN0ZW5lcihlLG4pLGRlbGV0ZSBsaXN0ZW5lckJhbmtbbl1bdF19fSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGUsdCxuLHIpe2Zvcih2YXIgaSx1PUV2ZW50UGx1Z2luUmVnaXN0cnkucGx1Z2lucyxzPTA7czx1Lmxlbmd0aDtzKyspe3ZhciBhPXVbc107aWYoYSl7dmFyIG89YS5leHRyYWN0RXZlbnRzKGUsdCxuLHIpO28mJihpPWFjY3VtdWxhdGVJbnRvKGksbykpfX1yZXR1cm4gaX0sZW5xdWV1ZUV2ZW50czpmdW5jdGlvbihlKXtlJiYoZXZlbnRRdWV1ZT1hY2N1bXVsYXRlSW50byhldmVudFF1ZXVlLGUpKX0scHJvY2Vzc0V2ZW50UXVldWU6ZnVuY3Rpb24oZSl7dmFyIHQ9ZXZlbnRRdWV1ZTtldmVudFF1ZXVlPW51bGwsZm9yRWFjaEFjY3VtdWxhdGVkKHQsZT9leGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2VTaW11bGF0ZWQ6ZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlVG9wTGV2ZWwpLGV2ZW50UXVldWUmJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcInByb2Nlc3NFdmVudFF1ZXVlKCk6IEFkZGl0aW9uYWwgZXZlbnRzIHdlcmUgZW5xdWV1ZWQgd2hpbGUgcHJvY2Vzc2luZyBhbiBldmVudCBxdWV1ZS4gU3VwcG9ydCBmb3IgdGhpcyBoYXMgbm90IHlldCBiZWVuIGltcGxlbWVudGVkLlwiKTpfcHJvZEludmFyaWFudChcIjk1XCIpKSxSZWFjdEVycm9yVXRpbHMucmV0aHJvd0NhdWdodEVycm9yKCl9LF9fcHVyZ2U6ZnVuY3Rpb24oKXtsaXN0ZW5lckJhbms9e319LF9fZ2V0TGlzdGVuZXJCYW5rOmZ1bmN0aW9uKCl7cmV0dXJuIGxpc3RlbmVyQmFua319O21vZHVsZS5leHBvcnRzPUV2ZW50UGx1Z2luSHViO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtWMlpXNTBVR3gxWjJsdVNIVmlMbXB6SWwwc0ltNWhiV1Z6SWpwYklsOXdjbTlrU1c1MllYSnBZVzUwSWl3aWNtVnhkV2x5WlNJc0lrVjJaVzUwVUd4MVoybHVVbVZuYVhOMGNua2lMQ0pGZG1WdWRGQnNkV2RwYmxWMGFXeHpJaXdpVW1WaFkzUkZjbkp2Y2xWMGFXeHpJaXdpWVdOamRXMTFiR0YwWlVsdWRHOGlMQ0ptYjNKRllXTm9RV05qZFcxMWJHRjBaV1FpTENKcGJuWmhjbWxoYm5RaUxDSnNhWE4wWlc1bGNrSmhibXNpTENKbGRtVnVkRkYxWlhWbElpd2laWGhsWTNWMFpVUnBjM0JoZEdOb1pYTkJibVJTWld4bFlYTmxJaXdpWlhabGJuUWlMQ0p6YVcxMWJHRjBaV1FpTENKbGVHVmpkWFJsUkdsemNHRjBZMmhsYzBsdVQzSmtaWElpTENKcGMxQmxjbk5wYzNSbGJuUWlMQ0pqYjI1emRISjFZM1J2Y2lJc0luSmxiR1ZoYzJVaUxDSmxlR1ZqZFhSbFJHbHpjR0YwWTJobGMwRnVaRkpsYkdWaGMyVlRhVzExYkdGMFpXUWlMQ0psSWl3aVpYaGxZM1YwWlVScGMzQmhkR05vWlhOQmJtUlNaV3hsWVhObFZHOXdUR1YyWld3aUxDSm5aWFJFYVdOMGFXOXVZWEo1UzJWNUlpd2lhVzV6ZENJc0lsOXliMjkwVG05a1pVbEVJaXdpYVhOSmJuUmxjbUZqZEdsMlpTSXNJblJoWnlJc0luTm9iM1ZzWkZCeVpYWmxiblJOYjNWelpVVjJaVzUwSWl3aWJtRnRaU0lzSW5SNWNHVWlMQ0p3Y205d2N5SXNJbVJwYzJGaWJHVmtJaXdpUlhabGJuUlFiSFZuYVc1SWRXSWlMQ0pwYm1wbFkzUnBiMjRpTENKcGJtcGxZM1JGZG1WdWRGQnNkV2RwYms5eVpHVnlJaXdpYVc1cVpXTjBSWFpsYm5SUWJIVm5hVzV6UW5sT1lXMWxJaXdpY0hWMFRHbHpkR1Z1WlhJaUxDSnlaV2RwYzNSeVlYUnBiMjVPWVcxbElpd2liR2x6ZEdWdVpYSWlMQ0p3Y205alpYTnpJaXdpWlc1Mklpd2lUazlFUlY5RlRsWWlMQ0pyWlhraUxDSlFiSFZuYVc1TmIyUjFiR1VpTENKeVpXZHBjM1J5WVhScGIyNU9ZVzFsVFc5a2RXeGxjeUlzSW1ScFpGQjFkRXhwYzNSbGJtVnlJaXdpWjJWMFRHbHpkR1Z1WlhJaUxDSmlZVzVyUm05eVVtVm5hWE4wY21GMGFXOXVUbUZ0WlNJc0lsOWpkWEp5Wlc1MFJXeGxiV1Z1ZENJc0ltUmxiR1YwWlV4cGMzUmxibVZ5SWl3aWQybHNiRVJsYkdWMFpVeHBjM1JsYm1WeUlpd2laR1ZzWlhSbFFXeHNUR2x6ZEdWdVpYSnpJaXdpYUdGelQzZHVVSEp2Y0dWeWRIa2lMQ0psZUhSeVlXTjBSWFpsYm5Seklpd2lkRzl3VEdWMlpXeFVlWEJsSWl3aWRHRnlaMlYwU1c1emRDSXNJbTVoZEdsMlpVVjJaVzUwSWl3aWJtRjBhWFpsUlhabGJuUlVZWEpuWlhRaUxDSmxkbVZ1ZEhNaUxDSndiSFZuYVc1eklpd2lhU0lzSW14bGJtZDBhQ0lzSW5CdmMzTnBZbXhsVUd4MVoybHVJaXdpWlhoMGNtRmpkR1ZrUlhabGJuUnpJaXdpWlc1eGRXVjFaVVYyWlc1MGN5SXNJbkJ5YjJObGMzTkZkbVZ1ZEZGMVpYVmxJaXdpY0hKdlkyVnpjMmx1WjBWMlpXNTBVWFZsZFdVaUxDSnlaWFJvY205M1EyRjFaMmgwUlhKeWIzSWlMQ0pmWDNCMWNtZGxJaXdpWDE5blpYUk1hWE4wWlc1bGNrSmhibXNpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZSUVN4aFFVVkJMRWxCUVVsQkxHVkJRV2xDUXl4UlFVRlJMSGRDUVVWNlFrTXNiMEpCUVhOQ1JDeFJRVUZSTEhsQ1FVTTVRa1VzYVVKQlFXMUNSaXhSUVVGUkxITkNRVU16UWtjc1owSkJRV3RDU0N4UlFVRlJMSEZDUVVVeFFra3NaVUZCYVVKS0xGRkJRVkVzYjBKQlEzcENTeXh0UWtGQmNVSk1MRkZCUVZFc2QwSkJRemRDVFN4VlFVRlpUaXhSUVVGUkxITkNRVXR3UWs4c1lVRkJaU3hIUVUxbVF5eFhRVUZoTEV0QlUySkRMRFJDUVVFNFFpeFRRVUZWUXl4RlFVRlBReXhIUVVNM1EwUXNTVUZEUmxJc2FVSkJRV2xDVlN4NVFrRkJlVUpHTEVWQlFVOURMRWRCUlRWRFJDeEZRVUZOUnl4blFrRkRWRWdzUlVGQlRVa3NXVUZCV1VNc1VVRkJVVXdzUzBGSk5VSk5MSEZEUVVGMVF5eFRRVUZWUXl4SFFVTnVSQ3hQUVVGUFVpdzBRa0ZCTkVKUkxFZEJRVWNzU1VGRmNFTkRMRzlEUVVGelF5eFRRVUZWUkN4SFFVTnNSQ3hQUVVGUFVpdzBRa0ZCTkVKUkxFZEJRVWNzU1VGSGNFTkZMR2xDUVVGdFFpeFRRVUZWUXl4SFFVY3ZRaXhOUVVGUExFbEJRVTFCTEVWQlFVdERMR0ZCUjNCQ0xGTkJRVk5ETEdOQlFXTkRMRWRCUTNKQ0xFMUJRV1VzVjBGQlVrRXNSMEZCTkVJc1ZVRkJVa0VzUjBGQk1rSXNWMEZCVWtFc1IwRkJORUlzWVVGQlVrRXNSVUZIY0VVc1UwRkJVME1zZDBKQlFYZENReXhGUVVGTlF5eEZRVUZOUXl4SFFVTXpReXhQUVVGUlJpeEhRVU5PTEVsQlFVc3NWVUZEVEN4SlFVRkxMR2xDUVVOTUxFbEJRVXNzWjBKQlEwd3NTVUZCU3l4MVFrRkRUQ3hKUVVGTExHTkJRMHdzU1VGQlN5eHhRa0ZEVEN4SlFVRkxMR05CUTB3c1NVRkJTeXh4UWtGRFRDeEpRVUZMTEZsQlEwd3NTVUZCU3l4dFFrRkRTQ3hUUVVGVlJTeEZRVUZOUXl4WFFVRlpUaXhqUVVGalNTeEpRVU0xUXl4UlFVTkZMRTlCUVU4c1IwRXdRbUlzU1VGQlNVY3NaVUZCYVVJc1EwRkpia0pETEZWQlFWY3NRMEZMVkVNc2RVSkJRWGRDT1VJc2IwSkJRVzlDT0VJc2RVSkJTelZEUXl4NVFrRkJNRUl2UWl4dlFrRkJiMElyUWl3d1FrRlZhRVJETEZsQlFXRXNVMEZCVldJc1JVRkJUV01zUlVGQmEwSkRMRWRCUTNaQ0xHMUNRVUZpUVN4SlFVRnZSQ3hsUVVGNlFrTXNVVUZCVVVNc1NVRkJTVU1zVTBGQk5FSm9ReXhYUVVGVkxFVkJRVThzTmtSQlFUaEVORUlzVTBGQmVVSkRMRWRCUVZsd1F5eGxRVUZsTEV0QlFVMXRReXhUUVVGNVFrTXNTVUZGT1U4c1NVRkJTVWtzUlVGQlRYQkNMR2xDUVVGcFFrTXNTVUZEUjJJc1lVRkJZVEpDTEV0QlFYTkNNMElzWVVGQllUSkNMRWRCUVc5Q0xFdEJRekZGU3l4SFFVRlBTaXhGUVVVdlFpeEpRVUZKU3l4RlFVRmxka01zYjBKQlFXOUNkME1zZDBKQlFYZENVQ3hIUVVNelJFMHNSMEZCWjBKQkxFVkJRV0ZGTEdkQ1FVTXZRa1lzUlVGQllVVXNaVUZCWlhSQ0xFVkJRVTFqTEVWQlFXdENReXhKUVZONFJGRXNXVUZCWVN4VFFVRlZka0lzUlVGQlRXTXNSMEZITTBJc1NVRkJTVlVzUlVGQk1FSnlReXhoUVVGaE1rSXNSMEZETTBNc1IwRkJTVllzZDBKQlFYZENWU3hGUVVGclFtUXNSVUZCUzNsQ0xHZENRVUZuUW01Q0xFdEJRVTFPTEVWQlFVdDVRaXhuUWtGQlowSnNRaXhQUVVNMVJpeFBRVUZQTEV0QlJWUXNTVUZCU1Zrc1JVRkJUWEJDTEdsQ1FVRnBRa01zUjBGRE0wSXNUMEZCVDNkQ0xFZEJRVEpDUVN4RlFVRjNRa3dzU1VGVE5VUlBMR1ZCUVdkQ0xGTkJRVlV4UWl4RlFVRk5ZeXhIUVVNNVFpeEpRVUZKVFN4RlFVRmxka01zYjBKQlFXOUNkME1zZDBKQlFYZENVQ3hIUVVNelJFMHNSMEZCWjBKQkxFVkJRV0ZQTEc5Q1FVTXZRbEFzUlVGQllVOHNiVUpCUVcxQ00wSXNSVUZCVFdNc1IwRkhlRU1zU1VGQlNWVXNSVUZCTUVKeVF5eGhRVUZoTWtJc1IwRkZka05WTEZWQlJVdEJMRVZCUkVkNlFpeHBRa0ZCYVVKRExFdEJWUzlDTkVJc2JVSkJRVzlDTEZOQlFWVTFRaXhIUVVNMVFpeEpRVUZKYlVJc1JVRkJUWEJDTEdsQ1FVRnBRa01zUjBGRE0wSXNTVUZCU3l4SlFVRkpZeXhMUVVGdlFqTkNMR0ZCUXpOQ0xFZEJRVXRCTEdGQlFXRXdReXhsUVVGbFppeEpRVWsxUWpOQ0xHRkJRV0V5UWl4SFFVRnJRa3NzUjBGQmNFTXNRMEZKUVN4SlFVRkpReXhGUVVGbGRrTXNiMEpCUVc5Q2QwTXNkMEpCUVhkQ1VDeEhRVU16UkUwc1IwRkJaMEpCTEVWQlFXRlBMRzlDUVVNdlFsQXNSVUZCWVU4c2JVSkJRVzFDTTBJc1JVRkJUV01zVlVGSGFrTXpRaXhoUVVGaE1rSXNSMEZCYTBKTExFdEJWekZEVnl4alFVRmxMRk5CUVZWRExFVkJRV05ETEVWQlFWbERMRVZCUVdGRExFZEJSemxFTEVsQlJrRXNTVUZCU1VNc1JVRkRRVU1zUlVGQlZYWkVMRzlDUVVGdlFuVkVMRkZCUTNwQ1F5eEZRVUZKTEVWQlFVZEJMRVZCUVVsRUxFVkJRVkZGTEU5QlFWRkVMRWxCUVVzc1EwRkZka01zU1VGQlNVVXNSVUZCYVVKSUxFVkJRVkZETEVkQlF6ZENMRWRCUVVsRkxFVkJRV2RDTEVOQlEyeENMRWxCUVVsRExFVkJRV3RDUkN4RlFVRmxWQ3hqUVVGalF5eEZRVUZqUXl4RlFVRlpReXhGUVVGaFF5eEhRVU4wUmswc1NVRkRSa3dzUlVGQlUyNUVMR1ZCUVdWdFJDeEZRVUZSU3l4TFFVbDBReXhQUVVGUFRDeEhRVlZVVFN4alFVRmxMRk5CUVZWT0xFZEJRMjVDUVN4SlFVTkdMME1zVjBGQllVb3NaVUZCWlVrc1YwRkJXU3RETEV0QlV6VkRUeXhyUWtGQmJVSXNVMEZCVlc1RUxFZEJSek5DTEVsQlFVbHZSQ3hGUVVGMVFuWkVMRmRCUXpOQ1FTeFhRVUZoTEV0QlJWaElMRzFDUVVGdFFqQkVMRVZCUkdwQ2NFUXNSVUZEZFVOTExIRkRRVVZCUlN4eFEwRkZla05XTEdGQlFYTkRMR1ZCUVhwQ05FSXNVVUZCVVVNc1NVRkJTVU1zVTBGQk5FSm9ReXhYUVVGVkxFVkJRVThzZDBsQlFUQkpVQ3hsUVVGbExFOUJSV3BQU1N4blFrRkJaMEkyUkN4elFrRk5iRUpETEZGQlFWTXNWMEZEVURGRUxHRkJRV1VzU1VGSGFrSXlSQ3hyUWtGQmJVSXNWMEZEYWtJc1QwRkJUek5FTEdWQlNWZzBSQ3hQUVVGUFF5eFJRVUZWZGtNaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Y21WaFkzUXRaRzl0TDJ4cFlpOUZkbVZ1ZEZCc2RXZHBia2gxWWk1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgX3Byb2RJbnZhcmlhbnQ9cmVxdWlyZShcIi4vcmVhY3RQcm9kSW52YXJpYW50XCIpLGludmFyaWFudD1yZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpLGV2ZW50UGx1Z2luT3JkZXI9bnVsbCxuYW1lc1RvUGx1Z2lucz17fTtmdW5jdGlvbiByZWNvbXB1dGVQbHVnaW5PcmRlcmluZygpe2lmKGV2ZW50UGx1Z2luT3JkZXIpZm9yKHZhciBlIGluIG5hbWVzVG9QbHVnaW5zKXt2YXIgbj1uYW1lc1RvUGx1Z2luc1tlXSxpPWV2ZW50UGx1Z2luT3JkZXIuaW5kZXhPZihlKTtpZihpPi0xfHwoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoITEsXCJFdmVudFBsdWdpblJlZ2lzdHJ5OiBDYW5ub3QgaW5qZWN0IGV2ZW50IHBsdWdpbnMgdGhhdCBkbyBub3QgZXhpc3QgaW4gdGhlIHBsdWdpbiBvcmRlcmluZywgYCVzYC5cIixlKTpfcHJvZEludmFyaWFudChcIjk2XCIsZSkpLCFFdmVudFBsdWdpblJlZ2lzdHJ5LnBsdWdpbnNbaV0pe24uZXh0cmFjdEV2ZW50c3x8KFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwiRXZlbnRQbHVnaW5SZWdpc3RyeTogRXZlbnQgcGx1Z2lucyBtdXN0IGltcGxlbWVudCBhbiBgZXh0cmFjdEV2ZW50c2AgbWV0aG9kLCBidXQgYCVzYCBkb2VzIG5vdC5cIixlKTpfcHJvZEludmFyaWFudChcIjk3XCIsZSkpLEV2ZW50UGx1Z2luUmVnaXN0cnkucGx1Z2luc1tpXT1uO3ZhciB0PW4uZXZlbnRUeXBlcztmb3IodmFyIHIgaW4gdClwdWJsaXNoRXZlbnRGb3JQbHVnaW4odFtyXSxuLHIpfHwoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoITEsXCJFdmVudFBsdWdpblJlZ2lzdHJ5OiBGYWlsZWQgdG8gcHVibGlzaCBldmVudCBgJXNgIGZvciBwbHVnaW4gYCVzYC5cIixyLGUpOl9wcm9kSW52YXJpYW50KFwiOThcIixyLGUpKX19fWZ1bmN0aW9uIHB1Ymxpc2hFdmVudEZvclBsdWdpbihlLG4saSl7RXZlbnRQbHVnaW5SZWdpc3RyeS5ldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MuaGFzT3duUHJvcGVydHkoaSkmJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcIkV2ZW50UGx1Z2luSHViOiBNb3JlIHRoYW4gb25lIHBsdWdpbiBhdHRlbXB0ZWQgdG8gcHVibGlzaCB0aGUgc2FtZSBldmVudCBuYW1lLCBgJXNgLlwiLGkpOl9wcm9kSW52YXJpYW50KFwiOTlcIixpKSksRXZlbnRQbHVnaW5SZWdpc3RyeS5ldmVudE5hbWVEaXNwYXRjaENvbmZpZ3NbaV09ZTt2YXIgdD1lLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzO2lmKHQpe2Zvcih2YXIgciBpbiB0KXtpZih0Lmhhc093blByb3BlcnR5KHIpKXB1Ymxpc2hSZWdpc3RyYXRpb25OYW1lKHRbcl0sbixpKX1yZXR1cm4hMH1yZXR1cm4hIWUucmVnaXN0cmF0aW9uTmFtZSYmKHB1Ymxpc2hSZWdpc3RyYXRpb25OYW1lKGUucmVnaXN0cmF0aW9uTmFtZSxuLGkpLCEwKX1mdW5jdGlvbiBwdWJsaXNoUmVnaXN0cmF0aW9uTmFtZShlLG4saSl7aWYoRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tlXSYmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwiRXZlbnRQbHVnaW5IdWI6IE1vcmUgdGhhbiBvbmUgcGx1Z2luIGF0dGVtcHRlZCB0byBwdWJsaXNoIHRoZSBzYW1lIHJlZ2lzdHJhdGlvbiBuYW1lLCBgJXNgLlwiLGUpOl9wcm9kSW52YXJpYW50KFwiMTAwXCIsZSkpLEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbZV09bixFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXNbZV09bi5ldmVudFR5cGVzW2ldLmRlcGVuZGVuY2llcyxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXt2YXIgdD1lLnRvTG93ZXJDYXNlKCk7RXZlbnRQbHVnaW5SZWdpc3RyeS5wb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzW3RdPWUsXCJvbkRvdWJsZUNsaWNrXCI9PT1lJiYoRXZlbnRQbHVnaW5SZWdpc3RyeS5wb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzLm9uZGJsY2xpY2s9ZSl9fXZhciBFdmVudFBsdWdpblJlZ2lzdHJ5PXtwbHVnaW5zOltdLGV2ZW50TmFtZURpc3BhdGNoQ29uZmlnczp7fSxyZWdpc3RyYXRpb25OYW1lTW9kdWxlczp7fSxyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzOnt9LHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXM6XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj97fTpudWxsLGluamVjdEV2ZW50UGx1Z2luT3JkZXI6ZnVuY3Rpb24oZSl7ZXZlbnRQbHVnaW5PcmRlciYmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwiRXZlbnRQbHVnaW5SZWdpc3RyeTogQ2Fubm90IGluamVjdCBldmVudCBwbHVnaW4gb3JkZXJpbmcgbW9yZSB0aGFuIG9uY2UuIFlvdSBhcmUgbGlrZWx5IHRyeWluZyB0byBsb2FkIG1vcmUgdGhhbiBvbmUgY29weSBvZiBSZWFjdC5cIik6X3Byb2RJbnZhcmlhbnQoXCIxMDFcIikpLGV2ZW50UGx1Z2luT3JkZXI9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZSkscmVjb21wdXRlUGx1Z2luT3JkZXJpbmcoKX0saW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOmZ1bmN0aW9uKGUpe3ZhciBuPSExO2Zvcih2YXIgaSBpbiBlKWlmKGUuaGFzT3duUHJvcGVydHkoaSkpe3ZhciB0PWVbaV07bmFtZXNUb1BsdWdpbnMuaGFzT3duUHJvcGVydHkoaSkmJm5hbWVzVG9QbHVnaW5zW2ldPT09dHx8KG5hbWVzVG9QbHVnaW5zW2ldJiYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoITEsXCJFdmVudFBsdWdpblJlZ2lzdHJ5OiBDYW5ub3QgaW5qZWN0IHR3byBkaWZmZXJlbnQgZXZlbnQgcGx1Z2lucyB1c2luZyB0aGUgc2FtZSBuYW1lLCBgJXNgLlwiLGkpOl9wcm9kSW52YXJpYW50KFwiMTAyXCIsaSkpLG5hbWVzVG9QbHVnaW5zW2ldPXQsbj0hMCl9biYmcmVjb21wdXRlUGx1Z2luT3JkZXJpbmcoKX0sZ2V0UGx1Z2luTW9kdWxlRm9yRXZlbnQ6ZnVuY3Rpb24oZSl7dmFyIG49ZS5kaXNwYXRjaENvbmZpZztpZihuLnJlZ2lzdHJhdGlvbk5hbWUpcmV0dXJuIEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbbi5yZWdpc3RyYXRpb25OYW1lXXx8bnVsbDtpZih2b2lkIDAhPT1uLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKXt2YXIgaT1uLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzO2Zvcih2YXIgdCBpbiBpKWlmKGkuaGFzT3duUHJvcGVydHkodCkpe3ZhciByPUV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbaVt0XV07aWYocilyZXR1cm4gcn19cmV0dXJuIG51bGx9LF9yZXNldEV2ZW50UGx1Z2luczpmdW5jdGlvbigpe2Zvcih2YXIgZSBpbiBldmVudFBsdWdpbk9yZGVyPW51bGwsbmFtZXNUb1BsdWdpbnMpbmFtZXNUb1BsdWdpbnMuaGFzT3duUHJvcGVydHkoZSkmJmRlbGV0ZSBuYW1lc1RvUGx1Z2luc1tlXTtFdmVudFBsdWdpblJlZ2lzdHJ5LnBsdWdpbnMubGVuZ3RoPTA7dmFyIG49RXZlbnRQbHVnaW5SZWdpc3RyeS5ldmVudE5hbWVEaXNwYXRjaENvbmZpZ3M7Zm9yKHZhciBpIGluIG4pbi5oYXNPd25Qcm9wZXJ0eShpKSYmZGVsZXRlIG5baV07dmFyIHQ9RXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlcztmb3IodmFyIHIgaW4gdCl0Lmhhc093blByb3BlcnR5KHIpJiZkZWxldGUgdFtyXTtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXt2YXIgcz1FdmVudFBsdWdpblJlZ2lzdHJ5LnBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXM7Zm9yKHZhciBhIGluIHMpcy5oYXNPd25Qcm9wZXJ0eShhKSYmZGVsZXRlIHNbYV19fX07bW9kdWxlLmV4cG9ydHM9RXZlbnRQbHVnaW5SZWdpc3RyeTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrVjJaVzUwVUd4MVoybHVVbVZuYVhOMGNua3Vhbk1pWFN3aWJtRnRaWE1pT2xzaVgzQnliMlJKYm5aaGNtbGhiblFpTENKeVpYRjFhWEpsSWl3aWFXNTJZWEpwWVc1MElpd2laWFpsYm5SUWJIVm5hVzVQY21SbGNpSXNJbTVoYldWelZHOVFiSFZuYVc1eklpd2ljbVZqYjIxd2RYUmxVR3gxWjJsdVQzSmtaWEpwYm1jaUxDSndiSFZuYVc1T1lXMWxJaXdpY0d4MVoybHVUVzlrZFd4bElpd2ljR3gxWjJsdVNXNWtaWGdpTENKcGJtUmxlRTltSWl3aWNISnZZMlZ6Y3lJc0ltVnVkaUlzSWs1UFJFVmZSVTVXSWl3aVJYWmxiblJRYkhWbmFXNVNaV2RwYzNSeWVTSXNJbkJzZFdkcGJuTWlMQ0psZUhSeVlXTjBSWFpsYm5Seklpd2ljSFZpYkdsemFHVmtSWFpsYm5Seklpd2laWFpsYm5SVWVYQmxjeUlzSW1WMlpXNTBUbUZ0WlNJc0luQjFZbXhwYzJoRmRtVnVkRVp2Y2xCc2RXZHBiaUlzSW1ScGMzQmhkR05vUTI5dVptbG5JaXdpWlhabGJuUk9ZVzFsUkdsemNHRjBZMmhEYjI1bWFXZHpJaXdpYUdGelQzZHVVSEp2Y0dWeWRIa2lMQ0p3YUdGelpXUlNaV2RwYzNSeVlYUnBiMjVPWVcxbGN5SXNJbkJvWVhObFRtRnRaU0lzSW5CMVlteHBjMmhTWldkcGMzUnlZWFJwYjI1T1lXMWxJaXdpY21WbmFYTjBjbUYwYVc5dVRtRnRaU0lzSW5KbFoybHpkSEpoZEdsdmJrNWhiV1ZOYjJSMWJHVnpJaXdpY21WbmFYTjBjbUYwYVc5dVRtRnRaVVJsY0dWdVpHVnVZMmxsY3lJc0ltUmxjR1Z1WkdWdVkybGxjeUlzSW14dmQyVnlRMkZ6WldST1lXMWxJaXdpZEc5TWIzZGxja05oYzJVaUxDSndiM056YVdKc1pWSmxaMmx6ZEhKaGRHbHZiazVoYldWeklpd2liMjVrWW14amJHbGpheUlzSW1sdWFtVmpkRVYyWlc1MFVHeDFaMmx1VDNKa1pYSWlMQ0pwYm1wbFkzUmxaRVYyWlc1MFVHeDFaMmx1VDNKa1pYSWlMQ0pCY25KaGVTSXNJbkJ5YjNSdmRIbHdaU0lzSW5Oc2FXTmxJaXdpWTJGc2JDSXNJbWx1YW1WamRFVjJaVzUwVUd4MVoybHVjMEo1VG1GdFpTSXNJbWx1YW1WamRHVmtUbUZ0WlhOVWIxQnNkV2RwYm5NaUxDSnBjMDl5WkdWeWFXNW5SR2x5ZEhraUxDSm5aWFJRYkhWbmFXNU5iMlIxYkdWR2IzSkZkbVZ1ZENJc0ltVjJaVzUwSWl3aWRXNWtaV1pwYm1Wa0lpd2ljR2hoYzJVaUxDSmZjbVZ6WlhSRmRtVnVkRkJzZFdkcGJuTWlMQ0pzWlc1bmRHZ2lMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRlRRU3hoUVVWQkxFbEJRVWxCTEdWQlFXbENReXhSUVVGUkxIZENRVVY2UWtNc1ZVRkJXVVFzVVVGQlVTeHpRa0ZMY0VKRkxHbENRVUZ0UWl4TFFVdHVRa01zWlVGQmFVSXNSMEZQY2tJc1UwRkJVME1zTUVKQlExQXNSMEZCUzBZc2FVSkJTVXdzU1VGQlN5eEpRVUZKUnl4TFFVRmpSaXhsUVVGblFpeERRVU55UXl4SlFVRkpSeXhGUVVGbFNDeGxRVUZsUlN4SFFVTTVRa1VzUlVGQlkwd3NhVUpCUVdsQ1RTeFJRVUZSU0N4SFFVVXpReXhIUVVSRlJTeEhRVUZsTEVsQlFUaENMR1ZCUVhwQ1JTeFJRVUZSUXl4SlFVRkpReXhUUVVFMFFsWXNWMEZCVlN4RlFVRlBMRzFIUVVGdlIwa3NSMEZCWTA0c1pVRkJaU3hMUVVGTlRTeExRVU5zVGs4c2IwSkJRVzlDUXl4UlFVRlJUaXhIUVVGb1F5eERRVWREUkN4RlFVRmhVU3huUWtGQmVVTXNaVUZCZWtKTUxGRkJRVkZETEVsQlFVbERMRk5CUVRSQ1ZpeFhRVUZWTEVWQlFVOHNhMGRCUVcxSFNTeEhRVUZqVGl4bFFVRmxMRXRCUVUxTkxFbEJRemRPVHl4dlFrRkJiMEpETEZGQlFWRk9MRWRCUVdWRUxFVkJRek5ETEVsQlFVbFRMRVZCUVd0Q1ZDeEZRVUZoVlN4WFFVTnVReXhKUVVGTExFbEJRVWxETEV0QlFXRkdMRVZCUTI1Q1J5eHpRa0ZCYzBKSUxFVkJRV2RDUlN4SFFVRlpXQ3hGUVVGalZ5eExRVUZ6UXl4bFFVRjZRbElzVVVGQlVVTXNTVUZCU1VNc1UwRkJORUpXTEZkQlFWVXNSVUZCVHl4eFJVRkJjMFZuUWl4RlFVRlhXaXhIUVVGalRpeGxRVUZsTEV0QlFVMXJRaXhGUVVGWFdpeE5RV0UxVVN4VFFVRlRZU3h6UWtGQmMwSkRMRVZCUVdkQ1lpeEZRVUZqVnl4SFFVTjZSRXdzYjBKQlFXOUNVU3g1UWtGQmVVSkRMR1ZCUVdWS0xFdEJRWE5ETEdWQlFYcENVaXhSUVVGUlF5eEpRVUZKUXl4VFFVRTBRbFlzVjBGQlZTeEZRVUZQTEhWR1FVRjNSbWRDTEVkQlFXRnNRaXhsUVVGbExFdEJRVTFyUWl4SlFVTTVVRXdzYjBKQlFXOUNVU3g1UWtGQmVVSklMRWRCUVdGRkxFVkJSVEZFTEVsQlFVbEhMRVZCUVRCQ1NDeEZRVUZsUnl4M1FrRkROME1zUjBGQlNVRXNSVUZCZVVJc1EwRkRNMElzU1VGQlN5eEpRVUZKUXl4TFFVRmhSQ3hGUVVGNVFpeERRVU0zUXl4SFFVRkpRU3hGUVVGM1FrUXNaVUZCWlVVc1IwRkZla05ETEhkQ1FVUTJRa1lzUlVGQmQwSkRMRWRCUTB4cVFpeEZRVUZqVnl4SFFVZHNSU3hQUVVGUExFVkJRMFlzVVVGQlNVVXNSVUZCWlUwc2JVSkJRM2hDUkN4M1FrRkJkMEpNTEVWQlFXVk5MR2xDUVVGclFtNUNMRVZCUVdOWExFbEJRMmhGTEVkQllWZ3NVMEZCVTA4c2QwSkJRWGRDUXl4RlFVRnJRbTVDTEVWQlFXTlhMRWRCU3k5RUxFZEJTa1ZNTEc5Q1FVRnZRbU1zZDBKQlFYZENSQ3hMUVVFMlF5eGxRVUY2UW1oQ0xGRkJRVkZETEVsQlFVbERMRk5CUVRSQ1ZpeFhRVUZWTEVWQlFVOHNPRVpCUVN0R2QwSXNSMEZCYjBJeFFpeGxRVUZsTEUxQlFVOHdRaXhKUVVOd1VXSXNiMEpCUVc5Q1l5eDNRa0ZCZDBKRUxFZEJRVzlDYmtJc1JVRkRhRVZOTEc5Q1FVRnZRbVVzTmtKQlFUWkNSaXhIUVVGdlFtNUNMRVZCUVdGVkxGZEJRVmRETEVkQlFWZFhMR0ZCUlRORkxHVkJRWHBDYmtJc1VVRkJVVU1zU1VGQlNVTXNVMEZCTWtJc1EwRkRla01zU1VGQlNXdENMRVZCUVdsQ1NpeEZRVUZwUWtzc1kwRkRkRU5zUWl4dlFrRkJiMEp0UWl3d1FrRkJNRUpHTEVkQlFXdENTaXhGUVVWMlF5eHJRa0ZCY2tKQkxFbEJRMFppTEc5Q1FVRnZRbTFDTERCQ1FVRXdRa01zVjBGQllWQXNTVUZWYWtVc1NVRkJTV0lzYjBKQlFYTkNMRU5CU1hoQ1F5eFJRVUZUTEVkQlMxUlBMSGxDUVVFd1FpeEhRVXN4UWswc2QwSkJRWGxDTEVkQlMzcENReXcyUWtGQk9FSXNSMEZST1VKSkxEQkNRVUZ2UkN4bFFVRjZRblJDTEZGQlFWRkRMRWxCUVVsRExGTkJRVFJDTEVkQlFVc3NTMEZaZUVWelFpeDFRa0ZCZDBJc1UwRkJWVU1zUjBGRE9VSm9ReXh0UWtGQk5FTXNaVUZCZWtKUExGRkJRVkZETEVsQlFVbERMRk5CUVRSQ1ZpeFhRVUZWTEVWQlFVOHNkVWxCUVhsSlJpeGxRVUZsTEZGQlJYUlBSeXhwUWtGQmJVSnBReXhOUVVGTlF5eFZRVUZWUXl4TlFVRk5ReXhMUVVGTFNpeEhRVU01UXpsQ0xESkNRV0ZHYlVNc2VVSkJRVEJDTEZOQlFWVkRMRWRCUTJ4RExFbEJRVWxETEVkQlFXdENMRVZCUTNSQ0xFbEJRVXNzU1VGQlNYQkRMRXRCUVdOdFF5eEZRVU55UWl4SFFVRkxRU3hGUVVGMVFtNUNMR1ZCUVdWb1FpeEhRVUV6UXl4RFFVZEJMRWxCUVVsRExFVkJRV1ZyUXl4RlFVRjFRbTVETEVkQlEzSkRSaXhsUVVGbGEwSXNaVUZCWldoQ0xFbEJRV1ZHTEdWQlFXVkZMRXRCUVdkQ1F5eEpRVU0zUlVnc1pVRkJaVVVzUzBGQmRVTXNaVUZCZWtKSkxGRkJRVkZETEVsQlFVbERMRk5CUVRSQ1ZpeFhRVUZWTEVWQlFVOHNORVpCUVRaR1NTeEhRVUZqVGl4bFFVRmxMRTFCUVU5TkxFbEJRM3BPUml4bFFVRmxSU3hIUVVGalF5eEZRVU0zUW0xRExFZEJRV3RDTEVkQlIyeENRU3hIUVVOR2NrTXNNa0pCVjBwelF5eDNRa0ZCZVVJc1UwRkJWVU1zUjBGRGFrTXNTVUZCU1hoQ0xFVkJRV2xDZDBJc1JVRkJUWGhDTEdWQlF6TkNMRWRCUVVsQkxFVkJRV1ZOTEdsQ1FVTnFRaXhQUVVGUFlpeHZRa0ZCYjBKakxIZENRVUYzUWxBc1JVRkJaVTBzYlVKQlFYRkNMRXRCUlhwR0xGRkJRU3REYlVJc1NVRkJNME42UWl4RlFVRmxSeXgzUWtGQmRVTXNRMEZIZUVRc1NVRkJTVUVzUlVGQk1FSklMRVZCUVdWSExIZENRVVUzUXl4SlFVRkxMRWxCUVVsMVFpeExRVUZUZGtJc1JVRkRhRUlzUjBGQlMwRXNSVUZCZDBKRUxHVkJRV1YzUWl4SFFVRTFReXhEUVVkQkxFbEJRVWwyUXl4RlFVRmxUU3h2UWtGQmIwSmpMSGRDUVVGM1Frb3NSVUZCZDBKMVFpeEpRVU4yUml4SFFVRkpka01zUlVGRFJpeFBRVUZQUVN4SFFVbGlMRTlCUVU4c1RVRlBWSGRETEcxQ1FVRnZRaXhYUVVWc1FpeEpRVUZMTEVsQlFVbDZReXhMUVVSVVNDeHBRa0ZCYlVJc1MwRkRTVU1zWlVGRGFrSkJMR1ZCUVdWclFpeGxRVUZsYUVJc1YwRkRla0pHTEdWQlFXVkZMRWRCUnpGQ1R5eHZRa0ZCYjBKRExGRkJRVkZyUXl4UFFVRlRMRVZCUlhKRExFbEJRVWt6UWl4RlFVRXlRbElzYjBKQlFXOUNVU3g1UWtGRGJrUXNTVUZCU3l4SlFVRkpTQ3hMUVVGaFJ5eEZRVU5vUWtFc1JVRkJlVUpETEdWQlFXVktMRmRCUTI1RFJ5eEZRVUY1UWtnc1IwRkpjRU1zU1VGQlNWTXNSVUZCTUVKa0xHOUNRVUZ2UW1Nc2QwSkJRMnhFTEVsQlFVc3NTVUZCU1VRc1MwRkJiMEpETEVWQlEzWkNRU3hGUVVGM1Frd3NaVUZCWlVrc1YwRkRiRU5ETEVWQlFYZENSQ3hIUVVsdVF5eEhRVUUyUWl4bFFVRjZRbWhDTEZGQlFWRkRMRWxCUVVsRExGTkJRVEpDTEVOQlEzcERMRWxCUVVsdlFpeEZRVUUwUW01Q0xHOUNRVUZ2UW0xQ0xEQkNRVU53UkN4SlFVRkxMRWxCUVVsR0xFdEJRV3RDUlN4RlFVTnlRa0VzUlVGQk1FSldMR1ZCUVdWUkxGZEJRM0JEUlN4RlFVRXdRa1lzVFVGUE0wTnRRaXhQUVVGUFF5eFJRVUZWY2tNaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Y21WaFkzUXRaRzl0TDJ4cFlpOUZkbVZ1ZEZCc2RXZHBibEpsWjJsemRISjVMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBDb21wb25lbnRUcmVlLFRyZWVUcmF2ZXJzYWwsdmFsaWRhdGVFdmVudERpc3BhdGNoZXMsX3Byb2RJbnZhcmlhbnQ9cmVxdWlyZShcIi4vcmVhY3RQcm9kSW52YXJpYW50XCIpLFJlYWN0RXJyb3JVdGlscz1yZXF1aXJlKFwiLi9SZWFjdEVycm9yVXRpbHNcIiksaW52YXJpYW50PXJlcXVpcmUoXCJmYmpzL2xpYi9pbnZhcmlhbnRcIiksd2FybmluZz1yZXF1aXJlKFwiZmJqcy9saWIvd2FybmluZ1wiKSxpbmplY3Rpb249e2luamVjdENvbXBvbmVudFRyZWU6ZnVuY3Rpb24oZSl7Q29tcG9uZW50VHJlZT1lLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJlwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcoZSYmZS5nZXROb2RlRnJvbUluc3RhbmNlJiZlLmdldEluc3RhbmNlRnJvbU5vZGUsXCJFdmVudFBsdWdpblV0aWxzLmluamVjdGlvbi5pbmplY3RDb21wb25lbnRUcmVlKC4uLik6IEluamVjdGVkIG1vZHVsZSBpcyBtaXNzaW5nIGdldE5vZGVGcm9tSW5zdGFuY2Ugb3IgZ2V0SW5zdGFuY2VGcm9tTm9kZS5cIil9LGluamVjdFRyZWVUcmF2ZXJzYWw6ZnVuY3Rpb24oZSl7VHJlZVRyYXZlcnNhbD1lLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJlwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcoZSYmZS5pc0FuY2VzdG9yJiZlLmdldExvd2VzdENvbW1vbkFuY2VzdG9yLFwiRXZlbnRQbHVnaW5VdGlscy5pbmplY3Rpb24uaW5qZWN0VHJlZVRyYXZlcnNhbCguLi4pOiBJbmplY3RlZCBtb2R1bGUgaXMgbWlzc2luZyBpc0FuY2VzdG9yIG9yIGdldExvd2VzdENvbW1vbkFuY2VzdG9yLlwiKX19O2Z1bmN0aW9uIGlzRW5kaXNoKGUpe3JldHVyblwidG9wTW91c2VVcFwiPT09ZXx8XCJ0b3BUb3VjaEVuZFwiPT09ZXx8XCJ0b3BUb3VjaENhbmNlbFwiPT09ZX1mdW5jdGlvbiBpc01vdmVpc2goZSl7cmV0dXJuXCJ0b3BNb3VzZU1vdmVcIj09PWV8fFwidG9wVG91Y2hNb3ZlXCI9PT1lfWZ1bmN0aW9uIGlzU3RhcnRpc2goZSl7cmV0dXJuXCJ0b3BNb3VzZURvd25cIj09PWV8fFwidG9wVG91Y2hTdGFydFwiPT09ZX1mdW5jdGlvbiBleGVjdXRlRGlzcGF0Y2goZSx0LG4scil7dmFyIHM9ZS50eXBlfHxcInVua25vd24tZXZlbnRcIjtlLmN1cnJlbnRUYXJnZXQ9RXZlbnRQbHVnaW5VdGlscy5nZXROb2RlRnJvbUluc3RhbmNlKHIpLHQ/UmVhY3RFcnJvclV0aWxzLmludm9rZUd1YXJkZWRDYWxsYmFja1dpdGhDYXRjaChzLG4sZSk6UmVhY3RFcnJvclV0aWxzLmludm9rZUd1YXJkZWRDYWxsYmFjayhzLG4sZSksZS5jdXJyZW50VGFyZ2V0PW51bGx9ZnVuY3Rpb24gZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyKGUsdCl7dmFyIG49ZS5fZGlzcGF0Y2hMaXN0ZW5lcnMscj1lLl9kaXNwYXRjaEluc3RhbmNlcztpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyhlKSxBcnJheS5pc0FycmF5KG4pKWZvcih2YXIgcz0wO3M8bi5sZW5ndGgmJiFlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7cysrKWV4ZWN1dGVEaXNwYXRjaChlLHQsbltzXSxyW3NdKTtlbHNlIG4mJmV4ZWN1dGVEaXNwYXRjaChlLHQsbixyKTtlLl9kaXNwYXRjaExpc3RlbmVycz1udWxsLGUuX2Rpc3BhdGNoSW5zdGFuY2VzPW51bGx9ZnVuY3Rpb24gZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZUltcGwoZSl7dmFyIHQ9ZS5fZGlzcGF0Y2hMaXN0ZW5lcnMsbj1lLl9kaXNwYXRjaEluc3RhbmNlcztpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyhlKSxBcnJheS5pc0FycmF5KHQpKXtmb3IodmFyIHI9MDtyPHQubGVuZ3RoJiYhZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO3IrKylpZih0W3JdKGUsbltyXSkpcmV0dXJuIG5bcl19ZWxzZSBpZih0JiZ0KGUsbikpcmV0dXJuIG47cmV0dXJuIG51bGx9ZnVuY3Rpb24gZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZShlKXt2YXIgdD1leGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlSW1wbChlKTtyZXR1cm4gZS5fZGlzcGF0Y2hJbnN0YW5jZXM9bnVsbCxlLl9kaXNwYXRjaExpc3RlbmVycz1udWxsLHR9ZnVuY3Rpb24gZXhlY3V0ZURpcmVjdERpc3BhdGNoKGUpe1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJnZhbGlkYXRlRXZlbnREaXNwYXRjaGVzKGUpO3ZhciB0PWUuX2Rpc3BhdGNoTGlzdGVuZXJzLG49ZS5fZGlzcGF0Y2hJbnN0YW5jZXM7QXJyYXkuaXNBcnJheSh0KSYmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwiZXhlY3V0ZURpcmVjdERpc3BhdGNoKC4uLik6IEludmFsaWQgYGV2ZW50YC5cIik6X3Byb2RJbnZhcmlhbnQoXCIxMDNcIikpLGUuY3VycmVudFRhcmdldD10P0V2ZW50UGx1Z2luVXRpbHMuZ2V0Tm9kZUZyb21JbnN0YW5jZShuKTpudWxsO3ZhciByPXQ/dChlKTpudWxsO3JldHVybiBlLmN1cnJlbnRUYXJnZXQ9bnVsbCxlLl9kaXNwYXRjaExpc3RlbmVycz1udWxsLGUuX2Rpc3BhdGNoSW5zdGFuY2VzPW51bGwscn1mdW5jdGlvbiBoYXNEaXNwYXRjaGVzKGUpe3JldHVybiEhZS5fZGlzcGF0Y2hMaXN0ZW5lcnN9XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKHZhbGlkYXRlRXZlbnREaXNwYXRjaGVzPWZ1bmN0aW9uKGUpe3ZhciB0PWUuX2Rpc3BhdGNoTGlzdGVuZXJzLG49ZS5fZGlzcGF0Y2hJbnN0YW5jZXMscj1BcnJheS5pc0FycmF5KHQpLHM9cj90Lmxlbmd0aDp0PzE6MCxpPUFycmF5LmlzQXJyYXkobiksYT1pP24ubGVuZ3RoOm4/MTowO1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcoaT09PXImJmE9PT1zLFwiRXZlbnRQbHVnaW5VdGlsczogSW52YWxpZCBgZXZlbnRgLlwiKX0pO3ZhciBFdmVudFBsdWdpblV0aWxzPXtpc0VuZGlzaDppc0VuZGlzaCxpc01vdmVpc2g6aXNNb3ZlaXNoLGlzU3RhcnRpc2g6aXNTdGFydGlzaCxleGVjdXRlRGlyZWN0RGlzcGF0Y2g6ZXhlY3V0ZURpcmVjdERpc3BhdGNoLGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlcjpleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXIsZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZTpleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlLGhhc0Rpc3BhdGNoZXM6aGFzRGlzcGF0Y2hlcyxnZXRJbnN0YW5jZUZyb21Ob2RlOmZ1bmN0aW9uKGUpe3JldHVybiBDb21wb25lbnRUcmVlLmdldEluc3RhbmNlRnJvbU5vZGUoZSl9LGdldE5vZGVGcm9tSW5zdGFuY2U6ZnVuY3Rpb24oZSl7cmV0dXJuIENvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZShlKX0saXNBbmNlc3RvcjpmdW5jdGlvbihlLHQpe3JldHVybiBUcmVlVHJhdmVyc2FsLmlzQW5jZXN0b3IoZSx0KX0sZ2V0TG93ZXN0Q29tbW9uQW5jZXN0b3I6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gVHJlZVRyYXZlcnNhbC5nZXRMb3dlc3RDb21tb25BbmNlc3RvcihlLHQpfSxnZXRQYXJlbnRJbnN0YW5jZTpmdW5jdGlvbihlKXtyZXR1cm4gVHJlZVRyYXZlcnNhbC5nZXRQYXJlbnRJbnN0YW5jZShlKX0sdHJhdmVyc2VUd29QaGFzZTpmdW5jdGlvbihlLHQsbil7cmV0dXJuIFRyZWVUcmF2ZXJzYWwudHJhdmVyc2VUd29QaGFzZShlLHQsbil9LHRyYXZlcnNlRW50ZXJMZWF2ZTpmdW5jdGlvbihlLHQsbixyLHMpe3JldHVybiBUcmVlVHJhdmVyc2FsLnRyYXZlcnNlRW50ZXJMZWF2ZShlLHQsbixyLHMpfSxpbmplY3Rpb246aW5qZWN0aW9ufTttb2R1bGUuZXhwb3J0cz1FdmVudFBsdWdpblV0aWxzO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtWMlpXNTBVR3gxWjJsdVZYUnBiSE11YW5NaVhTd2libUZ0WlhNaU9sc2lRMjl0Y0c5dVpXNTBWSEpsWlNJc0lsUnlaV1ZVY21GMlpYSnpZV3dpTENKMllXeHBaR0YwWlVWMlpXNTBSR2x6Y0dGMFkyaGxjeUlzSWw5d2NtOWtTVzUyWVhKcFlXNTBJaXdpY21WeGRXbHlaU0lzSWxKbFlXTjBSWEp5YjNKVmRHbHNjeUlzSW1sdWRtRnlhV0Z1ZENJc0luZGhjbTVwYm1jaUxDSnBibXBsWTNScGIyNGlMQ0pwYm1wbFkzUkRiMjF3YjI1bGJuUlVjbVZsSWl3aVNXNXFaV04wWldRaUxDSndjbTlqWlhOeklpd2laVzUySWl3aVRrOUVSVjlGVGxZaUxDSm5aWFJPYjJSbFJuSnZiVWx1YzNSaGJtTmxJaXdpWjJWMFNXNXpkR0Z1WTJWR2NtOXRUbTlrWlNJc0ltbHVhbVZqZEZSeVpXVlVjbUYyWlhKellXd2lMQ0pwYzBGdVkyVnpkRzl5SWl3aVoyVjBURzkzWlhOMFEyOXRiVzl1UVc1alpYTjBiM0lpTENKcGMwVnVaR2x6YUNJc0luUnZjRXhsZG1Wc1ZIbHdaU0lzSW1selRXOTJaV2x6YUNJc0ltbHpVM1JoY25ScGMyZ2lMQ0psZUdWamRYUmxSR2x6Y0dGMFkyZ2lMQ0psZG1WdWRDSXNJbk5wYlhWc1lYUmxaQ0lzSW14cGMzUmxibVZ5SWl3aWFXNXpkQ0lzSW5SNWNHVWlMQ0pqZFhKeVpXNTBWR0Z5WjJWMElpd2lSWFpsYm5SUWJIVm5hVzVWZEdsc2N5SXNJbWx1ZG05clpVZDFZWEprWldSRFlXeHNZbUZqYTFkcGRHaERZWFJqYUNJc0ltbHVkbTlyWlVkMVlYSmtaV1JEWVd4c1ltRmpheUlzSW1WNFpXTjFkR1ZFYVhOd1lYUmphR1Z6U1c1UGNtUmxjaUlzSW1ScGMzQmhkR05vVEdsemRHVnVaWEp6SWl3aVgyUnBjM0JoZEdOb1RHbHpkR1Z1WlhKeklpd2laR2x6Y0dGMFkyaEpibk4wWVc1alpYTWlMQ0pmWkdsemNHRjBZMmhKYm5OMFlXNWpaWE1pTENKQmNuSmhlU0lzSW1selFYSnlZWGtpTENKcElpd2liR1Z1WjNSb0lpd2lhWE5RY205d1lXZGhkR2x2YmxOMGIzQndaV1FpTENKbGVHVmpkWFJsUkdsemNHRjBZMmhsYzBsdVQzSmtaWEpUZEc5d1FYUlVjblZsU1cxd2JDSXNJbVY0WldOMWRHVkVhWE53WVhSamFHVnpTVzVQY21SbGNsTjBiM0JCZEZSeWRXVWlMQ0p5WlhRaUxDSmxlR1ZqZFhSbFJHbHlaV04wUkdsemNHRjBZMmdpTENKa2FYTndZWFJqYUV4cGMzUmxibVZ5SWl3aVpHbHpjR0YwWTJoSmJuTjBZVzVqWlNJc0luSmxjeUlzSW1oaGMwUnBjM0JoZEdOb1pYTWlMQ0pzYVhOMFpXNWxjbk5KYzBGeWNpSXNJbXhwYzNSbGJtVnljMHhsYmlJc0ltbHVjM1JoYm1ObGMwbHpRWEp5SWl3aWFXNXpkR0Z1WTJWelRHVnVJaXdpYm05a1pTSXNJbUVpTENKaUlpd2laMlYwVUdGeVpXNTBTVzV6ZEdGdVkyVWlMQ0owY21GMlpYSnpaVlIzYjFCb1lYTmxJaXdpZEdGeVoyVjBJaXdpWm00aUxDSmhjbWNpTENKMGNtRjJaWEp6WlVWdWRHVnlUR1ZoZG1VaUxDSm1jbTl0SWl3aWRHOGlMQ0poY21kR2NtOXRJaXdpWVhKblZHOGlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRlJRU3hoUVVWQkxFbEJaVWxCTEdOQlEwRkRMR05CTWtKQlF5eDNRa0V6UTBGRExHVkJRV2xDUXl4UlFVRlJMSGRDUVVWNlFrTXNaMEpCUVd0Q1JDeFJRVUZSTEhGQ1FVVXhRa1VzVlVGQldVWXNVVUZCVVN4elFrRkRjRUpITEZGQlFWVklMRkZCUVZFc2IwSkJXV3hDU1N4VlFVRlpMRU5CUTJSRExHOUNRVUZ4UWl4VFFVRlZReXhIUVVNM1FsWXNZMEZCWjBKVkxFVkJRMkVzWlVGQmVrSkRMRkZCUVZGRExFbEJRVWxETEZWQlExY3NaVUZCZWtKR0xGRkJRVkZETEVsQlFVbERMRlZCUVRSQ1RpeFJRVUZSUnl4SFFVRlpRU3hGUVVGVFNTeHhRa0ZCZFVKS0xFVkJRVk5MTEc5Q1FVRnhRaXhuU1VGSE9VaERMRzlDUVVGeFFpeFRRVUZWVGl4SFFVTTNRbFFzWTBGQlowSlRMRVZCUTJFc1pVRkJla0pETEZGQlFWRkRMRWxCUVVsRExGVkJRMWNzWlVGQmVrSkdMRkZCUVZGRExFbEJRVWxETEZWQlFUUkNUaXhSUVVGUlJ5eEhRVUZaUVN4RlFVRlRUeXhaUVVGalVDeEZRVUZUVVN4M1FrRkJlVUlzTkVoQlN6TklMRk5CUVZORExGTkJRVk5ETEVkQlEyaENMRTFCUVhkQ0xHVkJRV3BDUVN4SFFVRnJSQ3huUWtGQmFrSkJMRWRCUVcxRUxHMUNRVUZxUWtFc1JVRkhOVVVzVTBGQlUwTXNWVUZCVlVRc1IwRkRha0lzVFVGQmQwSXNhVUpCUVdwQ1FTeEhRVUZ2UkN4cFFrRkJha0pCTEVWQlJUVkRMRk5CUVZORkxGZEJRVmRHTEVkQlEyeENMRTFCUVhkQ0xHbENRVUZxUWtFc1IwRkJiMFFzYTBKQlFXcENRU3hGUVRCQ05VTXNVMEZCVTBjc1owSkJRV2RDUXl4RlFVRlBReXhGUVVGWFF5eEZRVUZWUXl4SFFVTnVSQ3hKUVVGSlF5eEZRVUZQU2l4RlFVRk5TU3hOUVVGUkxHZENRVU42UWtvc1JVRkJUVXNzWTBGQlowSkRMR2xDUVVGcFFtaENMRzlDUVVGdlFtRXNSMEZEZGtSR0xFVkJRMFp3UWl4blFrRkJaMEl3UWl3clFrRkJLMEpJTEVWQlFVMUdMRVZCUVZWR0xFZEJSUzlFYmtJc1owSkJRV2RDTWtJc2MwSkJRWE5DU2l4RlFVRk5SaXhGUVVGVlJpeEhRVVY0UkVFc1JVRkJUVXNzWTBGQlowSXNTMEZOZUVJc1UwRkJVMGtzZVVKQlFYbENWQ3hGUVVGUFF5eEhRVU4yUXl4SlFVRkpVeXhGUVVGdlFsWXNSVUZCVFZjc2JVSkJRekZDUXl4RlFVRnZRbG9zUlVGQlRXRXNiVUpCU1RsQ0xFZEJTRFpDTEdWQlFYcENNVUlzVVVGQlVVTXNTVUZCU1VNc1ZVRkRaRmdzZDBKQlFYZENjMElzUjBGRmRFSmpMRTFCUVUxRExGRkJRVkZNTEVkQlEyaENMRWxCUVVzc1NVRkJTVTBzUlVGQlNTeEZRVUZIUVN4RlFVRkpUaXhGUVVGclFrOHNVMEZEYUVOcVFpeEZRVUZOYTBJc2RVSkJSR3REUml4SlFVczFRMnBDTEdkQ1FVRm5Ra01zUlVGQlQwTXNSVUZCVjFNc1JVRkJhMEpOTEVkQlFVbEtMRVZCUVd0Q1NTeFRRVVZ1UlU0c1IwRkRWRmdzWjBKQlFXZENReXhGUVVGUFF5eEZRVUZYVXl4RlFVRnRRa1VzUjBGRmRrUmFMRVZCUVUxWExHMUNRVUZ4UWl4TFFVTXpRbGdzUlVGQlRXRXNiVUpCUVhGQ0xFdEJWVGRDTEZOQlFWTk5MSFZEUVVGMVEyNUNMRWRCUXpsRExFbEJRVWxWTEVWQlFXOUNWaXhGUVVGTlZ5eHRRa0ZETVVKRExFVkJRVzlDV2l4RlFVRk5ZU3h0UWtGSk9VSXNSMEZJTmtJc1pVRkJla0l4UWl4UlFVRlJReXhKUVVGSlF5eFZRVU5rV0N4M1FrRkJkMEp6UWl4SFFVVjBRbU1zVFVGQlRVTXNVVUZCVVV3c1NVRkRhRUlzU1VGQlN5eEpRVUZKVFN4RlFVRkpMRVZCUVVkQkxFVkJRVWxPTEVWQlFXdENUeXhUUVVOb1EycENMRVZCUVUxclFpeDFRa0ZFYTBOR0xFbEJTelZETEVkQlFVbE9MRVZCUVd0Q1RTeEhRVUZIYUVJc1JVRkJUMWtzUlVGQmEwSkpMRWxCUTJoRUxFOUJRVTlLTEVWQlFXdENTU3hSUVVkNFFpeEhRVUZKVGl4SFFVTk1RU3hGUVVGclFsWXNSVUZCVDFrc1IwRkRNMElzVDBGQlQwRXNSVUZIV0N4UFFVRlBMRXRCVFZRc1UwRkJVMUVzYlVOQlFXMURjRUlzUjBGRE1VTXNTVUZCU1hGQ0xFVkJRVTFHTEhWRFFVRjFRMjVDTEVkQlIycEVMRTlCUmtGQkxFVkJRVTFoTEcxQ1FVRnhRaXhMUVVNelFtSXNSVUZCVFZjc2JVSkJRWEZDTEV0QlEzQkNWU3hGUVZsVUxGTkJRVk5ETEhOQ1FVRnpRblJDTEVkQlEwRXNaVUZCZWtKaUxGRkJRVkZETEVsQlFVbERMRlZCUTJSWUxIZENRVUYzUW5OQ0xFZEJSVEZDTEVsQlFVbDFRaXhGUVVGdFFuWkNMRVZCUVUxWExHMUNRVU42UW1Fc1JVRkJiVUo0UWl4RlFVRk5ZU3h0UWtGRE0wSkRMRTFCUVUxRExGRkJRVkZSTEV0QlFUWkRMR1ZCUVhwQ2NFTXNVVUZCVVVNc1NVRkJTVU1zVTBGQk5FSlFMRmRCUVZVc1JVRkJUeXhuUkVGQmEwUklMR1ZCUVdVc1VVRkRPVXB4UWl4RlFVRk5TeXhqUVVGblFtdENMRVZCUVcxQ2FrSXNhVUpCUVdsQ2FFSXNiMEpCUVc5Q2EwTXNSMEZCYjBJc1MwRkRiRWNzU1VGQlNVTXNSVUZCVFVZc1JVRkJiVUpCTEVWQlFXbENka0lzUjBGQlV5eExRVWwyUkN4UFFVaEJRU3hGUVVGTlN5eGpRVUZuUWl4TFFVTjBRa3dzUlVGQlRWY3NiVUpCUVhGQ0xFdEJRek5DV0N4RlFVRk5ZU3h0UWtGQmNVSXNTMEZEY0VKWkxFVkJUMVFzVTBGQlUwTXNZMEZCWXpGQ0xFZEJRM0pDTEZGQlFWTkJMRVZCUVUxWExHMUNRUzlJV1N4bFFVRjZRbmhDTEZGQlFWRkRMRWxCUVVsRExGZEJRMlJZTEhkQ1FVRXdRaXhUUVVGVmMwSXNSMEZEYkVNc1NVRkJTVlVzUlVGQmIwSldMRVZCUVUxWExHMUNRVU14UWtNc1JVRkJiMEphTEVWQlFVMWhMRzFDUVVVeFFtTXNSVUZCYVVKaUxFMUJRVTFETEZGQlFWRk1MRWRCUXk5Q2EwSXNSVUZCWlVRc1JVRkJhVUpxUWl4RlFVRnJRazhzVDBGQlUxQXNSVUZCYjBJc1JVRkJTU3hGUVVWdVJtMUNMRVZCUVdsQ1ppeE5RVUZOUXl4UlFVRlJTQ3hIUVVNdlFtdENMRVZCUVdWRUxFVkJRV2xDYWtJc1JVRkJhMEpMTEU5QlFWTk1MRVZCUVc5Q0xFVkJRVWtzUlVGRk9VUXNaVUZCZWtKNlFpeFJRVUZSUXl4SlFVRkpReXhWUVVFMFFrNHNVVUZCVVRoRExFbEJRVzFDUml4SFFVRnJRa2NzU1VGQmFVSkdMRVZCUVdNc2QwTkJNRWg0U0N4SlFVRkpkRUlzYVVKQlFXMUNMRU5CUTNKQ1dDeFRRVUZWUVN4VFFVTldSU3hWUVVGWFFTeFZRVU5ZUXl4WFFVRlpRU3hYUVVWYWQwSXNjMEpCUVhWQ1FTeHpRa0ZEZGtKaUxIbENRVUV3UWtFc2VVSkJRekZDVnl4dFEwRkJiME5CTEcxRFFVTndRMDBzWTBGQlpVRXNZMEZGWm01RExHOUNRVUZ4UWl4VFFVRlZkME1zUjBGRE4wSXNUMEZCVDNaRUxHTkJRV05sTEc5Q1FVRnZRbmRETEVsQlJUTkRla01zYjBKQlFYRkNMRk5CUVZWNVF5eEhRVU0zUWl4UFFVRlBka1FzWTBGQlkyTXNiMEpCUVc5Q2VVTXNTVUZGTTBOMFF5eFhRVUZaTEZOQlFWVjFReXhGUVVGSFF5eEhRVU4yUWl4UFFVRlBlRVFzWTBGQlkyZENMRmRCUVZkMVF5eEZRVUZIUXl4SlFVVnlRM1pETEhkQ1FVRjVRaXhUUVVGVmMwTXNSVUZCUjBNc1IwRkRjRU1zVDBGQlQzaEVMR05CUVdOcFFpeDNRa0ZCZDBKelF5eEZRVUZIUXl4SlFVVnNSRU1zYTBKQlFXMUNMRk5CUVZVdlFpeEhRVU16UWl4UFFVRlBNVUlzWTBGQlkzbEVMR3RDUVVGclFpOUNMRWxCUlhwRFowTXNhVUpCUVd0Q0xGTkJRVlZETEVWQlFWRkRMRVZCUVVsRExFZEJRM1JETEU5QlFVODNSQ3hqUVVGak1FUXNhVUpCUVdsQ1F5eEZRVUZSUXl4RlFVRkpReXhKUVVWd1JFTXNiVUpCUVc5Q0xGTkJRVlZETEVWQlFVMURMRVZCUVVsS0xFVkJRVWxMTEVWQlFWTkRMRWRCUTI1RUxFOUJRVTlzUlN4alFVRmpPRVFzYlVKQlFXMUNReXhGUVVGTlF5eEZRVUZKU2l4RlFVRkpTeXhGUVVGVFF5eEpRVWRxUlRORUxGVkJRVmRCTEZkQlIySTBSQ3hQUVVGUFF5eFJRVUZWZGtNaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Y21WaFkzUXRaRzl0TDJ4cFlpOUZkbVZ1ZEZCc2RXZHBibFYwYVd4ekxtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIEV2ZW50UGx1Z2luSHViPXJlcXVpcmUoXCIuL0V2ZW50UGx1Z2luSHViXCIpLEV2ZW50UGx1Z2luVXRpbHM9cmVxdWlyZShcIi4vRXZlbnRQbHVnaW5VdGlsc1wiKSxhY2N1bXVsYXRlSW50bz1yZXF1aXJlKFwiLi9hY2N1bXVsYXRlSW50b1wiKSxmb3JFYWNoQWNjdW11bGF0ZWQ9cmVxdWlyZShcIi4vZm9yRWFjaEFjY3VtdWxhdGVkXCIpLHdhcm5pbmc9cmVxdWlyZShcImZianMvbGliL3dhcm5pbmdcIiksZ2V0TGlzdGVuZXI9RXZlbnRQbHVnaW5IdWIuZ2V0TGlzdGVuZXI7ZnVuY3Rpb24gbGlzdGVuZXJBdFBoYXNlKGUsdCxhKXt2YXIgYz10LmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW2FdO3JldHVybiBnZXRMaXN0ZW5lcihlLGMpfWZ1bmN0aW9uIGFjY3VtdWxhdGVEaXJlY3Rpb25hbERpc3BhdGNoZXMoZSx0LGEpe1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJlwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcoZSxcIkRpc3BhdGNoaW5nIGluc3QgbXVzdCBub3QgYmUgbnVsbFwiKTt2YXIgYz1saXN0ZW5lckF0UGhhc2UoZSxhLHQpO2MmJihhLl9kaXNwYXRjaExpc3RlbmVycz1hY2N1bXVsYXRlSW50byhhLl9kaXNwYXRjaExpc3RlbmVycyxjKSxhLl9kaXNwYXRjaEluc3RhbmNlcz1hY2N1bXVsYXRlSW50byhhLl9kaXNwYXRjaEluc3RhbmNlcyxlKSl9ZnVuY3Rpb24gYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NpbmdsZShlKXtlJiZlLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzJiZFdmVudFBsdWdpblV0aWxzLnRyYXZlcnNlVHdvUGhhc2UoZS5fdGFyZ2V0SW5zdCxhY2N1bXVsYXRlRGlyZWN0aW9uYWxEaXNwYXRjaGVzLGUpfWZ1bmN0aW9uIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTaW5nbGVTa2lwVGFyZ2V0KGUpe2lmKGUmJmUuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpe3ZhciB0PWUuX3RhcmdldEluc3QsYT10P0V2ZW50UGx1Z2luVXRpbHMuZ2V0UGFyZW50SW5zdGFuY2UodCk6bnVsbDtFdmVudFBsdWdpblV0aWxzLnRyYXZlcnNlVHdvUGhhc2UoYSxhY2N1bXVsYXRlRGlyZWN0aW9uYWxEaXNwYXRjaGVzLGUpfX1mdW5jdGlvbiBhY2N1bXVsYXRlRGlzcGF0Y2hlcyhlLHQsYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKXt2YXIgYz1hLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUscz1nZXRMaXN0ZW5lcihlLGMpO3MmJihhLl9kaXNwYXRjaExpc3RlbmVycz1hY2N1bXVsYXRlSW50byhhLl9kaXNwYXRjaExpc3RlbmVycyxzKSxhLl9kaXNwYXRjaEluc3RhbmNlcz1hY2N1bXVsYXRlSW50byhhLl9kaXNwYXRjaEluc3RhbmNlcyxlKSl9fWZ1bmN0aW9uIGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzU2luZ2xlKGUpe2UmJmUuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmYWNjdW11bGF0ZURpc3BhdGNoZXMoZS5fdGFyZ2V0SW5zdCxudWxsLGUpfWZ1bmN0aW9uIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZSl7Zm9yRWFjaEFjY3VtdWxhdGVkKGUsYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NpbmdsZSl9ZnVuY3Rpb24gYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQoZSl7Zm9yRWFjaEFjY3VtdWxhdGVkKGUsYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NpbmdsZVNraXBUYXJnZXQpfWZ1bmN0aW9uIGFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlcyhlLHQsYSxjKXtFdmVudFBsdWdpblV0aWxzLnRyYXZlcnNlRW50ZXJMZWF2ZShhLGMsYWNjdW11bGF0ZURpc3BhdGNoZXMsZSx0KX1mdW5jdGlvbiBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyhlKXtmb3JFYWNoQWNjdW11bGF0ZWQoZSxhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlc1NpbmdsZSl9dmFyIEV2ZW50UHJvcGFnYXRvcnM9e2FjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXM6YWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyxhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2tpcFRhcmdldDphY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2tpcFRhcmdldCxhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlczphY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyxhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXM6YWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzfTttb2R1bGUuZXhwb3J0cz1FdmVudFByb3BhZ2F0b3JzO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtWMlpXNTBVSEp2Y0dGbllYUnZjbk11YW5NaVhTd2libUZ0WlhNaU9sc2lSWFpsYm5SUWJIVm5hVzVJZFdJaUxDSnlaWEYxYVhKbElpd2lSWFpsYm5SUWJIVm5hVzVWZEdsc2N5SXNJbUZqWTNWdGRXeGhkR1ZKYm5Sdklpd2labTl5UldGamFFRmpZM1Z0ZFd4aGRHVmtJaXdpZDJGeWJtbHVaeUlzSW1kbGRFeHBjM1JsYm1WeUlpd2liR2x6ZEdWdVpYSkJkRkJvWVhObElpd2lhVzV6ZENJc0ltVjJaVzUwSWl3aWNISnZjR0ZuWVhScGIyNVFhR0Z6WlNJc0luSmxaMmx6ZEhKaGRHbHZiazVoYldVaUxDSmthWE53WVhSamFFTnZibVpwWnlJc0luQm9ZWE5sWkZKbFoybHpkSEpoZEdsdmJrNWhiV1Z6SWl3aVlXTmpkVzExYkdGMFpVUnBjbVZqZEdsdmJtRnNSR2x6Y0dGMFkyaGxjeUlzSW5Cb1lYTmxJaXdpY0hKdlkyVnpjeUlzSW1WdWRpSXNJazVQUkVWZlJVNVdJaXdpYkdsemRHVnVaWElpTENKZlpHbHpjR0YwWTJoTWFYTjBaVzVsY25NaUxDSmZaR2x6Y0dGMFkyaEpibk4wWVc1alpYTWlMQ0poWTJOMWJYVnNZWFJsVkhkdlVHaGhjMlZFYVhOd1lYUmphR1Z6VTJsdVoyeGxJaXdpZEhKaGRtVnljMlZVZDI5UWFHRnpaU0lzSWw5MFlYSm5aWFJKYm5OMElpd2lZV05qZFcxMWJHRjBaVlIzYjFCb1lYTmxSR2x6Y0dGMFkyaGxjMU5wYm1kc1pWTnJhWEJVWVhKblpYUWlMQ0owWVhKblpYUkpibk4wSWl3aWNHRnlaVzUwU1c1emRDSXNJbWRsZEZCaGNtVnVkRWx1YzNSaGJtTmxJaXdpWVdOamRXMTFiR0YwWlVScGMzQmhkR05vWlhNaUxDSnBaMjV2Y21Wa1JHbHlaV04wYVc5dUlpd2lZV05qZFcxMWJHRjBaVVJwY21WamRFUnBjM0JoZEdOb1pYTlRhVzVuYkdVaUxDSmhZMk4xYlhWc1lYUmxWSGR2VUdoaGMyVkVhWE53WVhSamFHVnpJaXdpWlhabGJuUnpJaXdpWVdOamRXMTFiR0YwWlZSM2IxQm9ZWE5sUkdsemNHRjBZMmhsYzFOcmFYQlVZWEpuWlhRaUxDSmhZMk4xYlhWc1lYUmxSVzUwWlhKTVpXRjJaVVJwYzNCaGRHTm9aWE1pTENKc1pXRjJaU0lzSW1WdWRHVnlJaXdpWm5KdmJTSXNJblJ2SWl3aWRISmhkbVZ5YzJWRmJuUmxja3hsWVhabElpd2lZV05qZFcxMWJHRjBaVVJwY21WamRFUnBjM0JoZEdOb1pYTWlMQ0pGZG1WdWRGQnliM0JoWjJGMGIzSnpJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJVVUVzWVVGRlFTeEpRVUZKUVN4bFFVRnBRa01zVVVGQlVTeHZRa0ZEZWtKRExHbENRVUZ0UWtRc1VVRkJVU3h6UWtGRk0wSkZMR1ZCUVdsQ1JpeFJRVUZSTEc5Q1FVTjZRa2NzYlVKQlFYRkNTQ3hSUVVGUkxIZENRVU0zUWtrc1VVRkJWVW9zVVVGQlVTeHZRa0ZGYkVKTExGbEJRV05PTEdWQlFXVk5MRmxCVFdwRExGTkJRVk5ETEdkQ1FVRm5Ra01zUlVGQlRVTXNSVUZCVDBNc1IwRkRjRU1zU1VGQlNVTXNSVUZCYlVKR0xFVkJRVTFITEdWQlFXVkRMSGRDUVVGM1FrZ3NSMEZEY0VVc1QwRkJUMG9zV1VGQldVVXNSVUZCVFVjc1IwRlRNMElzVTBGQlUwY3NaME5CUVdkRFRpeEZRVUZOVHl4RlFVRlBUaXhIUVVOMlFpeGxRVUY2UWs4c1VVRkJVVU1zU1VGQlNVTXNWVUZEVnl4bFFVRjZRa1lzVVVGQlVVTXNTVUZCU1VNc1ZVRkJORUppTEZGQlFWRkhMRVZCUVUwc2NVTkJSWGhFTEVsQlFVbFhMRVZCUVZkYUxHZENRVUZuUWtNc1JVRkJUVU1zUlVGQlQwMHNSMEZEZUVOSkxFbEJRMFpXTEVWQlFVMVhMRzFDUVVGeFFtcENMR1ZCUVdWTkxFVkJRVTFYTEcxQ1FVRnZRa1FzUjBGRGNFVldMRVZCUVUxWkxHMUNRVUZ4UW14Q0xHVkJRV1ZOTEVWQlFVMVpMRzFDUVVGdlFtSXNTVUZYZUVVc1UwRkJVMk1zYlVOQlFXMURZaXhIUVVOMFEwRXNSMEZCVTBFc1JVRkJUVWNzWlVGQlpVTXNlVUpCUTJoRFdDeHBRa0ZCYVVKeFFpeHBRa0ZCYVVKa0xFVkJRVTFsTEZsQlFXRldMR2REUVVGcFEwd3NSMEZQTVVZc1UwRkJVMmRDTERaRFFVRTJRMmhDTEVkQlEzQkVMRWRCUVVsQkxFZEJRVk5CTEVWQlFVMUhMR1ZCUVdWRExIZENRVUY1UWl4RFFVTjZSQ3hKUVVGSllTeEZRVUZoYWtJc1JVRkJUV1VzV1VGRGJrSkhMRVZCUVdGRUxFVkJRV0Y0UWl4cFFrRkJhVUl3UWl4clFrRkJhMEpHTEVkQlFXTXNTMEZETDBWNFFpeHBRa0ZCYVVKeFFpeHBRa0ZCYVVKSkxFVkJRVmxpTEdkRFFVRnBRMHdzU1VGVGJrWXNVMEZCVTI5Q0xIRkNRVUZ4UW5KQ0xFVkJRVTF6UWl4RlFVRnJRbkpDTEVkQlEzQkVMRWRCUVVsQkxFZEJRVk5CTEVWQlFVMUhMR1ZCUVdWRUxHbENRVUZyUWl4RFFVTnNSQ3hKUVVGSlFTeEZRVUZ0UWtZc1JVRkJUVWNzWlVGQlpVUXNhVUpCUTNoRFVTeEZRVUZYWWl4WlFVRlpSU3hGUVVGTlJ5eEhRVU0zUWxFc1NVRkRSbFlzUlVGQlRWY3NiVUpCUVhGQ2FrSXNaVUZCWlUwc1JVRkJUVmNzYlVKQlFXOUNSQ3hIUVVOd1JWWXNSVUZCVFZrc2JVSkJRWEZDYkVJc1pVRkJaVTBzUlVGQlRWa3NiVUpCUVc5Q1lpeExRVlV4UlN4VFFVRlRkVUlzYVVOQlFXbERkRUlzUjBGRGNFTkJMRWRCUVZOQkxFVkJRVTFITEdWQlFXVkVMR3RDUVVOb1EydENMSEZDUVVGeFFuQkNMRVZCUVUxbExGbEJRV0VzUzBGQlRXWXNSMEZKYkVRc1UwRkJVM1ZDTERaQ1FVRTJRa01zUjBGRGNFTTNRaXh0UWtGQmJVSTJRaXhGUVVGUldDeHZRMEZITjBJc1UwRkJVMWtzZFVOQlFYVkRSQ3hIUVVNNVF6ZENMRzFDUVVGdFFqWkNMRVZCUVZGU0xEaERRVWMzUWl4VFFVRlRWU3dyUWtGQkswSkRMRVZCUVU5RExFVkJRVTlETEVWQlFVMURMRWRCUXpGRWNrTXNhVUpCUVdsQ2MwTXNiVUpCUVcxQ1JpeEZRVUZOUXl4RlFVRkpWaXh4UWtGQmMwSlBMRVZCUVU5RExFZEJSemRGTEZOQlFWTkpMREpDUVVFeVFsSXNSMEZEYkVNM1FpeHRRa0ZCYlVJMlFpeEZRVUZSUml4clEwRmpOMElzU1VGQlNWY3NhVUpCUVcxQ0xFTkJRM0pDVml3MlFrRkJPRUpCTERaQ1FVTTVRa1VzZFVOQlFYZERRU3gxUTBGRGVFTlBMREpDUVVFMFFrRXNNa0pCUXpWQ1Rpd3JRa0ZCWjBOQkxHZERRVWRzUTFFc1QwRkJUME1zVVVGQlZVWWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F0Wkc5dEwyeHBZaTlGZG1WdWRGQnliM0JoWjJGMGIzSnpMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBfYXNzaWduPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLFBvb2xlZENsYXNzPXJlcXVpcmUoXCIuL1Bvb2xlZENsYXNzXCIpLGdldFRleHRDb250ZW50QWNjZXNzb3I9cmVxdWlyZShcIi4vZ2V0VGV4dENvbnRlbnRBY2Nlc3NvclwiKTtmdW5jdGlvbiBGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUodCl7dGhpcy5fcm9vdD10LHRoaXMuX3N0YXJ0VGV4dD10aGlzLmdldFRleHQoKSx0aGlzLl9mYWxsYmFja1RleHQ9bnVsbH1fYXNzaWduKEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZS5wcm90b3R5cGUse2Rlc3RydWN0b3I6ZnVuY3Rpb24oKXt0aGlzLl9yb290PW51bGwsdGhpcy5fc3RhcnRUZXh0PW51bGwsdGhpcy5fZmFsbGJhY2tUZXh0PW51bGx9LGdldFRleHQ6ZnVuY3Rpb24oKXtyZXR1cm5cInZhbHVlXCJpbiB0aGlzLl9yb290P3RoaXMuX3Jvb3QudmFsdWU6dGhpcy5fcm9vdFtnZXRUZXh0Q29udGVudEFjY2Vzc29yKCldfSxnZXREYXRhOmZ1bmN0aW9uKCl7aWYodGhpcy5fZmFsbGJhY2tUZXh0KXJldHVybiB0aGlzLl9mYWxsYmFja1RleHQ7dmFyIHQsZSxvPXRoaXMuX3N0YXJ0VGV4dCxzPW8ubGVuZ3RoLGE9dGhpcy5nZXRUZXh0KCksbD1hLmxlbmd0aDtmb3IodD0wO3Q8cyYmb1t0XT09PWFbdF07dCsrKTt2YXIgaT1zLXQ7Zm9yKGU9MTtlPD1pJiZvW3MtZV09PT1hW2wtZV07ZSsrKTt2YXIgcj1lPjE/MS1lOnZvaWQgMDtyZXR1cm4gdGhpcy5fZmFsbGJhY2tUZXh0PWEuc2xpY2UodCxyKSx0aGlzLl9mYWxsYmFja1RleHR9fSksUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZSksbW9kdWxlLmV4cG9ydHM9RmFsbGJhY2tDb21wb3NpdGlvblN0YXRlO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtaaGJHeGlZV05yUTI5dGNHOXphWFJwYjI1VGRHRjBaUzVxY3lKZExDSnVZVzFsY3lJNld5SmZZWE56YVdkdUlpd2ljbVZ4ZFdseVpTSXNJbEJ2YjJ4bFpFTnNZWE56SWl3aVoyVjBWR1Y0ZEVOdmJuUmxiblJCWTJObGMzTnZjaUlzSWtaaGJHeGlZV05yUTI5dGNHOXphWFJwYjI1VGRHRjBaU0lzSW5KdmIzUWlMQ0owYUdseklpd2lYM0p2YjNRaUxDSmZjM1JoY25SVVpYaDBJaXdpWjJWMFZHVjRkQ0lzSWw5bVlXeHNZbUZqYTFSbGVIUWlMQ0p3Y205MGIzUjVjR1VpTENKa1pYTjBjblZqZEc5eUlpd2lkbUZzZFdVaUxDSm5aWFJFWVhSaElpd2ljM1JoY25RaUxDSmxibVFpTENKemRHRnlkRlpoYkhWbElpd2ljM1JoY25STVpXNW5kR2dpTENKc1pXNW5kR2dpTENKbGJtUldZV3gxWlNJc0ltVnVaRXhsYm1kMGFDSXNJbTFwYmtWdVpDSXNJbk5zYVdObFZHRnBiQ0lzSW5WdVpHVm1hVzVsWkNJc0luTnNhV05sSWl3aVlXUmtVRzl2YkdsdVoxUnZJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJVVUVzWVVGRlFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHbENRVVZzUWtNc1dVRkJZMFFzVVVGQlVTeHBRa0ZGZEVKRkxIVkNRVUY1UWtZc1VVRkJVU3cwUWtGaGNrTXNVMEZCVTBjc2VVSkJRWGxDUXl4SFFVTm9RME1zUzBGQlMwTXNUVUZCVVVZc1JVRkRZa01zUzBGQlMwVXNWMEZCWVVZc1MwRkJTMGNzVlVGRGRrSklMRXRCUVV0SkxHTkJRV2RDTEV0QlIzWkNWaXhSUVVGUlNTeDVRa0ZCZVVKUExGVkJRVmNzUTBGRE1VTkRMRmRCUVZrc1YwRkRWazRzUzBGQlMwTXNUVUZCVVN4TFFVTmlSQ3hMUVVGTFJTeFhRVUZoTEV0QlEyeENSaXhMUVVGTFNTeGpRVUZuUWl4TlFWRjJRa1FzVVVGQlV5eFhRVU5RTEUxQlFVa3NWVUZCVjBnc1MwRkJTME1zVFVGRFdFUXNTMEZCUzBNc1RVRkJUVTBzVFVGRllsQXNTMEZCUzBNc1RVRkJUVW9zTWtKQlUzQkNWeXhSUVVGVExGZEJRMUFzUjBGQlNWSXNTMEZCUzBrc1kwRkRVQ3hQUVVGUFNpeExRVUZMU1N4alFVZGtMRWxCUVVsTExFVkJSMEZETEVWQlJrRkRMRVZCUVdGWUxFdEJRVXRGTEZkQlEyeENWU3hGUVVGalJDeEZRVUZYUlN4UFFVVjZRa01zUlVGQlYyUXNTMEZCUzBjc1ZVRkRhRUpaTEVWQlFWbEVMRVZCUVZORUxFOUJSWHBDTEVsQlFVdEtMRVZCUVZFc1JVRkJSMEVzUlVGQlVVY3NSMEZEYkVKRUxFVkJRVmRHTEV0QlFWZExMRVZCUVZOTUxFZEJSRUZCTEV0QlRYSkRMRWxCUVVsUExFVkJRVk5LTEVWQlFXTklMRVZCUXpOQ0xFbEJRVXRETEVWQlFVMHNSVUZCUjBFc1IwRkJUMDBzUjBGRFprd3NSVUZCVjBNc1JVRkJZMFlzUzBGQlUwa3NSVUZCVTBNc1JVRkJXVXdzUjBGRWFFTkJMRXRCVFRkQ0xFbEJRVWxQTEVWQlFWbFFMRVZCUVUwc1JVRkJTU3hGUVVGSlFTeFBRVUZOVVN4RlFVVndReXhQUVVSQmJFSXNTMEZCUzBrc1kwRkJaMEpWTEVWQlFWTkxMRTFCUVUxV0xFVkJRVTlSTEVkQlEzQkRha0lzUzBGQlMwa3NhVUpCU1doQ1VpeFpRVUZaZDBJc1lVRkJZWFJDTERCQ1FVVjZRblZDTEU5QlFVOURMRkZCUVZWNFFpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzFrYjIwdmJHbGlMMFpoYkd4aVlXTnJRMjl0Y0c5emFYUnBiMjVUZEdGMFpTNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIERPTVByb3BlcnR5PXJlcXVpcmUoXCIuL0RPTVByb3BlcnR5XCIpLE1VU1RfVVNFX1BST1BFUlRZPURPTVByb3BlcnR5LmluamVjdGlvbi5NVVNUX1VTRV9QUk9QRVJUWSxIQVNfQk9PTEVBTl9WQUxVRT1ET01Qcm9wZXJ0eS5pbmplY3Rpb24uSEFTX0JPT0xFQU5fVkFMVUUsSEFTX05VTUVSSUNfVkFMVUU9RE9NUHJvcGVydHkuaW5qZWN0aW9uLkhBU19OVU1FUklDX1ZBTFVFLEhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFPURPTVByb3BlcnR5LmluamVjdGlvbi5IQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRSxIQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFPURPTVByb3BlcnR5LmluamVjdGlvbi5IQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFLEhUTUxET01Qcm9wZXJ0eUNvbmZpZz17aXNDdXN0b21BdHRyaWJ1dGU6UmVnRXhwLnByb3RvdHlwZS50ZXN0LmJpbmQobmV3IFJlZ0V4cChcIl4oZGF0YXxhcmlhKS1bXCIrRE9NUHJvcGVydHkuQVRUUklCVVRFX05BTUVfQ0hBUitcIl0qJFwiKSksUHJvcGVydGllczp7YWNjZXB0OjAsYWNjZXB0Q2hhcnNldDowLGFjY2Vzc0tleTowLGFjdGlvbjowLGFsbG93RnVsbFNjcmVlbjpIQVNfQk9PTEVBTl9WQUxVRSxhbGxvd1RyYW5zcGFyZW5jeTowLGFsdDowLGFzOjAsYXN5bmM6SEFTX0JPT0xFQU5fVkFMVUUsYXV0b0NvbXBsZXRlOjAsYXV0b1BsYXk6SEFTX0JPT0xFQU5fVkFMVUUsY2FwdHVyZTpIQVNfQk9PTEVBTl9WQUxVRSxjZWxsUGFkZGluZzowLGNlbGxTcGFjaW5nOjAsY2hhclNldDowLGNoYWxsZW5nZTowLGNoZWNrZWQ6TVVTVF9VU0VfUFJPUEVSVFl8SEFTX0JPT0xFQU5fVkFMVUUsY2l0ZTowLGNsYXNzSUQ6MCxjbGFzc05hbWU6MCxjb2xzOkhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFLGNvbFNwYW46MCxjb250ZW50OjAsY29udGVudEVkaXRhYmxlOjAsY29udGV4dE1lbnU6MCxjb250cm9sczpIQVNfQk9PTEVBTl9WQUxVRSxjb250cm9sc0xpc3Q6MCxjb29yZHM6MCxjcm9zc09yaWdpbjowLGRhdGE6MCxkYXRlVGltZTowLGRlZmF1bHQ6SEFTX0JPT0xFQU5fVkFMVUUsZGVmZXI6SEFTX0JPT0xFQU5fVkFMVUUsZGlyOjAsZGlzYWJsZWQ6SEFTX0JPT0xFQU5fVkFMVUUsZG93bmxvYWQ6SEFTX09WRVJMT0FERURfQk9PTEVBTl9WQUxVRSxkcmFnZ2FibGU6MCxlbmNUeXBlOjAsZm9ybTowLGZvcm1BY3Rpb246MCxmb3JtRW5jVHlwZTowLGZvcm1NZXRob2Q6MCxmb3JtTm9WYWxpZGF0ZTpIQVNfQk9PTEVBTl9WQUxVRSxmb3JtVGFyZ2V0OjAsZnJhbWVCb3JkZXI6MCxoZWFkZXJzOjAsaGVpZ2h0OjAsaGlkZGVuOkhBU19CT09MRUFOX1ZBTFVFLGhpZ2g6MCxocmVmOjAsaHJlZkxhbmc6MCxodG1sRm9yOjAsaHR0cEVxdWl2OjAsaWNvbjowLGlkOjAsaW5wdXRNb2RlOjAsaW50ZWdyaXR5OjAsaXM6MCxrZXlQYXJhbXM6MCxrZXlUeXBlOjAsa2luZDowLGxhYmVsOjAsbGFuZzowLGxpc3Q6MCxsb29wOkhBU19CT09MRUFOX1ZBTFVFLGxvdzowLG1hbmlmZXN0OjAsbWFyZ2luSGVpZ2h0OjAsbWFyZ2luV2lkdGg6MCxtYXg6MCxtYXhMZW5ndGg6MCxtZWRpYTowLG1lZGlhR3JvdXA6MCxtZXRob2Q6MCxtaW46MCxtaW5MZW5ndGg6MCxtdWx0aXBsZTpNVVNUX1VTRV9QUk9QRVJUWXxIQVNfQk9PTEVBTl9WQUxVRSxtdXRlZDpNVVNUX1VTRV9QUk9QRVJUWXxIQVNfQk9PTEVBTl9WQUxVRSxuYW1lOjAsbm9uY2U6MCxub1ZhbGlkYXRlOkhBU19CT09MRUFOX1ZBTFVFLG9wZW46SEFTX0JPT0xFQU5fVkFMVUUsb3B0aW11bTowLHBhdHRlcm46MCxwbGFjZWhvbGRlcjowLHBsYXlzSW5saW5lOkhBU19CT09MRUFOX1ZBTFVFLHBvc3RlcjowLHByZWxvYWQ6MCxwcm9maWxlOjAscmFkaW9Hcm91cDowLHJlYWRPbmx5OkhBU19CT09MRUFOX1ZBTFVFLHJlZmVycmVyUG9saWN5OjAscmVsOjAscmVxdWlyZWQ6SEFTX0JPT0xFQU5fVkFMVUUscmV2ZXJzZWQ6SEFTX0JPT0xFQU5fVkFMVUUscm9sZTowLHJvd3M6SEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUscm93U3BhbjpIQVNfTlVNRVJJQ19WQUxVRSxzYW5kYm94OjAsc2NvcGU6MCxzY29wZWQ6SEFTX0JPT0xFQU5fVkFMVUUsc2Nyb2xsaW5nOjAsc2VhbWxlc3M6SEFTX0JPT0xFQU5fVkFMVUUsc2VsZWN0ZWQ6TVVTVF9VU0VfUFJPUEVSVFl8SEFTX0JPT0xFQU5fVkFMVUUsc2hhcGU6MCxzaXplOkhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFLHNpemVzOjAsc3BhbjpIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRSxzcGVsbENoZWNrOjAsc3JjOjAsc3JjRG9jOjAsc3JjTGFuZzowLHNyY1NldDowLHN0YXJ0OkhBU19OVU1FUklDX1ZBTFVFLHN0ZXA6MCxzdHlsZTowLHN1bW1hcnk6MCx0YWJJbmRleDowLHRhcmdldDowLHRpdGxlOjAsdHlwZTowLHVzZU1hcDowLHZhbHVlOjAsd2lkdGg6MCx3bW9kZTowLHdyYXA6MCxhYm91dDowLGRhdGF0eXBlOjAsaW5saXN0OjAscHJlZml4OjAscHJvcGVydHk6MCxyZXNvdXJjZTowLHR5cGVvZjowLHZvY2FiOjAsYXV0b0NhcGl0YWxpemU6MCxhdXRvQ29ycmVjdDowLGF1dG9TYXZlOjAsY29sb3I6MCxpdGVtUHJvcDowLGl0ZW1TY29wZTpIQVNfQk9PTEVBTl9WQUxVRSxpdGVtVHlwZTowLGl0ZW1JRDowLGl0ZW1SZWY6MCxyZXN1bHRzOjAsc2VjdXJpdHk6MCx1bnNlbGVjdGFibGU6MH0sRE9NQXR0cmlidXRlTmFtZXM6e2FjY2VwdENoYXJzZXQ6XCJhY2NlcHQtY2hhcnNldFwiLGNsYXNzTmFtZTpcImNsYXNzXCIsaHRtbEZvcjpcImZvclwiLGh0dHBFcXVpdjpcImh0dHAtZXF1aXZcIn0sRE9NUHJvcGVydHlOYW1lczp7fSxET01NdXRhdGlvbk1ldGhvZHM6e3ZhbHVlOmZ1bmN0aW9uKGUsdCl7aWYobnVsbD09dClyZXR1cm4gZS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtcIm51bWJlclwiIT09ZS50eXBlfHwhMT09PWUuaGFzQXR0cmlidXRlKFwidmFsdWVcIik/ZS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrdCk6ZS52YWxpZGl0eSYmIWUudmFsaWRpdHkuYmFkSW5wdXQmJmUub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50IT09ZSYmZS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrdCl9fX07bW9kdWxlLmV4cG9ydHM9SFRNTERPTVByb3BlcnR5Q29uZmlnO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtoVVRVeEVUMDFRY205d1pYSjBlVU52Ym1acFp5NXFjeUpkTENKdVlXMWxjeUk2V3lKRVQwMVFjbTl3WlhKMGVTSXNJbkpsY1hWcGNtVWlMQ0pOVlZOVVgxVlRSVjlRVWs5UVJWSlVXU0lzSW1sdWFtVmpkR2x2YmlJc0lraEJVMTlDVDA5TVJVRk9YMVpCVEZWRklpd2lTRUZUWDA1VlRVVlNTVU5mVmtGTVZVVWlMQ0pJUVZOZlVFOVRTVlJKVmtWZlRsVk5SVkpKUTE5V1FVeFZSU0lzSWtoQlUxOVBWa1ZTVEU5QlJFVkVYMEpQVDB4RlFVNWZWa0ZNVlVVaUxDSklWRTFNUkU5TlVISnZjR1Z5ZEhsRGIyNW1hV2NpTENKcGMwTjFjM1J2YlVGMGRISnBZblYwWlNJc0lsSmxaMFY0Y0NJc0luQnliM1J2ZEhsd1pTSXNJblJsYzNRaUxDSmlhVzVrSWl3aVFWUlVVa2xDVlZSRlgwNUJUVVZmUTBoQlVpSXNJbEJ5YjNCbGNuUnBaWE1pTENKaFkyTmxjSFFpTENKaFkyTmxjSFJEYUdGeWMyVjBJaXdpWVdOalpYTnpTMlY1SWl3aVlXTjBhVzl1SWl3aVlXeHNiM2RHZFd4c1UyTnlaV1Z1SWl3aVlXeHNiM2RVY21GdWMzQmhjbVZ1WTNraUxDSmhiSFFpTENKaGN5SXNJbUZ6ZVc1aklpd2lZWFYwYjBOdmJYQnNaWFJsSWl3aVlYVjBiMUJzWVhraUxDSmpZWEIwZFhKbElpd2lZMlZzYkZCaFpHUnBibWNpTENKalpXeHNVM0JoWTJsdVp5SXNJbU5vWVhKVFpYUWlMQ0pqYUdGc2JHVnVaMlVpTENKamFHVmphMlZrSWl3aVkybDBaU0lzSW1Oc1lYTnpTVVFpTENKamJHRnpjMDVoYldVaUxDSmpiMnh6SWl3aVkyOXNVM0JoYmlJc0ltTnZiblJsYm5RaUxDSmpiMjUwWlc1MFJXUnBkR0ZpYkdVaUxDSmpiMjUwWlhoMFRXVnVkU0lzSW1OdmJuUnliMnh6SWl3aVkyOXVkSEp2YkhOTWFYTjBJaXdpWTI5dmNtUnpJaXdpWTNKdmMzTlBjbWxuYVc0aUxDSmtZWFJoSWl3aVpHRjBaVlJwYldVaUxDSmtaV1poZFd4MElpd2laR1ZtWlhJaUxDSmthWElpTENKa2FYTmhZbXhsWkNJc0ltUnZkMjVzYjJGa0lpd2laSEpoWjJkaFlteGxJaXdpWlc1alZIbHdaU0lzSW1admNtMGlMQ0ptYjNKdFFXTjBhVzl1SWl3aVptOXliVVZ1WTFSNWNHVWlMQ0ptYjNKdFRXVjBhRzlrSWl3aVptOXliVTV2Vm1Gc2FXUmhkR1VpTENKbWIzSnRWR0Z5WjJWMElpd2labkpoYldWQ2IzSmtaWElpTENKb1pXRmtaWEp6SWl3aWFHVnBaMmgwSWl3aWFHbGtaR1Z1SWl3aWFHbG5hQ0lzSW1oeVpXWWlMQ0pvY21WbVRHRnVaeUlzSW1oMGJXeEdiM0lpTENKb2RIUndSWEYxYVhZaUxDSnBZMjl1SWl3aWFXUWlMQ0pwYm5CMWRFMXZaR1VpTENKcGJuUmxaM0pwZEhraUxDSnBjeUlzSW10bGVWQmhjbUZ0Y3lJc0ltdGxlVlI1Y0dVaUxDSnJhVzVrSWl3aWJHRmlaV3dpTENKc1lXNW5JaXdpYkdsemRDSXNJbXh2YjNBaUxDSnNiM2NpTENKdFlXNXBabVZ6ZENJc0ltMWhjbWRwYmtobGFXZG9kQ0lzSW0xaGNtZHBibGRwWkhSb0lpd2liV0Y0SWl3aWJXRjRUR1Z1WjNSb0lpd2liV1ZrYVdFaUxDSnRaV1JwWVVkeWIzVndJaXdpYldWMGFHOWtJaXdpYldsdUlpd2liV2x1VEdWdVozUm9JaXdpYlhWc2RHbHdiR1VpTENKdGRYUmxaQ0lzSW01aGJXVWlMQ0p1YjI1alpTSXNJbTV2Vm1Gc2FXUmhkR1VpTENKdmNHVnVJaXdpYjNCMGFXMTFiU0lzSW5CaGRIUmxjbTRpTENKd2JHRmpaV2h2YkdSbGNpSXNJbkJzWVhselNXNXNhVzVsSWl3aWNHOXpkR1Z5SWl3aWNISmxiRzloWkNJc0luQnliMlpwYkdVaUxDSnlZV1JwYjBkeWIzVndJaXdpY21WaFpFOXViSGtpTENKeVpXWmxjbkpsY2xCdmJHbGplU0lzSW5KbGJDSXNJbkpsY1hWcGNtVmtJaXdpY21WMlpYSnpaV1FpTENKeWIyeGxJaXdpY205M2N5SXNJbkp2ZDFOd1lXNGlMQ0p6WVc1a1ltOTRJaXdpYzJOdmNHVWlMQ0p6WTI5d1pXUWlMQ0p6WTNKdmJHeHBibWNpTENKelpXRnRiR1Z6Y3lJc0luTmxiR1ZqZEdWa0lpd2ljMmhoY0dVaUxDSnphWHBsSWl3aWMybDZaWE1pTENKemNHRnVJaXdpYzNCbGJHeERhR1ZqYXlJc0luTnlZeUlzSW5OeVkwUnZZeUlzSW5OeVkweGhibWNpTENKemNtTlRaWFFpTENKemRHRnlkQ0lzSW5OMFpYQWlMQ0p6ZEhsc1pTSXNJbk4xYlcxaGNua2lMQ0owWVdKSmJtUmxlQ0lzSW5SaGNtZGxkQ0lzSW5ScGRHeGxJaXdpZEhsd1pTSXNJblZ6WlUxaGNDSXNJblpoYkhWbElpd2lkMmxrZEdnaUxDSjNiVzlrWlNJc0luZHlZWEFpTENKaFltOTFkQ0lzSW1SaGRHRjBlWEJsSWl3aWFXNXNhWE4wSWl3aWNISmxabWw0SWl3aWNISnZjR1Z5ZEhraUxDSnlaWE52ZFhKalpTSXNJblI1Y0dWdlppSXNJblp2WTJGaUlpd2lZWFYwYjBOaGNHbDBZV3hwZW1VaUxDSmhkWFJ2UTI5eWNtVmpkQ0lzSW1GMWRHOVRZWFpsSWl3aVkyOXNiM0lpTENKcGRHVnRVSEp2Y0NJc0ltbDBaVzFUWTI5d1pTSXNJbWwwWlcxVWVYQmxJaXdpYVhSbGJVbEVJaXdpYVhSbGJWSmxaaUlzSW5KbGMzVnNkSE1pTENKelpXTjFjbWwwZVNJc0luVnVjMlZzWldOMFlXSnNaU0lzSWtSUFRVRjBkSEpwWW5WMFpVNWhiV1Z6SWl3aVJFOU5VSEp2Y0dWeWRIbE9ZVzFsY3lJc0lrUlBUVTExZEdGMGFXOXVUV1YwYUc5a2N5SXNJbTV2WkdVaUxDSnlaVzF2ZG1WQmRIUnlhV0oxZEdVaUxDSm9ZWE5CZEhSeWFXSjFkR1VpTENKelpYUkJkSFJ5YVdKMWRHVWlMQ0oyWVd4cFpHbDBlU0lzSW1KaFpFbHVjSFYwSWl3aWIzZHVaWEpFYjJOMWJXVnVkQ0lzSW1GamRHbDJaVVZzWlcxbGJuUWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRlJRU3hoUVVWQkxFbEJRVWxCTEZsQlFXTkRMRkZCUVZFc2FVSkJSWFJDUXl4clFrRkJiMEpHTEZsQlFWbEhMRlZCUVZWRUxHdENRVU14UTBVc2EwSkJRVzlDU2l4WlFVRlpSeXhWUVVGVlF5eHJRa0ZETVVORExHdENRVUZ2UWt3c1dVRkJXVWNzVlVGQlZVVXNhMEpCUXpGRFF5d3lRa0ZCTmtKT0xGbEJRVmxITEZWQlFWVkhMREpDUVVOdVJFTXNOa0pCUVN0Q1VDeFpRVUZaUnl4VlFVRlZTU3cyUWtGRmNrUkRMSE5DUVVGM1FpeERRVU14UWtNc2EwSkJRVzFDUXl4UFFVRlBReXhWUVVGVlF5eExRVUZMUXl4TFFVRkxMRWxCUVVsSUxFOUJRVThzYVVKQlFXMUNWaXhaUVVGWll5eHZRa0ZCYzBJc1VVRkRPVWRETEZkQlFWa3NRMEZKVmtNc1QwRkJVU3hGUVVOU1F5eGpRVUZsTEVWQlEyWkRMRlZCUVZjc1JVRkRXRU1zVDBGQlVTeEZRVU5TUXl4blFrRkJhVUpvUWl4clFrRkRha0pwUWl4clFrRkJiVUlzUlVGRGJrSkRMRWxCUVVzc1JVRkZURU1zUjBGQlNTeEZRVU5LUXl4TlFVRlBjRUlzYTBKQlExQnhRaXhoUVVGakxFVkJSMlJETEZOQlFWVjBRaXhyUWtGRFZuVkNMRkZCUVZOMlFpeHJRa0ZEVkhkQ0xGbEJRV0VzUlVGRFlrTXNXVUZCWVN4RlFVTmlReXhSUVVGVExFVkJRMVJETEZWQlFWY3NSVUZEV0VNc1VVRkJVemxDTEd0Q1FVRnZRa1VzYTBKQlF6ZENOa0lzUzBGQlRTeEZRVU5PUXl4UlFVRlRMRVZCUTFSRExGVkJRVmNzUlVGRFdFTXNTMEZCVFRsQ0xESkNRVU5PSzBJc1VVRkJVeXhGUVVOVVF5eFJRVUZUTEVWQlExUkRMR2RDUVVGcFFpeEZRVU5xUWtNc1dVRkJZU3hGUVVOaVF5eFRRVUZWY2tNc2EwSkJRMVp6UXl4aFFVRmpMRVZCUTJSRExFOUJRVkVzUlVGRFVrTXNXVUZCWVN4RlFVTmlReXhMUVVGTkxFVkJRMDVETEZOQlFWVXNSVUZEVmtNc1VVRkJWek5ETEd0Q1FVTllORU1zVFVGQlR6VkRMR3RDUVVOUU5rTXNTVUZCU3l4RlFVTk1ReXhUUVVGVk9VTXNhMEpCUTFZclF5eFRRVUZWTlVNc05rSkJRMVkyUXl4VlFVRlhMRVZCUTFoRExGRkJRVk1zUlVGRFZFTXNTMEZCVFN4RlFVTk9ReXhYUVVGWkxFVkJRMXBETEZsQlFXRXNSVUZEWWtNc1YwRkJXU3hGUVVOYVF5eGxRVUZuUW5SRUxHdENRVU5vUW5WRUxGZEJRVmtzUlVGRFdrTXNXVUZCWVN4RlFVTmlReXhSUVVGVExFVkJRMVJETEU5QlFWRXNSVUZEVWtNc1QwRkJVVE5FTEd0Q1FVTlNORVFzUzBGQlRTeEZRVU5PUXl4TFFVRk5MRVZCUTA1RExGTkJRVlVzUlVGRFZrTXNVVUZCVXl4RlFVTlVReXhWUVVGWExFVkJRMWhETEV0QlFVMHNSVUZEVGtNc1IwRkJTU3hGUVVOS1F5eFZRVUZYTEVWQlExaERMRlZCUVZjc1JVRkRXRU1zUjBGQlNTeEZRVU5LUXl4VlFVRlhMRVZCUTFoRExGRkJRVk1zUlVGRFZFTXNTMEZCVFN4RlFVTk9ReXhOUVVGUExFVkJRMUJETEV0QlFVMHNSVUZEVGtNc1MwRkJUU3hGUVVOT1F5eExRVUZOTlVVc2EwSkJRMDQyUlN4SlFVRkxMRVZCUTB4RExGTkJRVlVzUlVGRFZrTXNZVUZCWXl4RlFVTmtReXhaUVVGaExFVkJRMkpETEVsQlFVc3NSVUZEVEVNc1ZVRkJWeXhGUVVOWVF5eE5RVUZQTEVWQlExQkRMRmRCUVZrc1JVRkRXa01zVDBGQlVTeEZRVU5TUXl4SlFVRkxMRVZCUTB4RExGVkJRVmNzUlVGSFdFTXNVMEZCVlRGR0xHdENRVUZ2UWtVc2EwSkJRemxDZVVZc1RVRkJUek5HTEd0Q1FVRnZRa1VzYTBKQlF6TkNNRVlzUzBGQlRTeEZRVU5PUXl4TlFVRlBMRVZCUTFCRExGZEJRVmsxUml4clFrRkRXalpHTEV0QlFVMDNSaXhyUWtGRFRqaEdMRkZCUVZNc1JVRkRWRU1zVVVGQlV5eEZRVU5VUXl4WlFVRmhMRVZCUTJKRExGbEJRV0ZxUnl4clFrRkRZbXRITEU5QlFWRXNSVUZEVWtNc1VVRkJVeXhGUVVOVVF5eFJRVUZUTEVWQlExUkRMRmRCUVZrc1JVRkRXa01zVTBGQlZYUkhMR3RDUVVOV2RVY3NaVUZCWjBJc1JVRkRhRUpETEVsQlFVc3NSVUZEVEVNc1UwRkJWWHBITEd0Q1FVTldNRWNzVTBGQlZURkhMR3RDUVVOV01rY3NTMEZCVFN4RlFVTk9ReXhMUVVGTk1VY3NNa0pCUTA0eVJ5eFJRVUZUTlVjc2EwSkJRMVEyUnl4UlFVRlRMRVZCUTFSRExFMUJRVThzUlVGRFVFTXNUMEZCVVdoSUxHdENRVU5TYVVnc1ZVRkJWeXhGUVVOWVF5eFRRVUZWYkVnc2EwSkJRMVp0U0N4VFFVRlZja2dzYTBKQlFXOUNSU3hyUWtGRE9VSnZTQ3hOUVVGUExFVkJRMUJETEV0QlFVMXVTQ3d5UWtGRFRtOUlMRTFCUVU4c1JVRkRVRU1zUzBGQlRYSklMREpDUVVOT2MwZ3NWMEZCV1N4RlFVTmFReXhKUVVGTExFVkJRMHhETEU5QlFWRXNSVUZEVWtNc1VVRkJVeXhGUVVOVVF5eFBRVUZSTEVWQlExSkRMRTFCUVU4MVNDeHJRa0ZEVURaSUxFdEJRVTBzUlVGRFRrTXNUVUZCVHl4RlFVTlFReXhSUVVGVExFVkJRMVJETEZOQlFWVXNSVUZEVmtNc1QwRkJVU3hGUVVOU1F5eE5RVUZQTEVWQlJWQkRMRXRCUVUwc1JVRkRUa01zVDBGQlVTeEZRVU5TUXl4TlFVRlBMRVZCUTFCRExFMUJRVThzUlVGRFVFTXNUVUZCVHl4RlFVTlFReXhMUVVGTkxFVkJTMDVETEUxQlFVOHNSVUZEVUVNc1UwRkJWU3hGUVVOV1F5eFBRVUZSTEVWQlExSkRMRTlCUVZFc1JVRkZVa01zVTBGQlZTeEZRVU5XUXl4VFFVRlZMRVZCUTFaRExFOUJRVlVzUlVGRFZrTXNUVUZCVHl4RlFVOVFReXhsUVVGblFpeEZRVU5vUWtNc1dVRkJZU3hGUVVWaVF5eFRRVUZWTEVWQlJWWkRMRTFCUVU4c1JVRkhVRU1zVTBGQlZTeEZRVU5XUXl4VlFVRlhka29zYTBKQlExaDNTaXhUUVVGVkxFVkJTVlpETEU5QlFWRXNSVUZEVWtNc1VVRkJVeXhGUVVkVVF5eFJRVUZUTEVWQlIxUkRMRk5CUVZVc1JVRkZWa01zWVVGQll5eEhRVVZvUWtNc2EwSkJRVzFDTEVOQlEycENha29zWTBGQlpTeHBRa0ZEWm10Q0xGVkJRVmNzVVVGRFdHZERMRkZCUVZNc1RVRkRWRU1zVlVGQlZ5eGpRVVZpSzBZc2FVSkJRV3RDTEVkQlEyeENReXh0UWtGQmIwSXNRMEZEYkVJeFFpeE5RVUZQTEZOQlFWVXlRaXhGUVVGTk0wSXNSMEZEY2tJc1IwRkJZU3hOUVVGVVFTeEZRVU5HTEU5QlFVOHlRaXhGUVVGTFF5eG5Ra0ZCWjBJc1UwRk5XaXhYUVVGa1JDeEZRVUZMTjBJc1QwRkJiMFFzU1VGQkwwSTJRaXhGUVVGTFJTeGhRVUZoTEZOQlF6bERSaXhGUVVGTFJ5eGhRVUZoTEZGQlFWTXNSMEZCU3psQ0xFZEJRM1pDTWtJc1JVRkJTMGtzVjBGQllVb3NSVUZCUzBrc1UwRkJVME1zVlVGQldVd3NSVUZCUzAwc1kwRkJZME1zWjBKQlFXdENVQ3hIUVZNeFJrRXNSVUZCUzBjc1lVRkJZU3hSUVVGVExFZEJRVXM1UWl4TlFVMTRRMjFETEU5QlFVOURMRkZCUVZWMFN5SXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzFrYjIwdmJHbGlMMGhVVFV4RVQwMVFjbTl3WlhKMGVVTnZibVpwWnk1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBlc2NhcGUoZSl7dmFyIG49e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiKyhcIlwiK2UpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihlKXtyZXR1cm4gbltlXX0pfWZ1bmN0aW9uIHVuZXNjYXBlKGUpe3ZhciBuPXtcIj0wXCI6XCI9XCIsXCI9MlwiOlwiOlwifTtyZXR1cm4oXCJcIisoXCIuXCI9PT1lWzBdJiZcIiRcIj09PWVbMV0/ZS5zdWJzdHJpbmcoMik6ZS5zdWJzdHJpbmcoMSkpKS5yZXBsYWNlKC8oPTB8PTIpL2csZnVuY3Rpb24oZSl7cmV0dXJuIG5bZV19KX12YXIgS2V5RXNjYXBlVXRpbHM9e2VzY2FwZTplc2NhcGUsdW5lc2NhcGU6dW5lc2NhcGV9O21vZHVsZS5leHBvcnRzPUtleUVzY2FwZVV0aWxzO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWt0bGVVVnpZMkZ3WlZWMGFXeHpMbXB6SWwwc0ltNWhiV1Z6SWpwYkltVnpZMkZ3WlNJc0ltdGxlU0lzSW1WelkyRndaWEpNYjI5cmRYQWlMQ0k5SWl3aU9pSXNJbkpsY0d4aFkyVWlMQ0p0WVhSamFDSXNJblZ1WlhOallYQmxJaXdpZFc1bGMyTmhjR1Z5VEc5dmEzVndJaXdpUFRBaUxDSTlNaUlzSW5OMVluTjBjbWx1WnlJc0lrdGxlVVZ6WTJGd1pWVjBhV3h6SWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCVTBFc1lVRlRRU3hUUVVGVFFTeFBRVUZQUXl4SFFVTmtMRWxCUTBsRExFVkJRV2RDTEVOQlEyeENReXhKUVVGTExFdEJRMHhETEVsQlFVc3NUVUZOVUN4TlFVRlBMRXRCU21Nc1IwRkJTMGdzUjBGQlMwa3NVVUZNWWl4UlFVdHJReXhUUVVGVlF5eEhRVU0xUkN4UFFVRlBTaXhGUVVGalNTeExRVmw2UWl4VFFVRlRReXhUUVVGVFRpeEhRVU5vUWl4SlFVTkpUeXhGUVVGclFpeERRVU53UWtNc1MwRkJUU3hKUVVOT1F5eExRVUZOTEV0QlNWSXNUMEZCVVN4SlFVWnpRaXhOUVVGWVZDeEZRVUZKTEVsQlFYbENMRTFCUVZoQkxFVkJRVWtzUjBGQllVRXNSVUZCU1ZVc1ZVRkJWU3hIUVVGTFZpeEZRVUZKVlN4VlFVRlZMRXRCUlRWRVRpeFJRVkJRTEZkQlR6aENMRk5CUVZWRExFZEJRekZFTEU5QlFVOUZMRVZCUVdkQ1JpeExRVWt6UWl4SlFVRkpUU3hsUVVGcFFpeERRVU51UWxvc1QwRkJVVUVzVDBGRFVrOHNVMEZCVlVFc1ZVRkhXazBzVDBGQlQwTXNVVUZCVlVZaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Y21WaFkzUXRaRzl0TDJ4cFlpOUxaWGxGYzJOaGNHVlZkR2xzY3k1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgX3Byb2RJbnZhcmlhbnQ9cmVxdWlyZShcIi4vcmVhY3RQcm9kSW52YXJpYW50XCIpLFJlYWN0UHJvcFR5cGVzU2VjcmV0PXJlcXVpcmUoXCIuL1JlYWN0UHJvcFR5cGVzU2VjcmV0XCIpLHByb3BUeXBlc0ZhY3Rvcnk9cmVxdWlyZShcInByb3AtdHlwZXMvZmFjdG9yeVwiKSxSZWFjdD1yZXF1aXJlKFwicmVhY3QvbGliL1JlYWN0XCIpLFByb3BUeXBlcz1wcm9wVHlwZXNGYWN0b3J5KFJlYWN0LmlzVmFsaWRFbGVtZW50KSxpbnZhcmlhbnQ9cmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKSx3YXJuaW5nPXJlcXVpcmUoXCJmYmpzL2xpYi93YXJuaW5nXCIpLGhhc1JlYWRPbmx5VmFsdWU9e2J1dHRvbjohMCxjaGVja2JveDohMCxpbWFnZTohMCxoaWRkZW46ITAscmFkaW86ITAscmVzZXQ6ITAsc3VibWl0OiEwfTtmdW5jdGlvbiBfYXNzZXJ0U2luZ2xlTGluayhlKXtudWxsIT1lLmNoZWNrZWRMaW5rJiZudWxsIT1lLnZhbHVlTGluayYmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwiQ2Fubm90IHByb3ZpZGUgYSBjaGVja2VkTGluayBhbmQgYSB2YWx1ZUxpbmsuIElmIHlvdSB3YW50IHRvIHVzZSBjaGVja2VkTGluaywgeW91IHByb2JhYmx5IGRvbid0IHdhbnQgdG8gdXNlIHZhbHVlTGluayBhbmQgdmljZSB2ZXJzYS5cIik6X3Byb2RJbnZhcmlhbnQoXCI4N1wiKSl9ZnVuY3Rpb24gX2Fzc2VydFZhbHVlTGluayhlKXtfYXNzZXJ0U2luZ2xlTGluayhlKSwobnVsbCE9ZS52YWx1ZXx8bnVsbCE9ZS5vbkNoYW5nZSkmJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcIkNhbm5vdCBwcm92aWRlIGEgdmFsdWVMaW5rIGFuZCBhIHZhbHVlIG9yIG9uQ2hhbmdlIGV2ZW50LiBJZiB5b3Ugd2FudCB0byB1c2UgdmFsdWUgb3Igb25DaGFuZ2UsIHlvdSBwcm9iYWJseSBkb24ndCB3YW50IHRvIHVzZSB2YWx1ZUxpbmsuXCIpOl9wcm9kSW52YXJpYW50KFwiODhcIikpfWZ1bmN0aW9uIF9hc3NlcnRDaGVja2VkTGluayhlKXtfYXNzZXJ0U2luZ2xlTGluayhlKSwobnVsbCE9ZS5jaGVja2VkfHxudWxsIT1lLm9uQ2hhbmdlKSYmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwiQ2Fubm90IHByb3ZpZGUgYSBjaGVja2VkTGluayBhbmQgYSBjaGVja2VkIHByb3BlcnR5IG9yIG9uQ2hhbmdlIGV2ZW50LiBJZiB5b3Ugd2FudCB0byB1c2UgY2hlY2tlZCBvciBvbkNoYW5nZSwgeW91IHByb2JhYmx5IGRvbid0IHdhbnQgdG8gdXNlIGNoZWNrZWRMaW5rXCIpOl9wcm9kSW52YXJpYW50KFwiODlcIikpfXZhciBwcm9wVHlwZXM9e3ZhbHVlOmZ1bmN0aW9uKGUsbixhKXtyZXR1cm4hZVtuXXx8aGFzUmVhZE9ubHlWYWx1ZVtlLnR5cGVdfHxlLm9uQ2hhbmdlfHxlLnJlYWRPbmx5fHxlLmRpc2FibGVkP251bGw6bmV3IEVycm9yKFwiWW91IHByb3ZpZGVkIGEgYHZhbHVlYCBwcm9wIHRvIGEgZm9ybSBmaWVsZCB3aXRob3V0IGFuIGBvbkNoYW5nZWAgaGFuZGxlci4gVGhpcyB3aWxsIHJlbmRlciBhIHJlYWQtb25seSBmaWVsZC4gSWYgdGhlIGZpZWxkIHNob3VsZCBiZSBtdXRhYmxlIHVzZSBgZGVmYXVsdFZhbHVlYC4gT3RoZXJ3aXNlLCBzZXQgZWl0aGVyIGBvbkNoYW5nZWAgb3IgYHJlYWRPbmx5YC5cIil9LGNoZWNrZWQ6ZnVuY3Rpb24oZSxuLGEpe3JldHVybiFlW25dfHxlLm9uQ2hhbmdlfHxlLnJlYWRPbmx5fHxlLmRpc2FibGVkP251bGw6bmV3IEVycm9yKFwiWW91IHByb3ZpZGVkIGEgYGNoZWNrZWRgIHByb3AgdG8gYSBmb3JtIGZpZWxkIHdpdGhvdXQgYW4gYG9uQ2hhbmdlYCBoYW5kbGVyLiBUaGlzIHdpbGwgcmVuZGVyIGEgcmVhZC1vbmx5IGZpZWxkLiBJZiB0aGUgZmllbGQgc2hvdWxkIGJlIG11dGFibGUgdXNlIGBkZWZhdWx0Q2hlY2tlZGAuIE90aGVyd2lzZSwgc2V0IGVpdGhlciBgb25DaGFuZ2VgIG9yIGByZWFkT25seWAuXCIpfSxvbkNoYW5nZTpQcm9wVHlwZXMuZnVuY30sbG9nZ2VkVHlwZUZhaWx1cmVzPXt9O2Z1bmN0aW9uIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bShlKXtpZihlKXt2YXIgbj1lLmdldE5hbWUoKTtpZihuKXJldHVyblwiIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGBcIituK1wiYC5cIn1yZXR1cm5cIlwifXZhciBMaW5rZWRWYWx1ZVV0aWxzPXtjaGVja1Byb3BUeXBlczpmdW5jdGlvbihlLG4sYSl7Zm9yKHZhciByIGluIHByb3BUeXBlcyl7aWYocHJvcFR5cGVzLmhhc093blByb3BlcnR5KHIpKXZhciBvPXByb3BUeXBlc1tyXShuLHIsZSxcInByb3BcIixudWxsLFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtpZihvIGluc3RhbmNlb2YgRXJyb3ImJiEoby5tZXNzYWdlIGluIGxvZ2dlZFR5cGVGYWlsdXJlcykpe2xvZ2dlZFR5cGVGYWlsdXJlc1tvLm1lc3NhZ2VdPSEwO3ZhciB0PWdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bShhKTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ3YXJuaW5nKCExLFwiRmFpbGVkIGZvcm0gcHJvcFR5cGU6ICVzJXNcIixvLm1lc3NhZ2UsdCl9fX0sZ2V0VmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIGUudmFsdWVMaW5rPyhfYXNzZXJ0VmFsdWVMaW5rKGUpLGUudmFsdWVMaW5rLnZhbHVlKTplLnZhbHVlfSxnZXRDaGVja2VkOmZ1bmN0aW9uKGUpe3JldHVybiBlLmNoZWNrZWRMaW5rPyhfYXNzZXJ0Q2hlY2tlZExpbmsoZSksZS5jaGVja2VkTGluay52YWx1ZSk6ZS5jaGVja2VkfSxleGVjdXRlT25DaGFuZ2U6ZnVuY3Rpb24oZSxuKXtyZXR1cm4gZS52YWx1ZUxpbms/KF9hc3NlcnRWYWx1ZUxpbmsoZSksZS52YWx1ZUxpbmsucmVxdWVzdENoYW5nZShuLnRhcmdldC52YWx1ZSkpOmUuY2hlY2tlZExpbms/KF9hc3NlcnRDaGVja2VkTGluayhlKSxlLmNoZWNrZWRMaW5rLnJlcXVlc3RDaGFuZ2Uobi50YXJnZXQuY2hlY2tlZCkpOmUub25DaGFuZ2U/ZS5vbkNoYW5nZS5jYWxsKHZvaWQgMCxuKTp2b2lkIDB9fTttb2R1bGUuZXhwb3J0cz1MaW5rZWRWYWx1ZVV0aWxzO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWt4cGJtdGxaRlpoYkhWbFZYUnBiSE11YW5NaVhTd2libUZ0WlhNaU9sc2lYM0J5YjJSSmJuWmhjbWxoYm5RaUxDSnlaWEYxYVhKbElpd2lVbVZoWTNSUWNtOXdWSGx3WlhOVFpXTnlaWFFpTENKd2NtOXdWSGx3WlhOR1lXTjBiM0o1SWl3aVVtVmhZM1FpTENKUWNtOXdWSGx3WlhNaUxDSnBjMVpoYkdsa1JXeGxiV1Z1ZENJc0ltbHVkbUZ5YVdGdWRDSXNJbmRoY201cGJtY2lMQ0pvWVhOU1pXRmtUMjVzZVZaaGJIVmxJaXdpWW5WMGRHOXVJaXdpWTJobFkydGliM2dpTENKcGJXRm5aU0lzSW1ocFpHUmxiaUlzSW5KaFpHbHZJaXdpY21WelpYUWlMQ0p6ZFdKdGFYUWlMQ0pmWVhOelpYSjBVMmx1WjJ4bFRHbHVheUlzSW1sdWNIVjBVSEp2Y0hNaUxDSmphR1ZqYTJWa1RHbHVheUlzSW5aaGJIVmxUR2x1YXlJc0luQnliMk5sYzNNaUxDSmxibllpTENKT1QwUkZYMFZPVmlJc0lsOWhjM05sY25SV1lXeDFaVXhwYm1zaUxDSjJZV3gxWlNJc0ltOXVRMmhoYm1kbElpd2lYMkZ6YzJWeWRFTm9aV05yWldSTWFXNXJJaXdpWTJobFkydGxaQ0lzSW5CeWIzQlVlWEJsY3lJc0luQnliM0J6SWl3aWNISnZjRTVoYldVaUxDSmpiMjF3YjI1bGJuUk9ZVzFsSWl3aWRIbHdaU0lzSW5KbFlXUlBibXg1SWl3aVpHbHpZV0pzWldRaUxDSkZjbkp2Y2lJc0ltWjFibU1pTENKc2IyZG5aV1JVZVhCbFJtRnBiSFZ5WlhNaUxDSm5aWFJFWldOc1lYSmhkR2x2YmtWeWNtOXlRV1JrWlc1a2RXMGlMQ0p2ZDI1bGNpSXNJbTVoYldVaUxDSm5aWFJPWVcxbElpd2lUR2x1YTJWa1ZtRnNkV1ZWZEdsc2N5SXNJbU5vWldOclVISnZjRlI1Y0dWeklpd2lkR0ZuVG1GdFpTSXNJbWhoYzA5M2JsQnliM0JsY25SNUlpd2laWEp5YjNJaUxDSnRaWE56WVdkbElpd2lZV1JrWlc1a2RXMGlMQ0puWlhSV1lXeDFaU0lzSW1kbGRFTm9aV05yWldRaUxDSmxlR1ZqZFhSbFQyNURhR0Z1WjJVaUxDSmxkbVZ1ZENJc0luSmxjWFZsYzNSRGFHRnVaMlVpTENKMFlYSm5aWFFpTENKallXeHNJaXdpZFc1a1pXWnBibVZrSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCVVVFc1lVRkZRU3hKUVVGSlFTeGxRVUZwUWtNc1VVRkJVU3gzUWtGRmVrSkRMSEZDUVVGMVFrUXNVVUZCVVN3d1FrRkRMMEpGTEdsQ1FVRnRRa1lzVVVGQlVTeHpRa0ZGTTBKSExFMUJRVkZJTEZGQlFWRXNiVUpCUTJoQ1NTeFZRVUZaUml4cFFrRkJhVUpETEUxQlFVMUZMR2RDUVVWdVEwTXNWVUZCV1U0c1VVRkJVU3h6UWtGRGNFSlBMRkZCUVZWUUxGRkJRVkVzYjBKQlJXeENVU3hwUWtGQmJVSXNRMEZEY2tKRExGRkJRVkVzUlVGRFVrTXNWVUZCVlN4RlFVTldReXhQUVVGUExFVkJRMUJETEZGQlFWRXNSVUZEVWtNc1QwRkJUeXhGUVVOUVF5eFBRVUZQTEVWQlExQkRMRkZCUVZFc1IwRkhWaXhUUVVGVFF5eHJRa0ZCYTBKRExFZEJRMGNzVFVGQk1VSkJMRVZCUVZkRExHRkJRU3RETEUxQlFYaENSQ3hGUVVGWFJTeFpRVUU0UXl4bFFVRjZRa01zVVVGQlVVTXNTVUZCU1VNc1UwRkJORUpvUWl4WFFVRlZMRVZCUVU4c01FbEJRVFpKVUN4bFFVRmxMRTlCUlROU0xGTkJRVk4zUWl4cFFrRkJhVUpPTEVkQlEzaENSQ3hyUWtGQmEwSkRMRWxCUTBrc1RVRkJjRUpCTEVWQlFWZFBMRTlCUVhkRExFMUJRWFpDVUN4RlFVRlhVU3haUVVFMlF5eGxRVUY2UWt3c1VVRkJVVU1zU1VGQlNVTXNVMEZCTkVKb1FpeFhRVUZWTEVWQlFVOHNOa2xCUVdkS1VDeGxRVUZsTEU5QlIzWlNMRk5CUVZNeVFpeHRRa0ZCYlVKVUxFZEJRekZDUkN4clFrRkJhMEpETEVsQlEwMHNUVUZCZEVKQkxFVkJRVmRWTEZOQlFUQkRMRTFCUVhaQ1ZpeEZRVUZYVVN4WlFVRTJReXhsUVVGNlFrd3NVVUZCVVVNc1NVRkJTVU1zVTBGQk5FSm9RaXhYUVVGVkxFVkJRVThzTmtwQlFXZExVQ3hsUVVGbExFOUJSM3BUTEVsQlFVazJRaXhWUVVGWkxFTkJRMlJLTEUxQlFVOHNVMEZCVlVzc1JVRkJUME1zUlVGQlZVTXNSMEZEYUVNc1QwRkJTMFlzUlVGQlRVTXNTVUZCWVhSQ0xHbENRVUZwUW5GQ0xFVkJRVTFITEU5QlFWTklMRVZCUVUxS0xGVkJRVmxKTEVWQlFVMUpMRlZCUVZsS0xFVkJRVTFMTEZOQlEzcEdMRXRCUlVZc1NVRkJTVU1zVFVGQlRTeHpUa0ZGYmtKU0xGRkJRVk1zVTBGQlZVVXNSVUZCVDBNc1JVRkJWVU1zUjBGRGJFTXNUMEZCUzBZc1JVRkJUVU1zU1VGQllVUXNSVUZCVFVvc1ZVRkJXVWtzUlVGQlRVa3NWVUZCV1Vvc1JVRkJUVXNzVTBGRGVrUXNTMEZGUml4SlFVRkpReXhOUVVGTkxEQk9RVVZ1UWxZc1UwRkJWWEpDTEZWQlFWVm5ReXhOUVVkc1FrTXNiVUpCUVhGQ0xFZEJRM3BDTEZOQlFWTkRMRFJDUVVFMFFrTXNSMEZEYmtNc1IwRkJTVUVzUlVGQlR5eERRVU5VTEVsQlFVbERMRVZCUVU5RUxFVkJRVTFGTEZWQlEycENMRWRCUVVsRUxFVkJRMFlzVFVGQlR5eG5RMEZCYTBOQkxFVkJRVThzUzBGSGNFUXNUVUZCVHl4SFFVOVVMRWxCUVVsRkxHbENRVUZ0UWl4RFFVTnlRa01zWlVGQlowSXNVMEZCVlVNc1JVRkJVMllzUlVGQlQxVXNSMEZEZUVNc1NVRkJTeXhKUVVGSlZDeExRVUZaUml4VlFVRlhMRU5CUXpsQ0xFZEJRVWxCTEZWQlFWVnBRaXhsUVVGbFppeEhRVU16UWl4SlFVRkpaMElzUlVGQlVXeENMRlZCUVZWRkxFZEJRVlZFTEVWQlFVOURMRVZCUVZWakxFVkJRVk1zVDBGQlVTeExRVUZOTTBNc2MwSkJSVEZGTEVkQlFVazJReXhoUVVGcFFsZ3NVMEZCVjFjc1JVRkJUVU1zVjBGQlYxWXNiMEpCUVhGQ0xFTkJSM0JGUVN4dFFrRkJiVUpUTEVWQlFVMURMRlZCUVZjc1JVRkZjRU1zU1VGQlNVTXNSVUZCVjFZc05FSkJRVFJDUXl4SFFVTnNRaXhsUVVGNlFtNUNMRkZCUVZGRExFbEJRVWxETEZWQlFUUkNaaXhUUVVGUkxFVkJRVThzTmtKQlFUaENkVU1zUlVGQlRVTXNVVUZCVTBNc1RVRlRNVWRETEZOQlFWVXNVMEZCVldoRExFZEJRMnhDTEU5QlFVbEJMRVZCUVZkRkxGZEJRMkpKTEdsQ1FVRnBRazRzUjBGRFZrRXNSVUZCVjBVc1ZVRkJWVXNzVDBGRmRrSlFMRVZCUVZkUExFOUJVWEJDTUVJc1YwRkJXU3hUUVVGVmFrTXNSMEZEY0VJc1QwRkJTVUVzUlVGQlYwTXNZVUZEWWxFc2JVSkJRVzFDVkN4SFFVTmFRU3hGUVVGWFF5eFpRVUZaVFN4UFFVVjZRbEFzUlVGQlYxVXNVMEZQY0VKM1FpeG5Ra0ZCYVVJc1UwRkJWV3hETEVWQlFWbHRReXhIUVVOeVF5eFBRVUZKYmtNc1JVRkJWMFVzVjBGRFlra3NhVUpCUVdsQ1RpeEhRVU5XUVN4RlFVRlhSU3hWUVVGVmEwTXNZMEZCWTBRc1JVRkJUVVVzVDBGQlR6bENMRkZCUXpsRFVDeEZRVUZYUXl4aFFVTndRbEVzYlVKQlFXMUNWQ3hIUVVOYVFTeEZRVUZYUXl4WlFVRlpiVU1zWTBGQlkwUXNSVUZCVFVVc1QwRkJUek5DTEZWQlEyaEVWaXhGUVVGWFVTeFRRVU5pVWl4RlFVRlhVU3hUUVVGVE9FSXNWVUZCUzBNc1JVRkJWMG9zVVVGRWRFTXNTVUZOV0Vzc1QwRkJUME1zVVVGQlZXaENJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwzSmxZV04wTFdSdmJTOXNhV0l2VEdsdWEyVmtWbUZzZFdWVmRHbHNjeTVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBfcHJvZEludmFyaWFudD1yZXF1aXJlKFwiLi9yZWFjdFByb2RJbnZhcmlhbnRcIiksaW52YXJpYW50PXJlcXVpcmUoXCJmYmpzL2xpYi9pbnZhcmlhbnRcIiksb25lQXJndW1lbnRQb29sZXI9ZnVuY3Rpb24obyl7aWYodGhpcy5pbnN0YW5jZVBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmluc3RhbmNlUG9vbC5wb3AoKTtyZXR1cm4gdGhpcy5jYWxsKGUsbyksZX1yZXR1cm4gbmV3IHRoaXMobyl9LHR3b0FyZ3VtZW50UG9vbGVyPWZ1bmN0aW9uKG8sZSl7aWYodGhpcy5pbnN0YW5jZVBvb2wubGVuZ3RoKXt2YXIgbj10aGlzLmluc3RhbmNlUG9vbC5wb3AoKTtyZXR1cm4gdGhpcy5jYWxsKG4sbyxlKSxufXJldHVybiBuZXcgdGhpcyhvLGUpfSx0aHJlZUFyZ3VtZW50UG9vbGVyPWZ1bmN0aW9uKG8sZSxuKXtpZih0aGlzLmluc3RhbmNlUG9vbC5sZW5ndGgpe3ZhciB0PXRoaXMuaW5zdGFuY2VQb29sLnBvcCgpO3JldHVybiB0aGlzLmNhbGwodCxvLGUsbiksdH1yZXR1cm4gbmV3IHRoaXMobyxlLG4pfSxmb3VyQXJndW1lbnRQb29sZXI9ZnVuY3Rpb24obyxlLG4sdCl7aWYodGhpcy5pbnN0YW5jZVBvb2wubGVuZ3RoKXt2YXIgcj10aGlzLmluc3RhbmNlUG9vbC5wb3AoKTtyZXR1cm4gdGhpcy5jYWxsKHIsbyxlLG4sdCkscn1yZXR1cm4gbmV3IHRoaXMobyxlLG4sdCl9LHN0YW5kYXJkUmVsZWFzZXI9ZnVuY3Rpb24obyl7byBpbnN0YW5jZW9mIHRoaXN8fChcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcIlRyeWluZyB0byByZWxlYXNlIGFuIGluc3RhbmNlIGludG8gYSBwb29sIG9mIGEgZGlmZmVyZW50IHR5cGUuXCIpOl9wcm9kSW52YXJpYW50KFwiMjVcIikpLG8uZGVzdHJ1Y3RvcigpLHRoaXMuaW5zdGFuY2VQb29sLmxlbmd0aDx0aGlzLnBvb2xTaXplJiZ0aGlzLmluc3RhbmNlUG9vbC5wdXNoKG8pfSxERUZBVUxUX1BPT0xfU0laRT0xMCxERUZBVUxUX1BPT0xFUj1vbmVBcmd1bWVudFBvb2xlcixhZGRQb29saW5nVG89ZnVuY3Rpb24obyxlKXt2YXIgbj1vO3JldHVybiBuLmluc3RhbmNlUG9vbD1bXSxuLmdldFBvb2xlZD1lfHxERUZBVUxUX1BPT0xFUixuLnBvb2xTaXplfHwobi5wb29sU2l6ZT1ERUZBVUxUX1BPT0xfU0laRSksbi5yZWxlYXNlPXN0YW5kYXJkUmVsZWFzZXIsbn0sUG9vbGVkQ2xhc3M9e2FkZFBvb2xpbmdUbzphZGRQb29saW5nVG8sb25lQXJndW1lbnRQb29sZXI6b25lQXJndW1lbnRQb29sZXIsdHdvQXJndW1lbnRQb29sZXI6dHdvQXJndW1lbnRQb29sZXIsdGhyZWVBcmd1bWVudFBvb2xlcjp0aHJlZUFyZ3VtZW50UG9vbGVyLGZvdXJBcmd1bWVudFBvb2xlcjpmb3VyQXJndW1lbnRQb29sZXJ9O21vZHVsZS5leHBvcnRzPVBvb2xlZENsYXNzO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxCdmIyeGxaRU5zWVhOekxtcHpJbDBzSW01aGJXVnpJanBiSWw5d2NtOWtTVzUyWVhKcFlXNTBJaXdpY21WeGRXbHlaU0lzSW1sdWRtRnlhV0Z1ZENJc0ltOXVaVUZ5WjNWdFpXNTBVRzl2YkdWeUlpd2lZMjl3ZVVacFpXeGtjMFp5YjIwaUxDSjBhR2x6SWl3aWFXNXpkR0Z1WTJWUWIyOXNJaXdpYkdWdVozUm9JaXdpYVc1emRHRnVZMlVpTENKd2IzQWlMQ0pqWVd4c0lpd2lkSGR2UVhKbmRXMWxiblJRYjI5c1pYSWlMQ0poTVNJc0ltRXlJaXdpZEdoeVpXVkJjbWQxYldWdWRGQnZiMnhsY2lJc0ltRXpJaXdpWm05MWNrRnlaM1Z0Wlc1MFVHOXZiR1Z5SWl3aVlUUWlMQ0p6ZEdGdVpHRnlaRkpsYkdWaGMyVnlJaXdpY0hKdlkyVnpjeUlzSW1WdWRpSXNJazVQUkVWZlJVNVdJaXdpWkdWemRISjFZM1J2Y2lJc0luQnZiMnhUYVhwbElpd2ljSFZ6YUNJc0lrUkZSa0ZWVEZSZlVFOVBURjlUU1ZwRklpd2lSRVZHUVZWTVZGOVFUMDlNUlZJaUxDSmhaR1JRYjI5c2FXNW5WRzhpTENKRGIzQjVRMjl1YzNSeWRXTjBiM0lpTENKd2IyOXNaWElpTENKT1pYZExiR0Z6Y3lJc0ltZGxkRkJ2YjJ4bFpDSXNJbkpsYkdWaGMyVWlMQ0pRYjI5c1pXUkRiR0Z6Y3lJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVZOQkxHRkJSVUVzU1VGQlNVRXNaVUZCYVVKRExGRkJRVkVzZDBKQlJYcENReXhWUVVGWlJDeFJRVUZSTEhOQ1FWTndRa1VzYTBKQlFXOUNMRk5CUVZWRExFZEJSV2hETEVkQlJGbERMRXRCUTBaRExHRkJRV0ZETEU5QlFWRXNRMEZETjBJc1NVRkJTVU1zUlVGR1RVZ3NTMEZGVjBNc1lVRkJZVWNzVFVGRmJFTXNUMEZLVlVvc1MwRkhTa3NzUzBGQlMwWXNSVUZCVlVvc1IwRkRaRWtzUlVGRlVDeFBRVUZQTEVsQlRrZElMRXRCVFU5RUxFbEJTV3BDVHl4clFrRkJiMElzVTBGQlZVTXNSVUZCU1VNc1IwRkZjRU1zUjBGRVdWSXNTMEZEUmtNc1lVRkJZVU1zVDBGQlVTeERRVU0zUWl4SlFVRkpReXhGUVVaTlNDeExRVVZYUXl4aFFVRmhSeXhOUVVWc1F5eFBRVXBWU2l4TFFVZEtTeXhMUVVGTFJpeEZRVUZWU1N4RlFVRkpReXhIUVVOc1Frd3NSVUZGVUN4UFFVRlBMRWxCVGtkSUxFdEJUVTlQTEVWQlFVbERMRWxCU1hKQ1F5eHZRa0ZCYzBJc1UwRkJWVVlzUlVGQlNVTXNSVUZCU1VVc1IwRkZNVU1zUjBGRVdWWXNTMEZEUmtNc1lVRkJZVU1zVDBGQlVTeERRVU0zUWl4SlFVRkpReXhGUVVaTlNDeExRVVZYUXl4aFFVRmhSeXhOUVVWc1F5eFBRVXBWU2l4TFFVZEtTeXhMUVVGTFJpeEZRVUZWU1N4RlFVRkpReXhGUVVGSlJTeEhRVU4wUWxBc1JVRkZVQ3hQUVVGUExFbEJUa2RJTEV0QlRVOVBMRVZCUVVsRExFVkJRVWxGTEVsQlNYcENReXh0UWtGQmNVSXNVMEZCVlVvc1JVRkJTVU1zUlVGQlNVVXNSVUZCU1VVc1IwRkZOME1zUjBGRVdWb3NTMEZEUmtNc1lVRkJZVU1zVDBGQlVTeERRVU0zUWl4SlFVRkpReXhGUVVaTlNDeExRVVZYUXl4aFFVRmhSeXhOUVVWc1F5eFBRVXBWU2l4TFFVZEtTeXhMUVVGTFJpeEZRVUZWU1N4RlFVRkpReXhGUVVGSlJTeEZRVUZKUlN4SFFVTXhRbFFzUlVGRlVDeFBRVUZQTEVsQlRrZElMRXRCVFU5UExFVkJRVWxETEVWQlFVbEZMRVZCUVVsRkxFbEJTVGRDUXl4cFFrRkJiVUlzVTBGQlZWWXNSMEZGTjBKQkxHRkJSRlZJTEU5QlF6UkRMR1ZCUVhwQ1l5eFJRVUZSUXl4SlFVRkpReXhUUVVFMFFtNUNMRmRCUVZVc1JVRkJUeXhyUlVGQmIwVkdMR1ZCUVdVc1QwRkRNMHRSTEVWQlFWTmpMR0ZCUmtkcVFpeExRVWRHUXl4aFFVRmhReXhQUVVoWVJpeExRVWN3UW10Q0xGVkJTREZDYkVJc1MwRkpTa01zWVVGQllXdENMRXRCUVV0b1FpeEpRVWw0UW1sQ0xHdENRVUZ2UWl4SFFVTndRa01zWlVGQmFVSjJRaXhyUWtGWGFrSjNRaXhoUVVGbExGTkJRVlZETEVWQlFXbENReXhIUVVjMVF5eEpRVUZKUXl4RlFVRlhSaXhGUVU5bUxFOUJUa0ZGTEVWQlFWTjRRaXhoUVVGbExFZEJRM2hDZDBJc1JVRkJVME1zVlVGQldVWXNSMEZCVlVnc1pVRkRNVUpKTEVWQlFWTlFMRmRCUTFwUExFVkJRVk5RTEZOQlFWZEZMRzFDUVVWMFFrc3NSVUZCVTBVc1VVRkJWV1FzYVVKQlExcFpMRWRCUjB4SExGbEJRV01zUTBGRGFFSk9MR0ZCUVdOQkxHRkJRMlI0UWl4clFrRkJiVUpCTEd0Q1FVTnVRbEVzYTBKQlFXMUNRU3hyUWtGRGJrSkhMRzlDUVVGeFFrRXNiMEpCUTNKQ1JTeHRRa0ZCYjBKQkxHOUNRVWQwUW10Q0xFOUJRVTlETEZGQlFWVkdJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwzSmxZV04wTFdSdmJTOXNhV0l2VUc5dmJHVmtRMnhoYzNNdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIGhhc0V2ZW50UGFnZVhZLF9hc3NpZ249cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksRXZlbnRQbHVnaW5SZWdpc3RyeT1yZXF1aXJlKFwiLi9FdmVudFBsdWdpblJlZ2lzdHJ5XCIpLFJlYWN0RXZlbnRFbWl0dGVyTWl4aW49cmVxdWlyZShcIi4vUmVhY3RFdmVudEVtaXR0ZXJNaXhpblwiKSxWaWV3cG9ydE1ldHJpY3M9cmVxdWlyZShcIi4vVmlld3BvcnRNZXRyaWNzXCIpLGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lPXJlcXVpcmUoXCIuL2dldFZlbmRvclByZWZpeGVkRXZlbnROYW1lXCIpLGlzRXZlbnRTdXBwb3J0ZWQ9cmVxdWlyZShcIi4vaXNFdmVudFN1cHBvcnRlZFwiKSxhbHJlYWR5TGlzdGVuaW5nVG89e30saXNNb25pdG9yaW5nU2Nyb2xsVmFsdWU9ITEscmVhY3RUb3BMaXN0ZW5lcnNDb3VudGVyPTAsdG9wRXZlbnRNYXBwaW5nPXt0b3BBYm9ydDpcImFib3J0XCIsdG9wQW5pbWF0aW9uRW5kOmdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKFwiYW5pbWF0aW9uZW5kXCIpfHxcImFuaW1hdGlvbmVuZFwiLHRvcEFuaW1hdGlvbkl0ZXJhdGlvbjpnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZShcImFuaW1hdGlvbml0ZXJhdGlvblwiKXx8XCJhbmltYXRpb25pdGVyYXRpb25cIix0b3BBbmltYXRpb25TdGFydDpnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZShcImFuaW1hdGlvbnN0YXJ0XCIpfHxcImFuaW1hdGlvbnN0YXJ0XCIsdG9wQmx1cjpcImJsdXJcIix0b3BDYW5QbGF5OlwiY2FucGxheVwiLHRvcENhblBsYXlUaHJvdWdoOlwiY2FucGxheXRocm91Z2hcIix0b3BDaGFuZ2U6XCJjaGFuZ2VcIix0b3BDbGljazpcImNsaWNrXCIsdG9wQ29tcG9zaXRpb25FbmQ6XCJjb21wb3NpdGlvbmVuZFwiLHRvcENvbXBvc2l0aW9uU3RhcnQ6XCJjb21wb3NpdGlvbnN0YXJ0XCIsdG9wQ29tcG9zaXRpb25VcGRhdGU6XCJjb21wb3NpdGlvbnVwZGF0ZVwiLHRvcENvbnRleHRNZW51OlwiY29udGV4dG1lbnVcIix0b3BDb3B5OlwiY29weVwiLHRvcEN1dDpcImN1dFwiLHRvcERvdWJsZUNsaWNrOlwiZGJsY2xpY2tcIix0b3BEcmFnOlwiZHJhZ1wiLHRvcERyYWdFbmQ6XCJkcmFnZW5kXCIsdG9wRHJhZ0VudGVyOlwiZHJhZ2VudGVyXCIsdG9wRHJhZ0V4aXQ6XCJkcmFnZXhpdFwiLHRvcERyYWdMZWF2ZTpcImRyYWdsZWF2ZVwiLHRvcERyYWdPdmVyOlwiZHJhZ292ZXJcIix0b3BEcmFnU3RhcnQ6XCJkcmFnc3RhcnRcIix0b3BEcm9wOlwiZHJvcFwiLHRvcER1cmF0aW9uQ2hhbmdlOlwiZHVyYXRpb25jaGFuZ2VcIix0b3BFbXB0aWVkOlwiZW1wdGllZFwiLHRvcEVuY3J5cHRlZDpcImVuY3J5cHRlZFwiLHRvcEVuZGVkOlwiZW5kZWRcIix0b3BFcnJvcjpcImVycm9yXCIsdG9wRm9jdXM6XCJmb2N1c1wiLHRvcElucHV0OlwiaW5wdXRcIix0b3BLZXlEb3duOlwia2V5ZG93blwiLHRvcEtleVByZXNzOlwia2V5cHJlc3NcIix0b3BLZXlVcDpcImtleXVwXCIsdG9wTG9hZGVkRGF0YTpcImxvYWRlZGRhdGFcIix0b3BMb2FkZWRNZXRhZGF0YTpcImxvYWRlZG1ldGFkYXRhXCIsdG9wTG9hZFN0YXJ0OlwibG9hZHN0YXJ0XCIsdG9wTW91c2VEb3duOlwibW91c2Vkb3duXCIsdG9wTW91c2VNb3ZlOlwibW91c2Vtb3ZlXCIsdG9wTW91c2VPdXQ6XCJtb3VzZW91dFwiLHRvcE1vdXNlT3ZlcjpcIm1vdXNlb3ZlclwiLHRvcE1vdXNlVXA6XCJtb3VzZXVwXCIsdG9wUGFzdGU6XCJwYXN0ZVwiLHRvcFBhdXNlOlwicGF1c2VcIix0b3BQbGF5OlwicGxheVwiLHRvcFBsYXlpbmc6XCJwbGF5aW5nXCIsdG9wUHJvZ3Jlc3M6XCJwcm9ncmVzc1wiLHRvcFJhdGVDaGFuZ2U6XCJyYXRlY2hhbmdlXCIsdG9wU2Nyb2xsOlwic2Nyb2xsXCIsdG9wU2Vla2VkOlwic2Vla2VkXCIsdG9wU2Vla2luZzpcInNlZWtpbmdcIix0b3BTZWxlY3Rpb25DaGFuZ2U6XCJzZWxlY3Rpb25jaGFuZ2VcIix0b3BTdGFsbGVkOlwic3RhbGxlZFwiLHRvcFN1c3BlbmQ6XCJzdXNwZW5kXCIsdG9wVGV4dElucHV0OlwidGV4dElucHV0XCIsdG9wVGltZVVwZGF0ZTpcInRpbWV1cGRhdGVcIix0b3BUb3VjaENhbmNlbDpcInRvdWNoY2FuY2VsXCIsdG9wVG91Y2hFbmQ6XCJ0b3VjaGVuZFwiLHRvcFRvdWNoTW92ZTpcInRvdWNobW92ZVwiLHRvcFRvdWNoU3RhcnQ6XCJ0b3VjaHN0YXJ0XCIsdG9wVHJhbnNpdGlvbkVuZDpnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZShcInRyYW5zaXRpb25lbmRcIil8fFwidHJhbnNpdGlvbmVuZFwiLHRvcFZvbHVtZUNoYW5nZTpcInZvbHVtZWNoYW5nZVwiLHRvcFdhaXRpbmc6XCJ3YWl0aW5nXCIsdG9wV2hlZWw6XCJ3aGVlbFwifSx0b3BMaXN0ZW5lcnNJREtleT1cIl9yZWFjdExpc3RlbmVyc0lEXCIrU3RyaW5nKE1hdGgucmFuZG9tKCkpLnNsaWNlKDIpO2Z1bmN0aW9uIGdldExpc3RlbmluZ0ZvckRvY3VtZW50KGUpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0b3BMaXN0ZW5lcnNJREtleSl8fChlW3RvcExpc3RlbmVyc0lES2V5XT1yZWFjdFRvcExpc3RlbmVyc0NvdW50ZXIrKyxhbHJlYWR5TGlzdGVuaW5nVG9bZVt0b3BMaXN0ZW5lcnNJREtleV1dPXt9KSxhbHJlYWR5TGlzdGVuaW5nVG9bZVt0b3BMaXN0ZW5lcnNJREtleV1dfXZhciBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXI9X2Fzc2lnbih7fSxSZWFjdEV2ZW50RW1pdHRlck1peGluLHtSZWFjdEV2ZW50TGlzdGVuZXI6bnVsbCxpbmplY3Rpb246e2luamVjdFJlYWN0RXZlbnRMaXN0ZW5lcjpmdW5jdGlvbihlKXtlLnNldEhhbmRsZVRvcExldmVsKFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5oYW5kbGVUb3BMZXZlbCksUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lcj1lfX0sc2V0RW5hYmxlZDpmdW5jdGlvbihlKXtSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyJiZSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnNldEVuYWJsZWQoZSl9LGlzRW5hYmxlZDpmdW5jdGlvbigpe3JldHVybiEoIVJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXJ8fCFSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLmlzRW5hYmxlZCgpKX0sbGlzdGVuVG86ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49dCxvPWdldExpc3RlbmluZ0ZvckRvY3VtZW50KG4pLHI9RXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzW2VdLGE9MDthPHIubGVuZ3RoO2ErKyl7dmFyIGk9clthXTtvLmhhc093blByb3BlcnR5KGkpJiZvW2ldfHwoXCJ0b3BXaGVlbFwiPT09aT9pc0V2ZW50U3VwcG9ydGVkKFwid2hlZWxcIik/UmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KFwidG9wV2hlZWxcIixcIndoZWVsXCIsbik6aXNFdmVudFN1cHBvcnRlZChcIm1vdXNld2hlZWxcIik/UmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KFwidG9wV2hlZWxcIixcIm1vdXNld2hlZWxcIixuKTpSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQoXCJ0b3BXaGVlbFwiLFwiRE9NTW91c2VTY3JvbGxcIixuKTpcInRvcFNjcm9sbFwiPT09aT9pc0V2ZW50U3VwcG9ydGVkKFwic2Nyb2xsXCIsITApP1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcENhcHR1cmVkRXZlbnQoXCJ0b3BTY3JvbGxcIixcInNjcm9sbFwiLG4pOlJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudChcInRvcFNjcm9sbFwiLFwic2Nyb2xsXCIsUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci5XSU5ET1dfSEFORExFKTpcInRvcEZvY3VzXCI9PT1pfHxcInRvcEJsdXJcIj09PWk/KGlzRXZlbnRTdXBwb3J0ZWQoXCJmb2N1c1wiLCEwKT8oUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQ2FwdHVyZWRFdmVudChcInRvcEZvY3VzXCIsXCJmb2N1c1wiLG4pLFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcENhcHR1cmVkRXZlbnQoXCJ0b3BCbHVyXCIsXCJibHVyXCIsbikpOmlzRXZlbnRTdXBwb3J0ZWQoXCJmb2N1c2luXCIpJiYoUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KFwidG9wRm9jdXNcIixcImZvY3VzaW5cIixuKSxSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQoXCJ0b3BCbHVyXCIsXCJmb2N1c291dFwiLG4pKSxvLnRvcEJsdXI9ITAsby50b3BGb2N1cz0hMCk6dG9wRXZlbnRNYXBwaW5nLmhhc093blByb3BlcnR5KGkpJiZSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQoaSx0b3BFdmVudE1hcHBpbmdbaV0sbiksb1tpXT0hMCl9fSx0cmFwQnViYmxlZEV2ZW50OmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KGUsdCxuKX0sdHJhcENhcHR1cmVkRXZlbnQ6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBDYXB0dXJlZEV2ZW50KGUsdCxuKX0sc3VwcG9ydHNFdmVudFBhZ2VYWTpmdW5jdGlvbigpe2lmKCFkb2N1bWVudC5jcmVhdGVFdmVudClyZXR1cm4hMTt2YXIgZT1kb2N1bWVudC5jcmVhdGVFdmVudChcIk1vdXNlRXZlbnRcIik7cmV0dXJuIG51bGwhPWUmJlwicGFnZVhcImluIGV9LGVuc3VyZVNjcm9sbFZhbHVlTW9uaXRvcmluZzpmdW5jdGlvbigpe2lmKHZvaWQgMD09PWhhc0V2ZW50UGFnZVhZJiYoaGFzRXZlbnRQYWdlWFk9UmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnN1cHBvcnRzRXZlbnRQYWdlWFkoKSksIWhhc0V2ZW50UGFnZVhZJiYhaXNNb25pdG9yaW5nU2Nyb2xsVmFsdWUpe3ZhciBlPVZpZXdwb3J0TWV0cmljcy5yZWZyZXNoU2Nyb2xsVmFsdWVzO1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIubW9uaXRvclNjcm9sbFZhbHVlKGUpLGlzTW9uaXRvcmluZ1Njcm9sbFZhbHVlPSEwfX19KTttb2R1bGUuZXhwb3J0cz1SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXI7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbEpsWVdOMFFuSnZkM05sY2tWMlpXNTBSVzFwZEhSbGNpNXFjeUpkTENKdVlXMWxjeUk2V3lKb1lYTkZkbVZ1ZEZCaFoyVllXU0lzSWw5aGMzTnBaMjRpTENKeVpYRjFhWEpsSWl3aVJYWmxiblJRYkhWbmFXNVNaV2RwYzNSeWVTSXNJbEpsWVdOMFJYWmxiblJGYldsMGRHVnlUV2w0YVc0aUxDSldhV1YzY0c5eWRFMWxkSEpwWTNNaUxDSm5aWFJXWlc1a2IzSlFjbVZtYVhobFpFVjJaVzUwVG1GdFpTSXNJbWx6UlhabGJuUlRkWEJ3YjNKMFpXUWlMQ0poYkhKbFlXUjVUR2x6ZEdWdWFXNW5WRzhpTENKcGMwMXZibWwwYjNKcGJtZFRZM0p2Ykd4V1lXeDFaU0lzSW5KbFlXTjBWRzl3VEdsemRHVnVaWEp6UTI5MWJuUmxjaUlzSW5SdmNFVjJaVzUwVFdGd2NHbHVaeUlzSW5SdmNFRmliM0owSWl3aWRHOXdRVzVwYldGMGFXOXVSVzVrSWl3aWRHOXdRVzVwYldGMGFXOXVTWFJsY21GMGFXOXVJaXdpZEc5d1FXNXBiV0YwYVc5dVUzUmhjblFpTENKMGIzQkNiSFZ5SWl3aWRHOXdRMkZ1VUd4aGVTSXNJblJ2Y0VOaGJsQnNZWGxVYUhKdmRXZG9JaXdpZEc5d1EyaGhibWRsSWl3aWRHOXdRMnhwWTJzaUxDSjBiM0JEYjIxd2IzTnBkR2x2YmtWdVpDSXNJblJ2Y0VOdmJYQnZjMmwwYVc5dVUzUmhjblFpTENKMGIzQkRiMjF3YjNOcGRHbHZibFZ3WkdGMFpTSXNJblJ2Y0VOdmJuUmxlSFJOWlc1MUlpd2lkRzl3UTI5d2VTSXNJblJ2Y0VOMWRDSXNJblJ2Y0VSdmRXSnNaVU5zYVdOcklpd2lkRzl3UkhKaFp5SXNJblJ2Y0VSeVlXZEZibVFpTENKMGIzQkVjbUZuUlc1MFpYSWlMQ0owYjNCRWNtRm5SWGhwZENJc0luUnZjRVJ5WVdkTVpXRjJaU0lzSW5SdmNFUnlZV2RQZG1WeUlpd2lkRzl3UkhKaFoxTjBZWEowSWl3aWRHOXdSSEp2Y0NJc0luUnZjRVIxY21GMGFXOXVRMmhoYm1kbElpd2lkRzl3Ulcxd2RHbGxaQ0lzSW5SdmNFVnVZM0o1Y0hSbFpDSXNJblJ2Y0VWdVpHVmtJaXdpZEc5d1JYSnliM0lpTENKMGIzQkdiMk4xY3lJc0luUnZjRWx1Y0hWMElpd2lkRzl3UzJWNVJHOTNiaUlzSW5SdmNFdGxlVkJ5WlhOeklpd2lkRzl3UzJWNVZYQWlMQ0owYjNCTWIyRmtaV1JFWVhSaElpd2lkRzl3VEc5aFpHVmtUV1YwWVdSaGRHRWlMQ0owYjNCTWIyRmtVM1JoY25RaUxDSjBiM0JOYjNWelpVUnZkMjRpTENKMGIzQk5iM1Z6WlUxdmRtVWlMQ0owYjNCTmIzVnpaVTkxZENJc0luUnZjRTF2ZFhObFQzWmxjaUlzSW5SdmNFMXZkWE5sVlhBaUxDSjBiM0JRWVhOMFpTSXNJblJ2Y0ZCaGRYTmxJaXdpZEc5d1VHeGhlU0lzSW5SdmNGQnNZWGxwYm1jaUxDSjBiM0JRY205bmNtVnpjeUlzSW5SdmNGSmhkR1ZEYUdGdVoyVWlMQ0owYjNCVFkzSnZiR3dpTENKMGIzQlRaV1ZyWldRaUxDSjBiM0JUWldWcmFXNW5JaXdpZEc5d1UyVnNaV04wYVc5dVEyaGhibWRsSWl3aWRHOXdVM1JoYkd4bFpDSXNJblJ2Y0ZOMWMzQmxibVFpTENKMGIzQlVaWGgwU1c1d2RYUWlMQ0owYjNCVWFXMWxWWEJrWVhSbElpd2lkRzl3Vkc5MVkyaERZVzVqWld3aUxDSjBiM0JVYjNWamFFVnVaQ0lzSW5SdmNGUnZkV05vVFc5MlpTSXNJblJ2Y0ZSdmRXTm9VM1JoY25RaUxDSjBiM0JVY21GdWMybDBhVzl1Ulc1a0lpd2lkRzl3Vm05c2RXMWxRMmhoYm1kbElpd2lkRzl3VjJGcGRHbHVaeUlzSW5SdmNGZG9aV1ZzSWl3aWRHOXdUR2x6ZEdWdVpYSnpTVVJMWlhraUxDSlRkSEpwYm1jaUxDSk5ZWFJvSWl3aWNtRnVaRzl0SWl3aWMyeHBZMlVpTENKblpYUk1hWE4wWlc1cGJtZEdiM0pFYjJOMWJXVnVkQ0lzSW0xdmRXNTBRWFFpTENKUFltcGxZM1FpTENKd2NtOTBiM1I1Y0dVaUxDSm9ZWE5QZDI1UWNtOXdaWEowZVNJc0ltTmhiR3dpTENKU1pXRmpkRUp5YjNkelpYSkZkbVZ1ZEVWdGFYUjBaWElpTENKU1pXRmpkRVYyWlc1MFRHbHpkR1Z1WlhJaUxDSnBibXBsWTNScGIyNGlMQ0pwYm1wbFkzUlNaV0ZqZEVWMlpXNTBUR2x6ZEdWdVpYSWlMQ0p6WlhSSVlXNWtiR1ZVYjNCTVpYWmxiQ0lzSW1oaGJtUnNaVlJ2Y0V4bGRtVnNJaXdpYzJWMFJXNWhZbXhsWkNJc0ltVnVZV0pzWldRaUxDSnBjMFZ1WVdKc1pXUWlMQ0pzYVhOMFpXNVVieUlzSW5KbFoybHpkSEpoZEdsdmJrNWhiV1VpTENKamIyNTBaVzUwUkc5amRXMWxiblJJWVc1a2JHVWlMQ0pwYzB4cGMzUmxibWx1WnlJc0ltUmxjR1Z1WkdWdVkybGxjeUlzSW5KbFoybHpkSEpoZEdsdmJrNWhiV1ZFWlhCbGJtUmxibU5wWlhNaUxDSnBJaXdpYkdWdVozUm9JaXdpWkdWd1pXNWtaVzVqZVNJc0luUnlZWEJDZFdKaWJHVmtSWFpsYm5RaUxDSjBjbUZ3UTJGd2RIVnlaV1JGZG1WdWRDSXNJbGRKVGtSUFYxOUlRVTVFVEVVaUxDSjBiM0JNWlhabGJGUjVjR1VpTENKb1lXNWtiR1Z5UW1GelpVNWhiV1VpTENKb1lXNWtiR1VpTENKemRYQndiM0owYzBWMlpXNTBVR0ZuWlZoWklpd2laRzlqZFcxbGJuUWlMQ0pqY21WaGRHVkZkbVZ1ZENJc0ltVjJJaXdpWlc1emRYSmxVMk55YjJ4c1ZtRnNkV1ZOYjI1cGRHOXlhVzVuSWl3aWRXNWtaV1pwYm1Wa0lpd2ljbVZtY21WemFDSXNJbkpsWm5KbGMyaFRZM0p2Ykd4V1lXeDFaWE1pTENKdGIyNXBkRzl5VTJOeWIyeHNWbUZzZFdVaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25SeklsMHNJbTFoY0hCcGJtZHpJam9pUVVGUlFTeGhRVVZCTEVsQlowVkpRU3hsUVdoRlFVTXNVVUZCVlVNc1VVRkJVU3hwUWtGRmJFSkRMRzlDUVVGelFrUXNVVUZCVVN4NVFrRkRPVUpGTEhWQ1FVRjVRa1lzVVVGQlVTdzBRa0ZEYWtOSExHZENRVUZyUWtnc1VVRkJVU3h4UWtGRk1VSkpMREpDUVVFMlFrb3NVVUZCVVN4blEwRkRja05MTEdsQ1FVRnRRa3dzVVVGQlVTeHpRa0V3UkROQ1RTeHRRa0ZCY1VJc1IwRkRja0pETEhsQ1FVRXdRaXhGUVVNeFFrTXNlVUpCUVRKQ0xFVkJTek5DUXl4blFrRkJhMElzUTBGRGNFSkRMRk5CUVZVc1VVRkRWa01zWjBKQlFXbENVQ3d5UWtGQk1rSXNhVUpCUVcxQ0xHVkJReTlFVVN4elFrRkJkVUpTTERKQ1FVRXlRaXgxUWtGQmVVSXNjVUpCUXpORlV5eHJRa0ZCYlVKVUxESkNRVUV5UWl4dFFrRkJjVUlzYVVKQlEyNUZWU3hSUVVGVExFOUJRMVJETEZkQlFWa3NWVUZEV2tNc2EwSkJRVzFDTEdsQ1FVTnVRa01zVlVGQlZ5eFRRVU5ZUXl4VFFVRlZMRkZCUTFaRExHdENRVUZ0UWl4cFFrRkRia0pETEc5Q1FVRnhRaXh0UWtGRGNrSkRMSEZDUVVGelFpeHZRa0ZEZEVKRExHVkJRV2RDTEdOQlEyaENReXhSUVVGVExFOUJRMVJETEU5QlFWRXNUVUZEVWtNc1pVRkJaMElzVjBGRGFFSkRMRkZCUVZNc1QwRkRWRU1zVjBGQldTeFZRVU5hUXl4aFFVRmpMRmxCUTJSRExGbEJRV0VzVjBGRFlrTXNZVUZCWXl4WlFVTmtReXhaUVVGaExGZEJRMkpETEdGQlFXTXNXVUZEWkVNc1VVRkJVeXhQUVVOVVF5eHJRa0ZCYlVJc2FVSkJRMjVDUXl4WFFVRlpMRlZCUTFwRExHRkJRV01zV1VGRFpFTXNVMEZCVlN4UlFVTldReXhUUVVGVkxGRkJRMVpETEZOQlFWVXNVVUZEVmtNc1UwRkJWU3hSUVVOV1F5eFhRVUZaTEZWQlExcERMRmxCUVdFc1YwRkRZa01zVTBGQlZTeFJRVU5XUXl4alFVRmxMR0ZCUTJaRExHdENRVUZ0UWl4cFFrRkRia0pETEdGQlFXTXNXVUZEWkVNc1lVRkJZeXhaUVVOa1F5eGhRVUZqTEZsQlEyUkRMRmxCUVdFc1YwRkRZa01zWVVGQll5eFpRVU5rUXl4WFFVRlpMRlZCUTFwRExGTkJRVlVzVVVGRFZrTXNVMEZCVlN4UlFVTldReXhSUVVGVExFOUJRMVJETEZkQlFWa3NWVUZEV2tNc1dVRkJZU3hYUVVOaVF5eGpRVUZsTEdGQlEyWkRMRlZCUVZjc1UwRkRXRU1zVlVGQlZ5eFRRVU5ZUXl4WFFVRlpMRlZCUTFwRExHMUNRVUZ2UWl4clFrRkRjRUpETEZkQlFWa3NWVUZEV2tNc1YwRkJXU3hWUVVOYVF5eGhRVUZqTEZsQlEyUkRMR05CUVdVc1lVRkRaa01zWlVGQlowSXNZMEZEYUVKRExGbEJRV0VzVjBGRFlrTXNZVUZCWXl4WlFVTmtReXhqUVVGbExHRkJRMlpETEdsQ1FVRnJRbXhGTERKQ1FVRXlRaXhyUWtGQmIwSXNaMEpCUTJwRmJVVXNaMEpCUVdsQ0xHVkJRMnBDUXl4WFFVRlpMRlZCUTFwRExGTkJRVlVzVTBGTlVrTXNhMEpCUVc5Q0xHOUNRVUZ6UWtNc1QwRkJUME1zUzBGQlMwTXNWVUZCVlVNc1RVRkJUU3hIUVVVeFJTeFRRVUZUUXl4M1FrRkJkMEpETEVkQlR5OUNMRTlCU2t0RExFOUJRVTlETEZWQlFWVkRMR1ZCUVdWRExFdEJRVXRLTEVWQlFWTk9MSEZDUVVOcVJFMHNSVUZCVVU0c2JVSkJRWEZDYkVVc01rSkJRemRDUml4dFFrRkJiVUl3UlN4RlFVRlJUaXh2UWtGQmMwSXNTVUZGTlVOd1JTeHRRa0ZCYlVJd1JTeEZRVUZSVGl4dlFrRmhjRU1zU1VGQlNWY3NlVUpCUVRKQ2RFWXNVVUZCVVN4SFFVRkpSeXgxUWtGQmQwSXNRMEZKYWtWdlJpeHRRa0ZCYjBJc1MwRkZjRUpETEZWQlFWY3NRMEZKVkVNc2VVSkJRVEJDTEZOQlFWVkdMRWRCUTJ4RFFTeEZRVUZ0UWtjc2EwSkJRV3RDU2l4NVFrRkJlVUpMTEdkQ1FVTTVSRXdzZVVKQlFYbENReXh0UWtGQmNVSkJMRWxCVTJ4RVN5eFhRVUZaTEZOQlFWVkRMRWRCUTJoQ1VDeDVRa0ZCZVVKRExHOUNRVU16UWtRc2VVSkJRWGxDUXl4dFFrRkJiVUpMTEZkQlFWZERMRWxCVHpORVF5eFZRVUZYTEZkQlExUXNVMEZCVlZJc2VVSkJRWGxDUXl4eFFrRkJjMEpFTEhsQ1FVRjVRa01zYlVKQlFXMUNUeXhqUVhkQ2RrZERMRk5CUVZVc1UwRkJWVU1zUlVGQmEwSkRMRWRCUzNCRExFbEJTa0VzU1VGQlNXaENMRVZCUVZWblFpeEZRVU5XUXl4RlFVRmpiRUlzZDBKQlFYZENReXhIUVVOMFEydENMRVZCUVdWcVJ5eHZRa0ZCYjBKclJ5dzJRa0ZCTmtKS0xFZEJSVE5FU3l4RlFVRkpMRVZCUVVkQkxFVkJRVWxHTEVWQlFXRkhMRTlCUVZGRUxFbEJRVXNzUTBGRE5VTXNTVUZCU1VVc1JVRkJZVW9zUlVGQllVVXNSMEZEZUVKSUxFVkJRVmxrTEdWQlFXVnRRaXhKUVVGbFRDeEZRVUZaU3l4TFFVTjJReXhoUVVGbVFTeEZRVU5GYWtjc2FVSkJRV2xDTEZOQlEyNUNaMFlzZVVKQlFYbENReXh0UWtGQmJVSnBRaXhwUWtGQmFVSXNWMEZCV1N4UlFVRlRka0lzUjBGRGVrVXpSU3hwUWtGQmFVSXNZMEZETVVKblJpeDVRa0ZCZVVKRExHMUNRVUZ0UW1sQ0xHbENRVUZwUWl4WFFVRlpMR0ZCUVdOMlFpeEhRVWwyUmtzc2VVSkJRWGxDUXl4dFFrRkJiVUpwUWl4cFFrRkJhVUlzVjBGQldTeHBRa0ZCYTBKMlFpeEhRVVZ5UlN4alFVRm1jMElzUlVGRFRHcEhMR2xDUVVGcFFpeFZRVUZWTEVkQlF6ZENaMFlzZVVKQlFYbENReXh0UWtGQmJVSnJRaXhyUWtGQmEwSXNXVUZCWVN4VFFVRlZlRUlzUjBGRmNrWkxMSGxDUVVGNVFrTXNiVUpCUVcxQ2FVSXNhVUpCUVdsQ0xGbEJRV0VzVTBGQlZXeENMSGxDUVVGNVFrTXNiVUpCUVcxQ2JVSXNaVUZGTVVjc1lVRkJaa2dzUjBGQk5FTXNXVUZCWmtFc1IwRkRiRU5xUnl4cFFrRkJhVUlzVTBGQlV5eEpRVU0xUW1kR0xIbENRVUY1UWtNc2JVSkJRVzFDYTBJc2EwSkJRV3RDTEZkQlFWa3NVVUZCVTNoQ0xFZEJRMjVHU3l4NVFrRkJlVUpETEcxQ1FVRnRRbXRDTEd0Q1FVRnJRaXhWUVVGWExFOUJRVkY0UWl4SlFVTjRSVE5GTEdsQ1FVRnBRaXhoUVVjeFFtZEdMSGxDUVVGNVFrTXNiVUpCUVcxQ2FVSXNhVUpCUVdsQ0xGZEJRVmtzVlVGQlYzWkNMRWRCUTNCR1N5eDVRa0ZCZVVKRExHMUNRVUZ0UW1sQ0xHbENRVUZwUWl4VlFVRlhMRmRCUVZsMlFpeEpRVWwwUm1sQ0xFVkJRVmx1Uml4VFFVRlZMRVZCUTNSQ2JVWXNSVUZCV1RGRUxGVkJRVmNzUjBGRFpEbENMR2RDUVVGblFqQkZMR1ZCUVdWdFFpeEpRVU40UTJwQ0xIbENRVUY1UWtNc2JVSkJRVzFDYVVJc2FVSkJRV2xDUkN4RlFVRlpOMFlzWjBKQlFXZENOa1lzUjBGQllYUkNMRWRCUjNoSGFVSXNSVUZCV1Vzc1NVRkJZeXhMUVV0b1EwTXNhVUpCUVd0Q0xGTkJRVlZITEVWQlFXTkRMRVZCUVdsQ1F5eEhRVU42UkN4UFFVRlBka0lzZVVKQlFYbENReXh0UWtGQmJVSnBRaXhwUWtGQmFVSkhMRVZCUVdORExFVkJRV2xDUXl4SlFVZHlSMG9zYTBKQlFXMUNMRk5CUVZWRkxFVkJRV05ETEVWQlFXbENReXhIUVVNeFJDeFBRVUZQZGtJc2VVSkJRWGxDUXl4dFFrRkJiVUpyUWl4clFrRkJhMEpGTEVWQlFXTkRMRVZCUVdsQ1F5eEpRVkYwUjBNc2IwSkJRWEZDTEZkQlEyNUNMRWxCUVV0RExGTkJRVk5ETEZsQlExb3NUMEZCVHl4RlFVVlVMRWxCUVVsRExFVkJRVXRHTEZOQlFWTkRMRmxCUVZrc1kwRkRPVUlzVDBGQllTeE5RVUZPUXl4SFFVRmpMRlZCUVZkQkxFZEJZMnhEUXl3MFFrRkJOa0lzVjBGSk0wSXNVVUZJZFVKRExFbEJRVzVDY0Vnc2FVSkJRMFpCTEdWQlFXbENkVVlzZVVKQlFYbENkMElzZDBKQlJYWkRMMGNzYVVKQlFXMUNVeXgzUWtGQmVVSXNRMEZETDBNc1NVRkJTVFJITEVWQlFWVm9TQ3huUWtGQlowSnBTQ3h2UWtGRE9VSXZRaXg1UWtGQmVVSkRMRzFDUVVGdFFpdENMRzFDUVVGdFFrWXNSMEZETDBRMVJ5eDVRa0ZCTUVJc1RVRkxhRU1yUnl4UFFVRlBReXhSUVVGVmJFTWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F0Wkc5dEwyeHBZaTlTWldGamRFSnliM2R6WlhKRmRtVnVkRVZ0YVhSMFpYSXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciBSZWFjdENvbXBvbmVudFRyZWVIb29rLFJlYWN0UmVjb25jaWxlcj1yZXF1aXJlKFwiLi9SZWFjdFJlY29uY2lsZXJcIiksaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudD1yZXF1aXJlKFwiLi9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50XCIpLEtleUVzY2FwZVV0aWxzPXJlcXVpcmUoXCIuL0tleUVzY2FwZVV0aWxzXCIpLHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50PXJlcXVpcmUoXCIuL3Nob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50XCIpLHRyYXZlcnNlQWxsQ2hpbGRyZW49cmVxdWlyZShcIi4vdHJhdmVyc2VBbGxDaGlsZHJlblwiKSx3YXJuaW5nPXJlcXVpcmUoXCJmYmpzL2xpYi93YXJuaW5nXCIpO2Z1bmN0aW9uIGluc3RhbnRpYXRlQ2hpbGQoZSxuLHQsbyl7dmFyIHI9dm9pZCAwPT09ZVt0XTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoUmVhY3RDb21wb25lbnRUcmVlSG9va3x8KFJlYWN0Q29tcG9uZW50VHJlZUhvb2s9cmVxdWlyZShcInJlYWN0L2xpYi9SZWFjdENvbXBvbmVudFRyZWVIb29rXCIpKSxyfHxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ3YXJuaW5nKCExLFwiZmxhdHRlbkNoaWxkcmVuKC4uLik6IEVuY291bnRlcmVkIHR3byBjaGlsZHJlbiB3aXRoIHRoZSBzYW1lIGtleSwgYCVzYC4gQ2hpbGQga2V5cyBtdXN0IGJlIHVuaXF1ZTsgd2hlbiB0d28gY2hpbGRyZW4gc2hhcmUgYSBrZXksIG9ubHkgdGhlIGZpcnN0IGNoaWxkIHdpbGwgYmUgdXNlZC4lc1wiLEtleUVzY2FwZVV0aWxzLnVuZXNjYXBlKHQpLFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0U3RhY2tBZGRlbmR1bUJ5SUQobykpKSxudWxsIT1uJiZyJiYoZVt0XT1pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KG4sITApKX1cInVuZGVmaW5lZFwiIT10eXBlb2YgcHJvY2VzcyYmcHJvY2Vzcy5lbnYmJlwidGVzdFwiPT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJihSZWFjdENvbXBvbmVudFRyZWVIb29rPXJlcXVpcmUoXCJyZWFjdC9saWIvUmVhY3RDb21wb25lbnRUcmVlSG9va1wiKSk7dmFyIFJlYWN0Q2hpbGRSZWNvbmNpbGVyPXtpbnN0YW50aWF0ZUNoaWxkcmVuOmZ1bmN0aW9uKGUsbix0LG8pe2lmKG51bGw9PWUpcmV0dXJuIG51bGw7dmFyIHI9e307cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj90cmF2ZXJzZUFsbENoaWxkcmVuKGUsZnVuY3Rpb24oZSxuLHQpe3JldHVybiBpbnN0YW50aWF0ZUNoaWxkKGUsbix0LG8pfSxyKTp0cmF2ZXJzZUFsbENoaWxkcmVuKGUsaW5zdGFudGlhdGVDaGlsZCxyKSxyfSx1cGRhdGVDaGlsZHJlbjpmdW5jdGlvbihlLG4sdCxvLHIsaSxhLGMsbCl7aWYobnx8ZSl7dmFyIHMsdTtmb3IocyBpbiBuKWlmKG4uaGFzT3duUHJvcGVydHkocykpe3ZhciBwPSh1PWUmJmVbc10pJiZ1Ll9jdXJyZW50RWxlbWVudCxkPW5bc107aWYobnVsbCE9dSYmc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQocCxkKSlSZWFjdFJlY29uY2lsZXIucmVjZWl2ZUNvbXBvbmVudCh1LGQscixjKSxuW3NdPXU7ZWxzZXt1JiYob1tzXT1SZWFjdFJlY29uY2lsZXIuZ2V0SG9zdE5vZGUodSksUmVhY3RSZWNvbmNpbGVyLnVubW91bnRDb21wb25lbnQodSwhMSkpO3ZhciBSPWluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQoZCwhMCk7bltzXT1SO3ZhciBDPVJlYWN0UmVjb25jaWxlci5tb3VudENvbXBvbmVudChSLHIsaSxhLGMsbCk7dC5wdXNoKEMpfX1mb3IocyBpbiBlKSFlLmhhc093blByb3BlcnR5KHMpfHxuJiZuLmhhc093blByb3BlcnR5KHMpfHwodT1lW3NdLG9bc109UmVhY3RSZWNvbmNpbGVyLmdldEhvc3ROb2RlKHUpLFJlYWN0UmVjb25jaWxlci51bm1vdW50Q29tcG9uZW50KHUsITEpKX19LHVubW91bnRDaGlsZHJlbjpmdW5jdGlvbihlLG4pe2Zvcih2YXIgdCBpbiBlKWlmKGUuaGFzT3duUHJvcGVydHkodCkpe3ZhciBvPWVbdF07UmVhY3RSZWNvbmNpbGVyLnVubW91bnRDb21wb25lbnQobyxuKX19fTttb2R1bGUuZXhwb3J0cz1SZWFjdENoaWxkUmVjb25jaWxlcjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSmxZV04wUTJocGJHUlNaV052Ym1OcGJHVnlMbXB6SWwwc0ltNWhiV1Z6SWpwYklsSmxZV04wUTI5dGNHOXVaVzUwVkhKbFpVaHZiMnNpTENKU1pXRmpkRkpsWTI5dVkybHNaWElpTENKeVpYRjFhWEpsSWl3aWFXNXpkR0Z1ZEdsaGRHVlNaV0ZqZEVOdmJYQnZibVZ1ZENJc0lrdGxlVVZ6WTJGd1pWVjBhV3h6SWl3aWMyaHZkV3hrVlhCa1lYUmxVbVZoWTNSRGIyMXdiMjVsYm5RaUxDSjBjbUYyWlhKelpVRnNiRU5vYVd4a2NtVnVJaXdpZDJGeWJtbHVaeUlzSW1sdWMzUmhiblJwWVhSbFEyaHBiR1FpTENKamFHbHNaRWx1YzNSaGJtTmxjeUlzSW1Ob2FXeGtJaXdpYm1GdFpTSXNJbk5sYkdaRVpXSjFaMGxFSWl3aWEyVjVWVzVwY1hWbElpd2lkVzVrWldacGJtVmtJaXdpY0hKdlkyVnpjeUlzSW1WdWRpSXNJazVQUkVWZlJVNVdJaXdpZFc1bGMyTmhjR1VpTENKblpYUlRkR0ZqYTBGa1pHVnVaSFZ0UW5sSlJDSXNJbEpsWVdOMFEyaHBiR1JTWldOdmJtTnBiR1Z5SWl3aWFXNXpkR0Z1ZEdsaGRHVkRhR2xzWkhKbGJpSXNJbTVsYzNSbFpFTm9hV3hrVG05a1pYTWlMQ0owY21GdWMyRmpkR2x2YmlJc0ltTnZiblJsZUhRaUxDSmphR2xzWkVsdWMzUnpJaXdpZFhCa1lYUmxRMmhwYkdSeVpXNGlMQ0p3Y21WMlEyaHBiR1J5Wlc0aUxDSnVaWGgwUTJocGJHUnlaVzRpTENKdGIzVnVkRWx0WVdkbGN5SXNJbkpsYlc5MlpXUk9iMlJsY3lJc0ltaHZjM1JRWVhKbGJuUWlMQ0pvYjNOMFEyOXVkR0ZwYm1WeVNXNW1ieUlzSW5CeVpYWkRhR2xzWkNJc0ltaGhjMDkzYmxCeWIzQmxjblI1SWl3aWNISmxka1ZzWlcxbGJuUWlMQ0pmWTNWeWNtVnVkRVZzWlcxbGJuUWlMQ0p1WlhoMFJXeGxiV1Z1ZENJc0luSmxZMlZwZG1WRGIyMXdiMjVsYm5RaUxDSm5aWFJJYjNOMFRtOWtaU0lzSW5WdWJXOTFiblJEYjIxd2IyNWxiblFpTENKdVpYaDBRMmhwYkdSSmJuTjBZVzVqWlNJc0ltNWxlSFJEYUdsc1pFMXZkVzUwU1cxaFoyVWlMQ0p0YjNWdWRFTnZiWEJ2Ym1WdWRDSXNJbkIxYzJnaUxDSjFibTF2ZFc1MFEyaHBiR1J5Wlc0aUxDSnlaVzVrWlhKbFpFTm9hV3hrY21WdUlpd2ljMkZtWld4NUlpd2ljbVZ1WkdWeVpXUkRhR2xzWkNJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVZGQkxHRkJSVUVzU1VGUlNVRXNkVUpCVWtGRExHZENRVUZyUWtNc1VVRkJVU3h4UWtGRk1VSkRMREJDUVVFMFFrUXNVVUZCVVN3clFrRkRjRU5GTEdWQlFXbENSaXhSUVVGUkxHOUNRVU42UWtjc01rSkJRVFpDU0N4UlFVRlJMR2REUVVOeVEwa3NiMEpCUVhOQ1NpeFJRVUZSTEhsQ1FVTTVRa3NzVVVGQlZVd3NVVUZCVVN4dlFrRmhkRUlzVTBGQlUwMHNhVUpCUVdsQ1F5eEZRVUZuUWtNc1JVRkJUME1zUlVGQlRVTXNSMEZGY2tRc1NVRkJTVU1zVDBGQmNVTkRMRWxCUVhwQ1RDeEZRVUZsUlN4SFFVTkdMR1ZCUVhwQ1NTeFJRVUZSUXl4SlFVRkpReXhYUVVOVWFrSXNlVUpCUTBoQkxIVkNRVUY1UWtVc1VVRkJVU3h4UTBGRk9VSlhMRWRCUTNOQ0xHVkJRWHBDUlN4UlFVRlJReXhKUVVGSlF5eFZRVUUwUWxZc1UwRkJVU3hGUVVGUExIbExRVUZ2VEVnc1pVRkJaV01zVTBGQlUxQXNSMEZCVDFnc2RVSkJRWFZDYlVJc2NVSkJRWEZDVUN4TFFVYzNVeXhOUVVGVVJpeEhRVUZwUWtjc1NVRkRia0pLTEVWQlFXVkZMRWRCUVZGU0xEQkNRVUV3UWs4c1IwRkJUeXhKUVhKQ2NrTXNiMEpCUVZwTExGTkJRVEpDUVN4UlFVRlJReXhMUVVGblF5eFRRVUY2UWtRc1VVRkJVVU1zU1VGQlNVTXNWMEZOTDBScVFpeDFRa0ZCZVVKRkxGRkJRVkVzY1VOQmQwSnVReXhKUVVGSmEwSXNjVUpCUVhWQ0xFTkJVM3BDUXl4dlFrRkJjVUlzVTBGQlZVTXNSVUZCYTBKRExFVkJRV0ZETEVWQlFWTmFMRWRCUlhKRkxFZEJRWGRDTEUxQlFYQkNWU3hGUVVOR0xFOUJRVThzUzBGRlZDeEpRVUZKWWl4RlFVRnBRaXhIUVZOeVFpeE5RVkEyUWl4bFFVRjZRazBzVVVGQlVVTXNTVUZCU1VNc1UwRkRaRmdzYjBKQlFXOUNaMElzUlVGQmEwSXNVMEZCVlVjc1JVRkJXV1lzUlVGQlQwTXNSMEZEYWtVc1QwRkJUMGdzYVVKQlFXbENhVUlzUlVGQldXWXNSVUZCVDBNc1JVRkJUVU1zU1VGRGFFUklMRWRCUlVoSUxHOUNRVUZ2UW1kQ0xFVkJRV3RDWkN4cFFrRkJhMEpETEVkQlJXNUVRU3hIUVdGVWFVSXNaVUZCWjBJc1UwRkJWVU1zUlVGQlkwTXNSVUZCWTBNc1JVRkJZVU1zUlVGQlkxQXNSVUZCWVZFc1JVRkJXVU1zUlVGQmJVSlNMRVZCUVZOYUxFZEJUM0JKTEVkQlFVdG5RaXhIUVVGcFFrUXNSVUZCZEVJc1EwRkhRU3hKUVVGSmFFSXNSVUZEUVhOQ0xFVkJRMG9zU1VGQlMzUkNMRXRCUVZGcFFpeEZRVU5ZTEVkQlFVdEJMRVZCUVdGTkxHVkJRV1YyUWl4SFFVRnFReXhEUVVsQkxFbEJRVWwzUWl4SFFVUktSaXhGUVVGWlRpeEhRVUZuUWtFc1JVRkJZV2hDTEV0QlExWnpRaXhGUVVGVlJ5eG5Ra0ZEY2tORExFVkJRV05VTEVWQlFXRnFRaXhIUVVNdlFpeEhRVUZwUWl4TlFVRmljMElzUjBGQmNVSTFRaXd5UWtGQk1rSTRRaXhGUVVGaFJTeEhRVU12UkhCRExHZENRVUZuUW5GRExHbENRVUZwUWt3c1JVRkJWMGtzUlVGQllXUXNSVUZCWVVNc1IwRkRkRVZKTEVWQlFXRnFRaXhIUVVGUmMwSXNUVUZEYUVJc1EwRkRSRUVzU1VGRFJrZ3NSVUZCWVc1Q0xFZEJRVkZXTEdkQ1FVRm5Rbk5ETEZsQlFWbE9MRWRCUTJwRWFFTXNaMEpCUVdkQ2RVTXNhVUpCUVdsQ1VDeEhRVUZYTEVsQlJ6bERMRWxCUVVsUkxFVkJRVzlDZEVNc01FSkJRVEJDYTBNc1IwRkJZU3hIUVVNdlJGUXNSVUZCWVdwQ0xFZEJRVkU0UWl4RlFVZHlRaXhKUVVGSlF5eEZRVUZ6UW5wRExHZENRVUZuUWpCRExHVkJRV1ZHTEVWQlFXMUNiRUlzUlVGQllWRXNSVUZCV1VNc1JVRkJiVUpTTEVWQlFWTmFMRWRCUTJwSmFVSXNSVUZCV1dVc1MwRkJTMFlzU1VGSmNrSXNTVUZCU3k5Q0xFdEJRVkZuUWl4SFFVTlFRU3hGUVVGaFR5eGxRVUZsZGtJc1NVRkJWMmxDTEVkQlFXZENRU3hGUVVGaFRTeGxRVUZsZGtJc1MwRkRja1p6UWl4RlFVRlpUaXhGUVVGaGFFSXNSMEZEZWtKdFFpeEZRVUZoYmtJc1IwRkJVVllzWjBKQlFXZENjME1zV1VGQldVNHNSMEZEYWtSb1F5eG5Ra0ZCWjBKMVF5eHBRa0ZCYVVKUUxFZEJRVmNzVFVGWmJFUlpMR2RDUVVGcFFpeFRRVUZWUXl4RlFVRnJRa01zUjBGRE0wTXNTVUZCU3l4SlFVRkpjRU1zUzBGQlVXMURMRVZCUTJZc1IwRkJTVUVzUlVGQmFVSmFMR1ZCUVdWMlFpeEhRVUZQTEVOQlEzcERMRWxCUVVseFF5eEZRVUZuUWtZc1JVRkJhVUp1UXl4SFFVTnlRMVlzWjBKQlFXZENkVU1zYVVKQlFXbENVU3hGUVVGbFJDeE5RVTE0UkVVc1QwRkJUME1zVVVGQlZUbENJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwzSmxZV04wTFdSdmJTOXNhV0l2VW1WaFkzUkRhR2xzWkZKbFkyOXVZMmxzWlhJdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIERPTUNoaWxkcmVuT3BlcmF0aW9ucz1yZXF1aXJlKFwiLi9ET01DaGlsZHJlbk9wZXJhdGlvbnNcIiksUmVhY3RET01JRE9wZXJhdGlvbnM9cmVxdWlyZShcIi4vUmVhY3RET01JRE9wZXJhdGlvbnNcIiksUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQ9e3Byb2Nlc3NDaGlsZHJlblVwZGF0ZXM6UmVhY3RET01JRE9wZXJhdGlvbnMuZGFuZ2Vyb3VzbHlQcm9jZXNzQ2hpbGRyZW5VcGRhdGVzLHJlcGxhY2VOb2RlV2l0aE1hcmt1cDpET01DaGlsZHJlbk9wZXJhdGlvbnMuZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXB9O21vZHVsZS5leHBvcnRzPVJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxKbFlXTjBRMjl0Y0c5dVpXNTBRbkp2ZDNObGNrVnVkbWx5YjI1dFpXNTBMbXB6SWwwc0ltNWhiV1Z6SWpwYklrUlBUVU5vYVd4a2NtVnVUM0JsY21GMGFXOXVjeUlzSW5KbGNYVnBjbVVpTENKU1pXRmpkRVJQVFVsRVQzQmxjbUYwYVc5dWN5SXNJbEpsWVdOMFEyOXRjRzl1Wlc1MFFuSnZkM05sY2tWdWRtbHliMjV0Wlc1MElpd2ljSEp2WTJWemMwTm9hV3hrY21WdVZYQmtZWFJsY3lJc0ltUmhibWRsY205MWMyeDVVSEp2WTJWemMwTm9hV3hrY21WdVZYQmtZWFJsY3lJc0luSmxjR3hoWTJWT2IyUmxWMmwwYUUxaGNtdDFjQ0lzSW1SaGJtZGxjbTkxYzJ4NVVtVndiR0ZqWlU1dlpHVlhhWFJvVFdGeWEzVndJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJVVUVzWVVGRlFTeEpRVUZKUVN4elFrRkJkMEpETEZGQlFWRXNNa0pCUTJoRFF5eHhRa0ZCZFVKRUxGRkJRVkVzTUVKQlR5OUNSU3hwUTBGQmJVTXNRMEZEY2tORExIVkNRVUYzUWtZc2NVSkJRWEZDUnl4clEwRkZOME5ETEhOQ1FVRjFRazRzYzBKQlFYTkNUeXhyUTBGSEwwTkRMRTlCUVU5RExGRkJRVlZPSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdOMExXUnZiUzlzYVdJdlVtVmhZM1JEYjIxd2IyNWxiblJDY205M2MyVnlSVzUyYVhKdmJtMWxiblF1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgX3Byb2RJbnZhcmlhbnQ9cmVxdWlyZShcIi4vcmVhY3RQcm9kSW52YXJpYW50XCIpLGludmFyaWFudD1yZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpLGluamVjdGVkPSExLFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQ9e3JlcGxhY2VOb2RlV2l0aE1hcmt1cDpudWxsLHByb2Nlc3NDaGlsZHJlblVwZGF0ZXM6bnVsbCxpbmplY3Rpb246e2luamVjdEVudmlyb25tZW50OmZ1bmN0aW9uKG4pe2luamVjdGVkJiYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoITEsXCJSZWFjdENvbXBvc2l0ZUNvbXBvbmVudDogaW5qZWN0RW52aXJvbm1lbnQoKSBjYW4gb25seSBiZSBjYWxsZWQgb25jZS5cIik6X3Byb2RJbnZhcmlhbnQoXCIxMDRcIikpLFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQucmVwbGFjZU5vZGVXaXRoTWFya3VwPW4ucmVwbGFjZU5vZGVXaXRoTWFya3VwLFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQucHJvY2Vzc0NoaWxkcmVuVXBkYXRlcz1uLnByb2Nlc3NDaGlsZHJlblVwZGF0ZXMsaW5qZWN0ZWQ9ITB9fX07bW9kdWxlLmV4cG9ydHM9UmVhY3RDb21wb25lbnRFbnZpcm9ubWVudDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSmxZV04wUTI5dGNHOXVaVzUwUlc1MmFYSnZibTFsYm5RdWFuTWlYU3dpYm1GdFpYTWlPbHNpWDNCeWIyUkpiblpoY21saGJuUWlMQ0p5WlhGMWFYSmxJaXdpYVc1MllYSnBZVzUwSWl3aWFXNXFaV04wWldRaUxDSlNaV0ZqZEVOdmJYQnZibVZ1ZEVWdWRtbHliMjV0Wlc1MElpd2ljbVZ3YkdGalpVNXZaR1ZYYVhSb1RXRnlhM1Z3SWl3aWNISnZZMlZ6YzBOb2FXeGtjbVZ1VlhCa1lYUmxjeUlzSW1sdWFtVmpkR2x2YmlJc0ltbHVhbVZqZEVWdWRtbHliMjV0Wlc1MElpd2laVzUyYVhKdmJtMWxiblFpTENKd2NtOWpaWE56SWl3aVpXNTJJaXdpVGs5RVJWOUZUbFlpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZUUVN4aFFVVkJMRWxCUVVsQkxHVkJRV2xDUXl4UlFVRlJMSGRDUVVWNlFrTXNWVUZCV1VRc1VVRkJVU3h6UWtGRmNFSkZMRlZCUVZjc1JVRkZXRU1zTUVKQlFUUkNMRU5CU3psQ1F5eHpRa0ZCZFVJc1MwRk5ka0pETEhWQ1FVRjNRaXhMUVVWNFFrTXNWVUZCVnl4RFFVTlVReXhyUWtGQmJVSXNVMEZCVlVNc1IwRkRla0pPTEZkQlFXOURMR1ZCUVhwQ1R5eFJRVUZSUXl4SlFVRkpReXhUUVVFMFFsWXNWMEZCVlN4RlFVRlBMSGxGUVVFeVJVWXNaVUZCWlN4UlFVTm9TMGtzTUVKQlFUQkNReXh6UWtGQmQwSkpMRVZCUVZsS0xITkNRVU01UkVRc01FSkJRVEJDUlN4MVFrRkJlVUpITEVWQlFWbElMSFZDUVVNdlJFZ3NWVUZCVnl4TFFVdHFRbFVzVDBGQlQwTXNVVUZCVlZZaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Y21WaFkzUXRaRzl0TDJ4cFlpOVNaV0ZqZEVOdmJYQnZibVZ1ZEVWdWRtbHliMjV0Wlc1MExtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9wcm9kSW52YXJpYW50PXJlcXVpcmUoXCIuL3JlYWN0UHJvZEludmFyaWFudFwiKSxfYXNzaWduPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLFJlYWN0PXJlcXVpcmUoXCJyZWFjdC9saWIvUmVhY3RcIiksUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudD1yZXF1aXJlKFwiLi9SZWFjdENvbXBvbmVudEVudmlyb25tZW50XCIpLFJlYWN0Q3VycmVudE93bmVyPXJlcXVpcmUoXCJyZWFjdC9saWIvUmVhY3RDdXJyZW50T3duZXJcIiksUmVhY3RFcnJvclV0aWxzPXJlcXVpcmUoXCIuL1JlYWN0RXJyb3JVdGlsc1wiKSxSZWFjdEluc3RhbmNlTWFwPXJlcXVpcmUoXCIuL1JlYWN0SW5zdGFuY2VNYXBcIiksUmVhY3RJbnN0cnVtZW50YXRpb249cmVxdWlyZShcIi4vUmVhY3RJbnN0cnVtZW50YXRpb25cIiksUmVhY3ROb2RlVHlwZXM9cmVxdWlyZShcIi4vUmVhY3ROb2RlVHlwZXNcIiksUmVhY3RSZWNvbmNpbGVyPXJlcXVpcmUoXCIuL1JlYWN0UmVjb25jaWxlclwiKTtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXZhciBjaGVja1JlYWN0VHlwZVNwZWM9cmVxdWlyZShcIi4vY2hlY2tSZWFjdFR5cGVTcGVjXCIpO3ZhciBlbXB0eU9iamVjdD1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlPYmplY3RcIiksaW52YXJpYW50PXJlcXVpcmUoXCJmYmpzL2xpYi9pbnZhcmlhbnRcIiksc2hhbGxvd0VxdWFsPXJlcXVpcmUoXCJmYmpzL2xpYi9zaGFsbG93RXF1YWxcIiksc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQ9cmVxdWlyZShcIi4vc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnRcIiksd2FybmluZz1yZXF1aXJlKFwiZmJqcy9saWIvd2FybmluZ1wiKSxDb21wb3NpdGVUeXBlcz17SW1wdXJlQ2xhc3M6MCxQdXJlQ2xhc3M6MSxTdGF0ZWxlc3NGdW5jdGlvbmFsOjJ9O2Z1bmN0aW9uIFN0YXRlbGVzc0NvbXBvbmVudChlKXt9ZnVuY3Rpb24gd2FybklmSW52YWxpZEVsZW1lbnQoZSx0KXtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FybmluZyhudWxsPT09dHx8ITE9PT10fHxSZWFjdC5pc1ZhbGlkRWxlbWVudCh0KSxcIiVzKC4uLik6IEEgdmFsaWQgUmVhY3QgZWxlbWVudCAob3IgbnVsbCkgbXVzdCBiZSByZXR1cm5lZC4gWW91IG1heSBoYXZlIHJldHVybmVkIHVuZGVmaW5lZCwgYW4gYXJyYXkgb3Igc29tZSBvdGhlciBpbnZhbGlkIG9iamVjdC5cIixlLmRpc3BsYXlOYW1lfHxlLm5hbWV8fFwiQ29tcG9uZW50XCIpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcoIWUuY2hpbGRDb250ZXh0VHlwZXMsXCIlcyguLi4pOiBjaGlsZENvbnRleHRUeXBlcyBjYW5ub3QgYmUgZGVmaW5lZCBvbiBhIGZ1bmN0aW9uYWwgY29tcG9uZW50LlwiLGUuZGlzcGxheU5hbWV8fGUubmFtZXx8XCJDb21wb25lbnRcIikpfWZ1bmN0aW9uIHNob3VsZENvbnN0cnVjdChlKXtyZXR1cm4hKCFlLnByb3RvdHlwZXx8IWUucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQpfWZ1bmN0aW9uIGlzUHVyZUNvbXBvbmVudChlKXtyZXR1cm4hKCFlLnByb3RvdHlwZXx8IWUucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50KX1mdW5jdGlvbiBtZWFzdXJlTGlmZUN5Y2xlUGVyZihlLHQsbil7aWYoMD09PXQpcmV0dXJuIGUoKTtSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25CZWdpbkxpZmVDeWNsZVRpbWVyKHQsbik7dHJ5e3JldHVybiBlKCl9ZmluYWxseXtSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25FbmRMaWZlQ3ljbGVUaW1lcih0LG4pfX1TdGF0ZWxlc3NDb21wb25lbnQucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbigpe3ZhciBlPVJlYWN0SW5zdGFuY2VNYXAuZ2V0KHRoaXMpLl9jdXJyZW50RWxlbWVudC50eXBlLHQ9ZSh0aGlzLnByb3BzLHRoaXMuY29udGV4dCx0aGlzLnVwZGF0ZXIpO3JldHVybiB3YXJuSWZJbnZhbGlkRWxlbWVudChlLHQpLHR9O3ZhciBuZXh0TW91bnRJRD0xLFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50PXtjb25zdHJ1Y3Q6ZnVuY3Rpb24oZSl7dGhpcy5fY3VycmVudEVsZW1lbnQ9ZSx0aGlzLl9yb290Tm9kZUlEPTAsdGhpcy5fY29tcG9zaXRlVHlwZT1udWxsLHRoaXMuX2luc3RhbmNlPW51bGwsdGhpcy5faG9zdFBhcmVudD1udWxsLHRoaXMuX2hvc3RDb250YWluZXJJbmZvPW51bGwsdGhpcy5fdXBkYXRlQmF0Y2hOdW1iZXI9bnVsbCx0aGlzLl9wZW5kaW5nRWxlbWVudD1udWxsLHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlPW51bGwsdGhpcy5fcGVuZGluZ1JlcGxhY2VTdGF0ZT0hMSx0aGlzLl9wZW5kaW5nRm9yY2VVcGRhdGU9ITEsdGhpcy5fcmVuZGVyZWROb2RlVHlwZT1udWxsLHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50PW51bGwsdGhpcy5fY29udGV4dD1udWxsLHRoaXMuX21vdW50T3JkZXI9MCx0aGlzLl90b3BMZXZlbFdyYXBwZXI9bnVsbCx0aGlzLl9wZW5kaW5nQ2FsbGJhY2tzPW51bGwsdGhpcy5fY2FsbGVkQ29tcG9uZW50V2lsbFVubW91bnQ9ITEsXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKHRoaXMuX3dhcm5lZEFib3V0UmVmc0luUmVuZGVyPSExKX0sbW91bnRDb21wb25lbnQ6ZnVuY3Rpb24oZSx0LG4sbyl7dmFyIGk9dGhpczt0aGlzLl9jb250ZXh0PW8sdGhpcy5fbW91bnRPcmRlcj1uZXh0TW91bnRJRCsrLHRoaXMuX2hvc3RQYXJlbnQ9dCx0aGlzLl9ob3N0Q29udGFpbmVySW5mbz1uO3ZhciByLHM9dGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHMsYT10aGlzLl9wcm9jZXNzQ29udGV4dChvKSxjPXRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGUscD1lLmdldFVwZGF0ZVF1ZXVlKCksdT1zaG91bGRDb25zdHJ1Y3QoYyksbD10aGlzLl9jb25zdHJ1Y3RDb21wb25lbnQodSxzLGEscCk7aWYodXx8bnVsbCE9bCYmbnVsbCE9bC5yZW5kZXI/aXNQdXJlQ29tcG9uZW50KGMpP3RoaXMuX2NvbXBvc2l0ZVR5cGU9Q29tcG9zaXRlVHlwZXMuUHVyZUNsYXNzOnRoaXMuX2NvbXBvc2l0ZVR5cGU9Q29tcG9zaXRlVHlwZXMuSW1wdXJlQ2xhc3M6KHdhcm5JZkludmFsaWRFbGVtZW50KGMscj1sKSxudWxsPT09bHx8ITE9PT1sfHxSZWFjdC5pc1ZhbGlkRWxlbWVudChsKXx8KFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwiJXMoLi4uKTogQSB2YWxpZCBSZWFjdCBlbGVtZW50IChvciBudWxsKSBtdXN0IGJlIHJldHVybmVkLiBZb3UgbWF5IGhhdmUgcmV0dXJuZWQgdW5kZWZpbmVkLCBhbiBhcnJheSBvciBzb21lIG90aGVyIGludmFsaWQgb2JqZWN0LlwiLGMuZGlzcGxheU5hbWV8fGMubmFtZXx8XCJDb21wb25lbnRcIik6X3Byb2RJbnZhcmlhbnQoXCIxMDVcIixjLmRpc3BsYXlOYW1lfHxjLm5hbWV8fFwiQ29tcG9uZW50XCIpKSxsPW5ldyBTdGF0ZWxlc3NDb21wb25lbnQoYyksdGhpcy5fY29tcG9zaXRlVHlwZT1Db21wb3NpdGVUeXBlcy5TdGF0ZWxlc3NGdW5jdGlvbmFsKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXtudWxsPT1sLnJlbmRlciYmXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FybmluZyghMSxcIiVzKC4uLik6IE5vIGByZW5kZXJgIG1ldGhvZCBmb3VuZCBvbiB0aGUgcmV0dXJuZWQgY29tcG9uZW50IGluc3RhbmNlOiB5b3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIGRlZmluZSBgcmVuZGVyYC5cIixjLmRpc3BsYXlOYW1lfHxjLm5hbWV8fFwiQ29tcG9uZW50XCIpO3ZhciBkPWwucHJvcHMhPT1zLG09Yy5kaXNwbGF5TmFtZXx8Yy5uYW1lfHxcIkNvbXBvbmVudFwiO1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcodm9pZCAwPT09bC5wcm9wc3x8IWQsXCIlcyguLi4pOiBXaGVuIGNhbGxpbmcgc3VwZXIoKSBpbiBgJXNgLCBtYWtlIHN1cmUgdG8gcGFzcyB1cCB0aGUgc2FtZSBwcm9wcyB0aGF0IHlvdXIgY29tcG9uZW50J3MgY29uc3RydWN0b3Igd2FzIHBhc3NlZC5cIixtLG0pfWwucHJvcHM9cyxsLmNvbnRleHQ9YSxsLnJlZnM9ZW1wdHlPYmplY3QsbC51cGRhdGVyPXAsdGhpcy5faW5zdGFuY2U9bCxSZWFjdEluc3RhbmNlTWFwLnNldChsLHRoaXMpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ3YXJuaW5nKCFsLmdldEluaXRpYWxTdGF0ZXx8bC5nZXRJbml0aWFsU3RhdGUuaXNSZWFjdENsYXNzQXBwcm92ZWR8fGwuc3RhdGUsXCJnZXRJbml0aWFsU3RhdGUgd2FzIGRlZmluZWQgb24gJXMsIGEgcGxhaW4gSmF2YVNjcmlwdCBjbGFzcy4gVGhpcyBpcyBvbmx5IHN1cHBvcnRlZCBmb3IgY2xhc3NlcyBjcmVhdGVkIHVzaW5nIFJlYWN0LmNyZWF0ZUNsYXNzLiBEaWQgeW91IG1lYW4gdG8gZGVmaW5lIGEgc3RhdGUgcHJvcGVydHkgaW5zdGVhZD9cIix0aGlzLmdldE5hbWUoKXx8XCJhIGNvbXBvbmVudFwiKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ3YXJuaW5nKCFsLmdldERlZmF1bHRQcm9wc3x8bC5nZXREZWZhdWx0UHJvcHMuaXNSZWFjdENsYXNzQXBwcm92ZWQsXCJnZXREZWZhdWx0UHJvcHMgd2FzIGRlZmluZWQgb24gJXMsIGEgcGxhaW4gSmF2YVNjcmlwdCBjbGFzcy4gVGhpcyBpcyBvbmx5IHN1cHBvcnRlZCBmb3IgY2xhc3NlcyBjcmVhdGVkIHVzaW5nIFJlYWN0LmNyZWF0ZUNsYXNzLiBVc2UgYSBzdGF0aWMgcHJvcGVydHkgdG8gZGVmaW5lIGRlZmF1bHRQcm9wcyBpbnN0ZWFkLlwiLHRoaXMuZ2V0TmFtZSgpfHxcImEgY29tcG9uZW50XCIpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcoIWwucHJvcFR5cGVzLFwicHJvcFR5cGVzIHdhcyBkZWZpbmVkIGFzIGFuIGluc3RhbmNlIHByb3BlcnR5IG9uICVzLiBVc2UgYSBzdGF0aWMgcHJvcGVydHkgdG8gZGVmaW5lIHByb3BUeXBlcyBpbnN0ZWFkLlwiLHRoaXMuZ2V0TmFtZSgpfHxcImEgY29tcG9uZW50XCIpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcoIWwuY29udGV4dFR5cGVzLFwiY29udGV4dFR5cGVzIHdhcyBkZWZpbmVkIGFzIGFuIGluc3RhbmNlIHByb3BlcnR5IG9uICVzLiBVc2UgYSBzdGF0aWMgcHJvcGVydHkgdG8gZGVmaW5lIGNvbnRleHRUeXBlcyBpbnN0ZWFkLlwiLHRoaXMuZ2V0TmFtZSgpfHxcImEgY29tcG9uZW50XCIpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcoXCJmdW5jdGlvblwiIT10eXBlb2YgbC5jb21wb25lbnRTaG91bGRVcGRhdGUsXCIlcyBoYXMgYSBtZXRob2QgY2FsbGVkIGNvbXBvbmVudFNob3VsZFVwZGF0ZSgpLiBEaWQgeW91IG1lYW4gc2hvdWxkQ29tcG9uZW50VXBkYXRlKCk/IFRoZSBuYW1lIGlzIHBocmFzZWQgYXMgYSBxdWVzdGlvbiBiZWNhdXNlIHRoZSBmdW5jdGlvbiBpcyBleHBlY3RlZCB0byByZXR1cm4gYSB2YWx1ZS5cIix0aGlzLmdldE5hbWUoKXx8XCJBIGNvbXBvbmVudFwiKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ3YXJuaW5nKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGwuY29tcG9uZW50RGlkVW5tb3VudCxcIiVzIGhhcyBhIG1ldGhvZCBjYWxsZWQgY29tcG9uZW50RGlkVW5tb3VudCgpLiBCdXQgdGhlcmUgaXMgbm8gc3VjaCBsaWZlY3ljbGUgbWV0aG9kLiBEaWQgeW91IG1lYW4gY29tcG9uZW50V2lsbFVubW91bnQoKT9cIix0aGlzLmdldE5hbWUoKXx8XCJBIGNvbXBvbmVudFwiKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ3YXJuaW5nKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGwuY29tcG9uZW50V2lsbFJlY2lldmVQcm9wcyxcIiVzIGhhcyBhIG1ldGhvZCBjYWxsZWQgY29tcG9uZW50V2lsbFJlY2lldmVQcm9wcygpLiBEaWQgeW91IG1lYW4gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcygpP1wiLHRoaXMuZ2V0TmFtZSgpfHxcIkEgY29tcG9uZW50XCIpKTt2YXIgaCxfPWwuc3RhdGU7cmV0dXJuIHZvaWQgMD09PV8mJihsLnN0YXRlPV89bnVsbCksKFwib2JqZWN0XCIhPXR5cGVvZiBffHxBcnJheS5pc0FycmF5KF8pKSYmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwiJXMuc3RhdGU6IG11c3QgYmUgc2V0IHRvIGFuIG9iamVjdCBvciBudWxsXCIsdGhpcy5nZXROYW1lKCl8fFwiUmVhY3RDb21wb3NpdGVDb21wb25lbnRcIik6X3Byb2RJbnZhcmlhbnQoXCIxMDZcIix0aGlzLmdldE5hbWUoKXx8XCJSZWFjdENvbXBvc2l0ZUNvbXBvbmVudFwiKSksdGhpcy5fcGVuZGluZ1N0YXRlUXVldWU9bnVsbCx0aGlzLl9wZW5kaW5nUmVwbGFjZVN0YXRlPSExLHRoaXMuX3BlbmRpbmdGb3JjZVVwZGF0ZT0hMSxoPWwudW5zdGFibGVfaGFuZGxlRXJyb3I/dGhpcy5wZXJmb3JtSW5pdGlhbE1vdW50V2l0aEVycm9ySGFuZGxpbmcocix0LG4sZSxvKTp0aGlzLnBlcmZvcm1Jbml0aWFsTW91bnQocix0LG4sZSxvKSxsLmNvbXBvbmVudERpZE1vdW50JiYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9lLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUoZnVuY3Rpb24oKXttZWFzdXJlTGlmZUN5Y2xlUGVyZihmdW5jdGlvbigpe3JldHVybiBsLmNvbXBvbmVudERpZE1vdW50KCl9LGkuX2RlYnVnSUQsXCJjb21wb25lbnREaWRNb3VudFwiKX0pOmUuZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShsLmNvbXBvbmVudERpZE1vdW50LGwpKSxofSxfY29uc3RydWN0Q29tcG9uZW50OmZ1bmN0aW9uKGUsdCxuLG8pe2lmKFwicHJvZHVjdGlvblwiPT09cHJvY2Vzcy5lbnYuTk9ERV9FTlZ8fGUpcmV0dXJuIHRoaXMuX2NvbnN0cnVjdENvbXBvbmVudFdpdGhvdXRPd25lcihlLHQsbixvKTtSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50PXRoaXM7dHJ5e3JldHVybiB0aGlzLl9jb25zdHJ1Y3RDb21wb25lbnRXaXRob3V0T3duZXIoZSx0LG4sbyl9ZmluYWxseXtSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50PW51bGx9fSxfY29uc3RydWN0Q29tcG9uZW50V2l0aG91dE93bmVyOmZ1bmN0aW9uKGUsdCxuLG8pe3ZhciBpPXRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGU7cmV0dXJuIGU/XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9tZWFzdXJlTGlmZUN5Y2xlUGVyZihmdW5jdGlvbigpe3JldHVybiBuZXcgaSh0LG4sbyl9LHRoaXMuX2RlYnVnSUQsXCJjdG9yXCIpOm5ldyBpKHQsbixvKTpcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP21lYXN1cmVMaWZlQ3ljbGVQZXJmKGZ1bmN0aW9uKCl7cmV0dXJuIGkodCxuLG8pfSx0aGlzLl9kZWJ1Z0lELFwicmVuZGVyXCIpOmkodCxuLG8pfSxwZXJmb3JtSW5pdGlhbE1vdW50V2l0aEVycm9ySGFuZGxpbmc6ZnVuY3Rpb24oZSx0LG4sbyxpKXt2YXIgcixzPW8uY2hlY2twb2ludCgpO3RyeXtyPXRoaXMucGVyZm9ybUluaXRpYWxNb3VudChlLHQsbixvLGkpfWNhdGNoKGEpe28ucm9sbGJhY2socyksdGhpcy5faW5zdGFuY2UudW5zdGFibGVfaGFuZGxlRXJyb3IoYSksdGhpcy5fcGVuZGluZ1N0YXRlUXVldWUmJih0aGlzLl9pbnN0YW5jZS5zdGF0ZT10aGlzLl9wcm9jZXNzUGVuZGluZ1N0YXRlKHRoaXMuX2luc3RhbmNlLnByb3BzLHRoaXMuX2luc3RhbmNlLmNvbnRleHQpKSxzPW8uY2hlY2twb2ludCgpLHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50LnVubW91bnRDb21wb25lbnQoITApLG8ucm9sbGJhY2socykscj10aGlzLnBlcmZvcm1Jbml0aWFsTW91bnQoZSx0LG4sbyxpKX1yZXR1cm4gcn0scGVyZm9ybUluaXRpYWxNb3VudDpmdW5jdGlvbihlLHQsbixvLGkpe3ZhciByPXRoaXMuX2luc3RhbmNlLHM9MDtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYocz10aGlzLl9kZWJ1Z0lEKSxyLmNvbXBvbmVudFdpbGxNb3VudCYmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/bWVhc3VyZUxpZmVDeWNsZVBlcmYoZnVuY3Rpb24oKXtyZXR1cm4gci5jb21wb25lbnRXaWxsTW91bnQoKX0scyxcImNvbXBvbmVudFdpbGxNb3VudFwiKTpyLmNvbXBvbmVudFdpbGxNb3VudCgpLHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlJiYoci5zdGF0ZT10aGlzLl9wcm9jZXNzUGVuZGluZ1N0YXRlKHIucHJvcHMsci5jb250ZXh0KSkpLHZvaWQgMD09PWUmJihlPXRoaXMuX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudCgpKTt2YXIgYT1SZWFjdE5vZGVUeXBlcy5nZXRUeXBlKGUpO3RoaXMuX3JlbmRlcmVkTm9kZVR5cGU9YTt2YXIgYz10aGlzLl9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KGUsYSE9PVJlYWN0Tm9kZVR5cGVzLkVNUFRZKTt0aGlzLl9yZW5kZXJlZENvbXBvbmVudD1jO3ZhciBwPVJlYWN0UmVjb25jaWxlci5tb3VudENvbXBvbmVudChjLG8sdCxuLHRoaXMuX3Byb2Nlc3NDaGlsZENvbnRleHQoaSkscyk7aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmMCE9PXMpe3ZhciB1PTAhPT1jLl9kZWJ1Z0lEP1tjLl9kZWJ1Z0lEXTpbXTtSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25TZXRDaGlsZHJlbihzLHUpfXJldHVybiBwfSxnZXRIb3N0Tm9kZTpmdW5jdGlvbigpe3JldHVybiBSZWFjdFJlY29uY2lsZXIuZ2V0SG9zdE5vZGUodGhpcy5fcmVuZGVyZWRDb21wb25lbnQpfSx1bm1vdW50Q29tcG9uZW50OmZ1bmN0aW9uKGUpe2lmKHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50KXt2YXIgdD10aGlzLl9pbnN0YW5jZTtpZih0LmNvbXBvbmVudFdpbGxVbm1vdW50JiYhdC5fY2FsbGVkQ29tcG9uZW50V2lsbFVubW91bnQpaWYodC5fY2FsbGVkQ29tcG9uZW50V2lsbFVubW91bnQ9ITAsZSl7dmFyIG49dGhpcy5nZXROYW1lKCkrXCIuY29tcG9uZW50V2lsbFVubW91bnQoKVwiO1JlYWN0RXJyb3JVdGlscy5pbnZva2VHdWFyZGVkQ2FsbGJhY2sobix0LmNvbXBvbmVudFdpbGxVbm1vdW50LmJpbmQodCkpfWVsc2VcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP21lYXN1cmVMaWZlQ3ljbGVQZXJmKGZ1bmN0aW9uKCl7cmV0dXJuIHQuY29tcG9uZW50V2lsbFVubW91bnQoKX0sdGhpcy5fZGVidWdJRCxcImNvbXBvbmVudFdpbGxVbm1vdW50XCIpOnQuY29tcG9uZW50V2lsbFVubW91bnQoKTt0aGlzLl9yZW5kZXJlZENvbXBvbmVudCYmKFJlYWN0UmVjb25jaWxlci51bm1vdW50Q29tcG9uZW50KHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50LGUpLHRoaXMuX3JlbmRlcmVkTm9kZVR5cGU9bnVsbCx0aGlzLl9yZW5kZXJlZENvbXBvbmVudD1udWxsLHRoaXMuX2luc3RhbmNlPW51bGwpLHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlPW51bGwsdGhpcy5fcGVuZGluZ1JlcGxhY2VTdGF0ZT0hMSx0aGlzLl9wZW5kaW5nRm9yY2VVcGRhdGU9ITEsdGhpcy5fcGVuZGluZ0NhbGxiYWNrcz1udWxsLHRoaXMuX3BlbmRpbmdFbGVtZW50PW51bGwsdGhpcy5fY29udGV4dD1udWxsLHRoaXMuX3Jvb3ROb2RlSUQ9MCx0aGlzLl90b3BMZXZlbFdyYXBwZXI9bnVsbCxSZWFjdEluc3RhbmNlTWFwLnJlbW92ZSh0KX19LF9tYXNrQ29udGV4dDpmdW5jdGlvbihlKXt2YXIgdD10aGlzLl9jdXJyZW50RWxlbWVudC50eXBlLmNvbnRleHRUeXBlcztpZighdClyZXR1cm4gZW1wdHlPYmplY3Q7dmFyIG49e307Zm9yKHZhciBvIGluIHQpbltvXT1lW29dO3JldHVybiBufSxfcHJvY2Vzc0NvbnRleHQ6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5fbWFza0NvbnRleHQoZSk7aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVil7dmFyIG49dGhpcy5fY3VycmVudEVsZW1lbnQudHlwZTtuLmNvbnRleHRUeXBlcyYmdGhpcy5fY2hlY2tDb250ZXh0VHlwZXMobi5jb250ZXh0VHlwZXMsdCxcImNvbnRleHRcIil9cmV0dXJuIHR9LF9wcm9jZXNzQ2hpbGRDb250ZXh0OmZ1bmN0aW9uKGUpe3ZhciB0LG49dGhpcy5fY3VycmVudEVsZW1lbnQudHlwZSxvPXRoaXMuX2luc3RhbmNlO2lmKG8uZ2V0Q2hpbGRDb250ZXh0KWlmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYpe1JlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkJlZ2luUHJvY2Vzc2luZ0NoaWxkQ29udGV4dCgpO3RyeXt0PW8uZ2V0Q2hpbGRDb250ZXh0KCl9ZmluYWxseXtSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25FbmRQcm9jZXNzaW5nQ2hpbGRDb250ZXh0KCl9fWVsc2UgdD1vLmdldENoaWxkQ29udGV4dCgpO2lmKHQpe2Zvcih2YXIgaSBpblwib2JqZWN0XCIhPXR5cGVvZiBuLmNoaWxkQ29udGV4dFR5cGVzJiYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoITEsXCIlcy5nZXRDaGlsZENvbnRleHQoKTogY2hpbGRDb250ZXh0VHlwZXMgbXVzdCBiZSBkZWZpbmVkIGluIG9yZGVyIHRvIHVzZSBnZXRDaGlsZENvbnRleHQoKS5cIix0aGlzLmdldE5hbWUoKXx8XCJSZWFjdENvbXBvc2l0ZUNvbXBvbmVudFwiKTpfcHJvZEludmFyaWFudChcIjEwN1wiLHRoaXMuZ2V0TmFtZSgpfHxcIlJlYWN0Q29tcG9zaXRlQ29tcG9uZW50XCIpKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ0aGlzLl9jaGVja0NvbnRleHRUeXBlcyhuLmNoaWxkQ29udGV4dFR5cGVzLHQsXCJjaGlsZCBjb250ZXh0XCIpLHQpaSBpbiBuLmNoaWxkQ29udGV4dFR5cGVzfHwoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoITEsJyVzLmdldENoaWxkQ29udGV4dCgpOiBrZXkgXCIlc1wiIGlzIG5vdCBkZWZpbmVkIGluIGNoaWxkQ29udGV4dFR5cGVzLicsdGhpcy5nZXROYW1lKCl8fFwiUmVhY3RDb21wb3NpdGVDb21wb25lbnRcIixpKTpfcHJvZEludmFyaWFudChcIjEwOFwiLHRoaXMuZ2V0TmFtZSgpfHxcIlJlYWN0Q29tcG9zaXRlQ29tcG9uZW50XCIsaSkpO3JldHVybiBfYXNzaWduKHt9LGUsdCl9cmV0dXJuIGV9LF9jaGVja0NvbnRleHRUeXBlczpmdW5jdGlvbihlLHQsbil7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmY2hlY2tSZWFjdFR5cGVTcGVjKGUsdCxuLHRoaXMuZ2V0TmFtZSgpLG51bGwsdGhpcy5fZGVidWdJRCl9LHJlY2VpdmVDb21wb25lbnQ6ZnVuY3Rpb24oZSx0LG4pe3ZhciBvPXRoaXMuX2N1cnJlbnRFbGVtZW50LGk9dGhpcy5fY29udGV4dDt0aGlzLl9wZW5kaW5nRWxlbWVudD1udWxsLHRoaXMudXBkYXRlQ29tcG9uZW50KHQsbyxlLGksbil9LHBlcmZvcm1VcGRhdGVJZk5lY2Vzc2FyeTpmdW5jdGlvbihlKXtudWxsIT10aGlzLl9wZW5kaW5nRWxlbWVudD9SZWFjdFJlY29uY2lsZXIucmVjZWl2ZUNvbXBvbmVudCh0aGlzLHRoaXMuX3BlbmRpbmdFbGVtZW50LGUsdGhpcy5fY29udGV4dCk6bnVsbCE9PXRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlfHx0aGlzLl9wZW5kaW5nRm9yY2VVcGRhdGU/dGhpcy51cGRhdGVDb21wb25lbnQoZSx0aGlzLl9jdXJyZW50RWxlbWVudCx0aGlzLl9jdXJyZW50RWxlbWVudCx0aGlzLl9jb250ZXh0LHRoaXMuX2NvbnRleHQpOnRoaXMuX3VwZGF0ZUJhdGNoTnVtYmVyPW51bGx9LHVwZGF0ZUNvbXBvbmVudDpmdW5jdGlvbihlLHQsbixvLGkpe3ZhciByPXRoaXMuX2luc3RhbmNlO251bGw9PXImJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcIkF0dGVtcHRlZCB0byB1cGRhdGUgY29tcG9uZW50IGAlc2AgdGhhdCBoYXMgYWxyZWFkeSBiZWVuIHVubW91bnRlZCAob3IgZmFpbGVkIHRvIG1vdW50KS5cIix0aGlzLmdldE5hbWUoKXx8XCJSZWFjdENvbXBvc2l0ZUNvbXBvbmVudFwiKTpfcHJvZEludmFyaWFudChcIjEzNlwiLHRoaXMuZ2V0TmFtZSgpfHxcIlJlYWN0Q29tcG9zaXRlQ29tcG9uZW50XCIpKTt2YXIgcyxhPSExO3RoaXMuX2NvbnRleHQ9PT1pP3M9ci5jb250ZXh0OihzPXRoaXMuX3Byb2Nlc3NDb250ZXh0KGkpLGE9ITApO3ZhciBjPXQucHJvcHMscD1uLnByb3BzO3QhPT1uJiYoYT0hMCksYSYmci5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9tZWFzdXJlTGlmZUN5Y2xlUGVyZihmdW5jdGlvbigpe3JldHVybiByLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMocCxzKX0sdGhpcy5fZGVidWdJRCxcImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHNcIik6ci5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKHAscykpO3ZhciB1PXRoaXMuX3Byb2Nlc3NQZW5kaW5nU3RhdGUocCxzKSxsPSEwO3RoaXMuX3BlbmRpbmdGb3JjZVVwZGF0ZXx8KHIuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2w9XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9tZWFzdXJlTGlmZUN5Y2xlUGVyZihmdW5jdGlvbigpe3JldHVybiByLnNob3VsZENvbXBvbmVudFVwZGF0ZShwLHUscyl9LHRoaXMuX2RlYnVnSUQsXCJzaG91bGRDb21wb25lbnRVcGRhdGVcIik6ci5zaG91bGRDb21wb25lbnRVcGRhdGUocCx1LHMpOnRoaXMuX2NvbXBvc2l0ZVR5cGU9PT1Db21wb3NpdGVUeXBlcy5QdXJlQ2xhc3MmJihsPSFzaGFsbG93RXF1YWwoYyxwKXx8IXNoYWxsb3dFcXVhbChyLnN0YXRlLHUpKSksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FybmluZyh2b2lkIDAhPT1sLFwiJXMuc2hvdWxkQ29tcG9uZW50VXBkYXRlKCk6IFJldHVybmVkIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIGEgYm9vbGVhbiB2YWx1ZS4gTWFrZSBzdXJlIHRvIHJldHVybiB0cnVlIG9yIGZhbHNlLlwiLHRoaXMuZ2V0TmFtZSgpfHxcIlJlYWN0Q29tcG9zaXRlQ29tcG9uZW50XCIpLHRoaXMuX3VwZGF0ZUJhdGNoTnVtYmVyPW51bGwsbD8odGhpcy5fcGVuZGluZ0ZvcmNlVXBkYXRlPSExLHRoaXMuX3BlcmZvcm1Db21wb25lbnRVcGRhdGUobixwLHUscyxlLGkpKToodGhpcy5fY3VycmVudEVsZW1lbnQ9bix0aGlzLl9jb250ZXh0PWksci5wcm9wcz1wLHIuc3RhdGU9dSxyLmNvbnRleHQ9cyl9LF9wcm9jZXNzUGVuZGluZ1N0YXRlOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcy5faW5zdGFuY2Usbz10aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZSxpPXRoaXMuX3BlbmRpbmdSZXBsYWNlU3RhdGU7aWYodGhpcy5fcGVuZGluZ1JlcGxhY2VTdGF0ZT0hMSx0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZT1udWxsLCFvKXJldHVybiBuLnN0YXRlO2lmKGkmJjE9PT1vLmxlbmd0aClyZXR1cm4gb1swXTtmb3IodmFyIHI9X2Fzc2lnbih7fSxpP29bMF06bi5zdGF0ZSkscz1pPzE6MDtzPG8ubGVuZ3RoO3MrKyl7dmFyIGE9b1tzXTtfYXNzaWduKHIsXCJmdW5jdGlvblwiPT10eXBlb2YgYT9hLmNhbGwobixyLGUsdCk6YSl9cmV0dXJuIHJ9LF9wZXJmb3JtQ29tcG9uZW50VXBkYXRlOmZ1bmN0aW9uKGUsdCxuLG8saSxyKXt2YXIgcyxhLGMscD10aGlzLHU9dGhpcy5faW5zdGFuY2UsbD1Cb29sZWFuKHUuY29tcG9uZW50RGlkVXBkYXRlKTtsJiYocz11LnByb3BzLGE9dS5zdGF0ZSxjPXUuY29udGV4dCksdS5jb21wb25lbnRXaWxsVXBkYXRlJiYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9tZWFzdXJlTGlmZUN5Y2xlUGVyZihmdW5jdGlvbigpe3JldHVybiB1LmNvbXBvbmVudFdpbGxVcGRhdGUodCxuLG8pfSx0aGlzLl9kZWJ1Z0lELFwiY29tcG9uZW50V2lsbFVwZGF0ZVwiKTp1LmNvbXBvbmVudFdpbGxVcGRhdGUodCxuLG8pKSx0aGlzLl9jdXJyZW50RWxlbWVudD1lLHRoaXMuX2NvbnRleHQ9cix1LnByb3BzPXQsdS5zdGF0ZT1uLHUuY29udGV4dD1vLHRoaXMuX3VwZGF0ZVJlbmRlcmVkQ29tcG9uZW50KGksciksbCYmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aS5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKGZ1bmN0aW9uKCl7bWVhc3VyZUxpZmVDeWNsZVBlcmYodS5jb21wb25lbnREaWRVcGRhdGUuYmluZCh1LHMsYSxjKSxwLl9kZWJ1Z0lELFwiY29tcG9uZW50RGlkVXBkYXRlXCIpfSk6aS5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKHUuY29tcG9uZW50RGlkVXBkYXRlLmJpbmQodSxzLGEsYyksdSkpfSxfdXBkYXRlUmVuZGVyZWRDb21wb25lbnQ6ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLl9yZW5kZXJlZENvbXBvbmVudCxvPW4uX2N1cnJlbnRFbGVtZW50LGk9dGhpcy5fcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50KCkscj0wO2lmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJihyPXRoaXMuX2RlYnVnSUQpLHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50KG8saSkpUmVhY3RSZWNvbmNpbGVyLnJlY2VpdmVDb21wb25lbnQobixpLGUsdGhpcy5fcHJvY2Vzc0NoaWxkQ29udGV4dCh0KSk7ZWxzZXt2YXIgcz1SZWFjdFJlY29uY2lsZXIuZ2V0SG9zdE5vZGUobik7UmVhY3RSZWNvbmNpbGVyLnVubW91bnRDb21wb25lbnQobiwhMSk7dmFyIGE9UmVhY3ROb2RlVHlwZXMuZ2V0VHlwZShpKTt0aGlzLl9yZW5kZXJlZE5vZGVUeXBlPWE7dmFyIGM9dGhpcy5faW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChpLGEhPT1SZWFjdE5vZGVUeXBlcy5FTVBUWSk7dGhpcy5fcmVuZGVyZWRDb21wb25lbnQ9Yzt2YXIgcD1SZWFjdFJlY29uY2lsZXIubW91bnRDb21wb25lbnQoYyxlLHRoaXMuX2hvc3RQYXJlbnQsdGhpcy5faG9zdENvbnRhaW5lckluZm8sdGhpcy5fcHJvY2Vzc0NoaWxkQ29udGV4dCh0KSxyKTtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYwIT09cil7dmFyIHU9MCE9PWMuX2RlYnVnSUQ/W2MuX2RlYnVnSURdOltdO1JlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vblNldENoaWxkcmVuKHIsdSl9dGhpcy5fcmVwbGFjZU5vZGVXaXRoTWFya3VwKHMscCxuKX19LF9yZXBsYWNlTm9kZVdpdGhNYXJrdXA6ZnVuY3Rpb24oZSx0LG4pe1JlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQucmVwbGFjZU5vZGVXaXRoTWFya3VwKGUsdCxuKX0sX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudFdpdGhvdXRPd25lck9yQ29udGV4dDpmdW5jdGlvbigpe3ZhciBlLHQ9dGhpcy5faW5zdGFuY2U7cmV0dXJuIGU9XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9tZWFzdXJlTGlmZUN5Y2xlUGVyZihmdW5jdGlvbigpe3JldHVybiB0LnJlbmRlcigpfSx0aGlzLl9kZWJ1Z0lELFwicmVuZGVyXCIpOnQucmVuZGVyKCksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmdm9pZCAwPT09ZSYmdC5yZW5kZXIuX2lzTW9ja0Z1bmN0aW9uJiYoZT1udWxsKSxlfSxfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50OmZ1bmN0aW9uKCl7dmFyIGU7aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVnx8dGhpcy5fY29tcG9zaXRlVHlwZSE9PUNvbXBvc2l0ZVR5cGVzLlN0YXRlbGVzc0Z1bmN0aW9uYWwpe1JlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQ9dGhpczt0cnl7ZT10aGlzLl9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnRXaXRob3V0T3duZXJPckNvbnRleHQoKX1maW5hbGx5e1JlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQ9bnVsbH19ZWxzZSBlPXRoaXMuX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudFdpdGhvdXRPd25lck9yQ29udGV4dCgpO3JldHVybiBudWxsPT09ZXx8ITE9PT1lfHxSZWFjdC5pc1ZhbGlkRWxlbWVudChlKXx8KFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwiJXMucmVuZGVyKCk6IEEgdmFsaWQgUmVhY3QgZWxlbWVudCAob3IgbnVsbCkgbXVzdCBiZSByZXR1cm5lZC4gWW91IG1heSBoYXZlIHJldHVybmVkIHVuZGVmaW5lZCwgYW4gYXJyYXkgb3Igc29tZSBvdGhlciBpbnZhbGlkIG9iamVjdC5cIix0aGlzLmdldE5hbWUoKXx8XCJSZWFjdENvbXBvc2l0ZUNvbXBvbmVudFwiKTpfcHJvZEludmFyaWFudChcIjEwOVwiLHRoaXMuZ2V0TmFtZSgpfHxcIlJlYWN0Q29tcG9zaXRlQ29tcG9uZW50XCIpKSxlfSxhdHRhY2hSZWY6ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLmdldFB1YmxpY0luc3RhbmNlKCk7bnVsbD09biYmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwiU3RhdGVsZXNzIGZ1bmN0aW9uIGNvbXBvbmVudHMgY2Fubm90IGhhdmUgcmVmcy5cIik6X3Byb2RJbnZhcmlhbnQoXCIxMTBcIikpO3ZhciBvPXQuZ2V0UHVibGljSW5zdGFuY2UoKTtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXt2YXIgaT10JiZ0LmdldE5hbWU/dC5nZXROYW1lKCk6XCJhIGNvbXBvbmVudFwiO1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcobnVsbCE9b3x8dC5fY29tcG9zaXRlVHlwZSE9PUNvbXBvc2l0ZVR5cGVzLlN0YXRlbGVzc0Z1bmN0aW9uYWwsJ1N0YXRlbGVzcyBmdW5jdGlvbiBjb21wb25lbnRzIGNhbm5vdCBiZSBnaXZlbiByZWZzIChTZWUgcmVmIFwiJXNcIiBpbiAlcyBjcmVhdGVkIGJ5ICVzKS4gQXR0ZW1wdHMgdG8gYWNjZXNzIHRoaXMgcmVmIHdpbGwgZmFpbC4nLGUsaSx0aGlzLmdldE5hbWUoKSl9KG4ucmVmcz09PWVtcHR5T2JqZWN0P24ucmVmcz17fTpuLnJlZnMpW2VdPW99LGRldGFjaFJlZjpmdW5jdGlvbihlKXtkZWxldGUgdGhpcy5nZXRQdWJsaWNJbnN0YW5jZSgpLnJlZnNbZV19LGdldE5hbWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLl9jdXJyZW50RWxlbWVudC50eXBlLHQ9dGhpcy5faW5zdGFuY2UmJnRoaXMuX2luc3RhbmNlLmNvbnN0cnVjdG9yO3JldHVybiBlLmRpc3BsYXlOYW1lfHx0JiZ0LmRpc3BsYXlOYW1lfHxlLm5hbWV8fHQmJnQubmFtZXx8bnVsbH0sZ2V0UHVibGljSW5zdGFuY2U6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLl9pbnN0YW5jZTtyZXR1cm4gdGhpcy5fY29tcG9zaXRlVHlwZT09PUNvbXBvc2l0ZVR5cGVzLlN0YXRlbGVzc0Z1bmN0aW9uYWw/bnVsbDplfSxfaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudDpudWxsfTttb2R1bGUuZXhwb3J0cz1SZWFjdENvbXBvc2l0ZUNvbXBvbmVudDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSmxZV04wUTI5dGNHOXphWFJsUTI5dGNHOXVaVzUwTG1weklsMHNJbTVoYldWeklqcGJJbDl3Y205a1NXNTJZWEpwWVc1MElpd2ljbVZ4ZFdseVpTSXNJbDloYzNOcFoyNGlMQ0pTWldGamRDSXNJbEpsWVdOMFEyOXRjRzl1Wlc1MFJXNTJhWEp2Ym0xbGJuUWlMQ0pTWldGamRFTjFjbkpsYm5SUGQyNWxjaUlzSWxKbFlXTjBSWEp5YjNKVmRHbHNjeUlzSWxKbFlXTjBTVzV6ZEdGdVkyVk5ZWEFpTENKU1pXRmpkRWx1YzNSeWRXMWxiblJoZEdsdmJpSXNJbEpsWVdOMFRtOWtaVlI1Y0dWeklpd2lVbVZoWTNSU1pXTnZibU5wYkdWeUlpd2ljSEp2WTJWemN5SXNJbVZ1ZGlJc0lrNVBSRVZmUlU1V0lpd2lZMmhsWTJ0U1pXRmpkRlI1Y0dWVGNHVmpJaXdpWlcxd2RIbFBZbXBsWTNRaUxDSnBiblpoY21saGJuUWlMQ0p6YUdGc2JHOTNSWEYxWVd3aUxDSnphRzkxYkdSVmNHUmhkR1ZTWldGamRFTnZiWEJ2Ym1WdWRDSXNJbmRoY201cGJtY2lMQ0pEYjIxd2IzTnBkR1ZVZVhCbGN5SXNJa2x0Y0hWeVpVTnNZWE56SWl3aVVIVnlaVU5zWVhOeklpd2lVM1JoZEdWc1pYTnpSblZ1WTNScGIyNWhiQ0lzSWxOMFlYUmxiR1Z6YzBOdmJYQnZibVZ1ZENJc0lrTnZiWEJ2Ym1WdWRDSXNJbmRoY201SlprbHVkbUZzYVdSRmJHVnRaVzUwSWl3aVpXeGxiV1Z1ZENJc0ltbHpWbUZzYVdSRmJHVnRaVzUwSWl3aVpHbHpjR3hoZVU1aGJXVWlMQ0p1WVcxbElpd2lZMmhwYkdSRGIyNTBaWGgwVkhsd1pYTWlMQ0p6YUc5MWJHUkRiMjV6ZEhKMVkzUWlMQ0p3Y205MGIzUjVjR1VpTENKcGMxSmxZV04wUTI5dGNHOXVaVzUwSWl3aWFYTlFkWEpsUTI5dGNHOXVaVzUwSWl3aWFYTlFkWEpsVW1WaFkzUkRiMjF3YjI1bGJuUWlMQ0p0WldGemRYSmxUR2xtWlVONVkyeGxVR1Z5WmlJc0ltWnVJaXdpWkdWaWRXZEpSQ0lzSW5ScGJXVnlWSGx3WlNJc0ltUmxZblZuVkc5dmJDSXNJbTl1UW1WbmFXNU1hV1psUTNsamJHVlVhVzFsY2lJc0ltOXVSVzVrVEdsbVpVTjVZMnhsVkdsdFpYSWlMQ0p5Wlc1a1pYSWlMQ0puWlhRaUxDSjBhR2x6SWl3aVgyTjFjbkpsYm5SRmJHVnRaVzUwSWl3aWRIbHdaU0lzSW5CeWIzQnpJaXdpWTI5dWRHVjRkQ0lzSW5Wd1pHRjBaWElpTENKdVpYaDBUVzkxYm5SSlJDSXNJbEpsWVdOMFEyOXRjRzl6YVhSbFEyOXRjRzl1Wlc1MElpd2lZMjl1YzNSeWRXTjBJaXdpWDNKdmIzUk9iMlJsU1VRaUxDSmZZMjl0Y0c5emFYUmxWSGx3WlNJc0lsOXBibk4wWVc1alpTSXNJbDlvYjNOMFVHRnlaVzUwSWl3aVgyaHZjM1JEYjI1MFlXbHVaWEpKYm1adklpd2lYM1Z3WkdGMFpVSmhkR05vVG5WdFltVnlJaXdpWDNCbGJtUnBibWRGYkdWdFpXNTBJaXdpWDNCbGJtUnBibWRUZEdGMFpWRjFaWFZsSWl3aVgzQmxibVJwYm1kU1pYQnNZV05sVTNSaGRHVWlMQ0pmY0dWdVpHbHVaMFp2Y21ObFZYQmtZWFJsSWl3aVgzSmxibVJsY21Wa1RtOWtaVlI1Y0dVaUxDSmZjbVZ1WkdWeVpXUkRiMjF3YjI1bGJuUWlMQ0pmWTI5dWRHVjRkQ0lzSWw5dGIzVnVkRTl5WkdWeUlpd2lYM1J2Y0V4bGRtVnNWM0poY0hCbGNpSXNJbDl3Wlc1a2FXNW5RMkZzYkdKaFkydHpJaXdpWDJOaGJHeGxaRU52YlhCdmJtVnVkRmRwYkd4VmJtMXZkVzUwSWl3aVgzZGhjbTVsWkVGaWIzVjBVbVZtYzBsdVVtVnVaR1Z5SWl3aWJXOTFiblJEYjIxd2IyNWxiblFpTENKMGNtRnVjMkZqZEdsdmJpSXNJbWh2YzNSUVlYSmxiblFpTENKb2IzTjBRMjl1ZEdGcGJtVnlTVzVtYnlJc0lsOTBhR2x6SWl3aWNtVnVaR1Z5WldSRmJHVnRaVzUwSWl3aWNIVmliR2xqVUhKdmNITWlMQ0p3ZFdKc2FXTkRiMjUwWlhoMElpd2lYM0J5YjJObGMzTkRiMjUwWlhoMElpd2lkWEJrWVhSbFVYVmxkV1VpTENKblpYUlZjR1JoZEdWUmRXVjFaU0lzSW1SdlEyOXVjM1J5ZFdOMElpd2lhVzV6ZENJc0lsOWpiMjV6ZEhKMVkzUkRiMjF3YjI1bGJuUWlMQ0p3Y205d2MwMTFkR0YwWldRaUxDSmpiMjF3YjI1bGJuUk9ZVzFsSWl3aWRXNWtaV1pwYm1Wa0lpd2ljbVZtY3lJc0luTmxkQ0lzSW1kbGRFbHVhWFJwWVd4VGRHRjBaU0lzSW1selVtVmhZM1JEYkdGemMwRndjSEp2ZG1Wa0lpd2ljM1JoZEdVaUxDSm5aWFJPWVcxbElpd2laMlYwUkdWbVlYVnNkRkJ5YjNCeklpd2ljSEp2Y0ZSNWNHVnpJaXdpWTI5dWRHVjRkRlI1Y0dWeklpd2lZMjl0Y0c5dVpXNTBVMmh2ZFd4a1ZYQmtZWFJsSWl3aVkyOXRjRzl1Wlc1MFJHbGtWVzV0YjNWdWRDSXNJbU52YlhCdmJtVnVkRmRwYkd4U1pXTnBaWFpsVUhKdmNITWlMQ0p0WVhKcmRYQWlMQ0pwYm1sMGFXRnNVM1JoZEdVaUxDSkJjbkpoZVNJc0ltbHpRWEp5WVhraUxDSjFibk4wWVdKc1pWOW9ZVzVrYkdWRmNuSnZjaUlzSW5CbGNtWnZjbTFKYm1sMGFXRnNUVzkxYm5SWGFYUm9SWEp5YjNKSVlXNWtiR2x1WnlJc0luQmxjbVp2Y20xSmJtbDBhV0ZzVFc5MWJuUWlMQ0pqYjIxd2IyNWxiblJFYVdSTmIzVnVkQ0lzSW1kbGRGSmxZV04wVFc5MWJuUlNaV0ZrZVNJc0ltVnVjWFZsZFdVaUxDSmZaR1ZpZFdkSlJDSXNJbDlqYjI1emRISjFZM1JEYjIxd2IyNWxiblJYYVhSb2IzVjBUM2R1WlhJaUxDSmpkWEp5Wlc1MElpd2lZMmhsWTJ0d2IybHVkQ0lzSW1VaUxDSnliMnhzWW1GamF5SXNJbDl3Y205alpYTnpVR1Z1WkdsdVoxTjBZWFJsSWl3aWRXNXRiM1Z1ZEVOdmJYQnZibVZ1ZENJc0ltTnZiWEJ2Ym1WdWRGZHBiR3hOYjNWdWRDSXNJbDl5Wlc1a1pYSldZV3hwWkdGMFpXUkRiMjF3YjI1bGJuUWlMQ0p1YjJSbFZIbHdaU0lzSW1kbGRGUjVjR1VpTENKamFHbHNaQ0lzSWw5cGJuTjBZVzUwYVdGMFpWSmxZV04wUTI5dGNHOXVaVzUwSWl3aVJVMVFWRmtpTENKZmNISnZZMlZ6YzBOb2FXeGtRMjl1ZEdWNGRDSXNJbU5vYVd4a1JHVmlkV2RKUkhNaUxDSnZibE5sZEVOb2FXeGtjbVZ1SWl3aVoyVjBTRzl6ZEU1dlpHVWlMQ0p6WVdabGJIa2lMQ0pqYjIxd2IyNWxiblJYYVd4c1ZXNXRiM1Z1ZENJc0ltbHVkbTlyWlVkMVlYSmtaV1JEWVd4c1ltRmpheUlzSW1KcGJtUWlMQ0p5WlcxdmRtVWlMQ0pmYldGemEwTnZiblJsZUhRaUxDSnRZWE5yWldSRGIyNTBaWGgwSWl3aVkyOXVkR1Y0ZEU1aGJXVWlMQ0pmWTJobFkydERiMjUwWlhoMFZIbHdaWE1pTENKamRYSnlaVzUwUTI5dWRHVjRkQ0lzSW1Ob2FXeGtRMjl1ZEdWNGRDSXNJbWRsZEVOb2FXeGtRMjl1ZEdWNGRDSXNJbTl1UW1WbmFXNVFjbTlqWlhOemFXNW5RMmhwYkdSRGIyNTBaWGgwSWl3aWIyNUZibVJRY205alpYTnphVzVuUTJocGJHUkRiMjUwWlhoMElpd2lkSGx3WlZOd1pXTnpJaXdpZG1Gc2RXVnpJaXdpYkc5allYUnBiMjRpTENKeVpXTmxhWFpsUTI5dGNHOXVaVzUwSWl3aWJtVjRkRVZzWlcxbGJuUWlMQ0p1WlhoMFEyOXVkR1Y0ZENJc0luQnlaWFpGYkdWdFpXNTBJaXdpY0hKbGRrTnZiblJsZUhRaUxDSjFjR1JoZEdWRGIyMXdiMjVsYm5RaUxDSndaWEptYjNKdFZYQmtZWFJsU1daT1pXTmxjM05oY25raUxDSndjbVYyVUdGeVpXNTBSV3hsYldWdWRDSXNJbTVsZUhSUVlYSmxiblJGYkdWdFpXNTBJaXdpY0hKbGRsVnViV0Z6YTJWa1EyOXVkR1Y0ZENJc0ltNWxlSFJWYm0xaGMydGxaRU52Ym5SbGVIUWlMQ0ozYVd4c1VtVmpaV2wyWlNJc0luQnlaWFpRY205d2N5SXNJbTVsZUhSUWNtOXdjeUlzSW1OdmJYQnZibVZ1ZEZkcGJHeFNaV05sYVhabFVISnZjSE1pTENKdVpYaDBVM1JoZEdVaUxDSnphRzkxYkdSVmNHUmhkR1VpTENKemFHOTFiR1JEYjIxd2IyNWxiblJWY0dSaGRHVWlMQ0pmY0dWeVptOXliVU52YlhCdmJtVnVkRlZ3WkdGMFpTSXNJbkYxWlhWbElpd2ljbVZ3YkdGalpTSXNJbXhsYm1kMGFDSXNJbWtpTENKd1lYSjBhV0ZzSWl3aVkyRnNiQ0lzSW5WdWJXRnphMlZrUTI5dWRHVjRkQ0lzSW5CeVpYWlRkR0YwWlNJc0lsOTBhR2x6TWlJc0ltaGhjME52YlhCdmJtVnVkRVJwWkZWd1pHRjBaU0lzSWtKdmIyeGxZVzRpTENKamIyMXdiMjVsYm5SRWFXUlZjR1JoZEdVaUxDSmpiMjF3YjI1bGJuUlhhV3hzVlhCa1lYUmxJaXdpWDNWd1pHRjBaVkpsYm1SbGNtVmtRMjl0Y0c5dVpXNTBJaXdpY0hKbGRrTnZiWEJ2Ym1WdWRFbHVjM1JoYm1ObElpd2ljSEpsZGxKbGJtUmxjbVZrUld4bGJXVnVkQ0lzSW01bGVIUlNaVzVrWlhKbFpFVnNaVzFsYm5RaUxDSnZiR1JJYjNOMFRtOWtaU0lzSW01bGVIUk5ZWEpyZFhBaUxDSmZjbVZ3YkdGalpVNXZaR1ZYYVhSb1RXRnlhM1Z3SWl3aWNISmxka2x1YzNSaGJtTmxJaXdpY21Wd2JHRmpaVTV2WkdWWGFYUm9UV0Z5YTNWd0lpd2lYM0psYm1SbGNsWmhiR2xrWVhSbFpFTnZiWEJ2Ym1WdWRGZHBkR2h2ZFhSUGQyNWxjazl5UTI5dWRHVjRkQ0lzSWw5cGMwMXZZMnRHZFc1amRHbHZiaUlzSW1GMGRHRmphRkpsWmlJc0luSmxaaUlzSW1OdmJYQnZibVZ1ZENJc0ltZGxkRkIxWW14cFkwbHVjM1JoYm1ObElpd2ljSFZpYkdsalEyOXRjRzl1Wlc1MFNXNXpkR0Z1WTJVaUxDSmtaWFJoWTJoU1pXWWlMQ0pqYjI1emRISjFZM1J2Y2lJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVZGQkxHRkJSVUVzU1VGQlNVRXNaVUZCYVVKRExGRkJRVkVzZDBKQlEzcENReXhSUVVGVlJDeFJRVUZSTEdsQ1FVVnNRa1VzVFVGQlVVWXNVVUZCVVN4dFFrRkRhRUpITERCQ1FVRTBRa2dzVVVGQlVTd3JRa0ZEY0VOSkxHdENRVUZ2UWtvc1VVRkJVU3dyUWtGRE5VSkxMR2RDUVVGclFrd3NVVUZCVVN4eFFrRkRNVUpOTEdsQ1FVRnRRazRzVVVGQlVTeHpRa0ZETTBKUExIRkNRVUYxUWxBc1VVRkJVU3d3UWtGREwwSlJMR1ZCUVdsQ1VpeFJRVUZSTEc5Q1FVTjZRbE1zWjBKQlFXdENWQ3hSUVVGUkxIRkNRVVU1UWl4SFFVRTJRaXhsUVVGNlFsVXNVVUZCVVVNc1NVRkJTVU1zVTBGRFpDeEpRVUZKUXl4dFFrRkJjVUppTEZGQlFWRXNkMEpCUjI1RExFbEJRVWxqTEZsQlFXTmtMRkZCUVZFc2QwSkJRM1JDWlN4VlFVRlpaaXhSUVVGUkxITkNRVU53UW1kQ0xHRkJRV1ZvUWl4UlFVRlJMSGxDUVVOMlFtbENMREpDUVVFMlFtcENMRkZCUVZFc1owTkJRM0pEYTBJc1VVRkJWV3hDTEZGQlFWRXNiMEpCUld4Q2JVSXNaVUZCYVVJc1EwRkRia0pETEZsQlFXRXNSVUZEWWtNc1ZVRkJWeXhGUVVOWVF5eHZRa0ZCY1VJc1IwRkhka0lzVTBGQlUwTXNiVUpCUVcxQ1F5eEpRVkUxUWl4VFFVRlRReXh4UWtGQmNVSkVMRVZCUVZkRkxFZEJRMVlzWlVGQmVrSm9RaXhSUVVGUlF5eEpRVUZKUXl4WFFVTlhMR1ZCUVhwQ1JpeFJRVUZSUXl4SlFVRkpReXhWUVVFMFFrMHNVVUZCYjBJc1QwRkJXbEVzU1VGQlowTXNTVUZCV2tFc1IwRkJjVUo0UWl4TlFVRk5lVUlzWlVGQlpVUXNSMEZCVlN4eFNVRkJNa2xHTEVWQlFWVkpMR0ZCUVdWS0xFVkJRVlZMTEUxQlFWRXNZVUZEY2xJc1pVRkJla0p1UWl4UlFVRlJReXhKUVVGSlF5eFZRVUUwUWswc1UwRkJVMDBzUlVGQlZVMHNhMEpCUVcxQ0xEQkZRVUV5UlU0c1JVRkJWVWtzWVVGQlpVb3NSVUZCVlVzc1RVRkJVU3hqUVVsNFRTeFRRVUZUUlN4blFrRkJaMEpRTEVkQlEzWkNMRk5CUVZWQkxFVkJRVlZSTEZsQlFXRlNMRVZCUVZWUkxGVkJRVlZETEd0Q1FVZDJSQ3hUUVVGVFF5eG5Ra0ZCWjBKV0xFZEJRM1pDTEZOQlFWVkJMRVZCUVZWUkxGbEJRV0ZTTEVWQlFWVlJMRlZCUVZWSExITkNRVWwyUkN4VFFVRlRReXh4UWtGQmNVSkRMRVZCUVVsRExFVkJRVk5ETEVkQlEzcERMRWRCUVdkQ0xFbEJRVnBFTEVWQlNVWXNUMEZCVDBRc1NVRkhWRGxDTEhGQ1FVRnhRbWxETEZWQlFWVkRMSE5DUVVGelFrZ3NSVUZCVTBNc1IwRkRPVVFzU1VGRFJTeFBRVUZQUml4SlFVTlFMRkZCUTBFNVFpeHhRa0ZCY1VKcFF5eFZRVUZWUlN4dlFrRkJiMEpLTEVWQlFWTkRMRWxCYmtOb1JXaENMRzFDUVVGdFFsTXNWVUZCVlZjc1QwRkJVeXhYUVVOd1F5eEpRVUZKYmtJc1JVRkJXV3hDTEdsQ1FVRnBRbk5ETEVsQlFVbERMRTFCUVUxRExHZENRVUZuUWtNc1MwRkRka1J5UWl4RlFVRlZSaXhGUVVGVmNVSXNTMEZCUzBjc1RVRkJUMGdzUzBGQlMwa3NVVUZCVTBvc1MwRkJTMHNzVTBGRmRrUXNUMEZFUVhwQ0xIRkNRVUZ4UWtRc1JVRkJWMFVzUjBGRGVrSkJMRWRCYjBWVUxFbEJRVWw1UWl4WlFVRmpMRVZCUzJSRExIZENRVUV3UWl4RFFWRTFRa01zVlVGQlZ5eFRRVUZWTTBJc1IwRkRia0p0UWl4TFFVRkxReXhuUWtGQmEwSndRaXhGUVVOMlFtMUNMRXRCUVV0VExGbEJRV01zUlVGRGJrSlVMRXRCUVV0VkxHVkJRV2xDTEV0QlEzUkNWaXhMUVVGTFZ5eFZRVUZaTEV0QlEycENXQ3hMUVVGTFdTeFpRVUZqTEV0QlEyNUNXaXhMUVVGTFlTeHRRa0ZCY1VJc1MwRkhNVUppTEV0QlFVdGpMRzFDUVVGeFFpeExRVU14UW1Rc1MwRkJTMlVzWjBKQlFXdENMRXRCUTNaQ1ppeExRVUZMWjBJc2JVSkJRWEZDTEV0QlF6RkNhRUlzUzBGQlMybENMSE5DUVVGMVFpeEZRVU0xUW1wQ0xFdEJRVXRyUWl4eFFrRkJjMElzUlVGRk0wSnNRaXhMUVVGTGJVSXNhMEpCUVc5Q0xFdEJRM3BDYmtJc1MwRkJTMjlDTEcxQ1FVRnhRaXhMUVVNeFFuQkNMRXRCUVV0eFFpeFRRVUZYTEV0QlEyaENja0lzUzBGQlMzTkNMRmxCUVdNc1JVRkRia0owUWl4TFFVRkxkVUlzYVVKQlFXMUNMRXRCUjNoQ2RrSXNTMEZCUzNkQ0xHdENRVUZ2UWl4TFFVZDZRbmhDTEV0QlFVdDVRaXcyUWtGQk9FSXNSVUZGVGl4bFFVRjZRalZFTEZGQlFWRkRMRWxCUVVsRExGZEJRMlJwUXl4TFFVRkxNRUlzTUVKQlFUSkNMRWxCWlhCRFF5eGxRVUZuUWl4VFFVRlZReXhGUVVGaFF5eEZRVUZaUXl4RlFVRnRRakZDTEVkQlEzQkZMRWxCUVVreVFpeEZRVUZSTDBJc1MwRkZXa0VzUzBGQlMzRkNMRk5CUVZkcVFpeEZRVU5vUWtvc1MwRkJTM05DTEZsQlFXTm9RaXhqUVVOdVFrNHNTMEZCUzFrc1dVRkJZMmxDTEVWQlEyNUNOMElzUzBGQlMyRXNiVUpCUVhGQ2FVSXNSVUZGTVVJc1NVRlZTVVVzUlVGV1FVTXNSVUZCWTJwRExFdEJRVXRETEdkQ1FVRm5Ra1VzVFVGRGJrTXJRaXhGUVVGblFteERMRXRCUVV0dFF5eG5Ra0ZCWjBJdlFpeEhRVVZ5UTNwQ0xFVkJRVmx4UWl4TFFVRkxReXhuUWtGQlowSkRMRXRCUldwRGEwTXNSVUZCWTFJc1JVRkJXVk1zYVVKQlJ6RkNReXhGUVVGamNFUXNaMEpCUVdkQ1VDeEhRVU01UWpSRUxFVkJRVTkyUXl4TFFVRkxkME1zYjBKQlFXOUNSaXhGUVVGaFRDeEZRVUZoUXl4RlFVRmxSU3hIUVd0Q04wVXNSMEZrUzBVc1IwRkJkMElzVFVGQlVrTXNSMEZCSzBJc1RVRkJaa0VzUlVGQlMzcERMRTlCVDNCRFZDeG5Ra0ZCWjBKV0xFZEJRMnhDY1VJc1MwRkJTMVVzWlVGQmFVSndReXhsUVVGbFJTeFZRVVZ5UTNkQ0xFdEJRVXRWTEdWQlFXbENjRU1zWlVGQlpVTXNZVUZTZGtOTExIRkNRVUZ4UWtRc1JVRkVja0p4UkN4RlFVRnJRazhzUjBGRlVDeFBRVUZVUVN4SlFVRXdRaXhKUVVGVVFTeEhRVUZyUW14R0xFMUJRVTE1UWl4bFFVRmxlVVFzUzBGQmEwTXNaVUZCZWtJeFJTeFJRVUZSUXl4SlFVRkpReXhUUVVFMFFrY3NWMEZCVlN4RlFVRlBMSEZKUVVGelNWTXNSVUZCVlVrc1lVRkJaVW9zUlVGQlZVc3NUVUZCVVN4aFFVRmxPVUlzWlVGQlpTeE5RVUZQZVVJc1JVRkJWVWtzWVVGQlpVb3NSVUZCVlVzc1RVRkJVU3hqUVVNM1dIVkVMRVZCUVU4c1NVRkJTVGRFTEcxQ1FVRnRRa01zUjBGRE9VSnhRaXhMUVVGTFZTeGxRVUZwUW5CRExHVkJRV1ZITEhGQ1FWTldMR1ZCUVhwQ1dpeFJRVUZSUXl4SlFVRkpReXhUUVVFeVFpeERRVWQwUWl4TlFVRm1kMFVzUlVGQlMzcERMRkZCUTJ0Q0xHVkJRWHBDYWtNc1VVRkJVVU1zU1VGQlNVTXNWVUZCTkVKTkxGTkJRVkVzUlVGQlR5eHRTRUZCZVVoTkxFVkJRVlZKTEdGQlFXVktMRVZCUVZWTExFMUJRVkVzWVVGSE4wNHNTVUZCU1hsRUxFVkJRV1ZHTEVWQlFVdHdReXhSUVVGVk9FSXNSVUZET1VKVExFVkJRV2RDTDBRc1JVRkJWVWtzWVVGQlpVb3NSVUZCVlVzc1RVRkJVU3haUVVWMFF5eGxRVUY2UW01Q0xGRkJRVkZETEVsQlFVbERMRlZCUVRSQ1RTeGhRVUYxUW5ORkxFbEJRV1pLTEVWQlFVdHdReXhSUVVGM1FuTkRMRVZCUVdNc01raEJRV2xKUXl4RlFVRmxRU3hIUVVzM1QwZ3NSVUZCUzNCRExFMUJRVkU0UWl4RlFVTmlUU3hGUVVGTGJrTXNVVUZCVlRoQ0xFVkJRMlpMTEVWQlFVdExMRXRCUVU4elJTeFpRVU5hYzBVc1JVRkJTMnhETEZGQlFWVXJRaXhGUVVWbWNFTXNTMEZCUzFjc1ZVRkJXVFJDTEVWQlIycENPVVVzYVVKQlFXbENiMFlzU1VGQlNVNHNSVUZCVFhaRExFMUJSVVVzWlVGQmVrSnVReXhSUVVGUlF5eEpRVUZKUXl4WFFVbFhMR1ZCUVhwQ1JpeFJRVUZSUXl4SlFVRkpReXhWUVVFMFFrMHNVMEZCVTJ0RkxFVkJRVXRQTEdsQ1FVRnRRbEFzUlVGQlMwOHNaMEpCUVdkQ1F5eHpRa0ZCZDBKU0xFVkJRVXRUTEUxQlFVOHNiMHhCUVN0TWFFUXNTMEZCUzJsRUxGZEJRV0VzWlVGRE1WUXNaVUZCZWtKd1JpeFJRVUZSUXl4SlFVRkpReXhWUVVFMFFrMHNVMEZCVTJ0RkxFVkJRVXRYTEdsQ1FVRnRRbGdzUlVGQlMxY3NaMEpCUVdkQ1NDeHhRa0ZCYzBJc2VVeEJRVzlOTDBNc1MwRkJTMmxFTEZkQlFXRXNaVUZEYWxRc1pVRkJla0p3Uml4UlFVRlJReXhKUVVGSlF5eFZRVUUwUWswc1UwRkJVMnRGTEVWQlFVdFpMRlZCUVZjc01FZEJRV2RJYmtRc1MwRkJTMmxFTEZkQlFXRXNaVUZETVVzc1pVRkJla0p3Uml4UlFVRlJReXhKUVVGSlF5eFZRVUUwUWswc1UwRkJVMnRGTEVWQlFVdGhMR0ZCUVdNc1owaEJRWE5JY0VRc1MwRkJTMmxFTEZkQlFXRXNaVUZEYmt3c1pVRkJla0p3Uml4UlFVRlJReXhKUVVGSlF5eFZRVUUwUWswc1VVRkJPRU1zYlVKQlFTOUNhMFVzUlVGQlMyTXNjMEpCUVhORExEaExRVUU0VEhKRUxFdEJRVXRwUkN4WFFVRmhMR1ZCUTNwU0xHVkJRWHBDY0VZc1VVRkJVVU1zU1VGQlNVTXNWVUZCTkVKTkxGRkJRVFJETEcxQ1FVRTNRbXRGTEVWQlFVdGxMRzlDUVVGdlF5dzBTRUZCZFVsMFJDeExRVUZMYVVRc1YwRkJZU3hsUVVOb1R5eGxRVUY2UW5CR0xGRkJRVkZETEVsQlFVbERMRlZCUVRSQ1RTeFJRVUZyUkN4dFFrRkJia05yUlN4RlFVRkxaMElzTUVKQlFUQkRMR2RIUVVGelIzWkVMRXRCUVV0cFJDeFhRVUZoTEdkQ1FVZG9UeXhKUVZWSlR5eEZRVlpCUXl4RlFVRmxiRUlzUlVGQlMxTXNUVUUyUW5oQ0xGbEJOVUp4UWt3c1NVRkJha0pqTEVsQlEwWnNRaXhGUVVGTFV5eE5RVUZSVXl4RlFVRmxMRTlCUlVvc2FVSkJRV3BDUVN4SFFVRTRRa01zVFVGQlRVTXNVVUZCVVVZc1RVRkJNRU1zWlVGQmVrSTFSaXhSUVVGUlF5eEpRVUZKUXl4VFFVRTBRa2NzVjBGQlZTeEZRVUZQTERaRFFVRTRRemhDTEV0QlFVdHBSQ3hYUVVGaExESkNRVUUyUWk5R0xHVkJRV1VzVFVGQlR6aERMRXRCUVV0cFJDeFhRVUZoTERSQ1FVVndVV3BFTEV0QlFVdG5RaXh0UWtGQmNVSXNTMEZETVVKb1FpeExRVUZMYVVJc2MwSkJRWFZDTEVWQlF6VkNha0lzUzBGQlMydENMSEZDUVVGelFpeEZRVWw2UW5ORExFVkJSRVZxUWl4RlFVRkxjVUlzY1VKQlEwVTFSQ3hMUVVGTE5rUXNjVU5CUVhGRE4wSXNSVUZCYVVKSUxFVkJRVmxETEVWQlFXMUNSaXhGUVVGaGVFSXNSMEZGZGtkS0xFdEJRVXM0UkN4dlFrRkJiMEk1UWl4RlFVRnBRa2dzUlVGQldVTXNSVUZCYlVKR0xFVkJRV0Y0UWl4SFFVYzNSbTFETEVWQlFVdDNRaXh2UWtGRGMwSXNaVUZCZWtKc1J5eFJRVUZSUXl4SlFVRkpReXhUUVVOa05rUXNSVUZCV1c5RExIRkNRVUZ4UWtNc1VVRkJVU3hYUVVOMlF6RkZMSEZDUVVGeFFpeFhRVU51UWl4UFFVRlBaMFFzUlVGQlMzZENMSEZDUVVOWWFFTXNSVUZCVFcxRExGTkJRVlVzZFVKQlIzSkNkRU1zUlVGQldXOURMSEZDUVVGeFFrTXNVVUZCVVRGQ0xFVkJRVXQzUWl4clFrRkJiVUo0UWl4SlFVazVSR2xDTEVkQlIxUm9RaXh2UWtGQmNVSXNVMEZCVlVZc1JVRkJZVXdzUlVGQllVTXNSVUZCWlVVc1IwRkRkRVVzUjBGQk5rSXNaVUZCZWtKMlJTeFJRVUZSUXl4SlFVRkpReXhWUVVFNFFuVkZMRVZCVVRWRExFOUJRVTkwUXl4TFFVRkxiVVVzWjBOQlFXZEROMElzUlVGQllVd3NSVUZCWVVNc1JVRkJaVVVzUjBGUWNrWTNSU3hyUWtGQmEwSTJSeXhSUVVGVmNFVXNTMEZETlVJc1NVRkRSU3hQUVVGUFFTeExRVUZMYlVVc1owTkJRV2RETjBJc1JVRkJZVXdzUlVGQllVTXNSVUZCWlVVc1IwRkRja1lzVVVGRFFUZEZMR3RDUVVGclFqWkhMRkZCUVZVc1QwRlBiRU5FTEdkRFFVRnBReXhUUVVGVk4wSXNSVUZCWVV3c1JVRkJZVU1zUlVGQlpVVXNSMEZEYkVZc1NVRkJTWHBFTEVWQlFWbHhRaXhMUVVGTFF5eG5Ra0ZCWjBKRExFdEJSWEpETEU5QlFVbHZReXhGUVVNeVFpeGxRVUY2UW5wRkxGRkJRVkZETEVsQlFVbERMRk5CUTFCM1FpeHhRa0ZCY1VJc1YwRkRNVUlzVDBGQlR5eEpRVUZKV2l4RlFVRlZjMFFzUlVGQllVTXNSVUZCWlVVc1NVRkRhRVJ3UXl4TFFVRkxhMFVzVTBGQlZTeFJRVVZZTEVsQlFVbDJSaXhGUVVGVmMwUXNSVUZCWVVNc1JVRkJaVVVzUjBGTmVFSXNaVUZCZWtKMlJTeFJRVUZSUXl4SlFVRkpReXhUUVVOUWQwSXNjVUpCUVhGQ0xGZEJRekZDTEU5QlFVOWFMRVZCUVZWelJDeEZRVUZoUXl4RlFVRmxSU3hKUVVNMVEzQkRMRXRCUVV0clJTeFRRVUZWTEZWQlJWaDJSaXhGUVVGVmMwUXNSVUZCWVVNc1JVRkJaVVVzU1VGSmFrUjVRaXh4UTBGQmMwTXNVMEZCVlRkQ0xFVkJRV2xDU0N4RlFVRlpReXhGUVVGdFFrWXNSVUZCWVhoQ0xFZEJRek5ITEVsQlFVbHZSQ3hGUVVOQllTeEZRVUZoZWtNc1JVRkJXWGxETEdGQlF6ZENMRWxCUTBWaUxFVkJRVk40UkN4TFFVRkxPRVFzYjBKQlFXOUNPVUlzUlVGQmFVSklMRVZCUVZsRExFVkJRVzFDUml4RlFVRmhlRUlzUjBGREwwWXNUVUZCVDJ0RkxFZEJSVkF4UXl4RlFVRlpNa01zVTBGQlUwWXNSMEZEY2tKeVJTeExRVUZMVnl4VlFVRlZhVVFzY1VKQlFYRkNWU3hIUVVOb1EzUkZMRXRCUVV0blFpeHhRa0ZEVUdoQ0xFdEJRVXRYTEZWQlFWVnhReXhOUVVGUmFFUXNTMEZCUzNkRkxIRkNRVUZ4UW5oRkxFdEJRVXRYTEZWQlFWVlNMRTFCUVU5SUxFdEJRVXRYTEZWQlFWVlFMRlZCUlhoR2FVVXNSVUZCWVhwRExFVkJRVmw1UXl4aFFVVjZRbkpGTEV0QlFVdHZRaXh0UWtGQmJVSnhSQ3hyUWtGQmFVSXNSMEZEZWtNM1F5eEZRVUZaTWtNc1UwRkJVMFlzUjBGSmNrSmlMRVZCUVZONFJDeExRVUZMT0VRc2IwSkJRVzlDT1VJc1JVRkJhVUpJTEVWQlFWbERMRVZCUVcxQ1JpeEZRVUZoZUVJc1IwRkZha2NzVDBGQlQyOUVMRWRCUjFSTkxHOUNRVUZ4UWl4VFFVRlZPVUlzUlVGQmFVSklMRVZCUVZsRExFVkJRVzFDUml4RlFVRmhlRUlzUjBGRE1VWXNTVUZCU1cxRExFVkJRVTkyUXl4TFFVRkxWeXhWUVVWYWJFSXNSVUZCVlN4RlFVTmxMR1ZCUVhwQ05VSXNVVUZCVVVNc1NVRkJTVU1zVjBGRFpEQkNMRVZCUVZWUExFdEJRVXRyUlN4VlFVZGlNMElzUlVGQlMyMURMSEZDUVVOelFpeGxRVUY2UWpkSExGRkJRVkZETEVsQlFVbERMRk5CUTJSM1FpeHhRa0ZCY1VJc1YwRkRia0lzVDBGQlQyZEVMRVZCUVV0dFF5eHpRa0ZEV0dwR0xFVkJRVk1zYzBKQlJWbzRReXhGUVVGTGJVTXNjVUpCU1VneFJTeExRVUZMWjBJc2NVSkJRMUIxUWl4RlFVRkxVeXhOUVVGUmFFUXNTMEZCUzNkRkxIRkNRVUZ4UW1wRExFVkJRVXR3UXl4TlFVRlBiME1zUlVGQlMyNURMR2RDUVV0d1EzVkRMRWxCUVhCQ1dDeEpRVU5HUVN4RlFVRnJRbWhETEV0QlFVc3lSU3cyUWtGSGVrSXNTVUZCU1VNc1JVRkJWMnBJTEdWQlFXVnJTQ3hSUVVGUk4wTXNSMEZEZEVOb1F5eExRVUZMYlVJc2EwSkJRVzlDZVVRc1JVRkRla0lzU1VGQlNVVXNSVUZCVVRsRkxFdEJRVXNyUlN3eVFrRkJNa0l2UXl4RlFVRnBRalJETEVsQlFXRnFTQ3hsUVVGbGNVZ3NUMEZGZWtab1JpeExRVUZMYjBJc2JVSkJRWEZDTUVRc1JVRkZNVUlzU1VGQlNYUkNMRVZCUVZNMVJpeG5Ra0ZCWjBJclJDeGxRVUZsYlVRc1JVRkJUMnhFTEVWQlFXRkRMRVZCUVZsRExFVkJRVzFDT1VJc1MwRkJTMmxHTEhGQ1FVRnhRamRGTEVkQlFWVllMRWRCUlc1SkxFZEJRVFpDTEdWQlFYcENOVUlzVVVGQlVVTXNTVUZCU1VNc1ZVRkRSU3hKUVVGYU1FSXNSVUZCWlN4RFFVTnFRaXhKUVVGSmVVWXNSVUZCYlVNc1NVRkJia0pLTEVWQlFVMWFMRk5CUVdsQ0xFTkJRVU5aTEVWQlFVMWFMRlZCUVZrc1IwRkRPVVI0Unl4eFFrRkJjVUpwUXl4VlFVRlZkMFlzWTBGQll6RkdMRVZCUVZONVJpeEhRVWt4UkN4UFFVRlBNVUlzUjBGSFZEUkNMRmxCUVdFc1YwRkRXQ3hQUVVGUGVFZ3NaMEpCUVdkQ2QwZ3NXVUZCV1hCR0xFdEJRVXR2UWl4eFFrRlRNVU54UkN4cFFrRkJhMElzVTBGQlZWa3NSMEZETVVJc1IwRkJTM0pHTEV0QlFVdHZRaXh0UWtGQlZpeERRVWxCTEVsQlFVbHRRaXhGUVVGUGRrTXNTMEZCUzFjc1ZVRkZhRUlzUjBGQlNUUkNMRVZCUVVzclF5eDFRa0ZCZVVJdlF5eEZRVUZMWkN3MFFrRkhja01zUjBGR1FXTXNSVUZCUzJRc05rSkJRVGhDTEVWQlJTOUNORVFzUlVGQlVTeERRVU5XTEVsQlFVbHlSeXhGUVVGUFowSXNTMEZCUzJsRUxGVkJRVmtzTUVKQlF6VkNla1lzWjBKQlFXZENLMGdzYzBKQlFYTkNka2NzUlVGQlRYVkVMRVZCUVVzclF5eHhRa0ZCY1VKRkxFdEJRVXRxUkN4UlFVVTVReXhsUVVGNlFqRkZMRkZCUVZGRExFbEJRVWxETEZOQlEyUjNRaXh4UWtGQmNVSXNWMEZEYmtJc1QwRkJUMmRFTEVWQlFVc3JReXgzUWtGRFdIUkdMRXRCUVV0clJTeFRRVUZWTEhkQ1FVVnNRak5DTEVWQlFVc3JReXgxUWtGTFVIUkdMRXRCUVV0dlFpeHhRa0ZEVUhoRUxHZENRVUZuUWpaSExHbENRVUZwUW5wRkxFdEJRVXR2UWl4dFFrRkJiMEpwUlN4SFFVTXhSSEpHTEV0QlFVdHRRaXhyUWtGQmIwSXNTMEZEZWtKdVFpeExRVUZMYjBJc2JVSkJRWEZDTEV0QlF6RkNjRUlzUzBGQlMxY3NWVUZCV1N4TlFVMXVRbGdzUzBGQlMyZENMRzFDUVVGeFFpeExRVU14UW1oQ0xFdEJRVXRwUWl4elFrRkJkVUlzUlVGRE5VSnFRaXhMUVVGTGEwSXNjVUpCUVhOQ0xFVkJRek5DYkVJc1MwRkJTM2RDTEd0Q1FVRnZRaXhMUVVONlFuaENMRXRCUVV0bExHZENRVUZyUWl4TFFVbDJRbVlzUzBGQlMzRkNMRk5CUVZjc1MwRkRhRUp5UWl4TFFVRkxVeXhaUVVGakxFVkJRMjVDVkN4TFFVRkxkVUlzYVVKQlFXMUNMRXRCUzNoQ09VUXNhVUpCUVdsQ1owa3NUMEZCVDJ4RUxFdEJhVUl4UW0xRUxHRkJRV01zVTBGQlZYUkdMRWRCUTNSQ0xFbEJRMGxuUkN4RlFVUlpjRVFzUzBGQlMwTXNaMEpCUVdkQ1F5eExRVU5TYTBRc1lVRkROMElzU1VGQlMwRXNSVUZEU0N4UFFVRlBia1lzV1VGRlZDeEpRVUZKTUVnc1JVRkJaMElzUjBGRGNFSXNTVUZCU3l4SlFVRkpReXhMUVVGbGVFTXNSVUZEZEVKMVF5eEZRVUZqUXl4SFFVRmxlRVlzUlVGQlVYZEdMRWRCUlhaRExFOUJRVTlFTEVkQlYxUjRSQ3huUWtGQmFVSXNVMEZCVlM5Q0xFZEJRM3BDTEVsQlFVbDFSaXhGUVVGblFqTkdMRXRCUVVzd1JpeGhRVUZoZEVZc1IwRkRkRU1zUjBGQk5rSXNaVUZCZWtKMlF5eFJRVUZSUXl4SlFVRkpReXhUUVVFeVFpeERRVU42UXl4SlFVRkpXU3hGUVVGWmNVSXNTMEZCUzBNc1owSkJRV2RDUXl4TFFVTnFRM1pDTEVWQlFWVjVSU3hqUVVOYWNFUXNTMEZCU3paR0xHMUNRVUZ0UW14SUxFVkJRVlY1UlN4aFFVRmpkVU1zUlVGQlpTeFhRVWR1UlN4UFFVRlBRU3hIUVZGVVZpeHhRa0ZCYzBJc1UwRkJWV0VzUjBGRE9VSXNTVUZGU1VNc1JVRkdRWEJJTEVWQlFWbHhRaXhMUVVGTFF5eG5Ra0ZCWjBKRExFdEJRMnBEY1VNc1JVRkJUM1pETEV0QlFVdFhMRlZCUjJoQ0xFZEJRVWswUWl4RlFVRkxlVVFzWjBKQlExQXNSMEZCTmtJc1pVRkJla0p1U1N4UlFVRlJReXhKUVVGSlF5eFRRVUV5UWl4RFFVTjZRMHdzY1VKQlFYRkNhVU1zVlVGQlZYTkhMR2REUVVNdlFpeEpRVU5GUml4RlFVRmxlRVFzUlVGQlMzbEVMR3RDUVVOd1FpeFJRVU5CZEVrc2NVSkJRWEZDYVVNc1ZVRkJWWFZITEc5RFFVZHFRMGdzUlVGQlpYaEVMRVZCUVV0NVJDeHJRa0ZKZUVJc1IwRkJTVVFzUlVGQll5eERRVXRvUWl4SlFVRkxMRWxCUVVrdlJ5eEpRVXBuUXl4cFFrRkJhRU5NTEVWQlFWVk5MRzlDUVVFeVJDeGxRVUY2UW5CQ0xGRkJRVkZETEVsQlFVbERMRk5CUVRSQ1J5eFhRVUZWTEVWQlFVOHNOa1pCUVRoR09FSXNTMEZCUzJsRUxGZEJRV0VzTWtKQlFUWkNMMFlzWlVGQlpTeE5RVUZQT0VNc1MwRkJTMmxFTEZkQlFXRXNORUpCUTNSUkxHVkJRWHBDY0VZc1VVRkJVVU1zU1VGQlNVTXNWVUZEWkdsRExFdEJRVXMyUml4dFFrRkJiVUpzU0N4RlFVRlZUU3hyUWtGQmJVSTRSeXhGUVVGakxHbENRVVZ3UkVFc1JVRkRZaTlITEV0QlFWRk1MRVZCUVZWTkxHOUNRVUU0UXl4bFFVRjZRbkJDTEZGQlFWRkRMRWxCUVVsRExGTkJRVFJDUnl4WFFVRlZMRVZCUVU4c2MwVkJRWFZGT0VJc1MwRkJTMmxFTEZkQlFXRXNNRUpCUVRKQ2FrVXNSMEZCVVRsQ0xHVkJRV1VzVFVGQlR6aERMRXRCUVV0cFJDeFhRVUZoTERCQ1FVRXlRbXBGTEVsQlJXNVRMRTlCUVU4MVFpeFJRVUZSTEVkQlFVa3dTU3hGUVVGblFrTXNSMEZGY2tNc1QwRkJUMFFzUjBGWFZFUXNiVUpCUVc5Q0xGTkJRVlZOTEVWQlFWZERMRVZCUVZGRExFZEJRMnhDTEdWQlFYcENlRWtzVVVGQlVVTXNTVUZCU1VNc1ZVRkRaRU1zYlVKQlFXMUNiVWtzUlVGQlYwTXNSVUZCVVVNc1JVRkJWWEpITEV0QlFVdHBSQ3hWUVVGWExFdEJRVTFxUkN4TFFVRkxhMFVzVjBGSkwwVnZReXhwUWtGQmEwSXNVMEZCVlVNc1JVRkJZVE5GTEVWQlFXRTBSU3hIUVVOd1JDeEpRVUZKUXl4RlFVRmpla2NzUzBGQlMwTXNaMEpCUTI1Q2VVY3NSVUZCWXpGSExFdEJRVXR4UWl4VFFVVjJRbkpDTEV0QlFVdGxMR2RDUVVGclFpeExRVVYyUW1Zc1MwRkJTekpITEdkQ1FVRm5RaTlGTEVWQlFXRTJSU3hGUVVGaFJpeEZRVUZoUnl4RlFVRmhSaXhKUVZVelJVa3NlVUpCUVRCQ0xGTkJRVlZvUml4SFFVTk9MRTFCUVhoQ05VSXNTMEZCUzJVc1owSkJRMUJ1UkN4blFrRkJaMEl3U1N4cFFrRkJhVUowUnl4TFFVRk5RU3hMUVVGTFpTeG5Ra0ZCYVVKaExFVkJRV0UxUWl4TFFVRkxjVUlzVlVGRE1VTXNUMEZCTlVKeVFpeExRVUZMWjBJc2IwSkJRU3RDYUVJc1MwRkJTMnRDTEc5Q1FVTnNSR3hDTEV0QlFVc3lSeXhuUWtGQlowSXZSU3hGUVVGaE5VSXNTMEZCUzBNc1owSkJRV2xDUkN4TFFVRkxReXhuUWtGQmFVSkVMRXRCUVV0eFFpeFRRVUZWY2tJc1MwRkJTM0ZDTEZWQlJXeEhja0lzUzBGQlMyTXNiVUpCUVhGQ0xFMUJiVUk1UWpaR0xHZENRVUZwUWl4VFFVRlZMMFVzUlVGQllXbEdMRVZCUVcxQ1F5eEZRVUZ0UWtNc1JVRkJjVUpETEVkQlEycEhMRWxCUVVsNlJTeEZRVUZQZGtNc1MwRkJTMWNzVlVGRFRpeE5RVUZTTkVJc1NVRkJlVU1zWlVGQmVrSXhSU3hSUVVGUlF5eEpRVUZKUXl4VFFVRTBRa2NzVjBGQlZTeEZRVUZQTERKR1FVRTBSamhDTEV0QlFVdHBSQ3hYUVVGaExESkNRVUUyUWk5R0xHVkJRV1VzVFVGQlR6aERMRXRCUVV0cFJDeFhRVUZoTERSQ1FVVTVVQ3hKUVVOSmRVUXNSVUZFUVZNc1IwRkJZeXhGUVVsa2FrZ3NTMEZCUzNGQ0xGZEJRV0V5Uml4RlFVTndRbElzUlVGQlkycEZMRVZCUVV0dVF5eFRRVVZ1UW05SExFVkJRV040Unl4TFFVRkxiVU1zWjBKQlFXZENOa1VzUjBGRGJrTkRMRWRCUVdNc1IwRkhhRUlzU1VGQlNVTXNSVUZCV1V3c1JVRkJhMEl4Unl4TlFVTTVRbWRJTEVWQlFWbE1MRVZCUVd0Q00wY3NUVUZIT1VJd1J5eEpRVUZ6UWtNc1NVRkRlRUpITEVkQlFXTXNSMEZOV2tFc1IwRkJaVEZGTEVWQlFVczJSU3cwUWtGRFR5eGxRVUY2UW5aS0xGRkJRVkZETEVsQlFVbERMRk5CUTJSM1FpeHhRa0ZCY1VJc1YwRkRia0lzVDBGQlQyZEVMRVZCUVVzMlJTd3dRa0ZCTUVKRUxFVkJRVmRZTEVsQlEyaEVlRWNzUzBGQlMydEZMRk5CUVZVc05rSkJSV3hDTTBJc1JVRkJTelpGTERCQ1FVRXdRa1FzUlVGQlYxZ3NTVUZKT1VNc1NVRkJTV0VzUlVGQldYSklMRXRCUVV0M1JTeHhRa0ZCY1VJeVF5eEZRVUZYV0N4SFFVTnFSR01zUjBGQlpTeEZRVVZrZEVnc1MwRkJTMnRDTEhOQ1FVTktjVUlzUlVGQlMyZEdMSE5DUVVWTVJDeEZRVVF5UWl4bFFVRjZRbnBLTEZGQlFWRkRMRWxCUVVsRExGTkJRME4zUWl4eFFrRkJjVUlzVjBGRGJFTXNUMEZCVDJkRUxFVkJRVXRuUml4elFrRkJjMEpLTEVWQlFWZEZMRVZCUVZkaUxFbEJRM1pFZUVjc1MwRkJTMnRGTEZOQlFWVXNlVUpCUlVnelFpeEZRVUZMWjBZc2MwSkJRWE5DU2l4RlFVRlhSU3hGUVVGWFlpeEhRVWM1UkhoSExFdEJRVXRWTEdsQ1FVRnRRbkJETEdWQlFXVkZMRmxCUTNwRE9Fa3NSMEZCWjBKdVNpeGhRVUZoSzBrc1JVRkJWME1zUzBGQlpXaEtMR0ZCUVdGdlJTeEZRVUZMVXl4TlFVRlBjVVVzUzBGTGVrUXNaVUZCZWtKNFNpeFJRVUZSUXl4SlFVRkpReXhWUVVOWExHVkJRWHBDUml4UlFVRlJReXhKUVVGSlF5eFZRVUUwUWswc1lVRkJlVUp6UlN4SlFVRnFRakpGTEVWQlFUUkNMR2RJUVVGelNIUklMRXRCUVV0cFJDeFhRVUZoTERKQ1FVZDBUbXBFTEV0QlFVdGpMRzFDUVVGeFFpeExRVU4wUW5kSExFZEJRMFowU0N4TFFVRkxhMElzY1VKQlFYTkNMRVZCUlROQ2JFSXNTMEZCUzNkSUxIZENRVUYzUWxZc1JVRkJiVUpMTEVWQlFWZEZMRVZCUVZkaUxFVkJRV0UxUlN4RlFVRmhiMFlzUzBGSmFFZG9TQ3hMUVVGTFF5eG5Ra0ZCYTBJMlJ5eEZRVU4yUWpsSExFdEJRVXR4UWl4VFFVRlhNa1lzUlVGRGFFSjZSU3hGUVVGTGNFTXNUVUZCVVdkSUxFVkJRMkkxUlN4RlFVRkxVeXhOUVVGUmNVVXNSVUZEWWpsRkxFVkJRVXR1UXl4UlFVRlZiMGNzU1VGSmJrSm9ReXh4UWtGQmMwSXNVMEZCVlhKRkxFVkJRVTlETEVkQlEzSkRMRWxCUVVsdFF5eEZRVUZQZGtNc1MwRkJTMWNzVlVGRFdqaEhMRVZCUVZGNlNDeExRVUZMWjBJc2JVSkJRMkl3Unl4RlFVRlZNVWdzUzBGQlMybENMSEZDUVVsdVFpeEhRVWhCYWtJc1MwRkJTMmxDTEhOQ1FVRjFRaXhGUVVNMVFtcENMRXRCUVV0blFpeHRRa0ZCY1VJc1RVRkZja0o1Unl4RlFVTklMRTlCUVU5c1JpeEZRVUZMVXl4TlFVZGtMRWRCUVVrd1JTeEhRVUUwUWl4SlFVRnFRa1FzUlVGQlRVVXNUMEZEYmtJc1QwRkJUMFlzUlVGQlRTeEhRVWxtTEVsQlJFRXNTVUZCU1Vvc1JVRkJXV3BMTEZGQlFWRXNSMEZCU1hOTExFVkJRVlZFTEVWQlFVMHNSMEZCUzJ4R0xFVkJRVXRUTEU5QlF6ZERORVVzUlVGQlNVWXNSVUZCVlN4RlFVRkpMRVZCUVVkRkxFVkJRVWxJTEVWQlFVMUZMRTlCUVZGRExFbEJRVXNzUTBGRGJrUXNTVUZCU1VNc1JVRkJWVW9zUlVGQlRVY3NSMEZEY0VKNFN5eFJRVUZSYVVzc1JVRkJPRUlzYlVKQlFWcFJMRVZCUVhsQ1FTeEZRVUZSUXl4TFFVRkxka1lzUlVGQlRUaEZMRVZCUVZkc1NDeEZRVUZQUXl4SFFVRlhlVWdzUjBGSGNrY3NUMEZCVDFJc1IwRmxWRWNzZDBKQlFYbENMRk5CUVZWcVFpeEZRVUZoV1N4RlFVRlhSU3hGUVVGWFlpeEZRVUZoTlVVc1JVRkJZVzFITEVkQlF6bEdMRWxCUzBsaUxFVkJRMEZqTEVWQlEwRjBRaXhGUVZCQmRVSXNSVUZCVTJwSkxFdEJSVlIxUXl4RlFVRlBka01zUzBGQlMxY3NWVUZGV25WSUxFVkJRWGRDUXl4UlFVRlJOVVlzUlVGQlN6WkdMRzlDUVVseVEwWXNTVUZEUm1oQ0xFVkJRVmt6UlN4RlFVRkxjRU1zVFVGRGFrSTJTQ3hGUVVGWmVrWXNSVUZCUzFNc1RVRkRha0l3UkN4RlFVRmpia1VzUlVGQlMyNURMRk5CUjJwQ2JVTXNSVUZCU3poR0xITkNRVU56UWl4bFFVRjZRbmhMTEZGQlFWRkRMRWxCUVVsRExGTkJRMlIzUWl4eFFrRkJjVUlzVjBGRGJrSXNUMEZCVDJkRUxFVkJRVXM0Uml4dlFrRkJiMEpzUWl4RlFVRlhSU3hGUVVGWFlpeEpRVU55UkhoSExFdEJRVXRyUlN4VFFVRlZMSFZDUVVWc1FqTkNMRVZCUVVzNFJpeHZRa0ZCYjBKc1FpeEZRVUZYUlN4RlFVRlhZaXhKUVVsdVJIaEhMRXRCUVV0RExHZENRVUZyUW5OSExFVkJRM1pDZGtjc1MwRkJTM0ZDTEZOQlFWY3dSeXhGUVVOb1FuaEdMRVZCUVV0d1F5eE5RVUZSWjBnc1JVRkRZalZGTEVWQlFVdFRMRTFCUVZGeFJTeEZRVU5pT1VVc1JVRkJTMjVETEZGQlFWVnZSeXhGUVVWbWVFY3NTMEZCUzNOSkxIbENRVUY1UWpGSExFVkJRV0Z0Unl4SFFVVjJRMGNzU1VGRE1rSXNaVUZCZWtKeVN5eFJRVUZSUXl4SlFVRkpReXhUUVVOa05rUXNSVUZCV1c5RExIRkNRVUZ4UWtNc1VVRkJVU3hYUVVOMlF6RkZMSEZDUVVGeFFtZEVMRVZCUVVzMlJpeHRRa0ZCYlVJMVF5eExRVUZMYWtRc1JVRkJUVEpGTEVWQlFWZGpMRVZCUVZkMFFpeEhRVUZqZFVJc1JVRkJUeTlFTEZOQlFWVXNkMEpCUnk5SGRFTXNSVUZCV1c5RExIRkNRVUZ4UWtNc1VVRkJVVEZDTEVWQlFVczJSaXh0UWtGQmJVSTFReXhMUVVGTGFrUXNSVUZCVFRKRkxFVkJRVmRqTEVWQlFWZDBRaXhIUVVGamJrVXNTMEZYZEVnclJpeDVRa0ZCTUVJc1UwRkJWVEZITEVWQlFXRjRRaXhIUVVNdlF5eEpRVUZKYlVrc1JVRkJkMEoyU1N4TFFVRkxiMElzYlVKQlF6ZENiMGdzUlVGQmMwSkVMRVZCUVhOQ2RFa3NaMEpCUXpWRGQwa3NSVUZCYzBKNlNTeExRVUZMTWtVc05FSkJSVE5DYkVZc1JVRkJWU3hGUVV0a0xFZEJTalpDTEdWQlFYcENOVUlzVVVGQlVVTXNTVUZCU1VNc1YwRkRaREJDTEVWQlFWVlBMRXRCUVV0clJTeFZRVWRpT1VZc01rSkJRVEpDYjBzc1JVRkJjVUpETEVkQlEyeEVOMHNzWjBKQlFXZENNRWtzYVVKQlFXbENhVU1zUlVGQmRVSkZMRVZCUVhGQ04wY3NSVUZCWVRWQ0xFdEJRVXRwUml4eFFrRkJjVUkzUlN4UlFVTXZSeXhEUVVOTUxFbEJRVWx6U1N4RlFVRmpPVXNzWjBKQlFXZENkMGdzV1VGQldXMUVMRWRCUXpsRE0wc3NaMEpCUVdkQ05rY3NhVUpCUVdsQ09FUXNSMEZCZFVJc1IwRkZlRVFzU1VGQlNUTkVMRVZCUVZkcVNDeGxRVUZsYTBnc1VVRkJVVFJFTEVkQlEzUkRla2tzUzBGQlMyMUNMR3RDUVVGdlFubEVMRVZCUTNwQ0xFbEJRVWxGTEVWQlFWRTVSU3hMUVVGTEswVXNNa0pCUVRKQ01FUXNSVUZCY1VJM1JDeEpRVUZoYWtnc1pVRkJaWEZJTEU5QlJUZEdhRVlzUzBGQlMyOUNMRzFDUVVGeFFqQkVMRVZCUlRGQ0xFbEJRVWsyUkN4RlFVRmhMMHNzWjBKQlFXZENLMFFzWlVGQlpXMUVMRVZCUVU5c1JDeEZRVUZoTlVJc1MwRkJTMWtzV1VGQllWb3NTMEZCUzJFc2JVSkJRVzlDWWl4TFFVRkxhVVlzY1VKQlFYRkNOMFVzUjBGQlZWZ3NSMEZGYmtvc1IwRkJOa0lzWlVGQmVrSTFRaXhSUVVGUlF5eEpRVUZKUXl4VlFVTkZMRWxCUVZvd1FpeEZRVUZsTEVOQlEycENMRWxCUVVsNVJpeEZRVUZ0UXl4SlFVRnVRa29zUlVGQlRWb3NVMEZCYVVJc1EwRkJRMWtzUlVGQlRWb3NWVUZCV1N4SFFVTTVSSGhITEhGQ1FVRnhRbWxETEZWQlFWVjNSaXhqUVVGak1VWXNSVUZCVTNsR0xFZEJTVEZFYkVZc1MwRkJTelJKTEhWQ1FVRjFRa1lzUlVGQllVTXNSVUZCV1Vvc1MwRlRla1JMTEhWQ1FVRjNRaXhUUVVGVlJpeEZRVUZoUXl4RlFVRlpSU3hIUVVONlJIWk1MREJDUVVFd1FuZE1MSE5DUVVGelFrb3NSVUZCWVVNc1JVRkJXVVVzU1VGTk0wVkZMQ3REUVVGblJDeFhRVU01UXl4SlFVTkpMMGNzUlVGRVFVOHNSVUZCVDNaRExFdEJRVXRYTEZWQmIwSm9RaXhQUVdoQ1JYRkNMRVZCUkRKQ0xHVkJRWHBDYmtVc1VVRkJVVU1zU1VGQlNVTXNVMEZEU1hkQ0xIRkNRVUZ4UWl4WFFVTnlReXhQUVVGUFowUXNSVUZCUzNwRExGVkJRMWhGTEV0QlFVdHJSU3hUUVVGVkxGVkJSVUV6UWl4RlFVRkxla01zVTBGSFNTeGxRVUY2UW1wRExGRkJRVkZETEVsQlFVbERMR1ZCUlZVMFJTeEpRVUZ3UWxnc1IwRkJhVU5QTEVWQlFVdDZReXhQUVVGUGEwb3NhMEpCUnk5RGFFZ3NSVUZCYTBJc1RVRkpaa0VzUjBGTlZESkRMREJDUVVFeVFpeFhRVU42UWl4SlFVRkpNME1zUlVGRFNpeEhRVUUyUWl4bFFVRjZRbTVGTEZGQlFWRkRMRWxCUVVsRExGVkJRVFpDYVVNc1MwRkJTMVVzYVVKQlFXMUNjRU1zWlVGQlpVY3NiMEpCUVhGQ0xFTkJRM1pIYkVJc2EwSkJRV3RDTmtjc1VVRkJWWEJGTEV0QlF6VkNMRWxCUTBWblF5eEZRVUZyUW1oRExFdEJRVXNyU1N4cFJFRkRka0lzVVVGRFFYaE1MR3RDUVVGclFqWkhMRkZCUVZVc1YwRkhPVUp3UXl4RlFVRnJRbWhETEV0QlFVc3JTU3hwUkVGTmVrSXNUMEZHYjBJc1QwRkJjRUl2Unl4SlFVRm5SQ3hKUVVGd1FrRXNSMEZCTmtJelJTeE5RVUZOZVVJc1pVRkJaV3RFTEV0QlFUWkRMR1ZCUVhwQ2JrVXNVVUZCVVVNc1NVRkJTVU1zVTBGQk5FSkhMRmRCUVZVc1JVRkJUeXg1U1VGQk1FazRRaXhMUVVGTGFVUXNWMEZCWVN3eVFrRkJOa0l2Uml4bFFVRmxMRTFCUVU4NFF5eExRVUZMYVVRc1YwRkJZU3cwUWtGRmNsaHFRaXhIUVZkVWFVZ3NWVUZCVnl4VFFVRlZReXhGUVVGTFF5eEhRVU40UWl4SlFVRkpOVWNzUlVGQlQzWkRMRXRCUVV0dlNpeHZRa0ZEVGl4TlFVRlNOMGNzU1VGQmVVTXNaVUZCZWtJeFJTeFJRVUZSUXl4SlFVRkpReXhUUVVFMFFrY3NWMEZCVlN4RlFVRlBMRzFFUVVGeFJHaENMR1ZCUVdVc1VVRkRMMGtzU1VGQlNXMU5MRVZCUVRCQ1JpeEZRVUZWUXl4dlFrRkRlRU1zUjBGQk5rSXNaVUZCZWtKMlRDeFJRVUZSUXl4SlFVRkpReXhUUVVFeVFpeERRVU42UXl4SlFVRkpNa1VzUlVGQlowSjVSeXhIUVVGaFFTeEZRVUZWYkVjc1VVRkJWV3RITEVWQlFWVnNSeXhWUVVGWkxHTkJRMnhFTEdWQlFYcENjRVlzVVVGQlVVTXNTVUZCU1VNc1ZVRkJORUpOTEZGQlFXMURMRTFCUVROQ1owd3NSMEZCYlVOR0xFVkJRVlY2U1N4cFFrRkJiVUp3UXl4bFFVRmxSeXh2UWtGQmNVSXNaMGxCUVRKSmVVc3NSVUZCUzNoSExFVkJRV1V4UXl4TFFVRkxhVVFzV1VGRkwxTldMRVZCUVV0TExFOUJRVk16UlN4WlFVRmpjMFVzUlVGQlMwc3NTMEZCVHl4SFFVRkxUQ3hGUVVGTFN5eE5RVU40UkhOSExFZEJRVTlITEVkQlZXUkRMRlZCUVZjc1UwRkJWVW9zVlVGRFVteEtMRXRCUVV0dlNpeHZRa0ZCYjBKNFJ5eExRVU40UW5OSExFbEJVMlJxUnl4UlFVRlRMRmRCUTFBc1NVRkJTUzlETEVWQlFVOUdMRXRCUVV0RExHZENRVUZuUWtNc1MwRkROVUp4U2l4RlFVRmpka29zUzBGQlMxY3NWMEZCWVZnc1MwRkJTMWNzVlVGQlZUUkpMRmxCUTI1RUxFOUJRVTl5U2l4RlFVRkxia0lzWVVGQlpYZExMRWRCUVdWQkxFVkJRVmw0U3l4aFFVRmxiVUlzUlVGQlMyeENMRTFCUVZGMVN5eEhRVUZsUVN4RlFVRlpka3NzVFVGQlVTeE5RVmQyU0c5TExHdENRVUZ0UWl4WFFVTnFRaXhKUVVGSk4wY3NSVUZCVDNaRExFdEJRVXRYTEZWQlEyaENMRTlCUVVsWUxFdEJRVXRWTEdsQ1FVRnRRbkJETEdWQlFXVkhMRzlDUVVOc1F5eExRVVZHT0VRc1IwRkpWSGRETERKQ1FVRTBRaXhOUVVjNVFubEZMRTlCUVU5RExGRkJRVlZzU2lJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDMWtiMjB2YkdsaUwxSmxZV04wUTI5dGNHOXphWFJsUTI5dGNHOXVaVzUwTG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgUmVhY3RET01Db21wb25lbnRUcmVlPXJlcXVpcmUoXCIuL1JlYWN0RE9NQ29tcG9uZW50VHJlZVwiKSxSZWFjdERlZmF1bHRJbmplY3Rpb249cmVxdWlyZShcIi4vUmVhY3REZWZhdWx0SW5qZWN0aW9uXCIpLFJlYWN0TW91bnQ9cmVxdWlyZShcIi4vUmVhY3RNb3VudFwiKSxSZWFjdFJlY29uY2lsZXI9cmVxdWlyZShcIi4vUmVhY3RSZWNvbmNpbGVyXCIpLFJlYWN0VXBkYXRlcz1yZXF1aXJlKFwiLi9SZWFjdFVwZGF0ZXNcIiksUmVhY3RWZXJzaW9uPXJlcXVpcmUoXCIuL1JlYWN0VmVyc2lvblwiKSxmaW5kRE9NTm9kZT1yZXF1aXJlKFwiLi9maW5kRE9NTm9kZVwiKSxnZXRIb3N0Q29tcG9uZW50RnJvbUNvbXBvc2l0ZT1yZXF1aXJlKFwiLi9nZXRIb3N0Q29tcG9uZW50RnJvbUNvbXBvc2l0ZVwiKSxyZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1yZXF1aXJlKFwiLi9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lclwiKSx3YXJuaW5nPXJlcXVpcmUoXCJmYmpzL2xpYi93YXJuaW5nXCIpO1JlYWN0RGVmYXVsdEluamVjdGlvbi5pbmplY3QoKTt2YXIgUmVhY3RET009e2ZpbmRET01Ob2RlOmZpbmRET01Ob2RlLHJlbmRlcjpSZWFjdE1vdW50LnJlbmRlcix1bm1vdW50Q29tcG9uZW50QXROb2RlOlJlYWN0TW91bnQudW5tb3VudENvbXBvbmVudEF0Tm9kZSx2ZXJzaW9uOlJlYWN0VmVyc2lvbix1bnN0YWJsZV9iYXRjaGVkVXBkYXRlczpSZWFjdFVwZGF0ZXMuYmF0Y2hlZFVwZGF0ZXMsdW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6cmVuZGVyU3VidHJlZUludG9Db250YWluZXJ9O2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18mJlwiZnVuY3Rpb25cIj09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5pbmplY3QmJl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5pbmplY3Qoe0NvbXBvbmVudFRyZWU6e2dldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlOlJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSxnZXROb2RlRnJvbUluc3RhbmNlOmZ1bmN0aW9uKGUpe3JldHVybiBlLl9yZW5kZXJlZENvbXBvbmVudCYmKGU9Z2V0SG9zdENvbXBvbmVudEZyb21Db21wb3NpdGUoZSkpLGU/UmVhY3RET01Db21wb25lbnRUcmVlLmdldE5vZGVGcm9tSW5zdGFuY2UoZSk6bnVsbH19LE1vdW50OlJlYWN0TW91bnQsUmVjb25jaWxlcjpSZWFjdFJlY29uY2lsZXJ9KSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXt2YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQ9cmVxdWlyZShcImZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO2lmKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSYmd2luZG93LnRvcD09PXdpbmRvdy5zZWxmKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fJiYobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKFwiQ2hyb21lXCIpPi0xJiYtMT09PW5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihcIkVkZ2VcIil8fG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihcIkZpcmVmb3hcIik+LTEpKXt2YXIgc2hvd0ZpbGVVcmxNZXNzYWdlPS0xPT09d2luZG93LmxvY2F0aW9uLnByb3RvY29sLmluZGV4T2YoXCJodHRwXCIpJiYtMT09PW5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihcIkZpcmVmb3hcIik7Y29uc29sZS5kZWJ1ZyhcIkRvd25sb2FkIHRoZSBSZWFjdCBEZXZUb29scyBcIisoc2hvd0ZpbGVVcmxNZXNzYWdlP1wiYW5kIHVzZSBhbiBIVFRQIHNlcnZlciAoaW5zdGVhZCBvZiBhIGZpbGU6IFVSTCkgXCI6XCJcIikrXCJmb3IgYSBiZXR0ZXIgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZTogaHR0cHM6Ly9mYi5tZS9yZWFjdC1kZXZ0b29sc1wiKX12YXIgdGVzdEZ1bmM9ZnVuY3Rpb24gdGVzdEZuKCl7fTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ3YXJuaW5nKC0xIT09KHRlc3RGdW5jLm5hbWV8fHRlc3RGdW5jLnRvU3RyaW5nKCkpLmluZGV4T2YoXCJ0ZXN0Rm5cIiksXCJJdCBsb29rcyBsaWtlIHlvdSdyZSB1c2luZyBhIG1pbmlmaWVkIGNvcHkgb2YgdGhlIGRldmVsb3BtZW50IGJ1aWxkIG9mIFJlYWN0LiBXaGVuIGRlcGxveWluZyBSZWFjdCBhcHBzIHRvIHByb2R1Y3Rpb24sIG1ha2Ugc3VyZSB0byB1c2UgdGhlIHByb2R1Y3Rpb24gYnVpbGQgd2hpY2ggc2tpcHMgZGV2ZWxvcG1lbnQgd2FybmluZ3MgYW5kIGlzIGZhc3Rlci4gU2VlIGh0dHBzOi8vZmIubWUvcmVhY3QtbWluaWZpY2F0aW9uIGZvciBtb3JlIGRldGFpbHMuXCIpO3ZhciBpZUNvbXBhdGliaWxpdHlNb2RlPWRvY3VtZW50LmRvY3VtZW50TW9kZSYmZG9jdW1lbnQuZG9jdW1lbnRNb2RlPDg7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FybmluZyghaWVDb21wYXRpYmlsaXR5TW9kZSwnSW50ZXJuZXQgRXhwbG9yZXIgaXMgcnVubmluZyBpbiBjb21wYXRpYmlsaXR5IG1vZGU7IHBsZWFzZSBhZGQgdGhlIGZvbGxvd2luZyB0YWcgdG8geW91ciBIVE1MIHRvIHByZXZlbnQgdGhpcyBmcm9tIGhhcHBlbmluZzogPG1ldGEgaHR0cC1lcXVpdj1cIlgtVUEtQ29tcGF0aWJsZVwiIGNvbnRlbnQ9XCJJRT1lZGdlXCIgLz4nKTtmb3IodmFyIGV4cGVjdGVkRmVhdHVyZXM9W0FycmF5LmlzQXJyYXksQXJyYXkucHJvdG90eXBlLmV2ZXJ5LEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLEFycmF5LnByb3RvdHlwZS5pbmRleE9mLEFycmF5LnByb3RvdHlwZS5tYXAsRGF0ZS5ub3csRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQsT2JqZWN0LmtleXMsU3RyaW5nLnByb3RvdHlwZS50cmltXSxpPTA7aTxleHBlY3RlZEZlYXR1cmVzLmxlbmd0aDtpKyspaWYoIWV4cGVjdGVkRmVhdHVyZXNbaV0pe1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcoITEsXCJPbmUgb3IgbW9yZSBFUzUgc2hpbXMgZXhwZWN0ZWQgYnkgUmVhY3QgYXJlIG5vdCBhdmFpbGFibGU6IGh0dHBzOi8vZmIubWUvcmVhY3Qtd2FybmluZy1wb2x5ZmlsbHNcIik7YnJlYWt9fX1pZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXt2YXIgUmVhY3RJbnN0cnVtZW50YXRpb249cmVxdWlyZShcIi4vUmVhY3RJbnN0cnVtZW50YXRpb25cIiksUmVhY3RET01Vbmtub3duUHJvcGVydHlIb29rPXJlcXVpcmUoXCIuL1JlYWN0RE9NVW5rbm93blByb3BlcnR5SG9va1wiKSxSZWFjdERPTU51bGxJbnB1dFZhbHVlUHJvcEhvb2s9cmVxdWlyZShcIi4vUmVhY3RET01OdWxsSW5wdXRWYWx1ZVByb3BIb29rXCIpLFJlYWN0RE9NSW52YWxpZEFSSUFIb29rPXJlcXVpcmUoXCIuL1JlYWN0RE9NSW52YWxpZEFSSUFIb29rXCIpO1JlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5hZGRIb29rKFJlYWN0RE9NVW5rbm93blByb3BlcnR5SG9vayksUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLmFkZEhvb2soUmVhY3RET01OdWxsSW5wdXRWYWx1ZVByb3BIb29rKSxSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wuYWRkSG9vayhSZWFjdERPTUludmFsaWRBUklBSG9vayl9bW9kdWxlLmV4cG9ydHM9UmVhY3RET007XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbEpsWVdOMFJFOU5MbXB6SWwwc0ltNWhiV1Z6SWpwYklsSmxZV04wUkU5TlEyOXRjRzl1Wlc1MFZISmxaU0lzSW5KbGNYVnBjbVVpTENKU1pXRmpkRVJsWm1GMWJIUkpibXBsWTNScGIyNGlMQ0pTWldGamRFMXZkVzUwSWl3aVVtVmhZM1JTWldOdmJtTnBiR1Z5SWl3aVVtVmhZM1JWY0dSaGRHVnpJaXdpVW1WaFkzUldaWEp6YVc5dUlpd2labWx1WkVSUFRVNXZaR1VpTENKblpYUkliM04wUTI5dGNHOXVaVzUwUm5KdmJVTnZiWEJ2YzJsMFpTSXNJbkpsYm1SbGNsTjFZblJ5WldWSmJuUnZRMjl1ZEdGcGJtVnlJaXdpZDJGeWJtbHVaeUlzSW1sdWFtVmpkQ0lzSWxKbFlXTjBSRTlOSWl3aWNtVnVaR1Z5SWl3aWRXNXRiM1Z1ZEVOdmJYQnZibVZ1ZEVGMFRtOWtaU0lzSW5abGNuTnBiMjRpTENKMWJuTjBZV0pzWlY5aVlYUmphR1ZrVlhCa1lYUmxjeUlzSW1KaGRHTm9aV1JWY0dSaGRHVnpJaXdpZFc1emRHRmliR1ZmY21WdVpHVnlVM1ZpZEhKbFpVbHVkRzlEYjI1MFlXbHVaWElpTENKZlgxSkZRVU5VWDBSRlZsUlBUMHhUWDBkTVQwSkJURjlJVDA5TFgxOGlMQ0pEYjIxd2IyNWxiblJVY21WbElpd2laMlYwUTJ4dmMyVnpkRWx1YzNSaGJtTmxSbkp2YlU1dlpHVWlMQ0puWlhST2IyUmxSbkp2YlVsdWMzUmhibU5sSWl3aWFXNXpkQ0lzSWw5eVpXNWtaWEpsWkVOdmJYQnZibVZ1ZENJc0lrMXZkVzUwSWl3aVVtVmpiMjVqYVd4bGNpSXNJbkJ5YjJObGMzTWlMQ0psYm5ZaUxDSk9UMFJGWDBWT1ZpSXNJa1Y0WldOMWRHbHZia1Z1ZG1seWIyNXRaVzUwSWl3aVkyRnVWWE5sUkU5Tklpd2lkMmx1Wkc5M0lpd2lkRzl3SWl3aWMyVnNaaUlzSW01aGRtbG5ZWFJ2Y2lJc0luVnpaWEpCWjJWdWRDSXNJbWx1WkdWNFQyWWlMQ0p6YUc5M1JtbHNaVlZ5YkUxbGMzTmhaMlVpTENKc2IyTmhkR2x2YmlJc0luQnliM1J2WTI5c0lpd2lZMjl1YzI5c1pTSXNJbVJsWW5Wbklpd2lkR1Z6ZEVaMWJtTWlMQ0owWlhOMFJtNGlMQ0p1WVcxbElpd2lkRzlUZEhKcGJtY2lMQ0pwWlVOdmJYQmhkR2xpYVd4cGRIbE5iMlJsSWl3aVpHOWpkVzFsYm5RaUxDSmtiMk4xYldWdWRFMXZaR1VpTENKbGVIQmxZM1JsWkVabFlYUjFjbVZ6SWl3aVFYSnlZWGtpTENKcGMwRnljbUY1SWl3aWNISnZkRzkwZVhCbElpd2laWFpsY25raUxDSm1iM0pGWVdOb0lpd2liV0Z3SWl3aVJHRjBaU0lzSW01dmR5SXNJa1oxYm1OMGFXOXVJaXdpWW1sdVpDSXNJazlpYW1WamRDSXNJbXRsZVhNaUxDSlRkSEpwYm1jaUxDSjBjbWx0SWl3aWFTSXNJbXhsYm1kMGFDSXNJbEpsWVdOMFNXNXpkSEoxYldWdWRHRjBhVzl1SWl3aVVtVmhZM1JFVDAxVmJtdHViM2R1VUhKdmNHVnlkSGxJYjI5cklpd2lVbVZoWTNSRVQwMU9kV3hzU1c1d2RYUldZV3gxWlZCeWIzQkliMjlySWl3aVVtVmhZM1JFVDAxSmJuWmhiR2xrUVZKSlFVaHZiMnNpTENKa1pXSjFaMVJ2YjJ3aUxDSmhaR1JJYjI5cklpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlZVRXNZVUZGUVN4SlFVRkpRU3h6UWtGQmQwSkRMRkZCUVZFc01rSkJRMmhEUXl4elFrRkJkMEpFTEZGQlFWRXNNa0pCUTJoRFJTeFhRVUZoUml4UlFVRlJMR2RDUVVOeVFrY3NaMEpCUVd0Q1NDeFJRVUZSTEhGQ1FVTXhRa2tzWVVGQlpVb3NVVUZCVVN4clFrRkRka0pMTEdGQlFXVk1MRkZCUVZFc2EwSkJSWFpDVFN4WlFVRmpUaXhSUVVGUkxHbENRVU4wUWs4c09FSkJRV2REVUN4UlFVRlJMRzFEUVVONFExRXNNa0pCUVRaQ1VpeFJRVUZSTEdkRFFVTnlRMU1zVVVGQlZWUXNVVUZCVVN4dlFrRkZkRUpETEhOQ1FVRnpRbE1zVTBGRmRFSXNTVUZCU1VNc1UwRkJWeXhEUVVOaVRDeFpRVUZoUVN4WlFVTmlUU3hQUVVGUlZpeFhRVUZYVlN4UFFVTnVRa01zZFVKQlFYZENXQ3hYUVVGWFZ5eDFRa0ZEYmtORExGRkJRVk5VTEdGQlIxUlZMSGRDUVVGNVFsZ3NZVUZCWVZrc1pVRkRkRU5ETEc5RFFVRnhRMVFzTkVKQk1rSjJReXhIUVhKQ09FTXNiMEpCUVc1RFZTeG5RMEZCYlVjc2JVSkJRVEZEUVN3clFrRkJLMEpTTEZGQlEycEhVU3dyUWtGQkswSlNMRTlCUVU4c1EwRkRjRU5UTEdOQlFXVXNRMEZEWWtNc01rSkJRVFJDY2tJc2MwSkJRWE5DY1VJc01rSkJRMnhFUXl4dlFrRkJjVUlzVTBGQlZVTXNSMEZMTjBJc1QwRklTVUVzUlVGQlMwTXNjVUpCUTFCRUxFVkJRVTltTERoQ1FVRTRRbVVzU1VGRmJrTkJMRVZCUTB0MlFpeHpRa0ZCYzBKelFpeHZRa0ZCYjBKRExFZEJSVEZETEU5QlNXSkZMRTFCUVU5MFFpeFhRVU5RZFVJc1YwRkJXWFJDTEd0Q1FVbGhMR1ZCUVhwQ2RVSXNVVUZCVVVNc1NVRkJTVU1zVTBGQk1rSXNRMEZEZWtNc1NVRkJTVU1zY1VKQlFYVkNOMElzVVVGQlVTeHBRMEZEYmtNc1IwRkJTVFpDTEhGQ1FVRnhRa01zVjBGQllVTXNUMEZCVDBNc1RVRkJVVVFzVDBGQlQwVXNTMEZCVFN4RFFVVm9SU3hIUVVFNFF5eHZRa0ZCYmtObUxHbERRVVZNWjBJc1ZVRkJWVU1zVlVGQlZVTXNVVUZCVVN4WFFVRmhMRWxCUVRoRExFbEJRWHBEUml4VlFVRlZReXhWUVVGVlF5eFJRVUZSTEZOQlFXdENSaXhWUVVGVlF5eFZRVUZWUXl4UlFVRlJMRmxCUVdNc1IwRkJSeXhEUVVVelNTeEpRVUZKUXl4dlFrRkJiVVVzU1VGQk9VTk9MRTlCUVU5UExGTkJRVk5ETEZOQlFWTklMRkZCUVZFc1ZVRkJPRVFzU1VGQk5VTkdMRlZCUVZWRExGVkJRVlZETEZGQlFWRXNWMEZEZUVkSkxGRkJRVkZETEUxQlFVMHNaME5CUVd0RFNpeHRRa0ZCY1VJc2JVUkJRWEZFTEVsQlFVMHNjVVZCU1hCSkxFbEJRVWxMTEZOQlFWY3NVMEZCVTBNc1YwRkRReXhsUVVGNlFtcENMRkZCUVZGRExFbEJRVWxETEZWQlFUUkNia0lzVTBGQmMwVXNTMEZCTjBScFF5eFRRVUZUUlN4TlFVRlJSaXhUUVVGVFJ5eFpRVUZaVkN4UlFVRlJMRlZCUVd0Q0xIVlJRVWxxU0N4SlFVRkpWU3h2UWtGQmMwSkRMRk5CUVZORExHTkJRV2RDUkN4VFFVRlRReXhoUVVGbExFVkJSV3hFTEdWQlFYcENkRUlzVVVGQlVVTXNTVUZCU1VNc1ZVRkJORUp1UWl4VFFVRlRjVU1zYjBKQlFYRkNMSGxNUVUxMFJTeEpRVXBCTEVsQlFVbEhMR2xDUVVGdFFpeERRVVYyUWtNc1RVRkJUVU1zVVVGQlUwUXNUVUZCVFVVc1ZVRkJWVU1zVFVGQlQwZ3NUVUZCVFVVc1ZVRkJWVVVzVVVGQlUwb3NUVUZCVFVVc1ZVRkJWV2hDTEZGQlFWTmpMRTFCUVUxRkxGVkJRVlZITEVsQlFVdERMRXRCUVV0RExFbEJRVXRETEZOQlFWTk9MRlZCUVZWUExFdEJRVTFETEU5QlFVOURMRXRCUVUxRExFOUJRVTlXTEZWQlFWVlhMRTFCUlhKTFF5eEZRVUZKTEVWQlFVZEJMRVZCUVVsbUxHbENRVUZwUW1kQ0xFOUJRVkZFTEVsQlF6TkRMRWxCUVV0bUxHbENRVUZwUW1Vc1IwRkJTU3hEUVVORExHVkJRWHBDZEVNc1VVRkJVVU1zU1VGQlNVTXNWVUZCTkVKdVFpeFRRVUZSTEVWQlFVOHNiMGRCUTNaRUxGRkJUVklzUjBGQk5rSXNaVUZCZWtKcFFpeFJRVUZSUXl4SlFVRkpReXhUUVVFeVFpeERRVU42UXl4SlFVRkpjME1zY1VKQlFYVkNiRVVzVVVGQlVTd3dRa0ZETDBKdFJTdzBRa0ZCT0VKdVJTeFJRVUZSTEdsRFFVTjBRMjlGTEN0Q1FVRnBRM0JGTEZGQlFWRXNiME5CUTNwRGNVVXNkMEpCUVRCQ2NrVXNVVUZCVVN3MlFrRkZkRU5yUlN4eFFrRkJjVUpKTEZWQlFWVkRMRkZCUVZGS0xEWkNRVU4yUTBRc2NVSkJRWEZDU1N4VlFVRlZReXhSUVVGUlNDeG5RMEZEZGtOR0xIRkNRVUZ4UWtrc1ZVRkJWVU1zVVVGQlVVWXNlVUpCUjNwRFJ5eFBRVUZQUXl4UlFVRlZPVVFpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdFpHOXRMMnhwWWk5U1pXRmpkRVJQVFM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgX3Byb2RJbnZhcmlhbnQ9cmVxdWlyZShcIi4vcmVhY3RQcm9kSW52YXJpYW50XCIpLF9hc3NpZ249cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksQXV0b0ZvY3VzVXRpbHM9cmVxdWlyZShcIi4vQXV0b0ZvY3VzVXRpbHNcIiksQ1NTUHJvcGVydHlPcGVyYXRpb25zPXJlcXVpcmUoXCIuL0NTU1Byb3BlcnR5T3BlcmF0aW9uc1wiKSxET01MYXp5VHJlZT1yZXF1aXJlKFwiLi9ET01MYXp5VHJlZVwiKSxET01OYW1lc3BhY2VzPXJlcXVpcmUoXCIuL0RPTU5hbWVzcGFjZXNcIiksRE9NUHJvcGVydHk9cmVxdWlyZShcIi4vRE9NUHJvcGVydHlcIiksRE9NUHJvcGVydHlPcGVyYXRpb25zPXJlcXVpcmUoXCIuL0RPTVByb3BlcnR5T3BlcmF0aW9uc1wiKSxFdmVudFBsdWdpbkh1Yj1yZXF1aXJlKFwiLi9FdmVudFBsdWdpbkh1YlwiKSxFdmVudFBsdWdpblJlZ2lzdHJ5PXJlcXVpcmUoXCIuL0V2ZW50UGx1Z2luUmVnaXN0cnlcIiksUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyPXJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlclwiKSxSZWFjdERPTUNvbXBvbmVudEZsYWdzPXJlcXVpcmUoXCIuL1JlYWN0RE9NQ29tcG9uZW50RmxhZ3NcIiksUmVhY3RET01Db21wb25lbnRUcmVlPXJlcXVpcmUoXCIuL1JlYWN0RE9NQ29tcG9uZW50VHJlZVwiKSxSZWFjdERPTUlucHV0PXJlcXVpcmUoXCIuL1JlYWN0RE9NSW5wdXRcIiksUmVhY3RET01PcHRpb249cmVxdWlyZShcIi4vUmVhY3RET01PcHRpb25cIiksUmVhY3RET01TZWxlY3Q9cmVxdWlyZShcIi4vUmVhY3RET01TZWxlY3RcIiksUmVhY3RET01UZXh0YXJlYT1yZXF1aXJlKFwiLi9SZWFjdERPTVRleHRhcmVhXCIpLFJlYWN0SW5zdHJ1bWVudGF0aW9uPXJlcXVpcmUoXCIuL1JlYWN0SW5zdHJ1bWVudGF0aW9uXCIpLFJlYWN0TXVsdGlDaGlsZD1yZXF1aXJlKFwiLi9SZWFjdE11bHRpQ2hpbGRcIiksUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbj1yZXF1aXJlKFwiLi9SZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uXCIpLGVtcHR5RnVuY3Rpb249cmVxdWlyZShcImZianMvbGliL2VtcHR5RnVuY3Rpb25cIiksZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyPXJlcXVpcmUoXCIuL2VzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlclwiKSxpbnZhcmlhbnQ9cmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKSxpc0V2ZW50U3VwcG9ydGVkPXJlcXVpcmUoXCIuL2lzRXZlbnRTdXBwb3J0ZWRcIiksc2hhbGxvd0VxdWFsPXJlcXVpcmUoXCJmYmpzL2xpYi9zaGFsbG93RXF1YWxcIiksaW5wdXRWYWx1ZVRyYWNraW5nPXJlcXVpcmUoXCIuL2lucHV0VmFsdWVUcmFja2luZ1wiKSx2YWxpZGF0ZURPTU5lc3Rpbmc9cmVxdWlyZShcIi4vdmFsaWRhdGVET01OZXN0aW5nXCIpLHdhcm5pbmc9cmVxdWlyZShcImZianMvbGliL3dhcm5pbmdcIiksRmxhZ3M9UmVhY3RET01Db21wb25lbnRGbGFncyxkZWxldGVMaXN0ZW5lcj1FdmVudFBsdWdpbkh1Yi5kZWxldGVMaXN0ZW5lcixnZXROb2RlPVJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlLGxpc3RlblRvPVJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5saXN0ZW5UbyxyZWdpc3RyYXRpb25OYW1lTW9kdWxlcz1FdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLENPTlRFTlRfVFlQRVM9e3N0cmluZzohMCxudW1iZXI6ITB9LFNUWUxFPVwic3R5bGVcIixIVE1MPVwiX19odG1sXCIsUkVTRVJWRURfUFJPUFM9e2NoaWxkcmVuOm51bGwsZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6bnVsbCxzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmc6bnVsbH0sRE9DX0ZSQUdNRU5UX1RZUEU9MTE7ZnVuY3Rpb24gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKGUpe2lmKGUpe3ZhciB0PWUuX2N1cnJlbnRFbGVtZW50Ll9vd25lcnx8bnVsbDtpZih0KXt2YXIgbj10LmdldE5hbWUoKTtpZihuKXJldHVyblwiIFRoaXMgRE9NIG5vZGUgd2FzIHJlbmRlcmVkIGJ5IGBcIituK1wiYC5cIn19cmV0dXJuXCJcIn1mdW5jdGlvbiBmcmllbmRseVN0cmluZ2lmeShlKXtpZihcIm9iamVjdFwiPT10eXBlb2YgZSl7aWYoQXJyYXkuaXNBcnJheShlKSlyZXR1cm5cIltcIitlLm1hcChmcmllbmRseVN0cmluZ2lmeSkuam9pbihcIiwgXCIpK1wiXVwiO3ZhciB0PVtdO2Zvcih2YXIgbiBpbiBlKWlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLG4pKXt2YXIgcj0vXlthLXokX11bXFx3JF9dKiQvaS50ZXN0KG4pP246SlNPTi5zdHJpbmdpZnkobik7dC5wdXNoKHIrXCI6IFwiK2ZyaWVuZGx5U3RyaW5naWZ5KGVbbl0pKX1yZXR1cm5cIntcIit0LmpvaW4oXCIsIFwiKStcIn1cIn1yZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZT9KU09OLnN0cmluZ2lmeShlKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBlP1wiW2Z1bmN0aW9uIG9iamVjdF1cIjpTdHJpbmcoZSl9dmFyIHN0eWxlTXV0YXRpb25XYXJuaW5nPXt9O2Z1bmN0aW9uIGNoZWNrQW5kV2FybkZvck11dGF0ZWRTdHlsZShlLHQsbil7aWYobnVsbCE9ZSYmbnVsbCE9dCYmIXNoYWxsb3dFcXVhbChlLHQpKXt2YXIgcixvPW4uX3RhZyxhPW4uX2N1cnJlbnRFbGVtZW50Ll9vd25lcjthJiYocj1hLmdldE5hbWUoKSk7dmFyIHM9citcInxcIitvO3N0eWxlTXV0YXRpb25XYXJuaW5nLmhhc093blByb3BlcnR5KHMpfHwoc3R5bGVNdXRhdGlvbldhcm5pbmdbc109ITAsXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FybmluZyghMSxcImAlc2Agd2FzIHBhc3NlZCBhIHN0eWxlIG9iamVjdCB0aGF0IGhhcyBwcmV2aW91c2x5IGJlZW4gbXV0YXRlZC4gTXV0YXRpbmcgYHN0eWxlYCBpcyBkZXByZWNhdGVkLiBDb25zaWRlciBjbG9uaW5nIGl0IGJlZm9yZWhhbmQuIENoZWNrIHRoZSBgcmVuZGVyYCAlcy4gUHJldmlvdXMgc3R5bGU6ICVzLiBNdXRhdGVkIHN0eWxlOiAlcy5cIixvLGE/XCJvZiBgXCIrcitcImBcIjpcInVzaW5nIDxcIitvK1wiPlwiLGZyaWVuZGx5U3RyaW5naWZ5KGUpLGZyaWVuZGx5U3RyaW5naWZ5KHQpKSl9fWZ1bmN0aW9uIGFzc2VydFZhbGlkUHJvcHMoZSx0KXt0JiYodm9pZEVsZW1lbnRUYWdzW2UuX3RhZ10mJihudWxsIT10LmNoaWxkcmVufHxudWxsIT10LmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSYmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwiJXMgaXMgYSB2b2lkIGVsZW1lbnQgdGFnIGFuZCBtdXN0IG5laXRoZXIgaGF2ZSBgY2hpbGRyZW5gIG5vciB1c2UgYGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYC4lc1wiLGUuX3RhZyxlLl9jdXJyZW50RWxlbWVudC5fb3duZXI/XCIgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgXCIrZS5fY3VycmVudEVsZW1lbnQuX293bmVyLmdldE5hbWUoKStcIi5cIjpcIlwiKTpfcHJvZEludmFyaWFudChcIjEzN1wiLGUuX3RhZyxlLl9jdXJyZW50RWxlbWVudC5fb3duZXI/XCIgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgXCIrZS5fY3VycmVudEVsZW1lbnQuX293bmVyLmdldE5hbWUoKStcIi5cIjpcIlwiKSksbnVsbCE9dC5kYW5nZXJvdXNseVNldElubmVySFRNTCYmKG51bGwhPXQuY2hpbGRyZW4mJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcIkNhbiBvbmx5IHNldCBvbmUgb2YgYGNoaWxkcmVuYCBvciBgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxgLlwiKTpfcHJvZEludmFyaWFudChcIjYwXCIpKSxcIm9iamVjdFwiPT10eXBlb2YgdC5kYW5nZXJvdXNseVNldElubmVySFRNTCYmSFRNTCBpbiB0LmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MfHwoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoITEsXCJgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxgIG11c3QgYmUgaW4gdGhlIGZvcm0gYHtfX2h0bWw6IC4uLn1gLiBQbGVhc2UgdmlzaXQgaHR0cHM6Ly9mYi5tZS9yZWFjdC1pbnZhcmlhbnQtZGFuZ2Vyb3VzbHktc2V0LWlubmVyLWh0bWwgZm9yIG1vcmUgaW5mb3JtYXRpb24uXCIpOl9wcm9kSW52YXJpYW50KFwiNjFcIikpKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FybmluZyhudWxsPT10LmlubmVySFRNTCxcIkRpcmVjdGx5IHNldHRpbmcgcHJvcGVydHkgYGlubmVySFRNTGAgaXMgbm90IHBlcm1pdHRlZC4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIGxvb2t1cCBkb2N1bWVudGF0aW9uIG9uIGBkYW5nZXJvdXNseVNldElubmVySFRNTGAuXCIpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcodC5zdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmd8fCF0LmNvbnRlbnRFZGl0YWJsZXx8bnVsbD09dC5jaGlsZHJlbixcIkEgY29tcG9uZW50IGlzIGBjb250ZW50RWRpdGFibGVgIGFuZCBjb250YWlucyBgY2hpbGRyZW5gIG1hbmFnZWQgYnkgUmVhY3QuIEl0IGlzIG5vdyB5b3VyIHJlc3BvbnNpYmlsaXR5IHRvIGd1YXJhbnRlZSB0aGF0IG5vbmUgb2YgdGhvc2Ugbm9kZXMgYXJlIHVuZXhwZWN0ZWRseSBtb2RpZmllZCBvciBkdXBsaWNhdGVkLiBUaGlzIGlzIHByb2JhYmx5IG5vdCBpbnRlbnRpb25hbC5cIiksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FybmluZyhudWxsPT10Lm9uRm9jdXNJbiYmbnVsbD09dC5vbkZvY3VzT3V0LFwiUmVhY3QgdXNlcyBvbkZvY3VzIGFuZCBvbkJsdXIgaW5zdGVhZCBvZiBvbkZvY3VzSW4gYW5kIG9uRm9jdXNPdXQuIEFsbCBSZWFjdCBldmVudHMgYXJlIG5vcm1hbGl6ZWQgdG8gYnViYmxlLCBzbyBvbkZvY3VzSW4gYW5kIG9uRm9jdXNPdXQgYXJlIG5vdCBuZWVkZWQvc3VwcG9ydGVkIGJ5IFJlYWN0LlwiKSksbnVsbCE9dC5zdHlsZSYmXCJvYmplY3RcIiE9dHlwZW9mIHQuc3R5bGUmJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcIlRoZSBgc3R5bGVgIHByb3AgZXhwZWN0cyBhIG1hcHBpbmcgZnJvbSBzdHlsZSBwcm9wZXJ0aWVzIHRvIHZhbHVlcywgbm90IGEgc3RyaW5nLiBGb3IgZXhhbXBsZSwgc3R5bGU9e3ttYXJnaW5SaWdodDogc3BhY2luZyArICdlbSd9fSB3aGVuIHVzaW5nIEpTWC4lc1wiLGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bShlKSk6X3Byb2RJbnZhcmlhbnQoXCI2MlwiLGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bShlKSkpKX1mdW5jdGlvbiBlbnF1ZXVlUHV0TGlzdGVuZXIoZSx0LG4scil7aWYoIShyIGluc3RhbmNlb2YgUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbikpe1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJlwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcoXCJvblNjcm9sbFwiIT09dHx8aXNFdmVudFN1cHBvcnRlZChcInNjcm9sbFwiLCEwKSxcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgdGhlIGBvblNjcm9sbGAgZXZlbnRcIik7dmFyIG89ZS5faG9zdENvbnRhaW5lckluZm8sYT1vLl9ub2RlJiZvLl9ub2RlLm5vZGVUeXBlPT09RE9DX0ZSQUdNRU5UX1RZUEU/by5fbm9kZTpvLl9vd25lckRvY3VtZW50O2xpc3RlblRvKHQsYSksci5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKHB1dExpc3RlbmVyLHtpbnN0OmUscmVnaXN0cmF0aW9uTmFtZTp0LGxpc3RlbmVyOm59KX19ZnVuY3Rpb24gcHV0TGlzdGVuZXIoKXtFdmVudFBsdWdpbkh1Yi5wdXRMaXN0ZW5lcih0aGlzLmluc3QsdGhpcy5yZWdpc3RyYXRpb25OYW1lLHRoaXMubGlzdGVuZXIpfWZ1bmN0aW9uIGlucHV0UG9zdE1vdW50KCl7UmVhY3RET01JbnB1dC5wb3N0TW91bnRXcmFwcGVyKHRoaXMpfWZ1bmN0aW9uIHRleHRhcmVhUG9zdE1vdW50KCl7UmVhY3RET01UZXh0YXJlYS5wb3N0TW91bnRXcmFwcGVyKHRoaXMpfWZ1bmN0aW9uIG9wdGlvblBvc3RNb3VudCgpe1JlYWN0RE9NT3B0aW9uLnBvc3RNb3VudFdyYXBwZXIodGhpcyl9dmFyIHNldEFuZFZhbGlkYXRlQ29udGVudENoaWxkRGV2PWVtcHR5RnVuY3Rpb247XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKHNldEFuZFZhbGlkYXRlQ29udGVudENoaWxkRGV2PWZ1bmN0aW9uKGUpe3ZhciB0PW51bGwhPXRoaXMuX2NvbnRlbnREZWJ1Z0lELG49dGhpcy5fZGVidWdJRCxyPS1uO2lmKG51bGw9PWUpcmV0dXJuIHQmJlJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vblVubW91bnRDb21wb25lbnQodGhpcy5fY29udGVudERlYnVnSUQpLHZvaWQodGhpcy5fY29udGVudERlYnVnSUQ9bnVsbCk7dmFsaWRhdGVET01OZXN0aW5nKG51bGwsU3RyaW5nKGUpLHRoaXMsdGhpcy5fYW5jZXN0b3JJbmZvKSx0aGlzLl9jb250ZW50RGVidWdJRD1yLHQ/KFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkJlZm9yZVVwZGF0ZUNvbXBvbmVudChyLGUpLFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vblVwZGF0ZUNvbXBvbmVudChyKSk6KFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkJlZm9yZU1vdW50Q29tcG9uZW50KHIsZSxuKSxSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25Nb3VudENvbXBvbmVudChyKSxSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25TZXRDaGlsZHJlbihuLFtyXSkpfSk7dmFyIG1lZGlhRXZlbnRzPXt0b3BBYm9ydDpcImFib3J0XCIsdG9wQ2FuUGxheTpcImNhbnBsYXlcIix0b3BDYW5QbGF5VGhyb3VnaDpcImNhbnBsYXl0aHJvdWdoXCIsdG9wRHVyYXRpb25DaGFuZ2U6XCJkdXJhdGlvbmNoYW5nZVwiLHRvcEVtcHRpZWQ6XCJlbXB0aWVkXCIsdG9wRW5jcnlwdGVkOlwiZW5jcnlwdGVkXCIsdG9wRW5kZWQ6XCJlbmRlZFwiLHRvcEVycm9yOlwiZXJyb3JcIix0b3BMb2FkZWREYXRhOlwibG9hZGVkZGF0YVwiLHRvcExvYWRlZE1ldGFkYXRhOlwibG9hZGVkbWV0YWRhdGFcIix0b3BMb2FkU3RhcnQ6XCJsb2Fkc3RhcnRcIix0b3BQYXVzZTpcInBhdXNlXCIsdG9wUGxheTpcInBsYXlcIix0b3BQbGF5aW5nOlwicGxheWluZ1wiLHRvcFByb2dyZXNzOlwicHJvZ3Jlc3NcIix0b3BSYXRlQ2hhbmdlOlwicmF0ZWNoYW5nZVwiLHRvcFNlZWtlZDpcInNlZWtlZFwiLHRvcFNlZWtpbmc6XCJzZWVraW5nXCIsdG9wU3RhbGxlZDpcInN0YWxsZWRcIix0b3BTdXNwZW5kOlwic3VzcGVuZFwiLHRvcFRpbWVVcGRhdGU6XCJ0aW1ldXBkYXRlXCIsdG9wVm9sdW1lQ2hhbmdlOlwidm9sdW1lY2hhbmdlXCIsdG9wV2FpdGluZzpcIndhaXRpbmdcIn07ZnVuY3Rpb24gdHJhY2tJbnB1dFZhbHVlKCl7aW5wdXRWYWx1ZVRyYWNraW5nLnRyYWNrKHRoaXMpfWZ1bmN0aW9uIHRyYXBCdWJibGVkRXZlbnRzTG9jYWwoKXt0aGlzLl9yb290Tm9kZUlEfHwoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoITEsXCJNdXN0IGJlIG1vdW50ZWQgdG8gdHJhcCBldmVudHNcIik6X3Byb2RJbnZhcmlhbnQoXCI2M1wiKSk7dmFyIGU9Z2V0Tm9kZSh0aGlzKTtzd2l0Y2goZXx8KFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwidHJhcEJ1YmJsZWRFdmVudCguLi4pOiBSZXF1aXJlcyBub2RlIHRvIGJlIHJlbmRlcmVkLlwiKTpfcHJvZEludmFyaWFudChcIjY0XCIpKSx0aGlzLl90YWcpe2Nhc2VcImlmcmFtZVwiOmNhc2VcIm9iamVjdFwiOnRoaXMuX3dyYXBwZXJTdGF0ZS5saXN0ZW5lcnM9W1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlci50cmFwQnViYmxlZEV2ZW50KFwidG9wTG9hZFwiLFwibG9hZFwiLGUpXTticmVhaztjYXNlXCJ2aWRlb1wiOmNhc2VcImF1ZGlvXCI6Zm9yKHZhciB0IGluIHRoaXMuX3dyYXBwZXJTdGF0ZS5saXN0ZW5lcnM9W10sbWVkaWFFdmVudHMpbWVkaWFFdmVudHMuaGFzT3duUHJvcGVydHkodCkmJnRoaXMuX3dyYXBwZXJTdGF0ZS5saXN0ZW5lcnMucHVzaChSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIudHJhcEJ1YmJsZWRFdmVudCh0LG1lZGlhRXZlbnRzW3RdLGUpKTticmVhaztjYXNlXCJzb3VyY2VcIjp0aGlzLl93cmFwcGVyU3RhdGUubGlzdGVuZXJzPVtSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIudHJhcEJ1YmJsZWRFdmVudChcInRvcEVycm9yXCIsXCJlcnJvclwiLGUpXTticmVhaztjYXNlXCJpbWdcIjp0aGlzLl93cmFwcGVyU3RhdGUubGlzdGVuZXJzPVtSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIudHJhcEJ1YmJsZWRFdmVudChcInRvcEVycm9yXCIsXCJlcnJvclwiLGUpLFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci50cmFwQnViYmxlZEV2ZW50KFwidG9wTG9hZFwiLFwibG9hZFwiLGUpXTticmVhaztjYXNlXCJmb3JtXCI6dGhpcy5fd3JhcHBlclN0YXRlLmxpc3RlbmVycz1bUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnRyYXBCdWJibGVkRXZlbnQoXCJ0b3BSZXNldFwiLFwicmVzZXRcIixlKSxSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIudHJhcEJ1YmJsZWRFdmVudChcInRvcFN1Ym1pdFwiLFwic3VibWl0XCIsZSldO2JyZWFrO2Nhc2VcImlucHV0XCI6Y2FzZVwic2VsZWN0XCI6Y2FzZVwidGV4dGFyZWFcIjp0aGlzLl93cmFwcGVyU3RhdGUubGlzdGVuZXJzPVtSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIudHJhcEJ1YmJsZWRFdmVudChcInRvcEludmFsaWRcIixcImludmFsaWRcIixlKV19fWZ1bmN0aW9uIHBvc3RVcGRhdGVTZWxlY3RXcmFwcGVyKCl7UmVhY3RET01TZWxlY3QucG9zdFVwZGF0ZVdyYXBwZXIodGhpcyl9dmFyIG9taXR0ZWRDbG9zZVRhZ3M9e2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0sbmV3bGluZUVhdGluZ1RhZ3M9e2xpc3Rpbmc6ITAscHJlOiEwLHRleHRhcmVhOiEwfSx2b2lkRWxlbWVudFRhZ3M9X2Fzc2lnbih7bWVudWl0ZW06ITB9LG9taXR0ZWRDbG9zZVRhZ3MpLFZBTElEX1RBR19SRUdFWD0vXlthLXpBLVpdW2EtekEtWjpfXFwuXFwtXFxkXSokLyx2YWxpZGF0ZWRUYWdDYWNoZT17fSxoYXNPd25Qcm9wZXJ0eT17fS5oYXNPd25Qcm9wZXJ0eTtmdW5jdGlvbiB2YWxpZGF0ZURhbmdlcm91c1RhZyhlKXtoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbGlkYXRlZFRhZ0NhY2hlLGUpfHwoVkFMSURfVEFHX1JFR0VYLnRlc3QoZSl8fChcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcIkludmFsaWQgdGFnOiAlc1wiLGUpOl9wcm9kSW52YXJpYW50KFwiNjVcIixlKSksdmFsaWRhdGVkVGFnQ2FjaGVbZV09ITApfWZ1bmN0aW9uIGlzQ3VzdG9tQ29tcG9uZW50KGUsdCl7cmV0dXJuIGUuaW5kZXhPZihcIi1cIik+PTB8fG51bGwhPXQuaXN9dmFyIGdsb2JhbElkQ291bnRlcj0xO2Z1bmN0aW9uIFJlYWN0RE9NQ29tcG9uZW50KGUpe3ZhciB0PWUudHlwZTt2YWxpZGF0ZURhbmdlcm91c1RhZyh0KSx0aGlzLl9jdXJyZW50RWxlbWVudD1lLHRoaXMuX3RhZz10LnRvTG93ZXJDYXNlKCksdGhpcy5fbmFtZXNwYWNlVVJJPW51bGwsdGhpcy5fcmVuZGVyZWRDaGlsZHJlbj1udWxsLHRoaXMuX3ByZXZpb3VzU3R5bGU9bnVsbCx0aGlzLl9wcmV2aW91c1N0eWxlQ29weT1udWxsLHRoaXMuX2hvc3ROb2RlPW51bGwsdGhpcy5faG9zdFBhcmVudD1udWxsLHRoaXMuX3Jvb3ROb2RlSUQ9MCx0aGlzLl9kb21JRD0wLHRoaXMuX2hvc3RDb250YWluZXJJbmZvPW51bGwsdGhpcy5fd3JhcHBlclN0YXRlPW51bGwsdGhpcy5fdG9wTGV2ZWxXcmFwcGVyPW51bGwsdGhpcy5fZmxhZ3M9MCxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYodGhpcy5fYW5jZXN0b3JJbmZvPW51bGwsc2V0QW5kVmFsaWRhdGVDb250ZW50Q2hpbGREZXYuY2FsbCh0aGlzLG51bGwpKX1SZWFjdERPTUNvbXBvbmVudC5kaXNwbGF5TmFtZT1cIlJlYWN0RE9NQ29tcG9uZW50XCIsUmVhY3RET01Db21wb25lbnQuTWl4aW49e21vdW50Q29tcG9uZW50OmZ1bmN0aW9uKGUsdCxuLHIpe3RoaXMuX3Jvb3ROb2RlSUQ9Z2xvYmFsSWRDb3VudGVyKyssdGhpcy5fZG9tSUQ9bi5faWRDb3VudGVyKyssdGhpcy5faG9zdFBhcmVudD10LHRoaXMuX2hvc3RDb250YWluZXJJbmZvPW47dmFyIG8sYSxzLGksdT10aGlzLl9jdXJyZW50RWxlbWVudC5wcm9wcztzd2l0Y2godGhpcy5fdGFnKXtjYXNlXCJhdWRpb1wiOmNhc2VcImZvcm1cIjpjYXNlXCJpZnJhbWVcIjpjYXNlXCJpbWdcIjpjYXNlXCJsaW5rXCI6Y2FzZVwib2JqZWN0XCI6Y2FzZVwic291cmNlXCI6Y2FzZVwidmlkZW9cIjp0aGlzLl93cmFwcGVyU3RhdGU9e2xpc3RlbmVyczpudWxsfSxlLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUodHJhcEJ1YmJsZWRFdmVudHNMb2NhbCx0aGlzKTticmVhaztjYXNlXCJpbnB1dFwiOlJlYWN0RE9NSW5wdXQubW91bnRXcmFwcGVyKHRoaXMsdSx0KSx1PVJlYWN0RE9NSW5wdXQuZ2V0SG9zdFByb3BzKHRoaXMsdSksZS5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKHRyYWNrSW5wdXRWYWx1ZSx0aGlzKSxlLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUodHJhcEJ1YmJsZWRFdmVudHNMb2NhbCx0aGlzKTticmVhaztjYXNlXCJvcHRpb25cIjpSZWFjdERPTU9wdGlvbi5tb3VudFdyYXBwZXIodGhpcyx1LHQpLHU9UmVhY3RET01PcHRpb24uZ2V0SG9zdFByb3BzKHRoaXMsdSk7YnJlYWs7Y2FzZVwic2VsZWN0XCI6UmVhY3RET01TZWxlY3QubW91bnRXcmFwcGVyKHRoaXMsdSx0KSx1PVJlYWN0RE9NU2VsZWN0LmdldEhvc3RQcm9wcyh0aGlzLHUpLGUuZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZSh0cmFwQnViYmxlZEV2ZW50c0xvY2FsLHRoaXMpO2JyZWFrO2Nhc2VcInRleHRhcmVhXCI6UmVhY3RET01UZXh0YXJlYS5tb3VudFdyYXBwZXIodGhpcyx1LHQpLHU9UmVhY3RET01UZXh0YXJlYS5nZXRIb3N0UHJvcHModGhpcyx1KSxlLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUodHJhY2tJbnB1dFZhbHVlLHRoaXMpLGUuZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZSh0cmFwQnViYmxlZEV2ZW50c0xvY2FsLHRoaXMpfShhc3NlcnRWYWxpZFByb3BzKHRoaXMsdSksbnVsbCE9dD8obz10Ll9uYW1lc3BhY2VVUkksYT10Ll90YWcpOm4uX3RhZyYmKG89bi5fbmFtZXNwYWNlVVJJLGE9bi5fdGFnKSwobnVsbD09b3x8bz09PURPTU5hbWVzcGFjZXMuc3ZnJiZcImZvcmVpZ25vYmplY3RcIj09PWEpJiYobz1ET01OYW1lc3BhY2VzLmh0bWwpLG89PT1ET01OYW1lc3BhY2VzLmh0bWwmJihcInN2Z1wiPT09dGhpcy5fdGFnP289RE9NTmFtZXNwYWNlcy5zdmc6XCJtYXRoXCI9PT10aGlzLl90YWcmJihvPURPTU5hbWVzcGFjZXMubWF0aG1sKSksdGhpcy5fbmFtZXNwYWNlVVJJPW8sXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVikmJihudWxsIT10P3M9dC5fYW5jZXN0b3JJbmZvOm4uX3RhZyYmKHM9bi5fYW5jZXN0b3JJbmZvKSxzJiZ2YWxpZGF0ZURPTU5lc3RpbmcodGhpcy5fdGFnLG51bGwsdGhpcyxzKSx0aGlzLl9hbmNlc3RvckluZm89dmFsaWRhdGVET01OZXN0aW5nLnVwZGF0ZWRBbmNlc3RvckluZm8ocyx0aGlzLl90YWcsdGhpcykpO2lmKGUudXNlQ3JlYXRlRWxlbWVudCl7dmFyIGwscD1uLl9vd25lckRvY3VtZW50O2lmKG89PT1ET01OYW1lc3BhY2VzLmh0bWwpaWYoXCJzY3JpcHRcIj09PXRoaXMuX3RhZyl7dmFyIGM9cC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGQ9dGhpcy5fY3VycmVudEVsZW1lbnQudHlwZTtjLmlubmVySFRNTD1cIjxcIitkK1wiPjwvXCIrZCtcIj5cIixsPWMucmVtb3ZlQ2hpbGQoYy5maXJzdENoaWxkKX1lbHNlIGw9dS5pcz9wLmNyZWF0ZUVsZW1lbnQodGhpcy5fY3VycmVudEVsZW1lbnQudHlwZSx1LmlzKTpwLmNyZWF0ZUVsZW1lbnQodGhpcy5fY3VycmVudEVsZW1lbnQudHlwZSk7ZWxzZSBsPXAuY3JlYXRlRWxlbWVudE5TKG8sdGhpcy5fY3VycmVudEVsZW1lbnQudHlwZSk7UmVhY3RET01Db21wb25lbnRUcmVlLnByZWNhY2hlTm9kZSh0aGlzLGwpLHRoaXMuX2ZsYWdzfD1GbGFncy5oYXNDYWNoZWRDaGlsZE5vZGVzLHRoaXMuX2hvc3RQYXJlbnR8fERPTVByb3BlcnR5T3BlcmF0aW9ucy5zZXRBdHRyaWJ1dGVGb3JSb290KGwpLHRoaXMuX3VwZGF0ZURPTVByb3BlcnRpZXMobnVsbCx1LGUpO3ZhciBoPURPTUxhenlUcmVlKGwpO3RoaXMuX2NyZWF0ZUluaXRpYWxDaGlsZHJlbihlLHUscixoKSxpPWh9ZWxzZXt2YXIgZz10aGlzLl9jcmVhdGVPcGVuVGFnTWFya3VwQW5kUHV0TGlzdGVuZXJzKGUsdSksbT10aGlzLl9jcmVhdGVDb250ZW50TWFya3VwKGUsdSxyKTtpPSFtJiZvbWl0dGVkQ2xvc2VUYWdzW3RoaXMuX3RhZ10/ZytcIi8+XCI6ZytcIj5cIittK1wiPC9cIit0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlK1wiPlwifXN3aXRjaCh0aGlzLl90YWcpe2Nhc2VcImlucHV0XCI6ZS5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKGlucHV0UG9zdE1vdW50LHRoaXMpLHUuYXV0b0ZvY3VzJiZlLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUoQXV0b0ZvY3VzVXRpbHMuZm9jdXNET01Db21wb25lbnQsdGhpcyk7YnJlYWs7Y2FzZVwidGV4dGFyZWFcIjplLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUodGV4dGFyZWFQb3N0TW91bnQsdGhpcyksdS5hdXRvRm9jdXMmJmUuZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShBdXRvRm9jdXNVdGlscy5mb2N1c0RPTUNvbXBvbmVudCx0aGlzKTticmVhaztjYXNlXCJzZWxlY3RcIjpjYXNlXCJidXR0b25cIjp1LmF1dG9Gb2N1cyYmZS5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKEF1dG9Gb2N1c1V0aWxzLmZvY3VzRE9NQ29tcG9uZW50LHRoaXMpO2JyZWFrO2Nhc2VcIm9wdGlvblwiOmUuZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShvcHRpb25Qb3N0TW91bnQsdGhpcyl9cmV0dXJuIGl9LF9jcmVhdGVPcGVuVGFnTWFya3VwQW5kUHV0TGlzdGVuZXJzOmZ1bmN0aW9uKGUsdCl7dmFyIG49XCI8XCIrdGhpcy5fY3VycmVudEVsZW1lbnQudHlwZTtmb3IodmFyIHIgaW4gdClpZih0Lmhhc093blByb3BlcnR5KHIpKXt2YXIgbz10W3JdO2lmKG51bGwhPW8paWYocmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMuaGFzT3duUHJvcGVydHkocikpbyYmZW5xdWV1ZVB1dExpc3RlbmVyKHRoaXMscixvLGUpO2Vsc2V7cj09PVNUWUxFJiYobyYmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJih0aGlzLl9wcmV2aW91c1N0eWxlPW8pLG89dGhpcy5fcHJldmlvdXNTdHlsZUNvcHk9X2Fzc2lnbih7fSx0LnN0eWxlKSksbz1DU1NQcm9wZXJ0eU9wZXJhdGlvbnMuY3JlYXRlTWFya3VwRm9yU3R5bGVzKG8sdGhpcykpO3ZhciBhPW51bGw7bnVsbCE9dGhpcy5fdGFnJiZpc0N1c3RvbUNvbXBvbmVudCh0aGlzLl90YWcsdCk/UkVTRVJWRURfUFJPUFMuaGFzT3duUHJvcGVydHkocil8fChhPURPTVByb3BlcnR5T3BlcmF0aW9ucy5jcmVhdGVNYXJrdXBGb3JDdXN0b21BdHRyaWJ1dGUocixvKSk6YT1ET01Qcm9wZXJ0eU9wZXJhdGlvbnMuY3JlYXRlTWFya3VwRm9yUHJvcGVydHkocixvKSxhJiYobis9XCIgXCIrYSl9fXJldHVybiBlLnJlbmRlclRvU3RhdGljTWFya3VwP246KHRoaXMuX2hvc3RQYXJlbnR8fChuKz1cIiBcIitET01Qcm9wZXJ0eU9wZXJhdGlvbnMuY3JlYXRlTWFya3VwRm9yUm9vdCgpKSxuKz1cIiBcIitET01Qcm9wZXJ0eU9wZXJhdGlvbnMuY3JlYXRlTWFya3VwRm9ySUQodGhpcy5fZG9tSUQpKX0sX2NyZWF0ZUNvbnRlbnRNYXJrdXA6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPVwiXCIsbz10LmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MO2lmKG51bGwhPW8pbnVsbCE9by5fX2h0bWwmJihyPW8uX19odG1sKTtlbHNle3ZhciBhPUNPTlRFTlRfVFlQRVNbdHlwZW9mIHQuY2hpbGRyZW5dP3QuY2hpbGRyZW46bnVsbCxzPW51bGwhPWE/bnVsbDp0LmNoaWxkcmVuO2lmKG51bGwhPWEpcj1lc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIoYSksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmc2V0QW5kVmFsaWRhdGVDb250ZW50Q2hpbGREZXYuY2FsbCh0aGlzLGEpO2Vsc2UgaWYobnVsbCE9cyl7cj10aGlzLm1vdW50Q2hpbGRyZW4ocyxlLG4pLmpvaW4oXCJcIil9fXJldHVybiBuZXdsaW5lRWF0aW5nVGFnc1t0aGlzLl90YWddJiZcIlxcblwiPT09ci5jaGFyQXQoMCk/XCJcXG5cIityOnJ9LF9jcmVhdGVJbml0aWFsQ2hpbGRyZW46ZnVuY3Rpb24oZSx0LG4scil7dmFyIG89dC5kYW5nZXJvdXNseVNldElubmVySFRNTDtpZihudWxsIT1vKW51bGwhPW8uX19odG1sJiZET01MYXp5VHJlZS5xdWV1ZUhUTUwocixvLl9faHRtbCk7ZWxzZXt2YXIgYT1DT05URU5UX1RZUEVTW3R5cGVvZiB0LmNoaWxkcmVuXT90LmNoaWxkcmVuOm51bGwscz1udWxsIT1hP251bGw6dC5jaGlsZHJlbjtpZihudWxsIT1hKVwiXCIhPT1hJiYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmc2V0QW5kVmFsaWRhdGVDb250ZW50Q2hpbGREZXYuY2FsbCh0aGlzLGEpLERPTUxhenlUcmVlLnF1ZXVlVGV4dChyLGEpKTtlbHNlIGlmKG51bGwhPXMpZm9yKHZhciBpPXRoaXMubW91bnRDaGlsZHJlbihzLGUsbiksdT0wO3U8aS5sZW5ndGg7dSsrKURPTUxhenlUcmVlLnF1ZXVlQ2hpbGQocixpW3VdKX19LHJlY2VpdmVDb21wb25lbnQ6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXRoaXMuX2N1cnJlbnRFbGVtZW50O3RoaXMuX2N1cnJlbnRFbGVtZW50PWUsdGhpcy51cGRhdGVDb21wb25lbnQodCxyLGUsbil9LHVwZGF0ZUNvbXBvbmVudDpmdW5jdGlvbihlLHQsbixyKXt2YXIgbz10LnByb3BzLGE9dGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHM7c3dpdGNoKHRoaXMuX3RhZyl7Y2FzZVwiaW5wdXRcIjpvPVJlYWN0RE9NSW5wdXQuZ2V0SG9zdFByb3BzKHRoaXMsbyksYT1SZWFjdERPTUlucHV0LmdldEhvc3RQcm9wcyh0aGlzLGEpO2JyZWFrO2Nhc2VcIm9wdGlvblwiOm89UmVhY3RET01PcHRpb24uZ2V0SG9zdFByb3BzKHRoaXMsbyksYT1SZWFjdERPTU9wdGlvbi5nZXRIb3N0UHJvcHModGhpcyxhKTticmVhaztjYXNlXCJzZWxlY3RcIjpvPVJlYWN0RE9NU2VsZWN0LmdldEhvc3RQcm9wcyh0aGlzLG8pLGE9UmVhY3RET01TZWxlY3QuZ2V0SG9zdFByb3BzKHRoaXMsYSk7YnJlYWs7Y2FzZVwidGV4dGFyZWFcIjpvPVJlYWN0RE9NVGV4dGFyZWEuZ2V0SG9zdFByb3BzKHRoaXMsbyksYT1SZWFjdERPTVRleHRhcmVhLmdldEhvc3RQcm9wcyh0aGlzLGEpfXN3aXRjaChhc3NlcnRWYWxpZFByb3BzKHRoaXMsYSksdGhpcy5fdXBkYXRlRE9NUHJvcGVydGllcyhvLGEsZSksdGhpcy5fdXBkYXRlRE9NQ2hpbGRyZW4obyxhLGUsciksdGhpcy5fdGFnKXtjYXNlXCJpbnB1dFwiOlJlYWN0RE9NSW5wdXQudXBkYXRlV3JhcHBlcih0aGlzKSxpbnB1dFZhbHVlVHJhY2tpbmcudXBkYXRlVmFsdWVJZkNoYW5nZWQodGhpcyk7YnJlYWs7Y2FzZVwidGV4dGFyZWFcIjpSZWFjdERPTVRleHRhcmVhLnVwZGF0ZVdyYXBwZXIodGhpcyk7YnJlYWs7Y2FzZVwic2VsZWN0XCI6ZS5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKHBvc3RVcGRhdGVTZWxlY3RXcmFwcGVyLHRoaXMpfX0sX3VwZGF0ZURPTVByb3BlcnRpZXM6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLG8sYTtmb3IociBpbiBlKWlmKCF0Lmhhc093blByb3BlcnR5KHIpJiZlLmhhc093blByb3BlcnR5KHIpJiZudWxsIT1lW3JdKWlmKHI9PT1TVFlMRSl7dmFyIHM9dGhpcy5fcHJldmlvdXNTdHlsZUNvcHk7Zm9yKG8gaW4gcylzLmhhc093blByb3BlcnR5KG8pJiYoKGE9YXx8e30pW29dPVwiXCIpO3RoaXMuX3ByZXZpb3VzU3R5bGVDb3B5PW51bGx9ZWxzZSByZWdpc3RyYXRpb25OYW1lTW9kdWxlcy5oYXNPd25Qcm9wZXJ0eShyKT9lW3JdJiZkZWxldGVMaXN0ZW5lcih0aGlzLHIpOmlzQ3VzdG9tQ29tcG9uZW50KHRoaXMuX3RhZyxlKT9SRVNFUlZFRF9QUk9QUy5oYXNPd25Qcm9wZXJ0eShyKXx8RE9NUHJvcGVydHlPcGVyYXRpb25zLmRlbGV0ZVZhbHVlRm9yQXR0cmlidXRlKGdldE5vZGUodGhpcykscik6KERPTVByb3BlcnR5LnByb3BlcnRpZXNbcl18fERPTVByb3BlcnR5LmlzQ3VzdG9tQXR0cmlidXRlKHIpKSYmRE9NUHJvcGVydHlPcGVyYXRpb25zLmRlbGV0ZVZhbHVlRm9yUHJvcGVydHkoZ2V0Tm9kZSh0aGlzKSxyKTtmb3IociBpbiB0KXt2YXIgaT10W3JdLHU9cj09PVNUWUxFP3RoaXMuX3ByZXZpb3VzU3R5bGVDb3B5Om51bGwhPWU/ZVtyXTp2b2lkIDA7aWYodC5oYXNPd25Qcm9wZXJ0eShyKSYmaSE9PXUmJihudWxsIT1pfHxudWxsIT11KSlpZihyPT09U1RZTEUpaWYoaT8oXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKGNoZWNrQW5kV2FybkZvck11dGF0ZWRTdHlsZSh0aGlzLl9wcmV2aW91c1N0eWxlQ29weSx0aGlzLl9wcmV2aW91c1N0eWxlLHRoaXMpLHRoaXMuX3ByZXZpb3VzU3R5bGU9aSksaT10aGlzLl9wcmV2aW91c1N0eWxlQ29weT1fYXNzaWduKHt9LGkpKTp0aGlzLl9wcmV2aW91c1N0eWxlQ29weT1udWxsLHUpe2ZvcihvIGluIHUpIXUuaGFzT3duUHJvcGVydHkobyl8fGkmJmkuaGFzT3duUHJvcGVydHkobyl8fCgoYT1hfHx7fSlbb109XCJcIik7Zm9yKG8gaW4gaSlpLmhhc093blByb3BlcnR5KG8pJiZ1W29dIT09aVtvXSYmKChhPWF8fHt9KVtvXT1pW29dKX1lbHNlIGE9aTtlbHNlIGlmKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHIpKWk/ZW5xdWV1ZVB1dExpc3RlbmVyKHRoaXMscixpLG4pOnUmJmRlbGV0ZUxpc3RlbmVyKHRoaXMscik7ZWxzZSBpZihpc0N1c3RvbUNvbXBvbmVudCh0aGlzLl90YWcsdCkpUkVTRVJWRURfUFJPUFMuaGFzT3duUHJvcGVydHkocil8fERPTVByb3BlcnR5T3BlcmF0aW9ucy5zZXRWYWx1ZUZvckF0dHJpYnV0ZShnZXROb2RlKHRoaXMpLHIsaSk7ZWxzZSBpZihET01Qcm9wZXJ0eS5wcm9wZXJ0aWVzW3JdfHxET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShyKSl7dmFyIGw9Z2V0Tm9kZSh0aGlzKTtudWxsIT1pP0RPTVByb3BlcnR5T3BlcmF0aW9ucy5zZXRWYWx1ZUZvclByb3BlcnR5KGwscixpKTpET01Qcm9wZXJ0eU9wZXJhdGlvbnMuZGVsZXRlVmFsdWVGb3JQcm9wZXJ0eShsLHIpfX1hJiZDU1NQcm9wZXJ0eU9wZXJhdGlvbnMuc2V0VmFsdWVGb3JTdHlsZXMoZ2V0Tm9kZSh0aGlzKSxhLHRoaXMpfSxfdXBkYXRlRE9NQ2hpbGRyZW46ZnVuY3Rpb24oZSx0LG4scil7dmFyIG89Q09OVEVOVF9UWVBFU1t0eXBlb2YgZS5jaGlsZHJlbl0/ZS5jaGlsZHJlbjpudWxsLGE9Q09OVEVOVF9UWVBFU1t0eXBlb2YgdC5jaGlsZHJlbl0/dC5jaGlsZHJlbjpudWxsLHM9ZS5kYW5nZXJvdXNseVNldElubmVySFRNTCYmZS5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWwsaT10LmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZ0LmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbCx1PW51bGwhPW8/bnVsbDplLmNoaWxkcmVuLGw9bnVsbCE9YT9udWxsOnQuY2hpbGRyZW4scD1udWxsIT1vfHxudWxsIT1zLGM9bnVsbCE9YXx8bnVsbCE9aTtudWxsIT11JiZudWxsPT1sP3RoaXMudXBkYXRlQ2hpbGRyZW4obnVsbCxuLHIpOnAmJiFjJiYodGhpcy51cGRhdGVUZXh0Q29udGVudChcIlwiKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25TZXRDaGlsZHJlbih0aGlzLl9kZWJ1Z0lELFtdKSksbnVsbCE9YT9vIT09YSYmKHRoaXMudXBkYXRlVGV4dENvbnRlbnQoXCJcIithKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZzZXRBbmRWYWxpZGF0ZUNvbnRlbnRDaGlsZERldi5jYWxsKHRoaXMsYSkpOm51bGwhPWk/KHMhPT1pJiZ0aGlzLnVwZGF0ZU1hcmt1cChcIlwiK2kpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJlJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vblNldENoaWxkcmVuKHRoaXMuX2RlYnVnSUQsW10pKTpudWxsIT1sJiYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmc2V0QW5kVmFsaWRhdGVDb250ZW50Q2hpbGREZXYuY2FsbCh0aGlzLG51bGwpLHRoaXMudXBkYXRlQ2hpbGRyZW4obCxuLHIpKX0sZ2V0SG9zdE5vZGU6ZnVuY3Rpb24oKXtyZXR1cm4gZ2V0Tm9kZSh0aGlzKX0sdW5tb3VudENvbXBvbmVudDpmdW5jdGlvbihlKXtzd2l0Y2godGhpcy5fdGFnKXtjYXNlXCJhdWRpb1wiOmNhc2VcImZvcm1cIjpjYXNlXCJpZnJhbWVcIjpjYXNlXCJpbWdcIjpjYXNlXCJsaW5rXCI6Y2FzZVwib2JqZWN0XCI6Y2FzZVwic291cmNlXCI6Y2FzZVwidmlkZW9cIjp2YXIgdD10aGlzLl93cmFwcGVyU3RhdGUubGlzdGVuZXJzO2lmKHQpZm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspdFtuXS5yZW1vdmUoKTticmVhaztjYXNlXCJpbnB1dFwiOmNhc2VcInRleHRhcmVhXCI6aW5wdXRWYWx1ZVRyYWNraW5nLnN0b3BUcmFja2luZyh0aGlzKTticmVhaztjYXNlXCJodG1sXCI6Y2FzZVwiaGVhZFwiOmNhc2VcImJvZHlcIjpcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcIjwlcz4gdHJpZWQgdG8gdW5tb3VudC4gQmVjYXVzZSBvZiBjcm9zcy1icm93c2VyIHF1aXJrcyBpdCBpcyBpbXBvc3NpYmxlIHRvIHVubW91bnQgc29tZSB0b3AtbGV2ZWwgY29tcG9uZW50cyAoZWcgPGh0bWw+LCA8aGVhZD4sIGFuZCA8Ym9keT4pIHJlbGlhYmx5IGFuZCBlZmZpY2llbnRseS4gVG8gZml4IHRoaXMsIGhhdmUgYSBzaW5nbGUgdG9wLWxldmVsIGNvbXBvbmVudCB0aGF0IG5ldmVyIHVubW91bnRzIHJlbmRlciB0aGVzZSBlbGVtZW50cy5cIix0aGlzLl90YWcpOl9wcm9kSW52YXJpYW50KFwiNjZcIix0aGlzLl90YWcpfXRoaXMudW5tb3VudENoaWxkcmVuKGUpLFJlYWN0RE9NQ29tcG9uZW50VHJlZS51bmNhY2hlTm9kZSh0aGlzKSxFdmVudFBsdWdpbkh1Yi5kZWxldGVBbGxMaXN0ZW5lcnModGhpcyksdGhpcy5fcm9vdE5vZGVJRD0wLHRoaXMuX2RvbUlEPTAsdGhpcy5fd3JhcHBlclN0YXRlPW51bGwsXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmc2V0QW5kVmFsaWRhdGVDb250ZW50Q2hpbGREZXYuY2FsbCh0aGlzLG51bGwpfSxnZXRQdWJsaWNJbnN0YW5jZTpmdW5jdGlvbigpe3JldHVybiBnZXROb2RlKHRoaXMpfX0sX2Fzc2lnbihSZWFjdERPTUNvbXBvbmVudC5wcm90b3R5cGUsUmVhY3RET01Db21wb25lbnQuTWl4aW4sUmVhY3RNdWx0aUNoaWxkLk1peGluKSxtb2R1bGUuZXhwb3J0cz1SZWFjdERPTUNvbXBvbmVudDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSmxZV04wUkU5TlEyOXRjRzl1Wlc1MExtcHpJbDBzSW01aGJXVnpJanBiSWw5d2NtOWtTVzUyWVhKcFlXNTBJaXdpY21WeGRXbHlaU0lzSWw5aGMzTnBaMjRpTENKQmRYUnZSbTlqZFhOVmRHbHNjeUlzSWtOVFUxQnliM0JsY25SNVQzQmxjbUYwYVc5dWN5SXNJa1JQVFV4aGVubFVjbVZsSWl3aVJFOU5UbUZ0WlhOd1lXTmxjeUlzSWtSUFRWQnliM0JsY25SNUlpd2lSRTlOVUhKdmNHVnlkSGxQY0dWeVlYUnBiMjV6SWl3aVJYWmxiblJRYkhWbmFXNUlkV0lpTENKRmRtVnVkRkJzZFdkcGJsSmxaMmx6ZEhKNUlpd2lVbVZoWTNSQ2NtOTNjMlZ5UlhabGJuUkZiV2wwZEdWeUlpd2lVbVZoWTNSRVQwMURiMjF3YjI1bGJuUkdiR0ZuY3lJc0lsSmxZV04wUkU5TlEyOXRjRzl1Wlc1MFZISmxaU0lzSWxKbFlXTjBSRTlOU1c1d2RYUWlMQ0pTWldGamRFUlBUVTl3ZEdsdmJpSXNJbEpsWVdOMFJFOU5VMlZzWldOMElpd2lVbVZoWTNSRVQwMVVaWGgwWVhKbFlTSXNJbEpsWVdOMFNXNXpkSEoxYldWdWRHRjBhVzl1SWl3aVVtVmhZM1JOZFd4MGFVTm9hV3hrSWl3aVVtVmhZM1JUWlhKMlpYSlNaVzVrWlhKcGJtZFVjbUZ1YzJGamRHbHZiaUlzSW1WdGNIUjVSblZ1WTNScGIyNGlMQ0psYzJOaGNHVlVaWGgwUTI5dWRHVnVkRVp2Y2tKeWIzZHpaWElpTENKcGJuWmhjbWxoYm5RaUxDSnBjMFYyWlc1MFUzVndjRzl5ZEdWa0lpd2ljMmhoYkd4dmQwVnhkV0ZzSWl3aWFXNXdkWFJXWVd4MVpWUnlZV05yYVc1bklpd2lkbUZzYVdSaGRHVkVUMDFPWlhOMGFXNW5JaXdpZDJGeWJtbHVaeUlzSWtac1lXZHpJaXdpWkdWc1pYUmxUR2x6ZEdWdVpYSWlMQ0puWlhST2IyUmxJaXdpWjJWMFRtOWtaVVp5YjIxSmJuTjBZVzVqWlNJc0lteHBjM1JsYmxSdklpd2ljbVZuYVhOMGNtRjBhVzl1VG1GdFpVMXZaSFZzWlhNaUxDSkRUMDVVUlU1VVgxUlpVRVZUSWl3aWMzUnlhVzVuSWl3aWJuVnRZbVZ5SWl3aVUxUlpURVVpTENKSVZFMU1JaXdpVWtWVFJWSldSVVJmVUZKUFVGTWlMQ0pqYUdsc1pISmxiaUlzSW1SaGJtZGxjbTkxYzJ4NVUyVjBTVzV1WlhKSVZFMU1JaXdpYzNWd2NISmxjM05EYjI1MFpXNTBSV1JwZEdGaWJHVlhZWEp1YVc1bklpd2lSRTlEWDBaU1FVZE5SVTVVWDFSWlVFVWlMQ0puWlhSRVpXTnNZWEpoZEdsdmJrVnljbTl5UVdSa1pXNWtkVzBpTENKcGJuUmxjbTVoYkVsdWMzUmhibU5sSWl3aWIzZHVaWElpTENKZlkzVnljbVZ1ZEVWc1pXMWxiblFpTENKZmIzZHVaWElpTENKdVlXMWxJaXdpWjJWMFRtRnRaU0lzSW1aeWFXVnVaR3g1VTNSeWFXNW5hV1o1SWl3aWIySnFJaXdpUVhKeVlYa2lMQ0pwYzBGeWNtRjVJaXdpYldGd0lpd2lhbTlwYmlJc0luQmhhWEp6SWl3aWEyVjVJaXdpVDJKcVpXTjBJaXdpY0hKdmRHOTBlWEJsSWl3aWFHRnpUM2R1VUhKdmNHVnlkSGtpTENKallXeHNJaXdpYTJWNVJYTmpZWEJsWkNJc0luUmxjM1FpTENKS1UwOU9JaXdpYzNSeWFXNW5hV1o1SWl3aWNIVnphQ0lzSWxOMGNtbHVaeUlzSW5OMGVXeGxUWFYwWVhScGIyNVhZWEp1YVc1bklpd2lZMmhsWTJ0QmJtUlhZWEp1Um05eVRYVjBZWFJsWkZOMGVXeGxJaXdpYzNSNWJHVXhJaXdpYzNSNWJHVXlJaXdpWTI5dGNHOXVaVzUwSWl3aWIzZHVaWEpPWVcxbElpd2lZMjl0Y0c5dVpXNTBUbUZ0WlNJc0lsOTBZV2NpTENKb1lYTm9JaXdpY0hKdlkyVnpjeUlzSW1WdWRpSXNJazVQUkVWZlJVNVdJaXdpWVhOelpYSjBWbUZzYVdSUWNtOXdjeUlzSW5CeWIzQnpJaXdpZG05cFpFVnNaVzFsYm5SVVlXZHpJaXdpYVc1dVpYSklWRTFNSWl3aVkyOXVkR1Z1ZEVWa2FYUmhZbXhsSWl3aWIyNUdiMk4xYzBsdUlpd2liMjVHYjJOMWMwOTFkQ0lzSW5OMGVXeGxJaXdpWlc1eGRXVjFaVkIxZEV4cGMzUmxibVZ5SWl3aWFXNXpkQ0lzSW5KbFoybHpkSEpoZEdsdmJrNWhiV1VpTENKc2FYTjBaVzVsY2lJc0luUnlZVzV6WVdOMGFXOXVJaXdpWTI5dWRHRnBibVZ5U1c1bWJ5SXNJbDlvYjNOMFEyOXVkR0ZwYm1WeVNXNW1ieUlzSW1Sdll5SXNJbDl1YjJSbElpd2libTlrWlZSNWNHVWlMQ0pmYjNkdVpYSkViMk4xYldWdWRDSXNJbWRsZEZKbFlXTjBUVzkxYm5SU1pXRmtlU0lzSW1WdWNYVmxkV1VpTENKd2RYUk1hWE4wWlc1bGNpSXNJblJvYVhNaUxDSnBibkIxZEZCdmMzUk5iM1Z1ZENJc0luQnZjM1JOYjNWdWRGZHlZWEJ3WlhJaUxDSjBaWGgwWVhKbFlWQnZjM1JOYjNWdWRDSXNJbTl3ZEdsdmJsQnZjM1JOYjNWdWRDSXNJbk5sZEVGdVpGWmhiR2xrWVhSbFEyOXVkR1Z1ZEVOb2FXeGtSR1YySWl3aVkyOXVkR1Z1ZENJc0ltaGhjMFY0YVhOMGFXNW5RMjl1ZEdWdWRDSXNJbDlqYjI1MFpXNTBSR1ZpZFdkSlJDSXNJbVJsWW5WblNVUWlMQ0pmWkdWaWRXZEpSQ0lzSW1OdmJuUmxiblJFWldKMVowbEVJaXdpWkdWaWRXZFViMjlzSWl3aWIyNVZibTF2ZFc1MFEyOXRjRzl1Wlc1MElpd2lYMkZ1WTJWemRHOXlTVzVtYnlJc0ltOXVRbVZtYjNKbFZYQmtZWFJsUTI5dGNHOXVaVzUwSWl3aWIyNVZjR1JoZEdWRGIyMXdiMjVsYm5RaUxDSnZia0psWm05eVpVMXZkVzUwUTI5dGNHOXVaVzUwSWl3aWIyNU5iM1Z1ZEVOdmJYQnZibVZ1ZENJc0ltOXVVMlYwUTJocGJHUnlaVzRpTENKdFpXUnBZVVYyWlc1MGN5SXNJblJ2Y0VGaWIzSjBJaXdpZEc5d1EyRnVVR3hoZVNJc0luUnZjRU5oYmxCc1lYbFVhSEp2ZFdkb0lpd2lkRzl3UkhWeVlYUnBiMjVEYUdGdVoyVWlMQ0owYjNCRmJYQjBhV1ZrSWl3aWRHOXdSVzVqY25sd2RHVmtJaXdpZEc5d1JXNWtaV1FpTENKMGIzQkZjbkp2Y2lJc0luUnZjRXh2WVdSbFpFUmhkR0VpTENKMGIzQk1iMkZrWldSTlpYUmhaR0YwWVNJc0luUnZjRXh2WVdSVGRHRnlkQ0lzSW5SdmNGQmhkWE5sSWl3aWRHOXdVR3hoZVNJc0luUnZjRkJzWVhscGJtY2lMQ0owYjNCUWNtOW5jbVZ6Y3lJc0luUnZjRkpoZEdWRGFHRnVaMlVpTENKMGIzQlRaV1ZyWldRaUxDSjBiM0JUWldWcmFXNW5JaXdpZEc5d1UzUmhiR3hsWkNJc0luUnZjRk4xYzNCbGJtUWlMQ0owYjNCVWFXMWxWWEJrWVhSbElpd2lkRzl3Vm05c2RXMWxRMmhoYm1kbElpd2lkRzl3VjJGcGRHbHVaeUlzSW5SeVlXTnJTVzV3ZFhSV1lXeDFaU0lzSW5SeVlXTnJJaXdpZEhKaGNFSjFZbUpzWldSRmRtVnVkSE5NYjJOaGJDSXNJbDl5YjI5MFRtOWtaVWxFSWl3aWJtOWtaU0lzSWw5M2NtRndjR1Z5VTNSaGRHVWlMQ0pzYVhOMFpXNWxjbk1pTENKMGNtRndRblZpWW14bFpFVjJaVzUwSWl3aVpYWmxiblFpTENKd2IzTjBWWEJrWVhSbFUyVnNaV04wVjNKaGNIQmxjaUlzSW5CdmMzUlZjR1JoZEdWWGNtRndjR1Z5SWl3aWIyMXBkSFJsWkVOc2IzTmxWR0ZuY3lJc0ltRnlaV0VpTENKaVlYTmxJaXdpWW5JaUxDSmpiMndpTENKbGJXSmxaQ0lzSW1oeUlpd2lhVzFuSWl3aWFXNXdkWFFpTENKclpYbG5aVzRpTENKc2FXNXJJaXdpYldWMFlTSXNJbkJoY21GdElpd2ljMjkxY21ObElpd2lkMkp5SWl3aWJtVjNiR2x1WlVWaGRHbHVaMVJoWjNNaUxDSnNhWE4wYVc1bklpd2ljSEpsSWl3aWRHVjRkR0Z5WldFaUxDSnRaVzUxYVhSbGJTSXNJbFpCVEVsRVgxUkJSMTlTUlVkRldDSXNJblpoYkdsa1lYUmxaRlJoWjBOaFkyaGxJaXdpZG1Gc2FXUmhkR1ZFWVc1blpYSnZkWE5VWVdjaUxDSjBZV2NpTENKcGMwTjFjM1J2YlVOdmJYQnZibVZ1ZENJc0luUmhaMDVoYldVaUxDSnBibVJsZUU5bUlpd2lhWE1pTENKbmJHOWlZV3hKWkVOdmRXNTBaWElpTENKU1pXRmpkRVJQVFVOdmJYQnZibVZ1ZENJc0ltVnNaVzFsYm5RaUxDSjBlWEJsSWl3aWRHOU1iM2RsY2tOaGMyVWlMQ0pmYm1GdFpYTndZV05sVlZKSklpd2lYM0psYm1SbGNtVmtRMmhwYkdSeVpXNGlMQ0pmY0hKbGRtbHZkWE5UZEhsc1pTSXNJbDl3Y21WMmFXOTFjMU4wZVd4bFEyOXdlU0lzSWw5b2IzTjBUbTlrWlNJc0lsOW9iM04wVUdGeVpXNTBJaXdpWDJSdmJVbEVJaXdpWDNSdmNFeGxkbVZzVjNKaGNIQmxjaUlzSWw5bWJHRm5jeUlzSW1ScGMzQnNZWGxPWVcxbElpd2lUV2w0YVc0aUxDSnRiM1Z1ZEVOdmJYQnZibVZ1ZENJc0ltaHZjM1JRWVhKbGJuUWlMQ0pvYjNOMFEyOXVkR0ZwYm1WeVNXNW1ieUlzSW1OdmJuUmxlSFFpTENKZmFXUkRiM1Z1ZEdWeUlpd2libUZ0WlhOd1lXTmxWVkpKSWl3aWNHRnlaVzUwVkdGbklpd2ljR0Z5Wlc1MFNXNW1ieUlzSW0xdmRXNTBTVzFoWjJVaUxDSnRiM1Z1ZEZkeVlYQndaWElpTENKblpYUkliM04wVUhKdmNITWlMQ0p6ZG1jaUxDSm9kRzFzSWl3aWJXRjBhRzFzSWl3aWRYQmtZWFJsWkVGdVkyVnpkRzl5U1c1bWJ5SXNJblZ6WlVOeVpXRjBaVVZzWlcxbGJuUWlMQ0psYkNJc0ltOTNibVZ5Ukc5amRXMWxiblFpTENKa2FYWWlMQ0pqY21WaGRHVkZiR1Z0Wlc1MElpd2ljbVZ0YjNabFEyaHBiR1FpTENKbWFYSnpkRU5vYVd4a0lpd2lZM0psWVhSbFJXeGxiV1Z1ZEU1VElpd2ljSEpsWTJGamFHVk9iMlJsSWl3aWFHRnpRMkZqYUdWa1EyaHBiR1JPYjJSbGN5SXNJbk5sZEVGMGRISnBZblYwWlVadmNsSnZiM1FpTENKZmRYQmtZWFJsUkU5TlVISnZjR1Z5ZEdsbGN5SXNJbXhoZW5sVWNtVmxJaXdpWDJOeVpXRjBaVWx1YVhScFlXeERhR2xzWkhKbGJpSXNJblJoWjA5d1pXNGlMQ0pmWTNKbFlYUmxUM0JsYmxSaFowMWhjbXQxY0VGdVpGQjFkRXhwYzNSbGJtVnljeUlzSW5SaFowTnZiblJsYm5RaUxDSmZZM0psWVhSbFEyOXVkR1Z1ZEUxaGNtdDFjQ0lzSW1GMWRHOUdiMk4xY3lJc0ltWnZZM1Z6UkU5TlEyOXRjRzl1Wlc1MElpd2ljbVYwSWl3aWNISnZjRXRsZVNJc0luQnliM0JXWVd4MVpTSXNJbU55WldGMFpVMWhjbXQxY0VadmNsTjBlV3hsY3lJc0ltMWhjbXQxY0NJc0ltTnlaV0YwWlUxaGNtdDFjRVp2Y2tOMWMzUnZiVUYwZEhKcFluVjBaU0lzSW1OeVpXRjBaVTFoY210MWNFWnZjbEJ5YjNCbGNuUjVJaXdpY21WdVpHVnlWRzlUZEdGMGFXTk5ZWEpyZFhBaUxDSmpjbVZoZEdWTllYSnJkWEJHYjNKU2IyOTBJaXdpWTNKbFlYUmxUV0Z5YTNWd1JtOXlTVVFpTENKZlgyaDBiV3dpTENKamIyNTBaVzUwVkc5VmMyVWlMQ0pqYUdsc1pISmxibFJ2VlhObElpd2liVzkxYm5SRGFHbHNaSEpsYmlJc0ltTm9ZWEpCZENJc0luRjFaWFZsU0ZSTlRDSXNJbkYxWlhWbFZHVjRkQ0lzSW0xdmRXNTBTVzFoWjJWeklpd2lhU0lzSW14bGJtZDBhQ0lzSW5GMVpYVmxRMmhwYkdRaUxDSnlaV05sYVhabFEyOXRjRzl1Wlc1MElpd2libVY0ZEVWc1pXMWxiblFpTENKd2NtVjJSV3hsYldWdWRDSXNJblZ3WkdGMFpVTnZiWEJ2Ym1WdWRDSXNJbXhoYzNSUWNtOXdjeUlzSW01bGVIUlFjbTl3Y3lJc0lsOTFjR1JoZEdWRVQwMURhR2xzWkhKbGJpSXNJblZ3WkdGMFpWZHlZWEJ3WlhJaUxDSjFjR1JoZEdWV1lXeDFaVWxtUTJoaGJtZGxaQ0lzSW5OMGVXeGxUbUZ0WlNJc0luTjBlV3hsVlhCa1lYUmxjeUlzSW14aGMzUlRkSGxzWlNJc0ltUmxiR1YwWlZaaGJIVmxSbTl5UVhSMGNtbGlkWFJsSWl3aWNISnZjR1Z5ZEdsbGN5SXNJbWx6UTNWemRHOXRRWFIwY21saWRYUmxJaXdpWkdWc1pYUmxWbUZzZFdWR2IzSlFjbTl3WlhKMGVTSXNJbTVsZUhSUWNtOXdJaXdpYkdGemRGQnliM0FpTENKMWJtUmxabWx1WldRaUxDSnpaWFJXWVd4MVpVWnZja0YwZEhKcFluVjBaU0lzSW5ObGRGWmhiSFZsUm05eVVISnZjR1Z5ZEhraUxDSnpaWFJXWVd4MVpVWnZjbE4wZVd4bGN5SXNJbXhoYzNSRGIyNTBaVzUwSWl3aWJtVjRkRU52Ym5SbGJuUWlMQ0pzWVhOMFNIUnRiQ0lzSW01bGVIUklkRzFzSWl3aWJHRnpkRU5vYVd4a2NtVnVJaXdpYm1WNGRFTm9hV3hrY21WdUlpd2liR0Z6ZEVoaGMwTnZiblJsYm5SUGNraDBiV3dpTENKdVpYaDBTR0Z6UTI5dWRHVnVkRTl5U0hSdGJDSXNJblZ3WkdGMFpVTm9hV3hrY21WdUlpd2lkWEJrWVhSbFZHVjRkRU52Ym5SbGJuUWlMQ0oxY0dSaGRHVk5ZWEpyZFhBaUxDSm5aWFJJYjNOMFRtOWtaU0lzSW5WdWJXOTFiblJEYjIxd2IyNWxiblFpTENKellXWmxiSGtpTENKeVpXMXZkbVVpTENKemRHOXdWSEpoWTJ0cGJtY2lMQ0oxYm0xdmRXNTBRMmhwYkdSeVpXNGlMQ0oxYm1OaFkyaGxUbTlrWlNJc0ltUmxiR1YwWlVGc2JFeHBjM1JsYm1WeWN5SXNJbWRsZEZCMVlteHBZMGx1YzNSaGJtTmxJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJWVUVzWVVGRlFTeEpRVUZKUVN4bFFVRnBRa01zVVVGQlVTeDNRa0ZEZWtKRExGRkJRVlZFTEZGQlFWRXNhVUpCUld4Q1JTeGxRVUZwUWtZc1VVRkJVU3h2UWtGRGVrSkhMSE5DUVVGM1FrZ3NVVUZCVVN3eVFrRkRhRU5KTEZsQlFXTktMRkZCUVZFc2FVSkJRM1JDU3l4alFVRm5Ra3dzVVVGQlVTeHRRa0ZEZUVKTkxGbEJRV05PTEZGQlFWRXNhVUpCUTNSQ1R5eHpRa0ZCZDBKUUxGRkJRVkVzTWtKQlEyaERVU3hsUVVGcFFsSXNVVUZCVVN4dlFrRkRla0pUTEc5Q1FVRnpRbFFzVVVGQlVTeDVRa0ZET1VKVkxIbENRVUV5UWxZc1VVRkJVU3c0UWtGRGJrTlhMSFZDUVVGNVFsZ3NVVUZCVVN3MFFrRkRha05aTEhOQ1FVRjNRbG9zVVVGQlVTd3lRa0ZEYUVOaExHTkJRV2RDWWl4UlFVRlJMRzFDUVVONFFtTXNaVUZCYVVKa0xGRkJRVkVzYjBKQlEzcENaU3hsUVVGcFFtWXNVVUZCVVN4dlFrRkRla0puUWl4cFFrRkJiVUpvUWl4UlFVRlJMSE5DUVVNelFtbENMSEZDUVVGMVFtcENMRkZCUVZFc01FSkJReTlDYTBJc1owSkJRV3RDYkVJc1VVRkJVU3h4UWtGRE1VSnRRaXhuUTBGQmEwTnVRaXhSUVVGUkxIRkRRVVV4UTI5Q0xHTkJRV2RDY0VJc1VVRkJVU3d3UWtGRGVFSnhRaXcwUWtGQk9FSnlRaXhSUVVGUkxHbERRVU4wUTNOQ0xGVkJRVmwwUWl4UlFVRlJMSE5DUVVOd1FuVkNMR2xDUVVGdFFuWkNMRkZCUVZFc2MwSkJRek5DZDBJc1lVRkJaWGhDTEZGQlFWRXNlVUpCUTNaQ2VVSXNiVUpCUVhGQ2VrSXNVVUZCVVN4M1FrRkROMEl3UWl4dFFrRkJjVUl4UWl4UlFVRlJMSGRDUVVNM1FqSkNMRkZCUVZVelFpeFJRVUZSTEc5Q1FVVnNRalJDTEUxQlFWRnFRaXgxUWtGRFVtdENMR1ZCUVdsQ2NrSXNaVUZCWlhGQ0xHVkJRMmhEUXl4UlFVRlZiRUlzYzBKQlFYTkNiVUlzYjBKQlEyaERReXhUUVVGWGRFSXNlVUpCUVhsQ2MwSXNVMEZEY0VORExIZENRVUV3UW5oQ0xHOUNRVUZ2UW5kQ0xIZENRVWM1UTBNc1kwRkJaMElzUTBGQlJVTXNVVUZCVVN4RlFVRk5ReXhSUVVGUkxFZEJSWGhEUXl4TlFVRlJMRkZCUTFKRExFdEJRVThzVTBGRFVFTXNaVUZCYVVJc1EwRkRia0pETEZOQlFWVXNTMEZEVmtNc2QwSkJRWGxDTEV0QlEzcENReXdyUWtGQlowTXNUVUZKT1VKRExHdENRVUZ2UWl4SFFVVjRRaXhUUVVGVFF5dzBRa0ZCTkVKRExFZEJRMjVETEVkQlFVbEJMRVZCUVd0Q0xFTkJRM0JDTEVsQlFVbERMRVZCUVZGRUxFVkJRV2xDUlN4blFrRkJaMEpETEZGQlFWVXNTMEZEZGtRc1IwRkJTVVlzUlVGQlR5eERRVU5VTEVsQlFVbEhMRVZCUVU5SUxFVkJRVTFKTEZWQlEycENMRWRCUVVsRUxFVkJRMFlzVFVGQlR5eHRRMEZCY1VOQkxFVkJRVThzVFVGSmVrUXNUVUZCVHl4SFFVZFVMRk5CUVZORkxHdENRVUZyUWtNc1IwRkRla0lzUjBGQmJVSXNhVUpCUVZKQkxFVkJRV3RDTEVOQlF6TkNMRWRCUVVsRExFMUJRVTFETEZGQlFWRkdMRWRCUTJoQ0xFMUJRVThzU1VGQlRVRXNSVUZCU1Vjc1NVRkJTVW9zYlVKQlFXMUNTeXhMUVVGTExFMUJRVkVzU1VGRmNrUXNTVUZCU1VNc1JVRkJVU3hIUVVOYUxFbEJRVXNzU1VGQlNVTXNTMEZCVDA0c1JVRkRaQ3hIUVVGSlR5eFBRVUZQUXl4VlFVRlZReXhsUVVGbFF5eExRVUZMVml4RlFVRkxUU3hIUVVGTkxFTkJRMnhFTEVsQlFVbExMRVZCUVdFc2IwSkJRVzlDUXl4TFFVRkxUaXhIUVVGUFFTeEZRVUZOVHl4TFFVRkxReXhWUVVGVlVpeEhRVU4wUlVRc1JVRkJUVlVzUzBGQlMwb3NSVUZCWVN4TFFVRlBXaXhyUWtGQmEwSkRMRVZCUVVsTkxFdEJSM3BFTEUxQlFVOHNTVUZCVFVRc1JVRkJUVVFzUzBGQlN5eE5RVUZSTEVsQlJUZENMRTFCUVcxQ0xHbENRVUZTU2l4RlFVTlVZU3hMUVVGTFF5eFZRVUZWWkN4SFFVTkZMRzFDUVVGU1FTeEZRVU5VTEc5Q1FVbEdaMElzVDBGQlQyaENMRWRCUjJoQ0xFbEJRVWxwUWl4eFFrRkJkVUlzUjBGRk0wSXNVMEZCVTBNc05FSkJRVFJDUXl4RlFVRlJReXhGUVVGUlF5eEhRVU51UkN4SFFVRmpMRTFCUVZaR0xFZEJRVFJDTEUxQlFWWkRMRWxCUjJ4Q2FFUXNZVUZCWVN0RExFVkJRVkZETEVkQlFYcENMRU5CU1VFc1NVRkZTVVVzUlVGR1FVTXNSVUZCWjBKR0xFVkJRVlZITEV0QlF6RkNPVUlzUlVGQlVUSkNMRVZCUVZVeFFpeG5Ra0ZCWjBKRExFOUJSV3hEUml4SlFVTkdORUlzUlVGQldUVkNMRVZCUVUxSkxGZEJSM0JDTEVsQlFVa3lRaXhGUVVGUFNDeEZRVUZaTEVsQlFVMURMRVZCUlhwQ1RpeHhRa0ZCY1VKU0xHVkJRV1ZuUWl4TFFVbDRRMUlzY1VKQlFYRkNVU3hKUVVGUkxFVkJSVW9zWlVGQmVrSkRMRkZCUVZGRExFbEJRVWxETEZWQlFUUkNja1FzVTBGQlVTeEZRVUZQTEdsTlFVRTBUV2RFTEVWQlFXVTNRaXhGUVVGUkxFOUJRVk0wUWl4RlFVRlpMRWxCUVUwc1ZVRkJXVU1zUlVGQlowSXNTVUZCUzNoQ0xHdENRVUZyUW05Q0xFZEJRVk53UWl4clFrRkJhMEp4UWl4TlFVOXlXU3hUUVVGVFV5eHBRa0ZCYVVKU0xFVkJRVmRUTEVkQlF6bENRU3hKUVVsRVF5eG5Ra0ZCWjBKV0xFVkJRVlZITEZGQlExSXNUVUZCYkVKTkxFVkJRVTB4UXl4VlFVRnhSQ3hOUVVGcVF6QkRMRVZCUVUxNlF5d3lRa0ZCTkVRc1pVRkJla0p4UXl4UlFVRlJReXhKUVVGSlF5eFRRVUUwUWpGRUxGZEJRVlVzUlVGQlR5eHBSMEZCYTBkdFJDeEZRVUZWUnl4TFFVRk5TQ3hGUVVGVk1VSXNaMEpCUVdkQ1F5eFBRVUZUTEN0Q1FVRnBRM2xDTEVWQlFWVXhRaXhuUWtGQlowSkRMRTlCUVU5RkxGVkJRVmtzU1VGQlRTeEpRVUZOYmtRc1pVRkJaU3hOUVVGUE1FVXNSVUZCVlVjc1MwRkJUVWdzUlVGQlZURkNMR2RDUVVGblFrTXNUMEZCVXl3clFrRkJhVU41UWl4RlFVRlZNVUlzWjBKQlFXZENReXhQUVVGUFJTeFZRVUZaTEVsQlFVMHNTMEZGZG1Vc1RVRkJha05uUXl4RlFVRk5la01zTUVKQlExa3NUVUZCYkVKNVF5eEZRVUZOTVVNc1YwRkJOa01zWlVGQmVrSnpReXhSUVVGUlF5eEpRVUZKUXl4VFFVRTBRakZFTEZkQlFWVXNSVUZCVHl4elJVRkJkMFYyUWl4bFFVRmxMRTlCUTJwSkxHbENRVUZzUTIxR0xFVkJRVTE2UXl4NVFrRkJkME5JTEZGQlFWRTBReXhGUVVGTmVrTXNNRUpCUVc5RUxHVkJRWHBDY1VNc1VVRkJVVU1zU1VGQlNVTXNVMEZCTkVJeFJDeFhRVUZWTEVWQlFVOHNiMHRCUVhOTGRrSXNaVUZCWlN4UlFVVnVWQ3hsUVVGNlFpdEZMRkZCUVZGRExFbEJRVWxETEZkQlExY3NaVUZCZWtKR0xGRkJRVkZETEVsQlFVbERMRlZCUVRSQ2NrUXNVVUZCTWtJc1RVRkJia0oxUkN4RlFVRk5SU3hWUVVGdFFpeHZTVUZEYUVRc1pVRkJla0pPTEZGQlFWRkRMRWxCUVVsRExGVkJRVFJDY2tRc1VVRkJVWFZFTEVWQlFVMTRReXhwUTBGQmJVTjNReXhGUVVGTlJ5eHBRa0ZCY1VNc1RVRkJiRUpJTEVWQlFVMHhReXhUUVVGclFpdzJUa0ZEYWtnc1pVRkJla0p6UXl4UlFVRlJReXhKUVVGSlF5eFZRVUUwUW5KRUxGRkJRVEpDTEUxQlFXNUNkVVFzUlVGQlRVa3NWMEZCZVVNc1RVRkJjRUpLTEVWQlFVMUxMRmRCUVc5Q0xHbE1RVVYwUml4TlFVRm1UQ3hGUVVGTlRTeFBRVUYzUXl4cFFrRkJhRUpPTEVWQlFVMU5MRkZCUVN0RExHVkJRWHBDVml4UlFVRlJReXhKUVVGSlF5eFRRVUUwUWpGRUxGZEJRVlVzUlVGQlR5eDVTa0ZCTkVwelFpdzBRa0ZCTkVJMlFpeEpRVUZqTVVVc1pVRkJaU3hMUVVGTk5rTXNORUpCUVRSQ05rSXNUVUZIT1Zjc1UwRkJVMmRDTEcxQ1FVRnRRa01zUlVGQlRVTXNSVUZCYTBKRExFVkJRVlZETEVkQlF6VkVMRXRCUVVsQkxHRkJRWFZDTVVVc2FVTkJRVE5DTEVOQlJ6WkNMR1ZCUVhwQ01rUXNVVUZCVVVNc1NVRkJTVU1zVlVGSFZ5eGxRVUY2UWtZc1VVRkJVVU1zU1VGQlNVTXNWVUZCTkVKeVJDeFJRVUUyUWl4aFFVRnlRbWRGTEVkQlFXMURjRVVzYVVKQlFXbENMRlZCUVZVc1IwRkJUeXh4UkVGRmRrZ3NTVUZCU1hWRkxFVkJRV2RDU2l4RlFVRkxTeXh0UWtGRmNrSkRMRVZCUkhGQ1JpeEZRVUZqUnl4UFFVRlRTQ3hGUVVGalJ5eE5RVUZOUXl4WFFVRmhka1FzYTBKQlEyeEViVVFzUlVGQlkwY3NUVUZCVVVnc1JVRkJZMHNzWlVGRGJrVnVSU3hUUVVGVE1rUXNSVUZCYTBKTExFZEJRek5DU0N4RlFVRlpUeXh4UWtGQmNVSkRMRkZCUVZGRExGbEJRV0VzUTBGRGNFUmFMRXRCUVUxQkxFVkJRMDVETEdsQ1FVRnJRa0VzUlVGRGJFSkRMRk5CUVZWQkxFdEJTV1FzVTBGQlUxVXNZMEZGVURsR0xHVkJRV1U0Uml4WlFVUkxReXhMUVVOeFFtSXNTMEZFY2tKaExFdEJRM2xEV2l4cFFrRkVla05aTEV0QlEzbEZXQ3hWUVVjdlJpeFRRVUZUV1N4cFFrRkZVRE5HTEdOQlFXTTBSaXhwUWtGRVNFWXNUVUZKWWl4VFFVRlRSeXh2UWtGRlVERkdMR2xDUVVGcFFubEdMR2xDUVVST1JpeE5RVWxpTEZOQlFWTkpMR3RDUVVWUU4wWXNaVUZCWlRKR0xHbENRVVJLUml4TlFVbGlMRWxCUVVsTExEaENRVUZuUTNoR0xHTkJRMUFzWlVGQmVrSXdSQ3hSUVVGUlF5eEpRVUZKUXl4WFFVTmtORUlzT0VKQlFXZERMRk5CUVZWRExFZEJRM2hETEVsQlFVbERMRVZCUVRaRExFMUJRWGhDVUN4TFFVRkxVU3huUWtGRE1VSkRMRVZCUVZWVUxFdEJRVXRWTEZOQlJXWkRMRWRCUVd0Q1JpeEZRVVYwUWl4SFFVRmxMRTFCUVZoSUxFVkJTMFlzVDBGS1NVTXNSMEZEUmpkR0xIRkNRVUZ4UW10SExGVkJRVlZETEcxQ1FVRnRRbUlzUzBGQlMxRXNjMEpCUlhwRVVpeExRVUZMVVN4blFrRkJhMElzVFVGSmVrSnlSaXh0UWtGQmJVSXNTMEZCVFRCRExFOUJRVTk1UXl4SFFVRlZUaXhMUVVGTlFTeExRVUZMWXl4bFFVTnlSR1FzUzBGQlMxRXNaMEpCUVd0Q1J5eEZRVU51UWtvc1IwRkRSamRHTEhGQ1FVRnhRbXRITEZWQlFWVkhMSGRDUVVGM1Frb3NSVUZCWjBKTUxFZEJRM1pGTlVZc2NVSkJRWEZDYTBjc1ZVRkJWVWtzYTBKQlFXdENUQ3hMUVVWcVJHcEhMSEZDUVVGeFFtdEhMRlZCUVZWTExIVkNRVUYxUWs0c1JVRkJaMEpNTEVWQlFWTkhMRWRCUXk5RkwwWXNjVUpCUVhGQ2EwY3NWVUZCVlUwc2FVSkJRV2xDVUN4SFFVTm9SR3BITEhGQ1FVRnhRbXRITEZWQlFWVlBMR05CUVdOV0xFVkJRVk1zUTBGQlEwVXNUMEZQTjBRc1NVRkJTVk1zV1VGQll5eERRVU5vUWtNc1UwRkJWU3hSUVVOV1F5eFhRVUZaTEZWQlExcERMR3RDUVVGdFFpeHBRa0ZEYmtKRExHdENRVUZ0UWl4cFFrRkRia0pETEZkQlFWa3NWVUZEV2tNc1lVRkJZeXhaUVVOa1F5eFRRVUZWTEZGQlExWkRMRk5CUVZVc1VVRkRWa01zWTBGQlpTeGhRVU5tUXl4clFrRkJiVUlzYVVKQlEyNUNReXhoUVVGakxGbEJRMlJETEZOQlFWVXNVVUZEVmtNc1VVRkJVeXhQUVVOVVF5eFhRVUZaTEZWQlExcERMRmxCUVdFc1YwRkRZa01zWTBGQlpTeGhRVU5tUXl4VlFVRlhMRk5CUTFoRExGZEJRVmtzVlVGRFdrTXNWMEZCV1N4VlFVTmFReXhYUVVGWkxGVkJRMXBETEdOQlFXVXNZVUZEWmtNc1owSkJRV2xDTEdWQlEycENReXhYUVVGWkxGZEJSMlFzVTBGQlUwTXNhMEpCUTFBeFNDeHRRa0ZCYlVJeVNDeE5RVUZOTjBNc1RVRkhNMElzVTBGQlV6aERMSGxDUVVOSk9VTXNTMEZIVEN0RExHTkJRWFZETEdWQlFYcENlRVVzVVVGQlVVTXNTVUZCU1VNc1UwRkJORUl4UkN4WFFVRlZMRVZCUVU4c2EwTkJRVzlEZGtJc1pVRkJaU3hQUVVOb1NTeEpRVUZKZDBvc1JVRkJUM3BJTEZGQlNrRjVSU3hOUVU5WUxFOUJSa05uUkN4SlFVRm5ReXhsUVVGNlFucEZMRkZCUVZGRExFbEJRVWxETEZOQlFUUkNNVVFzVjBGQlZTeEZRVUZQTEhkRVFVRXdSSFpDTEdWQlFXVXNUMEZNTDBoM1J5eExRVTlGTTBJc1RVRkRXQ3hKUVVGTExGTkJRMHdzU1VGQlN5eFRRVlJKTWtJc1MwRlZSbWxFTEdOQlFXTkRMRlZCUVZrc1EwRkJReTlKTEhsQ1FVRjVRbWRLTEdsQ1FVRnBRaXhWUVVGWExFOUJRVkZJTEVsQlF6ZEdMRTFCUTBZc1NVRkJTeXhSUVVOTUxFbEJRVXNzVVVGSFNDeEpRVUZMTEVsQlFVbEpMRXRCYUVKR2NFUXNTMEZqUm1sRUxHTkJRV05ETEZWQlFWa3NSMEZGWWpsQ0xGbEJRMXBCTEZsQlFWazVSQ3hsUVVGbE9FWXNTVUZxUWpGQ2NFUXNTMEZyUWtWcFJDeGpRVUZqUXl4VlFVRlZkRVlzUzBGQlMzcEVMSGxDUVVGNVFtZEtMR2xDUVVGcFFrTXNSVUZCVDJoRExGbEJRVmxuUXl4SFFVRlJTaXhKUVVjelJ5eE5RVU5HTEVsQlFVc3NVMEYwUWtsb1JDeExRWFZDUm1sRUxHTkJRV05ETEZWQlFWa3NRMEZCUXk5SkxIbENRVUY1UW1kS0xHbENRVUZwUWl4WFFVRlpMRkZCUVZOSUxFbEJReTlHTEUxQlEwWXNTVUZCU3l4TlFYcENTV2hFTEV0Qk1FSkdhVVFzWTBGQlkwTXNWVUZCV1N4RFFVRkRMMGtzZVVKQlFYbENaMG9zYVVKQlFXbENMRmRCUVZrc1VVRkJVMGdzUjBGQlR6ZEpMSGxDUVVGNVFtZEtMR2xDUVVGcFFpeFZRVUZYTEU5QlFWRklMRWxCUTI1TExFMUJRMFlzU1VGQlN5eFBRVFZDU1doRUxFdEJOa0pHYVVRc1kwRkJZME1zVlVGQldTeERRVUZETDBrc2VVSkJRWGxDWjBvc2FVSkJRV2xDTEZkQlFWa3NVVUZCVTBnc1IwRkJUemRKTEhsQ1FVRjVRbWRLTEdsQ1FVRnBRaXhaUVVGaExGTkJRVlZJTEVsQlEzWkxMRTFCUTBZc1NVRkJTeXhSUVVOTUxFbEJRVXNzVTBGRFRDeEpRVUZMTEZkQmFrTkphRVFzUzBGclEwWnBSQ3hqUVVGalF5eFZRVUZaTEVOQlFVTXZTU3g1UWtGQmVVSm5TaXhwUWtGQmFVSXNZVUZCWXl4VlFVRlhTQ3hMUVV0NlJ5eFRRVUZUU3l3d1FrRkRVRGRKTEdWQlFXVTRTU3hyUWtGQmEwSjBSQ3hOUVUxdVF5eEpRVUZKZFVRc2FVSkJRVzFDTEVOQlEzSkNReXhOUVVGTkxFVkJRMDVETEUxQlFVMHNSVUZEVGtNc1NVRkJTU3hGUVVOS1F5eExRVUZMTEVWQlEweERMRTlCUVU4c1JVRkRVRU1zU1VGQlNTeEZRVU5LUXl4TFFVRkxMRVZCUTB4RExFOUJRVThzUlVGRFVFTXNVVUZCVVN4RlFVTlNReXhOUVVGTkxFVkJRMDVETEUxQlFVMHNSVUZEVGtNc1QwRkJUeXhGUVVOUVF5eFJRVUZSTEVWQlExSjJRaXhQUVVGUExFVkJRMUIzUWl4TFFVRkxMRWRCU1VoRExHdENRVUZ2UWl4RFFVTjBRa01zVTBGQlV5eEZRVU5VUXl4TFFVRkxMRVZCUTB4RExGVkJRVlVzUjBGTlVqZEdMR2RDUVVGclFteEdMRkZCUVZFc1EwRkROVUpuVEN4VlFVRlZMRWRCUTFSdVFpeHJRa0ZOUTI5Q0xHZENRVUZyUWl3NFFrRkRiRUpETEd0Q1FVRnZRaXhIUVVOd1FuUklMR1ZCUVdsQ0xFZEJRVWRCTEdWQlJYaENMRk5CUVZOMVNDeHhRa0ZCY1VKRExFZEJRM1pDZUVnc1pVRkJaVU1zUzBGQlMzRklMR3RDUVVGdFFrVXNTMEZEZWtOSUxHZENRVUZuUW14SUxFdEJRVXR4U0N4TFFVRm5ReXhsUVVGNlFuWkhMRkZCUVZGRExFbEJRVWxETEZOQlFUUkNNVVFzVjBGQlZTeEZRVUZQTEd0Q1FVRnRRaXRLTEVkQlFVOTBUQ3hsUVVGbExFdEJRVTF6VEN4SlFVTnlTVVlzYTBKQlFXdENSU3hKUVVGUExFZEJTVGRDTEZOQlFWTkRMR3RDUVVGclFrTXNSVUZCVTNKSExFZEJRMnhETEU5QlFVOXhSeXhGUVVGUlF5eFJRVUZSTEUxQlFWRXNSMEZCYVVJc1RVRkJXblJITEVWQlFVMTFSeXhIUVVjMVF5eEpRVUZKUXl4blFrRkJhMElzUlVGblFuUkNMRk5CUVZORExHdENRVUZyUWtNc1IwRkRla0lzU1VGQlNWQXNSVUZCVFU4c1JVRkJVVU1zUzBGRGJFSlVMSEZDUVVGeFFrTXNSMEZEY2tJNVJTeExRVUZMZUVRc1owSkJRV3RDTmtrc1JVRkRka0p5Uml4TFFVRkxNMElzUzBGQlQzbEhMRVZCUVVsVExHTkJRMmhDZGtZc1MwRkJTM2RHTEdOQlFXZENMRXRCUTNKQ2VFWXNTMEZCUzNsR0xHdENRVUZ2UWl4TFFVTjZRbnBHTEV0QlFVc3dSaXhsUVVGcFFpeExRVU4wUWpGR0xFdEJRVXN5Uml4dFFrRkJjVUlzUzBGRE1VSXpSaXhMUVVGTE5FWXNWVUZCV1N4TFFVTnFRalZHTEV0QlFVczJSaXhaUVVGakxFdEJRMjVDTjBZc1MwRkJTeXRETEZsQlFXTXNSVUZEYmtJdlF5eExRVUZMT0VZc1QwRkJVeXhGUVVOa09VWXNTMEZCUzFJc2JVSkJRWEZDTEV0QlF6RkNVU3hMUVVGTGFVUXNZMEZCWjBJc1MwRkRja0pxUkN4TFFVRkxLMFlzYVVKQlFXMUNMRXRCUTNoQ0wwWXNTMEZCUzJkSExFOUJRVk1zUlVGRFpTeGxRVUY2UW5wSUxGRkJRVkZETEVsQlFVbERMRmRCUTJSMVFpeExRVUZMWXl4alFVRm5RaXhMUVVOeVFsUXNPRUpCUVRoQ09VTXNTMEZCUzNsRExFdEJRVTBzVDBGSk4wTnZSaXhyUWtGQmEwSmhMRmxCUVdNc2IwSkJSV2hEWWl4clFrRkJhMEpqTEUxQlFWRXNRMEZaZUVKRExHVkJRV2RDTEZOQlFWVTNSeXhGUVVGaE9FY3NSVUZCV1VNc1JVRkJiVUpETEVkQlEzQkZkRWNzUzBGQlN5dERMRmxCUVdOdlF5eHJRa0ZEYmtKdVJpeExRVUZMT0VZc1QwRkJVMDhzUlVGQmEwSkZMR0ZCUTJoRGRrY3NTMEZCU3paR0xGbEJRV05QTEVWQlEyNUNjRWNzUzBGQlMxSXNiVUpCUVhGQ05rY3NSVUZGTVVJc1NVRXlRMGxITEVWQlEwRkRMRVZCY1VKRlF5eEZRV05HUXl4RlFTOUZRV2hKTEVWQlFWRnhRaXhMUVVGTGVFUXNaMEpCUVdkQ2JVTXNUVUZGYWtNc1QwRkJVWEZDTEV0QlFVc3pRaXhOUVVOWUxFbEJRVXNzVVVGRFRDeEpRVUZMTEU5QlEwd3NTVUZCU3l4VFFVTk1MRWxCUVVzc1RVRkRUQ3hKUVVGTExFOUJRMHdzU1VGQlN5eFRRVU5NTEVsQlFVc3NVMEZEVEN4SlFVRkxMRkZCUTBneVFpeExRVUZMYVVRc1kwRkJaMElzUTBGRGJrSkRMRlZCUVZjc1RVRkZZalZFTEVWQlFWbFBMSEZDUVVGeFFrTXNVVUZCVVdkRUxIVkNRVUYzUWpsRExFMUJRMnBGTEUxQlEwWXNTVUZCU3l4UlFVTklNVVlzWTBGQlkzTk5MR0ZCUVdFMVJ5eExRVUZOY2tJc1JVRkJUM2xJTEVkQlEzaERla2dzUlVGQlVYSkZMR05CUVdOMVRTeGhRVUZoTjBjc1MwRkJUWEpDTEVkQlEzcERWeXhGUVVGWlR5eHhRa0ZCY1VKRExGRkJRVkU0UXl4blFrRkJhVUkxUXl4TlFVTXhSRllzUlVGQldVOHNjVUpCUVhGQ1F5eFJRVUZSWjBRc2RVSkJRWGRDT1VNc1RVRkRha1VzVFVGRFJpeEpRVUZMTEZOQlEwaDZSaXhsUVVGbGNVMHNZVUZCWVRWSExFdEJRVTF5UWl4RlFVRlBlVWdzUjBGRGVrTjZTQ3hGUVVGUmNFVXNaVUZCWlhOTkxHRkJRV0UzUnl4TFFVRk5ja0lzUjBGRE1VTXNUVUZEUml4SlFVRkxMRk5CUTBodVJTeGxRVUZsYjAwc1lVRkJZVFZITEV0QlFVMXlRaXhGUVVGUGVVZ3NSMEZEZWtONlNDeEZRVUZSYmtVc1pVRkJaWEZOTEdGQlFXRTNSeXhMUVVGTmNrSXNSMEZETVVOWExFVkJRVmxQTEhGQ1FVRnhRa01zVVVGQlVXZEVMSFZDUVVGM1FqbERMRTFCUTJwRkxFMUJRMFlzU1VGQlN5eFhRVU5JZGtZc2FVSkJRV2xDYlUwc1lVRkJZVFZITEV0QlFVMXlRaXhGUVVGUGVVZ3NSMEZETTBONlNDeEZRVUZSYkVVc2FVSkJRV2xDYjAwc1lVRkJZVGRITEV0QlFVMXlRaXhIUVVNMVExY3NSVUZCV1U4c2NVSkJRWEZDUXl4UlFVRlJPRU1zWjBKQlFXbENOVU1zVFVGRE1VUldMRVZCUVZsUExIRkNRVUZ4UWtNc1VVRkJVV2RFTEhWQ1FVRjNRamxETEU5QlNYSkZkRUlzYVVKQlFXbENjMElzUzBGQlRYSkNMRWRCVFV3c1RVRkJaSGxJTEVkQlEwWkpMRVZCUVdWS0xFVkJRVmRhTEdOQlF6RkNhVUlzUlVGQldVd3NSVUZCVnk5SUxFMUJRMlJuU1N4RlFVRnJRbWhKTEU5QlF6TkNiVWtzUlVGQlpVZ3NSVUZCYTBKaUxHTkJRMnBEYVVJc1JVRkJXVW9zUlVGQmEwSm9TU3hQUVVWYUxFMUJRV2hDYlVrc1IwRkJkMEpCTEVsQlFXbENNVTBzWTBGQlkyZE9MRXRCUVhGQ0xHdENRVUZrVEN4TFFVTm9SVVFzUlVGQlpURk5MR05CUVdOcFRpeE5RVVV6UWxBc1NVRkJhVUl4VFN4alFVRmphVTRzVDBGRFppeFJRVUZrTDBjc1MwRkJTek5DTEV0QlExQnRTU3hGUVVGbE1VMHNZMEZCWTJkT0xFbEJRMDRzVTBGQlpEbEhMRXRCUVVzelFpeFBRVU5rYlVrc1JVRkJaVEZOTEdOQlFXTnJUaXhUUVVkcVEyaElMRXRCUVV0M1JpeGpRVUZuUW1kQ0xFVkJSVkVzWlVGQmVrSnFTU3hSUVVGUlF5eEpRVUZKUXl4WlFVVkpMRTFCUVdReVNDeEZRVU5HVFN4RlFVRmhUaXhGUVVGWGRFWXNZMEZEWm5WR0xFVkJRV3RDYUVrc1QwRkRNMEp4U1N4RlFVRmhUQ3hGUVVGclFuWkdMR1ZCUlRkQ05FWXNSMEZIUm5aTUxHMUNRVUZ0UWpaRkxFdEJRVXN6UWl4TFFVRk5MRXRCUVUweVFpeExRVUZOTUVjc1IwRkZOVU14Unl4TFFVRkxZeXhqUVVGblFqTkdMRzFDUVVGdFFqaE1MRzlDUVVGdlFsQXNSVUZCV1RGSExFdEJRVXN6UWl4TFFVRk5Na0lzVDBGSmNrWXNSMEZCU1ZZc1JVRkJXVFJJTEdsQ1FVRnJRaXhEUVVOb1F5eEpRVU5KUXl4RlFVUkJReXhGUVVGblFtWXNSVUZCYTBKNlJ5eGxRVVYwUXl4SFFVRkpORWNzU1VGQmFVSXhUU3hqUVVGamFVNHNTMEZEYWtNc1IwRkJhMElzVjBGQlpDOUhMRXRCUVVzelFpeExRVUZ0UWl4RFFVY3hRaXhKUVVGSlowb3NSVUZCVFVRc1JVRkJZMFVzWTBGQll5eFBRVU5zUTJoRExFVkJRVTkwUml4TFFVRkxlRVFzWjBKQlFXZENPRWtzUzBGRGFFTXJRaXhGUVVGSmVFa3NWVUZCV1N4SlFVRk5lVWNzUlVGQlR5eE5RVUZSUVN4RlFVRlBMRWxCUXpWRE5rSXNSVUZCUzBVc1JVRkJTVVVzV1VGQldVWXNSVUZCU1Vjc2FVSkJSWHBDVEN4RlFVUlRlRWtzUlVGQlRYVkhMRWRCUTFaclF5eEZRVUZqUlN4alFVRmpkRWdzUzBGQlMzaEVMR2RDUVVGblFqaEpMRXRCUVUwelJ5eEZRVUZOZFVjc1NVRkxOMFJyUXl4RlFVRmpSU3hqUVVGamRFZ3NTMEZCUzNoRUxHZENRVUZuUWpoSkxGZEJSM2hFTmtJc1JVRkJTME1zUlVGQlkwc3NaMEpCUVdkQ2FrSXNSVUZCWTNoSExFdEJRVXQ0UkN4blFrRkJaMEk0U1N4TlFVVjRSV3BNTEhOQ1FVRnpRbkZPTEdGQlFXRXhTQ3hMUVVGTmJVZ3NSMEZEZWtOdVNDeExRVUZMWjBjc1VVRkJWVE5MTEUxQlFVMXpUU3h2UWtGRGFFSXpTQ3hMUVVGTE5rWXNZVUZEVWpkTUxITkNRVUZ6UWpST0xHOUNRVUZ2UWxRc1IwRkZOVU51U0N4TFFVRkxOa2dzY1VKQlFYRkNMRXRCUVUxc1NpeEZRVUZQVnl4SFFVTjJReXhKUVVGSmQwa3NSVUZCVjJwUExGbEJRVmx6VGl4SFFVTXpRbTVJTEV0QlFVc3JTQ3gxUWtGQmRVSjZTU3hGUVVGaFdDeEZRVUZQTWtnc1JVRkJVM2RDTEVkQlEzcEVia0lzUlVGQllXMUNMRTFCUTFJc1EwRkRUQ3hKUVVGSlJTeEZRVUZWYUVrc1MwRkJTMmxKTEc5RFFVRnZRek5KTEVWQlFXRllMRWRCUTJoRmRVb3NSVUZCWVd4SkxFdEJRVXR0U1N4eFFrRkJjVUkzU1N4RlFVRmhXQ3hGUVVGUE1rZ3NSMEZGTjBSTExFZEJSRWQxUWl4SFFVRmpNMFVzYVVKQlFXbENka1FzUzBGQlN6TkNMRTFCUXpGQ01rb3NSVUZCVlN4TFFVVldRU3hGUVVGVkxFbEJRVTFGTEVWQlFXRXNTMEZCVDJ4SkxFdEJRVXQ0UkN4blFrRkJaMEk0U1N4TFFVRlBMRWxCU1dwR0xFOUJRVkYwUml4TFFVRkxNMElzVFVGRFdDeEpRVUZMTEZGQlEwaHBRaXhGUVVGWlR5eHhRa0ZCY1VKRExGRkJRVkZITEdWQlFXZENSQ3hOUVVOeVJISkNMRVZCUVUxNVNpeFhRVU5TT1Vrc1JVRkJXVThzY1VKQlFYRkNReXhSUVVGUmJrY3NaVUZCWlRCUExHdENRVUZ0UW5KSkxFMUJSVGRGTEUxQlEwWXNTVUZCU3l4WFFVTklWaXhGUVVGWlR5eHhRa0ZCY1VKRExGRkJRVkZMTEd0Q1FVRnRRa2dzVFVGRGVFUnlRaXhGUVVGTmVVb3NWMEZEVWpsSkxFVkJRVmxQTEhGQ1FVRnhRa01zVVVGQlVXNUhMR1ZCUVdVd1R5eHJRa0ZCYlVKeVNTeE5RVVUzUlN4TlFVTkdMRWxCUVVzc1UwRkxUQ3hKUVVGTExGTkJRME55UWl4RlFVRk5lVW9zVjBGRFVqbEpMRVZCUVZsUExIRkNRVUZ4UWtNc1VVRkJVVzVITEdWQlFXVXdUeXhyUWtGQmJVSnlTU3hOUVVVM1JTeE5RVU5HTEVsQlFVc3NVMEZEU0ZZc1JVRkJXVThzY1VKQlFYRkNReXhSUVVGUlRTeG5Ra0ZCYVVKS0xFMUJTVGxFTEU5QlFVOHlSeXhIUVdkQ1ZITkNMRzlEUVVGeFF5eFRRVUZWTTBrc1JVRkJZVmdzUjBGRE1VUXNTVUZCU1RKS0xFVkJRVTBzU1VGQlRYUkpMRXRCUVV0NFJDeG5Ra0ZCWjBJNFNTeExRVVZ5UXl4SlFVRkxMRWxCUVVscFJDeExRVUZYTlVvc1JVRkRiRUlzUjBGQlMwRXNSVUZCVFhKQ0xHVkJRV1ZwVEN4SFFVRXhRaXhEUVVkQkxFbEJRVWxETEVWQlFWazNTaXhGUVVGTk5Fb3NSMEZEZEVJc1IwRkJhVUlzVFVGQllrTXNSVUZIU2l4SFFVRkpPVTBzZDBKQlFYZENORUlzWlVGQlpXbE1MRWRCUTNKRFF5eEhRVU5HZEVvc2JVSkJRVzFDWXl4TFFVRk5kVWtzUlVGQlUwTXNSVUZCVjJ4S0xFOUJSVEZETEVOQlEwUnBTaXhKUVVGWmVrMHNVVUZEVmpCTkxFbEJRekpDTEdWQlFYcENha3NzVVVGQlVVTXNTVUZCU1VNc1YwRkZaSFZDTEV0QlFVc3dSaXhsUVVGcFFqaERMRWRCUlhoQ1FTeEZRVUZaZUVrc1MwRkJTekpHTEcxQ1FVRnhRbXBOTEZGQlFWRXNSMEZCU1dsR0xFVkJRVTFOTEZGQlJURkVkVW9zUlVGQldUVlBMSE5DUVVGelFqWlBMSE5DUVVGelFrUXNSVUZCVjNoSkxFOUJSWEpGTEVsQlFVa3dTU3hGUVVGVExFdEJRMGtzVFVGQllqRkpMRXRCUVVzelFpeE5RVUZuUWpCSExHdENRVUZyUWk5RkxFdEJRVXN6UWl4TFFVRk5UU3hIUVVNdlF6TkRMR1ZCUVdWelFpeGxRVUZsYVV3c1MwRkRha05ITEVWQlFWTXhUeXh6UWtGQmMwSXlUeXdyUWtGQkswSktMRVZCUVZORExFbEJSM3BGUlN4RlFVRlRNVThzYzBKQlFYTkNORThzZDBKQlFYZENUQ3hGUVVGVFF5eEhRVVU1UkVVc1NVRkRSa29zUjBGQlR5eEpRVUZOU1N4SlFVOXVRaXhQUVVGSmNFb3NSVUZCV1hWS0xIRkNRVU5RVUN4SFFVZEtkRWtzUzBGQlN6WkdMR05CUTFKNVF5eEhRVUZQTEVsQlFVMTBUeXh6UWtGQmMwSTRUeXgxUWtGRmNrTlNMRWRCUVU4c1NVRkJUWFJQTEhOQ1FVRnpRaXRQTEd0Q1FVRnJRaTlKTEV0QlFVczRSaXhWUVdFMVJIRkRMSEZDUVVGelFpeFRRVUZWTjBrc1JVRkJZVmdzUlVGQlR6SklMRWRCUTJ4RUxFbEJRVWxuUXl4RlFVRk5MRWRCUjA1NlNpeEZRVUZaUml4RlFVRk5la01zZDBKQlEzUkNMRWRCUVdsQ0xFMUJRV0l5UXl4RlFVTnpRaXhOUVVGd1FrRXNSVUZCVlcxTExGTkJRMXBXTEVWQlFVMTZTaXhGUVVGVmJVc3NXVUZGWWl4RFFVTk1MRWxCUVVsRExFVkJRV1YwVGl4eFFrRkJjVUpuUkN4RlFVRk5NVU1zVlVGQldUQkRMRVZCUVUweFF5eFRRVUZYTEV0QlEzWkZhVTRzUlVGQlowTXNUVUZCYUVKRUxFVkJRWFZDTEV0QlFVOTBTeXhGUVVGTk1VTXNVMEZEZUVRc1IwRkJiMElzVFVGQmFFSm5UaXhGUVVWR1dDeEZRVUZOZUU0c05FSkJRVFJDYlU4c1IwRkRUQ3hsUVVGNlFqRkxMRkZCUVZGRExFbEJRVWxETEZWQlEyUTBRaXc0UWtGQk9FSTVReXhMUVVGTGVVTXNTMEZCVFdsS0xGRkJSWFJETEVkQlFYRkNMRTFCUVdwQ1F5eEZRVUYxUWl4RFFVVm9RMW9zUlVGRWEwSjBTU3hMUVVGTGJVb3NZMEZCWTBRc1JVRkJaVFZLTEVWQlFXRm5TQ3hIUVVNdlEzSktMRXRCUVVzc1MwRkhNMElzVDBGQlNYRklMR3RDUVVGclFuUkZMRXRCUVVzelFpeFBRVUV5UWl4UFFVRnNRbWxMTEVWQlFVbGpMRTlCUVU4c1IwRlhkRU1zUzBGQlQyUXNSVUZGVUVFc1IwRkpXRkFzZFVKQlFYZENMRk5CUVZWNlNTeEZRVUZoV0N4RlFVRlBNa2dzUlVGQlUzZENMRWRCUlRkRUxFbEJRVWxxU2l4RlFVRlpSaXhGUVVGTmVrTXNkMEpCUTNSQ0xFZEJRV2xDTEUxQlFXSXlReXhGUVVOelFpeE5RVUZ3UWtFc1JVRkJWVzFMTEZGQlExcHVVQ3haUVVGWmQxQXNWVUZCVlhaQ0xFVkJRVlZxU2l4RlFVRlZiVXNzV1VGRmRrTXNRMEZEVEN4SlFVRkpReXhGUVVGbGRFNHNjVUpCUVhGQ1owUXNSVUZCVFRGRExGVkJRVmt3UXl4RlFVRk5NVU1zVTBGQlZ5eExRVU4yUldsT0xFVkJRV2RETEUxQlFXaENSQ3hGUVVGMVFpeExRVUZQZEVzc1JVRkJUVEZETEZOQlJYaEVMRWRCUVc5Q0xFMUJRV2hDWjA0c1JVRkxiVUlzUzBGQmFrSkJMRWxCUXpKQ0xHVkJRWHBDTVVzc1VVRkJVVU1zU1VGQlNVTXNWVUZEWkRSQ0xEaENRVUU0UWpsRExFdEJRVXQ1UXl4TFFVRk5hVW9zUjBGRk0wTndVQ3haUVVGWmVWQXNWVUZCVlhoQ0xFVkJRVlZ0UWl4VFFVVTNRaXhIUVVGeFFpeE5RVUZxUWtNc1JVRkZWQ3hKUVVSQkxFbEJRVWxMTEVWQlFXTjJTaXhMUVVGTGJVb3NZMEZCWTBRc1JVRkJaVFZLTEVWQlFXRm5TQ3hIUVVONFJHdEVMRVZCUVVrc1JVRkJSMEVzUlVGQlNVUXNSVUZCV1VVc1QwRkJVVVFzU1VGRGRFTXpVQ3haUVVGWk5sQXNWMEZCVnpWQ0xFVkJRVlY1UWl4RlFVRlpReXhOUVdOeVJFY3NhVUpCUVd0Q0xGTkJRVlZETEVWQlFXRjBTeXhGUVVGaFowZ3NSMEZEY0VRc1NVRkJTWFZFTEVWQlFXTTNTaXhMUVVGTGVFUXNaMEpCUTNaQ2QwUXNTMEZCUzNoRUxHZENRVUZyUW05T0xFVkJRM1pDTlVvc1MwRkJTemhLTEdkQ1FVRm5RbmhMTEVWQlFXRjFTeXhGUVVGaFJDeEZRVUZoZEVRc1NVRmhPVVIzUkN4blFrRkJhVUlzVTBGQlZYaExMRVZCUVdGMVN5eEZRVUZoUkN4RlFVRmhkRVFzUjBGRGFFVXNTVUZCU1hsRUxFVkJRVmxHTEVWQlFWbHNUQ3hOUVVONFFuRk1MRVZCUVZsb1N5eExRVUZMZUVRc1owSkJRV2RDYlVNc1RVRkZja01zVDBGQlVYRkNMRXRCUVVzelFpeE5RVU5ZTEVsQlFVc3NVVUZEU0RCTUxFVkJRVmw2VUN4alFVRmpkVTBzWVVGQllUZEhMRXRCUVUwclNpeEhRVU0zUTBNc1JVRkJXVEZRTEdOQlFXTjFUU3hoUVVGaE4wY3NTMEZCVFdkTExFZEJRemRETEUxQlEwWXNTVUZCU3l4VFFVTklSQ3hGUVVGWmVGQXNaVUZCWlhOTkxHRkJRV0UzUnl4TFFVRk5LMG9zUjBGRE9VTkRMRVZCUVZsNlVDeGxRVUZsYzAwc1lVRkJZVGRITEV0QlFVMW5TeXhIUVVNNVF5eE5RVU5HTEVsQlFVc3NVMEZEU0VRc1JVRkJXWFpRTEdWQlFXVnhUU3hoUVVGaE4wY3NTMEZCVFN0S0xFZEJRemxEUXl4RlFVRlplRkFzWlVGQlpYRk5MR0ZCUVdFM1J5eExRVUZOWjBzc1IwRkRPVU1zVFVGRFJpeEpRVUZMTEZkQlEwaEVMRVZCUVZsMFVDeHBRa0ZCYVVKdlRTeGhRVUZoTjBjc1MwRkJUU3RLTEVkQlEyaEVReXhGUVVGWmRsQXNhVUpCUVdsQ2IwMHNZVUZCWVRkSExFdEJRVTFuU3l4SFFWRndSQ3hQUVVwQmRFd3NhVUpCUVdsQ2MwSXNTMEZCVFdkTExFZEJRM1pDYUVzc1MwRkJTelpJTEhGQ1FVRnhRbXRETEVWQlFWZERMRVZCUVZjeFN5eEhRVU5vUkZVc1MwRkJTMmxMTEcxQ1FVRnRRa1lzUlVGQlYwTXNSVUZCVnpGTExFVkJRV0ZuU0N4SFFVVnVSSFJITEV0QlFVc3pRaXhOUVVOWUxFbEJRVXNzVVVGSlNDOUVMR05CUVdNMFVDeGpRVUZqYkVzc1RVRkpOVUk1UlN4dFFrRkJiVUpwVUN4eFFrRkJjVUp1U3l4TlFVTjRReXhOUVVOR0xFbEJRVXNzVjBGRFNIWkdMR2xDUVVGcFFubFFMR05CUVdOc1N5eE5RVU12UWl4TlFVTkdMRWxCUVVzc1UwRkhTRllzUlVGQldVOHNjVUpCUVhGQ1F5eFJRVUZSZFVRc2QwSkJRWGxDY2tRc1VVRnhRbmhGTmtnc2NVSkJRWE5DTEZOQlFWVnJReXhGUVVGWFF5eEZRVUZYTVVzc1IwRkRjRVFzU1VGQlNXbEtMRVZCUTBFMlFpeEZRVU5CUXl4RlFVTktMRWxCUVVzNVFpeExRVUZYZDBJc1JVRkRaQ3hKUVVGSlF5eEZRVUZWTVUwc1pVRkJaV2xNTEVsQlFXRjNRaXhGUVVGVmVrMHNaVUZCWldsTUxFbEJRV3RETEUxQlFYUkNkMElzUlVGQlZYaENMRWRCUjNwR0xFZEJRVWxCTEVsQlFWbDZUU3hOUVVGUExFTkJRM0pDTEVsQlFVbDNUeXhGUVVGWmRFc3NTMEZCU3pKR0xHMUNRVU55UWl4SlFVRkxlVVVzUzBGQllVVXNSVUZEV2tFc1JVRkJWV2hPTEdWQlFXVTRUU3hOUVVNelFrTXNSVUZCWlVFc1IwRkJaMElzU1VGRGJFSkVMRWRCUVdFc1NVRkhPVUp3U3l4TFFVRkxNa1lzYlVKQlFYRkNMRlZCUTJwQ2Frc3NkMEpCUVhkQ05FSXNaVUZCWldsTUxFZEJRelZEZDBJc1JVRkJWWGhDTEVsQlNWcHFUaXhsUVVGbE1FVXNTMEZCVFhWSkxFZEJSV1I0UkN4clFrRkJhMEl2UlN4TFFVRkxNMElzUzBGQlRUQk1MRWRCUTJwREwwNHNaVUZCWlhOQ0xHVkJRV1ZwVEN4SlFVTnFRM1pQTEhOQ1FVRnpRblZSTEhkQ1FVRjNRbWhRTEZGQlFWRjVSU3hOUVVGUGRVa3NTVUZGZEVSNFR5eFpRVUZaZVZFc1YwRkJWMnBETEVsQlFWbDRUeXhaUVVGWk1GRXNhMEpCUVd0Q2JFTXNTMEZETVVWMlR5eHpRa0ZCYzBJd1VTeDFRa0ZCZFVKdVVDeFJRVUZSZVVVc1RVRkJUM1ZKTEVkQlIyaEZMRWxCUVV0QkxFdEJRVmQ1UWl4RlFVRlhMRU5CUTNwQ0xFbEJRVWxYTEVWQlFWZFlMRVZCUVZWNlFpeEhRVU55UW5GRExFVkJRVmR5UXl4SlFVRlplazBzVFVGQlVXdEZMRXRCUVVzeVJpeHRRa0ZCYTBNc1RVRkJZbTlGTEVWQlFXOUNRU3hGUVVGVmVFSXNVVUZCVjNORExFVkJRM1JITEVkQlFVdGlMRVZCUVZVeFRTeGxRVUZsYVV3c1NVRkJXVzlETEVsQlFXRkRMRWxCUVhkQ0xFMUJRVnBFTEVkQlFXZERMRTFCUVZwRExFZEJSM1pHTEVkQlFVbHlReXhKUVVGWmVrMHNUVUZWWkN4SFFWUkpOazhzUjBGRE1rSXNaVUZCZWtKd1RTeFJRVUZSUXl4SlFVRkpReXhYUVVOa1ZpdzBRa0ZCTkVKcFF5eExRVUZMTWtZc2JVSkJRVzlDTTBZc1MwRkJTekJHTEdWQlFXZENNVVlzVFVGRE1VVkJMRXRCUVVzd1JpeGxRVUZwUW1sR0xFZEJSWGhDUVN4RlFVRlhNMHNzUzBGQlN6SkdMRzFDUVVGeFFtcE5MRkZCUVZFc1IwRkJTV2xTTEVsQlJXcEVNMHNzUzBGQlN6SkdMRzFDUVVGeFFpeExRVVY0UW1sR0xFVkJRVlVzUTBGRldpeEpRVUZMVWl4TFFVRmhVU3hIUVVOYVFTeEZRVUZUZEU0c1pVRkJaVGhOTEVsQlFXZENUeXhIUVVGaFFTeEZRVUZUY2s0c1pVRkJaVGhOTEUxQlF5OUZReXhGUVVGbFFTeEhRVUZuUWl4SlFVTnNRa1FzUjBGQllTeEpRVWs1UWl4SlFVRkxRU3hMUVVGaFR5eEZRVU5hUVN4RlFVRlRjazRzWlVGQlpUaE5MRWxCUVdOUkxFVkJRVk5TTEV0QlFXVlBMRVZCUVZOUUxFMUJRM3BGUXl4RlFVRmxRU3hIUVVGblFpeEpRVU5zUWtRc1IwRkJZVThzUlVGQlUxQXNVMEZMZGtORExFVkJRV1ZOTEU5QlJWb3NSMEZCU1dwUUxIZENRVUYzUWpSQ0xHVkJRV1ZwVEN4SFFVTTFRMjlETEVWQlEwWjZUQ3h0UWtGQmJVSmpMRXRCUVUxMVNTeEZRVUZUYjBNc1JVRkJWWEpNTEVkQlEyNURjMHdzUjBGRFZIUlFMR1ZCUVdVd1JTeExRVUZOZFVrc1VVRkZiRUlzUjBGQlNYaEVMR3RDUVVGclFpOUZMRXRCUVVzelFpeExRVUZOTWt3c1IwRkRha05vVHl4bFFVRmxjMElzWlVGQlpXbE1MRWxCUTJwRGRrOHNjMEpCUVhOQ09GRXNjVUpCUVhGQ2RsQXNVVUZCVVhsRkxFMUJRVTkxU1N4RlFVRlRiME1zVVVGRmFFVXNSMEZCU1RWUkxGbEJRVmw1VVN4WFFVRlhha01zU1VGQldYaFBMRmxCUVZrd1VTeHJRa0ZCYTBKc1F5eEhRVUZWTEVOQlEzQkdMRWxCUVVsMlJpeEZRVUZQZWtnc1VVRkJVWGxGTEUxQlNVZ3NUVUZCV2pKTExFVkJRMFl6VVN4elFrRkJjMElyVVN4dlFrRkJiMEl2U0N4RlFVRk5kVVlzUlVGQlUyOURMRWRCUlhwRU0xRXNjMEpCUVhOQ01GRXNkVUpCUVhWQ01VZ3NSVUZCVFhWR0xFbEJTWEpFT0VJc1IwRkRSbnBSTEhOQ1FVRnpRbTlTTEd0Q1FVRnJRbnBRTEZGQlFWRjVSU3hOUVVGUGNVc3NSVUZCWTNKTExFOUJZWHBGYVVzc2JVSkJRVzlDTEZOQlFWVkdMRVZCUVZkRExFVkJRVmN4U3l4RlFVRmhaMGdzUjBGREwwUXNTVUZCU1RKRkxFVkJRV04wVUN4eFFrRkJjVUp2VHl4RlFVRlZPVTRzVlVGQldUaE9MRVZCUVZVNVRpeFRRVUZYTEV0QlF6bEZhVkFzUlVGQlkzWlFMSEZDUVVGeFFuRlBMRVZCUVZVdlRpeFZRVUZaSzA0c1JVRkJWUzlPTEZOQlFWY3NTMEZGT1VWclVDeEZRVUZYY0VJc1JVRkJWVGRPTEhsQ1FVRXlRalpPTEVWQlFWVTNUaXgzUWtGQmQwSTRUU3hQUVVOc1JtOURMRVZCUVZkd1FpeEZRVUZWT1U0c2VVSkJRVEpDT0U0c1JVRkJWVGxPTEhkQ1FVRjNRamhOTEU5QlIyeEdjVU1zUlVGQk9FSXNUVUZCWmtvc1JVRkJjMElzUzBGQlQyeENMRVZCUVZVNVRpeFRRVU4wUkhGUUxFVkJRVGhDTEUxQlFXWktMRVZCUVhOQ0xFdEJRVTlzUWl4RlFVRlZMMDRzVTBGSmRFUnpVQ3hGUVVGelF5eE5RVUZtVGl4SFFVRnRReXhOUVVGYVJTeEZRVU01UTBzc1JVRkJjME1zVFVGQlprNHNSMEZCYlVNc1RVRkJXa1VzUlVGRE9VSXNUVUZCYUVKRExFZEJRWGRETEUxQlFXaENReXhGUVVNeFFuUk1MRXRCUVV0NVRDeGxRVUZsTEV0QlFVMXVUU3hGUVVGaFowZ3NSMEZET1VKcFJpeEpRVUY1UWtNc1NVRkRiRU40VEN4TFFVRkxNRXdzYTBKQlFXdENMRWxCUTAwc1pVRkJla0p1VGl4UlFVRlJReXhKUVVGSlF5eFZRVU5rTDBRc2NVSkJRWEZDYTBjc1ZVRkJWVThzWTBGQlkyNUNMRXRCUVV0VkxGTkJRVlVzUzBGSk4wTXNUVUZCWm5kTExFVkJRMFZFTEVsQlFXZENReXhKUVVOc1FteE1MRXRCUVVzd1RDeHJRa0ZCYTBJc1IwRkJTMUlzUjBGRFF5eGxRVUY2UWpOTkxGRkJRVkZETEVsQlFVbERMRlZCUTJRMFFpdzRRa0ZCT0VJNVF5eExRVUZMZVVNc1MwRkJUV3RNTEVsQlIzaENMRTFCUVZwRkxFZEJRMHhFTEVsQlFXRkRMRWRCUTJad1RDeExRVUZMTWt3c1lVRkJZU3hIUVVGTFVDeEhRVVZKTEdWQlFYcENOMDBzVVVGQlVVTXNTVUZCU1VNc1ZVRkRaQzlFTEhGQ1FVRnhRbXRITEZWQlFWVlBMR05CUVdOdVFpeExRVUZMVlN4VFFVRlZMRXRCUlhKRExFMUJRV2hDTkVzc1NVRkRiMElzWlVGQmVrSXZUU3hSUVVGUlF5eEpRVUZKUXl4VlFVTmtORUlzT0VKQlFUaENPVU1zUzBGQlMzbERMRXRCUVUwc1RVRkhNME5CTEV0QlFVdDVUQ3hsUVVGbFNDeEZRVUZqYUUwc1JVRkJZV2RJTEV0QlNXNUVjMFlzV1VGQllTeFhRVU5ZTEU5QlFVOXlVU3hSUVVGUmVVVXNUMEZUYWtJMlRDeHBRa0ZCYTBJc1UwRkJWVU1zUjBGRE1VSXNUMEZCVVRsTUxFdEJRVXN6UWl4TlFVTllMRWxCUVVzc1VVRkRUQ3hKUVVGTExFOUJRMHdzU1VGQlN5eFRRVU5NTEVsQlFVc3NUVUZEVEN4SlFVRkxMRTlCUTB3c1NVRkJTeXhUUVVOTUxFbEJRVXNzVTBGRFRDeEpRVUZMTEZGQlEwZ3NTVUZCU1RaRkxFVkJRVmxzUkN4TFFVRkxhVVFzWTBGQlkwTXNWVUZEYmtNc1IwRkJTVUVzUlVGRFJpeEpRVUZMTEVsQlFVbHpSeXhGUVVGSkxFVkJRVWRCTEVWQlFVbDBSeXhGUVVGVmRVY3NUMEZCVVVRc1NVRkRjRU4wUnl4RlFVRlZjMGNzUjBGQlIzVkRMRk5CUjJwQ0xFMUJRMFlzU1VGQlN5eFJRVU5NTEVsQlFVc3NWMEZEU0RkUkxHMUNRVUZ0UWpoUkxHRkJRV0ZvVFN4TlFVTm9ReXhOUVVOR0xFbEJRVXNzVDBGRFRDeEpRVUZMTEU5QlEwd3NTVUZCU3l4UFFVOHJRaXhsUVVGNlFucENMRkZCUVZGRExFbEJRVWxETEZOQlFUUkNNVVFzVjBGQlZTeEZRVUZQTEcxUlFVRnZVV2xHTEV0QlFVc3pRaXhOUVVGUk4wVXNaVUZCWlN4TFFVRk5kMGNzUzBGQlN6TkNMRTFCU1dwWU1rSXNTMEZCUzJsTkxHZENRVUZuUWtnc1IwRkRja0o2VWl4elFrRkJjMEkyVWl4WlFVRlpiRTBzVFVGRGJFTXZSaXhsUVVGbGExTXNiVUpCUVcxQ2JrMHNUVUZEYkVOQkxFdEJRVXNyUXl4WlFVRmpMRVZCUTI1Q0wwTXNTMEZCU3poR0xFOUJRVk1zUlVGRFpEbEdMRXRCUVV0cFJDeGpRVUZuUWl4TFFVVlJMR1ZCUVhwQ01VVXNVVUZCVVVNc1NVRkJTVU1zVlVGRFpEUkNMRGhDUVVFNFFqbERMRXRCUVV0NVF5eExRVUZOTEU5QlNUZERiMDBzYTBKQlFXMUNMRmRCUTJwQ0xFOUJRVTgzVVN4UlFVRlJlVVVzVVVGSmJrSjBSeXhSUVVGUk1Fd3NhMEpCUVd0Q0wwZ3NWVUZCVnl0SUxHdENRVUZyUW1Nc1RVRkJUM1pNTEdkQ1FVRm5RblZNTEU5QlJUbEZiVWNzVDBGQlQwTXNVVUZCVld4SUlpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDNKbFlXTjBMV1J2YlM5c2FXSXZVbVZoWTNSRVQwMURiMjF3YjI1bGJuUXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciBSZWFjdERPTUNvbXBvbmVudEZsYWdzPXtoYXNDYWNoZWRDaGlsZE5vZGVzOjF9O21vZHVsZS5leHBvcnRzPVJlYWN0RE9NQ29tcG9uZW50RmxhZ3M7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbEpsWVdOMFJFOU5RMjl0Y0c5dVpXNTBSbXhoWjNNdWFuTWlYU3dpYm1GdFpYTWlPbHNpVW1WaFkzUkVUMDFEYjIxd2IyNWxiblJHYkdGbmN5SXNJbWhoYzBOaFkyaGxaRU5vYVd4a1RtOWtaWE1pTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZSUVN4aFFVVkJMRWxCUVVsQkxIVkNRVUY1UWl4RFFVTXpRa01zYjBKQlFYRkNMRWRCUjNaQ1F5eFBRVUZQUXl4UlFVRlZTQ0lzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEMxa2IyMHZiR2xpTDFKbFlXTjBSRTlOUTI5dGNHOXVaVzUwUm14aFozTXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciBfcHJvZEludmFyaWFudD1yZXF1aXJlKFwiLi9yZWFjdFByb2RJbnZhcmlhbnRcIiksRE9NUHJvcGVydHk9cmVxdWlyZShcIi4vRE9NUHJvcGVydHlcIiksUmVhY3RET01Db21wb25lbnRGbGFncz1yZXF1aXJlKFwiLi9SZWFjdERPTUNvbXBvbmVudEZsYWdzXCIpLGludmFyaWFudD1yZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpLEFUVFJfTkFNRT1ET01Qcm9wZXJ0eS5JRF9BVFRSSUJVVEVfTkFNRSxGbGFncz1SZWFjdERPTUNvbXBvbmVudEZsYWdzLGludGVybmFsSW5zdGFuY2VLZXk9XCJfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSRcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtmdW5jdGlvbiBzaG91bGRQcmVjYWNoZU5vZGUoZSxuKXtyZXR1cm4gMT09PWUubm9kZVR5cGUmJmUuZ2V0QXR0cmlidXRlKEFUVFJfTkFNRSk9PT1TdHJpbmcobil8fDg9PT1lLm5vZGVUeXBlJiZlLm5vZGVWYWx1ZT09PVwiIHJlYWN0LXRleHQ6IFwiK24rXCIgXCJ8fDg9PT1lLm5vZGVUeXBlJiZlLm5vZGVWYWx1ZT09PVwiIHJlYWN0LWVtcHR5OiBcIituK1wiIFwifWZ1bmN0aW9uIGdldFJlbmRlcmVkSG9zdE9yVGV4dEZyb21Db21wb25lbnQoZSl7Zm9yKHZhciBuO249ZS5fcmVuZGVyZWRDb21wb25lbnQ7KWU9bjtyZXR1cm4gZX1mdW5jdGlvbiBwcmVjYWNoZU5vZGUoZSxuKXt2YXIgdD1nZXRSZW5kZXJlZEhvc3RPclRleHRGcm9tQ29tcG9uZW50KGUpO3QuX2hvc3ROb2RlPW4sbltpbnRlcm5hbEluc3RhbmNlS2V5XT10fWZ1bmN0aW9uIHVuY2FjaGVOb2RlKGUpe3ZhciBuPWUuX2hvc3ROb2RlO24mJihkZWxldGUgbltpbnRlcm5hbEluc3RhbmNlS2V5XSxlLl9ob3N0Tm9kZT1udWxsKX1mdW5jdGlvbiBwcmVjYWNoZUNoaWxkTm9kZXMoZSxuKXtpZighKGUuX2ZsYWdzJkZsYWdzLmhhc0NhY2hlZENoaWxkTm9kZXMpKXt2YXIgdD1lLl9yZW5kZXJlZENoaWxkcmVuLG89bi5maXJzdENoaWxkO2U6Zm9yKHZhciByIGluIHQpaWYodC5oYXNPd25Qcm9wZXJ0eShyKSl7dmFyIGE9dFtyXSxkPWdldFJlbmRlcmVkSG9zdE9yVGV4dEZyb21Db21wb25lbnQoYSkuX2RvbUlEO2lmKDAhPT1kKXtmb3IoO251bGwhPT1vO289by5uZXh0U2libGluZylpZihzaG91bGRQcmVjYWNoZU5vZGUobyxkKSl7cHJlY2FjaGVOb2RlKGEsbyk7Y29udGludWUgZX1cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcIlVuYWJsZSB0byBmaW5kIGVsZW1lbnQgd2l0aCBJRCAlcy5cIixkKTpfcHJvZEludmFyaWFudChcIjMyXCIsZCl9fWUuX2ZsYWdzfD1GbGFncy5oYXNDYWNoZWRDaGlsZE5vZGVzfX1mdW5jdGlvbiBnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZShlKXtpZihlW2ludGVybmFsSW5zdGFuY2VLZXldKXJldHVybiBlW2ludGVybmFsSW5zdGFuY2VLZXldO2Zvcih2YXIgbix0LG89W107IWVbaW50ZXJuYWxJbnN0YW5jZUtleV07KXtpZihvLnB1c2goZSksIWUucGFyZW50Tm9kZSlyZXR1cm4gbnVsbDtlPWUucGFyZW50Tm9kZX1mb3IoO2UmJih0PWVbaW50ZXJuYWxJbnN0YW5jZUtleV0pO2U9by5wb3AoKSluPXQsby5sZW5ndGgmJnByZWNhY2hlQ2hpbGROb2Rlcyh0LGUpO3JldHVybiBufWZ1bmN0aW9uIGdldEluc3RhbmNlRnJvbU5vZGUoZSl7dmFyIG49Z2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUoZSk7cmV0dXJuIG51bGwhPW4mJm4uX2hvc3ROb2RlPT09ZT9uOm51bGx9ZnVuY3Rpb24gZ2V0Tm9kZUZyb21JbnN0YW5jZShlKXtpZih2b2lkIDA9PT1lLl9ob3N0Tm9kZSYmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwiZ2V0Tm9kZUZyb21JbnN0YW5jZTogSW52YWxpZCBhcmd1bWVudC5cIik6X3Byb2RJbnZhcmlhbnQoXCIzM1wiKSksZS5faG9zdE5vZGUpcmV0dXJuIGUuX2hvc3ROb2RlO2Zvcih2YXIgbj1bXTshZS5faG9zdE5vZGU7KW4ucHVzaChlKSxlLl9ob3N0UGFyZW50fHwoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoITEsXCJSZWFjdCBET00gdHJlZSByb290IHNob3VsZCBhbHdheXMgaGF2ZSBhIG5vZGUgcmVmZXJlbmNlLlwiKTpfcHJvZEludmFyaWFudChcIjM0XCIpKSxlPWUuX2hvc3RQYXJlbnQ7Zm9yKDtuLmxlbmd0aDtlPW4ucG9wKCkpcHJlY2FjaGVDaGlsZE5vZGVzKGUsZS5faG9zdE5vZGUpO3JldHVybiBlLl9ob3N0Tm9kZX12YXIgUmVhY3RET01Db21wb25lbnRUcmVlPXtnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZTpnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSxnZXRJbnN0YW5jZUZyb21Ob2RlOmdldEluc3RhbmNlRnJvbU5vZGUsZ2V0Tm9kZUZyb21JbnN0YW5jZTpnZXROb2RlRnJvbUluc3RhbmNlLHByZWNhY2hlQ2hpbGROb2RlczpwcmVjYWNoZUNoaWxkTm9kZXMscHJlY2FjaGVOb2RlOnByZWNhY2hlTm9kZSx1bmNhY2hlTm9kZTp1bmNhY2hlTm9kZX07bW9kdWxlLmV4cG9ydHM9UmVhY3RET01Db21wb25lbnRUcmVlO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxKbFlXTjBSRTlOUTI5dGNHOXVaVzUwVkhKbFpTNXFjeUpkTENKdVlXMWxjeUk2V3lKZmNISnZaRWx1ZG1GeWFXRnVkQ0lzSW5KbGNYVnBjbVVpTENKRVQwMVFjbTl3WlhKMGVTSXNJbEpsWVdOMFJFOU5RMjl0Y0c5dVpXNTBSbXhoWjNNaUxDSnBiblpoY21saGJuUWlMQ0pCVkZSU1gwNUJUVVVpTENKSlJGOUJWRlJTU1VKVlZFVmZUa0ZOUlNJc0lrWnNZV2R6SWl3aWFXNTBaWEp1WVd4SmJuTjBZVzVqWlV0bGVTSXNJazFoZEdnaUxDSnlZVzVrYjIwaUxDSjBiMU4wY21sdVp5SXNJbk5zYVdObElpd2ljMmh2ZFd4a1VISmxZMkZqYUdWT2IyUmxJaXdpYm05a1pTSXNJbTV2WkdWSlJDSXNJbTV2WkdWVWVYQmxJaXdpWjJWMFFYUjBjbWxpZFhSbElpd2lVM1J5YVc1bklpd2libTlrWlZaaGJIVmxJaXdpWjJWMFVtVnVaR1Z5WldSSWIzTjBUM0pVWlhoMFJuSnZiVU52YlhCdmJtVnVkQ0lzSW1OdmJYQnZibVZ1ZENJc0luSmxibVJsY21Wa0lpd2lYM0psYm1SbGNtVmtRMjl0Y0c5dVpXNTBJaXdpY0hKbFkyRmphR1ZPYjJSbElpd2lhVzV6ZENJc0ltaHZjM1JKYm5OMElpd2lYMmh2YzNST2IyUmxJaXdpZFc1allXTm9aVTV2WkdVaUxDSndjbVZqWVdOb1pVTm9hV3hrVG05a1pYTWlMQ0pmWm14aFozTWlMQ0pvWVhORFlXTm9aV1JEYUdsc1pFNXZaR1Z6SWl3aVkyaHBiR1J5Wlc0aUxDSmZjbVZ1WkdWeVpXUkRhR2xzWkhKbGJpSXNJbU5vYVd4a1RtOWtaU0lzSW1acGNuTjBRMmhwYkdRaUxDSnZkWFJsY2lJc0ltNWhiV1VpTENKb1lYTlBkMjVRY205d1pYSjBlU0lzSW1Ob2FXeGtTVzV6ZENJc0ltTm9hV3hrU1VRaUxDSmZaRzl0U1VRaUxDSnVaWGgwVTJsaWJHbHVaeUlzSW5CeWIyTmxjM01pTENKbGJuWWlMQ0pPVDBSRlgwVk9WaUlzSW1kbGRFTnNiM05sYzNSSmJuTjBZVzVqWlVaeWIyMU9iMlJsSWl3aVkyeHZjMlZ6ZENJc0luQmhjbVZ1ZEhNaUxDSndkWE5vSWl3aWNHRnlaVzUwVG05a1pTSXNJbkJ2Y0NJc0lteGxibWQwYUNJc0ltZGxkRWx1YzNSaGJtTmxSbkp2YlU1dlpHVWlMQ0puWlhST2IyUmxSbkp2YlVsdWMzUmhibU5sSWl3aWRXNWtaV1pwYm1Wa0lpd2lYMmh2YzNSUVlYSmxiblFpTENKU1pXRmpkRVJQVFVOdmJYQnZibVZ1ZEZSeVpXVWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRlJRU3hoUVVWQkxFbEJRVWxCTEdWQlFXbENReXhSUVVGUkxIZENRVVY2UWtNc1dVRkJZMFFzVVVGQlVTeHBRa0ZEZEVKRkxIVkNRVUY1UWtZc1VVRkJVU3cwUWtGRmFrTkhMRlZCUVZsSUxGRkJRVkVzYzBKQlJYQkNTU3hWUVVGWlNDeFpRVUZaU1N4clFrRkRlRUpETEUxQlFWRktMSFZDUVVWU1N5eHZRa0ZCYzBJc01rSkJRVFpDUXl4TFFVRkxReXhUUVVGVFF5eFRRVUZUTEVsQlFVbERMRTFCUVUwc1IwRkxlRVlzVTBGQlUwTXNiVUpCUVcxQ1F5eEZRVUZOUXl4SFFVTm9ReXhQUVVGNVFpeEpRVUZzUWtRc1JVRkJTMFVzVlVGQmEwSkdMRVZCUVV0SExHRkJRV0ZhTEdGQlFXVmhMRTlCUVU5SUxFbEJRVFpDTEVsQlFXeENSQ3hGUVVGTFJTeFZRVUZyUWtZc1JVRkJTMHNzV1VGQll5eG5Ra0ZCYTBKS0xFVkJRVk1zUzBGQmVVSXNTVUZCYkVKRUxFVkJRVXRGTEZWQlFXdENSaXhGUVVGTFN5eFpRVUZqTEdsQ1FVRnRRa29zUlVGQlV5eEpRVlZ5VHl4VFFVRlRTeXh0UTBGQmJVTkRMRWRCUlRGRExFbEJSRUVzU1VGQlNVTXNSVUZEUjBFc1JVRkJWMFFzUlVGQlZVVXNiMEpCUXpGQ1JpeEZRVUZaUXl4RlFVVmtMRTlCUVU5RUxFVkJUMVFzVTBGQlUwY3NZVUZCWVVNc1JVRkJUVmdzUjBGRE1VSXNTVUZCU1Zrc1JVRkJWMDRzYlVOQlFXMURTeXhIUVVOc1JFTXNSVUZCVTBNc1ZVRkJXV0lzUlVGRGNrSkJMRVZCUVV0T0xIRkNRVUYxUW10Q0xFVkJSemxDTEZOQlFWTkZMRmxCUVZsSUxFZEJRMjVDTEVsQlFVbFlMRVZCUVU5WExFVkJRVXRGTEZWQlExcGlMRmRCUTB0QkxFVkJRVXRPTEhGQ1FVTmFhVUlzUlVGQlMwVXNWVUZCV1N4TlFXdENja0lzVTBGQlUwVXNiVUpCUVcxQ1NpeEZRVUZOV0N4SFFVTm9ReXhMUVVGSlZ5eEZRVUZMU3l4UFFVRlRka0lzVFVGQlRYZENMSEZDUVVGNFFpeERRVWRCTEVsQlFVbERMRVZCUVZkUUxFVkJRVXRSTEd0Q1FVTm9Ra01zUlVGQldYQkNMRVZCUVV0eFFpeFhRVU55UWtNc1JVRkJUeXhKUVVGTExFbEJRVWxETEV0QlFWRk1MRVZCUTNSQ0xFZEJRVXRCTEVWQlFWTk5MR1ZCUVdWRUxFZEJRVGRDTEVOQlIwRXNTVUZCU1VVc1JVRkJXVkFzUlVGQlUwc3NSMEZEY2tKSExFVkJRVlZ3UWl4dFEwRkJiVU50UWl4SFFVRlhSU3hQUVVNMVJDeEhRVUZuUWl4SlFVRmFSQ3hGUVVGS0xFTkJTMEVzUzBGQmNVSXNUMEZCWkU0c1JVRkJiMEpCTEVWQlFWbEJMRVZCUVZWUkxGbEJReTlETEVkQlFVazNRaXh0UWtGQmJVSnhRaXhGUVVGWFRTeEhRVUZWTEVOQlF6RkRhRUlzWVVGQllXVXNSVUZCVjB3c1IwRkRlRUlzVTBGQlUwVXNSVUZKY1VJc1pVRkJla0pQTEZGQlFWRkRMRWxCUVVsRExGTkJRVFJDZWtNc1YwRkJWU3hGUVVGUExIRkRRVUZ6UTI5RExFZEJRVmQ0UXl4bFFVRmxMRXRCUVUxM1F5eEpRVVV4U1dZc1JVRkJTMHNzVVVGQlZYWkNMRTFCUVUxM1FpeHhRa0ZQZGtJc1UwRkJVMlVzTWtKQlFUSkNhRU1zUjBGRGJFTXNSMEZCU1VFc1JVRkJTMDRzY1VKQlExQXNUMEZCVDAwc1JVRkJTMDRzY1VKQlMyUXNTVUZFUVN4SlFWbEpkVU1zUlVGRFFYUkNMRVZCWWtGMVFpeEZRVUZWTEVsQlEwNXNReXhGUVVGTFRpeHpRa0ZCYzBJc1EwRkZha01zUjBGRVFYZERMRVZCUVZGRExFdEJRVXR1UXl4SlFVTlVRU3hGUVVGTGIwTXNWMEZMVUN4UFFVRlBMRXRCU2xCd1F5eEZRVUZQUVN4RlFVRkxiME1zVjBGVmFFSXNTMEZCVDNCRExFbEJRVk5YTEVWQlFVOVlMRVZCUVV0T0xITkNRVUYxUWswc1JVRkJUMnRETEVWQlFWRkhMRTFCUTJoRlNpeEZRVUZWZEVJc1JVRkRUblZDTEVWQlFWRkpMRkZCUTFaMlFpeHRRa0ZCYlVKS0xFVkJRVTFZTEVkQlNUZENMRTlCUVU5cFF5eEZRVTlVTEZOQlFWTk5MRzlDUVVGdlFuWkRMRWRCUXpOQ0xFbEJRVWxYTEVWQlFVOXhRaXd5UWtGQk1rSm9ReXhIUVVOMFF5eFBRVUZaTEUxQlFWSlhMRWRCUVdkQ1FTeEZRVUZMUlN4WlFVRmpZaXhGUVVNNVFsY3NSVUZGUVN4TFFWRllMRk5CUVZNMlFpeHZRa0ZCYjBJM1FpeEhRVXN6UWl4UlFVWnhRamhDTEVsQlFXNUNPVUlzUlVGQlMwVXNXVUZCYjBRc1pVRkJla0puUWl4UlFVRlJReXhKUVVGSlF5eFRRVUUwUW5wRExGZEJRVlVzUlVGQlR5d3dRMEZCTkVOS0xHVkJRV1VzVDBGRmJFcDVRaXhGUVVGTFJTeFZRVU5RTEU5QlFVOUdMRVZCUVV0RkxGVkJTMlFzU1VGRVFTeEpRVUZKY1VJc1JVRkJWU3hKUVVOT2RrSXNSVUZCUzBVc1YwRkRXSEZDTEVWQlFWRkRMRXRCUVV0NFFpeEhRVU5hUVN4RlFVRkxLMElzWTBGQmRVTXNaVUZCZWtKaUxGRkJRVkZETEVsQlFVbERMRk5CUVRSQ2VrTXNWMEZCVlN4RlFVRlBMRFJFUVVFNFJFb3NaVUZCWlN4UFFVTXhTbmxDTEVWQlFVOUJMRVZCUVVzclFpeFpRVXRrTEV0QlFVOVNMRVZCUVZGSkxFOUJRVkV6UWl4RlFVRlBkVUlzUlVGQlVVY3NUVUZEY0VOMFFpeHRRa0ZCYlVKS0xFVkJRVTFCTEVWQlFVdEZMRmRCUjJoRExFOUJRVTlHTEVWQlFVdEZMRlZCUjJRc1NVRkJTVGhDTEhOQ1FVRjNRaXhEUVVNeFFsZ3NNa0pCUVRSQ1FTd3lRa0ZETlVKUExHOUNRVUZ4UWtFc2IwSkJRM0pDUXl4dlFrRkJjVUpCTEc5Q1FVTnlRbnBDTEcxQ1FVRnZRa0VzYlVKQlEzQkNUQ3hoUVVGalFTeGhRVU5rU1N4WlFVRmhRU3hoUVVkbU9FSXNUMEZCVDBNc1VVRkJWVVlpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdFpHOXRMMnhwWWk5U1pXRmpkRVJQVFVOdmJYQnZibVZ1ZEZSeVpXVXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciB2YWxpZGF0ZURPTU5lc3Rpbmc9cmVxdWlyZShcIi4vdmFsaWRhdGVET01OZXN0aW5nXCIpLERPQ19OT0RFX1RZUEU9OTtmdW5jdGlvbiBSZWFjdERPTUNvbnRhaW5lckluZm8oZSxuKXt2YXIgdD17X3RvcExldmVsV3JhcHBlcjplLF9pZENvdW50ZXI6MSxfb3duZXJEb2N1bWVudDpuP24ubm9kZVR5cGU9PT1ET0NfTk9ERV9UWVBFP246bi5vd25lckRvY3VtZW50Om51bGwsX25vZGU6bixfdGFnOm4/bi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpOm51bGwsX25hbWVzcGFjZVVSSTpuP24ubmFtZXNwYWNlVVJJOm51bGx9O3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJih0Ll9hbmNlc3RvckluZm89bj92YWxpZGF0ZURPTU5lc3RpbmcudXBkYXRlZEFuY2VzdG9ySW5mbyhudWxsLHQuX3RhZyxudWxsKTpudWxsKSx0fW1vZHVsZS5leHBvcnRzPVJlYWN0RE9NQ29udGFpbmVySW5mbztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSmxZV04wUkU5TlEyOXVkR0ZwYm1WeVNXNW1ieTVxY3lKZExDSnVZVzFsY3lJNld5SjJZV3hwWkdGMFpVUlBUVTVsYzNScGJtY2lMQ0p5WlhGMWFYSmxJaXdpUkU5RFgwNVBSRVZmVkZsUVJTSXNJbEpsWVdOMFJFOU5RMjl1ZEdGcGJtVnlTVzVtYnlJc0luUnZjRXhsZG1Wc1YzSmhjSEJsY2lJc0ltNXZaR1VpTENKcGJtWnZJaXdpWDNSdmNFeGxkbVZzVjNKaGNIQmxjaUlzSWw5cFpFTnZkVzUwWlhJaUxDSmZiM2R1WlhKRWIyTjFiV1Z1ZENJc0ltNXZaR1ZVZVhCbElpd2liM2R1WlhKRWIyTjFiV1Z1ZENJc0lsOXViMlJsSWl3aVgzUmhaeUlzSW01dlpHVk9ZVzFsSWl3aWRHOU1iM2RsY2tOaGMyVWlMQ0pmYm1GdFpYTndZV05sVlZKSklpd2libUZ0WlhOd1lXTmxWVkpKSWl3aWNISnZZMlZ6Y3lJc0ltVnVkaUlzSWs1UFJFVmZSVTVXSWl3aVgyRnVZMlZ6ZEc5eVNXNW1ieUlzSW5Wd1pHRjBaV1JCYm1ObGMzUnZja2x1Wm04aUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25SeklsMHNJbTFoY0hCcGJtZHpJam9pUVVGUlFTeGhRVVZCTEVsQlFVbEJMRzFDUVVGeFFrTXNVVUZCVVN4M1FrRkZOMEpETEdOQlFXZENMRVZCUlhCQ0xGTkJRVk5ETEhOQ1FVRnpRa01zUlVGQmFVSkRMRWRCUXpsRExFbEJRVWxETEVWQlFVOHNRMEZEVkVNc2FVSkJRV3RDU0N4RlFVTnNRa2tzVjBGQldTeEZRVU5hUXl4bFFVRm5Ra29zUlVGQlQwRXNSVUZCUzBzc1YwRkJZVklzWTBGQlowSkhMRVZCUVU5QkxFVkJRVXROTEdOQlFXZENMRXRCUTNKR1F5eE5RVUZQVUN4RlFVTlFVU3hMUVVGTlVpeEZRVUZQUVN4RlFVRkxVeXhUUVVGVFF5eGpRVUZuUWl4TFFVTXpRME1zWTBGQlpWZ3NSVUZCVDBFc1JVRkJTMWtzWVVGQlpTeE5RVXMxUXl4TlFVZzJRaXhsUVVGNlFrTXNVVUZCVVVNc1NVRkJTVU1zVjBGRFpHUXNSVUZCUzJVc1kwRkJaMEpvUWl4RlFVRlBUQ3h0UWtGQmJVSnpRaXh2UWtGQmIwSXNTMEZCVFdoQ0xFVkJRVXRQTEV0QlFVMHNUVUZCVVN4TlFVVjJSbEFzUlVGSFZHbENMRTlCUVU5RExGRkJRVlZ5UWlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDMWtiMjB2YkdsaUwxSmxZV04wUkU5TlEyOXVkR0ZwYm1WeVNXNW1ieTVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBfYXNzaWduPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLERPTUxhenlUcmVlPXJlcXVpcmUoXCIuL0RPTUxhenlUcmVlXCIpLFJlYWN0RE9NQ29tcG9uZW50VHJlZT1yZXF1aXJlKFwiLi9SZWFjdERPTUNvbXBvbmVudFRyZWVcIiksUmVhY3RET01FbXB0eUNvbXBvbmVudD1mdW5jdGlvbihlKXt0aGlzLl9jdXJyZW50RWxlbWVudD1udWxsLHRoaXMuX2hvc3ROb2RlPW51bGwsdGhpcy5faG9zdFBhcmVudD1udWxsLHRoaXMuX2hvc3RDb250YWluZXJJbmZvPW51bGwsdGhpcy5fZG9tSUQ9MH07X2Fzc2lnbihSZWFjdERPTUVtcHR5Q29tcG9uZW50LnByb3RvdHlwZSx7bW91bnRDb21wb25lbnQ6ZnVuY3Rpb24oZSx0LG4sbyl7dmFyIHI9bi5faWRDb3VudGVyKys7dGhpcy5fZG9tSUQ9cix0aGlzLl9ob3N0UGFyZW50PXQsdGhpcy5faG9zdENvbnRhaW5lckluZm89bjt2YXIgYT1cIiByZWFjdC1lbXB0eTogXCIrdGhpcy5fZG9tSUQrXCIgXCI7aWYoZS51c2VDcmVhdGVFbGVtZW50KXt2YXIgaT1uLl9vd25lckRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoYSk7cmV0dXJuIFJlYWN0RE9NQ29tcG9uZW50VHJlZS5wcmVjYWNoZU5vZGUodGhpcyxpKSxET01MYXp5VHJlZShpKX1yZXR1cm4gZS5yZW5kZXJUb1N0YXRpY01hcmt1cD9cIlwiOlwiXFx4M2MhLS1cIithK1wiLS1cXHgzZVwifSxyZWNlaXZlQ29tcG9uZW50OmZ1bmN0aW9uKCl7fSxnZXRIb3N0Tm9kZTpmdW5jdGlvbigpe3JldHVybiBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZSh0aGlzKX0sdW5tb3VudENvbXBvbmVudDpmdW5jdGlvbigpe1JlYWN0RE9NQ29tcG9uZW50VHJlZS51bmNhY2hlTm9kZSh0aGlzKX19KSxtb2R1bGUuZXhwb3J0cz1SZWFjdERPTUVtcHR5Q29tcG9uZW50O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxKbFlXTjBSRTlOUlcxd2RIbERiMjF3YjI1bGJuUXVhbk1pWFN3aWJtRnRaWE1pT2xzaVgyRnpjMmxuYmlJc0luSmxjWFZwY21VaUxDSkVUMDFNWVhwNVZISmxaU0lzSWxKbFlXTjBSRTlOUTI5dGNHOXVaVzUwVkhKbFpTSXNJbEpsWVdOMFJFOU5SVzF3ZEhsRGIyMXdiMjVsYm5RaUxDSnBibk4wWVc1MGFXRjBaU0lzSW5Sb2FYTWlMQ0pmWTNWeWNtVnVkRVZzWlcxbGJuUWlMQ0pmYUc5emRFNXZaR1VpTENKZmFHOXpkRkJoY21WdWRDSXNJbDlvYjNOMFEyOXVkR0ZwYm1WeVNXNW1ieUlzSWw5a2IyMUpSQ0lzSW5CeWIzUnZkSGx3WlNJc0ltMXZkVzUwUTI5dGNHOXVaVzUwSWl3aWRISmhibk5oWTNScGIyNGlMQ0pvYjNOMFVHRnlaVzUwSWl3aWFHOXpkRU52Ym5SaGFXNWxja2x1Wm04aUxDSmpiMjUwWlhoMElpd2laRzl0U1VRaUxDSmZhV1JEYjNWdWRHVnlJaXdpYm05a1pWWmhiSFZsSWl3aWRYTmxRM0psWVhSbFJXeGxiV1Z1ZENJc0ltNXZaR1VpTENKZmIzZHVaWEpFYjJOMWJXVnVkQ0lzSW1OeVpXRjBaVU52YlcxbGJuUWlMQ0p3Y21WallXTm9aVTV2WkdVaUxDSnlaVzVrWlhKVWIxTjBZWFJwWTAxaGNtdDFjQ0lzSW5KbFkyVnBkbVZEYjIxd2IyNWxiblFpTENKblpYUkliM04wVG05a1pTSXNJbWRsZEU1dlpHVkdjbTl0U1c1emRHRnVZMlVpTENKMWJtMXZkVzUwUTI5dGNHOXVaVzUwSWl3aWRXNWpZV05vWlU1dlpHVWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRlJRU3hoUVVWQkxFbEJRVWxCTEZGQlFWVkRMRkZCUVZFc2FVSkJSV3hDUXl4WlFVRmpSQ3hSUVVGUkxHbENRVU4wUWtVc2MwSkJRWGRDUml4UlFVRlJMREpDUVVWb1EwY3NkVUpCUVhsQ0xGTkJRVlZETEVkQlJYSkRReXhMUVVGTFF5eG5Ra0ZCYTBJc1MwRkZka0pFTEV0QlFVdEZMRlZCUVZrc1MwRkRha0pHTEV0QlFVdEhMRmxCUVdNc1MwRkRia0pJTEV0QlFVdEpMRzFDUVVGeFFpeExRVU14UWtvc1MwRkJTMHNzVDBGQlV5eEhRVVZvUWxnc1VVRkJVVWtzZFVKQlFYVkNVU3hWUVVGWExFTkJRM2hEUXl4bFFVRm5RaXhUUVVGVlF5eEZRVUZoUXl4RlFVRlpReXhGUVVGdFFrTXNSMEZEY0VVc1NVRkJTVU1zUlVGQlVVWXNSVUZCYTBKSExHRkJRemxDWWl4TFFVRkxTeXhQUVVGVFR5eEZRVU5rV2l4TFFVRkxSeXhaUVVGalRTeEZRVU51UWxRc1MwRkJTMGtzYlVKQlFYRkNUU3hGUVVVeFFpeEpRVUZKU1N4RlFVRlpMR2xDUVVGdFFtUXNTMEZCUzBzc1QwRkJVeXhKUVVOcVJDeEhRVUZKUnl4RlFVRlpUeXhwUWtGQmEwSXNRMEZEYUVNc1NVRkRTVU1zUlVGRVowSk9MRVZCUVd0Q1R5eGxRVU5pUXl4alFVRmpTaXhIUVVWMlF5eFBRVVJCYWtJc2MwSkJRWE5DYzBJc1lVRkJZVzVDTEV0QlFVMW5RaXhIUVVOc1EzQkNMRmxCUVZsdlFpeEhRVVZ1UWl4UFFVRkpVaXhGUVVGWldTeHhRa0ZKVUN4SFFVVkdMRlZCUVZOT0xFVkJRVmtzVlVGSGFFTlBMR2xDUVVGclFpeGhRVU5zUWtNc1dVRkJZU3hYUVVOWUxFOUJRVTk2UWl4elFrRkJjMEl3UWl4dlFrRkJiMEoyUWl4UFFVVnVSSGRDTEdsQ1FVRnJRaXhYUVVOb1FqTkNMSE5DUVVGelFqUkNMRmxCUVZsNlFpeFRRVWwwUXpCQ0xFOUJRVTlETEZGQlFWVTNRaUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEMxa2IyMHZiR2xpTDFKbFlXTjBSRTlOUlcxd2RIbERiMjF3YjI1bGJuUXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciBSZWFjdERPTUZlYXR1cmVGbGFncz17dXNlQ3JlYXRlRWxlbWVudDohMCx1c2VGaWJlcjohMX07bW9kdWxlLmV4cG9ydHM9UmVhY3RET01GZWF0dXJlRmxhZ3M7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbEpsWVdOMFJFOU5SbVZoZEhWeVpVWnNZV2R6TG1weklsMHNJbTVoYldWeklqcGJJbEpsWVdOMFJFOU5SbVZoZEhWeVpVWnNZV2R6SWl3aWRYTmxRM0psWVhSbFJXeGxiV1Z1ZENJc0luVnpaVVpwWW1WeUlpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlVVRXNZVUZGUVN4SlFVRkpRU3h4UWtGQmRVSXNRMEZEZWtKRExHdENRVUZyUWl4RlFVTnNRa01zVlVGQlZTeEhRVWRhUXl4UFFVRlBReXhSUVVGVlNpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzFrYjIwdmJHbGlMMUpsWVdOMFJFOU5SbVZoZEhWeVpVWnNZV2R6TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgRE9NQ2hpbGRyZW5PcGVyYXRpb25zPXJlcXVpcmUoXCIuL0RPTUNoaWxkcmVuT3BlcmF0aW9uc1wiKSxSZWFjdERPTUNvbXBvbmVudFRyZWU9cmVxdWlyZShcIi4vUmVhY3RET01Db21wb25lbnRUcmVlXCIpLFJlYWN0RE9NSURPcGVyYXRpb25zPXtkYW5nZXJvdXNseVByb2Nlc3NDaGlsZHJlblVwZGF0ZXM6ZnVuY3Rpb24oZSxyKXt2YXIgdD1SZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZShlKTtET01DaGlsZHJlbk9wZXJhdGlvbnMucHJvY2Vzc1VwZGF0ZXModCxyKX19O21vZHVsZS5leHBvcnRzPVJlYWN0RE9NSURPcGVyYXRpb25zO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxKbFlXTjBSRTlOU1VSUGNHVnlZWFJwYjI1ekxtcHpJbDBzSW01aGJXVnpJanBiSWtSUFRVTm9hV3hrY21WdVQzQmxjbUYwYVc5dWN5SXNJbkpsY1hWcGNtVWlMQ0pTWldGamRFUlBUVU52YlhCdmJtVnVkRlJ5WldVaUxDSlNaV0ZqZEVSUFRVbEVUM0JsY21GMGFXOXVjeUlzSW1SaGJtZGxjbTkxYzJ4NVVISnZZMlZ6YzBOb2FXeGtjbVZ1VlhCa1lYUmxjeUlzSW5CaGNtVnVkRWx1YzNRaUxDSjFjR1JoZEdWeklpd2libTlrWlNJc0ltZGxkRTV2WkdWR2NtOXRTVzV6ZEdGdVkyVWlMQ0p3Y205alpYTnpWWEJrWVhSbGN5SXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlYU3dpYldGd2NHbHVaM01pT2lKQlFWRkJMR0ZCUlVFc1NVRkJTVUVzYzBKQlFYZENReXhSUVVGUkxESkNRVU5vUTBNc2MwSkJRWGRDUkN4UlFVRlJMREpDUVV0b1EwVXNjVUpCUVhWQ0xFTkJUM3BDUXl4clEwRkJiVU1zVTBGQlZVTXNSVUZCV1VNc1IwRkRka1FzU1VGQlNVTXNSVUZCVDB3c2MwSkJRWE5DVFN4dlFrRkJiMEpJTEVkQlEzSkVUQ3h6UWtGQmMwSlRMR1ZCUVdWR0xFVkJRVTFFTEV0QlNTOURTU3hQUVVGUFF5eFJRVUZWVWlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDMWtiMjB2YkdsaUwxSmxZV04wUkU5TlNVUlBjR1Z5WVhScGIyNXpMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBfcHJvZEludmFyaWFudD1yZXF1aXJlKFwiLi9yZWFjdFByb2RJbnZhcmlhbnRcIiksX2Fzc2lnbj1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxET01Qcm9wZXJ0eU9wZXJhdGlvbnM9cmVxdWlyZShcIi4vRE9NUHJvcGVydHlPcGVyYXRpb25zXCIpLExpbmtlZFZhbHVlVXRpbHM9cmVxdWlyZShcIi4vTGlua2VkVmFsdWVVdGlsc1wiKSxSZWFjdERPTUNvbXBvbmVudFRyZWU9cmVxdWlyZShcIi4vUmVhY3RET01Db21wb25lbnRUcmVlXCIpLFJlYWN0VXBkYXRlcz1yZXF1aXJlKFwiLi9SZWFjdFVwZGF0ZXNcIiksaW52YXJpYW50PXJlcXVpcmUoXCJmYmpzL2xpYi9pbnZhcmlhbnRcIiksd2FybmluZz1yZXF1aXJlKFwiZmJqcy9saWIvd2FybmluZ1wiKSxkaWRXYXJuVmFsdWVMaW5rPSExLGRpZFdhcm5DaGVja2VkTGluaz0hMSxkaWRXYXJuVmFsdWVEZWZhdWx0VmFsdWU9ITEsZGlkV2FybkNoZWNrZWREZWZhdWx0Q2hlY2tlZD0hMSxkaWRXYXJuQ29udHJvbGxlZFRvVW5jb250cm9sbGVkPSExLGRpZFdhcm5VbmNvbnRyb2xsZWRUb0NvbnRyb2xsZWQ9ITE7ZnVuY3Rpb24gZm9yY2VVcGRhdGVJZk1vdW50ZWQoKXt0aGlzLl9yb290Tm9kZUlEJiZSZWFjdERPTUlucHV0LnVwZGF0ZVdyYXBwZXIodGhpcyl9ZnVuY3Rpb24gaXNDb250cm9sbGVkKGUpe3JldHVyblwiY2hlY2tib3hcIj09PWUudHlwZXx8XCJyYWRpb1wiPT09ZS50eXBlP251bGwhPWUuY2hlY2tlZDpudWxsIT1lLnZhbHVlfXZhciBSZWFjdERPTUlucHV0PXtnZXRIb3N0UHJvcHM6ZnVuY3Rpb24oZSxuKXt2YXIgdD1MaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKG4pLG89TGlua2VkVmFsdWVVdGlscy5nZXRDaGVja2VkKG4pO3JldHVybiBfYXNzaWduKHt0eXBlOnZvaWQgMCxzdGVwOnZvaWQgMCxtaW46dm9pZCAwLG1heDp2b2lkIDB9LG4se2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOm51bGwhPXQ/dDplLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlLGNoZWNrZWQ6bnVsbCE9bz9vOmUuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZCxvbkNoYW5nZTplLl93cmFwcGVyU3RhdGUub25DaGFuZ2V9KX0sbW91bnRXcmFwcGVyOmZ1bmN0aW9uKGUsbil7aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVil7TGlua2VkVmFsdWVVdGlscy5jaGVja1Byb3BUeXBlcyhcImlucHV0XCIsbixlLl9jdXJyZW50RWxlbWVudC5fb3duZXIpO3ZhciB0PWUuX2N1cnJlbnRFbGVtZW50Ll9vd25lcjt2b2lkIDA9PT1uLnZhbHVlTGlua3x8ZGlkV2FyblZhbHVlTGlua3x8KFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcoITEsXCJgdmFsdWVMaW5rYCBwcm9wIG9uIGBpbnB1dGAgaXMgZGVwcmVjYXRlZDsgc2V0IGB2YWx1ZWAgYW5kIGBvbkNoYW5nZWAgaW5zdGVhZC5cIiksZGlkV2FyblZhbHVlTGluaz0hMCksdm9pZCAwPT09bi5jaGVja2VkTGlua3x8ZGlkV2FybkNoZWNrZWRMaW5rfHwoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FybmluZyghMSxcImBjaGVja2VkTGlua2AgcHJvcCBvbiBgaW5wdXRgIGlzIGRlcHJlY2F0ZWQ7IHNldCBgdmFsdWVgIGFuZCBgb25DaGFuZ2VgIGluc3RlYWQuXCIpLGRpZFdhcm5DaGVja2VkTGluaz0hMCksdm9pZCAwPT09bi5jaGVja2VkfHx2b2lkIDA9PT1uLmRlZmF1bHRDaGVja2VkfHxkaWRXYXJuQ2hlY2tlZERlZmF1bHRDaGVja2VkfHwoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FybmluZyghMSxcIiVzIGNvbnRhaW5zIGFuIGlucHV0IG9mIHR5cGUgJXMgd2l0aCBib3RoIGNoZWNrZWQgYW5kIGRlZmF1bHRDaGVja2VkIHByb3BzLiBJbnB1dCBlbGVtZW50cyBtdXN0IGJlIGVpdGhlciBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCAoc3BlY2lmeSBlaXRoZXIgdGhlIGNoZWNrZWQgcHJvcCwgb3IgdGhlIGRlZmF1bHRDaGVja2VkIHByb3AsIGJ1dCBub3QgYm90aCkuIERlY2lkZSBiZXR3ZWVuIHVzaW5nIGEgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgaW5wdXQgZWxlbWVudCBhbmQgcmVtb3ZlIG9uZSBvZiB0aGVzZSBwcm9wcy4gTW9yZSBpbmZvOiBodHRwczovL2ZiLm1lL3JlYWN0LWNvbnRyb2xsZWQtY29tcG9uZW50c1wiLHQmJnQuZ2V0TmFtZSgpfHxcIkEgY29tcG9uZW50XCIsbi50eXBlKSxkaWRXYXJuQ2hlY2tlZERlZmF1bHRDaGVja2VkPSEwKSx2b2lkIDA9PT1uLnZhbHVlfHx2b2lkIDA9PT1uLmRlZmF1bHRWYWx1ZXx8ZGlkV2FyblZhbHVlRGVmYXVsdFZhbHVlfHwoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FybmluZyghMSxcIiVzIGNvbnRhaW5zIGFuIGlucHV0IG9mIHR5cGUgJXMgd2l0aCBib3RoIHZhbHVlIGFuZCBkZWZhdWx0VmFsdWUgcHJvcHMuIElucHV0IGVsZW1lbnRzIG11c3QgYmUgZWl0aGVyIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkIChzcGVjaWZ5IGVpdGhlciB0aGUgdmFsdWUgcHJvcCwgb3IgdGhlIGRlZmF1bHRWYWx1ZSBwcm9wLCBidXQgbm90IGJvdGgpLiBEZWNpZGUgYmV0d2VlbiB1c2luZyBhIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkIGlucHV0IGVsZW1lbnQgYW5kIHJlbW92ZSBvbmUgb2YgdGhlc2UgcHJvcHMuIE1vcmUgaW5mbzogaHR0cHM6Ly9mYi5tZS9yZWFjdC1jb250cm9sbGVkLWNvbXBvbmVudHNcIix0JiZ0LmdldE5hbWUoKXx8XCJBIGNvbXBvbmVudFwiLG4udHlwZSksZGlkV2FyblZhbHVlRGVmYXVsdFZhbHVlPSEwKX12YXIgbz1uLmRlZmF1bHRWYWx1ZTtlLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOm51bGwhPW4uY2hlY2tlZD9uLmNoZWNrZWQ6bi5kZWZhdWx0Q2hlY2tlZCxpbml0aWFsVmFsdWU6bnVsbCE9bi52YWx1ZT9uLnZhbHVlOm8sbGlzdGVuZXJzOm51bGwsb25DaGFuZ2U6X2hhbmRsZUNoYW5nZS5iaW5kKGUpLGNvbnRyb2xsZWQ6aXNDb250cm9sbGVkKG4pfX0sdXBkYXRlV3JhcHBlcjpmdW5jdGlvbihlKXt2YXIgbj1lLl9jdXJyZW50RWxlbWVudC5wcm9wcztpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXt2YXIgdD1pc0NvbnRyb2xsZWQobiksbz1lLl9jdXJyZW50RWxlbWVudC5fb3duZXI7ZS5fd3JhcHBlclN0YXRlLmNvbnRyb2xsZWR8fCF0fHxkaWRXYXJuVW5jb250cm9sbGVkVG9Db250cm9sbGVkfHwoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FybmluZyghMSxcIiVzIGlzIGNoYW5naW5nIGFuIHVuY29udHJvbGxlZCBpbnB1dCBvZiB0eXBlICVzIHRvIGJlIGNvbnRyb2xsZWQuIElucHV0IGVsZW1lbnRzIHNob3VsZCBub3Qgc3dpdGNoIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBEZWNpZGUgYmV0d2VlbiB1c2luZyBhIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkIGlucHV0IGVsZW1lbnQgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgY29tcG9uZW50LiBNb3JlIGluZm86IGh0dHBzOi8vZmIubWUvcmVhY3QtY29udHJvbGxlZC1jb21wb25lbnRzXCIsbyYmby5nZXROYW1lKCl8fFwiQSBjb21wb25lbnRcIixuLnR5cGUpLGRpZFdhcm5VbmNvbnRyb2xsZWRUb0NvbnRyb2xsZWQ9ITApLCFlLl93cmFwcGVyU3RhdGUuY29udHJvbGxlZHx8dHx8ZGlkV2FybkNvbnRyb2xsZWRUb1VuY29udHJvbGxlZHx8KFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcoITEsXCIlcyBpcyBjaGFuZ2luZyBhIGNvbnRyb2xsZWQgaW5wdXQgb2YgdHlwZSAlcyB0byBiZSB1bmNvbnRyb2xsZWQuIElucHV0IGVsZW1lbnRzIHNob3VsZCBub3Qgc3dpdGNoIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBEZWNpZGUgYmV0d2VlbiB1c2luZyBhIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkIGlucHV0IGVsZW1lbnQgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgY29tcG9uZW50LiBNb3JlIGluZm86IGh0dHBzOi8vZmIubWUvcmVhY3QtY29udHJvbGxlZC1jb21wb25lbnRzXCIsbyYmby5nZXROYW1lKCl8fFwiQSBjb21wb25lbnRcIixuLnR5cGUpLGRpZFdhcm5Db250cm9sbGVkVG9VbmNvbnRyb2xsZWQ9ITApfXZhciBhPW4uY2hlY2tlZDtudWxsIT1hJiZET01Qcm9wZXJ0eU9wZXJhdGlvbnMuc2V0VmFsdWVGb3JQcm9wZXJ0eShSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZShlKSxcImNoZWNrZWRcIixhfHwhMSk7dmFyIHI9UmVhY3RET01Db21wb25lbnRUcmVlLmdldE5vZGVGcm9tSW5zdGFuY2UoZSksbD1MaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKG4pO2lmKG51bGwhPWwpaWYoMD09PWwmJlwiXCI9PT1yLnZhbHVlKXIudmFsdWU9XCIwXCI7ZWxzZSBpZihcIm51bWJlclwiPT09bi50eXBlKXt2YXIgZD1wYXJzZUZsb2F0KHIudmFsdWUsMTApfHwwOyhsIT1kfHxsPT1kJiZyLnZhbHVlIT1sKSYmKHIudmFsdWU9XCJcIitsKX1lbHNlIHIudmFsdWUhPT1cIlwiK2wmJihyLnZhbHVlPVwiXCIrbCk7ZWxzZSBudWxsPT1uLnZhbHVlJiZudWxsIT1uLmRlZmF1bHRWYWx1ZSYmci5kZWZhdWx0VmFsdWUhPT1cIlwiK24uZGVmYXVsdFZhbHVlJiYoci5kZWZhdWx0VmFsdWU9XCJcIituLmRlZmF1bHRWYWx1ZSksbnVsbD09bi5jaGVja2VkJiZudWxsIT1uLmRlZmF1bHRDaGVja2VkJiYoci5kZWZhdWx0Q2hlY2tlZD0hIW4uZGVmYXVsdENoZWNrZWQpfSxwb3N0TW91bnRXcmFwcGVyOmZ1bmN0aW9uKGUpe3ZhciBuPWUuX2N1cnJlbnRFbGVtZW50LnByb3BzLHQ9UmVhY3RET01Db21wb25lbnRUcmVlLmdldE5vZGVGcm9tSW5zdGFuY2UoZSk7c3dpdGNoKG4udHlwZSl7Y2FzZVwic3VibWl0XCI6Y2FzZVwicmVzZXRcIjpicmVhaztjYXNlXCJjb2xvclwiOmNhc2VcImRhdGVcIjpjYXNlXCJkYXRldGltZVwiOmNhc2VcImRhdGV0aW1lLWxvY2FsXCI6Y2FzZVwibW9udGhcIjpjYXNlXCJ0aW1lXCI6Y2FzZVwid2Vla1wiOnQudmFsdWU9XCJcIix0LnZhbHVlPXQuZGVmYXVsdFZhbHVlO2JyZWFrO2RlZmF1bHQ6dC52YWx1ZT10LnZhbHVlfXZhciBvPXQubmFtZTtcIlwiIT09byYmKHQubmFtZT1cIlwiKSx0LmRlZmF1bHRDaGVja2VkPSF0LmRlZmF1bHRDaGVja2VkLHQuZGVmYXVsdENoZWNrZWQ9IXQuZGVmYXVsdENoZWNrZWQsXCJcIiE9PW8mJih0Lm5hbWU9byl9fTtmdW5jdGlvbiBfaGFuZGxlQ2hhbmdlKGUpe3ZhciBuPXRoaXMuX2N1cnJlbnRFbGVtZW50LnByb3BzLHQ9TGlua2VkVmFsdWVVdGlscy5leGVjdXRlT25DaGFuZ2UobixlKTtSZWFjdFVwZGF0ZXMuYXNhcChmb3JjZVVwZGF0ZUlmTW91bnRlZCx0aGlzKTt2YXIgbz1uLm5hbWU7aWYoXCJyYWRpb1wiPT09bi50eXBlJiZudWxsIT1vKXtmb3IodmFyIGE9UmVhY3RET01Db21wb25lbnRUcmVlLmdldE5vZGVGcm9tSW5zdGFuY2UodGhpcykscj1hO3IucGFyZW50Tm9kZTspcj1yLnBhcmVudE5vZGU7Zm9yKHZhciBsPXIucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitvKSsnXVt0eXBlPVwicmFkaW9cIl0nKSxkPTA7ZDxsLmxlbmd0aDtkKyspe3ZhciBpPWxbZF07aWYoaSE9PWEmJmkuZm9ybT09PWEuZm9ybSl7dmFyIGM9UmVhY3RET01Db21wb25lbnRUcmVlLmdldEluc3RhbmNlRnJvbU5vZGUoaSk7Y3x8KFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwiUmVhY3RET01JbnB1dDogTWl4aW5nIFJlYWN0IGFuZCBub24tUmVhY3QgcmFkaW8gaW5wdXRzIHdpdGggdGhlIHNhbWUgYG5hbWVgIGlzIG5vdCBzdXBwb3J0ZWQuXCIpOl9wcm9kSW52YXJpYW50KFwiOTBcIikpLFJlYWN0VXBkYXRlcy5hc2FwKGZvcmNlVXBkYXRlSWZNb3VudGVkLGMpfX19cmV0dXJuIHR9bW9kdWxlLmV4cG9ydHM9UmVhY3RET01JbnB1dDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSmxZV04wUkU5TlNXNXdkWFF1YW5NaVhTd2libUZ0WlhNaU9sc2lYM0J5YjJSSmJuWmhjbWxoYm5RaUxDSnlaWEYxYVhKbElpd2lYMkZ6YzJsbmJpSXNJa1JQVFZCeWIzQmxjblI1VDNCbGNtRjBhVzl1Y3lJc0lreHBibXRsWkZaaGJIVmxWWFJwYkhNaUxDSlNaV0ZqZEVSUFRVTnZiWEJ2Ym1WdWRGUnlaV1VpTENKU1pXRmpkRlZ3WkdGMFpYTWlMQ0pwYm5aaGNtbGhiblFpTENKM1lYSnVhVzVuSWl3aVpHbGtWMkZ5YmxaaGJIVmxUR2x1YXlJc0ltUnBaRmRoY201RGFHVmphMlZrVEdsdWF5SXNJbVJwWkZkaGNtNVdZV3gxWlVSbFptRjFiSFJXWVd4MVpTSXNJbVJwWkZkaGNtNURhR1ZqYTJWa1JHVm1ZWFZzZEVOb1pXTnJaV1FpTENKa2FXUlhZWEp1UTI5dWRISnZiR3hsWkZSdlZXNWpiMjUwY205c2JHVmtJaXdpWkdsa1YyRnlibFZ1WTI5dWRISnZiR3hsWkZSdlEyOXVkSEp2Ykd4bFpDSXNJbVp2Y21ObFZYQmtZWFJsU1daTmIzVnVkR1ZrSWl3aWRHaHBjeUlzSWw5eWIyOTBUbTlrWlVsRUlpd2lVbVZoWTNSRVQwMUpibkIxZENJc0luVndaR0YwWlZkeVlYQndaWElpTENKcGMwTnZiblJ5YjJ4c1pXUWlMQ0p3Y205d2N5SXNJblI1Y0dVaUxDSmphR1ZqYTJWa0lpd2lkbUZzZFdVaUxDSm5aWFJJYjNOMFVISnZjSE1pTENKcGJuTjBJaXdpWjJWMFZtRnNkV1VpTENKblpYUkRhR1ZqYTJWa0lpd2lkVzVrWldacGJtVmtJaXdpYzNSbGNDSXNJbTFwYmlJc0ltMWhlQ0lzSW1SbFptRjFiSFJEYUdWamEyVmtJaXdpWkdWbVlYVnNkRlpoYkhWbElpd2lYM2R5WVhCd1pYSlRkR0YwWlNJc0ltbHVhWFJwWVd4V1lXeDFaU0lzSW1sdWFYUnBZV3hEYUdWamEyVmtJaXdpYjI1RGFHRnVaMlVpTENKdGIzVnVkRmR5WVhCd1pYSWlMQ0p3Y205alpYTnpJaXdpWlc1Mklpd2lUazlFUlY5RlRsWWlMQ0pqYUdWamExQnliM0JVZVhCbGN5SXNJbDlqZFhKeVpXNTBSV3hsYldWdWRDSXNJbDl2ZDI1bGNpSXNJbTkzYm1WeUlpd2lkbUZzZFdWTWFXNXJJaXdpWTJobFkydGxaRXhwYm1zaUxDSm5aWFJPWVcxbElpd2liR2x6ZEdWdVpYSnpJaXdpWDJoaGJtUnNaVU5vWVc1blpTSXNJbUpwYm1RaUxDSmpiMjUwY205c2JHVmtJaXdpYzJWMFZtRnNkV1ZHYjNKUWNtOXdaWEowZVNJc0ltZGxkRTV2WkdWR2NtOXRTVzV6ZEdGdVkyVWlMQ0p1YjJSbElpd2lkbUZzZFdWQmMwNTFiV0psY2lJc0luQmhjbk5sUm14dllYUWlMQ0p3YjNOMFRXOTFiblJYY21Gd2NHVnlJaXdpYm1GdFpTSXNJbVYyWlc1MElpd2ljbVYwZFhKdVZtRnNkV1VpTENKbGVHVmpkWFJsVDI1RGFHRnVaMlVpTENKaGMyRndJaXdpY205dmRFNXZaR1VpTENKeGRXVnllVkp2YjNRaUxDSndZWEpsYm5ST2IyUmxJaXdpWjNKdmRYQWlMQ0p4ZFdWeWVWTmxiR1ZqZEc5eVFXeHNJaXdpU2xOUFRpSXNJbk4wY21sdVoybG1lU0lzSW1raUxDSnNaVzVuZEdnaUxDSnZkR2hsY2s1dlpHVWlMQ0ptYjNKdElpd2liM1JvWlhKSmJuTjBZVzVqWlNJc0ltZGxkRWx1YzNSaGJtTmxSbkp2YlU1dlpHVWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRlJRU3hoUVVWQkxFbEJRVWxCTEdWQlFXbENReXhSUVVGUkxIZENRVU42UWtNc1VVRkJWVVFzVVVGQlVTeHBRa0ZGYkVKRkxITkNRVUYzUWtZc1VVRkJVU3d5UWtGRGFFTkhMR2xDUVVGdFFrZ3NVVUZCVVN4elFrRkRNMEpKTEhOQ1FVRjNRa29zVVVGQlVTd3lRa0ZEYUVOTExHRkJRV1ZNTEZGQlFWRXNhMEpCUlhaQ1RTeFZRVUZaVGl4UlFVRlJMSE5DUVVOd1FrOHNVVUZCVlZBc1VVRkJVU3h2UWtGRmJFSlJMR3RDUVVGdFFpeEZRVU51UWtNc2IwSkJRWEZDTEVWQlEzSkNReXd3UWtGQk1rSXNSVUZETTBKRExEaENRVUVyUWl4RlFVTXZRa01zYVVOQlFXdERMRVZCUTJ4RFF5eHBRMEZCYTBNc1JVRkZkRU1zVTBGQlUwTXNkVUpCUTBoRExFdEJRVXRETEdGQlJWQkRMR05CUVdORExHTkJRV05JTEUxQlNXaERMRk5CUVZOSkxHRkJRV0ZETEVkQlJYQkNMRTFCUkdsRExHRkJRV1pCTEVWQlFVMURMRTFCUVhORExGVkJRV1pFTEVWQlFVMURMRXRCUTJZc1RVRkJha0pFTEVWQlFVMUZMRkZCUVdsRExFMUJRV1pHTEVWQlFVMUhMRTFCYlVKeVJDeEpRVUZKVGl4alFVRm5RaXhEUVVOc1FrOHNZVUZCWXl4VFFVRlZReXhGUVVGTlRDeEhRVU0xUWl4SlFVRkpSeXhGUVVGUmNFSXNhVUpCUVdsQ2RVSXNVMEZCVTA0c1IwRkRiRU5GTEVWQlFWVnVRaXhwUWtGQmFVSjNRaXhYUVVGWFVDeEhRWEZDTVVNc1QwRnVRbWRDYmtJc1VVRkJVU3hEUVVkMFFtOUNMRlZCUVUxUExFVkJSMDVETEZWQlFVMUVMRVZCUjA1RkxGTkJRVXRHTEVWQlEweEhMRk5CUVV0SUxFZEJRMHBTTEVWQlFVOHNRMEZEVWxrc2IwSkJRV2RDU2l4RlFVTm9Ra3NzYTBKQlFXTk1MRVZCUTJSTUxFMUJRV2RDTEUxQlFWUkJMRVZCUVdkQ1FTeEZRVUZSUlN4RlFVRkxVeXhqUVVGalF5eGhRVU5zUkdJc1VVRkJiMElzVFVGQldFRXNSVUZCYTBKQkxFVkJRVlZITEVWQlFVdFRMR05CUVdORkxHVkJRM2hFUXl4VFFVRlZXaXhGUVVGTFV5eGpRVUZqUnl4WlFVMXFRME1zWVVGQll5eFRRVUZWWWl4RlFVRk5UQ3hIUVVNMVFpeEhRVUUyUWl4bFFVRjZRbTFDTEZGQlFWRkRMRWxCUVVsRExGTkJRVEpDTEVOQlEzcERkRU1zYVVKQlFXbENkVU1zWlVGQlpTeFJRVUZUZEVJc1JVRkJUMHNzUlVGQlMydENMR2RDUVVGblFrTXNVVUZGY2tVc1NVRkJTVU1zUlVGQlVYQkNMRVZCUVV0clFpeG5Ra0ZCWjBKRExGbEJSVlJvUWl4SlFVRndRbElzUlVGQlRUQkNMRmRCUVRSQ2RFTXNiVUpCUTFnc1pVRkJla0lyUWl4UlFVRlJReXhKUVVGSlF5eFZRVUUwUW14RExGTkJRVkVzUlVGQlR5eHJSa0ZEZGtSRExHdENRVUZ0UWl4UlFVVkxiMElzU1VGQmRFSlNMRVZCUVUweVFpeGhRVUU0UW5SRExIRkNRVU5pTEdWQlFYcENPRUlzVVVGQlVVTXNTVUZCU1VNc1ZVRkJORUpzUXl4VFFVRlJMRVZCUVU4c2IwWkJRM1pFUlN4dlFrRkJjVUlzVVVGRlJHMUNMRWxCUVd4Q1VpeEZRVUZOUlN4alFVRnJSRTBzU1VGQmVrSlNMRVZCUVUxWkxHZENRVUZwUTNKQ0xDdENRVU12UXl4bFFVRjZRalJDTEZGQlFWRkRMRWxCUVVsRExGVkJRVFJDYkVNc1UwRkJVU3hGUVVGUExIZFhRVUZyV1hORExFZEJRVk5CTEVWQlFVMUhMRmRCUVdFc1kwRkJaVFZDTEVWQlFVMURMRTFCUXpGbFZpdzRRa0ZCSzBJc1VVRkZZbWxDTEVsQlFXaENVaXhGUVVGTlJ5eFpRVUU0UTBzc1NVRkJka0pTTEVWQlFVMWhMR05CUVN0Q2RrSXNNa0pCUXpORExHVkJRWHBDTmtJc1VVRkJVVU1zU1VGQlNVTXNWVUZCTkVKc1F5eFRRVUZSTEVWQlFVOHNaMWRCUVRCWWMwTXNSMEZCVTBFc1JVRkJUVWNzVjBGQllTeGpRVUZsTlVJc1JVRkJUVU1zVFVGRGJHVllMREJDUVVFeVFpeEhRVWt2UWl4SlFVRkpkVUlzUlVGQlpXSXNSVUZCVFdFc1lVRkRla0pTTEVWQlFVdFRMR05CUVdkQ0xFTkJRMjVDUlN4bFFVRnBReXhOUVVGcVFtaENMRVZCUVUxRkxGRkJRV3RDUml4RlFVRk5SU3hSUVVGVlJpeEZRVUZOV1N4bFFVTTVSRWNzWVVGQk5rSXNUVUZCWm1Zc1JVRkJUVWNzVFVGQlowSklMRVZCUVUxSExFMUJRVkZWTEVWQlEyeEVaMElzVlVGQlZ5eExRVU5ZV2l4VFFVRlZZU3hqUVVGalF5eExRVUZMTVVJc1IwRkROMEl5UWl4WFFVRlpha01zWVVGQllVTXNTMEZKTjBKR0xHTkJRV1VzVTBGQlZVOHNSMEZEZGtJc1NVRkJTVXdzUlVGQlVVc3NSVUZCUzJ0Q0xHZENRVUZuUW5aQ0xFMUJSV3BETEVkQlFUWkNMR1ZCUVhwQ2JVSXNVVUZCVVVNc1NVRkJTVU1zVTBGQk1rSXNRMEZEZWtNc1NVRkJTVmNzUlVGQllXcERMR0ZCUVdGRExFZEJRekZDZVVJc1JVRkJVWEJDTEVWQlFVdHJRaXhuUWtGQlowSkRMRTlCUlRWQ2JrSXNSVUZCUzFNc1kwRkJZMnRDTEdGQlFXTkJMRWRCUVdWMlF5eHJRMEZETVVJc1pVRkJla0l3UWl4UlFVRlJReXhKUVVGSlF5eFZRVUUwUW14RExGTkJRVkVzUlVGQlR5dzRVMEZCT0ZSelF5eEhRVUZUUVN4RlFVRk5SeXhYUVVGaExHTkJRV1UxUWl4RlFVRk5ReXhOUVVOMFlWSXNhVU5CUVd0RExFbEJSV2hEV1N4RlFVRkxVeXhqUVVGamEwSXNXVUZCWlVFc1IwRkJaWGhETEd0RFFVTXhRaXhsUVVGNlFqSkNMRkZCUVZGRExFbEJRVWxETEZWQlFUUkNiRU1zVTBGQlVTeEZRVUZQTERaVFFVRTJWSE5ETEVkQlFWTkJMRVZCUVUxSExGZEJRV0VzWTBGQlpUVkNMRVZCUVUxRExFMUJRM0poVkN4cFEwRkJhME1zUjBGTGRFTXNTVUZCU1ZVc1JVRkJWVVlzUlVGQlRVVXNVVUZEVEN4TlFVRllRU3hIUVVOR2NFSXNjMEpCUVhOQ2JVUXNiMEpCUVc5Q2FrUXNjMEpCUVhOQ2EwUXNiMEpCUVc5Q04wSXNSMEZCVHl4VlFVRlhTQ3hKUVVGWExFZEJSMjVJTEVsQlFVbHBReXhGUVVGUGJrUXNjMEpCUVhOQ2EwUXNiMEpCUVc5Q04wSXNSMEZEYWtSR0xFVkJRVkZ3UWl4cFFrRkJhVUoxUWl4VFFVRlRUaXhIUVVOMFF5eEhRVUZoTEUxQlFWUkhMRVZCUTBZc1IwRkJZeXhKUVVGV1FTeEhRVUU0UWl4TFFVRm1aME1zUlVGQlMyaERMRTFCUTNSQ1owTXNSVUZCUzJoRExFMUJRVkVzVTBGRlVpeEhRVUZ0UWl4WFFVRm1TQ3hGUVVGTlF5eExRVUZ0UWl4RFFVVnNReXhKUVVGSmJVTXNSVUZCWjBKRExGZEJRVmRHTEVWQlFVdG9ReXhOUVVGUExFdEJRVThzUjBGSmJFUkJMRWRCUVZOcFF5eEhRVVZVYWtNc1IwRkJVMmxETEVkQlFXbENSQ3hGUVVGTGFFTXNUMEZCVTBFc1MwRkhkRU5uUXl4RlFVRkxhRU1zVFVGQlVTeEhRVUZMUVN4UlFVVllaME1zUlVGQlMyaERMRkZCUVZVc1IwRkJTMEVzU1VGSE4wSm5ReXhGUVVGTGFFTXNUVUZCVVN4SFFVRkxRU3hSUVVkRUxFMUJRV1pJTEVWQlFVMUhMRTlCUVhWRExFMUJRWFJDU0N4RlFVRk5ZU3hqUVZNelFuTkNMRVZCUVV0MFFpeGxRVUZwUWl4SFFVRkxZaXhGUVVGTllTeGxRVU51UTNOQ0xFVkJRVXQwUWl4aFFVRmxMRWRCUVV0aUxFVkJRVTFoTEdOQlIyUXNUVUZCYWtKaUxFVkJRVTFGTEZOQlFUSkRMRTFCUVhoQ1JpeEZRVUZOV1N4cFFrRkRha04xUWl4RlFVRkxka0lzYVVKQlFXMUNXaXhGUVVGTldTeHBRa0ZMY0VNd1FpeHBRa0ZCYTBJc1UwRkJWV3BETEVkQlF6RkNMRWxCUVVsTUxFVkJRVkZMTEVWQlFVdHJRaXhuUWtGQlowSjJRaXhOUVVrM1FtMURMRVZCUVU5dVJDeHpRa0ZCYzBKclJDeHZRa0ZCYjBJM1FpeEhRVkZ5UkN4UFFVRlJUQ3hGUVVGTlF5eE5RVU5hTEVsQlFVc3NVMEZEVEN4SlFVRkxMRkZCUTBnc1RVRkRSaXhKUVVGTExGRkJRMHdzU1VGQlN5eFBRVU5NTEVsQlFVc3NWMEZEVEN4SlFVRkxMR2xDUVVOTUxFbEJRVXNzVVVGRFRDeEpRVUZMTEU5QlEwd3NTVUZCU3l4UFFVZElhME1zUlVGQlMyaERMRTFCUVZFc1IwRkRZbWRETEVWQlFVdG9ReXhOUVVGUlowTXNSVUZCUzNSQ0xHRkJRMnhDTEUxQlEwWXNVVUZEUlhOQ0xFVkJRVXRvUXl4TlFVRlJaME1zUlVGQlMyaERMRTFCVTNSQ0xFbEJRVWx2UXl4RlFVRlBTaXhGUVVGTFNTeExRVU5JTEV0QlFWUkJMRWxCUTBaS0xFVkJRVXRKTEV0QlFVOHNTVUZGWkVvc1JVRkJTM1pDTEdkQ1FVRnJRblZDTEVWQlFVdDJRaXhsUVVNMVFuVkNMRVZCUVV0MlFpeG5Ra0ZCYTBKMVFpeEZRVUZMZGtJc1pVRkRaaXhMUVVGVU1rSXNTVUZEUmtvc1JVRkJTMGtzUzBGQlQwRXNTMEZMYkVJc1UwRkJVMVFzWTBGQlkxVXNSMEZEY2tJc1NVRkJTWGhETEVWQlFWRk1MRXRCUVVzMFFpeG5Ra0ZCWjBKMlFpeE5RVVUzUW5sRExFVkJRV014UkN4cFFrRkJhVUl5UkN4blFrRkJaMEl4UXl4RlFVRlBkME1zUjBGTE1VUjJSQ3hoUVVGaE1FUXNTMEZCUzJwRUxIRkNRVUZ6UWtNc1RVRkZlRU1zU1VGQlNUUkRMRVZCUVU5MlF5eEZRVUZOZFVNc1MwRkRha0lzUjBGQmJVSXNWVUZCWm5aRExFVkJRVTFETEUxQlFUUkNMRTFCUVZKelF5eEZRVUZqTEVOQlNURkRMRWxCU0VFc1NVRkJTVXNzUlVGQlZ6VkVMSE5DUVVGelFtdEVMRzlDUVVGdlFuWkRMRTFCUTNKRWEwUXNSVUZCV1VRc1JVRkZWRU1zUlVGQlZVTXNXVUZEWmtRc1JVRkJXVUVzUlVGQlZVTXNWMEZYZUVJc1NVRkdRU3hKUVVGSlF5eEZRVUZSUml4RlFVRlZSeXhwUWtGQmFVSXNZMEZCWjBKRExFdEJRVXRETEZWQlFWVXNSMEZCUzFnc1IwRkJVU3h0UWtGRk1VVlpMRVZCUVVrc1JVRkJSMEVzUlVGQlNVb3NSVUZCVFVzc1QwRkJVVVFzU1VGQlN5eERRVU55UXl4SlFVRkpSU3hGUVVGWlRpeEZRVUZOU1N4SFFVTjBRaXhIUVVGSlJTeEpRVUZqVkN4SFFVRlpVeXhGUVVGVlF5eFBRVUZUVml4RlFVRlRWU3hMUVVFeFJDeERRVTlCTEVsQlFVbERMRVZCUVdkQ2RrVXNjMEpCUVhOQ2QwVXNiMEpCUVc5Q1NDeEhRVU0zUkVVc1NVRkJlVU1zWlVGQmVrSndReXhSUVVGUlF5eEpRVUZKUXl4VFFVRTBRbTVETEZkQlFWVXNSVUZCVHl4cFIwRkJiVWRRTEdWQlFXVXNUMEZKTlV4TkxHRkJRV0V3UkN4TFFVRkxha1FzY1VKQlFYTkNOa1FzUzBGSk5VTXNUMEZCVDJRc1JVRkhWR2RDTEU5QlFVOURMRkZCUVZVM1JDSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzFrYjIwdmJHbGlMMUpsWVdOMFJFOU5TVzV3ZFhRdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIERPTVByb3BlcnR5PXJlcXVpcmUoXCIuL0RPTVByb3BlcnR5XCIpLFJlYWN0Q29tcG9uZW50VHJlZUhvb2s9cmVxdWlyZShcInJlYWN0L2xpYi9SZWFjdENvbXBvbmVudFRyZWVIb29rXCIpLHdhcm5pbmc9cmVxdWlyZShcImZianMvbGliL3dhcm5pbmdcIiksd2FybmVkUHJvcGVydGllcz17fSxyQVJJQT1uZXcgUmVnRXhwKFwiXihhcmlhKS1bXCIrRE9NUHJvcGVydHkuQVRUUklCVVRFX05BTUVfQ0hBUitcIl0qJFwiKTtmdW5jdGlvbiB2YWxpZGF0ZVByb3BlcnR5KGUscixuKXtpZih3YXJuZWRQcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KHIpJiZ3YXJuZWRQcm9wZXJ0aWVzW3JdKXJldHVybiEwO2lmKHJBUklBLnRlc3Qocikpe3ZhciBvPXIudG9Mb3dlckNhc2UoKSx0PURPTVByb3BlcnR5LmdldFBvc3NpYmxlU3RhbmRhcmROYW1lLmhhc093blByb3BlcnR5KG8pP0RPTVByb3BlcnR5LmdldFBvc3NpYmxlU3RhbmRhcmROYW1lW29dOm51bGw7aWYobnVsbD09dClyZXR1cm4gd2FybmVkUHJvcGVydGllc1tyXT0hMCwhMTtpZihyIT09dClyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ3YXJuaW5nKCExLFwiVW5rbm93biBBUklBIGF0dHJpYnV0ZSAlcy4gRGlkIHlvdSBtZWFuICVzPyVzXCIscix0LFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0U3RhY2tBZGRlbmR1bUJ5SUQobikpLHdhcm5lZFByb3BlcnRpZXNbcl09ITAsITB9cmV0dXJuITB9ZnVuY3Rpb24gd2FybkludmFsaWRBUklBUHJvcHMoZSxyKXt2YXIgbj1bXTtmb3IodmFyIG8gaW4gci5wcm9wcyl7dmFsaWRhdGVQcm9wZXJ0eShyLnR5cGUsbyxlKXx8bi5wdXNoKG8pfXZhciB0PW4ubWFwKGZ1bmN0aW9uKGUpe3JldHVyblwiYFwiK2UrXCJgXCJ9KS5qb2luKFwiLCBcIik7MT09PW4ubGVuZ3RoP1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcoITEsXCJJbnZhbGlkIGFyaWEgcHJvcCAlcyBvbiA8JXM+IHRhZy4gRm9yIGRldGFpbHMsIHNlZSBodHRwczovL2ZiLm1lL2ludmFsaWQtYXJpYS1wcm9wJXNcIix0LHIudHlwZSxSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldFN0YWNrQWRkZW5kdW1CeUlEKGUpKTpuLmxlbmd0aD4xJiZcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ3YXJuaW5nKCExLFwiSW52YWxpZCBhcmlhIHByb3BzICVzIG9uIDwlcz4gdGFnLiBGb3IgZGV0YWlscywgc2VlIGh0dHBzOi8vZmIubWUvaW52YWxpZC1hcmlhLXByb3Alc1wiLHQsci50eXBlLFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0U3RhY2tBZGRlbmR1bUJ5SUQoZSkpfWZ1bmN0aW9uIGhhbmRsZUVsZW1lbnQoZSxyKXtudWxsIT1yJiZcInN0cmluZ1wiPT10eXBlb2Ygci50eXBlJiYoci50eXBlLmluZGV4T2YoXCItXCIpPj0wfHxyLnByb3BzLmlzfHx3YXJuSW52YWxpZEFSSUFQcm9wcyhlLHIpKX12YXIgUmVhY3RET01JbnZhbGlkQVJJQUhvb2s9e29uQmVmb3JlTW91bnRDb21wb25lbnQ6ZnVuY3Rpb24oZSxyKXtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZoYW5kbGVFbGVtZW50KGUscil9LG9uQmVmb3JlVXBkYXRlQ29tcG9uZW50OmZ1bmN0aW9uKGUscil7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmaGFuZGxlRWxlbWVudChlLHIpfX07bW9kdWxlLmV4cG9ydHM9UmVhY3RET01JbnZhbGlkQVJJQUhvb2s7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbEpsWVdOMFJFOU5TVzUyWVd4cFpFRlNTVUZJYjI5ckxtcHpJbDBzSW01aGJXVnpJanBiSWtSUFRWQnliM0JsY25SNUlpd2ljbVZ4ZFdseVpTSXNJbEpsWVdOMFEyOXRjRzl1Wlc1MFZISmxaVWh2YjJzaUxDSjNZWEp1YVc1bklpd2lkMkZ5Ym1Wa1VISnZjR1Z5ZEdsbGN5SXNJbkpCVWtsQklpd2lVbVZuUlhod0lpd2lRVlJVVWtsQ1ZWUkZYMDVCVFVWZlEwaEJVaUlzSW5aaGJHbGtZWFJsVUhKdmNHVnlkSGtpTENKMFlXZE9ZVzFsSWl3aWJtRnRaU0lzSW1SbFluVm5TVVFpTENKb1lYTlBkMjVRY205d1pYSjBlU0lzSW5SbGMzUWlMQ0pzYjNkbGNrTmhjMlZrVG1GdFpTSXNJblJ2VEc5M1pYSkRZWE5sSWl3aWMzUmhibVJoY21ST1lXMWxJaXdpWjJWMFVHOXpjMmxpYkdWVGRHRnVaR0Z5WkU1aGJXVWlMQ0p3Y205alpYTnpJaXdpWlc1Mklpd2lUazlFUlY5RlRsWWlMQ0puWlhSVGRHRmphMEZrWkdWdVpIVnRRbmxKUkNJc0luZGhjbTVKYm5aaGJHbGtRVkpKUVZCeWIzQnpJaXdpWld4bGJXVnVkQ0lzSW1sdWRtRnNhV1JRY205d2N5SXNJbXRsZVNJc0luQnliM0J6SWl3aWRIbHdaU0lzSW5CMWMyZ2lMQ0oxYm10dWIzZHVVSEp2Y0ZOMGNtbHVaeUlzSW0xaGNDSXNJbkJ5YjNBaUxDSnFiMmx1SWl3aWJHVnVaM1JvSWl3aWFHRnVaR3hsUld4bGJXVnVkQ0lzSW1sdVpHVjRUMllpTENKcGN5SXNJbEpsWVdOMFJFOU5TVzUyWVd4cFpFRlNTVUZJYjI5cklpd2liMjVDWldadmNtVk5iM1Z1ZEVOdmJYQnZibVZ1ZENJc0ltOXVRbVZtYjNKbFZYQmtZWFJsUTI5dGNHOXVaVzUwSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCVVVFc1lVRkZRU3hKUVVGSlFTeFpRVUZqUXl4UlFVRlJMR2xDUVVOMFFrTXNkVUpCUVhsQ1JDeFJRVUZSTEc5RFFVVnFRMFVzVVVGQlZVWXNVVUZCVVN4dlFrRkZiRUpITEdsQ1FVRnRRaXhIUVVOdVFrTXNUVUZCVVN4SlFVRkpReXhQUVVGUExGbEJRV05PTEZsQlFWbFBMRzlDUVVGelFpeFBRVVYyUlN4VFFVRlRReXhwUWtGQmFVSkRMRVZCUVZORExFVkJRVTFETEVkQlEzWkRMRWRCUVVsUUxHbENRVUZwUWxFc1pVRkJaVVlzU1VGQlUwNHNhVUpCUVdsQ1RTeEhRVU0xUkN4UFFVRlBMRVZCUjFRc1IwRkJTVXdzVFVGQlRWRXNTMEZCUzBnc1IwRkJUeXhEUVVOd1FpeEpRVUZKU1N4RlFVRnBRa29zUlVGQlMwc3NZMEZEZEVKRExFVkJRV1ZvUWl4WlFVRlphVUlzZDBKQlFYZENUQ3hsUVVGbFJTeEhRVUZyUW1Rc1dVRkJXV2xDTEhkQ1FVRjNRa2dzUjBGQmEwSXNTMEZKT1Vrc1IwRkJiMElzVFVGQmFFSkZMRVZCUlVZc1QwRkVRVm9zYVVKQlFXbENUU3hKUVVGUkxFZEJRMnhDTEVWQlIxUXNSMEZCU1VFc1NVRkJVMDBzUlVGSFdDeE5RVVo1UWl4bFFVRjZRa1VzVVVGQlVVTXNTVUZCU1VNc1ZVRkJORUpxUWl4VFFVRlJMRVZCUVU4c1owUkJRV2xFVHl4RlFVRk5UU3hGUVVGalpDeDFRa0ZCZFVKdFFpeHhRa0ZCY1VKV0xFbEJRM2hMVUN4cFFrRkJhVUpOTEVsQlFWRXNSMEZEYkVJc1JVRkpXQ3hQUVVGUExFVkJSMVFzVTBGQlUxa3NjVUpCUVhGQ1dDeEZRVUZUV1N4SFFVTnlReXhKUVVGSlF5eEZRVUZsTEVkQlJXNUNMRWxCUVVzc1NVRkJTVU1zUzBGQlQwWXNSVUZCVVVjc1RVRkJUeXhEUVVObWJFSXNhVUpCUVdsQ1pTeEZRVUZSU1N4TFFVRk5SaXhGUVVGTFpDeEpRVVZvUkdFc1JVRkJZVWtzUzBGQlMwZ3NSMEZKZEVJc1NVRkJTVWtzUlVGQmIwSk1MRVZCUVdGTkxFbEJRVWtzVTBGQlZVTXNSMEZEYWtRc1RVRkJUeXhKUVVGTlFTeEZRVUZQTEUxQlEyNUNReXhMUVVGTExFMUJSVzlDTEVsQlFYaENVaXhGUVVGaFV5eFBRVU5WTEdWQlFYcENaaXhSUVVGUlF5eEpRVUZKUXl4VlFVRTBRbXBDTEZOQlFWRXNSVUZCVHl4MVJrRkJOa1l3UWl4RlFVRnRRazRzUlVGQlVVa3NTMEZCVFhwQ0xIVkNRVUYxUW0xQ0xIRkNRVUZ4UWxZc1NVRkRlRTVoTEVWQlFXRlRMRTlCUVZNc1IwRkRUaXhsUVVGNlFtWXNVVUZCVVVNc1NVRkJTVU1zVlVGQk5FSnFRaXhUUVVGUkxFVkJRVThzZDBaQlFUaEdNRUlzUlVGQmJVSk9MRVZCUVZGSkxFdEJRVTE2UWl4MVFrRkJkVUp0UWl4eFFrRkJjVUpXTEVsQlNYUlBMRk5CUVZOMVFpeGpRVUZqZGtJc1JVRkJVMWtzUjBGRFppeE5RVUZZUVN4SFFVRXlReXhwUWtGQmFrSkJMRVZCUVZGSkxFOUJSMnhEU2l4RlFVRlJTU3hMUVVGTFVTeFJRVUZSTEUxQlFWRXNSMEZCUzFvc1JVRkJVVWNzVFVGQlRWVXNTVUZKY0VSa0xIRkNRVUZ4UWxnc1JVRkJVMWtzU1VGSGFFTXNTVUZCU1dNc2QwSkJRVEJDTEVOQlF6VkNReXgxUWtGQmQwSXNVMEZCVlROQ0xFVkJRVk5aTEVkQlExb3NaVUZCZWtKTUxGRkJRVkZETEVsQlFVbERMRlZCUTJSakxHTkJRV04yUWl4RlFVRlRXU3hKUVVjelFtZENMSGRDUVVGNVFpeFRRVUZWTlVJc1JVRkJVMWtzUjBGRFlpeGxRVUY2UWt3c1VVRkJVVU1zU1VGQlNVTXNWVUZEWkdNc1kwRkJZM1pDTEVWQlFWTlpMRXRCU3pkQ2FVSXNUMEZCVDBNc1VVRkJWVW9pTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdFpHOXRMMnhwWWk5U1pXRmpkRVJQVFVsdWRtRnNhV1JCVWtsQlNHOXZheTVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBSZWFjdENvbXBvbmVudFRyZWVIb29rPXJlcXVpcmUoXCJyZWFjdC9saWIvUmVhY3RDb21wb25lbnRUcmVlSG9va1wiKSx3YXJuaW5nPXJlcXVpcmUoXCJmYmpzL2xpYi93YXJuaW5nXCIpLGRpZFdhcm5WYWx1ZU51bGw9ITE7ZnVuY3Rpb24gaGFuZGxlRWxlbWVudChlLG4pe251bGwhPW4mJihcImlucHV0XCIhPT1uLnR5cGUmJlwidGV4dGFyZWFcIiE9PW4udHlwZSYmXCJzZWxlY3RcIiE9PW4udHlwZXx8bnVsbD09bi5wcm9wc3x8bnVsbCE9PW4ucHJvcHMudmFsdWV8fGRpZFdhcm5WYWx1ZU51bGx8fChcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ3YXJuaW5nKCExLFwiYHZhbHVlYCBwcm9wIG9uIGAlc2Agc2hvdWxkIG5vdCBiZSBudWxsLiBDb25zaWRlciB1c2luZyB0aGUgZW1wdHkgc3RyaW5nIHRvIGNsZWFyIHRoZSBjb21wb25lbnQgb3IgYHVuZGVmaW5lZGAgZm9yIHVuY29udHJvbGxlZCBjb21wb25lbnRzLiVzXCIsbi50eXBlLFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0U3RhY2tBZGRlbmR1bUJ5SUQoZSkpLGRpZFdhcm5WYWx1ZU51bGw9ITApKX12YXIgUmVhY3RET01OdWxsSW5wdXRWYWx1ZVByb3BIb29rPXtvbkJlZm9yZU1vdW50Q29tcG9uZW50OmZ1bmN0aW9uKGUsbil7aGFuZGxlRWxlbWVudChlLG4pfSxvbkJlZm9yZVVwZGF0ZUNvbXBvbmVudDpmdW5jdGlvbihlLG4pe2hhbmRsZUVsZW1lbnQoZSxuKX19O21vZHVsZS5leHBvcnRzPVJlYWN0RE9NTnVsbElucHV0VmFsdWVQcm9wSG9vaztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSmxZV04wUkU5TlRuVnNiRWx1Y0hWMFZtRnNkV1ZRY205d1NHOXZheTVxY3lKZExDSnVZVzFsY3lJNld5SlNaV0ZqZEVOdmJYQnZibVZ1ZEZSeVpXVkliMjlySWl3aWNtVnhkV2x5WlNJc0luZGhjbTVwYm1jaUxDSmthV1JYWVhKdVZtRnNkV1ZPZFd4c0lpd2lhR0Z1Wkd4bFJXeGxiV1Z1ZENJc0ltUmxZblZuU1VRaUxDSmxiR1Z0Wlc1MElpd2lkSGx3WlNJc0luQnliM0J6SWl3aWRtRnNkV1VpTENKd2NtOWpaWE56SWl3aVpXNTJJaXdpVGs5RVJWOUZUbFlpTENKblpYUlRkR0ZqYTBGa1pHVnVaSFZ0UW5sSlJDSXNJbEpsWVdOMFJFOU5UblZzYkVsdWNIVjBWbUZzZFdWUWNtOXdTRzl2YXlJc0ltOXVRbVZtYjNKbFRXOTFiblJEYjIxd2IyNWxiblFpTENKdmJrSmxabTl5WlZWd1pHRjBaVU52YlhCdmJtVnVkQ0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVkZCTEdGQlJVRXNTVUZCU1VFc2RVSkJRWGxDUXl4UlFVRlJMRzlEUVVWcVEwTXNVVUZCVlVRc1VVRkJVU3h2UWtGRmJFSkZMR3RDUVVGdFFpeEZRVVYyUWl4VFFVRlRReXhqUVVGalF5eEZRVUZUUXl4SFFVTm1MRTFCUVZoQkxFbEJSMmxDTEZWQlFXcENRU3hGUVVGUlF5eE5RVUZ4UXl4aFFVRnFRa1FzUlVGQlVVTXNUVUZCZDBNc1YwRkJha0pFTEVWQlFWRkRMRTFCUjJ4RUxFMUJRV3BDUkN4RlFVRlJSU3hQUVVGNVF5eFBRVUY0UWtZc1JVRkJVVVVzVFVGQlRVTXNUMEZCYlVKT0xHMUNRVU51UXl4bFFVRjZRazhzVVVGQlVVTXNTVUZCU1VNc1ZVRkJORUpXTEZOQlFWRXNSVUZCVHl4blNrRkJNa3BKTEVWQlFWRkRMRXRCUVUxUUxIVkNRVUYxUW1Fc2NVSkJRWEZDVWl4SlFVVTFVVVlzYTBKQlFXMUNMRWxCU1haQ0xFbEJRVWxYTEN0Q1FVRnBReXhEUVVOdVEwTXNkVUpCUVhkQ0xGTkJRVlZXTEVWQlFWTkRMRWRCUTNwRFJpeGpRVUZqUXl4RlFVRlRReXhKUVVWNlFsVXNkMEpCUVhsQ0xGTkJRVlZZTEVWQlFWTkRMRWRCUXpGRFJpeGpRVUZqUXl4RlFVRlRReXhMUVVrelFsY3NUMEZCVDBNc1VVRkJWVW9pTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdFpHOXRMMnhwWWk5U1pXRmpkRVJQVFU1MWJHeEpibkIxZEZaaGJIVmxVSEp2Y0VodmIyc3Vhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciBfYXNzaWduPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLFJlYWN0PXJlcXVpcmUoXCJyZWFjdC9saWIvUmVhY3RcIiksUmVhY3RET01Db21wb25lbnRUcmVlPXJlcXVpcmUoXCIuL1JlYWN0RE9NQ29tcG9uZW50VHJlZVwiKSxSZWFjdERPTVNlbGVjdD1yZXF1aXJlKFwiLi9SZWFjdERPTVNlbGVjdFwiKSx3YXJuaW5nPXJlcXVpcmUoXCJmYmpzL2xpYi93YXJuaW5nXCIpLGRpZFdhcm5JbnZhbGlkT3B0aW9uQ2hpbGRyZW49ITE7ZnVuY3Rpb24gZmxhdHRlbkNoaWxkcmVuKGUpe3ZhciB0PVwiXCI7cmV0dXJuIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goZSxmdW5jdGlvbihlKXtudWxsIT1lJiYoXCJzdHJpbmdcIj09dHlwZW9mIGV8fFwibnVtYmVyXCI9PXR5cGVvZiBlP3QrPWU6ZGlkV2FybkludmFsaWRPcHRpb25DaGlsZHJlbnx8KGRpZFdhcm5JbnZhbGlkT3B0aW9uQ2hpbGRyZW49ITAsXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FybmluZyghMSxcIk9ubHkgc3RyaW5ncyBhbmQgbnVtYmVycyBhcmUgc3VwcG9ydGVkIGFzIDxvcHRpb24+IGNoaWxkcmVuLlwiKSkpfSksdH12YXIgUmVhY3RET01PcHRpb249e21vdW50V3JhcHBlcjpmdW5jdGlvbihlLHQsbil7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FybmluZyhudWxsPT10LnNlbGVjdGVkLFwiVXNlIHRoZSBgZGVmYXVsdFZhbHVlYCBvciBgdmFsdWVgIHByb3BzIG9uIDxzZWxlY3Q+IGluc3RlYWQgb2Ygc2V0dGluZyBgc2VsZWN0ZWRgIG9uIDxvcHRpb24+LlwiKTt2YXIgcj1udWxsO2lmKG51bGwhPW4pe3ZhciBhPW47XCJvcHRncm91cFwiPT09YS5fdGFnJiYoYT1hLl9ob3N0UGFyZW50KSxudWxsIT1hJiZcInNlbGVjdFwiPT09YS5fdGFnJiYocj1SZWFjdERPTVNlbGVjdC5nZXRTZWxlY3RWYWx1ZUNvbnRleHQoYSkpfXZhciBsLGk9bnVsbDtpZihudWxsIT1yKWlmKGw9bnVsbCE9dC52YWx1ZT90LnZhbHVlK1wiXCI6ZmxhdHRlbkNoaWxkcmVuKHQuY2hpbGRyZW4pLGk9ITEsQXJyYXkuaXNBcnJheShyKSl7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspaWYoXCJcIityW29dPT09bCl7aT0hMDticmVha319ZWxzZSBpPVwiXCIrcj09PWw7ZS5fd3JhcHBlclN0YXRlPXtzZWxlY3RlZDppfX0scG9zdE1vdW50V3JhcHBlcjpmdW5jdGlvbihlKXt2YXIgdD1lLl9jdXJyZW50RWxlbWVudC5wcm9wcztudWxsIT10LnZhbHVlJiZSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZShlKS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLHQudmFsdWUpfSxnZXRIb3N0UHJvcHM6ZnVuY3Rpb24oZSx0KXt2YXIgbj1fYXNzaWduKHtzZWxlY3RlZDp2b2lkIDAsY2hpbGRyZW46dm9pZCAwfSx0KTtudWxsIT1lLl93cmFwcGVyU3RhdGUuc2VsZWN0ZWQmJihuLnNlbGVjdGVkPWUuX3dyYXBwZXJTdGF0ZS5zZWxlY3RlZCk7dmFyIHI9ZmxhdHRlbkNoaWxkcmVuKHQuY2hpbGRyZW4pO3JldHVybiByJiYobi5jaGlsZHJlbj1yKSxufX07bW9kdWxlLmV4cG9ydHM9UmVhY3RET01PcHRpb247XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbEpsWVdOMFJFOU5UM0IwYVc5dUxtcHpJbDBzSW01aGJXVnpJanBiSWw5aGMzTnBaMjRpTENKeVpYRjFhWEpsSWl3aVVtVmhZM1FpTENKU1pXRmpkRVJQVFVOdmJYQnZibVZ1ZEZSeVpXVWlMQ0pTWldGamRFUlBUVk5sYkdWamRDSXNJbmRoY201cGJtY2lMQ0prYVdSWFlYSnVTVzUyWVd4cFpFOXdkR2x2YmtOb2FXeGtjbVZ1SWl3aVpteGhkSFJsYmtOb2FXeGtjbVZ1SWl3aVkyaHBiR1J5Wlc0aUxDSmpiMjUwWlc1MElpd2lRMmhwYkdSeVpXNGlMQ0ptYjNKRllXTm9JaXdpWTJocGJHUWlMQ0p3Y205alpYTnpJaXdpWlc1Mklpd2lUazlFUlY5RlRsWWlMQ0pTWldGamRFUlBUVTl3ZEdsdmJpSXNJbTF2ZFc1MFYzSmhjSEJsY2lJc0ltbHVjM1FpTENKd2NtOXdjeUlzSW1odmMzUlFZWEpsYm5RaUxDSnpaV3hsWTNSbFpDSXNJbk5sYkdWamRGWmhiSFZsSWl3aWMyVnNaV04wVUdGeVpXNTBJaXdpWDNSaFp5SXNJbDlvYjNOMFVHRnlaVzUwSWl3aVoyVjBVMlZzWldOMFZtRnNkV1ZEYjI1MFpYaDBJaXdpZG1Gc2RXVWlMQ0pCY25KaGVTSXNJbWx6UVhKeVlYa2lMQ0pwSWl3aWJHVnVaM1JvSWl3aVgzZHlZWEJ3WlhKVGRHRjBaU0lzSW5CdmMzUk5iM1Z1ZEZkeVlYQndaWElpTENKZlkzVnljbVZ1ZEVWc1pXMWxiblFpTENKblpYUk9iMlJsUm5KdmJVbHVjM1JoYm1ObElpd2ljMlYwUVhSMGNtbGlkWFJsSWl3aVoyVjBTRzl6ZEZCeWIzQnpJaXdpYUc5emRGQnliM0J6SWl3aWRXNWtaV1pwYm1Wa0lpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlVVRXNZVUZGUVN4SlFVRkpRU3hSUVVGVlF5eFJRVUZSTEdsQ1FVVnNRa01zVFVGQlVVUXNVVUZCVVN4dFFrRkRhRUpGTEhOQ1FVRjNRa1lzVVVGQlVTd3lRa0ZEYUVOSExHVkJRV2xDU0N4UlFVRlJMRzlDUVVWNlFra3NVVUZCVlVvc1VVRkJVU3h2UWtGRGJFSkxMRGhDUVVFclFpeEZRVVZ1UXl4VFFVRlRReXhuUWtGQlowSkRMRWRCUTNaQ0xFbEJRVWxETEVWQlFWVXNSMEZuUW1Rc1QwRmFRVkFzVFVGQlRWRXNVMEZCVTBNc1VVRkJVVWdzUlVGQlZTeFRRVUZWU1N4SFFVTTFRaXhOUVVGVVFTeEpRVWRwUWl4cFFrRkJWa0VzUjBGQmRVTXNhVUpCUVZaQkxFVkJRM1JEU0N4SFFVRlhSeXhGUVVORVRpd3JRa0ZEVmtFc09FSkJRU3RDTEVWQlEwNHNaVUZCZWtKUExGRkJRVkZETEVsQlFVbERMRlZCUVRSQ1ZpeFRRVUZSTEVWQlFVOHNiMFZCU1hCRVNTeEZRVTFVTEVsQlFVbFBMR1ZCUVdsQ0xFTkJRMjVDUXl4aFFVRmpMRk5CUVZWRExFVkJRVTFETEVWQlFVOURMRWRCUlU0c1pVRkJla0pRTEZGQlFWRkRMRWxCUVVsRExGVkJRMWNzWlVGQmVrSkdMRkZCUVZGRExFbEJRVWxETEZWQlFUUkNWaXhSUVVFd1FpeE5RVUZzUW1Nc1JVRkJUVVVzVTBGQmEwSXNhMGRCU1RGRkxFbEJRVWxETEVWQlFXTXNTMEZEYkVJc1IwRkJhMElzVFVGQlpFWXNSVUZCYjBJc1EwRkRkRUlzU1VGQlNVY3NSVUZCWlVnc1JVRkZUeXhoUVVGMFFrY3NSVUZCWVVNc1QwRkRaa1FzUlVGQlpVRXNSVUZCWVVVc1lVRkhWaXhOUVVGb1FrWXNSMEZCT0VNc1YwRkJkRUpCTEVWQlFXRkRMRTlCUTNaRFJpeEZRVUZqYkVJc1pVRkJaWE5DTEhOQ1FVRnpRa2dzU1VGTmRrUXNTVUZGVFVrc1JVRkdSazRzUlVGQlZ5eExRVU5tTEVkQlFXMUNMRTFCUVdaRExFVkJVVVlzUjBGTVJVc3NSVUZFYVVJc1RVRkJabElzUlVGQlRWRXNUVUZEUVZJc1JVRkJUVkVzVFVGQlVTeEhRVVZrY0VJc1owSkJRV2RDV1N4RlFVRk5XQ3hWUVVWb1EyRXNSMEZCVnl4RlFVTlFUeXhOUVVGTlF5eFJRVUZSVUN4SlFVVm9RaXhKUVVGTExFbEJRVWxSTEVWQlFVa3NSVUZCUjBFc1JVRkJTVklzUlVGQldWTXNUMEZCVVVRc1NVRkRkRU1zUjBGQlNTeEhRVUZMVWl4RlFVRlpVU3hMUVVGUFNDeEZRVUZQTEVOQlEycERUaXhIUVVGWExFVkJRMWdzV1VGSlNrRXNSVUZCVnl4SFFVRkxReXhKUVVGblFrc3NSVUZKY0VOVUxFVkJRVXRqTEdOQlFXZENMRU5CUVVWWUxGTkJRVlZCTEVsQlIyNURXU3hwUWtGQmEwSXNVMEZCVldZc1IwRkZNVUlzU1VGQlNVTXNSVUZCVVVRc1JVRkJTMmRDTEdkQ1FVRm5RbVlzVFVGRFpDeE5RVUZtUVN4RlFVRk5VU3hQUVVOSGVFSXNjMEpCUVhOQ1owTXNiMEpCUVc5Q2FrSXNSMEZEYUVSclFpeGhRVUZoTEZGQlFWTnFRaXhGUVVGTlVTeFJRVWx5UTFVc1lVRkJZeXhUUVVGVmJrSXNSVUZCVFVNc1IwRkROVUlzU1VGQlNXMUNMRVZCUVZsMFF5eFJRVUZSTEVOQlFVVnhRaXhqUVVGVmEwSXNSVUZCVnk5Q0xHTkJRVlVyUWl4SFFVRmhjRUlzUjBGSmJrTXNUVUZCTDBKRUxFVkJRVXRqTEdOQlFXTllMRmRCUTNKQ2FVSXNSVUZCVldwQ0xGTkJRVmRJTEVWQlFVdGpMR05CUVdOWUxGVkJSekZETEVsQlFVbGFMRVZCUVZWR0xHZENRVUZuUWxrc1JVRkJUVmdzVlVGTmNFTXNUMEZLU1VNc1NVRkRSalpDTEVWQlFWVTVRaXhUUVVGWFF5eEhRVWRvUWpaQ0xFbEJTVmhGTEU5QlFVOURMRkZCUVZWNlFpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzFrYjIwdmJHbGlMMUpsWVdOMFJFOU5UM0IwYVc5dUxtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9hc3NpZ249cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksTGlua2VkVmFsdWVVdGlscz1yZXF1aXJlKFwiLi9MaW5rZWRWYWx1ZVV0aWxzXCIpLFJlYWN0RE9NQ29tcG9uZW50VHJlZT1yZXF1aXJlKFwiLi9SZWFjdERPTUNvbXBvbmVudFRyZWVcIiksUmVhY3RVcGRhdGVzPXJlcXVpcmUoXCIuL1JlYWN0VXBkYXRlc1wiKSx3YXJuaW5nPXJlcXVpcmUoXCJmYmpzL2xpYi93YXJuaW5nXCIpLGRpZFdhcm5WYWx1ZUxpbms9ITEsZGlkV2FyblZhbHVlRGVmYXVsdFZhbHVlPSExO2Z1bmN0aW9uIHVwZGF0ZU9wdGlvbnNJZlBlbmRpbmdVcGRhdGVBbmRNb3VudGVkKCl7aWYodGhpcy5fcm9vdE5vZGVJRCYmdGhpcy5fd3JhcHBlclN0YXRlLnBlbmRpbmdVcGRhdGUpe3RoaXMuX3dyYXBwZXJTdGF0ZS5wZW5kaW5nVXBkYXRlPSExO3ZhciBlPXRoaXMuX2N1cnJlbnRFbGVtZW50LnByb3BzLHQ9TGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZShlKTtudWxsIT10JiZ1cGRhdGVPcHRpb25zKHRoaXMsQm9vbGVhbihlLm11bHRpcGxlKSx0KX19ZnVuY3Rpb24gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKGUpe2lmKGUpe3ZhciB0PWUuZ2V0TmFtZSgpO2lmKHQpcmV0dXJuXCIgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYFwiK3QrXCJgLlwifXJldHVyblwiXCJ9dmFyIHZhbHVlUHJvcE5hbWVzPVtcInZhbHVlXCIsXCJkZWZhdWx0VmFsdWVcIl07ZnVuY3Rpb24gY2hlY2tTZWxlY3RQcm9wVHlwZXMoZSx0KXt2YXIgYT1lLl9jdXJyZW50RWxlbWVudC5fb3duZXI7TGlua2VkVmFsdWVVdGlscy5jaGVja1Byb3BUeXBlcyhcInNlbGVjdFwiLHQsYSksdm9pZCAwPT09dC52YWx1ZUxpbmt8fGRpZFdhcm5WYWx1ZUxpbmt8fChcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ3YXJuaW5nKCExLFwiYHZhbHVlTGlua2AgcHJvcCBvbiBgc2VsZWN0YCBpcyBkZXByZWNhdGVkOyBzZXQgYHZhbHVlYCBhbmQgYG9uQ2hhbmdlYCBpbnN0ZWFkLlwiKSxkaWRXYXJuVmFsdWVMaW5rPSEwKTtmb3IodmFyIG49MDtuPHZhbHVlUHJvcE5hbWVzLmxlbmd0aDtuKyspe3ZhciByPXZhbHVlUHJvcE5hbWVzW25dO2lmKG51bGwhPXRbcl0pe3ZhciBsPUFycmF5LmlzQXJyYXkodFtyXSk7dC5tdWx0aXBsZSYmIWw/XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FybmluZyghMSxcIlRoZSBgJXNgIHByb3Agc3VwcGxpZWQgdG8gPHNlbGVjdD4gbXVzdCBiZSBhbiBhcnJheSBpZiBgbXVsdGlwbGVgIGlzIHRydWUuJXNcIixyLGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bShhKSk6IXQubXVsdGlwbGUmJmwmJlwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcoITEsXCJUaGUgYCVzYCBwcm9wIHN1cHBsaWVkIHRvIDxzZWxlY3Q+IG11c3QgYmUgYSBzY2FsYXIgdmFsdWUgaWYgYG11bHRpcGxlYCBpcyBmYWxzZS4lc1wiLHIsZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKGEpKX19fWZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnMoZSx0LGEpe3ZhciBuLHIsbD1SZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZShlKS5vcHRpb25zO2lmKHQpe2ZvcihuPXt9LHI9MDtyPGEubGVuZ3RoO3IrKyluW1wiXCIrYVtyXV09ITA7Zm9yKHI9MDtyPGwubGVuZ3RoO3IrKyl7dmFyIGk9bi5oYXNPd25Qcm9wZXJ0eShsW3JdLnZhbHVlKTtsW3JdLnNlbGVjdGVkIT09aSYmKGxbcl0uc2VsZWN0ZWQ9aSl9fWVsc2V7Zm9yKG49XCJcIithLHI9MDtyPGwubGVuZ3RoO3IrKylpZihsW3JdLnZhbHVlPT09bilyZXR1cm4gdm9pZChsW3JdLnNlbGVjdGVkPSEwKTtsLmxlbmd0aCYmKGxbMF0uc2VsZWN0ZWQ9ITApfX12YXIgUmVhY3RET01TZWxlY3Q9e2dldEhvc3RQcm9wczpmdW5jdGlvbihlLHQpe3JldHVybiBfYXNzaWduKHt9LHQse29uQ2hhbmdlOmUuX3dyYXBwZXJTdGF0ZS5vbkNoYW5nZSx2YWx1ZTp2b2lkIDB9KX0sbW91bnRXcmFwcGVyOmZ1bmN0aW9uKGUsdCl7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmY2hlY2tTZWxlY3RQcm9wVHlwZXMoZSx0KTt2YXIgYT1MaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHQpO2UuX3dyYXBwZXJTdGF0ZT17cGVuZGluZ1VwZGF0ZTohMSxpbml0aWFsVmFsdWU6bnVsbCE9YT9hOnQuZGVmYXVsdFZhbHVlLGxpc3RlbmVyczpudWxsLG9uQ2hhbmdlOl9oYW5kbGVDaGFuZ2UuYmluZChlKSx3YXNNdWx0aXBsZTpCb29sZWFuKHQubXVsdGlwbGUpfSx2b2lkIDA9PT10LnZhbHVlfHx2b2lkIDA9PT10LmRlZmF1bHRWYWx1ZXx8ZGlkV2FyblZhbHVlRGVmYXVsdFZhbHVlfHwoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FybmluZyghMSxcIlNlbGVjdCBlbGVtZW50cyBtdXN0IGJlIGVpdGhlciBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCAoc3BlY2lmeSBlaXRoZXIgdGhlIHZhbHVlIHByb3AsIG9yIHRoZSBkZWZhdWx0VmFsdWUgcHJvcCwgYnV0IG5vdCBib3RoKS4gRGVjaWRlIGJldHdlZW4gdXNpbmcgYSBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCBzZWxlY3QgZWxlbWVudCBhbmQgcmVtb3ZlIG9uZSBvZiB0aGVzZSBwcm9wcy4gTW9yZSBpbmZvOiBodHRwczovL2ZiLm1lL3JlYWN0LWNvbnRyb2xsZWQtY29tcG9uZW50c1wiKSxkaWRXYXJuVmFsdWVEZWZhdWx0VmFsdWU9ITApfSxnZXRTZWxlY3RWYWx1ZUNvbnRleHQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9LHBvc3RVcGRhdGVXcmFwcGVyOmZ1bmN0aW9uKGUpe3ZhciB0PWUuX2N1cnJlbnRFbGVtZW50LnByb3BzO2UuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU9dm9pZCAwO3ZhciBhPWUuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZTtlLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9Qm9vbGVhbih0Lm11bHRpcGxlKTt2YXIgbj1MaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHQpO251bGwhPW4/KGUuX3dyYXBwZXJTdGF0ZS5wZW5kaW5nVXBkYXRlPSExLHVwZGF0ZU9wdGlvbnMoZSxCb29sZWFuKHQubXVsdGlwbGUpLG4pKTphIT09Qm9vbGVhbih0Lm11bHRpcGxlKSYmKG51bGwhPXQuZGVmYXVsdFZhbHVlP3VwZGF0ZU9wdGlvbnMoZSxCb29sZWFuKHQubXVsdGlwbGUpLHQuZGVmYXVsdFZhbHVlKTp1cGRhdGVPcHRpb25zKGUsQm9vbGVhbih0Lm11bHRpcGxlKSx0Lm11bHRpcGxlP1tdOlwiXCIpKX19O2Z1bmN0aW9uIF9oYW5kbGVDaGFuZ2UoZSl7dmFyIHQ9dGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHMsYT1MaW5rZWRWYWx1ZVV0aWxzLmV4ZWN1dGVPbkNoYW5nZSh0LGUpO3JldHVybiB0aGlzLl9yb290Tm9kZUlEJiYodGhpcy5fd3JhcHBlclN0YXRlLnBlbmRpbmdVcGRhdGU9ITApLFJlYWN0VXBkYXRlcy5hc2FwKHVwZGF0ZU9wdGlvbnNJZlBlbmRpbmdVcGRhdGVBbmRNb3VudGVkLHRoaXMpLGF9bW9kdWxlLmV4cG9ydHM9UmVhY3RET01TZWxlY3Q7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbEpsWVdOMFJFOU5VMlZzWldOMExtcHpJbDBzSW01aGJXVnpJanBiSWw5aGMzTnBaMjRpTENKeVpYRjFhWEpsSWl3aVRHbHVhMlZrVm1Gc2RXVlZkR2xzY3lJc0lsSmxZV04wUkU5TlEyOXRjRzl1Wlc1MFZISmxaU0lzSWxKbFlXTjBWWEJrWVhSbGN5SXNJbmRoY201cGJtY2lMQ0prYVdSWFlYSnVWbUZzZFdWTWFXNXJJaXdpWkdsa1YyRnlibFpoYkhWbFJHVm1ZWFZzZEZaaGJIVmxJaXdpZFhCa1lYUmxUM0IwYVc5dWMwbG1VR1Z1WkdsdVoxVndaR0YwWlVGdVpFMXZkVzUwWldRaUxDSjBhR2x6SWl3aVgzSnZiM1JPYjJSbFNVUWlMQ0pmZDNKaGNIQmxjbE4wWVhSbElpd2ljR1Z1WkdsdVoxVndaR0YwWlNJc0luQnliM0J6SWl3aVgyTjFjbkpsYm5SRmJHVnRaVzUwSWl3aWRtRnNkV1VpTENKblpYUldZV3gxWlNJc0luVndaR0YwWlU5d2RHbHZibk1pTENKQ2IyOXNaV0Z1SWl3aWJYVnNkR2x3YkdVaUxDSm5aWFJFWldOc1lYSmhkR2x2YmtWeWNtOXlRV1JrWlc1a2RXMGlMQ0p2ZDI1bGNpSXNJbTVoYldVaUxDSm5aWFJPWVcxbElpd2lkbUZzZFdWUWNtOXdUbUZ0WlhNaUxDSmphR1ZqYTFObGJHVmpkRkJ5YjNCVWVYQmxjeUlzSW1sdWMzUWlMQ0pmYjNkdVpYSWlMQ0pqYUdWamExQnliM0JVZVhCbGN5SXNJblZ1WkdWbWFXNWxaQ0lzSW5aaGJIVmxUR2x1YXlJc0luQnliMk5sYzNNaUxDSmxibllpTENKT1QwUkZYMFZPVmlJc0lta2lMQ0pzWlc1bmRHZ2lMQ0p3Y205d1RtRnRaU0lzSW1selFYSnlZWGtpTENKQmNuSmhlU0lzSW5CeWIzQldZV3gxWlNJc0luTmxiR1ZqZEdWa1ZtRnNkV1VpTENKdmNIUnBiMjV6SWl3aVoyVjBUbTlrWlVaeWIyMUpibk4wWVc1alpTSXNJbk5sYkdWamRHVmtJaXdpYUdGelQzZHVVSEp2Y0dWeWRIa2lMQ0pTWldGamRFUlBUVk5sYkdWamRDSXNJbWRsZEVodmMzUlFjbTl3Y3lJc0ltOXVRMmhoYm1kbElpd2liVzkxYm5SWGNtRndjR1Z5SWl3aWFXNXBkR2xoYkZaaGJIVmxJaXdpWkdWbVlYVnNkRlpoYkhWbElpd2liR2x6ZEdWdVpYSnpJaXdpWDJoaGJtUnNaVU5vWVc1blpTSXNJbUpwYm1RaUxDSjNZWE5OZFd4MGFYQnNaU0lzSW1kbGRGTmxiR1ZqZEZaaGJIVmxRMjl1ZEdWNGRDSXNJbkJ2YzNSVmNHUmhkR1ZYY21Gd2NHVnlJaXdpWlhabGJuUWlMQ0p5WlhSMWNtNVdZV3gxWlNJc0ltVjRaV04xZEdWUGJrTm9ZVzVuWlNJc0ltRnpZWEFpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZSUVN4aFFVVkJMRWxCUVVsQkxGRkJRVlZETEZGQlFWRXNhVUpCUld4Q1F5eHBRa0ZCYlVKRUxGRkJRVkVzYzBKQlF6TkNSU3h6UWtGQmQwSkdMRkZCUVZFc01rSkJRMmhEUnl4aFFVRmxTQ3hSUVVGUkxHdENRVVYyUWtrc1VVRkJWVW9zVVVGQlVTeHZRa0ZGYkVKTExHdENRVUZ0UWl4RlFVTnVRa01zTUVKQlFUSkNMRVZCUlM5Q0xGTkJRVk5ETEhsRFFVTlFMRWRCUVVsRExFdEJRVXRETEdGQlFXVkVMRXRCUVV0RkxHTkJRV05ETEdOQlFXVXNRMEZEZUVSSUxFdEJRVXRGTEdOQlFXTkRMR1ZCUVdkQ0xFVkJSVzVETEVsQlFVbERMRVZCUVZGS0xFdEJRVXRMTEdkQ1FVRm5Ra1FzVFVGRE4wSkZMRVZCUVZGaUxHbENRVUZwUW1Nc1UwRkJVMGdzUjBGRmVrSXNUVUZCVkVVc1IwRkRSa1VzWTBGQlkxSXNTMEZCVFZNc1VVRkJVVXdzUlVGQlRVMHNWVUZCVjBvc1NVRkxia1FzVTBGQlUwc3NORUpCUVRSQ1F5eEhRVU51UXl4SFFVRkpRU3hGUVVGUExFTkJRMVFzU1VGQlNVTXNSVUZCVDBRc1JVRkJUVVVzVlVGRGFrSXNSMEZCU1VRc1JVRkRSaXhOUVVGUExHZERRVUZyUTBFc1JVRkJUeXhMUVVkd1JDeE5RVUZQTEVkQlIxUXNTVUZCU1VVc1pVRkJhVUlzUTBGQlF5eFJRVUZUTEdkQ1FVMHZRaXhUUVVGVFF5eHhRa0ZCY1VKRExFVkJRVTFpTEVkQlEyeERMRWxCUVVsUkxFVkJRVkZMTEVWQlFVdGFMR2RDUVVGblFtRXNUMEZEYWtONlFpeHBRa0ZCYVVJd1FpeGxRVUZsTEZOQlFWVm1MRVZCUVU5UkxGRkJSWHBDVVN4SlFVRndRbWhDTEVWQlFVMXBRaXhYUVVFMFFuaENMRzFDUVVOWUxHVkJRWHBDZVVJc1VVRkJVVU1zU1VGQlNVTXNWVUZCTkVJMVFpeFRRVUZSTEVWQlFVOHNiVVpCUTNaRVF5eHJRa0ZCYlVJc1IwRkhja0lzU1VGQlN5eEpRVUZKTkVJc1JVRkJTU3hGUVVGSFFTeEZRVUZKVml4bFFVRmxWeXhQUVVGUlJDeEpRVUZMTEVOQlF6bERMRWxCUVVsRkxFVkJRVmRhTEdWQlFXVlZMRWRCUXpsQ0xFZEJRWFZDTEUxQlFXNUNja0lzUlVGQlRYVkNMRWRCUVZZc1EwRkhRU3hKUVVGSlF5eEZRVUZWUXl4TlFVRk5SQ3hSUVVGUmVFSXNSVUZCVFhWQ0xFbEJRemxDZGtJc1JVRkJUVTBzVjBGQllXdENMRVZCUTBrc1pVRkJla0pPTEZGQlFWRkRMRWxCUVVsRExGVkJRVFJDTlVJc1UwRkJVU3hGUVVGUExDdEZRVUZ4Uml0Q0xFVkJRVlZvUWl3MFFrRkJORUpETEV0QlEzaExVaXhGUVVGTlRTeFZRVUZaYTBJc1IwRkRTQ3hsUVVGNlFrNHNVVUZCVVVNc1NVRkJTVU1zVlVGQk5FSTFRaXhUUVVGUkxFVkJRVThzYzBaQlFUUkdLMElzUlVGQlZXaENMRFJDUVVFMFFrTXNUVUZYTDB3c1UwRkJVMG9zWTBGQlkxTXNSVUZCVFZBc1JVRkJWVzlDTEVkQlEzSkRMRWxCUVVsRExFVkJRV1ZPTEVWQlEyWlBMRVZCUVZWMFF5eHpRa0ZCYzBKMVF5eHZRa0ZCYjBKb1FpeEhRVUZOWlN4UlFVVTVSQ3hIUVVGSmRFSXNSVUZCVlN4RFFVVmFMRWxCUkVGeFFpeEZRVUZuUWl4SFFVTllUaXhGUVVGSkxFVkJRVWRCTEVWQlFVbExMRVZCUVZWS0xFOUJRVkZFTEVsQlEyaERUU3hGUVVGakxFZEJRVXRFTEVWQlFWVk1MRXRCUVUwc1JVRkZja01zU1VGQlMwRXNSVUZCU1N4RlFVRkhRU3hGUVVGSlR5eEZRVUZSVGl4UFFVRlJSQ3hKUVVGTExFTkJRMjVETEVsQlFVbFRMRVZCUVZkSUxFVkJRV05KTEdWQlFXVklMRVZCUVZGUUxFZEJRVWR1UWl4UFFVTnVSREJDTEVWQlFWRlFMRWRCUVVkVExGZEJRV0ZCTEVsQlF6RkNSaXhGUVVGUlVDeEhRVUZIVXl4VFFVRlhRU3hSUVVkeVFpeERRVWxNTEVsQlJFRklMRVZCUVdkQ0xFZEJRVXRFTEVWQlEyaENUQ3hGUVVGSkxFVkJRVWRCTEVWQlFVbFBMRVZCUVZGT0xFOUJRVkZFTEVsQlF6bENMRWRCUVVsUExFVkJRVkZRTEVkQlFVZHVRaXhSUVVGVmVVSXNSVUZGZGtJc1dVRkVRVU1zUlVGQlVWQXNSMEZCUjFNc1ZVRkJWeXhIUVVsMFFrWXNSVUZCVVU0c1UwRkRWazBzUlVGQlVTeEhRVUZIUlN4VlFVRlhMRWxCYjBJMVFpeEpRVUZKUlN4bFFVRnBRaXhEUVVOdVFrTXNZVUZCWXl4VFFVRlZjRUlzUlVGQlRXSXNSMEZETlVJc1QwRkJUMklzVVVGQlVTeEhRVUZKWVN4RlFVRlBMRU5CUTNoQ2EwTXNVMEZCVlhKQ0xFVkJRVXRtTEdOQlFXTnZReXhUUVVNM1FtaERMRmRCUVU5akxFdEJTVmh0UWl4aFFVRmpMRk5CUVZWMFFpeEZRVUZOWWl4SFFVTkRMR1ZCUVhwQ2EwSXNVVUZCVVVNc1NVRkJTVU1zVlVGRFpGSXNjVUpCUVhGQ1F5eEZRVUZOWWl4SFFVYzNRaXhKUVVGSlJTeEZRVUZSWWl4cFFrRkJhVUpqTEZOQlFWTklMRWRCUTNSRFlTeEZRVUZMWml4alFVRm5RaXhEUVVOdVFrTXNaVUZCWlN4RlFVTm1jVU1zWVVGQmRVSXNUVUZCVkd4RExFVkJRV2RDUVN4RlFVRlJSaXhGUVVGTmNVTXNZVUZETlVORExGVkJRVmNzUzBGRFdFb3NVMEZCVlVzc1kwRkJZME1zUzBGQlN6TkNMRWRCUXpkQ05FSXNXVUZCWVhCRExGRkJRVkZNTEVWQlFVMU5MR2RDUVVkVVZTeEpRVUZvUW1oQ0xFVkJRVTFGTEZsQlFUaERZeXhKUVVGMlFtaENMRVZCUVUxeFF5eGpRVUVyUWpORExESkNRVU16UXl4bFFVRjZRbmRDTEZGQlFWRkRMRWxCUVVsRExGVkJRVFJDTlVJc1UwRkJVU3hGUVVGUExESlNRVU4yUkVVc01FSkJRVEpDTEVsQlNTOUNaMFFzYzBKQlFYVkNMRk5CUVZVM1FpeEhRVWN2UWl4UFFVRlBRU3hGUVVGTFppeGpRVUZqYzBNc1kwRkhOVUpQTEd0Q1FVRnRRaXhUUVVGVk9VSXNSMEZETTBJc1NVRkJTV0lzUlVGQlVXRXNSVUZCUzFvc1owSkJRV2RDUkN4TlFVbHFRMkVzUlVGQlMyWXNZMEZCWTNORExHdENRVUZsY0VJc1JVRkZiRU1zU1VGQlNYbENMRVZCUVdNMVFpeEZRVUZMWml4alFVRmpNa01zV1VGRGNrTTFRaXhGUVVGTFppeGpRVUZqTWtNc1dVRkJZM0JETEZGQlFWRk1MRVZCUVUxTkxGVkJSUzlETEVsQlFVbEtMRVZCUVZGaUxHbENRVUZwUW1Nc1UwRkJVMGdzUjBGRGVrSXNUVUZCVkVVc1IwRkRSbGNzUlVGQlMyWXNZMEZCWTBNc1pVRkJaMElzUlVGRGJrTkxMR05CUVdOVExFVkJRVTFTTEZGQlFWRk1MRVZCUVUxTkxGVkJRVmRLTEVsQlEzQkRkVU1zU1VGQlowSndReXhSUVVGUlRDeEZRVUZOVFN4WlFVVmlMRTFCUVhSQ1RpeEZRVUZOY1VNc1lVRkRVbXBETEdOQlFXTlRMRVZCUVUxU0xGRkJRVkZNTEVWQlFVMU5MRlZCUVZkT0xFVkJRVTF4UXl4alFVZHVSR3BETEdOQlFXTlRMRVZCUVUxU0xGRkJRVkZNTEVWQlFVMU5MRlZCUVZkT0xFVkJRVTFOTEZOQlFWY3NSMEZCU3l4UFFVMHpSU3hUUVVGVGFVTXNZMEZCWTBzc1IwRkRja0lzU1VGQlNUVkRMRVZCUVZGS0xFdEJRVXRMTEdkQ1FVRm5Ra1FzVFVGRE4wSTJReXhGUVVGamVFUXNhVUpCUVdsQ2VVUXNaMEpCUVdkQ09VTXNSVUZCVHpSRExFZEJUVEZFTEU5QlNrbG9SQ3hMUVVGTFF5eGpRVU5RUkN4TFFVRkxSU3hqUVVGalF5eGxRVUZuUWl4SFFVVnlRMUlzWVVGQllYZEVMRXRCUVV0d1JDeDFRMEZCZDBORExFMUJRMjVFYVVRc1JVRkhWRWNzVDBGQlQwTXNVVUZCVldwQ0lpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDNKbFlXTjBMV1J2YlM5c2FXSXZVbVZoWTNSRVQwMVRaV3hsWTNRdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIEV4ZWN1dGlvbkVudmlyb25tZW50PXJlcXVpcmUoXCJmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKSxnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0PXJlcXVpcmUoXCIuL2dldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXRcIiksZ2V0VGV4dENvbnRlbnRBY2Nlc3Nvcj1yZXF1aXJlKFwiLi9nZXRUZXh0Q29udGVudEFjY2Vzc29yXCIpO2Z1bmN0aW9uIGlzQ29sbGFwc2VkKGUsdCxuLG8pe3JldHVybiBlPT09biYmdD09PW99ZnVuY3Rpb24gZ2V0SUVPZmZzZXRzKGUpe3ZhciB0PWRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpLG49dC50ZXh0Lmxlbmd0aCxvPXQuZHVwbGljYXRlKCk7by5tb3ZlVG9FbGVtZW50VGV4dChlKSxvLnNldEVuZFBvaW50KFwiRW5kVG9TdGFydFwiLHQpO3ZhciBzPW8udGV4dC5sZW5ndGg7cmV0dXJue3N0YXJ0OnMsZW5kOnMrbn19ZnVuY3Rpb24gZ2V0TW9kZXJuT2Zmc2V0cyhlKXt2YXIgdD13aW5kb3cuZ2V0U2VsZWN0aW9uJiZ3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7aWYoIXR8fDA9PT10LnJhbmdlQ291bnQpcmV0dXJuIG51bGw7dmFyIG49dC5hbmNob3JOb2RlLG89dC5hbmNob3JPZmZzZXQscz10LmZvY3VzTm9kZSxyPXQuZm9jdXNPZmZzZXQsYT10LmdldFJhbmdlQXQoMCk7dHJ5e2Euc3RhcnRDb250YWluZXIubm9kZVR5cGUsYS5lbmRDb250YWluZXIubm9kZVR5cGV9Y2F0Y2goZSl7cmV0dXJuIG51bGx9dmFyIGY9aXNDb2xsYXBzZWQodC5hbmNob3JOb2RlLHQuYW5jaG9yT2Zmc2V0LHQuZm9jdXNOb2RlLHQuZm9jdXNPZmZzZXQpPzA6YS50b1N0cmluZygpLmxlbmd0aCxkPWEuY2xvbmVSYW5nZSgpO2Quc2VsZWN0Tm9kZUNvbnRlbnRzKGUpLGQuc2V0RW5kKGEuc3RhcnRDb250YWluZXIsYS5zdGFydE9mZnNldCk7dmFyIGM9aXNDb2xsYXBzZWQoZC5zdGFydENvbnRhaW5lcixkLnN0YXJ0T2Zmc2V0LGQuZW5kQ29udGFpbmVyLGQuZW5kT2Zmc2V0KT8wOmQudG9TdHJpbmcoKS5sZW5ndGgsaT1jK2YsbD1kb2N1bWVudC5jcmVhdGVSYW5nZSgpO2wuc2V0U3RhcnQobixvKSxsLnNldEVuZChzLHIpO3ZhciBnPWwuY29sbGFwc2VkO3JldHVybntzdGFydDpnP2k6YyxlbmQ6Zz9jOml9fWZ1bmN0aW9uIHNldElFT2Zmc2V0cyhlLHQpe3ZhciBuLG8scz1kb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKS5kdXBsaWNhdGUoKTt2b2lkIDA9PT10LmVuZD9vPW49dC5zdGFydDp0LnN0YXJ0PnQuZW5kPyhuPXQuZW5kLG89dC5zdGFydCk6KG49dC5zdGFydCxvPXQuZW5kKSxzLm1vdmVUb0VsZW1lbnRUZXh0KGUpLHMubW92ZVN0YXJ0KFwiY2hhcmFjdGVyXCIsbikscy5zZXRFbmRQb2ludChcIkVuZFRvU3RhcnRcIixzKSxzLm1vdmVFbmQoXCJjaGFyYWN0ZXJcIixvLW4pLHMuc2VsZWN0KCl9ZnVuY3Rpb24gc2V0TW9kZXJuT2Zmc2V0cyhlLHQpe2lmKHdpbmRvdy5nZXRTZWxlY3Rpb24pe3ZhciBuPXdpbmRvdy5nZXRTZWxlY3Rpb24oKSxvPWVbZ2V0VGV4dENvbnRlbnRBY2Nlc3NvcigpXS5sZW5ndGgscz1NYXRoLm1pbih0LnN0YXJ0LG8pLHI9dm9pZCAwPT09dC5lbmQ/czpNYXRoLm1pbih0LmVuZCxvKTtpZighbi5leHRlbmQmJnM+cil7dmFyIGE9cjtyPXMscz1hfXZhciBmPWdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQoZSxzKSxkPWdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQoZSxyKTtpZihmJiZkKXt2YXIgYz1kb2N1bWVudC5jcmVhdGVSYW5nZSgpO2Muc2V0U3RhcnQoZi5ub2RlLGYub2Zmc2V0KSxuLnJlbW92ZUFsbFJhbmdlcygpLHM+cj8obi5hZGRSYW5nZShjKSxuLmV4dGVuZChkLm5vZGUsZC5vZmZzZXQpKTooYy5zZXRFbmQoZC5ub2RlLGQub2Zmc2V0KSxuLmFkZFJhbmdlKGMpKX19fXZhciB1c2VJRU9mZnNldHM9RXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NJiZcInNlbGVjdGlvblwiaW4gZG9jdW1lbnQmJiEoXCJnZXRTZWxlY3Rpb25cImluIHdpbmRvdyksUmVhY3RET01TZWxlY3Rpb249e2dldE9mZnNldHM6dXNlSUVPZmZzZXRzP2dldElFT2Zmc2V0czpnZXRNb2Rlcm5PZmZzZXRzLHNldE9mZnNldHM6dXNlSUVPZmZzZXRzP3NldElFT2Zmc2V0czpzZXRNb2Rlcm5PZmZzZXRzfTttb2R1bGUuZXhwb3J0cz1SZWFjdERPTVNlbGVjdGlvbjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSmxZV04wUkU5TlUyVnNaV04wYVc5dUxtcHpJbDBzSW01aGJXVnpJanBiSWtWNFpXTjFkR2x2YmtWdWRtbHliMjV0Wlc1MElpd2ljbVZ4ZFdseVpTSXNJbWRsZEU1dlpHVkdiM0pEYUdGeVlXTjBaWEpQWm1aelpYUWlMQ0puWlhSVVpYaDBRMjl1ZEdWdWRFRmpZMlZ6YzI5eUlpd2lhWE5EYjJ4c1lYQnpaV1FpTENKaGJtTm9iM0pPYjJSbElpd2lZVzVqYUc5eVQyWm1jMlYwSWl3aVptOWpkWE5PYjJSbElpd2labTlqZFhOUFptWnpaWFFpTENKblpYUkpSVTltWm5ObGRITWlMQ0p1YjJSbElpd2ljMlZzWldOMFpXUlNZVzVuWlNJc0ltUnZZM1Z0Wlc1MElpd2ljMlZzWldOMGFXOXVJaXdpWTNKbFlYUmxVbUZ1WjJVaUxDSnpaV3hsWTNSbFpFeGxibWQwYUNJc0luUmxlSFFpTENKc1pXNW5kR2dpTENKbWNtOXRVM1JoY25RaUxDSmtkWEJzYVdOaGRHVWlMQ0p0YjNabFZHOUZiR1Z0Wlc1MFZHVjRkQ0lzSW5ObGRFVnVaRkJ2YVc1MElpd2ljM1JoY25SUFptWnpaWFFpTENKemRHRnlkQ0lzSW1WdVpDSXNJbWRsZEUxdlpHVnliazltWm5ObGRITWlMQ0ozYVc1a2IzY2lMQ0puWlhSVFpXeGxZM1JwYjI0aUxDSnlZVzVuWlVOdmRXNTBJaXdpWTNWeWNtVnVkRkpoYm1kbElpd2laMlYwVW1GdVoyVkJkQ0lzSW5OMFlYSjBRMjl1ZEdGcGJtVnlJaXdpYm05a1pWUjVjR1VpTENKbGJtUkRiMjUwWVdsdVpYSWlMQ0psSWl3aWNtRnVaMlZNWlc1bmRHZ2lMQ0owYjFOMGNtbHVaeUlzSW5SbGJYQlNZVzVuWlNJc0ltTnNiMjVsVW1GdVoyVWlMQ0p6Wld4bFkzUk9iMlJsUTI5dWRHVnVkSE1pTENKelpYUkZibVFpTENKbGJtUlBabVp6WlhRaUxDSmtaWFJsWTNScGIyNVNZVzVuWlNJc0luTmxkRk4wWVhKMElpd2lhWE5DWVdOcmQyRnlaQ0lzSW1OdmJHeGhjSE5sWkNJc0luTmxkRWxGVDJabWMyVjBjeUlzSW05bVpuTmxkSE1pTENKeVlXNW5aU0lzSW5WdVpHVm1hVzVsWkNJc0ltMXZkbVZUZEdGeWRDSXNJbTF2ZG1WRmJtUWlMQ0p6Wld4bFkzUWlMQ0p6WlhSTmIyUmxjbTVQWm1aelpYUnpJaXdpVFdGMGFDSXNJbTFwYmlJc0ltVjRkR1Z1WkNJc0luUmxiWEFpTENKemRHRnlkRTFoY210bGNpSXNJbVZ1WkUxaGNtdGxjaUlzSW05bVpuTmxkQ0lzSW5KbGJXOTJaVUZzYkZKaGJtZGxjeUlzSW1Ga1pGSmhibWRsSWl3aWRYTmxTVVZQWm1aelpYUnpJaXdpWTJGdVZYTmxSRTlOSWl3aVVtVmhZM1JFVDAxVFpXeGxZM1JwYjI0aUxDSm5aWFJQWm1aelpYUnpJaXdpYzJWMFQyWm1jMlYwY3lJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVZGQkxHRkJSVUVzU1VGQlNVRXNjVUpCUVhWQ1F5eFJRVUZSTEdsRFFVVXZRa01zTUVKQlFUUkNSQ3hSUVVGUkxDdENRVU53UTBVc2RVSkJRWGxDUml4UlFVRlJMRFJDUVU5eVF5eFRRVUZUUnl4WlFVRlpReXhGUVVGWlF5eEZRVUZqUXl4RlFVRlhReXhIUVVONFJDeFBRVUZQU0N4SlFVRmxSU3hIUVVGaFJDeEpRVUZwUWtVc1JVRnBRblJFTEZOQlFWTkRMR0ZCUVdGRExFZEJRM0JDTEVsQlEwbERMRVZCUkZsRExGTkJRVk5ETEZWQlEwdERMR05CUXpGQ1F5eEZRVUZwUWtvc1JVRkJZMHNzUzBGQlMwTXNUMEZIY0VORExFVkJRVmxRTEVWQlFXTlJMRmxCUXpsQ1JDeEZRVUZWUlN4clFrRkJhMEpXTEVkQlF6VkNVU3hGUVVGVlJ5eFpRVUZaTEdGQlFXTldMRWRCUlhCRExFbEJRVWxYTEVWQlFXTktMRVZCUVZWR0xFdEJRVXRETEU5QlIycERMRTFCUVU4c1EwRkRURTBzVFVGQlQwUXNSVUZEVUVVc1NVRktZMFlzUlVGQlkxQXNSMEZaYUVNc1UwRkJVMVVzYVVKQlFXbENaaXhIUVVONFFpeEpRVUZKUnl4RlFVRlpZU3hQUVVGUFF5eGpRVUZuUWtRc1QwRkJUME1zWlVGRk9VTXNTVUZCUzJRc1IwRkJjME1zU1VGQmVrSkJMRVZCUVZWbExGZEJRekZDTEU5QlFVOHNTMEZIVkN4SlFVRkpka0lzUlVGQllWRXNSVUZCVlZJc1YwRkRka0pETEVWQlFXVlBMRVZCUVZWUUxHRkJRM3BDUXl4RlFVRlpUU3hGUVVGVlRpeFZRVU4wUWtNc1JVRkJZMHNzUlVGQlZVd3NXVUZGZUVKeFFpeEZRVUZsYUVJc1JVRkJWV2xDTEZkQlFWY3NSMEZUZUVNc1NVRkZSVVFzUlVGQllVVXNaVUZCWlVNc1UwRkROVUpJTEVWQlFXRkpMR0ZCUVdGRUxGTkJSVEZDTEUxQlFVOUZMRWRCUTFBc1QwRkJUeXhMUVUxVUxFbEJSVWxETEVWQlJuVkNMMElzV1VGQldWTXNSVUZCVlZJc1YwRkJXVkVzUlVGQlZWQXNZVUZCWTA4c1JVRkJWVTRzVlVGQlYwMHNSVUZCVlV3c1lVRkZNMFVzUlVGQlNYRkNMRVZCUVdGUExGZEJRVmR1UWl4UFFVVnFSVzlDTEVWQlFWbFNMRVZCUVdGVExHRkJRemRDUkN4RlFVRlZSU3h0UWtGQmJVSTNRaXhIUVVNM1FqSkNMRVZCUVZWSExFOUJRVTlZTEVWQlFXRkZMR1ZCUVdkQ1JpeEZRVUZoVUN4aFFVVXpSQ3hKUVVWSlF5eEZRVVoxUW01Q0xGbEJRVmxwUXl4RlFVRlZUaXhsUVVGblFrMHNSVUZCVldZc1dVRkJZV1VzUlVGQlZVb3NZVUZCWTBrc1JVRkJWVWtzVjBGRmRrWXNSVUZCU1Vvc1JVRkJWVVFzVjBGQlYyNUNMRTlCUTNoRVR5eEZRVUZOUkN4RlFVRlJXU3hGUVVka1R5eEZRVUZwUWpsQ0xGTkJRVk5GTEdOQlF6bENORUlzUlVGQlpVTXNVMEZCVTNSRExFVkJRVmxETEVkQlEzQkRiME1zUlVGQlpVWXNUMEZCVDJwRExFVkJRVmRETEVkQlEycERMRWxCUVVsdlF5eEZRVUZoUml4RlFVRmxSeXhWUVVWb1F5eE5RVUZQTEVOQlEweDBRaXhOUVVGUGNVSXNSVUZCWVhCQ0xFVkJRVTFFTEVWQlF6RkNReXhKUVVGTGIwSXNSVUZCWVhKQ0xFVkJRVkZETEVkQlVUbENMRk5CUVZOelFpeGhRVUZoY0VNc1JVRkJUWEZETEVkQlF6RkNMRWxCUTBsNFFpeEZRVUZQUXl4RlFVUlFkMElzUlVGQlVYQkRMRk5CUVZORExGVkJRVlZETEdOQlFXTkxMR2xDUVVkNlFqaENMRWxCUVdoQ1JpeEZRVUZSZGtJc1NVRkZWa0VzUlVGRVFVUXNSVUZCVVhkQ0xFVkJRVkY0UWl4TlFVVlFkMElzUlVGQlVYaENMRTFCUVZGM1FpeEZRVUZSZGtJc1MwRkRha05FTEVWQlFWRjNRaXhGUVVGUmRrSXNTVUZEYUVKQkxFVkJRVTExUWl4RlFVRlJlRUlzVVVGRlpFRXNSVUZCVVhkQ0xFVkJRVkY0UWl4TlFVTm9Ra01zUlVGQlRYVkNMRVZCUVZGMlFpeExRVWRvUW5kQ0xFVkJRVTAxUWl4clFrRkJhMEpXTEVkQlEzaENjME1zUlVGQlRVVXNWVUZCVlN4WlFVRmhNMElzUjBGRE4wSjVRaXhGUVVGTk0wSXNXVUZCV1N4aFFVRmpNa0lzUjBGRGFFTkJMRVZCUVUxSExGRkJRVkVzV1VGQllUTkNMRVZCUVUxRUxFZEJRMnBEZVVJc1JVRkJUVWtzVTBGbFVpeFRRVUZUUXl4cFFrRkJhVUl6UXl4RlFVRk5jVU1zUjBGRE9VSXNSMEZCUzNKQ0xFOUJRVTlETEdGQlFWb3NRMEZKUVN4SlFVRkpaQ3hGUVVGWllTeFBRVUZQUXl4bFFVTnVRbFlzUlVGQlUxQXNSVUZCUzFBc01FSkJRVEJDWXl4UFFVTjRRMDBzUlVGQlVTdENMRXRCUVV0RExFbEJRVWxTTEVWQlFWRjRRaXhOUVVGUFRpeEhRVU5vUTA4c1QwRkJjMEo1UWl4SlFVRm9Ra1lzUlVGQlVYWkNMRWxCUVc5Q1JDeEZRVUZSSzBJc1MwRkJTME1zU1VGQlNWSXNSVUZCVVhaQ0xFbEJRVXRRTEVkQlNYQkZMRWxCUVV0S0xFVkJRVlV5UXl4UlFVRlZha01zUlVGQlVVTXNSVUZCU3l4RFFVTndReXhKUVVGSmFVTXNSVUZCVDJwRExFVkJRMWhCTEVWQlFVMUVMRVZCUTA1QkxFVkJRVkZyUXl4RlFVZFdMRWxCUVVsRExFVkJRV040UkN3d1FrRkJNRUpSTEVWQlFVMWhMRWRCUXpsRGIwTXNSVUZCV1hwRUxEQkNRVUV3UWxFc1JVRkJUV01zUjBGRmFFUXNSMEZCU1d0RExFZEJRV1ZETEVWQlFWY3NRMEZETlVJc1NVRkJTVmdzUlVGQlVYQkRMRk5CUVZORkxHTkJRM0pDYTBNc1JVRkJUVXdzVTBGQlUyVXNSVUZCV1doRUxFdEJRVTFuUkN4RlFVRlpSU3hSUVVNM1F5OURMRVZCUVZWblJDeHJRa0ZGVG5SRExFVkJRVkZETEVkQlExWllMRVZCUVZWcFJDeFRRVUZUWkN4SFFVTnVRbTVETEVWQlFWVXlReXhQUVVGUFJ5eEZRVUZWYWtRc1MwRkJUV2xFTEVWQlFWVkRMRlZCUlRORFdpeEZRVUZOVWl4UFFVRlBiVUlzUlVGQlZXcEVMRXRCUVUxcFJDeEZRVUZWUXl4UlFVTjJReTlETEVWQlFWVnBSQ3hUUVVGVFpDeE5RVXQ2UWl4SlFVRkpaU3hoUVVGbEwwUXNjVUpCUVhGQ1owVXNWMEZCWVN4alFVRmxjRVFzV1VGQll5eHBRa0ZCYTBKakxGRkJSV2hIZFVNc2EwSkJRVzlDTEVOQlNYUkNReXhYUVVGWlNDeGhRVUZsZEVRc1lVRkJaV2RDTEdsQ1FVMHhRekJETEZkQlFWbEtMR0ZCUVdWcVFpeGhRVUZsVHl4clFrRkhOVU5sTEU5QlFVOURMRkZCUVZWS0lpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDNKbFlXTjBMV1J2YlM5c2FXSXZVbVZoWTNSRVQwMVRaV3hsWTNScGIyNHVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciBfcHJvZEludmFyaWFudD1yZXF1aXJlKFwiLi9yZWFjdFByb2RJbnZhcmlhbnRcIiksX2Fzc2lnbj1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxET01DaGlsZHJlbk9wZXJhdGlvbnM9cmVxdWlyZShcIi4vRE9NQ2hpbGRyZW5PcGVyYXRpb25zXCIpLERPTUxhenlUcmVlPXJlcXVpcmUoXCIuL0RPTUxhenlUcmVlXCIpLFJlYWN0RE9NQ29tcG9uZW50VHJlZT1yZXF1aXJlKFwiLi9SZWFjdERPTUNvbXBvbmVudFRyZWVcIiksZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyPXJlcXVpcmUoXCIuL2VzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlclwiKSxpbnZhcmlhbnQ9cmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKSx2YWxpZGF0ZURPTU5lc3Rpbmc9cmVxdWlyZShcIi4vdmFsaWRhdGVET01OZXN0aW5nXCIpLFJlYWN0RE9NVGV4dENvbXBvbmVudD1mdW5jdGlvbihlKXt0aGlzLl9jdXJyZW50RWxlbWVudD1lLHRoaXMuX3N0cmluZ1RleHQ9XCJcIitlLHRoaXMuX2hvc3ROb2RlPW51bGwsdGhpcy5faG9zdFBhcmVudD1udWxsLHRoaXMuX2RvbUlEPTAsdGhpcy5fbW91bnRJbmRleD0wLHRoaXMuX2Nsb3NpbmdDb21tZW50PW51bGwsdGhpcy5fY29tbWVudE5vZGVzPW51bGx9O19hc3NpZ24oUmVhY3RET01UZXh0Q29tcG9uZW50LnByb3RvdHlwZSx7bW91bnRDb21wb25lbnQ6ZnVuY3Rpb24oZSx0LG4scil7dmFyIG87XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKG51bGwhPXQ/bz10Ll9hbmNlc3RvckluZm86bnVsbCE9biYmKG89bi5fYW5jZXN0b3JJbmZvKSxvJiZ2YWxpZGF0ZURPTU5lc3RpbmcobnVsbCx0aGlzLl9zdHJpbmdUZXh0LHRoaXMsbykpO3ZhciBpPW4uX2lkQ291bnRlcisrLHM9XCIgcmVhY3QtdGV4dDogXCIraStcIiBcIjtpZih0aGlzLl9kb21JRD1pLHRoaXMuX2hvc3RQYXJlbnQ9dCxlLnVzZUNyZWF0ZUVsZW1lbnQpe3ZhciBhPW4uX293bmVyRG9jdW1lbnQsYz1hLmNyZWF0ZUNvbW1lbnQocyksbT1hLmNyZWF0ZUNvbW1lbnQoXCIgL3JlYWN0LXRleHQgXCIpLHU9RE9NTGF6eVRyZWUoYS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCkpO3JldHVybiBET01MYXp5VHJlZS5xdWV1ZUNoaWxkKHUsRE9NTGF6eVRyZWUoYykpLHRoaXMuX3N0cmluZ1RleHQmJkRPTUxhenlUcmVlLnF1ZXVlQ2hpbGQodSxET01MYXp5VHJlZShhLmNyZWF0ZVRleHROb2RlKHRoaXMuX3N0cmluZ1RleHQpKSksRE9NTGF6eVRyZWUucXVldWVDaGlsZCh1LERPTUxhenlUcmVlKG0pKSxSZWFjdERPTUNvbXBvbmVudFRyZWUucHJlY2FjaGVOb2RlKHRoaXMsYyksdGhpcy5fY2xvc2luZ0NvbW1lbnQ9bSx1fXZhciBsPWVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3Nlcih0aGlzLl9zdHJpbmdUZXh0KTtyZXR1cm4gZS5yZW5kZXJUb1N0YXRpY01hcmt1cD9sOlwiXFx4M2MhLS1cIitzK1wiLS1cXHgzZVwiK2wrXCJcXHgzYyEtLSAvcmVhY3QtdGV4dCAtLVxceDNlXCJ9LHJlY2VpdmVDb21wb25lbnQ6ZnVuY3Rpb24oZSx0KXtpZihlIT09dGhpcy5fY3VycmVudEVsZW1lbnQpe3RoaXMuX2N1cnJlbnRFbGVtZW50PWU7dmFyIG49XCJcIitlO2lmKG4hPT10aGlzLl9zdHJpbmdUZXh0KXt0aGlzLl9zdHJpbmdUZXh0PW47dmFyIHI9dGhpcy5nZXRIb3N0Tm9kZSgpO0RPTUNoaWxkcmVuT3BlcmF0aW9ucy5yZXBsYWNlRGVsaW1pdGVkVGV4dChyWzBdLHJbMV0sbil9fX0sZ2V0SG9zdE5vZGU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLl9jb21tZW50Tm9kZXM7aWYoZSlyZXR1cm4gZTtpZighdGhpcy5fY2xvc2luZ0NvbW1lbnQpZm9yKHZhciB0PVJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKHRoaXMpLm5leHRTaWJsaW5nOzspe2lmKG51bGw9PXQmJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcIk1pc3NpbmcgY2xvc2luZyBjb21tZW50IGZvciB0ZXh0IGNvbXBvbmVudCAlc1wiLHRoaXMuX2RvbUlEKTpfcHJvZEludmFyaWFudChcIjY3XCIsdGhpcy5fZG9tSUQpKSw4PT09dC5ub2RlVHlwZSYmXCIgL3JlYWN0LXRleHQgXCI9PT10Lm5vZGVWYWx1ZSl7dGhpcy5fY2xvc2luZ0NvbW1lbnQ9dDticmVha310PXQubmV4dFNpYmxpbmd9cmV0dXJuIGU9W3RoaXMuX2hvc3ROb2RlLHRoaXMuX2Nsb3NpbmdDb21tZW50XSx0aGlzLl9jb21tZW50Tm9kZXM9ZSxlfSx1bm1vdW50Q29tcG9uZW50OmZ1bmN0aW9uKCl7dGhpcy5fY2xvc2luZ0NvbW1lbnQ9bnVsbCx0aGlzLl9jb21tZW50Tm9kZXM9bnVsbCxSZWFjdERPTUNvbXBvbmVudFRyZWUudW5jYWNoZU5vZGUodGhpcyl9fSksbW9kdWxlLmV4cG9ydHM9UmVhY3RET01UZXh0Q29tcG9uZW50O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxKbFlXTjBSRTlOVkdWNGRFTnZiWEJ2Ym1WdWRDNXFjeUpkTENKdVlXMWxjeUk2V3lKZmNISnZaRWx1ZG1GeWFXRnVkQ0lzSW5KbGNYVnBjbVVpTENKZllYTnphV2R1SWl3aVJFOU5RMmhwYkdSeVpXNVBjR1Z5WVhScGIyNXpJaXdpUkU5TlRHRjZlVlJ5WldVaUxDSlNaV0ZqZEVSUFRVTnZiWEJ2Ym1WdWRGUnlaV1VpTENKbGMyTmhjR1ZVWlhoMFEyOXVkR1Z1ZEVadmNrSnliM2R6WlhJaUxDSnBiblpoY21saGJuUWlMQ0oyWVd4cFpHRjBaVVJQVFU1bGMzUnBibWNpTENKU1pXRmpkRVJQVFZSbGVIUkRiMjF3YjI1bGJuUWlMQ0owWlhoMElpd2lkR2hwY3lJc0lsOWpkWEp5Wlc1MFJXeGxiV1Z1ZENJc0lsOXpkSEpwYm1kVVpYaDBJaXdpWDJodmMzUk9iMlJsSWl3aVgyaHZjM1JRWVhKbGJuUWlMQ0pmWkc5dFNVUWlMQ0pmYlc5MWJuUkpibVJsZUNJc0lsOWpiRzl6YVc1blEyOXRiV1Z1ZENJc0lsOWpiMjF0Wlc1MFRtOWtaWE1pTENKd2NtOTBiM1I1Y0dVaUxDSnRiM1Z1ZEVOdmJYQnZibVZ1ZENJc0luUnlZVzV6WVdOMGFXOXVJaXdpYUc5emRGQmhjbVZ1ZENJc0ltaHZjM1JEYjI1MFlXbHVaWEpKYm1adklpd2lZMjl1ZEdWNGRDSXNJbkJoY21WdWRFbHVabThpTENKd2NtOWpaWE56SWl3aVpXNTJJaXdpVGs5RVJWOUZUbFlpTENKZllXNWpaWE4wYjNKSmJtWnZJaXdpWkc5dFNVUWlMQ0pmYVdSRGIzVnVkR1Z5SWl3aWIzQmxibWx1WjFaaGJIVmxJaXdpZFhObFEzSmxZWFJsUld4bGJXVnVkQ0lzSW05M2JtVnlSRzlqZFcxbGJuUWlMQ0pmYjNkdVpYSkViMk4xYldWdWRDSXNJbTl3Wlc1cGJtZERiMjF0Wlc1MElpd2lZM0psWVhSbFEyOXRiV1Z1ZENJc0ltTnNiM05wYm1kRGIyMXRaVzUwSWl3aWJHRjZlVlJ5WldVaUxDSmpjbVZoZEdWRWIyTjFiV1Z1ZEVaeVlXZHRaVzUwSWl3aWNYVmxkV1ZEYUdsc1pDSXNJbU55WldGMFpWUmxlSFJPYjJSbElpd2ljSEpsWTJGamFHVk9iMlJsSWl3aVpYTmpZWEJsWkZSbGVIUWlMQ0p5Wlc1a1pYSlViMU4wWVhScFkwMWhjbXQxY0NJc0luSmxZMlZwZG1WRGIyMXdiMjVsYm5RaUxDSnVaWGgwVkdWNGRDSXNJbTVsZUhSVGRISnBibWRVWlhoMElpd2lZMjl0YldWdWRFNXZaR1Z6SWl3aVoyVjBTRzl6ZEU1dlpHVWlMQ0p5WlhCc1lXTmxSR1ZzYVcxcGRHVmtWR1Y0ZENJc0ltaHZjM1JPYjJSbElpd2libTlrWlNJc0ltZGxkRTV2WkdWR2NtOXRTVzV6ZEdGdVkyVWlMQ0p1WlhoMFUybGliR2x1WnlJc0ltNXZaR1ZVZVhCbElpd2libTlrWlZaaGJIVmxJaXdpZFc1dGIzVnVkRU52YlhCdmJtVnVkQ0lzSW5WdVkyRmphR1ZPYjJSbElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlVVRXNZVUZGUVN4SlFVRkpRU3hsUVVGcFFrTXNVVUZCVVN4M1FrRkRla0pETEZGQlFWVkVMRkZCUVZFc2FVSkJSV3hDUlN4elFrRkJkMEpHTEZGQlFWRXNNa0pCUTJoRFJ5eFpRVUZqU0N4UlFVRlJMR2xDUVVOMFFra3NjMEpCUVhkQ1NpeFJRVUZSTERKQ1FVVm9RMHNzTkVKQlFUaENUQ3hSUVVGUkxHbERRVU4wUTAwc1ZVRkJXVTRzVVVGQlVTeHpRa0ZEY0VKUExHMUNRVUZ4UWxBc1VVRkJVU3gzUWtGcFFqZENVU3h6UWtGQmQwSXNVMEZCVlVNc1IwRkZjRU5ETEV0QlFVdERMR2RDUVVGclFrWXNSVUZEZGtKRExFdEJRVXRGTEZsQlFXTXNSMEZCUzBnc1JVRkZlRUpETEV0QlFVdEhMRlZCUVZrc1MwRkRha0pJTEV0QlFVdEpMRmxCUVdNc1MwRkhia0pLTEV0QlFVdExMRTlCUVZNc1JVRkRaRXdzUzBGQlMwMHNXVUZCWXl4RlFVTnVRazRzUzBGQlMwOHNaMEpCUVd0Q0xFdEJRM1pDVUN4TFFVRkxVU3hqUVVGblFpeE5RVWQyUW1wQ0xGRkJRVkZQTEhOQ1FVRnpRbGNzVlVGQlZ5eERRVk4yUTBNc1pVRkJaMElzVTBGQlZVTXNSVUZCWVVNc1JVRkJXVU1zUlVGQmJVSkRMRWRCUld4RkxFbEJRVWxETEVWQlJIVkNMR1ZCUVhwQ1F5eFJRVUZSUXl4SlFVRkpReXhYUVVWSkxFMUJRV1JPTEVWQlEwWkhMRVZCUVdGSUxFVkJRVmRQTEdOQlEwMHNUVUZCY2tKT0xFbEJRMVJGTEVWQlFXRkdMRVZCUVd0Q1RTeGxRVVUzUWtvc1IwRkhSbXhDTEcxQ1FVRnRRaXhMUVVGTlJ5eExRVUZMUlN4WlFVRmhSaXhMUVVGTlpTeEpRVWx5UkN4SlFVRkpTeXhGUVVGUlVDeEZRVUZyUWxFc1lVRkRNVUpETEVWQlFXVXNaMEpCUVd0Q1JpeEZRVUZSTEVsQlNUZERMRWRCUmtGd1FpeExRVUZMU3l4UFFVRlRaU3hGUVVOa2NFSXNTMEZCUzBrc1dVRkJZMUVzUlVGRFprUXNSVUZCV1Zrc2FVSkJRV3RDTEVOQlEyaERMRWxCUVVsRExFVkJRV2RDV0N4RlFVRnJRbGtzWlVGRGJFTkRMRVZCUVdsQ1JpeEZRVUZqUnl4alFVRmpUQ3hIUVVNM1EwMHNSVUZCYVVKS0xFVkJRV05ITEdOQlRteENMR2xDUVU5aVJTeEZRVUZYY0VNc1dVRkJXU3RDTEVWQlFXTk5MREJDUVZGNlF5eFBRVkJCY2tNc1dVRkJXWE5ETEZkQlFWZEdMRVZCUVZWd1F5eFpRVUZaYVVNc1NVRkRla014UWl4TFFVRkxSU3hoUVVOUVZDeFpRVUZaYzBNc1YwRkJWMFlzUlVGQlZYQkRMRmxCUVZrclFpeEZRVUZqVVN4bFFVRmxhRU1zUzBGQlMwVXNaVUZGYWtaVUxGbEJRVmx6UXl4WFFVRlhSaXhGUVVGVmNFTXNXVUZCV1cxRExFbEJRemREYkVNc2MwSkJRWE5DZFVNc1lVRkJZV3BETEV0QlFVMHdRaXhIUVVONlF6RkNMRXRCUVV0UExHZENRVUZyUW5GQ0xFVkJRMmhDUXl4RlFVVlFMRWxCUVVsTExFVkJRV04yUXl3MFFrRkJORUpMTEV0QlFVdEZMR0ZCUlc1RUxFOUJRVWxUTEVWQlFWbDNRaXh4UWtGSlVFUXNSVUZIUml4VlFVRlRXaXhGUVVGbExGTkJRVkZaTEVWQlFXTXNPRUpCVjNwRVJTeHBRa0ZCYTBJc1UwRkJWVU1zUlVGQlZURkNMRWRCUTNCRExFZEJRVWt3UWl4SlFVRmhja01zUzBGQlMwTXNaMEpCUVdsQ0xFTkJRM0pEUkN4TFFVRkxReXhuUWtGQmEwSnZReXhGUVVOMlFpeEpRVUZKUXl4RlFVRnBRaXhIUVVGTFJDeEZRVU14UWl4SFFVRkpReXhKUVVGdFFuUkRMRXRCUVV0RkxGbEJRV0VzUTBGSmRrTkdMRXRCUVV0RkxGbEJRV052UXl4RlFVTnVRaXhKUVVGSlF5eEZRVUZsZGtNc1MwRkJTM2RETEdOQlEzaENhRVFzYzBKQlFYTkNhVVFzY1VKQlFYRkNSaXhGUVVGaExFZEJRVWxCTEVWQlFXRXNSMEZCU1VRc1RVRkxia1pGTEZsQlFXRXNWMEZEV0N4SlFVRkpSU3hGUVVGWE1VTXNTMEZCUzFFc1kwRkRjRUlzUjBGQlNXdERMRVZCUTBZc1QwRkJUMEVzUlVGRlZDeEpRVUZMTVVNc1MwRkJTMDhzWjBKQlIxSXNTVUZHUVN4SlFVTkpiME1zUlVGRWFVSnFSQ3h6UWtGQmMwSnJSQ3h2UWtGQmIwSTFReXhOUVVOeVF6WkRMR05CUTJJc1EwRkZXQ3hIUVVSVkxFMUJRVkpHTEVsQlFYbERMR1ZCUVhwQ00wSXNVVUZCVVVNc1NVRkJTVU1zVTBGQk5FSjBRaXhYUVVGVkxFVkJRVThzWjBSQlFXbEVTU3hMUVVGTFN5eFJRVUZWYUVJc1pVRkJaU3hMUVVGTlZ5eExRVUZMU3l4VFFVTXZTU3hKUVVGc1FuTkRMRVZCUVV0SExGVkJRWEZETEd0Q1FVRnVRa2dzUlVGQlMwa3NWVUZCSzBJc1EwRkROMFF2UXl4TFFVRkxUeXhuUWtGQmEwSnZReXhGUVVOMlFpeE5RVVZHUVN4RlFVRlBRU3hGUVVGTFJTeFpRVXRvUWl4UFFVWkJTQ3hGUVVGWExFTkJRVU14UXl4TFFVRkxSeXhWUVVGWFNDeExRVUZMVHl4cFFrRkRha05RTEV0QlFVdFJMR05CUVdkQ2EwTXNSVUZEWkVFc1IwRkhWRTBzYVVKQlFXdENMRmRCUTJoQ2FFUXNTMEZCUzA4c1owSkJRV3RDTEV0QlEzWkNVQ3hMUVVGTFVTeGpRVUZuUWl4TFFVTnlRbVFzYzBKQlFYTkNkVVFzV1VGQldXcEVMRk5CU1hSRGEwUXNUMEZCVDBNc1VVRkJWWEpFSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdOMExXUnZiUzlzYVdJdlVtVmhZM1JFVDAxVVpYaDBRMjl0Y0c5dVpXNTBMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBfcHJvZEludmFyaWFudD1yZXF1aXJlKFwiLi9yZWFjdFByb2RJbnZhcmlhbnRcIiksX2Fzc2lnbj1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxMaW5rZWRWYWx1ZVV0aWxzPXJlcXVpcmUoXCIuL0xpbmtlZFZhbHVlVXRpbHNcIiksUmVhY3RET01Db21wb25lbnRUcmVlPXJlcXVpcmUoXCIuL1JlYWN0RE9NQ29tcG9uZW50VHJlZVwiKSxSZWFjdFVwZGF0ZXM9cmVxdWlyZShcIi4vUmVhY3RVcGRhdGVzXCIpLGludmFyaWFudD1yZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpLHdhcm5pbmc9cmVxdWlyZShcImZianMvbGliL3dhcm5pbmdcIiksZGlkV2FyblZhbHVlTGluaz0hMSxkaWRXYXJuVmFsRGVmYXVsdFZhbD0hMTtmdW5jdGlvbiBmb3JjZVVwZGF0ZUlmTW91bnRlZCgpe3RoaXMuX3Jvb3ROb2RlSUQmJlJlYWN0RE9NVGV4dGFyZWEudXBkYXRlV3JhcHBlcih0aGlzKX12YXIgUmVhY3RET01UZXh0YXJlYT17Z2V0SG9zdFByb3BzOmZ1bmN0aW9uKGUsYSl7cmV0dXJuIG51bGwhPWEuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcImBkYW5nZXJvdXNseVNldElubmVySFRNTGAgZG9lcyBub3QgbWFrZSBzZW5zZSBvbiA8dGV4dGFyZWE+LlwiKTpfcHJvZEludmFyaWFudChcIjkxXCIpKSxfYXNzaWduKHt9LGEse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrZS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSxvbkNoYW5nZTplLl93cmFwcGVyU3RhdGUub25DaGFuZ2V9KX0sbW91bnRXcmFwcGVyOmZ1bmN0aW9uKGUsYSl7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKExpbmtlZFZhbHVlVXRpbHMuY2hlY2tQcm9wVHlwZXMoXCJ0ZXh0YXJlYVwiLGEsZS5fY3VycmVudEVsZW1lbnQuX293bmVyKSx2b2lkIDA9PT1hLnZhbHVlTGlua3x8ZGlkV2FyblZhbHVlTGlua3x8KFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcoITEsXCJgdmFsdWVMaW5rYCBwcm9wIG9uIGB0ZXh0YXJlYWAgaXMgZGVwcmVjYXRlZDsgc2V0IGB2YWx1ZWAgYW5kIGBvbkNoYW5nZWAgaW5zdGVhZC5cIiksZGlkV2FyblZhbHVlTGluaz0hMCksdm9pZCAwPT09YS52YWx1ZXx8dm9pZCAwPT09YS5kZWZhdWx0VmFsdWV8fGRpZFdhcm5WYWxEZWZhdWx0VmFsfHwoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FybmluZyghMSxcIlRleHRhcmVhIGVsZW1lbnRzIG11c3QgYmUgZWl0aGVyIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkIChzcGVjaWZ5IGVpdGhlciB0aGUgdmFsdWUgcHJvcCwgb3IgdGhlIGRlZmF1bHRWYWx1ZSBwcm9wLCBidXQgbm90IGJvdGgpLiBEZWNpZGUgYmV0d2VlbiB1c2luZyBhIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkIHRleHRhcmVhIGFuZCByZW1vdmUgb25lIG9mIHRoZXNlIHByb3BzLiBNb3JlIGluZm86IGh0dHBzOi8vZmIubWUvcmVhY3QtY29udHJvbGxlZC1jb21wb25lbnRzXCIpLGRpZFdhcm5WYWxEZWZhdWx0VmFsPSEwKSk7dmFyIG49TGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZShhKSx0PW47aWYobnVsbD09bil7dmFyIHI9YS5kZWZhdWx0VmFsdWUsbz1hLmNoaWxkcmVuO251bGwhPW8mJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ3YXJuaW5nKCExLFwiVXNlIHRoZSBgZGVmYXVsdFZhbHVlYCBvciBgdmFsdWVgIHByb3BzIGluc3RlYWQgb2Ygc2V0dGluZyBjaGlsZHJlbiBvbiA8dGV4dGFyZWE+LlwiKSxudWxsIT1yJiYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoITEsXCJJZiB5b3Ugc3VwcGx5IGBkZWZhdWx0VmFsdWVgIG9uIGEgPHRleHRhcmVhPiwgZG8gbm90IHBhc3MgY2hpbGRyZW4uXCIpOl9wcm9kSW52YXJpYW50KFwiOTJcIikpLEFycmF5LmlzQXJyYXkobykmJihvLmxlbmd0aDw9MXx8KFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwiPHRleHRhcmVhPiBjYW4gb25seSBoYXZlIGF0IG1vc3Qgb25lIGNoaWxkLlwiKTpfcHJvZEludmFyaWFudChcIjkzXCIpKSxvPW9bMF0pLHI9XCJcIitvKSxudWxsPT1yJiYocj1cIlwiKSx0PXJ9ZS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6XCJcIit0LGxpc3RlbmVyczpudWxsLG9uQ2hhbmdlOl9oYW5kbGVDaGFuZ2UuYmluZChlKX19LHVwZGF0ZVdyYXBwZXI6ZnVuY3Rpb24oZSl7dmFyIGE9ZS5fY3VycmVudEVsZW1lbnQucHJvcHMsbj1SZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZShlKSx0PUxpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUoYSk7aWYobnVsbCE9dCl7dmFyIHI9XCJcIit0O3IhPT1uLnZhbHVlJiYobi52YWx1ZT1yKSxudWxsPT1hLmRlZmF1bHRWYWx1ZSYmKG4uZGVmYXVsdFZhbHVlPXIpfW51bGwhPWEuZGVmYXVsdFZhbHVlJiYobi5kZWZhdWx0VmFsdWU9YS5kZWZhdWx0VmFsdWUpfSxwb3N0TW91bnRXcmFwcGVyOmZ1bmN0aW9uKGUpe3ZhciBhPVJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKGUpLG49YS50ZXh0Q29udGVudDtuPT09ZS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmKGEudmFsdWU9bil9fTtmdW5jdGlvbiBfaGFuZGxlQ2hhbmdlKGUpe3ZhciBhPXRoaXMuX2N1cnJlbnRFbGVtZW50LnByb3BzLG49TGlua2VkVmFsdWVVdGlscy5leGVjdXRlT25DaGFuZ2UoYSxlKTtyZXR1cm4gUmVhY3RVcGRhdGVzLmFzYXAoZm9yY2VVcGRhdGVJZk1vdW50ZWQsdGhpcyksbn1tb2R1bGUuZXhwb3J0cz1SZWFjdERPTVRleHRhcmVhO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxKbFlXTjBSRTlOVkdWNGRHRnlaV0V1YW5NaVhTd2libUZ0WlhNaU9sc2lYM0J5YjJSSmJuWmhjbWxoYm5RaUxDSnlaWEYxYVhKbElpd2lYMkZ6YzJsbmJpSXNJa3hwYm10bFpGWmhiSFZsVlhScGJITWlMQ0pTWldGamRFUlBUVU52YlhCdmJtVnVkRlJ5WldVaUxDSlNaV0ZqZEZWd1pHRjBaWE1pTENKcGJuWmhjbWxoYm5RaUxDSjNZWEp1YVc1bklpd2laR2xrVjJGeWJsWmhiSFZsVEdsdWF5SXNJbVJwWkZkaGNtNVdZV3hFWldaaGRXeDBWbUZzSWl3aVptOXlZMlZWY0dSaGRHVkpaazF2ZFc1MFpXUWlMQ0owYUdseklpd2lYM0p2YjNST2IyUmxTVVFpTENKU1pXRmpkRVJQVFZSbGVIUmhjbVZoSWl3aWRYQmtZWFJsVjNKaGNIQmxjaUlzSW1kbGRFaHZjM1JRY205d2N5SXNJbWx1YzNRaUxDSndjbTl3Y3lJc0ltUmhibWRsY205MWMyeDVVMlYwU1c1dVpYSklWRTFNSWl3aWNISnZZMlZ6Y3lJc0ltVnVkaUlzSWs1UFJFVmZSVTVXSWl3aWRtRnNkV1VpTENKMWJtUmxabWx1WldRaUxDSmtaV1poZFd4MFZtRnNkV1VpTENKamFHbHNaSEpsYmlJc0lsOTNjbUZ3Y0dWeVUzUmhkR1VpTENKcGJtbDBhV0ZzVm1Gc2RXVWlMQ0p2YmtOb1lXNW5aU0lzSW0xdmRXNTBWM0poY0hCbGNpSXNJbU5vWldOclVISnZjRlI1Y0dWeklpd2lYMk4xY25KbGJuUkZiR1Z0Wlc1MElpd2lYMjkzYm1WeUlpd2lkbUZzZFdWTWFXNXJJaXdpWjJWMFZtRnNkV1VpTENKQmNuSmhlU0lzSW1selFYSnlZWGtpTENKc1pXNW5kR2dpTENKc2FYTjBaVzVsY25NaUxDSmZhR0Z1Wkd4bFEyaGhibWRsSWl3aVltbHVaQ0lzSW01dlpHVWlMQ0puWlhST2IyUmxSbkp2YlVsdWMzUmhibU5sSWl3aWJtVjNWbUZzZFdVaUxDSndiM04wVFc5MWJuUlhjbUZ3Y0dWeUlpd2lkR1Y0ZEVOdmJuUmxiblFpTENKbGRtVnVkQ0lzSW5KbGRIVnlibFpoYkhWbElpd2laWGhsWTNWMFpVOXVRMmhoYm1kbElpd2lZWE5oY0NJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVZGQkxHRkJSVUVzU1VGQlNVRXNaVUZCYVVKRExGRkJRVkVzZDBKQlEzcENReXhSUVVGVlJDeFJRVUZSTEdsQ1FVVnNRa1VzYVVKQlFXMUNSaXhSUVVGUkxITkNRVU16UWtjc2MwSkJRWGRDU0N4UlFVRlJMREpDUVVOb1Ewa3NZVUZCWlVvc1VVRkJVU3hyUWtGRmRrSkxMRlZCUVZsTUxGRkJRVkVzYzBKQlEzQkNUU3hSUVVGVlRpeFJRVUZSTEc5Q1FVVnNRazhzYTBKQlFXMUNMRVZCUTI1Q1F5eHpRa0ZCZFVJc1JVRkZNMElzVTBGQlUwTXNkVUpCUTBoRExFdEJRVXRETEdGQlJWQkRMR2xDUVVGcFFrTXNZMEZCWTBnc1RVRnRRbTVETEVsQlFVbEZMR2xDUVVGdFFpeERRVU55UWtVc1lVRkJZeXhUUVVGVlF5eEZRVUZOUXl4SFFXVTFRaXhQUVdSdFF5eE5RVUZxUTBFc1JVRkJUVU1zTUVKQlFUUkVMR1ZCUVhwQ1F5eFJRVUZSUXl4SlFVRkpReXhUUVVFMFFtWXNWMEZCVlN4RlFVRlBMR2RGUVVGclJVNHNaVUZCWlN4UFFVOXlTMFVzVVVGQlVTeEhRVUZKWlN4RlFVRlBMRU5CUTJwRFN5eFhRVUZQUXl4RlFVTlFReXhyUWtGQlkwUXNSVUZEWkVVc1UwRkJWU3hIUVVGTFZDeEZRVUZMVlN4alFVRmpReXhoUVVOc1EwTXNVMEZCVlZvc1JVRkJTMVVzWTBGQlkwVXNXVUZOYWtORExHRkJRV01zVTBGQlZXSXNSVUZCVFVNc1IwRkRReXhsUVVGNlFrVXNVVUZCVVVNc1NVRkJTVU1zVjBGRFpHeENMR2xDUVVGcFFqSkNMR1ZCUVdVc1YwRkJXV0lzUlVGQlQwUXNSVUZCUzJVc1owSkJRV2RDUXl4aFFVTm9SRlFzU1VGQmNFSk9MRVZCUVUxblFpeFhRVUUwUW5wQ0xHMUNRVU5ZTEdWQlFYcENWeXhSUVVGUlF5eEpRVUZKUXl4VlFVRTBRbVFzVTBGQlVTeEZRVUZQTEhGR1FVTjJSRU1zYTBKQlFXMUNMRkZCUlVSbExFbEJRV2hDVGl4RlFVRk5TeXhaUVVFNFEwTXNTVUZCZGtKT0xFVkJRVTFQTEdOQlFTdENaaXgxUWtGRE0wTXNaVUZCZWtKVkxGRkJRVkZETEVsQlFVbERMRlZCUVRSQ1pDeFRRVUZSTEVWQlFVOHNkVkpCUTNaRVJTeHpRa0ZCZFVJc1NVRkpNMElzU1VGQlNXRXNSVUZCVVc1Q0xHbENRVUZwUWl0Q0xGTkJRVk5xUWl4SFFVTnNRMVVzUlVGQlpVd3NSVUZIYmtJc1IwRkJZU3hOUVVGVVFTeEZRVUZsTEVOQlEycENMRWxCUVVsRkxFVkJRV1ZRTEVWQlFVMVBMR0ZCUlhKQ1F5eEZRVUZYVWl4RlFVRk5VU3hUUVVOTUxFMUJRVnBCTEVsQlF6SkNMR1ZCUVhwQ1RpeFJRVUZSUXl4SlFVRkpReXhWUVVOWExHVkJRWHBDUml4UlFVRlJReXhKUVVGSlF5eFZRVUUwUW1Rc1UwRkJVU3hGUVVGUExITkdRVVYyUXl4TlFVRm9RbWxDTEVsQlFXbEVMR1ZCUVhwQ1RDeFJRVUZSUXl4SlFVRkpReXhUUVVFMFFtWXNWMEZCVlN4RlFVRlBMSFZGUVVGNVJVNHNaVUZCWlN4UFFVTjJTMjFETEUxQlFVMURMRkZCUVZGWUxFdEJRMlJCTEVWQlFWTlpMRkZCUVZVc1NVRkJPRUlzWlVGQmVrSnNRaXhSUVVGUlF5eEpRVUZKUXl4VFFVRTBRbVlzVjBGQlZTeEZRVUZQTEN0RFFVRnBSRTRzWlVGQlpTeFBRVU51U25sQ0xFVkJRVmRCTEVWQlFWTXNTVUZIZEVKRUxFVkJRV1VzUjBGQlMwTXNSMEZGUml4TlFVRm9Ra1FzU1VGRFJrRXNSVUZCWlN4SlFVVnFRa2NzUlVGQlpVZ3NSVUZIYWtKU0xFVkJRVXRWTEdOQlFXZENMRU5CUTI1Q1F5eGhRVUZqTEVkQlFVdEJMRVZCUTI1Q1Z5eFZRVUZYTEV0QlExaFdMRk5CUVZWWExHTkJRV05ETEV0QlFVdDRRaXhMUVVscVEwWXNZMEZCWlN4VFFVRlZSU3hIUVVOMlFpeEpRVUZKUXl4RlFVRlJSQ3hGUVVGTFpTeG5Ra0ZCWjBKa0xFMUJSVGRDZDBJc1JVRkJUM0pETEhOQ1FVRnpRbk5ETEc5Q1FVRnZRakZDTEVkQlEycEVUU3hGUVVGUmJrSXNhVUpCUVdsQ0swSXNVMEZCVTJwQ0xFZEJRM1JETEVkQlFXRXNUVUZCVkVzc1JVRkJaU3hEUVVkcVFpeEpRVUZKY1VJc1JVRkJWeXhIUVVGTGNrSXNSVUZIYUVKeFFpeEpRVUZoUml4RlFVRkxia0lzVVVGRGNFSnRRaXhGUVVGTGJrSXNUVUZCVVhGQ0xFZEJSVmNzVFVGQmRFSXhRaXhGUVVGTlR5eGxRVU5TYVVJc1JVRkJTMnBDTEdGQlFXVnRRaXhIUVVkRkxFMUJRWFJDTVVJc1JVRkJUVThzWlVGRFVtbENMRVZCUVV0cVFpeGhRVUZsVUN4RlFVRk5UeXhsUVVrNVFtOUNMR2xDUVVGclFpeFRRVUZWTlVJc1IwRkhNVUlzU1VGQlNYbENMRVZCUVU5eVF5eHpRa0ZCYzBKelF5eHZRa0ZCYjBJeFFpeEhRVU5xUkRaQ0xFVkJRV05LTEVWQlFVdEpMRmxCVFc1Q1FTeEpRVUZuUWpkQ0xFVkJRVXRWTEdOQlFXTkRMR1ZCUTNKRFl5eEZRVUZMYmtJc1RVRkJVWFZDTEV0QlMyNUNMRk5CUVZOT0xHTkJRV05QTEVkQlEzSkNMRWxCUVVrM1FpeEZRVUZSVGl4TFFVRkxiMElzWjBKQlFXZENaQ3hOUVVNM1FqaENMRVZCUVdNMVF5eHBRa0ZCYVVJMlF5eG5Ra0ZCWjBJdlFpeEZRVUZQTmtJc1IwRkZNVVFzVDBGRVFYcERMR0ZCUVdFMFF5eExRVUZMZGtNc2NVSkJRWE5DUXl4TlFVTnFRMjlETEVWQlIxUkhMRTlCUVU5RExGRkJRVlYwUXlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDMWtiMjB2YkdsaUwxSmxZV04wUkU5TlZHVjRkR0Z5WldFdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9wcm9kSW52YXJpYW50PXJlcXVpcmUoXCIuL3JlYWN0UHJvZEludmFyaWFudFwiKSxpbnZhcmlhbnQ9cmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKTtmdW5jdGlvbiBnZXRMb3dlc3RDb21tb25BbmNlc3RvcihuLHIpe1wiX2hvc3ROb2RlXCJpbiBufHwoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoITEsXCJnZXROb2RlRnJvbUluc3RhbmNlOiBJbnZhbGlkIGFyZ3VtZW50LlwiKTpfcHJvZEludmFyaWFudChcIjMzXCIpKSxcIl9ob3N0Tm9kZVwiaW4gcnx8KFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwiZ2V0Tm9kZUZyb21JbnN0YW5jZTogSW52YWxpZCBhcmd1bWVudC5cIik6X3Byb2RJbnZhcmlhbnQoXCIzM1wiKSk7Zm9yKHZhciB0PTAsZT1uO2U7ZT1lLl9ob3N0UGFyZW50KXQrKztmb3IodmFyIG89MCxhPXI7YTthPWEuX2hvc3RQYXJlbnQpbysrO2Zvcig7dC1vPjA7KW49bi5faG9zdFBhcmVudCx0LS07Zm9yKDtvLXQ+MDspcj1yLl9ob3N0UGFyZW50LG8tLTtmb3IodmFyIHM9dDtzLS07KXtpZihuPT09cilyZXR1cm4gbjtuPW4uX2hvc3RQYXJlbnQscj1yLl9ob3N0UGFyZW50fXJldHVybiBudWxsfWZ1bmN0aW9uIGlzQW5jZXN0b3IobixyKXtcIl9ob3N0Tm9kZVwiaW4gbnx8KFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwiaXNBbmNlc3RvcjogSW52YWxpZCBhcmd1bWVudC5cIik6X3Byb2RJbnZhcmlhbnQoXCIzNVwiKSksXCJfaG9zdE5vZGVcImluIHJ8fChcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcImlzQW5jZXN0b3I6IEludmFsaWQgYXJndW1lbnQuXCIpOl9wcm9kSW52YXJpYW50KFwiMzVcIikpO2Zvcig7cjspe2lmKHI9PT1uKXJldHVybiEwO3I9ci5faG9zdFBhcmVudH1yZXR1cm4hMX1mdW5jdGlvbiBnZXRQYXJlbnRJbnN0YW5jZShuKXtyZXR1cm5cIl9ob3N0Tm9kZVwiaW4gbnx8KFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwiZ2V0UGFyZW50SW5zdGFuY2U6IEludmFsaWQgYXJndW1lbnQuXCIpOl9wcm9kSW52YXJpYW50KFwiMzZcIikpLG4uX2hvc3RQYXJlbnR9ZnVuY3Rpb24gdHJhdmVyc2VUd29QaGFzZShuLHIsdCl7Zm9yKHZhciBlLG89W107bjspby5wdXNoKG4pLG49bi5faG9zdFBhcmVudDtmb3IoZT1vLmxlbmd0aDtlLS0gPjA7KXIob1tlXSxcImNhcHR1cmVkXCIsdCk7Zm9yKGU9MDtlPG8ubGVuZ3RoO2UrKylyKG9bZV0sXCJidWJibGVkXCIsdCl9ZnVuY3Rpb24gdHJhdmVyc2VFbnRlckxlYXZlKG4scix0LGUsbyl7Zm9yKHZhciBhPW4mJnI/Z2V0TG93ZXN0Q29tbW9uQW5jZXN0b3IobixyKTpudWxsLHM9W107biYmbiE9PWE7KXMucHVzaChuKSxuPW4uX2hvc3RQYXJlbnQ7Zm9yKHZhciBpLHY9W107ciYmciE9PWE7KXYucHVzaChyKSxyPXIuX2hvc3RQYXJlbnQ7Zm9yKGk9MDtpPHMubGVuZ3RoO2krKyl0KHNbaV0sXCJidWJibGVkXCIsZSk7Zm9yKGk9di5sZW5ndGg7aS0tID4wOyl0KHZbaV0sXCJjYXB0dXJlZFwiLG8pfW1vZHVsZS5leHBvcnRzPXtpc0FuY2VzdG9yOmlzQW5jZXN0b3IsZ2V0TG93ZXN0Q29tbW9uQW5jZXN0b3I6Z2V0TG93ZXN0Q29tbW9uQW5jZXN0b3IsZ2V0UGFyZW50SW5zdGFuY2U6Z2V0UGFyZW50SW5zdGFuY2UsdHJhdmVyc2VUd29QaGFzZTp0cmF2ZXJzZVR3b1BoYXNlLHRyYXZlcnNlRW50ZXJMZWF2ZTp0cmF2ZXJzZUVudGVyTGVhdmV9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxKbFlXTjBSRTlOVkhKbFpWUnlZWFpsY25OaGJDNXFjeUpkTENKdVlXMWxjeUk2V3lKZmNISnZaRWx1ZG1GeWFXRnVkQ0lzSW5KbGNYVnBjbVVpTENKcGJuWmhjbWxoYm5RaUxDSm5aWFJNYjNkbGMzUkRiMjF0YjI1QmJtTmxjM1J2Y2lJc0ltbHVjM1JCSWl3aWFXNXpkRUlpTENKd2NtOWpaWE56SWl3aVpXNTJJaXdpVGs5RVJWOUZUbFlpTENKa1pYQjBhRUVpTENKMFpXMXdRU0lzSWw5b2IzTjBVR0Z5Wlc1MElpd2laR1Z3ZEdoQ0lpd2lkR1Z0Y0VJaUxDSmtaWEIwYUNJc0ltbHpRVzVqWlhOMGIzSWlMQ0puWlhSUVlYSmxiblJKYm5OMFlXNWpaU0lzSW1sdWMzUWlMQ0owY21GMlpYSnpaVlIzYjFCb1lYTmxJaXdpWm00aUxDSmhjbWNpTENKcElpd2ljR0YwYUNJc0luQjFjMmdpTENKc1pXNW5kR2dpTENKMGNtRjJaWEp6WlVWdWRHVnlUR1ZoZG1VaUxDSm1jbTl0SWl3aWRHOGlMQ0poY21kR2NtOXRJaXdpWVhKblZHOGlMQ0pqYjIxdGIyNGlMQ0p3WVhSb1JuSnZiU0lzSW5CaGRHaFVieUlzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVkZCTEdGQlJVRXNTVUZCU1VFc1pVRkJhVUpETEZGQlFWRXNkMEpCUlhwQ1F5eFZRVUZaUkN4UlFVRlJMSE5DUVUxNFFpeFRRVUZUUlN4M1FrRkJkMEpETEVWQlFVOURMRWRCUTNCRExHTkJRV1ZFTEVsQlFXdERMR1ZCUVhwQ1JTeFJRVUZSUXl4SlFVRkpReXhUUVVFMFFrNHNWMEZCVlN4RlFVRlBMREJEUVVFMFEwWXNaVUZCWlN4UFFVTTFTU3hqUVVGbFN5eEpRVUZyUXl4bFFVRjZRa01zVVVGQlVVTXNTVUZCU1VNc1UwRkJORUpPTEZkQlFWVXNSVUZCVHl3d1EwRkJORU5HTEdWQlFXVXNUMEZIT1Vrc1NVRkVRU3hKUVVGSlV5eEZRVUZUTEVWQlEwcERMRVZCUVZGT0xFVkJRVTlOTEVWQlFVOUJMRVZCUVZGQkxFVkJRVTFETEZsQlF6TkRSaXhKUVVkR0xFbEJSRUVzU1VGQlNVY3NSVUZCVXl4RlFVTktReXhGUVVGUlVpeEZRVUZQVVN4RlFVRlBRU3hGUVVGUlFTeEZRVUZOUml4WlFVTXpRME1zU1VGSlJpeExRVUZQU0N4RlFVRlRSeXhGUVVGVExFZEJRM1pDVWl4RlFVRlJRU3hGUVVGTlR5eFpRVU5rUml4SlFVbEdMRXRCUVU5SExFVkJRVk5JTEVWQlFWTXNSMEZEZGtKS0xFVkJRVkZCTEVWQlFVMU5MRmxCUTJSRExFbEJTMFlzU1VGRVFTeEpRVUZKUlN4RlFVRlJUQ3hGUVVOTVN5eExRVUZUTEVOQlEyUXNSMEZCU1ZZc1NVRkJWVU1zUlVGRFdpeFBRVUZQUkN4RlFVVlVRU3hGUVVGUlFTeEZRVUZOVHl4WlFVTmtUaXhGUVVGUlFTeEZRVUZOVFN4WlFVVm9RaXhQUVVGUExFdEJUVlFzVTBGQlUwa3NWMEZCVjFnc1JVRkJUME1zUjBGRGRrSXNZMEZCWlVRc1NVRkJhME1zWlVGQmVrSkZMRkZCUVZGRExFbEJRVWxETEZOQlFUUkNUaXhYUVVGVkxFVkJRVThzYVVOQlFXMURSaXhsUVVGbExFOUJRMjVKTEdOQlFXVkxMRWxCUVd0RExHVkJRWHBDUXl4UlFVRlJReXhKUVVGSlF5eFRRVUUwUWs0c1YwRkJWU3hGUVVGUExHbERRVUZ0UTBZc1pVRkJaU3hQUVVWeVNTeExRVUZQU3l4SFFVRlBMRU5CUTFvc1IwRkJTVUVzU1VGQlZVUXNSVUZEV2l4UFFVRlBMRVZCUlZSRExFVkJRVkZCTEVWQlFVMU5MRmxCUldoQ0xFOUJRVThzUlVGTlZDeFRRVUZUU3l4clFrRkJhMEpETEVkQlIzcENMRTFCUmtVc1kwRkJaVUVzU1VGQmFVTXNaVUZCZWtKWUxGRkJRVkZETEVsQlFVbERMRk5CUVRSQ1RpeFhRVUZWTEVWQlFVOHNkME5CUVRCRFJpeGxRVUZsTEU5QlJYQkphVUlzUlVGQlMwNHNXVUZOWkN4VFFVRlRUeXhwUWtGQmFVSkVMRVZCUVUxRkxFVkJRVWxETEVkQlJXeERMRWxCUkVFc1NVRkxTVU1zUlVGTVFVTXNSVUZCVHl4SFFVTktUQ3hIUVVOTVN5eEZRVUZMUXl4TFFVRkxUaXhIUVVOV1FTeEZRVUZQUVN4RlFVRkxUaXhaUVVka0xFbEJRVXRWTEVWQlFVbERMRVZCUVV0RkxFOUJRVkZJTEV0QlFVMHNSMEZETVVKR0xFVkJRVWRITEVWQlFVdEVMRWRCUVVrc1YwRkJXVVFzUjBGRk1VSXNTVUZCUzBNc1JVRkJTU3hGUVVGSFFTeEZRVUZKUXl4RlFVRkxSU3hQUVVGUlNDeEpRVU16UWtZc1JVRkJSMGNzUlVGQlMwUXNSMEZCU1N4VlFVRlhSQ3hIUVZjelFpeFRRVUZUU3l4dFFrRkJiVUpETEVWQlFVMURMRVZCUVVsU0xFVkJRVWxUTEVWQlFWTkRMRWRCUjJwRUxFbEJSa0VzU1VGQlNVTXNSVUZCVTBvc1IwRkJVVU1zUlVGQlMzaENMSGRDUVVGM1FuVkNMRVZCUVUxRExFZEJRVTBzUzBGRE1VUkpMRVZCUVZjc1IwRkRVa3dzUjBGQlVVRXNTVUZCVTBrc1IwRkRkRUpETEVWQlFWTlNMRXRCUVV0SExFZEJRMlJCTEVWQlFVOUJMRVZCUVV0bUxGbEJSMlFzU1VGRVFTeEpRVXRKVlN4RlFVeEJWeXhGUVVGVExFZEJRMDVNTEVkQlFVMUJMRWxCUVU5SExFZEJRMnhDUlN4RlFVRlBWQ3hMUVVGTFNTeEhRVU5hUVN4RlFVRkxRU3hGUVVGSGFFSXNXVUZIVml4SlFVRkxWU3hGUVVGSkxFVkJRVWRCTEVWQlFVbFZMRVZCUVZOUUxFOUJRVkZJTEVsQlF5OUNSaXhGUVVGSFdTeEZRVUZUVml4SFFVRkpMRlZCUVZkUExFZEJSVGRDTEVsQlFVdFFMRVZCUVVsWExFVkJRVTlTTEU5QlFWRklMRXRCUVUwc1IwRkROVUpHTEVWQlFVZGhMRVZCUVU5WUxFZEJRVWtzVjBGQldWRXNSMEZKT1VKSkxFOUJRVTlETEZGQlFWVXNRMEZEWm01Q0xGZEJRVmxCTEZkQlExcGFMSGRDUVVGNVFrRXNkMEpCUTNwQ1lTeHJRa0ZCYlVKQkxHdENRVU51UWtVc2FVSkJRV3RDUVN4cFFrRkRiRUpQTEcxQ1FVRnZRa0VpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdFpHOXRMMnhwWWk5U1pXRmpkRVJQVFZSeVpXVlVjbUYyWlhKellXd3Vhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciBET01Qcm9wZXJ0eT1yZXF1aXJlKFwiLi9ET01Qcm9wZXJ0eVwiKSxFdmVudFBsdWdpblJlZ2lzdHJ5PXJlcXVpcmUoXCIuL0V2ZW50UGx1Z2luUmVnaXN0cnlcIiksUmVhY3RDb21wb25lbnRUcmVlSG9vaz1yZXF1aXJlKFwicmVhY3QvbGliL1JlYWN0Q29tcG9uZW50VHJlZUhvb2tcIiksd2FybmluZz1yZXF1aXJlKFwiZmJqcy9saWIvd2FybmluZ1wiKTtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXZhciByZWFjdFByb3BzPXtjaGlsZHJlbjohMCxkYW5nZXJvdXNseVNldElubmVySFRNTDohMCxrZXk6ITAscmVmOiEwLGF1dG9Gb2N1czohMCxkZWZhdWx0VmFsdWU6ITAsdmFsdWVMaW5rOiEwLGRlZmF1bHRDaGVja2VkOiEwLGNoZWNrZWRMaW5rOiEwLGlubmVySFRNTDohMCxzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmc6ITAsb25Gb2N1c0luOiEwLG9uRm9jdXNPdXQ6ITB9LHdhcm5lZFByb3BlcnRpZXM9e30sdmFsaWRhdGVQcm9wZXJ0eT1mdW5jdGlvbihlLG4scil7aWYoRE9NUHJvcGVydHkucHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShuKXx8RE9NUHJvcGVydHkuaXNDdXN0b21BdHRyaWJ1dGUobikpcmV0dXJuITA7aWYocmVhY3RQcm9wcy5oYXNPd25Qcm9wZXJ0eShuKSYmcmVhY3RQcm9wc1tuXXx8d2FybmVkUHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShuKSYmd2FybmVkUHJvcGVydGllc1tuXSlyZXR1cm4hMDtpZihFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KG4pKXJldHVybiEwO3dhcm5lZFByb3BlcnRpZXNbbl09ITA7dmFyIHQ9bi50b0xvd2VyQ2FzZSgpLG89RE9NUHJvcGVydHkuaXNDdXN0b21BdHRyaWJ1dGUodCk/dDpET01Qcm9wZXJ0eS5nZXRQb3NzaWJsZVN0YW5kYXJkTmFtZS5oYXNPd25Qcm9wZXJ0eSh0KT9ET01Qcm9wZXJ0eS5nZXRQb3NzaWJsZVN0YW5kYXJkTmFtZVt0XTpudWxsLHM9RXZlbnRQbHVnaW5SZWdpc3RyeS5wb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzLmhhc093blByb3BlcnR5KHQpP0V2ZW50UGx1Z2luUmVnaXN0cnkucG9zc2libGVSZWdpc3RyYXRpb25OYW1lc1t0XTpudWxsO3JldHVybiBudWxsIT1vPyhcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ3YXJuaW5nKCExLFwiVW5rbm93biBET00gcHJvcGVydHkgJXMuIERpZCB5b3UgbWVhbiAlcz8lc1wiLG4sbyxSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldFN0YWNrQWRkZW5kdW1CeUlEKHIpKSwhMCk6bnVsbCE9cyYmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcoITEsXCJVbmtub3duIGV2ZW50IGhhbmRsZXIgcHJvcGVydHkgJXMuIERpZCB5b3UgbWVhbiBgJXNgPyVzXCIsbixzLFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0U3RhY2tBZGRlbmR1bUJ5SUQocikpLCEwKX07dmFyIHdhcm5Vbmtub3duUHJvcGVydGllcz1mdW5jdGlvbihlLG4pe3ZhciByPVtdO2Zvcih2YXIgdCBpbiBuLnByb3BzKXt2YWxpZGF0ZVByb3BlcnR5KG4udHlwZSx0LGUpfHxyLnB1c2godCl9dmFyIG89ci5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuXCJgXCIrZStcImBcIn0pLmpvaW4oXCIsIFwiKTsxPT09ci5sZW5ndGg/XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FybmluZyghMSxcIlVua25vd24gcHJvcCAlcyBvbiA8JXM+IHRhZy4gUmVtb3ZlIHRoaXMgcHJvcCBmcm9tIHRoZSBlbGVtZW50LiBGb3IgZGV0YWlscywgc2VlIGh0dHBzOi8vZmIubWUvcmVhY3QtdW5rbm93bi1wcm9wJXNcIixvLG4udHlwZSxSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldFN0YWNrQWRkZW5kdW1CeUlEKGUpKTpyLmxlbmd0aD4xJiZcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ3YXJuaW5nKCExLFwiVW5rbm93biBwcm9wcyAlcyBvbiA8JXM+IHRhZy4gUmVtb3ZlIHRoZXNlIHByb3BzIGZyb20gdGhlIGVsZW1lbnQuIEZvciBkZXRhaWxzLCBzZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC11bmtub3duLXByb3Alc1wiLG8sbi50eXBlLFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0U3RhY2tBZGRlbmR1bUJ5SUQoZSkpfTtmdW5jdGlvbiBoYW5kbGVFbGVtZW50KGUsbil7bnVsbCE9biYmXCJzdHJpbmdcIj09dHlwZW9mIG4udHlwZSYmKG4udHlwZS5pbmRleE9mKFwiLVwiKT49MHx8bi5wcm9wcy5pc3x8d2FyblVua25vd25Qcm9wZXJ0aWVzKGUsbikpfXZhciBSZWFjdERPTVVua25vd25Qcm9wZXJ0eUhvb2s9e29uQmVmb3JlTW91bnRDb21wb25lbnQ6ZnVuY3Rpb24oZSxuKXtoYW5kbGVFbGVtZW50KGUsbil9LG9uQmVmb3JlVXBkYXRlQ29tcG9uZW50OmZ1bmN0aW9uKGUsbil7aGFuZGxlRWxlbWVudChlLG4pfX07bW9kdWxlLmV4cG9ydHM9UmVhY3RET01Vbmtub3duUHJvcGVydHlIb29rO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxKbFlXTjBSRTlOVlc1cmJtOTNibEJ5YjNCbGNuUjVTRzl2YXk1cWN5SmRMQ0p1WVcxbGN5STZXeUpFVDAxUWNtOXdaWEowZVNJc0luSmxjWFZwY21VaUxDSkZkbVZ1ZEZCc2RXZHBibEpsWjJsemRISjVJaXdpVW1WaFkzUkRiMjF3YjI1bGJuUlVjbVZsU0c5dmF5SXNJbmRoY201cGJtY2lMQ0p3Y205alpYTnpJaXdpWlc1Mklpd2lUazlFUlY5RlRsWWlMQ0p5WldGamRGQnliM0J6SWl3aVkyaHBiR1J5Wlc0aUxDSmtZVzVuWlhKdmRYTnNlVk5sZEVsdWJtVnlTRlJOVENJc0ltdGxlU0lzSW5KbFppSXNJbUYxZEc5R2IyTjFjeUlzSW1SbFptRjFiSFJXWVd4MVpTSXNJblpoYkhWbFRHbHVheUlzSW1SbFptRjFiSFJEYUdWamEyVmtJaXdpWTJobFkydGxaRXhwYm1zaUxDSnBibTVsY2toVVRVd2lMQ0p6ZFhCd2NtVnpjME52Ym5SbGJuUkZaR2wwWVdKc1pWZGhjbTVwYm1jaUxDSnZia1p2WTNWelNXNGlMQ0p2YmtadlkzVnpUM1YwSWl3aWQyRnlibVZrVUhKdmNHVnlkR2xsY3lJc0luWmhiR2xrWVhSbFVISnZjR1Z5ZEhraUxDSjBZV2RPWVcxbElpd2libUZ0WlNJc0ltUmxZblZuU1VRaUxDSndjbTl3WlhKMGFXVnpJaXdpYUdGelQzZHVVSEp2Y0dWeWRIa2lMQ0pwYzBOMWMzUnZiVUYwZEhKcFluVjBaU0lzSW5KbFoybHpkSEpoZEdsdmJrNWhiV1ZOYjJSMWJHVnpJaXdpYkc5M1pYSkRZWE5sWkU1aGJXVWlMQ0owYjB4dmQyVnlRMkZ6WlNJc0luTjBZVzVrWVhKa1RtRnRaU0lzSW1kbGRGQnZjM05wWW14bFUzUmhibVJoY21ST1lXMWxJaXdpY21WbmFYTjBjbUYwYVc5dVRtRnRaU0lzSW5CdmMzTnBZbXhsVW1WbmFYTjBjbUYwYVc5dVRtRnRaWE1pTENKblpYUlRkR0ZqYTBGa1pHVnVaSFZ0UW5sSlJDSXNJbmRoY201VmJtdHViM2R1VUhKdmNHVnlkR2xsY3lJc0ltVnNaVzFsYm5RaUxDSjFibXR1YjNkdVVISnZjSE1pTENKd2NtOXdjeUlzSW5SNWNHVWlMQ0p3ZFhOb0lpd2lkVzVyYm05M2JsQnliM0JUZEhKcGJtY2lMQ0p0WVhBaUxDSndjbTl3SWl3aWFtOXBiaUlzSW14bGJtZDBhQ0lzSW1oaGJtUnNaVVZzWlcxbGJuUWlMQ0pwYm1SbGVFOW1JaXdpYVhNaUxDSlNaV0ZqZEVSUFRWVnVhMjV2ZDI1UWNtOXdaWEowZVVodmIyc2lMQ0p2YmtKbFptOXlaVTF2ZFc1MFEyOXRjRzl1Wlc1MElpd2liMjVDWldadmNtVlZjR1JoZEdWRGIyMXdiMjVsYm5RaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25SeklsMHNJbTFoY0hCcGJtZHpJam9pUVVGUlFTeGhRVVZCTEVsQlFVbEJMRmxCUVdORExGRkJRVkVzYVVKQlEzUkNReXh2UWtGQmMwSkVMRkZCUVZFc2VVSkJRemxDUlN4MVFrRkJlVUpHTEZGQlFWRXNiME5CUldwRFJ5eFJRVUZWU0N4UlFVRlJMRzlDUVVWMFFpeEhRVUUyUWl4bFFVRjZRa2tzVVVGQlVVTXNTVUZCU1VNc1UwRkRaQ3hKUVVGSlF5eFhRVUZoTEVOQlEyWkRMRlZCUVZVc1JVRkRWa01zZVVKQlFYbENMRVZCUTNwQ1F5eExRVUZMTEVWQlEweERMRXRCUVVzc1JVRkZURU1zVjBGQlZ5eEZRVU5ZUXl4alFVRmpMRVZCUTJSRExGZEJRVmNzUlVGRFdFTXNaMEpCUVdkQ0xFVkJRMmhDUXl4aFFVRmhMRVZCUTJKRExGZEJRVmNzUlVGRFdFTXNaME5CUVdkRExFVkJRMmhEUXl4WFFVRlhMRVZCUTFoRExGbEJRVmtzUjBGRlZrTXNhVUpCUVcxQ0xFZEJSVzVDUXl4cFFrRkJiVUlzVTBGQlZVTXNSVUZCVTBNc1JVRkJUVU1zUjBGRE9VTXNSMEZCU1RGQ0xGbEJRVmt5UWl4WFFVRlhReXhsUVVGbFNDeEpRVUZUZWtJc1dVRkJXVFpDTEd0Q1FVRnJRa29zUjBGREwwVXNUMEZCVHl4RlFVVlVMRWRCUVVscVFpeFhRVUZYYjBJc1pVRkJaVWdzU1VGQlUycENMRmRCUVZkcFFpeEpRVUZUU0N4cFFrRkJhVUpOTEdWQlFXVklMRWxCUVZOSUxHbENRVUZwUWtjc1IwRkRia2dzVDBGQlR5eEZRVVZVTEVkQlFVbDJRaXh2UWtGQmIwSTBRaXgzUWtGQmQwSkdMR1ZCUVdWSUxFZEJRemRFTEU5QlFVOHNSVUZGVkVnc2FVSkJRV2xDUnl4SlFVRlJMRVZCUTNwQ0xFbEJRVWxOTEVWQlFXbENUaXhGUVVGTFR5eGpRVWQwUWtNc1JVRkJaV3BETEZsQlFWazJRaXhyUWtGQmEwSkZMRWRCUVd0Q1FTeEZRVUZwUWk5Q0xGbEJRVmxyUXl4M1FrRkJkMEpPTEdWQlFXVkhMRWRCUVd0Q0wwSXNXVUZCV1d0RExIZENRVUYzUWtnc1IwRkJhMElzUzBGRk0wMUpMRVZCUVcxQ2FrTXNiMEpCUVc5Q2EwTXNNRUpCUVRCQ1VpeGxRVUZsUnl4SFFVRnJRamRDTEc5Q1FVRnZRbXRETERCQ1FVRXdRa3dzUjBGQmEwSXNTMEZGZEVzc1QwRkJiMElzVFVGQmFFSkZMRWRCUTNWQ0xHVkJRWHBDTlVJc1VVRkJVVU1zU1VGQlNVTXNWVUZCTkVKSUxGTkJRVkVzUlVGQlR5dzRRMEZCSzBOeFFpeEZRVUZOVVN4RlFVRmpPVUlzZFVKQlFYVkNhME1zY1VKQlFYRkNXQ3hMUVVNdlNpeEhRVU56UWl4TlFVRndRbE1zU1VGRFowSXNaVUZCZWtJNVFpeFJRVUZSUXl4SlFVRkpReXhWUVVFMFFrZ3NVMEZCVVN4RlFVRlBMREJFUVVFeVJIRkNMRVZCUVUxVkxFVkJRV3RDYUVNc2RVSkJRWFZDYTBNc2NVSkJRWEZDV0N4TFFVTXZTeXhKUVZkaUxFbEJRVWxaTEhOQ1FVRjNRaXhUUVVGVldpeEZRVUZUWVN4SFFVTTNReXhKUVVGSlF5eEZRVUZsTEVkQlEyNUNMRWxCUVVzc1NVRkJTVGRDTEV0QlFVODBRaXhGUVVGUlJTeE5RVUZQTEVOQlEyWnNRaXhwUWtGQmFVSm5RaXhGUVVGUlJ5eExRVUZOTDBJc1JVRkJTMlVzU1VGRmFFUmpMRVZCUVdGSExFdEJRVXRvUXl4SFFVbDBRaXhKUVVGSmFVTXNSVUZCYjBKS0xFVkJRV0ZMTEVsQlFVa3NVMEZCVlVNc1IwRkRha1FzVFVGQlR5eEpRVUZOUVN4RlFVRlBMRTFCUTI1Q1F5eExRVUZMTEUxQlJXOUNMRWxCUVhoQ1VDeEZRVUZoVVN4UFFVTlZMR1ZCUVhwQ00wTXNVVUZCVVVNc1NVRkJTVU1zVlVGQk5FSklMRk5CUVZFc1JVRkJUeXh6U0VGQk5FaDNReXhGUVVGdFFrd3NSVUZCVVVjc1MwRkJUWFpETEhWQ1FVRjFRbXRETEhGQ1FVRnhRbGdzU1VGRGRsQmpMRVZCUVdGUkxFOUJRVk1zUjBGRFRpeGxRVUY2UWpORExGRkJRVkZETEVsQlFVbERMRlZCUVRSQ1NDeFRRVUZSTEVWQlFVOHNlVWhCUVN0SWQwTXNSVUZCYlVKTUxFVkJRVkZITEV0QlFVMTJReXgxUWtGQmRVSnJReXh4UWtGQmNVSllMRXRCU1haUkxGTkJRVk4xUWl4alFVRmpka0lzUlVGQlUyRXNSMEZEWml4TlFVRllRU3hIUVVFeVF5eHBRa0ZCYWtKQkxFVkJRVkZITEU5QlIyeERTQ3hGUVVGUlJ5eExRVUZMVVN4UlFVRlJMRTFCUVZFc1IwRkJTMWdzUlVGQlVVVXNUVUZCVFZVc1NVRkhjRVJpTEhOQ1FVRnpRbG9zUlVGQlUyRXNTVUZIYWtNc1NVRkJTV0VzTkVKQlFUaENMRU5CUTJoRFF5eDFRa0ZCZDBJc1UwRkJWVE5DTEVWQlFWTmhMRWRCUTNwRFZTeGpRVUZqZGtJc1JVRkJVMkVzU1VGRmVrSmxMSGRDUVVGNVFpeFRRVUZWTlVJc1JVRkJVMkVzUjBGRE1VTlZMR05CUVdOMlFpeEZRVUZUWVN4TFFVa3pRbWRDTEU5QlFVOURMRkZCUVZWS0lpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDNKbFlXTjBMV1J2YlM5c2FXSXZVbVZoWTNSRVQwMVZibXR1YjNkdVVISnZjR1Z5ZEhsSWIyOXJMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBSZWFjdEludmFsaWRTZXRTdGF0ZVdhcm5pbmdIb29rPXJlcXVpcmUoXCIuL1JlYWN0SW52YWxpZFNldFN0YXRlV2FybmluZ0hvb2tcIiksUmVhY3RIb3N0T3BlcmF0aW9uSGlzdG9yeUhvb2s9cmVxdWlyZShcIi4vUmVhY3RIb3N0T3BlcmF0aW9uSGlzdG9yeUhvb2tcIiksUmVhY3RDb21wb25lbnRUcmVlSG9vaz1yZXF1aXJlKFwicmVhY3QvbGliL1JlYWN0Q29tcG9uZW50VHJlZUhvb2tcIiksRXhlY3V0aW9uRW52aXJvbm1lbnQ9cmVxdWlyZShcImZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpLHBlcmZvcm1hbmNlTm93PXJlcXVpcmUoXCJmYmpzL2xpYi9wZXJmb3JtYW5jZU5vd1wiKSx3YXJuaW5nPXJlcXVpcmUoXCJmYmpzL2xpYi93YXJuaW5nXCIpLGhvb2tzPVtdLGRpZEhvb2tUaHJvd0ZvckV2ZW50PXt9O2Z1bmN0aW9uIGNhbGxIb29rKGUsbixyLHQsbyxpLHUsYSl7dHJ5e24uY2FsbChyLHQsbyxpLHUsYSl9Y2F0Y2gobil7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FybmluZyhkaWRIb29rVGhyb3dGb3JFdmVudFtlXSxcIkV4Y2VwdGlvbiB0aHJvd24gYnkgaG9vayB3aGlsZSBoYW5kbGluZyAlczogJXNcIixlLG4rXCJcXG5cIituLnN0YWNrKSxkaWRIb29rVGhyb3dGb3JFdmVudFtlXT0hMH19ZnVuY3Rpb24gZW1pdEV2ZW50KGUsbixyLHQsbyxpKXtmb3IodmFyIHU9MDt1PGhvb2tzLmxlbmd0aDt1Kyspe3ZhciBhPWhvb2tzW3VdLGM9YVtlXTtjJiZjYWxsSG9vayhlLGMsYSxuLHIsdCxvLGkpfX12YXIgaXNQcm9maWxpbmc9ITEsZmx1c2hIaXN0b3J5PVtdLGxpZmVDeWNsZVRpbWVyU3RhY2s9W10sY3VycmVudEZsdXNoTmVzdGluZz0wLGN1cnJlbnRGbHVzaE1lYXN1cmVtZW50cz1bXSxjdXJyZW50Rmx1c2hTdGFydFRpbWU9MCxjdXJyZW50VGltZXJEZWJ1Z0lEPW51bGwsY3VycmVudFRpbWVyU3RhcnRUaW1lPTAsY3VycmVudFRpbWVyTmVzdGVkRmx1c2hEdXJhdGlvbj0wLGN1cnJlbnRUaW1lclR5cGU9bnVsbCxsaWZlQ3ljbGVUaW1lckhhc1dhcm5lZD0hMTtmdW5jdGlvbiBjbGVhckhpc3RvcnkoKXtSZWFjdENvbXBvbmVudFRyZWVIb29rLnB1cmdlVW5tb3VudGVkQ29tcG9uZW50cygpLFJlYWN0SG9zdE9wZXJhdGlvbkhpc3RvcnlIb29rLmNsZWFySGlzdG9yeSgpfWZ1bmN0aW9uIGdldFRyZWVTbmFwc2hvdChlKXtyZXR1cm4gZS5yZWR1Y2UoZnVuY3Rpb24oZSxuKXt2YXIgcj1SZWFjdENvbXBvbmVudFRyZWVIb29rLmdldE93bmVySUQobiksdD1SZWFjdENvbXBvbmVudFRyZWVIb29rLmdldFBhcmVudElEKG4pO3JldHVybiBlW25dPXtkaXNwbGF5TmFtZTpSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldERpc3BsYXlOYW1lKG4pLHRleHQ6UmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRUZXh0KG4pLHVwZGF0ZUNvdW50OlJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0VXBkYXRlQ291bnQobiksY2hpbGRJRHM6UmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRDaGlsZElEcyhuKSxvd25lcklEOnJ8fHQmJlJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0T3duZXJJRCh0KXx8MCxwYXJlbnRJRDp0fSxlfSx7fSl9ZnVuY3Rpb24gcmVzZXRNZWFzdXJlbWVudHMoKXt2YXIgZT1jdXJyZW50Rmx1c2hTdGFydFRpbWUsbj1jdXJyZW50Rmx1c2hNZWFzdXJlbWVudHMscj1SZWFjdEhvc3RPcGVyYXRpb25IaXN0b3J5SG9vay5nZXRIaXN0b3J5KCk7aWYoMD09PWN1cnJlbnRGbHVzaE5lc3RpbmcpcmV0dXJuIGN1cnJlbnRGbHVzaFN0YXJ0VGltZT0wLGN1cnJlbnRGbHVzaE1lYXN1cmVtZW50cz1bXSx2b2lkIGNsZWFySGlzdG9yeSgpO2lmKG4ubGVuZ3RofHxyLmxlbmd0aCl7dmFyIHQ9UmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRSZWdpc3RlcmVkSURzKCk7Zmx1c2hIaXN0b3J5LnB1c2goe2R1cmF0aW9uOnBlcmZvcm1hbmNlTm93KCktZSxtZWFzdXJlbWVudHM6bnx8W10sb3BlcmF0aW9uczpyfHxbXSx0cmVlU25hcHNob3Q6Z2V0VHJlZVNuYXBzaG90KHQpfSl9Y2xlYXJIaXN0b3J5KCksY3VycmVudEZsdXNoU3RhcnRUaW1lPXBlcmZvcm1hbmNlTm93KCksY3VycmVudEZsdXNoTWVhc3VyZW1lbnRzPVtdfWZ1bmN0aW9uIGNoZWNrRGVidWdJRChlKXthcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSYmYXJndW1lbnRzWzFdJiYwPT09ZXx8ZXx8XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FybmluZyghMSxcIlJlYWN0RGVidWdUb29sOiBkZWJ1Z0lEIG1heSBub3QgYmUgZW1wdHkuXCIpfWZ1bmN0aW9uIGJlZ2luTGlmZUN5Y2xlVGltZXIoZSxuKXswIT09Y3VycmVudEZsdXNoTmVzdGluZyYmKGN1cnJlbnRUaW1lclR5cGUmJiFsaWZlQ3ljbGVUaW1lckhhc1dhcm5lZCYmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcoITEsXCJUaGVyZSBpcyBhbiBpbnRlcm5hbCBlcnJvciBpbiB0aGUgUmVhY3QgcGVyZm9ybWFuY2UgbWVhc3VyZW1lbnQgY29kZS4gRGlkIG5vdCBleHBlY3QgJXMgdGltZXIgdG8gc3RhcnQgd2hpbGUgJXMgdGltZXIgaXMgc3RpbGwgaW4gcHJvZ3Jlc3MgZm9yICVzIGluc3RhbmNlLlwiLG4sY3VycmVudFRpbWVyVHlwZXx8XCJub1wiLGU9PT1jdXJyZW50VGltZXJEZWJ1Z0lEP1widGhlIHNhbWVcIjpcImFub3RoZXJcIiksbGlmZUN5Y2xlVGltZXJIYXNXYXJuZWQ9ITApLGN1cnJlbnRUaW1lclN0YXJ0VGltZT1wZXJmb3JtYW5jZU5vdygpLGN1cnJlbnRUaW1lck5lc3RlZEZsdXNoRHVyYXRpb249MCxjdXJyZW50VGltZXJEZWJ1Z0lEPWUsY3VycmVudFRpbWVyVHlwZT1uKX1mdW5jdGlvbiBlbmRMaWZlQ3ljbGVUaW1lcihlLG4pezAhPT1jdXJyZW50Rmx1c2hOZXN0aW5nJiYoY3VycmVudFRpbWVyVHlwZT09PW58fGxpZmVDeWNsZVRpbWVySGFzV2FybmVkfHwoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FybmluZyghMSxcIlRoZXJlIGlzIGFuIGludGVybmFsIGVycm9yIGluIHRoZSBSZWFjdCBwZXJmb3JtYW5jZSBtZWFzdXJlbWVudCBjb2RlLiBXZSBkaWQgbm90IGV4cGVjdCAlcyB0aW1lciB0byBzdG9wIHdoaWxlICVzIHRpbWVyIGlzIHN0aWxsIGluIHByb2dyZXNzIGZvciAlcyBpbnN0YW5jZS4gUGxlYXNlIHJlcG9ydCB0aGlzIGFzIGEgYnVnIGluIFJlYWN0LlwiLG4sY3VycmVudFRpbWVyVHlwZXx8XCJub1wiLGU9PT1jdXJyZW50VGltZXJEZWJ1Z0lEP1widGhlIHNhbWVcIjpcImFub3RoZXJcIiksbGlmZUN5Y2xlVGltZXJIYXNXYXJuZWQ9ITApLGlzUHJvZmlsaW5nJiZjdXJyZW50Rmx1c2hNZWFzdXJlbWVudHMucHVzaCh7dGltZXJUeXBlOm4saW5zdGFuY2VJRDplLGR1cmF0aW9uOnBlcmZvcm1hbmNlTm93KCktY3VycmVudFRpbWVyU3RhcnRUaW1lLWN1cnJlbnRUaW1lck5lc3RlZEZsdXNoRHVyYXRpb259KSxjdXJyZW50VGltZXJTdGFydFRpbWU9MCxjdXJyZW50VGltZXJOZXN0ZWRGbHVzaER1cmF0aW9uPTAsY3VycmVudFRpbWVyRGVidWdJRD1udWxsLGN1cnJlbnRUaW1lclR5cGU9bnVsbCl9ZnVuY3Rpb24gcGF1c2VDdXJyZW50TGlmZUN5Y2xlVGltZXIoKXt2YXIgZT17c3RhcnRUaW1lOmN1cnJlbnRUaW1lclN0YXJ0VGltZSxuZXN0ZWRGbHVzaFN0YXJ0VGltZTpwZXJmb3JtYW5jZU5vdygpLGRlYnVnSUQ6Y3VycmVudFRpbWVyRGVidWdJRCx0aW1lclR5cGU6Y3VycmVudFRpbWVyVHlwZX07bGlmZUN5Y2xlVGltZXJTdGFjay5wdXNoKGUpLGN1cnJlbnRUaW1lclN0YXJ0VGltZT0wLGN1cnJlbnRUaW1lck5lc3RlZEZsdXNoRHVyYXRpb249MCxjdXJyZW50VGltZXJEZWJ1Z0lEPW51bGwsY3VycmVudFRpbWVyVHlwZT1udWxsfWZ1bmN0aW9uIHJlc3VtZUN1cnJlbnRMaWZlQ3ljbGVUaW1lcigpe3ZhciBlPWxpZmVDeWNsZVRpbWVyU3RhY2sucG9wKCksbj1lLnN0YXJ0VGltZSxyPWUubmVzdGVkRmx1c2hTdGFydFRpbWUsdD1lLmRlYnVnSUQsbz1lLnRpbWVyVHlwZSxpPXBlcmZvcm1hbmNlTm93KCktcjtjdXJyZW50VGltZXJTdGFydFRpbWU9bixjdXJyZW50VGltZXJOZXN0ZWRGbHVzaER1cmF0aW9uKz1pLGN1cnJlbnRUaW1lckRlYnVnSUQ9dCxjdXJyZW50VGltZXJUeXBlPW99dmFyIGxhc3RNYXJrVGltZVN0YW1wPTAsY2FuVXNlUGVyZm9ybWFuY2VNZWFzdXJlPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgcGVyZm9ybWFuY2UubWFyayYmXCJmdW5jdGlvblwiPT10eXBlb2YgcGVyZm9ybWFuY2UuY2xlYXJNYXJrcyYmXCJmdW5jdGlvblwiPT10eXBlb2YgcGVyZm9ybWFuY2UubWVhc3VyZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgcGVyZm9ybWFuY2UuY2xlYXJNZWFzdXJlcztmdW5jdGlvbiBzaG91bGRNYXJrKGUpe2lmKCFpc1Byb2ZpbGluZ3x8IWNhblVzZVBlcmZvcm1hbmNlTWVhc3VyZSlyZXR1cm4hMTt2YXIgbj1SZWFjdENvbXBvbmVudFRyZWVIb29rLmdldEVsZW1lbnQoZSk7cmV0dXJuIG51bGwhPW4mJlwib2JqZWN0XCI9PXR5cGVvZiBuJiYhKFwic3RyaW5nXCI9PXR5cGVvZiBuLnR5cGUpfWZ1bmN0aW9uIG1hcmtCZWdpbihlLG4pe2lmKHNob3VsZE1hcmsoZSkpe3ZhciByPWUrXCI6OlwiK247bGFzdE1hcmtUaW1lU3RhbXA9cGVyZm9ybWFuY2VOb3coKSxwZXJmb3JtYW5jZS5tYXJrKHIpfX1mdW5jdGlvbiBtYXJrRW5kKGUsbil7aWYoc2hvdWxkTWFyayhlKSl7dmFyIHI9ZStcIjo6XCIrbix0PVJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0RGlzcGxheU5hbWUoZSl8fFwiVW5rbm93blwiO2lmKHBlcmZvcm1hbmNlTm93KCktbGFzdE1hcmtUaW1lU3RhbXA+LjEpe3ZhciBvPXQrXCIgW1wiK24rXCJdXCI7cGVyZm9ybWFuY2UubWVhc3VyZShvLHIpfXBlcmZvcm1hbmNlLmNsZWFyTWFya3MociksbyYmcGVyZm9ybWFuY2UuY2xlYXJNZWFzdXJlcyhvKX19dmFyIFJlYWN0RGVidWdUb29sPXthZGRIb29rOmZ1bmN0aW9uKGUpe2hvb2tzLnB1c2goZSl9LHJlbW92ZUhvb2s6ZnVuY3Rpb24oZSl7Zm9yKHZhciBuPTA7bjxob29rcy5sZW5ndGg7bisrKWhvb2tzW25dPT09ZSYmKGhvb2tzLnNwbGljZShuLDEpLG4tLSl9LGlzUHJvZmlsaW5nOmZ1bmN0aW9uKCl7cmV0dXJuIGlzUHJvZmlsaW5nfSxiZWdpblByb2ZpbGluZzpmdW5jdGlvbigpe2lzUHJvZmlsaW5nfHwoaXNQcm9maWxpbmc9ITAsZmx1c2hIaXN0b3J5Lmxlbmd0aD0wLHJlc2V0TWVhc3VyZW1lbnRzKCksUmVhY3REZWJ1Z1Rvb2wuYWRkSG9vayhSZWFjdEhvc3RPcGVyYXRpb25IaXN0b3J5SG9vaykpfSxlbmRQcm9maWxpbmc6ZnVuY3Rpb24oKXtpc1Byb2ZpbGluZyYmKGlzUHJvZmlsaW5nPSExLHJlc2V0TWVhc3VyZW1lbnRzKCksUmVhY3REZWJ1Z1Rvb2wucmVtb3ZlSG9vayhSZWFjdEhvc3RPcGVyYXRpb25IaXN0b3J5SG9vaykpfSxnZXRGbHVzaEhpc3Rvcnk6ZnVuY3Rpb24oKXtyZXR1cm4gZmx1c2hIaXN0b3J5fSxvbkJlZ2luRmx1c2g6ZnVuY3Rpb24oKXtjdXJyZW50Rmx1c2hOZXN0aW5nKysscmVzZXRNZWFzdXJlbWVudHMoKSxwYXVzZUN1cnJlbnRMaWZlQ3ljbGVUaW1lcigpLGVtaXRFdmVudChcIm9uQmVnaW5GbHVzaFwiKX0sb25FbmRGbHVzaDpmdW5jdGlvbigpe3Jlc2V0TWVhc3VyZW1lbnRzKCksY3VycmVudEZsdXNoTmVzdGluZy0tLHJlc3VtZUN1cnJlbnRMaWZlQ3ljbGVUaW1lcigpLGVtaXRFdmVudChcIm9uRW5kRmx1c2hcIil9LG9uQmVnaW5MaWZlQ3ljbGVUaW1lcjpmdW5jdGlvbihlLG4pe2NoZWNrRGVidWdJRChlKSxlbWl0RXZlbnQoXCJvbkJlZ2luTGlmZUN5Y2xlVGltZXJcIixlLG4pLG1hcmtCZWdpbihlLG4pLGJlZ2luTGlmZUN5Y2xlVGltZXIoZSxuKX0sb25FbmRMaWZlQ3ljbGVUaW1lcjpmdW5jdGlvbihlLG4pe2NoZWNrRGVidWdJRChlKSxlbmRMaWZlQ3ljbGVUaW1lcihlLG4pLG1hcmtFbmQoZSxuKSxlbWl0RXZlbnQoXCJvbkVuZExpZmVDeWNsZVRpbWVyXCIsZSxuKX0sb25CZWdpblByb2Nlc3NpbmdDaGlsZENvbnRleHQ6ZnVuY3Rpb24oKXtlbWl0RXZlbnQoXCJvbkJlZ2luUHJvY2Vzc2luZ0NoaWxkQ29udGV4dFwiKX0sb25FbmRQcm9jZXNzaW5nQ2hpbGRDb250ZXh0OmZ1bmN0aW9uKCl7ZW1pdEV2ZW50KFwib25FbmRQcm9jZXNzaW5nQ2hpbGRDb250ZXh0XCIpfSxvbkhvc3RPcGVyYXRpb246ZnVuY3Rpb24oZSl7Y2hlY2tEZWJ1Z0lEKGUuaW5zdGFuY2VJRCksZW1pdEV2ZW50KFwib25Ib3N0T3BlcmF0aW9uXCIsZSl9LG9uU2V0U3RhdGU6ZnVuY3Rpb24oKXtlbWl0RXZlbnQoXCJvblNldFN0YXRlXCIpfSxvblNldENoaWxkcmVuOmZ1bmN0aW9uKGUsbil7Y2hlY2tEZWJ1Z0lEKGUpLG4uZm9yRWFjaChjaGVja0RlYnVnSUQpLGVtaXRFdmVudChcIm9uU2V0Q2hpbGRyZW5cIixlLG4pfSxvbkJlZm9yZU1vdW50Q29tcG9uZW50OmZ1bmN0aW9uKGUsbixyKXtjaGVja0RlYnVnSUQoZSksY2hlY2tEZWJ1Z0lEKHIsITApLGVtaXRFdmVudChcIm9uQmVmb3JlTW91bnRDb21wb25lbnRcIixlLG4sciksbWFya0JlZ2luKGUsXCJtb3VudFwiKX0sb25Nb3VudENvbXBvbmVudDpmdW5jdGlvbihlKXtjaGVja0RlYnVnSUQoZSksbWFya0VuZChlLFwibW91bnRcIiksZW1pdEV2ZW50KFwib25Nb3VudENvbXBvbmVudFwiLGUpfSxvbkJlZm9yZVVwZGF0ZUNvbXBvbmVudDpmdW5jdGlvbihlLG4pe2NoZWNrRGVidWdJRChlKSxlbWl0RXZlbnQoXCJvbkJlZm9yZVVwZGF0ZUNvbXBvbmVudFwiLGUsbiksbWFya0JlZ2luKGUsXCJ1cGRhdGVcIil9LG9uVXBkYXRlQ29tcG9uZW50OmZ1bmN0aW9uKGUpe2NoZWNrRGVidWdJRChlKSxtYXJrRW5kKGUsXCJ1cGRhdGVcIiksZW1pdEV2ZW50KFwib25VcGRhdGVDb21wb25lbnRcIixlKX0sb25CZWZvcmVVbm1vdW50Q29tcG9uZW50OmZ1bmN0aW9uKGUpe2NoZWNrRGVidWdJRChlKSxlbWl0RXZlbnQoXCJvbkJlZm9yZVVubW91bnRDb21wb25lbnRcIixlKSxtYXJrQmVnaW4oZSxcInVubW91bnRcIil9LG9uVW5tb3VudENvbXBvbmVudDpmdW5jdGlvbihlKXtjaGVja0RlYnVnSUQoZSksbWFya0VuZChlLFwidW5tb3VudFwiKSxlbWl0RXZlbnQoXCJvblVubW91bnRDb21wb25lbnRcIixlKX0sb25UZXN0RXZlbnQ6ZnVuY3Rpb24oKXtlbWl0RXZlbnQoXCJvblRlc3RFdmVudFwiKX19O1JlYWN0RGVidWdUb29sLmFkZERldnRvb2w9UmVhY3REZWJ1Z1Rvb2wuYWRkSG9vayxSZWFjdERlYnVnVG9vbC5yZW1vdmVEZXZ0b29sPVJlYWN0RGVidWdUb29sLnJlbW92ZUhvb2ssUmVhY3REZWJ1Z1Rvb2wuYWRkSG9vayhSZWFjdEludmFsaWRTZXRTdGF0ZVdhcm5pbmdIb29rKSxSZWFjdERlYnVnVG9vbC5hZGRIb29rKFJlYWN0Q29tcG9uZW50VHJlZUhvb2spO3ZhciB1cmw9RXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NJiZ3aW5kb3cubG9jYXRpb24uaHJlZnx8XCJcIjsvWz8mXXJlYWN0X3BlcmZcXGIvLnRlc3QodXJsKSYmUmVhY3REZWJ1Z1Rvb2wuYmVnaW5Qcm9maWxpbmcoKSxtb2R1bGUuZXhwb3J0cz1SZWFjdERlYnVnVG9vbDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSmxZV04wUkdWaWRXZFViMjlzTG1weklsMHNJbTVoYldWeklqcGJJbEpsWVdOMFNXNTJZV3hwWkZObGRGTjBZWFJsVjJGeWJtbHVaMGh2YjJzaUxDSnlaWEYxYVhKbElpd2lVbVZoWTNSSWIzTjBUM0JsY21GMGFXOXVTR2x6ZEc5eWVVaHZiMnNpTENKU1pXRmpkRU52YlhCdmJtVnVkRlJ5WldWSWIyOXJJaXdpUlhobFkzVjBhVzl1Ulc1MmFYSnZibTFsYm5RaUxDSndaWEptYjNKdFlXNWpaVTV2ZHlJc0luZGhjbTVwYm1jaUxDSm9iMjlyY3lJc0ltUnBaRWh2YjJ0VWFISnZkMFp2Y2tWMlpXNTBJaXdpWTJGc2JFaHZiMnNpTENKbGRtVnVkQ0lzSW1adUlpd2lZMjl1ZEdWNGRDSXNJbUZ5WnpFaUxDSmhjbWN5SWl3aVlYSm5NeUlzSW1GeVp6UWlMQ0poY21jMUlpd2lZMkZzYkNJc0ltVWlMQ0p3Y205alpYTnpJaXdpWlc1Mklpd2lUazlFUlY5RlRsWWlMQ0p6ZEdGamF5SXNJbVZ0YVhSRmRtVnVkQ0lzSW1raUxDSnNaVzVuZEdnaUxDSm9iMjlySWl3aWFYTlFjbTltYVd4cGJtY2lMQ0ptYkhWemFFaHBjM1J2Y25raUxDSnNhV1psUTNsamJHVlVhVzFsY2xOMFlXTnJJaXdpWTNWeWNtVnVkRVpzZFhOb1RtVnpkR2x1WnlJc0ltTjFjbkpsYm5SR2JIVnphRTFsWVhOMWNtVnRaVzUwY3lJc0ltTjFjbkpsYm5SR2JIVnphRk4wWVhKMFZHbHRaU0lzSW1OMWNuSmxiblJVYVcxbGNrUmxZblZuU1VRaUxDSmpkWEp5Wlc1MFZHbHRaWEpUZEdGeWRGUnBiV1VpTENKamRYSnlaVzUwVkdsdFpYSk9aWE4wWldSR2JIVnphRVIxY21GMGFXOXVJaXdpWTNWeWNtVnVkRlJwYldWeVZIbHdaU0lzSW14cFptVkRlV05zWlZScGJXVnlTR0Z6VjJGeWJtVmtJaXdpWTJ4bFlYSklhWE4wYjNKNUlpd2ljSFZ5WjJWVmJtMXZkVzUwWldSRGIyMXdiMjVsYm5Seklpd2laMlYwVkhKbFpWTnVZWEJ6YUc5MElpd2ljbVZuYVhOMFpYSmxaRWxFY3lJc0luSmxaSFZqWlNJc0luUnlaV1VpTENKcFpDSXNJbTkzYm1WeVNVUWlMQ0puWlhSUGQyNWxja2xFSWl3aWNHRnlaVzUwU1VRaUxDSm5aWFJRWVhKbGJuUkpSQ0lzSW1ScGMzQnNZWGxPWVcxbElpd2laMlYwUkdsemNHeGhlVTVoYldVaUxDSjBaWGgwSWl3aVoyVjBWR1Y0ZENJc0luVndaR0YwWlVOdmRXNTBJaXdpWjJWMFZYQmtZWFJsUTI5MWJuUWlMQ0pqYUdsc1pFbEVjeUlzSW1kbGRFTm9hV3hrU1VSeklpd2ljbVZ6WlhSTlpXRnpkWEpsYldWdWRITWlMQ0p3Y21WMmFXOTFjMU4wWVhKMFZHbHRaU0lzSW5CeVpYWnBiM1Z6VFdWaGMzVnlaVzFsYm5Seklpd2ljSEpsZG1sdmRYTlBjR1Z5WVhScGIyNXpJaXdpWjJWMFNHbHpkRzl5ZVNJc0ltZGxkRkpsWjJsemRHVnlaV1JKUkhNaUxDSndkWE5vSWl3aVpIVnlZWFJwYjI0aUxDSnRaV0Z6ZFhKbGJXVnVkSE1pTENKdmNHVnlZWFJwYjI1eklpd2lkSEpsWlZOdVlYQnphRzkwSWl3aVkyaGxZMnRFWldKMVowbEVJaXdpWkdWaWRXZEpSQ0lzSW1GeVozVnRaVzUwY3lJc0luVnVaR1ZtYVc1bFpDSXNJbUpsWjJsdVRHbG1aVU41WTJ4bFZHbHRaWElpTENKMGFXMWxjbFI1Y0dVaUxDSmxibVJNYVdabFEzbGpiR1ZVYVcxbGNpSXNJbWx1YzNSaGJtTmxTVVFpTENKd1lYVnpaVU4xY25KbGJuUk1hV1psUTNsamJHVlVhVzFsY2lJc0ltTjFjbkpsYm5SVWFXMWxjaUlzSW5OMFlYSjBWR2x0WlNJc0ltNWxjM1JsWkVac2RYTm9VM1JoY25SVWFXMWxJaXdpY21WemRXMWxRM1Z5Y21WdWRFeHBabVZEZVdOc1pWUnBiV1Z5SWl3aVgyeHBabVZEZVdOc1pWUnBiV1Z5VTNSaFkyc2tJaXdpY0c5d0lpd2libVZ6ZEdWa1JteDFjMmhFZFhKaGRHbHZiaUlzSW14aGMzUk5ZWEpyVkdsdFpWTjBZVzF3SWl3aVkyRnVWWE5sVUdWeVptOXliV0Z1WTJWTlpXRnpkWEpsSWl3aWNHVnlabTl5YldGdVkyVWlMQ0p0WVhKcklpd2lZMnhsWVhKTllYSnJjeUlzSW0xbFlYTjFjbVVpTENKamJHVmhjazFsWVhOMWNtVnpJaXdpYzJodmRXeGtUV0Z5YXlJc0ltVnNaVzFsYm5RaUxDSm5aWFJGYkdWdFpXNTBJaXdpZEhsd1pTSXNJbTFoY210Q1pXZHBiaUlzSW0xaGNtdFVlWEJsSWl3aWJXRnlhMDVoYldVaUxDSnRZWEpyUlc1a0lpd2liV1ZoYzNWeVpXMWxiblJPWVcxbElpd2lVbVZoWTNSRVpXSjFaMVJ2YjJ3aUxDSmhaR1JJYjI5cklpd2ljbVZ0YjNabFNHOXZheUlzSW5Od2JHbGpaU0lzSW1KbFoybHVVSEp2Wm1sc2FXNW5JaXdpWlc1a1VISnZabWxzYVc1bklpd2laMlYwUm14MWMyaElhWE4wYjNKNUlpd2liMjVDWldkcGJrWnNkWE5vSWl3aWIyNUZibVJHYkhWemFDSXNJbTl1UW1WbmFXNU1hV1psUTNsamJHVlVhVzFsY2lJc0ltOXVSVzVrVEdsbVpVTjVZMnhsVkdsdFpYSWlMQ0p2YmtKbFoybHVVSEp2WTJWemMybHVaME5vYVd4a1EyOXVkR1Y0ZENJc0ltOXVSVzVrVUhKdlkyVnpjMmx1WjBOb2FXeGtRMjl1ZEdWNGRDSXNJbTl1U0c5emRFOXdaWEpoZEdsdmJpSXNJbTl3WlhKaGRHbHZiaUlzSW05dVUyVjBVM1JoZEdVaUxDSnZibE5sZEVOb2FXeGtjbVZ1SWl3aVkyaHBiR1JFWldKMVowbEVjeUlzSW1admNrVmhZMmdpTENKdmJrSmxabTl5WlUxdmRXNTBRMjl0Y0c5dVpXNTBJaXdpY0dGeVpXNTBSR1ZpZFdkSlJDSXNJbTl1VFc5MWJuUkRiMjF3YjI1bGJuUWlMQ0p2YmtKbFptOXlaVlZ3WkdGMFpVTnZiWEJ2Ym1WdWRDSXNJbTl1VlhCa1lYUmxRMjl0Y0c5dVpXNTBJaXdpYjI1Q1pXWnZjbVZWYm0xdmRXNTBRMjl0Y0c5dVpXNTBJaXdpYjI1VmJtMXZkVzUwUTI5dGNHOXVaVzUwSWl3aWIyNVVaWE4wUlhabGJuUWlMQ0poWkdSRVpYWjBiMjlzSWl3aWNtVnRiM1psUkdWMmRHOXZiQ0lzSW5WeWJDSXNJbU5oYmxWelpVUlBUU0lzSW5kcGJtUnZkeUlzSW14dlkyRjBhVzl1SWl3aWFISmxaaUlzSW5SbGMzUWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRlRRU3hoUVVWQkxFbEJRVWxCTEdkRFFVRnJRME1zVVVGQlVTeHhRMEZETVVORExEaENRVUZuUTBRc1VVRkJVU3h0UTBGRGVFTkZMSFZDUVVGNVFrWXNVVUZCVVN4dlEwRkRha05ITEhGQ1FVRjFRa2dzVVVGQlVTeHBRMEZGTDBKSkxHVkJRV2xDU2l4UlFVRlJMREpDUVVONlFrc3NVVUZCVlV3c1VVRkJVU3h2UWtGRmJFSk5MRTFCUVZFc1IwRkRVa01zY1VKQlFYVkNMRWRCUlROQ0xGTkJRVk5ETEZOQlFWTkRMRVZCUVU5RExFVkJRVWxETEVWQlFWTkRMRVZCUVUxRExFVkJRVTFETEVWQlFVMURMRVZCUVUxRExFZEJRelZFTEVsQlEwVk9MRVZCUVVkUExFdEJRVXRPTEVWQlFWTkRMRVZCUVUxRExFVkJRVTFETEVWQlFVMURMRVZCUVUxRExFZEJRM3BETEUxQlFVOUZMRWRCUTJ0Q0xHVkJRWHBDUXl4UlFVRlJReXhKUVVGSlF5eFZRVUUwUW1oQ0xGRkJRVkZGTEhGQ1FVRnhRa1VzUjBGQlVTeHBSRUZCYTBSQkxFVkJRVTlUTEVWQlFVa3NTMEZCVDBFc1JVRkJSVWtzVDBGRGJrcG1MSEZDUVVGeFFrVXNTVUZCVXl4SFFVbHNReXhUUVVGVFl5eFZRVUZWWkN4RlFVRlBSeXhGUVVGTlF5eEZRVUZOUXl4RlFVRk5ReXhGUVVGTlF5eEhRVU5vUkN4SlFVRkxMRWxCUVVsUkxFVkJRVWtzUlVGQlIwRXNSVUZCU1d4Q0xFMUJRVTF0UWl4UFFVRlJSQ3hKUVVGTExFTkJRM0pETEVsQlFVbEZMRVZCUVU5d1FpeE5RVUZOYTBJc1IwRkRZbVFzUlVGQlMyZENMRVZCUVV0cVFpeEhRVU5XUXl4SFFVTkdSaXhUUVVGVFF5eEZRVUZQUXl4RlFVRkpaMElzUlVGQlRXUXNSVUZCVFVNc1JVRkJUVU1zUlVGQlRVTXNSVUZCVFVNc1NVRkxlRVFzU1VGQlNWY3NZVUZCWXl4RlFVTmtReXhoUVVGbExFZEJRMlpETEc5Q1FVRnpRaXhIUVVOMFFrTXNiMEpCUVhOQ0xFVkJRM1JDUXl4NVFrRkJNa0lzUjBGRE0wSkRMSE5DUVVGM1FpeEZRVU40UWtNc2IwSkJRWE5DTEV0QlEzUkNReXh6UWtGQmQwSXNSVUZEZUVKRExHZERRVUZyUXl4RlFVTnNRME1zYVVKQlFXMUNMRXRCUlc1Q1F5eDVRa0ZCTUVJc1JVRkZPVUlzVTBGQlUwTXNaVUZEVUhCRExIVkNRVUYxUW5GRExESkNRVU4yUW5SRExEaENRVUU0UW5GRExHVkJSMmhETEZOQlFWTkZMR2RDUVVGblFrTXNSMEZEZGtJc1QwRkJUMEVzUlVGQlkwTXNUMEZCVHl4VFFVRlZReXhGUVVGTlF5eEhRVU14UXl4SlFVRkpReXhGUVVGVk0wTXNkVUpCUVhWQ05FTXNWMEZCVjBZc1IwRkROVU5ITEVWQlFWYzNReXgxUWtGQmRVSTRReXhaUVVGWlNpeEhRVlZzUkN4UFFWUkJSQ3hGUVVGTFF5eEhRVUZOTEVOQlExUkxMRmxCUVdFdlF5eDFRa0ZCZFVKblJDeGxRVUZsVGl4SFFVTnVSRThzUzBGQlRXcEVMSFZDUVVGMVFtdEVMRkZCUVZGU0xFZEJRM0pEVXl4WlFVRmhia1FzZFVKQlFYVkNiMFFzWlVGQlpWWXNSMEZEYmtSWExGTkJRVlZ5UkN4MVFrRkJkVUp6UkN4WlFVRlpXaXhIUVVVM1EwTXNVVUZCVTBFc1IwRkJWMFVzUjBGQldUZERMSFZDUVVGMVFqUkRMRmRCUVZkRExFbEJRV0VzUlVGREwwVkJMRk5CUVZWQkxFZEJSVXhLTEVkQlEwNHNTVUZIVEN4VFFVRlRZeXh2UWtGRFVDeEpRVUZKUXl4RlFVRnZRakZDTEhOQ1FVTndRakpDTEVWQlFYVkNOVUlzZVVKQlEzWkNOa0lzUlVGQmNVSXpSQ3c0UWtGQk9FSTBSQ3hoUVVWMlJDeEhRVUUwUWl4SlFVRjRRaTlDTEc5Q1FVbEdMRTlCU0VGRkxITkNRVUYzUWl4RlFVTjRRa1FzZVVKQlFUSkNMRkZCUXpOQ1R5eGxRVWxHTEVkQlFVbHhRaXhGUVVGeFFteERMRkZCUVZWdFF5eEZRVUZ0UW01RExFOUJRVkVzUTBGRE5VUXNTVUZCU1dkQ0xFVkJRV2RDZGtNc2RVSkJRWFZDTkVRc2JVSkJRek5EYkVNc1lVRkJZVzFETEV0QlFVc3NRMEZEYUVKRExGTkJRVlUxUkN4cFFrRkJiVUp6UkN4RlFVTTNRazhzWVVGQlkwNHNSMEZCZDBJc1IwRkRkRU5QTEZkQlFWbE9MRWRCUVhOQ0xFZEJRMnhEVHl4aFFVRmpNMElzWjBKQlFXZENReXhMUVVsc1EwZ3NaVUZEUVU0c2MwSkJRWGRDTlVJc2FVSkJRM2hDTWtJc2VVSkJRVEpDTEVkQlJ6ZENMRk5CUVZOeFF5eGhRVUZoUXl4SFFVTktReXhWUVVGVk4wTXNUMEZCVXl4UlFVRnpRamhETEVsQlFXcENSQ3hWUVVGVkxFbEJRVzFDUVN4VlFVRlZMRWxCUld4RUxFbEJRVnBFTEVkQlIxcEJMRWRCUTNOQ0xHVkJRWHBDYkVRc1VVRkJVVU1zU1VGQlNVTXNWVUZCTkVKb1FpeFRRVUZSTEVWQlFVOHNOa05CU1RORUxGTkJRVk50UlN4dlFrRkJiMEpJTEVWQlFWTkpMRWRCUTFJc1NVRkJlRUl6UXl4elFrRkhRVTBzYlVKQlFYRkNReXd3UWtGRFJTeGxRVUY2UW14Q0xGRkJRVkZETEVsQlFVbERMRlZCUVRSQ2FFSXNVMEZCVVN4RlFVRlBMRGhLUVVGNVMyOUZMRVZCUVZkeVF5eHJRa0ZCYjBJc1MwRkJUV2xETEVsQlFWbHdReXh2UWtGQmMwSXNWMEZCWVN4WFFVTndWRWtzZVVKQlFUQkNMRWRCUlRWQ1NDeHpRa0ZCZDBJNVFpeHBRa0ZEZUVJclFpeG5RMEZCYTBNc1JVRkRiRU5HTEc5Q1FVRnpRbTlETEVWQlEzUkNha01zYVVKQlFXMUNjVU1zUjBGSGNrSXNVMEZCVTBNc2EwSkJRV3RDVEN4RlFVRlRTU3hIUVVOT0xFbEJRWGhDTTBNc2MwSkJSMEZOTEcxQ1FVRnhRbkZETEVkQlFXTndReXd3UWtGRFdpeGxRVUY2UW14Q0xGRkJRVkZETEVsQlFVbERMRlZCUVRSQ2FFSXNVMEZCVVN4RlFVRlBMSE5OUVVGcFRtOUZMRVZCUVZkeVF5eHJRa0ZCYjBJc1MwRkJUV2xETEVsQlFWbHdReXh2UWtGQmMwSXNWMEZCWVN4WFFVTTFWa2tzZVVKQlFUQkNMRWRCUlhoQ1ZpeGhRVU5HU1N4NVFrRkJlVUpuUXl4TFFVRkxMRU5CUXpWQ1ZTeFZRVUZYUVN4RlFVTllSU3hYUVVGWlRpeEZRVU5hVEN4VFFVRlZOVVFzYVVKQlFXMUNPRUlzYzBKQlFYZENReXhyUTBGSGVrUkVMSE5DUVVGM1FpeEZRVU40UWtNc1owTkJRV3RETEVWQlEyeERSaXh2UWtGQmMwSXNTMEZEZEVKSExHbENRVUZ0UWl4TlFVZHlRaXhUUVVGVGQwTXNOa0pCUTFBc1NVRkJTVU1zUlVGQlpTeERRVU5xUWtNc1ZVRkJWelZETEhOQ1FVTllOa01zY1VKQlFYTkNNMFVzYVVKQlEzUkNhVVVzVVVGQlUzQkRMRzlDUVVOVWQwTXNWVUZCVjNKRExHdENRVVZpVUN4dlFrRkJiMEpyUXl4TFFVRkxZeXhIUVVONlFqTkRMSE5DUVVGM1FpeEZRVU40UWtNc1owTkJRV3RETEVWQlEyeERSaXh2UWtGQmMwSXNTMEZEZEVKSExHbENRVUZ0UWl4TFFVZHlRaXhUUVVGVE5FTXNPRUpCUTFBc1NVRkJTVU1zUlVGQmQwSndSQ3h2UWtGQmIwSnhSQ3hOUVVNMVEwb3NSVUZCV1Vjc1JVRkJjMEpJTEZWQlEyeERReXhGUVVGMVFrVXNSVUZCYzBKR0xIRkNRVU0zUTFZc1JVRkJWVmtzUlVGQmMwSmFMRkZCUTJoRFNTeEZRVUZaVVN4RlFVRnpRbElzVlVGRmJFTlZMRVZCUVhOQ0wwVXNhVUpCUVcxQ01rVXNSVUZETjBNM1F5eHpRa0ZCZDBJMFF5eEZRVU40UWpORExHbERRVUZ0UTJkRUxFVkJRMjVEYkVRc2IwSkJRWE5DYjBNc1JVRkRkRUpxUXl4cFFrRkJiVUp4UXl4RlFVZHlRaXhKUVVGSlZ5eHJRa0ZCYjBJc1JVRkRjRUpETEhsQ1FVRnJSQ3h2UWtGQmFFSkRMR0ZCUVRKRUxHMUNRVUZ5UWtFc1dVRkJXVU1zVFVGQmVVUXNiVUpCUVROQ1JDeFpRVUZaUlN4WlFVRTBSQ3h0UWtGQmVFSkdMRmxCUVZsSExGTkJRU3RFTEcxQ1FVRTVRa2dzV1VGQldVa3NZMEZGTDA0c1UwRkJVME1zVjBGQlYzUkNMRWRCUTJ4Q0xFbEJRVXN4UXl4alFVRm5RakJFTEhsQ1FVTnVRaXhQUVVGUExFVkJSVlFzU1VGQlNVOHNSVUZCVlRGR0xIVkNRVUYxUWpKR0xGZEJRVmQ0UWl4SFFVTm9SQ3hQUVVGbExFMUJRVmgxUWl4SFFVRnpReXhwUWtGQldrRXNTMEZIWXl4cFFrRkJha0pCTEVWQlFWRkZMRTFCVDNKRExGTkJRVk5ETEZWQlFWVXhRaXhGUVVGVE1rSXNSMEZETVVJc1IwRkJTMHdzVjBGQlYzUkNMRWRCUVdoQ0xFTkJTVUVzU1VGQlNUUkNMRVZCUVZjMVFpeEZRVUZWTEV0QlFVOHlRaXhGUVVOb1Exb3NhMEpCUVc5Q2FFWXNhVUpCUTNCQ2EwWXNXVUZCV1VNc1MwRkJTMVVzU1VGSGJrSXNVMEZCVTBNc1VVRkJVVGRDTEVWQlFWTXlRaXhIUVVONFFpeEhRVUZMVEN4WFFVRlhkRUlzUjBGQmFFSXNRMEZKUVN4SlFVRkpORUlzUlVGQlZ6VkNMRVZCUVZVc1MwRkJUekpDTEVWQlF6VkNMME1zUlVGQll5OURMSFZDUVVGMVFtZEVMR1ZCUVdWdFFpeEpRVUZaTEZWQlUzQkZMRWRCUkdkQ2FrVXNhVUpCUTBGblJpeHJRa0ZCYjBJc1IwRkJTeXhEUVVOMlF5eEpRVUZKWlN4RlFVRnJRbXhFTEVWQlFXTXNTMEZCVHl0RExFVkJRVmNzU1VGRGRFUldMRmxCUVZsSExGRkJRVkZWTEVWQlFXbENSaXhIUVVkMlExZ3NXVUZCV1VVc1YwRkJWMU1zUjBGRGJrSkZMRWRCUTBaaUxGbEJRVmxKTEdOQlFXTlRMRWxCU1RsQ0xFbEJRVWxETEdWQlFXbENMRU5CUTI1Q1F5eFJRVUZUTEZOQlFWVXpSU3hIUVVOcVFuQkNMRTFCUVUxNVJDeExRVUZMY2tNc1NVRkZZalJGTEZkQlFWa3NVMEZCVlRWRkxFZEJRM0JDTEVsQlFVc3NTVUZCU1VZc1JVRkJTU3hGUVVGSFFTeEZRVUZKYkVJc1RVRkJUVzFDTEU5QlFWRkVMRWxCUXpWQ2JFSXNUVUZCVFd0Q0xFdEJRVTlGTEVsQlEyWndRaXhOUVVGTmFVY3NUMEZCVHk5RkxFVkJRVWNzUjBGRGFFSkJMRTFCU1U1SExGbEJRV0VzVjBGRFdDeFBRVUZQUVN4aFFVVlVOa1VzWlVGQlowSXNWMEZEVmpkRkxHTkJTVXBCTEdGQlFXTXNSVUZEWkVNc1lVRkJZVWdzVDBGQlV5eEZRVU4wUW1kRExHOUNRVU5CTWtNc1pVRkJaVU1zVVVGQlVYQkhMR2xEUVVWNlFuZEhMR0ZCUVdNc1YwRkRVRGxGTEdOQlNVeEJMR0ZCUVdNc1JVRkRaRGhDTEc5Q1FVTkJNa01zWlVGQlpVVXNWMEZCVjNKSExHbERRVVUxUW5sSExHZENRVUZwUWl4WFFVTm1MRTlCUVU4NVJTeGpRVVZVSzBVc1lVRkJZeXhYUVVOYU4wVXNjMEpCUTBFeVFpeHZRa0ZEUVcxQ0xEWkNRVU5CY2tRc1ZVRkJWU3hwUWtGRlduRkdMRmRCUVZrc1YwRkRWbTVFTEc5Q1FVTkJNMElzYzBKQlEwRnJSQ3c0UWtGRFFYcEVMRlZCUVZVc1pVRkZXbk5HTEhOQ1FVRjFRaXhUUVVGVmVFTXNSVUZCVTBrc1IwRkRlRU5NTEdGQlFXRkRMRWRCUTJJNVF5eFZRVUZWTEhkQ1FVRjVRamhETEVWQlFWTkpMRWRCUXpWRGMwSXNWVUZCVlRGQ0xFVkJRVk5KTEVkQlEyNUNSQ3h2UWtGQmIwSklMRVZCUVZOSkxFbEJSUzlDY1VNc2IwSkJRWEZDTEZOQlFWVjZReXhGUVVGVFNTeEhRVU4wUTB3c1lVRkJZVU1zUjBGRFlrc3NhMEpCUVd0Q1RDeEZRVUZUU1N4SFFVTXpRbmxDTEZGQlFWRTNRaXhGUVVGVFNTeEhRVU5xUW14RUxGVkJRVlVzYzBKQlFYVkNPRU1zUlVGQlUwa3NTVUZGTlVOelF5dzRRa0ZCSzBJc1YwRkROMEo0Uml4VlFVRlZMR3REUVVWYWVVWXNORUpCUVRaQ0xGZEJRek5DZWtZc1ZVRkJWU3huUTBGRldqQkdMR2RDUVVGcFFpeFRRVUZWUXl4SFFVTjZRamxETEdGQlFXRTRReXhGUVVGVmRrTXNXVUZEZGtKd1JDeFZRVUZWTEd0Q1FVRnRRakpHTEVsQlJTOUNReXhYUVVGWkxGZEJRMVkxUml4VlFVRlZMR1ZCUlZvMlJpeGpRVUZsTEZOQlFWVXZReXhGUVVGVFowUXNSMEZEYUVOcVJDeGhRVUZoUXl4SFFVTmlaMFFzUlVGQlkwTXNVVUZCVVd4RUxHTkJRM1JDTjBNc1ZVRkJWU3huUWtGQmFVSTRReXhGUVVGVFowUXNTVUZGZEVORkxIVkNRVUYzUWl4VFFVRlZiRVFzUlVGQlUzVkNMRVZCUVZNMFFpeEhRVU5zUkhCRUxHRkJRV0ZETEVkQlEySkVMR0ZCUVdGdlJDeEhRVUZsTEVkQlF6VkNha2NzVlVGQlZTeDVRa0ZCTUVJNFF5eEZRVUZUZFVJc1JVRkJVelJDTEVkQlEzUkVla0lzVlVGQlZURkNMRVZCUVZNc1ZVRkZja0p2UkN4cFFrRkJhMElzVTBGQlZYQkVMRWRCUXpGQ1JDeGhRVUZoUXl4SFFVTmlOa0lzVVVGQlVUZENMRVZCUVZNc1UwRkRha0k1UXl4VlFVRlZMRzFDUVVGdlFqaERMRWxCUldoRGNVUXNkMEpCUVhsQ0xGTkJRVlZ5UkN4RlFVRlRkVUlzUjBGRE1VTjRRaXhoUVVGaFF5eEhRVU5pT1VNc1ZVRkJWU3d3UWtGQk1rSTRReXhGUVVGVGRVSXNSMEZET1VOSExGVkJRVlV4UWl4RlFVRlRMRmRCUlhKQ2MwUXNhMEpCUVcxQ0xGTkJRVlYwUkN4SFFVTXpRa1FzWVVGQllVTXNSMEZEWWpaQ0xGRkJRVkUzUWl4RlFVRlRMRlZCUTJwQ09VTXNWVUZCVlN4dlFrRkJjVUk0UXl4SlFVVnFRM1ZFTEhsQ1FVRXdRaXhUUVVGVmRrUXNSMEZEYkVORUxHRkJRV0ZETEVkQlEySTVReXhWUVVGVkxESkNRVUUwUWpoRExFZEJRM1JETUVJc1ZVRkJWVEZDTEVWQlFWTXNXVUZGY2tKM1JDeHRRa0ZCYjBJc1UwRkJWWGhFTEVkQlF6VkNSQ3hoUVVGaFF5eEhRVU5pTmtJc1VVRkJVVGRDTEVWQlFWTXNWMEZEYWtJNVF5eFZRVUZWTEhGQ1FVRnpRamhETEVsQlJXeERlVVFzV1VGQllTeFhRVU5ZZGtjc1ZVRkJWU3hwUWtGTFpEWkZMR1ZCUVdVeVFpeFhRVUZoTTBJc1pVRkJaVU1zVVVGRE0wTkVMR1ZCUVdVMFFpeGpRVUZuUWpWQ0xHVkJRV1ZGTEZkQlJUbERSaXhsUVVGbFF5eFJRVUZSZEVjc2FVTkJRM1pDY1Vjc1pVRkJaVU1zVVVGQlVXNUhMSGRDUVVOMlFpeEpRVUZKSzBnc1NVRkJUVGxJTEhGQ1FVRnhRaXRJTEZkQlFXRkRMRTlCUVU5RExGTkJRVk5ETEUxQlFWRXNSMEZEYUVVc2JVSkJRVzFDUXl4TFFVRkxUQ3hOUVVNeFFqZENMR1ZCUVdWSkxHbENRVWRxUWl0Q0xFOUJRVTlETEZGQlFWVndReUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEMxa2IyMHZiR2xpTDFKbFlXTjBSR1ZpZFdkVWIyOXNMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBfYXNzaWduPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLFJlYWN0VXBkYXRlcz1yZXF1aXJlKFwiLi9SZWFjdFVwZGF0ZXNcIiksVHJhbnNhY3Rpb249cmVxdWlyZShcIi4vVHJhbnNhY3Rpb25cIiksZW1wdHlGdW5jdGlvbj1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlGdW5jdGlvblwiKSxSRVNFVF9CQVRDSEVEX1VQREFURVM9e2luaXRpYWxpemU6ZW1wdHlGdW5jdGlvbixjbG9zZTpmdW5jdGlvbigpe1JlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXM9ITF9fSxGTFVTSF9CQVRDSEVEX1VQREFURVM9e2luaXRpYWxpemU6ZW1wdHlGdW5jdGlvbixjbG9zZTpSZWFjdFVwZGF0ZXMuZmx1c2hCYXRjaGVkVXBkYXRlcy5iaW5kKFJlYWN0VXBkYXRlcyl9LFRSQU5TQUNUSU9OX1dSQVBQRVJTPVtGTFVTSF9CQVRDSEVEX1VQREFURVMsUkVTRVRfQkFUQ0hFRF9VUERBVEVTXTtmdW5jdGlvbiBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5VHJhbnNhY3Rpb24oKXt0aGlzLnJlaW5pdGlhbGl6ZVRyYW5zYWN0aW9uKCl9X2Fzc2lnbihSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5VHJhbnNhY3Rpb24ucHJvdG90eXBlLFRyYW5zYWN0aW9uLHtnZXRUcmFuc2FjdGlvbldyYXBwZXJzOmZ1bmN0aW9uKCl7cmV0dXJuIFRSQU5TQUNUSU9OX1dSQVBQRVJTfX0pO3ZhciB0cmFuc2FjdGlvbj1uZXcgUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneVRyYW5zYWN0aW9uLFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3k9e2lzQmF0Y2hpbmdVcGRhdGVzOiExLGJhdGNoZWRVcGRhdGVzOmZ1bmN0aW9uKHQsYSxlLG4saSxjKXt2YXIgcj1SZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzO3JldHVybiBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzPSEwLHI/dChhLGUsbixpLGMpOnRyYW5zYWN0aW9uLnBlcmZvcm0odCxudWxsLGEsZSxuLGksYyl9fTttb2R1bGUuZXhwb3J0cz1SZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxKbFlXTjBSR1ZtWVhWc2RFSmhkR05vYVc1blUzUnlZWFJsWjNrdWFuTWlYU3dpYm1GdFpYTWlPbHNpWDJGemMybG5iaUlzSW5KbGNYVnBjbVVpTENKU1pXRmpkRlZ3WkdGMFpYTWlMQ0pVY21GdWMyRmpkR2x2YmlJc0ltVnRjSFI1Um5WdVkzUnBiMjRpTENKU1JWTkZWRjlDUVZSRFNFVkVYMVZRUkVGVVJWTWlMQ0pwYm1sMGFXRnNhWHBsSWl3aVkyeHZjMlVpTENKU1pXRmpkRVJsWm1GMWJIUkNZWFJqYUdsdVoxTjBjbUYwWldkNUlpd2lhWE5DWVhSamFHbHVaMVZ3WkdGMFpYTWlMQ0pHVEZWVFNGOUNRVlJEU0VWRVgxVlFSRUZVUlZNaUxDSm1iSFZ6YUVKaGRHTm9aV1JWY0dSaGRHVnpJaXdpWW1sdVpDSXNJbFJTUVU1VFFVTlVTVTlPWDFkU1FWQlFSVkpUSWl3aVVtVmhZM1JFWldaaGRXeDBRbUYwWTJocGJtZFRkSEpoZEdWbmVWUnlZVzV6WVdOMGFXOXVJaXdpZEdocGN5SXNJbkpsYVc1cGRHbGhiR2w2WlZSeVlXNXpZV04wYVc5dUlpd2ljSEp2ZEc5MGVYQmxJaXdpWjJWMFZISmhibk5oWTNScGIyNVhjbUZ3Y0dWeWN5SXNJblJ5WVc1ellXTjBhVzl1SWl3aVltRjBZMmhsWkZWd1pHRjBaWE1pTENKallXeHNZbUZqYXlJc0ltRWlMQ0ppSWl3aVl5SXNJbVFpTENKbElpd2lZV3h5WldGa2VVSmhkR05vYVc1blZYQmtZWFJsY3lJc0luQmxjbVp2Y20waUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25SeklsMHNJbTFoY0hCcGJtZHpJam9pUVVGUlFTeGhRVVZCTEVsQlFVbEJMRkZCUVZWRExGRkJRVkVzYVVKQlJXeENReXhoUVVGbFJDeFJRVUZSTEd0Q1FVTjJRa1VzV1VGQlkwWXNVVUZCVVN4cFFrRkZkRUpITEdOQlFXZENTQ3hSUVVGUkxEQkNRVVY0UWtrc2MwSkJRWGRDTEVOQlF6RkNReXhYUVVGWlJpeGpRVU5hUnl4TlFVRlBMRmRCUTB4RExEWkNRVUUyUWtNc2JVSkJRVzlDTEVsQlNXcEVReXh6UWtGQmQwSXNRMEZETVVKS0xGZEJRVmxHTEdOQlExcEhMRTFCUVU5TUxHRkJRV0ZUTEc5Q1FVRnZRa01zUzBGQlMxWXNaVUZITTBOWExIRkNRVUYxUWl4RFFVRkRTQ3h6UWtGQmRVSk1MSFZDUVVWdVJDeFRRVUZUVXl3d1EwRkRVRU1zUzBGQlMwTXNNRUpCUjFCb1FpeFJRVUZSWXl4M1EwRkJkME5ITEZWQlFWZGtMRmxCUVdFc1EwRkRkRVZsTEhWQ1FVRjNRaXhYUVVOMFFpeFBRVUZQVEN4M1FrRkpXQ3hKUVVGSlRTeFpRVUZqTEVsQlFVbE1MSGREUVVWc1FrNHNOa0pCUVN0Q0xFTkJRMnBEUXl4dFFrRkJiVUlzUlVGTmJrSlhMR1ZCUVdkQ0xGTkJRVlZETEVWQlFWVkRMRVZCUVVkRExFVkJRVWRETEVWQlFVZERMRVZCUVVkRExFZEJRemxETEVsQlFVbERMRVZCUVhsQ2JrSXNOa0pCUVRaQ1F5eHJRa0ZMTVVRc1QwRklRVVFzTmtKQlFUWkNReXh0UWtGQmIwSXNSVUZITjBOclFpeEZRVU5MVGl4RlFVRlRReXhGUVVGSFF5eEZRVUZIUXl4RlFVRkhReXhGUVVGSFF5eEhRVVZ5UWxBc1dVRkJXVk1zVVVGQlVWQXNSVUZCVlN4TFFVRk5ReXhGUVVGSFF5eEZRVUZIUXl4RlFVRkhReXhGUVVGSFF5eExRVXMzUkVjc1QwRkJUME1zVVVGQlZYUkNJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwzSmxZV04wTFdSdmJTOXNhV0l2VW1WaFkzUkVaV1poZFd4MFFtRjBZMmhwYm1kVGRISmhkR1ZuZVM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgQVJJQURPTVByb3BlcnR5Q29uZmlnPXJlcXVpcmUoXCIuL0FSSUFET01Qcm9wZXJ0eUNvbmZpZ1wiKSxCZWZvcmVJbnB1dEV2ZW50UGx1Z2luPXJlcXVpcmUoXCIuL0JlZm9yZUlucHV0RXZlbnRQbHVnaW5cIiksQ2hhbmdlRXZlbnRQbHVnaW49cmVxdWlyZShcIi4vQ2hhbmdlRXZlbnRQbHVnaW5cIiksRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXI9cmVxdWlyZShcIi4vRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXJcIiksRW50ZXJMZWF2ZUV2ZW50UGx1Z2luPXJlcXVpcmUoXCIuL0VudGVyTGVhdmVFdmVudFBsdWdpblwiKSxIVE1MRE9NUHJvcGVydHlDb25maWc9cmVxdWlyZShcIi4vSFRNTERPTVByb3BlcnR5Q29uZmlnXCIpLFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50PXJlcXVpcmUoXCIuL1JlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50XCIpLFJlYWN0RE9NQ29tcG9uZW50PXJlcXVpcmUoXCIuL1JlYWN0RE9NQ29tcG9uZW50XCIpLFJlYWN0RE9NQ29tcG9uZW50VHJlZT1yZXF1aXJlKFwiLi9SZWFjdERPTUNvbXBvbmVudFRyZWVcIiksUmVhY3RET01FbXB0eUNvbXBvbmVudD1yZXF1aXJlKFwiLi9SZWFjdERPTUVtcHR5Q29tcG9uZW50XCIpLFJlYWN0RE9NVHJlZVRyYXZlcnNhbD1yZXF1aXJlKFwiLi9SZWFjdERPTVRyZWVUcmF2ZXJzYWxcIiksUmVhY3RET01UZXh0Q29tcG9uZW50PXJlcXVpcmUoXCIuL1JlYWN0RE9NVGV4dENvbXBvbmVudFwiKSxSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5PXJlcXVpcmUoXCIuL1JlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3lcIiksUmVhY3RFdmVudExpc3RlbmVyPXJlcXVpcmUoXCIuL1JlYWN0RXZlbnRMaXN0ZW5lclwiKSxSZWFjdEluamVjdGlvbj1yZXF1aXJlKFwiLi9SZWFjdEluamVjdGlvblwiKSxSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uPXJlcXVpcmUoXCIuL1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb25cIiksU1ZHRE9NUHJvcGVydHlDb25maWc9cmVxdWlyZShcIi4vU1ZHRE9NUHJvcGVydHlDb25maWdcIiksU2VsZWN0RXZlbnRQbHVnaW49cmVxdWlyZShcIi4vU2VsZWN0RXZlbnRQbHVnaW5cIiksU2ltcGxlRXZlbnRQbHVnaW49cmVxdWlyZShcIi4vU2ltcGxlRXZlbnRQbHVnaW5cIiksYWxyZWFkeUluamVjdGVkPSExO2Z1bmN0aW9uIGluamVjdCgpe2FscmVhZHlJbmplY3RlZHx8KGFscmVhZHlJbmplY3RlZD0hMCxSZWFjdEluamVjdGlvbi5FdmVudEVtaXR0ZXIuaW5qZWN0UmVhY3RFdmVudExpc3RlbmVyKFJlYWN0RXZlbnRMaXN0ZW5lciksUmVhY3RJbmplY3Rpb24uRXZlbnRQbHVnaW5IdWIuaW5qZWN0RXZlbnRQbHVnaW5PcmRlcihEZWZhdWx0RXZlbnRQbHVnaW5PcmRlciksUmVhY3RJbmplY3Rpb24uRXZlbnRQbHVnaW5VdGlscy5pbmplY3RDb21wb25lbnRUcmVlKFJlYWN0RE9NQ29tcG9uZW50VHJlZSksUmVhY3RJbmplY3Rpb24uRXZlbnRQbHVnaW5VdGlscy5pbmplY3RUcmVlVHJhdmVyc2FsKFJlYWN0RE9NVHJlZVRyYXZlcnNhbCksUmVhY3RJbmplY3Rpb24uRXZlbnRQbHVnaW5IdWIuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lKHtTaW1wbGVFdmVudFBsdWdpbjpTaW1wbGVFdmVudFBsdWdpbixFbnRlckxlYXZlRXZlbnRQbHVnaW46RW50ZXJMZWF2ZUV2ZW50UGx1Z2luLENoYW5nZUV2ZW50UGx1Z2luOkNoYW5nZUV2ZW50UGx1Z2luLFNlbGVjdEV2ZW50UGx1Z2luOlNlbGVjdEV2ZW50UGx1Z2luLEJlZm9yZUlucHV0RXZlbnRQbHVnaW46QmVmb3JlSW5wdXRFdmVudFBsdWdpbn0pLFJlYWN0SW5qZWN0aW9uLkhvc3RDb21wb25lbnQuaW5qZWN0R2VuZXJpY0NvbXBvbmVudENsYXNzKFJlYWN0RE9NQ29tcG9uZW50KSxSZWFjdEluamVjdGlvbi5Ib3N0Q29tcG9uZW50LmluamVjdFRleHRDb21wb25lbnRDbGFzcyhSZWFjdERPTVRleHRDb21wb25lbnQpLFJlYWN0SW5qZWN0aW9uLkRPTVByb3BlcnR5LmluamVjdERPTVByb3BlcnR5Q29uZmlnKEFSSUFET01Qcm9wZXJ0eUNvbmZpZyksUmVhY3RJbmplY3Rpb24uRE9NUHJvcGVydHkuaW5qZWN0RE9NUHJvcGVydHlDb25maWcoSFRNTERPTVByb3BlcnR5Q29uZmlnKSxSZWFjdEluamVjdGlvbi5ET01Qcm9wZXJ0eS5pbmplY3RET01Qcm9wZXJ0eUNvbmZpZyhTVkdET01Qcm9wZXJ0eUNvbmZpZyksUmVhY3RJbmplY3Rpb24uRW1wdHlDb21wb25lbnQuaW5qZWN0RW1wdHlDb21wb25lbnRGYWN0b3J5KGZ1bmN0aW9uKGUpe3JldHVybiBuZXcgUmVhY3RET01FbXB0eUNvbXBvbmVudChlKX0pLFJlYWN0SW5qZWN0aW9uLlVwZGF0ZXMuaW5qZWN0UmVjb25jaWxlVHJhbnNhY3Rpb24oUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbiksUmVhY3RJbmplY3Rpb24uVXBkYXRlcy5pbmplY3RCYXRjaGluZ1N0cmF0ZWd5KFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kpLFJlYWN0SW5qZWN0aW9uLkNvbXBvbmVudC5pbmplY3RFbnZpcm9ubWVudChSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudCkpfW1vZHVsZS5leHBvcnRzPXtpbmplY3Q6aW5qZWN0fTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSmxZV04wUkdWbVlYVnNkRWx1YW1WamRHbHZiaTVxY3lKZExDSnVZVzFsY3lJNld5SkJVa2xCUkU5TlVISnZjR1Z5ZEhsRGIyNW1hV2NpTENKeVpYRjFhWEpsSWl3aVFtVm1iM0psU1c1d2RYUkZkbVZ1ZEZCc2RXZHBiaUlzSWtOb1lXNW5aVVYyWlc1MFVHeDFaMmx1SWl3aVJHVm1ZWFZzZEVWMlpXNTBVR3gxWjJsdVQzSmtaWElpTENKRmJuUmxja3hsWVhabFJYWmxiblJRYkhWbmFXNGlMQ0pJVkUxTVJFOU5VSEp2Y0dWeWRIbERiMjVtYVdjaUxDSlNaV0ZqZEVOdmJYQnZibVZ1ZEVKeWIzZHpaWEpGYm5acGNtOXViV1Z1ZENJc0lsSmxZV04wUkU5TlEyOXRjRzl1Wlc1MElpd2lVbVZoWTNSRVQwMURiMjF3YjI1bGJuUlVjbVZsSWl3aVVtVmhZM1JFVDAxRmJYQjBlVU52YlhCdmJtVnVkQ0lzSWxKbFlXTjBSRTlOVkhKbFpWUnlZWFpsY25OaGJDSXNJbEpsWVdOMFJFOU5WR1Y0ZEVOdmJYQnZibVZ1ZENJc0lsSmxZV04wUkdWbVlYVnNkRUpoZEdOb2FXNW5VM1J5WVhSbFoza2lMQ0pTWldGamRFVjJaVzUwVEdsemRHVnVaWElpTENKU1pXRmpkRWx1YW1WamRHbHZiaUlzSWxKbFlXTjBVbVZqYjI1amFXeGxWSEpoYm5OaFkzUnBiMjRpTENKVFZrZEVUMDFRY205d1pYSjBlVU52Ym1acFp5SXNJbE5sYkdWamRFVjJaVzUwVUd4MVoybHVJaXdpVTJsdGNHeGxSWFpsYm5SUWJIVm5hVzRpTENKaGJISmxZV1I1U1c1cVpXTjBaV1FpTENKcGJtcGxZM1FpTENKRmRtVnVkRVZ0YVhSMFpYSWlMQ0pwYm1wbFkzUlNaV0ZqZEVWMlpXNTBUR2x6ZEdWdVpYSWlMQ0pGZG1WdWRGQnNkV2RwYmtoMVlpSXNJbWx1YW1WamRFVjJaVzUwVUd4MVoybHVUM0prWlhJaUxDSkZkbVZ1ZEZCc2RXZHBibFYwYVd4eklpd2lhVzVxWldOMFEyOXRjRzl1Wlc1MFZISmxaU0lzSW1sdWFtVmpkRlJ5WldWVWNtRjJaWEp6WVd3aUxDSnBibXBsWTNSRmRtVnVkRkJzZFdkcGJuTkNlVTVoYldVaUxDSkliM04wUTI5dGNHOXVaVzUwSWl3aWFXNXFaV04wUjJWdVpYSnBZME52YlhCdmJtVnVkRU5zWVhOeklpd2lhVzVxWldOMFZHVjRkRU52YlhCdmJtVnVkRU5zWVhOeklpd2lSRTlOVUhKdmNHVnlkSGtpTENKcGJtcGxZM1JFVDAxUWNtOXdaWEowZVVOdmJtWnBaeUlzSWtWdGNIUjVRMjl0Y0c5dVpXNTBJaXdpYVc1cVpXTjBSVzF3ZEhsRGIyMXdiMjVsYm5SR1lXTjBiM0o1SWl3aWFXNXpkR0Z1ZEdsaGRHVWlMQ0pWY0dSaGRHVnpJaXdpYVc1cVpXTjBVbVZqYjI1amFXeGxWSEpoYm5OaFkzUnBiMjRpTENKcGJtcGxZM1JDWVhSamFHbHVaMU4wY21GMFpXZDVJaXdpUTI5dGNHOXVaVzUwSWl3aWFXNXFaV04wUlc1MmFYSnZibTFsYm5RaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25SeklsMHNJbTFoY0hCcGJtZHpJam9pUVVGUlFTeGhRVVZCTEVsQlFVbEJMSE5DUVVGM1FrTXNVVUZCVVN3eVFrRkRhRU5ETEhWQ1FVRjVRa1FzVVVGQlVTdzBRa0ZEYWtORkxHdENRVUZ2UWtZc1VVRkJVU3gxUWtGRE5VSkhMSGRDUVVFd1FrZ3NVVUZCVVN3MlFrRkRiRU5KTEhOQ1FVRjNRa29zVVVGQlVTd3lRa0ZEYUVOTExITkNRVUYzUWt3c1VVRkJVU3d5UWtGRGFFTk5MR2xEUVVGdFEwNHNVVUZCVVN4elEwRkRNME5QTEd0Q1FVRnZRbEFzVVVGQlVTeDFRa0ZETlVKUkxITkNRVUYzUWxJc1VVRkJVU3d5UWtGRGFFTlRMSFZDUVVGNVFsUXNVVUZCVVN3MFFrRkRha05WTEhOQ1FVRjNRbFlzVVVGQlVTd3lRa0ZEYUVOWExITkNRVUYzUWxnc1VVRkJVU3d5UWtGRGFFTlpMRFpDUVVFclFsb3NVVUZCVVN4clEwRkRka05oTEcxQ1FVRnhRbUlzVVVGQlVTeDNRa0ZETjBKakxHVkJRV2xDWkN4UlFVRlJMRzlDUVVONlFtVXNNRUpCUVRSQ1ppeFJRVUZSTEN0Q1FVTndRMmRDTEhGQ1FVRjFRbWhDTEZGQlFWRXNNRUpCUXk5Q2FVSXNhMEpCUVc5Q2FrSXNVVUZCVVN4MVFrRkROVUpyUWl4clFrRkJiMEpzUWl4UlFVRlJMSFZDUVVVMVFtMUNMR2xDUVVGclFpeEZRVVYwUWl4VFFVRlRReXhUUVVOSVJDeHJRa0ZOU2tFc2FVSkJRV3RDTEVWQlJXeENUQ3hsUVVGbFR5eGhRVUZoUXl4NVFrRkJlVUpVTEc5Q1FVdHlSRU1zWlVGQlpWTXNaVUZCWlVNc2RVSkJRWFZDY2tJc2VVSkJRM0pFVnl4bFFVRmxWeXhwUWtGQmFVSkRMRzlDUVVGdlFteENMSFZDUVVOd1JFMHNaVUZCWlZjc2FVSkJRV2xDUlN4dlFrRkJiMEpxUWl4MVFrRk5jRVJKTEdWQlFXVlRMR1ZCUVdWTExIbENRVUY1UWl4RFFVTnlSRllzYTBKQlFXMUNRU3hyUWtGRGJrSmtMSE5DUVVGMVFrRXNjMEpCUTNaQ1JpeHJRa0ZCYlVKQkxHdENRVU51UW1Vc2EwSkJRVzFDUVN4clFrRkRia0pvUWl4MVFrRkJkMEpCTEhsQ1FVY3hRbUVzWlVGQlpXVXNZMEZCWTBNc05FSkJRVFJDZGtJc2JVSkJSWHBFVHl4bFFVRmxaU3hqUVVGalJTeDVRa0ZCZVVKd1FpeDFRa0ZGZEVSSExHVkJRV1ZyUWl4WlFVRlpReXgzUWtGQmQwSnNReXgxUWtGRGJrUmxMR1ZCUVdWclFpeFpRVUZaUXl4M1FrRkJkMEkxUWl4MVFrRkRia1JUTEdWQlFXVnJRaXhaUVVGWlF5eDNRa0ZCZDBKcVFpeHpRa0ZGYmtSR0xHVkJRV1Z2UWl4bFFVRmxReXcwUWtGQk5FSXNVMEZCVlVNc1IwRkRiRVVzVDBGQlR5eEpRVUZKTTBJc2RVSkJRWFZDTWtJc1MwRkhjRU4wUWl4bFFVRmxkVUlzVVVGQlVVTXNNa0pCUVRKQ2RrSXNNa0pCUTJ4RVJDeGxRVUZsZFVJc1VVRkJVVVVzZFVKQlFYVkNNMElzT0VKQlJUbERSU3hsUVVGbE1FSXNWVUZCVlVNc2EwSkJRV3RDYmtNc2JVTkJSemREYjBNc1QwRkJUME1zVVVGQlZTeERRVU5tZGtJc1QwRkJVVUVpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdFpHOXRMMnhwWWk5U1pXRmpkRVJsWm1GMWJIUkpibXBsWTNScGIyNHVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciBSRUFDVF9FTEVNRU5UX1RZUEU9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yJiZTeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKXx8NjAxMDM7bW9kdWxlLmV4cG9ydHM9UkVBQ1RfRUxFTUVOVF9UWVBFO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxKbFlXTjBSV3hsYldWdWRGTjViV0p2YkM1cWN5SmRMQ0p1WVcxbGN5STZXeUpTUlVGRFZGOUZURVZOUlU1VVgxUlpVRVVpTENKVGVXMWliMndpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZUUVN4aFFVdEJMRWxCUVVsQkxHMUNRVUYxUXl4dFFrRkJXRU1zVVVGQmVVSkJMRTlCUVZrc1MwRkJTMEVzVDBGQldTeEpRVUZGTEd0Q1FVRnZRaXhOUVVVMVIwTXNUMEZCVDBNc1VVRkJWVWdpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdFpHOXRMMnhwWWk5U1pXRmpkRVZzWlcxbGJuUlRlVzFpYjJ3dWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIGVtcHR5Q29tcG9uZW50RmFjdG9yeSxSZWFjdEVtcHR5Q29tcG9uZW50SW5qZWN0aW9uPXtpbmplY3RFbXB0eUNvbXBvbmVudEZhY3Rvcnk6ZnVuY3Rpb24odCl7ZW1wdHlDb21wb25lbnRGYWN0b3J5PXR9fSxSZWFjdEVtcHR5Q29tcG9uZW50PXtjcmVhdGU6ZnVuY3Rpb24odCl7cmV0dXJuIGVtcHR5Q29tcG9uZW50RmFjdG9yeSh0KX19O1JlYWN0RW1wdHlDb21wb25lbnQuaW5qZWN0aW9uPVJlYWN0RW1wdHlDb21wb25lbnRJbmplY3Rpb24sbW9kdWxlLmV4cG9ydHM9UmVhY3RFbXB0eUNvbXBvbmVudDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSmxZV04wUlcxd2RIbERiMjF3YjI1bGJuUXVhbk1pWFN3aWJtRnRaWE1pT2xzaVpXMXdkSGxEYjIxd2IyNWxiblJHWVdOMGIzSjVJaXdpVW1WaFkzUkZiWEIwZVVOdmJYQnZibVZ1ZEVsdWFtVmpkR2x2YmlJc0ltbHVhbVZqZEVWdGNIUjVRMjl0Y0c5dVpXNTBSbUZqZEc5eWVTSXNJbVpoWTNSdmNua2lMQ0pTWldGamRFVnRjSFI1UTI5dGNHOXVaVzUwSWl3aVkzSmxZWFJsSWl3aWFXNXpkR0Z1ZEdsaGRHVWlMQ0pwYm1wbFkzUnBiMjRpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZSUVN4aFFVVkJMRWxCUVVsQkxITkNRVVZCUXl3MlFrRkJLMElzUTBGRGFrTkRMRFJDUVVFMlFpeFRRVUZWUXl4SFFVTnlRMGdzYzBKQlFYZENSeXhKUVVsNFFrTXNiMEpCUVhOQ0xFTkJRM2hDUXl4UFFVRlJMRk5CUVZWRExFZEJRMmhDTEU5QlFVOU9MSE5DUVVGelFrMHNTMEZKYWtOR0xHOUNRVUZ2UWtjc1ZVRkJXVTRzTmtKQlJXaERUeXhQUVVGUFF5eFJRVUZWVENJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDMWtiMjB2YkdsaUwxSmxZV04wUlcxd2RIbERiMjF3YjI1bGJuUXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciBjYXVnaHRFcnJvcj1udWxsO2Z1bmN0aW9uIGludm9rZUd1YXJkZWRDYWxsYmFjayhlLHIsdCl7dHJ5e3IodCl9Y2F0Y2goZSl7bnVsbD09PWNhdWdodEVycm9yJiYoY2F1Z2h0RXJyb3I9ZSl9fXZhciBSZWFjdEVycm9yVXRpbHM9e2ludm9rZUd1YXJkZWRDYWxsYmFjazppbnZva2VHdWFyZGVkQ2FsbGJhY2ssaW52b2tlR3VhcmRlZENhbGxiYWNrV2l0aENhdGNoOmludm9rZUd1YXJkZWRDYWxsYmFjayxyZXRocm93Q2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtpZihjYXVnaHRFcnJvcil7dmFyIGU9Y2F1Z2h0RXJyb3I7dGhyb3cgY2F1Z2h0RXJyb3I9bnVsbCxlfX19O2lmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHdpbmRvdy5kaXNwYXRjaEV2ZW50JiZcInVuZGVmaW5lZFwiIT10eXBlb2YgZG9jdW1lbnQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGRvY3VtZW50LmNyZWF0ZUV2ZW50KXt2YXIgZmFrZU5vZGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInJlYWN0XCIpO1JlYWN0RXJyb3JVdGlscy5pbnZva2VHdWFyZGVkQ2FsbGJhY2s9ZnVuY3Rpb24oZSxyLHQpe3ZhciBhPWZ1bmN0aW9uKCl7cih0KX0sbj1cInJlYWN0LVwiK2U7ZmFrZU5vZGUuYWRkRXZlbnRMaXN0ZW5lcihuLGEsITEpO3ZhciBvPWRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIik7by5pbml0RXZlbnQobiwhMSwhMSksZmFrZU5vZGUuZGlzcGF0Y2hFdmVudChvKSxmYWtlTm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKG4sYSwhMSl9fW1vZHVsZS5leHBvcnRzPVJlYWN0RXJyb3JVdGlscztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSmxZV04wUlhKeWIzSlZkR2xzY3k1cWN5SmRMQ0p1WVcxbGN5STZXeUpqWVhWbmFIUkZjbkp2Y2lJc0ltbHVkbTlyWlVkMVlYSmtaV1JEWVd4c1ltRmpheUlzSW01aGJXVWlMQ0ptZFc1aklpd2lZU0lzSW5naUxDSlNaV0ZqZEVWeWNtOXlWWFJwYkhNaUxDSnBiblp2YTJWSGRXRnlaR1ZrUTJGc2JHSmhZMnRYYVhSb1EyRjBZMmdpTENKeVpYUm9jbTkzUTJGMVoyaDBSWEp5YjNJaUxDSmxjbkp2Y2lJc0luQnliMk5sYzNNaUxDSmxibllpTENKT1QwUkZYMFZPVmlJc0luZHBibVJ2ZHlJc0ltUnBjM0JoZEdOb1JYWmxiblFpTENKa2IyTjFiV1Z1ZENJc0ltTnlaV0YwWlVWMlpXNTBJaXdpWm1GclpVNXZaR1VpTENKamNtVmhkR1ZGYkdWdFpXNTBJaXdpWW05MWJtUkdkVzVqSWl3aVpYWjBWSGx3WlNJc0ltRmtaRVYyWlc1MFRHbHpkR1Z1WlhJaUxDSmxkblFpTENKcGJtbDBSWFpsYm5RaUxDSnlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJVMEVzWVVGRlFTeEpRVUZKUVN4WlFVRmpMRXRCVld4Q0xGTkJRVk5ETEhOQ1FVRnpRa01zUlVGQlRVTXNSVUZCVFVNc1IwRkRla01zU1VGRFJVUXNSVUZCUzBNc1IwRkRUQ3hOUVVGUFF5eEhRVU5oTEU5QlFXaENUQ3hqUVVOR1FTeFpRVUZqU3l4SlFVdHdRaXhKUVVGSlF5eG5Ra0ZCYTBJc1EwRkRjRUpNTEhOQ1FVRjFRa0VzYzBKQlRYWkNUU3dyUWtGQlowTk9MSE5DUVUxb1EwOHNiVUpCUVc5Q0xGZEJRMnhDTEVkQlFVbFNMRmxCUVdFc1EwRkRaaXhKUVVGSlV5eEZRVUZSVkN4WlFVVmFMRTFCUkVGQkxGbEJRV01zUzBGRFVsTXNTMEZMV2l4SFFVRTJRaXhsUVVGNlFrTXNVVUZCVVVNc1NVRkJTVU1zVlVGTFVTeHZRa0ZCV0VNc1VVRkJNRVFzYlVKQlFYcENRU3hQUVVGUFF5eGxRVUZ2UkN4dlFrRkJZa01zVlVGQk5FUXNiVUpCUVhwQ1FTeFRRVUZUUXl4WlFVRTBRaXhEUVVOb1N5eEpRVUZKUXl4VFFVRlhSaXhUUVVGVFJ5eGpRVUZqTEZOQlEzUkRXaXhuUWtGQlowSk1MSE5DUVVGM1FpeFRRVUZWUXl4RlFVRk5ReXhGUVVGTlF5eEhRVU0xUkN4SlFVRkpaU3hGUVVGWkxGZEJRMlJvUWl4RlFVRkxReXhKUVVWSVowSXNSVUZCVlN4VFFVRlhiRUlzUlVGRGVrSmxMRk5CUVZOSkxHbENRVUZwUWtRc1JVRkJVMFFzUjBGQlZ5eEhRVU01UXl4SlFVRkpSeXhGUVVGTlVDeFRRVUZUUXl4WlFVRlpMRk5CUXk5Q1RTeEZRVUZKUXl4VlFVRlZTQ3hIUVVGVExFZEJRVThzUjBGRE9VSklMRk5CUVZOSUxHTkJRV05STEVkQlEzWkNUQ3hUUVVGVFR5eHZRa0ZCYjBKS0xFVkJRVk5FTEVkQlFWY3NTVUZMZGtSTkxFOUJRVTlETEZGQlFWVndRaUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEMxa2IyMHZiR2xpTDFKbFlXTjBSWEp5YjNKVmRHbHNjeTVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBFdmVudFBsdWdpbkh1Yj1yZXF1aXJlKFwiLi9FdmVudFBsdWdpbkh1YlwiKTtmdW5jdGlvbiBydW5FdmVudFF1ZXVlSW5CYXRjaChlKXtFdmVudFBsdWdpbkh1Yi5lbnF1ZXVlRXZlbnRzKGUpLEV2ZW50UGx1Z2luSHViLnByb2Nlc3NFdmVudFF1ZXVlKCExKX12YXIgUmVhY3RFdmVudEVtaXR0ZXJNaXhpbj17aGFuZGxlVG9wTGV2ZWw6ZnVuY3Rpb24oZSxuLHQsdSl7cnVuRXZlbnRRdWV1ZUluQmF0Y2goRXZlbnRQbHVnaW5IdWIuZXh0cmFjdEV2ZW50cyhlLG4sdCx1KSl9fTttb2R1bGUuZXhwb3J0cz1SZWFjdEV2ZW50RW1pdHRlck1peGluO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxKbFlXTjBSWFpsYm5SRmJXbDBkR1Z5VFdsNGFXNHVhbk1pWFN3aWJtRnRaWE1pT2xzaVJYWmxiblJRYkhWbmFXNUlkV0lpTENKeVpYRjFhWEpsSWl3aWNuVnVSWFpsYm5SUmRXVjFaVWx1UW1GMFkyZ2lMQ0psZG1WdWRITWlMQ0psYm5GMVpYVmxSWFpsYm5Seklpd2ljSEp2WTJWemMwVjJaVzUwVVhWbGRXVWlMQ0pTWldGamRFVjJaVzUwUlcxcGRIUmxjazFwZUdsdUlpd2lhR0Z1Wkd4bFZHOXdUR1YyWld3aUxDSjBiM0JNWlhabGJGUjVjR1VpTENKMFlYSm5aWFJKYm5OMElpd2libUYwYVhabFJYWmxiblFpTENKdVlYUnBkbVZGZG1WdWRGUmhjbWRsZENJc0ltVjRkSEpoWTNSRmRtVnVkSE1pTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZSUVN4aFFVVkJMRWxCUVVsQkxHVkJRV2xDUXl4UlFVRlJMRzlDUVVVM1FpeFRRVUZUUXl4eFFrRkJjVUpETEVkQlF6VkNTQ3hsUVVGbFNTeGpRVUZqUkN4SFFVTTNRa2dzWlVGQlpVc3NiVUpCUVd0Q0xFZEJSMjVETEVsQlFVbERMSFZDUVVGNVFpeERRVXN6UWtNc1pVRkJaMElzVTBGQlZVTXNSVUZCWTBNc1JVRkJXVU1zUlVGQllVTXNSMEZGTDBSVUxIRkNRVVJoUml4bFFVRmxXU3hqUVVGalNpeEZRVUZqUXl4RlFVRlpReXhGUVVGaFF5eE5RVXR5UmtVc1QwRkJUME1zVVVGQlZWSWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F0Wkc5dEwyeHBZaTlTWldGamRFVjJaVzUwUlcxcGRIUmxjazFwZUdsdUxtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9hc3NpZ249cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksRXZlbnRMaXN0ZW5lcj1yZXF1aXJlKFwiZmJqcy9saWIvRXZlbnRMaXN0ZW5lclwiKSxFeGVjdXRpb25FbnZpcm9ubWVudD1yZXF1aXJlKFwiZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnRcIiksUG9vbGVkQ2xhc3M9cmVxdWlyZShcIi4vUG9vbGVkQ2xhc3NcIiksUmVhY3RET01Db21wb25lbnRUcmVlPXJlcXVpcmUoXCIuL1JlYWN0RE9NQ29tcG9uZW50VHJlZVwiKSxSZWFjdFVwZGF0ZXM9cmVxdWlyZShcIi4vUmVhY3RVcGRhdGVzXCIpLGdldEV2ZW50VGFyZ2V0PXJlcXVpcmUoXCIuL2dldEV2ZW50VGFyZ2V0XCIpLGdldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uPXJlcXVpcmUoXCJmYmpzL2xpYi9nZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvblwiKTtmdW5jdGlvbiBmaW5kUGFyZW50KGUpe2Zvcig7ZS5faG9zdFBhcmVudDspZT1lLl9ob3N0UGFyZW50O3ZhciBuPVJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKGUpLnBhcmVudE5vZGU7cmV0dXJuIFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZShuKX1mdW5jdGlvbiBUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmcoZSxuKXt0aGlzLnRvcExldmVsVHlwZT1lLHRoaXMubmF0aXZlRXZlbnQ9bix0aGlzLmFuY2VzdG9ycz1bXX1mdW5jdGlvbiBoYW5kbGVUb3BMZXZlbEltcGwoZSl7dmFyIG49Z2V0RXZlbnRUYXJnZXQoZS5uYXRpdmVFdmVudCksdD1SZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUobiksbz10O2Rve2UuYW5jZXN0b3JzLnB1c2gobyksbz1vJiZmaW5kUGFyZW50KG8pfXdoaWxlKG8pO2Zvcih2YXIgbD0wO2w8ZS5hbmNlc3RvcnMubGVuZ3RoO2wrKyl0PWUuYW5jZXN0b3JzW2xdLFJlYWN0RXZlbnRMaXN0ZW5lci5faGFuZGxlVG9wTGV2ZWwoZS50b3BMZXZlbFR5cGUsdCxlLm5hdGl2ZUV2ZW50LGdldEV2ZW50VGFyZ2V0KGUubmF0aXZlRXZlbnQpKX1mdW5jdGlvbiBzY3JvbGxWYWx1ZU1vbml0b3IoZSl7ZShnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbih3aW5kb3cpKX1fYXNzaWduKFRvcExldmVsQ2FsbGJhY2tCb29rS2VlcGluZy5wcm90b3R5cGUse2Rlc3RydWN0b3I6ZnVuY3Rpb24oKXt0aGlzLnRvcExldmVsVHlwZT1udWxsLHRoaXMubmF0aXZlRXZlbnQ9bnVsbCx0aGlzLmFuY2VzdG9ycy5sZW5ndGg9MH19KSxQb29sZWRDbGFzcy5hZGRQb29saW5nVG8oVG9wTGV2ZWxDYWxsYmFja0Jvb2tLZWVwaW5nLFBvb2xlZENsYXNzLnR3b0FyZ3VtZW50UG9vbGVyKTt2YXIgUmVhY3RFdmVudExpc3RlbmVyPXtfZW5hYmxlZDohMCxfaGFuZGxlVG9wTGV2ZWw6bnVsbCxXSU5ET1dfSEFORExFOkV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTT93aW5kb3c6bnVsbCxzZXRIYW5kbGVUb3BMZXZlbDpmdW5jdGlvbihlKXtSZWFjdEV2ZW50TGlzdGVuZXIuX2hhbmRsZVRvcExldmVsPWV9LHNldEVuYWJsZWQ6ZnVuY3Rpb24oZSl7UmVhY3RFdmVudExpc3RlbmVyLl9lbmFibGVkPSEhZX0saXNFbmFibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIFJlYWN0RXZlbnRMaXN0ZW5lci5fZW5hYmxlZH0sdHJhcEJ1YmJsZWRFdmVudDpmdW5jdGlvbihlLG4sdCl7cmV0dXJuIHQ/RXZlbnRMaXN0ZW5lci5saXN0ZW4odCxuLFJlYWN0RXZlbnRMaXN0ZW5lci5kaXNwYXRjaEV2ZW50LmJpbmQobnVsbCxlKSk6bnVsbH0sdHJhcENhcHR1cmVkRXZlbnQ6ZnVuY3Rpb24oZSxuLHQpe3JldHVybiB0P0V2ZW50TGlzdGVuZXIuY2FwdHVyZSh0LG4sUmVhY3RFdmVudExpc3RlbmVyLmRpc3BhdGNoRXZlbnQuYmluZChudWxsLGUpKTpudWxsfSxtb25pdG9yU2Nyb2xsVmFsdWU6ZnVuY3Rpb24oZSl7dmFyIG49c2Nyb2xsVmFsdWVNb25pdG9yLmJpbmQobnVsbCxlKTtFdmVudExpc3RlbmVyLmxpc3Rlbih3aW5kb3csXCJzY3JvbGxcIixuKX0sZGlzcGF0Y2hFdmVudDpmdW5jdGlvbihlLG4pe2lmKFJlYWN0RXZlbnRMaXN0ZW5lci5fZW5hYmxlZCl7dmFyIHQ9VG9wTGV2ZWxDYWxsYmFja0Jvb2tLZWVwaW5nLmdldFBvb2xlZChlLG4pO3RyeXtSZWFjdFVwZGF0ZXMuYmF0Y2hlZFVwZGF0ZXMoaGFuZGxlVG9wTGV2ZWxJbXBsLHQpfWZpbmFsbHl7VG9wTGV2ZWxDYWxsYmFja0Jvb2tLZWVwaW5nLnJlbGVhc2UodCl9fX19O21vZHVsZS5leHBvcnRzPVJlYWN0RXZlbnRMaXN0ZW5lcjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSmxZV04wUlhabGJuUk1hWE4wWlc1bGNpNXFjeUpkTENKdVlXMWxjeUk2V3lKZllYTnphV2R1SWl3aWNtVnhkV2x5WlNJc0lrVjJaVzUwVEdsemRHVnVaWElpTENKRmVHVmpkWFJwYjI1RmJuWnBjbTl1YldWdWRDSXNJbEJ2YjJ4bFpFTnNZWE56SWl3aVVtVmhZM1JFVDAxRGIyMXdiMjVsYm5SVWNtVmxJaXdpVW1WaFkzUlZjR1JoZEdWeklpd2laMlYwUlhabGJuUlVZWEpuWlhRaUxDSm5aWFJWYm1KdmRXNWtaV1JUWTNKdmJHeFFiM05wZEdsdmJpSXNJbVpwYm1SUVlYSmxiblFpTENKcGJuTjBJaXdpWDJodmMzUlFZWEpsYm5RaUxDSmpiMjUwWVdsdVpYSWlMQ0puWlhST2IyUmxSbkp2YlVsdWMzUmhibU5sSWl3aWNHRnlaVzUwVG05a1pTSXNJbWRsZEVOc2IzTmxjM1JKYm5OMFlXNWpaVVp5YjIxT2IyUmxJaXdpVkc5d1RHVjJaV3hEWVd4c1ltRmphMEp2YjJ0TFpXVndhVzVuSWl3aWRHOXdUR1YyWld4VWVYQmxJaXdpYm1GMGFYWmxSWFpsYm5RaUxDSjBhR2x6SWl3aVlXNWpaWE4wYjNKeklpd2lhR0Z1Wkd4bFZHOXdUR1YyWld4SmJYQnNJaXdpWW05dmEwdGxaWEJwYm1jaUxDSnVZWFJwZG1WRmRtVnVkRlJoY21kbGRDSXNJblJoY21kbGRFbHVjM1FpTENKaGJtTmxjM1J2Y2lJc0luQjFjMmdpTENKcElpd2liR1Z1WjNSb0lpd2lVbVZoWTNSRmRtVnVkRXhwYzNSbGJtVnlJaXdpWDJoaGJtUnNaVlJ2Y0V4bGRtVnNJaXdpYzJOeWIyeHNWbUZzZFdWTmIyNXBkRzl5SWl3aVkySWlMQ0ozYVc1a2IzY2lMQ0p3Y205MGIzUjVjR1VpTENKa1pYTjBjblZqZEc5eUlpd2lZV1JrVUc5dmJHbHVaMVJ2SWl3aWRIZHZRWEpuZFcxbGJuUlFiMjlzWlhJaUxDSmZaVzVoWW14bFpDSXNJbGRKVGtSUFYxOUlRVTVFVEVVaUxDSmpZVzVWYzJWRVQwMGlMQ0p6WlhSSVlXNWtiR1ZVYjNCTVpYWmxiQ0lzSW1oaGJtUnNaVlJ2Y0V4bGRtVnNJaXdpYzJWMFJXNWhZbXhsWkNJc0ltVnVZV0pzWldRaUxDSnBjMFZ1WVdKc1pXUWlMQ0owY21Gd1FuVmlZbXhsWkVWMlpXNTBJaXdpYUdGdVpHeGxja0poYzJWT1lXMWxJaXdpWld4bGJXVnVkQ0lzSW14cGMzUmxiaUlzSW1ScGMzQmhkR05vUlhabGJuUWlMQ0ppYVc1a0lpd2lkSEpoY0VOaGNIUjFjbVZrUlhabGJuUWlMQ0pqWVhCMGRYSmxJaXdpYlc5dWFYUnZjbE5qY205c2JGWmhiSFZsSWl3aWNtVm1jbVZ6YUNJc0ltTmhiR3hpWVdOcklpd2laMlYwVUc5dmJHVmtJaXdpWW1GMFkyaGxaRlZ3WkdGMFpYTWlMQ0p5Wld4bFlYTmxJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJVVUVzWVVGRlFTeEpRVUZKUVN4UlFVRlZReXhSUVVGUkxHbENRVVZzUWtNc1kwRkJaMEpFTEZGQlFWRXNNRUpCUTNoQ1JTeHhRa0ZCZFVKR0xGRkJRVkVzYVVOQlF5OUNSeXhaUVVGalNDeFJRVUZSTEdsQ1FVTjBRa2tzYzBKQlFYZENTaXhSUVVGUkxESkNRVU5vUTBzc1lVRkJaVXdzVVVGQlVTeHJRa0ZGZGtKTkxHVkJRV2xDVGl4UlFVRlJMRzlDUVVONlFrOHNNa0pCUVRaQ1VDeFJRVUZSTEhWRFFVOTZReXhUUVVGVFVTeFhRVUZYUXl4SFFVbHNRaXhMUVVGUFFTeEZRVUZMUXl4aFFVTldSQ3hGUVVGUFFTeEZRVUZMUXl4WlFVVmtMRWxCUTBsRExFVkJSRmRRTEhOQ1FVRnpRbEVzYjBKQlFXOUNTQ3hIUVVOb1Ewa3NWMEZEZWtJc1QwRkJUMVFzYzBKQlFYTkNWU3d5UWtGQk1rSklMRWRCU1RGRUxGTkJRVk5KTERSQ1FVRTBRa01zUlVGQlkwTXNSMEZEYWtSRExFdEJRVXRHTEdGQlFXVkJMRVZCUTNCQ1JTeExRVUZMUkN4WlFVRmpRU3hGUVVOdVFrTXNTMEZCUzBNc1ZVRkJXU3hIUVZkdVFpeFRRVUZUUXl4dFFrRkJiVUpETEVkQlF6RkNMRWxCUVVsRExFVkJRVzlDYUVJc1pVRkJaV1VzUlVGQldVb3NZVUZETDBOTkxFVkJRV0Z1UWl4elFrRkJjMEpWTERKQ1FVRXlRbEVzUjBGTk9VUkZMRVZCUVZkRUxFVkJRMllzUjBGRFJVWXNSVUZCV1VZc1ZVRkJWVTBzUzBGQlMwUXNSMEZETTBKQkxFVkJRVmRCTEVkQlFWbG9RaXhYUVVGWFowSXNVMEZETTBKQkxFZEJSVlFzU1VGQlN5eEpRVUZKUlN4RlFVRkpMRVZCUVVkQkxFVkJRVWxNTEVWQlFWbEdMRlZCUVZWUkxFOUJRVkZFTEVsQlEyaEVTQ3hGUVVGaFJpeEZRVUZaUml4VlFVRlZUeXhIUVVOdVEwVXNiVUpCUVcxQ1F5eG5Ra0ZCWjBKU0xFVkJRVmxNTEdGQlFXTlBMRVZCUVZsR0xFVkJRVmxLTEZsQlFXRllMR1ZCUVdWbExFVkJRVmxLTEdOQlNXcEpMRk5CUVZOaExHMUNRVUZ0UWtNc1IwRkZNVUpCTEVWQlJIRkNlRUlzTWtKQlFUSkNlVUlzVTBFNVFteEVha01zVVVGQlVXZENMRFJDUVVFMFFtdENMRlZCUVZjc1EwRkROME5ETEZkQlFWa3NWMEZEVm1oQ0xFdEJRVXRHTEdGQlFXVXNTMEZEY0VKRkxFdEJRVXRFTEZsQlFXTXNTMEZEYmtKRExFdEJRVXRETEZWQlFWVlJMRTlCUVZNc1MwRkhOVUo0UWl4WlFVRlpaME1zWVVGQllYQkNMRFJDUVVFMlFsb3NXVUZCV1dsRExHMUNRVEpDYkVVc1NVRkJTVklzYlVKQlFYRkNMRU5CUTNaQ1V5eFZRVUZWTEVWQlExWlNMR2RDUVVGcFFpeExRVVZxUWxNc1kwRkJaWEJETEhGQ1FVRnhRbkZETEZWQlFWbFFMRTlCUVZNc1MwRkZla1JSTEd0Q1FVRnRRaXhUUVVGVlF5eEhRVU16UW1Jc2JVSkJRVzFDUXl4blFrRkJhMEpaTEVkQlIzWkRReXhYUVVGWkxGTkJRVlZETEVkQlEzQkNaaXh0UWtGQmJVSlRMRmRCUVdGTkxFZEJSMnhEUXl4VlFVRlhMRmRCUTFRc1QwRkJUMmhDTEcxQ1FVRnRRbE1zVlVGaE5VSlJMR2xDUVVGclFpeFRRVUZWTjBJc1JVRkJZemhDTEVWQlFXbENReXhIUVVONlJDeFBRVUZMUVN4RlFVZEZPVU1zWTBGQll5dERMRTlCUVU5RUxFVkJRVk5FTEVWQlFXbENiRUlzYlVKQlFXMUNjVUlzWTBGQlkwTXNTMEZCU3l4TFFVRk5iRU1zU1VGR2VrWXNUVUZsV0cxRExHdENRVUZ0UWl4VFFVRlZia01zUlVGQll6aENMRVZCUVdsQ1F5eEhRVU14UkN4UFFVRkxRU3hGUVVkRk9VTXNZMEZCWTIxRUxGRkJRVkZNTEVWQlFWTkVMRVZCUVdsQ2JFSXNiVUpCUVcxQ2NVSXNZMEZCWTBNc1MwRkJTeXhMUVVGTmJFTXNTVUZHTVVZc1RVRkxXSEZETEcxQ1FVRnZRaXhUUVVGVlF5eEhRVU0xUWl4SlFVRkpReXhGUVVGWGVrSXNiVUpCUVcxQ2IwSXNTMEZCU3l4TFFVRk5TU3hIUVVNM1EzSkVMR05CUVdNclF5eFBRVUZQYUVJc1QwRkJVU3hUUVVGVmRVSXNTVUZIZWtOT0xHTkJRV1VzVTBGQlZXcERMRVZCUVdORExFZEJRM0pETEVkQlFVdFhMRzFDUVVGdFFsTXNVMEZCZUVJc1EwRkpRU3hKUVVGSmFFSXNSVUZCWTA0c05FSkJRVFJDZVVNc1ZVRkJWWGhETEVWQlFXTkRMRWRCUTNSRkxFbEJSMFZhTEdGQlFXRnZSQ3hsUVVGbGNrTXNiVUpCUVc5Q1F5eEhRVU5vUkN4UlFVTkJUaXcwUWtGQk5FSXlReXhSUVVGUmNrTXNUMEZMTVVOelF5eFBRVUZQUXl4UlFVRlZhRU1pTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdFpHOXRMMnhwWWk5U1pXRmpkRVYyWlc1MFRHbHpkR1Z1WlhJdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIFJlYWN0RmVhdHVyZUZsYWdzPXtsb2dUb3BMZXZlbFJlbmRlcnM6ITF9O21vZHVsZS5leHBvcnRzPVJlYWN0RmVhdHVyZUZsYWdzO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxKbFlXTjBSbVZoZEhWeVpVWnNZV2R6TG1weklsMHNJbTVoYldWeklqcGJJbEpsWVdOMFJtVmhkSFZ5WlVac1lXZHpJaXdpYkc5blZHOXdUR1YyWld4U1pXNWtaWEp6SWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCVTBFc1lVRkZRU3hKUVVGSlFTeHJRa0ZCYjBJc1EwRkpkRUpETEc5Q1FVRnZRaXhIUVVkMFFrTXNUMEZCVDBNc1VVRkJWVWdpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdFpHOXRMMnhwWWk5U1pXRmpkRVpsWVhSMWNtVkdiR0ZuY3k1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgX3Byb2RJbnZhcmlhbnQ9cmVxdWlyZShcIi4vcmVhY3RQcm9kSW52YXJpYW50XCIpLGludmFyaWFudD1yZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpLGdlbmVyaWNDb21wb25lbnRDbGFzcz1udWxsLHRleHRDb21wb25lbnRDbGFzcz1udWxsLFJlYWN0SG9zdENvbXBvbmVudEluamVjdGlvbj17aW5qZWN0R2VuZXJpY0NvbXBvbmVudENsYXNzOmZ1bmN0aW9uKG4pe2dlbmVyaWNDb21wb25lbnRDbGFzcz1ufSxpbmplY3RUZXh0Q29tcG9uZW50Q2xhc3M6ZnVuY3Rpb24obil7dGV4dENvbXBvbmVudENsYXNzPW59fTtmdW5jdGlvbiBjcmVhdGVJbnRlcm5hbENvbXBvbmVudChuKXtyZXR1cm4gZ2VuZXJpY0NvbXBvbmVudENsYXNzfHwoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoITEsXCJUaGVyZSBpcyBubyByZWdpc3RlcmVkIGNvbXBvbmVudCBmb3IgdGhlIHRhZyAlc1wiLG4udHlwZSk6X3Byb2RJbnZhcmlhbnQoXCIxMTFcIixuLnR5cGUpKSxuZXcgZ2VuZXJpY0NvbXBvbmVudENsYXNzKG4pfWZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlRm9yVGV4dChuKXtyZXR1cm4gbmV3IHRleHRDb21wb25lbnRDbGFzcyhuKX1mdW5jdGlvbiBpc1RleHRDb21wb25lbnQobil7cmV0dXJuIG4gaW5zdGFuY2VvZiB0ZXh0Q29tcG9uZW50Q2xhc3N9dmFyIFJlYWN0SG9zdENvbXBvbmVudD17Y3JlYXRlSW50ZXJuYWxDb21wb25lbnQ6Y3JlYXRlSW50ZXJuYWxDb21wb25lbnQsY3JlYXRlSW5zdGFuY2VGb3JUZXh0OmNyZWF0ZUluc3RhbmNlRm9yVGV4dCxpc1RleHRDb21wb25lbnQ6aXNUZXh0Q29tcG9uZW50LGluamVjdGlvbjpSZWFjdEhvc3RDb21wb25lbnRJbmplY3Rpb259O21vZHVsZS5leHBvcnRzPVJlYWN0SG9zdENvbXBvbmVudDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSmxZV04wU0c5emRFTnZiWEJ2Ym1WdWRDNXFjeUpkTENKdVlXMWxjeUk2V3lKZmNISnZaRWx1ZG1GeWFXRnVkQ0lzSW5KbGNYVnBjbVVpTENKcGJuWmhjbWxoYm5RaUxDSm5aVzVsY21salEyOXRjRzl1Wlc1MFEyeGhjM01pTENKMFpYaDBRMjl0Y0c5dVpXNTBRMnhoYzNNaUxDSlNaV0ZqZEVodmMzUkRiMjF3YjI1bGJuUkpibXBsWTNScGIyNGlMQ0pwYm1wbFkzUkhaVzVsY21salEyOXRjRzl1Wlc1MFEyeGhjM01pTENKamIyMXdiMjVsYm5SRGJHRnpjeUlzSW1sdWFtVmpkRlJsZUhSRGIyMXdiMjVsYm5SRGJHRnpjeUlzSW1OeVpXRjBaVWx1ZEdWeWJtRnNRMjl0Y0c5dVpXNTBJaXdpWld4bGJXVnVkQ0lzSW5CeWIyTmxjM01pTENKbGJuWWlMQ0pPVDBSRlgwVk9WaUlzSW5SNWNHVWlMQ0pqY21WaGRHVkpibk4wWVc1alpVWnZjbFJsZUhRaUxDSjBaWGgwSWl3aWFYTlVaWGgwUTI5dGNHOXVaVzUwSWl3aVkyOXRjRzl1Wlc1MElpd2lVbVZoWTNSSWIzTjBRMjl0Y0c5dVpXNTBJaXdpYVc1cVpXTjBhVzl1SWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCVVVFc1lVRkZRU3hKUVVGSlFTeGxRVUZwUWtNc1VVRkJVU3gzUWtGRmVrSkRMRlZCUVZsRUxGRkJRVkVzYzBKQlJYQkNSU3h6UWtGQmQwSXNTMEZEZUVKRExHMUNRVUZ4UWl4TFFVVnlRa01zTkVKQlFUaENMRU5CUjJoRFF5dzBRa0ZCTmtJc1UwRkJWVU1zUjBGRGNrTktMSE5DUVVGM1Fra3NSMEZKTVVKRExIbENRVUV3UWl4VFFVRlZSQ3hIUVVOc1EwZ3NiVUpCUVhGQ1J5eEpRVlY2UWl4VFFVRlRSU3gzUWtGQmQwSkRMRWRCUlM5Q0xFOUJSRU5RTEhkQ1FVRnBSQ3hsUVVGNlFsRXNVVUZCVVVNc1NVRkJTVU1zVTBGQk5FSllMRmRCUVZVc1JVRkJUeXhyUkVGQmJVUlJMRVZCUVZGSkxFMUJRVkZrTEdWQlFXVXNUVUZCVDFVc1JVRkJVVWtzVDBGRE5Vc3NTVUZCU1Znc2MwSkJRWE5DVHl4SFFVOXVReXhUUVVGVFN5eHpRa0ZCYzBKRExFZEJRemRDTEU5QlFVOHNTVUZCU1Zvc2JVSkJRVzFDV1N4SFFVOW9ReXhUUVVGVFF5eG5Ra0ZCWjBKRExFZEJRM1pDTEU5QlFVOUJMR0ZCUVhGQ1pDeHRRa0ZIT1VJc1NVRkJTV1VzYlVKQlFYRkNMRU5CUTNaQ1ZpeDNRa0ZCZVVKQkxIZENRVU42UWswc2MwSkJRWFZDUVN4elFrRkRka0pGTEdkQ1FVRnBRa0VzWjBKQlEycENSeXhWUVVGWFppdzJRa0ZIWW1kQ0xFOUJRVTlETEZGQlFWVklJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwzSmxZV04wTFdSdmJTOXNhV0l2VW1WaFkzUkliM04wUTI5dGNHOXVaVzUwTG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgaGlzdG9yeT1bXSxSZWFjdEhvc3RPcGVyYXRpb25IaXN0b3J5SG9vaz17b25Ib3N0T3BlcmF0aW9uOmZ1bmN0aW9uKG8pe2hpc3RvcnkucHVzaChvKX0sY2xlYXJIaXN0b3J5OmZ1bmN0aW9uKCl7UmVhY3RIb3N0T3BlcmF0aW9uSGlzdG9yeUhvb2suX3ByZXZlbnRDbGVhcmluZ3x8KGhpc3Rvcnk9W10pfSxnZXRIaXN0b3J5OmZ1bmN0aW9uKCl7cmV0dXJuIGhpc3Rvcnl9fTttb2R1bGUuZXhwb3J0cz1SZWFjdEhvc3RPcGVyYXRpb25IaXN0b3J5SG9vaztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSmxZV04wU0c5emRFOXdaWEpoZEdsdmJraHBjM1J2Y25sSWIyOXJMbXB6SWwwc0ltNWhiV1Z6SWpwYkltaHBjM1J2Y25raUxDSlNaV0ZqZEVodmMzUlBjR1Z5WVhScGIyNUlhWE4wYjNKNVNHOXZheUlzSW05dVNHOXpkRTl3WlhKaGRHbHZiaUlzSW05d1pYSmhkR2x2YmlJc0luQjFjMmdpTENKamJHVmhja2hwYzNSdmNua2lMQ0pmY0hKbGRtVnVkRU5zWldGeWFXNW5JaXdpWjJWMFNHbHpkRzl5ZVNJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVZOQkxHRkJSVUVzU1VGQlNVRXNVVUZCVlN4SFFVVldReXc0UWtGQlowTXNRMEZEYkVORExHZENRVUZwUWl4VFFVRlZReXhIUVVONlFrZ3NVVUZCVVVrc1MwRkJTMFFzU1VGRlprVXNZVUZCWXl4WFFVTlNTaXc0UWtGQk9FSkxMRzFDUVV0c1EwNHNVVUZCVlN4TFFVVmFUeXhYUVVGWkxGZEJRMVlzVDBGQlQxQXNWVUZKV0ZFc1QwRkJUME1zVVVGQlZWSWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F0Wkc5dEwyeHBZaTlTWldGamRFaHZjM1JQY0dWeVlYUnBiMjVJYVhOMGIzSjVTRzl2YXk1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgRE9NUHJvcGVydHk9cmVxdWlyZShcIi4vRE9NUHJvcGVydHlcIiksRXZlbnRQbHVnaW5IdWI9cmVxdWlyZShcIi4vRXZlbnRQbHVnaW5IdWJcIiksRXZlbnRQbHVnaW5VdGlscz1yZXF1aXJlKFwiLi9FdmVudFBsdWdpblV0aWxzXCIpLFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQ9cmVxdWlyZShcIi4vUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudFwiKSxSZWFjdEVtcHR5Q29tcG9uZW50PXJlcXVpcmUoXCIuL1JlYWN0RW1wdHlDb21wb25lbnRcIiksUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyPXJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlclwiKSxSZWFjdEhvc3RDb21wb25lbnQ9cmVxdWlyZShcIi4vUmVhY3RIb3N0Q29tcG9uZW50XCIpLFJlYWN0VXBkYXRlcz1yZXF1aXJlKFwiLi9SZWFjdFVwZGF0ZXNcIiksUmVhY3RJbmplY3Rpb249e0NvbXBvbmVudDpSZWFjdENvbXBvbmVudEVudmlyb25tZW50LmluamVjdGlvbixET01Qcm9wZXJ0eTpET01Qcm9wZXJ0eS5pbmplY3Rpb24sRW1wdHlDb21wb25lbnQ6UmVhY3RFbXB0eUNvbXBvbmVudC5pbmplY3Rpb24sRXZlbnRQbHVnaW5IdWI6RXZlbnRQbHVnaW5IdWIuaW5qZWN0aW9uLEV2ZW50UGx1Z2luVXRpbHM6RXZlbnRQbHVnaW5VdGlscy5pbmplY3Rpb24sRXZlbnRFbWl0dGVyOlJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5pbmplY3Rpb24sSG9zdENvbXBvbmVudDpSZWFjdEhvc3RDb21wb25lbnQuaW5qZWN0aW9uLFVwZGF0ZXM6UmVhY3RVcGRhdGVzLmluamVjdGlvbn07bW9kdWxlLmV4cG9ydHM9UmVhY3RJbmplY3Rpb247XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbEpsWVdOMFNXNXFaV04wYVc5dUxtcHpJbDBzSW01aGJXVnpJanBiSWtSUFRWQnliM0JsY25SNUlpd2ljbVZ4ZFdseVpTSXNJa1YyWlc1MFVHeDFaMmx1U0hWaUlpd2lSWFpsYm5SUWJIVm5hVzVWZEdsc2N5SXNJbEpsWVdOMFEyOXRjRzl1Wlc1MFJXNTJhWEp2Ym0xbGJuUWlMQ0pTWldGamRFVnRjSFI1UTI5dGNHOXVaVzUwSWl3aVVtVmhZM1JDY205M2MyVnlSWFpsYm5SRmJXbDBkR1Z5SWl3aVVtVmhZM1JJYjNOMFEyOXRjRzl1Wlc1MElpd2lVbVZoWTNSVmNHUmhkR1Z6SWl3aVVtVmhZM1JKYm1wbFkzUnBiMjRpTENKRGIyMXdiMjVsYm5RaUxDSnBibXBsWTNScGIyNGlMQ0pGYlhCMGVVTnZiWEJ2Ym1WdWRDSXNJa1YyWlc1MFJXMXBkSFJsY2lJc0lraHZjM1JEYjIxd2IyNWxiblFpTENKVmNHUmhkR1Z6SWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCVVVFc1lVRkZRU3hKUVVGSlFTeFpRVUZqUXl4UlFVRlJMR2xDUVVOMFFrTXNaVUZCYVVKRUxGRkJRVkVzYjBKQlEzcENSU3hwUWtGQmJVSkdMRkZCUVZFc2MwSkJRek5DUnl3d1FrRkJORUpJTEZGQlFWRXNLMEpCUTNCRFNTeHZRa0ZCYzBKS0xGRkJRVkVzZVVKQlF6bENTeXg1UWtGQk1rSk1MRkZCUVZFc09FSkJRMjVEVFN4dFFrRkJjVUpPTEZGQlFWRXNkMEpCUXpkQ1R5eGhRVUZsVUN4UlFVRlJMR3RDUVVWMlFsRXNaVUZCYVVJc1EwRkRia0pETEZWQlFWZE9MREJDUVVFd1FrOHNWVUZEY2tOWUxGbEJRV0ZCTEZsQlFWbFhMRlZCUTNwQ1F5eGxRVUZuUWxBc2IwSkJRVzlDVFN4VlFVTndRMVFzWlVGQlowSkJMR1ZCUVdWVExGVkJReTlDVWl4cFFrRkJhMEpCTEdsQ1FVRnBRbEVzVlVGRGJrTkZMR0ZCUVdOUUxIbENRVUY1UWtzc1ZVRkRka05ITEdOQlFXVlFMRzFDUVVGdFFra3NWVUZEYkVOSkxGRkJRVk5RTEdGQlFXRkhMRmRCUjNoQ1N5eFBRVUZQUXl4UlFVRlZVaUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEMxa2IyMHZiR2xpTDFKbFlXTjBTVzVxWldOMGFXOXVMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBSZWFjdERPTVNlbGVjdGlvbj1yZXF1aXJlKFwiLi9SZWFjdERPTVNlbGVjdGlvblwiKSxjb250YWluc05vZGU9cmVxdWlyZShcImZianMvbGliL2NvbnRhaW5zTm9kZVwiKSxmb2N1c05vZGU9cmVxdWlyZShcImZianMvbGliL2ZvY3VzTm9kZVwiKSxnZXRBY3RpdmVFbGVtZW50PXJlcXVpcmUoXCJmYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50XCIpO2Z1bmN0aW9uIGlzSW5Eb2N1bWVudChlKXtyZXR1cm4gY29udGFpbnNOb2RlKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxlKX12YXIgUmVhY3RJbnB1dFNlbGVjdGlvbj17aGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzOmZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gdCYmKFwiaW5wdXRcIj09PXQmJlwidGV4dFwiPT09ZS50eXBlfHxcInRleHRhcmVhXCI9PT10fHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKX0sZ2V0U2VsZWN0aW9uSW5mb3JtYXRpb246ZnVuY3Rpb24oKXt2YXIgZT1nZXRBY3RpdmVFbGVtZW50KCk7cmV0dXJue2ZvY3VzZWRFbGVtOmUsc2VsZWN0aW9uUmFuZ2U6UmVhY3RJbnB1dFNlbGVjdGlvbi5oYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMoZSk/UmVhY3RJbnB1dFNlbGVjdGlvbi5nZXRTZWxlY3Rpb24oZSk6bnVsbH19LHJlc3RvcmVTZWxlY3Rpb246ZnVuY3Rpb24oZSl7dmFyIHQ9Z2V0QWN0aXZlRWxlbWVudCgpLG49ZS5mb2N1c2VkRWxlbSxvPWUuc2VsZWN0aW9uUmFuZ2U7dCE9PW4mJmlzSW5Eb2N1bWVudChuKSYmKFJlYWN0SW5wdXRTZWxlY3Rpb24uaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzKG4pJiZSZWFjdElucHV0U2VsZWN0aW9uLnNldFNlbGVjdGlvbihuLG8pLGZvY3VzTm9kZShuKSl9LGdldFNlbGVjdGlvbjpmdW5jdGlvbihlKXt2YXIgdDtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBlKXQ9e3N0YXJ0OmUuc2VsZWN0aW9uU3RhcnQsZW5kOmUuc2VsZWN0aW9uRW5kfTtlbHNlIGlmKGRvY3VtZW50LnNlbGVjdGlvbiYmZS5ub2RlTmFtZSYmXCJpbnB1dFwiPT09ZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKXt2YXIgbj1kb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTtuLnBhcmVudEVsZW1lbnQoKT09PWUmJih0PXtzdGFydDotbi5tb3ZlU3RhcnQoXCJjaGFyYWN0ZXJcIiwtZS52YWx1ZS5sZW5ndGgpLGVuZDotbi5tb3ZlRW5kKFwiY2hhcmFjdGVyXCIsLWUudmFsdWUubGVuZ3RoKX0pfWVsc2UgdD1SZWFjdERPTVNlbGVjdGlvbi5nZXRPZmZzZXRzKGUpO3JldHVybiB0fHx7c3RhcnQ6MCxlbmQ6MH19LHNldFNlbGVjdGlvbjpmdW5jdGlvbihlLHQpe3ZhciBuPXQuc3RhcnQsbz10LmVuZDtpZih2b2lkIDA9PT1vJiYobz1uKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBlKWUuc2VsZWN0aW9uU3RhcnQ9bixlLnNlbGVjdGlvbkVuZD1NYXRoLm1pbihvLGUudmFsdWUubGVuZ3RoKTtlbHNlIGlmKGRvY3VtZW50LnNlbGVjdGlvbiYmZS5ub2RlTmFtZSYmXCJpbnB1dFwiPT09ZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKXt2YXIgYz1lLmNyZWF0ZVRleHRSYW5nZSgpO2MuY29sbGFwc2UoITApLGMubW92ZVN0YXJ0KFwiY2hhcmFjdGVyXCIsbiksYy5tb3ZlRW5kKFwiY2hhcmFjdGVyXCIsby1uKSxjLnNlbGVjdCgpfWVsc2UgUmVhY3RET01TZWxlY3Rpb24uc2V0T2Zmc2V0cyhlLHQpfX07bW9kdWxlLmV4cG9ydHM9UmVhY3RJbnB1dFNlbGVjdGlvbjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSmxZV04wU1c1d2RYUlRaV3hsWTNScGIyNHVhbk1pWFN3aWJtRnRaWE1pT2xzaVVtVmhZM1JFVDAxVFpXeGxZM1JwYjI0aUxDSnlaWEYxYVhKbElpd2lZMjl1ZEdGcGJuTk9iMlJsSWl3aVptOWpkWE5PYjJSbElpd2laMlYwUVdOMGFYWmxSV3hsYldWdWRDSXNJbWx6U1c1RWIyTjFiV1Z1ZENJc0ltNXZaR1VpTENKa2IyTjFiV1Z1ZENJc0ltUnZZM1Z0Wlc1MFJXeGxiV1Z1ZENJc0lsSmxZV04wU1c1d2RYUlRaV3hsWTNScGIyNGlMQ0pvWVhOVFpXeGxZM1JwYjI1RFlYQmhZbWxzYVhScFpYTWlMQ0psYkdWdElpd2libTlrWlU1aGJXVWlMQ0owYjB4dmQyVnlRMkZ6WlNJc0luUjVjR1VpTENKamIyNTBaVzUwUldScGRHRmliR1VpTENKblpYUlRaV3hsWTNScGIyNUpibVp2Y20xaGRHbHZiaUlzSW1adlkzVnpaV1JGYkdWdElpd2ljMlZzWldOMGFXOXVVbUZ1WjJVaUxDSm5aWFJUWld4bFkzUnBiMjRpTENKeVpYTjBiM0psVTJWc1pXTjBhVzl1SWl3aWNISnBiM0pUWld4bFkzUnBiMjVKYm1admNtMWhkR2x2YmlJc0ltTjFja1p2WTNWelpXUkZiR1Z0SWl3aWNISnBiM0pHYjJOMWMyVmtSV3hsYlNJc0luQnlhVzl5VTJWc1pXTjBhVzl1VW1GdVoyVWlMQ0p6WlhSVFpXeGxZM1JwYjI0aUxDSnBibkIxZENJc0luTmxiR1ZqZEdsdmJpSXNJbk4wWVhKMElpd2ljMlZzWldOMGFXOXVVM1JoY25RaUxDSmxibVFpTENKelpXeGxZM1JwYjI1RmJtUWlMQ0p5WVc1blpTSXNJbU55WldGMFpWSmhibWRsSWl3aWNHRnlaVzUwUld4bGJXVnVkQ0lzSW0xdmRtVlRkR0Z5ZENJc0luWmhiSFZsSWl3aWJHVnVaM1JvSWl3aWJXOTJaVVZ1WkNJc0ltZGxkRTltWm5ObGRITWlMQ0p2Wm1aelpYUnpJaXdpZFc1a1pXWnBibVZrSWl3aVRXRjBhQ0lzSW0xcGJpSXNJbU55WldGMFpWUmxlSFJTWVc1blpTSXNJbU52Ykd4aGNITmxJaXdpYzJWc1pXTjBJaXdpYzJWMFQyWm1jMlYwY3lJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVZGQkxHRkJSVUVzU1VGQlNVRXNhMEpCUVc5Q1F5eFJRVUZSTEhWQ1FVVTFRa01zWVVGQlpVUXNVVUZCVVN4NVFrRkRka0pGTEZWQlFWbEdMRkZCUVZFc2MwSkJRM0JDUnl4cFFrRkJiVUpJTEZGQlFWRXNOa0pCUlM5Q0xGTkJRVk5KTEdGQlFXRkRMRWRCUTNCQ0xFOUJRVTlLTEdGQlFXRkxMRk5CUVZORExHZENRVUZwUWtZc1IwRlRhRVFzU1VGQlNVY3NiMEpCUVhOQ0xFTkJRM2hDUXl4NVFrRkJNRUlzVTBGQlZVTXNSMEZEYkVNc1NVRkJTVU1zUlVGQlYwUXNSMEZCVVVFc1JVRkJTME1zVlVGQldVUXNSVUZCUzBNc1UwRkJVME1zWTBGRGRFUXNUMEZCVDBRc1NVRkJNRUlzVlVGQllrRXNSMEZCYzBNc1UwRkJaRVFzUlVGQlMwY3NUVUZCWjBNc1lVRkJZa1lzUjBGQmIwUXNVMEZCZWtKRUxFVkJRVXRKTEd0Q1FVZDBSME1zZDBKQlFYbENMRmRCUTNaQ0xFbEJRVWxETEVWQlFXTmlMRzFDUVVOc1FpeE5RVUZQTEVOQlEweGhMRmxCUVdGQkxFVkJRMkpETEdWQlFXZENWQ3h2UWtGQmIwSkRMSGxDUVVGNVFrOHNSMEZCWlZJc2IwSkJRVzlDVlN4aFFVRmhSaXhIUVVGbExFOUJVMmhKUnl4cFFrRkJhMElzVTBGQlZVTXNSMEZETVVJc1NVRkJTVU1zUlVGQmFVSnNRaXh0UWtGRGFrSnRRaXhGUVVGdFFrWXNSVUZCTUVKS0xGbEJRemREVHl4RlFVRnpRa2dzUlVGQk1FSklMR1ZCUTJoRVNTeEpRVUZ0UWtNc1IwRkJiMEpzUWl4aFFVRmhhMElzUzBGRGJFUmtMRzlDUVVGdlFrTXNlVUpCUVhsQ1lTeEpRVU12UTJRc2IwSkJRVzlDWjBJc1lVRkJZVVlzUlVGQmEwSkRMRWRCUlhKRWNrSXNWVUZCVlc5Q0xFdEJWV1JLTEdGQlFXTXNVMEZCVlU4c1IwRkRkRUlzU1VGQlNVTXNSVUZGU2l4SFFVRkpMRzFDUVVGdlFrUXNSVUZGZEVKRExFVkJRVmtzUTBGRFZrTXNUVUZCVDBZc1JVRkJUVWNzWlVGRFlrTXNTVUZCUzBvc1JVRkJUVXNzYlVKQlJWSXNSMEZCU1hoQ0xGTkJRVk52UWl4WFFVRmhSQ3hGUVVGTlpDeFZRVUUyUXl4VlFVRnFRMk1zUlVGQlRXUXNVMEZCVTBNc1kwRkJNa0lzUTBGRk0wWXNTVUZCU1cxQ0xFVkJRVkY2UWl4VFFVRlRiMElzVlVGQlZVMHNZMEZITTBKRUxFVkJRVTFGTEd0Q1FVRnZRbElzU1VGRE5VSkRMRVZCUVZrc1EwRkRWa01zVDBGQlVVa3NSVUZCVFVjc1ZVRkJWU3hoUVVGalZDeEZRVUZOVlN4TlFVRk5ReXhSUVVOc1JGQXNTMEZCVFVVc1JVRkJUVTBzVVVGQlVTeGhRVUZqV2l4RlFVRk5WU3hOUVVGTlF5eGxRVXRzUkZZc1JVRkJXVE5DTEd0Q1FVRnJRblZETEZkQlFWZGlMRWRCUnpORExFOUJRVTlETEVkQlFXRXNRMEZCUlVNc1RVRkJUeXhGUVVGSFJTeEpRVUZMTEVsQlUzWkRUQ3hoUVVGakxGTkJRVlZETEVWQlFVOWpMRWRCUXpkQ0xFbEJRVWxhTEVWQlFWRlpMRVZCUVZGYUxFMUJRMmhDUlN4RlFVRk5WU3hGUVVGUlZpeEpRVXRzUWl4UlFVcFpWeXhKUVVGU1dDeEpRVU5HUVN4RlFVRk5SaXhIUVVkS0xHMUNRVUZ2UWtZc1JVRkRkRUpCTEVWQlFVMUhMR1ZCUVdsQ1JDeEZRVU4yUWtZc1JVRkJUVXNzWVVGQlpWY3NTMEZCUzBNc1NVRkJTV0lzUlVGQlMwb3NSVUZCVFZVc1RVRkJUVU1zWVVGRE1VTXNSMEZCU1RsQ0xGTkJRVk52UWl4WFFVRmhSQ3hGUVVGTlpDeFZRVUUyUXl4VlFVRnFRMk1zUlVGQlRXUXNVMEZCVTBNc1kwRkJNa0lzUTBGRE0wWXNTVUZCU1cxQ0xFVkJRVkZPTEVWQlFVMXJRaXhyUWtGRGJFSmFMRVZCUVUxaExGVkJRVk1zUjBGRFptSXNSVUZCVFVjc1ZVRkJWU3haUVVGaFVDeEhRVU0zUWtrc1JVRkJUVTBzVVVGQlVTeFpRVUZoVWl4RlFVRk5SaXhIUVVOcVEwa3NSVUZCVFdNc1kwRkZUamxETEd0Q1FVRnJRaXRETEZkQlFWZHlRaXhGUVVGUFl5eExRVXN4UTFFc1QwRkJUME1zVVVGQlZYaERJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwzSmxZV04wTFdSdmJTOXNhV0l2VW1WaFkzUkpibkIxZEZObGJHVmpkR2x2Ymk1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgUmVhY3RJbnN0YW5jZU1hcD17cmVtb3ZlOmZ1bmN0aW9uKG4pe24uX3JlYWN0SW50ZXJuYWxJbnN0YW5jZT12b2lkIDB9LGdldDpmdW5jdGlvbihuKXtyZXR1cm4gbi5fcmVhY3RJbnRlcm5hbEluc3RhbmNlfSxoYXM6ZnVuY3Rpb24obil7cmV0dXJuIHZvaWQgMCE9PW4uX3JlYWN0SW50ZXJuYWxJbnN0YW5jZX0sc2V0OmZ1bmN0aW9uKG4sdCl7bi5fcmVhY3RJbnRlcm5hbEluc3RhbmNlPXR9fTttb2R1bGUuZXhwb3J0cz1SZWFjdEluc3RhbmNlTWFwO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxKbFlXTjBTVzV6ZEdGdVkyVk5ZWEF1YW5NaVhTd2libUZ0WlhNaU9sc2lVbVZoWTNSSmJuTjBZVzVqWlUxaGNDSXNJbkpsYlc5MlpTSXNJbXRsZVNJc0lsOXlaV0ZqZEVsdWRHVnlibUZzU1c1emRHRnVZMlVpTENKMWJtUmxabWx1WldRaUxDSm5aWFFpTENKb1lYTWlMQ0p6WlhRaUxDSjJZV3gxWlNJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVZGQkxHRkJWMEVzU1VGQlNVRXNhVUpCUVcxQ0xFTkJUWEpDUXl4UFFVRlJMRk5CUVZWRExFZEJRMmhDUVN4RlFVRkpReXcwUWtGQmVVSkRMRWRCUnk5Q1F5eEpRVUZMTEZOQlFWVklMRWRCUTJJc1QwRkJUMEVzUlVGQlNVTXNkMEpCUjJKSExFbEJRVXNzVTBGQlZVb3NSMEZEWWl4WlFVRnpRMFVzU1VGQkwwSkdMRVZCUVVsRExIZENRVWRpU1N4SlFVRkxMRk5CUVZWTUxFVkJRVXROTEVkQlEyeENUaXhGUVVGSlF5eDFRa0ZCZVVKTExFbEJTV3BEUXl4UFFVRlBReXhSUVVGVlZpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzFrYjIwdmJHbGlMMUpsWVdOMFNXNXpkR0Z1WTJWTllYQXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciBkZWJ1Z1Rvb2w9bnVsbDtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXt2YXIgUmVhY3REZWJ1Z1Rvb2w9cmVxdWlyZShcIi4vUmVhY3REZWJ1Z1Rvb2xcIik7ZGVidWdUb29sPVJlYWN0RGVidWdUb29sfW1vZHVsZS5leHBvcnRzPXtkZWJ1Z1Rvb2w6ZGVidWdUb29sfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSmxZV04wU1c1emRISjFiV1Z1ZEdGMGFXOXVMbXB6SWwwc0ltNWhiV1Z6SWpwYkltUmxZblZuVkc5dmJDSXNJbkJ5YjJObGMzTWlMQ0psYm5ZaUxDSk9UMFJGWDBWT1ZpSXNJbEpsWVdOMFJHVmlkV2RVYjI5c0lpd2ljbVZ4ZFdseVpTSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlYU3dpYldGd2NHbHVaM01pT2lKQlFWTkJMR0ZCU1VFc1NVRkJTVUVzVlVGQldTeExRVVZvUWl4SFFVRTJRaXhsUVVGNlFrTXNVVUZCVVVNc1NVRkJTVU1zVTBGQk1rSXNRMEZEZWtNc1NVRkJTVU1zWlVGQmFVSkRMRkZCUVZFc2IwSkJRemRDVEN4VlFVRlpTU3hsUVVka1JTeFBRVUZQUXl4UlFVRlZMRU5CUVVWUUxGVkJRVmRCSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdOMExXUnZiUzlzYVdJdlVtVmhZM1JKYm5OMGNuVnRaVzUwWVhScGIyNHVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciB3YXJuaW5nPXJlcXVpcmUoXCJmYmpzL2xpYi93YXJuaW5nXCIpO2lmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYpdmFyIHByb2Nlc3NpbmdDaGlsZENvbnRleHQ9ITEsd2FybkludmFsaWRTZXRTdGF0ZT1mdW5jdGlvbigpe1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcoIXByb2Nlc3NpbmdDaGlsZENvbnRleHQsXCJzZXRTdGF0ZSguLi4pOiBDYW5ub3QgY2FsbCBzZXRTdGF0ZSgpIGluc2lkZSBnZXRDaGlsZENvbnRleHQoKVwiKX07dmFyIFJlYWN0SW52YWxpZFNldFN0YXRlV2FybmluZ0hvb2s9e29uQmVnaW5Qcm9jZXNzaW5nQ2hpbGRDb250ZXh0OmZ1bmN0aW9uKCl7cHJvY2Vzc2luZ0NoaWxkQ29udGV4dD0hMH0sb25FbmRQcm9jZXNzaW5nQ2hpbGRDb250ZXh0OmZ1bmN0aW9uKCl7cHJvY2Vzc2luZ0NoaWxkQ29udGV4dD0hMX0sb25TZXRTdGF0ZTpmdW5jdGlvbigpe3dhcm5JbnZhbGlkU2V0U3RhdGUoKX19O21vZHVsZS5leHBvcnRzPVJlYWN0SW52YWxpZFNldFN0YXRlV2FybmluZ0hvb2s7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbEpsWVdOMFNXNTJZV3hwWkZObGRGTjBZWFJsVjJGeWJtbHVaMGh2YjJzdWFuTWlYU3dpYm1GdFpYTWlPbHNpZDJGeWJtbHVaeUlzSW5KbGNYVnBjbVVpTENKd2NtOWpaWE56SWl3aVpXNTJJaXdpVGs5RVJWOUZUbFlpTENKd2NtOWpaWE56YVc1blEyaHBiR1JEYjI1MFpYaDBJaXdpZDJGeWJrbHVkbUZzYVdSVFpYUlRkR0YwWlNJc0lsSmxZV04wU1c1MllXeHBaRk5sZEZOMFlYUmxWMkZ5Ym1sdVowaHZiMnNpTENKdmJrSmxaMmx1VUhKdlkyVnpjMmx1WjBOb2FXeGtRMjl1ZEdWNGRDSXNJbTl1Ulc1a1VISnZZMlZ6YzJsdVowTm9hV3hrUTI5dWRHVjRkQ0lzSW05dVUyVjBVM1JoZEdVaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25SeklsMHNJbTFoY0hCcGJtZHpJam9pUVVGVFFTeGhRVVZCTEVsQlFVbEJMRkZCUVZWRExGRkJRVkVzYjBKQlJYUkNMRWRCUVRaQ0xHVkJRWHBDUXl4UlFVRlJReXhKUVVGSlF5eFRRVU5rTEVsQlFVbERMSGRDUVVGNVFpeEZRVVY2UWtNc2IwSkJRWE5DTEZkQlEwTXNaVUZCZWtKS0xGRkJRVkZETEVsQlFVbERMRlZCUVRSQ1NpeFRRVUZUU3l4MVFrRkJkMElzYlVWQlNUZEZMRWxCUVVsRkxHZERRVUZyUXl4RFFVTndRME1zT0VKQlFTdENMRmRCUXpkQ1NDeDNRa0ZCZVVJc1IwRkZNMEpKTERSQ1FVRTJRaXhYUVVNelFrb3NkMEpCUVhsQ0xFZEJSVE5DU3l4WFFVRlpMRmRCUTFaS0xIZENRVWxLU3l4UFFVRlBReXhSUVVGVlRDSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzFrYjIwdmJHbGlMMUpsWVdOMFNXNTJZV3hwWkZObGRGTjBZWFJsVjJGeWJtbHVaMGh2YjJzdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIGFkbGVyMzI9cmVxdWlyZShcIi4vYWRsZXIzMlwiKSxUQUdfRU5EPS9cXC8/Pi8sQ09NTUVOVF9TVEFSVD0vXjxcXCFcXC1cXC0vLFJlYWN0TWFya3VwQ2hlY2tzdW09e0NIRUNLU1VNX0FUVFJfTkFNRTpcImRhdGEtcmVhY3QtY2hlY2tzdW1cIixhZGRDaGVja3N1bVRvTWFya3VwOmZ1bmN0aW9uKGUpe3ZhciByPWFkbGVyMzIoZSk7cmV0dXJuIENPTU1FTlRfU1RBUlQudGVzdChlKT9lOmUucmVwbGFjZShUQUdfRU5ELFwiIFwiK1JlYWN0TWFya3VwQ2hlY2tzdW0uQ0hFQ0tTVU1fQVRUUl9OQU1FKyc9XCInK3IrJ1wiJCYnKX0sY2FuUmV1c2VNYXJrdXA6ZnVuY3Rpb24oZSxyKXt2YXIgYT1yLmdldEF0dHJpYnV0ZShSZWFjdE1hcmt1cENoZWNrc3VtLkNIRUNLU1VNX0FUVFJfTkFNRSk7cmV0dXJuIGE9YSYmcGFyc2VJbnQoYSwxMCksYWRsZXIzMihlKT09PWF9fTttb2R1bGUuZXhwb3J0cz1SZWFjdE1hcmt1cENoZWNrc3VtO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxKbFlXTjBUV0Z5YTNWd1EyaGxZMnR6ZFcwdWFuTWlYU3dpYm1GdFpYTWlPbHNpWVdSc1pYSXpNaUlzSW5KbGNYVnBjbVVpTENKVVFVZGZSVTVFSWl3aVEwOU5UVVZPVkY5VFZFRlNWQ0lzSWxKbFlXTjBUV0Z5YTNWd1EyaGxZMnR6ZFcwaUxDSkRTRVZEUzFOVlRWOUJWRlJTWDA1QlRVVWlMQ0poWkdSRGFHVmphM04xYlZSdlRXRnlhM1Z3SWl3aWJXRnlhM1Z3SWl3aVkyaGxZMnR6ZFcwaUxDSjBaWE4wSWl3aWNtVndiR0ZqWlNJc0ltTmhibEpsZFhObFRXRnlhM1Z3SWl3aVpXeGxiV1Z1ZENJc0ltVjRhWE4wYVc1blEyaGxZMnR6ZFcwaUxDSm5aWFJCZEhSeWFXSjFkR1VpTENKd1lYSnpaVWx1ZENJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVZGQkxHRkJSVUVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hoUVVWc1FrTXNVVUZCVlN4UFFVTldReXhqUVVGblFpeFhRVVZvUWtNc2IwSkJRWE5DTEVOQlEzaENReXh0UWtGQmIwSXNjMEpCVFhCQ1F5eHZRa0ZCY1VJc1UwRkJWVU1zUjBGRE4wSXNTVUZCU1VNc1JVRkJWMUlzVVVGQlVVOHNSMEZIZGtJc1QwRkJTVW9zWTBGQlkwMHNTMEZCUzBZc1IwRkRaRUVzUlVGRlFVRXNSVUZCVDBjc1VVRkJVVklzVVVGQlV5eEpRVUZOUlN4dlFrRkJiMEpETEcxQ1FVRnhRaXhMUVVGUFJ5eEZRVUZYTEZGQlUzQkhSeXhsUVVGblFpeFRRVUZWU2l4RlFVRlJTeXhIUVVOb1F5eEpRVUZKUXl4RlFVRnRRa1FzUlVGQlVVVXNZVUZCWVZZc2IwSkJRVzlDUXl4dlFrRkhhRVVzVDBGR1FWRXNSVUZCYlVKQkxFZEJRVzlDUlN4VFFVRlRSaXhGUVVGclFpeEpRVU0zUTJJc1VVRkJVVThzUzBGRFNFMHNTVUZKT1VKSExFOUJRVTlETEZGQlFWVmlJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwzSmxZV04wTFdSdmJTOXNhV0l2VW1WaFkzUk5ZWEpyZFhCRGFHVmphM04xYlM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgX3Byb2RJbnZhcmlhbnQ9cmVxdWlyZShcIi4vcmVhY3RQcm9kSW52YXJpYW50XCIpLERPTUxhenlUcmVlPXJlcXVpcmUoXCIuL0RPTUxhenlUcmVlXCIpLERPTVByb3BlcnR5PXJlcXVpcmUoXCIuL0RPTVByb3BlcnR5XCIpLFJlYWN0PXJlcXVpcmUoXCJyZWFjdC9saWIvUmVhY3RcIiksUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyPXJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlclwiKSxSZWFjdEN1cnJlbnRPd25lcj1yZXF1aXJlKFwicmVhY3QvbGliL1JlYWN0Q3VycmVudE93bmVyXCIpLFJlYWN0RE9NQ29tcG9uZW50VHJlZT1yZXF1aXJlKFwiLi9SZWFjdERPTUNvbXBvbmVudFRyZWVcIiksUmVhY3RET01Db250YWluZXJJbmZvPXJlcXVpcmUoXCIuL1JlYWN0RE9NQ29udGFpbmVySW5mb1wiKSxSZWFjdERPTUZlYXR1cmVGbGFncz1yZXF1aXJlKFwiLi9SZWFjdERPTUZlYXR1cmVGbGFnc1wiKSxSZWFjdEZlYXR1cmVGbGFncz1yZXF1aXJlKFwiLi9SZWFjdEZlYXR1cmVGbGFnc1wiKSxSZWFjdEluc3RhbmNlTWFwPXJlcXVpcmUoXCIuL1JlYWN0SW5zdGFuY2VNYXBcIiksUmVhY3RJbnN0cnVtZW50YXRpb249cmVxdWlyZShcIi4vUmVhY3RJbnN0cnVtZW50YXRpb25cIiksUmVhY3RNYXJrdXBDaGVja3N1bT1yZXF1aXJlKFwiLi9SZWFjdE1hcmt1cENoZWNrc3VtXCIpLFJlYWN0UmVjb25jaWxlcj1yZXF1aXJlKFwiLi9SZWFjdFJlY29uY2lsZXJcIiksUmVhY3RVcGRhdGVRdWV1ZT1yZXF1aXJlKFwiLi9SZWFjdFVwZGF0ZVF1ZXVlXCIpLFJlYWN0VXBkYXRlcz1yZXF1aXJlKFwiLi9SZWFjdFVwZGF0ZXNcIiksZW1wdHlPYmplY3Q9cmVxdWlyZShcImZianMvbGliL2VtcHR5T2JqZWN0XCIpLGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQ9cmVxdWlyZShcIi4vaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudFwiKSxpbnZhcmlhbnQ9cmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKSxzZXRJbm5lckhUTUw9cmVxdWlyZShcIi4vc2V0SW5uZXJIVE1MXCIpLHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50PXJlcXVpcmUoXCIuL3Nob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50XCIpLHdhcm5pbmc9cmVxdWlyZShcImZianMvbGliL3dhcm5pbmdcIiksQVRUUl9OQU1FPURPTVByb3BlcnR5LklEX0FUVFJJQlVURV9OQU1FLFJPT1RfQVRUUl9OQU1FPURPTVByb3BlcnR5LlJPT1RfQVRUUklCVVRFX05BTUUsRUxFTUVOVF9OT0RFX1RZUEU9MSxET0NfTk9ERV9UWVBFPTksRE9DVU1FTlRfRlJBR01FTlRfTk9ERV9UWVBFPTExLGluc3RhbmNlc0J5UmVhY3RSb290SUQ9e307ZnVuY3Rpb24gZmlyc3REaWZmZXJlbmNlSW5kZXgoZSxuKXtmb3IodmFyIHQ9TWF0aC5taW4oZS5sZW5ndGgsbi5sZW5ndGgpLHI9MDtyPHQ7cisrKWlmKGUuY2hhckF0KHIpIT09bi5jaGFyQXQocikpcmV0dXJuIHI7cmV0dXJuIGUubGVuZ3RoPT09bi5sZW5ndGg/LTE6dH1mdW5jdGlvbiBnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIoZSl7cmV0dXJuIGU/ZS5ub2RlVHlwZT09PURPQ19OT0RFX1RZUEU/ZS5kb2N1bWVudEVsZW1lbnQ6ZS5maXJzdENoaWxkOm51bGx9ZnVuY3Rpb24gaW50ZXJuYWxHZXRJRChlKXtyZXR1cm4gZS5nZXRBdHRyaWJ1dGUmJmUuZ2V0QXR0cmlidXRlKEFUVFJfTkFNRSl8fFwiXCJ9ZnVuY3Rpb24gbW91bnRDb21wb25lbnRJbnRvTm9kZShlLG4sdCxyLG8pe3ZhciBhO2lmKFJlYWN0RmVhdHVyZUZsYWdzLmxvZ1RvcExldmVsUmVuZGVycyl7dmFyIGk9ZS5fY3VycmVudEVsZW1lbnQucHJvcHMuY2hpbGQudHlwZTthPVwiUmVhY3QgbW91bnQ6IFwiKyhcInN0cmluZ1wiPT10eXBlb2YgaT9pOmkuZGlzcGxheU5hbWV8fGkubmFtZSksY29uc29sZS50aW1lKGEpfXZhciBjPVJlYWN0UmVjb25jaWxlci5tb3VudENvbXBvbmVudChlLHQsbnVsbCxSZWFjdERPTUNvbnRhaW5lckluZm8oZSxuKSxvLDApO2EmJmNvbnNvbGUudGltZUVuZChhKSxlLl9yZW5kZXJlZENvbXBvbmVudC5fdG9wTGV2ZWxXcmFwcGVyPWUsUmVhY3RNb3VudC5fbW91bnRJbWFnZUludG9Ob2RlKGMsbixlLHIsdCl9ZnVuY3Rpb24gYmF0Y2hlZE1vdW50Q29tcG9uZW50SW50b05vZGUoZSxuLHQscil7dmFyIG89UmVhY3RVcGRhdGVzLlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24uZ2V0UG9vbGVkKCF0JiZSZWFjdERPTUZlYXR1cmVGbGFncy51c2VDcmVhdGVFbGVtZW50KTtvLnBlcmZvcm0obW91bnRDb21wb25lbnRJbnRvTm9kZSxudWxsLGUsbixvLHQsciksUmVhY3RVcGRhdGVzLlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24ucmVsZWFzZShvKX1mdW5jdGlvbiB1bm1vdW50Q29tcG9uZW50RnJvbU5vZGUoZSxuLHQpe2ZvcihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25CZWdpbkZsdXNoKCksUmVhY3RSZWNvbmNpbGVyLnVubW91bnRDb21wb25lbnQoZSx0KSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25FbmRGbHVzaCgpLG4ubm9kZVR5cGU9PT1ET0NfTk9ERV9UWVBFJiYobj1uLmRvY3VtZW50RWxlbWVudCk7bi5sYXN0Q2hpbGQ7KW4ucmVtb3ZlQ2hpbGQobi5sYXN0Q2hpbGQpfWZ1bmN0aW9uIGhhc05vblJvb3RSZWFjdENoaWxkKGUpe3ZhciBuPWdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihlKTtpZihuKXt2YXIgdD1SZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0SW5zdGFuY2VGcm9tTm9kZShuKTtyZXR1cm4hKCF0fHwhdC5faG9zdFBhcmVudCl9fWZ1bmN0aW9uIG5vZGVJc1JlbmRlcmVkQnlPdGhlckluc3RhbmNlKGUpe3ZhciBuPWdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihlKTtyZXR1cm4hKCFufHwhaXNSZWFjdE5vZGUobil8fFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXRJbnN0YW5jZUZyb21Ob2RlKG4pKX1mdW5jdGlvbiBpc1ZhbGlkQ29udGFpbmVyKGUpe3JldHVybiEoIWV8fGUubm9kZVR5cGUhPT1FTEVNRU5UX05PREVfVFlQRSYmZS5ub2RlVHlwZSE9PURPQ19OT0RFX1RZUEUmJmUubm9kZVR5cGUhPT1ET0NVTUVOVF9GUkFHTUVOVF9OT0RFX1RZUEUpfWZ1bmN0aW9uIGlzUmVhY3ROb2RlKGUpe3JldHVybiBpc1ZhbGlkQ29udGFpbmVyKGUpJiYoZS5oYXNBdHRyaWJ1dGUoUk9PVF9BVFRSX05BTUUpfHxlLmhhc0F0dHJpYnV0ZShBVFRSX05BTUUpKX1mdW5jdGlvbiBnZXRIb3N0Um9vdEluc3RhbmNlSW5Db250YWluZXIoZSl7dmFyIG49Z2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGUpLHQ9biYmUmVhY3RET01Db21wb25lbnRUcmVlLmdldEluc3RhbmNlRnJvbU5vZGUobik7cmV0dXJuIHQmJiF0Ll9ob3N0UGFyZW50P3Q6bnVsbH1mdW5jdGlvbiBnZXRUb3BMZXZlbFdyYXBwZXJJbkNvbnRhaW5lcihlKXt2YXIgbj1nZXRIb3N0Um9vdEluc3RhbmNlSW5Db250YWluZXIoZSk7cmV0dXJuIG4/bi5faG9zdENvbnRhaW5lckluZm8uX3RvcExldmVsV3JhcHBlcjpudWxsfXZhciB0b3BMZXZlbFJvb3RDb3VudGVyPTEsVG9wTGV2ZWxXcmFwcGVyPWZ1bmN0aW9uKCl7dGhpcy5yb290SUQ9dG9wTGV2ZWxSb290Q291bnRlcisrfTtUb3BMZXZlbFdyYXBwZXIucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e30sXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKFRvcExldmVsV3JhcHBlci5kaXNwbGF5TmFtZT1cIlRvcExldmVsV3JhcHBlclwiKSxUb3BMZXZlbFdyYXBwZXIucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnByb3BzLmNoaWxkfSxUb3BMZXZlbFdyYXBwZXIuaXNSZWFjdFRvcExldmVsV3JhcHBlcj0hMDt2YXIgUmVhY3RNb3VudD17VG9wTGV2ZWxXcmFwcGVyOlRvcExldmVsV3JhcHBlcixfaW5zdGFuY2VzQnlSZWFjdFJvb3RJRDppbnN0YW5jZXNCeVJlYWN0Um9vdElELHNjcm9sbE1vbml0b3I6ZnVuY3Rpb24oZSxuKXtuKCl9LF91cGRhdGVSb290Q29tcG9uZW50OmZ1bmN0aW9uKGUsbix0LHIsbyl7cmV0dXJuIFJlYWN0TW91bnQuc2Nyb2xsTW9uaXRvcihyLGZ1bmN0aW9uKCl7UmVhY3RVcGRhdGVRdWV1ZS5lbnF1ZXVlRWxlbWVudEludGVybmFsKGUsbix0KSxvJiZSZWFjdFVwZGF0ZVF1ZXVlLmVucXVldWVDYWxsYmFja0ludGVybmFsKGUsbyl9KSxlfSxfcmVuZGVyTmV3Um9vdENvbXBvbmVudDpmdW5jdGlvbihlLG4sdCxyKXtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ3YXJuaW5nKG51bGw9PVJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQsXCJfcmVuZGVyTmV3Um9vdENvbXBvbmVudCgpOiBSZW5kZXIgbWV0aG9kcyBzaG91bGQgYmUgYSBwdXJlIGZ1bmN0aW9uIG9mIHByb3BzIGFuZCBzdGF0ZTsgdHJpZ2dlcmluZyBuZXN0ZWQgY29tcG9uZW50IHVwZGF0ZXMgZnJvbSByZW5kZXIgaXMgbm90IGFsbG93ZWQuIElmIG5lY2Vzc2FyeSwgdHJpZ2dlciBuZXN0ZWQgdXBkYXRlcyBpbiBjb21wb25lbnREaWRVcGRhdGUuIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mICVzLlwiLFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQmJlJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQuZ2V0TmFtZSgpfHxcIlJlYWN0Q29tcG9zaXRlQ29tcG9uZW50XCIpLGlzVmFsaWRDb250YWluZXIobil8fChcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcIl9yZWdpc3RlckNvbXBvbmVudCguLi4pOiBUYXJnZXQgY29udGFpbmVyIGlzIG5vdCBhIERPTSBlbGVtZW50LlwiKTpfcHJvZEludmFyaWFudChcIjM3XCIpKSxSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuZW5zdXJlU2Nyb2xsVmFsdWVNb25pdG9yaW5nKCk7dmFyIG89aW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChlLCExKTtSZWFjdFVwZGF0ZXMuYmF0Y2hlZFVwZGF0ZXMoYmF0Y2hlZE1vdW50Q29tcG9uZW50SW50b05vZGUsbyxuLHQscik7dmFyIGE9by5faW5zdGFuY2Uucm9vdElEO3JldHVybiBpbnN0YW5jZXNCeVJlYWN0Um9vdElEW2FdPW8sb30scmVuZGVyU3VidHJlZUludG9Db250YWluZXI6ZnVuY3Rpb24oZSxuLHQscil7cmV0dXJuIG51bGwhPWUmJlJlYWN0SW5zdGFuY2VNYXAuaGFzKGUpfHwoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoITEsXCJwYXJlbnRDb21wb25lbnQgbXVzdCBiZSBhIHZhbGlkIFJlYWN0IENvbXBvbmVudFwiKTpfcHJvZEludmFyaWFudChcIjM4XCIpKSxSZWFjdE1vdW50Ll9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihlLG4sdCxyKX0sX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyOmZ1bmN0aW9uKGUsbix0LHIpe1JlYWN0VXBkYXRlUXVldWUudmFsaWRhdGVDYWxsYmFjayhyLFwiUmVhY3RET00ucmVuZGVyXCIpLFJlYWN0LmlzVmFsaWRFbGVtZW50KG4pfHwoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoITEsXCJSZWFjdERPTS5yZW5kZXIoKTogSW52YWxpZCBjb21wb25lbnQgZWxlbWVudC4lc1wiLFwic3RyaW5nXCI9PXR5cGVvZiBuP1wiIEluc3RlYWQgb2YgcGFzc2luZyBhIHN0cmluZyBsaWtlICdkaXYnLCBwYXNzIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicpIG9yIDxkaXYgLz4uXCI6XCJmdW5jdGlvblwiPT10eXBlb2Ygbj9cIiBJbnN0ZWFkIG9mIHBhc3NpbmcgYSBjbGFzcyBsaWtlIEZvbywgcGFzcyBSZWFjdC5jcmVhdGVFbGVtZW50KEZvbykgb3IgPEZvbyAvPi5cIjpudWxsIT1uJiZ2b2lkIDAhPT1uLnByb3BzP1wiIFRoaXMgbWF5IGJlIGNhdXNlZCBieSB1bmludGVudGlvbmFsbHkgbG9hZGluZyB0d28gaW5kZXBlbmRlbnQgY29waWVzIG9mIFJlYWN0LlwiOlwiXCIpOl9wcm9kSW52YXJpYW50KFwiMzlcIixcInN0cmluZ1wiPT10eXBlb2Ygbj9cIiBJbnN0ZWFkIG9mIHBhc3NpbmcgYSBzdHJpbmcgbGlrZSAnZGl2JywgcGFzcyBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnKSBvciA8ZGl2IC8+LlwiOlwiZnVuY3Rpb25cIj09dHlwZW9mIG4/XCIgSW5zdGVhZCBvZiBwYXNzaW5nIGEgY2xhc3MgbGlrZSBGb28sIHBhc3MgUmVhY3QuY3JlYXRlRWxlbWVudChGb28pIG9yIDxGb28gLz4uXCI6bnVsbCE9biYmdm9pZCAwIT09bi5wcm9wcz9cIiBUaGlzIG1heSBiZSBjYXVzZWQgYnkgdW5pbnRlbnRpb25hbGx5IGxvYWRpbmcgdHdvIGluZGVwZW5kZW50IGNvcGllcyBvZiBSZWFjdC5cIjpcIlwiKSksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FybmluZyghdHx8IXQudGFnTmFtZXx8XCJCT0RZXCIhPT10LnRhZ05hbWUudG9VcHBlckNhc2UoKSxcInJlbmRlcigpOiBSZW5kZXJpbmcgY29tcG9uZW50cyBkaXJlY3RseSBpbnRvIGRvY3VtZW50LmJvZHkgaXMgZGlzY291cmFnZWQsIHNpbmNlIGl0cyBjaGlsZHJlbiBhcmUgb2Z0ZW4gbWFuaXB1bGF0ZWQgYnkgdGhpcmQtcGFydHkgc2NyaXB0cyBhbmQgYnJvd3NlciBleHRlbnNpb25zLiBUaGlzIG1heSBsZWFkIHRvIHN1YnRsZSByZWNvbmNpbGlhdGlvbiBpc3N1ZXMuIFRyeSByZW5kZXJpbmcgaW50byBhIGNvbnRhaW5lciBlbGVtZW50IGNyZWF0ZWQgZm9yIHlvdXIgYXBwLlwiKTt2YXIgbyxhPVJlYWN0LmNyZWF0ZUVsZW1lbnQoVG9wTGV2ZWxXcmFwcGVyLHtjaGlsZDpufSk7aWYoZSl7dmFyIGk9UmVhY3RJbnN0YW5jZU1hcC5nZXQoZSk7bz1pLl9wcm9jZXNzQ2hpbGRDb250ZXh0KGkuX2NvbnRleHQpfWVsc2Ugbz1lbXB0eU9iamVjdDt2YXIgYz1nZXRUb3BMZXZlbFdyYXBwZXJJbkNvbnRhaW5lcih0KTtpZihjKXt2YXIgcz1jLl9jdXJyZW50RWxlbWVudC5wcm9wcy5jaGlsZDtpZihzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudChzLG4pKXt2YXIgdT1jLl9yZW5kZXJlZENvbXBvbmVudC5nZXRQdWJsaWNJbnN0YW5jZSgpLGQ9ciYmZnVuY3Rpb24oKXtyLmNhbGwodSl9O3JldHVybiBSZWFjdE1vdW50Ll91cGRhdGVSb290Q29tcG9uZW50KGMsYSxvLHQsZCksdX1SZWFjdE1vdW50LnVubW91bnRDb21wb25lbnRBdE5vZGUodCl9dmFyIHA9Z2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKHQpLGw9cCYmISFpbnRlcm5hbEdldElEKHApLG09aGFzTm9uUm9vdFJlYWN0Q2hpbGQodCk7aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcoIW0sXCJyZW5kZXIoLi4uKTogUmVwbGFjaW5nIFJlYWN0LXJlbmRlcmVkIGNoaWxkcmVuIHdpdGggYSBuZXcgcm9vdCBjb21wb25lbnQuIElmIHlvdSBpbnRlbmRlZCB0byB1cGRhdGUgdGhlIGNoaWxkcmVuIG9mIHRoaXMgbm9kZSwgeW91IHNob3VsZCBpbnN0ZWFkIGhhdmUgdGhlIGV4aXN0aW5nIGNoaWxkcmVuIHVwZGF0ZSB0aGVpciBzdGF0ZSBhbmQgcmVuZGVyIHRoZSBuZXcgY29tcG9uZW50cyBpbnN0ZWFkIG9mIGNhbGxpbmcgUmVhY3RET00ucmVuZGVyLlwiKSwhbHx8cC5uZXh0U2libGluZykpZm9yKHZhciBSPXA7Ujspe2lmKGludGVybmFsR2V0SUQoUikpe1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcoITEsXCJyZW5kZXIoKTogVGFyZ2V0IG5vZGUgaGFzIG1hcmt1cCByZW5kZXJlZCBieSBSZWFjdCwgYnV0IHRoZXJlIGFyZSB1bnJlbGF0ZWQgbm9kZXMgYXMgd2VsbC4gVGhpcyBpcyBtb3N0IGNvbW1vbmx5IGNhdXNlZCBieSB3aGl0ZS1zcGFjZSBpbnNlcnRlZCBhcm91bmQgc2VydmVyLXJlbmRlcmVkIG1hcmt1cC5cIik7YnJlYWt9Uj1SLm5leHRTaWJsaW5nfXZhciB2PWwmJiFjJiYhbSxFPVJlYWN0TW91bnQuX3JlbmRlck5ld1Jvb3RDb21wb25lbnQoYSx0LHYsbykuX3JlbmRlcmVkQ29tcG9uZW50LmdldFB1YmxpY0luc3RhbmNlKCk7cmV0dXJuIHImJnIuY2FsbChFKSxFfSxyZW5kZXI6ZnVuY3Rpb24oZSxuLHQpe3JldHVybiBSZWFjdE1vdW50Ll9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihudWxsLGUsbix0KX0sdW5tb3VudENvbXBvbmVudEF0Tm9kZTpmdW5jdGlvbihlKXtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ3YXJuaW5nKG51bGw9PVJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQsXCJ1bm1vdW50Q29tcG9uZW50QXROb2RlKCk6IFJlbmRlciBtZXRob2RzIHNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24gb2YgcHJvcHMgYW5kIHN0YXRlOyB0cmlnZ2VyaW5nIG5lc3RlZCBjb21wb25lbnQgdXBkYXRlcyBmcm9tIHJlbmRlciBpcyBub3QgYWxsb3dlZC4gSWYgbmVjZXNzYXJ5LCB0cmlnZ2VyIG5lc3RlZCB1cGRhdGVzIGluIGNvbXBvbmVudERpZFVwZGF0ZS4gQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgJXMuXCIsUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCYmUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC5nZXROYW1lKCl8fFwiUmVhY3RDb21wb3NpdGVDb21wb25lbnRcIiksaXNWYWxpZENvbnRhaW5lcihlKXx8KFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwidW5tb3VudENvbXBvbmVudEF0Tm9kZSguLi4pOiBUYXJnZXQgY29udGFpbmVyIGlzIG5vdCBhIERPTSBlbGVtZW50LlwiKTpfcHJvZEludmFyaWFudChcIjQwXCIpKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ3YXJuaW5nKCFub2RlSXNSZW5kZXJlZEJ5T3RoZXJJbnN0YW5jZShlKSxcInVubW91bnRDb21wb25lbnRBdE5vZGUoKTogVGhlIG5vZGUgeW91J3JlIGF0dGVtcHRpbmcgdG8gdW5tb3VudCB3YXMgcmVuZGVyZWQgYnkgYW5vdGhlciBjb3B5IG9mIFJlYWN0LlwiKTt2YXIgbj1nZXRUb3BMZXZlbFdyYXBwZXJJbkNvbnRhaW5lcihlKTtpZighbil7dmFyIHQ9aGFzTm9uUm9vdFJlYWN0Q2hpbGQoZSkscj0xPT09ZS5ub2RlVHlwZSYmZS5oYXNBdHRyaWJ1dGUoUk9PVF9BVFRSX05BTUUpO3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJlwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcoIXQsXCJ1bm1vdW50Q29tcG9uZW50QXROb2RlKCk6IFRoZSBub2RlIHlvdSdyZSBhdHRlbXB0aW5nIHRvIHVubW91bnQgd2FzIHJlbmRlcmVkIGJ5IFJlYWN0IGFuZCBpcyBub3QgYSB0b3AtbGV2ZWwgY29udGFpbmVyLiAlc1wiLHI/XCJZb3UgbWF5IGhhdmUgYWNjaWRlbnRhbGx5IHBhc3NlZCBpbiBhIFJlYWN0IHJvb3Qgbm9kZSBpbnN0ZWFkIG9mIGl0cyBjb250YWluZXIuXCI6XCJJbnN0ZWFkLCBoYXZlIHRoZSBwYXJlbnQgY29tcG9uZW50IHVwZGF0ZSBpdHMgc3RhdGUgYW5kIHJlcmVuZGVyIGluIG9yZGVyIHRvIHJlbW92ZSB0aGlzIGNvbXBvbmVudC5cIiksITF9cmV0dXJuIGRlbGV0ZSBpbnN0YW5jZXNCeVJlYWN0Um9vdElEW24uX2luc3RhbmNlLnJvb3RJRF0sUmVhY3RVcGRhdGVzLmJhdGNoZWRVcGRhdGVzKHVubW91bnRDb21wb25lbnRGcm9tTm9kZSxuLGUsITEpLCEwfSxfbW91bnRJbWFnZUludG9Ob2RlOmZ1bmN0aW9uKGUsbix0LHIsbyl7aWYoaXNWYWxpZENvbnRhaW5lcihuKXx8KFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwibW91bnRDb21wb25lbnRJbnRvTm9kZSguLi4pOiBUYXJnZXQgY29udGFpbmVyIGlzIG5vdCB2YWxpZC5cIik6X3Byb2RJbnZhcmlhbnQoXCI0MVwiKSkscil7dmFyIGE9Z2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKG4pO2lmKFJlYWN0TWFya3VwQ2hlY2tzdW0uY2FuUmV1c2VNYXJrdXAoZSxhKSlyZXR1cm4gdm9pZCBSZWFjdERPTUNvbXBvbmVudFRyZWUucHJlY2FjaGVOb2RlKHQsYSk7dmFyIGk9YS5nZXRBdHRyaWJ1dGUoUmVhY3RNYXJrdXBDaGVja3N1bS5DSEVDS1NVTV9BVFRSX05BTUUpO2EucmVtb3ZlQXR0cmlidXRlKFJlYWN0TWFya3VwQ2hlY2tzdW0uQ0hFQ0tTVU1fQVRUUl9OQU1FKTt2YXIgYz1hLm91dGVySFRNTDthLnNldEF0dHJpYnV0ZShSZWFjdE1hcmt1cENoZWNrc3VtLkNIRUNLU1VNX0FUVFJfTkFNRSxpKTt2YXIgcyx1PWU7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKG4ubm9kZVR5cGU9PT1FTEVNRU5UX05PREVfVFlQRT8oKHM9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSkuaW5uZXJIVE1MPWUsdT1zLmlubmVySFRNTCk6KHM9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKSxkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHMpLHMuY29udGVudERvY3VtZW50LndyaXRlKGUpLHU9cy5jb250ZW50RG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm91dGVySFRNTCxkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHMpKSk7dmFyIGQ9Zmlyc3REaWZmZXJlbmNlSW5kZXgodSxjKSxwPVwiIChjbGllbnQpIFwiK3Uuc3Vic3RyaW5nKGQtMjAsZCsyMCkrXCJcXG4gKHNlcnZlcikgXCIrYy5zdWJzdHJpbmcoZC0yMCxkKzIwKTtuLm5vZGVUeXBlPT09RE9DX05PREVfVFlQRSYmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwiWW91J3JlIHRyeWluZyB0byByZW5kZXIgYSBjb21wb25lbnQgdG8gdGhlIGRvY3VtZW50IHVzaW5nIHNlcnZlciByZW5kZXJpbmcgYnV0IHRoZSBjaGVja3N1bSB3YXMgaW52YWxpZC4gVGhpcyB1c3VhbGx5IG1lYW5zIHlvdSByZW5kZXJlZCBhIGRpZmZlcmVudCBjb21wb25lbnQgdHlwZSBvciBwcm9wcyBvbiB0aGUgY2xpZW50IGZyb20gdGhlIG9uZSBvbiB0aGUgc2VydmVyLCBvciB5b3VyIHJlbmRlcigpIG1ldGhvZHMgYXJlIGltcHVyZS4gUmVhY3QgY2Fubm90IGhhbmRsZSB0aGlzIGNhc2UgZHVlIHRvIGNyb3NzLWJyb3dzZXIgcXVpcmtzIGJ5IHJlbmRlcmluZyBhdCB0aGUgZG9jdW1lbnQgcm9vdC4gWW91IHNob3VsZCBsb29rIGZvciBlbnZpcm9ubWVudCBkZXBlbmRlbnQgY29kZSBpbiB5b3VyIGNvbXBvbmVudHMgYW5kIGVuc3VyZSB0aGUgcHJvcHMgYXJlIHRoZSBzYW1lIGNsaWVudCBhbmQgc2VydmVyIHNpZGU6XFxuJXNcIixwKTpfcHJvZEludmFyaWFudChcIjQyXCIscCkpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJlwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcoITEsXCJSZWFjdCBhdHRlbXB0ZWQgdG8gcmV1c2UgbWFya3VwIGluIGEgY29udGFpbmVyIGJ1dCB0aGUgY2hlY2tzdW0gd2FzIGludmFsaWQuIFRoaXMgZ2VuZXJhbGx5IG1lYW5zIHRoYXQgeW91IGFyZSB1c2luZyBzZXJ2ZXIgcmVuZGVyaW5nIGFuZCB0aGUgbWFya3VwIGdlbmVyYXRlZCBvbiB0aGUgc2VydmVyIHdhcyBub3Qgd2hhdCB0aGUgY2xpZW50IHdhcyBleHBlY3RpbmcuIFJlYWN0IGluamVjdGVkIG5ldyBtYXJrdXAgdG8gY29tcGVuc2F0ZSB3aGljaCB3b3JrcyBidXQgeW91IGhhdmUgbG9zdCBtYW55IG9mIHRoZSBiZW5lZml0cyBvZiBzZXJ2ZXIgcmVuZGVyaW5nLiBJbnN0ZWFkLCBmaWd1cmUgb3V0IHdoeSB0aGUgbWFya3VwIGJlaW5nIGdlbmVyYXRlZCBpcyBkaWZmZXJlbnQgb24gdGhlIGNsaWVudCBvciBzZXJ2ZXI6XFxuJXNcIixwKX1pZihuLm5vZGVUeXBlPT09RE9DX05PREVfVFlQRSYmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwiWW91J3JlIHRyeWluZyB0byByZW5kZXIgYSBjb21wb25lbnQgdG8gdGhlIGRvY3VtZW50IGJ1dCB5b3UgZGlkbid0IHVzZSBzZXJ2ZXIgcmVuZGVyaW5nLiBXZSBjYW4ndCBkbyB0aGlzIHdpdGhvdXQgdXNpbmcgc2VydmVyIHJlbmRlcmluZyBkdWUgdG8gY3Jvc3MtYnJvd3NlciBxdWlya3MuIFNlZSBSZWFjdERPTVNlcnZlci5yZW5kZXJUb1N0cmluZygpIGZvciBzZXJ2ZXIgcmVuZGVyaW5nLlwiKTpfcHJvZEludmFyaWFudChcIjQzXCIpKSxvLnVzZUNyZWF0ZUVsZW1lbnQpe2Zvcig7bi5sYXN0Q2hpbGQ7KW4ucmVtb3ZlQ2hpbGQobi5sYXN0Q2hpbGQpO0RPTUxhenlUcmVlLmluc2VydFRyZWVCZWZvcmUobixlLG51bGwpfWVsc2Ugc2V0SW5uZXJIVE1MKG4sZSksUmVhY3RET01Db21wb25lbnRUcmVlLnByZWNhY2hlTm9kZSh0LG4uZmlyc3RDaGlsZCk7aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVil7dmFyIGw9UmVhY3RET01Db21wb25lbnRUcmVlLmdldEluc3RhbmNlRnJvbU5vZGUobi5maXJzdENoaWxkKTswIT09bC5fZGVidWdJRCYmUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uSG9zdE9wZXJhdGlvbih7aW5zdGFuY2VJRDpsLl9kZWJ1Z0lELHR5cGU6XCJtb3VudFwiLHBheWxvYWQ6ZS50b1N0cmluZygpfSl9fX07bW9kdWxlLmV4cG9ydHM9UmVhY3RNb3VudDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSmxZV04wVFc5MWJuUXVhbk1pWFN3aWJtRnRaWE1pT2xzaVgzQnliMlJKYm5aaGNtbGhiblFpTENKeVpYRjFhWEpsSWl3aVJFOU5UR0Y2ZVZSeVpXVWlMQ0pFVDAxUWNtOXdaWEowZVNJc0lsSmxZV04wSWl3aVVtVmhZM1JDY205M2MyVnlSWFpsYm5SRmJXbDBkR1Z5SWl3aVVtVmhZM1JEZFhKeVpXNTBUM2R1WlhJaUxDSlNaV0ZqZEVSUFRVTnZiWEJ2Ym1WdWRGUnlaV1VpTENKU1pXRmpkRVJQVFVOdmJuUmhhVzVsY2tsdVptOGlMQ0pTWldGamRFUlBUVVpsWVhSMWNtVkdiR0ZuY3lJc0lsSmxZV04wUm1WaGRIVnlaVVpzWVdkeklpd2lVbVZoWTNSSmJuTjBZVzVqWlUxaGNDSXNJbEpsWVdOMFNXNXpkSEoxYldWdWRHRjBhVzl1SWl3aVVtVmhZM1JOWVhKcmRYQkRhR1ZqYTNOMWJTSXNJbEpsWVdOMFVtVmpiMjVqYVd4bGNpSXNJbEpsWVdOMFZYQmtZWFJsVVhWbGRXVWlMQ0pTWldGamRGVndaR0YwWlhNaUxDSmxiWEIwZVU5aWFtVmpkQ0lzSW1sdWMzUmhiblJwWVhSbFVtVmhZM1JEYjIxd2IyNWxiblFpTENKcGJuWmhjbWxoYm5RaUxDSnpaWFJKYm01bGNraFVUVXdpTENKemFHOTFiR1JWY0dSaGRHVlNaV0ZqZEVOdmJYQnZibVZ1ZENJc0luZGhjbTVwYm1jaUxDSkJWRlJTWDA1QlRVVWlMQ0pKUkY5QlZGUlNTVUpWVkVWZlRrRk5SU0lzSWxKUFQxUmZRVlJVVWw5T1FVMUZJaXdpVWs5UFZGOUJWRlJTU1VKVlZFVmZUa0ZOUlNJc0lrVk1SVTFGVGxSZlRrOUVSVjlVV1ZCRklpd2lSRTlEWDA1UFJFVmZWRmxRUlNJc0lrUlBRMVZOUlU1VVgwWlNRVWROUlU1VVgwNVBSRVZmVkZsUVJTSXNJbWx1YzNSaGJtTmxjMEo1VW1WaFkzUlNiMjkwU1VRaUxDSm1hWEp6ZEVScFptWmxjbVZ1WTJWSmJtUmxlQ0lzSW5OMGNtbHVaekVpTENKemRISnBibWN5SWl3aWJXbHVUR1Z1SWl3aVRXRjBhQ0lzSW0xcGJpSXNJbXhsYm1kMGFDSXNJbWtpTENKamFHRnlRWFFpTENKblpYUlNaV0ZqZEZKdmIzUkZiR1Z0Wlc1MFNXNURiMjUwWVdsdVpYSWlMQ0pqYjI1MFlXbHVaWElpTENKdWIyUmxWSGx3WlNJc0ltUnZZM1Z0Wlc1MFJXeGxiV1Z1ZENJc0ltWnBjbk4wUTJocGJHUWlMQ0pwYm5SbGNtNWhiRWRsZEVsRUlpd2libTlrWlNJc0ltZGxkRUYwZEhKcFluVjBaU0lzSW0xdmRXNTBRMjl0Y0c5dVpXNTBTVzUwYjA1dlpHVWlMQ0ozY21Gd2NHVnlTVzV6ZEdGdVkyVWlMQ0owY21GdWMyRmpkR2x2YmlJc0luTm9iM1ZzWkZKbGRYTmxUV0Z5YTNWd0lpd2lZMjl1ZEdWNGRDSXNJbTFoY210bGNrNWhiV1VpTENKc2IyZFViM0JNWlhabGJGSmxibVJsY25NaUxDSjBlWEJsSWl3aVgyTjFjbkpsYm5SRmJHVnRaVzUwSWl3aWNISnZjSE1pTENKamFHbHNaQ0lzSW1ScGMzQnNZWGxPWVcxbElpd2libUZ0WlNJc0ltTnZibk52YkdVaUxDSjBhVzFsSWl3aWJXRnlhM1Z3SWl3aWJXOTFiblJEYjIxd2IyNWxiblFpTENKMGFXMWxSVzVrSWl3aVgzSmxibVJsY21Wa1EyOXRjRzl1Wlc1MElpd2lYM1J2Y0V4bGRtVnNWM0poY0hCbGNpSXNJbEpsWVdOMFRXOTFiblFpTENKZmJXOTFiblJKYldGblpVbHVkRzlPYjJSbElpd2lZbUYwWTJobFpFMXZkVzUwUTI5dGNHOXVaVzUwU1c1MGIwNXZaR1VpTENKamIyMXdiMjVsYm5SSmJuTjBZVzVqWlNJc0lsSmxZV04wVW1WamIyNWphV3hsVkhKaGJuTmhZM1JwYjI0aUxDSm5aWFJRYjI5c1pXUWlMQ0oxYzJWRGNtVmhkR1ZGYkdWdFpXNTBJaXdpY0dWeVptOXliU0lzSW5KbGJHVmhjMlVpTENKMWJtMXZkVzUwUTI5dGNHOXVaVzUwUm5KdmJVNXZaR1VpTENKcGJuTjBZVzVqWlNJc0luTmhabVZzZVNJc0luQnliMk5sYzNNaUxDSmxibllpTENKT1QwUkZYMFZPVmlJc0ltUmxZblZuVkc5dmJDSXNJbTl1UW1WbmFXNUdiSFZ6YUNJc0luVnViVzkxYm5SRGIyMXdiMjVsYm5RaUxDSnZia1Z1WkVac2RYTm9JaXdpYkdGemRFTm9hV3hrSWl3aWNtVnRiM1psUTJocGJHUWlMQ0pvWVhOT2IyNVNiMjkwVW1WaFkzUkRhR2xzWkNJc0luSnZiM1JGYkNJc0ltbHVjM1FpTENKblpYUkpibk4wWVc1alpVWnliMjFPYjJSbElpd2lYMmh2YzNSUVlYSmxiblFpTENKdWIyUmxTWE5TWlc1a1pYSmxaRUo1VDNSb1pYSkpibk4wWVc1alpTSXNJbWx6VW1WaFkzUk9iMlJsSWl3aWFYTldZV3hwWkVOdmJuUmhhVzVsY2lJc0ltaGhjMEYwZEhKcFluVjBaU0lzSW1kbGRFaHZjM1JTYjI5MFNXNXpkR0Z1WTJWSmJrTnZiblJoYVc1bGNpSXNJbkJ5WlhaSWIzTjBTVzV6ZEdGdVkyVWlMQ0puWlhSVWIzQk1aWFpsYkZkeVlYQndaWEpKYmtOdmJuUmhhVzVsY2lJc0luSnZiM1FpTENKZmFHOXpkRU52Ym5SaGFXNWxja2x1Wm04aUxDSjBiM0JNWlhabGJGSnZiM1JEYjNWdWRHVnlJaXdpVkc5d1RHVjJaV3hYY21Gd2NHVnlJaXdpZEdocGN5SXNJbkp2YjNSSlJDSXNJbkJ5YjNSdmRIbHdaU0lzSW1selVtVmhZM1JEYjIxd2IyNWxiblFpTENKeVpXNWtaWElpTENKcGMxSmxZV04wVkc5d1RHVjJaV3hYY21Gd2NHVnlJaXdpWDJsdWMzUmhibU5sYzBKNVVtVmhZM1JTYjI5MFNVUWlMQ0p6WTNKdmJHeE5iMjVwZEc5eUlpd2ljbVZ1WkdWeVEyRnNiR0poWTJzaUxDSmZkWEJrWVhSbFVtOXZkRU52YlhCdmJtVnVkQ0lzSW5CeVpYWkRiMjF3YjI1bGJuUWlMQ0p1WlhoMFJXeGxiV1Z1ZENJc0ltNWxlSFJEYjI1MFpYaDBJaXdpWTJGc2JHSmhZMnNpTENKbGJuRjFaWFZsUld4bGJXVnVkRWx1ZEdWeWJtRnNJaXdpWlc1eGRXVjFaVU5oYkd4aVlXTnJTVzUwWlhKdVlXd2lMQ0pmY21WdVpHVnlUbVYzVW05dmRFTnZiWEJ2Ym1WdWRDSXNJbU4xY25KbGJuUWlMQ0puWlhST1lXMWxJaXdpWlc1emRYSmxVMk55YjJ4c1ZtRnNkV1ZOYjI1cGRHOXlhVzVuSWl3aVltRjBZMmhsWkZWd1pHRjBaWE1pTENKM2NtRndjR1Z5U1VRaUxDSmZhVzV6ZEdGdVkyVWlMQ0p5Wlc1a1pYSlRkV0owY21WbFNXNTBiME52Ym5SaGFXNWxjaUlzSW5CaGNtVnVkRU52YlhCdmJtVnVkQ0lzSW1oaGN5SXNJbDl5Wlc1a1pYSlRkV0owY21WbFNXNTBiME52Ym5SaGFXNWxjaUlzSW5aaGJHbGtZWFJsUTJGc2JHSmhZMnNpTENKcGMxWmhiR2xrUld4bGJXVnVkQ0lzSW5WdVpHVm1hVzVsWkNJc0luUmhaMDVoYldVaUxDSjBiMVZ3Y0dWeVEyRnpaU0lzSW01bGVIUlhjbUZ3Y0dWa1JXeGxiV1Z1ZENJc0ltTnlaV0YwWlVWc1pXMWxiblFpTENKd1lYSmxiblJKYm5OMElpd2laMlYwSWl3aVgzQnliMk5sYzNORGFHbHNaRU52Ym5SbGVIUWlMQ0pmWTI5dWRHVjRkQ0lzSW5CeVpYWkZiR1Z0Wlc1MElpd2ljSFZpYkdsalNXNXpkQ0lzSW1kbGRGQjFZbXhwWTBsdWMzUmhibU5sSWl3aWRYQmtZWFJsWkVOaGJHeGlZV05ySWl3aVkyRnNiQ0lzSW5WdWJXOTFiblJEYjIxd2IyNWxiblJCZEU1dlpHVWlMQ0p5WldGamRGSnZiM1JGYkdWdFpXNTBJaXdpWTI5dWRHRnBibVZ5U0dGelVtVmhZM1JOWVhKcmRYQWlMQ0pqYjI1MFlXbHVaWEpJWVhOT2IyNVNiMjkwVW1WaFkzUkRhR2xzWkNJc0ltNWxlSFJUYVdKc2FXNW5JaXdpY205dmRFVnNaVzFsYm5SVGFXSnNhVzVuSWl3aVkyOXRjRzl1Wlc1MElpd2lhWE5EYjI1MFlXbHVaWEpTWldGamRGSnZiM1FpTENKeWIyOTBSV3hsYldWdWRDSXNJbU5oYmxKbGRYTmxUV0Z5YTNWd0lpd2ljSEpsWTJGamFHVk9iMlJsSWl3aVkyaGxZMnR6ZFcwaUxDSkRTRVZEUzFOVlRWOUJWRlJTWDA1QlRVVWlMQ0p5WlcxdmRtVkJkSFJ5YVdKMWRHVWlMQ0p5YjI5MFRXRnlhM1Z3SWl3aWIzVjBaWEpJVkUxTUlpd2ljMlYwUVhSMGNtbGlkWFJsSWl3aWJtOXliV0ZzYVhwbGNpSXNJbTV2Y20xaGJHbDZaV1JOWVhKcmRYQWlMQ0prYjJOMWJXVnVkQ0lzSW1sdWJtVnlTRlJOVENJc0ltSnZaSGtpTENKaGNIQmxibVJEYUdsc1pDSXNJbU52Ym5SbGJuUkViMk4xYldWdWRDSXNJbmR5YVhSbElpd2laR2xtWmtsdVpHVjRJaXdpWkdsbVptVnlaVzVqWlNJc0luTjFZbk4wY21sdVp5SXNJbWx1YzJWeWRGUnlaV1ZDWldadmNtVWlMQ0pvYjNOMFRtOWtaU0lzSWw5a1pXSjFaMGxFSWl3aWIyNUliM04wVDNCbGNtRjBhVzl1SWl3aWFXNXpkR0Z1WTJWSlJDSXNJbkJoZVd4dllXUWlMQ0owYjFOMGNtbHVaeUlzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVkZCTEdGQlJVRXNTVUZCU1VFc1pVRkJhVUpETEZGQlFWRXNkMEpCUlhwQ1F5eFpRVUZqUkN4UlFVRlJMR2xDUVVOMFFrVXNXVUZCWTBZc1VVRkJVU3hwUWtGRGRFSkhMRTFCUVZGSUxGRkJRVkVzYlVKQlEyaENTU3g1UWtGQk1rSktMRkZCUVZFc09FSkJRMjVEU3l4clFrRkJiMEpNTEZGQlFWRXNLMEpCUXpWQ1RTeHpRa0ZCZDBKT0xGRkJRVkVzTWtKQlEyaERUeXh6UWtGQmQwSlFMRkZCUVZFc01rSkJRMmhEVVN4eFFrRkJkVUpTTEZGQlFWRXNNRUpCUXk5Q1V5eHJRa0ZCYjBKVUxGRkJRVkVzZFVKQlF6VkNWU3hwUWtGQmJVSldMRkZCUVZFc2MwSkJRek5DVnl4eFFrRkJkVUpZTEZGQlFWRXNNRUpCUXk5Q1dTeHZRa0ZCYzBKYUxGRkJRVkVzZVVKQlF6bENZU3huUWtGQmEwSmlMRkZCUVZFc2NVSkJRekZDWXl4cFFrRkJiVUprTEZGQlFWRXNjMEpCUXpOQ1pTeGhRVUZsWml4UlFVRlJMR3RDUVVWMlFtZENMRmxCUVdOb1FpeFJRVUZSTEhkQ1FVTjBRbWxDTERCQ1FVRTBRbXBDTEZGQlFWRXNLMEpCUTNCRGEwSXNWVUZCV1d4Q0xGRkJRVkVzYzBKQlEzQkNiVUlzWVVGQlpXNUNMRkZCUVZFc2EwSkJRM1pDYjBJc01rSkJRVFpDY0VJc1VVRkJVU3huUTBGRGNrTnhRaXhSUVVGVmNrSXNVVUZCVVN4dlFrRkZiRUp6UWl4VlFVRlpjRUlzV1VGQldYRkNMR3RDUVVONFFrTXNaVUZCYVVKMFFpeFpRVUZaZFVJc2IwSkJSVGRDUXl4clFrRkJiMElzUlVGRGNFSkRMR05CUVdkQ0xFVkJRMmhDUXl3MFFrRkJPRUlzUjBGRk9VSkRMSFZDUVVGNVFpeEhRVkUzUWl4VFFVRlRReXh4UWtGQmNVSkRMRVZCUVZORExFZEJSWEpETEVsQlJFRXNTVUZCU1VNc1JVRkJVME1zUzBGQlMwTXNTVUZCU1Vvc1JVRkJVVXNzVDBGQlVVb3NSVUZCVVVrc1VVRkRja05ETEVWQlFVa3NSVUZCUjBFc1JVRkJTVW9zUlVGQlVVa3NTVUZETVVJc1IwRkJTVTRzUlVGQlVVOHNUMEZCVDBRc1MwRkJUMHdzUlVGQlVVMHNUMEZCVDBRc1IwRkRka01zVDBGQlQwRXNSVUZIV0N4UFFVRlBUaXhGUVVGUlN5eFRRVUZYU2l4RlFVRlJTU3hSUVVGVkxFVkJRVWxJTEVWQlVXeEVMRk5CUVZOTkxDdENRVUVyUWtNc1IwRkRkRU1zVDBGQlMwRXNSVUZKUkVFc1JVRkJWVU1zVjBGQllXUXNZMEZEYkVKaExFVkJRVlZGTEdkQ1FVVldSaXhGUVVGVlJ5eFhRVTVXTEV0QlZWZ3NVMEZCVTBNc1kwRkJZME1zUjBGSmNrSXNUMEZCVDBFc1JVRkJTME1zWTBGQlowSkVMRVZCUVV0RExHRkJRV0Y0UWl4WlFVRmpMRWRCVnpsRUxGTkJRVk41UWl4MVFrRkJkVUpETEVWQlFXbENVaXhGUVVGWFV5eEZRVUZoUXl4RlFVRnRRa01zUjBGRE1VWXNTVUZCU1VNc1JVRkRTaXhIUVVGSk0wTXNhMEpCUVd0Q05FTXNiVUpCUVc5Q0xFTkJRM2hETEVsQlEwbERMRVZCUkdsQ1RpeEZRVUZuUWs4c1owSkJRV2RDUXl4TlFVRk5ReXhOUVVOcVEwZ3NTMEZETVVKR0xFVkJRV0VzYVVKQlFXMURMR2xDUVVGVVJTeEZRVUZ2UWtFc1JVRkJUMEVzUlVGQlMwa3NZVUZCWlVvc1JVRkJTMHNzVFVGRE0wWkRMRkZCUVZGRExFdEJRVXRVTEVkQlIyWXNTVUZCU1ZVc1JVRkJVMnBFTEdkQ1FVRm5RbXRFTEdWQlFXVm1MRVZCUVdsQ1F5eEZRVUZoTEV0QlFVMHhReXh6UWtGQmMwSjVReXhGUVVGcFFsSXNSMEZCV1Zjc1JVRkJVeXhIUVVkNFNVTXNSMEZEUmxFc1VVRkJVVWtzVVVGQlVWb3NSMEZIYkVKS0xFVkJRV2RDYVVJc2JVSkJRVzFDUXl4cFFrRkJiVUpzUWl4RlFVTjBSRzFDTEZkQlFWZERMRzlDUVVGdlFrNHNSVUZCVVhSQ0xFVkJRVmRSTEVWQlFXbENSU3hGUVVGdFFrUXNSMEZWZUVZc1UwRkJVMjlDTERoQ1FVRTRRa01zUlVGQmJVSTVRaXhGUVVGWFZTeEZRVUZ0UWtNc1IwRkRkRVlzU1VGQlNVWXNSVUZCWTJ4RExHRkJRV0YzUkN3d1FrRkJNRUpETEZkQlJYaEVkRUlzUjBGQmNVSXhReXh4UWtGQmNVSnBSU3hyUWtGRE0wTjRRaXhGUVVGWmVVSXNVVUZCVVROQ0xIVkNRVUYzUWl4TFFVRk5kVUlzUlVGQmJVSTVRaXhGUVVGWFV5eEZRVUZoUXl4RlFVRnRRa01zUjBGRGFFaHdReXhoUVVGaGQwUXNNRUpCUVRCQ1NTeFJRVUZSTVVJc1IwRlpha1FzVTBGQlV6SkNMSGxDUVVGNVFrTXNSVUZCVlhKRExFVkJRVmR6UXl4SFFXTnlSQ3hKUVdJMlFpeGxRVUY2UWtNc1VVRkJVVU1zU1VGQlNVTXNWVUZEWkhSRkxIRkNRVUZ4UW5WRkxGVkJRVlZETEdWQlJXcERkRVVzWjBKQlFXZENkVVVzYVVKQlFXbENVQ3hGUVVGVlF5eEhRVU5rTEdWQlFYcENReXhSUVVGUlF5eEpRVUZKUXl4VlFVTmtkRVVzY1VKQlFYRkNkVVVzVlVGQlZVY3NZVUZITjBJM1F5eEZRVUZWUXl4WFFVRmhaQ3huUWtGRGVrSmhMRVZCUVZsQkxFVkJRVlZGTEdsQ1FVbHFRa1lzUlVGQlZUaERMRmRCUTJZNVF5eEZRVUZWSzBNc1dVRkJXUzlETEVWQlFWVTRReXhYUVdOd1F5eFRRVUZUUlN4eFFrRkJjVUpvUkN4SFFVTTFRaXhKUVVGSmFVUXNSVUZCVTJ4RUxDdENRVUVyUWtNc1IwRkROVU1zUjBGQlNXbEVMRVZCUVZFc1EwRkRWaXhKUVVGSlF5eEZRVUZQY0VZc2MwSkJRWE5DY1VZc2IwSkJRVzlDUml4SFFVTnlSQ3hUUVVGVlF5eEpRVUZSUVN4RlFVRkxSU3hqUVZrelFpeFRRVUZUUXl3NFFrRkJPRUp5UkN4SFFVTnlReXhKUVVGSmFVUXNSVUZCVTJ4RUxDdENRVUVyUWtNc1IwRkROVU1zVTBGQlZXbEVMRWxCUVZWTExGbEJRVmxNTEVsQlFWbHVSaXh6UWtGQmMwSnhSaXh2UWtGQmIwSkdMRWxCVlhoR0xGTkJRVk5OTEdsQ1FVRnBRbXhFTEVkQlEzaENMRk5CUVZWQkxFZEJRVk5CTEVWQlFVdEtMRmRCUVdGbUxHMUNRVUZ4UW0xQ0xFVkJRVXRLTEZkQlFXRmtMR1ZCUVdsQ2EwSXNSVUZCUzBvc1YwRkJZV0lzTmtKQlZXcElMRk5CUVZOclJTeFpRVUZaYWtRc1IwRkRia0lzVDBGQlQydEVMR2xDUVVGcFFteEVMRXRCUVZWQkxFVkJRVXR0UkN4aFFVRmhlRVVzYVVKQlFXMUNjVUlzUlVGQlMyMUVMR0ZCUVdFeFJTeFpRVWN6Uml4VFFVRlRNa1VzSzBKQlFTdENla1FzUjBGRGRFTXNTVUZCU1dsRUxFVkJRVk5zUkN3clFrRkJLMEpETEVkQlEzaERNRVFzUlVGQmJVSlVMRWRCUVZWdVJpeHpRa0ZCYzBKeFJpeHZRa0ZCYjBKR0xFZEJRek5GTEU5QlFVOVRMRWxCUVhGQ1FTeEZRVUZwUWs0c1dVRkJZMDBzUlVGQmJVSXNTMEZIYUVZc1UwRkJVME1zT0VKQlFUaENNMFFzUjBGRGNrTXNTVUZCU1RSRUxFVkJRVTlJTEN0Q1FVRXJRbnBFTEVkQlF6RkRMRTlCUVU4MFJDeEZRVUZQUVN4RlFVRkxReXh0UWtGQmJVSnVReXhwUWtGQmJVSXNTMEZSTTBRc1NVRkJTVzlETEc5Q1FVRnpRaXhGUVVOMFFrTXNaMEpCUVd0Q0xGZEJRM0JDUXl4TFFVRkxReXhQUVVGVFNDeDFRa0ZGYUVKRExHZENRVUZuUWtjc1ZVRkJWVU1zYVVKQlFXMUNMRWRCUTJoQ0xHVkJRWHBDTlVJc1VVRkJVVU1zU1VGQlNVTXNWMEZEWkhOQ0xHZENRVUZuUWpkRExGbEJRV01zYlVKQlJXaEROa01zWjBKQlFXZENSeXhWUVVGVlJTeFBRVUZUTEZkQlEycERMRTlCUVU5S0xFdEJRVXRvUkN4TlFVRk5ReXhQUVVWd1FqaERMR2RDUVVGblFrMHNkMEpCUVhsQ0xFVkJiMEo2UXl4SlFVRkpNVU1zVjBGQllTeERRVU5tYjBNc1owSkJRV2xDUVN4blFrRkxha0pQTEhkQ1FVRjVRbXBHTEhWQ1FWVjZRbXRHTEdOQlFXVXNVMEZCVlhaRkxFVkJRVmQzUlN4SFFVTnNRMEVzUzBGVlJrTXNjVUpCUVhOQ0xGTkJRVlZETEVWQlFXVkRMRVZCUVdGRExFVkJRV0UxUlN4RlFVRlhOa1VzUjBGUmJFWXNUMEZRUVd4RUxGZEJRVmMwUXl4alFVRmpka1VzUlVGQlZ5eFhRVU5zUXpGQ0xHbENRVUZwUW5kSExIVkNRVUYxUWtvc1JVRkJaVU1zUlVGQllVTXNSMEZEYUVWRExFZEJRMFoyUnl4cFFrRkJhVUo1Unl4M1FrRkJkMEpNTEVWQlFXVkhMRXRCU1hKRVNDeEhRVmRVVFN4M1FrRkJlVUlzVTBGQlZVd3NSVUZCWVRORkxFVkJRVmRWTEVWQlFXMUNReXhIUVVsdVJDeGxRVUY2UWpSQ0xGRkJRVkZETEVsQlFVbERMRlZCUVRSQ05VUXNVVUZCY1VNc1RVRkJOMEpvUWl4clFrRkJhMEp2U0N4UlFVRnBRaXh4VUVGQmNWRndTQ3hyUWtGQmEwSnZTQ3hUUVVGWGNFZ3NhMEpCUVd0Q2IwZ3NVVUZCVVVNc1YwRkJZU3d5UWtGRk0xb3pRaXhwUWtGQmFVSjJSQ3hMUVVGelF5eGxRVUY2UW5WRExGRkJRVkZETEVsQlFVbERMRk5CUVRSQ0wwUXNWMEZCVlN4RlFVRlBMRzFGUVVGeFJXNUNMR1ZCUVdVc1QwRkZOVXRMTEhsQ1FVRjVRblZJTERoQ1FVTjZRaXhKUVVGSmNrUXNSVUZCYjBKeVJDd3dRa0ZCTUVKclJ5eEhRVUZoTEVkQlRTOUVjRWNzWVVGQllUWkhMR1ZCUVdWMlJDdzRRa0ZCSzBKRExFVkJRVzFDT1VJc1JVRkJWMVVzUlVGQmJVSkRMRWRCUlRWSExFbEJRVWt3UlN4RlFVRlpka1FzUlVGQmEwSjNSQ3hWUVVGVmNrSXNUMEZITlVNc1QwRkdRVFZGTEhWQ1FVRjFRbWRITEVkQlFXRjJSQ3hGUVVVM1FrRXNSMEZuUWxSNVJDd3lRa0ZCTkVJc1UwRkJWVU1zUlVGQmFVSmlMRVZCUVdFelJTeEZRVUZYTmtVc1IwRkZOMFVzVDBGRWNVSXNUVUZCYmtKWExFZEJRVEpDZEVnc2FVSkJRV2xDZFVnc1NVRkJTVVFzUzBGQk5rTXNaVUZCZWtKcVJDeFJRVUZSUXl4SlFVRkpReXhUUVVFMFFpOUVMRmRCUVZVc1JVRkJUeXh0UkVGQmNVUnVRaXhsUVVGbExFOUJRelZNYjBVc1YwRkJWeXRFTERSQ1FVRTBRa1lzUlVGQmFVSmlMRVZCUVdFelJTeEZRVUZYTmtVc1NVRkhla1poTERSQ1FVRTJRaXhUUVVGVlJpeEZRVUZwUW1Jc1JVRkJZVE5GTEVWQlFWYzJSU3hIUVVNNVJYWkhMR2xDUVVGcFFuRklMR2xDUVVGcFFtUXNSVUZCVlN4dFFrRkRNME5zU0N4TlFVRk5hVWtzWlVGQlpXcENMRXRCUVhkRExHVkJRWHBDY0VNc1VVRkJVVU1zU1VGQlNVTXNVMEZCTkVJdlJDeFhRVUZWTEVWQlFVOHNhMFJCUVRCRkxHbENRVUZvUW1sSExFVkJRVEpDTEhWR1FVRnhTQ3h0UWtGQmFFSkJMRVZCUVRaQ0xHdEdRVU4wVXl4TlFVRm1RU3hSUVVFMlEydENMRWxCUVhSQ2JFSXNSVUZCV1RORUxFMUJRWE5DTEd0R1FVRjVSaXhKUVVGTmVrUXNaVUZCWlN4TFFVRTJRaXhwUWtGQmFFSnZTQ3hGUVVFeVFpeDFSa0ZCY1Vnc2JVSkJRV2hDUVN4RlFVRTJRaXhyUmtGQmQwY3NUVUZCWmtFc1VVRkJOa05yUWl4SlFVRjBRbXhDTEVWQlFWa3pSQ3hOUVVGelFpeHJSa0ZCZVVZc1MwRkZibWxDTEdWQlFYcENkVUlzVVVGQlVVTXNTVUZCU1VNc1ZVRkJORUkxUkN4VFFVRlRiVUlzU1VGQlkwRXNSVUZCVlRoR0xGTkJRU3RETEZOQlFYQkRPVVlzUlVGQlZUaEdMRkZCUVZGRExHTkJRVEJDTEd0U1FVVm9TU3hKUVVsSmJrSXNSVUZLUVc5Q0xFVkJRWEZDY2trc1RVRkJUWE5KTEdOQlFXTnNReXhuUWtGQmFVSXNRMEZETlVRNVF5eE5RVUZQTUVRc1NVRkpWQ3hIUVVGSllTeEZRVUZwUWl4RFFVTnVRaXhKUVVGSlZTeEZRVUZoYUVrc2FVSkJRV2xDYVVrc1NVRkJTVmdzUjBGRGRFTmFMRVZCUVdOelFpeEZRVUZYUlN4eFFrRkJjVUpHTEVWQlFWZEhMR1ZCUlhwRWVrSXNSVUZCWTNCSExGbEJSMmhDTEVsQlFVbHJSeXhGUVVGblFtWXNPRUpCUVRoQ00wUXNSMEZGYkVRc1IwRkJTVEJGTEVWQlFXVXNRMEZEYWtJc1NVRkRTVFJDTEVWQlJIRkNOVUlzUlVGQll6TkVMR2RDUVVOR1F5eE5RVUZOUXl4TlFVTXpReXhIUVVGSmNrTXNNa0pCUVRKQ01FZ3NSVUZCWVROQ0xFZEJRV01zUTBGRGVFUXNTVUZCU1RSQ0xFVkJRV0UzUWl4RlFVRmpha1FzYlVKQlFXMUNLMFVzYjBKQlF6bERReXhGUVVGclFqVkNMRWRCUVZrc1YwRkRhRU5CTEVWQlFWTTJRaXhMUVVGTFNDeEpRVWRvUWl4UFFVUkJOVVVzVjBGQlZ6aERMSEZDUVVGeFFrTXNSVUZCWlhOQ0xFVkJRVzlDY0VJc1JVRkJZVFZGTEVWQlFWZDVSeXhIUVVOd1JrWXNSVUZGVURWRkxGZEJRVmRuUml4MVFrRkJkVUl6Unl4SFFVbDBReXhKUVVGSk5FY3NSVUZCYlVJM1J5d3JRa0ZCSzBKRExFZEJRMnhFTmtjc1JVRkJNRUpFTEV0QlFYTkNlRWNzWTBGQlkzZEhMRWRCUXpsRVJTeEZRVUZuUXpsRUxIRkNRVUZ4UW1oRUxFZEJSWHBFTEVkQlFUWkNMR1ZCUVhwQ2RVTXNVVUZCVVVNc1NVRkJTVU1zVjBGRFZ5eGxRVUY2UWtZc1VVRkJVVU1zU1VGQlNVTXNWVUZCTkVJMVJDeFRRVUZUYVVrc1JVRkJLMElzYzFGQlJUTkZSQ3hIUVVFeVFrUXNSVUZCYVVKSExHRkJSUzlETEVsQlJFRXNTVUZCU1VNc1JVRkJjVUpLTEVWQlEyeENTU3hIUVVGdlFpeERRVU42UWl4SFFVRkpOVWNzWTBGQll6UkhMRWRCUVhGQ0xFTkJRMW9zWlVGQmVrSjZSU3hSUVVGUlF5eEpRVUZKUXl4VlFVRTBRalZFTEZOQlFWRXNSVUZCVHl4clRFRkRka1FzVFVGRlJtMUpMRVZCUVhGQ1FTeEZRVUZ0UWtRc1dVRkxPVU1zU1VGQlNYSkhMRVZCUVc5Q2JVY3NTVUZCTkVKdVF5eEpRVUZyUW05RExFVkJRMnhGUnl4RlFVRlpkRVlzVjBGQlYzRkVMSGRDUVVGM1FtZENMRVZCUVc5Q2FFY3NSVUZCVjFVc1JVRkJiVUpyUlN4SFFVRmhia1FzYlVKQlFXMUNLMFVzYjBKQlNYSkpMRTlCU0VrelFpeEhRVU5HUVN4RlFVRlROa0lzUzBGQlMwOHNSMEZGVkVFc1IwRm5RbFEzUXl4UFFVRlJMRk5CUVZWUExFVkJRV0V6UlN4RlFVRlhOa1VzUjBGRGVFTXNUMEZCVDJ4RUxGZEJRVmNyUkN3MFFrRkJORUlzUzBGQlRXWXNSVUZCWVRORkxFVkJRVmMyUlN4SlFWYzVSVGhDTEhWQ1FVRjNRaXhUUVVGVk0wY3NSMEZMVUN4bFFVRjZRblZETEZGQlFWRkRMRWxCUVVsRExGVkJRVFJDTlVRc1VVRkJjVU1zVFVGQk4wSm9RaXhyUWtGQmEwSnZTQ3hSUVVGcFFpeHZVRUZCYjFGd1NDeHJRa0ZCYTBKdlNDeFRRVUZYY0Vnc2EwSkJRV3RDYjBnc1VVRkJVVU1zVjBGQllTd3lRa0ZGTVZvelFpeHBRa0ZCYVVKMlJDeExRVUZ6UXl4bFFVRjZRblZETEZGQlFWRkRMRWxCUVVsRExGTkJRVFJDTDBRc1YwRkJWU3hGUVVGUExIVkZRVUY1Ulc1Q0xHVkJRV1VzVDBGRmJrb3NaVUZCZWtKblJpeFJRVUZSUXl4SlFVRkpReXhWUVVOWExHVkJRWHBDUml4UlFVRlJReXhKUVVGSlF5eFZRVUUwUWpWRUxGTkJRVk4zUlN3NFFrRkJPRUp5UkN4SFFVRlpMREJIUVVjM1JpeEpRVUZKTUVVc1JVRkJaMEptTERoQ1FVRTRRak5FTEVkQlEyeEVMRWxCUVVzd1JTeEZRVUZsTEVOQlIyeENMRWxCUVVsdlF5eEZRVUZuUXpsRUxIRkNRVUZ4UW1oRUxFZEJSM0pFYTBnc1JVRkJPRU1zU1VGQmRrSnNTQ3hGUVVGVlF5eFZRVUZyUWtRc1JVRkJWWGRFTEdGQlFXRjRSU3huUWtGTk9VVXNUVUZLTmtJc1pVRkJla0oxUkN4UlFVRlJReXhKUVVGSlF5eFZRVU5YTEdWQlFYcENSaXhSUVVGUlF5eEpRVUZKUXl4VlFVRTBRalZFTEZOQlFWTnBTU3hGUVVFclFpdzJTRUZCYlVsSkxFVkJRWFZDTEd0R1FVRjVSaXgzUjBGSE9WUXNSVUZKVkN4alFVWlBOMGdzZFVKQlFYVkNjVVlzUlVGQlkxa3NWVUZCVlhKQ0xGRkJRM1JFTVVZc1lVRkJZVFpITEdWQlFXVm9SQ3g1UWtGQk1FSnpReXhGUVVGbE1VVXNSMEZCVnl4SlFVTjZSU3hIUVVkVU5FSXNiMEpCUVhGQ0xGTkJRVlZPTEVWQlFWRjBRaXhGUVVGWGNVTXNSVUZCVlROQ0xFVkJRVzFDUkN4SFFVYzNSU3hIUVVaRE9FTXNhVUpCUVdsQ2RrUXNTMEZCYzBNc1pVRkJla0oxUXl4UlFVRlJReXhKUVVGSlF5eFRRVUUwUWk5RUxGZEJRVlVzUlVGQlR5d3JSRUZCYVVWdVFpeGxRVUZsTEU5QlJYQkxiVVFzUlVGQmJVSXNRMEZEY2tJc1NVRkJTWGxITEVWQlFXTndTQ3dyUWtGQkswSkRMRWRCUTJwRUxFZEJRVWsxUWl4dlFrRkJiMEpuU2l4bFFVRmxPVVlzUlVGQlVUWkdMRWRCUlRkRExGbEJSRUZ5U2l4elFrRkJjMEoxU2l4aFFVRmhhRVlzUlVGQlZUaEZMRWRCUnpkRExFbEJRVWxITEVWQlFWZElMRVZCUVZrM1J5eGhRVUZoYkVNc2IwSkJRVzlDYlVvc2IwSkJRelZFU2l4RlFVRlpTeXhuUWtGQlowSndTaXh2UWtGQmIwSnRTaXh2UWtGRmFFUXNTVUZCU1VVc1JVRkJZVTRzUlVGQldVOHNWVUZETjBKUUxFVkJRVmxSTEdGQlFXRjJTaXh2UWtGQmIwSnRTaXh0UWtGQmIwSkVMRWRCUldwRkxFbEJUVTFOTEVWQlRrWkRMRVZCUVcxQ2RrY3NSVUZEVFN4bFFVRjZRbWxDTEZGQlFWRkRMRWxCUVVsRExGZEJUVlo2UXl4RlFVRlZReXhYUVVGaFppeHZRa0ZEZWtJd1NTeEZRVUZoUlN4VFFVRlROMElzWTBGQll5eFJRVU42UWpoQ0xGVkJRVmw2Unl4RlFVTjJRblZITEVWQlFXMUNSQ3hGUVVGWFJ5eFpRVVU1UWtnc1JVRkJZVVVzVTBGQlV6ZENMR05CUVdNc1ZVRkRjRU0yUWl4VFFVRlRSU3hMUVVGTFF5eFpRVUZaVEN4SFFVTXhRa0VzUlVGQlYwMHNaMEpCUVdkQ1F5eE5RVUZOTjBjc1IwRkRha04xUnl4RlFVRnRRa1FzUlVGQlYwMHNaMEpCUVdkQ2FFa3NaMEpCUVdkQ2QwZ3NWVUZET1VSSkxGTkJRVk5GTEV0QlFVdHFSaXhaUVVGWk5rVXNTMEZKT1VJc1NVRkJTVkVzUlVGQldUbEpMSEZDUVVGeFFuVkpMRVZCUVd0Q1NpeEhRVU51UkZrc1JVRkJZU3hoUVVGbFVpeEZRVUZwUWxNc1ZVRkJWVVlzUlVGQldTeEhRVUZKUVN4RlFVRlpMRWxCUVUwc1pVRkJhVUpZTEVWQlFWZGhMRlZCUVZWR0xFVkJRVmtzUjBGQlNVRXNSVUZCV1N4SlFVVTNTbkJKTEVWQlFWVkRMRmRCUVdGa0xHZENRVUV3UXl4bFFVRjZRbTlFTEZGQlFWRkRMRWxCUVVsRExGTkJRVFJDTDBRc1YwRkJWU3hGUVVGUExESmtRVUUyWkRKS0xFZEJRV001U3l4bFFVRmxMRXRCUVUwNFN5eEpRVVYwYTBJc1pVRkJla0k1Uml4UlFVRlJReXhKUVVGSlF5eFZRVU5YTEdWQlFYcENSaXhSUVVGUlF5eEpRVUZKUXl4VlFVRTBRalZFTEZOQlFWRXNSVUZCVHl4dFlVRkJkV04zU2l4SFFVOXdaMElzUjBGR1JYSkpMRVZCUVZWRExGZEJRV0ZrTEdkQ1FVRXdReXhsUVVGNlFtOUVMRkZCUVZGRExFbEJRVWxETEZOQlFUUkNMMFFzVjBGQlZTeEZRVUZQTEcxUFFVRjNUMjVDTEdWQlFXVXNUMEZGZEZaclJDeEZRVUZaZDBJc2FVSkJRV3RDTEVOQlEyaERMRXRCUVU5cVF5eEZRVUZWT0VNc1YwRkRaamxETEVWQlFWVXJReXhaUVVGWkwwTXNSVUZCVlRoRExGZEJSV3hEY2tZc1dVRkJXVGhMTEdsQ1FVRnBRblpKTEVWQlFWZHpRaXhGUVVGUkxGZEJSV2hFTTBNc1lVRkJZWEZDTEVWQlFWZHpRaXhIUVVONFFuaEVMSE5DUVVGelFuVktMR0ZCUVdGb1JpeEZRVUZWY2tNc1JVRkJWVWNzV1VGSGVrUXNSMEZCTmtJc1pVRkJla0p2UXl4UlFVRlJReXhKUVVGSlF5eFRRVUV5UWl4RFFVTjZReXhKUVVGSkswWXNSVUZCVnpGTExITkNRVUZ6UW5GR0xHOUNRVUZ2UW01RUxFVkJRVlZITEZsQlEzcERMRWxCUVhSQ2NVa3NSVUZCVTBNc1ZVRkRXSFJMTEhGQ1FVRnhRblZGTEZWQlFWVm5SeXhuUWtGQlowSXNRMEZETjBORExGZEJRVmxJTEVWQlFWTkRMRk5CUTNKQ00wZ3NTMEZCVFN4UlFVTk9PRWdzVVVGQlUzUklMRVZCUVU5MVNDeG5Ra0ZQTVVKRExFOUJRVTlETEZGQlFWVndTQ0lzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEMxa2IyMHZiR2xpTDFKbFlXTjBUVzkxYm5RdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9wcm9kSW52YXJpYW50PXJlcXVpcmUoXCIuL3JlYWN0UHJvZEludmFyaWFudFwiKSxSZWFjdENvbXBvbmVudEVudmlyb25tZW50PXJlcXVpcmUoXCIuL1JlYWN0Q29tcG9uZW50RW52aXJvbm1lbnRcIiksUmVhY3RJbnN0YW5jZU1hcD1yZXF1aXJlKFwiLi9SZWFjdEluc3RhbmNlTWFwXCIpLFJlYWN0SW5zdHJ1bWVudGF0aW9uPXJlcXVpcmUoXCIuL1JlYWN0SW5zdHJ1bWVudGF0aW9uXCIpLFJlYWN0Q3VycmVudE93bmVyPXJlcXVpcmUoXCJyZWFjdC9saWIvUmVhY3RDdXJyZW50T3duZXJcIiksUmVhY3RSZWNvbmNpbGVyPXJlcXVpcmUoXCIuL1JlYWN0UmVjb25jaWxlclwiKSxSZWFjdENoaWxkUmVjb25jaWxlcj1yZXF1aXJlKFwiLi9SZWFjdENoaWxkUmVjb25jaWxlclwiKSxlbXB0eUZ1bmN0aW9uPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uXCIpLGZsYXR0ZW5DaGlsZHJlbj1yZXF1aXJlKFwiLi9mbGF0dGVuQ2hpbGRyZW5cIiksaW52YXJpYW50PXJlcXVpcmUoXCJmYmpzL2xpYi9pbnZhcmlhbnRcIik7ZnVuY3Rpb24gbWFrZUluc2VydE1hcmt1cChlLG4sdCl7cmV0dXJue3R5cGU6XCJJTlNFUlRfTUFSS1VQXCIsY29udGVudDplLGZyb21JbmRleDpudWxsLGZyb21Ob2RlOm51bGwsdG9JbmRleDp0LGFmdGVyTm9kZTpufX1mdW5jdGlvbiBtYWtlTW92ZShlLG4sdCl7cmV0dXJue3R5cGU6XCJNT1ZFX0VYSVNUSU5HXCIsY29udGVudDpudWxsLGZyb21JbmRleDplLl9tb3VudEluZGV4LGZyb21Ob2RlOlJlYWN0UmVjb25jaWxlci5nZXRIb3N0Tm9kZShlKSx0b0luZGV4OnQsYWZ0ZXJOb2RlOm59fWZ1bmN0aW9uIG1ha2VSZW1vdmUoZSxuKXtyZXR1cm57dHlwZTpcIlJFTU9WRV9OT0RFXCIsY29udGVudDpudWxsLGZyb21JbmRleDplLl9tb3VudEluZGV4LGZyb21Ob2RlOm4sdG9JbmRleDpudWxsLGFmdGVyTm9kZTpudWxsfX1mdW5jdGlvbiBtYWtlU2V0TWFya3VwKGUpe3JldHVybnt0eXBlOlwiU0VUX01BUktVUFwiLGNvbnRlbnQ6ZSxmcm9tSW5kZXg6bnVsbCxmcm9tTm9kZTpudWxsLHRvSW5kZXg6bnVsbCxhZnRlck5vZGU6bnVsbH19ZnVuY3Rpb24gbWFrZVRleHRDb250ZW50KGUpe3JldHVybnt0eXBlOlwiVEVYVF9DT05URU5UXCIsY29udGVudDplLGZyb21JbmRleDpudWxsLGZyb21Ob2RlOm51bGwsdG9JbmRleDpudWxsLGFmdGVyTm9kZTpudWxsfX1mdW5jdGlvbiBlbnF1ZXVlKGUsbil7cmV0dXJuIG4mJihlPWV8fFtdKS5wdXNoKG4pLGV9ZnVuY3Rpb24gcHJvY2Vzc1F1ZXVlKGUsbil7UmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC5wcm9jZXNzQ2hpbGRyZW5VcGRhdGVzKGUsbil9dmFyIHNldENoaWxkcmVuRm9ySW5zdHJ1bWVudGF0aW9uPWVtcHR5RnVuY3Rpb247aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVil7dmFyIGdldERlYnVnSUQ9ZnVuY3Rpb24oZSl7dmFyIG47ZS5fZGVidWdJRHx8KG49UmVhY3RJbnN0YW5jZU1hcC5nZXQoZSkpJiYoZT1uKTtyZXR1cm4gZS5fZGVidWdJRH07c2V0Q2hpbGRyZW5Gb3JJbnN0cnVtZW50YXRpb249ZnVuY3Rpb24oZSl7dmFyIG49Z2V0RGVidWdJRCh0aGlzKTswIT09biYmUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uU2V0Q2hpbGRyZW4obixlP09iamVjdC5rZXlzKGUpLm1hcChmdW5jdGlvbihuKXtyZXR1cm4gZVtuXS5fZGVidWdJRH0pOltdKX19dmFyIFJlYWN0TXVsdGlDaGlsZD17TWl4aW46e19yZWNvbmNpbGVySW5zdGFudGlhdGVDaGlsZHJlbjpmdW5jdGlvbihlLG4sdCl7aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVil7dmFyIHI9Z2V0RGVidWdJRCh0aGlzKTtpZih0aGlzLl9jdXJyZW50RWxlbWVudCl0cnl7cmV0dXJuIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQ9dGhpcy5fY3VycmVudEVsZW1lbnQuX293bmVyLFJlYWN0Q2hpbGRSZWNvbmNpbGVyLmluc3RhbnRpYXRlQ2hpbGRyZW4oZSxuLHQscil9ZmluYWxseXtSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50PW51bGx9fXJldHVybiBSZWFjdENoaWxkUmVjb25jaWxlci5pbnN0YW50aWF0ZUNoaWxkcmVuKGUsbix0KX0sX3JlY29uY2lsZXJVcGRhdGVDaGlsZHJlbjpmdW5jdGlvbihlLG4sdCxyLGksbyl7dmFyIHUsYT0wO2lmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJihhPWdldERlYnVnSUQodGhpcyksdGhpcy5fY3VycmVudEVsZW1lbnQpKXt0cnl7UmVhY3RDdXJyZW50T3duZXIuY3VycmVudD10aGlzLl9jdXJyZW50RWxlbWVudC5fb3duZXIsdT1mbGF0dGVuQ2hpbGRyZW4obixhKX1maW5hbGx5e1JlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQ9bnVsbH1yZXR1cm4gUmVhY3RDaGlsZFJlY29uY2lsZXIudXBkYXRlQ2hpbGRyZW4oZSx1LHQscixpLHRoaXMsdGhpcy5faG9zdENvbnRhaW5lckluZm8sbyxhKSx1fXJldHVybiB1PWZsYXR0ZW5DaGlsZHJlbihuLGEpLFJlYWN0Q2hpbGRSZWNvbmNpbGVyLnVwZGF0ZUNoaWxkcmVuKGUsdSx0LHIsaSx0aGlzLHRoaXMuX2hvc3RDb250YWluZXJJbmZvLG8sYSksdX0sbW91bnRDaGlsZHJlbjpmdW5jdGlvbihlLG4sdCl7dmFyIHI9dGhpcy5fcmVjb25jaWxlckluc3RhbnRpYXRlQ2hpbGRyZW4oZSxuLHQpO3RoaXMuX3JlbmRlcmVkQ2hpbGRyZW49cjt2YXIgaT1bXSxvPTA7Zm9yKHZhciB1IGluIHIpaWYoci5oYXNPd25Qcm9wZXJ0eSh1KSl7dmFyIGE9clt1XSxjPTA7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKGM9Z2V0RGVidWdJRCh0aGlzKSk7dmFyIGw9UmVhY3RSZWNvbmNpbGVyLm1vdW50Q29tcG9uZW50KGEsbix0aGlzLHRoaXMuX2hvc3RDb250YWluZXJJbmZvLHQsYyk7YS5fbW91bnRJbmRleD1vKyssaS5wdXNoKGwpfXJldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJnNldENoaWxkcmVuRm9ySW5zdHJ1bWVudGF0aW9uLmNhbGwodGhpcyxyKSxpfSx1cGRhdGVUZXh0Q29udGVudDpmdW5jdGlvbihlKXt2YXIgbj10aGlzLl9yZW5kZXJlZENoaWxkcmVuO2Zvcih2YXIgdCBpbiBSZWFjdENoaWxkUmVjb25jaWxlci51bm1vdW50Q2hpbGRyZW4obiwhMSksbiluLmhhc093blByb3BlcnR5KHQpJiYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoITEsXCJ1cGRhdGVUZXh0Q29udGVudCBjYWxsZWQgb24gbm9uLWVtcHR5IGNvbXBvbmVudC5cIik6X3Byb2RJbnZhcmlhbnQoXCIxMThcIikpO3Byb2Nlc3NRdWV1ZSh0aGlzLFttYWtlVGV4dENvbnRlbnQoZSldKX0sdXBkYXRlTWFya3VwOmZ1bmN0aW9uKGUpe3ZhciBuPXRoaXMuX3JlbmRlcmVkQ2hpbGRyZW47Zm9yKHZhciB0IGluIFJlYWN0Q2hpbGRSZWNvbmNpbGVyLnVubW91bnRDaGlsZHJlbihuLCExKSxuKW4uaGFzT3duUHJvcGVydHkodCkmJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcInVwZGF0ZVRleHRDb250ZW50IGNhbGxlZCBvbiBub24tZW1wdHkgY29tcG9uZW50LlwiKTpfcHJvZEludmFyaWFudChcIjExOFwiKSk7cHJvY2Vzc1F1ZXVlKHRoaXMsW21ha2VTZXRNYXJrdXAoZSldKX0sdXBkYXRlQ2hpbGRyZW46ZnVuY3Rpb24oZSxuLHQpe3RoaXMuX3VwZGF0ZUNoaWxkcmVuKGUsbix0KX0sX3VwZGF0ZUNoaWxkcmVuOmZ1bmN0aW9uKGUsbix0KXt2YXIgcj10aGlzLl9yZW5kZXJlZENoaWxkcmVuLGk9e30sbz1bXSx1PXRoaXMuX3JlY29uY2lsZXJVcGRhdGVDaGlsZHJlbihyLGUsbyxpLG4sdCk7aWYodXx8cil7dmFyIGEsYz1udWxsLGw9MCxkPTAsaD0wLHM9bnVsbDtmb3IoYSBpbiB1KWlmKHUuaGFzT3duUHJvcGVydHkoYSkpe3ZhciBtPXImJnJbYV0sQz11W2FdO209PT1DPyhjPWVucXVldWUoYyx0aGlzLm1vdmVDaGlsZChtLHMsbCxkKSksZD1NYXRoLm1heChtLl9tb3VudEluZGV4LGQpLG0uX21vdW50SW5kZXg9bCk6KG0mJihkPU1hdGgubWF4KG0uX21vdW50SW5kZXgsZCkpLGM9ZW5xdWV1ZShjLHRoaXMuX21vdW50Q2hpbGRBdEluZGV4KEMsb1toXSxzLGwsbix0KSksaCsrKSxsKysscz1SZWFjdFJlY29uY2lsZXIuZ2V0SG9zdE5vZGUoQyl9Zm9yKGEgaW4gaSlpLmhhc093blByb3BlcnR5KGEpJiYoYz1lbnF1ZXVlKGMsdGhpcy5fdW5tb3VudENoaWxkKHJbYV0saVthXSkpKTtjJiZwcm9jZXNzUXVldWUodGhpcyxjKSx0aGlzLl9yZW5kZXJlZENoaWxkcmVuPXUsXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmc2V0Q2hpbGRyZW5Gb3JJbnN0cnVtZW50YXRpb24uY2FsbCh0aGlzLHUpfX0sdW5tb3VudENoaWxkcmVuOmZ1bmN0aW9uKGUpe3ZhciBuPXRoaXMuX3JlbmRlcmVkQ2hpbGRyZW47UmVhY3RDaGlsZFJlY29uY2lsZXIudW5tb3VudENoaWxkcmVuKG4sZSksdGhpcy5fcmVuZGVyZWRDaGlsZHJlbj1udWxsfSxtb3ZlQ2hpbGQ6ZnVuY3Rpb24oZSxuLHQscil7aWYoZS5fbW91bnRJbmRleDxyKXJldHVybiBtYWtlTW92ZShlLG4sdCl9LGNyZWF0ZUNoaWxkOmZ1bmN0aW9uKGUsbix0KXtyZXR1cm4gbWFrZUluc2VydE1hcmt1cCh0LG4sZS5fbW91bnRJbmRleCl9LHJlbW92ZUNoaWxkOmZ1bmN0aW9uKGUsbil7cmV0dXJuIG1ha2VSZW1vdmUoZSxuKX0sX21vdW50Q2hpbGRBdEluZGV4OmZ1bmN0aW9uKGUsbix0LHIsaSxvKXtyZXR1cm4gZS5fbW91bnRJbmRleD1yLHRoaXMuY3JlYXRlQ2hpbGQoZSx0LG4pfSxfdW5tb3VudENoaWxkOmZ1bmN0aW9uKGUsbil7dmFyIHQ9dGhpcy5yZW1vdmVDaGlsZChlLG4pO3JldHVybiBlLl9tb3VudEluZGV4PW51bGwsdH19fTttb2R1bGUuZXhwb3J0cz1SZWFjdE11bHRpQ2hpbGQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbEpsWVdOMFRYVnNkR2xEYUdsc1pDNXFjeUpkTENKdVlXMWxjeUk2V3lKZmNISnZaRWx1ZG1GeWFXRnVkQ0lzSW5KbGNYVnBjbVVpTENKU1pXRmpkRU52YlhCdmJtVnVkRVZ1ZG1seWIyNXRaVzUwSWl3aVVtVmhZM1JKYm5OMFlXNWpaVTFoY0NJc0lsSmxZV04wU1c1emRISjFiV1Z1ZEdGMGFXOXVJaXdpVW1WaFkzUkRkWEp5Wlc1MFQzZHVaWElpTENKU1pXRmpkRkpsWTI5dVkybHNaWElpTENKU1pXRmpkRU5vYVd4a1VtVmpiMjVqYVd4bGNpSXNJbVZ0Y0hSNVJuVnVZM1JwYjI0aUxDSm1iR0YwZEdWdVEyaHBiR1J5Wlc0aUxDSnBiblpoY21saGJuUWlMQ0p0WVd0bFNXNXpaWEowVFdGeWEzVndJaXdpYldGeWEzVndJaXdpWVdaMFpYSk9iMlJsSWl3aWRHOUpibVJsZUNJc0luUjVjR1VpTENKamIyNTBaVzUwSWl3aVpuSnZiVWx1WkdWNElpd2labkp2YlU1dlpHVWlMQ0p0WVd0bFRXOTJaU0lzSW1Ob2FXeGtJaXdpWDIxdmRXNTBTVzVrWlhnaUxDSm5aWFJJYjNOMFRtOWtaU0lzSW0xaGEyVlNaVzF2ZG1VaUxDSnViMlJsSWl3aWJXRnJaVk5sZEUxaGNtdDFjQ0lzSW0xaGEyVlVaWGgwUTI5dWRHVnVkQ0lzSW5SbGVIUkRiMjUwWlc1MElpd2laVzV4ZFdWMVpTSXNJbkYxWlhWbElpd2lkWEJrWVhSbElpd2ljSFZ6YUNJc0luQnliMk5sYzNOUmRXVjFaU0lzSW1sdWMzUWlMQ0oxY0dSaGRHVlJkV1YxWlNJc0luQnliMk5sYzNORGFHbHNaSEpsYmxWd1pHRjBaWE1pTENKelpYUkRhR2xzWkhKbGJrWnZja2x1YzNSeWRXMWxiblJoZEdsdmJpSXNJbkJ5YjJObGMzTWlMQ0psYm5ZaUxDSk9UMFJGWDBWT1ZpSXNJbWRsZEVSbFluVm5TVVFpTENKcGJuUmxjbTVoYkNJc0lsOWtaV0oxWjBsRUlpd2laMlYwSWl3aVkyaHBiR1J5Wlc0aUxDSmtaV0oxWjBsRUlpd2lkR2hwY3lJc0ltUmxZblZuVkc5dmJDSXNJbTl1VTJWMFEyaHBiR1J5Wlc0aUxDSlBZbXBsWTNRaUxDSnJaWGx6SWl3aWJXRndJaXdpYTJWNUlpd2lVbVZoWTNSTmRXeDBhVU5vYVd4a0lpd2lUV2w0YVc0aUxDSmZjbVZqYjI1amFXeGxja2x1YzNSaGJuUnBZWFJsUTJocGJHUnlaVzRpTENKdVpYTjBaV1JEYUdsc1pISmxiaUlzSW5SeVlXNXpZV04wYVc5dUlpd2lZMjl1ZEdWNGRDSXNJbk5sYkdaRVpXSjFaMGxFSWl3aVgyTjFjbkpsYm5SRmJHVnRaVzUwSWl3aVkzVnljbVZ1ZENJc0lsOXZkMjVsY2lJc0ltbHVjM1JoYm5ScFlYUmxRMmhwYkdSeVpXNGlMQ0pmY21WamIyNWphV3hsY2xWd1pHRjBaVU5vYVd4a2NtVnVJaXdpY0hKbGRrTm9hV3hrY21WdUlpd2libVY0ZEU1bGMzUmxaRU5vYVd4a2NtVnVSV3hsYldWdWRITWlMQ0p0YjNWdWRFbHRZV2RsY3lJc0luSmxiVzkyWldST2IyUmxjeUlzSW01bGVIUkRhR2xzWkhKbGJpSXNJblZ3WkdGMFpVTm9hV3hrY21WdUlpd2lYMmh2YzNSRGIyNTBZV2x1WlhKSmJtWnZJaXdpYlc5MWJuUkRhR2xzWkhKbGJpSXNJbDl5Wlc1a1pYSmxaRU5vYVd4a2NtVnVJaXdpYVc1a1pYZ2lMQ0p1WVcxbElpd2lhR0Z6VDNkdVVISnZjR1Z5ZEhraUxDSnRiM1Z1ZEVsdFlXZGxJaXdpYlc5MWJuUkRiMjF3YjI1bGJuUWlMQ0pqWVd4c0lpd2lkWEJrWVhSbFZHVjRkRU52Ym5SbGJuUWlMQ0p1WlhoMFEyOXVkR1Z1ZENJc0luVnViVzkxYm5SRGFHbHNaSEpsYmlJc0luVndaR0YwWlUxaGNtdDFjQ0lzSW01bGVIUk5ZWEpyZFhBaUxDSmZkWEJrWVhSbFEyaHBiR1J5Wlc0aUxDSjFjR1JoZEdWeklpd2libVY0ZEVsdVpHVjRJaXdpYkdGemRFbHVaR1Y0SWl3aWJtVjRkRTF2ZFc1MFNXNWtaWGdpTENKc1lYTjBVR3hoWTJWa1RtOWtaU0lzSW5CeVpYWkRhR2xzWkNJc0ltNWxlSFJEYUdsc1pDSXNJbTF2ZG1WRGFHbHNaQ0lzSWsxaGRHZ2lMQ0p0WVhnaUxDSmZiVzkxYm5SRGFHbHNaRUYwU1c1a1pYZ2lMQ0pmZFc1dGIzVnVkRU5vYVd4a0lpd2ljMkZtWld4NUlpd2ljbVZ1WkdWeVpXUkRhR2xzWkhKbGJpSXNJbU55WldGMFpVTm9hV3hrSWl3aWNtVnRiM1psUTJocGJHUWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRlJRU3hoUVVWQkxFbEJRVWxCTEdWQlFXbENReXhSUVVGUkxIZENRVVY2UWtNc01FSkJRVFJDUkN4UlFVRlJMQ3RDUVVOd1EwVXNhVUpCUVcxQ1JpeFJRVUZSTEhOQ1FVTXpRa2NzY1VKQlFYVkNTQ3hSUVVGUkxEQkNRVVV2UWtrc2EwSkJRVzlDU2l4UlFVRlJMQ3RDUVVNMVFrc3NaMEpCUVd0Q1RDeFJRVUZSTEhGQ1FVTXhRazBzY1VKQlFYVkNUaXhSUVVGUkxEQkNRVVV2UWs4c1kwRkJaMEpRTEZGQlFWRXNNRUpCUTNoQ1VTeG5Ra0ZCYTBKU0xGRkJRVkVzY1VKQlF6RkNVeXhWUVVGWlZDeFJRVUZSTEhOQ1FWTjRRaXhUUVVGVFZTeHBRa0ZCYVVKRExFVkJRVkZETEVWQlFWZERMRWRCUlRORExFMUJRVThzUTBGRFRFTXNTMEZCVFN4blFrRkRUa01zVVVGQlUwb3NSVUZEVkVzc1ZVRkJWeXhMUVVOWVF5eFRRVUZWTEV0QlExWktMRkZCUVZOQkxFVkJRMVJFTEZWQlFWZEJMRWRCVjJZc1UwRkJVMDBzVTBGQlUwTXNSVUZCVDFBc1JVRkJWME1zUjBGRmJFTXNUVUZCVHl4RFFVTk1ReXhMUVVGTkxHZENRVU5PUXl4UlFVRlRMRXRCUTFSRExGVkJRVmRITEVWQlFVMURMRmxCUTJwQ1NDeFRRVUZWV2l4blFrRkJaMEpuUWl4WlFVRlpSaXhIUVVOMFEwNHNVVUZCVTBFc1JVRkRWRVFzVlVGQlYwRXNSMEZWWml4VFFVRlRWU3hYUVVGWFNDeEZRVUZQU1N4SFFVVjZRaXhOUVVGUExFTkJRMHhVTEV0QlFVMHNZMEZEVGtNc1VVRkJVeXhMUVVOVVF5eFZRVUZYUnl4RlFVRk5ReXhaUVVOcVFrZ3NVMEZCVlUwc1JVRkRWbFlzVVVGQlV5eExRVU5VUkN4VlFVRlhMRTFCVldZc1UwRkJVMWtzWTBGQlkySXNSMEZGY2tJc1RVRkJUeXhEUVVOTVJ5eExRVUZOTEdGQlEwNURMRkZCUVZOS0xFVkJRMVJMTEZWQlFWY3NTMEZEV0VNc1UwRkJWU3hMUVVOV1NpeFJRVUZUTEV0QlExUkVMRlZCUVZjc1RVRlZaaXhUUVVGVFlTeG5Ra0ZCWjBKRExFZEJSWFpDTEUxQlFVOHNRMEZEVEZvc1MwRkJUU3hsUVVOT1F5eFJRVUZUVnl4RlFVTlVWaXhWUVVGWExFdEJRMWhETEZOQlFWVXNTMEZEVmtvc1VVRkJVeXhMUVVOVVJDeFZRVUZYTEUxQlVXWXNVMEZCVTJVc1VVRkJVVU1zUlVGQlQwTXNSMEZMZEVJc1QwRktTVUVzU1VGRFJrUXNSVUZCVVVFc1IwRkJVeXhKUVVOWVJTeExRVUZMUkN4SFFVVk9SQ3hGUVZGVUxGTkJRVk5ITEdGQlFXRkRMRVZCUVUxRExFZEJRekZDYUVNc01FSkJRVEJDYVVNc2RVSkJRWFZDUml4RlFVRk5ReXhIUVVkNlJDeEpRVUZKUlN3NFFrRkJaME0xUWl4alFVTndReXhIUVVFMlFpeGxRVUY2UWpaQ0xGRkJRVkZETEVsQlFVbERMRk5CUVRKQ0xFTkJRM3BETEVsQlFVbERMRmRCUVdFc1UwRkJWVkFzUjBGSGRrSXNTVUZCU1ZFc1JVRkdSRklzUlVGQlMxTXNWMEZIU2tRc1JVRkJWM1JETEdsQ1FVRnBRbmRETEVsQlFVbFdMRTFCUTJ4RFFTeEZRVUZQVVN4SFFVZFlMRTlCUVU5U0xFVkJRVXRUTEZWQlJXUk9MRGhDUVVGblF5eFRRVUZWVVN4SFFVTjRReXhKUVVGSlF5eEZRVUZWVEN4WFFVRlhUU3hOUVVkVUxFbEJRVnBFTEVkQlEwWjZReXh4UWtGQmNVSXlReXhWUVVGVlF5eGpRVUZqU0N4RlFVRlRSQ3hGUVVGWFN5eFBRVUZQUXl4TFFVRkxUaXhIUVVGVlR5eEpRVUZKTEZOQlFWVkRMRWRCUTI1SExFOUJRVTlTTEVWQlFWTlJMRWRCUVV0V0xGZEJRMnhDTEV0QlYxZ3NTVUZCU1Zjc1owSkJRV3RDTEVOQlVYQkNReXhOUVVGUExFTkJRMHhETEN0Q1FVRm5ReXhUUVVGVlF5eEZRVUZuUWtNc1JVRkJZVU1zUjBGRGNrVXNSMEZCTmtJc1pVRkJla0p5UWl4UlFVRlJReXhKUVVGSlF5eFRRVUV5UWl4RFFVTjZReXhKUVVGSmIwSXNSVUZCWTI1Q0xGZEJRVmROTEUxQlF6ZENMRWRCUVVsQkxFdEJRVXRqTEdkQ1FVTlFMRWxCUlVVc1QwRkVRWFpFTEd0Q1FVRnJRbmRFTEZGQlFWVm1MRXRCUVV0akxHZENRVUZuUWtVc1QwRkRNVU4yUkN4eFFrRkJjVUozUkN4dlFrRkJiMEpRTEVWQlFXZENReXhGUVVGaFF5eEZRVUZUUXl4SFFVTjBSaXhSUVVOQmRFUXNhMEpCUVd0Q2QwUXNVVUZCVlN4TlFVbHNReXhQUVVGUGRFUXNjVUpCUVhGQ2QwUXNiMEpCUVc5Q1VDeEZRVUZuUWtNc1JVRkJZVU1zU1VGSEwwVk5MREJDUVVFeVFpeFRRVUZWUXl4RlFVRmpReXhGUVVFMFFrTXNSVUZCWVVNc1JVRkJZMWdzUlVGQllVTXNSMEZEY2tnc1NVRkJTVmNzUlVGRFFWWXNSVUZCWXl4RlFVTnNRaXhIUVVFMlFpeGxRVUY2UW5SQ0xGRkJRVkZETEVsQlFVbERMRmRCUTJSdlFpeEZRVUZqYmtJc1YwRkJWMDBzVFVGRGNrSkJMRXRCUVV0akxHbENRVUZwUWl4RFFVTjRRaXhKUVVORmRrUXNhMEpCUVd0Q2QwUXNVVUZCVldZc1MwRkJTMk1zWjBKQlFXZENSU3hQUVVOcVJFOHNSVUZCWlRWRUxHZENRVUZuUW5sRUxFVkJRVFJDVUN4SFFVTXpSQ3hSUVVOQmRFUXNhMEpCUVd0Q2QwUXNVVUZCVlN4TFFVYzVRaXhQUVVSQmRFUXNjVUpCUVhGQ0swUXNaVUZCWlV3c1JVRkJZMGtzUlVGQlkwWXNSVUZCWVVNc1JVRkJZMWdzUlVGQllWZ3NTMEZCVFVFc1MwRkJTM2xDTEcxQ1FVRnZRbUlzUlVGQlUwTXNSMEZEZWtsVkxFVkJTMWdzVDBGR1FVRXNSVUZCWlRWRUxHZENRVUZuUW5sRUxFVkJRVFJDVUN4SFFVTXpSSEJFTEhGQ1FVRnhRaXRFTEdWQlFXVk1MRVZCUVdOSkxFVkJRV05HTEVWQlFXRkRMRVZCUVdOWUxFVkJRV0ZZTEV0QlFVMUJMRXRCUVV0NVFpeHRRa0ZCYjBKaUxFVkJRVk5ETEVkQlEzcEpWU3hIUVZkVVJ5eGpRVUZsTEZOQlFWVm9RaXhGUVVGblFrTXNSVUZCWVVNc1IwRkRjRVFzU1VGQlNXUXNSVUZCVjBVc1MwRkJTMU1zSzBKQlFTdENReXhGUVVGblFrTXNSVUZCWVVNc1IwRkRhRVphTEV0QlFVc3lRaXhyUWtGQmIwSTNRaXhGUVVWNlFpeEpRVUZKZFVJc1JVRkJZeXhIUVVOa1R5eEZRVUZSTEVWQlExb3NTVUZCU3l4SlFVRkpReXhMUVVGUkwwSXNSVUZEWml4SFFVRkpRU3hGUVVGVFowTXNaVUZCWlVRc1IwRkJUeXhEUVVOcVF5eEpRVUZKZGtRc1JVRkJVWGRDTEVWQlFWTXJRaXhIUVVOcVFtaENMRVZCUVdNc1JVRkRWeXhsUVVGNlFuUkNMRkZCUVZGRExFbEJRVWxETEZkQlEyUnZRaXhGUVVGamJrSXNWMEZCVjAwc1QwRkZNMElzU1VGQlNTdENMRVZCUVdGMlJTeG5Ra0ZCWjBKM1JTeGxRVUZsTVVRc1JVRkJUM0ZETEVWQlFXRllMRXRCUVUxQkxFdEJRVXQ1UWl4dFFrRkJiMEppTEVWQlFWTkRMRWRCUXpWSGRrTXNSVUZCVFVNc1dVRkJZM0ZFTEVsQlEzQkNVQ3hGUVVGWmNFTXNTMEZCU3poRExFZEJVWEpDTEUxQlNqWkNMR1ZCUVhwQ2VFTXNVVUZCVVVNc1NVRkJTVU1zVlVGRFpFZ3NPRUpCUVRoQ01rTXNTMEZCUzJwRExFdEJRVTFHTEVkQlIzQkRkVUlzUjBGVFZHRXNhMEpCUVcxQ0xGTkJRVlZETEVkQlF6TkNMRWxCUVVsb1FpeEZRVUZsYmtJc1MwRkJTekpDTEd0Q1FVZDRRaXhKUVVGTExFbEJRVWxGTEV0QlJGUndSU3h4UWtGQmNVSXlSU3huUWtGQlowSnFRaXhIUVVGakxFZEJRMnhEUVN4RlFVTllRU3hGUVVGaFZ5eGxRVUZsUkN4TFFVTkpMR1ZCUVhwQ2RFTXNVVUZCVVVNc1NVRkJTVU1zVTBGQk5FSTNRaXhYUVVGVkxFVkJRVThzYjBSQlFYTkVWaXhsUVVGbExGRkJTek5KWjBNc1lVRkJZV01zUzBGRVF5eERRVUZEY0VJc1owSkJRV2RDZFVRc1RVRlZha05GTEdGQlFXTXNVMEZCVlVNc1IwRkRkRUlzU1VGQlNXNUNMRVZCUVdWdVFpeExRVUZMTWtJc2EwSkJSM2hDTEVsQlFVc3NTVUZCU1VVc1MwRkVWSEJGTEhGQ1FVRnhRakpGTEdkQ1FVRm5RbXBDTEVkQlFXTXNSMEZEYkVOQkxFVkJRMWhCTEVWQlFXRlhMR1ZCUVdWRUxFdEJRMGtzWlVGQmVrSjBReXhSUVVGUlF5eEpRVUZKUXl4VFFVRTBRamRDTEZkQlFWVXNSVUZCVHl4dlJFRkJjMFJXTEdWQlFXVXNVVUZKTTBsblF5eGhRVUZoWXl4TFFVUkRMRU5CUVVOeVFpeGpRVUZqTWtRc1RVRlhMMEprTEdWQlFXZENMRk5CUVZWS0xFVkJRVFJDVkN4RlFVRmhReXhIUVVWcVJWb3NTMEZCUzNWRExHZENRVUZuUW01Q0xFVkJRVFJDVkN4RlFVRmhReXhKUVZOb1JUSkNMR2RDUVVGcFFpeFRRVUZWYmtJc1JVRkJORUpVTEVWQlFXRkRMRWRCUTJ4RkxFbEJRVWxQTEVWQlFXVnVRaXhMUVVGTE1rSXNhMEpCUTNCQ1RDeEZRVUZsTEVkQlEyWkVMRVZCUVdNc1IwRkRaRVVzUlVGQlpYWkNMRXRCUVV0clFpd3dRa0ZCTUVKRExFVkJRV05ETEVWQlFUUkNReXhGUVVGaFF5eEZRVUZqV0N4RlFVRmhReXhIUVVOd1NTeEhRVUZMVnl4SFFVRnBRa29zUlVGQmRFSXNRMEZIUVN4SlFVTkpWU3hGUVVSQlZ5eEZRVUZWTEV0QlNWWkRMRVZCUVZrc1JVRkRXa01zUlVGQldTeEZRVVZhUXl4RlFVRnBRaXhGUVVOcVFrTXNSVUZCYVVJc1MwRkRja0lzU1VGQlMyWXNTMEZCVVU0c1JVRkRXQ3hIUVVGTFFTeEZRVUZoVHl4bFFVRmxSQ3hIUVVGcVF5eERRVWRCTEVsQlFVbG5RaXhGUVVGWk1VSXNSMEZCWjBKQkxFVkJRV0ZWTEVkQlEzcERhVUlzUlVGQldYWkNMRVZCUVdGTkxFZEJRM3BDWjBJc1NVRkJZME1zUjBGRGFFSk9MRVZCUVZVeFJDeFJRVUZSTUVRc1JVRkJVM2hETEV0QlFVc3JReXhWUVVGVlJpeEZRVUZYUkN4RlFVRm5Ra2dzUlVGQlYwTXNTVUZEYUVaQkxFVkJRVmxOTEV0QlFVdERMRWxCUVVsS0xFVkJRVlYwUlN4WlFVRmhiVVVzUjBGRE5VTkhMRVZCUVZWMFJTeFpRVUZqYTBVc1NVRkZjRUpKTEVsQlJVWklMRVZCUVZsTkxFdEJRVXRETEVsQlFVbEtMRVZCUVZWMFJTeFpRVUZoYlVVc1NVRkpPVU5HTEVWQlFWVXhSQ3hSUVVGUk1FUXNSVUZCVTNoRExFdEJRVXRyUkN4dFFrRkJiVUpLTEVWQlFWZDZRaXhGUVVGWmMwSXNSMEZCYVVKRExFVkJRV2RDU0N4RlFVRlhPVUlzUlVGQllVTXNTVUZEYmtrclFpeExRVVZHUml4SlFVTkJSeXhGUVVGcFFuQkdMR2RDUVVGblFtZENMRmxCUVZselJTeEhRVWN2UXl4SlFVRkxha0lzUzBGQlVWQXNSVUZEVUVFc1JVRkJZVkVzWlVGQlpVUXNTMEZET1VKWExFVkJRVlV4UkN4UlFVRlJNRVFzUlVGQlUzaERMRXRCUVV0dFJDeGpRVUZqYUVNc1JVRkJZVlVzUjBGQlQxQXNSVUZCWVU4c1RVRkhMMFZYTEVkQlEwWjBSQ3hoUVVGaFl5eExRVUZOZDBNc1IwRkZja0o0UXl4TFFVRkxNa0lzYTBKQlFXOUNTaXhGUVVWSkxHVkJRWHBDYUVNc1VVRkJVVU1zU1VGQlNVTXNWVUZEWkVnc09FSkJRVGhDTWtNc1MwRkJTMnBETEV0QlFVMTFRaXhMUVZjM1EyRXNaMEpCUVdsQ0xGTkJRVlZuUWl4SFFVTjZRaXhKUVVGSlF5eEZRVUZ0UW5KRUxFdEJRVXN5UWl4clFrRkROVUpzUlN4eFFrRkJjVUl5UlN4blFrRkJaMEpwUWl4RlFVRnJRa1FzUjBGRGRrUndSQ3hMUVVGTE1rSXNhMEpCUVc5Q0xFMUJWek5DYjBJc1ZVRkJWeXhUUVVGVmVrVXNSVUZCVDFBc1JVRkJWME1zUlVGQlV6QkZMRWRCU1RsRExFZEJRVWx3UlN4RlFVRk5ReXhaUVVGamJVVXNSVUZEZEVJc1QwRkJUM0pGTEZOQlFWTkRMRVZCUVU5UUxFVkJRVmRETEVsQlYzUkRjMFlzV1VGQllTeFRRVUZWYUVZc1JVRkJUMUFzUlVGQlYyZEZMRWRCUTNaRExFOUJRVTlzUlN4cFFrRkJhVUpyUlN4RlFVRlphRVVzUlVGQlYwOHNSVUZCVFVNc1kwRlRka1JuUml4WlFVRmhMRk5CUVZWcVJpeEZRVUZQU1N4SFFVTTFRaXhQUVVGUFJDeFhRVUZYU0N4RlFVRlBTU3hKUVdNelFuZEZMRzFDUVVGdlFpeFRRVUZWTlVVc1JVRkJUM2xFTEVWQlFWbG9SU3hGUVVGWE5rUXNSVUZCVDJwQ0xFVkJRV0ZETEVkQlJUbEZMRTlCUkVGMFF5eEZRVUZOUXl4WlFVRmpjVVFzUlVGRFlqVkNMRXRCUVV0elJDeFpRVUZaYUVZc1JVRkJUMUFzUlVGQlYyZEZMRWxCVnpWRGIwSXNZMEZCWlN4VFFVRlZOMFVzUlVGQlQwa3NSMEZET1VJc1NVRkJTVTBzUlVGQlUyZENMRXRCUVV0MVJDeFpRVUZaYWtZc1JVRkJUMGtzUjBGRmNrTXNUMEZFUVVvc1JVRkJUVU1zV1VGQll5eExRVU5pVXl4TFFVdGlkMFVzVDBGQlQwTXNVVUZCVld4RUlpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDNKbFlXTjBMV1J2YlM5c2FXSXZVbVZoWTNSTmRXeDBhVU5vYVd4a0xtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9wcm9kSW52YXJpYW50PXJlcXVpcmUoXCIuL3JlYWN0UHJvZEludmFyaWFudFwiKSxSZWFjdD1yZXF1aXJlKFwicmVhY3QvbGliL1JlYWN0XCIpLGludmFyaWFudD1yZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpLFJlYWN0Tm9kZVR5cGVzPXtIT1NUOjAsQ09NUE9TSVRFOjEsRU1QVFk6MixnZXRUeXBlOmZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT09ZXx8ITE9PT1lP1JlYWN0Tm9kZVR5cGVzLkVNUFRZOlJlYWN0LmlzVmFsaWRFbGVtZW50KGUpP1wiZnVuY3Rpb25cIj09dHlwZW9mIGUudHlwZT9SZWFjdE5vZGVUeXBlcy5DT01QT1NJVEU6UmVhY3ROb2RlVHlwZXMuSE9TVDp2b2lkKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwiVW5leHBlY3RlZCBub2RlOiAlc1wiLGUpOl9wcm9kSW52YXJpYW50KFwiMjZcIixlKSl9fTttb2R1bGUuZXhwb3J0cz1SZWFjdE5vZGVUeXBlcztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSmxZV04wVG05a1pWUjVjR1Z6TG1weklsMHNJbTVoYldWeklqcGJJbDl3Y205a1NXNTJZWEpwWVc1MElpd2ljbVZ4ZFdseVpTSXNJbEpsWVdOMElpd2lhVzUyWVhKcFlXNTBJaXdpVW1WaFkzUk9iMlJsVkhsd1pYTWlMQ0pJVDFOVUlpd2lRMDlOVUU5VFNWUkZJaXdpUlUxUVZGa2lMQ0puWlhSVWVYQmxJaXdpYm05a1pTSXNJbWx6Vm1Gc2FXUkZiR1Z0Wlc1MElpd2lkSGx3WlNJc0luQnliMk5sYzNNaUxDSmxibllpTENKT1QwUkZYMFZPVmlJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVZOQkxHRkJSVUVzU1VGQlNVRXNaVUZCYVVKRExGRkJRVkVzZDBKQlJYcENReXhOUVVGUlJDeFJRVUZSTEcxQ1FVVm9Ra1VzVlVGQldVWXNVVUZCVVN4elFrRkZjRUpITEdWQlFXbENMRU5CUTI1Q1F5eExRVUZOTEVWQlEwNURMRlZCUVZjc1JVRkRXRU1zVFVGQlR5eEZRVVZRUXl4UlFVRlRMRk5CUVZWRExFZEJRMnBDTEU5QlFXRXNUMEZCVkVFc1NVRkJNRUlzU1VGQlZFRXNSVUZEV2t3c1pVRkJaVWNzVFVGRFlrd3NUVUZCVFZFc1pVRkJaVVFzUjBGRFRDeHRRa0ZCWkVFc1JVRkJTMFVzUzBGRFVGQXNaVUZCWlVVc1ZVRkZaa1lzWlVGQlpVTXNWVUZIVVN4bFFVRjZRazhzVVVGQlVVTXNTVUZCU1VNc1UwRkJORUpZTEZkQlFWVXNSVUZCVHl4elFrRkJkVUpOTEVkQlFWRlVMR1ZCUVdVc1MwRkJUVk1zVFVGSk1VaE5MRTlCUVU5RExGRkJRVlZhSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdOMExXUnZiUzlzYVdJdlVtVmhZM1JPYjJSbFZIbHdaWE11YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgX3Byb2RJbnZhcmlhbnQ9cmVxdWlyZShcIi4vcmVhY3RQcm9kSW52YXJpYW50XCIpLGludmFyaWFudD1yZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpO2Z1bmN0aW9uIGlzVmFsaWRPd25lcihlKXtyZXR1cm4hKCFlfHxcImZ1bmN0aW9uXCIhPXR5cGVvZiBlLmF0dGFjaFJlZnx8XCJmdW5jdGlvblwiIT10eXBlb2YgZS5kZXRhY2hSZWYpfXZhciBSZWFjdE93bmVyPXthZGRDb21wb25lbnRBc1JlZlRvOmZ1bmN0aW9uKGUsbix0KXtpc1ZhbGlkT3duZXIodCl8fChcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcImFkZENvbXBvbmVudEFzUmVmVG8oLi4uKTogT25seSBhIFJlYWN0T3duZXIgY2FuIGhhdmUgcmVmcy4gWW91IG1pZ2h0IGJlIGFkZGluZyBhIHJlZiB0byBhIGNvbXBvbmVudCB0aGF0IHdhcyBub3QgY3JlYXRlZCBpbnNpZGUgYSBjb21wb25lbnQncyBgcmVuZGVyYCBtZXRob2QsIG9yIHlvdSBoYXZlIG11bHRpcGxlIGNvcGllcyBvZiBSZWFjdCBsb2FkZWQgKGRldGFpbHM6IGh0dHBzOi8vZmIubWUvcmVhY3QtcmVmcy1tdXN0LWhhdmUtb3duZXIpLlwiKTpfcHJvZEludmFyaWFudChcIjExOVwiKSksdC5hdHRhY2hSZWYobixlKX0scmVtb3ZlQ29tcG9uZW50QXNSZWZGcm9tOmZ1bmN0aW9uKGUsbix0KXtpc1ZhbGlkT3duZXIodCl8fChcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcInJlbW92ZUNvbXBvbmVudEFzUmVmRnJvbSguLi4pOiBPbmx5IGEgUmVhY3RPd25lciBjYW4gaGF2ZSByZWZzLiBZb3UgbWlnaHQgYmUgcmVtb3ZpbmcgYSByZWYgdG8gYSBjb21wb25lbnQgdGhhdCB3YXMgbm90IGNyZWF0ZWQgaW5zaWRlIGEgY29tcG9uZW50J3MgYHJlbmRlcmAgbWV0aG9kLCBvciB5b3UgaGF2ZSBtdWx0aXBsZSBjb3BpZXMgb2YgUmVhY3QgbG9hZGVkIChkZXRhaWxzOiBodHRwczovL2ZiLm1lL3JlYWN0LXJlZnMtbXVzdC1oYXZlLW93bmVyKS5cIik6X3Byb2RJbnZhcmlhbnQoXCIxMjBcIikpO3ZhciBhPXQuZ2V0UHVibGljSW5zdGFuY2UoKTthJiZhLnJlZnNbbl09PT1lLmdldFB1YmxpY0luc3RhbmNlKCkmJnQuZGV0YWNoUmVmKG4pfX07bW9kdWxlLmV4cG9ydHM9UmVhY3RPd25lcjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSmxZV04wVDNkdVpYSXVhbk1pWFN3aWJtRnRaWE1pT2xzaVgzQnliMlJKYm5aaGNtbGhiblFpTENKeVpYRjFhWEpsSWl3aWFXNTJZWEpwWVc1MElpd2lhWE5XWVd4cFpFOTNibVZ5SWl3aWIySnFaV04wSWl3aVlYUjBZV05vVW1WbUlpd2laR1YwWVdOb1VtVm1JaXdpVW1WaFkzUlBkMjVsY2lJc0ltRmtaRU52YlhCdmJtVnVkRUZ6VW1WbVZHOGlMQ0pqYjIxd2IyNWxiblFpTENKeVpXWWlMQ0p2ZDI1bGNpSXNJbkJ5YjJObGMzTWlMQ0psYm5ZaUxDSk9UMFJGWDBWT1ZpSXNJbkpsYlc5MlpVTnZiWEJ2Ym1WdWRFRnpVbVZtUm5KdmJTSXNJbTkzYm1WeVVIVmliR2xqU1c1emRHRnVZMlVpTENKblpYUlFkV0pzYVdOSmJuTjBZVzVqWlNJc0luSmxabk1pTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZUUVN4aFFVVkJMRWxCUVVsQkxHVkJRV2xDUXl4UlFVRlJMSGRDUVVWNlFrTXNWVUZCV1VRc1VVRkJVU3h6UWtGUGVFSXNVMEZCVTBVc1lVRkJZVU1zUjBGRGNFSXNVMEZCVlVFc1IwRkJjME1zYlVKQlFYSkNRU3hGUVVGUFF5eFhRVUYzUkN4dFFrRkJja0pFTEVWQlFVOUZMRmRCYVVNNVJTeEpRVUZKUXl4WFFVRmhMRU5CVldaRExHOUNRVUZ4UWl4VFFVRlZReXhGUVVGWFF5eEZRVUZMUXl4SFFVTTFRMUlzWVVGQllWRXNTMEZCYTBNc1pVRkJla0pETEZGQlFWRkRMRWxCUVVsRExGTkJRVFJDV2l4WFFVRlZMRVZCUVU4c2JWRkJRWE5SUml4bFFVRmxMRkZCUTNKWFZ5eEZRVUZOVGl4VlFVRlZTeXhGUVVGTFJDeEpRVmwyUWswc2VVSkJRVEJDTEZOQlFWVk9MRVZCUVZkRExFVkJRVXRETEVkQlEycEVVaXhoUVVGaFVTeExRVUZyUXl4bFFVRjZRa01zVVVGQlVVTXNTVUZCU1VNc1UwRkJORUphTEZkQlFWVXNSVUZCVHl3d1VVRkJObEZHTEdWQlFXVXNVVUZETlZjc1NVRkJTV2RDTEVWQlFYTkNUQ3hGUVVGTlRTeHZRa0ZITlVKRUxFZEJRWFZDUVN4RlFVRnZRa1VzUzBGQlMxSXNTMEZCVTBRc1JVRkJWVkVzY1VKQlEzSkZUaXhGUVVGTlRDeFZRVUZWU1N4TFFVdDBRbE1zVDBGQlQwTXNVVUZCVldJaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Y21WaFkzUXRaRzl0TDJ4cFlpOVNaV0ZqZEU5M2JtVnlMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcz17fTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXM9e3Byb3A6XCJwcm9wXCIsY29udGV4dDpcImNvbnRleHRcIixjaGlsZENvbnRleHQ6XCJjaGlsZCBjb250ZXh0XCJ9KSxtb2R1bGUuZXhwb3J0cz1SZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSmxZV04wVUhKdmNGUjVjR1ZNYjJOaGRHbHZiazVoYldWekxtcHpJbDBzSW01aGJXVnpJanBiSWxKbFlXTjBVSEp2Y0ZSNWNHVk1iMk5oZEdsdmJrNWhiV1Z6SWl3aWNISnZZMlZ6Y3lJc0ltVnVkaUlzSWs1UFJFVmZSVTVXSWl3aWNISnZjQ0lzSW1OdmJuUmxlSFFpTENKamFHbHNaRU52Ym5SbGVIUWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRlRRU3hoUVVWQkxFbEJRVWxCTERKQ1FVRTJRaXhIUVVWS0xHVkJRWHBDUXl4UlFVRlJReXhKUVVGSlF5eFhRVU5rU0N3eVFrRkJOa0lzUTBGRE0wSkpMRXRCUVUwc1QwRkRUa01zVVVGQlV5eFZRVU5VUXl4aFFVRmpMR3RDUVVsc1FrTXNUMEZCVDBNc1VVRkJWVklpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdFpHOXRMMnhwWWk5U1pXRmpkRkJ5YjNCVWVYQmxURzlqWVhScGIyNU9ZVzFsY3k1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQ9XCJTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRFwiO21vZHVsZS5leHBvcnRzPVJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxKbFlXTjBVSEp2Y0ZSNWNHVnpVMlZqY21WMExtcHpJbDBzSW01aGJXVnpJanBiSWxKbFlXTjBVSEp2Y0ZSNWNHVnpVMlZqY21WMElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlUwRXNZVUZGUVN4SlFVRkpRU3h4UWtGQmRVSXNLME5CUlROQ1F5eFBRVUZQUXl4UlFVRlZSaUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEMxa2IyMHZiR2xpTDFKbFlXTjBVSEp2Y0ZSNWNHVnpVMlZqY21WMExtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9hc3NpZ249cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksQ2FsbGJhY2tRdWV1ZT1yZXF1aXJlKFwiLi9DYWxsYmFja1F1ZXVlXCIpLFBvb2xlZENsYXNzPXJlcXVpcmUoXCIuL1Bvb2xlZENsYXNzXCIpLFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlcj1yZXF1aXJlKFwiLi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJcIiksUmVhY3RJbnB1dFNlbGVjdGlvbj1yZXF1aXJlKFwiLi9SZWFjdElucHV0U2VsZWN0aW9uXCIpLFJlYWN0SW5zdHJ1bWVudGF0aW9uPXJlcXVpcmUoXCIuL1JlYWN0SW5zdHJ1bWVudGF0aW9uXCIpLFRyYW5zYWN0aW9uPXJlcXVpcmUoXCIuL1RyYW5zYWN0aW9uXCIpLFJlYWN0VXBkYXRlUXVldWU9cmVxdWlyZShcIi4vUmVhY3RVcGRhdGVRdWV1ZVwiKSxTRUxFQ1RJT05fUkVTVE9SQVRJT049e2luaXRpYWxpemU6UmVhY3RJbnB1dFNlbGVjdGlvbi5nZXRTZWxlY3Rpb25JbmZvcm1hdGlvbixjbG9zZTpSZWFjdElucHV0U2VsZWN0aW9uLnJlc3RvcmVTZWxlY3Rpb259LEVWRU5UX1NVUFBSRVNTSU9OPXtpbml0aWFsaXplOmZ1bmN0aW9uKCl7dmFyIGU9UmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmlzRW5hYmxlZCgpO3JldHVybiBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuc2V0RW5hYmxlZCghMSksZX0sY2xvc2U6ZnVuY3Rpb24oZSl7UmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnNldEVuYWJsZWQoZSl9fSxPTl9ET01fUkVBRFlfUVVFVUVJTkc9e2luaXRpYWxpemU6ZnVuY3Rpb24oKXt0aGlzLnJlYWN0TW91bnRSZWFkeS5yZXNldCgpfSxjbG9zZTpmdW5jdGlvbigpe3RoaXMucmVhY3RNb3VudFJlYWR5Lm5vdGlmeUFsbCgpfX0sVFJBTlNBQ1RJT05fV1JBUFBFUlM9W1NFTEVDVElPTl9SRVNUT1JBVElPTixFVkVOVF9TVVBQUkVTU0lPTixPTl9ET01fUkVBRFlfUVVFVUVJTkddO2Z1bmN0aW9uIFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24oZSl7dGhpcy5yZWluaXRpYWxpemVUcmFuc2FjdGlvbigpLHRoaXMucmVuZGVyVG9TdGF0aWNNYXJrdXA9ITEsdGhpcy5yZWFjdE1vdW50UmVhZHk9Q2FsbGJhY2tRdWV1ZS5nZXRQb29sZWQobnVsbCksdGhpcy51c2VDcmVhdGVFbGVtZW50PWV9XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmVFJBTlNBQ1RJT05fV1JBUFBFUlMucHVzaCh7aW5pdGlhbGl6ZTpSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25CZWdpbkZsdXNoLGNsb3NlOlJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkVuZEZsdXNofSk7dmFyIE1peGluPXtnZXRUcmFuc2FjdGlvbldyYXBwZXJzOmZ1bmN0aW9uKCl7cmV0dXJuIFRSQU5TQUNUSU9OX1dSQVBQRVJTfSxnZXRSZWFjdE1vdW50UmVhZHk6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZWFjdE1vdW50UmVhZHl9LGdldFVwZGF0ZVF1ZXVlOmZ1bmN0aW9uKCl7cmV0dXJuIFJlYWN0VXBkYXRlUXVldWV9LGNoZWNrcG9pbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZWFjdE1vdW50UmVhZHkuY2hlY2twb2ludCgpfSxyb2xsYmFjazpmdW5jdGlvbihlKXt0aGlzLnJlYWN0TW91bnRSZWFkeS5yb2xsYmFjayhlKX0sZGVzdHJ1Y3RvcjpmdW5jdGlvbigpe0NhbGxiYWNrUXVldWUucmVsZWFzZSh0aGlzLnJlYWN0TW91bnRSZWFkeSksdGhpcy5yZWFjdE1vdW50UmVhZHk9bnVsbH19O19hc3NpZ24oUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbi5wcm90b3R5cGUsVHJhbnNhY3Rpb24sTWl4aW4pLFBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uKSxtb2R1bGUuZXhwb3J0cz1SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxKbFlXTjBVbVZqYjI1amFXeGxWSEpoYm5OaFkzUnBiMjR1YW5NaVhTd2libUZ0WlhNaU9sc2lYMkZ6YzJsbmJpSXNJbkpsY1hWcGNtVWlMQ0pEWVd4c1ltRmphMUYxWlhWbElpd2lVRzl2YkdWa1EyeGhjM01pTENKU1pXRmpkRUp5YjNkelpYSkZkbVZ1ZEVWdGFYUjBaWElpTENKU1pXRmpkRWx1Y0hWMFUyVnNaV04wYVc5dUlpd2lVbVZoWTNSSmJuTjBjblZ0Wlc1MFlYUnBiMjRpTENKVWNtRnVjMkZqZEdsdmJpSXNJbEpsWVdOMFZYQmtZWFJsVVhWbGRXVWlMQ0pUUlV4RlExUkpUMDVmVWtWVFZFOVNRVlJKVDA0aUxDSnBibWwwYVdGc2FYcGxJaXdpWjJWMFUyVnNaV04wYVc5dVNXNW1iM0p0WVhScGIyNGlMQ0pqYkc5elpTSXNJbkpsYzNSdmNtVlRaV3hsWTNScGIyNGlMQ0pGVmtWT1ZGOVRWVkJRVWtWVFUwbFBUaUlzSW1OMWNuSmxiblJzZVVWdVlXSnNaV1FpTENKcGMwVnVZV0pzWldRaUxDSnpaWFJGYm1GaWJHVmtJaXdpY0hKbGRtbHZkWE5zZVVWdVlXSnNaV1FpTENKUFRsOUVUMDFmVWtWQlJGbGZVVlZGVlVWSlRrY2lMQ0owYUdseklpd2ljbVZoWTNSTmIzVnVkRkpsWVdSNUlpd2ljbVZ6WlhRaUxDSnViM1JwWm5sQmJHd2lMQ0pVVWtGT1UwRkRWRWxQVGw5WFVrRlFVRVZTVXlJc0lsSmxZV04wVW1WamIyNWphV3hsVkhKaGJuTmhZM1JwYjI0aUxDSjFjMlZEY21WaGRHVkZiR1Z0Wlc1MElpd2ljbVZwYm1sMGFXRnNhWHBsVkhKaGJuTmhZM1JwYjI0aUxDSnlaVzVrWlhKVWIxTjBZWFJwWTAxaGNtdDFjQ0lzSW1kbGRGQnZiMnhsWkNJc0luQnliMk5sYzNNaUxDSmxibllpTENKT1QwUkZYMFZPVmlJc0luQjFjMmdpTENKa1pXSjFaMVJ2YjJ3aUxDSnZia0psWjJsdVJteDFjMmdpTENKdmJrVnVaRVpzZFhOb0lpd2lUV2w0YVc0aUxDSm5aWFJVY21GdWMyRmpkR2x2YmxkeVlYQndaWEp6SWl3aVoyVjBVbVZoWTNSTmIzVnVkRkpsWVdSNUlpd2laMlYwVlhCa1lYUmxVWFZsZFdVaUxDSmphR1ZqYTNCdmFXNTBJaXdpY205c2JHSmhZMnNpTENKa1pYTjBjblZqZEc5eUlpd2ljbVZzWldGelpTSXNJbkJ5YjNSdmRIbHdaU0lzSW1Ga1pGQnZiMnhwYm1kVWJ5SXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlYU3dpYldGd2NHbHVaM01pT2lKQlFWRkJMR0ZCUlVFc1NVRkJTVUVzVVVGQlZVTXNVVUZCVVN4cFFrRkZiRUpETEdOQlFXZENSQ3hSUVVGUkxHMUNRVU40UWtVc1dVRkJZMFlzVVVGQlVTeHBRa0ZEZEVKSExIbENRVUV5UWtnc1VVRkJVU3c0UWtGRGJrTkpMRzlDUVVGelFrb3NVVUZCVVN4NVFrRkRPVUpMTEhGQ1FVRjFRa3dzVVVGQlVTd3dRa0ZETDBKTkxGbEJRV05PTEZGQlFWRXNhVUpCUTNSQ1R5eHBRa0ZCYlVKUUxGRkJRVkVzYzBKQlRUTkNVU3h6UWtGQmQwSXNRMEZKTVVKRExGZEJRVmxNTEc5Q1FVRnZRazBzZDBKQlNXaERReXhOUVVGUFVDeHZRa0ZCYjBKUkxHdENRVkY2UWtNc2EwSkJRVzlDTEVOQlMzUkNTaXhYUVVGWkxGZEJRMVlzU1VGQlNVc3NSVUZCYlVKWUxIbENRVUY1UWxrc1dVRkZhRVFzVDBGRVFWb3NlVUpCUVhsQ1lTeFpRVUZYTEVkQlF6ZENSaXhIUVZGVVNDeE5RVUZQTEZOQlFWVk5MRWRCUTJaa0xIbENRVUY1UW1Fc1YwRkJWME1zUzBGUmNFTkRMSE5DUVVGM1FpeERRVWt4UWxRc1YwRkJXU3hYUVVOV1ZTeExRVUZMUXl4blFrRkJaMEpETEZOQlRYWkNWaXhOUVVGUExGZEJRMHhSTEV0QlFVdERMR2RDUVVGblFrVXNZMEZUY2tKRExIRkNRVUYxUWl4RFFVRkRaaXh6UWtGQmRVSkxMR3RDUVVGdFFrc3NkVUpCZFVKMFJTeFRRVUZUVFN3d1FrRkJNRUpETEVkQlEycERUaXhMUVVGTFR5d3dRa0ZOVEZBc1MwRkJTMUVzYzBKQlFYVkNMRVZCUXpWQ1VpeExRVUZMUXl4blFrRkJhMEp1UWl4alFVRmpNa0lzVlVGQlZTeE5RVU12UTFRc1MwRkJTMDBzYVVKQlFXMUNRU3hGUVRsQ1J5eGxRVUY2UWtrc1VVRkJVVU1zU1VGQlNVTXNWVUZEWkZJc2NVSkJRWEZDVXl4TFFVRkxMRU5CUTNoQ2RrSXNWMEZCV1Vvc2NVSkJRWEZDTkVJc1ZVRkJWVU1zWVVGRE0wTjJRaXhOUVVGUFRpeHhRa0ZCY1VJMFFpeFZRVUZWUlN4aFFUaENNVU1zU1VGQlNVTXNUVUZCVVN4RFFWRldReXgxUWtGQmQwSXNWMEZEZEVJc1QwRkJUMlFzYzBKQlRWUmxMRzFDUVVGdlFpeFhRVU5zUWl4UFFVRlBia0lzUzBGQlMwTXNhVUpCVFdSdFFpeGxRVUZuUWl4WFFVTmtMRTlCUVU5b1F5eHJRa0ZQVkdsRExGZEJRVmtzVjBGRlZpeFBRVUZQY2tJc1MwRkJTME1zWjBKQlFXZENiMElzWTBGSE9VSkRMRk5CUVZVc1UwRkJWVVFzUjBGRGJFSnlRaXhMUVVGTFF5eG5Ra0ZCWjBKeFFpeFRRVUZUUkN4SlFVOW9RMFVzVjBGQldTeFhRVU5XZWtNc1kwRkJZekJETEZGQlFWRjRRaXhMUVVGTFF5eHBRa0ZETTBKRUxFdEJRVXRETEdkQ1FVRnJRaXhQUVVrelFuSkNMRkZCUVZGNVFpd3dRa0ZCTUVKdlFpeFZRVUZYZEVNc1dVRkJZVGhDTEU5QlJURkViRU1zV1VGQldUSkRMR0ZCUVdGeVFpd3lRa0ZGZWtKelFpeFBRVUZQUXl4UlFVRlZka0lpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdFpHOXRMMnhwWWk5U1pXRmpkRkpsWTI5dVkybHNaVlJ5WVc1ellXTjBhVzl1TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgUmVhY3RSZWY9cmVxdWlyZShcIi4vUmVhY3RSZWZcIiksUmVhY3RJbnN0cnVtZW50YXRpb249cmVxdWlyZShcIi4vUmVhY3RJbnN0cnVtZW50YXRpb25cIiksd2FybmluZz1yZXF1aXJlKFwiZmJqcy9saWIvd2FybmluZ1wiKTtmdW5jdGlvbiBhdHRhY2hSZWZzKCl7UmVhY3RSZWYuYXR0YWNoUmVmcyh0aGlzLHRoaXMuX2N1cnJlbnRFbGVtZW50KX12YXIgUmVhY3RSZWNvbmNpbGVyPXttb3VudENvbXBvbmVudDpmdW5jdGlvbihlLHQsbixvLHUscil7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmMCE9PWUuX2RlYnVnSUQmJlJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkJlZm9yZU1vdW50Q29tcG9uZW50KGUuX2RlYnVnSUQsZS5fY3VycmVudEVsZW1lbnQscik7dmFyIGM9ZS5tb3VudENvbXBvbmVudCh0LG4sbyx1LHIpO3JldHVybiBlLl9jdXJyZW50RWxlbWVudCYmbnVsbCE9ZS5fY3VycmVudEVsZW1lbnQucmVmJiZ0LmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUoYXR0YWNoUmVmcyxlKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYwIT09ZS5fZGVidWdJRCYmUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uTW91bnRDb21wb25lbnQoZS5fZGVidWdJRCksY30sZ2V0SG9zdE5vZGU6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuZ2V0SG9zdE5vZGUoKX0sdW5tb3VudENvbXBvbmVudDpmdW5jdGlvbihlLHQpe1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJjAhPT1lLl9kZWJ1Z0lEJiZSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25CZWZvcmVVbm1vdW50Q29tcG9uZW50KGUuX2RlYnVnSUQpLFJlYWN0UmVmLmRldGFjaFJlZnMoZSxlLl9jdXJyZW50RWxlbWVudCksZS51bm1vdW50Q29tcG9uZW50KHQpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJjAhPT1lLl9kZWJ1Z0lEJiZSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25Vbm1vdW50Q29tcG9uZW50KGUuX2RlYnVnSUQpfSxyZWNlaXZlQ29tcG9uZW50OmZ1bmN0aW9uKGUsdCxuLG8pe3ZhciB1PWUuX2N1cnJlbnRFbGVtZW50O2lmKHQhPT11fHxvIT09ZS5fY29udGV4dCl7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmMCE9PWUuX2RlYnVnSUQmJlJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkJlZm9yZVVwZGF0ZUNvbXBvbmVudChlLl9kZWJ1Z0lELHQpO3ZhciByPVJlYWN0UmVmLnNob3VsZFVwZGF0ZVJlZnModSx0KTtyJiZSZWFjdFJlZi5kZXRhY2hSZWZzKGUsdSksZS5yZWNlaXZlQ29tcG9uZW50KHQsbixvKSxyJiZlLl9jdXJyZW50RWxlbWVudCYmbnVsbCE9ZS5fY3VycmVudEVsZW1lbnQucmVmJiZuLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUoYXR0YWNoUmVmcyxlKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYwIT09ZS5fZGVidWdJRCYmUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uVXBkYXRlQ29tcG9uZW50KGUuX2RlYnVnSUQpfX0scGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5OmZ1bmN0aW9uKGUsdCxuKXtlLl91cGRhdGVCYXRjaE51bWJlcj09PW4/KFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJjAhPT1lLl9kZWJ1Z0lEJiZSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25CZWZvcmVVcGRhdGVDb21wb25lbnQoZS5fZGVidWdJRCxlLl9jdXJyZW50RWxlbWVudCksZS5wZXJmb3JtVXBkYXRlSWZOZWNlc3NhcnkodCksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmMCE9PWUuX2RlYnVnSUQmJlJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vblVwZGF0ZUNvbXBvbmVudChlLl9kZWJ1Z0lEKSk6XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FybmluZyhudWxsPT1lLl91cGRhdGVCYXRjaE51bWJlcnx8ZS5fdXBkYXRlQmF0Y2hOdW1iZXI9PT1uKzEsXCJwZXJmb3JtVXBkYXRlSWZOZWNlc3Nhcnk6IFVuZXhwZWN0ZWQgYmF0Y2ggbnVtYmVyIChjdXJyZW50ICVzLCBwZW5kaW5nICVzKVwiLG4sZS5fdXBkYXRlQmF0Y2hOdW1iZXIpfX07bW9kdWxlLmV4cG9ydHM9UmVhY3RSZWNvbmNpbGVyO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxKbFlXTjBVbVZqYjI1amFXeGxjaTVxY3lKZExDSnVZVzFsY3lJNld5SlNaV0ZqZEZKbFppSXNJbkpsY1hWcGNtVWlMQ0pTWldGamRFbHVjM1J5ZFcxbGJuUmhkR2x2YmlJc0luZGhjbTVwYm1jaUxDSmhkSFJoWTJoU1pXWnpJaXdpZEdocGN5SXNJbDlqZFhKeVpXNTBSV3hsYldWdWRDSXNJbEpsWVdOMFVtVmpiMjVqYVd4bGNpSXNJbTF2ZFc1MFEyOXRjRzl1Wlc1MElpd2lhVzUwWlhKdVlXeEpibk4wWVc1alpTSXNJblJ5WVc1ellXTjBhVzl1SWl3aWFHOXpkRkJoY21WdWRDSXNJbWh2YzNSRGIyNTBZV2x1WlhKSmJtWnZJaXdpWTI5dWRHVjRkQ0lzSW5CaGNtVnVkRVJsWW5WblNVUWlMQ0p3Y205alpYTnpJaXdpWlc1Mklpd2lUazlFUlY5RlRsWWlMQ0pmWkdWaWRXZEpSQ0lzSW1SbFluVm5WRzl2YkNJc0ltOXVRbVZtYjNKbFRXOTFiblJEYjIxd2IyNWxiblFpTENKdFlYSnJkWEFpTENKeVpXWWlMQ0puWlhSU1pXRmpkRTF2ZFc1MFVtVmhaSGtpTENKbGJuRjFaWFZsSWl3aWIyNU5iM1Z1ZEVOdmJYQnZibVZ1ZENJc0ltZGxkRWh2YzNST2IyUmxJaXdpZFc1dGIzVnVkRU52YlhCdmJtVnVkQ0lzSW5OaFptVnNlU0lzSW05dVFtVm1iM0psVlc1dGIzVnVkRU52YlhCdmJtVnVkQ0lzSW1SbGRHRmphRkpsWm5NaUxDSnZibFZ1Ylc5MWJuUkRiMjF3YjI1bGJuUWlMQ0p5WldObGFYWmxRMjl0Y0c5dVpXNTBJaXdpYm1WNGRFVnNaVzFsYm5RaUxDSndjbVYyUld4bGJXVnVkQ0lzSWw5amIyNTBaWGgwSWl3aWIyNUNaV1p2Y21WVmNHUmhkR1ZEYjIxd2IyNWxiblFpTENKeVpXWnpRMmhoYm1kbFpDSXNJbk5vYjNWc1pGVndaR0YwWlZKbFpuTWlMQ0p2YmxWd1pHRjBaVU52YlhCdmJtVnVkQ0lzSW5CbGNtWnZjbTFWY0dSaGRHVkpaazVsWTJWemMyRnllU0lzSW5Wd1pHRjBaVUpoZEdOb1RuVnRZbVZ5SWl3aVgzVndaR0YwWlVKaGRHTm9UblZ0WW1WeUlpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlVVRXNZVUZGUVN4SlFVRkpRU3hUUVVGWFF5eFJRVUZSTEdOQlEyNUNReXh4UWtGQmRVSkVMRkZCUVZFc01FSkJSUzlDUlN4UlFVRlZSaXhSUVVGUkxHOUNRVTEwUWl4VFFVRlRSeXhoUVVOUVNpeFRRVUZUU1N4WFFVRlhReXhMUVVGTlFTeExRVUZMUXl4cFFrRkhha01zU1VGQlNVTXNaMEpCUVd0Q0xFTkJXWEJDUXl4bFFVRm5RaXhUUVVGVlF5eEZRVUZyUWtNc1JVRkJZVU1zUlVGQldVTXNSVUZCYlVKRExFVkJRVk5ETEVkQlJXeEZMR1ZCUVhwQ1F5eFJRVUZSUXl4SlFVRkpReXhWUVVOdlFpeEpRVUU1UWxJc1JVRkJhVUpUTEZWQlEyNUNhRUlzY1VKQlFYRkNhVUlzVlVGQlZVTXNkVUpCUVhWQ1dDeEZRVUZwUWxNc1UwRkJWVlFzUlVGQmFVSklMR2RDUVVGcFFsRXNSMEZIZGtnc1NVRkJTVThzUlVGQlUxb3NSVUZCYVVKRUxHVkJRV1ZGTEVWQlFXRkRMRVZCUVZsRExFVkJRVzFDUXl4RlFVRlRReXhIUVZOc1J5eFBRVkpKVEN4RlFVRnBRa2dzYVVKQlFUSkVMRTFCUVhoRFJ5eEZRVUZwUWtnc1owSkJRV2RDWjBJc1MwRkRka1ZhTEVWQlFWbGhMSEZDUVVGeFFrTXNVVUZCVVhCQ0xGZEJRVmxMTEVkQlJURkNMR1ZCUVhwQ1RTeFJRVUZSUXl4SlFVRkpReXhWUVVOdlFpeEpRVUU1UWxJc1JVRkJhVUpUTEZWQlEyNUNhRUlzY1VKQlFYRkNhVUlzVlVGQlZVMHNhVUpCUVdsQ2FFSXNSVUZCYVVKVExGVkJSemxFUnl4SFFVOVVTeXhaUVVGaExGTkJRVlZxUWl4SFFVTnlRaXhQUVVGUFFTeEZRVUZwUW1sQ0xHVkJVekZDUXl4cFFrRkJhMElzVTBGQlZXeENMRVZCUVd0Q2JVSXNSMEZEWml4bFFVRjZRbUlzVVVGQlVVTXNTVUZCU1VNc1ZVRkRiMElzU1VGQk9VSlNMRVZCUVdsQ1V5eFZRVU51UW1oQ0xIRkNRVUZ4UW1sQ0xGVkJRVlZWTEhsQ1FVRjVRbkJDTEVWQlFXbENVeXhWUVVjM1JXeENMRk5CUVZNNFFpeFhRVUZYY2tJc1JVRkJhMEpCTEVWQlFXbENTQ3hwUWtGRGRrUkhMRVZCUVdsQ2EwSXNhVUpCUVdsQ1F5eEhRVU5NTEdWQlFYcENZaXhSUVVGUlF5eEpRVUZKUXl4VlFVTnZRaXhKUVVFNVFsSXNSVUZCYVVKVExGVkJRMjVDYUVJc2NVSkJRWEZDYVVJc1ZVRkJWVmtzYlVKQlFXMUNkRUlzUlVGQmFVSlRMRmRCWTNwRll5eHBRa0ZCYTBJc1UwRkJWWFpDTEVWQlFXdENkMElzUlVGQllYWkNMRVZCUVdGSExFZEJRM1JGTEVsQlFVbHhRaXhGUVVGamVrSXNSVUZCYVVKSUxHZENRVVZ1UXl4SFFVRkpNa0lzU1VGQlowSkRMRWRCUVdWeVFpeEpRVUZaU2l4RlFVRnBRakJDTEZOQlFXaEZMRU5CWXpaQ0xHVkJRWHBDY0VJc1VVRkJVVU1zU1VGQlNVTXNWVUZEYjBJc1NVRkJPVUpTTEVWQlFXbENVeXhWUVVOdVFtaENMSEZDUVVGeFFtbENMRlZCUVZWcFFpeDNRa0ZCZDBJelFpeEZRVUZwUWxNc1UwRkJWV1VzUjBGSmRFWXNTVUZCU1Vrc1JVRkJZM0pETEZOQlFWTnpReXhwUWtGQmFVSktMRVZCUVdGRUxFZEJSWEpFU1N4SFFVTkdja01zVTBGQlV6aENMRmRCUVZkeVFpeEZRVUZyUW5sQ0xFZEJSM2hEZWtJc1JVRkJhVUoxUWl4cFFrRkJhVUpETEVWQlFXRjJRaXhGUVVGaFJ5eEhRVVY0UkhkQ0xFZEJRV1UxUWl4RlFVRnBRa2dzYVVKQlFUSkVMRTFCUVhoRFJ5eEZRVUZwUWtnc1owSkJRV2RDWjBJc1MwRkRkRVphTEVWQlFWbGhMSEZDUVVGeFFrTXNVVUZCVVhCQ0xGZEJRVmxMTEVkQlJ6RkNMR1ZCUVhwQ1RTeFJRVUZSUXl4SlFVRkpReXhWUVVOdlFpeEpRVUU1UWxJc1JVRkJhVUpUTEZWQlEyNUNhRUlzY1VKQlFYRkNhVUlzVlVGQlZXOUNMR3RDUVVGclFqbENMRVZCUVdsQ1V5eFpRVmw0UlhOQ0xIbENRVUV3UWl4VFFVRlZMMElzUlVGQmEwSkRMRVZCUVdFclFpeEhRVU0zUkdoRExFVkJRV2xDYVVNc2NVSkJRWFZDUkN4SFFVMW1MR1ZCUVhwQ01VSXNVVUZCVVVNc1NVRkJTVU1zVlVGRGIwSXNTVUZCT1VKU0xFVkJRV2xDVXl4VlFVTnVRbWhDTEhGQ1FVRnhRbWxDTEZWQlFWVnBRaXgzUWtGQmQwSXpRaXhGUVVGcFFsTXNVMEZCVlZRc1JVRkJhVUpJTEdsQ1FVZDJSMGNzUlVGQmFVSXJRaXg1UWtGQmVVSTVRaXhIUVVOaUxHVkJRWHBDU3l4UlFVRlJReXhKUVVGSlF5eFZRVU52UWl4SlFVRTVRbElzUlVGQmFVSlRMRlZCUTI1Q2FFSXNjVUpCUVhGQ2FVSXNWVUZCVlc5Q0xHdENRVUZyUWpsQ0xFVkJRV2xDVXl4WFFWZ3pReXhsUVVGNlFrZ3NVVUZCVVVNc1NVRkJTVU1zVlVGQk5FSmtMRkZCUVN0RExFMUJRWFpEVFN4RlFVRnBRbWxETEc5Q1FVRTRRbXBETEVWQlFXbENhVU1zY1VKQlFYVkNSQ3hGUVVGdlFpeEZRVUZITERaRlFVRnRSa0VzUlVGQmJVSm9ReXhGUVVGcFFtbERMSE5DUVdsQ00xSkRMRTlCUVU5RExGRkJRVlZ5UXlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDMWtiMjB2YkdsaUwxSmxZV04wVW1WamIyNWphV3hsY2k1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgUmVhY3RPd25lcj1yZXF1aXJlKFwiLi9SZWFjdE93bmVyXCIpLFJlYWN0UmVmPXt9O2Z1bmN0aW9uIGF0dGFjaFJlZihlLHQsbil7XCJmdW5jdGlvblwiPT10eXBlb2YgZT9lKHQuZ2V0UHVibGljSW5zdGFuY2UoKSk6UmVhY3RPd25lci5hZGRDb21wb25lbnRBc1JlZlRvKHQsZSxuKX1mdW5jdGlvbiBkZXRhY2hSZWYoZSx0LG4pe1wiZnVuY3Rpb25cIj09dHlwZW9mIGU/ZShudWxsKTpSZWFjdE93bmVyLnJlbW92ZUNvbXBvbmVudEFzUmVmRnJvbSh0LGUsbil9UmVhY3RSZWYuYXR0YWNoUmVmcz1mdW5jdGlvbihlLHQpe2lmKG51bGwhPT10JiZcIm9iamVjdFwiPT10eXBlb2YgdCl7dmFyIG49dC5yZWY7bnVsbCE9biYmYXR0YWNoUmVmKG4sZSx0Ll9vd25lcil9fSxSZWFjdFJlZi5zaG91bGRVcGRhdGVSZWZzPWZ1bmN0aW9uKGUsdCl7dmFyIG49bnVsbCxmPW51bGw7bnVsbCE9PWUmJlwib2JqZWN0XCI9PXR5cGVvZiBlJiYobj1lLnJlZixmPWUuX293bmVyKTt2YXIgbz1udWxsLGM9bnVsbDtyZXR1cm4gbnVsbCE9PXQmJlwib2JqZWN0XCI9PXR5cGVvZiB0JiYobz10LnJlZixjPXQuX293bmVyKSxuIT09b3x8XCJzdHJpbmdcIj09dHlwZW9mIG8mJmMhPT1mfSxSZWFjdFJlZi5kZXRhY2hSZWZzPWZ1bmN0aW9uKGUsdCl7aWYobnVsbCE9PXQmJlwib2JqZWN0XCI9PXR5cGVvZiB0KXt2YXIgbj10LnJlZjtudWxsIT1uJiZkZXRhY2hSZWYobixlLHQuX293bmVyKX19LG1vZHVsZS5leHBvcnRzPVJlYWN0UmVmO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxKbFlXTjBVbVZtTG1weklsMHNJbTVoYldWeklqcGJJbEpsWVdOMFQzZHVaWElpTENKeVpYRjFhWEpsSWl3aVVtVmhZM1JTWldZaUxDSmhkSFJoWTJoU1pXWWlMQ0p5WldZaUxDSmpiMjF3YjI1bGJuUWlMQ0p2ZDI1bGNpSXNJbWRsZEZCMVlteHBZMGx1YzNSaGJtTmxJaXdpWVdSa1EyOXRjRzl1Wlc1MFFYTlNaV1pVYnlJc0ltUmxkR0ZqYUZKbFppSXNJbkpsYlc5MlpVTnZiWEJ2Ym1WdWRFRnpVbVZtUm5KdmJTSXNJbUYwZEdGamFGSmxabk1pTENKcGJuTjBZVzVqWlNJc0ltVnNaVzFsYm5RaUxDSmZiM2R1WlhJaUxDSnphRzkxYkdSVmNHUmhkR1ZTWldaeklpd2ljSEpsZGtWc1pXMWxiblFpTENKdVpYaDBSV3hsYldWdWRDSXNJbkJ5WlhaU1pXWWlMQ0p3Y21WMlQzZHVaWElpTENKdVpYaDBVbVZtSWl3aWJtVjRkRTkzYm1WeUlpd2laR1YwWVdOb1VtVm1jeUlzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVk5CTEdGQlJVRXNTVUZCU1VFc1YwRkJZVU1zVVVGQlVTeG5Ra0ZGY2tKRExGTkJRVmNzUjBGRlppeFRRVUZUUXl4VlFVRlZReXhGUVVGTFF5eEZRVUZYUXl4SFFVTmtMRzFDUVVGU1JpeEZRVU5VUVN4RlFVRkpReXhGUVVGVlJTeHhRa0ZIWkZBc1YwRkJWMUVzYjBKQlFXOUNTQ3hGUVVGWFJDeEZRVUZMUlN4SFFVbHVSQ3hUUVVGVFJ5eFZRVUZWVEN4RlFVRkxReXhGUVVGWFF5eEhRVU5rTEcxQ1FVRlNSaXhGUVVOVVFTeEZRVUZKTEUxQlIwcEtMRmRCUVZkVkxIbENRVUY1UWt3c1JVRkJWMFFzUlVGQlMwVXNSMEZKZUVSS0xGTkJRVk5UTEZkQlFXRXNVMEZCVlVNc1JVRkJWVU1zUjBGRGVFTXNSMEZCWjBJc1QwRkJXa0VzUjBGQmRVTXNhVUpCUVZwQkxFVkJRUzlDTEVOQlIwRXNTVUZCU1ZRc1JVRkJUVk1zUlVGQlVWUXNTVUZEVUN4TlFVRlFRU3hIUVVOR1JDeFZRVUZWUXl4RlFVRkxVU3hGUVVGVlF5eEZRVUZSUXl4VlFVbHlRMW9zVTBGQlUyRXNhVUpCUVcxQ0xGTkJRVlZETEVWQlFXRkRMRWRCWVdwRUxFbEJRVWxETEVWQlFWVXNTMEZEVmtNc1JVRkJXU3hMUVVOSkxFOUJRV2hDU0N4SFFVRXJReXhwUWtGQmFFSkJMRWxCUTJwRFJTeEZRVUZWUml4RlFVRlpXaXhKUVVOMFFtVXNSVUZCV1Vnc1JVRkJXVVlzVVVGSE1VSXNTVUZCU1Uwc1JVRkJWU3hMUVVOV1F5eEZRVUZaTEV0QlRXaENMRTlCVEc5Q0xFOUJRV2hDU2l4SFFVRXJReXhwUWtGQmFFSkJMRWxCUTJwRFJ5eEZRVUZWU0N4RlFVRlpZaXhKUVVOMFFtbENMRVZCUVZsS0xFVkJRVmxJTEZGQlIyNUNTU3hKUVVGWlJTeEhRVVZCTEdsQ1FVRmFRU3hIUVVGM1FrTXNTVUZCWTBZc1IwRkhMME5xUWl4VFFVRlRiMElzVjBGQllTeFRRVUZWVml4RlFVRlZReXhIUVVONFF5eEhRVUZuUWl4UFFVRmFRU3hIUVVGMVF5eHBRa0ZCV2tFc1JVRkJMMElzUTBGSFFTeEpRVUZKVkN4RlFVRk5VeXhGUVVGUlZDeEpRVU5RTEUxQlFWQkJMRWRCUTBaTExGVkJRVlZNTEVWQlFVdFJMRVZCUVZWRExFVkJRVkZETEZWQlNYSkRVeXhQUVVGUFF5eFJRVUZWZEVJaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Y21WaFkzUXRaRzl0TDJ4cFlpOVNaV0ZqZEZKbFppNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9hc3NpZ249cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksUG9vbGVkQ2xhc3M9cmVxdWlyZShcIi4vUG9vbGVkQ2xhc3NcIiksVHJhbnNhY3Rpb249cmVxdWlyZShcIi4vVHJhbnNhY3Rpb25cIiksUmVhY3RJbnN0cnVtZW50YXRpb249cmVxdWlyZShcIi4vUmVhY3RJbnN0cnVtZW50YXRpb25cIiksUmVhY3RTZXJ2ZXJVcGRhdGVRdWV1ZT1yZXF1aXJlKFwiLi9SZWFjdFNlcnZlclVwZGF0ZVF1ZXVlXCIpLFRSQU5TQUNUSU9OX1dSQVBQRVJTPVtdO1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJlRSQU5TQUNUSU9OX1dSQVBQRVJTLnB1c2goe2luaXRpYWxpemU6UmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uQmVnaW5GbHVzaCxjbG9zZTpSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25FbmRGbHVzaH0pO3ZhciBub29wQ2FsbGJhY2tRdWV1ZT17ZW5xdWV1ZTpmdW5jdGlvbigpe319O2Z1bmN0aW9uIFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24oZSl7dGhpcy5yZWluaXRpYWxpemVUcmFuc2FjdGlvbigpLHRoaXMucmVuZGVyVG9TdGF0aWNNYXJrdXA9ZSx0aGlzLnVzZUNyZWF0ZUVsZW1lbnQ9ITEsdGhpcy51cGRhdGVRdWV1ZT1uZXcgUmVhY3RTZXJ2ZXJVcGRhdGVRdWV1ZSh0aGlzKX12YXIgTWl4aW49e2dldFRyYW5zYWN0aW9uV3JhcHBlcnM6ZnVuY3Rpb24oKXtyZXR1cm4gVFJBTlNBQ1RJT05fV1JBUFBFUlN9LGdldFJlYWN0TW91bnRSZWFkeTpmdW5jdGlvbigpe3JldHVybiBub29wQ2FsbGJhY2tRdWV1ZX0sZ2V0VXBkYXRlUXVldWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy51cGRhdGVRdWV1ZX0sZGVzdHJ1Y3RvcjpmdW5jdGlvbigpe30sY2hlY2twb2ludDpmdW5jdGlvbigpe30scm9sbGJhY2s6ZnVuY3Rpb24oKXt9fTtfYXNzaWduKFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24ucHJvdG90eXBlLFRyYW5zYWN0aW9uLE1peGluKSxQb29sZWRDbGFzcy5hZGRQb29saW5nVG8oUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbiksbW9kdWxlLmV4cG9ydHM9UmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSmxZV04wVTJWeWRtVnlVbVZ1WkdWeWFXNW5WSEpoYm5OaFkzUnBiMjR1YW5NaVhTd2libUZ0WlhNaU9sc2lYMkZ6YzJsbmJpSXNJbkpsY1hWcGNtVWlMQ0pRYjI5c1pXUkRiR0Z6Y3lJc0lsUnlZVzV6WVdOMGFXOXVJaXdpVW1WaFkzUkpibk4wY25WdFpXNTBZWFJwYjI0aUxDSlNaV0ZqZEZObGNuWmxjbFZ3WkdGMFpWRjFaWFZsSWl3aVZGSkJUbE5CUTFSSlQwNWZWMUpCVUZCRlVsTWlMQ0p3Y205alpYTnpJaXdpWlc1Mklpd2lUazlFUlY5RlRsWWlMQ0p3ZFhOb0lpd2lhVzVwZEdsaGJHbDZaU0lzSW1SbFluVm5WRzl2YkNJc0ltOXVRbVZuYVc1R2JIVnphQ0lzSW1Oc2IzTmxJaXdpYjI1RmJtUkdiSFZ6YUNJc0ltNXZiM0JEWVd4c1ltRmphMUYxWlhWbElpd2laVzV4ZFdWMVpTSXNJbEpsWVdOMFUyVnlkbVZ5VW1WdVpHVnlhVzVuVkhKaGJuTmhZM1JwYjI0aUxDSnlaVzVrWlhKVWIxTjBZWFJwWTAxaGNtdDFjQ0lzSW5Sb2FYTWlMQ0p5WldsdWFYUnBZV3hwZW1WVWNtRnVjMkZqZEdsdmJpSXNJblZ6WlVOeVpXRjBaVVZzWlcxbGJuUWlMQ0oxY0dSaGRHVlJkV1YxWlNJc0lrMXBlR2x1SWl3aVoyVjBWSEpoYm5OaFkzUnBiMjVYY21Gd2NHVnljeUlzSW1kbGRGSmxZV04wVFc5MWJuUlNaV0ZrZVNJc0ltZGxkRlZ3WkdGMFpWRjFaWFZsSWl3aVpHVnpkSEoxWTNSdmNpSXNJbU5vWldOcmNHOXBiblFpTENKeWIyeHNZbUZqYXlJc0luQnliM1J2ZEhsd1pTSXNJbUZrWkZCdmIyeHBibWRVYnlJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVZGQkxHRkJSVUVzU1VGQlNVRXNVVUZCVlVNc1VVRkJVU3hwUWtGRmJFSkRMRmxCUVdORUxGRkJRVkVzYVVKQlEzUkNSU3haUVVGalJpeFJRVUZSTEdsQ1FVTjBRa2NzY1VKQlFYVkNTQ3hSUVVGUkxEQkNRVU12UWtrc2RVSkJRWGxDU2l4UlFVRlJMRFJDUVU5cVEwc3NjVUpCUVhWQ0xFZEJSVVVzWlVGQmVrSkRMRkZCUVZGRExFbEJRVWxETEZWQlEyUklMSEZDUVVGeFFra3NTMEZCU3l4RFFVTjRRa01zVjBGQldWQXNjVUpCUVhGQ1VTeFZRVUZWUXl4aFFVTXpRME1zVFVGQlQxWXNjVUpCUVhGQ1VTeFZRVUZWUnl4aFFVa3hReXhKUVVGSlF5eHJRa0ZCYjBJc1EwRkRkRUpETEZGQlFWTXNZMEZQV0N4VFFVRlRReXhuUTBGQlowTkRMRWRCUTNaRFF5eExRVUZMUXl3d1FrRkRURVFzUzBGQlMwUXNjVUpCUVhWQ1FTeEZRVU0xUWtNc1MwRkJTMFVzYTBKQlFXMUNMRVZCUTNoQ1JpeExRVUZMUnl4WlFVRmpMRWxCUVVsc1FpeDFRa0ZCZFVKbExFMUJSMmhFTEVsQlFVbEpMRTFCUVZFc1EwRlBWa01zZFVKQlFYZENMRmRCUTNSQ0xFOUJRVTl1UWl4elFrRk5WRzlDTEcxQ1FVRnZRaXhYUVVOc1FpeFBRVUZQVml4dFFrRk5WRmNzWlVGQlowSXNWMEZEWkN4UFFVRlBVQ3hMUVVGTFJ5eGhRVTlrU3l4WFFVRlpMR0ZCUlZwRExGZEJRVmtzWVVGRldrTXNVMEZCVlN4alFVZGFPVUlzVVVGQlVXdENMR2REUVVGblEyRXNWVUZCVnpWQ0xGbEJRV0Z4UWl4UFFVVm9SWFJDTEZsQlFWazRRaXhoUVVGaFpDeHBRMEZGZWtKbExFOUJRVTlETEZGQlFWVm9RaUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEMxa2IyMHZiR2xpTDFKbFlXTjBVMlZ5ZG1WeVVtVnVaR1Z5YVc1blZISmhibk5oWTNScGIyNHVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO2Z1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9dmFyIFJlYWN0VXBkYXRlUXVldWU9cmVxdWlyZShcIi4vUmVhY3RVcGRhdGVRdWV1ZVwiKSx3YXJuaW5nPXJlcXVpcmUoXCJmYmpzL2xpYi93YXJuaW5nXCIpO2Z1bmN0aW9uIHdhcm5Ob29wKGUsdCl7aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVil7dmFyIGE9ZS5jb25zdHJ1Y3RvcjtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ3YXJuaW5nKCExLFwiJXMoLi4uKTogQ2FuIG9ubHkgdXBkYXRlIGEgbW91bnRpbmcgY29tcG9uZW50LiBUaGlzIHVzdWFsbHkgbWVhbnMgeW91IGNhbGxlZCAlcygpIG91dHNpZGUgY29tcG9uZW50V2lsbE1vdW50KCkgb24gdGhlIHNlcnZlci4gVGhpcyBpcyBhIG5vLW9wLiBQbGVhc2UgY2hlY2sgdGhlIGNvZGUgZm9yIHRoZSAlcyBjb21wb25lbnQuXCIsdCx0LGEmJihhLmRpc3BsYXlOYW1lfHxhLm5hbWUpfHxcIlJlYWN0Q2xhc3NcIil9fXZhciBSZWFjdFNlcnZlclVwZGF0ZVF1ZXVlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gUmVhY3RTZXJ2ZXJVcGRhdGVRdWV1ZShlKXtfY2xhc3NDYWxsQ2hlY2sodGhpcyxSZWFjdFNlcnZlclVwZGF0ZVF1ZXVlKSx0aGlzLnRyYW5zYWN0aW9uPWV9cmV0dXJuIFJlYWN0U2VydmVyVXBkYXRlUXVldWUucHJvdG90eXBlLmlzTW91bnRlZD1mdW5jdGlvbiBpc01vdW50ZWQoZSl7cmV0dXJuITF9LFJlYWN0U2VydmVyVXBkYXRlUXVldWUucHJvdG90eXBlLmVucXVldWVDYWxsYmFjaz1mdW5jdGlvbiBlbnF1ZXVlQ2FsbGJhY2soZSx0LGEpe3RoaXMudHJhbnNhY3Rpb24uaXNJblRyYW5zYWN0aW9uKCkmJlJlYWN0VXBkYXRlUXVldWUuZW5xdWV1ZUNhbGxiYWNrKGUsdCxhKX0sUmVhY3RTZXJ2ZXJVcGRhdGVRdWV1ZS5wcm90b3R5cGUuZW5xdWV1ZUZvcmNlVXBkYXRlPWZ1bmN0aW9uIGVucXVldWVGb3JjZVVwZGF0ZShlKXt0aGlzLnRyYW5zYWN0aW9uLmlzSW5UcmFuc2FjdGlvbigpP1JlYWN0VXBkYXRlUXVldWUuZW5xdWV1ZUZvcmNlVXBkYXRlKGUpOndhcm5Ob29wKGUsXCJmb3JjZVVwZGF0ZVwiKX0sUmVhY3RTZXJ2ZXJVcGRhdGVRdWV1ZS5wcm90b3R5cGUuZW5xdWV1ZVJlcGxhY2VTdGF0ZT1mdW5jdGlvbiBlbnF1ZXVlUmVwbGFjZVN0YXRlKGUsdCl7dGhpcy50cmFuc2FjdGlvbi5pc0luVHJhbnNhY3Rpb24oKT9SZWFjdFVwZGF0ZVF1ZXVlLmVucXVldWVSZXBsYWNlU3RhdGUoZSx0KTp3YXJuTm9vcChlLFwicmVwbGFjZVN0YXRlXCIpfSxSZWFjdFNlcnZlclVwZGF0ZVF1ZXVlLnByb3RvdHlwZS5lbnF1ZXVlU2V0U3RhdGU9ZnVuY3Rpb24gZW5xdWV1ZVNldFN0YXRlKGUsdCl7dGhpcy50cmFuc2FjdGlvbi5pc0luVHJhbnNhY3Rpb24oKT9SZWFjdFVwZGF0ZVF1ZXVlLmVucXVldWVTZXRTdGF0ZShlLHQpOndhcm5Ob29wKGUsXCJzZXRTdGF0ZVwiKX0sUmVhY3RTZXJ2ZXJVcGRhdGVRdWV1ZX0oKTttb2R1bGUuZXhwb3J0cz1SZWFjdFNlcnZlclVwZGF0ZVF1ZXVlO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxKbFlXTjBVMlZ5ZG1WeVZYQmtZWFJsVVhWbGRXVXVhbk1pWFN3aWJtRnRaWE1pT2xzaVgyTnNZWE56UTJGc2JFTm9aV05ySWl3aWFXNXpkR0Z1WTJVaUxDSkRiMjV6ZEhKMVkzUnZjaUlzSWxSNWNHVkZjbkp2Y2lJc0lsSmxZV04wVlhCa1lYUmxVWFZsZFdVaUxDSnlaWEYxYVhKbElpd2lkMkZ5Ym1sdVp5SXNJbmRoY201T2IyOXdJaXdpY0hWaWJHbGpTVzV6ZEdGdVkyVWlMQ0pqWVd4c1pYSk9ZVzFsSWl3aWNISnZZMlZ6Y3lJc0ltVnVkaUlzSWs1UFJFVmZSVTVXSWl3aVkyOXVjM1J5ZFdOMGIzSWlMQ0prYVhOd2JHRjVUbUZ0WlNJc0ltNWhiV1VpTENKU1pXRmpkRk5sY25abGNsVndaR0YwWlZGMVpYVmxJaXdpZEhKaGJuTmhZM1JwYjI0aUxDSjBhR2x6SWl3aWNISnZkRzkwZVhCbElpd2lhWE5OYjNWdWRHVmtJaXdpWlc1eGRXVjFaVU5oYkd4aVlXTnJJaXdpWTJGc2JHSmhZMnNpTENKcGMwbHVWSEpoYm5OaFkzUnBiMjRpTENKbGJuRjFaWFZsUm05eVkyVlZjR1JoZEdVaUxDSmxibkYxWlhWbFVtVndiR0ZqWlZOMFlYUmxJaXdpWTI5dGNHeGxkR1ZUZEdGMFpTSXNJbVZ1Y1hWbGRXVlRaWFJUZEdGMFpTSXNJbkJoY25ScFlXeFRkR0YwWlNJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVZOQkxHRkJSVUVzVTBGQlUwRXNaMEpCUVdkQ1F5eEZRVUZWUXl4SFFVRmxMRXRCUVUxRUxHRkJRVzlDUXl4SFFVRm5RaXhOUVVGTkxFbEJRVWxETEZWQlFWVXNjVU5CUldoSUxFbEJRVWxETEdsQ1FVRnRRa01zVVVGQlVTeHpRa0ZGTTBKRExGRkJRVlZFTEZGQlFWRXNiMEpCUlhSQ0xGTkJRVk5GTEZOQlFWTkRMRVZCUVdkQ1F5eEhRVU5vUXl4SFFVRTJRaXhsUVVGNlFrTXNVVUZCVVVNc1NVRkJTVU1zVTBGQk1rSXNRMEZEZWtNc1NVRkJTVU1zUlVGQlkwd3NSVUZCWlVzc1dVRkRVaXhsUVVGNlFrZ3NVVUZCVVVNc1NVRkJTVU1zVlVGQk5FSk9MRk5CUVZFc1JVRkJUeXcyVEVGQmQwMUhMRVZCUVZsQkxFVkJRVmxKTEVsQlFXZENRU3hGUVVGWlF5eGhRVUZsUkN4RlFVRlpSU3hQUVVGVExHVkJXVE5XTEVsQlFVbERMSFZDUVVGNVFpeFhRVU16UWl4VFFVRlRRU3gxUWtGQmRVSkRMRWRCUXpsQ2FrSXNaMEpCUVdkQ2EwSXNTMEZCVFVZc2QwSkJSWFJDUlN4TFFVRkxSQ3haUVVGalFTeEZRV2RIY2tJc1QwRndSa0ZFTEhWQ1FVRjFRa2NzVlVGQlZVTXNWVUZCV1N4VFFVRlRRU3hWUVVGVldpeEhRVU01UkN4UFFVRlBMRWRCWVZSUkxIVkNRVUYxUWtjc1ZVRkJWVVVzWjBKQlFXdENMRk5CUVZOQkxHZENRVUZuUW1Jc1JVRkJaMEpqTEVWQlFWVmlMRWRCUTJoSFV5eExRVUZMUkN4WlFVRlpUU3h0UWtGRGJrSnVRaXhwUWtGQmFVSnBRaXhuUWtGQlowSmlMRVZCUVdkQ1l5eEZRVUZWWWl4SlFXMUNMMFJQTEhWQ1FVRjFRa2NzVlVGQlZVc3NiVUpCUVhGQ0xGTkJRVk5CTEcxQ1FVRnRRbWhDTEVkQlF6VkZWU3hMUVVGTFJDeFpRVUZaVFN4clFrRkRia0p1UWl4cFFrRkJhVUp2UWl4dFFrRkJiVUpvUWl4SFFVVndRMFFzVTBGQlUwTXNSVUZCWjBJc1owSkJhVUkzUWxFc2RVSkJRWFZDUnl4VlFVRlZUU3h2UWtGQmMwSXNVMEZCVTBFc2IwSkJRVzlDYWtJc1JVRkJaMEpyUWl4SFFVTTVSbElzUzBGQlMwUXNXVUZCV1Uwc2EwSkJRMjVDYmtJc2FVSkJRV2xDY1VJc2IwSkJRVzlDYWtJc1JVRkJaMEpyUWl4SFFVVnlSRzVDTEZOQlFWTkRMRVZCUVdkQ0xHbENRV2RDTjBKUkxIVkNRVUYxUWtjc1ZVRkJWVkVzWjBKQlFXdENMRk5CUVZOQkxHZENRVUZuUW01Q0xFVkJRV2RDYjBJc1IwRkRkRVpXTEV0QlFVdEVMRmxCUVZsTkxHdENRVU51UW01Q0xHbENRVUZwUW5WQ0xHZENRVUZuUW01Q0xFVkJRV2RDYjBJc1IwRkZha1J5UWl4VFFVRlRReXhGUVVGblFpeGhRVWwwUWxFc2RVSkJjRWR2UWl4SFFYVkhOMEpoTEU5QlFVOURMRkZCUVZWa0lpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDNKbFlXTjBMV1J2YlM5c2FXSXZVbVZoWTNSVFpYSjJaWEpWY0dSaGRHVlJkV1YxWlM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgX3Byb2RJbnZhcmlhbnQ9cmVxdWlyZShcIi4vcmVhY3RQcm9kSW52YXJpYW50XCIpLFJlYWN0Q3VycmVudE93bmVyPXJlcXVpcmUoXCJyZWFjdC9saWIvUmVhY3RDdXJyZW50T3duZXJcIiksUmVhY3RJbnN0YW5jZU1hcD1yZXF1aXJlKFwiLi9SZWFjdEluc3RhbmNlTWFwXCIpLFJlYWN0SW5zdHJ1bWVudGF0aW9uPXJlcXVpcmUoXCIuL1JlYWN0SW5zdHJ1bWVudGF0aW9uXCIpLFJlYWN0VXBkYXRlcz1yZXF1aXJlKFwiLi9SZWFjdFVwZGF0ZXNcIiksaW52YXJpYW50PXJlcXVpcmUoXCJmYmpzL2xpYi9pbnZhcmlhbnRcIiksd2FybmluZz1yZXF1aXJlKFwiZmJqcy9saWIvd2FybmluZ1wiKTtmdW5jdGlvbiBlbnF1ZXVlVXBkYXRlKGUpe1JlYWN0VXBkYXRlcy5lbnF1ZXVlVXBkYXRlKGUpfWZ1bmN0aW9uIGZvcm1hdFVuZXhwZWN0ZWRBcmd1bWVudChlKXt2YXIgbj10eXBlb2YgZTtpZihcIm9iamVjdFwiIT09bilyZXR1cm4gbjt2YXIgdD1lLmNvbnN0cnVjdG9yJiZlLmNvbnN0cnVjdG9yLm5hbWV8fG4sYT1PYmplY3Qua2V5cyhlKTtyZXR1cm4gYS5sZW5ndGg+MCYmYS5sZW5ndGg8MjA/dCtcIiAoa2V5czogXCIrYS5qb2luKFwiLCBcIikrXCIpXCI6dH1mdW5jdGlvbiBnZXRJbnRlcm5hbEluc3RhbmNlUmVhZHlGb3JVcGRhdGUoZSxuKXt2YXIgdD1SZWFjdEluc3RhbmNlTWFwLmdldChlKTtpZighdCl7aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVil7dmFyIGE9ZS5jb25zdHJ1Y3RvcjtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ3YXJuaW5nKCFuLFwiJXMoLi4uKTogQ2FuIG9ubHkgdXBkYXRlIGEgbW91bnRlZCBvciBtb3VudGluZyBjb21wb25lbnQuIFRoaXMgdXN1YWxseSBtZWFucyB5b3UgY2FsbGVkICVzKCkgb24gYW4gdW5tb3VudGVkIGNvbXBvbmVudC4gVGhpcyBpcyBhIG5vLW9wLiBQbGVhc2UgY2hlY2sgdGhlIGNvZGUgZm9yIHRoZSAlcyBjb21wb25lbnQuXCIsbixuLGEmJihhLmRpc3BsYXlOYW1lfHxhLm5hbWUpfHxcIlJlYWN0Q2xhc3NcIil9cmV0dXJuIG51bGx9cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FybmluZyhudWxsPT1SZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LFwiJXMoLi4uKTogQ2Fubm90IHVwZGF0ZSBkdXJpbmcgYW4gZXhpc3Rpbmcgc3RhdGUgdHJhbnNpdGlvbiAoc3VjaCBhcyB3aXRoaW4gYHJlbmRlcmAgb3IgYW5vdGhlciBjb21wb25lbnQncyBjb25zdHJ1Y3RvcikuIFJlbmRlciBtZXRob2RzIHNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24gb2YgcHJvcHMgYW5kIHN0YXRlOyBjb25zdHJ1Y3RvciBzaWRlLWVmZmVjdHMgYXJlIGFuIGFudGktcGF0dGVybiwgYnV0IGNhbiBiZSBtb3ZlZCB0byBgY29tcG9uZW50V2lsbE1vdW50YC5cIixuKSx0fXZhciBSZWFjdFVwZGF0ZVF1ZXVlPXtpc01vdW50ZWQ6ZnVuY3Rpb24oZSl7aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVil7dmFyIG49UmVhY3RDdXJyZW50T3duZXIuY3VycmVudDtudWxsIT09biYmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcobi5fd2FybmVkQWJvdXRSZWZzSW5SZW5kZXIsXCIlcyBpcyBhY2Nlc3NpbmcgaXNNb3VudGVkIGluc2lkZSBpdHMgcmVuZGVyKCkgZnVuY3Rpb24uIHJlbmRlcigpIHNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24gb2YgcHJvcHMgYW5kIHN0YXRlLiBJdCBzaG91bGQgbmV2ZXIgYWNjZXNzIHNvbWV0aGluZyB0aGF0IHJlcXVpcmVzIHN0YWxlIGRhdGEgZnJvbSB0aGUgcHJldmlvdXMgcmVuZGVyLCBzdWNoIGFzIHJlZnMuIE1vdmUgdGhpcyBsb2dpYyB0byBjb21wb25lbnREaWRNb3VudCBhbmQgY29tcG9uZW50RGlkVXBkYXRlIGluc3RlYWQuXCIsbi5nZXROYW1lKCl8fFwiQSBjb21wb25lbnRcIiksbi5fd2FybmVkQWJvdXRSZWZzSW5SZW5kZXI9ITApfXZhciB0PVJlYWN0SW5zdGFuY2VNYXAuZ2V0KGUpO3JldHVybiEhdCYmISF0Ll9yZW5kZXJlZENvbXBvbmVudH0sZW5xdWV1ZUNhbGxiYWNrOmZ1bmN0aW9uKGUsbix0KXtSZWFjdFVwZGF0ZVF1ZXVlLnZhbGlkYXRlQ2FsbGJhY2sobix0KTt2YXIgYT1nZXRJbnRlcm5hbEluc3RhbmNlUmVhZHlGb3JVcGRhdGUoZSk7aWYoIWEpcmV0dXJuIG51bGw7YS5fcGVuZGluZ0NhbGxiYWNrcz9hLl9wZW5kaW5nQ2FsbGJhY2tzLnB1c2gobik6YS5fcGVuZGluZ0NhbGxiYWNrcz1bbl0sZW5xdWV1ZVVwZGF0ZShhKX0sZW5xdWV1ZUNhbGxiYWNrSW50ZXJuYWw6ZnVuY3Rpb24oZSxuKXtlLl9wZW5kaW5nQ2FsbGJhY2tzP2UuX3BlbmRpbmdDYWxsYmFja3MucHVzaChuKTplLl9wZW5kaW5nQ2FsbGJhY2tzPVtuXSxlbnF1ZXVlVXBkYXRlKGUpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oZSl7dmFyIG49Z2V0SW50ZXJuYWxJbnN0YW5jZVJlYWR5Rm9yVXBkYXRlKGUsXCJmb3JjZVVwZGF0ZVwiKTtuJiYobi5fcGVuZGluZ0ZvcmNlVXBkYXRlPSEwLGVucXVldWVVcGRhdGUobikpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGUsbix0KXt2YXIgYT1nZXRJbnRlcm5hbEluc3RhbmNlUmVhZHlGb3JVcGRhdGUoZSxcInJlcGxhY2VTdGF0ZVwiKTthJiYoYS5fcGVuZGluZ1N0YXRlUXVldWU9W25dLGEuX3BlbmRpbmdSZXBsYWNlU3RhdGU9ITAsbnVsbCE9dCYmKFJlYWN0VXBkYXRlUXVldWUudmFsaWRhdGVDYWxsYmFjayh0LFwicmVwbGFjZVN0YXRlXCIpLGEuX3BlbmRpbmdDYWxsYmFja3M/YS5fcGVuZGluZ0NhbGxiYWNrcy5wdXNoKHQpOmEuX3BlbmRpbmdDYWxsYmFja3M9W3RdKSxlbnF1ZXVlVXBkYXRlKGEpKX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGUsbil7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vblNldFN0YXRlKCksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FybmluZyhudWxsIT1uLFwic2V0U3RhdGUoLi4uKTogWW91IHBhc3NlZCBhbiB1bmRlZmluZWQgb3IgbnVsbCBzdGF0ZSBvYmplY3Q7IGluc3RlYWQsIHVzZSBmb3JjZVVwZGF0ZSgpLlwiKSk7dmFyIHQ9Z2V0SW50ZXJuYWxJbnN0YW5jZVJlYWR5Rm9yVXBkYXRlKGUsXCJzZXRTdGF0ZVwiKTt0JiYoKHQuX3BlbmRpbmdTdGF0ZVF1ZXVlfHwodC5fcGVuZGluZ1N0YXRlUXVldWU9W10pKS5wdXNoKG4pLGVucXVldWVVcGRhdGUodCkpfSxlbnF1ZXVlRWxlbWVudEludGVybmFsOmZ1bmN0aW9uKGUsbix0KXtlLl9wZW5kaW5nRWxlbWVudD1uLGUuX2NvbnRleHQ9dCxlbnF1ZXVlVXBkYXRlKGUpfSx2YWxpZGF0ZUNhbGxiYWNrOmZ1bmN0aW9uKGUsbil7ZSYmXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwiJXMoLi4uKTogRXhwZWN0ZWQgdGhlIGxhc3Qgb3B0aW9uYWwgYGNhbGxiYWNrYCBhcmd1bWVudCB0byBiZSBhIGZ1bmN0aW9uLiBJbnN0ZWFkIHJlY2VpdmVkOiAlcy5cIixuLGZvcm1hdFVuZXhwZWN0ZWRBcmd1bWVudChlKSk6X3Byb2RJbnZhcmlhbnQoXCIxMjJcIixuLGZvcm1hdFVuZXhwZWN0ZWRBcmd1bWVudChlKSkpfX07bW9kdWxlLmV4cG9ydHM9UmVhY3RVcGRhdGVRdWV1ZTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSmxZV04wVlhCa1lYUmxVWFZsZFdVdWFuTWlYU3dpYm1GdFpYTWlPbHNpWDNCeWIyUkpiblpoY21saGJuUWlMQ0p5WlhGMWFYSmxJaXdpVW1WaFkzUkRkWEp5Wlc1MFQzZHVaWElpTENKU1pXRmpkRWx1YzNSaGJtTmxUV0Z3SWl3aVVtVmhZM1JKYm5OMGNuVnRaVzUwWVhScGIyNGlMQ0pTWldGamRGVndaR0YwWlhNaUxDSnBiblpoY21saGJuUWlMQ0ozWVhKdWFXNW5JaXdpWlc1eGRXVjFaVlZ3WkdGMFpTSXNJbWx1ZEdWeWJtRnNTVzV6ZEdGdVkyVWlMQ0ptYjNKdFlYUlZibVY0Y0dWamRHVmtRWEpuZFcxbGJuUWlMQ0poY21jaUxDSjBlWEJsSWl3aVpHbHpjR3hoZVU1aGJXVWlMQ0pqYjI1emRISjFZM1J2Y2lJc0ltNWhiV1VpTENKclpYbHpJaXdpVDJKcVpXTjBJaXdpYkdWdVozUm9JaXdpYW05cGJpSXNJbWRsZEVsdWRHVnlibUZzU1c1emRHRnVZMlZTWldGa2VVWnZjbFZ3WkdGMFpTSXNJbkIxWW14cFkwbHVjM1JoYm1ObElpd2lZMkZzYkdWeVRtRnRaU0lzSW1kbGRDSXNJbkJ5YjJObGMzTWlMQ0psYm5ZaUxDSk9UMFJGWDBWT1ZpSXNJbU4wYjNJaUxDSmpkWEp5Wlc1MElpd2lVbVZoWTNSVmNHUmhkR1ZSZFdWMVpTSXNJbWx6VFc5MWJuUmxaQ0lzSW05M2JtVnlJaXdpWDNkaGNtNWxaRUZpYjNWMFVtVm1jMGx1VW1WdVpHVnlJaXdpWjJWMFRtRnRaU0lzSWw5eVpXNWtaWEpsWkVOdmJYQnZibVZ1ZENJc0ltVnVjWFZsZFdWRFlXeHNZbUZqYXlJc0ltTmhiR3hpWVdOcklpd2lkbUZzYVdSaGRHVkRZV3hzWW1GamF5SXNJbDl3Wlc1a2FXNW5RMkZzYkdKaFkydHpJaXdpY0hWemFDSXNJbVZ1Y1hWbGRXVkRZV3hzWW1GamEwbHVkR1Z5Ym1Gc0lpd2laVzV4ZFdWMVpVWnZjbU5sVlhCa1lYUmxJaXdpWDNCbGJtUnBibWRHYjNKalpWVndaR0YwWlNJc0ltVnVjWFZsZFdWU1pYQnNZV05sVTNSaGRHVWlMQ0pqYjIxd2JHVjBaVk4wWVhSbElpd2lYM0JsYm1ScGJtZFRkR0YwWlZGMVpYVmxJaXdpWDNCbGJtUnBibWRTWlhCc1lXTmxVM1JoZEdVaUxDSmxibkYxWlhWbFUyVjBVM1JoZEdVaUxDSndZWEowYVdGc1UzUmhkR1VpTENKa1pXSjFaMVJ2YjJ3aUxDSnZibE5sZEZOMFlYUmxJaXdpWlc1eGRXVjFaVVZzWlcxbGJuUkpiblJsY201aGJDSXNJbTVsZUhSRmJHVnRaVzUwSWl3aWJtVjRkRU52Ym5SbGVIUWlMQ0pmY0dWdVpHbHVaMFZzWlcxbGJuUWlMQ0pmWTI5dWRHVjRkQ0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVkZCTEdGQlJVRXNTVUZCU1VFc1pVRkJhVUpETEZGQlFWRXNkMEpCUlhwQ1F5eHJRa0ZCYjBKRUxGRkJRVkVzSzBKQlF6VkNSU3hwUWtGQmJVSkdMRkZCUVZFc2MwSkJRek5DUnl4eFFrRkJkVUpJTEZGQlFWRXNNRUpCUXk5Q1NTeGhRVUZsU2l4UlFVRlJMR3RDUVVWMlFrc3NWVUZCV1V3c1VVRkJVU3h6UWtGRGNFSk5MRkZCUVZWT0xGRkJRVkVzYjBKQlJYUkNMRk5CUVZOUExHTkJRV05ETEVkQlEzSkNTaXhoUVVGaFJ5eGpRVUZqUXl4SFFVYzNRaXhUUVVGVFF5eDVRa0ZCZVVKRExFZEJRMmhETEVsQlFVbERMRk5CUVdORUxFVkJRMnhDTEVkQlFXRXNWMEZCVkVNc1JVRkRSaXhQUVVGUFFTeEZRVVZVTEVsQlFVbERMRVZCUVdOR0xFVkJRVWxITEdGQlFXVklMRVZCUVVsSExGbEJRVmxETEUxQlFWRklMRVZCUTNwRVNTeEZRVUZQUXl4UFFVRlBSQ3hMUVVGTFRDeEhRVU4yUWl4UFFVRkpTeXhGUVVGTFJTeFBRVUZUTEVkQlFVdEdMRVZCUVV0RkxFOUJRVk1zUjBGRE5VSk1MRVZCUVdNc1YwRkJZVWNzUlVGQlMwY3NTMEZCU3l4TlFVRlJMRWxCUlM5RFRpeEZRVWRVTEZOQlFWTlBMR3REUVVGclEwTXNSVUZCWjBKRExFZEJRM3BFTEVsQlFVbGlMRVZCUVcxQ1RpeHBRa0ZCYVVKdlFpeEpRVUZKUml4SFFVTTFReXhKUVVGTFdpeEZRVUZyUWl4RFFVTnlRaXhIUVVFMlFpeGxRVUY2UW1Vc1VVRkJVVU1zU1VGQlNVTXNVMEZCTWtJc1EwRkRla01zU1VGQlNVTXNSVUZCVDA0c1JVRkJaVkFzV1VGSlJDeGxRVUY2UWxVc1VVRkJVVU1zU1VGQlNVTXNWVUZCTkVKdVFpeFRRVUZUWlN4RlFVRlpMSFZNUVVGclRVRXNSVUZCV1VFc1JVRkJXVXNzU1VGQlUwRXNSVUZCUzJRc1lVRkJaV01zUlVGQlMxb3NUMEZCVXl4alFVVndWU3hQUVVGUExFdEJUMVFzVFVGS05rSXNaVUZCZWtKVExGRkJRVkZETEVsQlFVbERMRlZCUTFjc1pVRkJla0pHTEZGQlFWRkRMRWxCUVVsRExGVkJRVFJDYmtJc1VVRkJjVU1zVFVGQk4wSk1MR3RDUVVGclFqQkNMRkZCUVdsQ0xHZFNRVUZ4VTA0c1IwRkhibGhpTEVWQlQxUXNTVUZCU1c5Q0xHbENRVUZ0UWl4RFFWRnlRa01zVlVGQlZ5eFRRVUZWVkN4SFFVTnVRaXhIUVVFMlFpeGxRVUY2UWtjc1VVRkJVVU1zU1VGQlNVTXNVMEZCTWtJc1EwRkRla01zU1VGQlNVc3NSVUZCVVRkQ0xHdENRVUZyUWpCQ0xGRkJRMmhDTEU5QlFWWkhMRWxCUTNWQ0xHVkJRWHBDVUN4UlFVRlJReXhKUVVGSlF5eFZRVUUwUW01Q0xGRkJRVkYzUWl4RlFVRk5ReXg1UWtGQk1FSXNkMUpCUVRaVFJDeEZRVUZOUlN4WFFVRmhMR1ZCUTJoYVJpeEZRVUZOUXl3d1FrRkJNa0lzUjBGSGNrTXNTVUZCU1haQ0xFVkJRVzFDVGl4cFFrRkJhVUp2UWl4SlFVRkpSaXhIUVVNMVF5eFJRVUZKV2l4TFFVbFBRU3hGUVVGcFFubENMRzlDUVdVNVFrTXNaMEpCUVdsQ0xGTkJRVlZrTEVWQlFXZENaU3hGUVVGVlpDeEhRVU51UkU4c2FVSkJRV2xDVVN4cFFrRkJhVUpFTEVWQlFWVmtMRWRCUXpWRExFbEJRVWxpTEVWQlFXMUNWeXhyUTBGQmEwTkRMRWRCVDNwRUxFbEJRVXRhTEVWQlEwZ3NUMEZCVHl4TFFVZE1RU3hGUVVGcFFqWkNMR3RDUVVOdVFqZENMRVZCUVdsQ05rSXNhMEpCUVd0Q1F5eExRVUZMU0N4SFFVVjRRek5DTEVWQlFXbENOa0lzYTBKQlFXOUNMRU5CUVVOR0xFZEJUWGhETlVJc1kwRkJZME1zU1VGSGFFSXJRaXgzUWtGQmVVSXNVMEZCVlM5Q0xFVkJRV3RDTWtJc1IwRkRMME16UWl4RlFVRnBRalpDTEd0Q1FVTnVRamRDTEVWQlFXbENOa0lzYTBKQlFXdENReXhMUVVGTFNDeEhRVVY0UXpOQ0xFVkJRV2xDTmtJc2EwSkJRVzlDTEVOQlFVTkdMRWRCUlhoRE5VSXNZMEZCWTBNc1NVRm5RbWhDWjBNc2JVSkJRVzlDTEZOQlFWVndRaXhIUVVNMVFpeEpRVUZKV2l4RlFVRnRRbGNzYTBOQlFXdERReXhGUVVGblFpeGxRVVZ3UlZvc1NVRkpURUVzUlVGQmFVSnBReXh4UWtGQmMwSXNSVUZGZGtOc1F5eGpRVUZqUXl4TFFXTm9RbXRETEc5Q1FVRnhRaXhUUVVGVmRFSXNSVUZCWjBKMVFpeEZRVUZsVWl4SFFVTTFSQ3hKUVVGSk0wSXNSVUZCYlVKWExHdERRVUZyUTBNc1JVRkJaMElzWjBKQlJYQkZXaXhKUVVsTVFTeEZRVUZwUW05RExHMUNRVUZ4UWl4RFFVRkRSQ3hIUVVOMlEyNURMRVZCUVdsQ2NVTXNjMEpCUVhWQ0xFVkJSM0JEVml4TlFVRkJRU3hKUVVOR1VDeHBRa0ZCYVVKUkxHbENRVUZwUWtRc1JVRkJWU3huUWtGRGVFTXpRaXhGUVVGcFFqWkNMR3RDUVVOdVFqZENMRVZCUVdsQ05rSXNhMEpCUVd0Q1F5eExRVUZMU0N4SFFVVjRRek5DTEVWQlFXbENOa0lzYTBKQlFXOUNMRU5CUVVOR0xFbEJTVEZETlVJc1kwRkJZME1zUzBGaGFFSnpReXhuUWtGQmFVSXNVMEZCVlRGQ0xFVkJRV2RDTWtJc1IwRkRXaXhsUVVGNlFuaENMRkZCUVZGRExFbEJRVWxETEZkQlEyUjBRaXh4UWtGQmNVSTJReXhWUVVGVlF5eGhRVU5PTEdWQlFYcENNVUlzVVVGQlVVTXNTVUZCU1VNc1ZVRkJORUp1UWl4UlFVRjNRaXhOUVVGb1FubERMRVZCUVhOQ0xEWkdRVWQ0UlN4SlFVRkpka01zUlVGQmJVSlhMR3REUVVGclEwTXNSVUZCWjBJc1dVRkZjRVZhTEV0QlNVOUJMRVZCUVdsQ2IwTXNjVUpCUVhWQ2NFTXNSVUZCYVVKdlF5eHRRa0ZCY1VJc1MwRkRjRVpPTEV0QlFVdFRMRWRCUlZoNFF5eGpRVUZqUXl4TFFVZG9RakJETEhWQ1FVRjNRaXhUUVVGVk1VTXNSVUZCYTBJeVF5eEZRVUZoUXl4SFFVTXZSRFZETEVWQlFXbENOa01zWjBKQlFXdENSaXhGUVVWdVF6TkRMRVZCUVdsQ09FTXNVMEZCVjBZc1JVRkROVUkzUXl4alFVRmpReXhKUVVkb1FqUkNMR2xDUVVGclFpeFRRVUZWUkN4RlFVRlZaQ3hIUVVOcVEyTXNSMEZCWjBNc2JVSkJRV0pCTEVsQlFXOUVMR1ZCUVhwQ1dpeFJRVUZSUXl4SlFVRkpReXhUUVVFMFFuQkNMRmRCUVZVc1JVRkJUeXhyUjBGQmJVZG5RaXhGUVVGWldpeDVRa0ZCZVVJd1FpeEpRVUZoY0VNc1pVRkJaU3hOUVVGUGMwSXNSVUZCV1Zvc2VVSkJRWGxDTUVJc1QwRkpPVlJ2UWl4UFFVRlBReXhSUVVGVk5VSWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F0Wkc5dEwyeHBZaTlTWldGamRGVndaR0YwWlZGMVpYVmxMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBfcHJvZEludmFyaWFudD1yZXF1aXJlKFwiLi9yZWFjdFByb2RJbnZhcmlhbnRcIiksX2Fzc2lnbj1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxDYWxsYmFja1F1ZXVlPXJlcXVpcmUoXCIuL0NhbGxiYWNrUXVldWVcIiksUG9vbGVkQ2xhc3M9cmVxdWlyZShcIi4vUG9vbGVkQ2xhc3NcIiksUmVhY3RGZWF0dXJlRmxhZ3M9cmVxdWlyZShcIi4vUmVhY3RGZWF0dXJlRmxhZ3NcIiksUmVhY3RSZWNvbmNpbGVyPXJlcXVpcmUoXCIuL1JlYWN0UmVjb25jaWxlclwiKSxUcmFuc2FjdGlvbj1yZXF1aXJlKFwiLi9UcmFuc2FjdGlvblwiKSxpbnZhcmlhbnQ9cmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKSxkaXJ0eUNvbXBvbmVudHM9W10sdXBkYXRlQmF0Y2hOdW1iZXI9MCxhc2FwQ2FsbGJhY2tRdWV1ZT1DYWxsYmFja1F1ZXVlLmdldFBvb2xlZCgpLGFzYXBFbnF1ZXVlZD0hMSxiYXRjaGluZ1N0cmF0ZWd5PW51bGw7ZnVuY3Rpb24gZW5zdXJlSW5qZWN0ZWQoKXtSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbiYmYmF0Y2hpbmdTdHJhdGVneXx8KFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwiUmVhY3RVcGRhdGVzOiBtdXN0IGluamVjdCBhIHJlY29uY2lsZSB0cmFuc2FjdGlvbiBjbGFzcyBhbmQgYmF0Y2hpbmcgc3RyYXRlZ3lcIik6X3Byb2RJbnZhcmlhbnQoXCIxMjNcIikpfXZhciBORVNURURfVVBEQVRFUz17aW5pdGlhbGl6ZTpmdW5jdGlvbigpe3RoaXMuZGlydHlDb21wb25lbnRzTGVuZ3RoPWRpcnR5Q29tcG9uZW50cy5sZW5ndGh9LGNsb3NlOmZ1bmN0aW9uKCl7dGhpcy5kaXJ0eUNvbXBvbmVudHNMZW5ndGghPT1kaXJ0eUNvbXBvbmVudHMubGVuZ3RoPyhkaXJ0eUNvbXBvbmVudHMuc3BsaWNlKDAsdGhpcy5kaXJ0eUNvbXBvbmVudHNMZW5ndGgpLGZsdXNoQmF0Y2hlZFVwZGF0ZXMoKSk6ZGlydHlDb21wb25lbnRzLmxlbmd0aD0wfX0sVVBEQVRFX1FVRVVFSU5HPXtpbml0aWFsaXplOmZ1bmN0aW9uKCl7dGhpcy5jYWxsYmFja1F1ZXVlLnJlc2V0KCl9LGNsb3NlOmZ1bmN0aW9uKCl7dGhpcy5jYWxsYmFja1F1ZXVlLm5vdGlmeUFsbCgpfX0sVFJBTlNBQ1RJT05fV1JBUFBFUlM9W05FU1RFRF9VUERBVEVTLFVQREFURV9RVUVVRUlOR107ZnVuY3Rpb24gUmVhY3RVcGRhdGVzRmx1c2hUcmFuc2FjdGlvbigpe3RoaXMucmVpbml0aWFsaXplVHJhbnNhY3Rpb24oKSx0aGlzLmRpcnR5Q29tcG9uZW50c0xlbmd0aD1udWxsLHRoaXMuY2FsbGJhY2tRdWV1ZT1DYWxsYmFja1F1ZXVlLmdldFBvb2xlZCgpLHRoaXMucmVjb25jaWxlVHJhbnNhY3Rpb249UmVhY3RVcGRhdGVzLlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24uZ2V0UG9vbGVkKCEwKX1mdW5jdGlvbiBiYXRjaGVkVXBkYXRlcyhlLHQsYSxuLGMscil7cmV0dXJuIGVuc3VyZUluamVjdGVkKCksYmF0Y2hpbmdTdHJhdGVneS5iYXRjaGVkVXBkYXRlcyhlLHQsYSxuLGMscil9ZnVuY3Rpb24gbW91bnRPcmRlckNvbXBhcmF0b3IoZSx0KXtyZXR1cm4gZS5fbW91bnRPcmRlci10Ll9tb3VudE9yZGVyfWZ1bmN0aW9uIHJ1bkJhdGNoZWRVcGRhdGVzKGUpe3ZhciB0PWUuZGlydHlDb21wb25lbnRzTGVuZ3RoO3QhPT1kaXJ0eUNvbXBvbmVudHMubGVuZ3RoJiYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoITEsXCJFeHBlY3RlZCBmbHVzaCB0cmFuc2FjdGlvbidzIHN0b3JlZCBkaXJ0eS1jb21wb25lbnRzIGxlbmd0aCAoJXMpIHRvIG1hdGNoIGRpcnR5LWNvbXBvbmVudHMgYXJyYXkgbGVuZ3RoICglcykuXCIsdCxkaXJ0eUNvbXBvbmVudHMubGVuZ3RoKTpfcHJvZEludmFyaWFudChcIjEyNFwiLHQsZGlydHlDb21wb25lbnRzLmxlbmd0aCkpLGRpcnR5Q29tcG9uZW50cy5zb3J0KG1vdW50T3JkZXJDb21wYXJhdG9yKSx1cGRhdGVCYXRjaE51bWJlcisrO2Zvcih2YXIgYT0wO2E8dDthKyspe3ZhciBuLGM9ZGlydHlDb21wb25lbnRzW2FdLHI9Yy5fcGVuZGluZ0NhbGxiYWNrcztpZihjLl9wZW5kaW5nQ2FsbGJhY2tzPW51bGwsUmVhY3RGZWF0dXJlRmxhZ3MubG9nVG9wTGV2ZWxSZW5kZXJzKXt2YXIgaT1jO2MuX2N1cnJlbnRFbGVtZW50LnR5cGUuaXNSZWFjdFRvcExldmVsV3JhcHBlciYmKGk9Yy5fcmVuZGVyZWRDb21wb25lbnQpLG49XCJSZWFjdCB1cGRhdGU6IFwiK2kuZ2V0TmFtZSgpLGNvbnNvbGUudGltZShuKX1pZihSZWFjdFJlY29uY2lsZXIucGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5KGMsZS5yZWNvbmNpbGVUcmFuc2FjdGlvbix1cGRhdGVCYXRjaE51bWJlciksbiYmY29uc29sZS50aW1lRW5kKG4pLHIpZm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspZS5jYWxsYmFja1F1ZXVlLmVucXVldWUocltvXSxjLmdldFB1YmxpY0luc3RhbmNlKCkpfX1fYXNzaWduKFJlYWN0VXBkYXRlc0ZsdXNoVHJhbnNhY3Rpb24ucHJvdG90eXBlLFRyYW5zYWN0aW9uLHtnZXRUcmFuc2FjdGlvbldyYXBwZXJzOmZ1bmN0aW9uKCl7cmV0dXJuIFRSQU5TQUNUSU9OX1dSQVBQRVJTfSxkZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dGhpcy5kaXJ0eUNvbXBvbmVudHNMZW5ndGg9bnVsbCxDYWxsYmFja1F1ZXVlLnJlbGVhc2UodGhpcy5jYWxsYmFja1F1ZXVlKSx0aGlzLmNhbGxiYWNrUXVldWU9bnVsbCxSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbi5yZWxlYXNlKHRoaXMucmVjb25jaWxlVHJhbnNhY3Rpb24pLHRoaXMucmVjb25jaWxlVHJhbnNhY3Rpb249bnVsbH0scGVyZm9ybTpmdW5jdGlvbihlLHQsYSl7cmV0dXJuIFRyYW5zYWN0aW9uLnBlcmZvcm0uY2FsbCh0aGlzLHRoaXMucmVjb25jaWxlVHJhbnNhY3Rpb24ucGVyZm9ybSx0aGlzLnJlY29uY2lsZVRyYW5zYWN0aW9uLGUsdCxhKX19KSxQb29sZWRDbGFzcy5hZGRQb29saW5nVG8oUmVhY3RVcGRhdGVzRmx1c2hUcmFuc2FjdGlvbik7dmFyIGZsdXNoQmF0Y2hlZFVwZGF0ZXM9ZnVuY3Rpb24oKXtmb3IoO2RpcnR5Q29tcG9uZW50cy5sZW5ndGh8fGFzYXBFbnF1ZXVlZDspe2lmKGRpcnR5Q29tcG9uZW50cy5sZW5ndGgpe3ZhciBlPVJlYWN0VXBkYXRlc0ZsdXNoVHJhbnNhY3Rpb24uZ2V0UG9vbGVkKCk7ZS5wZXJmb3JtKHJ1bkJhdGNoZWRVcGRhdGVzLG51bGwsZSksUmVhY3RVcGRhdGVzRmx1c2hUcmFuc2FjdGlvbi5yZWxlYXNlKGUpfWlmKGFzYXBFbnF1ZXVlZCl7YXNhcEVucXVldWVkPSExO3ZhciB0PWFzYXBDYWxsYmFja1F1ZXVlO2FzYXBDYWxsYmFja1F1ZXVlPUNhbGxiYWNrUXVldWUuZ2V0UG9vbGVkKCksdC5ub3RpZnlBbGwoKSxDYWxsYmFja1F1ZXVlLnJlbGVhc2UodCl9fX07ZnVuY3Rpb24gZW5xdWV1ZVVwZGF0ZShlKXtlbnN1cmVJbmplY3RlZCgpLGJhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXM/KGRpcnR5Q29tcG9uZW50cy5wdXNoKGUpLG51bGw9PWUuX3VwZGF0ZUJhdGNoTnVtYmVyJiYoZS5fdXBkYXRlQmF0Y2hOdW1iZXI9dXBkYXRlQmF0Y2hOdW1iZXIrMSkpOmJhdGNoaW5nU3RyYXRlZ3kuYmF0Y2hlZFVwZGF0ZXMoZW5xdWV1ZVVwZGF0ZSxlKX1mdW5jdGlvbiBhc2FwKGUsdCl7aW52YXJpYW50KGJhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXMsXCJSZWFjdFVwZGF0ZXMuYXNhcDogQ2FuJ3QgZW5xdWV1ZSBhbiBhc2FwIGNhbGxiYWNrIGluIGEgY29udGV4dCB3aGVyZXVwZGF0ZXMgYXJlIG5vdCBiZWluZyBiYXRjaGVkLlwiKSxhc2FwQ2FsbGJhY2tRdWV1ZS5lbnF1ZXVlKGUsdCksYXNhcEVucXVldWVkPSEwfXZhciBSZWFjdFVwZGF0ZXNJbmplY3Rpb249e2luamVjdFJlY29uY2lsZVRyYW5zYWN0aW9uOmZ1bmN0aW9uKGUpe2V8fChcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcIlJlYWN0VXBkYXRlczogbXVzdCBwcm92aWRlIGEgcmVjb25jaWxlIHRyYW5zYWN0aW9uIGNsYXNzXCIpOl9wcm9kSW52YXJpYW50KFwiMTI2XCIpKSxSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbj1lfSxpbmplY3RCYXRjaGluZ1N0cmF0ZWd5OmZ1bmN0aW9uKGUpe2V8fChcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcIlJlYWN0VXBkYXRlczogbXVzdCBwcm92aWRlIGEgYmF0Y2hpbmcgc3RyYXRlZ3lcIik6X3Byb2RJbnZhcmlhbnQoXCIxMjdcIikpLFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUuYmF0Y2hlZFVwZGF0ZXMmJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcIlJlYWN0VXBkYXRlczogbXVzdCBwcm92aWRlIGEgYmF0Y2hlZFVwZGF0ZXMoKSBmdW5jdGlvblwiKTpfcHJvZEludmFyaWFudChcIjEyOFwiKSksXCJib29sZWFuXCIhPXR5cGVvZiBlLmlzQmF0Y2hpbmdVcGRhdGVzJiYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoITEsXCJSZWFjdFVwZGF0ZXM6IG11c3QgcHJvdmlkZSBhbiBpc0JhdGNoaW5nVXBkYXRlcyBib29sZWFuIGF0dHJpYnV0ZVwiKTpfcHJvZEludmFyaWFudChcIjEyOVwiKSksYmF0Y2hpbmdTdHJhdGVneT1lfX0sUmVhY3RVcGRhdGVzPXtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uOm51bGwsYmF0Y2hlZFVwZGF0ZXM6YmF0Y2hlZFVwZGF0ZXMsZW5xdWV1ZVVwZGF0ZTplbnF1ZXVlVXBkYXRlLGZsdXNoQmF0Y2hlZFVwZGF0ZXM6Zmx1c2hCYXRjaGVkVXBkYXRlcyxpbmplY3Rpb246UmVhY3RVcGRhdGVzSW5qZWN0aW9uLGFzYXA6YXNhcH07bW9kdWxlLmV4cG9ydHM9UmVhY3RVcGRhdGVzO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxKbFlXTjBWWEJrWVhSbGN5NXFjeUpkTENKdVlXMWxjeUk2V3lKZmNISnZaRWx1ZG1GeWFXRnVkQ0lzSW5KbGNYVnBjbVVpTENKZllYTnphV2R1SWl3aVEyRnNiR0poWTJ0UmRXVjFaU0lzSWxCdmIyeGxaRU5zWVhOeklpd2lVbVZoWTNSR1pXRjBkWEpsUm14aFozTWlMQ0pTWldGamRGSmxZMjl1WTJsc1pYSWlMQ0pVY21GdWMyRmpkR2x2YmlJc0ltbHVkbUZ5YVdGdWRDSXNJbVJwY25SNVEyOXRjRzl1Wlc1MGN5SXNJblZ3WkdGMFpVSmhkR05vVG5WdFltVnlJaXdpWVhOaGNFTmhiR3hpWVdOclVYVmxkV1VpTENKblpYUlFiMjlzWldRaUxDSmhjMkZ3Ulc1eGRXVjFaV1FpTENKaVlYUmphR2x1WjFOMGNtRjBaV2Q1SWl3aVpXNXpkWEpsU1c1cVpXTjBaV1FpTENKU1pXRmpkRlZ3WkdGMFpYTWlMQ0pTWldGamRGSmxZMjl1WTJsc1pWUnlZVzV6WVdOMGFXOXVJaXdpY0hKdlkyVnpjeUlzSW1WdWRpSXNJazVQUkVWZlJVNVdJaXdpVGtWVFZFVkVYMVZRUkVGVVJWTWlMQ0pwYm1sMGFXRnNhWHBsSWl3aWRHaHBjeUlzSW1ScGNuUjVRMjl0Y0c5dVpXNTBjMHhsYm1kMGFDSXNJbXhsYm1kMGFDSXNJbU5zYjNObElpd2ljM0JzYVdObElpd2labXgxYzJoQ1lYUmphR1ZrVlhCa1lYUmxjeUlzSWxWUVJFRlVSVjlSVlVWVlJVbE9SeUlzSW1OaGJHeGlZV05yVVhWbGRXVWlMQ0p5WlhObGRDSXNJbTV2ZEdsbWVVRnNiQ0lzSWxSU1FVNVRRVU5VU1U5T1gxZFNRVkJRUlZKVElpd2lVbVZoWTNSVmNHUmhkR1Z6Um14MWMyaFVjbUZ1YzJGamRHbHZiaUlzSW5KbGFXNXBkR2xoYkdsNlpWUnlZVzV6WVdOMGFXOXVJaXdpY21WamIyNWphV3hsVkhKaGJuTmhZM1JwYjI0aUxDSmlZWFJqYUdWa1ZYQmtZWFJsY3lJc0ltTmhiR3hpWVdOcklpd2lZU0lzSW1JaUxDSmpJaXdpWkNJc0ltVWlMQ0p0YjNWdWRFOXlaR1Z5UTI5dGNHRnlZWFJ2Y2lJc0ltTXhJaXdpWXpJaUxDSmZiVzkxYm5SUGNtUmxjaUlzSW5KMWJrSmhkR05vWldSVmNHUmhkR1Z6SWl3aWRISmhibk5oWTNScGIyNGlMQ0pzWlc0aUxDSnpiM0owSWl3aWFTSXNJbTFoY210bGNrNWhiV1VpTENKamIyMXdiMjVsYm5RaUxDSmpZV3hzWW1GamEzTWlMQ0pmY0dWdVpHbHVaME5oYkd4aVlXTnJjeUlzSW14dloxUnZjRXhsZG1Wc1VtVnVaR1Z5Y3lJc0ltNWhiV1ZrUTI5dGNHOXVaVzUwSWl3aVgyTjFjbkpsYm5SRmJHVnRaVzUwSWl3aWRIbHdaU0lzSW1selVtVmhZM1JVYjNCTVpYWmxiRmR5WVhCd1pYSWlMQ0pmY21WdVpHVnlaV1JEYjIxd2IyNWxiblFpTENKblpYUk9ZVzFsSWl3aVkyOXVjMjlzWlNJc0luUnBiV1VpTENKd1pYSm1iM0p0VlhCa1lYUmxTV1pPWldObGMzTmhjbmtpTENKMGFXMWxSVzVrSWl3aWFpSXNJbVZ1Y1hWbGRXVWlMQ0puWlhSUWRXSnNhV05KYm5OMFlXNWpaU0lzSW5CeWIzUnZkSGx3WlNJc0ltZGxkRlJ5WVc1ellXTjBhVzl1VjNKaGNIQmxjbk1pTENKa1pYTjBjblZqZEc5eUlpd2ljbVZzWldGelpTSXNJbkJsY21admNtMGlMQ0p0WlhSb2IyUWlMQ0p6WTI5d1pTSXNJbU5oYkd3aUxDSmhaR1JRYjI5c2FXNW5WRzhpTENKeGRXVjFaU0lzSW1WdWNYVmxkV1ZWY0dSaGRHVWlMQ0pwYzBKaGRHTm9hVzVuVlhCa1lYUmxjeUlzSW5CMWMyZ2lMQ0pmZFhCa1lYUmxRbUYwWTJoT2RXMWlaWElpTENKaGMyRndJaXdpWTI5dWRHVjRkQ0lzSWxKbFlXTjBWWEJrWVhSbGMwbHVhbVZqZEdsdmJpSXNJbWx1YW1WamRGSmxZMjl1WTJsc1pWUnlZVzV6WVdOMGFXOXVJaXdpVW1WamIyNWphV3hsVkhKaGJuTmhZM1JwYjI0aUxDSnBibXBsWTNSQ1lYUmphR2x1WjFOMGNtRjBaV2Q1SWl3aVgySmhkR05vYVc1blUzUnlZWFJsWjNraUxDSnBibXBsWTNScGIyNGlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRlJRU3hoUVVWQkxFbEJRVWxCTEdWQlFXbENReXhSUVVGUkxIZENRVU42UWtNc1VVRkJWVVFzVVVGQlVTeHBRa0ZGYkVKRkxHTkJRV2RDUml4UlFVRlJMRzFDUVVONFFrY3NXVUZCWTBnc1VVRkJVU3hwUWtGRGRFSkpMR3RDUVVGdlFrb3NVVUZCVVN4MVFrRkROVUpMTEdkQ1FVRnJRa3dzVVVGQlVTeHhRa0ZETVVKTkxGbEJRV05PTEZGQlFWRXNhVUpCUlhSQ1R5eFZRVUZaVUN4UlFVRlJMSE5DUVVWd1FsRXNaMEpCUVd0Q0xFZEJRMnhDUXl4clFrRkJiMElzUlVGRGNFSkRMR3RDUVVGdlFsSXNZMEZCWTFNc1dVRkRiRU5ETEdOQlFXVXNSVUZGWmtNc2FVSkJRVzFDTEV0QlJYWkNMRk5CUVZORExHbENRVU5NUXl4aFFVRmhReXd5UWtGQk5rSklMRzFDUVVFMlF5eGxRVUY2UWtrc1VVRkJVVU1zU1VGQlNVTXNVMEZCTkVKYUxGZEJRVlVzUlVGQlR5eHBSa0ZCYlVaU0xHVkJRV1VzVVVGSE4wNHNTVUZCU1hGQ0xHVkJRV2xDTEVOQlEyNUNReXhYUVVGWkxGZEJRMVpETEV0QlFVdERMSE5DUVVGM1FtWXNaMEpCUVdkQ1owSXNVVUZGTDBORExFMUJRVThzVjBGRFJFZ3NTMEZCUzBNc2QwSkJRVEJDWml4blFrRkJaMEpuUWl4UlFVMXFSR2hDTEdkQ1FVRm5RbXRDTEU5QlFVOHNSVUZCUjBvc1MwRkJTME1zZFVKQlF5OUNTU3gxUWtGRlFXNUNMR2RDUVVGblFtZENMRTlCUVZNc1NVRkxNMEpKTEdkQ1FVRnJRaXhEUVVOd1FsQXNWMEZCV1N4WFFVTldReXhMUVVGTFR5eGpRVUZqUXl4VFFVVnlRa3dzVFVGQlR5eFhRVU5NU0N4TFFVRkxUeXhqUVVGalJTeGpRVWx1UWtNc2NVSkJRWFZDTEVOQlFVTmFMR1ZCUVdkQ1VTeHBRa0ZGTlVNc1UwRkJVMHNzSzBKQlExQllMRXRCUVV0WkxEQkNRVU5NV2l4TFFVRkxReXh6UWtGQmQwSXNTMEZETjBKRUxFdEJRVXRQTEdOQlFXZENNMElzWTBGQlkxTXNXVUZEYmtOWExFdEJRVXRoTEhGQ1FVRjFRbkJDTEdGQlFXRkRMREJDUVVFd1Frd3NWMEZETjBNc1IwRjVRbmhDTEZOQlFWTjVRaXhsUVVGbFF5eEZRVUZWUXl4RlFVRkhReXhGUVVGSFF5eEZRVUZIUXl4RlFVRkhReXhIUVVVMVF5eFBRVVJCTlVJc2FVSkJRMDlFTEdsQ1FVRnBRblZDTEdWQlFXVkRMRVZCUVZWRExFVkJRVWRETEVWQlFVZERMRVZCUVVkRExFVkJRVWRETEVkQlZTOUVMRk5CUVZORExIRkNRVUZ4UWtNc1JVRkJTVU1zUjBGRGFFTXNUMEZCVDBRc1JVRkJSMFVzV1VGQlkwUXNSVUZCUjBNc1dVRkhOMElzVTBGQlUwTXNhMEpCUVd0Q1F5eEhRVU42UWl4SlFVRkpReXhGUVVGTlJDeEZRVUZaZWtJc2MwSkJRM0JDTUVJc1NVRkJVWHBETEdkQ1FVRm5RbWRDTEZOQlFXMURMR1ZCUVhwQ1VDeFJRVUZSUXl4SlFVRkpReXhUUVVFMFFsb3NWMEZCVlN4RlFVRlBMR2RJUVVGclNEQkRMRVZCUVV0NlF5eG5Ra0ZCWjBKblFpeFJRVUZWZWtJc1pVRkJaU3hOUVVGUGEwUXNSVUZCUzNwRExHZENRVUZuUW1kQ0xGTkJTM3BTYUVJc1owSkJRV2RDTUVNc1MwRkJTMUFzYzBKQlQzSkNiRU1zYjBKQlJVRXNTVUZCU3l4SlFVRkpNRU1zUlVGQlNTeEZRVUZIUVN4RlFVRkpSaXhGUVVGTFJTeEpRVUZMTEVOQlNUVkNMRWxCVVVsRExFVkJVa0ZETEVWQlFWazNReXhuUWtGQlowSXlReXhIUVVzMVFrY3NSVUZCV1VRc1JVRkJWVVVzYTBKQlNURkNMRWRCU0VGR0xFVkJRVlZGTEd0Q1FVRnZRaXhMUVVjeFFtNUVMR3RDUVVGclFtOUVMRzFDUVVGdlFpeERRVU40UXl4SlFVRkpReXhGUVVGcFFrb3NSVUZGYWtKQkxFVkJRVlZMTEdkQ1FVRm5Ra01zUzBGQlMwTXNlVUpCUTJwRFNDeEZRVUZwUWtvc1JVRkJWVkVzYjBKQlJUZENWQ3hGUVVGaExHbENRVUZ0UWtzc1JVRkJaVXNzVlVGREwwTkRMRkZCUVZGRExFdEJRVXRhTEVkQlUyWXNSMEZPUVM5RExHZENRVUZuUWpSRUxIbENRVUY1UWxvc1JVRkJWMHdzUlVGQldXSXNjVUpCUVhOQ01VSXNiVUpCUld4R01rTXNSMEZEUmxjc1VVRkJVVWNzVVVGQlVXUXNSMEZIWkVVc1JVRkRSaXhKUVVGTExFbEJRVWxoTEVWQlFVa3NSVUZCUjBFc1JVRkJTV0lzUlVGQlZUbENMRTlCUVZFeVF5eEpRVU53UTI1Q0xFVkJRVmx1UWl4alFVRmpkVU1zVVVGQlVXUXNSVUZCVldFc1IwRkJTV1FzUlVGQlZXZENMSE5DUVhKR2JFVndSU3hSUVVGUlowTXNOa0pCUVRaQ2NVTXNWVUZCVjJoRkxGbEJRV0VzUTBGRE0wUnBSU3gxUWtGQmQwSXNWMEZEZEVJc1QwRkJUM1pETEhOQ1FVZFVkME1zVjBGQldTeFhRVU5XYkVRc1MwRkJTME1zYzBKQlFYZENMRXRCUXpkQ2NrSXNZMEZCWTNWRkxGRkJRVkZ1UkN4TFFVRkxUeXhsUVVNelFsQXNTMEZCUzA4c1kwRkJaMElzUzBGRGNrSmtMR0ZCUVdGRExEQkNRVUV3UW5sRUxGRkJRVkZ1UkN4TFFVRkxZU3h6UWtGRGNFUmlMRXRCUVV0aExIRkNRVUYxUWl4TlFVYzVRblZETEZGQlFWTXNVMEZCVlVNc1JVRkJVVU1zUlVGQlQzUkRMRWRCUjJoRExFOUJRVTlvUXl4WlFVRlpiMFVzVVVGQlVVY3NTMEZCUzNaRUxFdEJRVTFCTEV0QlFVdGhMSEZDUVVGeFFuVkRMRkZCUVZOd1JDeExRVUZMWVN4eFFrRkJjMEozUXl4RlFVRlJReXhGUVVGUGRFTXNUVUZKZGtodVF5eFpRVUZaTWtVc1lVRkJZVGRETERoQ1FYVkZla0lzU1VGQlNVNHNiMEpCUVhOQ0xGZEJTM2hDTEV0QlFVOXVRaXhuUWtGQlowSm5RaXhSUVVGVldpeGpRVUZqTEVOQlF6ZERMRWRCUVVsS0xHZENRVUZuUW1kQ0xFOUJRVkVzUTBGRE1VSXNTVUZCU1hkQ0xFVkJRV05tTERaQ1FVRTJRblJDTEZsQlF5OURjVU1zUlVGQldUQkNMRkZCUVZFelFpeHJRa0ZCYlVJc1MwRkJUVU1zUjBGRE4wTm1MRFpDUVVFMlFuZERMRkZCUVZGNlFpeEhRVWQyUXl4SFFVRkpjRU1zWVVGQll5eERRVU5vUWtFc1kwRkJaU3hGUVVObUxFbEJRVWx0UlN4RlFVRlJja1VzYTBKQlExcEJMR3RDUVVGdlFsSXNZMEZCWTFNc1dVRkRiRU52UlN4RlFVRk5hRVFzV1VGRFRqZENMR05CUVdOMVJTeFJRVUZSVFN4TlFWTTFRaXhUUVVGVFF5eGpRVUZqTTBJc1IwRkRja0oyUXl4cFFrRlJTMFFzYVVKQlFXbENiMFVzYlVKQlMzUkNla1VzWjBKQlFXZENNRVVzUzBGQlN6ZENMRWRCUTJVc1RVRkJhRU5CTEVWQlFWVTRRaXh4UWtGRFdqbENMRVZCUVZVNFFpeHRRa0ZCY1VJeFJTeHJRa0ZCYjBJc1NVRk9ia1JKTEdsQ1FVRnBRblZDTEdWQlFXVTBReXhqUVVGbE0wSXNSMEZqYmtRc1UwRkJVeXRDTEV0QlFVc3ZReXhGUVVGVlowUXNSMEZEZEVJNVJTeFZRVUZWVFN4cFFrRkJhVUp2UlN4clFrRkJiVUlzYzBkQlF6bERka1VzYTBKQlFXdENNRVFzVVVGQlVTOUNMRVZCUVZWblJDeEhRVU53UTNwRkxHTkJRV1VzUlVGSGFrSXNTVUZCU1RCRkxITkNRVUYzUWl4RFFVTXhRa01zTWtKQlFUUkNMRk5CUVZWRExFZEJRMjVEUVN4SlFVRm5SQ3hsUVVGNlFuWkZMRkZCUVZGRExFbEJRVWxETEZOQlFUUkNXaXhYUVVGVkxFVkJRVThzTkVSQlFUaEVVaXhsUVVGbExGRkJRemxLWjBJc1lVRkJZVU1zTUVKQlFUUkNkMFVzUjBGSE0wTkRMSFZDUVVGM1FpeFRRVUZWUXl4SFFVTXZRa0VzU1VGQk5rTXNaVUZCZWtKNlJTeFJRVUZSUXl4SlFVRkpReXhUUVVFMFFsb3NWMEZCVlN4RlFVRlBMR3RFUVVGdlJGSXNaVUZCWlN4UlFVTnVSeXh0UWtGQmNrTXlSaXhGUVVGclFuUkVMR2xDUVVFd1JDeGxRVUY2UW01Q0xGRkJRVkZETEVsQlFVbERMRk5CUVRSQ1dpeFhRVUZWTEVWQlFVOHNNRVJCUVRSRVVpeGxRVUZsTEZGQlF5OUpMR3RDUVVGNFF6SkdMRVZCUVd0Q1ZDeHZRa0ZCTkVRc1pVRkJla0pvUlN4UlFVRlJReXhKUVVGSlF5eFRRVUUwUWxvc1YwRkJWU3hGUVVGUExIRkZRVUYxUlZJc1pVRkJaU3hSUVVNM1RXTXNhVUpCUVcxQ05rVXNTVUZKYmtJelJTeGhRVUZsTEVOQlQycENReXd3UWtGQk1rSXNTMEZGTTBKdlFpeGxRVUZuUWtFc1pVRkRhRUkwUXl4alFVRmxRU3hqUVVObWNrUXNiMEpCUVhGQ1FTeHZRa0ZEY2tKblJTeFZRVUZYVEN4elFrRkRXRVlzUzBGQlRVRXNUVUZIVWxFc1QwRkJUME1zVVVGQlZUbEZJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwzSmxZV04wTFdSdmJTOXNhV0l2VW1WaFkzUlZjR1JoZEdWekxtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7bW9kdWxlLmV4cG9ydHM9XCIxNS42LjJcIjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSmxZV04wVm1WeWMybHZiaTVxY3lKZExDSnVZVzFsY3lJNld5SnRiMlIxYkdVaUxDSmxlSEJ2Y25SeklsMHNJbTFoY0hCcGJtZHpJam9pUVVGUlFTeGhRVVZCUVN4UFFVRlBReXhSUVVGVklpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDNKbFlXTjBMV1J2YlM5c2FXSXZVbVZoWTNSV1pYSnphVzl1TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgTlM9e3hsaW5rOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLHhtbDpcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwifSxBVFRSUz17YWNjZW50SGVpZ2h0OlwiYWNjZW50LWhlaWdodFwiLGFjY3VtdWxhdGU6MCxhZGRpdGl2ZTowLGFsaWdubWVudEJhc2VsaW5lOlwiYWxpZ25tZW50LWJhc2VsaW5lXCIsYWxsb3dSZW9yZGVyOlwiYWxsb3dSZW9yZGVyXCIsYWxwaGFiZXRpYzowLGFtcGxpdHVkZTowLGFyYWJpY0Zvcm06XCJhcmFiaWMtZm9ybVwiLGFzY2VudDowLGF0dHJpYnV0ZU5hbWU6XCJhdHRyaWJ1dGVOYW1lXCIsYXR0cmlidXRlVHlwZTpcImF0dHJpYnV0ZVR5cGVcIixhdXRvUmV2ZXJzZTpcImF1dG9SZXZlcnNlXCIsYXppbXV0aDowLGJhc2VGcmVxdWVuY3k6XCJiYXNlRnJlcXVlbmN5XCIsYmFzZVByb2ZpbGU6XCJiYXNlUHJvZmlsZVwiLGJhc2VsaW5lU2hpZnQ6XCJiYXNlbGluZS1zaGlmdFwiLGJib3g6MCxiZWdpbjowLGJpYXM6MCxieTowLGNhbGNNb2RlOlwiY2FsY01vZGVcIixjYXBIZWlnaHQ6XCJjYXAtaGVpZ2h0XCIsY2xpcDowLGNsaXBQYXRoOlwiY2xpcC1wYXRoXCIsY2xpcFJ1bGU6XCJjbGlwLXJ1bGVcIixjbGlwUGF0aFVuaXRzOlwiY2xpcFBhdGhVbml0c1wiLGNvbG9ySW50ZXJwb2xhdGlvbjpcImNvbG9yLWludGVycG9sYXRpb25cIixjb2xvckludGVycG9sYXRpb25GaWx0ZXJzOlwiY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzXCIsY29sb3JQcm9maWxlOlwiY29sb3ItcHJvZmlsZVwiLGNvbG9yUmVuZGVyaW5nOlwiY29sb3ItcmVuZGVyaW5nXCIsY29udGVudFNjcmlwdFR5cGU6XCJjb250ZW50U2NyaXB0VHlwZVwiLGNvbnRlbnRTdHlsZVR5cGU6XCJjb250ZW50U3R5bGVUeXBlXCIsY3Vyc29yOjAsY3g6MCxjeTowLGQ6MCxkZWNlbGVyYXRlOjAsZGVzY2VudDowLGRpZmZ1c2VDb25zdGFudDpcImRpZmZ1c2VDb25zdGFudFwiLGRpcmVjdGlvbjowLGRpc3BsYXk6MCxkaXZpc29yOjAsZG9taW5hbnRCYXNlbGluZTpcImRvbWluYW50LWJhc2VsaW5lXCIsZHVyOjAsZHg6MCxkeTowLGVkZ2VNb2RlOlwiZWRnZU1vZGVcIixlbGV2YXRpb246MCxlbmFibGVCYWNrZ3JvdW5kOlwiZW5hYmxlLWJhY2tncm91bmRcIixlbmQ6MCxleHBvbmVudDowLGV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQ6XCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsZmlsbDowLGZpbGxPcGFjaXR5OlwiZmlsbC1vcGFjaXR5XCIsZmlsbFJ1bGU6XCJmaWxsLXJ1bGVcIixmaWx0ZXI6MCxmaWx0ZXJSZXM6XCJmaWx0ZXJSZXNcIixmaWx0ZXJVbml0czpcImZpbHRlclVuaXRzXCIsZmxvb2RDb2xvcjpcImZsb29kLWNvbG9yXCIsZmxvb2RPcGFjaXR5OlwiZmxvb2Qtb3BhY2l0eVwiLGZvY3VzYWJsZTowLGZvbnRGYW1pbHk6XCJmb250LWZhbWlseVwiLGZvbnRTaXplOlwiZm9udC1zaXplXCIsZm9udFNpemVBZGp1c3Q6XCJmb250LXNpemUtYWRqdXN0XCIsZm9udFN0cmV0Y2g6XCJmb250LXN0cmV0Y2hcIixmb250U3R5bGU6XCJmb250LXN0eWxlXCIsZm9udFZhcmlhbnQ6XCJmb250LXZhcmlhbnRcIixmb250V2VpZ2h0OlwiZm9udC13ZWlnaHRcIixmb3JtYXQ6MCxmcm9tOjAsZng6MCxmeTowLGcxOjAsZzI6MCxnbHlwaE5hbWU6XCJnbHlwaC1uYW1lXCIsZ2x5cGhPcmllbnRhdGlvbkhvcml6b250YWw6XCJnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsXCIsZ2x5cGhPcmllbnRhdGlvblZlcnRpY2FsOlwiZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWxcIixnbHlwaFJlZjpcImdseXBoUmVmXCIsZ3JhZGllbnRUcmFuc2Zvcm06XCJncmFkaWVudFRyYW5zZm9ybVwiLGdyYWRpZW50VW5pdHM6XCJncmFkaWVudFVuaXRzXCIsaGFuZ2luZzowLGhvcml6QWR2WDpcImhvcml6LWFkdi14XCIsaG9yaXpPcmlnaW5YOlwiaG9yaXotb3JpZ2luLXhcIixpZGVvZ3JhcGhpYzowLGltYWdlUmVuZGVyaW5nOlwiaW1hZ2UtcmVuZGVyaW5nXCIsaW46MCxpbjI6MCxpbnRlcmNlcHQ6MCxrOjAsazE6MCxrMjowLGszOjAsazQ6MCxrZXJuZWxNYXRyaXg6XCJrZXJuZWxNYXRyaXhcIixrZXJuZWxVbml0TGVuZ3RoOlwia2VybmVsVW5pdExlbmd0aFwiLGtlcm5pbmc6MCxrZXlQb2ludHM6XCJrZXlQb2ludHNcIixrZXlTcGxpbmVzOlwia2V5U3BsaW5lc1wiLGtleVRpbWVzOlwia2V5VGltZXNcIixsZW5ndGhBZGp1c3Q6XCJsZW5ndGhBZGp1c3RcIixsZXR0ZXJTcGFjaW5nOlwibGV0dGVyLXNwYWNpbmdcIixsaWdodGluZ0NvbG9yOlwibGlnaHRpbmctY29sb3JcIixsaW1pdGluZ0NvbmVBbmdsZTpcImxpbWl0aW5nQ29uZUFuZ2xlXCIsbG9jYWw6MCxtYXJrZXJFbmQ6XCJtYXJrZXItZW5kXCIsbWFya2VyTWlkOlwibWFya2VyLW1pZFwiLG1hcmtlclN0YXJ0OlwibWFya2VyLXN0YXJ0XCIsbWFya2VySGVpZ2h0OlwibWFya2VySGVpZ2h0XCIsbWFya2VyVW5pdHM6XCJtYXJrZXJVbml0c1wiLG1hcmtlcldpZHRoOlwibWFya2VyV2lkdGhcIixtYXNrOjAsbWFza0NvbnRlbnRVbml0czpcIm1hc2tDb250ZW50VW5pdHNcIixtYXNrVW5pdHM6XCJtYXNrVW5pdHNcIixtYXRoZW1hdGljYWw6MCxtb2RlOjAsbnVtT2N0YXZlczpcIm51bU9jdGF2ZXNcIixvZmZzZXQ6MCxvcGFjaXR5OjAsb3BlcmF0b3I6MCxvcmRlcjowLG9yaWVudDowLG9yaWVudGF0aW9uOjAsb3JpZ2luOjAsb3ZlcmZsb3c6MCxvdmVybGluZVBvc2l0aW9uOlwib3ZlcmxpbmUtcG9zaXRpb25cIixvdmVybGluZVRoaWNrbmVzczpcIm92ZXJsaW5lLXRoaWNrbmVzc1wiLHBhaW50T3JkZXI6XCJwYWludC1vcmRlclwiLHBhbm9zZTE6XCJwYW5vc2UtMVwiLHBhdGhMZW5ndGg6XCJwYXRoTGVuZ3RoXCIscGF0dGVybkNvbnRlbnRVbml0czpcInBhdHRlcm5Db250ZW50VW5pdHNcIixwYXR0ZXJuVHJhbnNmb3JtOlwicGF0dGVyblRyYW5zZm9ybVwiLHBhdHRlcm5Vbml0czpcInBhdHRlcm5Vbml0c1wiLHBvaW50ZXJFdmVudHM6XCJwb2ludGVyLWV2ZW50c1wiLHBvaW50czowLHBvaW50c0F0WDpcInBvaW50c0F0WFwiLHBvaW50c0F0WTpcInBvaW50c0F0WVwiLHBvaW50c0F0WjpcInBvaW50c0F0WlwiLHByZXNlcnZlQWxwaGE6XCJwcmVzZXJ2ZUFscGhhXCIscHJlc2VydmVBc3BlY3RSYXRpbzpcInByZXNlcnZlQXNwZWN0UmF0aW9cIixwcmltaXRpdmVVbml0czpcInByaW1pdGl2ZVVuaXRzXCIscjowLHJhZGl1czowLHJlZlg6XCJyZWZYXCIscmVmWTpcInJlZllcIixyZW5kZXJpbmdJbnRlbnQ6XCJyZW5kZXJpbmctaW50ZW50XCIscmVwZWF0Q291bnQ6XCJyZXBlYXRDb3VudFwiLHJlcGVhdER1cjpcInJlcGVhdER1clwiLHJlcXVpcmVkRXh0ZW5zaW9uczpcInJlcXVpcmVkRXh0ZW5zaW9uc1wiLHJlcXVpcmVkRmVhdHVyZXM6XCJyZXF1aXJlZEZlYXR1cmVzXCIscmVzdGFydDowLHJlc3VsdDowLHJvdGF0ZTowLHJ4OjAscnk6MCxzY2FsZTowLHNlZWQ6MCxzaGFwZVJlbmRlcmluZzpcInNoYXBlLXJlbmRlcmluZ1wiLHNsb3BlOjAsc3BhY2luZzowLHNwZWN1bGFyQ29uc3RhbnQ6XCJzcGVjdWxhckNvbnN0YW50XCIsc3BlY3VsYXJFeHBvbmVudDpcInNwZWN1bGFyRXhwb25lbnRcIixzcGVlZDowLHNwcmVhZE1ldGhvZDpcInNwcmVhZE1ldGhvZFwiLHN0YXJ0T2Zmc2V0Olwic3RhcnRPZmZzZXRcIixzdGREZXZpYXRpb246XCJzdGREZXZpYXRpb25cIixzdGVtaDowLHN0ZW12OjAsc3RpdGNoVGlsZXM6XCJzdGl0Y2hUaWxlc1wiLHN0b3BDb2xvcjpcInN0b3AtY29sb3JcIixzdG9wT3BhY2l0eTpcInN0b3Atb3BhY2l0eVwiLHN0cmlrZXRocm91Z2hQb3NpdGlvbjpcInN0cmlrZXRocm91Z2gtcG9zaXRpb25cIixzdHJpa2V0aHJvdWdoVGhpY2tuZXNzOlwic3RyaWtldGhyb3VnaC10aGlja25lc3NcIixzdHJpbmc6MCxzdHJva2U6MCxzdHJva2VEYXNoYXJyYXk6XCJzdHJva2UtZGFzaGFycmF5XCIsc3Ryb2tlRGFzaG9mZnNldDpcInN0cm9rZS1kYXNob2Zmc2V0XCIsc3Ryb2tlTGluZWNhcDpcInN0cm9rZS1saW5lY2FwXCIsc3Ryb2tlTGluZWpvaW46XCJzdHJva2UtbGluZWpvaW5cIixzdHJva2VNaXRlcmxpbWl0Olwic3Ryb2tlLW1pdGVybGltaXRcIixzdHJva2VPcGFjaXR5Olwic3Ryb2tlLW9wYWNpdHlcIixzdHJva2VXaWR0aDpcInN0cm9rZS13aWR0aFwiLHN1cmZhY2VTY2FsZTpcInN1cmZhY2VTY2FsZVwiLHN5c3RlbUxhbmd1YWdlOlwic3lzdGVtTGFuZ3VhZ2VcIix0YWJsZVZhbHVlczpcInRhYmxlVmFsdWVzXCIsdGFyZ2V0WDpcInRhcmdldFhcIix0YXJnZXRZOlwidGFyZ2V0WVwiLHRleHRBbmNob3I6XCJ0ZXh0LWFuY2hvclwiLHRleHREZWNvcmF0aW9uOlwidGV4dC1kZWNvcmF0aW9uXCIsdGV4dFJlbmRlcmluZzpcInRleHQtcmVuZGVyaW5nXCIsdGV4dExlbmd0aDpcInRleHRMZW5ndGhcIix0bzowLHRyYW5zZm9ybTowLHUxOjAsdTI6MCx1bmRlcmxpbmVQb3NpdGlvbjpcInVuZGVybGluZS1wb3NpdGlvblwiLHVuZGVybGluZVRoaWNrbmVzczpcInVuZGVybGluZS10aGlja25lc3NcIix1bmljb2RlOjAsdW5pY29kZUJpZGk6XCJ1bmljb2RlLWJpZGlcIix1bmljb2RlUmFuZ2U6XCJ1bmljb2RlLXJhbmdlXCIsdW5pdHNQZXJFbTpcInVuaXRzLXBlci1lbVwiLHZBbHBoYWJldGljOlwidi1hbHBoYWJldGljXCIsdkhhbmdpbmc6XCJ2LWhhbmdpbmdcIix2SWRlb2dyYXBoaWM6XCJ2LWlkZW9ncmFwaGljXCIsdk1hdGhlbWF0aWNhbDpcInYtbWF0aGVtYXRpY2FsXCIsdmFsdWVzOjAsdmVjdG9yRWZmZWN0OlwidmVjdG9yLWVmZmVjdFwiLHZlcnNpb246MCx2ZXJ0QWR2WTpcInZlcnQtYWR2LXlcIix2ZXJ0T3JpZ2luWDpcInZlcnQtb3JpZ2luLXhcIix2ZXJ0T3JpZ2luWTpcInZlcnQtb3JpZ2luLXlcIix2aWV3Qm94Olwidmlld0JveFwiLHZpZXdUYXJnZXQ6XCJ2aWV3VGFyZ2V0XCIsdmlzaWJpbGl0eTowLHdpZHRoczowLHdvcmRTcGFjaW5nOlwid29yZC1zcGFjaW5nXCIsd3JpdGluZ01vZGU6XCJ3cml0aW5nLW1vZGVcIix4OjAseEhlaWdodDpcIngtaGVpZ2h0XCIseDE6MCx4MjowLHhDaGFubmVsU2VsZWN0b3I6XCJ4Q2hhbm5lbFNlbGVjdG9yXCIseGxpbmtBY3R1YXRlOlwieGxpbms6YWN0dWF0ZVwiLHhsaW5rQXJjcm9sZTpcInhsaW5rOmFyY3JvbGVcIix4bGlua0hyZWY6XCJ4bGluazpocmVmXCIseGxpbmtSb2xlOlwieGxpbms6cm9sZVwiLHhsaW5rU2hvdzpcInhsaW5rOnNob3dcIix4bGlua1RpdGxlOlwieGxpbms6dGl0bGVcIix4bGlua1R5cGU6XCJ4bGluazp0eXBlXCIseG1sQmFzZTpcInhtbDpiYXNlXCIseG1sbnM6MCx4bWxuc1hsaW5rOlwieG1sbnM6eGxpbmtcIix4bWxMYW5nOlwieG1sOmxhbmdcIix4bWxTcGFjZTpcInhtbDpzcGFjZVwiLHk6MCx5MTowLHkyOjAseUNoYW5uZWxTZWxlY3RvcjpcInlDaGFubmVsU2VsZWN0b3JcIix6OjAsem9vbUFuZFBhbjpcInpvb21BbmRQYW5cIn0sU1ZHRE9NUHJvcGVydHlDb25maWc9e1Byb3BlcnRpZXM6e30sRE9NQXR0cmlidXRlTmFtZXNwYWNlczp7eGxpbmtBY3R1YXRlOk5TLnhsaW5rLHhsaW5rQXJjcm9sZTpOUy54bGluayx4bGlua0hyZWY6TlMueGxpbmsseGxpbmtSb2xlOk5TLnhsaW5rLHhsaW5rU2hvdzpOUy54bGluayx4bGlua1RpdGxlOk5TLnhsaW5rLHhsaW5rVHlwZTpOUy54bGluayx4bWxCYXNlOk5TLnhtbCx4bWxMYW5nOk5TLnhtbCx4bWxTcGFjZTpOUy54bWx9LERPTUF0dHJpYnV0ZU5hbWVzOnt9fTtPYmplY3Qua2V5cyhBVFRSUykuZm9yRWFjaChmdW5jdGlvbihlKXtTVkdET01Qcm9wZXJ0eUNvbmZpZy5Qcm9wZXJ0aWVzW2VdPTAsQVRUUlNbZV0mJihTVkdET01Qcm9wZXJ0eUNvbmZpZy5ET01BdHRyaWJ1dGVOYW1lc1tlXT1BVFRSU1tlXSl9KSxtb2R1bGUuZXhwb3J0cz1TVkdET01Qcm9wZXJ0eUNvbmZpZztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsTldSMFJQVFZCeWIzQmxjblI1UTI5dVptbG5MbXB6SWwwc0ltNWhiV1Z6SWpwYklrNVRJaXdpZUd4cGJtc2lMQ0o0Yld3aUxDSkJWRlJTVXlJc0ltRmpZMlZ1ZEVobGFXZG9kQ0lzSW1GalkzVnRkV3hoZEdVaUxDSmhaR1JwZEdsMlpTSXNJbUZzYVdkdWJXVnVkRUpoYzJWc2FXNWxJaXdpWVd4c2IzZFNaVzl5WkdWeUlpd2lZV3h3YUdGaVpYUnBZeUlzSW1GdGNHeHBkSFZrWlNJc0ltRnlZV0pwWTBadmNtMGlMQ0poYzJObGJuUWlMQ0poZEhSeWFXSjFkR1ZPWVcxbElpd2lZWFIwY21saWRYUmxWSGx3WlNJc0ltRjFkRzlTWlhabGNuTmxJaXdpWVhwcGJYVjBhQ0lzSW1KaGMyVkdjbVZ4ZFdWdVkza2lMQ0ppWVhObFVISnZabWxzWlNJc0ltSmhjMlZzYVc1bFUyaHBablFpTENKaVltOTRJaXdpWW1WbmFXNGlMQ0ppYVdGeklpd2lZbmtpTENKallXeGpUVzlrWlNJc0ltTmhjRWhsYVdkb2RDSXNJbU5zYVhBaUxDSmpiR2x3VUdGMGFDSXNJbU5zYVhCU2RXeGxJaXdpWTJ4cGNGQmhkR2hWYm1sMGN5SXNJbU52Ykc5eVNXNTBaWEp3YjJ4aGRHbHZiaUlzSW1OdmJHOXlTVzUwWlhKd2IyeGhkR2x2YmtacGJIUmxjbk1pTENKamIyeHZjbEJ5YjJacGJHVWlMQ0pqYjJ4dmNsSmxibVJsY21sdVp5SXNJbU52Ym5SbGJuUlRZM0pwY0hSVWVYQmxJaXdpWTI5dWRHVnVkRk4wZVd4bFZIbHdaU0lzSW1OMWNuTnZjaUlzSW1ONElpd2lZM2tpTENKa0lpd2laR1ZqWld4bGNtRjBaU0lzSW1SbGMyTmxiblFpTENKa2FXWm1kWE5sUTI5dWMzUmhiblFpTENKa2FYSmxZM1JwYjI0aUxDSmthWE53YkdGNUlpd2laR2wyYVhOdmNpSXNJbVJ2YldsdVlXNTBRbUZ6Wld4cGJtVWlMQ0prZFhJaUxDSmtlQ0lzSW1SNUlpd2laV1JuWlUxdlpHVWlMQ0psYkdWMllYUnBiMjRpTENKbGJtRmliR1ZDWVdOclozSnZkVzVrSWl3aVpXNWtJaXdpWlhod2IyNWxiblFpTENKbGVIUmxjbTVoYkZKbGMyOTFjbU5sYzFKbGNYVnBjbVZrSWl3aVptbHNiQ0lzSW1acGJHeFBjR0ZqYVhSNUlpd2labWxzYkZKMWJHVWlMQ0ptYVd4MFpYSWlMQ0ptYVd4MFpYSlNaWE1pTENKbWFXeDBaWEpWYm1sMGN5SXNJbVpzYjI5a1EyOXNiM0lpTENKbWJHOXZaRTl3WVdOcGRIa2lMQ0ptYjJOMWMyRmliR1VpTENKbWIyNTBSbUZ0YVd4NUlpd2labTl1ZEZOcGVtVWlMQ0ptYjI1MFUybDZaVUZrYW5WemRDSXNJbVp2Ym5SVGRISmxkR05vSWl3aVptOXVkRk4wZVd4bElpd2labTl1ZEZaaGNtbGhiblFpTENKbWIyNTBWMlZwWjJoMElpd2labTl5YldGMElpd2labkp2YlNJc0ltWjRJaXdpWm5raUxDSm5NU0lzSW1jeUlpd2laMng1Y0doT1lXMWxJaXdpWjJ4NWNHaFBjbWxsYm5SaGRHbHZia2h2Y21sNmIyNTBZV3dpTENKbmJIbHdhRTl5YVdWdWRHRjBhVzl1Vm1WeWRHbGpZV3dpTENKbmJIbHdhRkpsWmlJc0ltZHlZV1JwWlc1MFZISmhibk5tYjNKdElpd2laM0poWkdsbGJuUlZibWwwY3lJc0ltaGhibWRwYm1jaUxDSm9iM0pwZWtGa2RsZ2lMQ0pvYjNKcGVrOXlhV2RwYmxnaUxDSnBaR1Z2WjNKaGNHaHBZeUlzSW1sdFlXZGxVbVZ1WkdWeWFXNW5JaXdpYVc0aUxDSnBiaklpTENKcGJuUmxjbU5sY0hRaUxDSnJJaXdpYXpFaUxDSnJNaUlzSW1zeklpd2lhelFpTENKclpYSnVaV3hOWVhSeWFYZ2lMQ0pyWlhKdVpXeFZibWwwVEdWdVozUm9JaXdpYTJWeWJtbHVaeUlzSW10bGVWQnZhVzUwY3lJc0ltdGxlVk53YkdsdVpYTWlMQ0pyWlhsVWFXMWxjeUlzSW14bGJtZDBhRUZrYW5WemRDSXNJbXhsZEhSbGNsTndZV05wYm1jaUxDSnNhV2RvZEdsdVowTnZiRzl5SWl3aWJHbHRhWFJwYm1kRGIyNWxRVzVuYkdVaUxDSnNiMk5oYkNJc0ltMWhjbXRsY2tWdVpDSXNJbTFoY210bGNrMXBaQ0lzSW0xaGNtdGxjbE4wWVhKMElpd2liV0Z5YTJWeVNHVnBaMmgwSWl3aWJXRnlhMlZ5Vlc1cGRITWlMQ0p0WVhKclpYSlhhV1IwYUNJc0ltMWhjMnNpTENKdFlYTnJRMjl1ZEdWdWRGVnVhWFJ6SWl3aWJXRnphMVZ1YVhSeklpd2liV0YwYUdWdFlYUnBZMkZzSWl3aWJXOWtaU0lzSW01MWJVOWpkR0YyWlhNaUxDSnZabVp6WlhRaUxDSnZjR0ZqYVhSNUlpd2liM0JsY21GMGIzSWlMQ0p2Y21SbGNpSXNJbTl5YVdWdWRDSXNJbTl5YVdWdWRHRjBhVzl1SWl3aWIzSnBaMmx1SWl3aWIzWmxjbVpzYjNjaUxDSnZkbVZ5YkdsdVpWQnZjMmwwYVc5dUlpd2liM1psY214cGJtVlVhR2xqYTI1bGMzTWlMQ0p3WVdsdWRFOXlaR1Z5SWl3aWNHRnViM05sTVNJc0luQmhkR2hNWlc1bmRHZ2lMQ0p3WVhSMFpYSnVRMjl1ZEdWdWRGVnVhWFJ6SWl3aWNHRjBkR1Z5YmxSeVlXNXpabTl5YlNJc0luQmhkSFJsY201VmJtbDBjeUlzSW5CdmFXNTBaWEpGZG1WdWRITWlMQ0p3YjJsdWRITWlMQ0p3YjJsdWRITkJkRmdpTENKd2IybHVkSE5CZEZraUxDSndiMmx1ZEhOQmRGb2lMQ0p3Y21WelpYSjJaVUZzY0doaElpd2ljSEpsYzJWeWRtVkJjM0JsWTNSU1lYUnBieUlzSW5CeWFXMXBkR2wyWlZWdWFYUnpJaXdpY2lJc0luSmhaR2wxY3lJc0luSmxabGdpTENKeVpXWlpJaXdpY21WdVpHVnlhVzVuU1c1MFpXNTBJaXdpY21Wd1pXRjBRMjkxYm5RaUxDSnlaWEJsWVhSRWRYSWlMQ0p5WlhGMWFYSmxaRVY0ZEdWdWMybHZibk1pTENKeVpYRjFhWEpsWkVabFlYUjFjbVZ6SWl3aWNtVnpkR0Z5ZENJc0luSmxjM1ZzZENJc0luSnZkR0YwWlNJc0luSjRJaXdpY25raUxDSnpZMkZzWlNJc0luTmxaV1FpTENKemFHRndaVkpsYm1SbGNtbHVaeUlzSW5Oc2IzQmxJaXdpYzNCaFkybHVaeUlzSW5Od1pXTjFiR0Z5UTI5dWMzUmhiblFpTENKemNHVmpkV3hoY2tWNGNHOXVaVzUwSWl3aWMzQmxaV1FpTENKemNISmxZV1JOWlhSb2IyUWlMQ0p6ZEdGeWRFOW1abk5sZENJc0luTjBaRVJsZG1saGRHbHZiaUlzSW5OMFpXMW9JaXdpYzNSbGJYWWlMQ0p6ZEdsMFkyaFVhV3hsY3lJc0luTjBiM0JEYjJ4dmNpSXNJbk4wYjNCUGNHRmphWFI1SWl3aWMzUnlhV3RsZEdoeWIzVm5hRkJ2YzJsMGFXOXVJaXdpYzNSeWFXdGxkR2h5YjNWbmFGUm9hV05yYm1WemN5SXNJbk4wY21sdVp5SXNJbk4wY205clpTSXNJbk4wY205clpVUmhjMmhoY25KaGVTSXNJbk4wY205clpVUmhjMmh2Wm1aelpYUWlMQ0p6ZEhKdmEyVk1hVzVsWTJGd0lpd2ljM1J5YjJ0bFRHbHVaV3B2YVc0aUxDSnpkSEp2YTJWTmFYUmxjbXhwYldsMElpd2ljM1J5YjJ0bFQzQmhZMmwwZVNJc0luTjBjbTlyWlZkcFpIUm9JaXdpYzNWeVptRmpaVk5qWVd4bElpd2ljM2x6ZEdWdFRHRnVaM1ZoWjJVaUxDSjBZV0pzWlZaaGJIVmxjeUlzSW5SaGNtZGxkRmdpTENKMFlYSm5aWFJaSWl3aWRHVjRkRUZ1WTJodmNpSXNJblJsZUhSRVpXTnZjbUYwYVc5dUlpd2lkR1Y0ZEZKbGJtUmxjbWx1WnlJc0luUmxlSFJNWlc1bmRHZ2lMQ0owYnlJc0luUnlZVzV6Wm05eWJTSXNJblV4SWl3aWRUSWlMQ0oxYm1SbGNteHBibVZRYjNOcGRHbHZiaUlzSW5WdVpHVnliR2x1WlZSb2FXTnJibVZ6Y3lJc0luVnVhV052WkdVaUxDSjFibWxqYjJSbFFtbGthU0lzSW5WdWFXTnZaR1ZTWVc1blpTSXNJblZ1YVhSelVHVnlSVzBpTENKMlFXeHdhR0ZpWlhScFl5SXNJblpJWVc1bmFXNW5JaXdpZGtsa1pXOW5jbUZ3YUdsaklpd2lkazFoZEdobGJXRjBhV05oYkNJc0luWmhiSFZsY3lJc0luWmxZM1J2Y2tWbVptVmpkQ0lzSW5abGNuTnBiMjRpTENKMlpYSjBRV1IyV1NJc0luWmxjblJQY21sbmFXNVlJaXdpZG1WeWRFOXlhV2RwYmxraUxDSjJhV1YzUW05NElpd2lkbWxsZDFSaGNtZGxkQ0lzSW5acGMybGlhV3hwZEhraUxDSjNhV1IwYUhNaUxDSjNiM0prVTNCaFkybHVaeUlzSW5keWFYUnBibWROYjJSbElpd2llQ0lzSW5oSVpXbG5hSFFpTENKNE1TSXNJbmd5SWl3aWVFTm9ZVzV1Wld4VFpXeGxZM1J2Y2lJc0luaHNhVzVyUVdOMGRXRjBaU0lzSW5oc2FXNXJRWEpqY205c1pTSXNJbmhzYVc1clNISmxaaUlzSW5oc2FXNXJVbTlzWlNJc0luaHNhVzVyVTJodmR5SXNJbmhzYVc1clZHbDBiR1VpTENKNGJHbHVhMVI1Y0dVaUxDSjRiV3hDWVhObElpd2llRzFzYm5NaUxDSjRiV3h1YzFoc2FXNXJJaXdpZUcxc1RHRnVaeUlzSW5odGJGTndZV05sSWl3aWVTSXNJbmt4SWl3aWVUSWlMQ0o1UTJoaGJtNWxiRk5sYkdWamRHOXlJaXdpZWlJc0lucHZiMjFCYm1SUVlXNGlMQ0pUVmtkRVQwMVFjbTl3WlhKMGVVTnZibVpwWnlJc0lsQnliM0JsY25ScFpYTWlMQ0pFVDAxQmRIUnlhV0oxZEdWT1lXMWxjM0JoWTJWeklpd2lSRTlOUVhSMGNtbGlkWFJsVG1GdFpYTWlMQ0pQWW1wbFkzUWlMQ0pyWlhseklpd2labTl5UldGamFDSXNJbXRsZVNJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVZGQkxHRkJSVUVzU1VGQlNVRXNSMEZCU3l4RFFVTlFReXhOUVVGUExDdENRVU5RUXl4SlFVRkxMSGREUVc5Q1NFTXNUVUZCVVN4RFFVTldReXhoUVVGakxHZENRVU5rUXl4WFFVRlpMRVZCUTFwRExGTkJRVlVzUlVGRFZrTXNhMEpCUVcxQ0xIRkNRVU51UWtNc1lVRkJZeXhsUVVOa1F5eFhRVUZaTEVWQlExcERMRlZCUVZjc1JVRkRXRU1zVjBGQldTeGpRVU5hUXl4UFFVRlJMRVZCUTFKRExHTkJRV1VzWjBKQlEyWkRMR05CUVdVc1owSkJRMlpETEZsQlFXRXNZMEZEWWtNc1VVRkJVeXhGUVVOVVF5eGpRVUZsTEdkQ1FVTm1ReXhaUVVGaExHTkJRMkpETEdOQlFXVXNhVUpCUTJaRExFdEJRVTBzUlVGRFRrTXNUVUZCVHl4RlFVTlFReXhMUVVGTkxFVkJRMDVETEVkQlFVa3NSVUZEU2tNc1UwRkJWU3hYUVVOV1F5eFZRVUZYTEdGQlExaERMRXRCUVUwc1JVRkRUa01zVTBGQlZTeFpRVU5XUXl4VFFVRlZMRmxCUTFaRExHTkJRV1VzWjBKQlEyWkRMRzFDUVVGdlFpeHpRa0ZEY0VKRExEQkNRVUV5UWl3NFFrRkRNMEpETEdGQlFXTXNaMEpCUTJSRExHVkJRV2RDTEd0Q1FVTm9Ra01zYTBKQlFXMUNMRzlDUVVOdVFrTXNhVUpCUVd0Q0xHMUNRVU5zUWtNc1QwRkJVU3hGUVVOU1F5eEhRVUZKTEVWQlEwcERMRWRCUVVrc1JVRkRTa01zUlVGQlJ5eEZRVU5JUXl4WFFVRlpMRVZCUTFwRExGRkJRVk1zUlVGRFZFTXNaMEpCUVdsQ0xHdENRVU5xUWtNc1ZVRkJWeXhGUVVOWVF5eFJRVUZUTEVWQlExUkRMRkZCUVZNc1JVRkRWRU1zYVVKQlFXdENMRzlDUVVOc1FrTXNTVUZCU3l4RlFVTk1ReXhIUVVGSkxFVkJRMHBETEVkQlFVa3NSVUZEU2tNc1UwRkJWU3hYUVVOV1F5eFZRVUZYTEVWQlExaERMR2xDUVVGclFpeHZRa0ZEYkVKRExFbEJRVXNzUlVGRFRFTXNVMEZCVlN4RlFVTldReXd3UWtGQk1rSXNORUpCUXpOQ1F5eExRVUZOTEVWQlEwNURMRmxCUVdFc1pVRkRZa01zVTBGQlZTeFpRVU5XUXl4UFFVRlJMRVZCUTFKRExGVkJRVmNzV1VGRFdFTXNXVUZCWVN4alFVTmlReXhYUVVGWkxHTkJRMXBETEdGQlFXTXNaMEpCUTJSRExGVkJRVmNzUlVGRFdFTXNWMEZCV1N4alFVTmFReXhUUVVGVkxGbEJRMVpETEdWQlFXZENMRzFDUVVOb1FrTXNXVUZCWVN4bFFVTmlReXhWUVVGWExHRkJRMWhETEZsQlFXRXNaVUZEWWtNc1YwRkJXU3hqUVVOYVF5eFBRVUZSTEVWQlExSkRMRXRCUVUwc1JVRkRUa01zUjBGQlNTeEZRVU5LUXl4SFFVRkpMRVZCUTBwRExFZEJRVWtzUlVGRFNrTXNSMEZCU1N4RlFVTktReXhWUVVGWExHRkJRMWhETERKQ1FVRTBRaXdyUWtGRE5VSkRMSGxDUVVFd1FpdzJRa0ZETVVKRExGTkJRVlVzVjBGRFZrTXNhMEpCUVcxQ0xHOUNRVU51UWtNc1kwRkJaU3huUWtGRFprTXNVVUZCVXl4RlFVTlVReXhWUVVGWExHTkJRMWhETEdGQlFXTXNhVUpCUTJSRExGbEJRV0VzUlVGRFlrTXNaVUZCWjBJc2EwSkJRMmhDUXl4SFFVRk5MRVZCUTA1RExFbEJRVXNzUlVGRFRFTXNWVUZCVnl4RlFVTllReXhGUVVGSExFVkJRMGhETEVkQlFVa3NSVUZEU2tNc1IwRkJTU3hGUVVOS1F5eEhRVUZKTEVWQlEwcERMRWRCUVVrc1JVRkRTa01zWVVGQll5eGxRVU5rUXl4cFFrRkJhMElzYlVKQlEyeENReXhSUVVGVExFVkJRMVJETEZWQlFWY3NXVUZEV0VNc1YwRkJXU3hoUVVOYVF5eFRRVUZWTEZkQlExWkRMR0ZCUVdNc1pVRkRaRU1zWTBGQlpTeHBRa0ZEWmtNc1kwRkJaU3hwUWtGRFprTXNhMEpCUVcxQ0xHOUNRVU51UWtNc1RVRkJUeXhGUVVOUVF5eFZRVUZYTEdGQlExaERMRlZCUVZjc1lVRkRXRU1zV1VGQllTeGxRVU5pUXl4aFFVRmpMR1ZCUTJSRExGbEJRV0VzWTBGRFlrTXNXVUZCWVN4alFVTmlReXhMUVVGTkxFVkJRMDVETEdsQ1FVRnJRaXh0UWtGRGJFSkRMRlZCUVZjc1dVRkRXRU1zWVVGQll5eEZRVU5rUXl4TFFVRk5MRVZCUTA1RExGZEJRVmtzWVVGRFdrTXNUMEZCVVN4RlFVTlNReXhSUVVGVExFVkJRMVJETEZOQlFWVXNSVUZEVmtNc1RVRkJUeXhGUVVOUVF5eFBRVUZSTEVWQlExSkRMRmxCUVdFc1JVRkRZa01zVDBGQlVTeEZRVU5TUXl4VFFVRlZMRVZCUTFaRExHbENRVUZyUWl4dlFrRkRiRUpETEd0Q1FVRnRRaXh4UWtGRGJrSkRMRmRCUVZrc1kwRkRXa01zVVVGQlV5eFhRVU5VUXl4WFFVRlpMR0ZCUTFwRExHOUNRVUZ4UWl4elFrRkRja0pETEdsQ1FVRnJRaXh0UWtGRGJFSkRMR0ZCUVdNc1pVRkRaRU1zWTBGQlpTeHBRa0ZEWmtNc1QwRkJVU3hGUVVOU1F5eFZRVUZYTEZsQlExaERMRlZCUVZjc1dVRkRXRU1zVlVGQlZ5eFpRVU5ZUXl4alFVRmxMR2RDUVVObVF5eHZRa0ZCY1VJc2MwSkJRM0pDUXl4bFFVRm5RaXhwUWtGRGFFSkRMRVZCUVVjc1JVRkRTRU1zVDBGQlVTeEZRVU5TUXl4TFFVRk5MRTlCUTA1RExFdEJRVTBzVDBGRFRrTXNaMEpCUVdsQ0xHMUNRVU5xUWtNc1dVRkJZU3hqUVVOaVF5eFZRVUZYTEZsQlExaERMRzFDUVVGdlFpeHhRa0ZEY0VKRExHbENRVUZyUWl4dFFrRkRiRUpETEZGQlFWTXNSVUZEVkVNc1QwRkJVU3hGUVVOU1F5eFBRVUZSTEVWQlExSkRMRWRCUVVrc1JVRkRTa01zUjBGQlNTeEZRVU5LUXl4TlFVRlBMRVZCUTFCRExFdEJRVTBzUlVGRFRrTXNaVUZCWjBJc2EwSkJRMmhDUXl4TlFVRlBMRVZCUTFCRExGRkJRVk1zUlVGRFZFTXNhVUpCUVd0Q0xHMUNRVU5zUWtNc2FVSkJRV3RDTEcxQ1FVTnNRa01zVFVGQlR5eEZRVU5RUXl4aFFVRmpMR1ZCUTJSRExGbEJRV0VzWTBGRFlrTXNZVUZCWXl4bFFVTmtReXhOUVVGUExFVkJRMUJETEUxQlFVOHNSVUZEVUVNc1dVRkJZU3hqUVVOaVF5eFZRVUZYTEdGQlExaERMRmxCUVdFc1pVRkRZa01zYzBKQlFYVkNMSGxDUVVOMlFrTXNkVUpCUVhkQ0xEQkNRVU40UWtNc1QwRkJVU3hGUVVOU1F5eFBRVUZSTEVWQlExSkRMR2RDUVVGcFFpeHRRa0ZEYWtKRExHbENRVUZyUWl4dlFrRkRiRUpETEdOQlFXVXNhVUpCUTJaRExHVkJRV2RDTEd0Q1FVTm9Ra01zYVVKQlFXdENMRzlDUVVOc1FrTXNZMEZCWlN4cFFrRkRaa01zV1VGQllTeGxRVU5pUXl4aFFVRmpMR1ZCUTJSRExHVkJRV2RDTEdsQ1FVTm9Ra01zV1VGQllTeGpRVU5pUXl4UlFVRlRMRlZCUTFSRExGRkJRVk1zVlVGRFZFTXNWMEZCV1N4alFVTmFReXhsUVVGblFpeHJRa0ZEYUVKRExHTkJRV1VzYVVKQlEyWkRMRmRCUVZrc1lVRkRXa01zUjBGQlNTeEZRVU5LUXl4VlFVRlhMRVZCUTFoRExFZEJRVWtzUlVGRFNrTXNSMEZCU1N4RlFVTktReXhyUWtGQmJVSXNjVUpCUTI1Q1F5eHRRa0ZCYjBJc2MwSkJRM0JDUXl4UlFVRlRMRVZCUTFSRExGbEJRV0VzWlVGRFlrTXNZVUZCWXl4blFrRkRaRU1zVjBGQldTeGxRVU5hUXl4WlFVRmhMR1ZCUTJKRExGTkJRVlVzV1VGRFZrTXNZVUZCWXl4blFrRkRaRU1zWTBGQlpTeHBRa0ZEWmtNc1QwRkJVU3hGUVVOU1F5eGhRVUZqTEdkQ1FVTmtReXhSUVVGVExFVkJRMVJETEZOQlFWVXNZVUZEVmtNc1dVRkJZU3huUWtGRFlrTXNXVUZCWVN4blFrRkRZa01zVVVGQlV5eFZRVU5VUXl4WFFVRlpMR0ZCUTFwRExGZEJRVmtzUlVGRFdrTXNUMEZCVVN4RlFVTlNReXhaUVVGaExHVkJRMkpETEZsQlFXRXNaVUZEWWtNc1JVRkJSeXhGUVVOSVF5eFJRVUZUTEZkQlExUkRMRWRCUVVrc1JVRkRTa01zUjBGQlNTeEZRVU5LUXl4cFFrRkJhMElzYlVKQlEyeENReXhoUVVGakxHZENRVU5rUXl4aFFVRmpMR2RDUVVOa1F5eFZRVUZYTEdGQlExaERMRlZCUVZjc1lVRkRXRU1zVlVGQlZ5eGhRVU5ZUXl4WFFVRlpMR05CUTFwRExGVkJRVmNzWVVGRFdFTXNVVUZCVXl4WFFVTlVReXhOUVVGUExFVkJRMUJETEZkQlFWa3NZMEZEV2tNc1VVRkJVeXhYUVVOVVF5eFRRVUZWTEZsQlExWkRMRVZCUVVjc1JVRkRTRU1zUjBGQlNTeEZRVU5LUXl4SFFVRkpMRVZCUTBwRExHbENRVUZyUWl4dFFrRkRiRUpETEVWQlFVY3NSVUZEU0VNc1YwRkJXU3hqUVVkV1F5eHhRa0ZCZFVJc1EwRkRla0pETEZkQlFWa3NSMEZEV2tNc2RVSkJRWGRDTEVOQlEzUkNjRUlzWVVGQlkycFBMRWRCUVVkRExFMUJRMnBDYVU4c1lVRkJZMnhQTEVkQlFVZERMRTFCUTJwQ2EwOHNWVUZCVjI1UExFZEJRVWRETEUxQlEyUnRUeXhWUVVGWGNFOHNSMEZCUjBNc1RVRkRaRzlQTEZWQlFWZHlUeXhIUVVGSFF5eE5RVU5rY1U4c1YwRkJXWFJQTEVkQlFVZERMRTFCUTJaelR5eFZRVUZYZGs4c1IwRkJSME1zVFVGRFpIVlBMRkZCUVZONFR5eEhRVUZIUlN4SlFVTmFlVThzVVVGQlV6TlBMRWRCUVVkRkxFbEJRMW93VHl4VFFVRlZOVThzUjBGQlIwVXNTMEZGWm05UUxHdENRVUZ0UWl4SlFVZHlRa01zVDBGQlQwTXNTMEZCUzNKUUxFOUJRVTl6VUN4UlFVRlJMRk5CUVZWRExFZEJRMjVEVUN4eFFrRkJjVUpETEZkQlFWZE5MRWRCUVU4c1JVRkRia04yVUN4TlFVRk5kVkFzUzBGRFVsQXNjVUpCUVhGQ1J5eHJRa0ZCYTBKSkxFZEJRVTkyVUN4TlFVRk5kVkFzVFVGSmVFUkRMRTlCUVU5RExGRkJRVlZVSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdOMExXUnZiUzlzYVdJdlUxWkhSRTlOVUhKdmNHVnlkSGxEYjI1bWFXY3Vhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciBFdmVudFByb3BhZ2F0b3JzPXJlcXVpcmUoXCIuL0V2ZW50UHJvcGFnYXRvcnNcIiksRXhlY3V0aW9uRW52aXJvbm1lbnQ9cmVxdWlyZShcImZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpLFJlYWN0RE9NQ29tcG9uZW50VHJlZT1yZXF1aXJlKFwiLi9SZWFjdERPTUNvbXBvbmVudFRyZWVcIiksUmVhY3RJbnB1dFNlbGVjdGlvbj1yZXF1aXJlKFwiLi9SZWFjdElucHV0U2VsZWN0aW9uXCIpLFN5bnRoZXRpY0V2ZW50PXJlcXVpcmUoXCIuL1N5bnRoZXRpY0V2ZW50XCIpLGdldEFjdGl2ZUVsZW1lbnQ9cmVxdWlyZShcImZianMvbGliL2dldEFjdGl2ZUVsZW1lbnRcIiksaXNUZXh0SW5wdXRFbGVtZW50PXJlcXVpcmUoXCIuL2lzVGV4dElucHV0RWxlbWVudFwiKSxzaGFsbG93RXF1YWw9cmVxdWlyZShcImZianMvbGliL3NoYWxsb3dFcXVhbFwiKSxza2lwU2VsZWN0aW9uQ2hhbmdlRXZlbnQ9RXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJmRvY3VtZW50LmRvY3VtZW50TW9kZTw9MTEsZXZlbnRUeXBlcz17c2VsZWN0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uU2VsZWN0XCIsY2FwdHVyZWQ6XCJvblNlbGVjdENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcInRvcEJsdXJcIixcInRvcENvbnRleHRNZW51XCIsXCJ0b3BGb2N1c1wiLFwidG9wS2V5RG93blwiLFwidG9wS2V5VXBcIixcInRvcE1vdXNlRG93blwiLFwidG9wTW91c2VVcFwiLFwidG9wU2VsZWN0aW9uQ2hhbmdlXCJdfX0sYWN0aXZlRWxlbWVudD1udWxsLGFjdGl2ZUVsZW1lbnRJbnN0PW51bGwsbGFzdFNlbGVjdGlvbj1udWxsLG1vdXNlRG93bj0hMSxoYXNMaXN0ZW5lcj0hMTtmdW5jdGlvbiBnZXRTZWxlY3Rpb24oZSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gZSYmUmVhY3RJbnB1dFNlbGVjdGlvbi5oYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMoZSkpcmV0dXJue3N0YXJ0OmUuc2VsZWN0aW9uU3RhcnQsZW5kOmUuc2VsZWN0aW9uRW5kfTtpZih3aW5kb3cuZ2V0U2VsZWN0aW9uKXt2YXIgdD13aW5kb3cuZ2V0U2VsZWN0aW9uKCk7cmV0dXJue2FuY2hvck5vZGU6dC5hbmNob3JOb2RlLGFuY2hvck9mZnNldDp0LmFuY2hvck9mZnNldCxmb2N1c05vZGU6dC5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6dC5mb2N1c09mZnNldH19aWYoZG9jdW1lbnQuc2VsZWN0aW9uKXt2YXIgbj1kb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTtyZXR1cm57cGFyZW50RWxlbWVudDpuLnBhcmVudEVsZW1lbnQoKSx0ZXh0Om4udGV4dCx0b3A6bi5ib3VuZGluZ1RvcCxsZWZ0Om4uYm91bmRpbmdMZWZ0fX19ZnVuY3Rpb24gY29uc3RydWN0U2VsZWN0RXZlbnQoZSx0KXtpZihtb3VzZURvd258fG51bGw9PWFjdGl2ZUVsZW1lbnR8fGFjdGl2ZUVsZW1lbnQhPT1nZXRBY3RpdmVFbGVtZW50KCkpcmV0dXJuIG51bGw7dmFyIG49Z2V0U2VsZWN0aW9uKGFjdGl2ZUVsZW1lbnQpO2lmKCFsYXN0U2VsZWN0aW9ufHwhc2hhbGxvd0VxdWFsKGxhc3RTZWxlY3Rpb24sbikpe2xhc3RTZWxlY3Rpb249bjt2YXIgbz1TeW50aGV0aWNFdmVudC5nZXRQb29sZWQoZXZlbnRUeXBlcy5zZWxlY3QsYWN0aXZlRWxlbWVudEluc3QsZSx0KTtyZXR1cm4gby50eXBlPVwic2VsZWN0XCIsby50YXJnZXQ9YWN0aXZlRWxlbWVudCxFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMobyksb31yZXR1cm4gbnVsbH12YXIgU2VsZWN0RXZlbnRQbHVnaW49e2V2ZW50VHlwZXM6ZXZlbnRUeXBlcyxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGUsdCxuLG8pe2lmKCFoYXNMaXN0ZW5lcilyZXR1cm4gbnVsbDt2YXIgYz10P1JlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKHQpOndpbmRvdztzd2l0Y2goZSl7Y2FzZVwidG9wRm9jdXNcIjooaXNUZXh0SW5wdXRFbGVtZW50KGMpfHxcInRydWVcIj09PWMuY29udGVudEVkaXRhYmxlKSYmKGFjdGl2ZUVsZW1lbnQ9YyxhY3RpdmVFbGVtZW50SW5zdD10LGxhc3RTZWxlY3Rpb249bnVsbCk7YnJlYWs7Y2FzZVwidG9wQmx1clwiOmFjdGl2ZUVsZW1lbnQ9bnVsbCxhY3RpdmVFbGVtZW50SW5zdD1udWxsLGxhc3RTZWxlY3Rpb249bnVsbDticmVhaztjYXNlXCJ0b3BNb3VzZURvd25cIjptb3VzZURvd249ITA7YnJlYWs7Y2FzZVwidG9wQ29udGV4dE1lbnVcIjpjYXNlXCJ0b3BNb3VzZVVwXCI6cmV0dXJuIG1vdXNlRG93bj0hMSxjb25zdHJ1Y3RTZWxlY3RFdmVudChuLG8pO2Nhc2VcInRvcFNlbGVjdGlvbkNoYW5nZVwiOmlmKHNraXBTZWxlY3Rpb25DaGFuZ2VFdmVudClicmVhaztjYXNlXCJ0b3BLZXlEb3duXCI6Y2FzZVwidG9wS2V5VXBcIjpyZXR1cm4gY29uc3RydWN0U2VsZWN0RXZlbnQobixvKX1yZXR1cm4gbnVsbH0sZGlkUHV0TGlzdGVuZXI6ZnVuY3Rpb24oZSx0LG4pe1wib25TZWxlY3RcIj09PXQmJihoYXNMaXN0ZW5lcj0hMCl9fTttb2R1bGUuZXhwb3J0cz1TZWxlY3RFdmVudFBsdWdpbjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsTmxiR1ZqZEVWMlpXNTBVR3gxWjJsdUxtcHpJbDBzSW01aGJXVnpJanBiSWtWMlpXNTBVSEp2Y0dGbllYUnZjbk1pTENKeVpYRjFhWEpsSWl3aVJYaGxZM1YwYVc5dVJXNTJhWEp2Ym0xbGJuUWlMQ0pTWldGamRFUlBUVU52YlhCdmJtVnVkRlJ5WldVaUxDSlNaV0ZqZEVsdWNIVjBVMlZzWldOMGFXOXVJaXdpVTNsdWRHaGxkR2xqUlhabGJuUWlMQ0puWlhSQlkzUnBkbVZGYkdWdFpXNTBJaXdpYVhOVVpYaDBTVzV3ZFhSRmJHVnRaVzUwSWl3aWMyaGhiR3h2ZDBWeGRXRnNJaXdpYzJ0cGNGTmxiR1ZqZEdsdmJrTm9ZVzVuWlVWMlpXNTBJaXdpWTJGdVZYTmxSRTlOSWl3aVpHOWpkVzFsYm5RaUxDSmtiMk4xYldWdWRFMXZaR1VpTENKbGRtVnVkRlI1Y0dWeklpd2ljMlZzWldOMElpd2ljR2hoYzJWa1VtVm5hWE4wY21GMGFXOXVUbUZ0WlhNaUxDSmlkV0ppYkdWa0lpd2lZMkZ3ZEhWeVpXUWlMQ0prWlhCbGJtUmxibU5wWlhNaUxDSmhZM1JwZG1WRmJHVnRaVzUwSWl3aVlXTjBhWFpsUld4bGJXVnVkRWx1YzNRaUxDSnNZWE4wVTJWc1pXTjBhVzl1SWl3aWJXOTFjMlZFYjNkdUlpd2lhR0Z6VEdsemRHVnVaWElpTENKblpYUlRaV3hsWTNScGIyNGlMQ0p1YjJSbElpd2lhR0Z6VTJWc1pXTjBhVzl1UTJGd1lXSnBiR2wwYVdWeklpd2ljM1JoY25RaUxDSnpaV3hsWTNScGIyNVRkR0Z5ZENJc0ltVnVaQ0lzSW5ObGJHVmpkR2x2YmtWdVpDSXNJbmRwYm1SdmR5SXNJbk5sYkdWamRHbHZiaUlzSW1GdVkyaHZjazV2WkdVaUxDSmhibU5vYjNKUFptWnpaWFFpTENKbWIyTjFjMDV2WkdVaUxDSm1iMk4xYzA5bVpuTmxkQ0lzSW5KaGJtZGxJaXdpWTNKbFlYUmxVbUZ1WjJVaUxDSndZWEpsYm5SRmJHVnRaVzUwSWl3aWRHVjRkQ0lzSW5SdmNDSXNJbUp2ZFc1a2FXNW5WRzl3SWl3aWJHVm1kQ0lzSW1KdmRXNWthVzVuVEdWbWRDSXNJbU52Ym5OMGNuVmpkRk5sYkdWamRFVjJaVzUwSWl3aWJtRjBhWFpsUlhabGJuUWlMQ0p1WVhScGRtVkZkbVZ1ZEZSaGNtZGxkQ0lzSW1OMWNuSmxiblJUWld4bFkzUnBiMjRpTENKemVXNTBhR1YwYVdORmRtVnVkQ0lzSW1kbGRGQnZiMnhsWkNJc0luUjVjR1VpTENKMFlYSm5aWFFpTENKaFkyTjFiWFZzWVhSbFZIZHZVR2hoYzJWRWFYTndZWFJqYUdWeklpd2lVMlZzWldOMFJYWmxiblJRYkhWbmFXNGlMQ0psZUhSeVlXTjBSWFpsYm5Seklpd2lkRzl3VEdWMlpXeFVlWEJsSWl3aWRHRnlaMlYwU1c1emRDSXNJblJoY21kbGRFNXZaR1VpTENKblpYUk9iMlJsUm5KdmJVbHVjM1JoYm1ObElpd2lZMjl1ZEdWdWRFVmthWFJoWW14bElpd2laR2xrVUhWMFRHbHpkR1Z1WlhJaUxDSnBibk4wSWl3aWNtVm5hWE4wY21GMGFXOXVUbUZ0WlNJc0lteHBjM1JsYm1WeUlpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlVVRXNZVUZGUVN4SlFVRkpRU3hwUWtGQmJVSkRMRkZCUVZFc2MwSkJRek5DUXl4eFFrRkJkVUpFTEZGQlFWRXNhVU5CUXk5Q1JTeHpRa0ZCZDBKR0xGRkJRVkVzTWtKQlEyaERSeXh2UWtGQmMwSklMRkZCUVZFc2VVSkJRemxDU1N4bFFVRnBRa29zVVVGQlVTeHZRa0ZGZWtKTExHbENRVUZ0UWt3c1VVRkJVU3cyUWtGRE0wSk5MRzFDUVVGeFFrNHNVVUZCVVN4M1FrRkROMEpQTEdGQlFXVlFMRkZCUVZFc2VVSkJSWFpDVVN4NVFrRkJNa0pRTEhGQ1FVRnhRbEVzVjBGQllTeHBRa0ZCYTBKRExGVkJRVmxCTEZOQlFWTkRMR05CUVdkQ0xFZEJSWEJJUXl4WFFVRmhMRU5CUTJaRExFOUJRVkVzUTBGRFRrTXNkMEpCUVhsQ0xFTkJRM1pDUXl4UlFVRlRMRmRCUTFSRExGTkJRVlVzYlVKQlJWcERMR0ZCUVdNc1EwRkJReXhWUVVGWExHbENRVUZyUWl4WFFVRlpMR0ZCUVdNc1YwRkJXU3hsUVVGblFpeGhRVUZqTEhkQ1FVbG9TRU1zWTBGQlowSXNTMEZEYUVKRExHdENRVUZ2UWl4TFFVTndRa01zWTBGQlowSXNTMEZEYUVKRExGZEJRVmtzUlVGSldrTXNZVUZCWXl4RlFWZHNRaXhUUVVGVFF5eGhRVUZoUXl4SFFVTndRaXhIUVVGSkxHMUNRVUZ2UWtFc1IwRkJVWEpDTEc5Q1FVRnZRbk5DTEhsQ1FVRjVRa1FzUjBGRE0wVXNUVUZCVHl4RFFVTk1SU3hOUVVGUFJpeEZRVUZMUnl4bFFVTmFReXhKUVVGTFNpeEZRVUZMU3l4alFVVlFMRWRCUVVsRExFOUJRVTlRTEdGQlFXTXNRMEZET1VJc1NVRkJTVkVzUlVGQldVUXNUMEZCVDFBc1pVRkRka0lzVFVGQlR5eERRVU5NVXl4WFFVRlpSQ3hGUVVGVlF5eFhRVU4wUWtNc1lVRkJZMFlzUlVGQlZVVXNZVUZEZUVKRExGVkJRVmRJTEVWQlFWVkhMRlZCUTNKQ1F5eFpRVUZoU2l4RlFVRlZTU3hoUVVWd1FpeEhRVUZKZWtJc1UwRkJVM0ZDTEZWQlFWY3NRMEZETjBJc1NVRkJTVXNzUlVGQlVURkNMRk5CUVZOeFFpeFZRVUZWVFN4alFVTXZRaXhOUVVGUExFTkJRMHhETEdOQlFXVkdMRVZCUVUxRkxHZENRVU55UWtNc1MwRkJUVWdzUlVGQlRVY3NTMEZEV2tNc1NVRkJTMG9zUlVGQlRVc3NXVUZEV0VNc1MwRkJUVTRzUlVGQlRVOHNaVUZYYkVJc1UwRkJVME1zY1VKQlFYRkNReXhGUVVGaFF5eEhRVXQ2UXl4SFFVRkpla0lzVjBGQk9FSXNUVUZCYWtKSUxHVkJRWGxDUVN4blFrRkJhMEppTEcxQ1FVTXhSQ3hQUVVGUExFdEJTVlFzU1VGQlNUQkRMRVZCUVcxQ2VFSXNZVUZCWVV3c1pVRkRjRU1zU1VGQlMwVXNaMEpCUVd0Q1lpeGhRVUZoWVN4alFVRmxNa0lzUjBGQmJVSXNRMEZEY0VVelFpeGpRVUZuUWpKQ0xFVkJSV2hDTEVsQlFVbERMRVZCUVdsQ05VTXNaVUZCWlRaRExGVkJRVlZ5UXl4WFFVRlhReXhQUVVGUlRTeHJRa0ZCYlVJd1FpeEZRVUZoUXl4SFFVOXFSeXhQUVV4QlJTeEZRVUZsUlN4TFFVRlBMRk5CUTNSQ1JpeEZRVUZsUnl4UFFVRlRha01zWTBGRmVFSnVRaXhwUWtGQmFVSnhSQ3cyUWtGQk5rSktMRWRCUlhaRFFTeEZRVWRVTEU5QlFVOHNTMEZwUWxRc1NVRkJTVXNzYTBKQlFXOUNMRU5CUTNSQ2VrTXNWMEZCV1VFc1YwRkZXakJETEdOQlFXVXNVMEZCVlVNc1JVRkJZME1zUlVGQldWZ3NSVUZCWVVNc1IwRkRPVVFzU1VGQlMzaENMRmxCUTBnc1QwRkJUeXhMUVVkVUxFbEJRVWx0UXl4RlFVRmhSQ3hGUVVGaGRFUXNjMEpCUVhOQ2QwUXNiMEpCUVc5Q1JpeEhRVUZqTVVJc1QwRkZkRVlzVDBGQlVYbENMRWRCUlU0c1NVRkJTeXhaUVVORGFrUXNiVUpCUVcxQ2JVUXNTVUZCT0VNc1UwRkJMMEpCTEVWQlFWZEZMRzFDUVVNdlEzcERMR05CUVdkQ2RVTXNSVUZEYUVKMFF5eHJRa0ZCYjBKeFF5eEZRVU53UW5CRExHTkJRV2RDTEUxQlJXeENMRTFCUTBZc1NVRkJTeXhWUVVOSVJpeGpRVUZuUWl4TFFVTm9Ra01zYTBKQlFXOUNMRXRCUTNCQ1F5eGpRVUZuUWl4TFFVTm9RaXhOUVVkR0xFbEJRVXNzWlVGRFNFTXNWMEZCV1N4RlFVTmFMRTFCUTBZc1NVRkJTeXhwUWtGRFRDeEpRVUZMTEdGQlJVZ3NUMEZFUVVFc1YwRkJXU3hGUVVOTWRVSXNjVUpCUVhGQ1F5eEZRVUZoUXl4SFFWVXpReXhKUVVGTExIRkNRVU5JTEVkQlFVbDBReXg1UWtGRFJpeE5RVWRLTEVsQlFVc3NZVUZEVEN4SlFVRkxMRmRCUTBnc1QwRkJUMjlETEhGQ1FVRnhRa01zUlVGQllVTXNSMEZITjBNc1QwRkJUeXhOUVVkVVl5eGxRVUZuUWl4VFFVRlZReXhGUVVGTlF5eEZRVUZyUWtNc1IwRkRka0lzWVVGQmNrSkVMRWxCUTBaNFF5eGhRVUZqTEV0QlMzQkNNRU1zVDBGQlQwTXNVVUZCVlZvaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Y21WaFkzUXRaRzl0TDJ4cFlpOVRaV3hsWTNSRmRtVnVkRkJzZFdkcGJpNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9wcm9kSW52YXJpYW50PXJlcXVpcmUoXCIuL3JlYWN0UHJvZEludmFyaWFudFwiKSxFdmVudExpc3RlbmVyPXJlcXVpcmUoXCJmYmpzL2xpYi9FdmVudExpc3RlbmVyXCIpLEV2ZW50UHJvcGFnYXRvcnM9cmVxdWlyZShcIi4vRXZlbnRQcm9wYWdhdG9yc1wiKSxSZWFjdERPTUNvbXBvbmVudFRyZWU9cmVxdWlyZShcIi4vUmVhY3RET01Db21wb25lbnRUcmVlXCIpLFN5bnRoZXRpY0FuaW1hdGlvbkV2ZW50PXJlcXVpcmUoXCIuL1N5bnRoZXRpY0FuaW1hdGlvbkV2ZW50XCIpLFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50PXJlcXVpcmUoXCIuL1N5bnRoZXRpY0NsaXBib2FyZEV2ZW50XCIpLFN5bnRoZXRpY0V2ZW50PXJlcXVpcmUoXCIuL1N5bnRoZXRpY0V2ZW50XCIpLFN5bnRoZXRpY0ZvY3VzRXZlbnQ9cmVxdWlyZShcIi4vU3ludGhldGljRm9jdXNFdmVudFwiKSxTeW50aGV0aWNLZXlib2FyZEV2ZW50PXJlcXVpcmUoXCIuL1N5bnRoZXRpY0tleWJvYXJkRXZlbnRcIiksU3ludGhldGljTW91c2VFdmVudD1yZXF1aXJlKFwiLi9TeW50aGV0aWNNb3VzZUV2ZW50XCIpLFN5bnRoZXRpY0RyYWdFdmVudD1yZXF1aXJlKFwiLi9TeW50aGV0aWNEcmFnRXZlbnRcIiksU3ludGhldGljVG91Y2hFdmVudD1yZXF1aXJlKFwiLi9TeW50aGV0aWNUb3VjaEV2ZW50XCIpLFN5bnRoZXRpY1RyYW5zaXRpb25FdmVudD1yZXF1aXJlKFwiLi9TeW50aGV0aWNUcmFuc2l0aW9uRXZlbnRcIiksU3ludGhldGljVUlFdmVudD1yZXF1aXJlKFwiLi9TeW50aGV0aWNVSUV2ZW50XCIpLFN5bnRoZXRpY1doZWVsRXZlbnQ9cmVxdWlyZShcIi4vU3ludGhldGljV2hlZWxFdmVudFwiKSxlbXB0eUZ1bmN0aW9uPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uXCIpLGdldEV2ZW50Q2hhckNvZGU9cmVxdWlyZShcIi4vZ2V0RXZlbnRDaGFyQ29kZVwiKSxpbnZhcmlhbnQ9cmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKSxldmVudFR5cGVzPXt9LHRvcExldmVsRXZlbnRzVG9EaXNwYXRjaENvbmZpZz17fTtbXCJhYm9ydFwiLFwiYW5pbWF0aW9uRW5kXCIsXCJhbmltYXRpb25JdGVyYXRpb25cIixcImFuaW1hdGlvblN0YXJ0XCIsXCJibHVyXCIsXCJjYW5QbGF5XCIsXCJjYW5QbGF5VGhyb3VnaFwiLFwiY2xpY2tcIixcImNvbnRleHRNZW51XCIsXCJjb3B5XCIsXCJjdXRcIixcImRvdWJsZUNsaWNrXCIsXCJkcmFnXCIsXCJkcmFnRW5kXCIsXCJkcmFnRW50ZXJcIixcImRyYWdFeGl0XCIsXCJkcmFnTGVhdmVcIixcImRyYWdPdmVyXCIsXCJkcmFnU3RhcnRcIixcImRyb3BcIixcImR1cmF0aW9uQ2hhbmdlXCIsXCJlbXB0aWVkXCIsXCJlbmNyeXB0ZWRcIixcImVuZGVkXCIsXCJlcnJvclwiLFwiZm9jdXNcIixcImlucHV0XCIsXCJpbnZhbGlkXCIsXCJrZXlEb3duXCIsXCJrZXlQcmVzc1wiLFwia2V5VXBcIixcImxvYWRcIixcImxvYWRlZERhdGFcIixcImxvYWRlZE1ldGFkYXRhXCIsXCJsb2FkU3RhcnRcIixcIm1vdXNlRG93blwiLFwibW91c2VNb3ZlXCIsXCJtb3VzZU91dFwiLFwibW91c2VPdmVyXCIsXCJtb3VzZVVwXCIsXCJwYXN0ZVwiLFwicGF1c2VcIixcInBsYXlcIixcInBsYXlpbmdcIixcInByb2dyZXNzXCIsXCJyYXRlQ2hhbmdlXCIsXCJyZXNldFwiLFwic2Nyb2xsXCIsXCJzZWVrZWRcIixcInNlZWtpbmdcIixcInN0YWxsZWRcIixcInN1Ym1pdFwiLFwic3VzcGVuZFwiLFwidGltZVVwZGF0ZVwiLFwidG91Y2hDYW5jZWxcIixcInRvdWNoRW5kXCIsXCJ0b3VjaE1vdmVcIixcInRvdWNoU3RhcnRcIixcInRyYW5zaXRpb25FbmRcIixcInZvbHVtZUNoYW5nZVwiLFwid2FpdGluZ1wiLFwid2hlZWxcIl0uZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1lWzBdLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKSxuPVwib25cIit0LGE9XCJ0b3BcIit0LG89e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOm4sY2FwdHVyZWQ6bitcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlthXX07ZXZlbnRUeXBlc1tlXT1vLHRvcExldmVsRXZlbnRzVG9EaXNwYXRjaENvbmZpZ1thXT1vfSk7dmFyIG9uQ2xpY2tMaXN0ZW5lcnM9e307ZnVuY3Rpb24gZ2V0RGljdGlvbmFyeUtleShlKXtyZXR1cm5cIi5cIitlLl9yb290Tm9kZUlEfWZ1bmN0aW9uIGlzSW50ZXJhY3RpdmUoZSl7cmV0dXJuXCJidXR0b25cIj09PWV8fFwiaW5wdXRcIj09PWV8fFwic2VsZWN0XCI9PT1lfHxcInRleHRhcmVhXCI9PT1lfXZhciBTaW1wbGVFdmVudFBsdWdpbj17ZXZlbnRUeXBlczpldmVudFR5cGVzLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oZSx0LG4sYSl7dmFyIG8saT10b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWdbZV07aWYoIWkpcmV0dXJuIG51bGw7c3dpdGNoKGUpe2Nhc2VcInRvcEFib3J0XCI6Y2FzZVwidG9wQ2FuUGxheVwiOmNhc2VcInRvcENhblBsYXlUaHJvdWdoXCI6Y2FzZVwidG9wRHVyYXRpb25DaGFuZ2VcIjpjYXNlXCJ0b3BFbXB0aWVkXCI6Y2FzZVwidG9wRW5jcnlwdGVkXCI6Y2FzZVwidG9wRW5kZWRcIjpjYXNlXCJ0b3BFcnJvclwiOmNhc2VcInRvcElucHV0XCI6Y2FzZVwidG9wSW52YWxpZFwiOmNhc2VcInRvcExvYWRcIjpjYXNlXCJ0b3BMb2FkZWREYXRhXCI6Y2FzZVwidG9wTG9hZGVkTWV0YWRhdGFcIjpjYXNlXCJ0b3BMb2FkU3RhcnRcIjpjYXNlXCJ0b3BQYXVzZVwiOmNhc2VcInRvcFBsYXlcIjpjYXNlXCJ0b3BQbGF5aW5nXCI6Y2FzZVwidG9wUHJvZ3Jlc3NcIjpjYXNlXCJ0b3BSYXRlQ2hhbmdlXCI6Y2FzZVwidG9wUmVzZXRcIjpjYXNlXCJ0b3BTZWVrZWRcIjpjYXNlXCJ0b3BTZWVraW5nXCI6Y2FzZVwidG9wU3RhbGxlZFwiOmNhc2VcInRvcFN1Ym1pdFwiOmNhc2VcInRvcFN1c3BlbmRcIjpjYXNlXCJ0b3BUaW1lVXBkYXRlXCI6Y2FzZVwidG9wVm9sdW1lQ2hhbmdlXCI6Y2FzZVwidG9wV2FpdGluZ1wiOm89U3ludGhldGljRXZlbnQ7YnJlYWs7Y2FzZVwidG9wS2V5UHJlc3NcIjppZigwPT09Z2V0RXZlbnRDaGFyQ29kZShuKSlyZXR1cm4gbnVsbDtjYXNlXCJ0b3BLZXlEb3duXCI6Y2FzZVwidG9wS2V5VXBcIjpvPVN5bnRoZXRpY0tleWJvYXJkRXZlbnQ7YnJlYWs7Y2FzZVwidG9wQmx1clwiOmNhc2VcInRvcEZvY3VzXCI6bz1TeW50aGV0aWNGb2N1c0V2ZW50O2JyZWFrO2Nhc2VcInRvcENsaWNrXCI6aWYoMj09PW4uYnV0dG9uKXJldHVybiBudWxsO2Nhc2VcInRvcERvdWJsZUNsaWNrXCI6Y2FzZVwidG9wTW91c2VEb3duXCI6Y2FzZVwidG9wTW91c2VNb3ZlXCI6Y2FzZVwidG9wTW91c2VVcFwiOmNhc2VcInRvcE1vdXNlT3V0XCI6Y2FzZVwidG9wTW91c2VPdmVyXCI6Y2FzZVwidG9wQ29udGV4dE1lbnVcIjpvPVN5bnRoZXRpY01vdXNlRXZlbnQ7YnJlYWs7Y2FzZVwidG9wRHJhZ1wiOmNhc2VcInRvcERyYWdFbmRcIjpjYXNlXCJ0b3BEcmFnRW50ZXJcIjpjYXNlXCJ0b3BEcmFnRXhpdFwiOmNhc2VcInRvcERyYWdMZWF2ZVwiOmNhc2VcInRvcERyYWdPdmVyXCI6Y2FzZVwidG9wRHJhZ1N0YXJ0XCI6Y2FzZVwidG9wRHJvcFwiOm89U3ludGhldGljRHJhZ0V2ZW50O2JyZWFrO2Nhc2VcInRvcFRvdWNoQ2FuY2VsXCI6Y2FzZVwidG9wVG91Y2hFbmRcIjpjYXNlXCJ0b3BUb3VjaE1vdmVcIjpjYXNlXCJ0b3BUb3VjaFN0YXJ0XCI6bz1TeW50aGV0aWNUb3VjaEV2ZW50O2JyZWFrO2Nhc2VcInRvcEFuaW1hdGlvbkVuZFwiOmNhc2VcInRvcEFuaW1hdGlvbkl0ZXJhdGlvblwiOmNhc2VcInRvcEFuaW1hdGlvblN0YXJ0XCI6bz1TeW50aGV0aWNBbmltYXRpb25FdmVudDticmVhaztjYXNlXCJ0b3BUcmFuc2l0aW9uRW5kXCI6bz1TeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQ7YnJlYWs7Y2FzZVwidG9wU2Nyb2xsXCI6bz1TeW50aGV0aWNVSUV2ZW50O2JyZWFrO2Nhc2VcInRvcFdoZWVsXCI6bz1TeW50aGV0aWNXaGVlbEV2ZW50O2JyZWFrO2Nhc2VcInRvcENvcHlcIjpjYXNlXCJ0b3BDdXRcIjpjYXNlXCJ0b3BQYXN0ZVwiOm89U3ludGhldGljQ2xpcGJvYXJkRXZlbnR9b3x8KFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwiU2ltcGxlRXZlbnRQbHVnaW46IFVuaGFuZGxlZCBldmVudCB0eXBlLCBgJXNgLlwiLGUpOl9wcm9kSW52YXJpYW50KFwiODZcIixlKSk7dmFyIHI9by5nZXRQb29sZWQoaSx0LG4sYSk7cmV0dXJuIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhyKSxyfSxkaWRQdXRMaXN0ZW5lcjpmdW5jdGlvbihlLHQsbil7aWYoXCJvbkNsaWNrXCI9PT10JiYhaXNJbnRlcmFjdGl2ZShlLl90YWcpKXt2YXIgYT1nZXREaWN0aW9uYXJ5S2V5KGUpLG89UmVhY3RET01Db21wb25lbnRUcmVlLmdldE5vZGVGcm9tSW5zdGFuY2UoZSk7b25DbGlja0xpc3RlbmVyc1thXXx8KG9uQ2xpY2tMaXN0ZW5lcnNbYV09RXZlbnRMaXN0ZW5lci5saXN0ZW4obyxcImNsaWNrXCIsZW1wdHlGdW5jdGlvbikpfX0sd2lsbERlbGV0ZUxpc3RlbmVyOmZ1bmN0aW9uKGUsdCl7aWYoXCJvbkNsaWNrXCI9PT10JiYhaXNJbnRlcmFjdGl2ZShlLl90YWcpKXt2YXIgbj1nZXREaWN0aW9uYXJ5S2V5KGUpO29uQ2xpY2tMaXN0ZW5lcnNbbl0ucmVtb3ZlKCksZGVsZXRlIG9uQ2xpY2tMaXN0ZW5lcnNbbl19fX07bW9kdWxlLmV4cG9ydHM9U2ltcGxlRXZlbnRQbHVnaW47XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbE5wYlhCc1pVVjJaVzUwVUd4MVoybHVMbXB6SWwwc0ltNWhiV1Z6SWpwYklsOXdjbTlrU1c1MllYSnBZVzUwSWl3aWNtVnhkV2x5WlNJc0lrVjJaVzUwVEdsemRHVnVaWElpTENKRmRtVnVkRkJ5YjNCaFoyRjBiM0p6SWl3aVVtVmhZM1JFVDAxRGIyMXdiMjVsYm5SVWNtVmxJaXdpVTNsdWRHaGxkR2xqUVc1cGJXRjBhVzl1UlhabGJuUWlMQ0pUZVc1MGFHVjBhV05EYkdsd1ltOWhjbVJGZG1WdWRDSXNJbE41Ym5Sb1pYUnBZMFYyWlc1MElpd2lVM2x1ZEdobGRHbGpSbTlqZFhORmRtVnVkQ0lzSWxONWJuUm9aWFJwWTB0bGVXSnZZWEprUlhabGJuUWlMQ0pUZVc1MGFHVjBhV05OYjNWelpVVjJaVzUwSWl3aVUzbHVkR2hsZEdsalJISmhaMFYyWlc1MElpd2lVM2x1ZEdobGRHbGpWRzkxWTJoRmRtVnVkQ0lzSWxONWJuUm9aWFJwWTFSeVlXNXphWFJwYjI1RmRtVnVkQ0lzSWxONWJuUm9aWFJwWTFWSlJYWmxiblFpTENKVGVXNTBhR1YwYVdOWGFHVmxiRVYyWlc1MElpd2laVzF3ZEhsR2RXNWpkR2x2YmlJc0ltZGxkRVYyWlc1MFEyaGhja052WkdVaUxDSnBiblpoY21saGJuUWlMQ0psZG1WdWRGUjVjR1Z6SWl3aWRHOXdUR1YyWld4RmRtVnVkSE5VYjBScGMzQmhkR05vUTI5dVptbG5JaXdpWm05eVJXRmphQ0lzSW1WMlpXNTBJaXdpWTJGd2FYUmhiR2w2WldSRmRtVnVkQ0lzSW5SdlZYQndaWEpEWVhObElpd2ljMnhwWTJVaUxDSnZia1YyWlc1MElpd2lkRzl3UlhabGJuUWlMQ0owZVhCbElpd2ljR2hoYzJWa1VtVm5hWE4wY21GMGFXOXVUbUZ0WlhNaUxDSmlkV0ppYkdWa0lpd2lZMkZ3ZEhWeVpXUWlMQ0prWlhCbGJtUmxibU5wWlhNaUxDSnZia05zYVdOclRHbHpkR1Z1WlhKeklpd2laMlYwUkdsamRHbHZibUZ5ZVV0bGVTSXNJbWx1YzNRaUxDSmZjbTl2ZEU1dlpHVkpSQ0lzSW1selNXNTBaWEpoWTNScGRtVWlMQ0owWVdjaUxDSlRhVzF3YkdWRmRtVnVkRkJzZFdkcGJpSXNJbVY0ZEhKaFkzUkZkbVZ1ZEhNaUxDSjBiM0JNWlhabGJGUjVjR1VpTENKMFlYSm5aWFJKYm5OMElpd2libUYwYVhabFJYWmxiblFpTENKdVlYUnBkbVZGZG1WdWRGUmhjbWRsZENJc0lrVjJaVzUwUTI5dWMzUnlkV04wYjNJaUxDSmthWE53WVhSamFFTnZibVpwWnlJc0ltSjFkSFJ2YmlJc0luQnliMk5sYzNNaUxDSmxibllpTENKT1QwUkZYMFZPVmlJc0ltZGxkRkJ2YjJ4bFpDSXNJbUZqWTNWdGRXeGhkR1ZVZDI5UWFHRnpaVVJwYzNCaGRHTm9aWE1pTENKa2FXUlFkWFJNYVhOMFpXNWxjaUlzSW5KbFoybHpkSEpoZEdsdmJrNWhiV1VpTENKc2FYTjBaVzVsY2lJc0lsOTBZV2NpTENKclpYa2lMQ0p1YjJSbElpd2laMlYwVG05a1pVWnliMjFKYm5OMFlXNWpaU0lzSW14cGMzUmxiaUlzSW5kcGJHeEVaV3hsZEdWTWFYTjBaVzVsY2lJc0luSmxiVzkyWlNJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVZOQkxHRkJSVUVzU1VGQlNVRXNaVUZCYVVKRExGRkJRVkVzZDBKQlJYcENReXhqUVVGblFrUXNVVUZCVVN3d1FrRkRlRUpGTEdsQ1FVRnRRa1lzVVVGQlVTeHpRa0ZETTBKSExITkNRVUYzUWtnc1VVRkJVU3d5UWtGRGFFTkpMSGRDUVVFd1Frb3NVVUZCVVN3MlFrRkRiRU5MTEhkQ1FVRXdRa3dzVVVGQlVTdzJRa0ZEYkVOTkxHVkJRV2xDVGl4UlFVRlJMRzlDUVVONlFrOHNiMEpCUVhOQ1VDeFJRVUZSTEhsQ1FVTTVRbEVzZFVKQlFYbENVaXhSUVVGUkxEUkNRVU5xUTFNc2IwSkJRWE5DVkN4UlFVRlJMSGxDUVVNNVFsVXNiVUpCUVhGQ1ZpeFJRVUZSTEhkQ1FVTTNRbGNzYjBKQlFYTkNXQ3hSUVVGUkxIbENRVU01UWxrc2VVSkJRVEpDV2l4UlFVRlJMRGhDUVVOdVEyRXNhVUpCUVcxQ1lpeFJRVUZSTEhOQ1FVTXpRbU1zYjBKQlFYTkNaQ3hSUVVGUkxIbENRVVU1UW1Vc1kwRkJaMEptTEZGQlFWRXNNRUpCUTNoQ1owSXNhVUpCUVcxQ2FFSXNVVUZCVVN4elFrRkRNMEpwUWl4VlFVRlpha0lzVVVGQlVTeHpRa0Z2UW5CQ2EwSXNWMEZCWVN4SFFVTmlReXdyUWtGQmFVTXNSMEZEY2tNc1EwRkJReXhSUVVGVExHVkJRV2RDTEhGQ1FVRnpRaXhwUWtGQmEwSXNUMEZCVVN4VlFVRlhMR2xDUVVGclFpeFJRVUZUTEdOQlFXVXNUMEZCVVN4TlFVRlBMR05CUVdVc1QwRkJVU3hWUVVGWExGbEJRV0VzVjBGQldTeFpRVUZoTEZkQlFWa3NXVUZCWVN4UFFVRlJMR2xDUVVGclFpeFZRVUZYTEZsQlFXRXNVVUZCVXl4UlFVRlRMRkZCUVZNc1VVRkJVeXhWUVVGWExGVkJRVmNzVjBGQldTeFJRVUZUTEU5QlFWRXNZVUZCWXl4cFFrRkJhMElzV1VGQllTeFpRVUZoTEZsQlFXRXNWMEZCV1N4WlFVRmhMRlZCUVZjc1VVRkJVeXhSUVVGVExFOUJRVkVzVlVGQlZ5eFhRVUZaTEdGQlFXTXNVVUZCVXl4VFFVRlZMRk5CUVZVc1ZVRkJWeXhWUVVGWExGTkJRVlVzVlVGQlZ5eGhRVUZqTEdOQlFXVXNWMEZCV1N4WlFVRmhMR0ZCUVdNc1owSkJRV2xDTEdWQlFXZENMRlZCUVZjc1UwRkJVME1zVVVGQlVTeFRRVUZWUXl4SFFVTnVka0lzU1VGQlNVTXNSVUZCYlVKRUxFVkJRVTBzUjBGQlIwVXNZMEZCWjBKR0xFVkJRVTFITEUxQlFVMHNSMEZEZUVSRExFVkJRVlVzUzBGQlQwZ3NSVUZEYWtKSkxFVkJRVmNzVFVGQlVVb3NSVUZGYmtKTExFVkJRVThzUTBGRFZFTXNkMEpCUVhsQ0xFTkJRM1pDUXl4UlFVRlRTaXhGUVVOVVN5eFRRVUZWVEN4RlFVRlZMRmRCUlhSQ1RTeGhRVUZqTEVOQlFVTk1MRWxCUldwQ1VpeFhRVUZYUnl4SFFVRlRUU3hGUVVOd1FsSXNLMEpCUVN0Q1R5eEhRVUZaUXl4SlFVYzNReXhKUVVGSlN5eHBRa0ZCYlVJc1IwRkZka0lzVTBGQlUwTXNhVUpCUVdsQ1F5eEhRVWQ0UWl4TlFVRlBMRWxCUVUxQkxFVkJRVXRETEZsQlIzQkNMRk5CUVZORExHTkJRV05ETEVkQlEzSkNMRTFCUVdVc1YwRkJVa0VzUjBGQk5FSXNWVUZCVWtFc1IwRkJNa0lzVjBGQlVrRXNSMEZCTkVJc1lVRkJVa0VzUlVGSGNFVXNTVUZCU1VNc2EwSkJRVzlDTEVOQlEzUkNjRUlzVjBGQldVRXNWMEZGV25GQ0xHTkJRV1VzVTBGQlZVTXNSVUZCWTBNc1JVRkJXVU1zUlVGQllVTXNSMEZET1VRc1NVRkpTVU1zUlVGS1FVTXNSVUZCYVVJeFFpd3JRa0ZCSzBKeFFpeEhRVU53UkN4SlFVRkxTeXhGUVVOSUxFOUJRVThzUzBGSFZDeFBRVUZSVEN4SFFVTk9MRWxCUVVzc1YwRkRUQ3hKUVVGTExHRkJRMHdzU1VGQlN5eHZRa0ZEVEN4SlFVRkxMRzlDUVVOTUxFbEJRVXNzWVVGRFRDeEpRVUZMTEdWQlEwd3NTVUZCU3l4WFFVTk1MRWxCUVVzc1YwRkRUQ3hKUVVGTExGZEJRMHdzU1VGQlN5eGhRVU5NTEVsQlFVc3NWVUZEVEN4SlFVRkxMR2RDUVVOTUxFbEJRVXNzYjBKQlEwd3NTVUZCU3l4bFFVTk1MRWxCUVVzc1YwRkRUQ3hKUVVGTExGVkJRMHdzU1VGQlN5eGhRVU5NTEVsQlFVc3NZMEZEVEN4SlFVRkxMR2RDUVVOTUxFbEJRVXNzVjBGRFRDeEpRVUZMTEZsQlEwd3NTVUZCU3l4aFFVTk1MRWxCUVVzc1lVRkRUQ3hKUVVGTExGbEJRMHdzU1VGQlN5eGhRVU5NTEVsQlFVc3NaMEpCUTB3c1NVRkJTeXhyUWtGRFRDeEpRVUZMTEdGQlIwaEpMRVZCUVcxQ2RFTXNaVUZEYmtJc1RVRkRSaXhKUVVGTExHTkJTVWdzUjBGQmMwTXNTVUZCYkVOVkxHbENRVUZwUWpCQ0xFZEJRMjVDTEU5QlFVOHNTMEZIV0N4SlFVRkxMR0ZCUTB3c1NVRkJTeXhYUVVOSVJTeEZRVUZ0UW5CRExIVkNRVU51UWl4TlFVTkdMRWxCUVVzc1ZVRkRUQ3hKUVVGTExGZEJRMGh2UXl4RlFVRnRRbkpETEc5Q1FVTnVRaXhOUVVOR0xFbEJRVXNzVjBGSFNDeEhRVUV5UWl4SlFVRjJRbTFETEVWQlFWbEpMRTlCUTJRc1QwRkJUeXhMUVVkWUxFbEJRVXNzYVVKQlEwd3NTVUZCU3l4bFFVTk1MRWxCUVVzc1pVRkRUQ3hKUVVGTExHRkJSMHdzU1VGQlN5eGpRVU5NTEVsQlFVc3NaVUZEVEN4SlFVRkxMR2xDUVVOSVJpeEZRVUZ0UW01RExHOUNRVU51UWl4TlFVTkdMRWxCUVVzc1ZVRkRUQ3hKUVVGTExHRkJRMHdzU1VGQlN5eGxRVU5NTEVsQlFVc3NZMEZEVEN4SlFVRkxMR1ZCUTB3c1NVRkJTeXhqUVVOTUxFbEJRVXNzWlVGRFRDeEpRVUZMTEZWQlEwaHRReXhGUVVGdFFteERMRzFDUVVOdVFpeE5RVU5HTEVsQlFVc3NhVUpCUTB3c1NVRkJTeXhqUVVOTUxFbEJRVXNzWlVGRFRDeEpRVUZMTEdkQ1FVTklhME1zUlVGQmJVSnFReXh2UWtGRGJrSXNUVUZEUml4SlFVRkxMR3RDUVVOTUxFbEJRVXNzZDBKQlEwd3NTVUZCU3l4dlFrRkRTR2xETEVWQlFXMUNlRU1zZDBKQlEyNUNMRTFCUTBZc1NVRkJTeXh0UWtGRFNIZERMRVZCUVcxQ2FFTXNlVUpCUTI1Q0xFMUJRMFlzU1VGQlN5eFpRVU5JWjBNc1JVRkJiVUl2UWl4cFFrRkRia0lzVFVGRFJpeEpRVUZMTEZkQlEwZ3JRaXhGUVVGdFFqbENMRzlDUVVOdVFpeE5RVU5HTEVsQlFVc3NWVUZEVEN4SlFVRkxMRk5CUTB3c1NVRkJTeXhYUVVOSU9FSXNSVUZCYlVKMlF5eDNRa0ZIZEVKMVF5eEpRVUUwUXl4bFFVRjZRa2NzVVVGQlVVTXNTVUZCU1VNc1UwRkJORUpvUXl4WFFVRlZMRVZCUVU4c2FVUkJRV3RFZFVJc1IwRkJaMEo2UXl4bFFVRmxMRXRCUVUxNVF5eEpRVU53U3l4SlFVRkpia0lzUlVGQlVYVkNMRVZCUVdsQ1RTeFZRVUZWVEN4RlFVRm5Ra29zUlVGQldVTXNSVUZCWVVNc1IwRkZhRVlzVDBGRVFYcERMR2xDUVVGcFFtbEVMRFpDUVVFMlFqbENMRWRCUTNaRFFTeEhRVWRVSzBJc1pVRkJaMElzVTBGQlZXeENMRVZCUVUxdFFpeEZRVUZyUWtNc1IwRk5hRVFzUjBGQmVVSXNXVUZCY2tKRUxFbEJRVzFEYWtJc1kwRkJZMFlzUlVGQlMzRkNMRTFCUVU4c1EwRkRMMFFzU1VGQlNVTXNSVUZCVFhaQ0xHbENRVUZwUWtNc1IwRkRka0oxUWl4RlFVRlBkRVFzYzBKQlFYTkNkVVFzYjBKQlFXOUNlRUlzUjBGRGFFUkdMR2xDUVVGcFFuZENMRXRCUTNCQ2VFSXNhVUpCUVdsQ2QwSXNSMEZCVDNaRUxHTkJRV013UkN4UFFVRlBSaXhGUVVGTkxGRkJRVk14UXl4clFrRkxiRVUyUXl4dFFrRkJiMElzVTBGQlZURkNMRVZCUVUxdFFpeEhRVU5zUXl4SFFVRjVRaXhaUVVGeVFrRXNTVUZCYlVOcVFpeGpRVUZqUml4RlFVRkxjVUlzVFVGQlR5eERRVU12UkN4SlFVRkpReXhGUVVGTmRrSXNhVUpCUVdsQ1F5eEhRVU16UWtZc2FVSkJRV2xDZDBJc1IwRkJTMHNzWjBKQlEyWTNRaXhwUWtGQmFVSjNRaXhOUVVzNVFrMHNUMEZCVDBNc1VVRkJWWHBDSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdOMExXUnZiUzlzYVdJdlUybHRjR3hsUlhabGJuUlFiSFZuYVc0dWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIFN5bnRoZXRpY0V2ZW50PXJlcXVpcmUoXCIuL1N5bnRoZXRpY0V2ZW50XCIpLEFuaW1hdGlvbkV2ZW50SW50ZXJmYWNlPXthbmltYXRpb25OYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9O2Z1bmN0aW9uIFN5bnRoZXRpY0FuaW1hdGlvbkV2ZW50KHQsbixlLGkpe3JldHVybiBTeW50aGV0aWNFdmVudC5jYWxsKHRoaXMsdCxuLGUsaSl9U3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY0FuaW1hdGlvbkV2ZW50LEFuaW1hdGlvbkV2ZW50SW50ZXJmYWNlKSxtb2R1bGUuZXhwb3J0cz1TeW50aGV0aWNBbmltYXRpb25FdmVudDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsTjViblJvWlhScFkwRnVhVzFoZEdsdmJrVjJaVzUwTG1weklsMHNJbTVoYldWeklqcGJJbE41Ym5Sb1pYUnBZMFYyWlc1MElpd2ljbVZ4ZFdseVpTSXNJa0Z1YVcxaGRHbHZia1YyWlc1MFNXNTBaWEptWVdObElpd2lZVzVwYldGMGFXOXVUbUZ0WlNJc0ltVnNZWEJ6WldSVWFXMWxJaXdpY0hObGRXUnZSV3hsYldWdWRDSXNJbE41Ym5Sb1pYUnBZMEZ1YVcxaGRHbHZia1YyWlc1MElpd2laR2x6Y0dGMFkyaERiMjVtYVdjaUxDSmthWE53WVhSamFFMWhjbXRsY2lJc0ltNWhkR2wyWlVWMlpXNTBJaXdpYm1GMGFYWmxSWFpsYm5SVVlYSm5aWFFpTENKallXeHNJaXdpZEdocGN5SXNJbUYxWjIxbGJuUkRiR0Z6Y3lJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVZGQkxHRkJSVUVzU1VGQlNVRXNaVUZCYVVKRExGRkJRVkVzYjBKQlQzcENReXgzUWtGQk1FSXNRMEZETlVKRExHTkJRV1VzUzBGRFprTXNXVUZCWVN4TFFVTmlReXhqUVVGbExFMUJVMnBDTEZOQlFWTkRMSGRDUVVGM1FrTXNSVUZCWjBKRExFVkJRV2RDUXl4RlFVRmhReXhIUVVNMVJTeFBRVUZQVml4bFFVRmxWeXhMUVVGTFF5eExRVUZOVEN4RlFVRm5Ra01zUlVGQlowSkRMRVZCUVdGRExFZEJSMmhHVml4bFFVRmxZU3hoUVVGaFVDeDNRa0ZCZVVKS0xIbENRVVZ5UkZrc1QwRkJUME1zVVVGQlZWUWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F0Wkc5dEwyeHBZaTlUZVc1MGFHVjBhV05CYm1sdFlYUnBiMjVGZG1WdWRDNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIFN5bnRoZXRpY0V2ZW50PXJlcXVpcmUoXCIuL1N5bnRoZXRpY0V2ZW50XCIpLENsaXBib2FyZEV2ZW50SW50ZXJmYWNlPXtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKHQpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gdD90LmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fTtmdW5jdGlvbiBTeW50aGV0aWNDbGlwYm9hcmRFdmVudCh0LGUsbixhKXtyZXR1cm4gU3ludGhldGljRXZlbnQuY2FsbCh0aGlzLHQsZSxuLGEpfVN5bnRoZXRpY0V2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNDbGlwYm9hcmRFdmVudCxDbGlwYm9hcmRFdmVudEludGVyZmFjZSksbW9kdWxlLmV4cG9ydHM9U3ludGhldGljQ2xpcGJvYXJkRXZlbnQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbE41Ym5Sb1pYUnBZME5zYVhCaWIyRnlaRVYyWlc1MExtcHpJbDBzSW01aGJXVnpJanBiSWxONWJuUm9aWFJwWTBWMlpXNTBJaXdpY21WeGRXbHlaU0lzSWtOc2FYQmliMkZ5WkVWMlpXNTBTVzUwWlhKbVlXTmxJaXdpWTJ4cGNHSnZZWEprUkdGMFlTSXNJbVYyWlc1MElpd2lkMmx1Wkc5M0lpd2lVM2x1ZEdobGRHbGpRMnhwY0dKdllYSmtSWFpsYm5RaUxDSmthWE53WVhSamFFTnZibVpwWnlJc0ltUnBjM0JoZEdOb1RXRnlhMlZ5SWl3aWJtRjBhWFpsUlhabGJuUWlMQ0p1WVhScGRtVkZkbVZ1ZEZSaGNtZGxkQ0lzSW1OaGJHd2lMQ0owYUdseklpd2lZWFZuYldWdWRFTnNZWE56SWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCVVVFc1lVRkZRU3hKUVVGSlFTeGxRVUZwUWtNc1VVRkJVU3h2UWtGTmVrSkRMSGRDUVVFd1FpeERRVU0xUWtNc1kwRkJaU3hUUVVGVlF5eEhRVU4yUWl4TlFVRlBMR3RDUVVGdFFrRXNSVUZCVVVFc1JVRkJUVVFzWTBGQlowSkZMRTlCUVU5R0xHZENRVlZ1UlN4VFFVRlRSeXgzUWtGQmQwSkRMRVZCUVdkQ1F5eEZRVUZuUWtNc1JVRkJZVU1zUjBGRE5VVXNUMEZCVDFZc1pVRkJaVmNzUzBGQlMwTXNTMEZCVFV3c1JVRkJaMEpETEVWQlFXZENReXhGUVVGaFF5eEhRVWRvUmxZc1pVRkJaV0VzWVVGQllWQXNkMEpCUVhsQ1NpeDVRa0ZGY2tSWkxFOUJRVTlETEZGQlFWVlVJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwzSmxZV04wTFdSdmJTOXNhV0l2VTNsdWRHaGxkR2xqUTJ4cGNHSnZZWEprUlhabGJuUXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciBTeW50aGV0aWNFdmVudD1yZXF1aXJlKFwiLi9TeW50aGV0aWNFdmVudFwiKSxDb21wb3NpdGlvbkV2ZW50SW50ZXJmYWNlPXtkYXRhOm51bGx9O2Z1bmN0aW9uIFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQodCxuLGUsaSl7cmV0dXJuIFN5bnRoZXRpY0V2ZW50LmNhbGwodGhpcyx0LG4sZSxpKX1TeW50aGV0aWNFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljQ29tcG9zaXRpb25FdmVudCxDb21wb3NpdGlvbkV2ZW50SW50ZXJmYWNlKSxtb2R1bGUuZXhwb3J0cz1TeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxONWJuUm9aWFJwWTBOdmJYQnZjMmwwYVc5dVJYWmxiblF1YW5NaVhTd2libUZ0WlhNaU9sc2lVM2x1ZEdobGRHbGpSWFpsYm5RaUxDSnlaWEYxYVhKbElpd2lRMjl0Y0c5emFYUnBiMjVGZG1WdWRFbHVkR1Z5Wm1GalpTSXNJbVJoZEdFaUxDSlRlVzUwYUdWMGFXTkRiMjF3YjNOcGRHbHZia1YyWlc1MElpd2laR2x6Y0dGMFkyaERiMjVtYVdjaUxDSmthWE53WVhSamFFMWhjbXRsY2lJc0ltNWhkR2wyWlVWMlpXNTBJaXdpYm1GMGFYWmxSWFpsYm5SVVlYSm5aWFFpTENKallXeHNJaXdpZEdocGN5SXNJbUYxWjIxbGJuUkRiR0Z6Y3lJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVZGQkxHRkJSVUVzU1VGQlNVRXNaVUZCYVVKRExGRkJRVkVzYjBKQlRYcENReXd3UWtGQk5FSXNRMEZET1VKRExFdEJRVTBzVFVGVFVpeFRRVUZUUXl3d1FrRkJNRUpETEVWQlFXZENReXhGUVVGblFrTXNSVUZCWVVNc1IwRkRPVVVzVDBGQlQxSXNaVUZCWlZNc1MwRkJTME1zUzBGQlRVd3NSVUZCWjBKRExFVkJRV2RDUXl4RlFVRmhReXhIUVVkb1JsSXNaVUZCWlZjc1lVRkJZVkFzTUVKQlFUSkNSaXd5UWtGRmRrUlZMRTlCUVU5RExGRkJRVlZVSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdOMExXUnZiUzlzYVdJdlUzbHVkR2hsZEdsalEyOXRjRzl6YVhScGIyNUZkbVZ1ZEM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgU3ludGhldGljTW91c2VFdmVudD1yZXF1aXJlKFwiLi9TeW50aGV0aWNNb3VzZUV2ZW50XCIpLERyYWdFdmVudEludGVyZmFjZT17ZGF0YVRyYW5zZmVyOm51bGx9O2Z1bmN0aW9uIFN5bnRoZXRpY0RyYWdFdmVudCh0LGUsbixyKXtyZXR1cm4gU3ludGhldGljTW91c2VFdmVudC5jYWxsKHRoaXMsdCxlLG4scil9U3ludGhldGljTW91c2VFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljRHJhZ0V2ZW50LERyYWdFdmVudEludGVyZmFjZSksbW9kdWxlLmV4cG9ydHM9U3ludGhldGljRHJhZ0V2ZW50O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxONWJuUm9aWFJwWTBSeVlXZEZkbVZ1ZEM1cWN5SmRMQ0p1WVcxbGN5STZXeUpUZVc1MGFHVjBhV05OYjNWelpVVjJaVzUwSWl3aWNtVnhkV2x5WlNJc0lrUnlZV2RGZG1WdWRFbHVkR1Z5Wm1GalpTSXNJbVJoZEdGVWNtRnVjMlpsY2lJc0lsTjViblJvWlhScFkwUnlZV2RGZG1WdWRDSXNJbVJwYzNCaGRHTm9RMjl1Wm1sbklpd2laR2x6Y0dGMFkyaE5ZWEpyWlhJaUxDSnVZWFJwZG1WRmRtVnVkQ0lzSW01aGRHbDJaVVYyWlc1MFZHRnlaMlYwSWl3aVkyRnNiQ0lzSW5Sb2FYTWlMQ0poZFdkdFpXNTBRMnhoYzNNaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25SeklsMHNJbTFoY0hCcGJtZHpJam9pUVVGUlFTeGhRVVZCTEVsQlFVbEJMRzlDUVVGelFrTXNVVUZCVVN4NVFrRk5PVUpETEcxQ1FVRnhRaXhEUVVOMlFrTXNZVUZCWXl4TlFWTm9RaXhUUVVGVFF5eHRRa0ZCYlVKRExFVkJRV2RDUXl4RlFVRm5Ra01zUlVGQllVTXNSMEZEZGtVc1QwRkJUMUlzYjBKQlFXOUNVeXhMUVVGTFF5eExRVUZOVEN4RlFVRm5Ra01zUlVGQlowSkRMRVZCUVdGRExFZEJSM0pHVWl4dlFrRkJiMEpYTEdGQlFXRlFMRzFDUVVGdlFrWXNiMEpCUlhKRVZTeFBRVUZQUXl4UlFVRlZWQ0lzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEMxa2IyMHZiR2xpTDFONWJuUm9aWFJwWTBSeVlXZEZkbVZ1ZEM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgX2Fzc2lnbj1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxQb29sZWRDbGFzcz1yZXF1aXJlKFwiLi9Qb29sZWRDbGFzc1wiKSxlbXB0eUZ1bmN0aW9uPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uXCIpLHdhcm5pbmc9cmVxdWlyZShcImZianMvbGliL3dhcm5pbmdcIiksZGlkV2FybkZvckFkZGVkTmV3UHJvcGVydHk9ITEsaXNQcm94eVN1cHBvcnRlZD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSxzaG91bGRCZVJlbGVhc2VkUHJvcGVydGllcz1bXCJkaXNwYXRjaENvbmZpZ1wiLFwiX3RhcmdldEluc3RcIixcIm5hdGl2ZUV2ZW50XCIsXCJpc0RlZmF1bHRQcmV2ZW50ZWRcIixcImlzUHJvcGFnYXRpb25TdG9wcGVkXCIsXCJfZGlzcGF0Y2hMaXN0ZW5lcnNcIixcIl9kaXNwYXRjaEluc3RhbmNlc1wiXSxFdmVudEludGVyZmFjZT17dHlwZTpudWxsLHRhcmdldDpudWxsLGN1cnJlbnRUYXJnZXQ6ZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGwsZXZlbnRQaGFzZTpudWxsLGJ1YmJsZXM6bnVsbCxjYW5jZWxhYmxlOm51bGwsdGltZVN0YW1wOmZ1bmN0aW9uKGUpe3JldHVybiBlLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDpudWxsLGlzVHJ1c3RlZDpudWxsfTtmdW5jdGlvbiBTeW50aGV0aWNFdmVudChlLHQsbixyKXtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoZGVsZXRlIHRoaXMubmF0aXZlRXZlbnQsZGVsZXRlIHRoaXMucHJldmVudERlZmF1bHQsZGVsZXRlIHRoaXMuc3RvcFByb3BhZ2F0aW9uKSx0aGlzLmRpc3BhdGNoQ29uZmlnPWUsdGhpcy5fdGFyZ2V0SW5zdD10LHRoaXMubmF0aXZlRXZlbnQ9bjt2YXIgbz10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGkgaW4gbylpZihvLmhhc093blByb3BlcnR5KGkpKXtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZkZWxldGUgdGhpc1tpXTt2YXIgcz1vW2ldO3M/dGhpc1tpXT1zKG4pOlwidGFyZ2V0XCI9PT1pP3RoaXMudGFyZ2V0PXI6dGhpc1tpXT1uW2ldfXZhciBhPW51bGwhPW4uZGVmYXVsdFByZXZlbnRlZD9uLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1uLnJldHVyblZhbHVlO3JldHVybiB0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1hP2VtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlOmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPWVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSx0aGlzfWZ1bmN0aW9uIGdldFBvb2xlZFdhcm5pbmdQcm9wZXJ0eURlZmluaXRpb24oZSx0KXt2YXIgbj1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0O3JldHVybntjb25maWd1cmFibGU6ITAsc2V0OmZ1bmN0aW9uIHNldChlKXtyZXR1cm4gd2FybihuP1wic2V0dGluZyB0aGUgbWV0aG9kXCI6XCJzZXR0aW5nIHRoZSBwcm9wZXJ0eVwiLFwiVGhpcyBpcyBlZmZlY3RpdmVseSBhIG5vLW9wXCIpLGV9LGdldDpmdW5jdGlvbiBnZXQoKXtyZXR1cm4gd2FybihuP1wiYWNjZXNzaW5nIHRoZSBtZXRob2RcIjpcImFjY2Vzc2luZyB0aGUgcHJvcGVydHlcIixuP1wiVGhpcyBpcyBhIG5vLW9wIGZ1bmN0aW9uXCI6XCJUaGlzIGlzIHNldCB0byBudWxsXCIpLHR9fTtmdW5jdGlvbiB3YXJuKHQsbil7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FybmluZyghMSxcIlRoaXMgc3ludGhldGljIGV2ZW50IGlzIHJldXNlZCBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucy4gSWYgeW91J3JlIHNlZWluZyB0aGlzLCB5b3UncmUgJXMgYCVzYCBvbiBhIHJlbGVhc2VkL251bGxpZmllZCBzeW50aGV0aWMgZXZlbnQuICVzLiBJZiB5b3UgbXVzdCBrZWVwIHRoZSBvcmlnaW5hbCBzeW50aGV0aWMgZXZlbnQgYXJvdW5kLCB1c2UgZXZlbnQucGVyc2lzdCgpLiBTZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC1ldmVudC1wb29saW5nIGZvciBtb3JlIGluZm9ybWF0aW9uLlwiLHQsZSxuKX19X2Fzc2lnbihTeW50aGV0aWNFdmVudC5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBlPXRoaXMubmF0aXZlRXZlbnQ7ZSYmKGUucHJldmVudERlZmF1bHQ/ZS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT10eXBlb2YgZS5yZXR1cm5WYWx1ZSYmKGUucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5uYXRpdmVFdmVudDtlJiYoZS5zdG9wUHJvcGFnYXRpb24/ZS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9dHlwZW9mIGUuY2FuY2VsQnViYmxlJiYoZS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9ZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWUpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9ZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWV9LGlzUGVyc2lzdGVudDplbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2UsZGVzdHJ1Y3RvcjpmdW5jdGlvbigpe3ZhciBlPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgdCBpbiBlKVwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsdCxnZXRQb29sZWRXYXJuaW5nUHJvcGVydHlEZWZpbml0aW9uKHQsZVt0XSkpOnRoaXNbdF09bnVsbDtmb3IodmFyIG49MDtuPHNob3VsZEJlUmVsZWFzZWRQcm9wZXJ0aWVzLmxlbmd0aDtuKyspdGhpc1tzaG91bGRCZVJlbGVhc2VkUHJvcGVydGllc1tuXV09bnVsbDtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJuYXRpdmVFdmVudFwiLGdldFBvb2xlZFdhcm5pbmdQcm9wZXJ0eURlZmluaXRpb24oXCJuYXRpdmVFdmVudFwiLG51bGwpKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInByZXZlbnREZWZhdWx0XCIsZ2V0UG9vbGVkV2FybmluZ1Byb3BlcnR5RGVmaW5pdGlvbihcInByZXZlbnREZWZhdWx0XCIsZW1wdHlGdW5jdGlvbikpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwic3RvcFByb3BhZ2F0aW9uXCIsZ2V0UG9vbGVkV2FybmluZ1Byb3BlcnR5RGVmaW5pdGlvbihcInN0b3BQcm9wYWdhdGlvblwiLGVtcHR5RnVuY3Rpb24pKSl9fSksU3ludGhldGljRXZlbnQuSW50ZXJmYWNlPUV2ZW50SW50ZXJmYWNlLFN5bnRoZXRpY0V2ZW50LmF1Z21lbnRDbGFzcz1mdW5jdGlvbihlLHQpe3ZhciBuPWZ1bmN0aW9uKCl7fTtuLnByb3RvdHlwZT10aGlzLnByb3RvdHlwZTt2YXIgcj1uZXcgbjtfYXNzaWduKHIsZS5wcm90b3R5cGUpLGUucHJvdG90eXBlPXIsZS5wcm90b3R5cGUuY29uc3RydWN0b3I9ZSxlLkludGVyZmFjZT1fYXNzaWduKHt9LHRoaXMuSW50ZXJmYWNlLHQpLGUuYXVnbWVudENsYXNzPXRoaXMuYXVnbWVudENsYXNzLFBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhlLFBvb2xlZENsYXNzLmZvdXJBcmd1bWVudFBvb2xlcil9LFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmlzUHJveHlTdXBwb3J0ZWQmJihTeW50aGV0aWNFdmVudD1uZXcgUHJveHkoU3ludGhldGljRXZlbnQse2NvbnN0cnVjdDpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmFwcGx5KGUsT2JqZWN0LmNyZWF0ZShlLnByb3RvdHlwZSksdCl9LGFwcGx5OmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gbmV3IFByb3h5KGUuYXBwbHkodCxuKSx7c2V0OmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm5cImlzUGVyc2lzdGVudFwiPT09dHx8ZS5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UuaGFzT3duUHJvcGVydHkodCl8fC0xIT09c2hvdWxkQmVSZWxlYXNlZFByb3BlcnRpZXMuaW5kZXhPZih0KXx8KFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcoZGlkV2FybkZvckFkZGVkTmV3UHJvcGVydHl8fGUuaXNQZXJzaXN0ZW50KCksXCJUaGlzIHN5bnRoZXRpYyBldmVudCBpcyByZXVzZWQgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMuIElmIHlvdSdyZSBzZWVpbmcgdGhpcywgeW91J3JlIGFkZGluZyBhIG5ldyBwcm9wZXJ0eSBpbiB0aGUgc3ludGhldGljIGV2ZW50IG9iamVjdC4gVGhlIHByb3BlcnR5IGlzIG5ldmVyIHJlbGVhc2VkLiBTZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC1ldmVudC1wb29saW5nIGZvciBtb3JlIGluZm9ybWF0aW9uLlwiKSxkaWRXYXJuRm9yQWRkZWROZXdQcm9wZXJ0eT0hMCksZVt0XT1uLCEwfX0pfX0pKSxQb29sZWRDbGFzcy5hZGRQb29saW5nVG8oU3ludGhldGljRXZlbnQsUG9vbGVkQ2xhc3MuZm91ckFyZ3VtZW50UG9vbGVyKSxtb2R1bGUuZXhwb3J0cz1TeW50aGV0aWNFdmVudDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsTjViblJvWlhScFkwVjJaVzUwTG1weklsMHNJbTVoYldWeklqcGJJbDloYzNOcFoyNGlMQ0p5WlhGMWFYSmxJaXdpVUc5dmJHVmtRMnhoYzNNaUxDSmxiWEIwZVVaMWJtTjBhVzl1SWl3aWQyRnlibWx1WnlJc0ltUnBaRmRoY201R2IzSkJaR1JsWkU1bGQxQnliM0JsY25SNUlpd2lhWE5RY205NGVWTjFjSEJ2Y25SbFpDSXNJbEJ5YjNoNUlpd2ljMmh2ZFd4a1FtVlNaV3hsWVhObFpGQnliM0JsY25ScFpYTWlMQ0pGZG1WdWRFbHVkR1Z5Wm1GalpTSXNJblI1Y0dVaUxDSjBZWEpuWlhRaUxDSmpkWEp5Wlc1MFZHRnlaMlYwSWl3aWRHaGhkRkpsZEhWeWJuTk9kV3hzSWl3aVpYWmxiblJRYUdGelpTSXNJbUoxWW1Kc1pYTWlMQ0pqWVc1alpXeGhZbXhsSWl3aWRHbHRaVk4wWVcxd0lpd2laWFpsYm5RaUxDSkVZWFJsSWl3aWJtOTNJaXdpWkdWbVlYVnNkRkJ5WlhabGJuUmxaQ0lzSW1selZISjFjM1JsWkNJc0lsTjViblJvWlhScFkwVjJaVzUwSWl3aVpHbHpjR0YwWTJoRGIyNW1hV2NpTENKMFlYSm5aWFJKYm5OMElpd2libUYwYVhabFJYWmxiblFpTENKdVlYUnBkbVZGZG1WdWRGUmhjbWRsZENJc0luQnliMk5sYzNNaUxDSmxibllpTENKT1QwUkZYMFZPVmlJc0luUm9hWE1pTENKd2NtVjJaVzUwUkdWbVlYVnNkQ0lzSW5OMGIzQlFjbTl3WVdkaGRHbHZiaUlzSWw5MFlYSm5aWFJKYm5OMElpd2lTVzUwWlhKbVlXTmxJaXdpWTI5dWMzUnlkV04wYjNJaUxDSndjbTl3VG1GdFpTSXNJbWhoYzA5M2JsQnliM0JsY25SNUlpd2libTl5YldGc2FYcGxJaXdpY21WMGRYSnVWbUZzZFdVaUxDSnBjMFJsWm1GMWJIUlFjbVYyWlc1MFpXUWlMQ0owYUdGMFVtVjBkWEp1YzFSeWRXVWlMQ0owYUdGMFVtVjBkWEp1YzBaaGJITmxJaXdpYVhOUWNtOXdZV2RoZEdsdmJsTjBiM0J3WldRaUxDSm5aWFJRYjI5c1pXUlhZWEp1YVc1blVISnZjR1Z5ZEhsRVpXWnBibWwwYVc5dUlpd2laMlYwVm1Gc0lpd2lhWE5HZFc1amRHbHZiaUlzSW1OdmJtWnBaM1Z5WVdKc1pTSXNJbk5sZENJc0luWmhiQ0lzSW5kaGNtNGlMQ0puWlhRaUxDSmhZM1JwYjI0aUxDSnlaWE4xYkhRaUxDSndjbTkwYjNSNWNHVWlMQ0pqWVc1alpXeENkV0ppYkdVaUxDSndaWEp6YVhOMElpd2lhWE5RWlhKemFYTjBaVzUwSWl3aVpHVnpkSEoxWTNSdmNpSXNJazlpYW1WamRDSXNJbVJsWm1sdVpWQnliM0JsY25SNUlpd2lhU0lzSW14bGJtZDBhQ0lzSW1GMVoyMWxiblJEYkdGemN5SXNJa05zWVhOeklpd2lSU0lzSW1Ga1pGQnZiMnhwYm1kVWJ5SXNJbVp2ZFhKQmNtZDFiV1Z1ZEZCdmIyeGxjaUlzSW1OdmJuTjBjblZqZENJc0ltRnlaM01pTENKaGNIQnNlU0lzSW1OeVpXRjBaU0lzSW5Sb1lYUWlMQ0p3Y205d0lpd2lkbUZzZFdVaUxDSnBibVJsZUU5bUlpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlVVRXNZVUZGUVN4SlFVRkpRU3hSUVVGVlF5eFJRVUZSTEdsQ1FVVnNRa01zV1VGQlkwUXNVVUZCVVN4cFFrRkZkRUpGTEdOQlFXZENSaXhSUVVGUkxEQkNRVU40UWtjc1VVRkJWVWdzVVVGQlVTeHZRa0ZGYkVKSkxEUkNRVUUyUWl4RlFVTTNRa01zYVVKQlFXOURMRzFDUVVGV1F5eE5RVVV4UWtNc01rSkJRVFpDTEVOQlFVTXNhVUpCUVd0Q0xHTkJRV1VzWTBGQlpTeHhRa0ZCYzBJc2RVSkJRWGRDTEhGQ1FVRnpRaXh6UWtGTmJFcERMR1ZCUVdsQ0xFTkJRMjVDUXl4TFFVRk5MRXRCUTA1RExFOUJRVkVzUzBGRlVrTXNZMEZCWlZRc1kwRkJZMVVzWjBKQlF6ZENReXhYUVVGWkxFdEJRMXBETEZGQlFWTXNTMEZEVkVNc1YwRkJXU3hMUVVOYVF5eFZRVUZYTEZOQlFWVkRMRWRCUTI1Q0xFOUJRVTlCTEVWQlFVMUVMRmRCUVdGRkxFdEJRVXRETEU5QlJXcERReXhwUWtGQmEwSXNTMEZEYkVKRExGVkJRVmNzVFVGeFFtSXNVMEZCVTBNc1pVRkJaVU1zUlVGQlowSkRMRVZCUVZsRExFVkJRV0ZETEVkQlEyeERMR1ZCUVhwQ1F5eFJRVUZSUXl4SlFVRkpReXhyUWtGRlVFTXNTMEZCUzB3c2JVSkJRMHhMTEV0QlFVdERMSE5DUVVOTVJDeExRVUZMUlN4cFFrRkhaRVlzUzBGQlMxQXNaVUZCYVVKQkxFVkJRM1JDVHl4TFFVRkxSeXhaUVVGalZDeEZRVU51UWswc1MwRkJTMHdzV1VGQlkwRXNSVUZGYmtJc1NVRkJTVk1zUlVGQldVb3NTMEZCUzBzc1dVRkJXVVFzVlVGRGFrTXNTVUZCU3l4SlFVRkpSU3hMUVVGWlJpeEZRVU51UWl4SFFVRkxRU3hGUVVGVlJ5eGxRVUZsUkN4SFFVRTVRaXhEUVVjMlFpeGxRVUY2UWxRc1VVRkJVVU1zU1VGQlNVTXNhVUpCUTFCRExFdEJRVXROTEVkQlJXUXNTVUZCU1VVc1JVRkJXVW9zUlVGQlZVVXNSMEZEZEVKRkxFVkJRMFpTTEV0QlFVdE5MRWRCUVZsRkxFVkJRVlZpTEVkQlJWWXNWMEZCWWxjc1JVRkRSazRzUzBGQlMzQkNMRTlCUVZOblFpeEZRVVZrU1N4TFFVRkxUU3hIUVVGWldDeEZRVUZaVnl4SFFVdHVReXhKUVVGSmFFSXNSVUZCYlVRc1RVRkJhRU5MTEVWQlFWbE1MR2xDUVVFeVFrc3NSVUZCV1V3c2EwSkJRU3RETEVsQlFUVkNTeXhGUVVGWll5eFpRVTk2Unl4UFFVeEZWQ3hMUVVGTFZTeHRRa0ZFU0hCQ0xFVkJRM2RDYkVJc1kwRkJZM1ZETEdkQ1FVVmtka01zWTBGQlkzZERMR2xDUVVVeFExb3NTMEZCUzJFc2NVSkJRWFZDZWtNc1kwRkJZM2RETEdsQ1FVTnVRMW9zUzBGblNsUXNVMEZCVTJNc2JVTkJRVzFEVWl4RlFVRlZVeXhIUVVOd1JDeEpRVUZKUXl4RlFVRXJRaXh0UWtGQldFUXNSVUZEZUVJc1RVRkJUeXhEUVVOTVJTeGpRVUZqTEVWQlEyUkRMRWxCU1VZc1UwRkJVMEVzU1VGQlNVTXNSMEZIV0N4UFFVUkJReXhMUVVSaFNpeEZRVUZoTEhGQ1FVRjFRaXgxUWtGRGNFTXNLMEpCUTA1SExFZEJUbEJGTEVsQlUwWXNVMEZCVTBFc1RVRkpVQ3hQUVVSQlJDeExRVVpoU2l4RlFVRmhMSFZDUVVGNVFpeDVRa0ZEZEVOQkxFVkJRV0VzTWtKQlFUWkNMSFZDUVVWb1JFUXNTVUZIVkN4VFFVRlRTeXhMUVVGTFJTeEZRVUZSUXl4SFFVVkxMR1ZCUVhwQ01VSXNVVUZCVVVNc1NVRkJTVU1zVlVGQk5FSXhRaXhUUVVScVFpeEZRVU15UXl4dlVrRkJiMU5wUkN4RlFVRlJhRUlzUlVGQlZXbENMRWxCY0VzMVdIUkVMRkZCUVZGMVFpeGxRVUZsWjBNc1ZVRkJWeXhEUVVOb1EzWkNMR1ZCUVdkQ0xGZEJRMlJFTEV0QlFVdFdMR3RDUVVGdFFpeEZRVU40UWl4SlFVRkpTQ3hGUVVGUllTeExRVUZMVEN4WlFVTmFVaXhKUVVsRVFTeEZRVUZOWXl4bFFVTlNaQ3hGUVVGTll5eHBRa0ZGWjBNc2EwSkJRWFJDWkN4RlFVRk5jMElzWTBGRGRFSjBRaXhGUVVGTmMwSXNZVUZCWXl4SFFVVjBRbFFzUzBGQlMxVXNiVUpCUVhGQ2RFTXNZMEZCWTNWRExHdENRVWN4UTFRc1owSkJRV2xDTEZkQlEyWXNTVUZCU1dZc1JVRkJVV0VzUzBGQlMwd3NXVUZEV2xJc1NVRkpSRUVzUlVGQlRXVXNaMEpCUTFKbUxFVkJRVTFsTEd0Q1FVVnBReXhyUWtGQmRrSm1MRVZCUVUxelF5eGxRVTEwUW5SRExFVkJRVTF6UXl4alFVRmxMRWRCUjNaQ2VrSXNTMEZCUzJFc2NVSkJRWFZDZWtNc1kwRkJZM1ZETEd0Q1FWRTFRMlVzVVVGQlV5eFhRVU5RTVVJc1MwRkJTekpDTEdGQlFXVjJSQ3hqUVVGamRVTXNhVUpCVVhCRFowSXNZVUZCWTNaRUxHTkJRV04zUXl4cFFrRkxOVUpuUWl4WFFVRlpMRmRCUTFZc1NVRkJTWGhDTEVWQlFWbEtMRXRCUVV0TExGbEJRVmxFTEZWQlEycERMRWxCUVVzc1NVRkJTVVVzUzBGQldVWXNSVUZEVlN4bFFVRjZRbEFzVVVGQlVVTXNTVUZCU1VNc1UwRkRaRGhDTEU5QlFVOURMR1ZCUVdVNVFpeExRVUZOVFN4RlFVRlZVU3h0UTBGQmJVTlNMRVZCUVZWR0xFVkJRVlZGTEV0QlJUZEdUaXhMUVVGTFRTeEhRVUZaTEV0QlIzSkNMRWxCUVVzc1NVRkJTWGxDTEVWQlFVa3NSVUZCUjBFc1JVRkJTWFJFTERKQ1FVRXlRblZFTEU5QlFWRkVMRWxCUTNKRUwwSXNTMEZCUzNaQ0xESkNRVUV5UW5ORUxFbEJRVTBzUzBGRldDeGxRVUY2UW14RExGRkJRVkZETEVsQlFVbERMRmRCUTJRNFFpeFBRVUZQUXl4bFFVRmxPVUlzUzBGQlRTeGpRVUZsWXl4dFEwRkJiVU1zWTBGQlpTeFBRVU0zUm1Vc1QwRkJUME1zWlVGQlpUbENMRXRCUVUwc2FVSkJRV3RDWXl4dFEwRkJiVU1zYVVKQlFXdENNVU1zWjBKQlEyNUhlVVFzVDBGQlQwTXNaVUZCWlRsQ0xFdEJRVTBzYTBKQlFXMUNZeXh0UTBGQmJVTXNhMEpCUVcxQ01VTXNiMEpCU3pOSGIwSXNaVUZCWlZrc1ZVRkJXVEZDTEdWQlVUTkNZeXhsUVVGbGVVTXNZVUZCWlN4VFFVRlZReXhGUVVGUE9VSXNSMEZETjBNc1NVRkZTU3RDTEVWQlFVa3NZVUZEVWtFc1JVRkJSVmdzVlVGSVZYaENMRXRCUjFGM1FpeFZRVU53UWl4SlFVRkpRU3hGUVVGWkxFbEJRVWxYTEVWQlJYQkNiRVVzVVVGQlVYVkVMRVZCUVZkVkxFVkJRVTFXTEZkQlEzcENWU3hGUVVGTlZpeFZRVUZaUVN4RlFVTnNRbFVzUlVGQlRWWXNWVUZCVlc1Q0xGbEJRV00yUWl4RlFVVTVRa0VzUlVGQlRUbENMRlZCUVZsdVF5eFJRVUZSTEVkQlZtUXJRaXhMUVZWM1Fra3NWVUZCVjBFc1IwRkRMME00UWl4RlFVRk5SQ3hoUVZoTmFrTXNTMEZYWldsRExHRkJSVE5DT1VRc1dVRkJXV2xGTEdGQlFXRkdMRVZCUVU4dlJDeFpRVUZaYTBVc2NVSkJUMnBDTEdWQlFYcENlRU1zVVVGQlVVTXNTVUZCU1VNc1ZVRkRWbmhDTEcxQ1FVVkdhVUlzWlVGQmFVSXNTVUZCU1doQ0xFMUJRVTFuUWl4bFFVRm5RaXhEUVVONlF6aERMRlZCUVZjc1UwRkJWVEZFTEVWQlFWRXlSQ3hIUVVNelFpeFBRVUZQZGtNc1MwRkJTM2RETEUxQlFVMDFSQ3hGUVVGUmFVUXNUMEZCVDFrc1QwRkJUemRFTEVWQlFVODBReXhYUVVGWlpTeEpRVVUzUkVNc1RVRkJUeXhUUVVGVmJrTXNSVUZCWVhGRExFVkJRVTFJTEVkQlEyeERMRTlCUVU4c1NVRkJTUzlFTEUxQlFVMDJRaXhGUVVGWmJVTXNUVUZCVFVVc1JVRkJUVWdzUjBGQlR5eERRVU01UTNKQ0xFbEJRVXNzVTBGQlZYUkRMRVZCUVZFclJDeEZRVUZOUXl4SFFVMHpRaXhOUVV4aExHbENRVUZVUkN4SFFVRTBRaTlFTEVWQlFVOTVRaXhaUVVGWlJDeFZRVUZWUnl4bFFVRmxiME1zUzBGQmRVUXNTVUZCT1VOc1JTd3lRa0ZCTWtKdlJTeFJRVUZSUml4TFFVTTNSaXhsUVVGNlFqbERMRkZCUVZGRExFbEJRVWxETEZWQlFUUkNNVUlzVVVGQlVVTXNORUpCUVRoQ1RTeEZRVUZQSzBNc1pVRkJaMElzTUU5QlEzSkhja1FzTkVKQlFUWkNMRWRCUlM5Q1RTeEZRVUZQSzBRc1IwRkJVVU1zUjBGRFVpeFRRVk51UW5wRkxGbEJRVmxwUlN4aFFVRmhOVU1zWlVGQlowSnlRaXhaUVVGWmEwVXNiMEpCUlhKRVV5eFBRVUZQUXl4UlFVRlZka1FpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdFpHOXRMMnhwWWk5VGVXNTBhR1YwYVdORmRtVnVkQzVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBTeW50aGV0aWNVSUV2ZW50PXJlcXVpcmUoXCIuL1N5bnRoZXRpY1VJRXZlbnRcIiksRm9jdXNFdmVudEludGVyZmFjZT17cmVsYXRlZFRhcmdldDpudWxsfTtmdW5jdGlvbiBTeW50aGV0aWNGb2N1c0V2ZW50KHQsZSxuLGMpe3JldHVybiBTeW50aGV0aWNVSUV2ZW50LmNhbGwodGhpcyx0LGUsbixjKX1TeW50aGV0aWNVSUV2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNGb2N1c0V2ZW50LEZvY3VzRXZlbnRJbnRlcmZhY2UpLG1vZHVsZS5leHBvcnRzPVN5bnRoZXRpY0ZvY3VzRXZlbnQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbE41Ym5Sb1pYUnBZMFp2WTNWelJYWmxiblF1YW5NaVhTd2libUZ0WlhNaU9sc2lVM2x1ZEdobGRHbGpWVWxGZG1WdWRDSXNJbkpsY1hWcGNtVWlMQ0pHYjJOMWMwVjJaVzUwU1c1MFpYSm1ZV05sSWl3aWNtVnNZWFJsWkZSaGNtZGxkQ0lzSWxONWJuUm9aWFJwWTBadlkzVnpSWFpsYm5RaUxDSmthWE53WVhSamFFTnZibVpwWnlJc0ltUnBjM0JoZEdOb1RXRnlhMlZ5SWl3aWJtRjBhWFpsUlhabGJuUWlMQ0p1WVhScGRtVkZkbVZ1ZEZSaGNtZGxkQ0lzSW1OaGJHd2lMQ0owYUdseklpd2lZWFZuYldWdWRFTnNZWE56SWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCVVVFc1lVRkZRU3hKUVVGSlFTeHBRa0ZCYlVKRExGRkJRVkVzYzBKQlRUTkNReXh2UWtGQmMwSXNRMEZEZUVKRExHTkJRV1VzVFVGVGFrSXNVMEZCVTBNc2IwSkJRVzlDUXl4RlFVRm5Ra01zUlVGQlowSkRMRVZCUVdGRExFZEJRM2hGTEU5QlFVOVNMR2xDUVVGcFFsTXNTMEZCUzBNc1MwRkJUVXdzUlVGQlowSkRMRVZCUVdkQ1F5eEZRVUZoUXl4SFFVZHNSbElzYVVKQlFXbENWeXhoUVVGaFVDeHZRa0ZCY1VKR0xIRkNRVVZ1UkZVc1QwRkJUME1zVVVGQlZWUWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F0Wkc5dEwyeHBZaTlUZVc1MGFHVjBhV05HYjJOMWMwVjJaVzUwTG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgU3ludGhldGljRXZlbnQ9cmVxdWlyZShcIi4vU3ludGhldGljRXZlbnRcIiksSW5wdXRFdmVudEludGVyZmFjZT17ZGF0YTpudWxsfTtmdW5jdGlvbiBTeW50aGV0aWNJbnB1dEV2ZW50KHQsbixlLGMpe3JldHVybiBTeW50aGV0aWNFdmVudC5jYWxsKHRoaXMsdCxuLGUsYyl9U3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY0lucHV0RXZlbnQsSW5wdXRFdmVudEludGVyZmFjZSksbW9kdWxlLmV4cG9ydHM9U3ludGhldGljSW5wdXRFdmVudDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsTjViblJvWlhScFkwbHVjSFYwUlhabGJuUXVhbk1pWFN3aWJtRnRaWE1pT2xzaVUzbHVkR2hsZEdsalJYWmxiblFpTENKeVpYRjFhWEpsSWl3aVNXNXdkWFJGZG1WdWRFbHVkR1Z5Wm1GalpTSXNJbVJoZEdFaUxDSlRlVzUwYUdWMGFXTkpibkIxZEVWMlpXNTBJaXdpWkdsemNHRjBZMmhEYjI1bWFXY2lMQ0prYVhOd1lYUmphRTFoY210bGNpSXNJbTVoZEdsMlpVVjJaVzUwSWl3aWJtRjBhWFpsUlhabGJuUlVZWEpuWlhRaUxDSmpZV3hzSWl3aWRHaHBjeUlzSW1GMVoyMWxiblJEYkdGemN5SXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlYU3dpYldGd2NHbHVaM01pT2lKQlFWRkJMR0ZCUlVFc1NVRkJTVUVzWlVGQmFVSkRMRkZCUVZFc2IwSkJUM3BDUXl4dlFrRkJjMElzUTBGRGVFSkRMRXRCUVUwc1RVRlRVaXhUUVVGVFF5eHZRa0ZCYjBKRExFVkJRV2RDUXl4RlFVRm5Ra01zUlVGQllVTXNSMEZEZUVVc1QwRkJUMUlzWlVGQlpWTXNTMEZCUzBNc1MwRkJUVXdzUlVGQlowSkRMRVZCUVdkQ1F5eEZRVUZoUXl4SFFVZG9SbElzWlVGQlpWY3NZVUZCWVZBc2IwSkJRWEZDUml4eFFrRkZha1JWTEU5QlFVOURMRkZCUVZWVUlpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDNKbFlXTjBMV1J2YlM5c2FXSXZVM2x1ZEdobGRHbGpTVzV3ZFhSRmRtVnVkQzVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBTeW50aGV0aWNVSUV2ZW50PXJlcXVpcmUoXCIuL1N5bnRoZXRpY1VJRXZlbnRcIiksZ2V0RXZlbnRDaGFyQ29kZT1yZXF1aXJlKFwiLi9nZXRFdmVudENoYXJDb2RlXCIpLGdldEV2ZW50S2V5PXJlcXVpcmUoXCIuL2dldEV2ZW50S2V5XCIpLGdldEV2ZW50TW9kaWZpZXJTdGF0ZT1yZXF1aXJlKFwiLi9nZXRFdmVudE1vZGlmaWVyU3RhdGVcIiksS2V5Ym9hcmRFdmVudEludGVyZmFjZT17a2V5OmdldEV2ZW50S2V5LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6Z2V0RXZlbnRNb2RpZmllclN0YXRlLGNoYXJDb2RlOmZ1bmN0aW9uKGUpe3JldHVyblwia2V5cHJlc3NcIj09PWUudHlwZT9nZXRFdmVudENoYXJDb2RlKGUpOjB9LGtleUNvZGU6ZnVuY3Rpb24oZSl7cmV0dXJuXCJrZXlkb3duXCI9PT1lLnR5cGV8fFwia2V5dXBcIj09PWUudHlwZT9lLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oZSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09ZS50eXBlP2dldEV2ZW50Q2hhckNvZGUoZSk6XCJrZXlkb3duXCI9PT1lLnR5cGV8fFwia2V5dXBcIj09PWUudHlwZT9lLmtleUNvZGU6MH19O2Z1bmN0aW9uIFN5bnRoZXRpY0tleWJvYXJkRXZlbnQoZSx0LG4scil7cmV0dXJuIFN5bnRoZXRpY1VJRXZlbnQuY2FsbCh0aGlzLGUsdCxuLHIpfVN5bnRoZXRpY1VJRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY0tleWJvYXJkRXZlbnQsS2V5Ym9hcmRFdmVudEludGVyZmFjZSksbW9kdWxlLmV4cG9ydHM9U3ludGhldGljS2V5Ym9hcmRFdmVudDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsTjViblJvWlhScFkwdGxlV0p2WVhKa1JYWmxiblF1YW5NaVhTd2libUZ0WlhNaU9sc2lVM2x1ZEdobGRHbGpWVWxGZG1WdWRDSXNJbkpsY1hWcGNtVWlMQ0puWlhSRmRtVnVkRU5vWVhKRGIyUmxJaXdpWjJWMFJYWmxiblJMWlhraUxDSm5aWFJGZG1WdWRFMXZaR2xtYVdWeVUzUmhkR1VpTENKTFpYbGliMkZ5WkVWMlpXNTBTVzUwWlhKbVlXTmxJaXdpYTJWNUlpd2liRzlqWVhScGIyNGlMQ0pqZEhKc1MyVjVJaXdpYzJocFpuUkxaWGtpTENKaGJIUkxaWGtpTENKdFpYUmhTMlY1SWl3aWNtVndaV0YwSWl3aWJHOWpZV3hsSWl3aVoyVjBUVzlrYVdacFpYSlRkR0YwWlNJc0ltTm9ZWEpEYjJSbElpd2laWFpsYm5RaUxDSjBlWEJsSWl3aWEyVjVRMjlrWlNJc0luZG9hV05vSWl3aVUzbHVkR2hsZEdsalMyVjVZbTloY21SRmRtVnVkQ0lzSW1ScGMzQmhkR05vUTI5dVptbG5JaXdpWkdsemNHRjBZMmhOWVhKclpYSWlMQ0p1WVhScGRtVkZkbVZ1ZENJc0ltNWhkR2wyWlVWMlpXNTBWR0Z5WjJWMElpd2lZMkZzYkNJc0luUm9hWE1pTENKaGRXZHRaVzUwUTJ4aGMzTWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRlJRU3hoUVVWQkxFbEJRVWxCTEdsQ1FVRnRRa01zVVVGQlVTeHpRa0ZGTTBKRExHbENRVUZ0UWtRc1VVRkJVU3h6UWtGRE0wSkZMRmxCUVdOR0xGRkJRVkVzYVVKQlEzUkNSeXh6UWtGQmQwSklMRkZCUVZFc01rSkJUV2hEU1N4MVFrRkJlVUlzUTBGRE0wSkRMRWxCUVV0SUxGbEJRMHhKTEZOQlFWVXNTMEZEVmtNc1VVRkJVeXhMUVVOVVF5eFRRVUZWTEV0QlExWkRMRTlCUVZFc1MwRkRVa01zVVVGQlV5eExRVU5VUXl4UFFVRlJMRXRCUTFKRExFOUJRVkVzUzBGRFVrTXNhVUpCUVd0Q1ZpeHpRa0ZGYkVKWExGTkJRVlVzVTBGQlZVTXNSMEZOYkVJc1RVRkJiVUlzWVVGQlprRXNSVUZCVFVNc1MwRkRSR1lzYVVKQlFXbENZeXhIUVVWdVFpeEhRVVZVUlN4UlFVRlRMRk5CUVZWR0xFZEJVV3BDTEUxQlFXMUNMRmxCUVdaQkxFVkJRVTFETEUxQlFYRkRMRlZCUVdaRUxFVkJRVTFETEV0QlF6ZENSQ3hGUVVGTlJTeFJRVVZTTEVkQlJWUkRMRTFCUVU4c1UwRkJWVWdzUjBGSFppeE5RVUZ0UWl4aFFVRm1RU3hGUVVGTlF5eExRVU5FWml4cFFrRkJhVUpqTEVkQlJWQXNXVUZCWmtFc1JVRkJUVU1zVFVGQmNVTXNWVUZCWmtRc1JVRkJUVU1zUzBGRE4wSkVMRVZCUVUxRkxGRkJSVklzU1VGVldDeFRRVUZUUlN4MVFrRkJkVUpETEVWQlFXZENReXhGUVVGblFrTXNSVUZCWVVNc1IwRkRNMFVzVDBGQlQzaENMR2xDUVVGcFFubENMRXRCUVV0RExFdEJRVTFNTEVWQlFXZENReXhGUVVGblFrTXNSVUZCWVVNc1IwRkhiRVo0UWl4cFFrRkJhVUl5UWl4aFFVRmhVQ3gxUWtGQmQwSm1MSGRDUVVWMFJIVkNMRTlCUVU5RExGRkJRVlZVSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdOMExXUnZiUzlzYVdJdlUzbHVkR2hsZEdsalMyVjVZbTloY21SRmRtVnVkQzVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBTeW50aGV0aWNVSUV2ZW50PXJlcXVpcmUoXCIuL1N5bnRoZXRpY1VJRXZlbnRcIiksVmlld3BvcnRNZXRyaWNzPXJlcXVpcmUoXCIuL1ZpZXdwb3J0TWV0cmljc1wiKSxnZXRFdmVudE1vZGlmaWVyU3RhdGU9cmVxdWlyZShcIi4vZ2V0RXZlbnRNb2RpZmllclN0YXRlXCIpLE1vdXNlRXZlbnRJbnRlcmZhY2U9e3NjcmVlblg6bnVsbCxzY3JlZW5ZOm51bGwsY2xpZW50WDpudWxsLGNsaWVudFk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpnZXRFdmVudE1vZGlmaWVyU3RhdGUsYnV0dG9uOmZ1bmN0aW9uKGUpe3ZhciB0PWUuYnV0dG9uO3JldHVyblwid2hpY2hcImluIGU/dDoyPT09dD8yOjQ9PT10PzE6MH0sYnV0dG9uczpudWxsLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVsYXRlZFRhcmdldHx8KGUuZnJvbUVsZW1lbnQ9PT1lLnNyY0VsZW1lbnQ/ZS50b0VsZW1lbnQ6ZS5mcm9tRWxlbWVudCl9LHBhZ2VYOmZ1bmN0aW9uKGUpe3JldHVyblwicGFnZVhcImluIGU/ZS5wYWdlWDplLmNsaWVudFgrVmlld3BvcnRNZXRyaWNzLmN1cnJlbnRTY3JvbGxMZWZ0fSxwYWdlWTpmdW5jdGlvbihlKXtyZXR1cm5cInBhZ2VZXCJpbiBlP2UucGFnZVk6ZS5jbGllbnRZK1ZpZXdwb3J0TWV0cmljcy5jdXJyZW50U2Nyb2xsVG9wfX07ZnVuY3Rpb24gU3ludGhldGljTW91c2VFdmVudChlLHQsbixyKXtyZXR1cm4gU3ludGhldGljVUlFdmVudC5jYWxsKHRoaXMsZSx0LG4scil9U3ludGhldGljVUlFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljTW91c2VFdmVudCxNb3VzZUV2ZW50SW50ZXJmYWNlKSxtb2R1bGUuZXhwb3J0cz1TeW50aGV0aWNNb3VzZUV2ZW50O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxONWJuUm9aWFJwWTAxdmRYTmxSWFpsYm5RdWFuTWlYU3dpYm1GdFpYTWlPbHNpVTNsdWRHaGxkR2xqVlVsRmRtVnVkQ0lzSW5KbGNYVnBjbVVpTENKV2FXVjNjRzl5ZEUxbGRISnBZM01pTENKblpYUkZkbVZ1ZEUxdlpHbG1hV1Z5VTNSaGRHVWlMQ0pOYjNWelpVVjJaVzUwU1c1MFpYSm1ZV05sSWl3aWMyTnlaV1Z1V0NJc0luTmpjbVZsYmxraUxDSmpiR2xsYm5SWUlpd2lZMnhwWlc1MFdTSXNJbU4wY214TFpYa2lMQ0p6YUdsbWRFdGxlU0lzSW1Gc2RFdGxlU0lzSW0xbGRHRkxaWGtpTENKblpYUk5iMlJwWm1sbGNsTjBZWFJsSWl3aVluVjBkRzl1SWl3aVpYWmxiblFpTENKaWRYUjBiMjV6SWl3aWNtVnNZWFJsWkZSaGNtZGxkQ0lzSW1aeWIyMUZiR1Z0Wlc1MElpd2ljM0pqUld4bGJXVnVkQ0lzSW5SdlJXeGxiV1Z1ZENJc0luQmhaMlZZSWl3aVkzVnljbVZ1ZEZOamNtOXNiRXhsWm5RaUxDSndZV2RsV1NJc0ltTjFjbkpsYm5SVFkzSnZiR3hVYjNBaUxDSlRlVzUwYUdWMGFXTk5iM1Z6WlVWMlpXNTBJaXdpWkdsemNHRjBZMmhEYjI1bWFXY2lMQ0prYVhOd1lYUmphRTFoY210bGNpSXNJbTVoZEdsMlpVVjJaVzUwSWl3aWJtRjBhWFpsUlhabGJuUlVZWEpuWlhRaUxDSmpZV3hzSWl3aWRHaHBjeUlzSW1GMVoyMWxiblJEYkdGemN5SXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlYU3dpYldGd2NHbHVaM01pT2lKQlFWRkJMR0ZCUlVFc1NVRkJTVUVzYVVKQlFXMUNReXhSUVVGUkxITkNRVU16UWtNc1owSkJRV3RDUkN4UlFVRlJMSEZDUVVVeFFrVXNjMEpCUVhkQ1JpeFJRVUZSTERKQ1FVMW9RMGNzYjBKQlFYTkNMRU5CUTNoQ1F5eFJRVUZUTEV0QlExUkRMRkZCUVZNc1MwRkRWRU1zVVVGQlV5eExRVU5VUXl4UlFVRlRMRXRCUTFSRExGRkJRVk1zUzBGRFZFTXNVMEZCVlN4TFFVTldReXhQUVVGUkxFdEJRMUpETEZGQlFWTXNTMEZEVkVNc2FVSkJRV3RDVml4elFrRkRiRUpYTEU5QlFWRXNVMEZCVlVNc1IwRkphRUlzU1VGQlNVUXNSVUZCVTBNc1JVRkJUVVFzVDBGRGJrSXNUVUZCU1N4VlFVRlhReXhGUVVOT1JDeEZRVTFUTEVsQlFWaEJMRVZCUVdVc1JVRkJaU3hKUVVGWVFTeEZRVUZsTEVWQlFVa3NSMEZGTDBORkxGRkJRVk1zUzBGRFZFTXNZMEZCWlN4VFFVRlZSaXhIUVVOMlFpeFBRVUZQUVN4RlFVRk5SU3huUWtGQmEwSkdMRVZCUVUxSExHTkJRV2RDU0N4RlFVRk5TU3hYUVVGaFNpeEZRVUZOU3l4VlFVRlpUQ3hGUVVGTlJ5eGpRVWRzUjBjc1RVRkJUeXhUUVVGVlRpeEhRVU5tTEUxQlFVOHNWVUZCVjBFc1JVRkJVVUVzUlVGQlRVMHNUVUZCVVU0c1JVRkJUVklzVVVGQlZVd3NaMEpCUVdkQ2IwSXNiVUpCUlRGRlF5eE5RVUZQTEZOQlFWVlNMRWRCUTJZc1RVRkJUeXhWUVVGWFFTeEZRVUZSUVN4RlFVRk5VU3hOUVVGUlVpeEZRVUZOVUN4UlFVRlZUaXhuUWtGQlowSnpRaXh0UWtGVk5VVXNVMEZCVTBNc2IwSkJRVzlDUXl4RlFVRm5Ra01zUlVGQlowSkRMRVZCUVdGRExFZEJRM2hGTEU5QlFVODNRaXhwUWtGQmFVSTRRaXhMUVVGTFF5eExRVUZOVEN4RlFVRm5Ra01zUlVGQlowSkRMRVZCUVdGRExFZEJSMnhHTjBJc2FVSkJRV2xDWjBNc1lVRkJZVkFzYjBKQlFYRkNja0lzY1VKQlJXNUVOa0lzVDBGQlQwTXNVVUZCVlZRaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Y21WaFkzUXRaRzl0TDJ4cFlpOVRlVzUwYUdWMGFXTk5iM1Z6WlVWMlpXNTBMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBTeW50aGV0aWNVSUV2ZW50PXJlcXVpcmUoXCIuL1N5bnRoZXRpY1VJRXZlbnRcIiksZ2V0RXZlbnRNb2RpZmllclN0YXRlPXJlcXVpcmUoXCIuL2dldEV2ZW50TW9kaWZpZXJTdGF0ZVwiKSxUb3VjaEV2ZW50SW50ZXJmYWNlPXt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6Z2V0RXZlbnRNb2RpZmllclN0YXRlfTtmdW5jdGlvbiBTeW50aGV0aWNUb3VjaEV2ZW50KGUsdCxuLGMpe3JldHVybiBTeW50aGV0aWNVSUV2ZW50LmNhbGwodGhpcyxlLHQsbixjKX1TeW50aGV0aWNVSUV2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNUb3VjaEV2ZW50LFRvdWNoRXZlbnRJbnRlcmZhY2UpLG1vZHVsZS5leHBvcnRzPVN5bnRoZXRpY1RvdWNoRXZlbnQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbE41Ym5Sb1pYUnBZMVJ2ZFdOb1JYWmxiblF1YW5NaVhTd2libUZ0WlhNaU9sc2lVM2x1ZEdobGRHbGpWVWxGZG1WdWRDSXNJbkpsY1hWcGNtVWlMQ0puWlhSRmRtVnVkRTF2WkdsbWFXVnlVM1JoZEdVaUxDSlViM1ZqYUVWMlpXNTBTVzUwWlhKbVlXTmxJaXdpZEc5MVkyaGxjeUlzSW5SaGNtZGxkRlJ2ZFdOb1pYTWlMQ0pqYUdGdVoyVmtWRzkxWTJobGN5SXNJbUZzZEV0bGVTSXNJbTFsZEdGTFpYa2lMQ0pqZEhKc1MyVjVJaXdpYzJocFpuUkxaWGtpTENKblpYUk5iMlJwWm1sbGNsTjBZWFJsSWl3aVUzbHVkR2hsZEdsalZHOTFZMmhGZG1WdWRDSXNJbVJwYzNCaGRHTm9RMjl1Wm1sbklpd2laR2x6Y0dGMFkyaE5ZWEpyWlhJaUxDSnVZWFJwZG1WRmRtVnVkQ0lzSW01aGRHbDJaVVYyWlc1MFZHRnlaMlYwSWl3aVkyRnNiQ0lzSW5Sb2FYTWlMQ0poZFdkdFpXNTBRMnhoYzNNaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25SeklsMHNJbTFoY0hCcGJtZHpJam9pUVVGUlFTeGhRVVZCTEVsQlFVbEJMR2xDUVVGdFFrTXNVVUZCVVN4elFrRkZNMEpETEhOQ1FVRjNRa1FzVVVGQlVTd3lRa0ZOYUVORkxHOUNRVUZ6UWl4RFFVTjRRa01zVVVGQlV5eExRVU5VUXl4alFVRmxMRXRCUTJaRExHVkJRV2RDTEV0QlEyaENReXhQUVVGUkxFdEJRMUpETEZGQlFWTXNTMEZEVkVNc1VVRkJVeXhMUVVOVVF5eFRRVUZWTEV0QlExWkRMR2xDUVVGclFsUXNkVUpCVTNCQ0xGTkJRVk5WTEc5Q1FVRnZRa01zUlVGQlowSkRMRVZCUVdkQ1F5eEZRVUZoUXl4SFFVTjRSU3hQUVVGUGFFSXNhVUpCUVdsQ2FVSXNTMEZCUzBNc1MwRkJUVXdzUlVGQlowSkRMRVZCUVdkQ1F5eEZRVUZoUXl4SFFVZHNSbWhDTEdsQ1FVRnBRbTFDTEdGQlFXRlFMRzlDUVVGeFFsUXNjVUpCUlc1RWFVSXNUMEZCVDBNc1VVRkJWVlFpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdFpHOXRMMnhwWWk5VGVXNTBhR1YwYVdOVWIzVmphRVYyWlc1MExtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIFN5bnRoZXRpY0V2ZW50PXJlcXVpcmUoXCIuL1N5bnRoZXRpY0V2ZW50XCIpLFRyYW5zaXRpb25FdmVudEludGVyZmFjZT17cHJvcGVydHlOYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9O2Z1bmN0aW9uIFN5bnRoZXRpY1RyYW5zaXRpb25FdmVudCh0LG4sZSxpKXtyZXR1cm4gU3ludGhldGljRXZlbnQuY2FsbCh0aGlzLHQsbixlLGkpfVN5bnRoZXRpY0V2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQsVHJhbnNpdGlvbkV2ZW50SW50ZXJmYWNlKSxtb2R1bGUuZXhwb3J0cz1TeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbE41Ym5Sb1pYUnBZMVJ5WVc1emFYUnBiMjVGZG1WdWRDNXFjeUpkTENKdVlXMWxjeUk2V3lKVGVXNTBhR1YwYVdORmRtVnVkQ0lzSW5KbGNYVnBjbVVpTENKVWNtRnVjMmwwYVc5dVJYWmxiblJKYm5SbGNtWmhZMlVpTENKd2NtOXdaWEowZVU1aGJXVWlMQ0psYkdGd2MyVmtWR2x0WlNJc0luQnpaWFZrYjBWc1pXMWxiblFpTENKVGVXNTBhR1YwYVdOVWNtRnVjMmwwYVc5dVJYWmxiblFpTENKa2FYTndZWFJqYUVOdmJtWnBaeUlzSW1ScGMzQmhkR05vVFdGeWEyVnlJaXdpYm1GMGFYWmxSWFpsYm5RaUxDSnVZWFJwZG1WRmRtVnVkRlJoY21kbGRDSXNJbU5oYkd3aUxDSjBhR2x6SWl3aVlYVm5iV1Z1ZEVOc1lYTnpJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJVVUVzWVVGRlFTeEpRVUZKUVN4bFFVRnBRa01zVVVGQlVTeHZRa0ZQZWtKRExIbENRVUV5UWl4RFFVTTNRa01zWVVGQll5eExRVU5rUXl4WlFVRmhMRXRCUTJKRExHTkJRV1VzVFVGVGFrSXNVMEZCVTBNc2VVSkJRWGxDUXl4RlFVRm5Ra01zUlVGQlowSkRMRVZCUVdGRExFZEJRemRGTEU5QlFVOVdMR1ZCUVdWWExFdEJRVXRETEV0QlFVMU1MRVZCUVdkQ1F5eEZRVUZuUWtNc1JVRkJZVU1zUjBGSGFFWldMR1ZCUVdWaExHRkJRV0ZRTEhsQ1FVRXdRa29zTUVKQlJYUkVXU3hQUVVGUFF5eFJRVUZWVkNJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDMWtiMjB2YkdsaUwxTjViblJvWlhScFkxUnlZVzV6YVhScGIyNUZkbVZ1ZEM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgU3ludGhldGljRXZlbnQ9cmVxdWlyZShcIi4vU3ludGhldGljRXZlbnRcIiksZ2V0RXZlbnRUYXJnZXQ9cmVxdWlyZShcIi4vZ2V0RXZlbnRUYXJnZXRcIiksVUlFdmVudEludGVyZmFjZT17dmlldzpmdW5jdGlvbihlKXtpZihlLnZpZXcpcmV0dXJuIGUudmlldzt2YXIgdD1nZXRFdmVudFRhcmdldChlKTtpZih0LndpbmRvdz09PXQpcmV0dXJuIHQ7dmFyIG49dC5vd25lckRvY3VtZW50O3JldHVybiBuP24uZGVmYXVsdFZpZXd8fG4ucGFyZW50V2luZG93OndpbmRvd30sZGV0YWlsOmZ1bmN0aW9uKGUpe3JldHVybiBlLmRldGFpbHx8MH19O2Z1bmN0aW9uIFN5bnRoZXRpY1VJRXZlbnQoZSx0LG4scil7cmV0dXJuIFN5bnRoZXRpY0V2ZW50LmNhbGwodGhpcyxlLHQsbixyKX1TeW50aGV0aWNFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljVUlFdmVudCxVSUV2ZW50SW50ZXJmYWNlKSxtb2R1bGUuZXhwb3J0cz1TeW50aGV0aWNVSUV2ZW50O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxONWJuUm9aWFJwWTFWSlJYWmxiblF1YW5NaVhTd2libUZ0WlhNaU9sc2lVM2x1ZEdobGRHbGpSWFpsYm5RaUxDSnlaWEYxYVhKbElpd2laMlYwUlhabGJuUlVZWEpuWlhRaUxDSlZTVVYyWlc1MFNXNTBaWEptWVdObElpd2lkbWxsZHlJc0ltVjJaVzUwSWl3aWRHRnlaMlYwSWl3aWQybHVaRzkzSWl3aVpHOWpJaXdpYjNkdVpYSkViMk4xYldWdWRDSXNJbVJsWm1GMWJIUldhV1YzSWl3aWNHRnlaVzUwVjJsdVpHOTNJaXdpWkdWMFlXbHNJaXdpVTNsdWRHaGxkR2xqVlVsRmRtVnVkQ0lzSW1ScGMzQmhkR05vUTI5dVptbG5JaXdpWkdsemNHRjBZMmhOWVhKclpYSWlMQ0p1WVhScGRtVkZkbVZ1ZENJc0ltNWhkR2wyWlVWMlpXNTBWR0Z5WjJWMElpd2lZMkZzYkNJc0luUm9hWE1pTENKaGRXZHRaVzUwUTJ4aGMzTWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRlJRU3hoUVVWQkxFbEJRVWxCTEdWQlFXbENReXhSUVVGUkxHOUNRVVY2UWtNc1pVRkJhVUpFTEZGQlFWRXNiMEpCVFhwQ1JTeHBRa0ZCYlVJc1EwRkRja0pETEV0QlFVMHNVMEZCVlVNc1IwRkRaQ3hIUVVGSlFTeEZRVUZOUkN4TFFVTlNMRTlCUVU5RExFVkJRVTFFTEV0QlIyWXNTVUZCU1VVc1JVRkJVMG9zWlVGQlpVY3NSMEZETlVJc1IwRkJTVU1zUlVGQlQwTXNVMEZCVjBRc1JVRkZjRUlzVDBGQlQwRXNSVUZIVkN4SlFVRkpSU3hGUVVGTlJpeEZRVUZQUnl4alFVVnFRaXhQUVVGSlJDeEZRVU5MUVN4RlFVRkpSU3hoUVVGbFJpeEZRVUZKUnl4aFFVVjJRa29zVVVGSFdFc3NUMEZCVVN4VFFVRlZVQ3hIUVVOb1FpeFBRVUZQUVN4RlFVRk5UeXhSUVVGVkxFbEJWVE5DTEZOQlFWTkRMR2xDUVVGcFFrTXNSVUZCWjBKRExFVkJRV2RDUXl4RlFVRmhReXhIUVVOeVJTeFBRVUZQYWtJc1pVRkJaV3RDTEV0QlFVdERMRXRCUVUxTUxFVkJRV2RDUXl4RlFVRm5Ra01zUlVGQllVTXNSMEZIYUVacVFpeGxRVUZsYjBJc1lVRkJZVkFzYVVKQlFXdENWaXhyUWtGRk9VTnJRaXhQUVVGUFF5eFJRVUZWVkNJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDMWtiMjB2YkdsaUwxTjViblJvWlhScFkxVkpSWFpsYm5RdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIFN5bnRoZXRpY01vdXNlRXZlbnQ9cmVxdWlyZShcIi4vU3ludGhldGljTW91c2VFdmVudFwiKSxXaGVlbEV2ZW50SW50ZXJmYWNlPXtkZWx0YVg6ZnVuY3Rpb24oZSl7cmV0dXJuXCJkZWx0YVhcImluIGU/ZS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gZT8tZS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oZSl7cmV0dXJuXCJkZWx0YVlcImluIGU/ZS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gZT8tZS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGU/LWUud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH07ZnVuY3Rpb24gU3ludGhldGljV2hlZWxFdmVudChlLHQsbixsKXtyZXR1cm4gU3ludGhldGljTW91c2VFdmVudC5jYWxsKHRoaXMsZSx0LG4sbCl9U3ludGhldGljTW91c2VFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljV2hlZWxFdmVudCxXaGVlbEV2ZW50SW50ZXJmYWNlKSxtb2R1bGUuZXhwb3J0cz1TeW50aGV0aWNXaGVlbEV2ZW50O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxONWJuUm9aWFJwWTFkb1pXVnNSWFpsYm5RdWFuTWlYU3dpYm1GdFpYTWlPbHNpVTNsdWRHaGxkR2xqVFc5MWMyVkZkbVZ1ZENJc0luSmxjWFZwY21VaUxDSlhhR1ZsYkVWMlpXNTBTVzUwWlhKbVlXTmxJaXdpWkdWc2RHRllJaXdpWlhabGJuUWlMQ0ozYUdWbGJFUmxiSFJoV0NJc0ltUmxiSFJoV1NJc0luZG9aV1ZzUkdWc2RHRlpJaXdpZDJobFpXeEVaV3gwWVNJc0ltUmxiSFJoV2lJc0ltUmxiSFJoVFc5a1pTSXNJbE41Ym5Sb1pYUnBZMWRvWldWc1JYWmxiblFpTENKa2FYTndZWFJqYUVOdmJtWnBaeUlzSW1ScGMzQmhkR05vVFdGeWEyVnlJaXdpYm1GMGFYWmxSWFpsYm5RaUxDSnVZWFJwZG1WRmRtVnVkRlJoY21kbGRDSXNJbU5oYkd3aUxDSjBhR2x6SWl3aVlYVm5iV1Z1ZEVOc1lYTnpJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJVVUVzWVVGRlFTeEpRVUZKUVN4dlFrRkJjMEpETEZGQlFWRXNlVUpCVFRsQ1F5eHZRa0ZCYzBJc1EwRkRlRUpETEU5QlFWRXNVMEZCVlVNc1IwRkRhRUlzVFVGQlR5eFhRVUZaUVN4RlFVRlJRU3hGUVVGTlJDeFBRVU5xUXl4blFrRkJhVUpETEVkQlFWTkJMRVZCUVUxRExGbEJRV01zUjBGRmFFUkRMRTlCUVZFc1UwRkJWVVlzUjBGRGFFSXNUVUZCVHl4WFFVRlpRU3hGUVVGUlFTeEZRVUZOUlN4UFFVTnFReXhuUWtGQmFVSkdMRWRCUVZOQkxFVkJRVTFITEZsQlEyaERMR1ZCUVdkQ1NDeEhRVUZUUVN4RlFVRk5TU3hYUVVGaExFZEJSVGxEUXl4UFFVRlJMRXRCVFZKRExGVkJRVmNzVFVGVFlpeFRRVUZUUXl4dlFrRkJiMEpETEVWQlFXZENReXhGUVVGblFrTXNSVUZCWVVNc1IwRkRlRVVzVDBGQlQyWXNiMEpCUVc5Q1owSXNTMEZCUzBNc1MwRkJUVXdzUlVGQlowSkRMRVZCUVdkQ1F5eEZRVUZoUXl4SFFVZHlSbVlzYjBKQlFXOUNhMElzWVVGQllWQXNiMEpCUVhGQ1ZDeHhRa0ZGZEVScFFpeFBRVUZQUXl4UlFVRlZWQ0lzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEMxa2IyMHZiR2xpTDFONWJuUm9aWFJwWTFkb1pXVnNSWFpsYm5RdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9wcm9kSW52YXJpYW50PXJlcXVpcmUoXCIuL3JlYWN0UHJvZEludmFyaWFudFwiKSxpbnZhcmlhbnQ9cmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKSxPQlNFUlZFRF9FUlJPUj17fSxUcmFuc2FjdGlvbkltcGw9e3JlaW5pdGlhbGl6ZVRyYW5zYWN0aW9uOmZ1bmN0aW9uKCl7dGhpcy50cmFuc2FjdGlvbldyYXBwZXJzPXRoaXMuZ2V0VHJhbnNhY3Rpb25XcmFwcGVycygpLHRoaXMud3JhcHBlckluaXREYXRhP3RoaXMud3JhcHBlckluaXREYXRhLmxlbmd0aD0wOnRoaXMud3JhcHBlckluaXREYXRhPVtdLHRoaXMuX2lzSW5UcmFuc2FjdGlvbj0hMX0sX2lzSW5UcmFuc2FjdGlvbjohMSxnZXRUcmFuc2FjdGlvbldyYXBwZXJzOm51bGwsaXNJblRyYW5zYWN0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuISF0aGlzLl9pc0luVHJhbnNhY3Rpb259LHBlcmZvcm06ZnVuY3Rpb24oaSxhLG4sdCxyLHMsZSxsKXt2YXIgbyxjO3RoaXMuaXNJblRyYW5zYWN0aW9uKCkmJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcIlRyYW5zYWN0aW9uLnBlcmZvcm0oLi4uKTogQ2Fubm90IGluaXRpYWxpemUgYSB0cmFuc2FjdGlvbiB3aGVuIHRoZXJlIGlzIGFscmVhZHkgYW4gb3V0c3RhbmRpbmcgdHJhbnNhY3Rpb24uXCIpOl9wcm9kSW52YXJpYW50KFwiMjdcIikpO3RyeXt0aGlzLl9pc0luVHJhbnNhY3Rpb249ITAsbz0hMCx0aGlzLmluaXRpYWxpemVBbGwoMCksYz1pLmNhbGwoYSxuLHQscixzLGUsbCksbz0hMX1maW5hbGx5e3RyeXtpZihvKXRyeXt0aGlzLmNsb3NlQWxsKDApfWNhdGNoKGkpe31lbHNlIHRoaXMuY2xvc2VBbGwoMCl9ZmluYWxseXt0aGlzLl9pc0luVHJhbnNhY3Rpb249ITF9fXJldHVybiBjfSxpbml0aWFsaXplQWxsOmZ1bmN0aW9uKGkpe2Zvcih2YXIgYT10aGlzLnRyYW5zYWN0aW9uV3JhcHBlcnMsbj1pO248YS5sZW5ndGg7bisrKXt2YXIgdD1hW25dO3RyeXt0aGlzLndyYXBwZXJJbml0RGF0YVtuXT1PQlNFUlZFRF9FUlJPUix0aGlzLndyYXBwZXJJbml0RGF0YVtuXT10LmluaXRpYWxpemU/dC5pbml0aWFsaXplLmNhbGwodGhpcyk6bnVsbH1maW5hbGx5e2lmKHRoaXMud3JhcHBlckluaXREYXRhW25dPT09T0JTRVJWRURfRVJST1IpdHJ5e3RoaXMuaW5pdGlhbGl6ZUFsbChuKzEpfWNhdGNoKGkpe319fX0sY2xvc2VBbGw6ZnVuY3Rpb24oaSl7dGhpcy5pc0luVHJhbnNhY3Rpb24oKXx8KFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwiVHJhbnNhY3Rpb24uY2xvc2VBbGwoKTogQ2Fubm90IGNsb3NlIHRyYW5zYWN0aW9uIHdoZW4gbm9uZSBhcmUgb3Blbi5cIik6X3Byb2RJbnZhcmlhbnQoXCIyOFwiKSk7Zm9yKHZhciBhPXRoaXMudHJhbnNhY3Rpb25XcmFwcGVycyxuPWk7bjxhLmxlbmd0aDtuKyspe3ZhciB0LHI9YVtuXSxzPXRoaXMud3JhcHBlckluaXREYXRhW25dO3RyeXt0PSEwLHMhPT1PQlNFUlZFRF9FUlJPUiYmci5jbG9zZSYmci5jbG9zZS5jYWxsKHRoaXMscyksdD0hMX1maW5hbGx5e2lmKHQpdHJ5e3RoaXMuY2xvc2VBbGwobisxKX1jYXRjaChpKXt9fX10aGlzLndyYXBwZXJJbml0RGF0YS5sZW5ndGg9MH19O21vZHVsZS5leHBvcnRzPVRyYW5zYWN0aW9uSW1wbDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsUnlZVzV6WVdOMGFXOXVMbXB6SWwwc0ltNWhiV1Z6SWpwYklsOXdjbTlrU1c1MllYSnBZVzUwSWl3aWNtVnhkV2x5WlNJc0ltbHVkbUZ5YVdGdWRDSXNJazlDVTBWU1ZrVkVYMFZTVWs5U0lpd2lWSEpoYm5OaFkzUnBiMjVKYlhCc0lpd2ljbVZwYm1sMGFXRnNhWHBsVkhKaGJuTmhZM1JwYjI0aUxDSjBhR2x6SWl3aWRISmhibk5oWTNScGIyNVhjbUZ3Y0dWeWN5SXNJbWRsZEZSeVlXNXpZV04wYVc5dVYzSmhjSEJsY25NaUxDSjNjbUZ3Y0dWeVNXNXBkRVJoZEdFaUxDSnNaVzVuZEdnaUxDSmZhWE5KYmxSeVlXNXpZV04wYVc5dUlpd2lhWE5KYmxSeVlXNXpZV04wYVc5dUlpd2ljR1Z5Wm05eWJTSXNJbTFsZEdodlpDSXNJbk5qYjNCbElpd2lZU0lzSW1JaUxDSmpJaXdpWkNJc0ltVWlMQ0ptSWl3aVpYSnliM0pVYUhKdmQyNGlMQ0p5WlhRaUxDSndjbTlqWlhOeklpd2laVzUySWl3aVRrOUVSVjlGVGxZaUxDSnBibWwwYVdGc2FYcGxRV3hzSWl3aVkyRnNiQ0lzSW1Oc2IzTmxRV3hzSWl3aVpYSnlJaXdpYzNSaGNuUkpibVJsZUNJc0lta2lMQ0ozY21Gd2NHVnlJaXdpYVc1cGRHbGhiR2w2WlNJc0ltbHVhWFJFWVhSaElpd2lZMnh2YzJVaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25SeklsMHNJbTFoY0hCcGJtZHpJam9pUVVGVFFTeGhRVVZCTEVsQlFVbEJMR1ZCUVdsQ1F5eFJRVUZSTEhkQ1FVVjZRa01zVlVGQldVUXNVVUZCVVN4elFrRkZjRUpGTEdWQlFXbENMRWRCSzBScVFrTXNaMEpCUVd0Q0xFTkJVWEJDUXl4M1FrRkJlVUlzVjBGRGRrSkRMRXRCUVV0RExHOUNRVUZ6UWtRc1MwRkJTMFVzZVVKQlF6VkNSaXhMUVVGTFJ5eG5Ra0ZEVUVnc1MwRkJTMGNzWjBKQlFXZENReXhQUVVGVExFVkJSVGxDU2l4TFFVRkxSeXhuUWtGQmEwSXNSMEZGZWtKSUxFdEJRVXRMTEd0Q1FVRnRRaXhIUVVjeFFrRXNhMEpCUVd0Q0xFVkJUV3hDU0N4MVFrRkJkMElzUzBGRmVFSkpMR2RDUVVGcFFpeFhRVU5tTEZGQlFWTk9MRXRCUVV0TExHdENRWE5DYUVKRkxGRkJRVk1zVTBGQlZVTXNSVUZCVVVNc1JVRkJUME1zUlVGQlIwTXNSVUZCUjBNc1JVRkJSME1zUlVGQlIwTXNSVUZCUjBNc1IwRkhMME1zU1VGQlNVTXNSVUZEUVVNc1JVRkdSbXBDTEV0QlFVdE5MRzlDUVVFMlF5eGxRVUY2UWxrc1VVRkJVVU1zU1VGQlNVTXNVMEZCTkVKNFFpeFhRVUZWTEVWQlFVOHNLMGRCUVdsSVJpeGxRVUZsTEU5QlIzQk9MRWxCUTBWTkxFdEJRVXRMTEd0Q1FVRnRRaXhGUVV0NFFsY3NSMEZCWXl4RlFVTmthRUlzUzBGQlMzRkNMR05CUVdNc1IwRkRia0pLTEVWQlFVMVVMRVZCUVU5akxFdEJRVXRpTEVWQlFVOURMRVZCUVVkRExFVkJRVWRETEVWQlFVZERMRVZCUVVkRExFVkJRVWRETEVkQlEzaERReXhIUVVGakxFVkJRMlFzVVVGRFFTeEpRVU5GTEVkQlFVbEJMRVZCUjBZc1NVRkRSV2hDTEV0QlFVdDFRaXhUUVVGVExFZEJRMlFzVFVGQlQwTXNVMEZKVkhoQ0xFdEJRVXQxUWl4VFFVRlRMRWRCUldoQ0xGRkJRMEYyUWl4TFFVRkxTeXhyUWtGQmJVSXNSMEZITlVJc1QwRkJUMWtzUjBGSFZFa3NZMEZCWlN4VFFVRlZTU3hIUVVWMlFpeEpRVVJCTEVsQlFVbDRRaXhGUVVGelFrUXNTMEZCUzBNc2IwSkJRM1JDZVVJc1JVRkJTVVFzUlVGQldVTXNSVUZCU1hwQ0xFVkJRVzlDUnl4UFFVRlJjMElzU1VGQlN5eERRVU0xUkN4SlFVRkpReXhGUVVGVk1VSXNSVUZCYjBKNVFpeEhRVU5zUXl4SlFVdEZNVUlzUzBGQlMwY3NaMEpCUVdkQ2RVSXNSMEZCU3pkQ0xHVkJRekZDUnl4TFFVRkxSeXhuUWtGQlowSjFRaXhIUVVGTFF5eEZRVUZSUXl4WFFVRmhSQ3hGUVVGUlF5eFhRVUZYVGl4TFFVRkxkRUlzVFVGQlVTeExRVU12UlN4UlFVTkJMRWRCUVVsQkxFdEJRVXRITEdkQ1FVRm5RblZDTEV0QlFVODNRaXhsUVVrNVFpeEpRVU5GUnl4TFFVRkxjVUlzWTBGQlkwc3NSVUZCU1N4SFFVTjJRaXhOUVVGUFJpeFJRVmxxUWtRc1UwRkJWU3hUUVVGVlJTeEhRVU5xUW5wQ0xFdEJRVXROTEc5Q1FVRTJReXhsUVVGNlFsa3NVVUZCVVVNc1NVRkJTVU1zVTBGQk5FSjRRaXhYUVVGVkxFVkJRVThzZDBWQlFUQkZSaXhsUVVGbExFOUJSVFZMTEVsQlJFRXNTVUZCU1U4c1JVRkJjMEpFTEV0QlFVdERMRzlDUVVOMFFubENMRVZCUVVsRUxFVkJRVmxETEVWQlFVbDZRaXhGUVVGdlFrY3NUMEZCVVhOQ0xFbEJRVXNzUTBGRE5VUXNTVUZGU1ZZc1JVRkdRVmNzUlVGQlZURkNMRVZCUVc5Q2VVSXNSMEZET1VKSExFVkJRVmMzUWl4TFFVRkxSeXhuUWtGQlowSjFRaXhIUVVWd1F5eEpRVXRGVml4SFFVRmpMRVZCUTFaaExFbEJRV0ZvUXl4blFrRkJhMEk0UWl4RlFVRlJSeXhQUVVONlEwZ3NSVUZCVVVjc1RVRkJUVklzUzBGQlMzUkNMRXRCUVUwMlFpeEhRVVV6UW1Jc1IwRkJZeXhGUVVOa0xGRkJRMEVzUjBGQlNVRXNSVUZKUml4SlFVTkZhRUlzUzBGQlMzVkNMRk5CUVZOSExFVkJRVWtzUjBGRGJFSXNUVUZCVDFvc1RVRkpabVFzUzBGQlMwY3NaMEpCUVdkQ1F5eFBRVUZUTEVsQlNXeERNa0lzVDBGQlQwTXNVVUZCVld4RElpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDNKbFlXTjBMV1J2YlM5c2FXSXZWSEpoYm5OaFkzUnBiMjR1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgVmlld3BvcnRNZXRyaWNzPXtjdXJyZW50U2Nyb2xsTGVmdDowLGN1cnJlbnRTY3JvbGxUb3A6MCxyZWZyZXNoU2Nyb2xsVmFsdWVzOmZ1bmN0aW9uKHIpe1ZpZXdwb3J0TWV0cmljcy5jdXJyZW50U2Nyb2xsTGVmdD1yLngsVmlld3BvcnRNZXRyaWNzLmN1cnJlbnRTY3JvbGxUb3A9ci55fX07bW9kdWxlLmV4cG9ydHM9Vmlld3BvcnRNZXRyaWNzO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxacFpYZHdiM0owVFdWMGNtbGpjeTVxY3lKZExDSnVZVzFsY3lJNld5SldhV1YzY0c5eWRFMWxkSEpwWTNNaUxDSmpkWEp5Wlc1MFUyTnliMnhzVEdWbWRDSXNJbU4xY25KbGJuUlRZM0p2Ykd4VWIzQWlMQ0p5WldaeVpYTm9VMk55YjJ4c1ZtRnNkV1Z6SWl3aWMyTnliMnhzVUc5emFYUnBiMjRpTENKNElpd2llU0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVkZCTEdGQlJVRXNTVUZCU1VFc1owSkJRV3RDTEVOQlEzQkNReXhyUWtGQmJVSXNSVUZGYmtKRExHbENRVUZyUWl4RlFVVnNRa01zYjBKQlFYRkNMRk5CUVZWRExFZEJRemRDU2l4blFrRkJaMEpETEd0Q1FVRnZRa2NzUlVGQlpVTXNSVUZEYmtSTUxHZENRVUZuUWtVc2FVSkJRVzFDUlN4RlFVRmxSU3hKUVVsMFJFTXNUMEZCVDBNc1VVRkJWVklpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdFpHOXRMMnhwWWk5V2FXVjNjRzl5ZEUxbGRISnBZM011YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgX3Byb2RJbnZhcmlhbnQ9cmVxdWlyZShcIi4vcmVhY3RQcm9kSW52YXJpYW50XCIpLGludmFyaWFudD1yZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpO2Z1bmN0aW9uIGFjY3VtdWxhdGVJbnRvKHIsYSl7cmV0dXJuIG51bGw9PWEmJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcImFjY3VtdWxhdGVJbnRvKC4uLik6IEFjY3VtdWxhdGVkIGl0ZW1zIG11c3Qgbm90IGJlIG51bGwgb3IgdW5kZWZpbmVkLlwiKTpfcHJvZEludmFyaWFudChcIjMwXCIpKSxudWxsPT1yP2E6QXJyYXkuaXNBcnJheShyKT9BcnJheS5pc0FycmF5KGEpPyhyLnB1c2guYXBwbHkocixhKSxyKTooci5wdXNoKGEpLHIpOkFycmF5LmlzQXJyYXkoYSk/W3JdLmNvbmNhdChhKTpbcixhXX1tb2R1bGUuZXhwb3J0cz1hY2N1bXVsYXRlSW50bztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltRmpZM1Z0ZFd4aGRHVkpiblJ2TG1weklsMHNJbTVoYldWeklqcGJJbDl3Y205a1NXNTJZWEpwWVc1MElpd2ljbVZ4ZFdseVpTSXNJbWx1ZG1GeWFXRnVkQ0lzSW1GalkzVnRkV3hoZEdWSmJuUnZJaXdpWTNWeWNtVnVkQ0lzSW01bGVIUWlMQ0p3Y205alpYTnpJaXdpWlc1Mklpd2lUazlFUlY5RlRsWWlMQ0pCY25KaGVTSXNJbWx6UVhKeVlYa2lMQ0p3ZFhOb0lpd2lZWEJ3YkhraUxDSmpiMjVqWVhRaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25SeklsMHNJbTFoY0hCcGJtZHpJam9pUVVGVFFTeGhRVVZCTEVsQlFVbEJMR1ZCUVdsQ1F5eFJRVUZSTEhkQ1FVVjZRa01zVlVGQldVUXNVVUZCVVN4elFrRmxlRUlzVTBGQlUwVXNaVUZCWlVNc1JVRkJVME1zUjBGSEwwSXNUMEZHVlN4TlFVRlNRU3hKUVVGNVF5eGxRVUY2UWtNc1VVRkJVVU1zU1VGQlNVTXNVMEZCTkVKT0xGZEJRVlVzUlVGQlR5eDVSVUZCTWtWR0xHVkJRV1VzVDBGRmRFb3NUVUZCV0Vrc1JVRkRTME1zUlVGTFRFa3NUVUZCVFVNc1VVRkJVVTRzUjBGRFdrc3NUVUZCVFVNc1VVRkJVVXdzU1VGRGFFSkVMRVZCUVZGUExFdEJRVXRETEUxQlFVMVNMRVZCUVZORExFZEJRM0pDUkN4SlFVVlVRU3hGUVVGUlR5eExRVUZMVGl4SFFVTk9SQ3hIUVVkTVN5eE5RVUZOUXl4UlFVRlJUQ3hIUVVWVUxFTkJRVU5FTEVkQlFWTlRMRTlCUVU5U0xFZEJSMjVDTEVOQlFVTkVMRVZCUVZORExFZEJSMjVDVXl4UFFVRlBReXhSUVVGVldpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzFrYjIwdmJHbGlMMkZqWTNWdGRXeGhkR1ZKYm5SdkxtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIE1PRD02NTUyMTtmdW5jdGlvbiBhZGxlcjMyKHIpe2Zvcih2YXIgZT0xLHQ9MCxhPTAsbz1yLmxlbmd0aCxkPS00Jm87YTxkOyl7Zm9yKHZhciBjPU1hdGgubWluKGErNDA5NixkKTthPGM7YSs9NCl0Kz0oZSs9ci5jaGFyQ29kZUF0KGEpKSsoZSs9ci5jaGFyQ29kZUF0KGErMSkpKyhlKz1yLmNoYXJDb2RlQXQoYSsyKSkrKGUrPXIuY2hhckNvZGVBdChhKzMpKTtlJT1NT0QsdCU9TU9EfWZvcig7YTxvO2ErKyl0Kz1lKz1yLmNoYXJDb2RlQXQoYSk7cmV0dXJuKGUlPU1PRCl8KHQlPU1PRCk8PDE2fW1vZHVsZS5leHBvcnRzPWFkbGVyMzI7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUZrYkdWeU16SXVhbk1pWFN3aWJtRnRaWE1pT2xzaVRVOUVJaXdpWVdSc1pYSXpNaUlzSW1SaGRHRWlMQ0poSWl3aVlpSXNJbWtpTENKc0lpd2liR1Z1WjNSb0lpd2liU0lzSW00aUxDSk5ZWFJvSWl3aWJXbHVJaXdpWTJoaGNrTnZaR1ZCZENJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVZOQkxHRkJSVUVzU1VGQlNVRXNTVUZCVFN4TlFVOVdMRk5CUVZORExGRkJRVkZETEVkQlRXWXNTVUZNUVN4SlFVRkpReXhGUVVGSkxFVkJRMHBETEVWQlFVa3NSVUZEU2tNc1JVRkJTU3hGUVVOS1F5eEZRVUZKU2l4RlFVRkxTeXhQUVVOVVF5eEhRVUZSTEVWQlFVcEdMRVZCUTBSRUxFVkJRVWxITEVkQlFVY3NRMEZGV2l4SlFVUkJMRWxCUVVsRExFVkJRVWxETEV0QlFVdERMRWxCUVVsT0xFVkJRVWtzUzBGQlRVY3NSMEZEY0VKSUxFVkJRVWxKTEVWQlFVZEtMRWRCUVVzc1JVRkRha0pFTEVsQlFVMUVMRWRCUVV0RUxFVkJRVXRWTEZkQlFWZFFMRXRCUVU5R0xFZEJRVXRFTEVWQlFVdFZMRmRCUVZkUUxFVkJRVWtzUzBGQlQwWXNSMEZCUzBRc1JVRkJTMVVzVjBGQlYxQXNSVUZCU1N4TFFVRlBSaXhIUVVGTFJDeEZRVUZMVlN4WFFVRlhVQ3hGUVVGSkxFbEJSVGRJUml4SFFVRkxTQ3hKUVVOTVNTeEhRVUZMU2l4SlFVVlFMRXRCUVU5TExFVkJRVWxETEVWQlFVZEVMRWxCUTFwRUxFZEJRVXRFTEVkQlFVdEVMRVZCUVV0VkxGZEJRVmRRTEVkQlNUVkNMRTlCUmtGR0xFZEJRVXRJTEUxQlEweEpMRWRCUVV0S0xFMUJRMWNzUjBGSGJFSmhMRTlCUVU5RExGRkJRVlZpSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdOMExXUnZiUzlzYVdJdllXUnNaWEl6TWk1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgUmVhY3RDb21wb25lbnRUcmVlSG9vayxfcHJvZEludmFyaWFudD1yZXF1aXJlKFwiLi9yZWFjdFByb2RJbnZhcmlhbnRcIiksUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXM9cmVxdWlyZShcIi4vUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNcIiksUmVhY3RQcm9wVHlwZXNTZWNyZXQ9cmVxdWlyZShcIi4vUmVhY3RQcm9wVHlwZXNTZWNyZXRcIiksaW52YXJpYW50PXJlcXVpcmUoXCJmYmpzL2xpYi9pbnZhcmlhbnRcIiksd2FybmluZz1yZXF1aXJlKFwiZmJqcy9saWIvd2FybmluZ1wiKTtcInVuZGVmaW5lZFwiIT10eXBlb2YgcHJvY2VzcyYmcHJvY2Vzcy5lbnYmJlwidGVzdFwiPT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJihSZWFjdENvbXBvbmVudFRyZWVIb29rPXJlcXVpcmUoXCJyZWFjdC9saWIvUmVhY3RDb21wb25lbnRUcmVlSG9va1wiKSk7dmFyIGxvZ2dlZFR5cGVGYWlsdXJlcz17fTtmdW5jdGlvbiBjaGVja1JlYWN0VHlwZVNwZWMoZSxyLG8sdCxhLG4pe2Zvcih2YXIgYyBpbiBlKWlmKGUuaGFzT3duUHJvcGVydHkoYykpe3ZhciBzO3RyeXtcImZ1bmN0aW9uXCIhPXR5cGVvZiBlW2NdJiYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoITEsXCIlczogJXMgdHlwZSBgJXNgIGlzIGludmFsaWQ7IGl0IG11c3QgYmUgYSBmdW5jdGlvbiwgdXN1YWxseSBmcm9tIFJlYWN0LlByb3BUeXBlcy5cIix0fHxcIlJlYWN0IGNsYXNzXCIsUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbb10sYyk6X3Byb2RJbnZhcmlhbnQoXCI4NFwiLHR8fFwiUmVhY3QgY2xhc3NcIixSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tvXSxjKSkscz1lW2NdKHIsYyx0LG8sbnVsbCxSZWFjdFByb3BUeXBlc1NlY3JldCl9Y2F0Y2goZSl7cz1lfWlmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcoIXN8fHMgaW5zdGFuY2VvZiBFcnJvcixcIiVzOiB0eXBlIHNwZWNpZmljYXRpb24gb2YgJXMgYCVzYCBpcyBpbnZhbGlkOyB0aGUgdHlwZSBjaGVja2VyIGZ1bmN0aW9uIG11c3QgcmV0dXJuIGBudWxsYCBvciBhbiBgRXJyb3JgIGJ1dCByZXR1cm5lZCBhICVzLiBZb3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIHBhc3MgYW4gYXJndW1lbnQgdG8gdGhlIHR5cGUgY2hlY2tlciBjcmVhdG9yIChhcnJheU9mLCBpbnN0YW5jZU9mLCBvYmplY3RPZiwgb25lT2YsIG9uZU9mVHlwZSwgYW5kIHNoYXBlIGFsbCByZXF1aXJlIGFuIGFyZ3VtZW50KS5cIix0fHxcIlJlYWN0IGNsYXNzXCIsUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbb10sYyx0eXBlb2YgcykscyBpbnN0YW5jZW9mIEVycm9yJiYhKHMubWVzc2FnZSBpbiBsb2dnZWRUeXBlRmFpbHVyZXMpKXtsb2dnZWRUeXBlRmFpbHVyZXNbcy5tZXNzYWdlXT0hMDt2YXIgaT1cIlwiO1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJihSZWFjdENvbXBvbmVudFRyZWVIb29rfHwoUmVhY3RDb21wb25lbnRUcmVlSG9vaz1yZXF1aXJlKFwicmVhY3QvbGliL1JlYWN0Q29tcG9uZW50VHJlZUhvb2tcIikpLG51bGwhPT1uP2k9UmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRTdGFja0FkZGVuZHVtQnlJRChuKTpudWxsIT09YSYmKGk9UmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRDdXJyZW50U3RhY2tBZGRlbmR1bShhKSkpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcoITEsXCJGYWlsZWQgJXMgdHlwZTogJXMlc1wiLG8scy5tZXNzYWdlLGkpfX19bW9kdWxlLmV4cG9ydHM9Y2hlY2tSZWFjdFR5cGVTcGVjO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Ob1pXTnJVbVZoWTNSVWVYQmxVM0JsWXk1cWN5SmRMQ0p1WVcxbGN5STZXeUpTWldGamRFTnZiWEJ2Ym1WdWRGUnlaV1ZJYjI5cklpd2lYM0J5YjJSSmJuWmhjbWxoYm5RaUxDSnlaWEYxYVhKbElpd2lVbVZoWTNSUWNtOXdWSGx3WlV4dlkyRjBhVzl1VG1GdFpYTWlMQ0pTWldGamRGQnliM0JVZVhCbGMxTmxZM0psZENJc0ltbHVkbUZ5YVdGdWRDSXNJbmRoY201cGJtY2lMQ0p3Y205alpYTnpJaXdpWlc1Mklpd2lUazlFUlY5RlRsWWlMQ0pzYjJkblpXUlVlWEJsUm1GcGJIVnlaWE1pTENKamFHVmphMUpsWVdOMFZIbHdaVk53WldNaUxDSjBlWEJsVTNCbFkzTWlMQ0oyWVd4MVpYTWlMQ0pzYjJOaGRHbHZiaUlzSW1OdmJYQnZibVZ1ZEU1aGJXVWlMQ0psYkdWdFpXNTBJaXdpWkdWaWRXZEpSQ0lzSW5SNWNHVlRjR1ZqVG1GdFpTSXNJbWhoYzA5M2JsQnliM0JsY25SNUlpd2laWEp5YjNJaUxDSmxlQ0lzSWtWeWNtOXlJaXdpYldWemMyRm5aU0lzSW1OdmJYQnZibVZ1ZEZOMFlXTnJTVzVtYnlJc0ltZGxkRk4wWVdOclFXUmtaVzVrZFcxQ2VVbEVJaXdpWjJWMFEzVnljbVZ1ZEZOMFlXTnJRV1JrWlc1a2RXMGlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRlJRU3hoUVVWQkxFbEJVVWxCTEhWQ1FWSkJReXhsUVVGcFFrTXNVVUZCVVN4M1FrRkZla0pETERKQ1FVRTJRa1FzVVVGQlVTeG5RMEZEY2tORkxIRkNRVUYxUWtZc1VVRkJVU3d3UWtGRkwwSkhMRlZCUVZsSUxGRkJRVkVzYzBKQlEzQkNTU3hSUVVGVlNpeFJRVUZSTEc5Q1FVbERMRzlDUVVGYVN5eFRRVUV5UWtFc1VVRkJVVU1zUzBGQlowTXNVMEZCZWtKRUxGRkJRVkZETEVsQlFVbERMRmRCVFM5RVZDeDFRa0ZCZVVKRkxGRkJRVkVzY1VOQlIyNURMRWxCUVVsUkxHMUNRVUZ4UWl4SFFXTjZRaXhUUVVGVFF5eHRRa0ZCYlVKRExFVkJRVmRETEVWQlFWRkRMRVZCUVZWRExFVkJRV1ZETEVWQlFWTkRMRWRCUXk5RkxFbEJRVXNzU1VGQlNVTXNTMEZCWjBKT0xFVkJRM1pDTEVkQlFVbEJMRVZCUVZWUExHVkJRV1ZFTEVkQlFXVXNRMEZETVVNc1NVRkJTVVVzUlVGSlNpeEpRVWQxUXl4dFFrRkJOVUpTTEVWQlFWVk5MRXRCUVhsRUxHVkJRWHBDV0N4UlFVRlJReXhKUVVGSlF5eFRRVUUwUWtvc1YwRkJWU3hGUVVGUExHOUdRVUZ4UmxVc1IwRkJhVUlzWTBGQlpWb3NNa0pCUVRKQ1Z5eEhRVUZYU1N4SFFVRm5RbXBDTEdWQlFXVXNTMEZCVFdNc1IwRkJhVUlzWTBGQlpWb3NNa0pCUVRKQ1Z5eEhRVUZYU1N4SlFVTnNXRVVzUlVGQlVWSXNSVUZCVlUwc1IwRkJZMHdzUlVGQlVVc3NSVUZCWTBnc1JVRkJaVVFzUlVGQlZTeExRVUZOVml4elFrRkRja1lzVFVGQlQybENMRWRCUTFCRUxFVkJRVkZETEVWQlIxWXNSMEZFZVVJc1pVRkJla0prTEZGQlFWRkRMRWxCUVVsRExGVkJRVFJDU0N4VFFVRlRZeXhIUVVGVFFTeGhRVUZwUWtVc1RVRkJUeXd5VWtGQloxUlFMRWRCUVdsQ0xHTkJRV1ZhTERKQ1FVRXlRbGNzUjBGQlYwa3NVMEZCY1VKRkxFZEJRM3BrUVN4aFFVRnBRa1VzVTBGQlYwWXNSVUZCVFVjc1YwRkJWMklzYjBKQlFYRkNMRU5CUjNCRlFTeHRRa0ZCYlVKVkxFVkJRVTFITEZWQlFWY3NSVUZGY0VNc1NVRkJTVU1zUlVGQmNVSXNSMEZGU1N4bFFVRjZRbXBDTEZGQlFWRkRMRWxCUVVsRExGZEJRMVJVTEhsQ1FVTklRU3gxUWtGQmVVSkZMRkZCUVZFc2NVTkJSVzVDTEU5QlFWcGxMRVZCUTBaUExFVkJRWEZDZUVJc2RVSkJRWFZDZVVJc2NVSkJRWEZDVWl4SFFVTTFReXhQUVVGYVJDeEpRVU5VVVN4RlFVRnhRbmhDTEhWQ1FVRjFRakJDTEhkQ1FVRjNRbFlzUzBGSkwwTXNaVUZCZWtKVUxGRkJRVkZETEVsQlFVbERMRlZCUVRSQ1NDeFRRVUZSTEVWQlFVOHNkVUpCUVhkQ1VTeEZRVUZWVFN4RlFVRk5SeXhSUVVGVFF5eExRVTFvU0Vjc1QwRkJUME1zVVVGQlZXcENJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwzSmxZV04wTFdSdmJTOXNhV0l2WTJobFkydFNaV0ZqZEZSNWNHVlRjR1ZqTG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgY3JlYXRlTWljcm9zb2Z0VW5zYWZlTG9jYWxGdW5jdGlvbj1mdW5jdGlvbihuKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGUsYyxvLHQpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIG4oZSxjLG8sdCl9KX06bn07bW9kdWxlLmV4cG9ydHM9Y3JlYXRlTWljcm9zb2Z0VW5zYWZlTG9jYWxGdW5jdGlvbjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltTnlaV0YwWlUxcFkzSnZjMjltZEZWdWMyRm1aVXh2WTJGc1JuVnVZM1JwYjI0dWFuTWlYU3dpYm1GdFpYTWlPbHNpWTNKbFlYUmxUV2xqY205emIyWjBWVzV6WVdabFRHOWpZV3hHZFc1amRHbHZiaUlzSW1aMWJtTWlMQ0pOVTBGd2NDSXNJbVY0WldOVmJuTmhabVZNYjJOaGJFWjFibU4wYVc5dUlpd2lZWEpuTUNJc0ltRnlaekVpTENKaGNtY3lJaXdpWVhKbk15SXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlYU3dpYldGd2NHbHVaM01pT2lKQlFWVkJMR0ZCVFVFc1NVRkJTVUVzYlVOQlFYRkRMRk5CUVZWRExFZEJRMnBFTEUxQlFYRkNMRzlDUVVGV1F5eFBRVUY1UWtFc1RVRkJUVU1zZDBKQlEycERMRk5CUVZWRExFVkJRVTFETEVWQlFVMURMRVZCUVUxRExFZEJRMnBEVEN4TlFVRk5ReXgzUWtGQmQwSXNWMEZETlVJc1QwRkJUMFlzUlVGQlMwY3NSVUZCVFVNc1JVRkJUVU1zUlVGQlRVTXNUVUZKTTBKT0xFZEJTVmhQTEU5QlFVOURMRkZCUVZWVUlpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDNKbFlXTjBMV1J2YlM5c2FXSXZZM0psWVhSbFRXbGpjbTl6YjJaMFZXNXpZV1psVEc5allXeEdkVzVqZEdsdmJpNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIENTU1Byb3BlcnR5PXJlcXVpcmUoXCIuL0NTU1Byb3BlcnR5XCIpLHdhcm5pbmc9cmVxdWlyZShcImZianMvbGliL3dhcm5pbmdcIiksaXNVbml0bGVzc051bWJlcj1DU1NQcm9wZXJ0eS5pc1VuaXRsZXNzTnVtYmVyLHN0eWxlV2FybmluZ3M9e307ZnVuY3Rpb24gZGFuZ2Vyb3VzU3R5bGVWYWx1ZShlLHIsbixzKXtpZihudWxsPT1yfHxcImJvb2xlYW5cIj09dHlwZW9mIHJ8fFwiXCI9PT1yKXJldHVyblwiXCI7dmFyIHQ9aXNOYU4ocik7aWYoc3x8dHx8MD09PXJ8fGlzVW5pdGxlc3NOdW1iZXIuaGFzT3duUHJvcGVydHkoZSkmJmlzVW5pdGxlc3NOdW1iZXJbZV0pcmV0dXJuXCJcIityO2lmKFwic3RyaW5nXCI9PXR5cGVvZiByKXtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZuJiZcIjBcIiE9PXIpe3ZhciBpPW4uX2N1cnJlbnRFbGVtZW50Ll9vd25lcixhPWk/aS5nZXROYW1lKCk6bnVsbDthJiYhc3R5bGVXYXJuaW5nc1thXSYmKHN0eWxlV2FybmluZ3NbYV09e30pO3ZhciB1PSExO2lmKGEpe3ZhciBsPXN0eWxlV2FybmluZ3NbYV07KHU9bFtlXSl8fChsW2VdPSEwKX11fHxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ3YXJuaW5nKCExLFwiYSBgJXNgIHRhZyAob3duZXI6IGAlc2ApIHdhcyBwYXNzZWQgYSBudW1lcmljIHN0cmluZyB2YWx1ZSBmb3IgQ1NTIHByb3BlcnR5IGAlc2AgKHZhbHVlOiBgJXNgKSB3aGljaCB3aWxsIGJlIHRyZWF0ZWQgYXMgYSB1bml0bGVzcyBudW1iZXIgaW4gYSBmdXR1cmUgdmVyc2lvbiBvZiBSZWFjdC5cIixuLl9jdXJyZW50RWxlbWVudC50eXBlLGF8fFwidW5rbm93blwiLGUscil9cj1yLnRyaW0oKX1yZXR1cm4gcitcInB4XCJ9bW9kdWxlLmV4cG9ydHM9ZGFuZ2Vyb3VzU3R5bGVWYWx1ZTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltUmhibWRsY205MWMxTjBlV3hsVm1Gc2RXVXVhbk1pWFN3aWJtRnRaWE1pT2xzaVExTlRVSEp2Y0dWeWRIa2lMQ0p5WlhGMWFYSmxJaXdpZDJGeWJtbHVaeUlzSW1selZXNXBkR3hsYzNOT2RXMWlaWElpTENKemRIbHNaVmRoY201cGJtZHpJaXdpWkdGdVoyVnliM1Z6VTNSNWJHVldZV3gxWlNJc0ltNWhiV1VpTENKMllXeDFaU0lzSW1OdmJYQnZibVZ1ZENJc0ltbHpRM1Z6ZEc5dFVISnZjR1Z5ZEhraUxDSnBjMDV2Yms1MWJXVnlhV01pTENKcGMwNWhUaUlzSW1oaGMwOTNibEJ5YjNCbGNuUjVJaXdpY0hKdlkyVnpjeUlzSW1WdWRpSXNJazVQUkVWZlJVNVdJaXdpYjNkdVpYSWlMQ0pmWTNWeWNtVnVkRVZzWlcxbGJuUWlMQ0pmYjNkdVpYSWlMQ0p2ZDI1bGNrNWhiV1VpTENKblpYUk9ZVzFsSWl3aWQyRnlibVZrSWl3aWQyRnlibWx1WjNNaUxDSjBlWEJsSWl3aWRISnBiU0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVkZCTEdGQlJVRXNTVUZCU1VFc1dVRkJZME1zVVVGQlVTeHBRa0ZEZEVKRExGRkJRVlZFTEZGQlFWRXNiMEpCUld4Q1JTeHBRa0ZCYlVKSUxGbEJRVmxITEdsQ1FVTXZRa01zWTBGQlowSXNSMEZaY0VJc1UwRkJVME1zYjBKQlFXOUNReXhGUVVGTlF5eEZRVUZQUXl4RlFVRlhReXhIUVZsdVJDeEhRVVIxUWl4TlFVRlVSaXhIUVVGclF5eHJRa0ZCVmtFc1IwRkJhVU1zUzBGQlZrRXNSVUZGTTBRc1RVRkJUeXhIUVVkVUxFbEJRVWxITEVWQlFXVkRMRTFCUVUxS0xFZEJRM3BDTEVkQlFVbEZMRWRCUVc5Q1F5eEhRVUV3UWl4SlFVRldTQ3hIUVVGbFNpeHBRa0ZCYVVKVExHVkJRV1ZPTEVsQlFWTklMR2xDUVVGcFFrY3NSMEZETDBjc1RVRkJUeXhIUVVGTFF5eEZRVWRrTEVkQlFYRkNMR2xDUVVGV1FTeEZRVUZ2UWl4RFFVTTNRaXhIUVVFMlFpeGxRVUY2UWswc1VVRkJVVU1zU1VGQlNVTXNWVUZIVmxBc1IwRkJkVUlzVFVGQlZrUXNSVUZCWlN4RFFVTTVRaXhKUVVGSlV5eEZRVUZSVWl4RlFVRlZVeXhuUWtGQlowSkRMRTlCUTJ4RFF5eEZRVUZaU0N4RlFVRlJRU3hGUVVGTlNTeFZRVUZaTEV0QlEzUkRSQ3hKUVVGalppeGpRVUZqWlN4TFFVTTVRbVlzWTBGQlkyVXNSMEZCWVN4SlFVVTNRaXhKUVVGSlJTeEhRVUZUTEVWQlEySXNSMEZCU1VZc1JVRkJWeXhEUVVOaUxFbEJRVWxITEVWQlFWZHNRaXhqUVVGalpTeEpRVU0zUWtVc1JVRkJVME1zUlVGQlUyaENMRTFCUldoQ1owSXNSVUZCVTJoQ0xFbEJRVkVzUjBGSGFFSmxMRWRCUTNOQ0xHVkJRWHBDVWl4UlFVRlJReXhKUVVGSlF5eFZRVUUwUW1Jc1UwRkJVU3hGUVVGUExEQkxRVUZ4VEUwc1JVRkJWVk1zWjBKQlFXZENUU3hMUVVGTlNpeEhRVUZoTEZWQlFWZGlMRVZCUVUxRExFZEJTV2hVUVN4RlFVRlJRU3hGUVVGTmFVSXNUMEZGYUVJc1QwRkJUMnBDTEVWQlFWRXNTMEZIYWtKclFpeFBRVUZQUXl4UlFVRlZja0lpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdFpHOXRMMnhwWWk5a1lXNW5aWEp2ZFhOVGRIbHNaVlpoYkhWbExtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIG1hdGNoSHRtbFJlZ0V4cD0vW1wiJyY8Pl0vO2Z1bmN0aW9uIGVzY2FwZUh0bWwoZSl7dmFyIHQscj1cIlwiK2UsYT1tYXRjaEh0bWxSZWdFeHAuZXhlYyhyKTtpZighYSlyZXR1cm4gcjt2YXIgbj1cIlwiLHM9MCxjPTA7Zm9yKHM9YS5pbmRleDtzPHIubGVuZ3RoO3MrKyl7c3dpdGNoKHIuY2hhckNvZGVBdChzKSl7Y2FzZSAzNDp0PVwiJnF1b3Q7XCI7YnJlYWs7Y2FzZSAzODp0PVwiJmFtcDtcIjticmVhaztjYXNlIDM5OnQ9XCImI3gyNztcIjticmVhaztjYXNlIDYwOnQ9XCImbHQ7XCI7YnJlYWs7Y2FzZSA2Mjp0PVwiJmd0O1wiO2JyZWFrO2RlZmF1bHQ6Y29udGludWV9YyE9PXMmJihuKz1yLnN1YnN0cmluZyhjLHMpKSxjPXMrMSxuKz10fXJldHVybiBjIT09cz9uK3Iuc3Vic3RyaW5nKGMscyk6bn1mdW5jdGlvbiBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIoZSl7cmV0dXJuXCJib29sZWFuXCI9PXR5cGVvZiBlfHxcIm51bWJlclwiPT10eXBlb2YgZT9cIlwiK2U6ZXNjYXBlSHRtbChlKX1tb2R1bGUuZXhwb3J0cz1lc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXI7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVZ6WTJGd1pWUmxlSFJEYjI1MFpXNTBSbTl5UW5KdmQzTmxjaTVxY3lKZExDSnVZVzFsY3lJNld5SnRZWFJqYUVoMGJXeFNaV2RGZUhBaUxDSmxjMk5oY0dWSWRHMXNJaXdpYzNSeWFXNW5JaXdpWlhOallYQmxJaXdpYzNSeUlpd2liV0YwWTJnaUxDSmxlR1ZqSWl3aWFIUnRiQ0lzSW1sdVpHVjRJaXdpYkdGemRFbHVaR1Y0SWl3aWJHVnVaM1JvSWl3aVkyaGhja052WkdWQmRDSXNJbk4xWW5OMGNtbHVaeUlzSW1WelkyRndaVlJsZUhSRGIyNTBaVzUwUm05eVFuSnZkM05sY2lJc0luUmxlSFFpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZwUTBFc1lVRlJRU3hKUVVGSlFTeG5Ra0ZCYTBJc1ZVRlZkRUlzVTBGQlUwTXNWMEZCVjBNc1IwRkRiRUlzU1VGUFNVTXNSVUZRUVVNc1JVRkJUU3hIUVVGTFJpeEZRVU5ZUnl4RlFVRlJUQ3huUWtGQlowSk5MRXRCUVV0R0xFZEJSV3BETEVsQlFVdERMRVZCUTBnc1QwRkJUMFFzUlVGSlZDeEpRVUZKUnl4RlFVRlBMRWRCUTFCRExFVkJRVkVzUlVGRFVrTXNSVUZCV1N4RlFVVm9RaXhKUVVGTFJDeEZRVUZSU0N4RlFVRk5SeXhOUVVGUFFTeEZRVUZSU2l4RlFVRkpUU3hQUVVGUlJpeEpRVUZUTEVOQlEzSkVMRTlCUVZGS0xFVkJRVWxQTEZkQlFWZElMRWxCUTNKQ0xFdEJRVXNzUjBGRlNFd3NSVUZCVXl4VFFVTlVMRTFCUTBZc1MwRkJTeXhIUVVWSVFTeEZRVUZUTEZGQlExUXNUVUZEUml4TFFVRkxMRWRCUlVoQkxFVkJRVk1zVTBGRFZDeE5RVU5HTEV0QlFVc3NSMEZGU0VFc1JVRkJVeXhQUVVOVUxFMUJRMFlzUzBGQlN5eEhRVVZJUVN4RlFVRlRMRTlCUTFRc1RVRkRSaXhSUVVORkxGTkJSMEZOTEVsQlFXTkVMRWxCUTJoQ1JDeEhRVUZSU0N4RlFVRkpVU3hWUVVGVlNDeEZRVUZYUkN4SlFVZHVRME1zUlVGQldVUXNSVUZCVVN4RlFVTndRa1FzUjBGQlVVb3NSVUZIVml4UFFVRlBUU3hKUVVGalJDeEZRVUZSUkN4RlFVRlBTQ3hGUVVGSlVTeFZRVUZWU0N4RlFVRlhSQ3hIUVVGVFJDeEZRVlY0UlN4VFFVRlRUU3cwUWtGQk5FSkRMRWRCUTI1RExFMUJRVzlDTEd0Q1FVRlVRU3hIUVVGelF5eHBRa0ZCVkVFc1JVRkpMMElzUjBGQlMwRXNSVUZGVUdJc1YwRkJWMkVzUjBGSGNFSkRMRTlCUVU5RExGRkJRVlZJSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdOMExXUnZiUzlzYVdJdlpYTmpZWEJsVkdWNGRFTnZiblJsYm5SR2IzSkNjbTkzYzJWeUxtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9wcm9kSW52YXJpYW50PXJlcXVpcmUoXCIuL3JlYWN0UHJvZEludmFyaWFudFwiKSxSZWFjdEN1cnJlbnRPd25lcj1yZXF1aXJlKFwicmVhY3QvbGliL1JlYWN0Q3VycmVudE93bmVyXCIpLFJlYWN0RE9NQ29tcG9uZW50VHJlZT1yZXF1aXJlKFwiLi9SZWFjdERPTUNvbXBvbmVudFRyZWVcIiksUmVhY3RJbnN0YW5jZU1hcD1yZXF1aXJlKFwiLi9SZWFjdEluc3RhbmNlTWFwXCIpLGdldEhvc3RDb21wb25lbnRGcm9tQ29tcG9zaXRlPXJlcXVpcmUoXCIuL2dldEhvc3RDb21wb25lbnRGcm9tQ29tcG9zaXRlXCIpLGludmFyaWFudD1yZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpLHdhcm5pbmc9cmVxdWlyZShcImZianMvbGliL3dhcm5pbmdcIik7ZnVuY3Rpb24gZmluZERPTU5vZGUoZSl7aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVil7dmFyIG49UmVhY3RDdXJyZW50T3duZXIuY3VycmVudDtudWxsIT09biYmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcobi5fd2FybmVkQWJvdXRSZWZzSW5SZW5kZXIsXCIlcyBpcyBhY2Nlc3NpbmcgZmluZERPTU5vZGUgaW5zaWRlIGl0cyByZW5kZXIoKS4gcmVuZGVyKCkgc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiBvZiBwcm9wcyBhbmQgc3RhdGUuIEl0IHNob3VsZCBuZXZlciBhY2Nlc3Mgc29tZXRoaW5nIHRoYXQgcmVxdWlyZXMgc3RhbGUgZGF0YSBmcm9tIHRoZSBwcmV2aW91cyByZW5kZXIsIHN1Y2ggYXMgcmVmcy4gTW92ZSB0aGlzIGxvZ2ljIHRvIGNvbXBvbmVudERpZE1vdW50IGFuZCBjb21wb25lbnREaWRVcGRhdGUgaW5zdGVhZC5cIixuLmdldE5hbWUoKXx8XCJBIGNvbXBvbmVudFwiKSxuLl93YXJuZWRBYm91dFJlZnNJblJlbmRlcj0hMCl9aWYobnVsbD09ZSlyZXR1cm4gbnVsbDtpZigxPT09ZS5ub2RlVHlwZSlyZXR1cm4gZTt2YXIgcj1SZWFjdEluc3RhbmNlTWFwLmdldChlKTtpZihyKXJldHVybihyPWdldEhvc3RDb21wb25lbnRGcm9tQ29tcG9zaXRlKHIpKT9SZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZShyKTpudWxsO1wiZnVuY3Rpb25cIj09dHlwZW9mIGUucmVuZGVyP1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwiZmluZERPTU5vZGUgd2FzIGNhbGxlZCBvbiBhbiB1bm1vdW50ZWQgY29tcG9uZW50LlwiKTpfcHJvZEludmFyaWFudChcIjQ0XCIpOlwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwiRWxlbWVudCBhcHBlYXJzIHRvIGJlIG5laXRoZXIgUmVhY3RDb21wb25lbnQgbm9yIERPTU5vZGUgKGtleXM6ICVzKVwiLE9iamVjdC5rZXlzKGUpKTpfcHJvZEludmFyaWFudChcIjQ1XCIsT2JqZWN0LmtleXMoZSkpfW1vZHVsZS5leHBvcnRzPWZpbmRET01Ob2RlO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1acGJtUkVUMDFPYjJSbExtcHpJbDBzSW01aGJXVnpJanBiSWw5d2NtOWtTVzUyWVhKcFlXNTBJaXdpY21WeGRXbHlaU0lzSWxKbFlXTjBRM1Z5Y21WdWRFOTNibVZ5SWl3aVVtVmhZM1JFVDAxRGIyMXdiMjVsYm5SVWNtVmxJaXdpVW1WaFkzUkpibk4wWVc1alpVMWhjQ0lzSW1kbGRFaHZjM1JEYjIxd2IyNWxiblJHY205dFEyOXRjRzl6YVhSbElpd2lhVzUyWVhKcFlXNTBJaXdpZDJGeWJtbHVaeUlzSW1acGJtUkVUMDFPYjJSbElpd2lZMjl0Y0c5dVpXNTBUM0pGYkdWdFpXNTBJaXdpY0hKdlkyVnpjeUlzSW1WdWRpSXNJazVQUkVWZlJVNVdJaXdpYjNkdVpYSWlMQ0pqZFhKeVpXNTBJaXdpWDNkaGNtNWxaRUZpYjNWMFVtVm1jMGx1VW1WdVpHVnlJaXdpWjJWMFRtRnRaU0lzSW01dlpHVlVlWEJsSWl3aWFXNXpkQ0lzSW1kbGRDSXNJbWRsZEU1dlpHVkdjbTl0U1c1emRHRnVZMlVpTENKeVpXNWtaWElpTENKUFltcGxZM1FpTENKclpYbHpJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJVVUVzWVVGRlFTeEpRVUZKUVN4bFFVRnBRa01zVVVGQlVTeDNRa0ZGZWtKRExHdENRVUZ2UWtRc1VVRkJVU3dyUWtGRE5VSkZMSE5DUVVGM1FrWXNVVUZCVVN3eVFrRkRhRU5ITEdsQ1FVRnRRa2dzVVVGQlVTeHpRa0ZGTTBKSkxEaENRVUZuUTBvc1VVRkJVU3h0UTBGRGVFTkxMRlZCUVZsTUxGRkJRVkVzYzBKQlEzQkNUU3hSUVVGVlRpeFJRVUZSTEc5Q1FWVjBRaXhUUVVGVFR5eFpRVUZaUXl4SFFVTnVRaXhIUVVFMlFpeGxRVUY2UWtNc1VVRkJVVU1zU1VGQlNVTXNVMEZCTWtJc1EwRkRla01zU1VGQlNVTXNSVUZCVVZnc2EwSkJRV3RDV1N4UlFVTm9RaXhQUVVGV1JDeEpRVU4xUWl4bFFVRjZRa2dzVVVGQlVVTXNTVUZCU1VNc1ZVRkJORUpNTEZGQlFWRk5MRVZCUVUxRkxIbENRVUV3UWl4cFVrRkJjMU5HTEVWQlFVMUhMRmRCUVdFc1pVRkRlbGxJTEVWQlFVMUZMREJDUVVFeVFpeEhRVWR5UXl4SFFVRXdRaXhOUVVGMFFrNHNSVUZEUml4UFFVRlBMRXRCUlZRc1IwRkJiME1zU1VGQmFFTkJMRVZCUVcxQ1VTeFRRVU55UWl4UFFVRlBVaXhGUVVkVUxFbEJRVWxUTEVWQlFVOWtMR2xDUVVGcFFtVXNTVUZCU1ZZc1IwRkRhRU1zUjBGQlNWTXNSVUZGUml4UFFVUkJRU3hGUVVGUFlpdzRRa0ZCT0VKaExFbEJRM1pDWml4elFrRkJjMEpwUWl4dlFrRkJiMEpHTEVkQlFWRXNTMEZIZWtJc2JVSkJRVGxDVkN4RlFVRnRRbGtzVDBGRFRTeGxRVUY2UWxnc1VVRkJVVU1zU1VGQlNVTXNVMEZCTkVKT0xGZEJRVlVzUlVGQlR5eHhSRUZCZFVST0xHVkJRV1VzVFVGRmRFY3NaVUZCZWtKVkxGRkJRVkZETEVsQlFVbERMRk5CUVRSQ1RpeFhRVUZWTEVWQlFVOHNjMFZCUVhWRlowSXNUMEZCVDBNc1MwRkJTMlFzU1VGQmRVSlVMR1ZCUVdVc1MwRkJUWE5DTEU5QlFVOURMRXRCUVV0a0xFbEJTV3BPWlN4UFFVRlBReXhSUVVGVmFrSWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F0Wkc5dEwyeHBZaTltYVc1a1JFOU5UbTlrWlM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgUmVhY3RDb21wb25lbnRUcmVlSG9vayxLZXlFc2NhcGVVdGlscz1yZXF1aXJlKFwiLi9LZXlFc2NhcGVVdGlsc1wiKSx0cmF2ZXJzZUFsbENoaWxkcmVuPXJlcXVpcmUoXCIuL3RyYXZlcnNlQWxsQ2hpbGRyZW5cIiksd2FybmluZz1yZXF1aXJlKFwiZmJqcy9saWIvd2FybmluZ1wiKTtmdW5jdGlvbiBmbGF0dGVuU2luZ2xlQ2hpbGRJbnRvQ29udGV4dChlLG4sdCxyKXtpZihlJiZcIm9iamVjdFwiPT10eXBlb2YgZSl7dmFyIG89ZSxpPXZvaWQgMD09PW9bdF07XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKFJlYWN0Q29tcG9uZW50VHJlZUhvb2t8fChSZWFjdENvbXBvbmVudFRyZWVIb29rPXJlcXVpcmUoXCJyZWFjdC9saWIvUmVhY3RDb21wb25lbnRUcmVlSG9va1wiKSksaXx8XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FybmluZyghMSxcImZsYXR0ZW5DaGlsZHJlbiguLi4pOiBFbmNvdW50ZXJlZCB0d28gY2hpbGRyZW4gd2l0aCB0aGUgc2FtZSBrZXksIGAlc2AuIENoaWxkIGtleXMgbXVzdCBiZSB1bmlxdWU7IHdoZW4gdHdvIGNoaWxkcmVuIHNoYXJlIGEga2V5LCBvbmx5IHRoZSBmaXJzdCBjaGlsZCB3aWxsIGJlIHVzZWQuJXNcIixLZXlFc2NhcGVVdGlscy51bmVzY2FwZSh0KSxSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldFN0YWNrQWRkZW5kdW1CeUlEKHIpKSksaSYmbnVsbCE9biYmKG9bdF09bil9fWZ1bmN0aW9uIGZsYXR0ZW5DaGlsZHJlbihlLG4pe2lmKG51bGw9PWUpcmV0dXJuIGU7dmFyIHQ9e307cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj90cmF2ZXJzZUFsbENoaWxkcmVuKGUsZnVuY3Rpb24oZSx0LHIpe3JldHVybiBmbGF0dGVuU2luZ2xlQ2hpbGRJbnRvQ29udGV4dChlLHQscixuKX0sdCk6dHJhdmVyc2VBbGxDaGlsZHJlbihlLGZsYXR0ZW5TaW5nbGVDaGlsZEludG9Db250ZXh0LHQpLHR9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHByb2Nlc3MmJnByb2Nlc3MuZW52JiZcInRlc3RcIj09PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoUmVhY3RDb21wb25lbnRUcmVlSG9vaz1yZXF1aXJlKFwicmVhY3QvbGliL1JlYWN0Q29tcG9uZW50VHJlZUhvb2tcIikpLG1vZHVsZS5leHBvcnRzPWZsYXR0ZW5DaGlsZHJlbjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltWnNZWFIwWlc1RGFHbHNaSEpsYmk1cWN5SmRMQ0p1WVcxbGN5STZXeUpTWldGamRFTnZiWEJ2Ym1WdWRGUnlaV1ZJYjI5cklpd2lTMlY1UlhOallYQmxWWFJwYkhNaUxDSnlaWEYxYVhKbElpd2lkSEpoZG1WeWMyVkJiR3hEYUdsc1pISmxiaUlzSW5kaGNtNXBibWNpTENKbWJHRjBkR1Z1VTJsdVoyeGxRMmhwYkdSSmJuUnZRMjl1ZEdWNGRDSXNJblJ5WVhabGNuTmxRMjl1ZEdWNGRDSXNJbU5vYVd4a0lpd2libUZ0WlNJc0luTmxiR1pFWldKMVowbEVJaXdpY21WemRXeDBJaXdpYTJWNVZXNXBjWFZsSWl3aWRXNWtaV1pwYm1Wa0lpd2ljSEp2WTJWemN5SXNJbVZ1ZGlJc0lrNVBSRVZmUlU1V0lpd2lkVzVsYzJOaGNHVWlMQ0puWlhSVGRHRmphMEZrWkdWdVpIVnRRbmxKUkNJc0ltWnNZWFIwWlc1RGFHbHNaSEpsYmlJc0ltTm9hV3hrY21WdUlpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlUwRXNZVUZGUVN4SlFVbEpRU3gxUWtGS1FVTXNaVUZCYVVKRExGRkJRVkVzYjBKQlEzcENReXh2UWtGQmMwSkVMRkZCUVZFc2VVSkJRemxDUlN4UlFVRlZSaXhSUVVGUkxHOUNRVzFDZEVJc1UwRkJVMGNzT0VKQlFUaENReXhGUVVGcFFrTXNSVUZCVDBNc1JVRkJUVU1zUjBGRmJrVXNSMEZCU1Vnc1IwRkJPRU1zYVVKQlFYQkNRU3hGUVVFNFFpeERRVU14UkN4SlFVRkpTU3hGUVVGVFNpeEZRVU5VU3l4UFFVRTJRa01zU1VGQmFrSkdMRVZCUVU5R0xFZEJRMDBzWlVGQmVrSkxMRkZCUVZGRExFbEJRVWxETEZkQlExUm1MSGxDUVVOSVFTeDFRa0ZCZVVKRkxGRkJRVkVzY1VOQlJUbENVeXhIUVVOelFpeGxRVUY2UWtVc1VVRkJVVU1zU1VGQlNVTXNWVUZCTkVKWUxGTkJRVkVzUlVGQlR5eDVTMEZCYjB4SUxHVkJRV1ZsTEZOQlFWTlNMRWRCUVU5U0xIVkNRVUYxUW1sQ0xIRkNRVUZ4UWxJc1MwRkhkRlJGTEVkQlFYTkNMRTFCUVZSS0xFbEJRMlpITEVWQlFVOUdMRWRCUVZGRUxFbEJWWEpDTEZOQlFWTlhMR2RDUVVGblFrTXNSVUZCVlZZc1IwRkRha01zUjBGQlowSXNUVUZCV2xVc1JVRkRSaXhQUVVGUFFTeEZRVVZVTEVsQlFVbFVMRVZCUVZNc1IwRlRZaXhOUVZBMlFpeGxRVUY2UWtjc1VVRkJVVU1zU1VGQlNVTXNVMEZEWkZvc2IwSkJRVzlDWjBJc1JVRkJWU3hUUVVGVllpeEZRVUZwUWtNc1JVRkJUME1zUjBGRE9VUXNUMEZCVDBnc09FSkJRVGhDUXl4RlFVRnBRa01zUlVGQlQwTXNSVUZCVFVNc1NVRkRiRVZETEVkQlJVaFFMRzlDUVVGdlFtZENMRVZCUVZWa0xEaENRVUVyUWtzc1IwRkZlRVJCTEVWQmNFUmpMRzlDUVVGYVJ5eFRRVUV5UWtFc1VVRkJVVU1zUzBGQlowTXNVMEZCZWtKRUxGRkJRVkZETEVsQlFVbERMRmRCVFM5RVppeDFRa0ZCZVVKRkxGRkJRVkVzY1VOQmFVUnVRMnRDTEU5QlFVOURMRkZCUVZWSUlpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDNKbFlXTjBMV1J2YlM5c2FXSXZabXhoZEhSbGJrTm9hV3hrY21WdUxtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gZm9yRWFjaEFjY3VtdWxhdGVkKGMscixhKXtBcnJheS5pc0FycmF5KGMpP2MuZm9yRWFjaChyLGEpOmMmJnIuY2FsbChhLGMpfW1vZHVsZS5leHBvcnRzPWZvckVhY2hBY2N1bXVsYXRlZDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltWnZja1ZoWTJoQlkyTjFiWFZzWVhSbFpDNXFjeUpkTENKdVlXMWxjeUk2V3lKbWIzSkZZV05vUVdOamRXMTFiR0YwWldRaUxDSmhjbklpTENKallpSXNJbk5qYjNCbElpd2lRWEp5WVhraUxDSnBjMEZ5Y21GNUlpd2labTl5UldGamFDSXNJbU5oYkd3aUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25SeklsMHNJbTFoY0hCcGJtZHpJam9pUVVGVFFTeGhRVlZCTEZOQlFWTkJMRzFDUVVGdFFrTXNSVUZCUzBNc1JVRkJTVU1zUjBGREwwSkRMRTFCUVUxRExGRkJRVkZLTEVkQlEyaENRU3hGUVVGSlN5eFJRVUZSU2l4RlFVRkpReXhIUVVOUVJpeEhRVU5VUXl4RlFVRkhTeXhMUVVGTFNpeEZRVUZQUml4SFFVbHVRazhzVDBGQlQwTXNVVUZCVlZRaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Y21WaFkzUXRaRzl0TDJ4cFlpOW1iM0pGWVdOb1FXTmpkVzExYkdGMFpXUXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO2Z1bmN0aW9uIGdldEV2ZW50Q2hhckNvZGUoZSl7dmFyIHIsdD1lLmtleUNvZGU7cmV0dXJuXCJjaGFyQ29kZVwiaW4gZT8wPT09KHI9ZS5jaGFyQ29kZSkmJjEzPT09dCYmKHI9MTMpOnI9dCxyPj0zMnx8MTM9PT1yP3I6MH1tb2R1bGUuZXhwb3J0cz1nZXRFdmVudENoYXJDb2RlO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1kbGRFVjJaVzUwUTJoaGNrTnZaR1V1YW5NaVhTd2libUZ0WlhNaU9sc2laMlYwUlhabGJuUkRhR0Z5UTI5a1pTSXNJbTVoZEdsMlpVVjJaVzUwSWl3aVkyaGhja052WkdVaUxDSnJaWGxEYjJSbElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlVVRXNZVUZoUVN4VFFVRlRRU3hwUWtGQmFVSkRMRWRCUTNoQ0xFbEJRVWxETEVWQlEwRkRMRVZCUVZWR0xFVkJRVmxGTEZGQlowSXhRaXhOUVdSSkxHRkJRV05HTEVWQlNVTXNTMEZJYWtKRExFVkJRVmRFTEVWQlFWbERMRmRCUjFjc1MwRkJXa01zU1VGRGNFSkVMRVZCUVZjc1NVRkpZa0VzUlVGQlYwTXNSVUZMVkVRc1IwRkJXU3hKUVVGdFFpeExRVUZpUVN4RlFVTmlRU3hGUVVkR0xFVkJSMVJGTEU5QlFVOURMRkZCUVZWTUlpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDNKbFlXTjBMV1J2YlM5c2FXSXZaMlYwUlhabGJuUkRhR0Z5UTI5a1pTNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIGdldEV2ZW50Q2hhckNvZGU9cmVxdWlyZShcIi4vZ2V0RXZlbnRDaGFyQ29kZVwiKSxub3JtYWxpemVLZXk9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LHRyYW5zbGF0ZVRvS2V5PXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLDExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLDExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn07ZnVuY3Rpb24gZ2V0RXZlbnRLZXkoZSl7aWYoZS5rZXkpe3ZhciByPW5vcm1hbGl6ZUtleVtlLmtleV18fGUua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1yKXJldHVybiByfWlmKFwia2V5cHJlc3NcIj09PWUudHlwZSl7dmFyIHQ9Z2V0RXZlbnRDaGFyQ29kZShlKTtyZXR1cm4gMTM9PT10P1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKHQpfXJldHVyblwia2V5ZG93blwiPT09ZS50eXBlfHxcImtleXVwXCI9PT1lLnR5cGU/dHJhbnNsYXRlVG9LZXlbZS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifW1vZHVsZS5leHBvcnRzPWdldEV2ZW50S2V5O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1kbGRFVjJaVzUwUzJWNUxtcHpJbDBzSW01aGJXVnpJanBiSW1kbGRFVjJaVzUwUTJoaGNrTnZaR1VpTENKeVpYRjFhWEpsSWl3aWJtOXliV0ZzYVhwbFMyVjVJaXdpUlhOaklpd2lVM0JoWTJWaVlYSWlMQ0pNWldaMElpd2lWWEFpTENKU2FXZG9kQ0lzSWtSdmQyNGlMQ0pFWld3aUxDSlhhVzRpTENKTlpXNTFJaXdpUVhCd2N5SXNJbE5qY205c2JDSXNJazF2ZWxCeWFXNTBZV0pzWlV0bGVTSXNJblJ5WVc1emJHRjBaVlJ2UzJWNUlpd2lPQ0lzSWpraUxDSXhNaUlzSWpFeklpd2lNVFlpTENJeE55SXNJakU0SWl3aU1Ua2lMQ0l5TUNJc0lqSTNJaXdpTXpJaUxDSXpNeUlzSWpNMElpd2lNelVpTENJek5pSXNJak0zSWl3aU16Z2lMQ0l6T1NJc0lqUXdJaXdpTkRVaUxDSTBOaUlzSWpFeE1pSXNJakV4TXlJc0lqRXhOQ0lzSWpFeE5TSXNJakV4TmlJc0lqRXhOeUlzSWpFeE9DSXNJakV4T1NJc0lqRXlNQ0lzSWpFeU1TSXNJakV5TWlJc0lqRXlNeUlzSWpFME5DSXNJakUwTlNJc0lqSXlOQ0lzSW1kbGRFVjJaVzUwUzJWNUlpd2libUYwYVhabFJYWmxiblFpTENKclpYa2lMQ0owZVhCbElpd2lZMmhoY2tOdlpHVWlMQ0pUZEhKcGJtY2lMQ0ptY205dFEyaGhja052WkdVaUxDSnJaWGxEYjJSbElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlVVRXNZVUZGUVN4SlFVRkpRU3hwUWtGQmJVSkRMRkZCUVZFc2MwSkJUVE5DUXl4aFFVRmxMRU5CUTJwQ1F5eEpRVUZMTEZOQlEweERMRk5CUVZVc1NVRkRWa01zUzBGQlRTeFpRVU5PUXl4SFFVRkpMRlZCUTBwRExFMUJRVThzWVVGRFVFTXNTMEZCVFN4WlFVTk9ReXhKUVVGTExGTkJRMHhETEVsQlFVc3NTMEZEVEVNc1MwRkJUU3hqUVVOT1F5eExRVUZOTEdOQlEwNURMRTlCUVZFc1lVRkRVa01zWjBKQlFXbENMR2RDUVZGbVF5eGxRVUZwUWl4RFFVTnVRa01zUlVGQlJ5eFpRVU5JUXl4RlFVRkhMRTFCUTBoRExFZEJRVWtzVVVGRFNrTXNSMEZCU1N4UlFVTktReXhIUVVGSkxGRkJRMHBETEVkQlFVa3NWVUZEU2tNc1IwRkJTU3hOUVVOS1F5eEhRVUZKTEZGQlEwcERMRWRCUVVrc1YwRkRTa01zUjBGQlNTeFRRVU5LUXl4SFFVRkpMRWxCUTBwRExFZEJRVWtzVTBGRFNrTXNSMEZCU1N4WFFVTktReXhIUVVGSkxFMUJRMHBETEVkQlFVa3NUMEZEU2tNc1IwRkJTU3haUVVOS1F5eEhRVUZKTEZWQlEwcERMRWRCUVVrc1lVRkRTa01zUjBGQlNTeFpRVU5LUXl4SFFVRkpMRk5CUTBwRExFZEJRVWtzVTBGRFNrTXNTVUZCU3l4TFFVTk1ReXhKUVVGTExFdEJRMHhETEVsQlFVc3NTMEZEVEVNc1NVRkJTeXhMUVVOTVF5eEpRVUZMTEV0QlEweERMRWxCUVVzc1MwRkRURU1zU1VGQlN5eExRVU5NUXl4SlFVRkxMRXRCUTB4RExFbEJRVXNzUzBGRFRFTXNTVUZCU3l4TlFVTk1ReXhKUVVGTExFMUJRMHhETEVsQlFVc3NUVUZEVEVNc1NVRkJTeXhWUVVOTVF5eEpRVUZMTEdGQlEweERMRWxCUVVzc1VVRlBVQ3hUUVVGVFF5eFpRVUZaUXl4SFFVTnVRaXhIUVVGSlFTeEZRVUZaUXl4SlFVRkxMRU5CVFc1Q0xFbEJRVWxCTEVWQlFVMXdSQ3hoUVVGaGJVUXNSVUZCV1VNc1RVRkJVVVFzUlVGQldVTXNTVUZEZGtRc1IwRkJXU3hwUWtGQlVrRXNSVUZEUml4UFFVRlBRU3hGUVV0WUxFZEJRWGxDTEdGQlFYSkNSQ3hGUVVGWlJTeExRVUZ4UWl4RFFVTnVReXhKUVVGSlF5eEZRVUZYZUVRc2FVSkJRV2xDY1VRc1IwRkphRU1zVDBGQmIwSXNTMEZCWWtjc1JVRkJhMElzVVVGQlZVTXNUMEZCVDBNc1lVRkJZVVlzUjBGRmVrUXNUVUZCZVVJc1dVRkJja0pJTEVWQlFWbEZMRTFCUVRKRExGVkJRWEpDUml4RlFVRlpSU3hMUVVkNlEzaERMR1ZCUVdWelF5eEZRVUZaVFN4VlFVRlpMR1ZCUlhwRExFZEJSMVJETEU5QlFVOURMRkZCUVZWVUlpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDNKbFlXTjBMV1J2YlM5c2FXSXZaMlYwUlhabGJuUkxaWGt1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgbW9kaWZpZXJLZXlUb1Byb3A9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIG1vZGlmaWVyU3RhdGVHZXR0ZXIodCl7dmFyIGU9dGhpcy5uYXRpdmVFdmVudDtpZihlLmdldE1vZGlmaWVyU3RhdGUpcmV0dXJuIGUuZ2V0TW9kaWZpZXJTdGF0ZSh0KTt2YXIgcj1tb2RpZmllcktleVRvUHJvcFt0XTtyZXR1cm4hIXImJiEhZVtyXX1mdW5jdGlvbiBnZXRFdmVudE1vZGlmaWVyU3RhdGUodCl7cmV0dXJuIG1vZGlmaWVyU3RhdGVHZXR0ZXJ9bW9kdWxlLmV4cG9ydHM9Z2V0RXZlbnRNb2RpZmllclN0YXRlO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1kbGRFVjJaVzUwVFc5a2FXWnBaWEpUZEdGMFpTNXFjeUpkTENKdVlXMWxjeUk2V3lKdGIyUnBabWxsY2t0bGVWUnZVSEp2Y0NJc0lrRnNkQ0lzSWtOdmJuUnliMndpTENKTlpYUmhJaXdpVTJocFpuUWlMQ0p0YjJScFptbGxjbE4wWVhSbFIyVjBkR1Z5SWl3aWEyVjVRWEpuSWl3aWJtRjBhWFpsUlhabGJuUWlMQ0owYUdseklpd2laMlYwVFc5a2FXWnBaWEpUZEdGMFpTSXNJbXRsZVZCeWIzQWlMQ0puWlhSRmRtVnVkRTF2WkdsbWFXVnlVM1JoZEdVaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25SeklsMHNJbTFoY0hCcGJtZHpJam9pUVVGUlFTeGhRVTlCTEVsQlFVbEJMR3RDUVVGdlFpeERRVU4wUWtNc1NVRkJTeXhUUVVOTVF5eFJRVUZUTEZWQlExUkRMRXRCUVUwc1ZVRkRUa01zVFVGQlR5eFpRVTFVTEZOQlFWTkRMRzlDUVVGdlFrTXNSMEZETTBJc1NVRkRTVU1zUlVGRWFVSkRMRXRCUTFsRUxGbEJRMnBETEVkQlFVbEJMRVZCUVZsRkxHbENRVU5rTEU5QlFVOUdMRVZCUVZsRkxHbENRVUZwUWtnc1IwRkZkRU1zU1VGQlNVa3NSVUZCVlZZc2EwSkJRV3RDVFN4SFFVTm9ReXhSUVVGUFNTeExRVUZaU0N4RlFVRlpSeXhIUVVkcVF5eFRRVUZUUXl4elFrRkJjMEpLTEVkQlF6ZENMRTlCUVU5R0xHOUNRVWRVVHl4UFFVRlBReXhSUVVGVlJpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzFrYjIwdmJHbGlMMmRsZEVWMlpXNTBUVzlrYVdacFpYSlRkR0YwWlM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBnZXRFdmVudFRhcmdldChlKXt2YXIgdD1lLnRhcmdldHx8ZS5zcmNFbGVtZW50fHx3aW5kb3c7cmV0dXJuIHQuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJih0PXQuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpLDM9PT10Lm5vZGVUeXBlP3QucGFyZW50Tm9kZTp0fW1vZHVsZS5leHBvcnRzPWdldEV2ZW50VGFyZ2V0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1kbGRFVjJaVzUwVkdGeVoyVjBMbXB6SWwwc0ltNWhiV1Z6SWpwYkltZGxkRVYyWlc1MFZHRnlaMlYwSWl3aWJtRjBhWFpsUlhabGJuUWlMQ0owWVhKblpYUWlMQ0p6Y21ORmJHVnRaVzUwSWl3aWQybHVaRzkzSWl3aVkyOXljbVZ6Y0c5dVpHbHVaMVZ6WlVWc1pXMWxiblFpTENKdWIyUmxWSGx3WlNJc0luQmhjbVZ1ZEU1dlpHVWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRlJRU3hoUVZWQkxGTkJRVk5CTEdWQlFXVkRMRWRCUTNSQ0xFbEJRVWxETEVWQlFWTkVMRVZCUVZsRExGRkJRVlZFTEVWQlFWbEZMRmxCUVdORExFOUJVemRFTEU5QlRrbEdMRVZCUVU5SExEQkNRVU5VU0N4RlFVRlRRU3hGUVVGUFJ5eDVRa0ZMVXl4SlFVRndRa2dzUlVGQlQwa3NVMEZCYVVKS0xFVkJRVTlMTEZkQlFXRk1MRVZCUjNKRVRTeFBRVUZQUXl4UlFVRlZWQ0lzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEMxa2IyMHZiR2xpTDJkbGRFVjJaVzUwVkdGeVoyVjBMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBSZWFjdE5vZGVUeXBlcz1yZXF1aXJlKFwiLi9SZWFjdE5vZGVUeXBlc1wiKTtmdW5jdGlvbiBnZXRIb3N0Q29tcG9uZW50RnJvbUNvbXBvc2l0ZShlKXtmb3IodmFyIG87KG89ZS5fcmVuZGVyZWROb2RlVHlwZSk9PT1SZWFjdE5vZGVUeXBlcy5DT01QT1NJVEU7KWU9ZS5fcmVuZGVyZWRDb21wb25lbnQ7cmV0dXJuIG89PT1SZWFjdE5vZGVUeXBlcy5IT1NUP2UuX3JlbmRlcmVkQ29tcG9uZW50Om89PT1SZWFjdE5vZGVUeXBlcy5FTVBUWT9udWxsOnZvaWQgMH1tb2R1bGUuZXhwb3J0cz1nZXRIb3N0Q29tcG9uZW50RnJvbUNvbXBvc2l0ZTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltZGxkRWh2YzNSRGIyMXdiMjVsYm5SR2NtOXRRMjl0Y0c5emFYUmxMbXB6SWwwc0ltNWhiV1Z6SWpwYklsSmxZV04wVG05a1pWUjVjR1Z6SWl3aWNtVnhkV2x5WlNJc0ltZGxkRWh2YzNSRGIyMXdiMjVsYm5SR2NtOXRRMjl0Y0c5emFYUmxJaXdpYVc1emRDSXNJblI1Y0dVaUxDSmZjbVZ1WkdWeVpXUk9iMlJsVkhsd1pTSXNJa05QVFZCUFUwbFVSU0lzSWw5eVpXNWtaWEpsWkVOdmJYQnZibVZ1ZENJc0lraFBVMVFpTENKRlRWQlVXU0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVkZCTEdGQlJVRXNTVUZCU1VFc1pVRkJhVUpETEZGQlFWRXNiMEpCUlRkQ0xGTkJRVk5ETERoQ1FVRTRRa01zUjBGSGNrTXNTVUZHUVN4SlFVRkpReXhIUVVWSlFTeEZRVUZQUkN4RlFVRkxSU3h4UWtGQmRVSk1MR1ZCUVdWTkxGZEJRM2hFU0N4RlFVRlBRU3hGUVVGTFNTeHRRa0ZIWkN4UFFVRkpTQ3hKUVVGVFNpeGxRVUZsVVN4TFFVTnVRa3dzUlVGQlMwa3NiVUpCUTBoSUxFbEJRVk5LTEdWQlFXVlRMRTFCUXpGQ0xGVkJSRVlzUlVGTFZFTXNUMEZCVDBNc1VVRkJWVlFpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdFpHOXRMMnhwWWk5blpYUkliM04wUTI5dGNHOXVaVzUwUm5KdmJVTnZiWEJ2YzJsMFpTNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIElURVJBVE9SX1NZTUJPTD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixGQVVYX0lURVJBVE9SX1NZTUJPTD1cIkBAaXRlcmF0b3JcIjtmdW5jdGlvbiBnZXRJdGVyYXRvckZuKHQpe3ZhciByPXQmJihJVEVSQVRPUl9TWU1CT0wmJnRbSVRFUkFUT1JfU1lNQk9MXXx8dFtGQVVYX0lURVJBVE9SX1NZTUJPTF0pO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHIpcmV0dXJuIHJ9bW9kdWxlLmV4cG9ydHM9Z2V0SXRlcmF0b3JGbjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltZGxkRWwwWlhKaGRHOXlSbTR1YW5NaVhTd2libUZ0WlhNaU9sc2lTVlJGVWtGVVQxSmZVMWxOUWs5TUlpd2lVM2x0WW05c0lpd2lhWFJsY21GMGIzSWlMQ0pHUVZWWVgwbFVSVkpCVkU5U1gxTlpUVUpQVENJc0ltZGxkRWwwWlhKaGRHOXlSbTRpTENKdFlYbGlaVWwwWlhKaFlteGxJaXdpYVhSbGNtRjBiM0pHYmlJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVZOQkxHRkJTVUVzU1VGQlNVRXNaMEpCUVc5RExHMUNRVUZZUXl4UlFVRjVRa0VzVDBGQlQwTXNVMEZEZWtSRExIRkNRVUYxUWl4aFFXZENNMElzVTBGQlUwTXNZMEZCWTBNc1IwRkRja0lzU1VGQlNVTXNSVUZCWVVRc1NVRkJhMEpNTEdsQ1FVRnRRa3NzUlVGQlkwd3NhMEpCUVc5Q1N5eEZRVUZqUml4MVFrRkRkRWNzUjBGQk1FSXNiVUpCUVdaSExFVkJRMVFzVDBGQlQwRXNSVUZKV0VNc1QwRkJUME1zVVVGQlZVb2lMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F0Wkc5dEwyeHBZaTluWlhSSmRHVnlZWFJ2Y2tadUxtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gZ2V0TGVhZk5vZGUoZSl7Zm9yKDtlJiZlLmZpcnN0Q2hpbGQ7KWU9ZS5maXJzdENoaWxkO3JldHVybiBlfWZ1bmN0aW9uIGdldFNpYmxpbmdOb2RlKGUpe2Zvcig7ZTspe2lmKGUubmV4dFNpYmxpbmcpcmV0dXJuIGUubmV4dFNpYmxpbmc7ZT1lLnBhcmVudE5vZGV9fWZ1bmN0aW9uIGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQoZSx0KXtmb3IodmFyIG89Z2V0TGVhZk5vZGUoZSksbj0wLHI9MDtvOyl7aWYoMz09PW8ubm9kZVR5cGUpe2lmKHI9bitvLnRleHRDb250ZW50Lmxlbmd0aCxuPD10JiZyPj10KXJldHVybntub2RlOm8sb2Zmc2V0OnQtbn07bj1yfW89Z2V0TGVhZk5vZGUoZ2V0U2libGluZ05vZGUobykpfX1tb2R1bGUuZXhwb3J0cz1nZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1kbGRFNXZaR1ZHYjNKRGFHRnlZV04wWlhKUFptWnpaWFF1YW5NaVhTd2libUZ0WlhNaU9sc2laMlYwVEdWaFprNXZaR1VpTENKdWIyUmxJaXdpWm1seWMzUkRhR2xzWkNJc0ltZGxkRk5wWW14cGJtZE9iMlJsSWl3aWJtVjRkRk5wWW14cGJtY2lMQ0p3WVhKbGJuUk9iMlJsSWl3aVoyVjBUbTlrWlVadmNrTm9ZWEpoWTNSbGNrOW1abk5sZENJc0luSnZiM1FpTENKdlptWnpaWFFpTENKdWIyUmxVM1JoY25RaUxDSnViMlJsUlc1a0lpd2libTlrWlZSNWNHVWlMQ0owWlhoMFEyOXVkR1Z1ZENJc0lteGxibWQwYUNJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVZGQkxHRkJVMEVzVTBGQlUwRXNXVUZCV1VNc1IwRkRia0lzUzBGQlQwRXNSMEZCVVVFc1JVRkJTME1zV1VGRGJFSkVMRVZCUVU5QkxFVkJRVXRETEZkQlJXUXNUMEZCVDBRc1JVRlZWQ3hUUVVGVFJTeGxRVUZsUml4SFFVTjBRaXhMUVVGUFFTeEhRVUZOTEVOQlExZ3NSMEZCU1VFc1JVRkJTMGNzV1VGRFVDeFBRVUZQU0N4RlFVRkxSeXhaUVVWa1NDeEZRVUZQUVN4RlFVRkxTU3haUVZkb1FpeFRRVUZUUXl3d1FrRkJNRUpETEVWQlFVMURMRWRCUzNaRExFbEJTa0VzU1VGQlNWQXNSVUZCVDBRc1dVRkJXVThzUjBGRGJrSkZMRVZCUVZrc1JVRkRXa01zUlVGQlZTeEZRVVZRVkN4SFFVRk5MRU5CUTFnc1IwRkJjMElzU1VGQmJFSkJMRVZCUVV0VkxGTkJRV2RDTEVOQlIzWkNMRWRCUmtGRUxFVkJRVlZFTEVWQlFWbFNMRVZCUVV0WExGbEJRVmxETEU5QlJXNURTaXhIUVVGaFJDeEhRVUZWUlN4SFFVRlhSaXhGUVVOd1F5eE5RVUZQTEVOQlEweFFMRXRCUVUxQkxFVkJRMDVQTEU5QlFWRkJMRVZCUVZORExFZEJTWEpDUVN4RlFVRlpReXhGUVVka1ZDeEZRVUZQUkN4WlFVRlpSeXhsUVVGbFJpeExRVWwwUTJFc1QwRkJUME1zVVVGQlZWUWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F0Wkc5dEwyeHBZaTluWlhST2IyUmxSbTl5UTJoaGNtRmpkR1Z5VDJabWMyVjBMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBFeGVjdXRpb25FbnZpcm9ubWVudD1yZXF1aXJlKFwiZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnRcIiksY29udGVudEtleT1udWxsO2Z1bmN0aW9uIGdldFRleHRDb250ZW50QWNjZXNzb3IoKXtyZXR1cm4hY29udGVudEtleSYmRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NJiYoY29udGVudEtleT1cInRleHRDb250ZW50XCJpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ/XCJ0ZXh0Q29udGVudFwiOlwiaW5uZXJUZXh0XCIpLGNvbnRlbnRLZXl9bW9kdWxlLmV4cG9ydHM9Z2V0VGV4dENvbnRlbnRBY2Nlc3NvcjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltZGxkRlJsZUhSRGIyNTBaVzUwUVdOalpYTnpiM0l1YW5NaVhTd2libUZ0WlhNaU9sc2lSWGhsWTNWMGFXOXVSVzUyYVhKdmJtMWxiblFpTENKeVpYRjFhWEpsSWl3aVkyOXVkR1Z1ZEV0bGVTSXNJbWRsZEZSbGVIUkRiMjUwWlc1MFFXTmpaWE56YjNJaUxDSmpZVzVWYzJWRVQwMGlMQ0prYjJOMWJXVnVkQ0lzSW1SdlkzVnRaVzUwUld4bGJXVnVkQ0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVkZCTEdGQlJVRXNTVUZCU1VFc2NVSkJRWFZDUXl4UlFVRlJMR2xEUVVVdlFrTXNWMEZCWVN4TFFWRnFRaXhUUVVGVFF5eDVRa0ZOVUN4UFFVeExSQ3haUVVGalJpeHhRa0ZCY1VKSkxGbEJSM1JEUml4WFFVRmhMR2RDUVVGcFFrY3NVMEZCVTBNc1owSkJRV3RDTEdOQlFXZENMR0ZCUlhCRlNpeFhRVWRVU3l4UFFVRlBReXhSUVVGVlRDSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzFrYjIwdmJHbGlMMmRsZEZSbGVIUkRiMjUwWlc1MFFXTmpaWE56YjNJdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIEV4ZWN1dGlvbkVudmlyb25tZW50PXJlcXVpcmUoXCJmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKTtmdW5jdGlvbiBtYWtlUHJlZml4TWFwKGUsbil7dmFyIGk9e307cmV0dXJuIGlbZS50b0xvd2VyQ2FzZSgpXT1uLnRvTG93ZXJDYXNlKCksaVtcIldlYmtpdFwiK2VdPVwid2Via2l0XCIrbixpW1wiTW96XCIrZV09XCJtb3pcIituLGlbXCJtc1wiK2VdPVwiTVNcIituLGlbXCJPXCIrZV09XCJvXCIrbi50b0xvd2VyQ2FzZSgpLGl9dmFyIHZlbmRvclByZWZpeGVzPXthbmltYXRpb25lbmQ6bWFrZVByZWZpeE1hcChcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjptYWtlUHJlZml4TWFwKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6bWFrZVByZWZpeE1hcChcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDptYWtlUHJlZml4TWFwKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0scHJlZml4ZWRFdmVudE5hbWVzPXt9LHN0eWxlPXt9O2Z1bmN0aW9uIGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKGUpe2lmKHByZWZpeGVkRXZlbnROYW1lc1tlXSlyZXR1cm4gcHJlZml4ZWRFdmVudE5hbWVzW2VdO2lmKCF2ZW5kb3JQcmVmaXhlc1tlXSlyZXR1cm4gZTt2YXIgbj12ZW5kb3JQcmVmaXhlc1tlXTtmb3IodmFyIGkgaW4gbilpZihuLmhhc093blByb3BlcnR5KGkpJiZpIGluIHN0eWxlKXJldHVybiBwcmVmaXhlZEV2ZW50TmFtZXNbZV09bltpXTtyZXR1cm5cIlwifUV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSYmKHN0eWxlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIHZlbmRvclByZWZpeGVzLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIHZlbmRvclByZWZpeGVzLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIHZlbmRvclByZWZpeGVzLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIHZlbmRvclByZWZpeGVzLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbiksbW9kdWxlLmV4cG9ydHM9Z2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWU7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbWRsZEZabGJtUnZjbEJ5WldacGVHVmtSWFpsYm5ST1lXMWxMbXB6SWwwc0ltNWhiV1Z6SWpwYklrVjRaV04xZEdsdmJrVnVkbWx5YjI1dFpXNTBJaXdpY21WeGRXbHlaU0lzSW0xaGEyVlFjbVZtYVhoTllYQWlMQ0p6ZEhsc1pWQnliM0FpTENKbGRtVnVkRTVoYldVaUxDSndjbVZtYVhobGN5SXNJblJ2VEc5M1pYSkRZWE5sSWl3aWRtVnVaRzl5VUhKbFptbDRaWE1pTENKaGJtbHRZWFJwYjI1bGJtUWlMQ0poYm1sdFlYUnBiMjVwZEdWeVlYUnBiMjRpTENKaGJtbHRZWFJwYjI1emRHRnlkQ0lzSW5SeVlXNXphWFJwYjI1bGJtUWlMQ0p3Y21WbWFYaGxaRVYyWlc1MFRtRnRaWE1pTENKemRIbHNaU0lzSW1kbGRGWmxibVJ2Y2xCeVpXWnBlR1ZrUlhabGJuUk9ZVzFsSWl3aWNISmxabWw0VFdGd0lpd2lhR0Z6VDNkdVVISnZjR1Z5ZEhraUxDSmpZVzVWYzJWRVQwMGlMQ0prYjJOMWJXVnVkQ0lzSW1OeVpXRjBaVVZzWlcxbGJuUWlMQ0ozYVc1a2IzY2lMQ0poYm1sdFlYUnBiMjRpTENKMGNtRnVjMmwwYVc5dUlpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlVVRXNZVUZGUVN4SlFVRkpRU3h4UWtGQmRVSkRMRkZCUVZFc2FVTkJVMjVETEZOQlFWTkRMR05CUVdORExFVkJRVmRETEVkQlEyaERMRWxCUVVsRExFVkJRVmNzUjBGUlppeFBRVTVCUVN4RlFVRlRSaXhGUVVGVlJ5eGxRVUZwUWtZc1JVRkJWVVVzWTBGRE9VTkVMRVZCUVZNc1UwRkJWMFlzUjBGQllTeFRRVUZYUXl4RlFVTTFRME1zUlVGQlV5eE5RVUZSUml4SFFVRmhMRTFCUVZGRExFVkJRM1JEUXl4RlFVRlRMRXRCUVU5R0xFZEJRV0VzUzBGQlQwTXNSVUZEY0VORExFVkJRVk1zU1VGQlRVWXNSMEZCWVN4SlFVRk5ReXhGUVVGVlJTeGpRVVZ5UTBRc1JVRk5WQ3hKUVVGSlJTeGxRVUZwUWl4RFFVTnVRa01zWVVGQlkwNHNZMEZCWXl4WlFVRmhMR2RDUVVONlEwOHNiVUpCUVc5Q1VDeGpRVUZqTEZsQlFXRXNjMEpCUXk5RFVTeGxRVUZuUWxJc1kwRkJZeXhaUVVGaExHdENRVU16UTFNc1kwRkJaVlFzWTBGQll5eGhRVUZqTEd0Q1FVMTZRMVVzYlVKQlFYRkNMRWRCUzNKQ1F5eE5RVUZSTEVkQk9FSmFMRk5CUVZORExESkNRVUV5UWxZc1IwRkRiRU1zUjBGQlNWRXNiVUpCUVcxQ1VpeEhRVU55UWl4UFFVRlBVU3h0UWtGQmJVSlNMRWRCUTNKQ0xFbEJRVXRITEdWQlFXVklMRWRCUTNwQ0xFOUJRVTlCTEVWQlIxUXNTVUZCU1Zjc1JVRkJXVklzWlVGQlpVZ3NSMEZGTDBJc1NVRkJTeXhKUVVGSlJDeExRVUZoV1N4RlFVTndRaXhIUVVGSlFTeEZRVUZWUXl4bFFVRmxZaXhKUVVGalFTeExRVUZoVlN4TlFVTjBSQ3hQUVVGUFJDeHRRa0ZCYlVKU0xFZEJRV0ZYTEVWQlFWVmFMRWRCU1hKRUxFMUJRVThzUjBGNFEweElMSEZDUVVGeFFtbENMRmxCUTNaQ1NpeE5RVUZSU3l4VFFVRlRReXhqUVVGakxFOUJRVTlPTEUxQlRXaERMRzFDUVVGdlFrOHNaMEpCUTJwQ1lpeGxRVUZsUXl4aFFVRmhZU3hwUWtGRE5VSmtMR1ZCUVdWRkxHMUNRVUZ0UWxrc2FVSkJRMnhEWkN4bFFVRmxSeXhsUVVGbFZ5eFhRVWxxUXl4dlFrRkJjVUpFTEdWQlEyeENZaXhsUVVGbFNTeGpRVUZqVnl4WlFUUkNlRU5ETEU5QlFVOURMRkZCUVZWV0lpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDNKbFlXTjBMV1J2YlM5c2FXSXZaMlYwVm1WdVpHOXlVSEpsWm1sNFpXUkZkbVZ1ZEU1aGJXVXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciBSZWFjdERPTUNvbXBvbmVudFRyZWU9cmVxdWlyZShcIi4vUmVhY3RET01Db21wb25lbnRUcmVlXCIpO2Z1bmN0aW9uIGlzQ2hlY2thYmxlKGUpe3ZhciB0PWUudHlwZSxyPWUubm9kZU5hbWU7cmV0dXJuIHImJlwiaW5wdXRcIj09PXIudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PXR8fFwicmFkaW9cIj09PXQpfWZ1bmN0aW9uIGdldFRyYWNrZXIoZSl7cmV0dXJuIGUuX3dyYXBwZXJTdGF0ZS52YWx1ZVRyYWNrZXJ9ZnVuY3Rpb24gYXR0YWNoVHJhY2tlcihlLHQpe2UuX3dyYXBwZXJTdGF0ZS52YWx1ZVRyYWNrZXI9dH1mdW5jdGlvbiBkZXRhY2hUcmFja2VyKGUpe2UuX3dyYXBwZXJTdGF0ZS52YWx1ZVRyYWNrZXI9bnVsbH1mdW5jdGlvbiBnZXRWYWx1ZUZyb21Ob2RlKGUpe3ZhciB0O3JldHVybiBlJiYodD1pc0NoZWNrYWJsZShlKT9cIlwiK2UuY2hlY2tlZDplLnZhbHVlKSx0fXZhciBpbnB1dFZhbHVlVHJhY2tpbmc9e19nZXRUcmFja2VyRnJvbU5vZGU6ZnVuY3Rpb24oZSl7cmV0dXJuIGdldFRyYWNrZXIoUmVhY3RET01Db21wb25lbnRUcmVlLmdldEluc3RhbmNlRnJvbU5vZGUoZSkpfSx0cmFjazpmdW5jdGlvbihlKXtpZighZ2V0VHJhY2tlcihlKSl7dmFyIHQ9UmVhY3RET01Db21wb25lbnRUcmVlLmdldE5vZGVGcm9tSW5zdGFuY2UoZSkscj1pc0NoZWNrYWJsZSh0KT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQuY29uc3RydWN0b3IucHJvdG90eXBlLHIpLG49XCJcIit0W3JdO3QuaGFzT3duUHJvcGVydHkocil8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIGEuZ2V0fHxcImZ1bmN0aW9uXCIhPXR5cGVvZiBhLnNldHx8KE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LHIse2VudW1lcmFibGU6YS5lbnVtZXJhYmxlLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYS5nZXQuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGUpe249XCJcIitlLGEuc2V0LmNhbGwodGhpcyxlKX19KSxhdHRhY2hUcmFja2VyKGUse2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIG59LHNldFZhbHVlOmZ1bmN0aW9uKGUpe249XCJcIitlfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXtkZXRhY2hUcmFja2VyKGUpLGRlbGV0ZSB0W3JdfX0pKX19LHVwZGF0ZVZhbHVlSWZDaGFuZ2VkOmZ1bmN0aW9uKGUpe2lmKCFlKXJldHVybiExO3ZhciB0PWdldFRyYWNrZXIoZSk7aWYoIXQpcmV0dXJuIGlucHV0VmFsdWVUcmFja2luZy50cmFjayhlKSwhMDt2YXIgcj10LmdldFZhbHVlKCksYT1nZXRWYWx1ZUZyb21Ob2RlKFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKGUpKTtyZXR1cm4gYSE9PXImJih0LnNldFZhbHVlKGEpLCEwKX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKGUpe3ZhciB0PWdldFRyYWNrZXIoZSk7dCYmdC5zdG9wVHJhY2tpbmcoKX19O21vZHVsZS5leHBvcnRzPWlucHV0VmFsdWVUcmFja2luZztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltbHVjSFYwVm1Gc2RXVlVjbUZqYTJsdVp5NXFjeUpkTENKdVlXMWxjeUk2V3lKU1pXRmpkRVJQVFVOdmJYQnZibVZ1ZEZSeVpXVWlMQ0p5WlhGMWFYSmxJaXdpYVhORGFHVmphMkZpYkdVaUxDSmxiR1Z0SWl3aWRIbHdaU0lzSW01dlpHVk9ZVzFsSWl3aWRHOU1iM2RsY2tOaGMyVWlMQ0puWlhSVWNtRmphMlZ5SWl3aWFXNXpkQ0lzSWw5M2NtRndjR1Z5VTNSaGRHVWlMQ0oyWVd4MVpWUnlZV05yWlhJaUxDSmhkSFJoWTJoVWNtRmphMlZ5SWl3aWRISmhZMnRsY2lJc0ltUmxkR0ZqYUZSeVlXTnJaWElpTENKblpYUldZV3gxWlVaeWIyMU9iMlJsSWl3aWJtOWtaU0lzSW5aaGJIVmxJaXdpWTJobFkydGxaQ0lzSW1sdWNIVjBWbUZzZFdWVWNtRmphMmx1WnlJc0lsOW5aWFJVY21GamEyVnlSbkp2YlU1dlpHVWlMQ0puWlhSSmJuTjBZVzVqWlVaeWIyMU9iMlJsSWl3aWRISmhZMnNpTENKblpYUk9iMlJsUm5KdmJVbHVjM1JoYm1ObElpd2lkbUZzZFdWR2FXVnNaQ0lzSW1SbGMyTnlhWEIwYjNJaUxDSlBZbXBsWTNRaUxDSm5aWFJQZDI1UWNtOXdaWEowZVVSbGMyTnlhWEIwYjNJaUxDSmpiMjV6ZEhKMVkzUnZjaUlzSW5CeWIzUnZkSGx3WlNJc0ltTjFjbkpsYm5SV1lXeDFaU0lzSW1oaGMwOTNibEJ5YjNCbGNuUjVJaXdpWjJWMElpd2ljMlYwSWl3aVpHVm1hVzVsVUhKdmNHVnlkSGtpTENKbGJuVnRaWEpoWW14bElpd2lZMjl1Wm1sbmRYSmhZbXhsSWl3aVkyRnNiQ0lzSW5Sb2FYTWlMQ0puWlhSV1lXeDFaU0lzSW5ObGRGWmhiSFZsSWl3aWMzUnZjRlJ5WVdOcmFXNW5JaXdpZFhCa1lYUmxWbUZzZFdWSlprTm9ZVzVuWldRaUxDSnNZWE4wVm1Gc2RXVWlMQ0p1WlhoMFZtRnNkV1VpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZSUVN4aFFVVkJMRWxCUVVsQkxITkNRVUYzUWtNc1VVRkJVU3d5UWtGRmNFTXNVMEZCVTBNc1dVRkJXVU1zUjBGRGJrSXNTVUZCU1VNc1JVRkJUMFFzUlVGQlMwTXNTMEZEV2tNc1JVRkJWMFlzUlVGQlMwVXNVMEZEY0VJc1QwRkJUMEVzUjBGQmRVTXNWVUZCTTBKQkxFVkJRVk5ETEdkQ1FVRjFReXhoUVVGVVJpeEhRVUZuUXl4VlFVRlVRU3hIUVVkdVJpeFRRVUZUUnl4WFFVRlhReXhIUVVOc1FpeFBRVUZQUVN4RlFVRkxReXhqUVVGalF5eGhRVWMxUWl4VFFVRlRReXhqUVVGalNDeEZRVUZOU1N4SFFVTXpRa29zUlVGQlMwTXNZMEZCWTBNc1lVRkJaVVVzUlVGSGNFTXNVMEZCVTBNc1kwRkJZMHdzUjBGRGNrSkJMRVZCUVV0RExHTkJRV05ETEdGQlFXVXNTMEZIY0VNc1UwRkJVMGtzYVVKQlFXbENReXhIUVVONFFpeEpRVUZKUXl4RlFVbEtMRTlCU0VsRUxFbEJRMFpETEVWQlFWRmtMRmxCUVZsaExFZEJRVkVzUjBGQlMwRXNSVUZCUzBVc1VVRkJWVVlzUlVGQlMwTXNUMEZGYUVSQkxFVkJSMVFzU1VGQlNVVXNiVUpCUVhGQ0xFTkJSWFpDUXl4dlFrRkJjVUlzVTBGQlZVb3NSMEZETjBJc1QwRkJUMUlzVjBGQlYxQXNjMEpCUVhOQ2IwSXNiMEpCUVc5Q1RDeExRVWs1UkUwc1RVRkJUeXhUUVVGVllpeEhRVU5tTEVsQlFVbEVMRmRCUVZkRExFZEJRV1lzUTBGSlFTeEpRVUZKVHl4RlFVRlBaaXh6UWtGQmMwSnpRaXh2UWtGQmIwSmtMRWRCUTJwRVpTeEZRVUZoY2tJc1dVRkJXV0VzUjBGQlVTeFZRVUZaTEZGQlF6ZERVeXhGUVVGaFF5eFBRVUZQUXl4NVFrRkJlVUpZTEVWQlFVdFpMRmxCUVZsRExGVkJRVmRNTEVkQlJYcEZUU3hGUVVGbExFZEJRVXRrTEVWQlFVdFJMRWRCVFhwQ1VpeEZRVUZMWlN4bFFVRmxVQ3hKUVVGNVF5eHRRa0ZCYmtKRExFVkJRVmRQTEV0QlFXZEVMRzFDUVVGdVFsQXNSVUZCVjFFc1RVRkpha2RRTEU5QlFVOVJMR1ZCUVdWc1FpeEZRVUZOVVN4RlFVRlpMRU5CUTNSRFZ5eFhRVUZaVml4RlFVRlhWU3hYUVVOMlFrTXNZMEZCWXl4RlFVTmtTaXhKUVVGTExGZEJRMGdzVDBGQlQxQXNSVUZCVjA4c1NVRkJTVXNzUzBGQlMwTXNUMEZGTjBKTUxFbEJRVXNzVTBGQlZXaENMRWRCUTJKaExFVkJRV1VzUjBGQlMySXNSVUZEY0VKUkxFVkJRVmRSTEVsQlFVbEpMRXRCUVV0RExFdEJRVTF5UWl4TlFVazVRa3dzWTBGQlkwZ3NSVUZCVFN4RFFVTnNRamhDTEZOQlFWVXNWMEZEVWl4UFFVRlBWQ3hIUVVWVVZTeFRRVUZWTEZOQlFWVjJRaXhIUVVOc1FtRXNSVUZCWlN4SFFVRkxZaXhIUVVWMFFuZENMR0ZCUVdNc1YwRkRXak5DTEdOQlFXTk1MRlZCUTFCUExFVkJRVXRSTEZOQlMyeENhMElzY1VKQlFYTkNMRk5CUVZWcVF5eEhRVU01UWl4SlFVRkxRU3hGUVVOSUxFOUJRVThzUlVGRlZDeEpRVUZKU1N4RlFVRlZUQ3hYUVVGWFF5eEhRVVY2UWl4SlFVRkxTU3hGUVVWSUxFOUJSRUZOTEcxQ1FVRnRRa2NzVFVGQlRXSXNTVUZEYkVJc1JVRkhWQ3hKUVVGSmEwTXNSVUZCV1RsQ0xFVkJRVkV3UWl4WFFVTndRa3NzUlVGQldUZENMR2xDUVVGcFFtUXNjMEpCUVhOQ2MwSXNiMEpCUVc5Q1pDeEpRVVV6UlN4UFFVRkpiVU1zU1VGQlkwUXNTVUZEYUVJNVFpeEZRVUZSTWtJc1UwRkJVMGtzU1VGRFZpeEpRVXRZU0N4aFFVRmpMRk5CUVZWb1F5eEhRVU4wUWl4SlFVRkpTU3hGUVVGVlRDeFhRVUZYUXl4SFFVTnlRa2tzUjBGRFJrRXNSVUZCVVRSQ0xHbENRVXRrU1N4UFFVRlBReXhSUVVGVk0wSWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F0Wkc5dEwyeHBZaTlwYm5CMWRGWmhiSFZsVkhKaFkydHBibWN1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgX3Byb2RJbnZhcmlhbnQ9cmVxdWlyZShcIi4vcmVhY3RQcm9kSW52YXJpYW50XCIpLF9hc3NpZ249cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksUmVhY3RDb21wb3NpdGVDb21wb25lbnQ9cmVxdWlyZShcIi4vUmVhY3RDb21wb3NpdGVDb21wb25lbnRcIiksUmVhY3RFbXB0eUNvbXBvbmVudD1yZXF1aXJlKFwiLi9SZWFjdEVtcHR5Q29tcG9uZW50XCIpLFJlYWN0SG9zdENvbXBvbmVudD1yZXF1aXJlKFwiLi9SZWFjdEhvc3RDb21wb25lbnRcIiksZ2V0TmV4dERlYnVnSUQ9cmVxdWlyZShcInJlYWN0L2xpYi9nZXROZXh0RGVidWdJRFwiKSxpbnZhcmlhbnQ9cmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKSx3YXJuaW5nPXJlcXVpcmUoXCJmYmpzL2xpYi93YXJuaW5nXCIpLFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50V3JhcHBlcj1mdW5jdGlvbihlKXt0aGlzLmNvbnN0cnVjdChlKX07ZnVuY3Rpb24gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKGUpe2lmKGUpe3ZhciB0PWUuZ2V0TmFtZSgpO2lmKHQpcmV0dXJuXCIgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYFwiK3QrXCJgLlwifXJldHVyblwiXCJ9ZnVuY3Rpb24gaXNJbnRlcm5hbENvbXBvbmVudFR5cGUoZSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZSYmdm9pZCAwIT09ZS5wcm90b3R5cGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGUucHJvdG90eXBlLm1vdW50Q29tcG9uZW50JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnByb3RvdHlwZS5yZWNlaXZlQ29tcG9uZW50fWZ1bmN0aW9uIGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQoZSx0KXt2YXIgbjtpZihudWxsPT09ZXx8ITE9PT1lKW49UmVhY3RFbXB0eUNvbXBvbmVudC5jcmVhdGUoaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCk7ZWxzZSBpZihcIm9iamVjdFwiPT10eXBlb2YgZSl7dmFyIG89ZSxyPW8udHlwZTtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiByJiZcInN0cmluZ1wiIT10eXBlb2Ygcil7dmFyIHA9XCJcIjtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYodm9pZCAwPT09cnx8XCJvYmplY3RcIj09dHlwZW9mIHImJm51bGwhPT1yJiYwPT09T2JqZWN0LmtleXMocikubGVuZ3RoKSYmKHArPVwiIFlvdSBsaWtlbHkgZm9yZ290IHRvIGV4cG9ydCB5b3VyIGNvbXBvbmVudCBmcm9tIHRoZSBmaWxlIGl0J3MgZGVmaW5lZCBpbi5cIikscCs9Z2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKG8uX293bmVyKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcIkVsZW1lbnQgdHlwZSBpcyBpbnZhbGlkOiBleHBlY3RlZCBhIHN0cmluZyAoZm9yIGJ1aWx0LWluIGNvbXBvbmVudHMpIG9yIGEgY2xhc3MvZnVuY3Rpb24gKGZvciBjb21wb3NpdGUgY29tcG9uZW50cykgYnV0IGdvdDogJXMuJXNcIixudWxsPT1yP3I6dHlwZW9mIHIscCk6X3Byb2RJbnZhcmlhbnQoXCIxMzBcIixudWxsPT1yP3I6dHlwZW9mIHIscCl9XCJzdHJpbmdcIj09dHlwZW9mIG8udHlwZT9uPVJlYWN0SG9zdENvbXBvbmVudC5jcmVhdGVJbnRlcm5hbENvbXBvbmVudChvKTppc0ludGVybmFsQ29tcG9uZW50VHlwZShvLnR5cGUpPyhuPW5ldyBvLnR5cGUobykpLmdldEhvc3ROb2RlfHwobi5nZXRIb3N0Tm9kZT1uLmdldE5hdGl2ZU5vZGUpOm49bmV3IFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50V3JhcHBlcihvKX1lbHNlXCJzdHJpbmdcIj09dHlwZW9mIGV8fFwibnVtYmVyXCI9PXR5cGVvZiBlP249UmVhY3RIb3N0Q29tcG9uZW50LmNyZWF0ZUluc3RhbmNlRm9yVGV4dChlKTpcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcIkVuY291bnRlcmVkIGludmFsaWQgUmVhY3Qgbm9kZSBvZiB0eXBlICVzXCIsdHlwZW9mIGUpOl9wcm9kSW52YXJpYW50KFwiMTMxXCIsdHlwZW9mIGUpO3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJlwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcoXCJmdW5jdGlvblwiPT10eXBlb2Ygbi5tb3VudENvbXBvbmVudCYmXCJmdW5jdGlvblwiPT10eXBlb2Ygbi5yZWNlaXZlQ29tcG9uZW50JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBuLmdldEhvc3ROb2RlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBuLnVubW91bnRDb21wb25lbnQsXCJPbmx5IFJlYWN0IENvbXBvbmVudHMgY2FuIGJlIG1vdW50ZWQuXCIpLG4uX21vdW50SW5kZXg9MCxuLl9tb3VudEltYWdlPW51bGwsXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKG4uX2RlYnVnSUQ9dD9nZXROZXh0RGVidWdJRCgpOjApLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJk9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyYmT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKG4pLG59X2Fzc2lnbihSZWFjdENvbXBvc2l0ZUNvbXBvbmVudFdyYXBwZXIucHJvdG90eXBlLFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50LHtfaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudDppbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50fSksbW9kdWxlLmV4cG9ydHM9aW5zdGFudGlhdGVSZWFjdENvbXBvbmVudDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltbHVjM1JoYm5ScFlYUmxVbVZoWTNSRGIyMXdiMjVsYm5RdWFuTWlYU3dpYm1GdFpYTWlPbHNpWDNCeWIyUkpiblpoY21saGJuUWlMQ0p5WlhGMWFYSmxJaXdpWDJGemMybG5iaUlzSWxKbFlXTjBRMjl0Y0c5emFYUmxRMjl0Y0c5dVpXNTBJaXdpVW1WaFkzUkZiWEIwZVVOdmJYQnZibVZ1ZENJc0lsSmxZV04wU0c5emRFTnZiWEJ2Ym1WdWRDSXNJbWRsZEU1bGVIUkVaV0oxWjBsRUlpd2lhVzUyWVhKcFlXNTBJaXdpZDJGeWJtbHVaeUlzSWxKbFlXTjBRMjl0Y0c5emFYUmxRMjl0Y0c5dVpXNTBWM0poY0hCbGNpSXNJbVZzWlcxbGJuUWlMQ0owYUdseklpd2lZMjl1YzNSeWRXTjBJaXdpWjJWMFJHVmpiR0Z5WVhScGIyNUZjbkp2Y2tGa1pHVnVaSFZ0SWl3aWIzZHVaWElpTENKdVlXMWxJaXdpWjJWMFRtRnRaU0lzSW1selNXNTBaWEp1WVd4RGIyMXdiMjVsYm5SVWVYQmxJaXdpZEhsd1pTSXNJbkJ5YjNSdmRIbHdaU0lzSW0xdmRXNTBRMjl0Y0c5dVpXNTBJaXdpY21WalpXbDJaVU52YlhCdmJtVnVkQ0lzSW1sdWMzUmhiblJwWVhSbFVtVmhZM1JEYjIxd2IyNWxiblFpTENKdWIyUmxJaXdpYzJodmRXeGtTR0YyWlVSbFluVm5TVVFpTENKcGJuTjBZVzVqWlNJc0ltTnlaV0YwWlNJc0ltbHVabThpTENKd2NtOWpaWE56SWl3aVpXNTJJaXdpVGs5RVJWOUZUbFlpTENKMWJtUmxabWx1WldRaUxDSlBZbXBsWTNRaUxDSnJaWGx6SWl3aWJHVnVaM1JvSWl3aVgyOTNibVZ5SWl3aVkzSmxZWFJsU1c1MFpYSnVZV3hEYjIxd2IyNWxiblFpTENKblpYUkliM04wVG05a1pTSXNJbWRsZEU1aGRHbDJaVTV2WkdVaUxDSmpjbVZoZEdWSmJuTjBZVzVqWlVadmNsUmxlSFFpTENKMWJtMXZkVzUwUTI5dGNHOXVaVzUwSWl3aVgyMXZkVzUwU1c1a1pYZ2lMQ0pmYlc5MWJuUkpiV0ZuWlNJc0lsOWtaV0oxWjBsRUlpd2ljSEpsZG1WdWRFVjRkR1Z1YzJsdmJuTWlMQ0pmYVc1emRHRnVkR2xoZEdWU1pXRmpkRU52YlhCdmJtVnVkQ0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVkZCTEdGQlJVRXNTVUZCU1VFc1pVRkJhVUpETEZGQlFWRXNkMEpCUTNwQ1F5eFJRVUZWUkN4UlFVRlJMR2xDUVVWc1FrVXNkMEpCUVRCQ1JpeFJRVUZSTERaQ1FVTnNRMGNzYjBKQlFYTkNTQ3hSUVVGUkxIbENRVU01UWtrc2JVSkJRWEZDU2l4UlFVRlJMSGRDUVVVM1Frc3NaVUZCYVVKTUxGRkJRVkVzTkVKQlEzcENUU3hWUVVGWlRpeFJRVUZSTEhOQ1FVTndRazhzVVVGQlZWQXNVVUZCVVN4dlFrRkhiRUpSTEN0Q1FVRnBReXhUUVVGVlF5eEhRVU0zUTBNc1MwRkJTME1zVlVGQlZVWXNTVUZIYWtJc1UwRkJVMGNzTkVKQlFUUkNReXhIUVVOdVF5eEhRVUZKUVN4RlFVRlBMRU5CUTFRc1NVRkJTVU1zUlVGQlQwUXNSVUZCVFVVc1ZVRkRha0lzUjBGQlNVUXNSVUZEUml4TlFVRlBMR2REUVVGclEwRXNSVUZCVHl4TFFVZHdSQ3hOUVVGUExFZEJWVlFzVTBGQlUwVXNkMEpCUVhkQ1F5eEhRVU12UWl4TlFVRjFRaXh0UWtGQlZFRXNVVUZCYVVRc1NVRkJia0pCTEVWQlFVdERMRmRCUVhORkxHMUNRVUZzUTBRc1JVRkJTME1zVlVGQlZVTXNaMEpCUVRSRkxHMUNRVUZ3UTBZc1JVRkJTME1zVlVGQlZVVXNhVUpCVnpkS0xGTkJRVk5ETERCQ1FVRXdRa01zUlVGQlRVTXNSMEZEZGtNc1NVRkJTVU1zUlVGRlNpeEhRVUZoTEU5QlFWUkdMRWxCUVRCQ0xFbEJRVlJCTEVWQlEyNUNSU3hGUVVGWGNrSXNiMEpCUVc5Q2MwSXNUMEZCVDBvc1owTkJRMnBETEVkQlFXOUNMR2xDUVVGVVF5eEZRVUZ0UWl4RFFVTnVReXhKUVVGSllpeEZRVUZWWVN4RlFVTldUQ3hGUVVGUFVpeEZRVUZSVVN4TFFVTnVRaXhIUVVGdlFpeHRRa0ZCVkVFc1IwRkJkVU1zYVVKQlFWUkJMRVZCUVcxQ0xFTkJRekZFTEVsQlFVbFRMRVZCUVU4c1IwRkRhMElzWlVGQmVrSkRMRkZCUVZGRExFbEJRVWxETEdkQ1FVTkVReXhKUVVGVVlpeEhRVUZ6UXl4cFFrRkJWRUVzUjBGQk9FSXNUMEZCVkVFc1IwRkJPRU1zU1VGQk4wSmpMRTlCUVU5RExFdEJRVXRtTEVkQlFVMW5RaXhWUVVOMlJsQXNSMEZCVVN3NFJVRkhXa0VzUjBGQlVXUXNORUpCUVRSQ1NDeEZRVUZSZVVJc1VVRkRWaXhsUVVGNlFsQXNVVUZCVVVNc1NVRkJTVU1zVTBGQk5FSjJRaXhYUVVGVkxFVkJRVThzY1VsQlFUaEpMRTFCUVZKWExFVkJRV1ZCTEZOQlFXTkJMRVZCUVUxVExFZEJRVkV6UWl4bFFVRmxMRTFCUVdVc1RVRkJVbXRDTEVWQlFXVkJMRk5CUVdOQkxFVkJRVTFUTEVkQlNXeFNMR2xDUVVGcVFtcENMRVZCUVZGUkxFdEJRMnBDVHl4RlFVRlhjRUlzYlVKQlFXMUNLMElzZDBKQlFYZENNVUlzUjBGRE4wTlBMSGRDUVVGM1FsQXNSVUZCVVZFc1QwRkpla05QTEVWQlFWY3NTVUZCU1dZc1JVRkJVVkVzUzBGQlMxSXNTVUZIWkRKQ0xHTkJRMXBhTEVWQlFWTlpMRmxCUVdOYUxFVkJRVk5oTEdWQlIyeERZaXhGUVVGWExFbEJRVWxvUWl3clFrRkJLMEpETEU5QlJYWkNMR2xDUVVGVVlTeEhRVUZ4UXl4cFFrRkJWRUVzUlVGRE5VTkZMRVZCUVZkd1FpeHRRa0ZCYlVKclF5eHpRa0ZCYzBKb1FpeEhRVVZzUWl4bFFVRjZRa3NzVVVGQlVVTXNTVUZCU1VNc1UwRkJORUoyUWl4WFFVRlZMRVZCUVU4c2JVUkJRVzlFWjBJc1IwRkJVWFpDTEdWQlFXVXNZVUZCWTNWQ0xFZEJlVUkzU2l4TlFYUkNOa0lzWlVGQmVrSkxMRkZCUVZGRExFbEJRVWxETEZWQlExY3NaVUZCZWtKR0xGRkJRVkZETEVsQlFVbERMRlZCUVRSQ2RFSXNVVUZCTWtNc2JVSkJRVFZDYVVJc1JVRkJVMHdzWjBKQlFYTkZMRzFDUVVFNVFrc3NSVUZCVTBvc2EwSkJRVzFGTEcxQ1FVRjZRa2tzUlVGQlUxa3NZVUZCYlVVc2JVSkJRVGxDV2l4RlFVRlRaU3hwUWtGQmFVTXNlVU5CVFhKUVppeEZRVUZUWjBJc1dVRkJZeXhGUVVOMlFtaENMRVZCUVZOcFFpeFpRVUZqTEV0QlJVMHNaVUZCZWtKa0xGRkJRVkZETEVsQlFVbERMRmRCUTJSTUxFVkJRVk5yUWl4VFFVRlhia0lzUlVGQmIwSnNRaXhwUWtGQmJVSXNSMEZMYUVNc1pVRkJla0p6UWl4UlFVRlJReXhKUVVGSlF5eFZRVU5XUlN4UFFVRlBXU3h0UWtGRFZGb3NUMEZCVDFrc2EwSkJRV3RDYmtJc1IwRkpkRUpCTEVWQlIxUjJRaXhSUVVGUlR5d3JRa0ZCSzBKVkxGVkJRVmRvUWl4M1FrRkJlVUlzUTBGRGVrVXdReXd5UWtGQk5FSjJRaXcwUWtGSE9VSjNRaXhQUVVGUFF5eFJRVUZWZWtJaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Y21WaFkzUXRaRzl0TDJ4cFlpOXBibk4wWVc1MGFXRjBaVkpsWVdOMFEyOXRjRzl1Wlc1MExtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIHVzZUhhc0ZlYXR1cmUsRXhlY3V0aW9uRW52aXJvbm1lbnQ9cmVxdWlyZShcImZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO2Z1bmN0aW9uIGlzRXZlbnRTdXBwb3J0ZWQoZSx0KXtpZighRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NfHx0JiYhKFwiYWRkRXZlbnRMaXN0ZW5lclwiaW4gZG9jdW1lbnQpKXJldHVybiExO3ZhciBuPVwib25cIitlLHU9biBpbiBkb2N1bWVudDtpZighdSl7dmFyIGk9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtpLnNldEF0dHJpYnV0ZShuLFwicmV0dXJuO1wiKSx1PVwiZnVuY3Rpb25cIj09dHlwZW9mIGlbbl19cmV0dXJuIXUmJnVzZUhhc0ZlYXR1cmUmJlwid2hlZWxcIj09PWUmJih1PWRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoXCJFdmVudHMud2hlZWxcIixcIjMuMFwiKSksdX1FeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00mJih1c2VIYXNGZWF0dXJlPWRvY3VtZW50LmltcGxlbWVudGF0aW9uJiZkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlJiYhMCE9PWRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoXCJcIixcIlwiKSksbW9kdWxlLmV4cG9ydHM9aXNFdmVudFN1cHBvcnRlZDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltbHpSWFpsYm5SVGRYQndiM0owWldRdWFuTWlYU3dpYm1GdFpYTWlPbHNpZFhObFNHRnpSbVZoZEhWeVpTSXNJa1Y0WldOMWRHbHZia1Z1ZG1seWIyNXRaVzUwSWl3aWNtVnhkV2x5WlNJc0ltbHpSWFpsYm5SVGRYQndiM0owWldRaUxDSmxkbVZ1ZEU1aGJXVlRkV1ptYVhnaUxDSmpZWEIwZFhKbElpd2lZMkZ1VlhObFJFOU5JaXdpWkc5amRXMWxiblFpTENKbGRtVnVkRTVoYldVaUxDSnBjMU4xY0hCdmNuUmxaQ0lzSW1Wc1pXMWxiblFpTENKamNtVmhkR1ZGYkdWdFpXNTBJaXdpYzJWMFFYUjBjbWxpZFhSbElpd2lhVzF3YkdWdFpXNTBZWFJwYjI0aUxDSm9ZWE5HWldGMGRYSmxJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJVVUVzWVVGRlFTeEpRVVZKUVN4alFVWkJReXh4UWtGQmRVSkRMRkZCUVZFc2FVTkJkMEp1UXl4VFFVRlRReXhwUWtGQmFVSkRMRVZCUVdsQ1F5eEhRVU42UXl4SlFVRkxTaXh4UWtGQmNVSkxMRmRCUVdGRUxFdEJRV0VzY1VKQlFYTkNSU3hWUVVONFJTeFBRVUZQTEVWQlIxUXNTVUZCU1VNc1JVRkJXU3hMUVVGUFNpeEZRVU51UWtzc1JVRkJZMFFzUzBGQllVUXNVMEZGTDBJc1NVRkJTMFVzUlVGQllTeERRVU5vUWl4SlFVRkpReXhGUVVGVlNDeFRRVUZUU1N4alFVRmpMRTlCUTNKRFJDeEZRVUZSUlN4aFFVRmhTaXhGUVVGWExGZEJRMmhEUXl4RlFVRTBReXh0UWtGQmRrSkRMRVZCUVZGR0xFZEJVUzlDTEU5QlRFdERMRWRCUVdWVUxHVkJRWEZETEZWQlFYQkNTU3hKUVVWdVEwc3NSVUZCWTBZc1UwRkJVMDBzWlVGQlpVTXNWMEZCVnl4bFFVRm5RaXhSUVVjMVJFd3NSVUY0UTB4U0xIRkNRVUZ4UWtzc1dVRkRka0pPTEdOQlFXZENUeXhUUVVGVFRTeG5Ra0ZCYTBKT0xGTkJRVk5OTEdWQlFXVkRMR0ZCUjNCQ0xFbEJRUzlEVUN4VFFVRlRUU3hsUVVGbFF5eFhRVUZYTEVkQlFVa3NTMEYxUTNwRFF5eFBRVUZQUXl4UlFVRlZZaUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEMxa2IyMHZiR2xpTDJselJYWmxiblJUZFhCd2IzSjBaV1F1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgc3VwcG9ydGVkSW5wdXRUeXBlcz17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBpc1RleHRJbnB1dEVsZW1lbnQoZSl7dmFyIHQ9ZSYmZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PXQ/ISFzdXBwb3J0ZWRJbnB1dFR5cGVzW2UudHlwZV06XCJ0ZXh0YXJlYVwiPT09dH1tb2R1bGUuZXhwb3J0cz1pc1RleHRJbnB1dEVsZW1lbnQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbWx6VkdWNGRFbHVjSFYwUld4bGJXVnVkQzVxY3lKZExDSnVZVzFsY3lJNld5SnpkWEJ3YjNKMFpXUkpibkIxZEZSNWNHVnpJaXdpWTI5c2IzSWlMQ0prWVhSbElpd2laR0YwWlhScGJXVWlMQ0prWVhSbGRHbHRaUzFzYjJOaGJDSXNJbVZ0WVdsc0lpd2liVzl1ZEdnaUxDSnVkVzFpWlhJaUxDSndZWE56ZDI5eVpDSXNJbkpoYm1kbElpd2ljMlZoY21Ob0lpd2lkR1ZzSWl3aWRHVjRkQ0lzSW5ScGJXVWlMQ0oxY213aUxDSjNaV1ZySWl3aWFYTlVaWGgwU1c1d2RYUkZiR1Z0Wlc1MElpd2laV3hsYlNJc0ltNXZaR1ZPWVcxbElpd2lkRzlNYjNkbGNrTmhjMlVpTENKMGVYQmxJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJVMEVzWVVGTlFTeEpRVUZKUVN4dlFrRkJjMElzUTBGRGVFSkRMRTlCUVU4c1JVRkRVRU1zVFVGQlRTeEZRVU5PUXl4VlFVRlZMRVZCUTFaRExHdENRVUZyUWl4RlFVTnNRa01zVDBGQlR5eEZRVU5RUXl4UFFVRlBMRVZCUTFCRExGRkJRVkVzUlVGRFVrTXNWVUZCVlN4RlFVTldReXhQUVVGUExFVkJRMUJETEZGQlFWRXNSVUZEVWtNc1MwRkJTeXhGUVVOTVF5eE5RVUZOTEVWQlEwNURMRTFCUVUwc1JVRkRUa01zUzBGQlN5eEZRVU5NUXl4TlFVRk5MRWRCUjFJc1UwRkJVME1zYlVKQlFXMUNReXhIUVVNeFFpeEpRVUZKUXl4RlFVRlhSQ3hIUVVGUlFTeEZRVUZMUXl4VlFVRlpSQ3hGUVVGTFF5eFRRVUZUUXl4alFVVjBSQ3hOUVVGcFFpeFZRVUZpUkN4SlFVTlBiRUlzYjBKQlFXOUNhVUlzUlVGQlMwY3NUVUZIYmtJc1lVRkJZa1lzUlVGUFRrY3NUMEZCVDBNc1VVRkJWVTRpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdFpHOXRMMnhwWWk5cGMxUmxlSFJKYm5CMWRFVnNaVzFsYm5RdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3Nlcj1yZXF1aXJlKFwiLi9lc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXJcIik7ZnVuY3Rpb24gcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIoZSl7cmV0dXJuJ1wiJytlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIoZSkrJ1wiJ31tb2R1bGUuZXhwb3J0cz1xdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3NlcjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluRjFiM1JsUVhSMGNtbGlkWFJsVm1Gc2RXVkdiM0pDY205M2MyVnlMbXB6SWwwc0ltNWhiV1Z6SWpwYkltVnpZMkZ3WlZSbGVIUkRiMjUwWlc1MFJtOXlRbkp2ZDNObGNpSXNJbkpsY1hWcGNtVWlMQ0p4ZFc5MFpVRjBkSEpwWW5WMFpWWmhiSFZsUm05eVFuSnZkM05sY2lJc0luWmhiSFZsSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCVVVFc1lVRkZRU3hKUVVGSlFTdzBRa0ZCT0VKRExGRkJRVkVzYVVOQlVURkRMRk5CUVZORExEaENRVUU0UWtNc1IwRkRja01zVFVGQlR5eEpRVUZOU0N3MFFrRkJORUpITEVkQlFWTXNTVUZIY0VSRExFOUJRVTlETEZGQlFWVklJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwzSmxZV04wTFdSdmJTOXNhV0l2Y1hWdmRHVkJkSFJ5YVdKMWRHVldZV3gxWlVadmNrSnliM2R6WlhJdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcmVhY3RQcm9kSW52YXJpYW50KHIpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLTEsbz1cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIityK1wiOyB2aXNpdCBodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIityLG49MDtuPGU7bisrKW8rPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW24rMV0pO28rPVwiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIjt2YXIgdD1uZXcgRXJyb3Iobyk7dGhyb3cgdC5uYW1lPVwiSW52YXJpYW50IFZpb2xhdGlvblwiLHQuZnJhbWVzVG9Qb3A9MSx0fW1vZHVsZS5leHBvcnRzPXJlYWN0UHJvZEludmFyaWFudDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluSmxZV04wVUhKdlpFbHVkbUZ5YVdGdWRDNXFjeUpkTENKdVlXMWxjeUk2V3lKeVpXRmpkRkJ5YjJSSmJuWmhjbWxoYm5RaUxDSmpiMlJsSWl3aVlYSm5RMjkxYm5RaUxDSmhjbWQxYldWdWRITWlMQ0pzWlc1bmRHZ2lMQ0p0WlhOellXZGxJaXdpWVhKblNXUjRJaXdpWlc1amIyUmxWVkpKUTI5dGNHOXVaVzUwSWl3aVpYSnliM0lpTENKRmNuSnZjaUlzSW01aGJXVWlMQ0ptY21GdFpYTlViMUJ2Y0NJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVZGQkxHRkJVMEVzVTBGQlUwRXNiVUpCUVcxQ1F5eEhRVXN4UWl4SlFVcEJMRWxCUVVsRExFVkJRVmRETEZWQlFWVkRMRTlCUVZNc1JVRkZPVUpETEVWQlFWVXNlVUpCUVRKQ1NpeEZRVUZQTERaRlFVRnZSa0VzUlVGRk0waExMRVZCUVZNc1JVRkJSMEVzUlVGQlUwb3NSVUZCVlVrc1NVRkRkRU5FTEVkQlFWY3NWMEZCWVVVc2JVSkJRVzFDU2l4VlFVRlZSeXhGUVVGVExFbEJSMmhGUkN4SFFVRlhMR2xJUVVWWUxFbEJRVWxITEVWQlFWRXNTVUZCU1VNc1RVRkJUVW9zUjBGSmRFSXNUVUZJUVVjc1JVRkJUVVVzUzBGQlR5eHpRa0ZEWWtZc1JVRkJUVWNzV1VGQll5eEZRVVZrU0N4RlFVZFNTU3hQUVVGUFF5eFJRVUZWWWlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDMWtiMjB2YkdsaUwzSmxZV04wVUhKdlpFbHVkbUZ5YVdGdWRDNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIFJlYWN0TW91bnQ9cmVxdWlyZShcIi4vUmVhY3RNb3VudFwiKTttb2R1bGUuZXhwb3J0cz1SZWFjdE1vdW50LnJlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5KbGJtUmxjbE4xWW5SeVpXVkpiblJ2UTI5dWRHRnBibVZ5TG1weklsMHNJbTVoYldWeklqcGJJbEpsWVdOMFRXOTFiblFpTENKeVpYRjFhWEpsSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0luSmxibVJsY2xOMVluUnlaV1ZKYm5SdlEyOXVkR0ZwYm1WeUlsMHNJbTFoY0hCcGJtZHpJam9pUVVGUlFTeGhRVVZCTEVsQlFVbEJMRmRCUVdGRExGRkJRVkVzWjBKQlJYcENReXhQUVVGUFF5eFJRVUZWU0N4WFFVRlhTU0lzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEMxa2IyMHZiR2xpTDNKbGJtUmxjbE4xWW5SeVpXVkpiblJ2UTI5dWRHRnBibVZ5TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgcmV1c2FibGVTVkdDb250YWluZXIsRXhlY3V0aW9uRW52aXJvbm1lbnQ9cmVxdWlyZShcImZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpLERPTU5hbWVzcGFjZXM9cmVxdWlyZShcIi4vRE9NTmFtZXNwYWNlc1wiKSxXSElURVNQQUNFX1RFU1Q9L15bIFxcclxcblxcdFxcZl0vLE5PTlZJU0lCTEVfVEVTVD0vPCghLS18bGlua3xub3NjcmlwdHxtZXRhfHNjcmlwdHxzdHlsZSlbIFxcclxcblxcdFxcZlxcLz5dLyxjcmVhdGVNaWNyb3NvZnRVbnNhZmVMb2NhbEZ1bmN0aW9uPXJlcXVpcmUoXCIuL2NyZWF0ZU1pY3Jvc29mdFVuc2FmZUxvY2FsRnVuY3Rpb25cIiksc2V0SW5uZXJIVE1MPWNyZWF0ZU1pY3Jvc29mdFVuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oZSxuKXtpZihlLm5hbWVzcGFjZVVSSSE9PURPTU5hbWVzcGFjZXMuc3ZnfHxcImlubmVySFRNTFwiaW4gZSllLmlubmVySFRNTD1uO2Vsc2V7KHJldXNhYmxlU1ZHQ29udGFpbmVyPXJldXNhYmxlU1ZHQ29udGFpbmVyfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKS5pbm5lckhUTUw9XCI8c3ZnPlwiK24rXCI8L3N2Zz5cIjtmb3IodmFyIHQ9cmV1c2FibGVTVkdDb250YWluZXIuZmlyc3RDaGlsZDt0LmZpcnN0Q2hpbGQ7KWUuYXBwZW5kQ2hpbGQodC5maXJzdENoaWxkKX19KTtpZihFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pe3ZhciB0ZXN0RWxlbWVudD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3Rlc3RFbGVtZW50LmlubmVySFRNTD1cIiBcIixcIlwiPT09dGVzdEVsZW1lbnQuaW5uZXJIVE1MJiYoc2V0SW5uZXJIVE1MPWZ1bmN0aW9uKGUsbil7aWYoZS5wYXJlbnROb2RlJiZlLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGUsZSksV0hJVEVTUEFDRV9URVNULnRlc3Qobil8fFwiPFwiPT09blswXSYmTk9OVklTSUJMRV9URVNULnRlc3Qobikpe2UuaW5uZXJIVE1MPVN0cmluZy5mcm9tQ2hhckNvZGUoNjUyNzkpK247dmFyIHQ9ZS5maXJzdENoaWxkOzE9PT10LmRhdGEubGVuZ3RoP2UucmVtb3ZlQ2hpbGQodCk6dC5kZWxldGVEYXRhKDAsMSl9ZWxzZSBlLmlubmVySFRNTD1ufSksdGVzdEVsZW1lbnQ9bnVsbH1tb2R1bGUuZXhwb3J0cz1zZXRJbm5lckhUTUw7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbk5sZEVsdWJtVnlTRlJOVEM1cWN5SmRMQ0p1WVcxbGN5STZXeUp5WlhWellXSnNaVk5XUjBOdmJuUmhhVzVsY2lJc0lrVjRaV04xZEdsdmJrVnVkbWx5YjI1dFpXNTBJaXdpY21WeGRXbHlaU0lzSWtSUFRVNWhiV1Z6Y0dGalpYTWlMQ0pYU0VsVVJWTlFRVU5GWDFSRlUxUWlMQ0pPVDA1V1NWTkpRa3hGWDFSRlUxUWlMQ0pqY21WaGRHVk5hV055YjNOdlpuUlZibk5oWm1WTWIyTmhiRVoxYm1OMGFXOXVJaXdpYzJWMFNXNXVaWEpJVkUxTUlpd2libTlrWlNJc0ltaDBiV3dpTENKdVlXMWxjM0JoWTJWVlVra2lMQ0p6ZG1jaUxDSnBibTVsY2toVVRVd2lMQ0prYjJOMWJXVnVkQ0lzSW1OeVpXRjBaVVZzWlcxbGJuUWlMQ0p6ZG1kT2IyUmxJaXdpWm1seWMzUkRhR2xzWkNJc0ltRndjR1Z1WkVOb2FXeGtJaXdpWTJGdVZYTmxSRTlOSWl3aWRHVnpkRVZzWlcxbGJuUWlMQ0p3WVhKbGJuUk9iMlJsSWl3aWNtVndiR0ZqWlVOb2FXeGtJaXdpZEdWemRDSXNJbE4wY21sdVp5SXNJbVp5YjIxRGFHRnlRMjlrWlNJc0luUmxlSFJPYjJSbElpd2laR0YwWVNJc0lteGxibWQwYUNJc0luSmxiVzkyWlVOb2FXeGtJaXdpWkdWc1pYUmxSR0YwWVNJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVZGQkxHRkJSVUVzU1VGVFNVRXNjVUpCVkVGRExIRkNRVUYxUWtNc1VVRkJVU3hwUTBGREwwSkRMR05CUVdkQ1JDeFJRVUZSTEcxQ1FVVjRRa1VzWjBKQlFXdENMR1ZCUTJ4Q1F5eG5Ra0ZCYTBJc2RVUkJSV3hDUXl4dFEwRkJjVU5LTEZGQlFWRXNkME5CWVRkRFN5eGhRVUZsUkN4dFEwRkJiVU1zVTBGQlZVVXNSVUZCVFVNc1IwRkpjRVVzUjBGQlNVUXNSVUZCUzBVc1pVRkJhVUpRTEdOQlFXTlJMRXRCUVZNc1kwRkJaVWdzUlVGUk9VUkJMRVZCUVV0SkxGVkJRVmxJTEUxQlVtOUVMRVZCUTNKRlZDeHhRa0ZCZFVKQkxITkNRVUYzUW1Fc1UwRkJVME1zWTBGQll5eFJRVU5xUkVZc1ZVRkJXU3hSUVVGVlNDeEZRVUZQTEZOQlJXeEVMRWxCUkVFc1NVRkJTVTBzUlVGQlZXWXNjVUpCUVhGQ1owSXNWMEZETlVKRUxFVkJRVkZETEZsQlEySlNMRVZCUVV0VExGbEJRVmxHTEVWQlFWRkRMR1ZCVHk5Q0xFZEJRVWxtTEhGQ1FVRnhRbWxDTEZWQlFWY3NRMEZQYkVNc1NVRkJTVU1zV1VGQlkwNHNVMEZCVTBNc1kwRkJZeXhQUVVONlEwc3NXVUZCV1ZBc1ZVRkJXU3hKUVVOTkxFdEJRVEZDVHl4WlFVRlpVQ3haUVVOa1RDeGhRVUZsTEZOQlFWVkRMRVZCUVUxRExFZEJZemRDTEVkQlVrbEVMRVZCUVV0WkxGbEJRMUJhTEVWQlFVdFpMRmRCUVZkRExHRkJRV0ZpTEVWQlFVMUJMRWRCVDJwRFNpeG5Ra0ZCWjBKclFpeExRVUZMWWl4SlFVRnhRaXhOUVVGYVFTeEZRVUZMTEVsQlFXTktMR2RDUVVGblFtbENMRXRCUVV0aUxFZEJRVThzUTBGUEwwVkVMRVZCUVV0SkxGVkJRVmxYTEU5QlFVOURMR0ZCUVdFc1QwRkJWV1lzUlVGSkwwTXNTVUZCU1dkQ0xFVkJRVmRxUWl4RlFVRkxVU3hYUVVOVExFbEJRWHBDVXl4RlFVRlRReXhMUVVGTFF5eFBRVU5vUW01Q0xFVkJRVXR2UWl4WlFVRlpTQ3hIUVVWcVFrRXNSVUZCVTBrc1YwRkJWeXhGUVVGSExGRkJSM3BDY2tJc1JVRkJTMGtzVlVGQldVZ3NTVUZKZGtKVkxGbEJRV01zUzBGSGFFSlhMRTlCUVU5RExGRkJRVlY0UWlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDMWtiMjB2YkdsaUwzTmxkRWx1Ym1WeVNGUk5UQzVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBFeGVjdXRpb25FbnZpcm9ubWVudD1yZXF1aXJlKFwiZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnRcIiksZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyPXJlcXVpcmUoXCIuL2VzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlclwiKSxzZXRJbm5lckhUTUw9cmVxdWlyZShcIi4vc2V0SW5uZXJIVE1MXCIpLHNldFRleHRDb250ZW50PWZ1bmN0aW9uKGUsdCl7aWYodCl7dmFyIG49ZS5maXJzdENoaWxkO2lmKG4mJm49PT1lLmxhc3RDaGlsZCYmMz09PW4ubm9kZVR5cGUpcmV0dXJuIHZvaWQobi5ub2RlVmFsdWU9dCl9ZS50ZXh0Q29udGVudD10fTtFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00mJihcInRleHRDb250ZW50XCJpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnR8fChzZXRUZXh0Q29udGVudD1mdW5jdGlvbihlLHQpezMhPT1lLm5vZGVUeXBlP3NldElubmVySFRNTChlLGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3Nlcih0KSk6ZS5ub2RlVmFsdWU9dH0pKSxtb2R1bGUuZXhwb3J0cz1zZXRUZXh0Q29udGVudDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluTmxkRlJsZUhSRGIyNTBaVzUwTG1weklsMHNJbTVoYldWeklqcGJJa1Y0WldOMWRHbHZia1Z1ZG1seWIyNXRaVzUwSWl3aWNtVnhkV2x5WlNJc0ltVnpZMkZ3WlZSbGVIUkRiMjUwWlc1MFJtOXlRbkp2ZDNObGNpSXNJbk5sZEVsdWJtVnlTRlJOVENJc0luTmxkRlJsZUhSRGIyNTBaVzUwSWl3aWJtOWtaU0lzSW5SbGVIUWlMQ0ptYVhKemRFTm9hV3hrSWl3aWJHRnpkRU5vYVd4a0lpd2libTlrWlZSNWNHVWlMQ0p1YjJSbFZtRnNkV1VpTENKMFpYaDBRMjl1ZEdWdWRDSXNJbU5oYmxWelpVUlBUU0lzSW1SdlkzVnRaVzUwSWl3aVpHOWpkVzFsYm5SRmJHVnRaVzUwSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCVVVFc1lVRkZRU3hKUVVGSlFTeHhRa0ZCZFVKRExGRkJRVkVzYVVOQlF5OUNReXcwUWtGQk9FSkVMRkZCUVZFc2FVTkJRM1JEUlN4aFFVRmxSaXhSUVVGUkxHdENRVmwyUWtjc1pVRkJhVUlzVTBGQlZVTXNSVUZCVFVNc1IwRkRia01zUjBGQlNVRXNSVUZCVFN4RFFVTlNMRWxCUVVsRExFVkJRV0ZHTEVWQlFVdEZMRmRCUlhSQ0xFZEJRVWxCTEVkQlFXTkJMRWxCUVdWR0xFVkJRVXRITEZkQlFYRkRMRWxCUVhoQ1JDeEZRVUZYUlN4VFFVVTFSQ3haUVVSQlJpeEZRVUZYUnl4VlFVRlpTaXhIUVVrelFrUXNSVUZCUzAwc1dVRkJZMHdzUjBGSGFrSk9MSEZDUVVGeFFsa3NXVUZEYWtJc1owSkJRV2xDUXl4VFFVRlRReXhyUWtGRE9VSldMR1ZCUVdsQ0xGTkJRVlZETEVWQlFVMURMRWRCUTFRc1NVRkJiRUpFTEVWQlFVdEpMRk5CU1ZST0xHRkJRV0ZGTEVWQlFVMUlMRFJDUVVFMFFra3NTVUZJTjBORUxFVkJRVXRMTEZWQlFWbEtMRXRCVVhwQ1V5eFBRVUZQUXl4UlFVRlZXaUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEMxa2IyMHZiR2xpTDNObGRGUmxlSFJEYjI1MFpXNTBMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO2Z1bmN0aW9uIHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50KGUsdCl7dmFyIG49bnVsbD09PWV8fCExPT09ZSxvPW51bGw9PT10fHwhMT09PXQ7aWYobnx8bylyZXR1cm4gbj09PW87dmFyIHI9dHlwZW9mIGUsdT10eXBlb2YgdDtyZXR1cm5cInN0cmluZ1wiPT09cnx8XCJudW1iZXJcIj09PXI/XCJzdHJpbmdcIj09PXV8fFwibnVtYmVyXCI9PT11Olwib2JqZWN0XCI9PT11JiZlLnR5cGU9PT10LnR5cGUmJmUua2V5PT09dC5rZXl9bW9kdWxlLmV4cG9ydHM9c2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbk5vYjNWc1pGVndaR0YwWlZKbFlXTjBRMjl0Y0c5dVpXNTBMbXB6SWwwc0ltNWhiV1Z6SWpwYkluTm9iM1ZzWkZWd1pHRjBaVkpsWVdOMFEyOXRjRzl1Wlc1MElpd2ljSEpsZGtWc1pXMWxiblFpTENKdVpYaDBSV3hsYldWdWRDSXNJbkJ5WlhaRmJYQjBlU0lzSW01bGVIUkZiWEIwZVNJc0luQnlaWFpVZVhCbElpd2libVY0ZEZSNWNHVWlMQ0owZVhCbElpd2lhMlY1SWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCVVVFc1lVRmpRU3hUUVVGVFFTd3lRa0ZCTWtKRExFVkJRV0ZETEVkQlF5OURMRWxCUVVsRExFVkJRVFJDTEU5QlFXaENSaXhKUVVGM1F5eEpRVUZvUWtFc1JVRkRjRU5ITEVWQlFUUkNMRTlCUVdoQ1JpeEpRVUYzUXl4SlFVRm9Ra0VzUlVGRGVFTXNSMEZCU1VNc1IwRkJZVU1zUlVGRFppeFBRVUZQUkN4SlFVRmpReXhGUVVkMlFpeEpRVUZKUXl4VFFVRnJRa29zUlVGRGJFSkxMRk5CUVd0Q1NpeEZRVU4wUWl4TlFVRnBRaXhYUVVGaVJ5eEhRVUZ6UXl4WFFVRmlRU3hGUVVOUUxGZEJRV0pETEVkQlFYTkRMRmRCUVdKQkxFVkJSVm9zVjBGQllrRXNSMEZCZVVKTUxFVkJRVmxOTEU5QlFWTk1MRVZCUVZsTExFMUJRVkZPTEVWQlFWbFBMRTFCUVZGT0xFVkJRVmxOTEVsQlNUZEhReXhQUVVGUFF5eFJRVUZWVmlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDMWtiMjB2YkdsaUwzTm9iM1ZzWkZWd1pHRjBaVkpsWVdOMFEyOXRjRzl1Wlc1MExtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9wcm9kSW52YXJpYW50PXJlcXVpcmUoXCIuL3JlYWN0UHJvZEludmFyaWFudFwiKSxSZWFjdEN1cnJlbnRPd25lcj1yZXF1aXJlKFwicmVhY3QvbGliL1JlYWN0Q3VycmVudE93bmVyXCIpLFJFQUNUX0VMRU1FTlRfVFlQRT1yZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRTeW1ib2xcIiksZ2V0SXRlcmF0b3JGbj1yZXF1aXJlKFwiLi9nZXRJdGVyYXRvckZuXCIpLGludmFyaWFudD1yZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpLEtleUVzY2FwZVV0aWxzPXJlcXVpcmUoXCIuL0tleUVzY2FwZVV0aWxzXCIpLHdhcm5pbmc9cmVxdWlyZShcImZianMvbGliL3dhcm5pbmdcIiksU0VQQVJBVE9SPVwiLlwiLFNVQlNFUEFSQVRPUj1cIjpcIixkaWRXYXJuQWJvdXRNYXBzPSExO2Z1bmN0aW9uIGdldENvbXBvbmVudEtleShlLHIpe3JldHVybiBlJiZcIm9iamVjdFwiPT10eXBlb2YgZSYmbnVsbCE9ZS5rZXk/S2V5RXNjYXBlVXRpbHMuZXNjYXBlKGUua2V5KTpyLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChlLHIsdCxuKXt2YXIgYSxvPXR5cGVvZiBlO2lmKFwidW5kZWZpbmVkXCIhPT1vJiZcImJvb2xlYW5cIiE9PW98fChlPW51bGwpLG51bGw9PT1lfHxcInN0cmluZ1wiPT09b3x8XCJudW1iZXJcIj09PW98fFwib2JqZWN0XCI9PT1vJiZlLiQkdHlwZW9mPT09UkVBQ1RfRUxFTUVOVF9UWVBFKXJldHVybiB0KG4sZSxcIlwiPT09cj9TRVBBUkFUT1IrZ2V0Q29tcG9uZW50S2V5KGUsMCk6ciksMTt2YXIgaT0wLGw9XCJcIj09PXI/U0VQQVJBVE9SOnIrU1VCU0VQQVJBVE9SO2lmKEFycmF5LmlzQXJyYXkoZSkpZm9yKHZhciBzPTA7czxlLmxlbmd0aDtzKyspaSs9dHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoYT1lW3NdLGwrZ2V0Q29tcG9uZW50S2V5KGEscyksdCxuKTtlbHNle3ZhciBjPWdldEl0ZXJhdG9yRm4oZSk7aWYoYyl7dmFyIHUsZD1jLmNhbGwoZSk7aWYoYyE9PWUuZW50cmllcylmb3IodmFyIHA9MDshKHU9ZC5uZXh0KCkpLmRvbmU7KWkrPXRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGE9dS52YWx1ZSxsK2dldENvbXBvbmVudEtleShhLHArKyksdCxuKTtlbHNle2lmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYpe3ZhciB2PVwiXCI7aWYoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCl7dmFyIGY9UmVhY3RDdXJyZW50T3duZXIuY3VycmVudC5nZXROYW1lKCk7ZiYmKHY9XCIgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYFwiK2YrXCJgLlwiKX1cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ3YXJuaW5nKGRpZFdhcm5BYm91dE1hcHMsXCJVc2luZyBNYXBzIGFzIGNoaWxkcmVuIGlzIG5vdCB5ZXQgZnVsbHkgc3VwcG9ydGVkLiBJdCBpcyBhbiBleHBlcmltZW50YWwgZmVhdHVyZSB0aGF0IG1pZ2h0IGJlIHJlbW92ZWQuIENvbnZlcnQgaXQgdG8gYSBzZXF1ZW5jZSAvIGl0ZXJhYmxlIG9mIGtleWVkIFJlYWN0RWxlbWVudHMgaW5zdGVhZC4lc1wiLHYpLGRpZFdhcm5BYm91dE1hcHM9ITB9Zm9yKDshKHU9ZC5uZXh0KCkpLmRvbmU7KXt2YXIgRT11LnZhbHVlO0UmJihpKz10cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChhPUVbMV0sbCtLZXlFc2NhcGVVdGlscy5lc2NhcGUoRVswXSkrU1VCU0VQQVJBVE9SK2dldENvbXBvbmVudEtleShhLDApLHQsbikpfX19ZWxzZSBpZihcIm9iamVjdFwiPT09byl7dmFyIHk9XCJcIjtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoeT1cIiBJZiB5b3UgbWVhbnQgdG8gcmVuZGVyIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiwgdXNlIGFuIGFycmF5IGluc3RlYWQgb3Igd3JhcCB0aGUgb2JqZWN0IHVzaW5nIGNyZWF0ZUZyYWdtZW50KG9iamVjdCkgZnJvbSB0aGUgUmVhY3QgYWRkLW9ucy5cIixlLl9pc1JlYWN0RWxlbWVudCYmKHk9XCIgSXQgbG9va3MgbGlrZSB5b3UncmUgdXNpbmcgYW4gZWxlbWVudCBjcmVhdGVkIGJ5IGEgZGlmZmVyZW50IHZlcnNpb24gb2YgUmVhY3QuIE1ha2Ugc3VyZSB0byB1c2Ugb25seSBvbmUgY29weSBvZiBSZWFjdC5cIiksUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCkpe3ZhciBiPVJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQuZ2V0TmFtZSgpO2ImJih5Kz1cIiBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgXCIrYitcImAuXCIpfXZhciBtPVN0cmluZyhlKTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcIk9iamVjdHMgYXJlIG5vdCB2YWxpZCBhcyBhIFJlYWN0IGNoaWxkIChmb3VuZDogJXMpLiVzXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PW0/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhlKS5qb2luKFwiLCBcIikrXCJ9XCI6bSx5KTpfcHJvZEludmFyaWFudChcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PW0/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhlKS5qb2luKFwiLCBcIikrXCJ9XCI6bSx5KX19cmV0dXJuIGl9ZnVuY3Rpb24gdHJhdmVyc2VBbGxDaGlsZHJlbihlLHIsdCl7cmV0dXJuIG51bGw9PWU/MDp0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChlLFwiXCIscix0KX1tb2R1bGUuZXhwb3J0cz10cmF2ZXJzZUFsbENoaWxkcmVuO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5SeVlYWmxjbk5sUVd4c1EyaHBiR1J5Wlc0dWFuTWlYU3dpYm1GdFpYTWlPbHNpWDNCeWIyUkpiblpoY21saGJuUWlMQ0p5WlhGMWFYSmxJaXdpVW1WaFkzUkRkWEp5Wlc1MFQzZHVaWElpTENKU1JVRkRWRjlGVEVWTlJVNVVYMVJaVUVVaUxDSm5aWFJKZEdWeVlYUnZja1p1SWl3aWFXNTJZWEpwWVc1MElpd2lTMlY1UlhOallYQmxWWFJwYkhNaUxDSjNZWEp1YVc1bklpd2lVMFZRUVZKQlZFOVNJaXdpVTFWQ1UwVlFRVkpCVkU5U0lpd2laR2xrVjJGeWJrRmliM1YwVFdGd2N5SXNJbWRsZEVOdmJYQnZibVZ1ZEV0bGVTSXNJbU52YlhCdmJtVnVkQ0lzSW1sdVpHVjRJaXdpYTJWNUlpd2laWE5qWVhCbElpd2lkRzlUZEhKcGJtY2lMQ0owY21GMlpYSnpaVUZzYkVOb2FXeGtjbVZ1U1cxd2JDSXNJbU5vYVd4a2NtVnVJaXdpYm1GdFpWTnZSbUZ5SWl3aVkyRnNiR0poWTJzaUxDSjBjbUYyWlhKelpVTnZiblJsZUhRaUxDSmphR2xzWkNJc0luUjVjR1VpTENJa0pIUjVjR1Z2WmlJc0luTjFZblJ5WldWRGIzVnVkQ0lzSW01bGVIUk9ZVzFsVUhKbFptbDRJaXdpUVhKeVlYa2lMQ0pwYzBGeWNtRjVJaXdpYVNJc0lteGxibWQwYUNJc0ltbDBaWEpoZEc5eVJtNGlMQ0p6ZEdWd0lpd2lhWFJsY21GMGIzSWlMQ0pqWVd4c0lpd2laVzUwY21sbGN5SXNJbWxwSWl3aWJtVjRkQ0lzSW1SdmJtVWlMQ0oyWVd4MVpTSXNJbkJ5YjJObGMzTWlMQ0psYm5ZaUxDSk9UMFJGWDBWT1ZpSXNJbTFoY0hOQmMwTm9hV3hrY21WdVFXUmtaVzVrZFcwaUxDSmpkWEp5Wlc1MElpd2liV0Z3YzBGelEyaHBiR1J5Wlc1UGQyNWxjazVoYldVaUxDSm5aWFJPWVcxbElpd2laVzUwY25raUxDSmhaR1JsYm1SMWJTSXNJbDlwYzFKbFlXTjBSV3hsYldWdWRDSXNJbTVoYldVaUxDSmphR2xzWkhKbGJsTjBjbWx1WnlJc0lsTjBjbWx1WnlJc0lrOWlhbVZqZENJc0ltdGxlWE1pTENKcWIybHVJaXdpZEhKaGRtVnljMlZCYkd4RGFHbHNaSEpsYmlJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVZGQkxHRkJSVUVzU1VGQlNVRXNaVUZCYVVKRExGRkJRVkVzZDBKQlJYcENReXhyUWtGQmIwSkVMRkZCUVZFc0swSkJRelZDUlN4dFFrRkJjVUpHTEZGQlFWRXNkMEpCUlRkQ1J5eGpRVUZuUWtnc1VVRkJVU3h0UWtGRGVFSkpMRlZCUVZsS0xGRkJRVkVzYzBKQlEzQkNTeXhsUVVGcFFrd3NVVUZCVVN4dlFrRkRla0pOTEZGQlFWVk9MRkZCUVZFc2IwSkJSV3hDVHl4VlFVRlpMRWxCUTFwRExHRkJRV1VzU1VGaFprTXNhMEpCUVcxQ0xFVkJVM1pDTEZOQlFWTkRMR2RDUVVGblFrTXNSVUZCVjBNc1IwRkhiRU1zVDBGQlNVUXNSMEZCYTBNc2FVSkJRV1JCTEVkQlFUSkRMRTFCUVdwQ1FTeEZRVUZWUlN4SlFVVnVSRklzWlVGQlpWTXNUMEZCVDBnc1JVRkJWVVVzUzBGSGJFTkVMRVZCUVUxSExGTkJRVk1zU1VGWGVFSXNVMEZCVTBNc2QwSkJRWGRDUXl4RlFVRlZReXhGUVVGWFF5eEZRVUZWUXl4SFFVTTVSQ3hKUVd0Q1NVTXNSVUZzUWtGRExGTkJRV05NTEVWQlQyeENMRWRCVEdFc1kwRkJWRXNzUjBGQmFVTXNXVUZCVkVFc1NVRkZNVUpNTEVWQlFWY3NUVUZIU1N4UFFVRmlRU3hIUVVFNFFpeFhRVUZVU3l4SFFVRTRRaXhYUVVGVVFTeEhRVWR5UXl4WFFVRlVRU3hIUVVGeFFrd3NSVUZCVTAwc1YwRkJZWEpDTEcxQ1FVdDZReXhQUVVwQmFVSXNSVUZCVTBNc1JVRkJhVUpJTEVWQlIxb3NTMEZCWkVNc1JVRkJiVUpZTEZWQlFWbEhMR2RDUVVGblFrOHNSVUZCVlN4SFFVRkxReXhIUVVOMlJDeEZRVXRVTEVsQlFVbE5MRVZCUVdVc1JVRkRaa01zUlVGQkswSXNTMEZCWkZBc1JVRkJiVUpZTEZWQlFWbFhMRVZCUVZsV0xHRkJSV2hGTEVkQlFVbHJRaXhOUVVGTlF5eFJRVUZSVml4SFFVTm9RaXhKUVVGTExFbEJRVWxYTEVWQlFVa3NSVUZCUjBFc1JVRkJTVmdzUlVGQlUxa3NUMEZCVVVRc1NVRkhia05LTEVkQlFXZENVaXgzUWtGR2FFSkxMRVZCUVZGS0xFVkJRVk5YTEVkQlEwNUlMRVZCUVdsQ1ppeG5Ra0ZCWjBKWExFVkJRVTlQTEVkQlEwMVVMRVZCUVZWRExFOUJSV2hGTEVOQlEwd3NTVUZCU1ZVc1JVRkJZVE5DTEdOQlFXTmpMRWRCUXk5Q0xFZEJRVWxoTEVWQlFWa3NRMEZEWkN4SlFVTkpReXhGUVVSQlF5eEZRVUZYUml4RlFVRlhSeXhMUVVGTGFFSXNSMEZGTDBJc1IwRkJTV0VzU1VGQlpXSXNSVUZCVTJsQ0xGRkJSVEZDTEVsQlJFRXNTVUZCU1VNc1JVRkJTeXhKUVVOQlNpeEZRVUZQUXl4RlFVRlRTU3hSUVVGUlF5eE5RVWN2UW1Jc1IwRkJaMEpTTEhkQ1FVWm9Ra3NzUlVGQlVWVXNSVUZCUzA4c1RVRkRSbUlzUlVGQmFVSm1MR2RDUVVGblFsY3NSVUZCVDJNc1MwRkRUV2hDTEVWQlFWVkRMRTlCUldoRkxFTkJRMHdzUjBGQk5rSXNaVUZCZWtKdFFpeFJRVUZSUXl4SlFVRkpReXhUUVVFeVFpeERRVU42UXl4SlFVRkpReXhGUVVGNVFpeEhRVU0zUWl4SFFVRkpla01zYTBKQlFXdENNRU1zVVVGQlV5eERRVU0zUWl4SlFVRkpReXhGUVVFd1FqTkRMR3RDUVVGclFqQkRMRkZCUVZGRkxGVkJRM0JFUkN4SlFVTkdSaXhGUVVGNVFpeG5RMEZCYTBORkxFVkJRVEJDTEUxQlIyaEZMR1ZCUVhwQ1RDeFJRVUZSUXl4SlFVRkpReXhWUVVFMFFtNURMRkZCUVZGSExHbENRVUZyUWl4blRFRkJNa3hwUXl4SFFVTTNVR3BETEd0Q1FVRnRRaXhGUVVkeVFpeFBRVUZUYzBJc1JVRkJUME1zUlVGQlUwa3NVVUZCVVVNc1RVRkJUU3hEUVVOeVF5eEpRVUZKVXl4RlFVRlJaaXhGUVVGTFR5eE5RVU5pVVN4SlFVZEdkRUlzUjBGQlowSlNMSGRDUVVab1Frc3NSVUZCVVhsQ0xFVkJRVTBzUjBGRFNISkNMRVZCUVdsQ2NFSXNaVUZCWlZNc1QwRkJUMmRETEVWQlFVMHNTVUZCVFhSRExHRkJRV1ZGTEdkQ1FVRm5RbGNzUlVGQlR5eEhRVU16UTBZc1JVRkJWVU1zVjBGSmNFVXNSMEZCWVN4WFFVRlVSU3hGUVVGdFFpeERRVU0xUWl4SlFVRkplVUlzUlVGQlZ5eEhRVU5tTEVkQlFUWkNMR1ZCUVhwQ1VpeFJRVUZSUXl4SlFVRkpReXhYUVVOa1RTeEZRVUZYTEdsS1FVTlFPVUlzUlVGQlV5dENMR3RDUVVOWVJDeEZRVUZYTERSSVFVVlVPVU1zYTBKQlFXdENNRU1zVTBGQlV5eERRVU0zUWl4SlFVRkpUU3hGUVVGUGFFUXNhMEpCUVd0Q01FTXNVVUZCVVVVc1ZVRkRha05KTEVsQlEwWkdMRWRCUVZrc1owTkJRV3REUlN4RlFVRlBMRTFCU1RORUxFbEJRVWxETEVWQlFXbENReXhQUVVGUGJFTXNSMEZEVFN4bFFVRjZRbk5DTEZGQlFWRkRMRWxCUVVsRExGTkJRVFJDY2tNc1YwRkJWU3hGUVVGUExIZEVRVUUwUlN4dlFrRkJia0k0UXl4RlFVRjFReXh4UWtGQmRVSkZMRTlCUVU5RExFdEJRVXR3UXl4SFFVRlZjVU1zUzBGQlN5eE5RVUZSTEVsQlFVMUtMRVZCUVdkQ1NDeEhRVUZaYUVRc1pVRkJaU3hMUVVGNVFpeHZRa0ZCYmtKdFJDeEZRVUYxUXl4eFFrRkJkVUpGTEU5QlFVOURMRXRCUVV0d1F5eEhRVUZWY1VNc1MwRkJTeXhOUVVGUkxFbEJRVTFLTEVWQlFXZENTQ3hKUVVrNVdTeFBRVUZQZGtJc1JVRnRRbFFzVTBGQlV5dENMRzlDUVVGdlFuUkRMRVZCUVZWRkxFVkJRVlZETEVkQlF5OURMRTlCUVdkQ0xFMUJRVnBJTEVWQlEwc3NSVUZIUmtRc2QwSkJRWGRDUXl4RlFVRlZMRWRCUVVsRkxFVkJRVlZETEVkQlIzcEViME1zVDBGQlQwTXNVVUZCVlVZaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Y21WaFkzUXRaRzl0TDJ4cFlpOTBjbUYyWlhKelpVRnNiRU5vYVd4a2NtVnVMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBfYXNzaWduPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLGVtcHR5RnVuY3Rpb249cmVxdWlyZShcImZianMvbGliL2VtcHR5RnVuY3Rpb25cIiksd2FybmluZz1yZXF1aXJlKFwiZmJqcy9saWIvd2FybmluZ1wiKSx2YWxpZGF0ZURPTU5lc3Rpbmc9ZW1wdHlGdW5jdGlvbjtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXt2YXIgc3BlY2lhbFRhZ3M9W1wiYWRkcmVzc1wiLFwiYXBwbGV0XCIsXCJhcmVhXCIsXCJhcnRpY2xlXCIsXCJhc2lkZVwiLFwiYmFzZVwiLFwiYmFzZWZvbnRcIixcImJnc291bmRcIixcImJsb2NrcXVvdGVcIixcImJvZHlcIixcImJyXCIsXCJidXR0b25cIixcImNhcHRpb25cIixcImNlbnRlclwiLFwiY29sXCIsXCJjb2xncm91cFwiLFwiZGRcIixcImRldGFpbHNcIixcImRpclwiLFwiZGl2XCIsXCJkbFwiLFwiZHRcIixcImVtYmVkXCIsXCJmaWVsZHNldFwiLFwiZmlnY2FwdGlvblwiLFwiZmlndXJlXCIsXCJmb290ZXJcIixcImZvcm1cIixcImZyYW1lXCIsXCJmcmFtZXNldFwiLFwiaDFcIixcImgyXCIsXCJoM1wiLFwiaDRcIixcImg1XCIsXCJoNlwiLFwiaGVhZFwiLFwiaGVhZGVyXCIsXCJoZ3JvdXBcIixcImhyXCIsXCJodG1sXCIsXCJpZnJhbWVcIixcImltZ1wiLFwiaW5wdXRcIixcImlzaW5kZXhcIixcImxpXCIsXCJsaW5rXCIsXCJsaXN0aW5nXCIsXCJtYWluXCIsXCJtYXJxdWVlXCIsXCJtZW51XCIsXCJtZW51aXRlbVwiLFwibWV0YVwiLFwibmF2XCIsXCJub2VtYmVkXCIsXCJub2ZyYW1lc1wiLFwibm9zY3JpcHRcIixcIm9iamVjdFwiLFwib2xcIixcInBcIixcInBhcmFtXCIsXCJwbGFpbnRleHRcIixcInByZVwiLFwic2NyaXB0XCIsXCJzZWN0aW9uXCIsXCJzZWxlY3RcIixcInNvdXJjZVwiLFwic3R5bGVcIixcInN1bW1hcnlcIixcInRhYmxlXCIsXCJ0Ym9keVwiLFwidGRcIixcInRlbXBsYXRlXCIsXCJ0ZXh0YXJlYVwiLFwidGZvb3RcIixcInRoXCIsXCJ0aGVhZFwiLFwidGl0bGVcIixcInRyXCIsXCJ0cmFja1wiLFwidWxcIixcIndiclwiLFwieG1wXCJdLGluU2NvcGVUYWdzPVtcImFwcGxldFwiLFwiY2FwdGlvblwiLFwiaHRtbFwiLFwidGFibGVcIixcInRkXCIsXCJ0aFwiLFwibWFycXVlZVwiLFwib2JqZWN0XCIsXCJ0ZW1wbGF0ZVwiLFwiZm9yZWlnbk9iamVjdFwiLFwiZGVzY1wiLFwidGl0bGVcIl0sYnV0dG9uU2NvcGVUYWdzPWluU2NvcGVUYWdzLmNvbmNhdChbXCJidXR0b25cIl0pLGltcGxpZWRFbmRUYWdzPVtcImRkXCIsXCJkdFwiLFwibGlcIixcIm9wdGlvblwiLFwib3B0Z3JvdXBcIixcInBcIixcInJwXCIsXCJydFwiXSxlbXB0eUFuY2VzdG9ySW5mbz17Y3VycmVudDpudWxsLGZvcm1UYWc6bnVsbCxhVGFnSW5TY29wZTpudWxsLGJ1dHRvblRhZ0luU2NvcGU6bnVsbCxub2JyVGFnSW5TY29wZTpudWxsLHBUYWdJbkJ1dHRvblNjb3BlOm51bGwsbGlzdEl0ZW1UYWdBdXRvY2xvc2luZzpudWxsLGRsSXRlbVRhZ0F1dG9jbG9zaW5nOm51bGx9LHVwZGF0ZWRBbmNlc3RvckluZm89ZnVuY3Rpb24oZSx0LGEpe3ZhciBuPV9hc3NpZ24oe30sZXx8ZW1wdHlBbmNlc3RvckluZm8pLG89e3RhZzp0LGluc3RhbmNlOmF9O3JldHVybi0xIT09aW5TY29wZVRhZ3MuaW5kZXhPZih0KSYmKG4uYVRhZ0luU2NvcGU9bnVsbCxuLmJ1dHRvblRhZ0luU2NvcGU9bnVsbCxuLm5vYnJUYWdJblNjb3BlPW51bGwpLC0xIT09YnV0dG9uU2NvcGVUYWdzLmluZGV4T2YodCkmJihuLnBUYWdJbkJ1dHRvblNjb3BlPW51bGwpLC0xIT09c3BlY2lhbFRhZ3MuaW5kZXhPZih0KSYmXCJhZGRyZXNzXCIhPT10JiZcImRpdlwiIT09dCYmXCJwXCIhPT10JiYobi5saXN0SXRlbVRhZ0F1dG9jbG9zaW5nPW51bGwsbi5kbEl0ZW1UYWdBdXRvY2xvc2luZz1udWxsKSxuLmN1cnJlbnQ9byxcImZvcm1cIj09PXQmJihuLmZvcm1UYWc9byksXCJhXCI9PT10JiYobi5hVGFnSW5TY29wZT1vKSxcImJ1dHRvblwiPT09dCYmKG4uYnV0dG9uVGFnSW5TY29wZT1vKSxcIm5vYnJcIj09PXQmJihuLm5vYnJUYWdJblNjb3BlPW8pLFwicFwiPT09dCYmKG4ucFRhZ0luQnV0dG9uU2NvcGU9byksXCJsaVwiPT09dCYmKG4ubGlzdEl0ZW1UYWdBdXRvY2xvc2luZz1vKSxcImRkXCIhPT10JiZcImR0XCIhPT10fHwobi5kbEl0ZW1UYWdBdXRvY2xvc2luZz1vKSxufSxpc1RhZ1ZhbGlkV2l0aFBhcmVudD1mdW5jdGlvbihlLHQpe3N3aXRjaCh0KXtjYXNlXCJzZWxlY3RcIjpyZXR1cm5cIm9wdGlvblwiPT09ZXx8XCJvcHRncm91cFwiPT09ZXx8XCIjdGV4dFwiPT09ZTtjYXNlXCJvcHRncm91cFwiOnJldHVyblwib3B0aW9uXCI9PT1lfHxcIiN0ZXh0XCI9PT1lO2Nhc2VcIm9wdGlvblwiOnJldHVyblwiI3RleHRcIj09PWU7Y2FzZVwidHJcIjpyZXR1cm5cInRoXCI9PT1lfHxcInRkXCI9PT1lfHxcInN0eWxlXCI9PT1lfHxcInNjcmlwdFwiPT09ZXx8XCJ0ZW1wbGF0ZVwiPT09ZTtjYXNlXCJ0Ym9keVwiOmNhc2VcInRoZWFkXCI6Y2FzZVwidGZvb3RcIjpyZXR1cm5cInRyXCI9PT1lfHxcInN0eWxlXCI9PT1lfHxcInNjcmlwdFwiPT09ZXx8XCJ0ZW1wbGF0ZVwiPT09ZTtjYXNlXCJjb2xncm91cFwiOnJldHVyblwiY29sXCI9PT1lfHxcInRlbXBsYXRlXCI9PT1lO2Nhc2VcInRhYmxlXCI6cmV0dXJuXCJjYXB0aW9uXCI9PT1lfHxcImNvbGdyb3VwXCI9PT1lfHxcInRib2R5XCI9PT1lfHxcInRmb290XCI9PT1lfHxcInRoZWFkXCI9PT1lfHxcInN0eWxlXCI9PT1lfHxcInNjcmlwdFwiPT09ZXx8XCJ0ZW1wbGF0ZVwiPT09ZTtjYXNlXCJoZWFkXCI6cmV0dXJuXCJiYXNlXCI9PT1lfHxcImJhc2Vmb250XCI9PT1lfHxcImJnc291bmRcIj09PWV8fFwibGlua1wiPT09ZXx8XCJtZXRhXCI9PT1lfHxcInRpdGxlXCI9PT1lfHxcIm5vc2NyaXB0XCI9PT1lfHxcIm5vZnJhbWVzXCI9PT1lfHxcInN0eWxlXCI9PT1lfHxcInNjcmlwdFwiPT09ZXx8XCJ0ZW1wbGF0ZVwiPT09ZTtjYXNlXCJodG1sXCI6cmV0dXJuXCJoZWFkXCI9PT1lfHxcImJvZHlcIj09PWU7Y2FzZVwiI2RvY3VtZW50XCI6cmV0dXJuXCJodG1sXCI9PT1lfXN3aXRjaChlKXtjYXNlXCJoMVwiOmNhc2VcImgyXCI6Y2FzZVwiaDNcIjpjYXNlXCJoNFwiOmNhc2VcImg1XCI6Y2FzZVwiaDZcIjpyZXR1cm5cImgxXCIhPT10JiZcImgyXCIhPT10JiZcImgzXCIhPT10JiZcImg0XCIhPT10JiZcImg1XCIhPT10JiZcImg2XCIhPT10O2Nhc2VcInJwXCI6Y2FzZVwicnRcIjpyZXR1cm4tMT09PWltcGxpZWRFbmRUYWdzLmluZGV4T2YodCk7Y2FzZVwiYm9keVwiOmNhc2VcImNhcHRpb25cIjpjYXNlXCJjb2xcIjpjYXNlXCJjb2xncm91cFwiOmNhc2VcImZyYW1lXCI6Y2FzZVwiaGVhZFwiOmNhc2VcImh0bWxcIjpjYXNlXCJ0Ym9keVwiOmNhc2VcInRkXCI6Y2FzZVwidGZvb3RcIjpjYXNlXCJ0aFwiOmNhc2VcInRoZWFkXCI6Y2FzZVwidHJcIjpyZXR1cm4gbnVsbD09dH1yZXR1cm4hMH0sZmluZEludmFsaWRBbmNlc3RvckZvclRhZz1mdW5jdGlvbihlLHQpe3N3aXRjaChlKXtjYXNlXCJhZGRyZXNzXCI6Y2FzZVwiYXJ0aWNsZVwiOmNhc2VcImFzaWRlXCI6Y2FzZVwiYmxvY2txdW90ZVwiOmNhc2VcImNlbnRlclwiOmNhc2VcImRldGFpbHNcIjpjYXNlXCJkaWFsb2dcIjpjYXNlXCJkaXJcIjpjYXNlXCJkaXZcIjpjYXNlXCJkbFwiOmNhc2VcImZpZWxkc2V0XCI6Y2FzZVwiZmlnY2FwdGlvblwiOmNhc2VcImZpZ3VyZVwiOmNhc2VcImZvb3RlclwiOmNhc2VcImhlYWRlclwiOmNhc2VcImhncm91cFwiOmNhc2VcIm1haW5cIjpjYXNlXCJtZW51XCI6Y2FzZVwibmF2XCI6Y2FzZVwib2xcIjpjYXNlXCJwXCI6Y2FzZVwic2VjdGlvblwiOmNhc2VcInN1bW1hcnlcIjpjYXNlXCJ1bFwiOmNhc2VcInByZVwiOmNhc2VcImxpc3RpbmdcIjpjYXNlXCJ0YWJsZVwiOmNhc2VcImhyXCI6Y2FzZVwieG1wXCI6Y2FzZVwiaDFcIjpjYXNlXCJoMlwiOmNhc2VcImgzXCI6Y2FzZVwiaDRcIjpjYXNlXCJoNVwiOmNhc2VcImg2XCI6cmV0dXJuIHQucFRhZ0luQnV0dG9uU2NvcGU7Y2FzZVwiZm9ybVwiOnJldHVybiB0LmZvcm1UYWd8fHQucFRhZ0luQnV0dG9uU2NvcGU7Y2FzZVwibGlcIjpyZXR1cm4gdC5saXN0SXRlbVRhZ0F1dG9jbG9zaW5nO2Nhc2VcImRkXCI6Y2FzZVwiZHRcIjpyZXR1cm4gdC5kbEl0ZW1UYWdBdXRvY2xvc2luZztjYXNlXCJidXR0b25cIjpyZXR1cm4gdC5idXR0b25UYWdJblNjb3BlO2Nhc2VcImFcIjpyZXR1cm4gdC5hVGFnSW5TY29wZTtjYXNlXCJub2JyXCI6cmV0dXJuIHQubm9iclRhZ0luU2NvcGV9cmV0dXJuIG51bGx9LGZpbmRPd25lclN0YWNrPWZ1bmN0aW9uKGUpe2lmKCFlKXJldHVybltdO3ZhciB0PVtdO2Rve3QucHVzaChlKX13aGlsZShlPWUuX2N1cnJlbnRFbGVtZW50Ll9vd25lcik7cmV0dXJuIHQucmV2ZXJzZSgpLHR9LGRpZFdhcm49e307KHZhbGlkYXRlRE9NTmVzdGluZz1mdW5jdGlvbihlLHQsYSxuKXt2YXIgbz0obj1ufHxlbXB0eUFuY2VzdG9ySW5mbykuY3VycmVudCxyPW8mJm8udGFnO251bGwhPXQmJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ3YXJuaW5nKG51bGw9PWUsXCJ2YWxpZGF0ZURPTU5lc3Rpbmc6IHdoZW4gY2hpbGRUZXh0IGlzIHBhc3NlZCwgY2hpbGRUYWcgc2hvdWxkIGJlIG51bGxcIiksZT1cIiN0ZXh0XCIpO3ZhciBzPWlzVGFnVmFsaWRXaXRoUGFyZW50KGUscik/bnVsbDpvLGM9cz9udWxsOmZpbmRJbnZhbGlkQW5jZXN0b3JGb3JUYWcoZSxuKSxpPXN8fGM7aWYoaSl7dmFyIGwsdT1pLnRhZyxkPWkuaW5zdGFuY2UscD1hJiZhLl9jdXJyZW50RWxlbWVudC5fb3duZXIsZz1kJiZkLl9jdXJyZW50RWxlbWVudC5fb3duZXIsbT1maW5kT3duZXJTdGFjayhwKSxoPWZpbmRPd25lclN0YWNrKGcpLGY9TWF0aC5taW4obS5sZW5ndGgsaC5sZW5ndGgpLGI9LTE7Zm9yKGw9MDtsPGYmJm1bbF09PT1oW2xdO2wrKyliPWw7dmFyIFQ9bS5zbGljZShiKzEpLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZS5nZXROYW1lKCl8fFwiKHVua25vd24pXCJ9KSxJPWguc2xpY2UoYisxKS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGUuZ2V0TmFtZSgpfHxcIih1bmtub3duKVwifSksdj1bXS5jb25jYXQoLTEhPT1iP21bYl0uZ2V0TmFtZSgpfHxcIih1bmtub3duKVwiOltdLEksdSxjP1tcIi4uLlwiXTpbXSxULGUpLmpvaW4oXCIgPiBcIiksUz0hIXMrXCJ8XCIrZStcInxcIit1K1wifFwiK3Y7aWYoZGlkV2FybltTXSlyZXR1cm47ZGlkV2FybltTXT0hMDt2YXIgeT1lLHc9XCJcIjtpZihcIiN0ZXh0XCI9PT1lPy9cXFMvLnRlc3QodCk/eT1cIlRleHQgbm9kZXNcIjooeT1cIldoaXRlc3BhY2UgdGV4dCBub2Rlc1wiLHc9XCIgTWFrZSBzdXJlIHlvdSBkb24ndCBoYXZlIGFueSBleHRyYSB3aGl0ZXNwYWNlIGJldHdlZW4gdGFncyBvbiBlYWNoIGxpbmUgb2YgeW91ciBzb3VyY2UgY29kZS5cIik6eT1cIjxcIitlK1wiPlwiLHMpe3ZhciB4PVwiXCI7XCJ0YWJsZVwiPT09dSYmXCJ0clwiPT09ZSYmKHgrPVwiIEFkZCBhIDx0Ym9keT4gdG8geW91ciBjb2RlIHRvIG1hdGNoIHRoZSBET00gdHJlZSBnZW5lcmF0ZWQgYnkgdGhlIGJyb3dzZXIuXCIpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcoITEsXCJ2YWxpZGF0ZURPTU5lc3RpbmcoLi4uKTogJXMgY2Fubm90IGFwcGVhciBhcyBhIGNoaWxkIG9mIDwlcz4uJXMgU2VlICVzLiVzXCIseSx1LHcsdix4KX1lbHNlXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FybmluZyghMSxcInZhbGlkYXRlRE9NTmVzdGluZyguLi4pOiAlcyBjYW5ub3QgYXBwZWFyIGFzIGEgZGVzY2VuZGFudCBvZiA8JXM+LiBTZWUgJXMuXCIseSx1LHYpfX0pLnVwZGF0ZWRBbmNlc3RvckluZm89dXBkYXRlZEFuY2VzdG9ySW5mbyx2YWxpZGF0ZURPTU5lc3RpbmcuaXNUYWdWYWxpZEluQ29udGV4dD1mdW5jdGlvbihlLHQpe3ZhciBhPSh0PXR8fGVtcHR5QW5jZXN0b3JJbmZvKS5jdXJyZW50LG49YSYmYS50YWc7cmV0dXJuIGlzVGFnVmFsaWRXaXRoUGFyZW50KGUsbikmJiFmaW5kSW52YWxpZEFuY2VzdG9yRm9yVGFnKGUsdCl9fW1vZHVsZS5leHBvcnRzPXZhbGlkYXRlRE9NTmVzdGluZztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluWmhiR2xrWVhSbFJFOU5UbVZ6ZEdsdVp5NXFjeUpkTENKdVlXMWxjeUk2V3lKZllYTnphV2R1SWl3aWNtVnhkV2x5WlNJc0ltVnRjSFI1Um5WdVkzUnBiMjRpTENKM1lYSnVhVzVuSWl3aWRtRnNhV1JoZEdWRVQwMU9aWE4wYVc1bklpd2ljSEp2WTJWemN5SXNJbVZ1ZGlJc0lrNVBSRVZmUlU1V0lpd2ljM0JsWTJsaGJGUmhaM01pTENKcGJsTmpiM0JsVkdGbmN5SXNJbUoxZEhSdmJsTmpiM0JsVkdGbmN5SXNJbU52Ym1OaGRDSXNJbWx0Y0d4cFpXUkZibVJVWVdkeklpd2laVzF3ZEhsQmJtTmxjM1J2Y2tsdVptOGlMQ0pqZFhKeVpXNTBJaXdpWm05eWJWUmhaeUlzSW1GVVlXZEpibE5qYjNCbElpd2lZblYwZEc5dVZHRm5TVzVUWTI5d1pTSXNJbTV2WW5KVVlXZEpibE5qYjNCbElpd2ljRlJoWjBsdVFuVjBkRzl1VTJOdmNHVWlMQ0pzYVhOMFNYUmxiVlJoWjBGMWRHOWpiRzl6YVc1bklpd2laR3hKZEdWdFZHRm5RWFYwYjJOc2IzTnBibWNpTENKMWNHUmhkR1ZrUVc1alpYTjBiM0pKYm1adklpd2liMnhrU1c1bWJ5SXNJblJoWnlJc0ltbHVjM1JoYm1ObElpd2lZVzVqWlhOMGIzSkpibVp2SWl3aWFXNW1ieUlzSW1sdVpHVjRUMllpTENKcGMxUmhaMVpoYkdsa1YybDBhRkJoY21WdWRDSXNJbkJoY21WdWRGUmhaeUlzSW1acGJtUkpiblpoYkdsa1FXNWpaWE4wYjNKR2IzSlVZV2NpTENKbWFXNWtUM2R1WlhKVGRHRmpheUlzSW5OMFlXTnJJaXdpY0hWemFDSXNJbDlqZFhKeVpXNTBSV3hsYldWdWRDSXNJbDl2ZDI1bGNpSXNJbkpsZG1WeWMyVWlMQ0prYVdSWFlYSnVJaXdpWTJocGJHUlVZV2NpTENKamFHbHNaRlJsZUhRaUxDSmphR2xzWkVsdWMzUmhibU5sSWl3aWNHRnlaVzUwU1c1bWJ5SXNJbWx1ZG1Gc2FXUlFZWEpsYm5RaUxDSnBiblpoYkdsa1FXNWpaWE4wYjNJaUxDSndjbTlpYkdWdFlYUnBZeUlzSW1raUxDSmhibU5sYzNSdmNsUmhaeUlzSW1GdVkyVnpkRzl5U1c1emRHRnVZMlVpTENKamFHbHNaRTkzYm1WeUlpd2lZVzVqWlhOMGIzSlBkMjVsY2lJc0ltTm9hV3hrVDNkdVpYSnpJaXdpWVc1alpYTjBiM0pQZDI1bGNuTWlMQ0p0YVc1VGRHRmphMHhsYmlJc0lrMWhkR2dpTENKdGFXNGlMQ0pzWlc1bmRHZ2lMQ0prWldWd1pYTjBRMjl0Ylc5dUlpd2lZMmhwYkdSUGQyNWxjazVoYldWeklpd2ljMnhwWTJVaUxDSnRZWEFpTENKcGJuTjBJaXdpWjJWMFRtRnRaU0lzSW1GdVkyVnpkRzl5VDNkdVpYSk9ZVzFsY3lJc0ltOTNibVZ5U1c1bWJ5SXNJbXB2YVc0aUxDSjNZWEp1UzJWNUlpd2lkR0ZuUkdsemNHeGhlVTVoYldVaUxDSjNhR2wwWlhOd1lXTmxTVzVtYnlJc0luUmxjM1FpTENKcGMxUmhaMVpoYkdsa1NXNURiMjUwWlhoMElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlVVRXNZVUZGUVN4SlFVRkpRU3hSUVVGVlF5eFJRVUZSTEdsQ1FVVnNRa01zWTBGQlowSkVMRkZCUVZFc01FSkJRM2hDUlN4UlFVRlZSaXhSUVVGUkxHOUNRVVZzUWtjc2JVSkJRWEZDUml4alFVVjZRaXhIUVVFMlFpeGxRVUY2UWtjc1VVRkJVVU1zU1VGQlNVTXNVMEZCTWtJc1EwRmhla01zU1VGQlNVTXNXVUZCWXl4RFFVRkRMRlZCUVZjc1UwRkJWU3hQUVVGUkxGVkJRVmNzVVVGQlV5eFBRVUZSTEZkQlFWa3NWVUZCVnl4aFFVRmpMRTlCUVZFc1MwRkJUU3hUUVVGVkxGVkJRVmNzVTBGQlZTeE5RVUZQTEZkQlFWa3NTMEZCVFN4VlFVRlhMRTFCUVU4c1RVRkJUeXhMUVVGTkxFdEJRVTBzVVVGQlV5eFhRVUZaTEdGQlFXTXNVMEZCVlN4VFFVRlZMRTlCUVZFc1VVRkJVeXhYUVVGWkxFdEJRVTBzUzBGQlRTeExRVUZOTEV0QlFVMHNTMEZCVFN4TFFVRk5MRTlCUVZFc1UwRkJWU3hUUVVGVkxFdEJRVTBzVDBGQlVTeFRRVUZWTEUxQlFVOHNVVUZCVXl4VlFVRlhMRXRCUVUwc1QwRkJVU3hWUVVGWExFOUJRVkVzVlVGQlZ5eFBRVUZSTEZkQlFWa3NUMEZCVVN4TlFVRlBMRlZCUVZjc1YwRkJXU3hYUVVGWkxGTkJRVlVzUzBGQlRTeEpRVUZMTEZGQlFWTXNXVUZCWVN4TlFVRlBMRk5CUVZVc1ZVRkJWeXhUUVVGVkxGTkJRVlVzVVVGQlV5eFZRVUZYTEZGQlFWTXNVVUZCVXl4TFFVRk5MRmRCUVZrc1YwRkJXU3hSUVVGVExFdEJRVTBzVVVGQlV5eFJRVUZUTEV0QlFVMHNVVUZCVXl4TFFVRk5MRTFCUVU4c1QwRkhOM1ZDUXl4WlFVRmpMRU5CUVVNc1UwRkJWU3hWUVVGWExFOUJRVkVzVVVGQlV5eExRVUZOTEV0QlFVMHNWVUZCVnl4VFFVRlZMRmRCU3pGR0xHZENRVUZwUWl4UFFVRlJMRk5CUjNKQ1F5eG5Ra0ZCYTBKRUxGbEJRVmxGTEU5QlFVOHNRMEZCUXl4WFFVZDBRME1zWlVGQmFVSXNRMEZCUXl4TFFVRk5MRXRCUVUwc1MwRkJUU3hUUVVGVkxGZEJRVmtzU1VGQlN5eExRVUZOTEUxQlJYSkZReXhyUWtGQmIwSXNRMEZEZEVKRExGRkJRVk1zUzBGRlZFTXNVVUZCVXl4TFFVTlVReXhaUVVGaExFdEJRMkpETEdsQ1FVRnJRaXhMUVVOc1FrTXNaVUZCWjBJc1MwRkRhRUpETEd0Q1FVRnRRaXhMUVVWdVFrTXNkVUpCUVhkQ0xFdEJRM2hDUXl4eFFrRkJjMElzVFVGSGNFSkRMRzlDUVVGelFpeFRRVUZWUXl4RlFVRlRReXhGUVVGTFF5eEhRVU5vUkN4SlFVRkpReXhGUVVGbE1VSXNVVUZCVVN4SFFVRkpkVUlzUjBGQlYxWXNiVUpCUTNSRFl5eEZRVUZQTEVOQlFVVklMRWxCUVV0QkxFVkJRVXRETEZOQlFWVkJMRWRCTUVOcVF5eFBRWGhEYTBNc1NVRkJPVUpvUWl4WlFVRlpiVUlzVVVGQlVVb3NTMEZEZEVKRkxFVkJRV0ZXTEZsQlFXTXNTMEZETTBKVkxFVkJRV0ZVTEdsQ1FVRnRRaXhMUVVOb1ExTXNSVUZCWVZJc1pVRkJhVUlzVDBGRlRTeEpRVUZzUTFJc1owSkJRV2RDYTBJc1VVRkJVVW9zUzBGRE1VSkZMRVZCUVdGUUxHdENRVUZ2UWl4UFFVdEVMRWxCUVRsQ1dDeFpRVUZaYjBJc1VVRkJVVW9zU1VGQmRVSXNXVUZCVWtFc1IwRkJOa0lzVVVGQlVrRXNSMEZCZVVJc1RVRkJVa0VzU1VGRE0wVkZMRVZCUVdGT0xIVkNRVUY1UWl4TFFVTjBRMDBzUlVGQllVd3NjVUpCUVhWQ0xFMUJSM1JEU3l4RlFVRmhXaXhSUVVGVllTeEZRVVZZTEZOQlFWSklMRWxCUTBaRkxFVkJRV0ZZTEZGQlFWVlpMRWRCUldJc1RVRkJVa2dzU1VGRFJrVXNSVUZCWVZZc1dVRkJZMWNzUjBGRmFrSXNWMEZCVWtnc1NVRkRSa1VzUlVGQllWUXNhVUpCUVcxQ1ZTeEhRVVYwUWl4VFFVRlNTQ3hKUVVOR1JTeEZRVUZoVWl4bFFVRnBRbE1zUjBGRmNFSXNUVUZCVWtnc1NVRkRSa1VzUlVGQllWQXNhMEpCUVc5Q1VTeEhRVVYyUWl4UFFVRlNTQ3hKUVVOR1JTeEZRVUZoVGl4MVFrRkJlVUpQTEVkQlJUVkNMRTlCUVZKSUxFZEJRWGRDTEU5QlFWSkJMRWxCUTJ4Q1JTeEZRVUZoVEN4eFFrRkJkVUpOTEVkQlJ5OUNSQ3hIUVUxTVJ5eHhRa0ZCZFVJc1UwRkJWVXdzUlVGQlMwMHNSMEZGZUVNc1QwRkJVVUVzUjBGRlRpeEpRVUZMTEZOQlEwZ3NUVUZCWlN4WFFVRlNUaXhIUVVFMFFpeGhRVUZTUVN4SFFVRTRRaXhWUVVGU1FTeEZRVU51UkN4SlFVRkxMRmRCUTBnc1RVRkJaU3hYUVVGU1FTeEhRVUUwUWl4VlFVRlNRU3hGUVVjM1FpeEpRVUZMTEZOQlEwZ3NUVUZCWlN4VlFVRlNRU3hGUVU5VUxFbEJRVXNzUzBGRFNDeE5RVUZsTEU5QlFWSkJMRWRCUVhkQ0xFOUJRVkpCTEVkQlFYZENMRlZCUVZKQkxFZEJRVEpDTEZkQlFWSkJMRWRCUVRSQ0xHRkJRVkpCTEVWQlJXaEdMRWxCUVVzc1VVRkRUQ3hKUVVGTExGRkJRMHdzU1VGQlN5eFJRVU5JTEUxQlFXVXNUMEZCVWtFc1IwRkJkMElzVlVGQlVrRXNSMEZCTWtJc1YwRkJVa0VzUjBGQk5FSXNZVUZCVWtFc1JVRkZhRVVzU1VGQlN5eFhRVU5JTEUxQlFXVXNVVUZCVWtFc1IwRkJlVUlzWVVGQlVrRXNSVUZGTVVJc1NVRkJTeXhSUVVOSUxFMUJRV1VzV1VGQlVrRXNSMEZCTmtJc1lVRkJVa0VzUjBGQk9FSXNWVUZCVWtFc1IwRkJNa0lzVlVGQlVrRXNSMEZCTWtJc1ZVRkJVa0VzUjBGQk1rSXNWVUZCVWtFc1IwRkJNa0lzVjBGQlVrRXNSMEZCTkVJc1lVRkJVa0VzUlVGRmNFb3NTVUZCU3l4UFFVTklMRTFCUVdVc1UwRkJVa0VzUjBGQk1FSXNZVUZCVWtFc1IwRkJPRUlzV1VGQlVrRXNSMEZCTmtJc1UwRkJVa0VzUjBGQk1FSXNVMEZCVWtFc1IwRkJNRUlzVlVGQlVrRXNSMEZCTWtJc1lVRkJVa0VzUjBGQk9FSXNZVUZCVWtFc1IwRkJPRUlzVlVGQlVrRXNSMEZCTWtJc1YwRkJVa0VzUjBGQk5FSXNZVUZCVWtFc1JVRkZhRTRzU1VGQlN5eFBRVU5JTEUxQlFXVXNVMEZCVWtFc1IwRkJNRUlzVTBGQlVrRXNSVUZETTBJc1NVRkJTeXhaUVVOSUxFMUJRV1VzVTBGQlVrRXNSVUZOV0N4UFFVRlJRU3hIUVVOT0xFbEJRVXNzUzBGRFRDeEpRVUZMTEV0QlEwd3NTVUZCU3l4TFFVTk1MRWxCUVVzc1MwRkRUQ3hKUVVGTExFdEJRMHdzU1VGQlN5eExRVU5JTEUxQlFYRkNMRTlCUVdSTkxFZEJRVzlETEU5QlFXUkJMRWRCUVc5RExFOUJRV1JCTEVkQlFXOURMRTlCUVdSQkxFZEJRVzlETEU5QlFXUkJMRWRCUVc5RExFOUJRV1JCTEVWQlJYWklMRWxCUVVzc1MwRkRUQ3hKUVVGTExFdEJRMGdzVDBGQk9FTXNTVUZCZGtOc1FpeGxRVUZsWjBJc1VVRkJVVVVzUjBGRmFFTXNTVUZCU3l4UFFVTk1MRWxCUVVzc1ZVRkRUQ3hKUVVGTExFMUJRMHdzU1VGQlN5eFhRVU5NTEVsQlFVc3NVVUZEVEN4SlFVRkxMRTlCUTB3c1NVRkJTeXhQUVVOTUxFbEJRVXNzVVVGRFRDeEpRVUZMTEV0QlEwd3NTVUZCU3l4UlFVTk1MRWxCUVVzc1MwRkRUQ3hKUVVGTExGRkJRMHdzU1VGQlN5eExRVXRJTEU5QlFXOUNMRTFCUVdKQkxFVkJSMWdzVDBGQlR5eEhRVTFNUXl3d1FrRkJORUlzVTBGQlZWQXNSVUZCUzBVc1IwRkROME1zVDBGQlVVWXNSMEZEVGl4SlFVRkxMRlZCUTB3c1NVRkJTeXhWUVVOTUxFbEJRVXNzVVVGRFRDeEpRVUZMTEdGQlEwd3NTVUZCU3l4VFFVTk1MRWxCUVVzc1ZVRkRUQ3hKUVVGTExGTkJRMHdzU1VGQlN5eE5RVU5NTEVsQlFVc3NUVUZEVEN4SlFVRkxMRXRCUTB3c1NVRkJTeXhYUVVOTUxFbEJRVXNzWVVGRFRDeEpRVUZMTEZOQlEwd3NTVUZCU3l4VFFVTk1MRWxCUVVzc1UwRkRUQ3hKUVVGTExGTkJRMHdzU1VGQlN5eFBRVU5NTEVsQlFVc3NUMEZEVEN4SlFVRkxMRTFCUTB3c1NVRkJTeXhMUVVOTUxFbEJRVXNzU1VGRFRDeEpRVUZMTEZWQlEwd3NTVUZCU3l4VlFVTk1MRWxCUVVzc1MwRkRUQ3hKUVVGTExFMUJRMHdzU1VGQlN5eFZRVU5NTEVsQlFVc3NVVUZEVEN4SlFVRkxMRXRCUTB3c1NVRkJTeXhOUVVOTUxFbEJRVXNzUzBGRFRDeEpRVUZMTEV0QlEwd3NTVUZCU3l4TFFVTk1MRWxCUVVzc1MwRkRUQ3hKUVVGTExFdEJRMHdzU1VGQlN5eExRVU5JTEU5QlFVOUZMRVZCUVdGUUxHdENRVVYwUWl4SlFVRkxMRTlCUTBnc1QwRkJUMDhzUlVGQllWZ3NVMEZCVjFjc1JVRkJZVkFzYTBKQlJUbERMRWxCUVVzc1MwRkRTQ3hQUVVGUFR5eEZRVUZoVGl4MVFrRkZkRUlzU1VGQlN5eExRVU5NTEVsQlFVc3NTMEZEU0N4UFFVRlBUU3hGUVVGaFRDeHhRa0ZGZEVJc1NVRkJTeXhUUVVOSUxFOUJRVTlMTEVWQlFXRlVMR2xDUVVWMFFpeEpRVUZMTEVsQlIwZ3NUMEZCVDFNc1JVRkJZVllzV1VGRmRFSXNTVUZCU3l4UFFVTklMRTlCUVU5VkxFVkJRV0ZTTEdWQlIzaENMRTlCUVU4c1RVRlBUR01zWlVGQmFVSXNVMEZCVlZBc1IwRkROMElzU1VGQlMwRXNSVUZEU0N4TlFVRlBMRWRCUjFRc1NVRkJTVkVzUlVGQlVTeEhRVU5hTEVkQlEwVkJMRVZCUVUxRExFdEJRVXRVTEZOQlEwcEJMRVZCUVZkQkxFVkJRVk5WTEdkQ1FVRm5Ra01zVVVGRk4wTXNUMEZFUVVnc1JVRkJUVWtzVlVGRFEwb3NSMEZIVEVzc1VVRkJWU3hKUVVWa2JFTXNiVUpCUVhGQ0xGTkJRVlZ0UXl4RlFVRlZReXhGUVVGWFF5eEZRVUZsWml4SFFVVnFSU3hKUVVGSlowSXNSMEZFU21oQ0xFVkJRV1ZCTEVkQlFXZENZaXh0UWtGRFJFTXNVVUZETVVKblFpeEZRVUZaV1N4SFFVRmpRU3hGUVVGWGJFSXNTVUZGZUVJc1RVRkJZbWRDTEVsQlEzVkNMR1ZCUVhwQ2JrTXNVVUZCVVVNc1NVRkJTVU1zVlVGQk5FSktMRkZCUVc5Q0xFMUJRVnB2UXl4RlFVRnJRaXg1UlVGRGJFVkJMRVZCUVZjc1UwRkhZaXhKUVVGSlNTeEZRVUZuUW1Rc2NVSkJRWEZDVlN4RlFVRlZWQ3hIUVVGaExFdEJRVTlaTEVWQlEyNUZSU3hGUVVGclFrUXNSVUZCWjBJc1MwRkJUMW9zTUVKQlFUQkNVU3hGUVVGVllpeEhRVU0zUlcxQ0xFVkJRV05HTEVkQlFXbENReXhGUVVWdVF5eEhRVUZKUXl4RlFVRmhMRU5CUTJZc1NVRlZTVU1zUlVGV1FVTXNSVUZCWTBZc1JVRkJXWEpDTEVsQlF6RkNkMElzUlVGQmJVSklMRVZCUVZsd1FpeFRRVVV2UW5kQ0xFVkJRV0ZTTEVkQlFXbENRU3hGUVVGalRpeG5Ra0ZCWjBKRExFOUJRelZFWXl4RlFVRm5Ra1lzUjBGQmIwSkJMRVZCUVdsQ1lpeG5Ra0ZCWjBKRExFOUJSWEpGWlN4RlFVRmpia0lzWlVGQlpXbENMRWRCUXpkQ1J5eEZRVUZwUW5CQ0xHVkJRV1ZyUWl4SFFVVm9RMGNzUlVGQlkwTXNTMEZCUzBNc1NVRkJTVW9zUlVGQldVc3NUMEZCVVVvc1JVRkJaVWtzVVVGSE1VUkRMRWRCUVdsQ0xFVkJRM0pDTEVsQlFVdFlMRVZCUVVrc1JVRkJSMEVzUlVGQlNVOHNSMEZEVmtZc1JVRkJXVXdzUzBGQlQwMHNSVUZCWlU0c1IwRkVXRUVzU1VGRmVrSlhMRVZCUVdkQ1dDeEZRVTF3UWl4SlFVTkpXU3hGUVVGclFsQXNSVUZCV1ZFc1RVRkJUVVlzUlVGQlowSXNSMEZCUjBjc1NVRkJTU3hUUVVGVlF5eEhRVU4yUlN4UFFVRlBRU3hGUVVGTFF5eFhRVVpCTEdOQlNWWkRMRVZCUVhGQ1dDeEZRVUZsVHl4TlFVRk5SaXhGUVVGblFpeEhRVUZIUnl4SlFVRkpMRk5CUVZWRExFZEJRemRGTEU5QlFVOUJMRVZCUVV0RExGZEJURUVzWTBGUFZrVXNSVUZCV1N4SFFVRkhja1FzVVVGSFFTeEpRVUZ1UWpoRExFVkJRWFZDVGl4RlFVRlpUU3hIUVVGbFN5eFhRVlp3UXl4WlFWVXlSQ3hIUVVGSlF5eEZRVUZ2UW1oQ0xFVkJSV3BIU0N4RlFVRnJRaXhEUVVGRExFOUJRVk1zUjBGQlNXTXNSVUZCYVVKdVFpeEhRVUZWTUVJc1MwRkJTeXhQUVVVMVJFTXNTVUZCV1haQ0xFVkJRV2RDTEVsQlFVMUtMRVZCUVZjc1NVRkJUVkVzUlVGQll5eEpRVUZOYVVJc1JVRkRNMFVzUjBGQlNURkNMRkZCUVZFMFFpeEhRVU5XTEU5QlJVWTFRaXhSUVVGUk5FSXNTVUZCVnl4RlFVVnVRaXhKUVVGSlF5eEZRVUZwUWpWQ0xFVkJRMnBDTmtJc1JVRkJhVUlzUjBGWmNrSXNSMEZZYVVJc1ZVRkJZamRDTEVWQlEwVXNTMEZCU3poQ0xFdEJRVXMzUWl4SFFVTmFNa0lzUlVGQmFVSXNZMEZGYWtKQkxFVkJRV2xDTEhkQ1FVTnFRa01zUlVGQmFVSXNhVWRCUjI1Q1JDeEZRVUZwUWl4SlFVRk5OVUlzUlVGQlZ5eEpRVWRvUTBrc1JVRkJaU3hEUVVOcVFpeEpRVUZKYUVJc1JVRkJUeXhIUVVOVExGVkJRV2hDYjBJc1IwRkJkME1zVDBGQllsSXNTVUZETjBKYUxFZEJRVkVzSzBWQlJXVXNaVUZCZWtKMFFpeFJRVUZSUXl4SlFVRkpReXhWUVVFMFFrb3NVMEZCVVN4RlFVRlBMRFJGUVVGclJtZEZMRVZCUVdkQ2NFSXNSVUZCWVhGQ0xFVkJRV2RDU2l4RlFVRlhja01zVDBGRmVFc3NaVUZCZWtKMFFpeFJRVUZSUXl4SlFVRkpReXhWUVVFMFFrb3NVMEZCVVN4RlFVRlBMRFpGUVVGdFJtZEZMRVZCUVdkQ2NFSXNSVUZCWVdsQ0xFMUJTekZLTVVNc2IwSkJRWE5DUVN4dlFrRkhla05zUWl4dFFrRkJiVUpyUlN4dlFrRkJjMElzVTBGQlZUbERMRVZCUVV0RkxFZEJSWFJFTEVsQlFVbG5RaXhIUVVSS2FFSXNSVUZCWlVFc1IwRkJaMEppTEcxQ1FVTkVReXhSUVVNeFFtZENMRVZCUVZsWkxFZEJRV05CTEVWQlFWZHNRaXhKUVVONlF5eFBRVUZQU3l4eFFrRkJjVUpNTEVWQlFVdE5MRXRCUVdWRExEQkNRVUV3UWxBc1JVRkJTMFVzU1VGSmJrWTJReXhQUVVGUFF5eFJRVUZWY0VVaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Y21WaFkzUXRaRzl0TDJ4cFlpOTJZV3hwWkdGMFpVUlBUVTVsYzNScGJtY3Vhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmZ1bmN0aW9uKCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGU9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLHQ9ZT9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxyPWU/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixvPWU/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LG49ZT9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgscz1lP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxmPWU/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGk9ZT9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxwPWU/U3ltYm9sLmZvcihcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsYz1lP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMix5PWU/U3ltYm9sLmZvcihcInJlYWN0LnBsYWNlaG9sZGVyXCIpOjYwMTEzO2Z1bmN0aW9uIHR5cGVPZihlKXtpZihcIm9iamVjdFwiPT10eXBlb2YgZSYmbnVsbCE9PWUpe3ZhciB5PWUuJCR0eXBlb2Y7c3dpdGNoKHkpe2Nhc2UgdDp2YXIgYT1lLnR5cGU7c3dpdGNoKGEpe2Nhc2UgcDpjYXNlIG86Y2FzZSBzOmNhc2UgbjpyZXR1cm4gYTtkZWZhdWx0OnZhciB1PWEmJmEuJCR0eXBlb2Y7c3dpdGNoKHUpe2Nhc2UgaTpjYXNlIGM6Y2FzZSBmOnJldHVybiB1O2RlZmF1bHQ6cmV0dXJuIHl9fWNhc2UgcjpyZXR1cm4geX19fXZhciBhPXAsdT1pLGw9Zix4PXQsbT1jLGQ9byxiPXMsUz1yLE89bjtleHBvcnRzLnR5cGVPZj10eXBlT2YsZXhwb3J0cy5Bc3luY01vZGU9YSxleHBvcnRzLkNvbnRleHRDb25zdW1lcj11LGV4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWwsZXhwb3J0cy5FbGVtZW50PXgsZXhwb3J0cy5Gb3J3YXJkUmVmPW0sZXhwb3J0cy5GcmFnbWVudD1kLGV4cG9ydHMuUHJvZmlsZXI9YixleHBvcnRzLlBvcnRhbD1TLGV4cG9ydHMuU3RyaWN0TW9kZT1PLGV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uIGlzVmFsaWRFbGVtZW50VHlwZShlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZXx8XCJmdW5jdGlvblwiPT10eXBlb2YgZXx8ZT09PW98fGU9PT1wfHxlPT09c3x8ZT09PW58fGU9PT15fHxcIm9iamVjdFwiPT10eXBlb2YgZSYmbnVsbCE9PWUmJihcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnRoZW58fGUuJCR0eXBlb2Y9PT1mfHxlLiQkdHlwZW9mPT09aXx8ZS4kJHR5cGVvZj09PWMpfSxleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uIGlzQXN5bmNNb2RlKGUpe3JldHVybiB0eXBlT2YoZSk9PT1wfSxleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uIGlzQ29udGV4dENvbnN1bWVyKGUpe3JldHVybiB0eXBlT2YoZSk9PT1pfSxleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uIGlzQ29udGV4dFByb3ZpZGVyKGUpe3JldHVybiB0eXBlT2YoZSk9PT1mfSxleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbiBpc0VsZW1lbnQoZSl7cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIGUmJm51bGwhPT1lJiZlLiQkdHlwZW9mPT09dH0sZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24gaXNGb3J3YXJkUmVmKGUpe3JldHVybiB0eXBlT2YoZSk9PT1jfSxleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24gaXNGcmFnbWVudChlKXtyZXR1cm4gdHlwZU9mKGUpPT09b30sZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uIGlzUHJvZmlsZXIoZSl7cmV0dXJuIHR5cGVPZihlKT09PXN9LGV4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24gaXNQb3J0YWwoZSl7cmV0dXJuIHR5cGVPZihlKT09PXJ9LGV4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uIGlzU3RyaWN0TW9kZShlKXtyZXR1cm4gdHlwZU9mKGUpPT09bn19KCk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbkpsWVdOMExXbHpMbVJsZG1Wc2IzQnRaVzUwTG1weklsMHNJbTVoYldWeklqcGJJbkJ5YjJObGMzTWlMQ0psYm5ZaUxDSk9UMFJGWDBWT1ZpSXNJazlpYW1WamRDSXNJbVJsWm1sdVpWQnliM0JsY25SNUlpd2laWGh3YjNKMGN5SXNJblpoYkhWbElpd2lhR0Z6VTNsdFltOXNJaXdpVTNsdFltOXNJaXdpWm05eUlpd2lVa1ZCUTFSZlJVeEZUVVZPVkY5VVdWQkZJaXdpVWtWQlExUmZVRTlTVkVGTVgxUlpVRVVpTENKU1JVRkRWRjlHVWtGSFRVVk9WRjlVV1ZCRklpd2lVa1ZCUTFSZlUxUlNTVU5VWDAxUFJFVmZWRmxRUlNJc0lsSkZRVU5VWDFCU1QwWkpURVZTWDFSWlVFVWlMQ0pTUlVGRFZGOVFVazlXU1VSRlVsOVVXVkJGSWl3aVVrVkJRMVJmUTA5T1ZFVllWRjlVV1ZCRklpd2lVa1ZCUTFSZlFWTlpUa05mVFU5RVJWOVVXVkJGSWl3aVVrVkJRMVJmUms5U1YwRlNSRjlTUlVaZlZGbFFSU0lzSWxKRlFVTlVYMUJNUVVORlNFOU1SRVZTWDFSWlVFVWlMQ0owZVhCbFQyWWlMQ0p2WW1wbFkzUWlMQ0lrSkhSNWNHVnZaaUlzSW5SNWNHVWlMQ0lrSkhSNWNHVnZabFI1Y0dVaUxDSkJjM2x1WTAxdlpHVWlMQ0pEYjI1MFpYaDBRMjl1YzNWdFpYSWlMQ0pEYjI1MFpYaDBVSEp2ZG1sa1pYSWlMQ0pGYkdWdFpXNTBJaXdpUm05eWQyRnlaRkpsWmlJc0lrWnlZV2R0Wlc1MElpd2lVSEp2Wm1sc1pYSWlMQ0pRYjNKMFlXd2lMQ0pUZEhKcFkzUk5iMlJsSWl3aWFYTldZV3hwWkVWc1pXMWxiblJVZVhCbElpd2lkR2hsYmlJc0ltbHpRWE41Ym1OTmIyUmxJaXdpYVhORGIyNTBaWGgwUTI5dWMzVnRaWElpTENKcGMwTnZiblJsZUhSUWNtOTJhV1JsY2lJc0ltbHpSV3hsYldWdWRDSXNJbWx6Um05eWQyRnlaRkpsWmlJc0ltbHpSbkpoWjIxbGJuUWlMQ0pwYzFCeWIyWnBiR1Z5SWl3aWFYTlFiM0owWVd3aUxDSnBjMU4wY21samRFMXZaR1VpWFN3aWJXRndjR2x1WjNNaU9pSkJRVk5CTEdGQlNUWkNMR1ZCUVhwQ1FTeFJRVUZSUXl4SlFVRkpReXhWUVVOa0xGZEJSMFpETEU5QlFVOURMR1ZCUVdWRExGRkJRVk1zWVVGQll5eERRVUZGUXl4UFFVRlBMRWxCU1hSRUxFbEJRVWxETEVWQlFUaENMRzFDUVVGWVF5eFJRVUY1UWtFc1QwRkJUME1zU1VGRmJrUkRMRVZCUVhGQ1NDeEZRVUZaUXl4UFFVRlBReXhKUVVGSkxHbENRVUZ0UWl4TlFVTXZSRVVzUlVGQmIwSktMRVZCUVZsRExFOUJRVTlETEVsQlFVa3NaMEpCUVd0Q0xFMUJRemRFUnl4RlFVRnpRa3dzUlVGQldVTXNUMEZCVDBNc1NVRkJTU3hyUWtGQmIwSXNUVUZEYWtWSkxFVkJRWGxDVGl4RlFVRlpReXhQUVVGUFF5eEpRVUZKTEhGQ1FVRjFRaXhOUVVOMlJVc3NSVUZCYzBKUUxFVkJRVmxETEU5QlFVOURMRWxCUVVrc2EwSkJRVzlDTEUxQlEycEZUU3hGUVVGelFsSXNSVUZCV1VNc1QwRkJUME1zU1VGQlNTeHJRa0ZCYjBJc1RVRkRha1ZQTEVWQlFYRkNWQ3hGUVVGWlF5eFBRVUZQUXl4SlFVRkpMR2xDUVVGdFFpeE5RVU12UkZFc1JVRkJkMEpXTEVWQlFWbERMRTlCUVU5RExFbEJRVWtzYjBKQlFYTkNMRTFCUTNKRlV5eEZRVUY1UWxnc1JVRkJXVU1zVDBGQlQwTXNTVUZCU1N4eFFrRkJkVUlzVFVGRGRrVlZMRVZCUVhsQ1dpeEZRVUZaUXl4UFFVRlBReXhKUVVGSkxIRkNRVUYxUWl4TlFWRXpSU3hUUVVGVFZ5eFBRVUZQUXl4SFFVTmtMRWRCUVhOQ0xHbENRVUZZUVN4SFFVRnJReXhQUVVGWVFTeEZRVUZwUWl4RFFVTnFSQ3hKUVVGSlF5eEZRVUZYUkN4RlFVRlBReXhUUVVWMFFpeFBRVUZSUVN4SFFVTk9MRXRCUVV0YUxFVkJRMGdzU1VGQlNXRXNSVUZCVDBZc1JVRkJUMFVzUzBGRmJFSXNUMEZCVVVFc1IwRkRUaXhMUVVGTFRpeEZRVU5NTEV0QlFVdE1MRVZCUTB3c1MwRkJTMFVzUlVGRFRDeExRVUZMUkN4RlFVTklMRTlCUVU5VkxFVkJRMVFzVVVGRFJTeEpRVUZKUXl4RlFVRmxSQ3hIUVVGUlFTeEZRVUZMUkN4VFFVVm9ReXhQUVVGUlJTeEhRVU5PTEV0QlFVdFNMRVZCUTB3c1MwRkJTMFVzUlVGRFRDeExRVUZMU0N4RlFVTklMRTlCUVU5VExFVkJRMVFzVVVGRFJTeFBRVUZQUml4SFFVZHFRaXhMUVVGTFdDeEZRVU5JTEU5QlFVOVhMRWxCVDJZc1NVRkJTVWNzUlVGQldWSXNSVUZEV2xNc1JVRkJhMEpXTEVWQlEyeENWeXhGUVVGclFsb3NSVUZEYkVKaExFVkJRVlZzUWl4RlFVTldiVUlzUlVGQllWZ3NSVUZEWWxrc1JVRkJWMnhDTEVWQlExaHRRaXhGUVVGWGFrSXNSVUZEV0d0Q0xFVkJRVk55UWl4RlFVTlVjMElzUlVGQllYQkNMRVZCT0VKcVFsSXNVVUZCVVdVc1QwRkJVMEVzVDBGRGFrSm1MRkZCUVZGdlFpeFZRVUZaUVN4RlFVTndRbkJDTEZGQlFWRnhRaXhuUWtGQmEwSkJMRVZCUXpGQ2NrSXNVVUZCVVhOQ0xHZENRVUZyUWtFc1JVRkRNVUowUWl4UlFVRlJkVUlzVVVGQlZVRXNSVUZEYkVKMlFpeFJRVUZSZDBJc1YwRkJZVUVzUlVGRGNrSjRRaXhSUVVGUmVVSXNVMEZCVjBFc1JVRkRia0o2UWl4UlFVRlJNRUlzVTBGQlYwRXNSVUZEYmtJeFFpeFJRVUZSTWtJc1QwRkJVMEVzUlVGRGFrSXpRaXhSUVVGUk5FSXNWMEZCWVVFc1JVRkRja0kxUWl4UlFVRlJOa0lzYlVKQmVFWlNMRk5CUVZOQkxHMUNRVUZ0UWxnc1IwRkRNVUlzVFVGQmRVSXNhVUpCUVZSQkxFZEJRWEZETEcxQ1FVRlVRU3hIUVVVeFEwRXNTVUZCVTFnc1IwRkJkVUpYTEVsQlFWTk9MRWRCUVhsQ1RTeEpRVUZUVkN4SFFVRjFRbE1zU1VGQlUxWXNSMEZCTUVKVkxFbEJRVk5LTEVkQlFUQkRMR2xDUVVGVVNTeEhRVUU0UWl4UFFVRlVRU3hKUVVGMVF5eHRRa0ZCWkVFc1JVRkJTMWtzVFVGQmRVSmFMRVZCUVV0RUxGZEJRV0ZRTEVkQlFYVkNVU3hGUVVGTFJDeFhRVUZoVGl4SFFVRnpRazhzUlVGQlMwUXNWMEZCWVVvc1NVRnpSamxXWWl4UlFVRlJLMElzV1VGMlExSXNVMEZCVTBFc1dVRkJXV1lzUjBGRGJrSXNUMEZCVDBRc1QwRkJUME1zUzBGQldVb3NSMEYxUXpWQ1dpeFJRVUZSWjBNc2EwSkJja05TTEZOQlFWTkJMR3RDUVVGclFtaENMRWRCUTNwQ0xFOUJRVTlFTEU5QlFVOURMRXRCUVZsTUxFZEJjVU0xUWxnc1VVRkJVV2xETEd0Q1FXNURVaXhUUVVGVFFTeHJRa0ZCYTBKcVFpeEhRVU42UWl4UFFVRlBSQ3hQUVVGUFF5eExRVUZaVGl4SFFXMUROVUpXTEZGQlFWRnJReXhWUVdwRFVpeFRRVUZUUVN4VlFVRlZiRUlzUjBGRGFrSXNUVUZCZVVJc2FVSkJRVmhCTEVkQlFXdERMRTlCUVZoQkxFZEJRVzFDUVN4RlFVRlBReXhYUVVGaFdpeEhRV2xET1VWTUxGRkJRVkZ0UXl4aFFTOUNVaXhUUVVGVFFTeGhRVUZoYmtJc1IwRkRjRUlzVDBGQlQwUXNUMEZCVDBNc1MwRkJXVWdzUjBFclFqVkNZaXhSUVVGUmIwTXNWMEUzUWxJc1UwRkJVMEVzVjBGQlYzQkNMRWRCUTJ4Q0xFOUJRVTlFTEU5QlFVOURMRXRCUVZsVUxFZEJOa0kxUWxBc1VVRkJVWEZETEZkQk0wSlNMRk5CUVZOQkxGZEJRVmR5UWl4SFFVTnNRaXhQUVVGUFJDeFBRVUZQUXl4TFFVRlpVQ3hIUVRKQ05VSlVMRkZCUVZGelF5eFRRWHBDVWl4VFFVRlRRU3hUUVVGVGRFSXNSMEZEYUVJc1QwRkJUMFFzVDBGQlQwTXNTMEZCV1ZZc1IwRjVRalZDVGl4UlFVRlJkVU1zWVVGMlFsSXNVMEZCVTBFc1lVRkJZWFpDTEVkQlEzQkNMRTlCUVU5RUxFOUJRVTlETEV0QlFWbFNMRWRCTDBZeFFpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzFwY3k5amFuTXZjbVZoWTNRdGFYTXVaR1YyWld4dmNHMWxiblF1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgYj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QucGxhY2Vob2xkZXJcIik6NjAxMTM7ZnVuY3Rpb24gcSh0KXtpZihcIm9iamVjdFwiPT10eXBlb2YgdCYmbnVsbCE9PXQpe3ZhciByPXQuJCR0eXBlb2Y7c3dpdGNoKHIpe2Nhc2UgYzpzd2l0Y2godD10LnR5cGUpe2Nhc2UgbDpjYXNlIGU6Y2FzZSBnOmNhc2UgZjpyZXR1cm4gdDtkZWZhdWx0OnN3aXRjaCh0PXQmJnQuJCR0eXBlb2Ype2Nhc2UgazpjYXNlIG06Y2FzZSBoOnJldHVybiB0O2RlZmF1bHQ6cmV0dXJuIHJ9fWNhc2UgZDpyZXR1cm4gcn19fWV4cG9ydHMudHlwZU9mPXEsZXhwb3J0cy5Bc3luY01vZGU9bCxleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rLGV4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWgsZXhwb3J0cy5FbGVtZW50PWMsZXhwb3J0cy5Gb3J3YXJkUmVmPW0sZXhwb3J0cy5GcmFnbWVudD1lLGV4cG9ydHMuUHJvZmlsZXI9ZyxleHBvcnRzLlBvcnRhbD1kLGV4cG9ydHMuU3RyaWN0TW9kZT1mLGV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKHQpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiB0fHxcImZ1bmN0aW9uXCI9PXR5cGVvZiB0fHx0PT09ZXx8dD09PWx8fHQ9PT1nfHx0PT09Znx8dD09PW58fFwib2JqZWN0XCI9PXR5cGVvZiB0JiZudWxsIT09dCYmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHQudGhlbnx8dC4kJHR5cGVvZj09PWh8fHQuJCR0eXBlb2Y9PT1rfHx0LiQkdHlwZW9mPT09bSl9LGV4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oZSl7cmV0dXJuIHEoZSk9PT1sfSxleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGUpe3JldHVybiBxKGUpPT09a30sZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihlKXtyZXR1cm4gcShlKT09PWh9LGV4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGUpe3JldHVyblwib2JqZWN0XCI9PXR5cGVvZiBlJiZudWxsIT09ZSYmZS4kJHR5cGVvZj09PWN9LGV4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGUpe3JldHVybiBxKGUpPT09bX0sZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKHQpe3JldHVybiBxKHQpPT09ZX0sZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGUpe3JldHVybiBxKGUpPT09Z30sZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihlKXtyZXR1cm4gcShlKT09PWR9LGV4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGUpe3JldHVybiBxKGUpPT09Zn07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbkpsWVdOMExXbHpMbkJ5YjJSMVkzUnBiMjR1YldsdUxtcHpJbDBzSW01aGJXVnpJanBiSWs5aWFtVmpkQ0lzSW1SbFptbHVaVkJ5YjNCbGNuUjVJaXdpWlhod2IzSjBjeUlzSW5aaGJIVmxJaXdpWWlJc0lsTjViV0p2YkNJc0ltWnZjaUlzSW1NaUxDSmtJaXdpWlNJc0ltWWlMQ0puSWl3aWFDSXNJbXNpTENKc0lpd2liU0lzSW00aUxDSnhJaXdpWVNJc0luQWlMQ0lrSkhSNWNHVnZaaUlzSW5SNWNHVWlMQ0owZVhCbFQyWWlMQ0pCYzNsdVkwMXZaR1VpTENKRGIyNTBaWGgwUTI5dWMzVnRaWElpTENKRGIyNTBaWGgwVUhKdmRtbGtaWElpTENKRmJHVnRaVzUwSWl3aVJtOXlkMkZ5WkZKbFppSXNJa1p5WVdkdFpXNTBJaXdpVUhKdlptbHNaWElpTENKUWIzSjBZV3dpTENKVGRISnBZM1JOYjJSbElpd2lhWE5XWVd4cFpFVnNaVzFsYm5SVWVYQmxJaXdpZEdobGJpSXNJbWx6UVhONWJtTk5iMlJsSWl3aWFYTkRiMjUwWlhoMFEyOXVjM1Z0WlhJaUxDSnBjME52Ym5SbGVIUlFjbTkyYVdSbGNpSXNJbWx6Uld4bGJXVnVkQ0lzSW1selJtOXlkMkZ5WkZKbFppSXNJbWx6Um5KaFoyMWxiblFpTENKcGMxQnliMlpwYkdWeUlpd2lhWE5RYjNKMFlXd2lMQ0pwYzFOMGNtbGpkRTF2WkdVaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVZOQkxHRkJRV0ZCTEU5QlFVOURMR1ZCUVdWRExGRkJRVkVzWVVGQllTeERRVUZEUXl4UFFVRk5MRWxCUXk5RUxFbEJRVWxETEVWQlFVVXNiVUpCUVc5Q1F5eFJRVUZSUVN4UFFVRlBReXhKUVVGSlF5eEZRVUZGU0N4RlFVRkZReXhQUVVGUFF5eEpRVUZKTEdsQ1FVRnBRaXhOUVVGTlJTeEZRVUZGU2l4RlFVRkZReXhQUVVGUFF5eEpRVUZKTEdkQ1FVRm5RaXhOUVVGTlJ5eEZRVUZGVEN4RlFVRkZReXhQUVVGUFF5eEpRVUZKTEd0Q1FVRnJRaXhOUVVGTlNTeEZRVUZGVGl4RlFVRkZReXhQUVVGUFF5eEpRVUZKTEhGQ1FVRnhRaXhOUVVGTlN5eEZRVUZGVUN4RlFVRkZReXhQUVVGUFF5eEpRVUZKTEd0Q1FVRnJRaXhOUVVGTlRTeEZRVUZGVWl4RlFVRkZReXhQUVVGUFF5eEpRVUZKTEd0Q1FVRnJRaXhOUVVGTlR5eEZRVUZGVkN4RlFVRkZReXhQUVVGUFF5eEpRVUZKTEdsQ1FVRnBRaXhOUVVGTlVTeEZRVUZGVml4RlFVRkZReXhQUVVGUFF5eEpRVUZKTEc5Q1FVRnZRaXhOUVVGTlV5eEZRVUZGV0N4RlFVRkZReXhQUVVGUFF5eEpRVUZKTEhGQ1FVRnhRaXhOUVVGTlZTeEZRVUZGV2l4RlFVRkZReXhQUVVGUFF5eEpRVUZKTEhGQ1FVRnhRaXhOUVVOd1lpeFRRVUZUVnl4RlFVRkZReXhIUVVGSExFZEJRVWNzYVVKQlFXdENRU3hIUVVGSExFOUJRVTlCTEVWQlFVVXNRMEZCUXl4SlFVRkpReXhGUVVGRlJDeEZRVUZGUlN4VFFVRlRMRTlCUVU5RUxFZEJRVWNzUzBGQlMxb3NSVUZCUlN4UFFVRlBWeXhGUVVGRlFTeEZRVUZGUnl4TlFVRlJMRXRCUVV0UUxFVkJRVVVzUzBGQlMwd3NSVUZCUlN4TFFVRkxSU3hGUVVGRkxFdEJRVXRFTEVWQlFVVXNUMEZCVDFFc1JVRkJSU3hSUVVGUkxFOUJRVTlCTEVWQlFVVkJMRWRCUVVkQkxFVkJRVVZGTEZWQlFWa3NTMEZCUzFBc1JVRkJSU3hMUVVGTFJTeEZRVUZGTEV0QlFVdElMRVZCUVVVc1QwRkJUMDBzUlVGQlJTeFJRVUZSTEU5QlFVOURMRWRCUVVjc1MwRkJTMWdzUlVGQlJTeFBRVUZQVnl4SlFVRkpha0lzVVVGQlVXOUNMRTlCUVU5TUxFVkJRVVZtTEZGQlFWRnhRaXhWUVVGVlZDeEZRVUZGV2l4UlFVRlJjMElzWjBKQlFXZENXQ3hGUVVGRldDeFJRVUZSZFVJc1owSkJRV2RDWWl4RlFVRkZWaXhSUVVGUmQwSXNVVUZCVVc1Q0xFVkJRVVZNTEZGQlFWRjVRaXhYUVVGWFdpeEZRVUZGWWl4UlFVRlJNRUlzVTBGQlUyNUNMRVZCUVVWUUxGRkJRVkV5UWl4VFFVRlRiRUlzUlVGQlJWUXNVVUZCVVRSQ0xFOUJRVTkwUWl4RlFVRkZUaXhSUVVGUk5rSXNWMEZCVjNKQ0xFVkJRM2hpVWl4UlFVRlJPRUlzYlVKQlFXMUNMRk5CUVZOa0xFZEJRVWNzVFVGQlRTeHBRa0ZCYTBKQkxFZEJRVWNzYlVKQlFXOUNRU3hIUVVGSFFTeEpRVUZKVkN4SFFVRkhVeXhKUVVGSlNpeEhRVUZIU1N4SlFVRkpVQ3hIUVVGSFR5eEpRVUZKVWl4SFFVRkhVU3hKUVVGSlJpeEhRVUZITEdsQ1FVRnJRa1VzUjBGQlJ5eFBRVUZQUVN4SlFVRkpMRzFDUVVGdlFrRXNSVUZCUldVc1RVRkJUV1lzUlVGQlJVVXNWMEZCVjFJc1IwRkJSMDBzUlVGQlJVVXNWMEZCVjFBc1IwRkJSMHNzUlVGQlJVVXNWMEZCVjB3c1NVRkJTV0lzVVVGQlVXZERMRmxCUVZrc1UwRkJVMmhDTEVkQlFVY3NUMEZCVDBRc1JVRkJSVU1zUzBGQlMwb3NSMEZCUjFvc1VVRkJVV2xETEd0Q1FVRnJRaXhUUVVGVGFrSXNSMEZCUnl4UFFVRlBSQ3hGUVVGRlF5eExRVUZMVEN4SFFVRkhXQ3hSUVVGUmEwTXNhMEpCUVd0Q0xGTkJRVk5zUWl4SFFVRkhMRTlCUVU5RUxFVkJRVVZETEV0QlFVdE9MRWRCUVVkV0xGRkJRVkZ0UXl4VlFVRlZMRk5CUVZOdVFpeEhRVUZITEUxQlFVMHNhVUpCUVd0Q1FTeEhRVUZITEU5QlFVOUJMRWRCUVVkQkxFVkJRVVZGTEZkQlFWZGlMRWRCUTNoa1RDeFJRVUZSYjBNc1lVRkJZU3hUUVVGVGNFSXNSMEZCUnl4UFFVRlBSQ3hGUVVGRlF5eExRVUZMU0N4SFFVRkhZaXhSUVVGUmNVTXNWMEZCVnl4VFFVRlRja0lzUjBGQlJ5eFBRVUZQUkN4RlFVRkZReXhMUVVGTFZDeEhRVUZIVUN4UlFVRlJjME1zVjBGQlZ5eFRRVUZUZEVJc1IwRkJSeXhQUVVGUFJDeEZRVUZGUXl4TFFVRkxVQ3hIUVVGSFZDeFJRVUZSZFVNc1UwRkJVeXhUUVVGVGRrSXNSMEZCUnl4UFFVRlBSQ3hGUVVGRlF5eExRVUZMVml4SFFVRkhUaXhSUVVGUmQwTXNZVUZCWVN4VFFVRlRlRUlzUjBGQlJ5eFBRVUZQUkN4RlFVRkZReXhMUVVGTFVpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzFwY3k5amFuTXZjbVZoWTNRdGFYTXVjSEp2WkhWamRHbHZiaTV0YVc0dWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XCJwcm9kdWN0aW9uXCI9PT1wcm9jZXNzLmVudi5OT0RFX0VOVj9tb2R1bGUuZXhwb3J0cz1yZXF1aXJlKFwiLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcIik6bW9kdWxlLmV4cG9ydHM9cmVxdWlyZShcIi4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzXCIpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1sdVpHVjRMbXB6SWwwc0ltNWhiV1Z6SWpwYkluQnliMk5sYzNNaUxDSmxibllpTENKT1QwUkZYMFZPVmlJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaUxDSnlaWEYxYVhKbElsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVVUyUWl4bFFVRjZRa0VzVVVGQlVVTXNTVUZCU1VNc1UwRkRaRU1zVDBGQlQwTXNVVUZCVlVNc1VVRkJVU3h2UTBGRmVrSkdMRTlCUVU5RExGRkJRVlZETEZGQlFWRWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F0YVhNdmFXNWtaWGd1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKXt2YXIgZT10aGlzLmNvbnN0cnVjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyh0aGlzLnByb3BzLHRoaXMuc3RhdGUpO251bGwhPWUmJnRoaXMuc2V0U3RhdGUoZSl9ZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhlKXt0aGlzLnNldFN0YXRlKGZ1bmN0aW9uIHVwZGF0ZXIodCl7dmFyIG89dGhpcy5jb25zdHJ1Y3Rvci5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoZSx0KTtyZXR1cm4gbnVsbCE9bz9vOm51bGx9LmJpbmQodGhpcykpfWZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVcGRhdGUoZSx0KXt0cnl7dmFyIG89dGhpcy5wcm9wcyxuPXRoaXMuc3RhdGU7dGhpcy5wcm9wcz1lLHRoaXMuc3RhdGU9dCx0aGlzLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90RmxhZz0hMCx0aGlzLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90PXRoaXMuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUobyxuKX1maW5hbGx5e3RoaXMucHJvcHM9byx0aGlzLnN0YXRlPW59fWZ1bmN0aW9uIHBvbHlmaWxsKGUpe3ZhciB0PWUucHJvdG90eXBlO2lmKCF0fHwhdC5pc1JlYWN0Q29tcG9uZW50KXRocm93IG5ldyBFcnJvcihcIkNhbiBvbmx5IHBvbHlmaWxsIGNsYXNzIGNvbXBvbmVudHNcIik7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZS5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpcmV0dXJuIGU7dmFyIG89bnVsbCxuPW51bGwsbD1udWxsO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHQuY29tcG9uZW50V2lsbE1vdW50P289XCJjb21wb25lbnRXaWxsTW91bnRcIjpcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJihvPVwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudFwiKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM/bj1cImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHNcIjpcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiYobj1cIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzXCIpLFwiZnVuY3Rpb25cIj09dHlwZW9mIHQuY29tcG9uZW50V2lsbFVwZGF0ZT9sPVwiY29tcG9uZW50V2lsbFVwZGF0ZVwiOlwiZnVuY3Rpb25cIj09dHlwZW9mIHQuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJihsPVwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGVcIiksbnVsbCE9PW98fG51bGwhPT1ufHxudWxsIT09bCl7dmFyIHA9ZS5kaXNwbGF5TmFtZXx8ZS5uYW1lLGk9XCJmdW5jdGlvblwiPT10eXBlb2YgZS5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM/XCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoKVwiOlwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoKVwiO3Rocm93IEVycm9yKFwiVW5zYWZlIGxlZ2FjeSBsaWZlY3ljbGVzIHdpbGwgbm90IGJlIGNhbGxlZCBmb3IgY29tcG9uZW50cyB1c2luZyBuZXcgY29tcG9uZW50IEFQSXMuXFxuXFxuXCIrcCtcIiB1c2VzIFwiK2krXCIgYnV0IGFsc28gY29udGFpbnMgdGhlIGZvbGxvd2luZyBsZWdhY3kgbGlmZWN5Y2xlczpcIisobnVsbCE9PW8/XCJcXG4gIFwiK286XCJcIikrKG51bGwhPT1uP1wiXFxuICBcIituOlwiXCIpKyhudWxsIT09bD9cIlxcbiAgXCIrbDpcIlwiKStcIlxcblxcblRoZSBhYm92ZSBsaWZlY3ljbGVzIHNob3VsZCBiZSByZW1vdmVkLiBMZWFybiBtb3JlIGFib3V0IHRoaXMgd2FybmluZyBoZXJlOlxcbmh0dHBzOi8vZmIubWUvcmVhY3QtYXN5bmMtY29tcG9uZW50LWxpZmVjeWNsZS1ob29rc1wiKX1pZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyYmKHQuY29tcG9uZW50V2lsbE1vdW50PWNvbXBvbmVudFdpbGxNb3VudCx0LmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM9Y29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyksXCJmdW5jdGlvblwiPT10eXBlb2YgdC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdC5jb21wb25lbnREaWRVcGRhdGUpdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHBvbHlmaWxsIGdldFNuYXBzaG90QmVmb3JlVXBkYXRlKCkgZm9yIGNvbXBvbmVudHMgdGhhdCBkbyBub3QgZGVmaW5lIGNvbXBvbmVudERpZFVwZGF0ZSgpIG9uIHRoZSBwcm90b3R5cGVcIik7dC5jb21wb25lbnRXaWxsVXBkYXRlPWNvbXBvbmVudFdpbGxVcGRhdGU7dmFyIHI9dC5jb21wb25lbnREaWRVcGRhdGU7dC5jb21wb25lbnREaWRVcGRhdGU9ZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlUG9seWZpbGwoZSx0LG8pe3ZhciBuPXRoaXMuX19yZWFjdEludGVybmFsU25hcHNob3RGbGFnP3RoaXMuX19yZWFjdEludGVybmFsU25hcHNob3Q6bztyLmNhbGwodGhpcyxlLHQsbil9fXJldHVybiBlfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGNvbXBvbmVudFdpbGxNb3VudC5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nPSEwLGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMuX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZz0hMCxjb21wb25lbnRXaWxsVXBkYXRlLl9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmc9ITAsZXhwb3J0cy5wb2x5ZmlsbD1wb2x5ZmlsbDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluSmxZV04wTFd4cFptVmplV05zWlhNdFkyOXRjR0YwTG1OcWN5NXFjeUpkTENKdVlXMWxjeUk2V3lKamIyMXdiMjVsYm5SWGFXeHNUVzkxYm5RaUxDSnpkR0YwWlNJc0luUm9hWE1pTENKamIyNXpkSEoxWTNSdmNpSXNJbWRsZEVSbGNtbDJaV1JUZEdGMFpVWnliMjFRY205d2N5SXNJbkJ5YjNCeklpd2ljMlYwVTNSaGRHVWlMQ0pqYjIxd2IyNWxiblJYYVd4c1VtVmpaV2wyWlZCeWIzQnpJaXdpYm1WNGRGQnliM0J6SWl3aWRYQmtZWFJsY2lJc0luQnlaWFpUZEdGMFpTSXNJbUpwYm1RaUxDSmpiMjF3YjI1bGJuUlhhV3hzVlhCa1lYUmxJaXdpYm1WNGRGTjBZWFJsSWl3aWNISmxkbEJ5YjNCeklpd2lYMTl5WldGamRFbHVkR1Z5Ym1Gc1UyNWhjSE5vYjNSR2JHRm5JaXdpWDE5eVpXRmpkRWx1ZEdWeWJtRnNVMjVoY0hOb2IzUWlMQ0puWlhSVGJtRndjMmh2ZEVKbFptOXlaVlZ3WkdGMFpTSXNJbkJ2YkhsbWFXeHNJaXdpUTI5dGNHOXVaVzUwSWl3aWNISnZkRzkwZVhCbElpd2lhWE5TWldGamRFTnZiWEJ2Ym1WdWRDSXNJa1Z5Y205eUlpd2labTkxYm1SWGFXeHNUVzkxYm5ST1lXMWxJaXdpWm05MWJtUlhhV3hzVW1WalpXbDJaVkJ5YjNCelRtRnRaU0lzSW1admRXNWtWMmxzYkZWd1pHRjBaVTVoYldVaUxDSlZUbE5CUmtWZlkyOXRjRzl1Wlc1MFYybHNiRTF2ZFc1MElpd2lWVTVUUVVaRlgyTnZiWEJ2Ym1WdWRGZHBiR3hTWldObGFYWmxVSEp2Y0hNaUxDSlZUbE5CUmtWZlkyOXRjRzl1Wlc1MFYybHNiRlZ3WkdGMFpTSXNJbU52YlhCdmJtVnVkRTVoYldVaUxDSmthWE53YkdGNVRtRnRaU0lzSW01aGJXVWlMQ0p1WlhkQmNHbE9ZVzFsSWl3aVkyOXRjRzl1Wlc1MFJHbGtWWEJrWVhSbElpd2lZMjl0Y0c5dVpXNTBSR2xrVlhCa1lYUmxVRzlzZVdacGJHd2lMQ0p0WVhsaVpWTnVZWEJ6YUc5MElpd2ljMjVoY0hOb2IzUWlMQ0pqWVd4c0lpd2lUMkpxWldOMElpd2laR1ZtYVc1bFVISnZjR1Z5ZEhraUxDSmxlSEJ2Y25Seklpd2lkbUZzZFdVaUxDSmZYM04xY0hCeVpYTnpSR1Z3Y21WallYUnBiMjVYWVhKdWFXNW5JbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVZkQkxGTkJRVk5CTEhGQ1FVVlFMRWxCUVVsRExFVkJRVkZETEV0QlFVdERMRmxCUVZsRExIbENRVUY1UWtZc1MwRkJTMGNzVFVGQlQwZ3NTMEZCUzBRc1QwRkRia1ZCTEUxQlFVRkJMRWRCUTBaRExFdEJRVXRKTEZOQlFWTk1MRWRCU1d4Q0xGTkJRVk5OTERCQ1FVRXdRa01zUjBGUmFrTk9MRXRCUVV0SkxGTkJURXdzVTBGQlUwY3NVVUZCVVVNc1IwRkRaaXhKUVVGSlZDeEZRVUZSUXl4TFFVRkxReXhaUVVGWlF5eDVRa0ZCZVVKSkxFVkJRVmRGTEVkQlEycEZMRTlCUVU5VUxFMUJRVUZCTEVWQlFYZERRU3hGUVVGUkxFMUJSMjVEVlN4TFFVRkxWQ3hQUVVjM1FpeFRRVUZUVlN4dlFrRkJiMEpLTEVWQlFWZExMRWRCUTNSRExFbEJRMFVzU1VGQlNVTXNSVUZCV1Zvc1MwRkJTMGNzVFVGRGFrSkxMRVZCUVZsU0xFdEJRVXRFTEUxQlEzSkNReXhMUVVGTFJ5eE5RVUZSUnl4RlFVTmlUaXhMUVVGTFJDeE5RVUZSV1N4RlFVTmlXQ3hMUVVGTFlTdzJRa0ZCT0VJc1JVRkRia05pTEV0QlFVdGpMSGRDUVVFd1FtUXNTMEZCUzJVc2QwSkJRMnhEU0N4RlFVTkJTaXhIUVVWR0xGRkJRMEZTTEV0QlFVdEhMRTFCUVZGVExFVkJRMkphTEV0QlFVdEVMRTFCUVZGVExFZEJWV3BDTEZOQlFWTlJMRk5CUVZORExFZEJRMmhDTEVsQlFVbERMRVZCUVZsRUxFVkJRVlZETEZWQlJURkNMRWxCUVV0QkxFbEJRV05CTEVWQlFWVkRMR2xDUVVNelFpeE5RVUZOTEVsQlFVbERMRTFCUVUwc2MwTkJSMnhDTEVkQlEyZEVMRzFDUVVGMlEwZ3NSVUZCVldZc01FSkJRelJDTEcxQ1FVRjBRMmRDTEVWQlFWVklMSGRDUVVWcVFpeFBRVUZQUlN4RlFVMVVMRWxCUVVsSkxFVkJRWEZDTEV0QlEzSkNReXhGUVVFMFFpeExRVU0xUWtNc1JVRkJjMElzUzBGblFqRkNMRWRCWmpSRExHMUNRVUZxUTB3c1JVRkJWWEJDTEcxQ1FVTnVRblZDTEVWQlFYRkNMSEZDUVVOdFF5eHRRa0ZCZUVOSUxFVkJRVlZOTERSQ1FVTXhRa2dzUlVGQmNVSXNOa0pCUlRSQ0xHMUNRVUY0UTBnc1JVRkJWV0lzTUVKQlEyNUNhVUlzUlVGQk5FSXNORUpCUTIxRExHMUNRVUV2UTBvc1JVRkJWVThzYlVOQlF6RkNTQ3hGUVVFMFFpeHZRMEZGWlN4dFFrRkJiRU5LTEVWQlFWVlNMRzlDUVVOdVFtRXNSVUZCYzBJc2MwSkJRMjFETEcxQ1FVRjZRMHdzUlVGQlZWRXNOa0pCUXpGQ1NDeEZRVUZ6UWl3NFFrRkhReXhQUVVGMlFrWXNSMEZET0VJc1QwRkJPVUpETEVkQlEzZENMRTlCUVhoQ1F5eEZRVU5CTEVOQlEwRXNTVUZCU1Vrc1JVRkJaMEpXTEVWQlFWVlhMR0ZCUVdWWUxFVkJRVlZaTEV0QlEyNUVReXhGUVVNMFF5eHRRa0ZCZGtOaUxFVkJRVlZtTEhsQ1FVTmlMRFpDUVVOQkxEUkNRVVZPTEUxQlFVMXJRaXhOUVVOS0xESkdRVU5GVHl4RlFVTkJMRk5CUTBGSExFVkJRMEVzZFVSQlEzZENMRTlCUVhaQ1ZDeEZRVUU0UWl4UFFVRlRRU3hGUVVGeFFpeExRVU01UWl4UFFVRTVRa01zUlVGRFJ5eFBRVUZUUVN4RlFVTlVMRXRCUTNGQ0xFOUJRWGhDUXl4RlFVRXJRaXhQUVVGVFFTeEZRVUZ6UWl4SlFVTXZSQ3gzU1VGblFrNHNSMEZTYTBRc2JVSkJRWFpEVGl4RlFVRlZaaXd5UWtGRGJrSm5RaXhGUVVGVmNFSXNiVUpCUVhGQ1FTeHRRa0ZETDBKdlFpeEZRVUZWWWl3d1FrRkJORUpCTERKQ1FVMVRMRzFDUVVGMFEyRXNSVUZCVlVnc2QwSkJRWGRETEVOQlF6TkVMRWRCUVRSRExHMUNRVUZxUTBjc1JVRkJWV0VzYlVKQlEyNUNMRTFCUVUwc1NVRkJTVmdzVFVGRFVpeHhTRUZKU2tZc1JVRkJWVklzYjBKQlFYTkNRU3h2UWtGRmFFTXNTVUZCU1hGQ0xFVkJRWEZDWWl4RlFVRlZZU3h0UWtGRmJrTmlMRVZCUVZWaExHMUNRVUZ4UWl4VFFVRlRReXd5UWtGRGRFTndRaXhGUVVOQlNpeEZRVU5CZVVJc1IwRlZRU3hKUVVGSlF5eEZRVUZYYkVNc1MwRkJTMkVzTkVKQlEyaENZaXhMUVVGTFl5eDNRa0ZEVEcxQ0xFVkJSVXBHTEVWQlFXMUNTU3hMUVVGTGJrTXNTMEZCVFZrc1JVRkJWMG9zUlVGQlZ6QkNMRWxCU1hoRUxFOUJRVTlxUWl4RlFUVktWRzFDTEU5QlFVOURMR1ZCUVdWRExGRkJRVk1zWVVGQll5eERRVUZGUXl4UFFVRlBMRWxCSzBOMFJIcERMRzFDUVVGdFFqQkRMRGhDUVVFclFpeEZRVU5zUkc1RExEQkNRVUV3UW0xRExEaENRVUVyUWl4RlFVTjZSRGxDTEc5Q1FVRnZRamhDTERoQ1FVRXJRaXhGUVRoSGJrUkdMRkZCUVZGMFFpeFRRVUZYUVNJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDMXNhV1psWTNsamJHVnpMV052YlhCaGRDOXlaV0ZqZEMxc2FXWmxZM2xqYkdWekxXTnZiWEJoZEM1amFuTXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO2V4cG9ydHMuX19lc01vZHVsZT0hMDt2YXIgX3Byb3BUeXBlcz1yZXF1aXJlKFwicHJvcC10eXBlc1wiKSxfcHJvcFR5cGVzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpLF9jb21wb25lbnRPckVsZW1lbnQ9cmVxdWlyZShcInByb3AtdHlwZXMtZXh0cmEvbGliL2NvbXBvbmVudE9yRWxlbWVudFwiKSxfY29tcG9uZW50T3JFbGVtZW50Mj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb21wb25lbnRPckVsZW1lbnQpLF9yZWFjdD1yZXF1aXJlKFwicmVhY3RcIiksX3JlYWN0Mj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCksX3JlYWN0RG9tPXJlcXVpcmUoXCJyZWFjdC1kb21cIiksX3JlYWN0RG9tMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSksX2dldENvbnRhaW5lcj1yZXF1aXJlKFwiLi91dGlscy9nZXRDb250YWluZXJcIiksX2dldENvbnRhaW5lcjI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0Q29udGFpbmVyKSxfb3duZXJEb2N1bWVudD1yZXF1aXJlKFwiLi91dGlscy9vd25lckRvY3VtZW50XCIpLF9vd25lckRvY3VtZW50Mj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vd25lckRvY3VtZW50KTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfWZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKGUsdCl7aWYoIWUpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiF0fHxcIm9iamVjdFwiIT10eXBlb2YgdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgdD9lOnR9ZnVuY3Rpb24gX2luaGVyaXRzKGUsdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCYmbnVsbCE9PXQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIHQpO2UucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTplLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLHQmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKGUsdCk6ZS5fX3Byb3RvX189dCl9dmFyIFBvcnRhbD1mdW5jdGlvbihlKXtmdW5jdGlvbiBQb3J0YWwoKXt2YXIgdCxyO19jbGFzc0NhbGxDaGVjayh0aGlzLFBvcnRhbCk7Zm9yKHZhciBvPWFyZ3VtZW50cy5sZW5ndGgsbj1BcnJheShvKSxhPTA7YTxvO2ErKyluW2FdPWFyZ3VtZW50c1thXTtyZXR1cm4gdD1yPV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsZS5jYWxsLmFwcGx5KGUsW3RoaXNdLmNvbmNhdChuKSkpLHIuX21vdW50T3ZlcmxheVRhcmdldD1mdW5jdGlvbigpe3IuX292ZXJsYXlUYXJnZXR8fChyLl9vdmVybGF5VGFyZ2V0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksci5fcG9ydGFsQ29udGFpbmVyTm9kZT0oMCxfZ2V0Q29udGFpbmVyMi5kZWZhdWx0KShyLnByb3BzLmNvbnRhaW5lciwoMCxfb3duZXJEb2N1bWVudDIuZGVmYXVsdCkocikuYm9keSksci5fcG9ydGFsQ29udGFpbmVyTm9kZS5hcHBlbmRDaGlsZChyLl9vdmVybGF5VGFyZ2V0KSl9LHIuX3VubW91bnRPdmVybGF5VGFyZ2V0PWZ1bmN0aW9uKCl7ci5fb3ZlcmxheVRhcmdldCYmKHIuX3BvcnRhbENvbnRhaW5lck5vZGUucmVtb3ZlQ2hpbGQoci5fb3ZlcmxheVRhcmdldCksci5fb3ZlcmxheVRhcmdldD1udWxsKSxyLl9wb3J0YWxDb250YWluZXJOb2RlPW51bGx9LHIuX3JlbmRlck92ZXJsYXk9ZnVuY3Rpb24oKXt2YXIgZT1yLnByb3BzLmNoaWxkcmVuP19yZWFjdDIuZGVmYXVsdC5DaGlsZHJlbi5vbmx5KHIucHJvcHMuY2hpbGRyZW4pOm51bGw7aWYobnVsbCE9PWUpe3IuX21vdW50T3ZlcmxheVRhcmdldCgpO3ZhciB0PSFyLl9vdmVybGF5SW5zdGFuY2U7ci5fb3ZlcmxheUluc3RhbmNlPV9yZWFjdERvbTIuZGVmYXVsdC51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihyLGUsci5fb3ZlcmxheVRhcmdldCxmdW5jdGlvbigpe3QmJnIucHJvcHMub25SZW5kZXJlZCYmci5wcm9wcy5vblJlbmRlcmVkKCl9KX1lbHNlIHIuX3VucmVuZGVyT3ZlcmxheSgpLHIuX3VubW91bnRPdmVybGF5VGFyZ2V0KCl9LHIuX3VucmVuZGVyT3ZlcmxheT1mdW5jdGlvbigpe3IuX292ZXJsYXlUYXJnZXQmJihfcmVhY3REb20yLmRlZmF1bHQudW5tb3VudENvbXBvbmVudEF0Tm9kZShyLl9vdmVybGF5VGFyZ2V0KSxyLl9vdmVybGF5SW5zdGFuY2U9bnVsbCl9LHIuZ2V0TW91bnROb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIHIuX292ZXJsYXlUYXJnZXR9LF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHIsdCl9cmV0dXJuIF9pbmhlcml0cyhQb3J0YWwsZSksUG9ydGFsLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudD1mdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpe3RoaXMuX2lzTW91bnRlZD0hMCx0aGlzLl9yZW5kZXJPdmVybGF5KCl9LFBvcnRhbC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlPWZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpe3RoaXMuX3JlbmRlck92ZXJsYXkoKX0sUG9ydGFsLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzPWZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoZSl7dGhpcy5fb3ZlcmxheVRhcmdldCYmZS5jb250YWluZXIhPT10aGlzLnByb3BzLmNvbnRhaW5lciYmKHRoaXMuX3BvcnRhbENvbnRhaW5lck5vZGUucmVtb3ZlQ2hpbGQodGhpcy5fb3ZlcmxheVRhcmdldCksdGhpcy5fcG9ydGFsQ29udGFpbmVyTm9kZT0oMCxfZ2V0Q29udGFpbmVyMi5kZWZhdWx0KShlLmNvbnRhaW5lciwoMCxfb3duZXJEb2N1bWVudDIuZGVmYXVsdCkodGhpcykuYm9keSksdGhpcy5fcG9ydGFsQ29udGFpbmVyTm9kZS5hcHBlbmRDaGlsZCh0aGlzLl9vdmVybGF5VGFyZ2V0KSl9LFBvcnRhbC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQ9ZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKXt0aGlzLl9pc01vdW50ZWQ9ITEsdGhpcy5fdW5yZW5kZXJPdmVybGF5KCksdGhpcy5fdW5tb3VudE92ZXJsYXlUYXJnZXQoKX0sUG9ydGFsLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7cmV0dXJuIG51bGx9LFBvcnRhbH0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7UG9ydGFsLmRpc3BsYXlOYW1lPVwiUG9ydGFsXCIsUG9ydGFsLnByb3BUeXBlcz17Y29udGFpbmVyOl9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfY29tcG9uZW50T3JFbGVtZW50Mi5kZWZhdWx0LF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuY10pLG9uUmVuZGVyZWQ6X3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jfSxleHBvcnRzLmRlZmF1bHQ9UG9ydGFsLG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklreGxaMkZqZVZCdmNuUmhiQzVxY3lKZExDSnVZVzFsY3lJNld5SmxlSEJ2Y25Seklpd2lYMTlsYzAxdlpIVnNaU0lzSWw5d2NtOXdWSGx3WlhNaUxDSnlaWEYxYVhKbElpd2lYM0J5YjNCVWVYQmxjeklpTENKZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBJaXdpWDJOdmJYQnZibVZ1ZEU5eVJXeGxiV1Z1ZENJc0lsOWpiMjF3YjI1bGJuUlBja1ZzWlcxbGJuUXlJaXdpWDNKbFlXTjBJaXdpWDNKbFlXTjBNaUlzSWw5eVpXRmpkRVJ2YlNJc0lsOXlaV0ZqZEVSdmJUSWlMQ0pmWjJWMFEyOXVkR0ZwYm1WeUlpd2lYMmRsZEVOdmJuUmhhVzVsY2pJaUxDSmZiM2R1WlhKRWIyTjFiV1Z1ZENJc0lsOXZkMjVsY2tSdlkzVnRaVzUwTWlJc0ltOWlhaUlzSW1SbFptRjFiSFFpTENKZlkyeGhjM05EWVd4c1EyaGxZMnNpTENKcGJuTjBZVzVqWlNJc0lrTnZibk4wY25WamRHOXlJaXdpVkhsd1pVVnljbTl5SWl3aVgzQnZjM05wWW14bFEyOXVjM1J5ZFdOMGIzSlNaWFIxY200aUxDSnpaV3htSWl3aVkyRnNiQ0lzSWxKbFptVnlaVzVqWlVWeWNtOXlJaXdpWDJsdWFHVnlhWFJ6SWl3aWMzVmlRMnhoYzNNaUxDSnpkWEJsY2tOc1lYTnpJaXdpY0hKdmRHOTBlWEJsSWl3aVQySnFaV04wSWl3aVkzSmxZWFJsSWl3aVkyOXVjM1J5ZFdOMGIzSWlMQ0oyWVd4MVpTSXNJbVZ1ZFcxbGNtRmliR1VpTENKM2NtbDBZV0pzWlNJc0ltTnZibVpwWjNWeVlXSnNaU0lzSW5ObGRGQnliM1J2ZEhsd1pVOW1JaXdpWDE5d2NtOTBiMTlmSWl3aVVHOXlkR0ZzSWl3aVgxSmxZV04wSkVOdmJYQnZibVZ1ZENJc0lsOTBaVzF3SWl3aVgzUm9hWE1pTENKMGFHbHpJaXdpWDJ4bGJpSXNJbUZ5WjNWdFpXNTBjeUlzSW14bGJtZDBhQ0lzSW1GeVozTWlMQ0pCY25KaGVTSXNJbDlyWlhraUxDSmhjSEJzZVNJc0ltTnZibU5oZENJc0lsOXRiM1Z1ZEU5MlpYSnNZWGxVWVhKblpYUWlMQ0pmYjNabGNteGhlVlJoY21kbGRDSXNJbVJ2WTNWdFpXNTBJaXdpWTNKbFlYUmxSV3hsYldWdWRDSXNJbDl3YjNKMFlXeERiMjUwWVdsdVpYSk9iMlJsSWl3aWNISnZjSE1pTENKamIyNTBZV2x1WlhJaUxDSmliMlI1SWl3aVlYQndaVzVrUTJocGJHUWlMQ0pmZFc1dGIzVnVkRTkyWlhKc1lYbFVZWEpuWlhRaUxDSnlaVzF2ZG1WRGFHbHNaQ0lzSWw5eVpXNWtaWEpQZG1WeWJHRjVJaXdpYjNabGNteGhlU0lzSW1Ob2FXeGtjbVZ1SWl3aVEyaHBiR1J5Wlc0aUxDSnZibXg1SWl3aWFXNXBkR2xoYkZKbGJtUmxjaUlzSWw5dmRtVnliR0Y1U1c1emRHRnVZMlVpTENKMWJuTjBZV0pzWlY5eVpXNWtaWEpUZFdKMGNtVmxTVzUwYjBOdmJuUmhhVzVsY2lJc0ltOXVVbVZ1WkdWeVpXUWlMQ0pmZFc1eVpXNWtaWEpQZG1WeWJHRjVJaXdpZFc1dGIzVnVkRU52YlhCdmJtVnVkRUYwVG05a1pTSXNJbWRsZEUxdmRXNTBUbTlrWlNJc0ltTnZiWEJ2Ym1WdWRFUnBaRTF2ZFc1MElpd2lYMmx6VFc5MWJuUmxaQ0lzSW1OdmJYQnZibVZ1ZEVScFpGVndaR0YwWlNJc0ltTnZiWEJ2Ym1WdWRGZHBiR3hTWldObGFYWmxVSEp2Y0hNaUxDSnVaWGgwVUhKdmNITWlMQ0pqYjIxd2IyNWxiblJYYVd4c1ZXNXRiM1Z1ZENJc0luSmxibVJsY2lJc0lrTnZiWEJ2Ym1WdWRDSXNJbVJwYzNCc1lYbE9ZVzFsSWl3aWNISnZjRlI1Y0dWeklpd2liMjVsVDJaVWVYQmxJaXdpWm5WdVl5SXNJbTF2WkhWc1pTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZGUVVFc1VVRkJVVU1zV1VGQllTeEZRVVZ5UWl4SlFVRkpReXhYUVVGaFF5eFJRVUZSTEdOQlJYSkNReXhaUVVGalF5eDFRa0ZCZFVKSUxGbEJSWEpEU1N4dlFrRkJjMEpJTEZGQlFWRXNNa05CUlRsQ1NTeHhRa0ZCZFVKR0xIVkNRVUYxUWtNc2NVSkJSVGxEUlN4UFFVRlRUQ3hSUVVGUkxGTkJSV3BDVFN4UlFVRlZTaXgxUWtGQmRVSkhMRkZCUldwRFJTeFZRVUZaVUN4UlFVRlJMR0ZCUlhCQ1VTeFhRVUZoVGl4MVFrRkJkVUpMTEZkQlJYQkRSU3hqUVVGblFsUXNVVUZCVVN4M1FrRkZlRUpWTEdWQlFXbENVaXgxUWtGQmRVSlBMR1ZCUlhoRFJTeGxRVUZwUWxnc1VVRkJVU3g1UWtGRmVrSlpMR2RDUVVGclFsWXNkVUpCUVhWQ1V5eG5Ra0ZGTjBNc1UwRkJVMVFzZFVKQlFYVkNWeXhIUVVGUExFOUJRVTlCTEVkQlFVOUJMRVZCUVVsbUxGZEJRV0ZsTEVWQlFVMHNRMEZCUlVNc1VVRkJVMFFzUjBGRmRrWXNVMEZCVTBVc1owSkJRV2RDUXl4RlFVRlZReXhIUVVGbExFdEJRVTFFTEdGQlFXOUNReXhIUVVGblFpeE5RVUZOTEVsQlFVbERMRlZCUVZVc2NVTkJSV2hJTEZOQlFWTkRMREpDUVVFeVFrTXNSVUZCVFVNc1IwRkJVU3hKUVVGTFJDeEZRVUZSTEUxQlFVMHNTVUZCU1VVc1pVRkJaU3cyUkVGQlowVXNUMEZCVDBRc1IwRkJlVUlzYVVKQlFWUkJMRWRCUVhGRExHMUNRVUZVUVN4RlFVRTRRa1FzUlVGQlVFTXNSVUZGYkU4c1UwRkJVMFVzVlVGQlZVTXNSVUZCVlVNc1IwRkJZeXhIUVVFd1FpeHRRa0ZCWmtFc1IwRkJORU1zVDBGQlprRXNSVUZCZFVJc1RVRkJUU3hKUVVGSlVDeFZRVUZWTEd0RlFVRnZSVThzUjBGQlpVUXNSVUZCVTBVc1ZVRkJXVU1zVDBGQlQwTXNUMEZCVDBnc1IwRkJZMEVzUlVGQlYwTXNWVUZCVnl4RFFVRkZSeXhaUVVGaExFTkJRVVZETEUxQlFVOU9MRVZCUVZWUExGbEJRVmtzUlVGQlQwTXNWVUZCVlN4RlFVRk5ReXhqUVVGakxFdEJRV1ZTTEVsQlFWbEZMRTlCUVU5UExHVkJRV2xDVUN4UFFVRlBUeXhsUVVGbFZpeEZRVUZWUXl4SFFVRmpSQ3hGUVVGVFZ5eFZRVUZaVml4SFFVOXFaU3hKUVVGSlZ5eFBRVUZUTEZOQlFWVkRMRWRCUjNKQ0xGTkJRVk5FTEZOQlExQXNTVUZCU1VVc1JVRkJUME1zUlVGRldIaENMR2RDUVVGblFubENMRXRCUVUxS0xGRkJSWFJDTEVsQlFVc3NTVUZCU1Vzc1JVRkJUME1zVlVGQlZVTXNUMEZCVVVNc1JVRkJUME1zVFVGQlRVb3NSMEZCVDBzc1JVRkJUeXhGUVVGSFFTeEZRVUZQVEN4RlFVRk5TeXhKUVVNelJVWXNSVUZCUzBVc1IwRkJVVW9zVlVGQlZVa3NSMEZIZWtJc1QwRkJaVklzUlVGQlUwTXNSVUZCVVhCQ0xESkNRVUV5UW5GQ0xFdEJRVTFJTEVWQlFXbENhRUlzUzBGQlN6QkNMRTFCUVUxV0xFVkJRV3RDTEVOQlFVTkhMRTFCUVUxUkxFOUJRVTlLTEV0QlFXbENUQ3hGUVVGTlZTeHZRa0ZCYzBJc1YwRkRia3RXTEVWQlFVMVhMR2xDUVVOVVdDeEZRVUZOVnl4bFFVRnBRa01zVTBGQlUwTXNZMEZCWXl4UFFVTTVRMklzUlVGQlRXTXNjMEpCUVhWQ0xFVkJRVWt6UXl4bFFVRmxTU3hUUVVGVGVVSXNSVUZCVFdVc1RVRkJUVU1zVjBGQlZ5eEZRVUZKTTBNc1owSkJRV2RDUlN4VFFVRlRlVUlzUjBGQlQybENMRTFCUTNCSWFrSXNSVUZCVFdNc2NVSkJRWEZDU1N4WlFVRlpiRUlzUlVGQlRWY3NhMEpCUlRsRFdDeEZRVUZOYlVJc2MwSkJRWGRDTEZkQlF6TkNia0lzUlVGQlRWY3NhVUpCUTFKWUxFVkJRVTFqTEhGQ1FVRnhRazBzV1VGQldYQkNMRVZCUVUxWExHZENRVU0zUTFnc1JVRkJUVmNzWlVGQmFVSXNUVUZGZWtKWUxFVkJRVTFqTEhGQ1FVRjFRaXhOUVVNMVFtUXNSVUZCVFhGQ0xHVkJRV2xDTEZkQlEzaENMRWxCUVVsRExFVkJRVmQwUWl4RlFVRk5aU3hOUVVGTlVTeFRRVUZyUW5oRUxGRkJRVkZSTEZGQlFWRnBSQ3hUUVVGVFF5eExRVUZMZWtJc1JVRkJUV1VzVFVGQlRWRXNWVUZCYWtRc1MwRkhkRU1zUjBGQlowSXNUMEZCV2tRc1JVRkJhMElzUTBGRGNFSjBRaXhGUVVGTlZTeHpRa0ZGVGl4SlFVRkpaMElzUjBGQmFVSXhRaXhGUVVGTk1rSXNhVUpCUlROQ00wSXNSVUZCVFRKQ0xHbENRVUZ0UWpGRUxGZEJRVmROTEZGQlFWRnhSQ3h2UTBGQmIwTTFRaXhGUVVGUGMwSXNSVUZCVTNSQ0xFVkJRVTFYTEdWQlFXZENMRmRCUTJoSVpTeEhRVUZwUWpGQ0xFVkJRVTFsTEUxQlFVMWpMRmxCUXk5Q04wSXNSVUZCVFdVc1RVRkJUV01zYjBKQlMyaENOMElzUlVGQlRUaENMRzFDUVVOT09VSXNSVUZCVFcxQ0xIbENRVVZRYmtJc1JVRkJUVGhDTEdsQ1FVRnRRaXhYUVVOMFFqbENMRVZCUVUxWExHbENRVU5TTVVNc1YwRkJWMDBzVVVGQlVYZEVMSFZDUVVGMVFpOUNMRVZCUVUxWExHZENRVU5vUkZnc1JVRkJUVEpDTEdsQ1FVRnRRaXhQUVVVeFFqTkNMRVZCUVUxblF5eGhRVUZsTEZkQlEzUkNMRTlCUVU5b1F5eEZRVUZOVnl4blFrRkRTaTlDTERKQ1FVRXlRbTlDTEVWQlFXNURSQ3hIUVRoQ1RDeFBRUzlGUVdZc1ZVRkJWV0VzVDBGQlVVTXNSMEZ2Ukd4Q1JDeFBRVUZQVml4VlFVRlZPRU1zYTBKQlFXOUNMRk5CUVZOQkxHOUNRVU0xUTJoRExFdEJRVXRwUXl4WlFVRmhMRVZCUTJ4Q2FrTXNTMEZCUzI5Q0xHdENRVWRRZUVJc1QwRkJUMVlzVlVGQlZXZEVMRzFDUVVGeFFpeFRRVUZUUVN4eFFrRkROME5zUXl4TFFVRkxiMElzYTBKQlIxQjRRaXhQUVVGUFZpeFZRVUZWYVVRc01FSkJRVFJDTEZOQlFWTkJMREJDUVVFd1FrTXNSMEZETVVWd1F5eExRVUZMVlN4blFrRkJhMEl3UWl4RlFVRlZja0lzV1VGQlkyWXNTMEZCUzJNc1RVRkJUVU1zV1VGRE5VUm1MRXRCUVV0aExIRkNRVUZ4UWswc1dVRkJXVzVDTEV0QlFVdFZMR2RDUVVNelExWXNTMEZCUzJFc2MwSkJRWFZDTEVWQlFVa3pReXhsUVVGbFNTeFRRVUZUT0VRc1JVRkJWWEpDTEZkQlFWY3NSVUZCU1RORExHZENRVUZuUWtVc1UwRkJVekJDTEUxQlFVMW5RaXhOUVVOb1NHaENMRXRCUVV0aExIRkNRVUZ4UWtrc1dVRkJXV3BDTEV0QlFVdFZMR3RDUVVrdlEyUXNUMEZCVDFZc1ZVRkJWVzFFTEhGQ1FVRjFRaXhUUVVGVFFTeDFRa0ZETDBOeVF5eExRVUZMYVVNc1dVRkJZU3hGUVVOc1FtcERMRXRCUVVzMlFpeHRRa0ZEVERkQ0xFdEJRVXRyUWl4NVFrRkhVSFJDTEU5QlFVOVdMRlZCUVZWdlJDeFBRVUZUTEZOQlFWTkJMRk5CUTJwRExFOUJRVThzVFVGSFJqRkRMRTlCYUVaSkxFTkJhVVpZT1VJc1VVRkJVVkVzVVVGQlVXbEZMRmRCUld4Q00wTXNUMEZCVHpSRExGbEJRV01zVTBGRGNrSTFReXhQUVVGUE5rTXNWVUZCV1N4RFFVdHFRakZDTEZWQlFWZDBSQ3haUVVGWllTeFJRVUZSYjBVc1ZVRkJWU3hEUVVGRE9VVXNjVUpCUVhGQ1ZTeFJRVUZUWWl4WlFVRlpZU3hSUVVGUmNVVXNUMEZGTlVabUxGZEJRVmx1UlN4WlFVRlpZU3hSUVVGUmNVVXNUVUZGYkVOMFJpeFJRVUZSYVVJc1VVRkJWWE5DTEU5QlEyeENaMFFzVDBGQlQzWkdMRkZCUVZWQkxGRkJRV2xDSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdOMExXOTJaWEpzWVhsekwyeHBZaTlNWldkaFkzbFFiM0owWVd3dWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwO3ZhciBfZXh0ZW5kcz1PYmplY3QuYXNzaWdufHxmdW5jdGlvbihlKXtmb3IodmFyIHQ9MTt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKXt2YXIgbz1hcmd1bWVudHNbdF07Zm9yKHZhciBuIGluIG8pT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sbikmJihlW25dPW9bbl0pfXJldHVybiBlfSxfYWN0aXZlRWxlbWVudD1yZXF1aXJlKFwiZG9tLWhlbHBlcnMvYWN0aXZlRWxlbWVudFwiKSxfYWN0aXZlRWxlbWVudDI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYWN0aXZlRWxlbWVudCksX2NvbnRhaW5zPXJlcXVpcmUoXCJkb20taGVscGVycy9xdWVyeS9jb250YWluc1wiKSxfY29udGFpbnMyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbnRhaW5zKSxfaW5ET009cmVxdWlyZShcImRvbS1oZWxwZXJzL3V0aWwvaW5ET01cIiksX2luRE9NMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbkRPTSksX3Byb3BUeXBlcz1yZXF1aXJlKFwicHJvcC10eXBlc1wiKSxfcHJvcFR5cGVzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpLF9jb21wb25lbnRPckVsZW1lbnQ9cmVxdWlyZShcInByb3AtdHlwZXMtZXh0cmEvbGliL2NvbXBvbmVudE9yRWxlbWVudFwiKSxfY29tcG9uZW50T3JFbGVtZW50Mj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb21wb25lbnRPckVsZW1lbnQpLF9kZXByZWNhdGVkPXJlcXVpcmUoXCJwcm9wLXR5cGVzLWV4dHJhL2xpYi9kZXByZWNhdGVkXCIpLF9kZXByZWNhdGVkMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZXByZWNhdGVkKSxfZWxlbWVudFR5cGU9cmVxdWlyZShcInByb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlXCIpLF9lbGVtZW50VHlwZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZWxlbWVudFR5cGUpLF9yZWFjdD1yZXF1aXJlKFwicmVhY3RcIiksX3JlYWN0Mj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCksX3JlYWN0RG9tPXJlcXVpcmUoXCJyZWFjdC1kb21cIiksX3JlYWN0RG9tMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSksX3dhcm5pbmc9cmVxdWlyZShcIndhcm5pbmdcIiksX3dhcm5pbmcyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpLF9Nb2RhbE1hbmFnZXI9cmVxdWlyZShcIi4vTW9kYWxNYW5hZ2VyXCIpLF9Nb2RhbE1hbmFnZXIyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX01vZGFsTWFuYWdlciksX1BvcnRhbD1yZXF1aXJlKFwiLi9Qb3J0YWxcIiksX1BvcnRhbDI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUG9ydGFsKSxfUmVmSG9sZGVyPXJlcXVpcmUoXCIuL1JlZkhvbGRlclwiKSxfUmVmSG9sZGVyMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SZWZIb2xkZXIpLF9hZGRFdmVudExpc3RlbmVyPXJlcXVpcmUoXCIuL3V0aWxzL2FkZEV2ZW50TGlzdGVuZXJcIiksX2FkZEV2ZW50TGlzdGVuZXIyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FkZEV2ZW50TGlzdGVuZXIpLF9hZGRGb2N1c0xpc3RlbmVyPXJlcXVpcmUoXCIuL3V0aWxzL2FkZEZvY3VzTGlzdGVuZXJcIiksX2FkZEZvY3VzTGlzdGVuZXIyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FkZEZvY3VzTGlzdGVuZXIpLF9nZXRDb250YWluZXI9cmVxdWlyZShcIi4vdXRpbHMvZ2V0Q29udGFpbmVyXCIpLF9nZXRDb250YWluZXIyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldENvbnRhaW5lciksX293bmVyRG9jdW1lbnQ9cmVxdWlyZShcIi4vdXRpbHMvb3duZXJEb2N1bWVudFwiKSxfb3duZXJEb2N1bWVudDI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb3duZXJEb2N1bWVudCk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX1mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihlLHQpe2lmKCFlKXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4hdHx8XCJvYmplY3RcIiE9dHlwZW9mIHQmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQ/ZTp0fWZ1bmN0aW9uIF9pbmhlcml0cyhlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiB0KTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSx0JiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihlLHQpOmUuX19wcm90b19fPXQpfXZhciBtb2RhbE1hbmFnZXI9bmV3IF9Nb2RhbE1hbmFnZXIyLmRlZmF1bHQsTW9kYWw9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gTW9kYWwoKXt2YXIgdCxvO19jbGFzc0NhbGxDaGVjayh0aGlzLE1vZGFsKTtmb3IodmFyIG49YXJndW1lbnRzLmxlbmd0aCxyPUFycmF5KG4pLGE9MDthPG47YSsrKXJbYV09YXJndW1lbnRzW2FdO3JldHVybiB0PW89X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcyxlLmNhbGwuYXBwbHkoZSxbdGhpc10uY29uY2F0KHIpKSksX2luaXRpYWxpc2VQcm9wcy5jYWxsKG8pLF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKG8sdCl9cmV0dXJuIF9pbmhlcml0cyhNb2RhbCxlKSxNb2RhbC5wcm90b3R5cGUub21pdFByb3BzPWZ1bmN0aW9uIG9taXRQcm9wcyhlLHQpe3ZhciBvPU9iamVjdC5rZXlzKGUpLG49e307cmV0dXJuIG8ubWFwKGZ1bmN0aW9uKG8pe09iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LG8pfHwobltvXT1lW29dKX0pLG59LE1vZGFsLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIGU9dGhpcy5wcm9wcyx0PWUuc2hvdyxvPWUuY29udGFpbmVyLG49ZS5jaGlsZHJlbixyPWUudHJhbnNpdGlvbixhPWUuYmFja2Ryb3AsaT1lLmNsYXNzTmFtZSxzPWUuc3R5bGUscD1lLm9uRXhpdCx1PWUub25FeGl0aW5nLGw9ZS5vbkVudGVyLGQ9ZS5vbkVudGVyaW5nLGM9ZS5vbkVudGVyZWQsZj1fcmVhY3QyLmRlZmF1bHQuQ2hpbGRyZW4ub25seShuKSxfPXRoaXMub21pdFByb3BzKHRoaXMucHJvcHMsTW9kYWwucHJvcFR5cGVzKTtpZighKHR8fHImJiF0aGlzLnN0YXRlLmV4aXRlZCkpcmV0dXJuIG51bGw7dmFyIGg9Zi5wcm9wcyx5PWgucm9sZSxtPWgudGFiSW5kZXg7cmV0dXJuIHZvaWQgMCE9PXkmJnZvaWQgMCE9PW18fChmPSgwLF9yZWFjdC5jbG9uZUVsZW1lbnQpKGYse3JvbGU6dm9pZCAwPT09eT9cImRvY3VtZW50XCI6eSx0YWJJbmRleDpudWxsPT1tP1wiLTFcIjptfSkpLHImJihmPV9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KHIse2FwcGVhcjohMCx1bm1vdW50T25FeGl0OiEwLGluOnQsb25FeGl0OnAsb25FeGl0aW5nOnUsb25FeGl0ZWQ6dGhpcy5oYW5kbGVIaWRkZW4sb25FbnRlcjpsLG9uRW50ZXJpbmc6ZCxvbkVudGVyZWQ6Y30sZikpLF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Qb3J0YWwyLmRlZmF1bHQse3JlZjp0aGlzLnNldE1vdW50Tm9kZSxjb250YWluZXI6byxvblJlbmRlcmVkOnRoaXMub25Qb3J0YWxSZW5kZXJlZH0sX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIixfZXh0ZW5kcyh7cmVmOnRoaXMuc2V0TW9kYWxOb2RlUmVmLHJvbGU6eXx8XCJkaWFsb2dcIn0sXyx7c3R5bGU6cyxjbGFzc05hbWU6aX0pLGEmJnRoaXMucmVuZGVyQmFja2Ryb3AoKSxfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfUmVmSG9sZGVyMi5kZWZhdWx0LHtyZWY6dGhpcy5zZXREaWFsb2dSZWZ9LGYpKSl9LE1vZGFsLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzPWZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoZSl7ZS5zaG93P3RoaXMuc2V0U3RhdGUoe2V4aXRlZDohMX0pOmUudHJhbnNpdGlvbnx8dGhpcy5zZXRTdGF0ZSh7ZXhpdGVkOiEwfSl9LE1vZGFsLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVXBkYXRlPWZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVcGRhdGUoZSl7IXRoaXMucHJvcHMuc2hvdyYmZS5zaG93JiZ0aGlzLmNoZWNrRm9yRm9jdXMoKX0sTW9kYWwucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50PWZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCl7dGhpcy5faXNNb3VudGVkPSEwLHRoaXMucHJvcHMuc2hvdyYmdGhpcy5vblNob3coKX0sTW9kYWwucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZT1mdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoZSl7dmFyIHQ9dGhpcy5wcm9wcy50cmFuc2l0aW9uOyFlLnNob3d8fHRoaXMucHJvcHMuc2hvd3x8dD8hZS5zaG93JiZ0aGlzLnByb3BzLnNob3cmJnRoaXMub25TaG93KCk6dGhpcy5vbkhpZGUoKX0sTW9kYWwucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50PWZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCl7dmFyIGU9dGhpcy5wcm9wcyx0PWUuc2hvdyxvPWUudHJhbnNpdGlvbjt0aGlzLl9pc01vdW50ZWQ9ITEsKHR8fG8mJiF0aGlzLnN0YXRlLmV4aXRlZCkmJnRoaXMub25IaWRlKCl9LE1vZGFsLnByb3RvdHlwZS5hdXRvRm9jdXM9ZnVuY3Rpb24gYXV0b0ZvY3VzKCl7aWYodGhpcy5wcm9wcy5hdXRvRm9jdXMpe3ZhciBlPXRoaXMuZ2V0RGlhbG9nRWxlbWVudCgpLHQ9KDAsX2FjdGl2ZUVsZW1lbnQyLmRlZmF1bHQpKCgwLF9vd25lckRvY3VtZW50Mi5kZWZhdWx0KSh0aGlzKSk7ZSYmISgwLF9jb250YWluczIuZGVmYXVsdCkoZSx0KSYmKHRoaXMubGFzdEZvY3VzPXQsZS5oYXNBdHRyaWJ1dGUoXCJ0YWJJbmRleFwiKXx8KCgwLF93YXJuaW5nMi5kZWZhdWx0KSghMSwnVGhlIG1vZGFsIGNvbnRlbnQgbm9kZSBkb2VzIG5vdCBhY2NlcHQgZm9jdXMuIEZvciB0aGUgYmVuZWZpdCBvZiBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCB0aGUgdGFiSW5kZXggb2YgdGhlIG5vZGUgaXMgYmVpbmcgc2V0IHRvIFwiLTFcIi4nKSxlLnNldEF0dHJpYnV0ZShcInRhYkluZGV4XCIsLTEpKSxlLmZvY3VzKCkpfX0sTW9kYWwucHJvdG90eXBlLnJlc3RvcmVMYXN0Rm9jdXM9ZnVuY3Rpb24gcmVzdG9yZUxhc3RGb2N1cygpe3RoaXMubGFzdEZvY3VzJiZ0aGlzLmxhc3RGb2N1cy5mb2N1cyYmKHRoaXMubGFzdEZvY3VzLmZvY3VzKCksdGhpcy5sYXN0Rm9jdXM9bnVsbCl9LE1vZGFsLnByb3RvdHlwZS5nZXREaWFsb2dFbGVtZW50PWZ1bmN0aW9uIGdldERpYWxvZ0VsZW1lbnQoKXtyZXR1cm4gX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMuZGlhbG9nKX0sTW9kYWwucHJvdG90eXBlLmlzVG9wTW9kYWw9ZnVuY3Rpb24gaXNUb3BNb2RhbCgpe3JldHVybiB0aGlzLnByb3BzLm1hbmFnZXIuaXNUb3BNb2RhbCh0aGlzKX0sTW9kYWx9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO01vZGFsLnByb3BUeXBlcz1fZXh0ZW5kcyh7fSxfUG9ydGFsMi5kZWZhdWx0LnByb3BUeXBlcyx7c2hvdzpfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsY29udGFpbmVyOl9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfY29tcG9uZW50T3JFbGVtZW50Mi5kZWZhdWx0LF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuY10pLG9uU2hvdzpfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsb25IaWRlOl9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxiYWNrZHJvcDpfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2YoW1wic3RhdGljXCJdKV0pLHJlbmRlckJhY2tkcm9wOl9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxvbkVzY2FwZUtleURvd246X3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLG9uRXNjYXBlS2V5VXA6KDAsX2RlcHJlY2F0ZWQyLmRlZmF1bHQpKF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcIlBsZWFzZSB1c2Ugb25Fc2NhcGVLZXlEb3duIGluc3RlYWQgZm9yIGNvbnNpc3RlbmN5XCIpLG9uQmFja2Ryb3BDbGljazpfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsYmFja2Ryb3BTdHlsZTpfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxiYWNrZHJvcENsYXNzTmFtZTpfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxjb250YWluZXJDbGFzc05hbWU6X3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsa2V5Ym9hcmQ6X3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLHRyYW5zaXRpb246X2VsZW1lbnRUeXBlMi5kZWZhdWx0LGJhY2tkcm9wVHJhbnNpdGlvbjpfZWxlbWVudFR5cGUyLmRlZmF1bHQsYXV0b0ZvY3VzOl9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxlbmZvcmNlRm9jdXM6X3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLHJlc3RvcmVGb2N1czpfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsb25FbnRlcjpfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsb25FbnRlcmluZzpfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsb25FbnRlcmVkOl9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxvbkV4aXQ6X3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLG9uRXhpdGluZzpfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsb25FeGl0ZWQ6X3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLG1hbmFnZXI6X3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZH0pLE1vZGFsLmRlZmF1bHRQcm9wcz17c2hvdzohMSxiYWNrZHJvcDohMCxrZXlib2FyZDohMCxhdXRvRm9jdXM6ITAsZW5mb3JjZUZvY3VzOiEwLHJlc3RvcmVGb2N1czohMCxvbkhpZGU6ZnVuY3Rpb24gb25IaWRlKCl7fSxtYW5hZ2VyOm1vZGFsTWFuYWdlcixyZW5kZXJCYWNrZHJvcDpmdW5jdGlvbiByZW5kZXJCYWNrZHJvcChlKXtyZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIixlKX19O3ZhciBfaW5pdGlhbGlzZVByb3BzPWZ1bmN0aW9uIF9pbml0aWFsaXNlUHJvcHMoKXt2YXIgZT10aGlzO3RoaXMuc3RhdGU9e2V4aXRlZDohdGhpcy5wcm9wcy5zaG93fSx0aGlzLnJlbmRlckJhY2tkcm9wPWZ1bmN0aW9uKCl7dmFyIHQ9ZS5wcm9wcyxvPXQuYmFja2Ryb3BTdHlsZSxuPXQuYmFja2Ryb3BDbGFzc05hbWUscj10LnJlbmRlckJhY2tkcm9wLGE9dC5iYWNrZHJvcFRyYW5zaXRpb24saT1yKHtyZWY6ZnVuY3Rpb24gYmFja2Ryb3BSZWYodCl7cmV0dXJuIGUuYmFja2Ryb3A9dH0sc3R5bGU6byxjbGFzc05hbWU6bixvbkNsaWNrOmUuaGFuZGxlQmFja2Ryb3BDbGlja30pO3JldHVybiBhJiYoaT1fcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChhLHthcHBlYXI6ITAsaW46ZS5wcm9wcy5zaG93fSxpKSksaX0sdGhpcy5vblBvcnRhbFJlbmRlcmVkPWZ1bmN0aW9uKCl7ZS5hdXRvRm9jdXMoKSxlLnByb3BzLm9uU2hvdyYmZS5wcm9wcy5vblNob3coKX0sdGhpcy5vblNob3c9ZnVuY3Rpb24oKXt2YXIgdD0oMCxfb3duZXJEb2N1bWVudDIuZGVmYXVsdCkoZSksbz0oMCxfZ2V0Q29udGFpbmVyMi5kZWZhdWx0KShlLnByb3BzLmNvbnRhaW5lcix0LmJvZHkpO2UucHJvcHMubWFuYWdlci5hZGQoZSxvLGUucHJvcHMuY29udGFpbmVyQ2xhc3NOYW1lKSxlLl9vbkRvY3VtZW50S2V5ZG93bkxpc3RlbmVyPSgwLF9hZGRFdmVudExpc3RlbmVyMi5kZWZhdWx0KSh0LFwia2V5ZG93blwiLGUuaGFuZGxlRG9jdW1lbnRLZXlEb3duKSxlLl9vbkRvY3VtZW50S2V5dXBMaXN0ZW5lcj0oMCxfYWRkRXZlbnRMaXN0ZW5lcjIuZGVmYXVsdCkodCxcImtleXVwXCIsZS5oYW5kbGVEb2N1bWVudEtleVVwKSxlLl9vbkZvY3VzaW5MaXN0ZW5lcj0oMCxfYWRkRm9jdXNMaXN0ZW5lcjIuZGVmYXVsdCkoZS5lbmZvcmNlRm9jdXMpfSx0aGlzLm9uSGlkZT1mdW5jdGlvbigpe2UucHJvcHMubWFuYWdlci5yZW1vdmUoZSksZS5fb25Eb2N1bWVudEtleWRvd25MaXN0ZW5lci5yZW1vdmUoKSxlLl9vbkRvY3VtZW50S2V5dXBMaXN0ZW5lci5yZW1vdmUoKSxlLl9vbkZvY3VzaW5MaXN0ZW5lci5yZW1vdmUoKSxlLnByb3BzLnJlc3RvcmVGb2N1cyYmZS5yZXN0b3JlTGFzdEZvY3VzKCl9LHRoaXMuc2V0TW91bnROb2RlPWZ1bmN0aW9uKHQpe2UubW91bnROb2RlPXQ/dC5nZXRNb3VudE5vZGUoKTp0fSx0aGlzLnNldE1vZGFsTm9kZVJlZj1mdW5jdGlvbih0KXtlLm1vZGFsTm9kZT10fSx0aGlzLnNldERpYWxvZ1JlZj1mdW5jdGlvbih0KXtlLmRpYWxvZz10fSx0aGlzLmhhbmRsZUhpZGRlbj1mdW5jdGlvbigpe3ZhciB0OyhlLnNldFN0YXRlKHtleGl0ZWQ6ITB9KSxlLm9uSGlkZSgpLGUucHJvcHMub25FeGl0ZWQpJiYodD1lLnByb3BzKS5vbkV4aXRlZC5hcHBseSh0LGFyZ3VtZW50cyl9LHRoaXMuaGFuZGxlQmFja2Ryb3BDbGljaz1mdW5jdGlvbih0KXt0LnRhcmdldD09PXQuY3VycmVudFRhcmdldCYmKGUucHJvcHMub25CYWNrZHJvcENsaWNrJiZlLnByb3BzLm9uQmFja2Ryb3BDbGljayh0KSwhMD09PWUucHJvcHMuYmFja2Ryb3AmJmUucHJvcHMub25IaWRlKCkpfSx0aGlzLmhhbmRsZURvY3VtZW50S2V5RG93bj1mdW5jdGlvbih0KXtlLnByb3BzLmtleWJvYXJkJiYyNz09PXQua2V5Q29kZSYmZS5pc1RvcE1vZGFsKCkmJihlLnByb3BzLm9uRXNjYXBlS2V5RG93biYmZS5wcm9wcy5vbkVzY2FwZUtleURvd24odCksZS5wcm9wcy5vbkhpZGUoKSl9LHRoaXMuaGFuZGxlRG9jdW1lbnRLZXlVcD1mdW5jdGlvbih0KXtlLnByb3BzLmtleWJvYXJkJiYyNz09PXQua2V5Q29kZSYmZS5pc1RvcE1vZGFsKCkmJmUucHJvcHMub25Fc2NhcGVLZXlVcCYmZS5wcm9wcy5vbkVzY2FwZUtleVVwKHQpfSx0aGlzLmNoZWNrRm9yRm9jdXM9ZnVuY3Rpb24oKXtfaW5ET00yLmRlZmF1bHQmJihlLmxhc3RGb2N1cz0oMCxfYWN0aXZlRWxlbWVudDIuZGVmYXVsdCkoKSl9LHRoaXMuZW5mb3JjZUZvY3VzPWZ1bmN0aW9uKCl7aWYoZS5wcm9wcy5lbmZvcmNlRm9jdXMmJmUuX2lzTW91bnRlZCYmZS5pc1RvcE1vZGFsKCkpe3ZhciB0PWUuZ2V0RGlhbG9nRWxlbWVudCgpLG89KDAsX2FjdGl2ZUVsZW1lbnQyLmRlZmF1bHQpKCgwLF9vd25lckRvY3VtZW50Mi5kZWZhdWx0KShlKSk7dCYmISgwLF9jb250YWluczIuZGVmYXVsdCkodCxvKSYmdC5mb2N1cygpfX19O01vZGFsLk1hbmFnZXI9X01vZGFsTWFuYWdlcjIuZGVmYXVsdCxleHBvcnRzLmRlZmF1bHQ9TW9kYWwsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWsxdlpHRnNMbXB6SWwwc0ltNWhiV1Z6SWpwYkltVjRjRzl5ZEhNaUxDSmZYMlZ6VFc5a2RXeGxJaXdpWDJWNGRHVnVaSE1pTENKUFltcGxZM1FpTENKaGMzTnBaMjRpTENKMFlYSm5aWFFpTENKcElpd2lZWEpuZFcxbGJuUnpJaXdpYkdWdVozUm9JaXdpYzI5MWNtTmxJaXdpYTJWNUlpd2ljSEp2ZEc5MGVYQmxJaXdpYUdGelQzZHVVSEp2Y0dWeWRIa2lMQ0pqWVd4c0lpd2lYMkZqZEdsMlpVVnNaVzFsYm5RaUxDSnlaWEYxYVhKbElpd2lYMkZqZEdsMlpVVnNaVzFsYm5ReUlpd2lYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENJc0lsOWpiMjUwWVdsdWN5SXNJbDlqYjI1MFlXbHVjeklpTENKZmFXNUVUMDBpTENKZmFXNUVUMDB5SWl3aVgzQnliM0JVZVhCbGN5SXNJbDl3Y205d1ZIbHdaWE15SWl3aVgyTnZiWEJ2Ym1WdWRFOXlSV3hsYldWdWRDSXNJbDlqYjIxd2IyNWxiblJQY2tWc1pXMWxiblF5SWl3aVgyUmxjSEpsWTJGMFpXUWlMQ0pmWkdWd2NtVmpZWFJsWkRJaUxDSmZaV3hsYldWdWRGUjVjR1VpTENKZlpXeGxiV1Z1ZEZSNWNHVXlJaXdpWDNKbFlXTjBJaXdpWDNKbFlXTjBNaUlzSWw5eVpXRmpkRVJ2YlNJc0lsOXlaV0ZqZEVSdmJUSWlMQ0pmZDJGeWJtbHVaeUlzSWw5M1lYSnVhVzVuTWlJc0lsOU5iMlJoYkUxaGJtRm5aWElpTENKZlRXOWtZV3hOWVc1aFoyVnlNaUlzSWw5UWIzSjBZV3dpTENKZlVHOXlkR0ZzTWlJc0lsOVNaV1pJYjJ4a1pYSWlMQ0pmVW1WbVNHOXNaR1Z5TWlJc0lsOWhaR1JGZG1WdWRFeHBjM1JsYm1WeUlpd2lYMkZrWkVWMlpXNTBUR2x6ZEdWdVpYSXlJaXdpWDJGa1pFWnZZM1Z6VEdsemRHVnVaWElpTENKZllXUmtSbTlqZFhOTWFYTjBaVzVsY2pJaUxDSmZaMlYwUTI5dWRHRnBibVZ5SWl3aVgyZGxkRU52Ym5SaGFXNWxjaklpTENKZmIzZHVaWEpFYjJOMWJXVnVkQ0lzSWw5dmQyNWxja1J2WTNWdFpXNTBNaUlzSW05aWFpSXNJbVJsWm1GMWJIUWlMQ0pmWTJ4aGMzTkRZV3hzUTJobFkyc2lMQ0pwYm5OMFlXNWpaU0lzSWtOdmJuTjBjblZqZEc5eUlpd2lWSGx3WlVWeWNtOXlJaXdpWDNCdmMzTnBZbXhsUTI5dWMzUnlkV04wYjNKU1pYUjFjbTRpTENKelpXeG1JaXdpVW1WbVpYSmxibU5sUlhKeWIzSWlMQ0pmYVc1b1pYSnBkSE1pTENKemRXSkRiR0Z6Y3lJc0luTjFjR1Z5UTJ4aGMzTWlMQ0pqY21WaGRHVWlMQ0pqYjI1emRISjFZM1J2Y2lJc0luWmhiSFZsSWl3aVpXNTFiV1Z5WVdKc1pTSXNJbmR5YVhSaFlteGxJaXdpWTI5dVptbG5kWEpoWW14bElpd2ljMlYwVUhKdmRHOTBlWEJsVDJZaUxDSmZYM0J5YjNSdlgxOGlMQ0p0YjJSaGJFMWhibUZuWlhJaUxDSk5iMlJoYkNJc0lsOVNaV0ZqZENSRGIyMXdiMjVsYm5RaUxDSmZkR1Z0Y0NJc0lsOTBhR2x6SWl3aWRHaHBjeUlzSWw5c1pXNGlMQ0poY21keklpd2lRWEp5WVhraUxDSmZhMlY1SWl3aVlYQndiSGtpTENKamIyNWpZWFFpTENKZmFXNXBkR2xoYkdselpWQnliM0J6SWl3aWIyMXBkRkJ5YjNCeklpd2ljSEp2Y0hNaUxDSndjbTl3Vkhsd1pYTWlMQ0pyWlhseklpd2libVYzVUhKdmNITWlMQ0p0WVhBaUxDSndjbTl3SWl3aWNtVnVaR1Z5SWl3aVgzQnliM0J6SWl3aWMyaHZkeUlzSW1OdmJuUmhhVzVsY2lJc0ltTm9hV3hrY21WdUlpd2lWSEpoYm5OcGRHbHZiaUlzSW5SeVlXNXphWFJwYjI0aUxDSmlZV05yWkhKdmNDSXNJbU5zWVhOelRtRnRaU0lzSW5OMGVXeGxJaXdpYjI1RmVHbDBJaXdpYjI1RmVHbDBhVzVuSWl3aWIyNUZiblJsY2lJc0ltOXVSVzUwWlhKcGJtY2lMQ0p2YmtWdWRHVnlaV1FpTENKa2FXRnNiMmNpTENKRGFHbHNaSEpsYmlJc0ltOXViSGtpTENKbWFXeDBaWEpsWkZCeWIzQnpJaXdpYzNSaGRHVWlMQ0psZUdsMFpXUWlMQ0pmWkdsaGJHOW5KSEJ5YjNCeklpd2ljbTlzWlNJc0luUmhZa2x1WkdWNElpd2lkVzVrWldacGJtVmtJaXdpWTJ4dmJtVkZiR1Z0Wlc1MElpd2lZM0psWVhSbFJXeGxiV1Z1ZENJc0ltRndjR1ZoY2lJc0luVnViVzkxYm5SUGJrVjRhWFFpTENKcGJpSXNJbTl1UlhocGRHVmtJaXdpYUdGdVpHeGxTR2xrWkdWdUlpd2ljbVZtSWl3aWMyVjBUVzkxYm5ST2IyUmxJaXdpYjI1U1pXNWtaWEpsWkNJc0ltOXVVRzl5ZEdGc1VtVnVaR1Z5WldRaUxDSnpaWFJOYjJSaGJFNXZaR1ZTWldZaUxDSnlaVzVrWlhKQ1lXTnJaSEp2Y0NJc0luTmxkRVJwWVd4dloxSmxaaUlzSW1OdmJYQnZibVZ1ZEZkcGJHeFNaV05sYVhabFVISnZjSE1pTENKdVpYaDBVSEp2Y0hNaUxDSnpaWFJUZEdGMFpTSXNJbU52YlhCdmJtVnVkRmRwYkd4VmNHUmhkR1VpTENKamFHVmphMFp2Y2tadlkzVnpJaXdpWTI5dGNHOXVaVzUwUkdsa1RXOTFiblFpTENKZmFYTk5iM1Z1ZEdWa0lpd2liMjVUYUc5M0lpd2lZMjl0Y0c5dVpXNTBSR2xrVlhCa1lYUmxJaXdpY0hKbGRsQnliM0J6SWl3aWIyNUlhV1JsSWl3aVkyOXRjRzl1Wlc1MFYybHNiRlZ1Ylc5MWJuUWlMQ0pmY0hKdmNITXlJaXdpWVhWMGIwWnZZM1Z6SWl3aVpHbGhiRzluUld4bGJXVnVkQ0lzSW1kbGRFUnBZV3h2WjBWc1pXMWxiblFpTENKamRYSnlaVzUwUVdOMGFYWmxSV3hsYldWdWRDSXNJbXhoYzNSR2IyTjFjeUlzSW1oaGMwRjBkSEpwWW5WMFpTSXNJbk5sZEVGMGRISnBZblYwWlNJc0ltWnZZM1Z6SWl3aWNtVnpkRzl5WlV4aGMzUkdiMk4xY3lJc0ltWnBibVJFVDAxT2IyUmxJaXdpYVhOVWIzQk5iMlJoYkNJc0ltMWhibUZuWlhJaUxDSkRiMjF3YjI1bGJuUWlMQ0ppYjI5c0lpd2liMjVsVDJaVWVYQmxJaXdpWm5WdVl5SXNJbTl1WlU5bUlpd2liMjVGYzJOaGNHVkxaWGxFYjNkdUlpd2liMjVGYzJOaGNHVkxaWGxWY0NJc0ltOXVRbUZqYTJSeWIzQkRiR2xqYXlJc0ltSmhZMnRrY205d1UzUjViR1VpTENKdlltcGxZM1FpTENKaVlXTnJaSEp2Y0VOc1lYTnpUbUZ0WlNJc0luTjBjbWx1WnlJc0ltTnZiblJoYVc1bGNrTnNZWE56VG1GdFpTSXNJbXRsZVdKdllYSmtJaXdpWW1GamEyUnliM0JVY21GdWMybDBhVzl1SWl3aVpXNW1iM0pqWlVadlkzVnpJaXdpY21WemRHOXlaVVp2WTNWeklpd2lhWE5TWlhGMWFYSmxaQ0lzSW1SbFptRjFiSFJRY205d2N5SXNJbDkwYUdsek1pSXNJbDl3Y205d2N6TWlMQ0ppWVdOclpISnZjRkpsWmlJc0ltOXVRMnhwWTJzaUxDSm9ZVzVrYkdWQ1lXTnJaSEp2Y0VOc2FXTnJJaXdpWkc5aklpd2lZbTlrZVNJc0ltRmtaQ0lzSWw5dmJrUnZZM1Z0Wlc1MFMyVjVaRzkzYmt4cGMzUmxibVZ5SWl3aWFHRnVaR3hsUkc5amRXMWxiblJMWlhsRWIzZHVJaXdpWDI5dVJHOWpkVzFsYm5STFpYbDFjRXhwYzNSbGJtVnlJaXdpYUdGdVpHeGxSRzlqZFcxbGJuUkxaWGxWY0NJc0lsOXZia1p2WTNWemFXNU1hWE4wWlc1bGNpSXNJbkpsYlc5MlpTSXNJbTF2ZFc1MFRtOWtaU0lzSW1kbGRFMXZkVzUwVG05a1pTSXNJbTF2WkdGc1RtOWtaU0lzSWw5d2NtOXdjelFpTENKbElpd2lZM1Z5Y21WdWRGUmhjbWRsZENJc0ltdGxlVU52WkdVaUxDSk5ZVzVoWjJWeUlpd2liVzlrZFd4bElsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVVZCUVN4UlFVRlJReXhaUVVGaExFVkJSWEpDTEVsQlFVbERMRk5CUVZkRExFOUJRVTlETEZGQlFWVXNVMEZCVlVNc1IwRkJWU3hKUVVGTExFbEJRVWxETEVWQlFVa3NSVUZCUjBFc1JVRkJTVU1zVlVGQlZVTXNUMEZCVVVZc1NVRkJTeXhEUVVGRkxFbEJRVWxITEVWQlFWTkdMRlZCUVZWRUxFZEJRVWtzU1VGQlN5eEpRVUZKU1N4TFFVRlBSQ3hGUVVGalRpeFBRVUZQVVN4VlFVRlZReXhsUVVGbFF5eExRVUZMU2l4RlFVRlJReXhMUVVGUlRDeEZRVUZQU3l4SFFVRlBSQ3hGUVVGUFF5eEpRVUZaTEU5QlFVOU1MRWRCUlc1UVV5eGxRVUZwUWtNc1VVRkJVU3cyUWtGRmVrSkRMR2RDUVVGclFrTXNkVUpCUVhWQ1NDeG5Ra0ZGZWtOSkxGVkJRVmxJTEZGQlFWRXNPRUpCUlhCQ1NTeFhRVUZoUml4MVFrRkJkVUpETEZkQlJYQkRSU3hQUVVGVFRDeFJRVUZSTERCQ1FVVnFRazBzVVVGQlZVb3NkVUpCUVhWQ1J5eFJRVVZxUTBVc1YwRkJZVkFzVVVGQlVTeGpRVVZ5UWxFc1dVRkJZMDRzZFVKQlFYVkNTeXhaUVVWeVEwVXNiMEpCUVhOQ1ZDeFJRVUZSTERKRFFVVTVRbFVzY1VKQlFYVkNVaXgxUWtGQmRVSlBMSEZDUVVVNVEwVXNXVUZCWTFnc1VVRkJVU3h0UTBGRmRFSlpMR0ZCUVdWV0xIVkNRVUYxUWxNc1lVRkZkRU5GTEdGQlFXVmlMRkZCUVZFc2IwTkJSWFpDWXl4alFVRm5RbG9zZFVKQlFYVkNWeXhqUVVWMlEwVXNUMEZCVTJZc1VVRkJVU3hUUVVWcVFtZENMRkZCUVZWa0xIVkNRVUYxUW1Fc1VVRkZha05GTEZWQlFWbHFRaXhSUVVGUkxHRkJSWEJDYTBJc1YwRkJZV2hDTEhWQ1FVRjFRbVVzVjBGRmNFTkZMRk5CUVZkdVFpeFJRVUZSTEZkQlJXNUNiMElzVlVGQldXeENMSFZDUVVGMVFtbENMRlZCUlc1RFJTeGpRVUZuUW5KQ0xGRkJRVkVzYTBKQlJYaENjMElzWlVGQmFVSndRaXgxUWtGQmRVSnRRaXhsUVVWNFEwVXNVVUZCVlhaQ0xGRkJRVkVzV1VGRmJFSjNRaXhUUVVGWGRFSXNkVUpCUVhWQ2NVSXNVMEZGYkVORkxGZEJRV0Y2UWl4UlFVRlJMR1ZCUlhKQ01FSXNXVUZCWTNoQ0xIVkNRVUYxUW5WQ0xGbEJSWEpEUlN4clFrRkJiMEl6UWl4UlFVRlJMRFJDUVVVMVFqUkNMRzFDUVVGeFFqRkNMSFZDUVVGMVFubENMRzFDUVVVMVEwVXNhMEpCUVc5Q04wSXNVVUZCVVN3MFFrRkZOVUk0UWl4dFFrRkJjVUkxUWl4MVFrRkJkVUl5UWl4dFFrRkZOVU5GTEdOQlFXZENMMElzVVVGQlVTeDNRa0ZGZUVKblF5eGxRVUZwUWpsQ0xIVkNRVUYxUWpaQ0xHVkJSWGhEUlN4bFFVRnBRbXBETEZGQlFWRXNlVUpCUlhwQ2EwTXNaMEpCUVd0Q2FFTXNkVUpCUVhWQ0swSXNaMEpCUlRkRExGTkJRVk12UWl4MVFrRkJkVUpwUXl4SFFVRlBMRTlCUVU5QkxFZEJRVTlCTEVWQlFVbHFSQ3hYUVVGaGFVUXNSVUZCVFN4RFFVRkZReXhSUVVGVFJDeEhRVVYyUml4VFFVRlRSU3huUWtGQlowSkRMRVZCUVZWRExFZEJRV1VzUzBGQlRVUXNZVUZCYjBKRExFZEJRV2RDTEUxQlFVMHNTVUZCU1VNc1ZVRkJWU3h4UTBGRmFFZ3NVMEZCVTBNc01rSkJRVEpDUXl4RlFVRk5OVU1zUjBGQlVTeEpRVUZMTkVNc1JVRkJVU3hOUVVGTkxFbEJRVWxETEdWQlFXVXNOa1JCUVdkRkxFOUJRVTgzUXl4SFFVRjVRaXhwUWtGQlZFRXNSMEZCY1VNc2JVSkJRVlJCTEVWQlFUaENORU1zUlVGQlVEVkRMRVZCUld4UExGTkJRVk00UXl4VlFVRlZReXhGUVVGVlF5eEhRVUZqTEVkQlFUQkNMRzFDUVVGbVFTeEhRVUUwUXl4UFFVRm1RU3hGUVVGMVFpeE5RVUZOTEVsQlFVbE9MRlZCUVZVc2EwVkJRVzlGVFN4SFFVRmxSQ3hGUVVGVGFrUXNWVUZCV1ZJc1QwRkJUekpFTEU5QlFVOUVMRWRCUVdOQkxFVkJRVmRzUkN4VlFVRlhMRU5CUVVWdlJDeFpRVUZoTEVOQlFVVkRMRTFCUVU5S0xFVkJRVlZMTEZsQlFWa3NSVUZCVDBNc1ZVRkJWU3hGUVVGTlF5eGpRVUZqTEV0QlFXVk9MRWxCUVZreFJDeFBRVUZQYVVVc1pVRkJhVUpxUlN4UFFVRlBhVVVzWlVGQlpWSXNSVUZCVlVNc1IwRkJZMFFzUlVGQlUxTXNWVUZCV1ZJc1IwRkZhbVVzU1VGQlNWTXNZVUZCWlN4SlFVRkpha01zWlVGQlpXTXNVVUYxUW14RGIwSXNUVUZCVVN4VFFVRlZReXhIUVVkd1FpeFRRVUZUUkN4UlFVTlFMRWxCUVVsRkxFVkJRVTlETEVWQlJWaDBRaXhuUWtGQlowSjFRaXhMUVVGTlNpeFBRVVYwUWl4SlFVRkxMRWxCUVVsTExFVkJRVTl5UlN4VlFVRlZReXhQUVVGUmNVVXNSVUZCVDBNc1RVRkJUVVlzUjBGQlQwY3NSVUZCVHl4RlFVRkhRU3hGUVVGUFNDeEZRVUZOUnl4SlFVTXpSVVlzUlVGQlMwVXNSMEZCVVhoRkxGVkJRVlYzUlN4SFFVZDZRaXhQUVVGbFRpeEZRVUZUUXl4RlFVRlJiRUlzTWtKQlFUSkNiVUlzUzBGQlRVZ3NSVUZCYVVJelJDeExRVUZMYlVVc1RVRkJUVklzUlVGQmEwSXNRMEZCUTBjc1RVRkJUVTBzVDBGQlQwb3NTMEZCYVVKTExHbENRVUZwUW5KRkxFdEJRVXMyUkN4SFFVRm5RbXhDTERKQ1FVRXlRbXRDTEVWQlFXNURSQ3hIUVc5TU9Vc3NUMEV2VEVGa0xGVkJRVlZaTEUxQlFVOURMRWRCWTJwQ1JDeE5RVUZOTlVRc1ZVRkJWWGRGTEZWQlFWa3NVMEZCVTBFc1ZVRkJWVU1zUlVGQlQwTXNSMEZGY0VRc1NVRkJTVU1zUlVGQlQyNUdMRTlCUVU5dFJpeExRVUZMUml4SFFVTnVRa2NzUlVGQlZ5eEhRVTltTEU5QlRrRkVMRVZCUVV0RkxFbEJRVWtzVTBGQlZVTXNSMEZEV25SR0xFOUJRVTlSTEZWQlFWVkRMR1ZCUVdWRExFdEJRVXQzUlN4RlFVRlhTU3hMUVVOdVJFWXNSVUZCVTBVc1IwRkJVVXdzUlVGQlRVc3NUVUZKY0VKR0xFZEJSMVJvUWl4TlFVRk5OVVFzVlVGQlZTdEZMRTlCUVZNc1UwRkJVMEVzVTBGRGFFTXNTVUZCU1VNc1JVRkJVMmhDTEV0QlFVdFRMRTFCUTJSUkxFVkJRVTlFTEVWQlFVOURMRXRCUTJSRExFVkJRVmxHTEVWQlFVOUZMRlZCUTI1Q1F5eEZRVUZYU0N4RlFVRlBSeXhUUVVOc1FrTXNSVUZCWVVvc1JVRkJUMHNzVjBGRGNFSkRMRVZCUVZkT0xFVkJRVTlOTEZOQlEyeENReXhGUVVGWlVDeEZRVUZQVHl4VlFVTnVRa01zUlVGQlVWSXNSVUZCVDFFc1RVRkRaa01zUlVGQlUxUXNSVUZCVDFNc1QwRkRhRUpETEVWQlFWbFdMRVZCUVU5VkxGVkJRMjVDUXl4RlFVRlZXQ3hGUVVGUFZ5eFJRVU5xUWtNc1JVRkJZVm9zUlVGQlQxa3NWMEZEY0VKRExFVkJRVmxpTEVWQlFVOWhMRlZCUjI1Q1F5eEZRVUZUTVVVc1VVRkJVVzlDTEZGQlFWRjFSQ3hUUVVGVFF5eExRVUZMWWl4SFFVTjJRMk1zUlVGQlowSnFReXhMUVVGTFVTeFZRVUZWVWl4TFFVRkxVeXhOUVVGUFlpeE5RVUZOWXl4WFFVZHlSQ3hMUVVScFFrOHNSMEZCVVVjc1NVRkJaWEJDTEV0QlFVdHJReXhOUVVGTlF5eFJRVVZxUkN4UFFVRlBMRXRCUjFRc1NVRkJTVU1zUlVGQlowSk9MRVZCUVU5eVFpeE5RVU4yUWpSQ0xFVkJRVTlFTEVWQlFXTkRMRXRCUTNKQ1F5eEZRVUZYUml4RlFVRmpSU3hUUVRSQ04wSXNXVUY2UW1GRExFbEJRVlJHTEZGQlFXMURSU3hKUVVGaVJDeEpRVU40UWxJc1IwRkJVeXhGUVVGSk0wVXNUMEZCVDNGR0xHTkJRV05XTEVWQlFWRXNRMEZEZUVOUExGVkJRV1ZGTEVsQlFWUkdMRVZCUVhGQ0xGZEJRV0ZCTEVWQlEzaERReXhUUVVGelFpeE5RVUZhUVN4RlFVRnRRaXhMUVVGUFFTeExRVWx3UTJ4Q0xFbEJRMFpWTEVWQlFWTXhSU3hSUVVGUmIwSXNVVUZCVVdsRkxHTkJRM1pDY2tJc1JVRkRRU3hEUVVORmMwSXNVVUZCVVN4RlFVTlNReXhsUVVGbExFVkJRMlpETEVkQlFVMHpRaXhGUVVOT1VTeFBRVUZSUVN4RlFVTlNReXhWUVVGWFFTeEZRVU5ZYlVJc1UwRkJWVGRETEV0QlFVczRReXhoUVVObWJrSXNVVUZCVTBFc1JVRkRWRU1zVjBGQldVRXNSVUZEV2tNc1ZVRkJWMEVzUjBGRllrTXNTVUZKUnpGRkxGRkJRVkZ2UWl4UlFVRlJhVVVzWTBGRGNrSTNSU3hUUVVGVFdTeFJRVU5VTEVOQlEwVjFSU3hKUVVGTEwwTXNTMEZCUzJkRUxHRkJRMVk1UWl4VlFVRlhRU3hGUVVOWUswSXNWMEZCV1dwRUxFdEJRVXRyUkN4clFrRkZia0k1Uml4UlFVRlJiMElzVVVGQlVXbEZMR05CUTJRc1RVRkRRV3hJTEZOQlFWTXNRMEZEVUhkSUxFbEJRVXN2UXl4TFFVRkxiVVFzWjBKQlExWmtMRXRCUVUxQkxFZEJRVkVzVlVGRFlrb3NSVUZCWlN4RFFVTm9RbFFzVFVGQlQwRXNSVUZEVUVRc1ZVRkJWMEVzU1VGRllrUXNSMEZCV1hSQ0xFdEJRVXR2UkN4cFFrRkRha0pvUnl4UlFVRlJiMElzVVVGQlVXbEZMR05CUTJRelJTeFpRVUZaVlN4UlFVTmFMRU5CUVVWMVJTeEpRVUZMTDBNc1MwRkJTM0ZFTEdOQlExcDJRaXhOUVUxU2JFTXNUVUZCVFRWRUxGVkJRVlZ6U0N3d1FrRkJORUlzVTBGQlUwRXNNRUpCUVRCQ1F5eEhRVU42UlVFc1JVRkJWWFJETEV0QlExcHFRaXhMUVVGTGQwUXNVMEZCVXl4RFFVRkZja0lzVVVGQlVTeEpRVU5rYjBJc1JVRkJWV3hETEZsQlJYQkNja0lzUzBGQlMzZEVMRk5CUVZNc1EwRkJSWEpDTEZGQlFWRXNTMEZKTlVKMlF5eE5RVUZOTlVRc1ZVRkJWWGxJTEc5Q1FVRnpRaXhUUVVGVFFTeHZRa0ZCYjBKR0xFbEJRelZFZGtRc1MwRkJTMU1zVFVGQlRWRXNUVUZCVVhORExFVkJRVlYwUXl4TlFVTm9RMnBDTEV0QlFVc3dSQ3hwUWtGSlZEbEVMRTFCUVUwMVJDeFZRVUZWTWtnc2EwSkJRVzlDTEZOQlFWTkJMRzlDUVVNelF6TkVMRXRCUVVzMFJDeFpRVUZoTEVWQlEyUTFSQ3hMUVVGTFV5eE5RVUZOVVN4TlFVTmlha0lzUzBGQlN6WkVMRlZCU1ZScVJTeE5RVUZOTlVRc1ZVRkJWVGhJTEcxQ1FVRnhRaXhUUVVGVFFTeHRRa0ZCYlVKRExFZEJReTlFTEVsQlFVa3hReXhGUVVGaGNrSXNTMEZCUzFNc1RVRkJUVmtzV1VGSGVFSXdReXhGUVVGVk9VTXNUVUZCVTJwQ0xFdEJRVXRUTEUxQlFVMVJMRTFCUVZOSkxFZEJSeTlDTUVNc1JVRkJWVGxETEUxQlFWRnFRaXhMUVVGTFV5eE5RVUZOVVN4TlFVTjJRMnBDTEV0QlFVczJSQ3hUUVVaTU4wUXNTMEZCUzJkRkxGVkJUVlJ3UlN4TlFVRk5OVVFzVlVGQlZXbEpMSEZDUVVGMVFpeFRRVUZUUVN4MVFrRkRPVU1zU1VGQlNVTXNSVUZCVld4RkxFdEJRVXRUTEUxQlEyWlJMRVZCUVU5cFJDeEZRVUZSYWtRc1MwRkRaa2tzUlVGQllUWkRMRVZCUVZFM1F5eFhRVWQ2UW5KQ0xFdEJRVXMwUkN4WlFVRmhMRWRCUldRelF5eEhRVUZSU1N4SlFVRmxja0lzUzBGQlMydERMRTFCUVUxRExGTkJRM0JEYmtNc1MwRkJTMmRGTEZWQlNWUndSU3hOUVVGTk5VUXNWVUZCVlcxSkxGVkJRVmtzVTBGQlUwRXNXVUZEYmtNc1IwRkJTMjVGTEV0QlFVdFRMRTFCUVUwd1JDeFZRVUZvUWl4RFFVbEJMRWxCUVVsRExFVkJRV2RDY0VVc1MwRkJTM0ZGTEcxQ1FVTnlRa01zUjBGQmRVSXNSVUZCU1dwSkxHZENRVUZuUW0xRExGVkJRVk1zUlVGQlNVWXNaMEpCUVdkQ1JTeFRRVUZUZDBJc1QwRkZha1p2UlN4TFFVRnJRaXhGUVVGSk5VZ3NWMEZCVjJkRExGTkJRVk0wUml4RlFVRmxSU3hMUVVNelJIUkZMRXRCUVV0MVJTeFZRVUZaUkN4RlFVVmFSaXhGUVVGalNTeGhRVUZoTEdWQlF6bENMRVZCUVVsb1NDeFZRVUZWWjBJc1ZVRkJVeXhGUVVGUExESkpRVVU1UWpSR0xFVkJRV05MTEdGQlFXRXNXVUZCWVN4SlFVY3hRMHdzUlVGQlkwMHNWMEZKYkVJNVJTeE5RVUZOTlVRc1ZVRkJWVEpKTEdsQ1FVRnRRaXhUUVVGVFFTeHRRa0ZGZEVNelJTeExRVUZMZFVVc1YwRkJZWFpGTEV0QlFVdDFSU3hWUVVGVlJ5eFJRVU51UXpGRkxFdEJRVXQxUlN4VlFVRlZSeXhSUVVObU1VVXNTMEZCUzNWRkxGVkJRVmtzVDBGSmNrSXpSU3hOUVVGTk5VUXNWVUZCVlhGSkxHbENRVUZ0UWl4VFFVRlRRU3h0UWtGRE1VTXNUMEZCVHk5SExGZEJRVmRyUWl4UlFVRlJiMGNzV1VGQldUVkZMRXRCUVVzNFFpeFRRVWMzUTJ4RExFMUJRVTAxUkN4VlFVRlZOa2tzVjBGQllTeFRRVUZUUVN4aFFVTndReXhQUVVGUE4wVXNTMEZCUzFNc1RVRkJUWEZGTEZGQlFWRkVMRmRCUVZjM1JTeFBRVWRvUTBvc1RVRm9UVWNzUTBGcFRWWjRReXhSUVVGUmIwSXNVVUZCVVhWSExGZEJSV3hDYmtZc1RVRkJUV01zVlVGQldXNUdMRk5CUVZNc1IwRkJTWEZETEZOQlFWTlpMRkZCUVZGclF5eFZRVUZYTEVOQlMzcEVUeXhMUVVGTmNrVXNXVUZCV1RSQ0xGRkJRVkYzUnl4TFFWRXhRamxFTEZWQlFWZDBSU3haUVVGWk5FSXNVVUZCVVhsSExGVkJRVlVzUTBGQlEyNUpMSEZDUVVGeFFqQkNMRkZCUVZNMVFpeFpRVUZaTkVJc1VVRkJVVEJITEU5QlN6Vkdja0lzVDBGQlVXcElMRmxCUVZrMFFpeFJRVUZSTUVjc1MwRlJOVUpzUWl4UFFVRlJjRWdzV1VGQldUUkNMRkZCUVZFd1J5eExRVXMxUWpWRUxGTkJRVlV4UlN4WlFVRlpORUlzVVVGQlVYbEhMRlZCUVZVc1EwRkJRM0pKTEZsQlFWazBRaXhSUVVGUmQwY3NTMEZCVFhCSkxGbEJRVmswUWl4UlFVRlJNa2NzVFVGQlRTeERRVUZETEdGQlZUbEdMMElzWlVGQlowSjRSeXhaUVVGWk5FSXNVVUZCVVRCSExFdEJTM0JEUlN4blFrRkJhVUo0U1N4WlFVRlpORUlzVVVGQlVUQkhMRXRCVDNKRFJ5eGxRVUZsTEVWQlFVbHlTU3hoUVVGaGQwSXNVMEZCVXpWQ0xGbEJRVmswUWl4UlFVRlJNRWNzUzBGQlRTeHpSRUZMYmtWSkxHZENRVUZwUWpGSkxGbEJRVmswUWl4UlFVRlJNRWNzUzBGTGNrTkxMR05CUVdVelNTeFpRVUZaTkVJc1VVRkJVV2RJTEU5QlMyNURReXhyUWtGQmJVSTNTU3haUVVGWk5FSXNVVUZCVVd0SUxFOUJUWFpEUXl4dFFrRkJiMEl2U1N4WlFVRlpORUlzVVVGQlVXdElMRTlCUzNoRFJTeFRRVUZWYUVvc1dVRkJXVFJDTEZGQlFWRjNSeXhMUVUwNVFqTkVMRmRCUVZsdVJTeGpRVUZqYzBJc1VVRk5NVUp4U0N4dFFrRkJiMEl6U1N4alFVRmpjMElzVVVGVmJFTXlSaXhWUVVGWGRrZ3NXVUZCV1RSQ0xGRkJRVkYzUnl4TFFWRXZRbU1zWVVGQlkyeEtMRmxCUVZrMFFpeFJRVUZSZDBjc1MwRk5iRU5sTEdGQlFXTnVTaXhaUVVGWk5FSXNVVUZCVVhkSExFdEJTMnhEY2tRc1VVRkJVeTlGTEZsQlFWazBRaXhSUVVGUk1FY3NTMEZMTjBKMFJDeFhRVUZaYUVZc1dVRkJXVFJDTEZGQlFWRXdSeXhMUVV0b1EzSkVMRlZCUVZkcVJpeFpRVUZaTkVJc1VVRkJVVEJITEV0QlN5OUNla1FzVDBGQlVUZEZMRmxCUVZrMFFpeFJRVUZSTUVjc1MwRkxOVUo0UkN4VlFVRlhPVVVzV1VGQldUUkNMRkZCUVZFd1J5eExRVXN2UW5KRExGTkJRVlZxUnl4WlFVRlpORUlzVVVGQlVUQkhMRXRCVFRsQ1NpeFJRVUZUYkVrc1dVRkJXVFJDTEZGQlFWRm5TQ3hQUVVGUFVTeGhRVVYwUTNCSExFMUJRVTF4Unl4aFFVRmxMRU5CUTI1Q2FFWXNUVUZCVFN4RlFVTk9TeXhWUVVGVkxFVkJRMVp6UlN4VlFVRlZMRVZCUTFaNlFpeFhRVUZYTEVWQlExZ3lRaXhqUVVGakxFVkJRMlJETEdOQlFXTXNSVUZEWkM5Q0xFOUJRVkVzVTBGQlUwRXNWMEZEYWtKakxGRkJRVk51Uml4aFFVTlVlVVFzWlVGQlowSXNVMEZCVTBFc1pVRkJaVE5ETEVkQlEzUkRMRTlCUVU5eVJDeFJRVUZSYjBJc1VVRkJVV2xGTEdOQlFXTXNUVUZCVDJoRExFdEJTV2hFTEVsQlFVbEdMR2xDUVVGdFFpeFRRVUZUUVN4dFFrRkRPVUlzU1VGQlNUSkdMRVZCUVZOc1J5eExRVVZpUVN4TFFVRkxhME1zVFVGQlVTeERRVUZGUXl4UlFVRlRia01zUzBGQlMxTXNUVUZCVFZFc1RVRkZia05xUWl4TFFVRkxiMFFzWlVGQmFVSXNWMEZEY0VJc1NVRkJTU3RETEVWQlFWVkVMRVZCUVU5NlJpeE5RVU5xUWpoRkxFVkJRV2RDV1N4RlFVRlJXaXhqUVVONFFrVXNSVUZCYjBKVkxFVkJRVkZXTEd0Q1FVTTFRbkpETEVWQlFXbENLME1zUlVGQlVTOURMR1ZCUTNwQ2FFTXNSVUZCWVN0RkxFVkJRVkZPTEcxQ1FVOXlRblpGTEVWQlFWYzRRaXhGUVVGbExFTkJRelZDVEN4SlFVeG5RaXhUUVVGVGNVUXNXVUZCV1hKRUxFZEJRM0pETEU5QlFVOXRSQ3hGUVVGUE5VVXNVMEZCVjNsQ0xFZEJTM3BDZGtJc1RVRkJUeXRFTEVWQlExQm9SU3hWUVVGWGEwVXNSVUZEV0Zrc1VVRkJVMGdzUlVGQlQwa3NjMEpCWTJ4Q0xFOUJXRWxzUml4SlFVTkdSU3hGUVVGWGJFVXNVVUZCVVc5Q0xGRkJRVkZwUlN4alFVTjZRbkpDTEVWQlEwRXNRMEZEUlhOQ0xGRkJRVkVzUlVGRFVrVXNSMEZCVFhORUxFVkJRVTk2Uml4TlFVRk5VU3hOUVVWeVFrc3NTVUZKUjBFc1IwRkhWSFJDTEV0QlFVdHJSQ3hwUWtGQmJVSXNWMEZEZEVKblJDeEZRVUZQTDBJc1dVRkZTQ3RDTEVWQlFVOTZSaXhOUVVGTmIwUXNVVUZEWm5GRExFVkJRVTk2Uml4TlFVRk5iMFFzVlVGSmFrSTNSQ3hMUVVGTE5rUXNUMEZCVXl4WFFVTmFMRWxCUVVrd1F5eEhRVUZOTEVWQlFVbHFTU3huUWtGQlowSkZMRk5CUVZNd1NDeEhRVU51UTJoR0xFZEJRVmtzUlVGQlNUbERMR1ZCUVdWSkxGTkJRVk13U0N4RlFVRlBla1lzVFVGQlRWTXNWVUZCVjNGR0xFVkJRVWxETEUxQlJYaEZUaXhGUVVGUGVrWXNUVUZCVFhGRkxGRkJRVkV5UWl4SlFVRkpVQ3hGUVVGUmFFWXNSVUZCVjJkR0xFVkJRVTk2Uml4TlFVRk5hMFlzYjBKQlJYcEVUeXhGUVVGUFVTdzBRa0ZCTmtJc1JVRkJTVEZKTEcxQ1FVRnRRbEVzVTBGQlV5dElMRVZCUVVzc1ZVRkJWMHdzUlVGQlQxTXNkVUpCUlROR1ZDeEZRVUZQVlN3d1FrRkJNa0lzUlVGQlNUVkpMRzFDUVVGdFFsRXNVMEZCVXl0SUxFVkJRVXNzVVVGQlUwd3NSVUZCVDFjc2NVSkJSWFpHV0N4RlFVRlBXU3h2UWtGQmNVSXNSVUZCU1RWSkxHMUNRVUZ0UWswc1UwRkJVekJJTEVWQlFVOUtMR1ZCUjNKRk9VWXNTMEZCUzJkRkxFOUJRVk1zVjBGRFdtdERMRVZCUVU5NlJpeE5RVUZOY1VVc1VVRkJVV2xETEU5QlFVOWlMRWRCUlRWQ1FTeEZRVUZQVVN3eVFrRkJNa0pMTEZOQlJXeERZaXhGUVVGUFZTeDVRa0ZCZVVKSExGTkJSV2hEWWl4RlFVRlBXU3h0UWtGQmJVSkRMRk5CUlhSQ1lpeEZRVUZQZWtZc1RVRkJUWE5HTEdOQlEyWkhMRVZCUVU5MlFpeHZRa0ZKV0RORkxFdEJRVXRuUkN4aFFVRmxMRk5CUVZWRUxFZEJRelZDYlVRc1JVRkJUMk1zVlVGQldXcEZMRVZCUVUxQkxFVkJRVWxyUlN4bFFVRnBRbXhGTEVkQlIyaEVMME1zUzBGQlMyMUVMR2RDUVVGclFpeFRRVUZWU2l4SFFVTXZRbTFFTEVWQlFVOW5RaXhWUVVGWmJrVXNSMEZIY2tJdlF5eExRVUZMY1VRc1lVRkJaU3hUUVVGVlRpeEhRVU0xUW0xRUxFVkJRVTl3UlN4UFFVRlRhVUlzUjBGSGJFSXZReXhMUVVGTE9FTXNZVUZCWlN4WFFVdG9RaXhKUVVGSmNVVXNSMEZLVG1wQ0xFVkJRVTh4UXl4VFFVRlRMRU5CUVVWeVFpeFJRVUZSTEVsQlF6RkNLMFFzUlVGQlQyeERMRk5CUlVoclF5eEZRVUZQZWtZc1RVRkJUVzlETEZsQlIyUnpSU3hGUVVGVmFrSXNSVUZCVDNwR0xFOUJRVTl2UXl4VFFVRlRlRU1zVFVGQlRUaEhMRVZCUVZOMlRDeFpRVWx5Ukc5RkxFdEJRVXR6Unl4dlFrRkJjMElzVTBGQlZXTXNSMEZETDBKQkxFVkJRVVV4VEN4VFFVRlhNRXdzUlVGQlJVTXNaMEpCU1dadVFpeEZRVUZQZWtZc1RVRkJUVFpGTEdsQ1FVTm1XU3hGUVVGUGVrWXNUVUZCVFRaRkxHZENRVUZuUWpoQ0xFbEJSMFFzU1VGQk1VSnNRaXhGUVVGUGVrWXNUVUZCVFdFc1ZVRkRaalJGTEVWQlFVOTZSaXhOUVVGTmRVUXNWMEZKYWtKb1JTeExRVUZMTWtjc2MwSkJRWGRDTEZOQlFWVlRMRWRCUTJwRGJFSXNSVUZCVDNwR0xFMUJRVTF0Uml4VlFVRXdRaXhMUVVGa2QwSXNSVUZCUlVVc1UwRkJhMEp3UWl4RlFVRlBja0lzWlVGRGJFUnhRaXhGUVVGUGVrWXNUVUZCVFRKRkxHbENRVU5tWXl4RlFVRlBla1lzVFVGQlRUSkZMR2RDUVVGblFtZERMRWRCUnk5Q2JFSXNSVUZCVDNwR0xFMUJRVTExUkN4WFFVbHFRbWhGTEV0QlFVczJSeXh2UWtGQmMwSXNVMEZCVlU4c1IwRkRMMEpzUWl4RlFVRlBla1lzVFVGQlRXMUdMRlZCUVRCQ0xFdEJRV1IzUWl4RlFVRkZSU3hUUVVGclFuQkNMRVZCUVU5eVFpeGpRVU5zUkhGQ0xFVkJRVTk2Uml4TlFVRk5ORVVzWlVGRFptRXNSVUZCVDNwR0xFMUJRVTAwUlN4alFVRmpLMElzU1VGTGFrTndTQ3hMUVVGTE1FUXNZMEZCWjBJc1YwRkRabWhJTEZGQlFWRTRRaXhWUVVOV01FZ3NSVUZCVHpOQ0xGZEJRVmtzUlVGQlNXeEpMR2RDUVVGblFtMURMR0ZCU1RORGQwSXNTMEZCU3poR0xHRkJRV1VzVjBGRGJFSXNSMEZCUzBrc1JVRkJUM3BHTEUxQlFVMXhSaXhqUVVGcFFra3NSVUZCVDNSRExGbEJRV1Z6UXl4RlFVRlBja0lzWVVGQmFFVXNRMEZKUVN4SlFVRkpWQ3hGUVVGblFqaENMRVZCUVU4M1FpeHRRa0ZEZGtKRExFZEJRWFZDTEVWQlFVbHFTU3huUWtGQlowSnRReXhWUVVGVExFVkJRVWxHTEdkQ1FVRm5Ra1VzVTBGQlV6QklMRWxCUldwR09VSXNTMEZCYTBJc1JVRkJTVFZJTEZkQlFWZG5ReXhUUVVGVE5FWXNSVUZCWlVVc1NVRkRNMFJHTEVWQlFXTk5MRmRCUzNCQ09VVXNUVUZCVFRKSUxGRkJRVlUzU2l4bFFVRmxZeXhSUVVVdlFtNUVMRkZCUVZGdFJDeFJRVUZWYjBJc1RVRkRiRUkwU0N4UFFVRlBiazBzVVVGQlZVRXNVVUZCYVVJaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Y21WaFkzUXRiM1psY214aGVYTXZiR2xpTDAxdlpHRnNMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO2V4cG9ydHMuX19lc01vZHVsZT0hMDt2YXIgX2NsYXNzPXJlcXVpcmUoXCJkb20taGVscGVycy9jbGFzc1wiKSxfY2xhc3MyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzKSxfc3R5bGU9cmVxdWlyZShcImRvbS1oZWxwZXJzL3N0eWxlXCIpLF9zdHlsZTI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3R5bGUpLF9zY3JvbGxiYXJTaXplPXJlcXVpcmUoXCJkb20taGVscGVycy91dGlsL3Njcm9sbGJhclNpemVcIiksX3Njcm9sbGJhclNpemUyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Njcm9sbGJhclNpemUpLF9pc092ZXJmbG93aW5nPXJlcXVpcmUoXCIuL3V0aWxzL2lzT3ZlcmZsb3dpbmdcIiksX2lzT3ZlcmZsb3dpbmcyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzT3ZlcmZsb3dpbmcpLF9tYW5hZ2VBcmlhSGlkZGVuPXJlcXVpcmUoXCIuL3V0aWxzL21hbmFnZUFyaWFIaWRkZW5cIik7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGUsaSl7aWYoIShlIGluc3RhbmNlb2YgaSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX1mdW5jdGlvbiBmaW5kSW5kZXhPZihlLGkpe3ZhciBuPS0xO3JldHVybiBlLnNvbWUoZnVuY3Rpb24oZSxhKXtpZihpKGUsYSkpcmV0dXJuIG49YSwhMH0pLG59ZnVuY3Rpb24gZmluZENvbnRhaW5lcihlLGkpe3JldHVybiBmaW5kSW5kZXhPZihlLGZ1bmN0aW9uKGUpe3JldHVybi0xIT09ZS5tb2RhbHMuaW5kZXhPZihpKX0pfWZ1bmN0aW9uIHNldENvbnRhaW5lclN0eWxlKGUsaSl7dmFyIG49e292ZXJmbG93OlwiaGlkZGVuXCJ9O2Uuc3R5bGU9e292ZXJmbG93Omkuc3R5bGUub3ZlcmZsb3cscGFkZGluZ1JpZ2h0Omkuc3R5bGUucGFkZGluZ1JpZ2h0fSxlLm92ZXJmbG93aW5nJiYobi5wYWRkaW5nUmlnaHQ9cGFyc2VJbnQoKDAsX3N0eWxlMi5kZWZhdWx0KShpLFwicGFkZGluZ1JpZ2h0XCIpfHwwLDEwKSsoMCxfc2Nyb2xsYmFyU2l6ZTIuZGVmYXVsdCkoKStcInB4XCIpLCgwLF9zdHlsZTIuZGVmYXVsdCkoaSxuKX1mdW5jdGlvbiByZW1vdmVDb250YWluZXJTdHlsZShlLGkpe3ZhciBuPWUuc3R5bGU7T2JqZWN0LmtleXMobikuZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gaS5zdHlsZVtlXT1uW2VdfSl9dmFyIE1vZGFsTWFuYWdlcj1mdW5jdGlvbiBNb2RhbE1hbmFnZXIoKXt2YXIgZT10aGlzLGk9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9LG49aS5oaWRlU2libGluZ05vZGVzLGE9dm9pZCAwPT09bnx8bixsPWkuaGFuZGxlQ29udGFpbmVyT3ZlcmZsb3cscz12b2lkIDA9PT1sfHxsO19jbGFzc0NhbGxDaGVjayh0aGlzLE1vZGFsTWFuYWdlciksdGhpcy5hZGQ9ZnVuY3Rpb24oaSxuLGEpe3ZhciBsPWUubW9kYWxzLmluZGV4T2YoaSkscz1lLmNvbnRhaW5lcnMuaW5kZXhPZihuKTtpZigtMSE9PWwpcmV0dXJuIGw7aWYobD1lLm1vZGFscy5sZW5ndGgsZS5tb2RhbHMucHVzaChpKSxlLmhpZGVTaWJsaW5nTm9kZXMmJigwLF9tYW5hZ2VBcmlhSGlkZGVuLmhpZGVTaWJsaW5ncykobixpLm1vdW50Tm9kZSksLTEhPT1zKXJldHVybiBlLmRhdGFbc10ubW9kYWxzLnB1c2goaSksbDt2YXIgcj17bW9kYWxzOltpXSxjbGFzc2VzOmE/YS5zcGxpdCgvXFxzKy8pOltdLG92ZXJmbG93aW5nOigwLF9pc092ZXJmbG93aW5nMi5kZWZhdWx0KShuKX07cmV0dXJuIGUuaGFuZGxlQ29udGFpbmVyT3ZlcmZsb3cmJnNldENvbnRhaW5lclN0eWxlKHIsbiksci5jbGFzc2VzLmZvckVhY2goX2NsYXNzMi5kZWZhdWx0LmFkZENsYXNzLmJpbmQobnVsbCxuKSksZS5jb250YWluZXJzLnB1c2gobiksZS5kYXRhLnB1c2gociksbH0sdGhpcy5yZW1vdmU9ZnVuY3Rpb24oaSl7dmFyIG49ZS5tb2RhbHMuaW5kZXhPZihpKTtpZigtMSE9PW4pe3ZhciBhPWZpbmRDb250YWluZXIoZS5kYXRhLGkpLGw9ZS5kYXRhW2FdLHM9ZS5jb250YWluZXJzW2FdO2wubW9kYWxzLnNwbGljZShsLm1vZGFscy5pbmRleE9mKGkpLDEpLGUubW9kYWxzLnNwbGljZShuLDEpLDA9PT1sLm1vZGFscy5sZW5ndGg/KGwuY2xhc3Nlcy5mb3JFYWNoKF9jbGFzczIuZGVmYXVsdC5yZW1vdmVDbGFzcy5iaW5kKG51bGwscykpLGUuaGFuZGxlQ29udGFpbmVyT3ZlcmZsb3cmJnJlbW92ZUNvbnRhaW5lclN0eWxlKGwscyksZS5oaWRlU2libGluZ05vZGVzJiYoMCxfbWFuYWdlQXJpYUhpZGRlbi5zaG93U2libGluZ3MpKHMsaS5tb3VudE5vZGUpLGUuY29udGFpbmVycy5zcGxpY2UoYSwxKSxlLmRhdGEuc3BsaWNlKGEsMSkpOmUuaGlkZVNpYmxpbmdOb2RlcyYmKDAsX21hbmFnZUFyaWFIaWRkZW4uYXJpYUhpZGRlbikoITEsbC5tb2RhbHNbbC5tb2RhbHMubGVuZ3RoLTFdLm1vdW50Tm9kZSl9fSx0aGlzLmlzVG9wTW9kYWw9ZnVuY3Rpb24oaSl7cmV0dXJuISFlLm1vZGFscy5sZW5ndGgmJmUubW9kYWxzW2UubW9kYWxzLmxlbmd0aC0xXT09PWl9LHRoaXMuaGlkZVNpYmxpbmdOb2Rlcz1hLHRoaXMuaGFuZGxlQ29udGFpbmVyT3ZlcmZsb3c9cyx0aGlzLm1vZGFscz1bXSx0aGlzLmNvbnRhaW5lcnM9W10sdGhpcy5kYXRhPVtdfTtleHBvcnRzLmRlZmF1bHQ9TW9kYWxNYW5hZ2VyLG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrMXZaR0ZzVFdGdVlXZGxjaTVxY3lKZExDSnVZVzFsY3lJNld5SmxlSEJ2Y25Seklpd2lYMTlsYzAxdlpIVnNaU0lzSWw5amJHRnpjeUlzSW5KbGNYVnBjbVVpTENKZlkyeGhjM015SWl3aVgybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ0lzSWw5emRIbHNaU0lzSWw5emRIbHNaVElpTENKZmMyTnliMnhzWW1GeVUybDZaU0lzSWw5elkzSnZiR3hpWVhKVGFYcGxNaUlzSWw5cGMwOTJaWEptYkc5M2FXNW5JaXdpWDJselQzWmxjbVpzYjNkcGJtY3lJaXdpWDIxaGJtRm5aVUZ5YVdGSWFXUmtaVzRpTENKdlltb2lMQ0prWldaaGRXeDBJaXdpWDJOc1lYTnpRMkZzYkVOb1pXTnJJaXdpYVc1emRHRnVZMlVpTENKRGIyNXpkSEoxWTNSdmNpSXNJbFI1Y0dWRmNuSnZjaUlzSW1acGJtUkpibVJsZUU5bUlpd2lZWEp5SWl3aVkySWlMQ0pwWkhnaUxDSnpiMjFsSWl3aVpDSXNJbWtpTENKbWFXNWtRMjl1ZEdGcGJtVnlJaXdpWkdGMFlTSXNJbTF2WkdGc0lpd2liVzlrWVd4eklpd2lhVzVrWlhoUFppSXNJbk5sZEVOdmJuUmhhVzVsY2xOMGVXeGxJaXdpYzNSaGRHVWlMQ0pqYjI1MFlXbHVaWElpTENKemRIbHNaU0lzSW05MlpYSm1iRzkzSWl3aWNHRmtaR2x1WjFKcFoyaDBJaXdpYjNabGNtWnNiM2RwYm1jaUxDSndZWEp6WlVsdWRDSXNJbkpsYlc5MlpVTnZiblJoYVc1bGNsTjBlV3hsSWl3aVgzSmxaaUlzSWs5aWFtVmpkQ0lzSW10bGVYTWlMQ0ptYjNKRllXTm9JaXdpYTJWNUlpd2lUVzlrWVd4TllXNWhaMlZ5SWl3aVgzUm9hWE1pTENKMGFHbHpJaXdpWDNKbFpqSWlMQ0poY21kMWJXVnVkSE1pTENKc1pXNW5kR2dpTENKMWJtUmxabWx1WldRaUxDSmZjbVZtTWlSb2FXUmxVMmxpYkdsdVowNXZaR1VpTENKb2FXUmxVMmxpYkdsdVowNXZaR1Z6SWl3aVgzSmxaaklrYUdGdVpHeGxRMjl1ZEdGcGJtVnlJaXdpYUdGdVpHeGxRMjl1ZEdGcGJtVnlUM1psY21ac2IzY2lMQ0poWkdRaUxDSmpiR0Z6YzA1aGJXVWlMQ0p0YjJSaGJFbGtlQ0lzSW1OdmJuUmhhVzVsY2tsa2VDSXNJbU52Ym5SaGFXNWxjbk1pTENKd2RYTm9JaXdpYUdsa1pWTnBZbXhwYm1keklpd2liVzkxYm5ST2IyUmxJaXdpWTJ4aGMzTmxjeUlzSW5Od2JHbDBJaXdpWVdSa1EyeGhjM01pTENKaWFXNWtJaXdpY21WdGIzWmxJaXdpYzNCc2FXTmxJaXdpY21WdGIzWmxRMnhoYzNNaUxDSnphRzkzVTJsaWJHbHVaM01pTENKaGNtbGhTR2xrWkdWdUlpd2lhWE5VYjNCTmIyUmhiQ0lzSW0xdlpIVnNaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRlFVRXNVVUZCVVVNc1dVRkJZU3hGUVVWeVFpeEpRVUZKUXl4UFFVRlRReXhSUVVGUkxIRkNRVVZxUWtNc1VVRkJWVU1zZFVKQlFYVkNTQ3hSUVVWcVEwa3NUMEZCVTBnc1VVRkJVU3h4UWtGRmFrSkpMRkZCUVZWR0xIVkNRVUYxUWtNc1VVRkZha05GTEdWQlFXbENUQ3hSUVVGUkxHdERRVVY2UWswc1owSkJRV3RDU2l4MVFrRkJkVUpITEdkQ1FVVjZRMFVzWlVGQmFVSlFMRkZCUVZFc2VVSkJSWHBDVVN4blFrRkJhMEpPTEhWQ1FVRjFRa3NzWjBKQlJYcERSU3hyUWtGQmIwSlVMRkZCUVZFc05FSkJSV2hETEZOQlFWTkZMSFZDUVVGMVFsRXNSMEZCVHl4UFFVRlBRU3hIUVVGUFFTeEZRVUZKV2l4WFFVRmhXU3hGUVVGTkxFTkJRVVZETEZGQlFWTkVMRWRCUlhaR0xGTkJRVk5GTEdkQ1FVRm5Ra01zUlVGQlZVTXNSMEZCWlN4TFFVRk5SQ3hoUVVGdlFrTXNSMEZCWjBJc1RVRkJUU3hKUVVGSlF5eFZRVUZWTEhGRFFVVm9TQ3hUUVVGVFF5eFpRVUZaUXl4RlFVRkxReXhIUVVONFFpeEpRVUZKUXl4SFFVRlBMRVZCVDFnc1QwRk9RVVlzUlVGQlNVY3NTMEZCU3l4VFFVRlZReXhGUVVGSFF5eEhRVU53UWl4SFFVRkpTaXhGUVVGSFJ5eEZRVUZIUXl4SFFVVlNMRTlCUkVGSUxFVkJRVTFITEVkQlEwTXNTVUZIU2tnc1JVRkhWQ3hUUVVGVFNTeGpRVUZqUXl4RlFVRk5ReXhIUVVNelFpeFBRVUZQVkN4WlFVRlpVU3hGUVVGTkxGTkJRVlZJTEVkQlEycERMRTlCUVc5RExFbEJRVGRDUVN4RlFVRkZTeXhQUVVGUFF5eFJRVUZSUml4TFFVazFRaXhUUVVGVFJ5eHJRa0ZCYTBKRExFVkJRVTlETEVkQlEyaERMRWxCUVVsRExFVkJRVkVzUTBGQlJVTXNVMEZCVlN4VlFVbDRRa2dzUlVGQlRVVXNUVUZCVVN4RFFVTmFReXhUUVVGVlJpeEZRVUZWUXl4TlFVRk5ReXhUUVVNeFFrTXNZVUZCWTBnc1JVRkJWVU1zVFVGQlRVVXNZMEZITlVKS0xFVkJRVTFMTEdOQlIxSklMRVZCUVUxRkxHRkJRV1ZGTEZWQlFWTXNSVUZCU1M5Q0xGRkJRVkZQTEZOQlFWTnRRaXhGUVVGWExHbENRVUZ0UWl4RlFVRkhMRXRCUVUwc1JVRkJTWGhDTEdkQ1FVRm5Ra3NzVjBGQllTeFBRVWMzU0N4RlFVRkpVQ3hSUVVGUlR5eFRRVUZUYlVJc1JVRkJWME1zUjBGSGJFTXNVMEZCVTBzc2NVSkJRWEZDUXl4RlFVRk5VQ3hIUVVOc1F5eEpRVUZKUXl4RlFVRlJUU3hGUVVGTFRpeE5RVWRxUWs4c1QwRkJUME1zUzBGQlMxSXNSMEZCVDFNc1VVRkJVU3hUUVVGVlF5eEhRVU51UXl4UFFVRlBXQ3hGUVVGVlF5eE5RVUZOVlN4SFFVRlBWaXhGUVVGTlZTeExRVk40UXl4SlFVRkpReXhoUVVGbExGTkJRVk5CTEdWQlF6RkNMRWxCUVVsRExFVkJRVkZETEV0QlJWSkRMRVZCUVZGRExGVkJRVlZETEU5QlFWTXNVVUZCYzBKRExFbEJRV3BDUml4VlFVRlZMRWRCUVcxQ1FTeFZRVUZWTEVkQlFVc3NSMEZETlVWSExFVkJRWGRDU2l4RlFVRk5TeXhwUWtGRE9VSkJMRTlCUVRaRFJpeEpRVUV4UWtNc1IwRkJOa05CTEVWQlEyaEZSU3hGUVVGM1FrNHNSVUZCVFU4c2QwSkJRemxDUVN4UFFVRnZSRW9zU1VGQk1VSkhMRWRCUVRaRFFTeEZRVVV6UlhaRExHZENRVUZuUW1kRExFdEJRVTFHTEdOQlJYUkNSU3hMUVVGTFV5eEpRVUZOTEZOQlFWVTFRaXhGUVVGUFN5eEZRVUZYZDBJc1IwRkRja01zU1VGQlNVTXNSVUZCVjFvc1JVRkJUV3BDTEU5QlFVOURMRkZCUVZGR0xFZEJRMmhESzBJc1JVRkJaV0lzUlVGQlRXTXNWMEZCVnpsQ0xGRkJRVkZITEVkQlJUVkRMRWxCUVd0Q0xFbEJRV1I1UWl4RlFVTkdMRTlCUVU5QkxFVkJWVlFzUjBGUVFVRXNSVUZCVjFvc1JVRkJUV3BDTEU5QlFVOXhRaXhQUVVONFFrb3NSVUZCVFdwQ0xFOUJRVTluUXl4TFFVRkxha01zUjBGRlpHdENMRVZCUVUxUExHMUNRVU5TTEVWQlFVbDZReXhyUWtGQmEwSnJSQ3hqUVVGak4wSXNSVUZCVjB3c1JVRkJUVzFETEZsQlIycERMRWxCUVd4Q1NpeEZRVVZHTEU5QlJFRmlMRVZCUVUxdVFpeExRVUZMWjBNc1IwRkJZemxDTEU5QlFVOW5ReXhMUVVGTGFrTXNSMEZET1VJNFFpeEZRVWRVTEVsQlFVa3ZRaXhGUVVGUExFTkJRMVJGTEU5QlFWRXNRMEZCUTBRc1IwRkZWRzlETEZGQlFWTlFMRVZCUVZsQkxFVkJRVlZSTEUxQlFVMHNUMEZCVXl4SFFVVTVRelZDTEdGQlFXRXNSVUZCU1RGQ0xHZENRVUZuUWtjc1UwRkJVMjFDTEVsQldUVkRMRTlCVkVsaExFVkJRVTFUTEhsQ1FVTlNlRUlzYTBKQlFXdENTaXhGUVVGTlRTeEhRVWN4UWs0c1JVRkJTM0ZETEZGQlFWRnlRaXhSUVVGUmRrTXNVVUZCVVZVc1VVRkJVVzlFTEZOQlFWTkRMRXRCUVVzc1MwRkJUV3hETEVsQlJYcEVZU3hGUVVGTll5eFhRVUZYUXl4TFFVRkxOVUlzUjBGRGRFSmhMRVZCUVUxdVFpeExRVUZMYTBNc1MwRkJTMnhETEVkQlJWUXJRaXhIUVVkVVdDeExRVUZMY1VJc1QwRkJVeXhUUVVGVmVFTXNSMEZEZEVJc1NVRkJTVGhDTEVWQlFWZGFMRVZCUVUxcVFpeFBRVUZQUXl4UlFVRlJSaXhIUVVWd1F5eEpRVUZyUWl4SlFVRmtPRUlzUlVGQlNpeERRVWxCTEVsQlFVbERMRVZCUVdWcVF5eGpRVUZqYjBJc1JVRkJUVzVDTEV0QlFVMURMRWRCUTNwRFJDeEZRVUZQYlVJc1JVRkJUVzVDTEV0QlFVdG5ReXhIUVVOc1FqRkNMRVZCUVZsaExFVkJRVTFqTEZkQlFWZEVMRWRCUldwRGFFTXNSVUZCUzBVc1QwRkJUM2RETEU5QlFVOHhReXhGUVVGTFJTeFBRVUZQUXl4UlFVRlJSaXhIUVVGUkxFZEJSUzlEYTBJc1JVRkJUV3BDTEU5QlFVOTNReXhQUVVGUFdDeEZRVUZWTEVkQlNVZ3NTVUZCZGtJdlFpeEZRVUZMUlN4UFFVRlBjVUlzVVVGRFpIWkNMRVZCUVV0eFF5eFJRVUZSY2tJc1VVRkJVWFpETEZGQlFWRlZMRkZCUVZGM1JDeFpRVUZaU0N4TFFVRkxMRXRCUVUxc1F5eEpRVVY0UkdFc1JVRkJUVk1zZVVKQlExSm9RaXh4UWtGQmNVSmFMRVZCUVUxTkxFZEJSM3BDWVN4RlFVRk5UeXh0UWtGRFVpeEZRVUZKZWtNc2EwSkJRV3RDTWtRc1kwRkJZM1JETEVWQlFWZE1MRVZCUVUxdFF5eFhRVVYyUkdwQ0xFVkJRVTFqTEZkQlFWZFRMRTlCUVU5V0xFVkJRV01zUjBGRGRFTmlMRVZCUVUxdVFpeExRVUZMTUVNc1QwRkJUMVlzUlVGQll5eEpRVU4yUW1Jc1JVRkJUVThzYlVKQlJXWXNSVUZCU1hwRExHdENRVUZyUWpSRUxHRkJRVmtzUlVGQlR6ZERMRVZCUVV0RkxFOUJRVTlHTEVWQlFVdEZMRTlCUVU5eFFpeFBRVUZUTEVkQlFVZGhMR0ZCU1dwR2FFSXNTMEZCU3pCQ0xGZEJRV0VzVTBGQlZUZERMRWRCUXpGQ0xGRkJRVk5yUWl4RlFVRk5ha0lzVDBGQlQzRkNMRkZCUVZWS0xFVkJRVTFxUWl4UFFVRlBhVUlzUlVGQlRXcENMRTlCUVU5eFFpeFBRVUZUTEV0QlFVOTBRaXhIUVVjMVJXMUNMRXRCUVV0TkxHbENRVUZ0UWtFc1JVRkRlRUpPTEV0QlFVdFJMSGRDUVVFd1FrRXNSVUZETDBKU0xFdEJRVXRzUWl4UFFVRlRMRWRCUTJSclFpeExRVUZMWVN4WFFVRmhMRWRCUTJ4Q1lpeExRVUZMY0VJc1MwRkJUeXhKUVVka00wSXNVVUZCVVdNc1VVRkJWU3RDTEdGQlEyeENOa0lzVDBGQlR6RkZMRkZCUVZWQkxGRkJRV2xDSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdOMExXOTJaWEpzWVhsekwyeHBZaTlOYjJSaGJFMWhibUZuWlhJdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwO3ZhciBfZXh0ZW5kcz1PYmplY3QuYXNzaWdufHxmdW5jdGlvbihlKXtmb3IodmFyIHQ9MTt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKXt2YXIgbz1hcmd1bWVudHNbdF07Zm9yKHZhciByIGluIG8pT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8scikmJihlW3JdPW9bcl0pfXJldHVybiBlfSxfcHJvcFR5cGVzPXJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpLF9wcm9wVHlwZXMyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyksX2VsZW1lbnRUeXBlPXJlcXVpcmUoXCJwcm9wLXR5cGVzLWV4dHJhL2xpYi9lbGVtZW50VHlwZVwiKSxfZWxlbWVudFR5cGUyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2VsZW1lbnRUeXBlKSxfcmVhY3Q9cmVxdWlyZShcInJlYWN0XCIpLF9yZWFjdDI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpLF9Qb3J0YWw9cmVxdWlyZShcIi4vUG9ydGFsXCIpLF9Qb3J0YWwyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1BvcnRhbCksX1Bvc2l0aW9uPXJlcXVpcmUoXCIuL1Bvc2l0aW9uXCIpLF9Qb3NpdGlvbjI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUG9zaXRpb24pLF9Sb290Q2xvc2VXcmFwcGVyPXJlcXVpcmUoXCIuL1Jvb3RDbG9zZVdyYXBwZXJcIiksX1Jvb3RDbG9zZVdyYXBwZXIyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1Jvb3RDbG9zZVdyYXBwZXIpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fWZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhlLHQpe3ZhciBvPXt9O2Zvcih2YXIgciBpbiBlKXQuaW5kZXhPZihyKT49MHx8T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUscikmJihvW3JdPWVbcl0pO3JldHVybiBvfWZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oZSx0KXtpZighZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIXR8fFwib2JqZWN0XCIhPXR5cGVvZiB0JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0P2U6dH1mdW5jdGlvbiBfaW5oZXJpdHMoZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0JiZudWxsIT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2YgdCk7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksdCYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YoZSx0KTplLl9fcHJvdG9fXz10KX12YXIgT3ZlcmxheT1mdW5jdGlvbihlKXtmdW5jdGlvbiBPdmVybGF5KHQsbyl7X2NsYXNzQ2FsbENoZWNrKHRoaXMsT3ZlcmxheSk7dmFyIHI9X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcyxlLmNhbGwodGhpcyx0LG8pKTtyZXR1cm4gci5oYW5kbGVIaWRkZW49ZnVuY3Rpb24oKXt2YXIgZTsoci5zZXRTdGF0ZSh7ZXhpdGVkOiEwfSksci5wcm9wcy5vbkV4aXRlZCkmJihlPXIucHJvcHMpLm9uRXhpdGVkLmFwcGx5KGUsYXJndW1lbnRzKX0sci5zdGF0ZT17ZXhpdGVkOiF0LnNob3d9LHIub25IaWRkZW5MaXN0ZW5lcj1yLmhhbmRsZUhpZGRlbi5iaW5kKHIpLHJ9cmV0dXJuIF9pbmhlcml0cyhPdmVybGF5LGUpLE92ZXJsYXkucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM9ZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhlKXtlLnNob3c/dGhpcy5zZXRTdGF0ZSh7ZXhpdGVkOiExfSk6ZS50cmFuc2l0aW9ufHx0aGlzLnNldFN0YXRlKHtleGl0ZWQ6ITB9KX0sT3ZlcmxheS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uIHJlbmRlcigpe3ZhciBlPXRoaXMucHJvcHMsdD1lLmNvbnRhaW5lcixvPWUuY29udGFpbmVyUGFkZGluZyxyPWUudGFyZ2V0LG49ZS5wbGFjZW1lbnQsaT1lLnNob3VsZFVwZGF0ZVBvc2l0aW9uLGE9ZS5yb290Q2xvc2UscD1lLmNoaWxkcmVuLGw9ZS50cmFuc2l0aW9uLHM9X29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKGUsW1wiY29udGFpbmVyXCIsXCJjb250YWluZXJQYWRkaW5nXCIsXCJ0YXJnZXRcIixcInBsYWNlbWVudFwiLFwic2hvdWxkVXBkYXRlUG9zaXRpb25cIixcInJvb3RDbG9zZVwiLFwiY2hpbGRyZW5cIixcInRyYW5zaXRpb25cIl0pO2lmKCEocy5zaG93fHxsJiYhdGhpcy5zdGF0ZS5leGl0ZWQpKXJldHVybiBudWxsO3ZhciB1PXA7aWYodT1fcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfUG9zaXRpb24yLmRlZmF1bHQse2NvbnRhaW5lcjp0LGNvbnRhaW5lclBhZGRpbmc6byx0YXJnZXQ6cixwbGFjZW1lbnQ6bixzaG91bGRVcGRhdGVQb3NpdGlvbjppfSx1KSxsKXt2YXIgYz1zLm9uRXhpdCxkPXMub25FeGl0aW5nLGY9cy5vbkVudGVyLF89cy5vbkVudGVyaW5nLHk9cy5vbkVudGVyZWQ7dT1fcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChsLHtpbjpzLnNob3csYXBwZWFyOiEwLG9uRXhpdDpjLG9uRXhpdGluZzpkLG9uRXhpdGVkOnRoaXMub25IaWRkZW5MaXN0ZW5lcixvbkVudGVyOmYsb25FbnRlcmluZzpfLG9uRW50ZXJlZDp5fSx1KX1yZXR1cm4gYSYmKHU9X3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1Jvb3RDbG9zZVdyYXBwZXIyLmRlZmF1bHQse29uUm9vdENsb3NlOnMub25IaWRlfSx1KSksX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1BvcnRhbDIuZGVmYXVsdCx7Y29udGFpbmVyOnR9LHUpfSxPdmVybGF5fShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtPdmVybGF5LnByb3BUeXBlcz1fZXh0ZW5kcyh7fSxfUG9ydGFsMi5kZWZhdWx0LnByb3BUeXBlcyxfUG9zaXRpb24yLmRlZmF1bHQucHJvcFR5cGVzLHtzaG93Ol9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxyb290Q2xvc2U6X3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLG9uSGlkZTpmdW5jdGlvbiBvbkhpZGUoZSl7dmFyIHQ9X3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jO2Uucm9vdENsb3NlJiYodD10LmlzUmVxdWlyZWQpO2Zvcih2YXIgbz1hcmd1bWVudHMubGVuZ3RoLHI9QXJyYXkobz4xP28tMTowKSxuPTE7bjxvO24rKylyW24tMV09YXJndW1lbnRzW25dO3JldHVybiB0LmFwcGx5KHZvaWQgMCxbZV0uY29uY2F0KHIpKX0sdHJhbnNpdGlvbjpfZWxlbWVudFR5cGUyLmRlZmF1bHQsb25FbnRlcjpfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsb25FbnRlcmluZzpfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsb25FbnRlcmVkOl9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxvbkV4aXQ6X3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLG9uRXhpdGluZzpfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsb25FeGl0ZWQ6X3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jfSksZXhwb3J0cy5kZWZhdWx0PU92ZXJsYXksbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWs5MlpYSnNZWGt1YW5NaVhTd2libUZ0WlhNaU9sc2laWGh3YjNKMGN5SXNJbDlmWlhOTmIyUjFiR1VpTENKZlpYaDBaVzVrY3lJc0lrOWlhbVZqZENJc0ltRnpjMmxuYmlJc0luUmhjbWRsZENJc0lta2lMQ0poY21kMWJXVnVkSE1pTENKc1pXNW5kR2dpTENKemIzVnlZMlVpTENKclpYa2lMQ0p3Y205MGIzUjVjR1VpTENKb1lYTlBkMjVRY205d1pYSjBlU0lzSW1OaGJHd2lMQ0pmY0hKdmNGUjVjR1Z6SWl3aWNtVnhkV2x5WlNJc0lsOXdjbTl3Vkhsd1pYTXlJaXdpWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDSXNJbDlsYkdWdFpXNTBWSGx3WlNJc0lsOWxiR1Z0Wlc1MFZIbHdaVElpTENKZmNtVmhZM1FpTENKZmNtVmhZM1F5SWl3aVgxQnZjblJoYkNJc0lsOVFiM0owWVd3eUlpd2lYMUJ2YzJsMGFXOXVJaXdpWDFCdmMybDBhVzl1TWlJc0lsOVNiMjkwUTJ4dmMyVlhjbUZ3Y0dWeUlpd2lYMUp2YjNSRGJHOXpaVmR5WVhCd1pYSXlJaXdpYjJKcUlpd2laR1ZtWVhWc2RDSXNJbDl2WW1wbFkzUlhhWFJvYjNWMFVISnZjR1Z5ZEdsbGN5SXNJbXRsZVhNaUxDSnBibVJsZUU5bUlpd2lYMk5zWVhOelEyRnNiRU5vWldOcklpd2lhVzV6ZEdGdVkyVWlMQ0pEYjI1emRISjFZM1J2Y2lJc0lsUjVjR1ZGY25KdmNpSXNJbDl3YjNOemFXSnNaVU52Ym5OMGNuVmpkRzl5VW1WMGRYSnVJaXdpYzJWc1ppSXNJbEpsWm1WeVpXNWpaVVZ5Y205eUlpd2lYMmx1YUdWeWFYUnpJaXdpYzNWaVEyeGhjM01pTENKemRYQmxja05zWVhOeklpd2lZM0psWVhSbElpd2lZMjl1YzNSeWRXTjBiM0lpTENKMllXeDFaU0lzSW1WdWRXMWxjbUZpYkdVaUxDSjNjbWwwWVdKc1pTSXNJbU52Ym1acFozVnlZV0pzWlNJc0luTmxkRkJ5YjNSdmRIbHdaVTltSWl3aVgxOXdjbTkwYjE5Zklpd2lUM1psY214aGVTSXNJbDlTWldGamRDUkRiMjF3YjI1bGJuUWlMQ0p3Y205d2N5SXNJbU52Ym5SbGVIUWlMQ0owYUdseklpd2lYM1JvYVhNaUxDSm9ZVzVrYkdWSWFXUmtaVzRpTENKZmRHaHBjeVJ3Y205d2N5SXNJbk5sZEZOMFlYUmxJaXdpWlhocGRHVmtJaXdpYjI1RmVHbDBaV1FpTENKaGNIQnNlU0lzSW5OMFlYUmxJaXdpYzJodmR5SXNJbTl1U0dsa1pHVnVUR2x6ZEdWdVpYSWlMQ0ppYVc1a0lpd2lZMjl0Y0c5dVpXNTBWMmxzYkZKbFkyVnBkbVZRY205d2N5SXNJbTVsZUhSUWNtOXdjeUlzSW5SeVlXNXphWFJwYjI0aUxDSnlaVzVrWlhJaUxDSmZjSEp2Y0hNaUxDSmpiMjUwWVdsdVpYSWlMQ0pqYjI1MFlXbHVaWEpRWVdSa2FXNW5JaXdpY0d4aFkyVnRaVzUwSWl3aWMyaHZkV3hrVlhCa1lYUmxVRzl6YVhScGIyNGlMQ0p5YjI5MFEyeHZjMlVpTENKamFHbHNaSEpsYmlJc0lsUnlZVzV6YVhScGIyNGlMQ0pqYUdsc1pDSXNJbU55WldGMFpVVnNaVzFsYm5RaUxDSnZia1Y0YVhRaUxDSnZia1Y0YVhScGJtY2lMQ0p2YmtWdWRHVnlJaXdpYjI1RmJuUmxjbWx1WnlJc0ltOXVSVzUwWlhKbFpDSXNJbWx1SWl3aVlYQndaV0Z5SWl3aWIyNVNiMjkwUTJ4dmMyVWlMQ0p2YmtocFpHVWlMQ0pEYjIxd2IyNWxiblFpTENKd2NtOXdWSGx3WlhNaUxDSmliMjlzSWl3aWNISnZjRlI1Y0dVaUxDSm1kVzVqSWl3aWFYTlNaWEYxYVhKbFpDSXNJbDlzWlc0aUxDSmhjbWR6SWl3aVFYSnlZWGtpTENKZmEyVjVJaXdpZFc1a1pXWnBibVZrSWl3aVkyOXVZMkYwSWl3aWJXOWtkV3hsSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4aFFVVkJRU3hSUVVGUlF5eFpRVUZoTEVWQlJYSkNMRWxCUVVsRExGTkJRVmRETEU5QlFVOURMRkZCUVZVc1UwRkJWVU1zUjBGQlZTeEpRVUZMTEVsQlFVbERMRVZCUVVrc1JVRkJSMEVzUlVGQlNVTXNWVUZCVlVNc1QwRkJVVVlzU1VGQlN5eERRVUZGTEVsQlFVbEhMRVZCUVZOR0xGVkJRVlZFTEVkQlFVa3NTVUZCU3l4SlFVRkpTU3hMUVVGUFJDeEZRVUZqVGl4UFFVRlBVU3hWUVVGVlF5eGxRVUZsUXl4TFFVRkxTaXhGUVVGUlF5eExRVUZSVEN4RlFVRlBTeXhIUVVGUFJDeEZRVUZQUXl4SlFVRlpMRTlCUVU5TUxFZEJSVzVRVXl4WFFVRmhReXhSUVVGUkxHTkJSWEpDUXl4WlFVRmpReXgxUWtGQmRVSklMRmxCUlhKRFNTeGhRVUZsU0N4UlFVRlJMRzlEUVVWMlFra3NZMEZCWjBKR0xIVkNRVUYxUWtNc1kwRkZka05GTEU5QlFWTk1MRkZCUVZFc1UwRkZha0pOTEZGQlFWVktMSFZDUVVGMVFrY3NVVUZGYWtORkxGRkJRVlZRTEZGQlFWRXNXVUZGYkVKUkxGTkJRVmRPTEhWQ1FVRjFRa3NzVTBGRmJFTkZMRlZCUVZsVUxGRkJRVkVzWTBGRmNFSlZMRmRCUVdGU0xIVkNRVUYxUWs4c1YwRkZjRU5GTEd0Q1FVRnZRbGdzVVVGQlVTeHpRa0ZGTlVKWkxHMUNRVUZ4UWxZc2RVSkJRWFZDVXl4dFFrRkZhRVFzVTBGQlUxUXNkVUpCUVhWQ1Z5eEhRVUZQTEU5QlFVOUJMRWRCUVU5QkxFVkJRVWt6UWl4WFFVRmhNa0lzUlVGQlRTeERRVUZGUXl4UlFVRlRSQ3hIUVVWMlJpeFRRVUZUUlN4NVFrRkJlVUpHTEVWQlFVdEhMRWRCUVZFc1NVRkJTVEZDTEVWQlFWTXNSMEZCU1N4SlFVRkxMRWxCUVVsRExFdEJRVXR6UWl4RlFVRlhSeXhGUVVGTFF5eFJRVUZSTVVJc1NVRkJUU3hIUVVGclFrZ3NUMEZCVDFFc1ZVRkJWVU1zWlVGQlpVTXNTMEZCUzJVc1JVRkJTM1JDTEV0QlFXTkVMRVZCUVU5RExFZEJRVXR6UWl4RlFVRkpkRUlzU1VGQlRTeFBRVUZQUkN4RlFVVnVUaXhUUVVGVE5FSXNaMEpCUVdkQ1F5eEZRVUZWUXl4SFFVRmxMRXRCUVUxRUxHRkJRVzlDUXl4SFFVRm5RaXhOUVVGTkxFbEJRVWxETEZWQlFWVXNjVU5CUldoSUxGTkJRVk5ETERKQ1FVRXlRa01zUlVGQlRYcENMRWRCUVZFc1NVRkJTM2xDTEVWQlFWRXNUVUZCVFN4SlFVRkpReXhsUVVGbExEWkVRVUZuUlN4UFFVRlBNVUlzUjBGQmVVSXNhVUpCUVZSQkxFZEJRWEZETEcxQ1FVRlVRU3hGUVVFNFFubENMRVZCUVZCNlFpeEZRVVZzVHl4VFFVRlRNa0lzVlVGQlZVTXNSVUZCVlVNc1IwRkJZeXhIUVVFd1FpeHRRa0ZCWmtFc1IwRkJORU1zVDBGQlprRXNSVUZCZFVJc1RVRkJUU3hKUVVGSlRpeFZRVUZWTEd0RlFVRnZSVTBzUjBGQlpVUXNSVUZCVXpsQ0xGVkJRVmxTTEU5QlFVOTNReXhQUVVGUFJDeEhRVUZqUVN4RlFVRlhMMElzVlVGQlZ5eERRVUZGYVVNc1dVRkJZU3hEUVVGRlF5eE5RVUZQU2l4RlFVRlZTeXhaUVVGWkxFVkJRVTlETEZWQlFWVXNSVUZCVFVNc1kwRkJZeXhMUVVGbFRpeEpRVUZaZGtNc1QwRkJUemhETEdWQlFXbENPVU1zVDBGQlR6aERMR1ZCUVdWU0xFVkJRVlZETEVkQlFXTkVMRVZCUVZOVExGVkJRVmxTTEVkQlMycGxMRWxCUVVsVExGRkJRVlVzVTBGQlZVTXNSMEZIZEVJc1UwRkJVMFFzVVVGQlVVVXNSVUZCVDBNc1IwRkRkRUp5UWl4blFrRkJaMEp6UWl4TFFVRk5TaXhUUVVWMFFpeEpRVUZKU3l4RlFVRlJia0lzTWtKQlFUSkNhMElzUzBGQlRVZ3NSVUZCYVVKMlF5eExRVUZMTUVNc1MwRkJUVVlzUlVGQlQwTXNTVUZqYUVZc1QwRmFRVVVzUlVGQlRVTXNZVUZCWlN4WFFVbHFRaXhKUVVGSlF5eEhRVWhPUml4RlFVRk5SeXhUUVVGVExFTkJRVVZETEZGQlFWRXNTVUZGY2tKS0xFVkJRVTFJTEUxQlFVMVJMRmxCUjJKSUxFVkJRV05HTEVWQlFVMUlMRTlCUVU5UkxGTkJRVk5ETEUxQlFVMUtMRVZCUVdGdVJDeFpRVWsxUkdsRUxFVkJRVTFQTEUxQlFWRXNRMEZCUlVnc1VVRkJVMUFzUlVGQlRWY3NUVUZETDBKU0xFVkJRVTFUTEdsQ1FVRnRRbFFzUlVGQlRVTXNZVUZCWVZNc1MwRkJTMVlzUjBGRE1VTkJMRVZCY1VaVUxFOUJlRWRCYUVJc1ZVRkJWVmNzVVVGQlUwTXNSMEZ6UW01Q1JDeFJRVUZSZUVNc1ZVRkJWWGRFTERCQ1FVRTBRaXhUUVVGVFFTd3dRa0ZCTUVKRExFZEJRek5GUVN4RlFVRlZTaXhMUVVOYVZDeExRVUZMU1N4VFFVRlRMRU5CUVVWRExGRkJRVkVzU1VGRFpGRXNSVUZCVlVNc1dVRkZjRUprTEV0QlFVdEpMRk5CUVZNc1EwRkJSVU1zVVVGQlVTeExRVWsxUWxRc1VVRkJVWGhETEZWQlFWVXlSQ3hQUVVGVExGTkJRVk5CTEZOQlEyeERMRWxCUVVsRExFVkJRVk5vUWl4TFFVRkxSaXhOUVVOa2JVSXNSVUZCV1VRc1JVRkJUME1zVlVGRGJrSkRMRVZCUVcxQ1JpeEZRVUZQUlN4cFFrRkRNVUp3UlN4RlFVRlRhMFVzUlVGQlQyeEZMRTlCUTJoQ2NVVXNSVUZCV1Vnc1JVRkJUMGNzVlVGRGJrSkRMRVZCUVhWQ1NpeEZRVUZQU1N4eFFrRkRPVUpETEVWQlFWbE1MRVZCUVU5TExGVkJRMjVDUXl4RlFVRlhUaXhGUVVGUFRTeFRRVU5zUWtNc1JVRkJZVkFzUlVGQlQwWXNWMEZEY0VKb1FpeEZRVUZSZGtJc2VVSkJRWGxDZVVNc1JVRkJVU3hEUVVGRExGbEJRV0VzYlVKQlFXOUNMRk5CUVZVc1dVRkJZU3gxUWtGQmQwSXNXVUZCWVN4WFFVRlpMR1ZCVFhaS0xFdEJSRzFDYkVJc1JVRkJUVmNzVFVGQlVXTXNTVUZCWlhaQ0xFdEJRVXRSTEUxQlFVMUlMRkZCUjNwRUxFOUJRVThzUzBGSFZDeEpRVUZKYlVJc1JVRkJVVVlzUlVGVldpeEhRVTVCUlN4RlFVRlJNVVFzVVVGQlVWRXNVVUZCVVcxRUxHTkJRM1JDZGtRc1YwRkJWMGtzVVVGRFdDeERRVUZGTWtNc1ZVRkJWMEVzUlVGQlYwTXNhVUpCUVd0Q1FTeEZRVUZyUW5CRkxFOUJRVkZCTEVWQlFWRnhSU3hWUVVGWFFTeEZRVUZYUXl4eFFrRkJjMEpCTEVkQlEzaElTU3hIUVVkRlJDeEZRVUZaTEVOQlEyUXNTVUZCU1Vjc1JVRkJVelZDTEVWQlFVMDBRaXhQUVVObVF5eEZRVUZaTjBJc1JVRkJUVFpDTEZWQlEyeENReXhGUVVGVk9VSXNSVUZCVFRoQ0xGRkJRMmhDUXl4RlFVRmhMMElzUlVGQlRTdENMRmRCUTI1Q1F5eEZRVUZaYUVNc1JVRkJUV2RETEZWQlMzUkNUaXhGUVVGUk1VUXNVVUZCVVZFc1VVRkJVVzFFTEdOQlEzUkNSaXhGUVVOQkxFTkJRMFZSTEVkQlFVMXFReXhGUVVGTlZ5eExRVU5hZFVJc1VVRkJVU3hGUVVOU1RpeFBRVUZSUVN4RlFVTlNReXhWUVVGWFFTeEZRVU5ZY2tJc1UwRkJWVTRzUzBGQlMxVXNhVUpCUTJaclFpeFJRVUZUUVN4RlFVTlVReXhYUVVGWlFTeEZRVU5hUXl4VlFVRlhRU3hIUVVWaVRpeEhRV0ZLTEU5QlVrbElMRWxCUTBaSExFVkJRVkV4UkN4UlFVRlJVU3hSUVVGUmJVUXNZMEZEZEVKeVJDeHRRa0ZCYlVKRkxGRkJRMjVDTEVOQlFVVXlSQ3haUVVGaGJrTXNSVUZCVFc5RExGRkJRM0pDVml4SlFVbEhNVVFzVVVGQlVWRXNVVUZCVVcxRUxHTkJRM0pDZWtRc1UwRkJVMDBzVVVGRFZDeERRVUZGTWtNc1ZVRkJWMEVzUjBGRFlrOHNTVUZKUnpWQ0xGRkJla2RMTEVOQk1FZGFPVUlzVVVGQlVWRXNVVUZCVVRaRUxGZEJSV3hDZGtNc1VVRkJVWGRETEZWQlFWbDZSaXhUUVVGVExFZEJRVWx4UWl4VFFVRlRUU3hSUVVGUk9FUXNWVUZCVjJ4RkxGZEJRVmRKTEZGQlFWRTRSQ3hWUVVGWExFTkJTM3BHTTBJc1MwRkJUV2hFTEZsQlFWbGhMRkZCUVZFclJDeExRVXN4UW1oQ0xGVkJRVmMxUkN4WlFVRlpZU3hSUVVGUkswUXNTMEZUTDBKSUxFOUJRVkVzVTBGQlUwRXNUMEZCVDNCRExFZEJRM1JDTEVsQlFVbDNReXhGUVVGWE4wVXNXVUZCV1dFc1VVRkJVV2xGTEV0QlF5OUNla01zUlVGQlRYVkNMRmxCUTFKcFFpeEZRVUZYUVN4RlFVRlRSU3haUVVkMFFpeEpRVUZMTEVsQlFVbERMRVZCUVU5NlJpeFZRVUZWUXl4UFFVRlJlVVlzUlVGQlQwTXNUVUZCVFVZc1JVRkJUeXhGUVVGSlFTeEZRVUZQTEVWQlFVa3NSMEZCU1Vjc1JVRkJUeXhGUVVGSFFTeEZRVUZQU0N4RlFVRk5SeXhKUVVNNVJrWXNSVUZCUzBVc1JVRkJUeXhIUVVGTE5VWXNWVUZCVlRSR0xFZEJSemRDTEU5QlFVOU9MRVZCUVZNdlFpeFhRVUZOYzBNc1JVRkJWeXhEUVVGREwwTXNSMEZCVDJkRUxFOUJRVTlLTEV0QlVXeEVOVUlzVjBGQldXeEVMR05CUVdOVkxGRkJTekZDYzBRc1VVRkJVMjVGTEZsQlFWbGhMRkZCUVZGcFJTeExRVXMzUWxZc1YwRkJXWEJGTEZsQlFWbGhMRkZCUVZGcFJTeExRVXRvUTFRc1ZVRkJWM0pGTEZsQlFWbGhMRkZCUVZGcFJTeExRVXN2UW1Jc1QwRkJVV3BGTEZsQlFWbGhMRkZCUVZGcFJTeExRVXMxUWxvc1ZVRkJWMnhGTEZsQlFWbGhMRkZCUVZGcFJTeExRVXN2UW1wRExGTkJRVlUzUXl4WlFVRlpZU3hSUVVGUmFVVXNUMEZIYUVNNVJpeFJRVUZSTmtJc1VVRkJWWE5DTEZGQlEyeENiVVFzVDBGQlQzUkhMRkZCUVZWQkxGRkJRV2xDSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdOMExXOTJaWEpzWVhsekwyeHBZaTlQZG1WeWJHRjVMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO2V4cG9ydHMuX19lc01vZHVsZT0hMDt2YXIgX3Byb3BUeXBlcz1yZXF1aXJlKFwicHJvcC10eXBlc1wiKSxfcHJvcFR5cGVzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpLF9jb21wb25lbnRPckVsZW1lbnQ9cmVxdWlyZShcInByb3AtdHlwZXMtZXh0cmEvbGliL2NvbXBvbmVudE9yRWxlbWVudFwiKSxfY29tcG9uZW50T3JFbGVtZW50Mj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb21wb25lbnRPckVsZW1lbnQpLF9yZWFjdD1yZXF1aXJlKFwicmVhY3RcIiksX3JlYWN0Mj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCksX3JlYWN0RG9tPXJlcXVpcmUoXCJyZWFjdC1kb21cIiksX3JlYWN0RG9tMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSksX2dldENvbnRhaW5lcj1yZXF1aXJlKFwiLi91dGlscy9nZXRDb250YWluZXJcIiksX2dldENvbnRhaW5lcjI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0Q29udGFpbmVyKSxfb3duZXJEb2N1bWVudD1yZXF1aXJlKFwiLi91dGlscy9vd25lckRvY3VtZW50XCIpLF9vd25lckRvY3VtZW50Mj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vd25lckRvY3VtZW50KSxfTGVnYWN5UG9ydGFsPXJlcXVpcmUoXCIuL0xlZ2FjeVBvcnRhbFwiKSxfTGVnYWN5UG9ydGFsMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9MZWdhY3lQb3J0YWwpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fWZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oZSx0KXtpZighZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIXR8fFwib2JqZWN0XCIhPXR5cGVvZiB0JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0P2U6dH1mdW5jdGlvbiBfaW5oZXJpdHMoZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0JiZudWxsIT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2YgdCk7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksdCYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YoZSx0KTplLl9fcHJvdG9fXz10KX12YXIgUG9ydGFsPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIFBvcnRhbCgpe3ZhciB0LG87X2NsYXNzQ2FsbENoZWNrKHRoaXMsUG9ydGFsKTtmb3IodmFyIHI9YXJndW1lbnRzLmxlbmd0aCxuPUFycmF5KHIpLGE9MDthPHI7YSsrKW5bYV09YXJndW1lbnRzW2FdO3JldHVybiB0PW89X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcyxlLmNhbGwuYXBwbHkoZSxbdGhpc10uY29uY2F0KG4pKSksby5zZXRDb250YWluZXI9ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06by5wcm9wcztvLl9wb3J0YWxDb250YWluZXJOb2RlPSgwLF9nZXRDb250YWluZXIyLmRlZmF1bHQpKGUuY29udGFpbmVyLCgwLF9vd25lckRvY3VtZW50Mi5kZWZhdWx0KShvKS5ib2R5KX0sby5nZXRNb3VudE5vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gby5fcG9ydGFsQ29udGFpbmVyTm9kZX0sX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4obyx0KX1yZXR1cm4gX2luaGVyaXRzKFBvcnRhbCxlKSxQb3J0YWwucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50PWZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCl7dGhpcy5zZXRDb250YWluZXIoKSx0aGlzLmZvcmNlVXBkYXRlKHRoaXMucHJvcHMub25SZW5kZXJlZCl9LFBvcnRhbC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcz1mdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGUpe2UuY29udGFpbmVyIT09dGhpcy5wcm9wcy5jb250YWluZXImJnRoaXMuc2V0Q29udGFpbmVyKGUpfSxQb3J0YWwucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50PWZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCl7dGhpcy5fcG9ydGFsQ29udGFpbmVyTm9kZT1udWxsfSxQb3J0YWwucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXtyZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbiYmdGhpcy5fcG9ydGFsQ29udGFpbmVyTm9kZT9fcmVhY3REb20yLmRlZmF1bHQuY3JlYXRlUG9ydGFsKHRoaXMucHJvcHMuY2hpbGRyZW4sdGhpcy5fcG9ydGFsQ29udGFpbmVyTm9kZSk6bnVsbH0sUG9ydGFsfShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtQb3J0YWwuZGlzcGxheU5hbWU9XCJQb3J0YWxcIixQb3J0YWwucHJvcFR5cGVzPXtjb250YWluZXI6X3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoW19jb21wb25lbnRPckVsZW1lbnQyLmRlZmF1bHQsX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jXSksb25SZW5kZXJlZDpfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmN9LGV4cG9ydHMuZGVmYXVsdD1fcmVhY3REb20yLmRlZmF1bHQuY3JlYXRlUG9ydGFsP1BvcnRhbDpfTGVnYWN5UG9ydGFsMi5kZWZhdWx0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsQnZjblJoYkM1cWN5SmRMQ0p1WVcxbGN5STZXeUpsZUhCdmNuUnpJaXdpWDE5bGMwMXZaSFZzWlNJc0lsOXdjbTl3Vkhsd1pYTWlMQ0p5WlhGMWFYSmxJaXdpWDNCeWIzQlVlWEJsY3pJaUxDSmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwSWl3aVgyTnZiWEJ2Ym1WdWRFOXlSV3hsYldWdWRDSXNJbDlqYjIxd2IyNWxiblJQY2tWc1pXMWxiblF5SWl3aVgzSmxZV04wSWl3aVgzSmxZV04wTWlJc0lsOXlaV0ZqZEVSdmJTSXNJbDl5WldGamRFUnZiVElpTENKZloyVjBRMjl1ZEdGcGJtVnlJaXdpWDJkbGRFTnZiblJoYVc1bGNqSWlMQ0pmYjNkdVpYSkViMk4xYldWdWRDSXNJbDl2ZDI1bGNrUnZZM1Z0Wlc1ME1pSXNJbDlNWldkaFkzbFFiM0owWVd3aUxDSmZUR1ZuWVdONVVHOXlkR0ZzTWlJc0ltOWlhaUlzSW1SbFptRjFiSFFpTENKZlkyeGhjM05EWVd4c1EyaGxZMnNpTENKcGJuTjBZVzVqWlNJc0lrTnZibk4wY25WamRHOXlJaXdpVkhsd1pVVnljbTl5SWl3aVgzQnZjM05wWW14bFEyOXVjM1J5ZFdOMGIzSlNaWFIxY200aUxDSnpaV3htSWl3aVkyRnNiQ0lzSWxKbFptVnlaVzVqWlVWeWNtOXlJaXdpWDJsdWFHVnlhWFJ6SWl3aWMzVmlRMnhoYzNNaUxDSnpkWEJsY2tOc1lYTnpJaXdpY0hKdmRHOTBlWEJsSWl3aVQySnFaV04wSWl3aVkzSmxZWFJsSWl3aVkyOXVjM1J5ZFdOMGIzSWlMQ0oyWVd4MVpTSXNJbVZ1ZFcxbGNtRmliR1VpTENKM2NtbDBZV0pzWlNJc0ltTnZibVpwWjNWeVlXSnNaU0lzSW5ObGRGQnliM1J2ZEhsd1pVOW1JaXdpWDE5d2NtOTBiMTlmSWl3aVVHOXlkR0ZzSWl3aVgxSmxZV04wSkVOdmJYQnZibVZ1ZENJc0lsOTBaVzF3SWl3aVgzUm9hWE1pTENKMGFHbHpJaXdpWDJ4bGJpSXNJbUZ5WjNWdFpXNTBjeUlzSW14bGJtZDBhQ0lzSW1GeVozTWlMQ0pCY25KaGVTSXNJbDlyWlhraUxDSmhjSEJzZVNJc0ltTnZibU5oZENJc0luTmxkRU52Ym5SaGFXNWxjaUlzSW5CeWIzQnpJaXdpZFc1a1pXWnBibVZrSWl3aVgzQnZjblJoYkVOdmJuUmhhVzVsY2s1dlpHVWlMQ0pqYjI1MFlXbHVaWElpTENKaWIyUjVJaXdpWjJWMFRXOTFiblJPYjJSbElpd2lZMjl0Y0c5dVpXNTBSR2xrVFc5MWJuUWlMQ0ptYjNKalpWVndaR0YwWlNJc0ltOXVVbVZ1WkdWeVpXUWlMQ0pqYjIxd2IyNWxiblJYYVd4c1VtVmpaV2wyWlZCeWIzQnpJaXdpYm1WNGRGQnliM0J6SWl3aVkyOXRjRzl1Wlc1MFYybHNiRlZ1Ylc5MWJuUWlMQ0p5Wlc1a1pYSWlMQ0pqYUdsc1pISmxiaUlzSW1OeVpXRjBaVkJ2Y25SaGJDSXNJa052YlhCdmJtVnVkQ0lzSW1ScGMzQnNZWGxPWVcxbElpd2ljSEp2Y0ZSNWNHVnpJaXdpYjI1bFQyWlVlWEJsSWl3aVpuVnVZeUlzSW0xdlpIVnNaU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRlFVRXNVVUZCVVVNc1dVRkJZU3hGUVVWeVFpeEpRVUZKUXl4WFFVRmhReXhSUVVGUkxHTkJSWEpDUXl4WlFVRmpReXgxUWtGQmRVSklMRmxCUlhKRFNTeHZRa0ZCYzBKSUxGRkJRVkVzTWtOQlJUbENTU3h4UWtGQmRVSkdMSFZDUVVGMVFrTXNjVUpCUlRsRFJTeFBRVUZUVEN4UlFVRlJMRk5CUldwQ1RTeFJRVUZWU2l4MVFrRkJkVUpITEZGQlJXcERSU3hWUVVGWlVDeFJRVUZSTEdGQlJYQkNVU3hYUVVGaFRpeDFRa0ZCZFVKTExGZEJSWEJEUlN4alFVRm5RbFFzVVVGQlVTeDNRa0ZGZUVKVkxHVkJRV2xDVWl4MVFrRkJkVUpQTEdWQlJYaERSU3hsUVVGcFFsZ3NVVUZCVVN4NVFrRkZla0paTEdkQ1FVRnJRbFlzZFVKQlFYVkNVeXhuUWtGRmVrTkZMR05CUVdkQ1lpeFJRVUZSTEd0Q1FVVjRRbU1zWlVGQmFVSmFMSFZDUVVGMVFsY3NaVUZGTlVNc1UwRkJVMWdzZFVKQlFYVkNZU3hIUVVGUExFOUJRVTlCTEVkQlFVOUJMRVZCUVVscVFpeFhRVUZoYVVJc1JVRkJUU3hEUVVGRlF5eFJRVUZUUkN4SFFVVjJSaXhUUVVGVFJTeG5Ra0ZCWjBKRExFVkJRVlZETEVkQlFXVXNTMEZCVFVRc1lVRkJiMEpETEVkQlFXZENMRTFCUVUwc1NVRkJTVU1zVlVGQlZTeHhRMEZGYUVnc1UwRkJVME1zTWtKQlFUSkNReXhGUVVGTlF5eEhRVUZSTEVsQlFVdEVMRVZCUVZFc1RVRkJUU3hKUVVGSlJTeGxRVUZsTERaRVFVRm5SU3hQUVVGUFJDeEhRVUY1UWl4cFFrRkJWRUVzUjBGQmNVTXNiVUpCUVZSQkxFVkJRVGhDUkN4RlFVRlFReXhGUVVWc1R5eFRRVUZUUlN4VlFVRlZReXhGUVVGVlF5eEhRVUZqTEVkQlFUQkNMRzFDUVVGbVFTeEhRVUUwUXl4UFFVRm1RU3hGUVVGMVFpeE5RVUZOTEVsQlFVbFFMRlZCUVZVc2EwVkJRVzlGVHl4SFFVRmxSQ3hGUVVGVFJTeFZRVUZaUXl4UFFVRlBReXhQUVVGUFNDeEhRVUZqUVN4RlFVRlhReXhWUVVGWExFTkJRVVZITEZsQlFXRXNRMEZCUlVNc1RVRkJUMDRzUlVGQlZVOHNXVUZCV1N4RlFVRlBReXhWUVVGVkxFVkJRVTFETEdOQlFXTXNTMEZCWlZJc1NVRkJXVVVzVDBGQlQwOHNaVUZCYVVKUUxFOUJRVTlQTEdWQlFXVldMRVZCUVZWRExFZEJRV05FTEVWQlFWTlhMRlZCUVZsV0xFZEJUMnBsTEVsQlFVbFhMRTlCUVZNc1UwRkJWVU1zUjBGSGNrSXNVMEZCVTBRc1UwRkRVQ3hKUVVGSlJTeEZRVUZQUXl4RlFVVlllRUlzWjBKQlFXZENlVUlzUzBGQlRVb3NVVUZGZEVJc1NVRkJTeXhKUVVGSlN5eEZRVUZQUXl4VlFVRlZReXhQUVVGUlF5eEZRVUZQUXl4TlFVRk5TaXhIUVVGUFN5eEZRVUZQTEVWQlFVZEJMRVZCUVU5TUxFVkJRVTFMTEVsQlF6TkZSaXhGUVVGTFJTeEhRVUZSU2l4VlFVRlZTU3hIUVVkNlFpeFBRVUZsVWl4RlFVRlRReXhGUVVGUmNFSXNNa0pCUVRKQ2NVSXNTMEZCVFVnc1JVRkJhVUpvUWl4TFFVRkxNRUlzVFVGQlRWWXNSVUZCYTBJc1EwRkJRMGNzVFVGQlRWRXNUMEZCVDBvc1MwRkJhVUpNTEVWQlFVMVZMR0ZCUVdVc1YwRkRha3NzU1VGQlNVTXNSVUZCVVZJc1ZVRkJWVU1zVDBGQlV5eFJRVUZ6UWxFc1NVRkJha0pVTEZWQlFWVXNSMEZCYlVKQkxGVkJRVlVzUjBGQlMwZ3NSVUZCVFZjc1RVRkZkRVpZTEVWQlFVMWhMSE5DUVVGMVFpeEZRVUZKTlVNc1pVRkJaVTBzVTBGQlUyOURMRVZCUVUxSExGZEJRVmNzUlVGQlNUTkRMR2RDUVVGblFra3NVMEZCVTNsQ0xFZEJRVTlsTEU5QlF6ZEhaaXhGUVVGTlowSXNZVUZCWlN4WFFVTjBRaXhQUVVGUGFFSXNSVUZCVFdFc2MwSkJRMHBxUXl3eVFrRkJNa0p2UWl4RlFVRnVRMFFzUjBGelFrd3NUMEYyUTBGbUxGVkJRVlZoTEU5QlFWRkRMRWRCYjBKc1FrUXNUMEZCVDFZc1ZVRkJWVGhDTEd0Q1FVRnZRaXhUUVVGVFFTeHZRa0ZETlVOb1FpeExRVUZMVXl4bFFVTk1WQ3hMUVVGTGFVSXNXVUZCV1dwQ0xFdEJRVXRWTEUxQlFVMVJMR0ZCUnpsQ2RFSXNUMEZCVDFZc1ZVRkJWV2xETERCQ1FVRTBRaXhUUVVGVFFTd3dRa0ZCTUVKRExFZEJRekZGUVN4RlFVRlZVQ3haUVVGallpeExRVUZMVlN4TlFVRk5SeXhYUVVOeVEySXNTMEZCUzFNc1lVRkJZVmNzU1VGSmRFSjRRaXhQUVVGUFZpeFZRVUZWYlVNc2NVSkJRWFZDTEZOQlFWTkJMSFZDUVVNdlEzSkNMRXRCUVV0WkxIRkNRVUYxUWl4TlFVYzVRbWhDTEU5QlFVOVdMRlZCUVZWdlF5eFBRVUZUTEZOQlFWTkJMRk5CUTJwRExFOUJRVTkwUWl4TFFVRkxWU3hOUVVGTllTeFZRVUZaZGtJc1MwRkJTMWtzY1VKQlFYVkNPVU1zVjBGQlYxRXNVVUZCVVd0RUxHRkJRV0Y0UWl4TFFVRkxWU3hOUVVGTllTeFRRVUZWZGtJc1MwRkJTMWtzYzBKQlFYZENMRTFCUjNaSmFFSXNUMEY0UTBrc1EwRjVRMWhvUXl4UlFVRlJWU3hSUVVGUmJVUXNWMEZGYkVJM1FpeFBRVUZQT0VJc1dVRkJZeXhUUVVOeVFqbENMRTlCUVU4clFpeFZRVUZaTEVOQlMycENaQ3hWUVVGWGRFUXNXVUZCV1dVc1VVRkJVWE5FTEZWQlFWVXNRMEZCUTJ4RkxIRkNRVUZ4UWxrc1VVRkJVMllzV1VGQldXVXNVVUZCVVhWRUxFOUJSVFZHV0N4WFFVRlpNMFFzV1VGQldXVXNVVUZCVVhWRUxFMUJSV3hETVVVc1VVRkJVVzFDTEZGQlFWVlNMRmRCUVZkUkxGRkJRVkZyUkN4aFFVRmxOVUlzVDBGQlUzaENMR1ZCUVdWRkxGRkJRelZGZDBRc1QwRkJUek5GTEZGQlFWVkJMRkZCUVdsQ0lpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDNKbFlXTjBMVzkyWlhKc1lYbHpMMnhwWWk5UWIzSjBZV3d1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtleHBvcnRzLl9fZXNNb2R1bGU9ITA7dmFyIF9leHRlbmRzPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0xO3Q8YXJndW1lbnRzLmxlbmd0aDt0Kyspe3ZhciBvPWFyZ3VtZW50c1t0XTtmb3IodmFyIG4gaW4gbylPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobyxuKSYmKGVbbl09b1tuXSl9cmV0dXJuIGV9LF9jbGFzc25hbWVzPXJlcXVpcmUoXCJjbGFzc25hbWVzXCIpLF9jbGFzc25hbWVzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc25hbWVzKSxfcHJvcFR5cGVzPXJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpLF9wcm9wVHlwZXMyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyksX2NvbXBvbmVudE9yRWxlbWVudD1yZXF1aXJlKFwicHJvcC10eXBlcy1leHRyYS9saWIvY29tcG9uZW50T3JFbGVtZW50XCIpLF9jb21wb25lbnRPckVsZW1lbnQyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbXBvbmVudE9yRWxlbWVudCksX3JlYWN0PXJlcXVpcmUoXCJyZWFjdFwiKSxfcmVhY3QyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KSxfcmVhY3REb209cmVxdWlyZShcInJlYWN0LWRvbVwiKSxfcmVhY3REb20yPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKSxfY2FsY3VsYXRlUG9zaXRpb249cmVxdWlyZShcIi4vdXRpbHMvY2FsY3VsYXRlUG9zaXRpb25cIiksX2NhbGN1bGF0ZVBvc2l0aW9uMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jYWxjdWxhdGVQb3NpdGlvbiksX2dldENvbnRhaW5lcj1yZXF1aXJlKFwiLi91dGlscy9nZXRDb250YWluZXJcIiksX2dldENvbnRhaW5lcjI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0Q29udGFpbmVyKSxfb3duZXJEb2N1bWVudD1yZXF1aXJlKFwiLi91dGlscy9vd25lckRvY3VtZW50XCIpLF9vd25lckRvY3VtZW50Mj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vd25lckRvY3VtZW50KTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoZSx0KXt2YXIgbz17fTtmb3IodmFyIG4gaW4gZSl0LmluZGV4T2Yobik+PTB8fE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLG4pJiYob1tuXT1lW25dKTtyZXR1cm4gb31mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfWZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKGUsdCl7aWYoIWUpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiF0fHxcIm9iamVjdFwiIT10eXBlb2YgdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgdD9lOnR9ZnVuY3Rpb24gX2luaGVyaXRzKGUsdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCYmbnVsbCE9PXQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIHQpO2UucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTplLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLHQmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKGUsdCk6ZS5fX3Byb3RvX189dCl9dmFyIFBvc2l0aW9uPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIFBvc2l0aW9uKHQsbyl7X2NsYXNzQ2FsbENoZWNrKHRoaXMsUG9zaXRpb24pO3ZhciBuPV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsZS5jYWxsKHRoaXMsdCxvKSk7cmV0dXJuIG4uZ2V0VGFyZ2V0PWZ1bmN0aW9uKCl7dmFyIGU9bi5wcm9wcy50YXJnZXQsdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBlP2UoKTplO3JldHVybiB0JiZfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUodCl8fG51bGx9LG4ubWF5YmVVcGRhdGVQb3NpdGlvbj1mdW5jdGlvbihlKXt2YXIgdD1uLmdldFRhcmdldCgpOyhuLnByb3BzLnNob3VsZFVwZGF0ZVBvc2l0aW9ufHx0IT09bi5fbGFzdFRhcmdldHx8ZSkmJm4udXBkYXRlUG9zaXRpb24odCl9LG4uc3RhdGU9e3Bvc2l0aW9uTGVmdDowLHBvc2l0aW9uVG9wOjAsYXJyb3dPZmZzZXRMZWZ0Om51bGwsYXJyb3dPZmZzZXRUb3A6bnVsbH0sbi5fbmVlZHNGbHVzaD0hMSxuLl9sYXN0VGFyZ2V0PW51bGwsbn1yZXR1cm4gX2luaGVyaXRzKFBvc2l0aW9uLGUpLFBvc2l0aW9uLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudD1mdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpe3RoaXMudXBkYXRlUG9zaXRpb24odGhpcy5nZXRUYXJnZXQoKSl9LFBvc2l0aW9uLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzPWZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoKXt0aGlzLl9uZWVkc0ZsdXNoPSEwfSxQb3NpdGlvbi5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlPWZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShlKXt0aGlzLl9uZWVkc0ZsdXNoJiYodGhpcy5fbmVlZHNGbHVzaD0hMSx0aGlzLm1heWJlVXBkYXRlUG9zaXRpb24odGhpcy5wcm9wcy5wbGFjZW1lbnQhPT1lLnBsYWNlbWVudCkpfSxQb3NpdGlvbi5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uIHJlbmRlcigpe3ZhciBlPXRoaXMucHJvcHMsdD1lLmNoaWxkcmVuLG89ZS5jbGFzc05hbWUsbj1fb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoZSxbXCJjaGlsZHJlblwiLFwiY2xhc3NOYW1lXCJdKSxyPXRoaXMuc3RhdGUsaT1yLnBvc2l0aW9uTGVmdCxzPXIucG9zaXRpb25Ub3AsYT1fb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocixbXCJwb3NpdGlvbkxlZnRcIixcInBvc2l0aW9uVG9wXCJdKTtkZWxldGUgbi50YXJnZXQsZGVsZXRlIG4uY29udGFpbmVyLGRlbGV0ZSBuLmNvbnRhaW5lclBhZGRpbmcsZGVsZXRlIG4uc2hvdWxkVXBkYXRlUG9zaXRpb247dmFyIHA9X3JlYWN0Mi5kZWZhdWx0LkNoaWxkcmVuLm9ubHkodCk7cmV0dXJuKDAsX3JlYWN0LmNsb25lRWxlbWVudCkocCxfZXh0ZW5kcyh7fSxuLGEse3Bvc2l0aW9uTGVmdDppLHBvc2l0aW9uVG9wOnMsY2xhc3NOYW1lOigwLF9jbGFzc25hbWVzMi5kZWZhdWx0KShvLHAucHJvcHMuY2xhc3NOYW1lKSxzdHlsZTpfZXh0ZW5kcyh7fSxwLnByb3BzLnN0eWxlLHtsZWZ0OmksdG9wOnN9KX0pKX0sUG9zaXRpb24ucHJvdG90eXBlLnVwZGF0ZVBvc2l0aW9uPWZ1bmN0aW9uIHVwZGF0ZVBvc2l0aW9uKGUpe2lmKHRoaXMuX2xhc3RUYXJnZXQ9ZSxlKXt2YXIgdD1fcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcyksbz0oMCxfZ2V0Q29udGFpbmVyMi5kZWZhdWx0KSh0aGlzLnByb3BzLmNvbnRhaW5lciwoMCxfb3duZXJEb2N1bWVudDIuZGVmYXVsdCkodGhpcykuYm9keSk7dGhpcy5zZXRTdGF0ZSgoMCxfY2FsY3VsYXRlUG9zaXRpb24yLmRlZmF1bHQpKHRoaXMucHJvcHMucGxhY2VtZW50LHQsZSxvLHRoaXMucHJvcHMuY29udGFpbmVyUGFkZGluZykpfWVsc2UgdGhpcy5zZXRTdGF0ZSh7cG9zaXRpb25MZWZ0OjAscG9zaXRpb25Ub3A6MCxhcnJvd09mZnNldExlZnQ6bnVsbCxhcnJvd09mZnNldFRvcDpudWxsfSl9LFBvc2l0aW9ufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtQb3NpdGlvbi5wcm9wVHlwZXM9e3RhcmdldDpfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX2NvbXBvbmVudE9yRWxlbWVudDIuZGVmYXVsdCxfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmNdKSxjb250YWluZXI6X3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoW19jb21wb25lbnRPckVsZW1lbnQyLmRlZmF1bHQsX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jXSksY29udGFpbmVyUGFkZGluZzpfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixwbGFjZW1lbnQ6X3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZihbXCJ0b3BcIixcInJpZ2h0XCIsXCJib3R0b21cIixcImxlZnRcIl0pLHNob3VsZFVwZGF0ZVBvc2l0aW9uOl9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbH0sUG9zaXRpb24uZGlzcGxheU5hbWU9XCJQb3NpdGlvblwiLFBvc2l0aW9uLmRlZmF1bHRQcm9wcz17Y29udGFpbmVyUGFkZGluZzowLHBsYWNlbWVudDpcInJpZ2h0XCIsc2hvdWxkVXBkYXRlUG9zaXRpb246ITF9LGV4cG9ydHMuZGVmYXVsdD1Qb3NpdGlvbixtb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbEJ2YzJsMGFXOXVMbXB6SWwwc0ltNWhiV1Z6SWpwYkltVjRjRzl5ZEhNaUxDSmZYMlZ6VFc5a2RXeGxJaXdpWDJWNGRHVnVaSE1pTENKUFltcGxZM1FpTENKaGMzTnBaMjRpTENKMFlYSm5aWFFpTENKcElpd2lZWEpuZFcxbGJuUnpJaXdpYkdWdVozUm9JaXdpYzI5MWNtTmxJaXdpYTJWNUlpd2ljSEp2ZEc5MGVYQmxJaXdpYUdGelQzZHVVSEp2Y0dWeWRIa2lMQ0pqWVd4c0lpd2lYMk5zWVhOemJtRnRaWE1pTENKeVpYRjFhWEpsSWl3aVgyTnNZWE56Ym1GdFpYTXlJaXdpWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDSXNJbDl3Y205d1ZIbHdaWE1pTENKZmNISnZjRlI1Y0dWek1pSXNJbDlqYjIxd2IyNWxiblJQY2tWc1pXMWxiblFpTENKZlkyOXRjRzl1Wlc1MFQzSkZiR1Z0Wlc1ME1pSXNJbDl5WldGamRDSXNJbDl5WldGamRESWlMQ0pmY21WaFkzUkViMjBpTENKZmNtVmhZM1JFYjIweUlpd2lYMk5oYkdOMWJHRjBaVkJ2YzJsMGFXOXVJaXdpWDJOaGJHTjFiR0YwWlZCdmMybDBhVzl1TWlJc0lsOW5aWFJEYjI1MFlXbHVaWElpTENKZloyVjBRMjl1ZEdGcGJtVnlNaUlzSWw5dmQyNWxja1J2WTNWdFpXNTBJaXdpWDI5M2JtVnlSRzlqZFcxbGJuUXlJaXdpYjJKcUlpd2laR1ZtWVhWc2RDSXNJbDl2WW1wbFkzUlhhWFJvYjNWMFVISnZjR1Z5ZEdsbGN5SXNJbXRsZVhNaUxDSnBibVJsZUU5bUlpd2lYMk5zWVhOelEyRnNiRU5vWldOcklpd2lhVzV6ZEdGdVkyVWlMQ0pEYjI1emRISjFZM1J2Y2lJc0lsUjVjR1ZGY25KdmNpSXNJbDl3YjNOemFXSnNaVU52Ym5OMGNuVmpkRzl5VW1WMGRYSnVJaXdpYzJWc1ppSXNJbEpsWm1WeVpXNWpaVVZ5Y205eUlpd2lYMmx1YUdWeWFYUnpJaXdpYzNWaVEyeGhjM01pTENKemRYQmxja05zWVhOeklpd2lZM0psWVhSbElpd2lZMjl1YzNSeWRXTjBiM0lpTENKMllXeDFaU0lzSW1WdWRXMWxjbUZpYkdVaUxDSjNjbWwwWVdKc1pTSXNJbU52Ym1acFozVnlZV0pzWlNJc0luTmxkRkJ5YjNSdmRIbHdaVTltSWl3aVgxOXdjbTkwYjE5Zklpd2lVRzl6YVhScGIyNGlMQ0pmVW1WaFkzUWtRMjl0Y0c5dVpXNTBJaXdpY0hKdmNITWlMQ0pqYjI1MFpYaDBJaXdpZEdocGN5SXNJbDkwYUdseklpd2laMlYwVkdGeVoyVjBJaXdpZEdGeVoyVjBSV3hsYldWdWRDSXNJbVpwYm1SRVQwMU9iMlJsSWl3aWJXRjVZbVZWY0dSaGRHVlFiM05wZEdsdmJpSXNJbkJzWVdObGJXVnVkRU5vWVc1blpXUWlMQ0p6YUc5MWJHUlZjR1JoZEdWUWIzTnBkR2x2YmlJc0lsOXNZWE4wVkdGeVoyVjBJaXdpZFhCa1lYUmxVRzl6YVhScGIyNGlMQ0p6ZEdGMFpTSXNJbkJ2YzJsMGFXOXVUR1ZtZENJc0luQnZjMmwwYVc5dVZHOXdJaXdpWVhKeWIzZFBabVp6WlhSTVpXWjBJaXdpWVhKeWIzZFBabVp6WlhSVWIzQWlMQ0pmYm1WbFpITkdiSFZ6YUNJc0ltTnZiWEJ2Ym1WdWRFUnBaRTF2ZFc1MElpd2lZMjl0Y0c5dVpXNTBWMmxzYkZKbFkyVnBkbVZRY205d2N5SXNJbU52YlhCdmJtVnVkRVJwWkZWd1pHRjBaU0lzSW5CeVpYWlFjbTl3Y3lJc0luQnNZV05sYldWdWRDSXNJbkpsYm1SbGNpSXNJbDl3Y205d2N5SXNJbU5vYVd4a2NtVnVJaXdpWTJ4aGMzTk9ZVzFsSWl3aVgzTjBZWFJsSWl3aVlYSnliM2RRYjNOcGRHbHZiaUlzSW1OdmJuUmhhVzVsY2lJc0ltTnZiblJoYVc1bGNsQmhaR1JwYm1jaUxDSmphR2xzWkNJc0lrTm9hV3hrY21WdUlpd2liMjVzZVNJc0ltTnNiMjVsUld4bGJXVnVkQ0lzSW5OMGVXeGxJaXdpYkdWbWRDSXNJblJ2Y0NJc0ltOTJaWEpzWVhraUxDSmliMlI1SWl3aWMyVjBVM1JoZEdVaUxDSkRiMjF3YjI1bGJuUWlMQ0p3Y205d1ZIbHdaWE1pTENKdmJtVlBabFI1Y0dVaUxDSm1kVzVqSWl3aWJuVnRZbVZ5SWl3aWIyNWxUMllpTENKaWIyOXNJaXdpWkdsemNHeGhlVTVoYldVaUxDSmtaV1poZFd4MFVISnZjSE1pTENKdGIyUjFiR1VpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdGQlJVRkJMRkZCUVZGRExGbEJRV0VzUlVGRmNrSXNTVUZCU1VNc1UwRkJWME1zVDBGQlQwTXNVVUZCVlN4VFFVRlZReXhIUVVGVkxFbEJRVXNzU1VGQlNVTXNSVUZCU1N4RlFVRkhRU3hGUVVGSlF5eFZRVUZWUXl4UFFVRlJSaXhKUVVGTExFTkJRVVVzU1VGQlNVY3NSVUZCVTBZc1ZVRkJWVVFzUjBGQlNTeEpRVUZMTEVsQlFVbEpMRXRCUVU5RUxFVkJRV05PTEU5QlFVOVJMRlZCUVZWRExHVkJRV1ZETEV0QlFVdEtMRVZCUVZGRExFdEJRVkZNTEVWQlFVOUxMRWRCUVU5RUxFVkJRVTlETEVsQlFWa3NUMEZCVDB3c1IwRkZibEJUTEZsQlFXTkRMRkZCUVZFc1kwRkZkRUpETEdGQlFXVkRMSFZDUVVGMVFrZ3NZVUZGZEVOSkxGZEJRV0ZJTEZGQlFWRXNZMEZGY2tKSkxGbEJRV05HTEhWQ1FVRjFRa01zV1VGRmNrTkZMRzlDUVVGelFrd3NVVUZCVVN3eVEwRkZPVUpOTEhGQ1FVRjFRa29zZFVKQlFYVkNSeXh4UWtGRk9VTkZMRTlCUVZOUUxGRkJRVkVzVTBGRmFrSlJMRkZCUVZWT0xIVkNRVUYxUWtzc1VVRkZha05GTEZWQlFWbFVMRkZCUVZFc1lVRkZjRUpWTEZkQlFXRlNMSFZDUVVGMVFrOHNWMEZGY0VORkxHMUNRVUZ4UWxnc1VVRkJVU3cyUWtGRk4wSlpMRzlDUVVGelFsWXNkVUpCUVhWQ1V5eHZRa0ZGTjBORkxHTkJRV2RDWWl4UlFVRlJMSGRDUVVWNFFtTXNaVUZCYVVKYUxIVkNRVUYxUWxjc1pVRkZlRU5GTEdWQlFXbENaaXhSUVVGUkxIbENRVVY2UW1kQ0xHZENRVUZyUW1Rc2RVSkJRWFZDWVN4blFrRkZOME1zVTBGQlUySXNkVUpCUVhWQ1pTeEhRVUZQTEU5QlFVOUJMRWRCUVU5QkxFVkJRVWt2UWl4WFFVRmhLMElzUlVGQlRTeERRVUZGUXl4UlFVRlRSQ3hIUVVWMlJpeFRRVUZUUlN4NVFrRkJlVUpHTEVWQlFVdEhMRWRCUVZFc1NVRkJTVGxDTEVWQlFWTXNSMEZCU1N4SlFVRkxMRWxCUVVsRExFdEJRVXN3UWl4RlFVRlhSeXhGUVVGTFF5eFJRVUZST1VJc1NVRkJUU3hIUVVGclFrZ3NUMEZCVDFFc1ZVRkJWVU1zWlVGQlpVTXNTMEZCUzIxQ0xFVkJRVXN4UWl4TFFVRmpSQ3hGUVVGUFF5eEhRVUZMTUVJc1JVRkJTVEZDTEVsQlFVMHNUMEZCVDBRc1JVRkZiazRzVTBGQlUyZERMR2RDUVVGblFrTXNSVUZCVlVNc1IwRkJaU3hMUVVGTlJDeGhRVUZ2UWtNc1IwRkJaMElzVFVGQlRTeEpRVUZKUXl4VlFVRlZMSEZEUVVWb1NDeFRRVUZUUXl3eVFrRkJNa0pETEVWQlFVMDNRaXhIUVVGUkxFbEJRVXMyUWl4RlFVRlJMRTFCUVUwc1NVRkJTVU1zWlVGQlpTdzJSRUZCWjBVc1QwRkJUemxDTEVkQlFYbENMR2xDUVVGVVFTeEhRVUZ4UXl4dFFrRkJWRUVzUlVGQk9FSTJRaXhGUVVGUU4wSXNSVUZGYkU4c1UwRkJVeXRDTEZWQlFWVkRMRVZCUVZWRExFZEJRV01zUjBGQk1FSXNiVUpCUVdaQkxFZEJRVFJETEU5QlFXWkJMRVZCUVhWQ0xFMUJRVTBzU1VGQlNVNHNWVUZCVlN4clJVRkJiMFZOTEVkQlFXVkVMRVZCUVZOc1F5eFZRVUZaVWl4UFFVRlBORU1zVDBGQlQwUXNSMEZCWTBFc1JVRkJWMjVETEZWQlFWY3NRMEZCUlhGRExGbEJRV0VzUTBGQlJVTXNUVUZCVDBvc1JVRkJWVXNzV1VGQldTeEZRVUZQUXl4VlFVRlZMRVZCUVUxRExHTkJRV01zUzBGQlpVNHNTVUZCV1RORExFOUJRVTlyUkN4bFFVRnBRbXhFTEU5QlFVOXJSQ3hsUVVGbFVpeEZRVUZWUXl4SFFVRmpSQ3hGUVVGVFV5eFZRVUZaVWl4SFFWZHFaU3hKUVVGSlV5eFRRVUZYTEZOQlFWVkRMRWRCUjNaQ0xGTkJRVk5FTEZOQlFWTkZMRVZCUVU5RExFZEJRM1pDY2tJc1owSkJRV2RDYzBJc1MwRkJUVW9zVlVGRmRFSXNTVUZCU1Vzc1JVRkJVVzVDTERKQ1FVRXlRbXRDTEV0QlFVMUlMRVZCUVdsQ00wTXNTMEZCU3poRExFdEJRVTFHTEVWQlFVOURMRWxCTkVKb1JpeFBRVEZDUVVVc1JVRkJUVU1zVlVGQldTeFhRVU5vUWl4SlFVRkplRVFzUlVGQlUzVkVMRVZCUVUxSUxFMUJRVTF3UkN4UFFVVnlRbmxFTEVWQlFXdERMRzFDUVVGWWVrUXNSVUZCZDBKQkxFbEJRVmRCTEVWQlF6bEVMRTlCUVU5NVJDeEhRVUZwUW5KRExGZEJRVmRSTEZGQlFWRTRRaXhaUVVGWlJDeEpRVUZyUWl4TlFVY3pSVVlzUlVGQlRVa3NiMEpCUVhOQ0xGTkJRVlZETEVkQlEzQkRMRWxCUVVrMVJDeEZRVUZUZFVRc1JVRkJUVU1zWVVGRlpFUXNSVUZCVFVnc1RVRkJUVk1zYzBKQlFYZENOMFFzU1VGQlYzVkVMRVZCUVUxUExHRkJRV2RDUml4SlFVa3hSVXdzUlVGQlRWRXNaVUZCWlM5RUxFbEJSM1pDZFVRc1JVRkJUVk1zVFVGQlVTeERRVU5hUXl4aFFVRmpMRVZCUTJSRExGbEJRV0VzUlVGRFlrTXNaMEpCUVdsQ0xFdEJRMnBDUXl4bFFVRm5RaXhOUVVkc1FtSXNSVUZCVFdNc1lVRkJZeXhGUVVOd1FtUXNSVUZCVFU4c1dVRkJZeXhMUVVOaVVDeEZRWFZGVkN4UFFYaEhRV2hDTEZWQlFWVlhMRk5CUVZWRExFZEJiME53UWtRc1UwRkJVelZETEZWQlFWVm5SU3hyUWtGQmIwSXNVMEZCVTBFc2IwSkJRemxEYUVJc1MwRkJTMU1zWlVGQlpWUXNTMEZCUzBVc1kwRkhNMEpPTEZOQlFWTTFReXhWUVVGVmFVVXNNRUpCUVRSQ0xGTkJRVk5CTERSQ1FVTjBSR3BDTEV0QlFVdGxMR0ZCUVdNc1IwRkhja0p1UWl4VFFVRlROVU1zVlVGQlZXdEZMRzFDUVVGeFFpeFRRVUZUUVN4dFFrRkJiVUpETEVkQlF6bEVia0lzUzBGQlMyVXNZMEZEVUdZc1MwRkJTMlVzWVVGQll5eEZRVU51UW1Zc1MwRkJTMHNzYjBKQlFXOUNUQ3hMUVVGTFJpeE5RVUZOYzBJc1dVRkJZMFFzUlVGQlZVTXNZVUZKYUVWNFFpeFRRVUZUTlVNc1ZVRkJWWEZGTEU5QlFWTXNVMEZCVTBFc1UwRkRia01zU1VGQlNVTXNSVUZCVTNSQ0xFdEJRVXRHTEUxQlEyUjVRaXhGUVVGWFJDeEZRVUZQUXl4VFFVTnNRa01zUlVGQldVWXNSVUZCVDBVc1ZVRkRia0l4UWl4RlFVRlJka0lzZVVKQlFYbENLME1zUlVGQlVTeERRVUZETEZkQlFWa3NZMEZGZEVSSExFVkJRVk42UWl4TFFVRkxWU3hOUVVOa1F5eEZRVUZsWXl4RlFVRlBaQ3hoUVVOMFFrTXNSVUZCWTJFc1JVRkJUMklzV1VGRGNrSmpMRVZCUVdkQ2JrUXNlVUpCUVhsQ2EwUXNSVUZCVVN4RFFVRkRMR1ZCUVdkQ0xIVkNRVXN2UkROQ0xFVkJRVTF3UkN4alFVTk9iMFFzUlVGQlRUWkNMR2xDUVVOT04wSXNSVUZCVFRoQ0xIZENRVU5PT1VJc1JVRkJUVk1zY1VKQlJXSXNTVUZCU1hOQ0xFVkJRVkZxUlN4UlFVRlJWU3hSUVVGUmQwUXNVMEZCVTBNc1MwRkJTMUlzUjBGRE1VTXNUMEZCVHl4RlFVRkpOVVFzVDBGQlQzRkZMR05CUVdOSUxFVkJRVTkwUml4VFFVRlRMRWRCUVVsMVJDeEZRVUZQTkVJc1JVRkJaU3hEUVVkNFJXWXNZVUZCWTBFc1JVRkRaRU1zV1VGQllVRXNSVUZEWWxrc1YwRkJWeXhGUVVGSmJrVXNZVUZCWVdsQ0xGTkJRVk5yUkN4RlFVRlhTeXhGUVVGTkwwSXNUVUZCVFRCQ0xGZEJRelZFVXl4TlFVRlBNVVlzVTBGQlV5eEhRVUZKYzBZc1JVRkJUUzlDTEUxQlFVMXRReXhOUVVGUExFTkJRM0pEUXl4TFFVRk5ka0lzUlVGRFRuZENMRWxCUVV0MlFpeFJRVXRZYUVJc1UwRkJVelZETEZWQlFWVjVSQ3hsUVVGcFFpeFRRVUZUUVN4bFFVRmxMMFFzUjBGSE1VUXNSMEZHUVhORUxFdEJRVXRSTEZsQlFXTTVSQ3hGUVVWa1FTeEZRVUZNTEVOQlYwRXNTVUZCU1RCR0xFVkJRVlYwUlN4WFFVRlhVU3hSUVVGUk9FSXNXVUZCV1Vvc1RVRkRla015UWl4SFFVRlpMRVZCUVVsNlJDeGxRVUZsU1N4VFFVRlRNRUlzUzBGQlMwWXNUVUZCVFRaQ0xGZEJRVmNzUlVGQlNYWkVMR2RDUVVGblFrVXNVMEZCVXpCQ0xFMUJRVTF4UXl4TlFVVnlSM0pETEV0QlFVdHpReXhWUVVGVExFVkJRVWwwUlN4dlFrRkJiMEpOTEZOQlFWTXdRaXhMUVVGTFJpeE5RVUZOYzBJc1ZVRkJWMmRDTEVWQlFWTXhSaXhGUVVGUmFVWXNSVUZCVnpOQ0xFdEJRVXRHTEUxQlFVMDRRaXgzUWtGaU1VYzFRaXhMUVVGTGMwTXNVMEZCVXl4RFFVTmFNMElzWVVGQll5eEZRVU5rUXl4WlFVRmhMRVZCUTJKRExHZENRVUZwUWl4TFFVTnFRa01zWlVGQlowSXNVVUZaWm14Q0xGTkJla2ROTEVOQk1FZGlhRU1zVVVGQlVWVXNVVUZCVVdsRkxGZEJSV3hDTTBNc1UwRkJVelJETEZWQlFWa3NRMEZMYmtJNVJpeFBRVUZSWXl4WlFVRlpZeXhSUVVGUmJVVXNWVUZCVlN4RFFVRkRMMFVzY1VKQlFYRkNXU3hSUVVGVFpDeFpRVUZaWXl4UlFVRlJiMFVzVDBGTGVrWm1MRlZCUVZkdVJTeFpRVUZaWXl4UlFVRlJiVVVzVlVGQlZTeERRVUZETDBVc2NVSkJRWEZDV1N4UlFVRlRaQ3haUVVGWll5eFJRVUZSYjBVc1QwRkpOVVprTEdsQ1FVRnJRbkJGTEZsQlFWbGpMRkZCUVZGeFJTeFBRVWwwUTNaQ0xGVkJRVmMxUkN4WlFVRlpZeXhSUVVGUmMwVXNUVUZCVFN4RFFVRkRMRTFCUVU4c1VVRkJVeXhUUVVGVkxGTkJTV2hGY2tNc2NVSkJRWE5DTDBNc1dVRkJXV01zVVVGQlVYVkZMRTFCUnpWRGFrUXNVMEZCVTJ0RUxGbEJRV01zVjBGRmRrSnNSQ3hUUVVGVGJVUXNZVUZCWlN4RFFVTjBRbTVDTEdsQ1FVRnJRaXhGUVVOc1FsSXNWVUZCVnl4UlFVTllZaXh6UWtGQmMwSXNSMEZIZUVKc1JTeFJRVUZSYVVNc1VVRkJWWE5DTEZOQlEyeENiMFFzVDBGQlR6TkhMRkZCUVZWQkxGRkJRV2xDSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdOMExXOTJaWEpzWVhsekwyeHBZaTlRYjNOcGRHbHZiaTVxY3lKOSIsIlwidXNlIHN0cmljdFwiO2V4cG9ydHMuX19lc01vZHVsZT0hMDt2YXIgX3Byb3BUeXBlcz1yZXF1aXJlKFwicHJvcC10eXBlc1wiKSxfcHJvcFR5cGVzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpLF9yZWFjdD1yZXF1aXJlKFwicmVhY3RcIiksX3JlYWN0Mj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGUscil7aWYoIShlIGluc3RhbmNlb2YgcikpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX1mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihlLHIpe2lmKCFlKXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4hcnx8XCJvYmplY3RcIiE9dHlwZW9mIHImJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHI/ZTpyfWZ1bmN0aW9uIF9pbmhlcml0cyhlLHIpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHImJm51bGwhPT1yKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiByKTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHImJnIucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxyJiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihlLHIpOmUuX19wcm90b19fPXIpfXZhciBwcm9wVHlwZXM9e2NoaWxkcmVuOl9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZX0sUmVmSG9sZGVyPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIFJlZkhvbGRlcigpe3JldHVybiBfY2xhc3NDYWxsQ2hlY2sodGhpcyxSZWZIb2xkZXIpLF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsZS5hcHBseSh0aGlzLGFyZ3VtZW50cykpfXJldHVybiBfaW5oZXJpdHMoUmVmSG9sZGVyLGUpLFJlZkhvbGRlci5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uIHJlbmRlcigpe3JldHVybiB0aGlzLnByb3BzLmNoaWxkcmVufSxSZWZIb2xkZXJ9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1JlZkhvbGRlci5wcm9wVHlwZXM9cHJvcFR5cGVzLGV4cG9ydHMuZGVmYXVsdD1SZWZIb2xkZXIsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxKbFpraHZiR1JsY2k1cWN5SmRMQ0p1WVcxbGN5STZXeUpsZUhCdmNuUnpJaXdpWDE5bGMwMXZaSFZzWlNJc0lsOXdjbTl3Vkhsd1pYTWlMQ0p5WlhGMWFYSmxJaXdpWDNCeWIzQlVlWEJsY3pJaUxDSmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwSWl3aVgzSmxZV04wSWl3aVgzSmxZV04wTWlJc0ltOWlhaUlzSW1SbFptRjFiSFFpTENKZlkyeGhjM05EWVd4c1EyaGxZMnNpTENKcGJuTjBZVzVqWlNJc0lrTnZibk4wY25WamRHOXlJaXdpVkhsd1pVVnljbTl5SWl3aVgzQnZjM05wWW14bFEyOXVjM1J5ZFdOMGIzSlNaWFIxY200aUxDSnpaV3htSWl3aVkyRnNiQ0lzSWxKbFptVnlaVzVqWlVWeWNtOXlJaXdpWDJsdWFHVnlhWFJ6SWl3aWMzVmlRMnhoYzNNaUxDSnpkWEJsY2tOc1lYTnpJaXdpY0hKdmRHOTBlWEJsSWl3aVQySnFaV04wSWl3aVkzSmxZWFJsSWl3aVkyOXVjM1J5ZFdOMGIzSWlMQ0oyWVd4MVpTSXNJbVZ1ZFcxbGNtRmliR1VpTENKM2NtbDBZV0pzWlNJc0ltTnZibVpwWjNWeVlXSnNaU0lzSW5ObGRGQnliM1J2ZEhsd1pVOW1JaXdpWDE5d2NtOTBiMTlmSWl3aWNISnZjRlI1Y0dWeklpd2lZMmhwYkdSeVpXNGlMQ0p1YjJSbElpd2lVbVZtU0c5c1pHVnlJaXdpWDFKbFlXTjBKRU52YlhCdmJtVnVkQ0lzSW5Sb2FYTWlMQ0poY0hCc2VTSXNJbUZ5WjNWdFpXNTBjeUlzSW5KbGJtUmxjaUlzSW5CeWIzQnpJaXdpUTI5dGNHOXVaVzUwSWl3aWJXOWtkV3hsSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4aFFVVkJRU3hSUVVGUlF5eFpRVUZoTEVWQlJYSkNMRWxCUVVsRExGZEJRV0ZETEZGQlFWRXNZMEZGY2tKRExGbEJRV05ETEhWQ1FVRjFRa2dzV1VGRmNrTkpMRTlCUVZOSUxGRkJRVkVzVTBGRmFrSkpMRkZCUVZWR0xIVkNRVUYxUWtNc1VVRkZja01zVTBGQlUwUXNkVUpCUVhWQ1J5eEhRVUZQTEU5QlFVOUJMRWRCUVU5QkxFVkJRVWxRTEZkQlFXRlBMRVZCUVUwc1EwRkJSVU1zVVVGQlUwUXNSMEZGZGtZc1UwRkJVMFVzWjBKQlFXZENReXhGUVVGVlF5eEhRVUZsTEV0QlFVMUVMR0ZCUVc5Q1F5eEhRVUZuUWl4TlFVRk5MRWxCUVVsRExGVkJRVlVzY1VOQlJXaElMRk5CUVZORExESkNRVUV5UWtNc1JVRkJUVU1zUjBGQlVTeEpRVUZMUkN4RlFVRlJMRTFCUVUwc1NVRkJTVVVzWlVGQlpTdzJSRUZCWjBVc1QwRkJUMFFzUjBGQmVVSXNhVUpCUVZSQkxFZEJRWEZETEcxQ1FVRlVRU3hGUVVFNFFrUXNSVUZCVUVNc1JVRkZiRThzVTBGQlUwVXNWVUZCVlVNc1JVRkJWVU1zUjBGQll5eEhRVUV3UWl4dFFrRkJaa0VzUjBGQk5FTXNUMEZCWmtFc1JVRkJkVUlzVFVGQlRTeEpRVUZKVUN4VlFVRlZMR3RGUVVGdlJVOHNSMEZCWlVRc1JVRkJVMFVzVlVGQldVTXNUMEZCVDBNc1QwRkJUMGdzUjBGQlkwRXNSVUZCVjBNc1ZVRkJWeXhEUVVGRlJ5eFpRVUZoTEVOQlFVVkRMRTFCUVU5T0xFVkJRVlZQTEZsQlFWa3NSVUZCVDBNc1ZVRkJWU3hGUVVGTlF5eGpRVUZqTEV0QlFXVlNMRWxCUVZsRkxFOUJRVTlQTEdWQlFXbENVQ3hQUVVGUFR5eGxRVUZsVml4RlFVRlZReXhIUVVGalJDeEZRVUZUVnl4VlFVRlpWaXhIUVVWcVpTeEpRVUZKVnl4VlFVRlpMRU5CUTJSRExGTkJRVlUxUWl4WlFVRlpTeXhSUVVGUmQwSXNUVUZSTlVKRExGVkJRVmtzVTBGQlZVTXNSMEZIZUVJc1UwRkJVMFFzV1VGSFVDeFBRVVpCZUVJc1owSkJRV2RDTUVJc1MwRkJUVVlzVjBGRlpuQkNMREpDUVVFeVFuTkNMRXRCUVUxRUxFVkJRV2xDUlN4TlFVRk5SQ3hMUVVGTlJTeFpRVTkyUlN4UFFWcEJjRUlzVlVGQlZXZENMRlZCUVZkRExFZEJVWEpDUkN4VlFVRlZZaXhWUVVGVmEwSXNUMEZCVXl4VFFVRlRRU3hUUVVOd1F5eFBRVUZQU0N4TFFVRkxTU3hOUVVGTlVpeFZRVWRpUlN4VlFXSlBMRU5CWTJRelFpeFJRVUZSUlN4UlFVRlJaME1zVjBGRmJFSlFMRlZCUVZWSUxGVkJRVmxCTEZWQlJYUkNMMElzVVVGQlVWTXNVVUZCVlhsQ0xGVkJRMnhDVVN4UFFVRlBNVU1zVVVGQlZVRXNVVUZCYVVJaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Y21WaFkzUXRiM1psY214aGVYTXZiR2xpTDFKbFpraHZiR1JsY2k1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjtleHBvcnRzLl9fZXNNb2R1bGU9ITA7dmFyIF9jb250YWlucz1yZXF1aXJlKFwiZG9tLWhlbHBlcnMvcXVlcnkvY29udGFpbnNcIiksX2NvbnRhaW5zMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb250YWlucyksX3Byb3BUeXBlcz1yZXF1aXJlKFwicHJvcC10eXBlc1wiKSxfcHJvcFR5cGVzMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpLF9yZWFjdD1yZXF1aXJlKFwicmVhY3RcIiksX3JlYWN0Mj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCksX3JlYWN0RG9tPXJlcXVpcmUoXCJyZWFjdC1kb21cIiksX3JlYWN0RG9tMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSksX2FkZEV2ZW50TGlzdGVuZXI9cmVxdWlyZShcIi4vdXRpbHMvYWRkRXZlbnRMaXN0ZW5lclwiKSxfYWRkRXZlbnRMaXN0ZW5lcjI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYWRkRXZlbnRMaXN0ZW5lciksX293bmVyRG9jdW1lbnQ9cmVxdWlyZShcIi4vdXRpbHMvb3duZXJEb2N1bWVudFwiKSxfb3duZXJEb2N1bWVudDI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb3duZXJEb2N1bWVudCk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX1mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihlLHQpe2lmKCFlKXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4hdHx8XCJvYmplY3RcIiE9dHlwZW9mIHQmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQ/ZTp0fWZ1bmN0aW9uIF9pbmhlcml0cyhlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiB0KTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSx0JiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihlLHQpOmUuX19wcm90b19fPXQpfXZhciBlc2NhcGVLZXlDb2RlPTI3O2Z1bmN0aW9uIGlzTGVmdENsaWNrRXZlbnQoZSl7cmV0dXJuIDA9PT1lLmJ1dHRvbn1mdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZSl7cmV0dXJuISEoZS5tZXRhS2V5fHxlLmFsdEtleXx8ZS5jdHJsS2V5fHxlLnNoaWZ0S2V5KX12YXIgUm9vdENsb3NlV3JhcHBlcj1mdW5jdGlvbihlKXtmdW5jdGlvbiBSb290Q2xvc2VXcmFwcGVyKHQsbyl7X2NsYXNzQ2FsbENoZWNrKHRoaXMsUm9vdENsb3NlV3JhcHBlcik7dmFyIHI9X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcyxlLmNhbGwodGhpcyx0LG8pKTtyZXR1cm4gci5hZGRFdmVudExpc3RlbmVycz1mdW5jdGlvbigpe3ZhciBlPXIucHJvcHMuZXZlbnQsdD0oMCxfb3duZXJEb2N1bWVudDIuZGVmYXVsdCkocik7ci5kb2N1bWVudE1vdXNlQ2FwdHVyZUxpc3RlbmVyPSgwLF9hZGRFdmVudExpc3RlbmVyMi5kZWZhdWx0KSh0LGUsci5oYW5kbGVNb3VzZUNhcHR1cmUsITApLHIuZG9jdW1lbnRNb3VzZUxpc3RlbmVyPSgwLF9hZGRFdmVudExpc3RlbmVyMi5kZWZhdWx0KSh0LGUsci5oYW5kbGVNb3VzZSksci5kb2N1bWVudEtleXVwTGlzdGVuZXI9KDAsX2FkZEV2ZW50TGlzdGVuZXIyLmRlZmF1bHQpKHQsXCJrZXl1cFwiLHIuaGFuZGxlS2V5VXApfSxyLnJlbW92ZUV2ZW50TGlzdGVuZXJzPWZ1bmN0aW9uKCl7ci5kb2N1bWVudE1vdXNlQ2FwdHVyZUxpc3RlbmVyJiZyLmRvY3VtZW50TW91c2VDYXB0dXJlTGlzdGVuZXIucmVtb3ZlKCksci5kb2N1bWVudE1vdXNlTGlzdGVuZXImJnIuZG9jdW1lbnRNb3VzZUxpc3RlbmVyLnJlbW92ZSgpLHIuZG9jdW1lbnRLZXl1cExpc3RlbmVyJiZyLmRvY3VtZW50S2V5dXBMaXN0ZW5lci5yZW1vdmUoKX0sci5oYW5kbGVNb3VzZUNhcHR1cmU9ZnVuY3Rpb24oZSl7ci5wcmV2ZW50TW91c2VSb290Q2xvc2U9aXNNb2RpZmllZEV2ZW50KGUpfHwhaXNMZWZ0Q2xpY2tFdmVudChlKXx8KDAsX2NvbnRhaW5zMi5kZWZhdWx0KShfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUociksZS50YXJnZXQpfSxyLmhhbmRsZU1vdXNlPWZ1bmN0aW9uKGUpeyFyLnByZXZlbnRNb3VzZVJvb3RDbG9zZSYmci5wcm9wcy5vblJvb3RDbG9zZSYmci5wcm9wcy5vblJvb3RDbG9zZShlKX0sci5oYW5kbGVLZXlVcD1mdW5jdGlvbihlKXtlLmtleUNvZGU9PT1lc2NhcGVLZXlDb2RlJiZyLnByb3BzLm9uUm9vdENsb3NlJiZyLnByb3BzLm9uUm9vdENsb3NlKGUpfSxyLnByZXZlbnRNb3VzZVJvb3RDbG9zZT0hMSxyfXJldHVybiBfaW5oZXJpdHMoUm9vdENsb3NlV3JhcHBlcixlKSxSb290Q2xvc2VXcmFwcGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudD1mdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpe3RoaXMucHJvcHMuZGlzYWJsZWR8fHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKX0sUm9vdENsb3NlV3JhcHBlci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlPWZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShlKXshdGhpcy5wcm9wcy5kaXNhYmxlZCYmZS5kaXNhYmxlZD90aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk6dGhpcy5wcm9wcy5kaXNhYmxlZCYmIWUuZGlzYWJsZWQmJnRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKX0sUm9vdENsb3NlV3JhcHBlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQ9ZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKXt0aGlzLnByb3BzLmRpc2FibGVkfHx0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXJzKCl9LFJvb3RDbG9zZVdyYXBwZXIucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXtyZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbn0sUm9vdENsb3NlV3JhcHBlcn0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7Um9vdENsb3NlV3JhcHBlci5kaXNwbGF5TmFtZT1cIlJvb3RDbG9zZVdyYXBwZXJcIixSb290Q2xvc2VXcmFwcGVyLnByb3BUeXBlcz17b25Sb290Q2xvc2U6X3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLGNoaWxkcmVuOl9wcm9wVHlwZXMyLmRlZmF1bHQuZWxlbWVudCxkaXNhYmxlZDpfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsZXZlbnQ6X3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZihbXCJjbGlja1wiLFwibW91c2Vkb3duXCJdKX0sUm9vdENsb3NlV3JhcHBlci5kZWZhdWx0UHJvcHM9e2V2ZW50OlwiY2xpY2tcIn0sZXhwb3J0cy5kZWZhdWx0PVJvb3RDbG9zZVdyYXBwZXIsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxKdmIzUkRiRzl6WlZkeVlYQndaWEl1YW5NaVhTd2libUZ0WlhNaU9sc2laWGh3YjNKMGN5SXNJbDlmWlhOTmIyUjFiR1VpTENKZlkyOXVkR0ZwYm5NaUxDSnlaWEYxYVhKbElpd2lYMk52Ym5SaGFXNXpNaUlzSWw5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUWlMQ0pmY0hKdmNGUjVjR1Z6SWl3aVgzQnliM0JVZVhCbGN6SWlMQ0pmY21WaFkzUWlMQ0pmY21WaFkzUXlJaXdpWDNKbFlXTjBSRzl0SWl3aVgzSmxZV04wUkc5dE1pSXNJbDloWkdSRmRtVnVkRXhwYzNSbGJtVnlJaXdpWDJGa1pFVjJaVzUwVEdsemRHVnVaWEl5SWl3aVgyOTNibVZ5Ukc5amRXMWxiblFpTENKZmIzZHVaWEpFYjJOMWJXVnVkRElpTENKdlltb2lMQ0prWldaaGRXeDBJaXdpWDJOc1lYTnpRMkZzYkVOb1pXTnJJaXdpYVc1emRHRnVZMlVpTENKRGIyNXpkSEoxWTNSdmNpSXNJbFI1Y0dWRmNuSnZjaUlzSWw5d2IzTnphV0pzWlVOdmJuTjBjblZqZEc5eVVtVjBkWEp1SWl3aWMyVnNaaUlzSW1OaGJHd2lMQ0pTWldabGNtVnVZMlZGY25KdmNpSXNJbDlwYm1obGNtbDBjeUlzSW5OMVlrTnNZWE56SWl3aWMzVndaWEpEYkdGemN5SXNJbkJ5YjNSdmRIbHdaU0lzSWs5aWFtVmpkQ0lzSW1OeVpXRjBaU0lzSW1OdmJuTjBjblZqZEc5eUlpd2lkbUZzZFdVaUxDSmxiblZ0WlhKaFlteGxJaXdpZDNKcGRHRmliR1VpTENKamIyNW1hV2QxY21GaWJHVWlMQ0p6WlhSUWNtOTBiM1I1Y0dWUFppSXNJbDlmY0hKdmRHOWZYeUlzSW1WelkyRndaVXRsZVVOdlpHVWlMQ0pwYzB4bFpuUkRiR2xqYTBWMlpXNTBJaXdpWlhabGJuUWlMQ0ppZFhSMGIyNGlMQ0pwYzAxdlpHbG1hV1ZrUlhabGJuUWlMQ0p0WlhSaFMyVjVJaXdpWVd4MFMyVjVJaXdpWTNSeWJFdGxlU0lzSW5Ob2FXWjBTMlY1SWl3aVVtOXZkRU5zYjNObFYzSmhjSEJsY2lJc0lsOVNaV0ZqZENSRGIyMXdiMjVsYm5RaUxDSndjbTl3Y3lJc0ltTnZiblJsZUhRaUxDSjBhR2x6SWl3aVgzUm9hWE1pTENKaFpHUkZkbVZ1ZEV4cGMzUmxibVZ5Y3lJc0ltUnZZeUlzSW1SdlkzVnRaVzUwVFc5MWMyVkRZWEIwZFhKbFRHbHpkR1Z1WlhJaUxDSm9ZVzVrYkdWTmIzVnpaVU5oY0hSMWNtVWlMQ0prYjJOMWJXVnVkRTF2ZFhObFRHbHpkR1Z1WlhJaUxDSm9ZVzVrYkdWTmIzVnpaU0lzSW1SdlkzVnRaVzUwUzJWNWRYQk1hWE4wWlc1bGNpSXNJbWhoYm1Sc1pVdGxlVlZ3SWl3aWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNuTWlMQ0p5WlcxdmRtVWlMQ0psSWl3aWNISmxkbVZ1ZEUxdmRYTmxVbTl2ZEVOc2IzTmxJaXdpWm1sdVpFUlBUVTV2WkdVaUxDSjBZWEpuWlhRaUxDSnZibEp2YjNSRGJHOXpaU0lzSW10bGVVTnZaR1VpTENKamIyMXdiMjVsYm5SRWFXUk5iM1Z1ZENJc0ltUnBjMkZpYkdWa0lpd2lZMjl0Y0c5dVpXNTBSR2xrVlhCa1lYUmxJaXdpY0hKbGRsQnliM0J6SWl3aVkyOXRjRzl1Wlc1MFYybHNiRlZ1Ylc5MWJuUWlMQ0p5Wlc1a1pYSWlMQ0pqYUdsc1pISmxiaUlzSWtOdmJYQnZibVZ1ZENJc0ltUnBjM0JzWVhsT1lXMWxJaXdpY0hKdmNGUjVjR1Z6SWl3aVpuVnVZeUlzSW1Wc1pXMWxiblFpTENKaWIyOXNJaXdpYjI1bFQyWWlMQ0prWldaaGRXeDBVSEp2Y0hNaUxDSnRiMlIxYkdVaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxHRkJSVUZCTEZGQlFWRkRMRmxCUVdFc1JVRkZja0lzU1VGQlNVTXNWVUZCV1VNc1VVRkJVU3c0UWtGRmNFSkRMRmRCUVdGRExIVkNRVUYxUWtnc1YwRkZjRU5KTEZkQlFXRklMRkZCUVZFc1kwRkZja0pKTEZsQlFXTkdMSFZDUVVGMVFrTXNXVUZGY2tORkxFOUJRVk5NTEZGQlFWRXNVMEZGYWtKTkxGRkJRVlZLTEhWQ1FVRjFRa2NzVVVGRmFrTkZMRlZCUVZsUUxGRkJRVkVzWVVGRmNFSlJMRmRCUVdGT0xIVkNRVUYxUWtzc1YwRkZjRU5GTEd0Q1FVRnZRbFFzVVVGQlVTdzBRa0ZGTlVKVkxHMUNRVUZ4UWxJc2RVSkJRWFZDVHl4dFFrRkZOVU5GTEdWQlFXbENXQ3hSUVVGUkxIbENRVVY2UWxrc1owSkJRV3RDVml4MVFrRkJkVUpUTEdkQ1FVVTNReXhUUVVGVFZDeDFRa0ZCZFVKWExFZEJRVThzVDBGQlQwRXNSMEZCVDBFc1JVRkJTV1lzVjBGQllXVXNSVUZCVFN4RFFVRkZReXhSUVVGVFJDeEhRVVYyUml4VFFVRlRSU3huUWtGQlowSkRMRVZCUVZWRExFZEJRV1VzUzBGQlRVUXNZVUZCYjBKRExFZEJRV2RDTEUxQlFVMHNTVUZCU1VNc1ZVRkJWU3h4UTBGRmFFZ3NVMEZCVTBNc01rSkJRVEpDUXl4RlFVRk5ReXhIUVVGUkxFbEJRVXRFTEVWQlFWRXNUVUZCVFN4SlFVRkpSU3hsUVVGbExEWkVRVUZuUlN4UFFVRlBSQ3hIUVVGNVFpeHBRa0ZCVkVFc1IwRkJjVU1zYlVKQlFWUkJMRVZCUVRoQ1JDeEZRVUZRUXl4RlFVVnNUeXhUUVVGVFJTeFZRVUZWUXl4RlFVRlZReXhIUVVGakxFZEJRVEJDTEcxQ1FVRm1RU3hIUVVFMFF5eFBRVUZtUVN4RlFVRjFRaXhOUVVGTkxFbEJRVWxRTEZWQlFWVXNhMFZCUVc5RlR5eEhRVUZsUkN4RlFVRlRSU3hWUVVGWlF5eFBRVUZQUXl4UFFVRlBTQ3hIUVVGalFTeEZRVUZYUXl4VlFVRlhMRU5CUVVWSExGbEJRV0VzUTBGQlJVTXNUVUZCVDA0c1JVRkJWVThzV1VGQldTeEZRVUZQUXl4VlFVRlZMRVZCUVUxRExHTkJRV01zUzBGQlpWSXNTVUZCV1VVc1QwRkJUMDhzWlVGQmFVSlFMRTlCUVU5UExHVkJRV1ZXTEVWQlFWVkRMRWRCUVdORUxFVkJRVk5YTEZWQlFWbFdMRWRCUldwbExFbEJRVWxYTEdOQlFXZENMRWRCUlhCQ0xGTkJRVk5ETEdsQ1FVRnBRa01zUjBGRGVFSXNUMEZCZDBJc1NVRkJha0pCTEVWQlFVMURMRTlCUjJZc1UwRkJVME1zWjBKQlFXZENSaXhIUVVOMlFpeFRRVUZWUVN4RlFVRk5SeXhUUVVGWFNDeEZRVUZOU1N4UlFVRlZTaXhGUVVGTlN5eFRRVUZYVEN4RlFVRk5UU3hWUVZWd1JTeEpRVUZKUXl4cFFrRkJiVUlzVTBGQlZVTXNSMEZITDBJc1UwRkJVMFFzYVVKQlFXbENSU3hGUVVGUFF5eEhRVU12UW1wRExHZENRVUZuUW10RExFdEJRVTFLTEd0Q1FVVjBRaXhKUVVGSlN5eEZRVUZSTDBJc01rSkJRVEpDT0VJc1MwRkJUVWdzUlVGQmFVSjZRaXhMUVVGTE5FSXNTMEZCVFVZc1JVRkJUME1zU1VGblJHaEdMRTlCT1VOQlJTeEZRVUZOUXl4clFrRkJiMElzVjBGRGVFSXNTVUZCU1dJc1JVRkJVVmtzUlVGQlRVZ3NUVUZCVFZRc1RVRkZjRUpqTEVkQlFVMHNSVUZCU1hoRExHZENRVUZuUWtVc1UwRkJVMjlETEVkQlMzWkRRU3hGUVVGTlJ5dzRRa0ZCSzBJc1JVRkJTVE5ETEcxQ1FVRnRRa2tzVTBGQlUzTkRMRVZCUVV0a0xFVkJRVTlaTEVWQlFVMUpMRzlDUVVGdlFpeEhRVVV6UjBvc1JVRkJUVXNzZFVKQlFYZENMRVZCUVVrM1F5eHRRa0ZCYlVKSkxGTkJRVk56UXl4RlFVRkxaQ3hGUVVGUFdTeEZRVUZOVFN4aFFVVm9SazRzUlVGQlRVOHNkVUpCUVhkQ0xFVkJRVWt2UXl4dFFrRkJiVUpKTEZOQlFWTnpReXhGUVVGTExGRkJRVk5HTEVWQlFVMVJMR05CUjNCR1VpeEZRVUZOVXl4eFFrRkJkVUlzVjBGRGRrSlVMRVZCUVUxSExEaENRVU5TU0N4RlFVRk5SeXcyUWtGQk5rSlBMRk5CUjJwRFZpeEZRVUZOU3l4MVFrRkRVa3dzUlVGQlRVc3NjMEpCUVhOQ1N5eFRRVWN4UWxZc1JVRkJUVThzZFVKQlExSlFMRVZCUVUxUExITkNRVUZ6UWtjc1ZVRkphRU5XTEVWQlFVMUpMRzFDUVVGeFFpeFRRVUZWVHl4SFFVTnVRMWdzUlVGQlRWa3NjMEpCUVhkQ2RFSXNaMEpCUVdkQ2NVSXNTMEZCVDNoQ0xHbENRVUZwUW5kQ0xFdEJRVTBzUlVGQlNUVkVMRmRCUVZkaExGTkJRVk5PTEZkQlFWZE5MRkZCUVZGcFJDeFpRVUZaWWl4SFFVRlJWeXhGUVVGRlJ5eFRRVWN2U1dRc1JVRkJUVTBzV1VGQll5eFRRVUZWU3l4SlFVTjJRbGdzUlVGQlRWa3NkVUpCUVhsQ1dpeEZRVUZOU0N4TlFVRk5hMElzWVVGRE9VTm1MRVZCUVUxSUxFMUJRVTFyUWl4WlFVRlpTaXhKUVVrMVFsZ3NSVUZCVFZFc1dVRkJZeXhUUVVGVlJ5eEhRVU40UWtFc1JVRkJSVXNzVlVGQldUbENMR1ZCUVdsQ1l5eEZRVUZOU0N4TlFVRk5hMElzWVVGRE4wTm1MRVZCUVUxSUxFMUJRVTFyUWl4WlFVRlpTaXhKUVVrMVFsZ3NSVUZCVFZrc2RVSkJRWGRDTEVWQlEzWkNXaXhGUVRKQ1ZDeFBRV2hHUVROQ0xGVkJRVlZ6UWl4cFFrRkJhMEpETEVkQmQwUTFRa1FzYVVKQlFXbENia0lzVlVGQlZYbERMR3RDUVVGdlFpeFRRVUZUUVN4dlFrRkRha1JzUWl4TFFVRkxSaXhOUVVGTmNVSXNWVUZEWkc1Q0xFdEJRVXRGTEhGQ1FVbFVUaXhwUWtGQmFVSnVRaXhWUVVGVk1rTXNiVUpCUVhGQ0xGTkJRVk5CTEcxQ1FVRnRRa01zU1VGRGNrVnlRaXhMUVVGTFJpeE5RVUZOY1VJc1ZVRkJXVVVzUlVGQlZVWXNVMEZEY0VOdVFpeExRVUZMUlN4dlFrRkRTVVlzUzBGQlMwWXNUVUZCVFhGQ0xGZEJRV0ZGTEVWQlFWVkdMRlZCUXpORGJrSXNTMEZCUzFVc2QwSkJTVlJrTEdsQ1FVRnBRbTVDTEZWQlFWVTJReXh4UWtGQmRVSXNVMEZCVTBFc2RVSkJRM0JFZEVJc1MwRkJTMFlzVFVGQlRYRkNMRlZCUTJSdVFpeExRVUZMVlN4M1FrRkpWR1FzYVVKQlFXbENia0lzVlVGQlZUaERMRTlCUVZNc1UwRkJVMEVzVTBGRE0wTXNUMEZCVDNaQ0xFdEJRVXRHTEUxQlFVMHdRaXhWUVVkaU5VSXNhVUpCYWtaakxFTkJhMFp5UW5aRExGRkJRVkZSTEZGQlFWRTBSQ3hYUVVWc1FqZENMR2xDUVVGcFFqaENMRmxCUVdNc2JVSkJSUzlDT1VJc2FVSkJRV2xDSzBJc1ZVRkJXU3hEUVVrelFsZ3NXVUZCWVRkRUxGbEJRVmxWTEZGQlFWRXJSQ3hMUVVscVEwb3NVMEZCVlhKRkxGbEJRVmxWTEZGQlFWRm5SU3hSUVVrNVFsWXNVMEZCVldoRkxGbEJRVmxWTEZGQlFWRnBSU3hMUVVrNVFucERMRTFCUVU5c1F5eFpRVUZaVlN4UlFVRlJhMFVzVFVGQlRTeERRVUZETEZGQlFWTXNaVUZITjBOdVF5eHBRa0ZCYVVKdlF5eGhRVUZsTEVOQlF6bENNME1zVFVGQlR5eFRRVWRVZWtNc1VVRkJVV2xDTEZGQlFWVXJRaXhwUWtGRGJFSnhReXhQUVVGUGNrWXNVVUZCVlVFc1VVRkJhVUlpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdGIzWmxjbXhoZVhNdmJHbGlMMUp2YjNSRGJHOXpaVmR5WVhCd1pYSXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO2V4cG9ydHMuX19lc01vZHVsZT0hMCxleHBvcnRzLmRlZmF1bHQ9ZnVuY3Rpb24oZSxvLHIsdCl7cmV0dXJuKDAsX29uMi5kZWZhdWx0KShlLG8scix0KSx7cmVtb3ZlOmZ1bmN0aW9uIHJlbW92ZSgpeygwLF9vZmYyLmRlZmF1bHQpKGUsbyxyLHQpfX19O3ZhciBfb249cmVxdWlyZShcImRvbS1oZWxwZXJzL2V2ZW50cy9vblwiKSxfb24yPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29uKSxfb2ZmPXJlcXVpcmUoXCJkb20taGVscGVycy9ldmVudHMvb2ZmXCIpLF9vZmYyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29mZik7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19bW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Ga1pFVjJaVzUwVEdsemRHVnVaWEl1YW5NaVhTd2libUZ0WlhNaU9sc2laWGh3YjNKMGN5SXNJbDlmWlhOTmIyUjFiR1VpTENKa1pXWmhkV3gwSWl3aWJtOWtaU0lzSW1WMlpXNTBJaXdpYUdGdVpHeGxjaUlzSW1OaGNIUjFjbVVpTENKZmIyNHlJaXdpY21WdGIzWmxJaXdpWDI5bVpqSWlMQ0pmYjI0aUxDSnlaWEYxYVhKbElpd2lYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENJc0lsOXZabVlpTENKdlltb2lMQ0p0YjJSMWJHVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUlVGQkxGRkJRVkZETEZsQlFXRXNSVUZGY2tKRUxGRkJRVkZGTEZGQlFWVXNVMEZCVlVNc1JVRkJUVU1zUlVGQlQwTXNSVUZCVTBNc1IwRkhhRVFzVDBGR1FTeEZRVUZKUXl4TFFVRkxUQ3hUUVVGVFF5eEZRVUZOUXl4RlFVRlBReXhGUVVGVFF5eEhRVVZxUXl4RFFVTk1SU3hQUVVGUkxGTkJRVk5CTEZWQlEyWXNSVUZCU1VNc1RVRkJUVkFzVTBGQlUwTXNSVUZCVFVNc1JVRkJUME1zUlVGQlUwTXNUVUZMTDBNc1NVRkJTVWtzU1VGQlRVTXNVVUZCVVN4NVFrRkZaRW9zUzBGQlQwc3NkVUpCUVhWQ1JpeExRVVU1UWtjc1MwRkJUMFlzVVVGQlVTd3dRa0ZGWmtZc1RVRkJVVWNzZFVKQlFYVkNReXhOUVVWdVF5eFRRVUZUUkN4MVFrRkJkVUpGTEVkQlFVOHNUMEZCVDBFc1IwRkJUMEVzUlVGQlNXSXNWMEZCWVdFc1JVRkJUU3hEUVVGRldpeFJRVUZUV1N4SFFVVjJSa01zVDBGQlQyWXNVVUZCVlVFc1VVRkJhVUlpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdGIzWmxjbXhoZVhNdmJHbGlMM1YwYVd4ekwyRmtaRVYyWlc1MFRHbHpkR1Z1WlhJdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYWRkRm9jdXNMaXN0ZW5lcihlKXt2YXIgdD12b2lkIDA7cmV0dXJuIWRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXI/KGRvY3VtZW50LmF0dGFjaEV2ZW50KFwib25mb2N1c2luXCIsZSksdD1mdW5jdGlvbiByZW1vdmUoKXtyZXR1cm4gZG9jdW1lbnQuZGV0YWNoRXZlbnQoXCJvbmZvY3VzaW5cIixlKX0pOihkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIixlLCEwKSx0PWZ1bmN0aW9uIHJlbW92ZSgpe3JldHVybiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiZm9jdXNcIixlLCEwKX0pLHtyZW1vdmU6dH19ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD1hZGRGb2N1c0xpc3RlbmVyLG1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltRmtaRVp2WTNWelRHbHpkR1Z1WlhJdWFuTWlYU3dpYm1GdFpYTWlPbHNpWVdSa1JtOWpkWE5NYVhOMFpXNWxjaUlzSW1oaGJtUnNaWElpTENKeVpXMXZkbVVpTENKa2IyTjFiV1Z1ZENJc0ltRmtaRVYyWlc1MFRHbHpkR1Z1WlhJaUxDSmhkSFJoWTJoRmRtVnVkQ0lzSW1SbGRHRmphRVYyWlc1MElpd2ljbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaUlzSW1WNGNHOXlkSE1pTENKZlgyVnpUVzlrZFd4bElpd2laR1ZtWVhWc2RDSXNJbTF2WkhWc1pTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZWUVN4VFFVRlRRU3hwUWtGQmFVSkRMRWRCUTNoQ0xFbEJRMGxETEU5QlFWTXNSVUZqWWl4UFFXWnJRa01zVTBGQlUwTXNhMEpCU1hwQ1JDeFRRVUZUUlN4WlFVRlpMRmxCUVdGS0xFZEJRMnhEUXl4RlFVRlRMRk5CUVZOQkxGTkJRMmhDTEU5QlFVOURMRk5CUVZOSExGbEJRVmtzV1VGQllVd3NUVUZITTBORkxGTkJRVk5ETEdsQ1FVRnBRaXhSUVVGVFNDeEhRVUZUTEVkQlF6VkRReXhGUVVGVExGTkJRVk5CTEZOQlEyaENMRTlCUVU5RExGTkJRVk5KTEc5Q1FVRnZRaXhSUVVGVFRpeEhRVUZUTEV0QlNXNUVMRU5CUVVWRExFOUJRVkZCTEVkQmVFSnVRazBzVVVGQlVVTXNXVUZCWVN4RlFVTnlRa1FzVVVGQlVVVXNVVUZCVlZZc2FVSkJlVUpzUWxjc1QwRkJUMGdzVVVGQlZVRXNVVUZCYVVJaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Y21WaFkzUXRiM1psY214aGVYTXZiR2xpTDNWMGFXeHpMMkZrWkVadlkzVnpUR2x6ZEdWdVpYSXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO2V4cG9ydHMuX19lc01vZHVsZT0hMCxleHBvcnRzLmRlZmF1bHQ9Y2FsY3VsYXRlUG9zaXRpb247dmFyIF9vZmZzZXQ9cmVxdWlyZShcImRvbS1oZWxwZXJzL3F1ZXJ5L29mZnNldFwiKSxfb2Zmc2V0Mj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vZmZzZXQpLF9wb3NpdGlvbj1yZXF1aXJlKFwiZG9tLWhlbHBlcnMvcXVlcnkvcG9zaXRpb25cIiksX3Bvc2l0aW9uMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NpdGlvbiksX3Njcm9sbFRvcD1yZXF1aXJlKFwiZG9tLWhlbHBlcnMvcXVlcnkvc2Nyb2xsVG9wXCIpLF9zY3JvbGxUb3AyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Njcm9sbFRvcCksX293bmVyRG9jdW1lbnQ9cmVxdWlyZShcIi4vb3duZXJEb2N1bWVudFwiKSxfb3duZXJEb2N1bWVudDI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb3duZXJEb2N1bWVudCk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19ZnVuY3Rpb24gZ2V0Q29udGFpbmVyRGltZW5zaW9ucyhlKXt2YXIgdD12b2lkIDAsbz12b2lkIDAsaT12b2lkIDA7aWYoXCJCT0RZXCI9PT1lLnRhZ05hbWUpdD13aW5kb3cuaW5uZXJXaWR0aCxvPXdpbmRvdy5pbm5lckhlaWdodCxpPSgwLF9zY3JvbGxUb3AyLmRlZmF1bHQpKCgwLF9vd25lckRvY3VtZW50Mi5kZWZhdWx0KShlKS5kb2N1bWVudEVsZW1lbnQpfHwoMCxfc2Nyb2xsVG9wMi5kZWZhdWx0KShlKTtlbHNle3ZhciByPSgwLF9vZmZzZXQyLmRlZmF1bHQpKGUpO3Q9ci53aWR0aCxvPXIuaGVpZ2h0LGk9KDAsX3Njcm9sbFRvcDIuZGVmYXVsdCkoZSl9cmV0dXJue3dpZHRoOnQsaGVpZ2h0Om8sc2Nyb2xsOml9fWZ1bmN0aW9uIGdldFRvcERlbHRhKGUsdCxvLGkpe3ZhciByPWdldENvbnRhaW5lckRpbWVuc2lvbnMobyksbj1yLnNjcm9sbCxsPXIuaGVpZ2h0LGY9ZS1pLW4sdT1lK2ktbit0O3JldHVybiBmPDA/LWY6dT5sP2wtdTowfWZ1bmN0aW9uIGdldExlZnREZWx0YShlLHQsbyxpKXt2YXIgcj1nZXRDb250YWluZXJEaW1lbnNpb25zKG8pLndpZHRoLG49ZS1pLGw9ZStpK3Q7cmV0dXJuIG48MD8tbjpsPnI/ci1sOjB9ZnVuY3Rpb24gY2FsY3VsYXRlUG9zaXRpb24oZSx0LG8saSxyKXt2YXIgbj1cIkJPRFlcIj09PWkudGFnTmFtZT8oMCxfb2Zmc2V0Mi5kZWZhdWx0KShvKTooMCxfcG9zaXRpb24yLmRlZmF1bHQpKG8saSksbD0oMCxfb2Zmc2V0Mi5kZWZhdWx0KSh0KSxmPWwuaGVpZ2h0LHU9bC53aWR0aCxzPXZvaWQgMCxhPXZvaWQgMCxkPXZvaWQgMCxwPXZvaWQgMDtpZihcImxlZnRcIj09PWV8fFwicmlnaHRcIj09PWUpe2E9bi50b3ArKG4uaGVpZ2h0LWYpLzIscz1cImxlZnRcIj09PWU/bi5sZWZ0LXU6bi5sZWZ0K24ud2lkdGg7dmFyIGM9Z2V0VG9wRGVsdGEoYSxmLGkscik7YSs9YyxwPTUwKigxLTIqYy9mKStcIiVcIixkPXZvaWQgMH1lbHNle2lmKFwidG9wXCIhPT1lJiZcImJvdHRvbVwiIT09ZSl0aHJvdyBuZXcgRXJyb3IoJ2NhbGNPdmVybGF5UG9zaXRpb24oKTogTm8gc3VjaCBwbGFjZW1lbnQgb2YgXCInK2UrJ1wiIGZvdW5kLicpO3M9bi5sZWZ0KyhuLndpZHRoLXUpLzIsYT1cInRvcFwiPT09ZT9uLnRvcC1mOm4udG9wK24uaGVpZ2h0O3ZhciBfPWdldExlZnREZWx0YShzLHUsaSxyKTtzKz1fLGQ9NTAqKDEtMipfL3UpK1wiJVwiLHA9dm9pZCAwfXJldHVybntwb3NpdGlvbkxlZnQ6cyxwb3NpdGlvblRvcDphLGFycm93T2Zmc2V0TGVmdDpkLGFycm93T2Zmc2V0VG9wOnB9fW1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltTmhiR04xYkdGMFpWQnZjMmwwYVc5dUxtcHpJbDBzSW01aGJXVnpJanBiSW1WNGNHOXlkSE1pTENKZlgyVnpUVzlrZFd4bElpd2laR1ZtWVhWc2RDSXNJbU5oYkdOMWJHRjBaVkJ2YzJsMGFXOXVJaXdpWDI5bVpuTmxkQ0lzSW5KbGNYVnBjbVVpTENKZmIyWm1jMlYwTWlJc0lsOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFpTENKZmNHOXphWFJwYjI0aUxDSmZjRzl6YVhScGIyNHlJaXdpWDNOamNtOXNiRlJ2Y0NJc0lsOXpZM0p2Ykd4VWIzQXlJaXdpWDI5M2JtVnlSRzlqZFcxbGJuUWlMQ0pmYjNkdVpYSkViMk4xYldWdWRESWlMQ0p2WW1vaUxDSm5aWFJEYjI1MFlXbHVaWEpFYVcxbGJuTnBiMjV6SWl3aVkyOXVkR0ZwYm1WeVRtOWtaU0lzSW5kcFpIUm9JaXdpYUdWcFoyaDBJaXdpYzJOeWIyeHNJaXdpZEdGblRtRnRaU0lzSW5kcGJtUnZkeUlzSW1sdWJtVnlWMmxrZEdnaUxDSnBibTVsY2tobGFXZG9kQ0lzSW1SdlkzVnRaVzUwUld4bGJXVnVkQ0lzSWw5blpYUlBabVp6WlhRaUxDSm5aWFJVYjNCRVpXeDBZU0lzSW5SdmNDSXNJbTkyWlhKc1lYbElaV2xuYUhRaUxDSmpiMjUwWVdsdVpYSWlMQ0p3WVdSa2FXNW5JaXdpWTI5dWRHRnBibVZ5UkdsdFpXNXphVzl1Y3lJc0ltTnZiblJoYVc1bGNsTmpjbTlzYkNJc0ltTnZiblJoYVc1bGNraGxhV2RvZENJc0luUnZjRVZrWjJWUFptWnpaWFFpTENKaWIzUjBiMjFGWkdkbFQyWm1jMlYwSWl3aVoyVjBUR1ZtZEVSbGJIUmhJaXdpYkdWbWRDSXNJbTkyWlhKc1lYbFhhV1IwYUNJc0ltTnZiblJoYVc1bGNsZHBaSFJvSWl3aWJHVm1kRVZrWjJWUFptWnpaWFFpTENKeWFXZG9kRVZrWjJWUFptWnpaWFFpTENKd2JHRmpaVzFsYm5RaUxDSnZkbVZ5YkdGNVRtOWtaU0lzSW5SaGNtZGxkQ0lzSW1Ob2FXeGtUMlptYzJWMElpd2lYMmRsZEU5bVpuTmxkRElpTENKd2IzTnBkR2x2Ymt4bFpuUWlMQ0p3YjNOcGRHbHZibFJ2Y0NJc0ltRnljbTkzVDJabWMyVjBUR1ZtZENJc0ltRnljbTkzVDJabWMyVjBWRzl3SWl3aWRHOXdSR1ZzZEdFaUxDSkZjbkp2Y2lJc0lteGxablJFWld4MFlTSXNJbTF2WkhWc1pTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZGUVVFc1VVRkJVVU1zV1VGQllTeEZRVU55UWtRc1VVRkJVVVVzVVVGQlZVTXNhMEpCUld4Q0xFbEJRVWxETEZGQlFWVkRMRkZCUVZFc05FSkJSV3hDUXl4VFFVRlhReXgxUWtGQmRVSklMRk5CUld4RFNTeFZRVUZaU0N4UlFVRlJMRGhDUVVWd1Fra3NWMEZCWVVZc2RVSkJRWFZDUXl4WFFVVndRMFVzVjBGQllVd3NVVUZCVVN3clFrRkZja0pOTEZsQlFXTktMSFZDUVVGMVFrY3NXVUZGY2tORkxHVkJRV2xDVUN4UlFVRlJMRzFDUVVWNlFsRXNaMEpCUVd0Q1RpeDFRa0ZCZFVKTExHZENRVVUzUXl4VFFVRlRUQ3gxUWtGQmRVSlBMRWRCUVU4c1QwRkJUMEVzUjBGQlQwRXNSVUZCU1dJc1YwRkJZV0VzUlVGQlRTeERRVUZGV2l4UlFVRlRXU3hIUVVWMlJpeFRRVUZUUXl4MVFrRkJkVUpETEVkQlF6bENMRWxCUVVsRExFOUJRVkVzUlVGRFVrTXNUMEZCVXl4RlFVTlVReXhQUVVGVExFVkJSV0lzUjBGQk9FSXNVMEZCTVVKSUxFVkJRV05KTEZGQlEyaENTQ3hGUVVGUlNTeFBRVUZQUXl4WFFVTm1TaXhGUVVGVFJ5eFBRVUZQUlN4WlFVVm9Ra29zUjBGQlV5eEZRVUZKVWl4WlFVRlpWQ3hWUVVGVExFVkJRVWxYTEdkQ1FVRm5RbGdzVTBGQlUyTXNSMEZCWlZFc2JVSkJRVzlDTEVWQlFVbGlMRmxCUVZsVUxGTkJRVk5qTEU5QlEzUklMRU5CUTB3c1NVRkJTVk1zUjBGQllTeEZRVUZKYmtJc1UwRkJVMG9zVTBGQlUyTXNSMEZGZGtORExFVkJRVkZSTEVWQlFWZFNMRTFCUTI1Q1F5eEZRVUZUVHl4RlFVRlhVQ3hQUVVWd1FrTXNSMEZCVXl4RlFVRkpVaXhaUVVGWlZDeFRRVUZUWXl4SFFVZHdReXhOUVVGUExFTkJRVVZETEUxQlFVOUJMRVZCUVU5RExFOUJRVkZCTEVWQlFWRkRMRTlCUVZGQkxFZEJSMnBFTEZOQlFWTlBMRmxCUVZsRExFVkJRVXRETEVWQlFXVkRMRVZCUVZkRExFZEJRMnhFTEVsQlFVbERMRVZCUVhOQ2FFSXNkVUpCUVhWQ1l5eEhRVU0zUTBjc1JVRkJhMEpFTEVWQlFXOUNXaXhQUVVOMFEyTXNSVUZCYTBKR0xFVkJRVzlDWWl4UFFVVjBRMmRDTEVWQlFXZENVQ3hGUVVGTlJ5eEZRVUZWUlN4RlFVTm9RMGNzUlVGQmJVSlNMRVZCUVUxSExFVkJRVlZGTEVWQlFXdENTaXhGUVVWNlJDeFBRVUZKVFN4RlFVRm5RaXhIUVVOV1FTeEZRVU5EUXl4RlFVRnRRa1lzUlVGRGNrSkJMRVZCUVd0Q1JTeEZRVVZzUWl4RlFVbFlMRk5CUVZORExHRkJRV0ZETEVWQlFVMURMRVZCUVdOVUxFVkJRVmRETEVkQlEyNUVMRWxCUTBsVExFVkJSSE5DZUVJc2RVSkJRWFZDWXl4SFFVTlNXaXhOUVVWeVEzVkNMRVZCUVdsQ1NDeEZRVUZQVUN4RlFVTjRRbGNzUlVGQmEwSktMRVZCUVU5UUxFVkJRVlZSTEVWQlJYWkRMRTlCUVVsRkxFVkJRV2xDTEVkQlExaEJMRVZCUTBORExFVkJRV3RDUml4RlFVTndRa0VzUlVGQmFVSkZMRVZCUjI1Q0xFVkJSMVFzVTBGQlUzUkRMR3RDUVVGclFuVkRMRVZCUVZkRExFVkJRV0ZETEVWQlFWRm1MRVZCUVZkRExFZEJRM0JGTEVsQlFVbGxMRVZCUVc5RExGTkJRWFJDYUVJc1JVRkJWVlFzVTBGQmNVSXNSVUZCU1dRc1UwRkJVMG9zVTBGQlV6QkRMRWxCUVZVc1JVRkJTVzVETEZkQlFWZFFMRk5CUVZNd1F5eEZRVUZSWml4SFFVVTNSMmxDTEVkQlFXTXNSVUZCU1hoRExGTkJRVk5LTEZOQlFWTjVReXhIUVVOd1EyWXNSVUZCWjBKclFpeEZRVUZaTlVJc1QwRkROVUp2UWl4RlFVRmxVU3hGUVVGWk4wSXNUVUZGTTBJNFFpeFBRVUZsTEVWQlEyWkRMRTlCUVdNc1JVRkRaRU1zVDBGQmEwSXNSVUZEYkVKRExFOUJRV2xDTEVWQlJYSkNMRWRCUVd0Q0xGTkJRV1JTTEVkQlFYTkRMRlZCUVdSQkxFVkJRWFZDTEVOQlEycEVUU3hGUVVGalNDeEZRVUZaYkVJc1MwRkJUMnRDTEVWQlFWa3pRaXhQUVVGVFZTeEhRVUZwUWl4RlFVZHlSVzFDTEVWQlJHZENMRk5CUVdSTUxFVkJRMkZITEVWQlFWbFNMRXRCUVU5RExFVkJSVzVDVHl4RlFVRlpVaXhMUVVGUFVTeEZRVUZaTlVJc1RVRkhhRVFzU1VGQlNXdERMRVZCUVZkNlFpeFpRVUZaYzBJc1JVRkJZWEJDTEVWQlFXVkRMRVZCUVZkRExFZEJSV3hGYTBJc1IwRkJaVWNzUlVGRFprUXNSVUZCYVVJc1NVRkJUU3hGUVVGSkxFVkJRVWxETEVWQlFWZDJRaXhIUVVGcFFpeEpRVU16UkhGQ0xFOUJRV3RDTEUxQlEySXNRMEZCUVN4SFFVRnJRaXhSUVVGa1VDeEhRVUZ4UXl4WFFVRmtRU3hGUVdWb1F5eE5RVUZOTEVsQlFVbFZMRTFCUVUwc1owUkJRV3RFVml4RlFVRlpMRmxCWkRsRlN5eEZRVUZsUml4RlFVRlpVaXhOUVVGUlVTeEZRVUZaTlVJc1RVRkJVWEZDTEVkQlFXZENMRVZCUjNKRlZTeEZRVVJuUWl4UlFVRmtUaXhGUVVOWlJ5eEZRVUZaYkVJc1NVRkJUVU1zUlVGRmJFSnBRaXhGUVVGWmJFSXNTVUZCVFd0Q0xFVkJRVmt6UWl4UFFVYzVReXhKUVVGSmJVTXNSVUZCV1dwQ0xHRkJRV0ZYTEVWQlFXTlVMRVZCUVdOVUxFVkJRVmRETEVkQlJYQkZhVUlzUjBGQlowSk5MRVZCUTJoQ1NpeEZRVUZyUWl4SlFVRk5MRVZCUVVrc1JVRkJTVWtzUlVGQldXWXNSMEZCWjBJc1NVRkROVVJaTEU5QlFXbENMRVZCUzI1Q0xFMUJRVThzUTBGQlJVZ3NZVUZCWTBFc1JVRkJZME1zV1VGQllVRXNSVUZCWVVNc1owSkJRV2xDUVN4RlFVRnBRa01zWlVGQlowSkJMRWRCUlc1SVNTeFBRVUZQZEVRc1VVRkJWVUVzVVVGQmFVSWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F0YjNabGNteGhlWE12YkdsaUwzVjBhV3h6TDJOaGJHTjFiR0YwWlZCdmMybDBhVzl1TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PWdldENvbnRhaW5lcjt2YXIgX3JlYWN0RG9tPXJlcXVpcmUoXCJyZWFjdC1kb21cIiksX3JlYWN0RG9tMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19ZnVuY3Rpb24gZ2V0Q29udGFpbmVyKGUsdCl7cmV0dXJuIGU9XCJmdW5jdGlvblwiPT10eXBlb2YgZT9lKCk6ZSxfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUoZSl8fHR9bW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1kbGRFTnZiblJoYVc1bGNpNXFjeUpkTENKdVlXMWxjeUk2V3lKbGVIQnZjblJ6SWl3aVgxOWxjMDF2WkhWc1pTSXNJbVJsWm1GMWJIUWlMQ0puWlhSRGIyNTBZV2x1WlhJaUxDSmZjbVZoWTNSRWIyMGlMQ0p5WlhGMWFYSmxJaXdpWDNKbFlXTjBSRzl0TWlJc0lsOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFpTENKdlltb2lMQ0pqYjI1MFlXbHVaWElpTENKa1pXWmhkV3gwUTI5dWRHRnBibVZ5SWl3aVptbHVaRVJQVFU1dlpHVWlMQ0p0YjJSMWJHVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUlVGQkxGRkJRVkZETEZsQlFXRXNSVUZEY2tKRUxGRkJRVkZGTEZGQlFWVkRMR0ZCUld4Q0xFbEJRVWxETEZWQlFWbERMRkZCUVZFc1lVRkZjRUpETEZkQlFXRkRMSFZDUVVGMVFrZ3NWMEZGZUVNc1UwRkJVMGNzZFVKQlFYVkNReXhIUVVGUExFOUJRVTlCTEVkQlFVOUJMRVZCUVVsUUxGZEJRV0ZQTEVWQlFVMHNRMEZCUlU0c1VVRkJVMDBzUjBGRmRrWXNVMEZCVTB3c1lVRkJZVTBzUlVGQlYwTXNSMEZGTDBJc1QwRkVRVVFzUlVGQmFVTXNiVUpCUVdSQkxFVkJRVEpDUVN4SlFVRmpRU3hGUVVOeVJFZ3NWMEZCVjBvc1VVRkJVVk1zV1VGQldVWXNTVUZCWTBNc1JVRkZkRVJGTEU5QlFVOWFMRkZCUVZWQkxGRkJRV2xDSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdOMExXOTJaWEpzWVhsekwyeHBZaTkxZEdsc2N5OW5aWFJEYjI1MFlXbHVaWEl1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PWlzT3ZlcmZsb3dpbmc7dmFyIF9pc1dpbmRvdz1yZXF1aXJlKFwiZG9tLWhlbHBlcnMvcXVlcnkvaXNXaW5kb3dcIiksX2lzV2luZG93Mj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1dpbmRvdyksX293bmVyRG9jdW1lbnQ9cmVxdWlyZShcImRvbS1oZWxwZXJzL293bmVyRG9jdW1lbnRcIiksX293bmVyRG9jdW1lbnQyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX293bmVyRG9jdW1lbnQpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fWZ1bmN0aW9uIGlzQm9keShlKXtyZXR1cm4gZSYmXCJib2R5XCI9PT1lLnRhZ05hbWUudG9Mb3dlckNhc2UoKX1mdW5jdGlvbiBib2R5SXNPdmVyZmxvd2luZyhlKXt2YXIgbz0oMCxfb3duZXJEb2N1bWVudDIuZGVmYXVsdCkoZSksdD0oMCxfaXNXaW5kb3cyLmRlZmF1bHQpKG8pLmlubmVyV2lkdGg7aWYoIXQpe3ZhciBpPW8uZG9jdW1lbnRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO3Q9aS5yaWdodC1NYXRoLmFicyhpLmxlZnQpfXJldHVybiBvLmJvZHkuY2xpZW50V2lkdGg8dH1mdW5jdGlvbiBpc092ZXJmbG93aW5nKGUpe3JldHVybigwLF9pc1dpbmRvdzIuZGVmYXVsdCkoZSl8fGlzQm9keShlKT9ib2R5SXNPdmVyZmxvd2luZyhlKTplLnNjcm9sbEhlaWdodD5lLmNsaWVudEhlaWdodH1tb2R1bGUuZXhwb3J0cz1leHBvcnRzLmRlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbWx6VDNabGNtWnNiM2RwYm1jdWFuTWlYU3dpYm1GdFpYTWlPbHNpWlhod2IzSjBjeUlzSWw5ZlpYTk5iMlIxYkdVaUxDSmtaV1poZFd4MElpd2lhWE5QZG1WeVpteHZkMmx1WnlJc0lsOXBjMWRwYm1SdmR5SXNJbkpsY1hWcGNtVWlMQ0pmYVhOWGFXNWtiM2N5SWl3aVgybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ0lzSWw5dmQyNWxja1J2WTNWdFpXNTBJaXdpWDI5M2JtVnlSRzlqZFcxbGJuUXlJaXdpYjJKcUlpd2lhWE5DYjJSNUlpd2libTlrWlNJc0luUmhaMDVoYldVaUxDSjBiMHh2ZDJWeVEyRnpaU0lzSW1KdlpIbEpjMDkyWlhKbWJHOTNhVzVuSWl3aVpHOWpJaXdpWm5Wc2JGZHBaSFJvSWl3aWFXNXVaWEpYYVdSMGFDSXNJbVJ2WTNWdFpXNTBSV3hsYldWdWRGSmxZM1FpTENKa2IyTjFiV1Z1ZEVWc1pXMWxiblFpTENKblpYUkNiM1Z1WkdsdVowTnNhV1Z1ZEZKbFkzUWlMQ0p5YVdkb2RDSXNJazFoZEdnaUxDSmhZbk1pTENKc1pXWjBJaXdpWW05a2VTSXNJbU5zYVdWdWRGZHBaSFJvSWl3aVkyOXVkR0ZwYm1WeUlpd2ljMk55YjJ4c1NHVnBaMmgwSWl3aVkyeHBaVzUwU0dWcFoyaDBJaXdpYlc5a2RXeGxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hoUVVWQlFTeFJRVUZSUXl4WlFVRmhMRVZCUTNKQ1JDeFJRVUZSUlN4UlFVRlZReXhqUVVWc1FpeEpRVUZKUXl4VlFVRlpReXhSUVVGUkxEaENRVVZ3UWtNc1YwRkJZVU1zZFVKQlFYVkNTQ3hYUVVWd1Ewa3NaVUZCYVVKSUxGRkJRVkVzTmtKQlJYcENTU3huUWtGQmEwSkdMSFZDUVVGMVFrTXNaMEpCUlRkRExGTkJRVk5FTEhWQ1FVRjFRa2NzUjBGQlR5eFBRVUZQUVN4SFFVRlBRU3hGUVVGSlZDeFhRVUZoVXl4RlFVRk5MRU5CUVVWU0xGRkJRVk5STEVkQlJYWkdMRk5CUVZORExFOUJRVTlETEVkQlEyUXNUMEZCVDBFc1IwRkJkVU1zVTBGQkwwSkJMRVZCUVV0RExGRkJRVkZETEdOQlJ6bENMRk5CUVZORExHdENRVUZyUWtnc1IwRkRla0lzU1VGQlNVa3NSMEZCVFN4RlFVRkpVQ3huUWtGQlowSlFMRk5CUVZOVkxFZEJSVzVEU3l4SFFVUk5MRVZCUVVsWUxGZEJRVmRLTEZOQlFWTmpMRWRCUTJSRkxGZEJSM0JDTEVsQlFVdEVMRVZCUVZjc1EwRkRaQ3hKUVVGSlJTeEZRVUZ6UWtnc1JVRkJTVWtzWjBKQlFXZENReXgzUWtGRE9VTktMRVZCUVZsRkxFVkJRVzlDUnl4TlFVRlJReXhMUVVGTFF5eEpRVUZKVEN4RlFVRnZRazBzVFVGSGRrVXNUMEZCVDFRc1JVRkJTVlVzUzBGQlMwTXNXVUZCWTFZc1JVRkhhRU1zVTBGQlUyUXNZMEZCWTNsQ0xFZEJSM0pDTEU5QlJsVXNSVUZCU1hSQ0xGZEJRVmRLTEZOQlFWTXdRaXhKUVVWd1FtcENMRTlCUVU5cFFpeEhRVUZoWWl4clFrRkJhMEpoTEVkQlFXRkJMRVZCUVZWRExHRkJRV1ZFTEVWQlFWVkZMR0ZCUlhSSFF5eFBRVUZQTDBJc1VVRkJWVUVzVVVGQmFVSWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F0YjNabGNteGhlWE12YkdsaUwzVjBhV3h6TDJselQzWmxjbVpzYjNkcGJtY3Vhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO2V4cG9ydHMuX19lc01vZHVsZT0hMCxleHBvcnRzLmFyaWFIaWRkZW49YXJpYUhpZGRlbixleHBvcnRzLmhpZGVTaWJsaW5ncz1oaWRlU2libGluZ3MsZXhwb3J0cy5zaG93U2libGluZ3M9c2hvd1NpYmxpbmdzO3ZhciBCTEFDS0xJU1Q9W1widGVtcGxhdGVcIixcInNjcmlwdFwiLFwic3R5bGVcIl0saXNIaWRhYmxlPWZ1bmN0aW9uIGlzSGlkYWJsZShpKXt2YXIgbj1pLm5vZGVUeXBlLGU9aS50YWdOYW1lO3JldHVybiAxPT09biYmLTE9PT1CTEFDS0xJU1QuaW5kZXhPZihlLnRvTG93ZXJDYXNlKCkpfSxzaWJsaW5ncz1mdW5jdGlvbiBzaWJsaW5ncyhpLG4sZSl7bj1bXS5jb25jYXQobiksW10uZm9yRWFjaC5jYWxsKGkuY2hpbGRyZW4sZnVuY3Rpb24oaSl7LTE9PT1uLmluZGV4T2YoaSkmJmlzSGlkYWJsZShpKSYmZShpKX0pfTtmdW5jdGlvbiBhcmlhSGlkZGVuKGksbil7biYmKGk/bi5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLFwidHJ1ZVwiKTpuLnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIpKX1mdW5jdGlvbiBoaWRlU2libGluZ3MoaSxuKXtzaWJsaW5ncyhpLG4sZnVuY3Rpb24oaSl7cmV0dXJuIGFyaWFIaWRkZW4oITAsaSl9KX1mdW5jdGlvbiBzaG93U2libGluZ3MoaSxuKXtzaWJsaW5ncyhpLG4sZnVuY3Rpb24oaSl7cmV0dXJuIGFyaWFIaWRkZW4oITEsaSl9KX1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltMWhibUZuWlVGeWFXRklhV1JrWlc0dWFuTWlYU3dpYm1GdFpYTWlPbHNpWlhod2IzSjBjeUlzSWw5ZlpYTk5iMlIxYkdVaUxDSmhjbWxoU0dsa1pHVnVJaXdpYUdsa1pWTnBZbXhwYm1keklpd2ljMmh2ZDFOcFlteHBibWR6SWl3aVFreEJRMHRNU1ZOVUlpd2lhWE5JYVdSaFlteGxJaXdpWDNKbFppSXNJbTV2WkdWVWVYQmxJaXdpZEdGblRtRnRaU0lzSW1sdVpHVjRUMllpTENKMGIweHZkMlZ5UTJGelpTSXNJbk5wWW14cGJtZHpJaXdpWTI5dWRHRnBibVZ5SWl3aWJXOTFiblFpTENKallpSXNJbU52Ym1OaGRDSXNJbVp2Y2tWaFkyZ2lMQ0pqWVd4c0lpd2lZMmhwYkdSeVpXNGlMQ0p1YjJSbElpd2ljMmh2ZHlJc0luTmxkRUYwZEhKcFluVjBaU0lzSW5KbGJXOTJaVUYwZEhKcFluVjBaU0lzSW0xdmRXNTBUbTlrWlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkZRVUVzVVVGQlVVTXNXVUZCWVN4RlFVTnlRa1FzVVVGQlVVVXNWMEZCWVVFc1YwRkRja0pHTEZGQlFWRkhMR0ZCUVdWQkxHRkJRM1pDU0N4UlFVRlJTU3hoUVVGbFFTeGhRVVYyUWl4SlFVRkpReXhWUVVGWkxFTkJRVU1zVjBGQldTeFRRVUZWTEZOQlJXNURReXhWUVVGWkxGTkJRVk5CTEZWQlFWVkRMRWRCUTJwRExFbEJRVWxETEVWQlFWZEVMRVZCUVV0RExGTkJRMmhDUXl4RlFVRlZSaXhGUVVGTFJTeFJRVU51UWl4UFFVRnZRaXhKUVVGaVJDeEpRVUZuUlN4SlFVRTVRMGdzVlVGQlZVc3NVVUZCVVVRc1JVRkJVVVVzWjBKQlIycEVReXhUUVVGWExGTkJRVk5CTEZOQlFWTkRMRVZCUVZkRExFVkJRVTlETEVkQlEycEVSQ3hGUVVGUkxFZEJRVWRGTEU5QlFVOUdMRWRCUld4Q0xFZEJRVWRITEZGQlFWRkRMRXRCUVV0TUxFVkJRVlZOTEZOQlFWVXNVMEZCVlVNc1NVRkRaaXhKUVVGNlFrNHNSVUZCVFVvc1VVRkJVVlVzU1VGQlowSmtMRlZCUVZWakxFbEJRekZEVEN4RlFVRkhTeXhOUVV0VUxGTkJRVk5zUWl4WFFVRlhiVUlzUlVGQlRVUXNSMEZEYmtKQkxFbEJSMFJETEVWQlEwWkVMRVZCUVV0RkxHRkJRV0VzWTBGQlpTeFJRVVZxUTBZc1JVRkJTMGNzWjBKQlFXZENMR2RDUVVsNlFpeFRRVUZUY0VJc1lVRkJZVlVzUlVGQlYxY3NSMEZETDBKYUxGTkJRVk5ETEVWQlFWZFhMRVZCUVZjc1UwRkJWVW9zUjBGRGRrTXNUMEZCVDJ4Q0xGbEJRVmNzUlVGQlRXdENMRXRCU1RWQ0xGTkJRVk5vUWl4aFFVRmhVeXhGUVVGWFZ5eEhRVU12UWxvc1UwRkJVME1zUlVGQlYxY3NSVUZCVnl4VFFVRlZTaXhIUVVOMlF5eFBRVUZQYkVJc1dVRkJWeXhGUVVGUGEwSWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F0YjNabGNteGhlWE12YkdsaUwzVjBhV3h6TDIxaGJtRm5aVUZ5YVdGSWFXUmtaVzR1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PWZ1bmN0aW9uKGUpe3JldHVybigwLF9vd25lckRvY3VtZW50Mi5kZWZhdWx0KShfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUoZSkpfTt2YXIgX3JlYWN0RG9tPXJlcXVpcmUoXCJyZWFjdC1kb21cIiksX3JlYWN0RG9tMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSksX293bmVyRG9jdW1lbnQ9cmVxdWlyZShcImRvbS1oZWxwZXJzL293bmVyRG9jdW1lbnRcIiksX293bmVyRG9jdW1lbnQyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX293bmVyRG9jdW1lbnQpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fW1vZHVsZS5leHBvcnRzPWV4cG9ydHMuZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltOTNibVZ5Ukc5amRXMWxiblF1YW5NaVhTd2libUZ0WlhNaU9sc2laWGh3YjNKMGN5SXNJbDlmWlhOTmIyUjFiR1VpTENKa1pXWmhkV3gwSWl3aVkyOXRjRzl1Wlc1MFQzSkZiR1Z0Wlc1MElpd2lYMjkzYm1WeVJHOWpkVzFsYm5ReUlpd2lYM0psWVdOMFJHOXRNaUlzSW1acGJtUkVUMDFPYjJSbElpd2lYM0psWVdOMFJHOXRJaXdpY21WeGRXbHlaU0lzSWw5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUWlMQ0pmYjNkdVpYSkViMk4xYldWdWRDSXNJbTlpYWlJc0ltMXZaSFZzWlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1lVRkZRVUVzVVVGQlVVTXNXVUZCWVN4RlFVVnlRa1FzVVVGQlVVVXNVVUZCVlN4VFFVRlZReXhIUVVNeFFpeFBRVUZQTEVWQlFVbERMR2RDUVVGblFrWXNVMEZCVTBjc1YwRkJWMGdzVVVGQlVVa3NXVUZCV1Vnc1MwRkhja1VzU1VGQlNVa3NWVUZCV1VNc1VVRkJVU3hoUVVWd1FrZ3NWMEZCWVVrc2RVSkJRWFZDUml4WFFVVndRMGNzWlVGQmFVSkdMRkZCUVZFc05rSkJSWHBDU2l4blFrRkJhMEpMTEhWQ1FVRjFRa01zWjBKQlJUZERMRk5CUVZORUxIVkNRVUYxUWtVc1IwRkJUeXhQUVVGUFFTeEhRVUZQUVN4RlFVRkpWaXhYUVVGaFZTeEZRVUZOTEVOQlFVVlVMRkZCUVZOVExFZEJSWFpHUXl4UFFVRlBXaXhSUVVGVlFTeFJRVUZwUWlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDMXZkbVZ5YkdGNWN5OXNhV0l2ZFhScGJITXZiM2R1WlhKRWIyTjFiV1Z1ZEM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjtleHBvcnRzLl9fZXNNb2R1bGU9ITA7dmFyIF90eXBlb2Y9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbD9cInN5bWJvbFwiOnR5cGVvZiBlfSxfcmVhY3Q9cmVxdWlyZShcInJlYWN0XCIpLF9yZWFjdDI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpLF9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcj1yZXF1aXJlKFwiLi91dGlscy9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlclwiKSxfY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1mdW5jdGlvbiBlbGVtZW50VHlwZShlLHQscixhLG4pe3ZhciBvPWVbdF0sbD12b2lkIDA9PT1vP1widW5kZWZpbmVkXCI6X3R5cGVvZihvKTtyZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmlzVmFsaWRFbGVtZW50KG8pP25ldyBFcnJvcihcIkludmFsaWQgXCIrYStcIiBgXCIrbitcImAgb2YgdHlwZSBSZWFjdEVsZW1lbnQgc3VwcGxpZWQgdG8gYFwiK3IrXCJgLCBleHBlY3RlZCBhbiBlbGVtZW50IHR5cGUgKGEgc3RyaW5nIG9yIGEgUmVhY3RDbGFzcykuXCIpOlwiZnVuY3Rpb25cIiE9PWwmJlwic3RyaW5nXCIhPT1sP25ldyBFcnJvcihcIkludmFsaWQgXCIrYStcIiBgXCIrbitcImAgb2YgdmFsdWUgYFwiK28rXCJgIHN1cHBsaWVkIHRvIGBcIityK1wiYCwgZXhwZWN0ZWQgYW4gZWxlbWVudCB0eXBlIChhIHN0cmluZyBvciBhIFJlYWN0Q2xhc3MpLlwiKTpudWxsfWV4cG9ydHMuZGVmYXVsdD0oMCxfY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIyLmRlZmF1bHQpKGVsZW1lbnRUeXBlKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltVnNaVzFsYm5SVWVYQmxMbXB6SWwwc0ltNWhiV1Z6SWpwYkltVjRjRzl5ZEhNaUxDSmZYMlZ6VFc5a2RXeGxJaXdpWDNSNWNHVnZaaUlzSWxONWJXSnZiQ0lzSW1sMFpYSmhkRzl5SWl3aWIySnFJaXdpWTI5dWMzUnlkV04wYjNJaUxDSmZjbVZoWTNRaUxDSnlaWEYxYVhKbElpd2lYM0psWVdOME1pSXNJbDlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRaUxDSmZZM0psWVhSbFEyaGhhVzVoWW14bFZIbHdaVU5vWldOclpYSWlMQ0pmWTNKbFlYUmxRMmhoYVc1aFlteGxWSGx3WlVOb1pXTnJaWEl5SWl3aVpHVm1ZWFZzZENJc0ltVnNaVzFsYm5SVWVYQmxJaXdpY0hKdmNITWlMQ0p3Y205d1RtRnRaU0lzSW1OdmJYQnZibVZ1ZEU1aGJXVWlMQ0pzYjJOaGRHbHZiaUlzSW5CeWIzQkdkV3hzVG1GdFpTSXNJbkJ5YjNCV1lXeDFaU0lzSW5CeWIzQlVlWEJsSWl3aWFYTldZV3hwWkVWc1pXMWxiblFpTENKRmNuSnZjaUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzWVVGRlFVRXNVVUZCVVVNc1dVRkJZU3hGUVVWeVFpeEpRVUZKUXl4UlFVRTBRaXh0UWtGQldFTXNVVUZCYjBRc2FVSkJRWEJDUVN4UFFVRlBReXhUUVVGM1FpeFRRVUZWUXl4SFFVRlBMR05CUVdOQkxFZEJRVk1zVTBGQlZVRXNSMEZCVHl4UFFVRlBRU3hIUVVGNVFpeHRRa0ZCV0VZc1VVRkJlVUpGTEVWQlFVbERMR05CUVdkQ1NDeFBRVUZUTEdkQ1FVRnJRa1VzUjBGRmRFOUZMRTlCUVZORExGRkJRVkVzVTBGRmFrSkRMRkZCUVZWRExIVkNRVUYxUWtnc1VVRkZha05KTERSQ1FVRTRRa2dzVVVGQlVTeHpRMEZGZEVOSkxEWkNRVUVyUWtZc2RVSkJRWFZDUXl3MlFrRkZNVVFzVTBGQlUwUXNkVUpCUVhWQ1RDeEhRVUZQTEU5QlFVOUJMRWRCUVU5QkxFVkJRVWxLTEZkQlFXRkpMRVZCUVUwc1EwRkJSVkVzVVVGQlUxSXNSMEZGZGtZc1UwRkJVMU1zV1VGQldVTXNSVUZCVDBNc1JVRkJWVU1zUlVGQlpVTXNSVUZCVlVNc1IwRkROMFFzU1VGQlNVTXNSVUZCV1V3c1JVRkJUVU1zUjBGRGJFSkxMRTlCUVdkRExFbEJRV1JFTEVWQlFUUkNMRmxCUVdOc1FpeFJRVUZSYTBJc1IwRkZlRVVzVDBGQlNWZ3NVVUZCVVVrc1VVRkJVVk1zWlVGQlpVWXNSMEZETVVJc1NVRkJTVWNzVFVGQlRTeFhRVUZoVEN4RlFVRlhMRXRCUVU5RExFVkJRV1VzZFVOQlFTdERSaXhGUVVGblFpd3lSRUZITDBjc1lVRkJZa2tzUjBGQmQwTXNWMEZCWWtFc1JVRkRkRUlzU1VGQlNVVXNUVUZCVFN4WFFVRmhUQ3hGUVVGWExFdEJRVTlETEVWQlFXVXNaVUZCYVVKRExFVkJRVmtzYTBKQlFUQkNTQ3hGUVVGblFpd3lSRUZIYWtrc1MwRkhWR3BDTEZGQlFWRmhMRk5CUVZVc1JVRkJTVVFzTmtKQlFUWkNReXhUUVVGVFF5SXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzF3Y205d0xYUjVjR1Z6TDJ4cFlpOWxiR1Z0Wlc1MFZIbHdaUzVxY3lKOSIsIlwidXNlIHN0cmljdFwiO2Z1bmN0aW9uIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKGUpe2Z1bmN0aW9uIGNoZWNrVHlwZShyLG4sYyxhLGksdCl7dmFyIHU9YXx8XCI8PGFub255bW91cz4+XCIsbD10fHxjO2lmKG51bGw9PW5bY10pcmV0dXJuIHI/bmV3IEVycm9yKFwiUmVxdWlyZWQgXCIraStcIiBgXCIrbCtcImAgd2FzIG5vdCBzcGVjaWZpZWQgaW4gYFwiK3UrXCJgLlwiKTpudWxsO2Zvcih2YXIgbz1hcmd1bWVudHMubGVuZ3RoLHA9QXJyYXkobz42P28tNjowKSxzPTY7czxvO3MrKylwW3MtNl09YXJndW1lbnRzW3NdO3JldHVybiBlLmFwcGx5KHZvaWQgMCxbbixjLHUsaSxsXS5jb25jYXQocCkpfXZhciByPWNoZWNrVHlwZS5iaW5kKG51bGwsITEpO3JldHVybiByLmlzUmVxdWlyZWQ9Y2hlY2tUeXBlLmJpbmQobnVsbCwhMCkscn1leHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PWNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1OeVpXRjBaVU5vWVdsdVlXSnNaVlI1Y0dWRGFHVmphMlZ5TG1weklsMHNJbTVoYldWeklqcGJJbU55WldGMFpVTm9ZV2x1WVdKc1pWUjVjR1ZEYUdWamEyVnlJaXdpZG1Gc2FXUmhkR1VpTENKamFHVmphMVI1Y0dVaUxDSnBjMUpsY1hWcGNtVmtJaXdpY0hKdmNITWlMQ0p3Y205d1RtRnRaU0lzSW1OdmJYQnZibVZ1ZEU1aGJXVWlMQ0pzYjJOaGRHbHZiaUlzSW5CeWIzQkdkV3hzVG1GdFpTSXNJbU52YlhCdmJtVnVkRTVoYldWVFlXWmxJaXdpY0hKdmNFWjFiR3hPWVcxbFUyRm1aU0lzSWtWeWNtOXlJaXdpWDJ4bGJpSXNJbUZ5WjNWdFpXNTBjeUlzSW14bGJtZDBhQ0lzSW1GeVozTWlMQ0pCY25KaGVTSXNJbDlyWlhraUxDSmhjSEJzZVNJc0luVnVaR1ZtYVc1bFpDSXNJbU52Ym1OaGRDSXNJbU5vWVdsdVpXUkRhR1ZqYTFSNWNHVWlMQ0ppYVc1a0lpd2laWGh3YjNKMGN5SXNJbDlmWlhOTmIyUjFiR1VpTENKa1pXWmhkV3gwSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4aFFXVkJMRk5CUVZOQkxESkNRVUV5UWtNc1IwRkRiRU1zVTBGQlUwTXNWVUZCVlVNc1JVRkJXVU1zUlVGQlQwTXNSVUZCVlVNc1JVRkJaVU1zUlVGQlZVTXNSMEZEZGtVc1NVRkJTVU1zUlVGQmIwSklMRWRCUVdsQ0xHZENRVU55UTBrc1JVRkJiVUpHTEVkQlFXZENTQ3hGUVVWMlF5eEhRVUYxUWl4TlFVRnVRa1FzUlVGQlRVTXNSMEZEVWl4UFFVRkpSaXhGUVVOTExFbEJRVWxSTEUxQlFVMHNXVUZCWTBvc1JVRkJWeXhMUVVGUFJ5eEZRVUZ0UWl3eVFrRkJiVU5FTEVWQlFXOUNMRTFCUjNSSUxFdEJSMVFzU1VGQlN5eEpRVUZKUnl4RlFVRlBReXhWUVVGVlF5eFBRVUZSUXl4RlFVRlBReXhOUVVGTlNpeEZRVUZQTEVWQlFVbEJMRVZCUVU4c1JVRkJTU3hIUVVGSlN5eEZRVUZQTEVWQlFVZEJMRVZCUVU5TUxFVkJRVTFMTEVsQlF6bEdSaXhGUVVGTFJTeEZRVUZQTEVkQlFVdEtMRlZCUVZWSkxFZEJSemRDTEU5QlFVOW9RaXhGUVVGVGFVSXNWMEZCVFVNc1JVRkJWeXhEUVVGRFppeEZRVUZQUXl4RlFVRlZTU3hGUVVGdFFrWXNSVUZCVlVjc1IwRkJhMEpWTEU5QlFVOU1MRWxCUnpOSExFbEJRVWxOTEVWQlFXMUNia0lzVlVGQlZXOUNMRXRCUVVzc1RVRkJUU3hIUVVjMVF5eFBRVVpCUkN4RlFVRnBRbXhDTEZkQlFXRkVMRlZCUVZWdlFpeExRVUZMTEUxQlFVMHNSMEZGTlVORUxFVkJjRU5VUlN4UlFVRlJReXhaUVVGaExFVkJRM0pDUkN4UlFVRlJSU3hSUVVGVmVrSWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F0Y0hKdmNDMTBlWEJsY3k5c2FXSXZkWFJwYkhNdlkzSmxZWFJsUTJoaGFXNWhZbXhsVkhsd1pVTm9aV05yWlhJdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7ZXhwb3J0cy5fX2VzTW9kdWxlPSEwLGV4cG9ydHMuZGVmYXVsdD1leHBvcnRzLkVYSVRJTkc9ZXhwb3J0cy5FTlRFUkVEPWV4cG9ydHMuRU5URVJJTkc9ZXhwb3J0cy5FWElURUQ9ZXhwb3J0cy5VTk1PVU5URUQ9dm9pZCAwO3ZhciBQcm9wVHlwZXM9X2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInByb3AtdHlwZXNcIikpLF9yZWFjdD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSksX3JlYWN0RG9tPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LWRvbVwiKSksX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdD1yZXF1aXJlKFwicmVhY3QtbGlmZWN5Y2xlcy1jb21wYXRcIiksX1Byb3BUeXBlcz1yZXF1aXJlKFwiLi91dGlscy9Qcm9wVHlwZXNcIik7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdCh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQodCl7aWYodCYmdC5fX2VzTW9kdWxlKXJldHVybiB0O3ZhciBlPXt9O2lmKG51bGwhPXQpZm9yKHZhciBuIGluIHQpaWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsbikpe3ZhciBvPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSYmT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcj9PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsbik6e307by5nZXR8fG8uc2V0P09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4sbyk6ZVtuXT10W25dfXJldHVybiBlLmRlZmF1bHQ9dCxlfWZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHQsZSl7aWYobnVsbD09dClyZXR1cm57fTt2YXIgbixvLHI9e30saT1PYmplY3Qua2V5cyh0KTtmb3Iobz0wO288aS5sZW5ndGg7bysrKW49aVtvXSxlLmluZGV4T2Yobik+PTB8fChyW25dPXRbbl0pO3JldHVybiByfWZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHQsZSl7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlLnByb3RvdHlwZSksdC5wcm90b3R5cGUuY29uc3RydWN0b3I9dCx0Ll9fcHJvdG9fXz1lfXZhciBVTk1PVU5URUQ9XCJ1bm1vdW50ZWRcIjtleHBvcnRzLlVOTU9VTlRFRD1VTk1PVU5URUQ7dmFyIEVYSVRFRD1cImV4aXRlZFwiO2V4cG9ydHMuRVhJVEVEPUVYSVRFRDt2YXIgRU5URVJJTkc9XCJlbnRlcmluZ1wiO2V4cG9ydHMuRU5URVJJTkc9RU5URVJJTkc7dmFyIEVOVEVSRUQ9XCJlbnRlcmVkXCI7ZXhwb3J0cy5FTlRFUkVEPUVOVEVSRUQ7dmFyIEVYSVRJTkc9XCJleGl0aW5nXCI7ZXhwb3J0cy5FWElUSU5HPUVYSVRJTkc7dmFyIFRyYW5zaXRpb249ZnVuY3Rpb24odCl7ZnVuY3Rpb24gVHJhbnNpdGlvbihlLG4pe3ZhciBvO289dC5jYWxsKHRoaXMsZSxuKXx8dGhpczt2YXIgcixpPW4udHJhbnNpdGlvbkdyb3VwLHM9aSYmIWkuaXNNb3VudGluZz9lLmVudGVyOmUuYXBwZWFyO3JldHVybiBvLmFwcGVhclN0YXR1cz1udWxsLGUuaW4/cz8ocj1FWElURUQsby5hcHBlYXJTdGF0dXM9RU5URVJJTkcpOnI9RU5URVJFRDpyPWUudW5tb3VudE9uRXhpdHx8ZS5tb3VudE9uRW50ZXI/VU5NT1VOVEVEOkVYSVRFRCxvLnN0YXRlPXtzdGF0dXM6cn0sby5uZXh0Q2FsbGJhY2s9bnVsbCxvfV9pbmhlcml0c0xvb3NlKFRyYW5zaXRpb24sdCk7dmFyIGU9VHJhbnNpdGlvbi5wcm90b3R5cGU7cmV0dXJuIGUuZ2V0Q2hpbGRDb250ZXh0PWZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpe3JldHVybnt0cmFuc2l0aW9uR3JvdXA6bnVsbH19LFRyYW5zaXRpb24uZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzPWZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyh0LGUpe3JldHVybiB0LmluJiZlLnN0YXR1cz09PVVOTU9VTlRFRD97c3RhdHVzOkVYSVRFRH06bnVsbH0sZS5jb21wb25lbnREaWRNb3VudD1mdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpe3RoaXMudXBkYXRlU3RhdHVzKCEwLHRoaXMuYXBwZWFyU3RhdHVzKX0sZS5jb21wb25lbnREaWRVcGRhdGU9ZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHQpe3ZhciBlPW51bGw7aWYodCE9PXRoaXMucHJvcHMpe3ZhciBuPXRoaXMuc3RhdGUuc3RhdHVzO3RoaXMucHJvcHMuaW4/biE9PUVOVEVSSU5HJiZuIT09RU5URVJFRCYmKGU9RU5URVJJTkcpOm4hPT1FTlRFUklORyYmbiE9PUVOVEVSRUR8fChlPUVYSVRJTkcpfXRoaXMudXBkYXRlU3RhdHVzKCExLGUpfSxlLmNvbXBvbmVudFdpbGxVbm1vdW50PWZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCl7dGhpcy5jYW5jZWxOZXh0Q2FsbGJhY2soKX0sZS5nZXRUaW1lb3V0cz1mdW5jdGlvbiBnZXRUaW1lb3V0cygpe3ZhciB0LGUsbixvPXRoaXMucHJvcHMudGltZW91dDtyZXR1cm4gdD1lPW49byxudWxsIT1vJiZcIm51bWJlclwiIT10eXBlb2YgbyYmKHQ9by5leGl0LGU9by5lbnRlcixuPW8uYXBwZWFyKSx7ZXhpdDp0LGVudGVyOmUsYXBwZWFyOm59fSxlLnVwZGF0ZVN0YXR1cz1mdW5jdGlvbiB1cGRhdGVTdGF0dXModCxlKXtpZih2b2lkIDA9PT10JiYodD0hMSksbnVsbCE9PWUpe3RoaXMuY2FuY2VsTmV4dENhbGxiYWNrKCk7dmFyIG49X3JlYWN0RG9tLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcyk7ZT09PUVOVEVSSU5HP3RoaXMucGVyZm9ybUVudGVyKG4sdCk6dGhpcy5wZXJmb3JtRXhpdChuKX1lbHNlIHRoaXMucHJvcHMudW5tb3VudE9uRXhpdCYmdGhpcy5zdGF0ZS5zdGF0dXM9PT1FWElURUQmJnRoaXMuc2V0U3RhdGUoe3N0YXR1czpVTk1PVU5URUR9KX0sZS5wZXJmb3JtRW50ZXI9ZnVuY3Rpb24gcGVyZm9ybUVudGVyKHQsZSl7dmFyIG49dGhpcyxvPXRoaXMucHJvcHMuZW50ZXIscj10aGlzLmNvbnRleHQudHJhbnNpdGlvbkdyb3VwP3RoaXMuY29udGV4dC50cmFuc2l0aW9uR3JvdXAuaXNNb3VudGluZzplLGk9dGhpcy5nZXRUaW1lb3V0cygpO2V8fG8/KHRoaXMucHJvcHMub25FbnRlcih0LHIpLHRoaXMuc2FmZVNldFN0YXRlKHtzdGF0dXM6RU5URVJJTkd9LGZ1bmN0aW9uKCl7bi5wcm9wcy5vbkVudGVyaW5nKHQsciksbi5vblRyYW5zaXRpb25FbmQodCxpLmVudGVyLGZ1bmN0aW9uKCl7bi5zYWZlU2V0U3RhdGUoe3N0YXR1czpFTlRFUkVEfSxmdW5jdGlvbigpe24ucHJvcHMub25FbnRlcmVkKHQscil9KX0pfSkpOnRoaXMuc2FmZVNldFN0YXRlKHtzdGF0dXM6RU5URVJFRH0sZnVuY3Rpb24oKXtuLnByb3BzLm9uRW50ZXJlZCh0KX0pfSxlLnBlcmZvcm1FeGl0PWZ1bmN0aW9uIHBlcmZvcm1FeGl0KHQpe3ZhciBlPXRoaXMsbj10aGlzLnByb3BzLmV4aXQsbz10aGlzLmdldFRpbWVvdXRzKCk7bj8odGhpcy5wcm9wcy5vbkV4aXQodCksdGhpcy5zYWZlU2V0U3RhdGUoe3N0YXR1czpFWElUSU5HfSxmdW5jdGlvbigpe2UucHJvcHMub25FeGl0aW5nKHQpLGUub25UcmFuc2l0aW9uRW5kKHQsby5leGl0LGZ1bmN0aW9uKCl7ZS5zYWZlU2V0U3RhdGUoe3N0YXR1czpFWElURUR9LGZ1bmN0aW9uKCl7ZS5wcm9wcy5vbkV4aXRlZCh0KX0pfSl9KSk6dGhpcy5zYWZlU2V0U3RhdGUoe3N0YXR1czpFWElURUR9LGZ1bmN0aW9uKCl7ZS5wcm9wcy5vbkV4aXRlZCh0KX0pfSxlLmNhbmNlbE5leHRDYWxsYmFjaz1mdW5jdGlvbiBjYW5jZWxOZXh0Q2FsbGJhY2soKXtudWxsIT09dGhpcy5uZXh0Q2FsbGJhY2smJih0aGlzLm5leHRDYWxsYmFjay5jYW5jZWwoKSx0aGlzLm5leHRDYWxsYmFjaz1udWxsKX0sZS5zYWZlU2V0U3RhdGU9ZnVuY3Rpb24gc2FmZVNldFN0YXRlKHQsZSl7ZT10aGlzLnNldE5leHRDYWxsYmFjayhlKSx0aGlzLnNldFN0YXRlKHQsZSl9LGUuc2V0TmV4dENhbGxiYWNrPWZ1bmN0aW9uIHNldE5leHRDYWxsYmFjayh0KXt2YXIgZT10aGlzLG49ITA7cmV0dXJuIHRoaXMubmV4dENhbGxiYWNrPWZ1bmN0aW9uKG8pe24mJihuPSExLGUubmV4dENhbGxiYWNrPW51bGwsdChvKSl9LHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbD1mdW5jdGlvbigpe249ITF9LHRoaXMubmV4dENhbGxiYWNrfSxlLm9uVHJhbnNpdGlvbkVuZD1mdW5jdGlvbiBvblRyYW5zaXRpb25FbmQodCxlLG4pe3RoaXMuc2V0TmV4dENhbGxiYWNrKG4pLHQ/KHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXImJnRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIodCx0aGlzLm5leHRDYWxsYmFjayksbnVsbCE9ZSYmc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjayxlKSk6c2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywwKX0sZS5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIHQ9dGhpcy5zdGF0ZS5zdGF0dXM7aWYodD09PVVOTU9VTlRFRClyZXR1cm4gbnVsbDt2YXIgZT10aGlzLnByb3BzLG49ZS5jaGlsZHJlbixvPV9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKGUsW1wiY2hpbGRyZW5cIl0pO2lmKGRlbGV0ZSBvLmluLGRlbGV0ZSBvLm1vdW50T25FbnRlcixkZWxldGUgby51bm1vdW50T25FeGl0LGRlbGV0ZSBvLmFwcGVhcixkZWxldGUgby5lbnRlcixkZWxldGUgby5leGl0LGRlbGV0ZSBvLnRpbWVvdXQsZGVsZXRlIG8uYWRkRW5kTGlzdGVuZXIsZGVsZXRlIG8ub25FbnRlcixkZWxldGUgby5vbkVudGVyaW5nLGRlbGV0ZSBvLm9uRW50ZXJlZCxkZWxldGUgby5vbkV4aXQsZGVsZXRlIG8ub25FeGl0aW5nLGRlbGV0ZSBvLm9uRXhpdGVkLFwiZnVuY3Rpb25cIj09dHlwZW9mIG4pcmV0dXJuIG4odCxvKTt2YXIgcj1fcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5vbmx5KG4pO3JldHVybiBfcmVhY3QuZGVmYXVsdC5jbG9uZUVsZW1lbnQocixvKX0sVHJhbnNpdGlvbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtmdW5jdGlvbiBub29wKCl7fVRyYW5zaXRpb24uY29udGV4dFR5cGVzPXt0cmFuc2l0aW9uR3JvdXA6UHJvcFR5cGVzLm9iamVjdH0sVHJhbnNpdGlvbi5jaGlsZENvbnRleHRUeXBlcz17dHJhbnNpdGlvbkdyb3VwOmZ1bmN0aW9uIHRyYW5zaXRpb25Hcm91cCgpe319LFRyYW5zaXRpb24ucHJvcFR5cGVzPVwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/e2NoaWxkcmVuOlByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsUHJvcFR5cGVzLmVsZW1lbnQuaXNSZXF1aXJlZF0pLmlzUmVxdWlyZWQsaW46UHJvcFR5cGVzLmJvb2wsbW91bnRPbkVudGVyOlByb3BUeXBlcy5ib29sLHVubW91bnRPbkV4aXQ6UHJvcFR5cGVzLmJvb2wsYXBwZWFyOlByb3BUeXBlcy5ib29sLGVudGVyOlByb3BUeXBlcy5ib29sLGV4aXQ6UHJvcFR5cGVzLmJvb2wsdGltZW91dDpmdW5jdGlvbiB0aW1lb3V0KHQpe3ZhciBlPVwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/X1Byb3BUeXBlcy50aW1lb3V0c1NoYXBlOnt9O3QuYWRkRW5kTGlzdGVuZXJ8fChlPWUuaXNSZXF1aXJlZCk7Zm9yKHZhciBuPWFyZ3VtZW50cy5sZW5ndGgsbz1uZXcgQXJyYXkobj4xP24tMTowKSxyPTE7cjxuO3IrKylvW3ItMV09YXJndW1lbnRzW3JdO3JldHVybiBlLmFwcGx5KHZvaWQgMCxbdF0uY29uY2F0KG8pKX0sYWRkRW5kTGlzdGVuZXI6UHJvcFR5cGVzLmZ1bmMsb25FbnRlcjpQcm9wVHlwZXMuZnVuYyxvbkVudGVyaW5nOlByb3BUeXBlcy5mdW5jLG9uRW50ZXJlZDpQcm9wVHlwZXMuZnVuYyxvbkV4aXQ6UHJvcFR5cGVzLmZ1bmMsb25FeGl0aW5nOlByb3BUeXBlcy5mdW5jLG9uRXhpdGVkOlByb3BUeXBlcy5mdW5jfTp7fSxUcmFuc2l0aW9uLmRlZmF1bHRQcm9wcz17aW46ITEsbW91bnRPbkVudGVyOiExLHVubW91bnRPbkV4aXQ6ITEsYXBwZWFyOiExLGVudGVyOiEwLGV4aXQ6ITAsb25FbnRlcjpub29wLG9uRW50ZXJpbmc6bm9vcCxvbkVudGVyZWQ6bm9vcCxvbkV4aXQ6bm9vcCxvbkV4aXRpbmc6bm9vcCxvbkV4aXRlZDpub29wfSxUcmFuc2l0aW9uLlVOTU9VTlRFRD0wLFRyYW5zaXRpb24uRVhJVEVEPTEsVHJhbnNpdGlvbi5FTlRFUklORz0yLFRyYW5zaXRpb24uRU5URVJFRD0zLFRyYW5zaXRpb24uRVhJVElORz00O3ZhciBfZGVmYXVsdD0oMCxfcmVhY3RMaWZlY3ljbGVzQ29tcGF0LnBvbHlmaWxsKShUcmFuc2l0aW9uKTtleHBvcnRzLmRlZmF1bHQ9X2RlZmF1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbFJ5WVc1emFYUnBiMjR1YW5NaVhTd2libUZ0WlhNaU9sc2laWGh3YjNKMGN5SXNJbDlmWlhOTmIyUjFiR1VpTENKa1pXWmhkV3gwSWl3aVJWaEpWRWxPUnlJc0lrVk9WRVZTUlVRaUxDSkZUbFJGVWtsT1J5SXNJa1ZZU1ZSRlJDSXNJbFZPVFU5VlRsUkZSQ0lzSWxCeWIzQlVlWEJsY3lJc0lsOXBiblJsY205d1VtVnhkV2x5WlZkcGJHUmpZWEprSWl3aWNtVnhkV2x5WlNJc0lsOXlaV0ZqZENJc0lsOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFpTENKZmNtVmhZM1JFYjIwaUxDSmZjbVZoWTNSTWFXWmxZM2xqYkdWelEyOXRjR0YwSWl3aVgxQnliM0JVZVhCbGN5SXNJbTlpYWlJc0ltNWxkMDlpYWlJc0ltdGxlU0lzSWs5aWFtVmpkQ0lzSW5CeWIzUnZkSGx3WlNJc0ltaGhjMDkzYmxCeWIzQmxjblI1SWl3aVkyRnNiQ0lzSW1SbGMyTWlMQ0prWldacGJtVlFjbTl3WlhKMGVTSXNJbWRsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNpSXNJbWRsZENJc0luTmxkQ0lzSWw5dlltcGxZM1JYYVhSb2IzVjBVSEp2Y0dWeWRHbGxjMHh2YjNObElpd2ljMjkxY21ObElpd2laWGhqYkhWa1pXUWlMQ0pwSWl3aWRHRnlaMlYwSWl3aWMyOTFjbU5sUzJWNWN5SXNJbXRsZVhNaUxDSnNaVzVuZEdnaUxDSnBibVJsZUU5bUlpd2lYMmx1YUdWeWFYUnpURzl2YzJVaUxDSnpkV0pEYkdGemN5SXNJbk4xY0dWeVEyeGhjM01pTENKamNtVmhkR1VpTENKamIyNXpkSEoxWTNSdmNpSXNJbDlmY0hKdmRHOWZYeUlzSWxSeVlXNXphWFJwYjI0aUxDSmZVbVZoWTNRa1EyOXRjRzl1Wlc1MElpd2ljSEp2Y0hNaUxDSmpiMjUwWlhoMElpd2lYM1JvYVhNaUxDSjBhR2x6SWl3aWFXNXBkR2xoYkZOMFlYUjFjeUlzSW5CaGNtVnVkRWR5YjNWd0lpd2lkSEpoYm5OcGRHbHZia2R5YjNWd0lpd2lZWEJ3WldGeUlpd2lhWE5OYjNWdWRHbHVaeUlzSW1WdWRHVnlJaXdpWVhCd1pXRnlVM1JoZEhWeklpd2lhVzRpTENKMWJtMXZkVzUwVDI1RmVHbDBJaXdpYlc5MWJuUlBia1Z1ZEdWeUlpd2ljM1JoZEdVaUxDSnpkR0YwZFhNaUxDSnVaWGgwUTJGc2JHSmhZMnNpTENKZmNISnZkRzhpTENKblpYUkRhR2xzWkVOdmJuUmxlSFFpTENKblpYUkVaWEpwZG1Wa1UzUmhkR1ZHY205dFVISnZjSE1pTENKZmNtVm1JaXdpY0hKbGRsTjBZWFJsSWl3aVkyOXRjRzl1Wlc1MFJHbGtUVzkxYm5RaUxDSjFjR1JoZEdWVGRHRjBkWE1pTENKamIyMXdiMjVsYm5SRWFXUlZjR1JoZEdVaUxDSndjbVYyVUhKdmNITWlMQ0p1WlhoMFUzUmhkSFZ6SWl3aVkyOXRjRzl1Wlc1MFYybHNiRlZ1Ylc5MWJuUWlMQ0pqWVc1alpXeE9aWGgwUTJGc2JHSmhZMnNpTENKblpYUlVhVzFsYjNWMGN5SXNJbVY0YVhRaUxDSjBhVzFsYjNWMElpd2liVzkxYm5ScGJtY2lMQ0p1YjJSbElpd2labWx1WkVSUFRVNXZaR1VpTENKd1pYSm1iM0p0Ulc1MFpYSWlMQ0p3WlhKbWIzSnRSWGhwZENJc0luTmxkRk4wWVhSbElpd2lYM1JvYVhNeUlpd2lZWEJ3WldGeWFXNW5JaXdpZEdsdFpXOTFkSE1pTENKdmJrVnVkR1Z5SWl3aWMyRm1aVk5sZEZOMFlYUmxJaXdpYjI1RmJuUmxjbWx1WnlJc0ltOXVWSEpoYm5OcGRHbHZia1Z1WkNJc0ltOXVSVzUwWlhKbFpDSXNJbDkwYUdsek15SXNJbTl1UlhocGRDSXNJbTl1UlhocGRHbHVaeUlzSW05dVJYaHBkR1ZrSWl3aVkyRnVZMlZzSWl3aWJtVjRkRk4wWVhSbElpd2lZMkZzYkdKaFkyc2lMQ0p6WlhST1pYaDBRMkZzYkdKaFkyc2lMQ0pmZEdocGN6UWlMQ0poWTNScGRtVWlMQ0psZG1WdWRDSXNJbWhoYm1Sc1pYSWlMQ0poWkdSRmJtUk1hWE4wWlc1bGNpSXNJbk5sZEZScGJXVnZkWFFpTENKeVpXNWtaWElpTENKZmRHaHBjeVJ3Y205d2N5SXNJbU5vYVd4a2NtVnVJaXdpWTJocGJHUlFjbTl3Y3lJc0ltTm9hV3hrSWl3aVEyaHBiR1J5Wlc0aUxDSnZibXg1SWl3aVkyeHZibVZGYkdWdFpXNTBJaXdpUTI5dGNHOXVaVzUwSWl3aWJtOXZjQ0lzSW1OdmJuUmxlSFJVZVhCbGN5SXNJbTlpYW1WamRDSXNJbU5vYVd4a1EyOXVkR1Y0ZEZSNWNHVnpJaXdpY0hKdmNGUjVjR1Z6SWl3aWNISnZZMlZ6Y3lJc0ltVnVkaUlzSWs1UFJFVmZSVTVXSWl3aWIyNWxUMlpVZVhCbElpd2lablZ1WXlJc0ltbHpVbVZ4ZFdseVpXUWlMQ0psYkdWdFpXNTBJaXdpWW05dmJDSXNJbkIwSWl3aWRHbHRaVzkxZEhOVGFHRndaU0lzSWw5c1pXNGlMQ0poY21kMWJXVnVkSE1pTENKaGNtZHpJaXdpUVhKeVlYa2lMQ0pmYTJWNUlpd2lZWEJ3YkhraUxDSmpiMjVqWVhRaUxDSmtaV1poZFd4MFVISnZjSE1pTENKZlpHVm1ZWFZzZENJc0luQnZiSGxtYVd4c0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVVZCUVN4UlFVRlJReXhaUVVGaExFVkJRM0pDUkN4UlFVRlJSU3hSUVVGVlJpeFJRVUZSUnl4UlFVRlZTQ3hSUVVGUlNTeFJRVUZWU2l4UlFVRlJTeXhUUVVGWFRDeFJRVUZSVFN4UFFVRlRUaXhSUVVGUlR5eGxRVUZaTEVWQlJUbEhMRWxCUVVsRExGVkJRVmxETEhkQ1FVRjNRa01zVVVGQlVTeGxRVVUxUTBNc1QwRkJVME1zZFVKQlFYVkNSaXhSUVVGUkxGVkJSWGhEUnl4VlFVRlpSQ3gxUWtGQmRVSkdMRkZCUVZFc1kwRkZNME5KTEhWQ1FVRjVRa29zVVVGQlVTd3lRa0ZGYWtOTExGZEJRV0ZNTEZGQlFWRXNjVUpCUlhwQ0xGTkJRVk5GTEhWQ1FVRjFRa2tzUjBGQlR5eFBRVUZQUVN4SFFVRlBRU3hGUVVGSlppeFhRVUZoWlN4RlFVRk5MRU5CUVVWa0xGRkJRVk5qTEVkQlJYWkdMRk5CUVZOUUxIZENRVUYzUWs4c1IwRkJUeXhIUVVGSlFTeEhRVUZQUVN4RlFVRkpaaXhYUVVGakxFOUJRVTlsTEVWQlFXTXNTVUZCU1VNc1JVRkJVeXhIUVVGSkxFZEJRVmNzVFVGQlVFUXNSVUZCWlN4SlFVRkxMRWxCUVVsRkxFdEJRVTlHTEVWQlFVOHNSMEZCU1Vjc1QwRkJUME1zVlVGQlZVTXNaVUZCWlVNc1MwRkJTMDRzUlVGQlMwVXNSMEZCVFN4RFFVRkZMRWxCUVVsTExFVkJRVTlLTEU5QlFVOUxMR2RDUVVGclFrd3NUMEZCVDAwc2VVSkJRVEpDVGl4UFFVRlBUU3g1UWtGQmVVSlVMRVZCUVV0RkxFZEJRVThzUjBGQlVVc3NSVUZCUzBjc1MwRkJUMGdzUlVGQlMwa3NTVUZCVDFJc1QwRkJUMHNzWlVGQlpWQXNSVUZCVVVNc1JVRkJTMHNzUjBGQlowSk9MRVZCUVU5RExFZEJRVTlHTEVWQlFVbEZMRWRCUVc5RExFOUJRWFJDUkN4RlFVRlBaaXhSUVVGVll5eEZRVUZaUXl4RlFVVTNZeXhUUVVGVFZ5dzRRa0ZCT0VKRExFVkJRVkZETEVkQlFWa3NSMEZCWXl4TlFVRldSQ3hGUVVGblFpeE5RVUZQTEVkQlFVa3NTVUZCTWtSWUxFVkJRVXRoTEVWQlFUVkVReXhGUVVGVExFZEJRVkZETEVWQlFXRmtMRTlCUVU5bExFdEJRVXRNTEVkQlFYRkNMRWxCUVV0RkxFVkJRVWtzUlVGQlIwRXNSVUZCU1VVc1JVRkJWMFVzVDBGQlVVb3NTVUZCVDJJc1JVRkJUV1VzUlVGQlYwWXNSMEZCVVVRc1JVRkJVMDBzVVVGQlVXeENMRWxCUVZFc1NVRkJZV01zUlVGQlQyUXNSMEZCVDFjc1JVRkJUMWdzU1VGQlVTeFBRVUZQWXl4RlFVVXhVeXhUUVVGVFN5eGxRVUZsUXl4RlFVRlZReXhIUVVGalJDeEZRVUZUYkVJc1ZVRkJXVVFzVDBGQlQzRkNMRTlCUVU5RUxFVkJRVmR1UWl4WFFVRlphMElzUlVGQlUyeENMRlZCUVZWeFFpeFpRVUZqU0N4RlFVRlZRU3hGUVVGVFNTeFZRVUZaU0N4RlFVVXhTeXhKUVVGSmFFTXNWVUZCV1N4WlFVTm9RbEFzVVVGQlVVOHNWVUZCV1VFc1ZVRkRjRUlzU1VGQlNVUXNUMEZCVXl4VFFVTmlUaXhSUVVGUlRTeFBRVUZUUVN4UFFVTnFRaXhKUVVGSlJDeFRRVUZYTEZkQlEyWk1MRkZCUVZGTExGTkJRVmRCTEZOQlEyNUNMRWxCUVVsRUxGRkJRVlVzVlVGRFpFb3NVVUZCVVVrc1VVRkJWVUVzVVVGRGJFSXNTVUZCU1VRc1VVRkJWU3hWUVdsSFpFZ3NVVUZCVVVjc1VVRkJWVUVzVVVGRmJFSXNTVUZCU1hkRExGZEJSVW9zVTBGQlZVTXNSMEZIVWl4VFFVRlRSQ3hYUVVGWFJTeEZRVUZQUXl4SFFVTjZRaXhKUVVGSlF5eEZRVVZLUVN4RlFVRlJTQ3hGUVVGcFFuUkNMRXRCUVVzd1FpeExRVUZOU0N4RlFVRlBReXhKUVVGWlJTeExRVU4yUkN4SlFVZEpReXhGUVVoQlF5eEZRVUZqU2l4RlFVRlJTeXhuUWtGRmRFSkRMRVZCUVZOR0xFbEJRV2RDUVN4RlFVRlpSeXhYUVVGaFVpeEZRVUZOVXl4TlFVRlJWQ3hGUVVGTlR5eFBRWFZDTVVVc1QwRnlRa0ZNTEVWQlFVMVJMR0ZCUVdVc1MwRkZha0pXTEVWQlFVMVhMRWRCUTBwS0xFZEJRMFpJTEVWQlFXZENNME1zVDBGRGFFSjVReXhGUVVGTlVTeGhRVUZsYkVRc1ZVRkZja0kwUXl4RlFVRm5RamRETEZGQlNXaENOa01zUlVGRVJVb3NSVUZCVFZrc1pVRkJhVUphTEVWQlFVMWhMR0ZCUTJadVJDeFZRVVZCUkN4UFFVbHdRbmxETEVWQlFVMVpMRTFCUVZFc1EwRkRXa01zVDBGQlVWZ3NSMEZGVmtZc1JVRkJUV01zWVVGQlpTeExRVU5rWkN4RlFTOUNWRllzWlVGQlpVMHNWMEZCV1VNc1IwRnJRek5DTEVsQlFVbHJRaXhGUVVGVGJrSXNWMEZCVjNaQ0xGVkJhMUY0UWl4UFFXaFJRVEJETEVWQlFVOURMR2RDUVVGclFpeFRRVUZUUVN4clFrRkRhRU1zVFVGQlR5eERRVU5NV2l4blFrRkJhVUlzVDBGTGNrSlNMRmRCUVZkeFFpeDVRa0ZCTWtJc1UwRkJVMEVzZVVKQlFYbENReXhGUVVGTlF5eEhRVWMxUlN4UFFVWmhSQ3hGUVVGTFZDeEpRVVZLVlN4RlFVRlZUaXhUUVVGWGNrUXNWVUZETVVJc1EwRkRUSEZFTEU5QlFWRjBSQ3hSUVVsTUxFMUJiVUpVZDBRc1JVRkJUMHNzYTBKQlFXOUNMRk5CUVZOQkxHOUNRVU5zUTI1Q0xFdEJRVXR2UWl4alFVRmhMRVZCUVUxd1FpeExRVUZMVHl4bFFVY3ZRazhzUlVGQlQwOHNiVUpCUVhGQ0xGTkJRVk5CTEcxQ1FVRnRRa01zUjBGRGRFUXNTVUZCU1VNc1JVRkJZU3hMUVVWcVFpeEhRVUZKUkN4SlFVRmpkRUlzUzBGQlMwZ3NUVUZCVHl4RFFVTTFRaXhKUVVGSlpTeEZRVUZUV2l4TFFVRkxWeXhOUVVGTlF5eFBRVVZ3UWxvc1MwRkJTMGdzVFVGQlRWY3NSMEZEVkVrc1NVRkJWM1pFTEZWQlFWbDFSQ3hKUVVGWGVFUXNWVUZEY0VOdFJTeEZRVUZoYkVVc1ZVRkhXSFZFTEVsQlFWZDJSQ3hWUVVGWmRVUXNTVUZCVjNoRUxGVkJRM0JEYlVVc1JVRkJZWEJGTEZOQlMyNUNOa01zUzBGQlMyOUNMR05CUVdFc1JVRkJUMGNzU1VGSE0wSlVMRVZCUVU5VkxIRkNRVUYxUWl4VFFVRlRRU3gxUWtGRGNrTjRRaXhMUVVGTGVVSXNjMEpCUjFCWUxFVkJRVTlaTEZsQlFXTXNVMEZCVTBFc1kwRkROVUlzU1VGRFNVTXNSVUZCVFhKQ0xFVkJRVTlHTEVWQlJHSjNRaXhGUVVGVk5VSXNTMEZCUzBnc1RVRkJUU3RDTEZGQlZYcENMRTlCVWtGRUxFVkJRVTl5UWl4RlFVRlJSaXhGUVVGVGQwSXNSVUZGVkN4TlFVRllRU3hIUVVGelF5eHBRa0ZCV2tFc1NVRkROVUpFTEVWQlFVOURMRVZCUVZGRUxFdEJRMlp5UWl4RlFVRlJjMElzUlVGQlVYUkNMRTFCUTJoQ1JpeEZRVUZUZDBJc1JVRkJVWGhDTEZGQlIxb3NRMEZEVEhWQ0xFdEJRVTFCTEVWQlEwNXlRaXhOUVVGUFFTeEZRVU5RUml4UFFVRlJRU3hKUVVsYVZTeEZRVUZQVFN4aFFVRmxMRk5CUVZOQkxHRkJRV0ZUTEVWQlFWVk9MRWRCUzNCRUxGRkJTbWxDTEVsQlFXSk5MRWxCUTBaQkxFZEJRVmNzUjBGSFRTeFBRVUZtVGl4RlFVRnhRaXhEUVVWMlFuWkNMRXRCUVV0NVFpeHhRa0ZGVEN4SlFVRkpTeXhGUVVGUGFrVXNWVUZCVlZnc1VVRkJVVFpGTEZsQlFWa3ZRaXhOUVVWeVEzVkNMRWxCUVdWc1JTeFRRVU5xUWpKRExFdEJRVXRuUXl4aFFVRmhSaXhGUVVGTlJDeEhRVVY0UWpkQ0xFdEJRVXRwUXl4WlFVRlpTQ3hSUVVWV09VSXNTMEZCUzBnc1RVRkJUVmtzWlVGQmFVSlVMRXRCUVV0WExFMUJRVTFETEZOQlFWZDBSQ3hSUVVNelJEQkRMRXRCUVV0clF5eFRRVUZUTEVOQlExcDBRaXhQUVVGUmNrUXNZVUZMWkhWRUxFVkJRVTlyUWl4aFFVRmxMRk5CUVZOQkxHRkJRV0ZHTEVWQlFVMUVMRWRCUTJoRUxFbEJRVWxOTEVWQlFWTnVReXhMUVVWVVRTeEZRVUZSVGl4TFFVRkxTQ3hOUVVGTlV5eE5RVU51UWpoQ0xFVkJRVmx3UXl4TFFVRkxSaXhSUVVGUlN5eG5Ra0ZCYTBKSUxFdEJRVXRHTEZGQlFWRkxMR2RDUVVGblFrVXNWMEZCWVhkQ0xFVkJRM0pHVVN4RlFVRlhja01zUzBGQlN6QkNMR05CUjJaSExFZEJRV0YyUWl4SFFWTnNRazRzUzBGQlMwZ3NUVUZCVFhsRExGRkJRVkZTTEVWQlFVMU5MRWRCUTNwQ2NFTXNTMEZCUzNWRExHRkJRV0VzUTBGRGFFSXpRaXhQUVVGUmRrUXNWVUZEVUN4WFFVTkVPRVVzUlVGQlQzUkRMRTFCUVUweVF5eFhRVUZYVml4RlFVRk5UU3hIUVVjNVFrUXNSVUZCVDAwc1owSkJRV2RDV0N4RlFVRk5UeXhGUVVGVEwwSXNUVUZCVHl4WFFVTXpRelpDTEVWQlFVOUpMR0ZCUVdFc1EwRkRiRUl6UWl4UFFVRlJlRVFzVTBGRFVDeFhRVU5FSzBVc1JVRkJUM1JETEUxQlFVMDJReXhWUVVGVldpeEZRVUZOVFN4VlFXNUNha053UXl4TFFVRkxkVU1zWVVGQllTeERRVU5vUWpOQ0xFOUJRVkY0UkN4VFFVTlFMRmRCUTBRclJTeEZRVUZQZEVNc1RVRkJUVFpETEZWQlFWVmFMRTFCYzBJM1FtaENMRVZCUVU5dFFpeFpRVUZqTEZOQlFWTkJMRmxCUVZsSUxFZEJRM2hETEVsQlFVbGhMRVZCUVZNelF5eExRVVZVTWtJc1JVRkJUek5DTEV0QlFVdElMRTFCUVUwNFFpeExRVU5zUWxVc1JVRkJWM0pETEV0QlFVc3dRaXhqUVVWbVF5eEhRVk5NTTBJc1MwRkJTMGdzVFVGQlRTdERMRTlCUVU5a0xFZEJRMnhDT1VJc1MwRkJTM1ZETEdGQlFXRXNRMEZEYUVJelFpeFBRVUZSZWtRc1UwRkRVQ3hYUVVORWQwWXNSVUZCVHpsRExFMUJRVTFuUkN4VlFVRlZaaXhIUVVWMlFtRXNSVUZCVDBZc1owSkJRV2RDV0N4RlFVRk5UeXhGUVVGVFZpeExRVUZOTEZkQlF6RkRaMElzUlVGQlQwb3NZVUZCWVN4RFFVTnNRak5DTEU5QlFWRjBSQ3hSUVVOUUxGZEJRMFJ4Uml4RlFVRlBPVU1zVFVGQlRXbEVMRk5CUVZOb1FpeFZRV3hDTVVJNVFpeExRVUZMZFVNc1lVRkJZU3hEUVVOb1FqTkNMRTlCUVZGMFJDeFJRVU5RTEZkQlEwUnhSaXhGUVVGUE9VTXNUVUZCVFdsRUxGTkJRVk5vUWl4TlFYRkNOVUpvUWl4RlFVRlBWeXh0UWtGQmNVSXNVMEZCVTBFc2NVSkJRMVFzVDBGQmRFSjZRaXhMUVVGTFlTeGxRVU5RWWl4TFFVRkxZU3hoUVVGaGEwTXNVMEZEYkVJdlF5eExRVUZMWVN4aFFVRmxMRTlCU1hoQ1F5eEZRVUZQZVVJc1lVRkJaU3hUUVVGVFFTeGhRVUZoVXl4RlFVRlhReXhIUVVseVJFRXNSVUZCVjJwRUxFdEJRVXRyUkN4blFrRkJaMEpFTEVkQlEyaERha1FzUzBGQlMydERMRk5CUVZOakxFVkJRVmRETEVsQlJ6TkNia01zUlVGQlQyOURMR2RDUVVGclFpeFRRVUZUUVN4blFrRkJaMEpFTEVkQlEyaEVMRWxCUVVsRkxFVkJRVk51UkN4TFFVVlViMFFzUjBGQlV5eEZRV05pTEU5QldrRndSQ3hMUVVGTFlTeGhRVUZsTEZOQlFWVjNReXhIUVVONFFrUXNTVUZEUmtFc1IwRkJVeXhGUVVOVVJDeEZRVUZQZEVNc1lVRkJaU3hMUVVOMFFtOURMRVZCUVZOSkxFdEJTV0p5UkN4TFFVRkxZU3hoUVVGaGEwTXNUMEZCVXl4WFFVTjZRa3NzUjBGQlV5eEhRVWRLY0VRc1MwRkJTMkVzWTBGSFpFTXNSVUZCVHpKQ0xHZENRVUZyUWl4VFFVRlRRU3huUWtGQlowSllMRVZCUVUxR0xFVkJRVk13UWl4SFFVTXZSSFJFTEV0QlFVdHJSQ3huUWtGQlowSkpMRWRCUldwQ2VFSXNSMEZEUlRsQ0xFdEJRVXRJTEUxQlFVMHdSQ3huUWtGRFluWkVMRXRCUVV0SUxFMUJRVTB3UkN4bFFVRmxla0lzUlVGQlRUbENMRXRCUVV0aExHTkJSM2hDTEUxQlFWaGxMRWRCUTBZMFFpeFhRVUZYZUVRc1MwRkJTMkVzWVVGQlkyVXNTVUZIYUVNMFFpeFhRVUZYZUVRc1MwRkJTMkVzWVVGQll5eEpRVWxzUTBNc1JVRkJUekpETEU5QlFWTXNVMEZCVTBFc1UwRkRka0lzU1VGQlNUZERMRVZCUVZOYUxFdEJRVXRYTEUxQlFVMURMRTlCUlhoQ0xFZEJRVWxCTEVsQlFWZHlSQ3hWUVVOaUxFOUJRVThzUzBGSFZDeEpRVUZKYlVjc1JVRkJZekZFTEV0QlFVdElMRTFCUTI1Q09FUXNSVUZCVjBRc1JVRkJXVU1zVTBGRGRrSkRMRVZCUVdGb1JpdzRRa0ZCT0VJNFJTeEZRVUZoTEVOQlFVTXNZVUZyUWpkRUxGVkJaazlGTEVWQlFWZHdSQ3hWUVVOWWIwUXNSVUZCVjJ4RUxHOUNRVU5ZYTBRc1JVRkJWMjVFTEhGQ1FVTlliVVFzUlVGQlYzaEVMR05CUTFoM1JDeEZRVUZYZEVRc1lVRkRXSE5FTEVWQlFWZHFReXhaUVVOWWFVTXNSVUZCVjJoRExHVkJRMWhuUXl4RlFVRlhUQ3h6UWtGRFdFc3NSVUZCVjNSQ0xHVkJRMWh6UWl4RlFVRlhjRUlzYTBKQlExaHZRaXhGUVVGWGJFSXNhVUpCUTFoclFpeEZRVUZYYUVJc1kwRkRXR2RDTEVWQlFWZG1MR2xDUVVOWVpTeEZRVUZYWkN4VFFVVk5MRzFDUVVGaVlTeEZRVU5VTEU5QlFVOUJMRVZCUVZNdlF5eEZRVUZSWjBRc1IwRkhNVUlzU1VGQlNVTXNSVUZCVVd4SExFOUJRVTlVTEZGQlFWRTBSeXhUUVVGVFF5eExRVUZMU2l4SFFVVjZReXhQUVVGUGFFY3NUMEZCVDFRc1VVRkJVVGhITEdGQlFXRklMRVZCUVU5RUxFbEJSM0pEYWtVc1YwRnlVMVFzUTBGelUwVm9ReXhQUVVGUFZDeFJRVUZSSzBjc1YwRjFTbXBDTEZOQlFWTkRMRkZCY2twVWRrVXNWMEZCVjNkRkxHRkJRV1VzUTBGRGVFSm9SU3huUWtGQmFVSXpReXhWUVVGVk5FY3NVVUZGTjBKNlJTeFhRVUZYTUVVc2EwSkJRVzlDTEVOQlF6ZENiRVVzWjBKQlFXbENMRk5CUVZOQkxIRkNRVVUxUWxJc1YwRkJWekpGTEZWQlFYRkRMR1ZCUVhwQ1F5eFJRVUZSUXl4SlFVRkpReXhUUVVFMFFpeERRV1UzUkdRc1UwRkJWVzVITEZWQlFWVnJTQ3hWUVVGVkxFTkJRVU5zU0N4VlFVRlZiVWdzUzBGQlMwTXNWMEZCV1hCSUxGVkJRVlZ4U0N4UlFVRlJSQ3hoUVVGaFFTeFhRVXQ2Um5CRkxFZEJRVWxvUkN4VlFVRlZjMGdzUzBGUlpIQkZMR0ZCUVdOc1JDeFZRVUZWYzBnc1MwRk5lRUp5UlN4alFVRmxha1FzVlVGQlZYTklMRXRCVTNwQ01VVXNUMEZCVVRWRExGVkJRVlZ6U0N4TFFVdHNRbmhGTEUxQlFVODVReXhWUVVGVmMwZ3NTMEZMYWtKdVJDeExRVUZOYmtVc1ZVRkJWWE5JTEV0QmEwSm9RbXhFTEZGQlFWTXNVMEZCVTBFc1VVRkJVUzlDTEVkQlEzaENMRWxCUVVsclJpeEZRVUU0UWl4bFFVRjZRbElzVVVGQlVVTXNTVUZCU1VNc1UwRkJORUl4Unl4WFFVRlhhVWdzWTBGQlowSXNSMEZEZGtWdVJpeEZRVUZOTUVRc2FVSkJRV2RDZDBJc1JVRkJTMEVzUlVGQlIwZ3NXVUZGYmtNc1NVRkJTeXhKUVVGSlN5eEZRVUZQUXl4VlFVRlZMMFlzVDBGQlVXZEhMRVZCUVU4c1NVRkJTVU1zVFVGQlRVZ3NSVUZCVHl4RlFVRkpRU3hGUVVGUExFVkJRVWtzUjBGQlNVa3NSVUZCVHl4RlFVRkhRU3hGUVVGUFNpeEZRVUZOU1N4SlFVTnNSMFlzUlVGQlMwVXNSVUZCVHl4SFFVRkxTQ3hWUVVGVlJ5eEhRVWMzUWl4UFFVRlBUaXhGUVVGSFR5eFhRVUZOTEVWQlFWRXNRMEZCUTNwR0xFZEJRVTh3Uml4UFFVRlBTaXhMUVdWNlF6VkNMR1ZCUVdkQ0wwWXNWVUZCVlcxSUxFdEJVVEZDY2tNc1VVRkJVemxGTEZWQlFWVnRTQ3hMUVZGdVFtNURMRmRCUVZsb1JpeFZRVUZWYlVnc1MwRlJkRUpxUXl4VlFVRlhiRVlzVlVGQlZXMUlMRXRCVDNKQ0wwSXNUMEZCVVhCR0xGVkJRVlZ0U0N4TFFVOXNRamxDTEZWQlFWZHlSaXhWUVVGVmJVZ3NTMEZQY2tJM1FpeFRRVUZWZEVZc1ZVRkJWVzFJTEUxQlJXeENMRWRCU1Vwb1JpeFhRVUZYTmtZc1lVRkJaU3hEUVVONFFtaEdMRWxCUVVrc1JVRkRTa1VzWTBGQll5eEZRVU5rUkN4bFFVRmxMRVZCUTJaTUxGRkJRVkVzUlVGRFVrVXNUMEZCVHl4RlFVTlFjVUlzVFVGQlRTeEZRVU5PVnl4UlFVRlRORUlzUzBGRFZERkNMRmRCUVZrd1FpeExRVU5hZUVJc1ZVRkJWM2RDTEV0QlExaDBRaXhQUVVGUmMwSXNTMEZEVW5KQ0xGVkJRVmR4UWl4TFFVTlljRUlzVTBGQlZXOUNMRTFCUlZwMlJTeFhRVUZYY0VNc1ZVRkJXU3hGUVVOMlFtOURMRmRCUVZkeVF5eFBRVUZUTEVWQlEzQkNjVU1zVjBGQlYzUkRMRk5CUVZjc1JVRkRkRUp6UXl4WFFVRlhka01zVVVGQlZTeEZRVU55UW5WRExGZEJRVmQ0UXl4UlFVRlZMRVZCUlhKQ0xFbEJRVWx6U1N4VlFVRlhMRVZCUVVrelNDeDFRa0ZCZFVJMFNDeFZRVUZWTDBZc1dVRkZjRVF6UXl4UlFVRlJSU3hSUVVGVmRVa2lMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F0ZEhKaGJuTnBkR2x2YmkxbmNtOTFjQzlVY21GdWMybDBhVzl1TG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy50cmFuc2l0aW9uVGltZW91dD10cmFuc2l0aW9uVGltZW91dCxleHBvcnRzLmNsYXNzTmFtZXNTaGFwZT1leHBvcnRzLnRpbWVvdXRzU2hhcGU9dm9pZCAwO3ZhciBfcHJvcFR5cGVzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fWZ1bmN0aW9uIHRyYW5zaXRpb25UaW1lb3V0KGUpe3ZhciB0PVwidHJhbnNpdGlvblwiK2UrXCJUaW1lb3V0XCIscj1cInRyYW5zaXRpb25cIitlO3JldHVybiBmdW5jdGlvbihlKXtpZihlW3JdKXtpZihudWxsPT1lW3RdKXJldHVybiBuZXcgRXJyb3IodCtcIiB3YXNuJ3Qgc3VwcGxpZWQgdG8gQ1NTVHJhbnNpdGlvbkdyb3VwOiB0aGlzIGNhbiBjYXVzZSB1bnJlbGlhYmxlIGFuaW1hdGlvbnMgYW5kIHdvbid0IGJlIHN1cHBvcnRlZCBpbiBhIGZ1dHVyZSB2ZXJzaW9uIG9mIFJlYWN0LiBTZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC1hbmltYXRpb24tdHJhbnNpdGlvbi1ncm91cC10aW1lb3V0IGZvciBtb3JlIGluZm9ybWF0aW9uLlwiKTtpZihcIm51bWJlclwiIT10eXBlb2YgZVt0XSlyZXR1cm4gbmV3IEVycm9yKHQrXCIgbXVzdCBiZSBhIG51bWJlciAoaW4gbWlsbGlzZWNvbmRzKVwiKX1yZXR1cm4gbnVsbH19dmFyIHRpbWVvdXRzU2hhcGU9X3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe2VudGVyOl9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsZXhpdDpfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyfSkuaXNSZXF1aXJlZF0pO2V4cG9ydHMudGltZW91dHNTaGFwZT10aW1lb3V0c1NoYXBlO3ZhciBjbGFzc05hbWVzU2hhcGU9X3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe2VudGVyOl9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsZXhpdDpfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLGFjdGl2ZTpfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nfSksX3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtlbnRlcjpfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLGVudGVyRG9uZTpfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLGVudGVyQWN0aXZlOl9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsZXhpdDpfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLGV4aXREb25lOl9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsZXhpdEFjdGl2ZTpfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nfSldKTtleHBvcnRzLmNsYXNzTmFtZXNTaGFwZT1jbGFzc05hbWVzU2hhcGU7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbEJ5YjNCVWVYQmxjeTVxY3lKZExDSnVZVzFsY3lJNld5SmxlSEJ2Y25Seklpd2lYMTlsYzAxdlpIVnNaU0lzSW5SeVlXNXphWFJwYjI1VWFXMWxiM1YwSWl3aVkyeGhjM05PWVcxbGMxTm9ZWEJsSWl3aWRHbHRaVzkxZEhOVGFHRndaU0lzSWw5d2NtOXdWSGx3WlhNaUxDSmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwSWl3aWNtVnhkV2x5WlNJc0ltOWlhaUlzSW1SbFptRjFiSFFpTENKMGNtRnVjMmwwYVc5dVZIbHdaU0lzSW5ScGJXVnZkWFJRY205d1RtRnRaU0lzSW1WdVlXSnNaV1JRY205d1RtRnRaU0lzSW5CeWIzQnpJaXdpUlhKeWIzSWlMQ0p2Ym1WUFpsUjVjR1VpTENKdWRXMWlaWElpTENKemFHRndaU0lzSW1WdWRHVnlJaXdpWlhocGRDSXNJbWx6VW1WeGRXbHlaV1FpTENKemRISnBibWNpTENKaFkzUnBkbVVpTENKbGJuUmxja1J2Ym1VaUxDSmxiblJsY2tGamRHbDJaU0lzSW1WNGFYUkViMjVsSWl3aVpYaHBkRUZqZEdsMlpTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZGUVVFc1VVRkJVVU1zV1VGQllTeEZRVU55UWtRc1VVRkJVVVVzYTBKQlFXOUNRU3hyUWtGRE5VSkdMRkZCUVZGSExHZENRVUZyUWtnc1VVRkJVVWtzYlVKQlFXZENMRVZCUld4RUxFbEJRVWxETEZkQlFXRkRMSFZDUVVGMVFrTXNVVUZCVVN4bFFVVm9SQ3hUUVVGVFJDeDFRa0ZCZFVKRkxFZEJRVThzVDBGQlQwRXNSMEZCVDBFc1JVRkJTVkFzVjBGQllVOHNSVUZCVFN4RFFVRkZReXhSUVVGVFJDeEhRVVYyUml4VFFVRlRUaXhyUWtGQmEwSlJMRWRCUTNwQ0xFbEJRVWxETEVWQlFXdENMR0ZCUVdWRUxFVkJRV2xDTEZWQlEyeEVSU3hGUVVGclFpeGhRVUZsUml4RlFVTnlReXhQUVVGUExGTkJRVlZITEVkQlJXWXNSMEZCU1VFc1JVRkJUVVFzUjBGQmEwSXNRMEZGTVVJc1IwRkJPRUlzVFVGQk1VSkRMRVZCUVUxR0xFZEJRMUlzVDBGQlR5eEpRVUZKUnl4TlFVRk5TQ3hGUVVGclFpeHpUa0ZET1VJc1IwRkJjME1zYVVKQlFUTkNSU3hGUVVGTlJpeEhRVU4wUWl4UFFVRlBMRWxCUVVsSExFMUJRVTFJTEVWQlFXdENMSFZEUVVsMlF5eFBRVUZQTEUxQlNWZ3NTVUZCU1ZBc1kwRkJaMEpETEZkQlFWZEpMRkZCUVZGTkxGVkJRVlVzUTBGQlExWXNWMEZCVjBrc1VVRkJVVThzVDBGQlVWZ3NWMEZCVjBrc1VVRkJVVkVzVFVGQlRTeERRVU53UjBNc1RVRkJUMklzVjBGQlYwa3NVVUZCVVU4c1QwRkRNVUpITEV0QlFVMWtMRmRCUVZkSkxGRkJRVkZQTEZOQlEzaENTU3hoUVVWSWNFSXNVVUZCVVVrc1kwRkJaMEpCTEdOQlJYaENMRWxCUVVsRUxHZENRVUZyUWtVc1YwRkJWMGtzVVVGQlVVMHNWVUZCVlN4RFFVRkRWaXhYUVVGWFNTeFJRVUZSV1N4UFFVRlJhRUlzVjBGQlYwa3NVVUZCVVZFc1RVRkJUU3hEUVVOMFIwTXNUVUZCVDJJc1YwRkJWMGtzVVVGQlVWa3NUMEZETVVKR0xFdEJRVTFrTEZkQlFWZEpMRkZCUVZGWkxFOUJRM3BDUXl4UFFVRlJha0lzVjBGQlYwa3NVVUZCVVZrc1UwRkRla0pvUWl4WFFVRlhTU3hSUVVGUlVTeE5RVUZOTEVOQlF6TkNReXhOUVVGUFlpeFhRVUZYU1N4UlFVRlJXU3hQUVVNeFFrVXNWVUZCVjJ4Q0xGZEJRVmRKTEZGQlFWRlpMRTlCUXpsQ1J5eFpRVUZoYmtJc1YwRkJWMGtzVVVGQlVWa3NUMEZEYUVOR0xFdEJRVTFrTEZkQlFWZEpMRkZCUVZGWkxFOUJRM3BDU1N4VFFVRlZjRUlzVjBGQlYwa3NVVUZCVVZrc1QwRkROMEpMTEZkQlFWbHlRaXhYUVVGWFNTeFJRVUZSV1N4WFFVZHFRM0pDTEZGQlFWRkhMR2RDUVVGclFrRWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F0ZEhKaGJuTnBkR2x2YmkxbmNtOTFjQzkxZEdsc2N5OVFjbTl3Vkhsd1pYTXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO2Z1bmN0aW9uIGVzY2FwZShlKXt2YXIgbj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrKFwiXCIrZSkucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGUpe3JldHVybiBuW2VdfSl9ZnVuY3Rpb24gdW5lc2NhcGUoZSl7dmFyIG49e1wiPTBcIjpcIj1cIixcIj0yXCI6XCI6XCJ9O3JldHVybihcIlwiKyhcIi5cIj09PWVbMF0mJlwiJFwiPT09ZVsxXT9lLnN1YnN0cmluZygyKTplLnN1YnN0cmluZygxKSkpLnJlcGxhY2UoLyg9MHw9MikvZyxmdW5jdGlvbihlKXtyZXR1cm4gbltlXX0pfXZhciBLZXlFc2NhcGVVdGlscz17ZXNjYXBlOmVzY2FwZSx1bmVzY2FwZTp1bmVzY2FwZX07bW9kdWxlLmV4cG9ydHM9S2V5RXNjYXBlVXRpbHM7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa3RsZVVWelkyRndaVlYwYVd4ekxtcHpJbDBzSW01aGJXVnpJanBiSW1WelkyRndaU0lzSW10bGVTSXNJbVZ6WTJGd1pYSk1iMjlyZFhBaUxDSTlJaXdpT2lJc0luSmxjR3hoWTJVaUxDSnRZWFJqYUNJc0luVnVaWE5qWVhCbElpd2lkVzVsYzJOaGNHVnlURzl2YTNWd0lpd2lQVEFpTENJOU1pSXNJbk4xWW5OMGNtbHVaeUlzSWt0bGVVVnpZMkZ3WlZWMGFXeHpJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJVMEVzWVVGVFFTeFRRVUZUUVN4UFFVRlBReXhIUVVOa0xFbEJRMGxETEVWQlFXZENMRU5CUTJ4Q1F5eEpRVUZMTEV0QlEweERMRWxCUVVzc1RVRk5VQ3hOUVVGUExFdEJTbU1zUjBGQlMwZ3NSMEZCUzBrc1VVRk1ZaXhSUVV0clF5eFRRVUZWUXl4SFFVTTFSQ3hQUVVGUFNpeEZRVUZqU1N4TFFWbDZRaXhUUVVGVFF5eFRRVUZUVGl4SFFVTm9RaXhKUVVOSlR5eEZRVUZyUWl4RFFVTndRa01zUzBGQlRTeEpRVU5PUXl4TFFVRk5MRXRCU1ZJc1QwRkJVU3hKUVVaelFpeE5RVUZZVkN4RlFVRkpMRWxCUVhsQ0xFMUJRVmhCTEVWQlFVa3NSMEZCWVVFc1JVRkJTVlVzVlVGQlZTeEhRVUZMVml4RlFVRkpWU3hWUVVGVkxFdEJSVFZFVGl4UlFWQlFMRmRCVHpoQ0xGTkJRVlZETEVkQlF6RkVMRTlCUVU5RkxFVkJRV2RDUml4TFFVa3pRaXhKUVVGSlRTeGxRVUZwUWl4RFFVTnVRbG9zVDBGQlVVRXNUMEZEVWs4c1UwRkJWVUVzVlVGSFdrMHNUMEZCVDBNc1VVRkJWVVlpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdmJHbGlMMHRsZVVWelkyRndaVlYwYVd4ekxtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9wcm9kSW52YXJpYW50PXJlcXVpcmUoXCIuL3JlYWN0UHJvZEludmFyaWFudFwiKSxpbnZhcmlhbnQ9cmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKSxvbmVBcmd1bWVudFBvb2xlcj1mdW5jdGlvbihvKXtpZih0aGlzLmluc3RhbmNlUG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuaW5zdGFuY2VQb29sLnBvcCgpO3JldHVybiB0aGlzLmNhbGwoZSxvKSxlfXJldHVybiBuZXcgdGhpcyhvKX0sdHdvQXJndW1lbnRQb29sZXI9ZnVuY3Rpb24obyxlKXtpZih0aGlzLmluc3RhbmNlUG9vbC5sZW5ndGgpe3ZhciBuPXRoaXMuaW5zdGFuY2VQb29sLnBvcCgpO3JldHVybiB0aGlzLmNhbGwobixvLGUpLG59cmV0dXJuIG5ldyB0aGlzKG8sZSl9LHRocmVlQXJndW1lbnRQb29sZXI9ZnVuY3Rpb24obyxlLG4pe2lmKHRoaXMuaW5zdGFuY2VQb29sLmxlbmd0aCl7dmFyIHQ9dGhpcy5pbnN0YW5jZVBvb2wucG9wKCk7cmV0dXJuIHRoaXMuY2FsbCh0LG8sZSxuKSx0fXJldHVybiBuZXcgdGhpcyhvLGUsbil9LGZvdXJBcmd1bWVudFBvb2xlcj1mdW5jdGlvbihvLGUsbix0KXtpZih0aGlzLmluc3RhbmNlUG9vbC5sZW5ndGgpe3ZhciByPXRoaXMuaW5zdGFuY2VQb29sLnBvcCgpO3JldHVybiB0aGlzLmNhbGwocixvLGUsbix0KSxyfXJldHVybiBuZXcgdGhpcyhvLGUsbix0KX0sc3RhbmRhcmRSZWxlYXNlcj1mdW5jdGlvbihvKXtvIGluc3RhbmNlb2YgdGhpc3x8KFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwiVHJ5aW5nIHRvIHJlbGVhc2UgYW4gaW5zdGFuY2UgaW50byBhIHBvb2wgb2YgYSBkaWZmZXJlbnQgdHlwZS5cIik6X3Byb2RJbnZhcmlhbnQoXCIyNVwiKSksby5kZXN0cnVjdG9yKCksdGhpcy5pbnN0YW5jZVBvb2wubGVuZ3RoPHRoaXMucG9vbFNpemUmJnRoaXMuaW5zdGFuY2VQb29sLnB1c2gobyl9LERFRkFVTFRfUE9PTF9TSVpFPTEwLERFRkFVTFRfUE9PTEVSPW9uZUFyZ3VtZW50UG9vbGVyLGFkZFBvb2xpbmdUbz1mdW5jdGlvbihvLGUpe3ZhciBuPW87cmV0dXJuIG4uaW5zdGFuY2VQb29sPVtdLG4uZ2V0UG9vbGVkPWV8fERFRkFVTFRfUE9PTEVSLG4ucG9vbFNpemV8fChuLnBvb2xTaXplPURFRkFVTFRfUE9PTF9TSVpFKSxuLnJlbGVhc2U9c3RhbmRhcmRSZWxlYXNlcixufSxQb29sZWRDbGFzcz17YWRkUG9vbGluZ1RvOmFkZFBvb2xpbmdUbyxvbmVBcmd1bWVudFBvb2xlcjpvbmVBcmd1bWVudFBvb2xlcix0d29Bcmd1bWVudFBvb2xlcjp0d29Bcmd1bWVudFBvb2xlcix0aHJlZUFyZ3VtZW50UG9vbGVyOnRocmVlQXJndW1lbnRQb29sZXIsZm91ckFyZ3VtZW50UG9vbGVyOmZvdXJBcmd1bWVudFBvb2xlcn07bW9kdWxlLmV4cG9ydHM9UG9vbGVkQ2xhc3M7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbEJ2YjJ4bFpFTnNZWE56TG1weklsMHNJbTVoYldWeklqcGJJbDl3Y205a1NXNTJZWEpwWVc1MElpd2ljbVZ4ZFdseVpTSXNJbWx1ZG1GeWFXRnVkQ0lzSW05dVpVRnlaM1Z0Wlc1MFVHOXZiR1Z5SWl3aVkyOXdlVVpwWld4a2MwWnliMjBpTENKMGFHbHpJaXdpYVc1emRHRnVZMlZRYjI5c0lpd2liR1Z1WjNSb0lpd2lhVzV6ZEdGdVkyVWlMQ0p3YjNBaUxDSmpZV3hzSWl3aWRIZHZRWEpuZFcxbGJuUlFiMjlzWlhJaUxDSmhNU0lzSW1FeUlpd2lkR2h5WldWQmNtZDFiV1Z1ZEZCdmIyeGxjaUlzSW1Feklpd2labTkxY2tGeVozVnRaVzUwVUc5dmJHVnlJaXdpWVRRaUxDSnpkR0Z1WkdGeVpGSmxiR1ZoYzJWeUlpd2ljSEp2WTJWemN5SXNJbVZ1ZGlJc0lrNVBSRVZmUlU1V0lpd2laR1Z6ZEhKMVkzUnZjaUlzSW5CdmIyeFRhWHBsSWl3aWNIVnphQ0lzSWtSRlJrRlZURlJmVUU5UFRGOVRTVnBGSWl3aVJFVkdRVlZNVkY5UVQwOU1SVklpTENKaFpHUlFiMjlzYVc1blZHOGlMQ0pEYjNCNVEyOXVjM1J5ZFdOMGIzSWlMQ0p3YjI5c1pYSWlMQ0pPWlhkTGJHRnpjeUlzSW1kbGRGQnZiMnhsWkNJc0luSmxiR1ZoYzJVaUxDSlFiMjlzWldSRGJHRnpjeUlzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVk5CTEdGQlJVRXNTVUZCU1VFc1pVRkJhVUpETEZGQlFWRXNkMEpCUlhwQ1F5eFZRVUZaUkN4UlFVRlJMSE5DUVZOd1FrVXNhMEpCUVc5Q0xGTkJRVlZETEVkQlJXaERMRWRCUkZsRExFdEJRMFpETEdGQlFXRkRMRTlCUVZFc1EwRkROMElzU1VGQlNVTXNSVUZHVFVnc1MwRkZWME1zWVVGQllVY3NUVUZGYkVNc1QwRktWVW9zUzBGSFNrc3NTMEZCUzBZc1JVRkJWVW9zUjBGRFpFa3NSVUZGVUN4UFFVRlBMRWxCVGtkSUxFdEJUVTlFTEVsQlNXcENUeXhyUWtGQmIwSXNVMEZCVlVNc1JVRkJTVU1zUjBGRmNFTXNSMEZFV1ZJc1MwRkRSa01zWVVGQllVTXNUMEZCVVN4RFFVTTNRaXhKUVVGSlF5eEZRVVpOU0N4TFFVVlhReXhoUVVGaFJ5eE5RVVZzUXl4UFFVcFZTaXhMUVVkS1N5eExRVUZMUml4RlFVRlZTU3hGUVVGSlF5eEhRVU5zUWt3c1JVRkZVQ3hQUVVGUExFbEJUa2RJTEV0QlRVOVBMRVZCUVVsRExFbEJTWEpDUXl4dlFrRkJjMElzVTBGQlZVWXNSVUZCU1VNc1JVRkJTVVVzUjBGRk1VTXNSMEZFV1ZZc1MwRkRSa01zWVVGQllVTXNUMEZCVVN4RFFVTTNRaXhKUVVGSlF5eEZRVVpOU0N4TFFVVlhReXhoUVVGaFJ5eE5RVVZzUXl4UFFVcFZTaXhMUVVkS1N5eExRVUZMUml4RlFVRlZTU3hGUVVGSlF5eEZRVUZKUlN4SFFVTjBRbEFzUlVGRlVDeFBRVUZQTEVsQlRrZElMRXRCVFU5UExFVkJRVWxETEVWQlFVbEZMRWxCU1hwQ1F5eHRRa0ZCY1VJc1UwRkJWVW9zUlVGQlNVTXNSVUZCU1VVc1JVRkJTVVVzUjBGRk4wTXNSMEZFV1Zvc1MwRkRSa01zWVVGQllVTXNUMEZCVVN4RFFVTTNRaXhKUVVGSlF5eEZRVVpOU0N4TFFVVlhReXhoUVVGaFJ5eE5RVVZzUXl4UFFVcFZTaXhMUVVkS1N5eExRVUZMUml4RlFVRlZTU3hGUVVGSlF5eEZRVUZKUlN4RlFVRkpSU3hIUVVNeFFsUXNSVUZGVUN4UFFVRlBMRWxCVGtkSUxFdEJUVTlQTEVWQlFVbERMRVZCUVVsRkxFVkJRVWxGTEVsQlNUZENReXhwUWtGQmJVSXNVMEZCVlZZc1IwRkZOMEpCTEdGQlJGVklMRTlCUXpSRExHVkJRWHBDWXl4UlFVRlJReXhKUVVGSlF5eFRRVUUwUW01Q0xGZEJRVlVzUlVGQlR5eHJSVUZCYjBWR0xHVkJRV1VzVDBGRE0wdFJMRVZCUVZOakxHRkJSa2RxUWl4TFFVZEdReXhoUVVGaFF5eFBRVWhZUml4TFFVY3dRbXRDTEZWQlNERkNiRUlzUzBGSlNrTXNZVUZCWVd0Q0xFdEJRVXRvUWl4SlFVbDRRbWxDTEd0Q1FVRnZRaXhIUVVOd1FrTXNaVUZCYVVKMlFpeHJRa0ZYYWtKM1FpeGhRVUZsTEZOQlFWVkRMRVZCUVdsQ1F5eEhRVWMxUXl4SlFVRkpReXhGUVVGWFJpeEZRVTltTEU5QlRrRkZMRVZCUVZONFFpeGhRVUZsTEVkQlEzaENkMElzUlVGQlUwTXNWVUZCV1VZc1IwRkJWVWdzWlVGRE1VSkpMRVZCUVZOUUxGZEJRMXBQTEVWQlFWTlFMRk5CUVZkRkxHMUNRVVYwUWtzc1JVRkJVMFVzVVVGQlZXUXNhVUpCUTFwWkxFZEJSMHhITEZsQlFXTXNRMEZEYUVKT0xHRkJRV05CTEdGQlEyUjRRaXhyUWtGQmJVSkJMR3RDUVVOdVFsRXNhMEpCUVcxQ1FTeHJRa0ZEYmtKSExHOUNRVUZ4UWtFc2IwSkJRM0pDUlN4dFFrRkJiMEpCTEc5Q1FVZDBRbXRDTEU5QlFVOURMRkZCUVZWR0lpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDNKbFlXTjBMMnhwWWk5UWIyOXNaV1JEYkdGemN5NXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIF9hc3NpZ249cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksUmVhY3RCYXNlQ2xhc3Nlcz1yZXF1aXJlKFwiLi9SZWFjdEJhc2VDbGFzc2VzXCIpLFJlYWN0Q2hpbGRyZW49cmVxdWlyZShcIi4vUmVhY3RDaGlsZHJlblwiKSxSZWFjdERPTUZhY3Rvcmllcz1yZXF1aXJlKFwiLi9SZWFjdERPTUZhY3Rvcmllc1wiKSxSZWFjdEVsZW1lbnQ9cmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpLFJlYWN0UHJvcFR5cGVzPXJlcXVpcmUoXCIuL1JlYWN0UHJvcFR5cGVzXCIpLFJlYWN0VmVyc2lvbj1yZXF1aXJlKFwiLi9SZWFjdFZlcnNpb25cIiksY3JlYXRlUmVhY3RDbGFzcz1yZXF1aXJlKFwiLi9jcmVhdGVDbGFzc1wiKSxvbmx5Q2hpbGQ9cmVxdWlyZShcIi4vb25seUNoaWxkXCIpLGNyZWF0ZUVsZW1lbnQ9UmVhY3RFbGVtZW50LmNyZWF0ZUVsZW1lbnQsY3JlYXRlRmFjdG9yeT1SZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeSxjbG9uZUVsZW1lbnQ9UmVhY3RFbGVtZW50LmNsb25lRWxlbWVudDtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXt2YXIgbG93UHJpb3JpdHlXYXJuaW5nPXJlcXVpcmUoXCIuL2xvd1ByaW9yaXR5V2FybmluZ1wiKSxjYW5EZWZpbmVQcm9wZXJ0eT1yZXF1aXJlKFwiLi9jYW5EZWZpbmVQcm9wZXJ0eVwiKSxSZWFjdEVsZW1lbnRWYWxpZGF0b3I9cmVxdWlyZShcIi4vUmVhY3RFbGVtZW50VmFsaWRhdG9yXCIpLGRpZFdhcm5Qcm9wVHlwZXNEZXByZWNhdGVkPSExO2NyZWF0ZUVsZW1lbnQ9UmVhY3RFbGVtZW50VmFsaWRhdG9yLmNyZWF0ZUVsZW1lbnQsY3JlYXRlRmFjdG9yeT1SZWFjdEVsZW1lbnRWYWxpZGF0b3IuY3JlYXRlRmFjdG9yeSxjbG9uZUVsZW1lbnQ9UmVhY3RFbGVtZW50VmFsaWRhdG9yLmNsb25lRWxlbWVudH12YXIgX19zcHJlYWQ9X2Fzc2lnbixjcmVhdGVNaXhpbj1mdW5jdGlvbihlKXtyZXR1cm4gZX07aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVil7dmFyIHdhcm5lZEZvclNwcmVhZD0hMSx3YXJuZWRGb3JDcmVhdGVNaXhpbj0hMTtfX3NwcmVhZD1mdW5jdGlvbigpe3JldHVybiBsb3dQcmlvcml0eVdhcm5pbmcod2FybmVkRm9yU3ByZWFkLFwiUmVhY3QuX19zcHJlYWQgaXMgZGVwcmVjYXRlZCBhbmQgc2hvdWxkIG5vdCBiZSB1c2VkLiBVc2UgT2JqZWN0LmFzc2lnbiBkaXJlY3RseSBvciBhbm90aGVyIGhlbHBlciBmdW5jdGlvbiB3aXRoIHNpbWlsYXIgc2VtYW50aWNzLiBZb3UgbWF5IGJlIHNlZWluZyB0aGlzIHdhcm5pbmcgZHVlIHRvIHlvdXIgY29tcGlsZXIuIFNlZSBodHRwczovL2ZiLm1lL3JlYWN0LXNwcmVhZC1kZXByZWNhdGlvbiBmb3IgbW9yZSBkZXRhaWxzLlwiKSx3YXJuZWRGb3JTcHJlYWQ9ITAsX2Fzc2lnbi5hcHBseShudWxsLGFyZ3VtZW50cyl9LGNyZWF0ZU1peGluPWZ1bmN0aW9uKGUpe3JldHVybiBsb3dQcmlvcml0eVdhcm5pbmcod2FybmVkRm9yQ3JlYXRlTWl4aW4sXCJSZWFjdC5jcmVhdGVNaXhpbiBpcyBkZXByZWNhdGVkIGFuZCBzaG91bGQgbm90IGJlIHVzZWQuIEluIFJlYWN0IHYxNi4wLCBpdCB3aWxsIGJlIHJlbW92ZWQuIFlvdSBjYW4gdXNlIHRoaXMgbWl4aW4gZGlyZWN0bHkgaW5zdGVhZC4gU2VlIGh0dHBzOi8vZmIubWUvY3JlYXRlbWl4aW4td2FzLW5ldmVyLWltcGxlbWVudGVkIGZvciBtb3JlIGluZm8uXCIpLHdhcm5lZEZvckNyZWF0ZU1peGluPSEwLGV9fXZhciBSZWFjdD17Q2hpbGRyZW46e21hcDpSZWFjdENoaWxkcmVuLm1hcCxmb3JFYWNoOlJlYWN0Q2hpbGRyZW4uZm9yRWFjaCxjb3VudDpSZWFjdENoaWxkcmVuLmNvdW50LHRvQXJyYXk6UmVhY3RDaGlsZHJlbi50b0FycmF5LG9ubHk6b25seUNoaWxkfSxDb21wb25lbnQ6UmVhY3RCYXNlQ2xhc3Nlcy5Db21wb25lbnQsUHVyZUNvbXBvbmVudDpSZWFjdEJhc2VDbGFzc2VzLlB1cmVDb21wb25lbnQsY3JlYXRlRWxlbWVudDpjcmVhdGVFbGVtZW50LGNsb25lRWxlbWVudDpjbG9uZUVsZW1lbnQsaXNWYWxpZEVsZW1lbnQ6UmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50LFByb3BUeXBlczpSZWFjdFByb3BUeXBlcyxjcmVhdGVDbGFzczpjcmVhdGVSZWFjdENsYXNzLGNyZWF0ZUZhY3Rvcnk6Y3JlYXRlRmFjdG9yeSxjcmVhdGVNaXhpbjpjcmVhdGVNaXhpbixET006UmVhY3RET01GYWN0b3JpZXMsdmVyc2lvbjpSZWFjdFZlcnNpb24sX19zcHJlYWQ6X19zcHJlYWR9O2lmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYpe3ZhciB3YXJuZWRGb3JDcmVhdGVDbGFzcz0hMTtjYW5EZWZpbmVQcm9wZXJ0eSYmKE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFjdCxcIlByb3BUeXBlc1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbG93UHJpb3JpdHlXYXJuaW5nKGRpZFdhcm5Qcm9wVHlwZXNEZXByZWNhdGVkLFwiQWNjZXNzaW5nIFByb3BUeXBlcyB2aWEgdGhlIG1haW4gUmVhY3QgcGFja2FnZSBpcyBkZXByZWNhdGVkLCBhbmQgd2lsbCBiZSByZW1vdmVkIGluICBSZWFjdCB2MTYuMC4gVXNlIHRoZSBsYXRlc3QgYXZhaWxhYmxlIHYxNS4qIHByb3AtdHlwZXMgcGFja2FnZSBmcm9tIG5wbSBpbnN0ZWFkLiBGb3IgaW5mbyBvbiB1c2FnZSwgY29tcGF0aWJpbGl0eSwgbWlncmF0aW9uIGFuZCBtb3JlLCBzZWUgaHR0cHM6Ly9mYi5tZS9wcm9wLXR5cGVzLWRvY3NcIiksZGlkV2FyblByb3BUeXBlc0RlcHJlY2F0ZWQ9ITAsUmVhY3RQcm9wVHlwZXN9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWN0LFwiY3JlYXRlQ2xhc3NcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGxvd1ByaW9yaXR5V2FybmluZyh3YXJuZWRGb3JDcmVhdGVDbGFzcyxcIkFjY2Vzc2luZyBjcmVhdGVDbGFzcyB2aWEgdGhlIG1haW4gUmVhY3QgcGFja2FnZSBpcyBkZXByZWNhdGVkLCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIFJlYWN0IHYxNi4wLiBVc2UgYSBwbGFpbiBKYXZhU2NyaXB0IGNsYXNzIGluc3RlYWQuIElmIHlvdSdyZSBub3QgeWV0IHJlYWR5IHRvIG1pZ3JhdGUsIGNyZWF0ZS1yZWFjdC1jbGFzcyB2MTUuKiBpcyBhdmFpbGFibGUgb24gbnBtIGFzIGEgdGVtcG9yYXJ5LCBkcm9wLWluIHJlcGxhY2VtZW50LiBGb3IgbW9yZSBpbmZvIHNlZSBodHRwczovL2ZiLm1lL3JlYWN0LWNyZWF0ZS1jbGFzc1wiKSx3YXJuZWRGb3JDcmVhdGVDbGFzcz0hMCxjcmVhdGVSZWFjdENsYXNzfX0pKSxSZWFjdC5ET009e307dmFyIHdhcm5lZEZvckZhY3Rvcmllcz0hMTtPYmplY3Qua2V5cyhSZWFjdERPTUZhY3RvcmllcykuZm9yRWFjaChmdW5jdGlvbihlKXtSZWFjdC5ET01bZV09ZnVuY3Rpb24oKXtyZXR1cm4gd2FybmVkRm9yRmFjdG9yaWVzfHwobG93UHJpb3JpdHlXYXJuaW5nKCExLFwiQWNjZXNzaW5nIGZhY3RvcmllcyBsaWtlIFJlYWN0LkRPTS4lcyBoYXMgYmVlbiBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdjE2LjArLiBVc2UgdGhlIHJlYWN0LWRvbS1mYWN0b3JpZXMgcGFja2FnZSBpbnN0ZWFkLiAgVmVyc2lvbiAxLjAgcHJvdmlkZXMgYSBkcm9wLWluIHJlcGxhY2VtZW50LiBGb3IgbW9yZSBpbmZvLCBzZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC1kb20tZmFjdG9yaWVzXCIsZSksd2FybmVkRm9yRmFjdG9yaWVzPSEwKSxSZWFjdERPTUZhY3Rvcmllc1tlXS5hcHBseShSZWFjdERPTUZhY3Rvcmllcyxhcmd1bWVudHMpfX0pfW1vZHVsZS5leHBvcnRzPVJlYWN0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxKbFlXTjBMbXB6SWwwc0ltNWhiV1Z6SWpwYklsOWhjM05wWjI0aUxDSnlaWEYxYVhKbElpd2lVbVZoWTNSQ1lYTmxRMnhoYzNObGN5SXNJbEpsWVdOMFEyaHBiR1J5Wlc0aUxDSlNaV0ZqZEVSUFRVWmhZM1J2Y21sbGN5SXNJbEpsWVdOMFJXeGxiV1Z1ZENJc0lsSmxZV04wVUhKdmNGUjVjR1Z6SWl3aVVtVmhZM1JXWlhKemFXOXVJaXdpWTNKbFlYUmxVbVZoWTNSRGJHRnpjeUlzSW05dWJIbERhR2xzWkNJc0ltTnlaV0YwWlVWc1pXMWxiblFpTENKamNtVmhkR1ZHWVdOMGIzSjVJaXdpWTJ4dmJtVkZiR1Z0Wlc1MElpd2ljSEp2WTJWemN5SXNJbVZ1ZGlJc0lrNVBSRVZmUlU1V0lpd2liRzkzVUhKcGIzSnBkSGxYWVhKdWFXNW5JaXdpWTJGdVJHVm1hVzVsVUhKdmNHVnlkSGtpTENKU1pXRmpkRVZzWlcxbGJuUldZV3hwWkdGMGIzSWlMQ0prYVdSWFlYSnVVSEp2Y0ZSNWNHVnpSR1Z3Y21WallYUmxaQ0lzSWw5ZmMzQnlaV0ZrSWl3aVkzSmxZWFJsVFdsNGFXNGlMQ0p0YVhocGJpSXNJbmRoY201bFpFWnZjbE53Y21WaFpDSXNJbmRoY201bFpFWnZja055WldGMFpVMXBlR2x1SWl3aVlYQndiSGtpTENKaGNtZDFiV1Z1ZEhNaUxDSlNaV0ZqZENJc0lrTm9hV3hrY21WdUlpd2liV0Z3SWl3aVptOXlSV0ZqYUNJc0ltTnZkVzUwSWl3aWRHOUJjbkpoZVNJc0ltOXViSGtpTENKRGIyMXdiMjVsYm5RaUxDSlFkWEpsUTI5dGNHOXVaVzUwSWl3aWFYTldZV3hwWkVWc1pXMWxiblFpTENKUWNtOXdWSGx3WlhNaUxDSmpjbVZoZEdWRGJHRnpjeUlzSWtSUFRTSXNJblpsY25OcGIyNGlMQ0ozWVhKdVpXUkdiM0pEY21WaGRHVkRiR0Z6Y3lJc0lrOWlhbVZqZENJc0ltUmxabWx1WlZCeWIzQmxjblI1SWl3aVoyVjBJaXdpZDJGeWJtVmtSbTl5Um1GamRHOXlhV1Z6SWl3aWEyVjVjeUlzSW1aaFkzUnZjbmtpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZSUVN4aFFVVkJMRWxCUVVsQkxGRkJRVlZETEZGQlFWRXNhVUpCUld4Q1F5eHBRa0ZCYlVKRUxGRkJRVkVzYzBKQlF6TkNSU3hqUVVGblFrWXNVVUZCVVN4dFFrRkRlRUpITEd0Q1FVRnZRa2dzVVVGQlVTeDFRa0ZETlVKSkxHRkJRV1ZLTEZGQlFWRXNhMEpCUTNaQ1N5eGxRVUZwUWt3c1VVRkJVU3h2UWtGRGVrSk5MR0ZCUVdWT0xGRkJRVkVzYTBKQlJYWkNUeXhwUWtGQmJVSlFMRkZCUVZFc2FVSkJRek5DVVN4VlFVRlpVaXhSUVVGUkxHVkJSWEJDVXl4alFVRm5Ra3dzWVVGQllVc3NZMEZETjBKRExHTkJRV2RDVGl4aFFVRmhUU3hqUVVNM1FrTXNZVUZCWlZBc1lVRkJZVThzWVVGRmFFTXNSMEZCTmtJc1pVRkJla0pETEZGQlFWRkRMRWxCUVVsRExGTkJRVEpDTEVOQlEzcERMRWxCUVVsRExHMUNRVUZ4UW1Zc1VVRkJVU3gzUWtGRE4wSm5RaXhyUWtGQmIwSm9RaXhSUVVGUkxIVkNRVU0xUW1sQ0xITkNRVUYzUW1wQ0xGRkJRVkVzTWtKQlEyaERhMElzTkVKQlFUWkNMRVZCUTJwRFZDeGpRVUZuUWxFc2MwSkJRWE5DVWl4alFVTjBRME1zWTBGQlowSlBMSE5DUVVGelFsQXNZMEZEZEVORExHRkJRV1ZOTEhOQ1FVRnpRazRzWVVGSGRrTXNTVUZCU1ZFc1UwRkJWM0JDTEZGQlExaHhRaXhaUVVGakxGTkJRVlZETEVkQlF6RkNMRTlCUVU5QkxFZEJSMVFzUjBGQk5rSXNaVUZCZWtKVUxGRkJRVkZETEVsQlFVbERMRk5CUVRKQ0xFTkJRM3BETEVsQlFVbFJMR2xDUVVGclFpeEZRVU5zUWtNc2MwSkJRWFZDTEVWQlF6TkNTaXhUUVVGWExGZEJSMVFzVDBGR1FVb3NiVUpCUVcxQ1R5eG5Ra0ZCYVVJc2QxQkJRM0JEUVN4cFFrRkJhMElzUlVGRFdIWkNMRkZCUVZGNVFpeE5RVUZOTEV0QlFVMURMRmxCUnpkQ1RDeFpRVUZqTEZOQlFWVkRMRWRCUjNSQ0xFOUJSa0ZPTEcxQ1FVRnRRbEVzY1VKQlFYTkNMREpOUVVONlEwRXNjMEpCUVhWQ0xFVkJRMmhDUml4SFFVbFlMRWxCUVVsTExFMUJRVkVzUTBGSFZrTXNVMEZCVlN4RFFVTlNReXhKUVVGTE1VSXNZMEZCWXpCQ0xFbEJRMjVDUXl4UlFVRlRNMElzWTBGQll6SkNMRkZCUTNaQ1F5eE5RVUZQTlVJc1kwRkJZelJDTEUxQlEzSkNReXhSUVVGVE4wSXNZMEZCWXpaQ0xGRkJRM1pDUXl4TFFVRk5lRUlzVjBGSFVubENMRlZCUVZkb1F5eHBRa0ZCYVVKblF5eFZRVU0xUWtNc1kwRkJaV3BETEdsQ1FVRnBRbWxETEdOQlJXaERla0lzWTBGQlpVRXNZMEZEWmtVc1lVRkJZMEVzWVVGRFpIZENMR1ZCUVdkQ0wwSXNZVUZCWVN0Q0xHVkJTVGRDUXl4VlFVRlhMMElzWlVGRFdHZERMRmxCUVdFNVFpeHBRa0ZEWWtjc1kwRkJaVUVzWTBGRFpsVXNXVUZCWVVFc1dVRkpZbXRDTEVsQlFVdHVReXhyUWtGRlRHOURMRkZCUVZOcVF5eGhRVWRVWVN4VFFVRlZRU3hWUVVkYUxFZEJRVFpDTEdWQlFYcENVQ3hSUVVGUlF5eEpRVUZKUXl4VFFVRXlRaXhEUVVONlF5eEpRVUZKTUVJc2MwSkJRWFZDTEVWQlEzWkNlRUlzYjBKQlEwWjVRaXhQUVVGUFF5eGxRVUZsYUVJc1RVRkJUeXhaUVVGaExFTkJRM2hEYVVJc1NVRkJTeXhYUVVkSUxFOUJSa0UxUWl4dFFrRkJiVUpITERKQ1FVRTBRaXhyVVVGREwwTkJMRFJDUVVFMlFpeEZRVU4wUW1Jc2EwSkJTVmh2UXl4UFFVRlBReXhsUVVGbGFFSXNUVUZCVHl4alFVRmxMRU5CUXpGRGFVSXNTVUZCU3l4WFFVZElMRTlCUmtFMVFpeHRRa0ZCYlVKNVFpeHhRa0ZCYzBJc2MxUkJRM3BEUVN4elFrRkJkVUlzUlVGRGFFSnFReXh4UWtGUlltMUNMRTFCUVUxWkxFbEJRVTBzUjBGRFdpeEpRVUZKVFN4dlFrRkJjVUlzUlVGRGVrSklMRTlCUVU5SkxFdEJRVXN4UXl4dFFrRkJiVUl3UWl4UlFVRlJMRk5CUVZWcFFpeEhRVU12UTNCQ0xFMUJRVTFaTEVsQlFVbFJMRWRCUVZjc1YwRkxia0lzVDBGS1MwWXNjVUpCUTBnM1FpeHZRa0ZCYlVJc1JVRkJUeXd3VDBGQksxQXJRaXhIUVVONlVrWXNiMEpCUVhGQ0xFZEJSV2hDZWtNc2EwSkJRV3RDTWtNc1IwRkJVM1JDTEUxQlFVMXlRaXhyUWtGQmJVSnpRaXhqUVV0cVJYTkNMRTlCUVU5RExGRkJRVlYwUWlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2VW1WaFkzUXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO3ZhciBfcHJvZEludmFyaWFudD1yZXF1aXJlKFwiLi9yZWFjdFByb2RJbnZhcmlhbnRcIiksX2Fzc2lnbj1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxSZWFjdE5vb3BVcGRhdGVRdWV1ZT1yZXF1aXJlKFwiLi9SZWFjdE5vb3BVcGRhdGVRdWV1ZVwiKSxjYW5EZWZpbmVQcm9wZXJ0eT1yZXF1aXJlKFwiLi9jYW5EZWZpbmVQcm9wZXJ0eVwiKSxlbXB0eU9iamVjdD1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlPYmplY3RcIiksaW52YXJpYW50PXJlcXVpcmUoXCJmYmpzL2xpYi9pbnZhcmlhbnRcIiksbG93UHJpb3JpdHlXYXJuaW5nPXJlcXVpcmUoXCIuL2xvd1ByaW9yaXR5V2FybmluZ1wiKTtmdW5jdGlvbiBSZWFjdENvbXBvbmVudChlLHQsbyl7dGhpcy5wcm9wcz1lLHRoaXMuY29udGV4dD10LHRoaXMucmVmcz1lbXB0eU9iamVjdCx0aGlzLnVwZGF0ZXI9b3x8UmVhY3ROb29wVXBkYXRlUXVldWV9aWYoUmVhY3RDb21wb25lbnQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e30sUmVhY3RDb21wb25lbnQucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIiE9dHlwZW9mIGUmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPWUmJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcInNldFN0YXRlKC4uLik6IHRha2VzIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMgdG8gdXBkYXRlIG9yIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzLlwiKTpfcHJvZEludmFyaWFudChcIjg1XCIpKSx0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsZSksdCYmdGhpcy51cGRhdGVyLmVucXVldWVDYWxsYmFjayh0aGlzLHQsXCJzZXRTdGF0ZVwiKX0sUmVhY3RDb21wb25lbnQucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGUpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyksZSYmdGhpcy51cGRhdGVyLmVucXVldWVDYWxsYmFjayh0aGlzLGUsXCJmb3JjZVVwZGF0ZVwiKX0sXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVil7dmFyIGRlcHJlY2F0ZWRBUElzPXtpc01vdW50ZWQ6W1wiaXNNb3VudGVkXCIsXCJJbnN0ZWFkLCBtYWtlIHN1cmUgdG8gY2xlYW4gdXAgc3Vic2NyaXB0aW9ucyBhbmQgcGVuZGluZyByZXF1ZXN0cyBpbiBjb21wb25lbnRXaWxsVW5tb3VudCB0byBwcmV2ZW50IG1lbW9yeSBsZWFrcy5cIl0scmVwbGFjZVN0YXRlOltcInJlcGxhY2VTdGF0ZVwiLFwiUmVmYWN0b3IgeW91ciBjb2RlIHRvIHVzZSBzZXRTdGF0ZSBpbnN0ZWFkIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8zMjM2KS5cIl19LGRlZmluZURlcHJlY2F0aW9uV2FybmluZz1mdW5jdGlvbihlLHQpe2NhbkRlZmluZVByb3BlcnR5JiZPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhY3RDb21wb25lbnQucHJvdG90eXBlLGUse2dldDpmdW5jdGlvbigpe2xvd1ByaW9yaXR5V2FybmluZyghMSxcIiVzKC4uLikgaXMgZGVwcmVjYXRlZCBpbiBwbGFpbiBKYXZhU2NyaXB0IFJlYWN0IGNsYXNzZXMuICVzXCIsdFswXSx0WzFdKX19KX07Zm9yKHZhciBmbk5hbWUgaW4gZGVwcmVjYXRlZEFQSXMpZGVwcmVjYXRlZEFQSXMuaGFzT3duUHJvcGVydHkoZm5OYW1lKSYmZGVmaW5lRGVwcmVjYXRpb25XYXJuaW5nKGZuTmFtZSxkZXByZWNhdGVkQVBJc1tmbk5hbWVdKX1mdW5jdGlvbiBSZWFjdFB1cmVDb21wb25lbnQoZSx0LG8pe3RoaXMucHJvcHM9ZSx0aGlzLmNvbnRleHQ9dCx0aGlzLnJlZnM9ZW1wdHlPYmplY3QsdGhpcy51cGRhdGVyPW98fFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlfWZ1bmN0aW9uIENvbXBvbmVudER1bW15KCl7fUNvbXBvbmVudER1bW15LnByb3RvdHlwZT1SZWFjdENvbXBvbmVudC5wcm90b3R5cGUsUmVhY3RQdXJlQ29tcG9uZW50LnByb3RvdHlwZT1uZXcgQ29tcG9uZW50RHVtbXksUmVhY3RQdXJlQ29tcG9uZW50LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1SZWFjdFB1cmVDb21wb25lbnQsX2Fzc2lnbihSZWFjdFB1cmVDb21wb25lbnQucHJvdG90eXBlLFJlYWN0Q29tcG9uZW50LnByb3RvdHlwZSksUmVhY3RQdXJlQ29tcG9uZW50LnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD0hMCxtb2R1bGUuZXhwb3J0cz17Q29tcG9uZW50OlJlYWN0Q29tcG9uZW50LFB1cmVDb21wb25lbnQ6UmVhY3RQdXJlQ29tcG9uZW50fTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSmxZV04wUW1GelpVTnNZWE56WlhNdWFuTWlYU3dpYm1GdFpYTWlPbHNpWDNCeWIyUkpiblpoY21saGJuUWlMQ0p5WlhGMWFYSmxJaXdpWDJGemMybG5iaUlzSWxKbFlXTjBUbTl2Y0ZWd1pHRjBaVkYxWlhWbElpd2lZMkZ1UkdWbWFXNWxVSEp2Y0dWeWRIa2lMQ0psYlhCMGVVOWlhbVZqZENJc0ltbHVkbUZ5YVdGdWRDSXNJbXh2ZDFCeWFXOXlhWFI1VjJGeWJtbHVaeUlzSWxKbFlXTjBRMjl0Y0c5dVpXNTBJaXdpY0hKdmNITWlMQ0pqYjI1MFpYaDBJaXdpZFhCa1lYUmxjaUlzSW5Sb2FYTWlMQ0p5Wldaeklpd2ljSEp2ZEc5MGVYQmxJaXdpYVhOU1pXRmpkRU52YlhCdmJtVnVkQ0lzSW5ObGRGTjBZWFJsSWl3aWNHRnlkR2xoYkZOMFlYUmxJaXdpWTJGc2JHSmhZMnNpTENKd2NtOWpaWE56SWl3aVpXNTJJaXdpVGs5RVJWOUZUbFlpTENKbGJuRjFaWFZsVTJWMFUzUmhkR1VpTENKbGJuRjFaWFZsUTJGc2JHSmhZMnNpTENKbWIzSmpaVlZ3WkdGMFpTSXNJbVZ1Y1hWbGRXVkdiM0pqWlZWd1pHRjBaU0lzSW1SbGNISmxZMkYwWldSQlVFbHpJaXdpYVhOTmIzVnVkR1ZrSWl3aWNtVndiR0ZqWlZOMFlYUmxJaXdpWkdWbWFXNWxSR1Z3Y21WallYUnBiMjVYWVhKdWFXNW5JaXdpYldWMGFHOWtUbUZ0WlNJc0ltbHVabThpTENKUFltcGxZM1FpTENKa1pXWnBibVZRY205d1pYSjBlU0lzSW1kbGRDSXNJbVp1VG1GdFpTSXNJbWhoYzA5M2JsQnliM0JsY25SNUlpd2lVbVZoWTNSUWRYSmxRMjl0Y0c5dVpXNTBJaXdpUTI5dGNHOXVaVzUwUkhWdGJYa2lMQ0pqYjI1emRISjFZM1J2Y2lJc0ltbHpVSFZ5WlZKbFlXTjBRMjl0Y0c5dVpXNTBJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSWtOdmJYQnZibVZ1ZENJc0lsQjFjbVZEYjIxd2IyNWxiblFpWFN3aWJXRndjR2x1WjNNaU9pSkJRVkZCTEdGQlJVRXNTVUZCU1VFc1pVRkJhVUpETEZGQlFWRXNkMEpCUTNwQ1F5eFJRVUZWUkN4UlFVRlJMR2xDUVVWc1FrVXNjVUpCUVhWQ1JpeFJRVUZSTERCQ1FVVXZRa2NzYTBKQlFXOUNTQ3hSUVVGUkxIVkNRVU0xUWtrc1dVRkJZMG9zVVVGQlVTeDNRa0ZEZEVKTExGVkJRVmxNTEZGQlFWRXNjMEpCUTNCQ1RTeHRRa0ZCY1VKT0xGRkJRVkVzZDBKQlMycERMRk5CUVZOUExHVkJRV1ZETEVWQlFVOURMRVZCUVZORExFZEJRM1JEUXl4TFFVRkxTQ3hOUVVGUlFTeEZRVU5pUnl4TFFVRkxSaXhSUVVGVlFTeEZRVU5tUlN4TFFVRkxReXhMUVVGUFVpeFpRVWRhVHl4TFFVRkxSQ3hSUVVGVlFTeEhRVUZYVWl4eFFrRm5SVFZDTEVkQk4wUkJTeXhsUVVGbFRTeFZRVUZWUXl4cFFrRkJiVUlzUjBFeVFqVkRVQ3hsUVVGbFRTeFZRVUZWUlN4VFFVRlhMRk5CUVZWRExFVkJRV05ETEVkQlEyaERMR2xDUVVGcVFrUXNSMEZCY1VRc2JVSkJRV3BDUVN4SFFVRXJReXhOUVVGb1FrRXNTVUZCYVVRc1pVRkJla0pGTEZGQlFWRkRMRWxCUVVsRExGTkJRVFJDWml4WFFVRlZMRVZCUVU4c2VVaEJRVEpJVGl4bFFVRmxMRTlCUTNaVFdTeExRVUZMUkN4UlFVRlJWeXhuUWtGQlowSldMRXRCUVUxTExFZEJReTlDUXl4SFFVTkdUaXhMUVVGTFJDeFJRVUZSV1N4blFrRkJaMEpZTEV0QlFVMU5MRVZCUVZVc1lVRnJRbXBFVml4bFFVRmxUU3hWUVVGVlZTeFpRVUZqTEZOQlFWVk9MRWRCUXk5RFRpeExRVUZMUkN4UlFVRlJZeXh0UWtGQmJVSmlMRTFCUXpWQ1RTeEhRVU5HVGl4TFFVRkxSQ3hSUVVGUldTeG5Ra0ZCWjBKWUxFdEJRVTFOTEVWQlFWVXNaMEpCVTNCQ0xHVkJRWHBDUXl4UlFVRlJReXhKUVVGSlF5eFRRVUV5UWl4RFFVTjZReXhKUVVGSlN5eGxRVUZwUWl4RFFVTnVRa01zVlVGQlZ5eERRVUZETEZsQlFXRXNjMGhCUTNwQ1F5eGhRVUZqTEVOQlFVTXNaVUZCWjBJc2IwZEJSVGRDUXl4NVFrRkJNa0lzVTBGQlZVTXNSVUZCV1VNc1IwRkRMME16UWl4dFFrRkRSalJDTEU5QlFVOURMR1ZCUVdWNlFpeGxRVUZsVFN4VlFVRlhaMElzUlVGQldTeERRVU14UkVrc1NVRkJTeXhYUVVOSU0wSXNiMEpCUVcxQ0xFVkJRVThzT0VSQlFTdEVkMElzUlVGQlN5eEhRVUZKUVN4RlFVRkxMRkZCVFM5SExFbEJRVXNzU1VGQlNVa3NWVUZCVlZRc1pVRkRZa0VzWlVGQlpWVXNaVUZCWlVRc1UwRkRhRU5PTEhsQ1FVRjVRazBzVDBGQlVWUXNaVUZCWlZNc1UwRlJkRVFzVTBGQlUwVXNiVUpCUVcxQ05VSXNSVUZCVDBNc1JVRkJVME1zUjBGRk1VTkRMRXRCUVV0SUxFMUJRVkZCTEVWQlEySkhMRXRCUVV0R0xGRkJRVlZCTEVWQlEyWkZMRXRCUVV0RExFdEJRVTlTTEZsQlIxcFBMRXRCUVV0RUxGRkJRVlZCTEVkQlFWZFNMSEZDUVVjMVFpeFRRVUZUYlVNc2EwSkJRMVJCTEdWQlFXVjRRaXhWUVVGWlRpeGxRVUZsVFN4VlFVTXhRM1ZDTEcxQ1FVRnRRblpDTEZWQlFWa3NTVUZCU1hkQ0xHVkJRMjVEUkN4dFFrRkJiVUoyUWl4VlFVRlZlVUlzV1VGQlkwWXNiVUpCUlRORGJrTXNVVUZCVVcxRExHMUNRVUZ0UW5aQ0xGVkJRVmRPTEdWQlFXVk5MRmRCUTNKRWRVSXNiVUpCUVcxQ2RrSXNWVUZCVlRCQ0xITkNRVUYxUWl4RlFVVndSRU1zVDBGQlQwTXNVVUZCVlN4RFFVTm1ReXhWUVVGWGJrTXNaVUZEV0c5RExHTkJRV1ZRSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdOMEwyeHBZaTlTWldGamRFSmhjMlZEYkdGemMyVnpMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBQb29sZWRDbGFzcz1yZXF1aXJlKFwiLi9Qb29sZWRDbGFzc1wiKSxSZWFjdEVsZW1lbnQ9cmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpLGVtcHR5RnVuY3Rpb249cmVxdWlyZShcImZianMvbGliL2VtcHR5RnVuY3Rpb25cIiksdHJhdmVyc2VBbGxDaGlsZHJlbj1yZXF1aXJlKFwiLi90cmF2ZXJzZUFsbENoaWxkcmVuXCIpLHR3b0FyZ3VtZW50UG9vbGVyPVBvb2xlZENsYXNzLnR3b0FyZ3VtZW50UG9vbGVyLGZvdXJBcmd1bWVudFBvb2xlcj1Qb29sZWRDbGFzcy5mb3VyQXJndW1lbnRQb29sZXIsdXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXg9L1xcLysvZztmdW5jdGlvbiBlc2NhcGVVc2VyUHJvdmlkZWRLZXkoZSl7cmV0dXJuKFwiXCIrZSkucmVwbGFjZSh1c2VyUHJvdmlkZWRLZXlFc2NhcGVSZWdleCxcIiQmL1wiKX1mdW5jdGlvbiBGb3JFYWNoQm9va0tlZXBpbmcoZSxuKXt0aGlzLmZ1bmM9ZSx0aGlzLmNvbnRleHQ9bix0aGlzLmNvdW50PTB9ZnVuY3Rpb24gZm9yRWFjaFNpbmdsZUNoaWxkKGUsbix0KXt2YXIgcj1lLmZ1bmMsbz1lLmNvbnRleHQ7ci5jYWxsKG8sbixlLmNvdW50KyspfWZ1bmN0aW9uIGZvckVhY2hDaGlsZHJlbihlLG4sdCl7aWYobnVsbD09ZSlyZXR1cm4gZTt2YXIgcj1Gb3JFYWNoQm9va0tlZXBpbmcuZ2V0UG9vbGVkKG4sdCk7dHJhdmVyc2VBbGxDaGlsZHJlbihlLGZvckVhY2hTaW5nbGVDaGlsZCxyKSxGb3JFYWNoQm9va0tlZXBpbmcucmVsZWFzZShyKX1mdW5jdGlvbiBNYXBCb29rS2VlcGluZyhlLG4sdCxyKXt0aGlzLnJlc3VsdD1lLHRoaXMua2V5UHJlZml4PW4sdGhpcy5mdW5jPXQsdGhpcy5jb250ZXh0PXIsdGhpcy5jb3VudD0wfWZ1bmN0aW9uIG1hcFNpbmdsZUNoaWxkSW50b0NvbnRleHQoZSxuLHQpe3ZhciByPWUucmVzdWx0LG89ZS5rZXlQcmVmaXgsbD1lLmZ1bmMsaT1lLmNvbnRleHQsdT1sLmNhbGwoaSxuLGUuY291bnQrKyk7QXJyYXkuaXNBcnJheSh1KT9tYXBJbnRvV2l0aEtleVByZWZpeEludGVybmFsKHUscix0LGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCk6bnVsbCE9dSYmKFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudCh1KSYmKHU9UmVhY3RFbGVtZW50LmNsb25lQW5kUmVwbGFjZUtleSh1LG8rKCF1LmtleXx8biYmbi5rZXk9PT11LmtleT9cIlwiOmVzY2FwZVVzZXJQcm92aWRlZEtleSh1LmtleSkrXCIvXCIpK3QpKSxyLnB1c2godSkpfWZ1bmN0aW9uIG1hcEludG9XaXRoS2V5UHJlZml4SW50ZXJuYWwoZSxuLHQscixvKXt2YXIgbD1cIlwiO251bGwhPXQmJihsPWVzY2FwZVVzZXJQcm92aWRlZEtleSh0KStcIi9cIik7dmFyIGk9TWFwQm9va0tlZXBpbmcuZ2V0UG9vbGVkKG4sbCxyLG8pO3RyYXZlcnNlQWxsQ2hpbGRyZW4oZSxtYXBTaW5nbGVDaGlsZEludG9Db250ZXh0LGkpLE1hcEJvb2tLZWVwaW5nLnJlbGVhc2UoaSl9ZnVuY3Rpb24gbWFwQ2hpbGRyZW4oZSxuLHQpe2lmKG51bGw9PWUpcmV0dXJuIGU7dmFyIHI9W107cmV0dXJuIG1hcEludG9XaXRoS2V5UHJlZml4SW50ZXJuYWwoZSxyLG51bGwsbix0KSxyfWZ1bmN0aW9uIGZvckVhY2hTaW5nbGVDaGlsZER1bW15KGUsbix0KXtyZXR1cm4gbnVsbH1mdW5jdGlvbiBjb3VudENoaWxkcmVuKGUsbil7cmV0dXJuIHRyYXZlcnNlQWxsQ2hpbGRyZW4oZSxmb3JFYWNoU2luZ2xlQ2hpbGREdW1teSxudWxsKX1mdW5jdGlvbiB0b0FycmF5KGUpe3ZhciBuPVtdO3JldHVybiBtYXBJbnRvV2l0aEtleVByZWZpeEludGVybmFsKGUsbixudWxsLGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCksbn1Gb3JFYWNoQm9va0tlZXBpbmcucHJvdG90eXBlLmRlc3RydWN0b3I9ZnVuY3Rpb24oKXt0aGlzLmZ1bmM9bnVsbCx0aGlzLmNvbnRleHQ9bnVsbCx0aGlzLmNvdW50PTB9LFBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhGb3JFYWNoQm9va0tlZXBpbmcsdHdvQXJndW1lbnRQb29sZXIpLE1hcEJvb2tLZWVwaW5nLnByb3RvdHlwZS5kZXN0cnVjdG9yPWZ1bmN0aW9uKCl7dGhpcy5yZXN1bHQ9bnVsbCx0aGlzLmtleVByZWZpeD1udWxsLHRoaXMuZnVuYz1udWxsLHRoaXMuY29udGV4dD1udWxsLHRoaXMuY291bnQ9MH0sUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKE1hcEJvb2tLZWVwaW5nLGZvdXJBcmd1bWVudFBvb2xlcik7dmFyIFJlYWN0Q2hpbGRyZW49e2ZvckVhY2g6Zm9yRWFjaENoaWxkcmVuLG1hcDptYXBDaGlsZHJlbixtYXBJbnRvV2l0aEtleVByZWZpeEludGVybmFsOm1hcEludG9XaXRoS2V5UHJlZml4SW50ZXJuYWwsY291bnQ6Y291bnRDaGlsZHJlbix0b0FycmF5OnRvQXJyYXl9O21vZHVsZS5leHBvcnRzPVJlYWN0Q2hpbGRyZW47XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbEpsWVdOMFEyaHBiR1J5Wlc0dWFuTWlYU3dpYm1GdFpYTWlPbHNpVUc5dmJHVmtRMnhoYzNNaUxDSnlaWEYxYVhKbElpd2lVbVZoWTNSRmJHVnRaVzUwSWl3aVpXMXdkSGxHZFc1amRHbHZiaUlzSW5SeVlYWmxjbk5sUVd4c1EyaHBiR1J5Wlc0aUxDSjBkMjlCY21kMWJXVnVkRkJ2YjJ4bGNpSXNJbVp2ZFhKQmNtZDFiV1Z1ZEZCdmIyeGxjaUlzSW5WelpYSlFjbTkyYVdSbFpFdGxlVVZ6WTJGd1pWSmxaMlY0SWl3aVpYTmpZWEJsVlhObGNsQnliM1pwWkdWa1MyVjVJaXdpZEdWNGRDSXNJbkpsY0d4aFkyVWlMQ0pHYjNKRllXTm9RbTl2YTB0bFpYQnBibWNpTENKbWIzSkZZV05vUm5WdVkzUnBiMjRpTENKbWIzSkZZV05vUTI5dWRHVjRkQ0lzSW5Sb2FYTWlMQ0ptZFc1aklpd2lZMjl1ZEdWNGRDSXNJbU52ZFc1MElpd2labTl5UldGamFGTnBibWRzWlVOb2FXeGtJaXdpWW05dmEwdGxaWEJwYm1jaUxDSmphR2xzWkNJc0ltNWhiV1VpTENKallXeHNJaXdpWm05eVJXRmphRU5vYVd4a2NtVnVJaXdpWTJocGJHUnlaVzRpTENKbWIzSkZZV05vUm5WdVl5SXNJblJ5WVhabGNuTmxRMjl1ZEdWNGRDSXNJbWRsZEZCdmIyeGxaQ0lzSW5KbGJHVmhjMlVpTENKTllYQkNiMjlyUzJWbGNHbHVaeUlzSW0xaGNGSmxjM1ZzZENJc0ltdGxlVkJ5WldacGVDSXNJbTFoY0VaMWJtTjBhVzl1SWl3aWJXRndRMjl1ZEdWNGRDSXNJbkpsYzNWc2RDSXNJbTFoY0ZOcGJtZHNaVU5vYVd4a1NXNTBiME52Ym5SbGVIUWlMQ0pqYUdsc1pFdGxlU0lzSW0xaGNIQmxaRU5vYVd4a0lpd2lRWEp5WVhraUxDSnBjMEZ5Y21GNUlpd2liV0Z3U1c1MGIxZHBkR2hMWlhsUWNtVm1hWGhKYm5SbGNtNWhiQ0lzSW5Sb1lYUlNaWFIxY201elFYSm5kVzFsYm5RaUxDSnBjMVpoYkdsa1JXeGxiV1Z1ZENJc0ltTnNiMjVsUVc1a1VtVndiR0ZqWlV0bGVTSXNJbXRsZVNJc0luQjFjMmdpTENKaGNuSmhlU0lzSW5CeVpXWnBlQ0lzSW1WelkyRndaV1JRY21WbWFYZ2lMQ0p0WVhCRGFHbHNaSEpsYmlJc0ltWnZja1ZoWTJoVGFXNW5iR1ZEYUdsc1pFUjFiVzE1SWl3aVkyOTFiblJEYUdsc1pISmxiaUlzSW5SdlFYSnlZWGtpTENKd2NtOTBiM1I1Y0dVaUxDSmtaWE4wY25WamRHOXlJaXdpWVdSa1VHOXZiR2x1WjFSdklpd2lVbVZoWTNSRGFHbHNaSEpsYmlJc0ltWnZja1ZoWTJnaUxDSnRZWEFpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZSUVN4aFFVVkJMRWxCUVVsQkxGbEJRV05ETEZGQlFWRXNhVUpCUTNSQ1F5eGhRVUZsUkN4UlFVRlJMR3RDUVVWMlFrVXNZMEZCWjBKR0xGRkJRVkVzTUVKQlEzaENSeXh2UWtGQmMwSklMRkZCUVZFc2VVSkJSVGxDU1N4clFrRkJiMEpNTEZsQlFWbExMR3RDUVVOb1EwTXNiVUpCUVhGQ1RpeFpRVUZaVFN4dFFrRkZha05ETERKQ1FVRTJRaXhQUVVOcVF5eFRRVUZUUXl4elFrRkJjMEpETEVkQlF6ZENMRTlCUVZFc1IwRkJTMEVzUjBGQlRVTXNVVUZCVVVnc01rSkJRVFJDTEU5QlYzcEVMRk5CUVZOSkxHMUNRVUZ0UWtNc1JVRkJhVUpETEVkQlF6TkRReXhMUVVGTFF5eExRVUZQU0N4RlFVTmFSU3hMUVVGTFJTeFJRVUZWU0N4RlFVTm1ReXhMUVVGTFJ5eE5RVUZSTEVWQlUyWXNVMEZCVTBNc2JVSkJRVzFDUXl4RlFVRmhReXhGUVVGUFF5eEhRVU01UXl4SlFVRkpUaXhGUVVGUFNTeEZRVUZaU2l4TFFVTnVRa01zUlVGQlZVY3NSVUZCV1Vnc1VVRkZNVUpFTEVWQlFVdFBMRXRCUVV0T0xFVkJRVk5KTEVWQlFVOUVMRVZCUVZsR0xGTkJaWGhETEZOQlFWTk5MR2RDUVVGblFrTXNSVUZCVlVNc1JVRkJZVm9zUjBGRE9VTXNSMEZCWjBJc1RVRkJXbGNzUlVGRFJpeFBRVUZQUVN4RlFVVlVMRWxCUVVsRkxFVkJRV3RDWml4dFFrRkJiVUpuUWl4VlFVRlZSaXhGUVVGaFdpeEhRVU5vUlZRc2IwSkJRVzlDYjBJc1JVRkJWVTRzYlVKQlFXOUNVU3hIUVVOc1JHWXNiVUpCUVcxQ2FVSXNVVUZCVVVZc1IwRlpOMElzVTBGQlUwY3NaVUZCWlVNc1JVRkJWME1zUlVGQlYwTXNSVUZCWVVNc1IwRkRla1J1UWl4TFFVRkxiMElzVDBGQlUwb3NSVUZEWkdoQ0xFdEJRVXRwUWl4VlFVRlpRU3hGUVVOcVFtcENMRXRCUVV0RExFdEJRVTlwUWl4RlFVTmFiRUlzUzBGQlMwVXNVVUZCVldsQ0xFVkJRMlp1UWl4TFFVRkxSeXhOUVVGUkxFVkJWMllzVTBGQlUydENMREJDUVVFd1FtaENMRVZCUVdGRExFVkJRVTluUWl4SFFVTnlSQ3hKUVVGSlJpeEZRVUZUWml4RlFVRlpaU3hQUVVOeVFrZ3NSVUZCV1Zvc1JVRkJXVmtzVlVGRGVFSm9RaXhGUVVGUFNTeEZRVUZaU2l4TFFVTnVRa01zUlVGQlZVY3NSVUZCV1Vnc1VVRkhkRUp4UWl4RlFVRmpkRUlzUlVGQlMwOHNTMEZCUzA0c1JVRkJVMGtzUlVGQlQwUXNSVUZCV1VZc1UwRkRjRVJ4UWl4TlFVRk5ReXhSUVVGUlJpeEhRVU5vUWtjc05rSkJRVFpDU0N4RlFVRmhTQ3hGUVVGUlJTeEZRVUZWYWtNc1kwRkJZM05ETEhGQ1FVTnNSQ3hOUVVGbVNpeEpRVU5NYmtNc1lVRkJZWGRETEdWQlFXVk1MRXRCUXpsQ1FTeEZRVUZqYmtNc1lVRkJZWGxETEcxQ1FVRnRRazRzUlVGSE9VTk9MRWxCUVdGTkxFVkJRVmxQTEV0QlFWTjRRaXhIUVVGVFFTeEZRVUZOZDBJc1RVRkJVVkFzUlVGQldVOHNTVUZCYzBRc1IwRkJMME53UXl4elFrRkJjMEkyUWl4RlFVRlpUeXhMUVVGUExFdEJRVmxTTEVsQlJXNUpSaXhGUVVGUFZ5eExRVUZMVWl4SlFVbG9RaXhUUVVGVFJ5dzJRa0ZCTmtKb1FpeEZRVUZWYzBJc1JVRkJUME1zUlVGQlVXaERMRVZCUVUxRExFZEJRMjVGTEVsQlFVbG5ReXhGUVVGblFpeEhRVU5PTEUxQlFWWkVMRWxCUTBaRExFVkJRV2RDZUVNc2MwSkJRWE5DZFVNc1IwRkJWU3hMUVVWc1JDeEpRVUZKY2tJc1JVRkJhMEpITEdWQlFXVkdMRlZCUVZWdFFpeEZRVUZQUlN4RlFVRmxha01zUlVGQlRVTXNSMEZETTBWYUxHOUNRVUZ2UW05Q0xFVkJRVlZYTERCQ1FVRXlRbFFzUjBGRGVrUkhMR1ZCUVdWRUxGRkJRVkZHTEVkQlowSjZRaXhUUVVGVGRVSXNXVUZCV1hwQ0xFVkJRVlZVTEVWQlFVMURMRWRCUTI1RExFZEJRV2RDTEUxQlFWcFJMRVZCUTBZc1QwRkJUMEVzUlVGRlZDeEpRVUZKVlN4RlFVRlRMRWRCUldJc1QwRkVRVTBzTmtKQlFUWkNhRUlzUlVGQlZWVXNSVUZCVVN4TFFVRk5ia0lzUlVGQlRVTXNSMEZEY0VSclFpeEZRVWRVTEZOQlFWTm5RaXgzUWtGQmQwSjRRaXhGUVVGcFFrNHNSVUZCVDBNc1IwRkRka1FzVDBGQlR5eExRVmxVTEZOQlFWTTRRaXhqUVVGak0wSXNSVUZCVlZJc1IwRkRMMElzVDBGQlQxb3NiMEpCUVc5Q2IwSXNSVUZCVlRCQ0xIZENRVUY1UWl4TlFWTm9SU3hUUVVGVFJTeFJRVUZSTlVJc1IwRkRaaXhKUVVGSlZTeEZRVUZUTEVkQlJXSXNUMEZFUVUwc05rSkJRVFpDYUVJc1JVRkJWVlVzUlVGQlVTeExRVUZOTDBJc1kwRkJZM05ETEhGQ1FVTTFSRkFzUlVFelNWUjJRaXh0UWtGQmJVSXdReXhWUVVGVlF5eFhRVUZoTEZkQlEzaERlRU1zUzBGQlMwTXNTMEZCVHl4TFFVTmFSQ3hMUVVGTFJTeFJRVUZWTEV0QlEyWkdMRXRCUVV0SExFMUJRVkVzUjBGRlptcENMRmxCUVZsMVJDeGhRVUZoTlVNc2JVSkJRVzlDVGl4dFFrRTRRemREZDBJc1pVRkJaWGRDTEZWQlFWVkRMRmRCUVdFc1YwRkRjRU40UXl4TFFVRkxiMElzVDBGQlV5eExRVU5rY0VJc1MwRkJTMmxDTEZWQlFWa3NTMEZEYWtKcVFpeExRVUZMUXl4TFFVRlBMRXRCUTFwRUxFdEJRVXRGTEZGQlFWVXNTMEZEWmtZc1MwRkJTMGNzVFVGQlVTeEhRVVZtYWtJc1dVRkJXWFZFTEdGQlFXRXhRaXhsUVVGblFuWkNMRzlDUVc5R2VrTXNTVUZCU1d0RUxHTkJRV2RDTEVOQlEyeENReXhSUVVGVGJFTXNaMEpCUTFSdFF5eEpRVUZMVkN4WlFVTk1WQ3cyUWtGQk9FSkJMRFpDUVVNNVFuWkNMRTFCUVU5clF5eGpRVU5RUXl4UlFVRlRRU3hUUVVkWVR5eFBRVUZQUXl4UlFVRlZTaUlzSW1acGJHVWlPaUl2VlhObGNuTXZjbUZyZFhOaGFTOVhiM0pyTDJKdmIzUnpkSEpoY0MxellYTnpMMlJsYlc4dmRHRjBZVzFwTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEM5c2FXSXZVbVZoWTNSRGFHbHNaSEpsYmk1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjt2YXIgX3Byb2RJbnZhcmlhbnQ9cmVxdWlyZShcIi4vcmVhY3RQcm9kSW52YXJpYW50XCIpLFJlYWN0Q3VycmVudE93bmVyPXJlcXVpcmUoXCIuL1JlYWN0Q3VycmVudE93bmVyXCIpLGludmFyaWFudD1yZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpLHdhcm5pbmc9cmVxdWlyZShcImZianMvbGliL3dhcm5pbmdcIik7ZnVuY3Rpb24gaXNOYXRpdmUoZSl7dmFyIHQ9RnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nLG49T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxvPVJlZ0V4cChcIl5cIit0LmNhbGwobikucmVwbGFjZSgvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2csXCJcXFxcJCZcIikucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZyxcIiQxLio/XCIpK1wiJFwiKTt0cnl7dmFyIHI9dC5jYWxsKGUpO3JldHVybiBvLnRlc3Qocil9Y2F0Y2goZSl7cmV0dXJuITF9fXZhciBzZXRJdGVtLGdldEl0ZW0scmVtb3ZlSXRlbSxnZXRJdGVtSURzLGFkZFJvb3QscmVtb3ZlUm9vdCxnZXRSb290SURzLGNhblVzZUNvbGxlY3Rpb25zPVwiZnVuY3Rpb25cIj09dHlwZW9mIEFycmF5LmZyb20mJlwiZnVuY3Rpb25cIj09dHlwZW9mIE1hcCYmaXNOYXRpdmUoTWFwKSYmbnVsbCE9TWFwLnByb3RvdHlwZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgTWFwLnByb3RvdHlwZS5rZXlzJiZpc05hdGl2ZShNYXAucHJvdG90eXBlLmtleXMpJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTZXQmJmlzTmF0aXZlKFNldCkmJm51bGwhPVNldC5wcm90b3R5cGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFNldC5wcm90b3R5cGUua2V5cyYmaXNOYXRpdmUoU2V0LnByb3RvdHlwZS5rZXlzKTtpZihjYW5Vc2VDb2xsZWN0aW9ucyl7dmFyIGl0ZW1NYXA9bmV3IE1hcCxyb290SURTZXQ9bmV3IFNldDtzZXRJdGVtPWZ1bmN0aW9uKGUsdCl7aXRlbU1hcC5zZXQoZSx0KX0sZ2V0SXRlbT1mdW5jdGlvbihlKXtyZXR1cm4gaXRlbU1hcC5nZXQoZSl9LHJlbW92ZUl0ZW09ZnVuY3Rpb24oZSl7aXRlbU1hcC5kZWxldGUoZSl9LGdldEl0ZW1JRHM9ZnVuY3Rpb24oKXtyZXR1cm4gQXJyYXkuZnJvbShpdGVtTWFwLmtleXMoKSl9LGFkZFJvb3Q9ZnVuY3Rpb24oZSl7cm9vdElEU2V0LmFkZChlKX0scmVtb3ZlUm9vdD1mdW5jdGlvbihlKXtyb290SURTZXQuZGVsZXRlKGUpfSxnZXRSb290SURzPWZ1bmN0aW9uKCl7cmV0dXJuIEFycmF5LmZyb20ocm9vdElEU2V0LmtleXMoKSl9fWVsc2V7dmFyIGl0ZW1CeUtleT17fSxyb290QnlLZXk9e30sZ2V0S2V5RnJvbUlEPWZ1bmN0aW9uKGUpe3JldHVyblwiLlwiK2V9LGdldElERnJvbUtleT1mdW5jdGlvbihlKXtyZXR1cm4gcGFyc2VJbnQoZS5zdWJzdHIoMSksMTApfTtzZXRJdGVtPWZ1bmN0aW9uKGUsdCl7dmFyIG49Z2V0S2V5RnJvbUlEKGUpO2l0ZW1CeUtleVtuXT10fSxnZXRJdGVtPWZ1bmN0aW9uKGUpe3ZhciB0PWdldEtleUZyb21JRChlKTtyZXR1cm4gaXRlbUJ5S2V5W3RdfSxyZW1vdmVJdGVtPWZ1bmN0aW9uKGUpe3ZhciB0PWdldEtleUZyb21JRChlKTtkZWxldGUgaXRlbUJ5S2V5W3RdfSxnZXRJdGVtSURzPWZ1bmN0aW9uKCl7cmV0dXJuIE9iamVjdC5rZXlzKGl0ZW1CeUtleSkubWFwKGdldElERnJvbUtleSl9LGFkZFJvb3Q9ZnVuY3Rpb24oZSl7dmFyIHQ9Z2V0S2V5RnJvbUlEKGUpO3Jvb3RCeUtleVt0XT0hMH0scmVtb3ZlUm9vdD1mdW5jdGlvbihlKXt2YXIgdD1nZXRLZXlGcm9tSUQoZSk7ZGVsZXRlIHJvb3RCeUtleVt0XX0sZ2V0Um9vdElEcz1mdW5jdGlvbigpe3JldHVybiBPYmplY3Qua2V5cyhyb290QnlLZXkpLm1hcChnZXRJREZyb21LZXkpfX12YXIgdW5tb3VudGVkSURzPVtdO2Z1bmN0aW9uIHB1cmdlRGVlcChlKXt2YXIgdD1nZXRJdGVtKGUpO2lmKHQpe3ZhciBuPXQuY2hpbGRJRHM7cmVtb3ZlSXRlbShlKSxuLmZvckVhY2gocHVyZ2VEZWVwKX19ZnVuY3Rpb24gZGVzY3JpYmVDb21wb25lbnRGcmFtZShlLHQsbil7cmV0dXJuXCJcXG4gICAgaW4gXCIrKGV8fFwiVW5rbm93blwiKSsodD9cIiAoYXQgXCIrdC5maWxlTmFtZS5yZXBsYWNlKC9eLipbXFxcXFxcL10vLFwiXCIpK1wiOlwiK3QubGluZU51bWJlcitcIilcIjpuP1wiIChjcmVhdGVkIGJ5IFwiK24rXCIpXCI6XCJcIil9ZnVuY3Rpb24gZ2V0RGlzcGxheU5hbWUoZSl7cmV0dXJuIG51bGw9PWU/XCIjZW1wdHlcIjpcInN0cmluZ1wiPT10eXBlb2YgZXx8XCJudW1iZXJcIj09dHlwZW9mIGU/XCIjdGV4dFwiOlwic3RyaW5nXCI9PXR5cGVvZiBlLnR5cGU/ZS50eXBlOmUudHlwZS5kaXNwbGF5TmFtZXx8ZS50eXBlLm5hbWV8fFwiVW5rbm93blwifWZ1bmN0aW9uIGRlc2NyaWJlSUQoZSl7dmFyIHQsbj1SZWFjdENvbXBvbmVudFRyZWVIb29rLmdldERpc3BsYXlOYW1lKGUpLG89UmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRFbGVtZW50KGUpLHI9UmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRPd25lcklEKGUpO3JldHVybiByJiYodD1SZWFjdENvbXBvbmVudFRyZWVIb29rLmdldERpc3BsYXlOYW1lKHIpKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ3YXJuaW5nKG8sXCJSZWFjdENvbXBvbmVudFRyZWVIb29rOiBNaXNzaW5nIFJlYWN0IGVsZW1lbnQgZm9yIGRlYnVnSUQgJXMgd2hlbiBidWlsZGluZyBzdGFja1wiLGUpLGRlc2NyaWJlQ29tcG9uZW50RnJhbWUobixvJiZvLl9zb3VyY2UsdCl9dmFyIFJlYWN0Q29tcG9uZW50VHJlZUhvb2s9e29uU2V0Q2hpbGRyZW46ZnVuY3Rpb24oZSx0KXt2YXIgbj1nZXRJdGVtKGUpO258fChcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcIkl0ZW0gbXVzdCBoYXZlIGJlZW4gc2V0XCIpOl9wcm9kSW52YXJpYW50KFwiMTQ0XCIpKSxuLmNoaWxkSURzPXQ7Zm9yKHZhciBvPTA7bzx0Lmxlbmd0aDtvKyspe3ZhciByPXRbb10sYT1nZXRJdGVtKHIpO2F8fChcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcIkV4cGVjdGVkIGhvb2sgZXZlbnRzIHRvIGZpcmUgZm9yIHRoZSBjaGlsZCBiZWZvcmUgaXRzIHBhcmVudCBpbmNsdWRlcyBpdCBpbiBvblNldENoaWxkcmVuKCkuXCIpOl9wcm9kSW52YXJpYW50KFwiMTQwXCIpKSxudWxsPT1hLmNoaWxkSURzJiZcIm9iamVjdFwiPT10eXBlb2YgYS5lbGVtZW50JiZudWxsIT1hLmVsZW1lbnQmJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcIkV4cGVjdGVkIG9uU2V0Q2hpbGRyZW4oKSB0byBmaXJlIGZvciBhIGNvbnRhaW5lciBjaGlsZCBiZWZvcmUgaXRzIHBhcmVudCBpbmNsdWRlcyBpdCBpbiBvblNldENoaWxkcmVuKCkuXCIpOl9wcm9kSW52YXJpYW50KFwiMTQxXCIpKSxhLmlzTW91bnRlZHx8KFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwiRXhwZWN0ZWQgb25Nb3VudENvbXBvbmVudCgpIHRvIGZpcmUgZm9yIHRoZSBjaGlsZCBiZWZvcmUgaXRzIHBhcmVudCBpbmNsdWRlcyBpdCBpbiBvblNldENoaWxkcmVuKCkuXCIpOl9wcm9kSW52YXJpYW50KFwiNzFcIikpLG51bGw9PWEucGFyZW50SUQmJihhLnBhcmVudElEPWUpLGEucGFyZW50SUQhPT1lJiYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoITEsXCJFeHBlY3RlZCBvbkJlZm9yZU1vdW50Q29tcG9uZW50KCkgcGFyZW50IGFuZCBvblNldENoaWxkcmVuKCkgdG8gYmUgY29uc2lzdGVudCAoJXMgaGFzIHBhcmVudHMgJXMgYW5kICVzKS5cIixyLGEucGFyZW50SUQsZSk6X3Byb2RJbnZhcmlhbnQoXCIxNDJcIixyLGEucGFyZW50SUQsZSkpfX0sb25CZWZvcmVNb3VudENvbXBvbmVudDpmdW5jdGlvbihlLHQsbil7c2V0SXRlbShlLHtlbGVtZW50OnQscGFyZW50SUQ6bix0ZXh0Om51bGwsY2hpbGRJRHM6W10saXNNb3VudGVkOiExLHVwZGF0ZUNvdW50OjB9KX0sb25CZWZvcmVVcGRhdGVDb21wb25lbnQ6ZnVuY3Rpb24oZSx0KXt2YXIgbj1nZXRJdGVtKGUpO24mJm4uaXNNb3VudGVkJiYobi5lbGVtZW50PXQpfSxvbk1vdW50Q29tcG9uZW50OmZ1bmN0aW9uKGUpe3ZhciB0PWdldEl0ZW0oZSk7dHx8KFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwiSXRlbSBtdXN0IGhhdmUgYmVlbiBzZXRcIik6X3Byb2RJbnZhcmlhbnQoXCIxNDRcIikpLHQuaXNNb3VudGVkPSEwLDA9PT10LnBhcmVudElEJiZhZGRSb290KGUpfSxvblVwZGF0ZUNvbXBvbmVudDpmdW5jdGlvbihlKXt2YXIgdD1nZXRJdGVtKGUpO3QmJnQuaXNNb3VudGVkJiZ0LnVwZGF0ZUNvdW50Kyt9LG9uVW5tb3VudENvbXBvbmVudDpmdW5jdGlvbihlKXt2YXIgdD1nZXRJdGVtKGUpO3QmJih0LmlzTW91bnRlZD0hMSwwPT09dC5wYXJlbnRJRCYmcmVtb3ZlUm9vdChlKSk7dW5tb3VudGVkSURzLnB1c2goZSl9LHB1cmdlVW5tb3VudGVkQ29tcG9uZW50czpmdW5jdGlvbigpe2lmKCFSZWFjdENvbXBvbmVudFRyZWVIb29rLl9wcmV2ZW50UHVyZ2luZyl7Zm9yKHZhciBlPTA7ZTx1bm1vdW50ZWRJRHMubGVuZ3RoO2UrKyl7cHVyZ2VEZWVwKHVubW91bnRlZElEc1tlXSl9dW5tb3VudGVkSURzLmxlbmd0aD0wfX0saXNNb3VudGVkOmZ1bmN0aW9uKGUpe3ZhciB0PWdldEl0ZW0oZSk7cmV0dXJuISF0JiZ0LmlzTW91bnRlZH0sZ2V0Q3VycmVudFN0YWNrQWRkZW5kdW06ZnVuY3Rpb24oZSl7dmFyIHQ9XCJcIjtpZihlKXt2YXIgbj1nZXREaXNwbGF5TmFtZShlKSxvPWUuX293bmVyO3QrPWRlc2NyaWJlQ29tcG9uZW50RnJhbWUobixlLl9zb3VyY2UsbyYmby5nZXROYW1lKCkpfXZhciByPVJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQsYT1yJiZyLl9kZWJ1Z0lEO3JldHVybiB0Kz1SZWFjdENvbXBvbmVudFRyZWVIb29rLmdldFN0YWNrQWRkZW5kdW1CeUlEKGEpfSxnZXRTdGFja0FkZGVuZHVtQnlJRDpmdW5jdGlvbihlKXtmb3IodmFyIHQ9XCJcIjtlOyl0Kz1kZXNjcmliZUlEKGUpLGU9UmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRQYXJlbnRJRChlKTtyZXR1cm4gdH0sZ2V0Q2hpbGRJRHM6ZnVuY3Rpb24oZSl7dmFyIHQ9Z2V0SXRlbShlKTtyZXR1cm4gdD90LmNoaWxkSURzOltdfSxnZXREaXNwbGF5TmFtZTpmdW5jdGlvbihlKXt2YXIgdD1SZWFjdENvbXBvbmVudFRyZWVIb29rLmdldEVsZW1lbnQoZSk7cmV0dXJuIHQ/Z2V0RGlzcGxheU5hbWUodCk6bnVsbH0sZ2V0RWxlbWVudDpmdW5jdGlvbihlKXt2YXIgdD1nZXRJdGVtKGUpO3JldHVybiB0P3QuZWxlbWVudDpudWxsfSxnZXRPd25lcklEOmZ1bmN0aW9uKGUpe3ZhciB0PVJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0RWxlbWVudChlKTtyZXR1cm4gdCYmdC5fb3duZXI/dC5fb3duZXIuX2RlYnVnSUQ6bnVsbH0sZ2V0UGFyZW50SUQ6ZnVuY3Rpb24oZSl7dmFyIHQ9Z2V0SXRlbShlKTtyZXR1cm4gdD90LnBhcmVudElEOm51bGx9LGdldFNvdXJjZTpmdW5jdGlvbihlKXt2YXIgdD1nZXRJdGVtKGUpLG49dD90LmVsZW1lbnQ6bnVsbDtyZXR1cm4gbnVsbCE9bj9uLl9zb3VyY2U6bnVsbH0sZ2V0VGV4dDpmdW5jdGlvbihlKXt2YXIgdD1SZWFjdENvbXBvbmVudFRyZWVIb29rLmdldEVsZW1lbnQoZSk7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHQ/dDpcIm51bWJlclwiPT10eXBlb2YgdD9cIlwiK3Q6bnVsbH0sZ2V0VXBkYXRlQ291bnQ6ZnVuY3Rpb24oZSl7dmFyIHQ9Z2V0SXRlbShlKTtyZXR1cm4gdD90LnVwZGF0ZUNvdW50OjB9LGdldFJvb3RJRHM6Z2V0Um9vdElEcyxnZXRSZWdpc3RlcmVkSURzOmdldEl0ZW1JRHMscHVzaE5vblN0YW5kYXJkV2FybmluZ1N0YWNrOmZ1bmN0aW9uKGUsdCl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgY29uc29sZS5yZWFjdFN0YWNrKXt2YXIgbj1bXSxvPVJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQscj1vJiZvLl9kZWJ1Z0lEO3RyeXtmb3IoZSYmbi5wdXNoKHtuYW1lOnI/UmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXREaXNwbGF5TmFtZShyKTpudWxsLGZpbGVOYW1lOnQ/dC5maWxlTmFtZTpudWxsLGxpbmVOdW1iZXI6dD90LmxpbmVOdW1iZXI6bnVsbH0pO3I7KXt2YXIgYT1SZWFjdENvbXBvbmVudFRyZWVIb29rLmdldEVsZW1lbnQociksaT1SZWFjdENvbXBvbmVudFRyZWVIb29rLmdldFBhcmVudElEKHIpLHU9UmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRPd25lcklEKHIpLGM9dT9SZWFjdENvbXBvbmVudFRyZWVIb29rLmdldERpc3BsYXlOYW1lKHUpOm51bGwscD1hJiZhLl9zb3VyY2U7bi5wdXNoKHtuYW1lOmMsZmlsZU5hbWU6cD9wLmZpbGVOYW1lOm51bGwsbGluZU51bWJlcjpwP3AubGluZU51bWJlcjpudWxsfSkscj1pfX1jYXRjaChlKXt9Y29uc29sZS5yZWFjdFN0YWNrKG4pfX0scG9wTm9uU3RhbmRhcmRXYXJuaW5nU3RhY2s6ZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBjb25zb2xlLnJlYWN0U3RhY2tFbmQmJmNvbnNvbGUucmVhY3RTdGFja0VuZCgpfX07bW9kdWxlLmV4cG9ydHM9UmVhY3RDb21wb25lbnRUcmVlSG9vaztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSmxZV04wUTI5dGNHOXVaVzUwVkhKbFpVaHZiMnN1YW5NaVhTd2libUZ0WlhNaU9sc2lYM0J5YjJSSmJuWmhjbWxoYm5RaUxDSnlaWEYxYVhKbElpd2lVbVZoWTNSRGRYSnlaVzUwVDNkdVpYSWlMQ0pwYm5aaGNtbGhiblFpTENKM1lYSnVhVzVuSWl3aWFYTk9ZWFJwZG1VaUxDSm1iaUlzSW1aMWJtTlViMU4wY21sdVp5SXNJa1oxYm1OMGFXOXVJaXdpY0hKdmRHOTBlWEJsSWl3aWRHOVRkSEpwYm1jaUxDSm9ZWE5QZDI1UWNtOXdaWEowZVNJc0lrOWlhbVZqZENJc0luSmxTWE5PWVhScGRtVWlMQ0pTWldkRmVIQWlMQ0pqWVd4c0lpd2ljbVZ3YkdGalpTSXNJbk52ZFhKalpTSXNJblJsYzNRaUxDSmxjbklpTENKelpYUkpkR1Z0SWl3aVoyVjBTWFJsYlNJc0luSmxiVzkyWlVsMFpXMGlMQ0puWlhSSmRHVnRTVVJ6SWl3aVlXUmtVbTl2ZENJc0luSmxiVzkyWlZKdmIzUWlMQ0puWlhSU2IyOTBTVVJ6SWl3aVkyRnVWWE5sUTI5c2JHVmpkR2x2Ym5NaUxDSkJjbkpoZVNJc0ltWnliMjBpTENKTllYQWlMQ0pyWlhseklpd2lVMlYwSWl3aWFYUmxiVTFoY0NJc0luSnZiM1JKUkZObGRDSXNJbWxrSWl3aWFYUmxiU0lzSW5ObGRDSXNJbWRsZENJc0ltRmtaQ0lzSW1sMFpXMUNlVXRsZVNJc0luSnZiM1JDZVV0bGVTSXNJbWRsZEV0bGVVWnliMjFKUkNJc0ltZGxkRWxFUm5KdmJVdGxlU0lzSW10bGVTSXNJbkJoY25ObFNXNTBJaXdpYzNWaWMzUnlJaXdpYldGd0lpd2lkVzV0YjNWdWRHVmtTVVJ6SWl3aWNIVnlaMlZFWldWd0lpd2lZMmhwYkdSSlJITWlMQ0ptYjNKRllXTm9JaXdpWkdWelkzSnBZbVZEYjIxd2IyNWxiblJHY21GdFpTSXNJbTVoYldVaUxDSnZkMjVsY2s1aGJXVWlMQ0ptYVd4bFRtRnRaU0lzSW14cGJtVk9kVzFpWlhJaUxDSm5aWFJFYVhOd2JHRjVUbUZ0WlNJc0ltVnNaVzFsYm5RaUxDSjBlWEJsSWl3aVpHbHpjR3hoZVU1aGJXVWlMQ0prWlhOamNtbGlaVWxFSWl3aVVtVmhZM1JEYjIxd2IyNWxiblJVY21WbFNHOXZheUlzSW1kbGRFVnNaVzFsYm5RaUxDSnZkMjVsY2tsRUlpd2laMlYwVDNkdVpYSkpSQ0lzSW5CeWIyTmxjM01pTENKbGJuWWlMQ0pPVDBSRlgwVk9WaUlzSWw5emIzVnlZMlVpTENKdmJsTmxkRU5vYVd4a2NtVnVJaXdpYm1WNGRFTm9hV3hrU1VSeklpd2lhU0lzSW14bGJtZDBhQ0lzSW01bGVIUkRhR2xzWkVsRUlpd2libVY0ZEVOb2FXeGtJaXdpYVhOTmIzVnVkR1ZrSWl3aWNHRnlaVzUwU1VRaUxDSnZia0psWm05eVpVMXZkVzUwUTI5dGNHOXVaVzUwSWl3aWRHVjRkQ0lzSW5Wd1pHRjBaVU52ZFc1MElpd2liMjVDWldadmNtVlZjR1JoZEdWRGIyMXdiMjVsYm5RaUxDSnZiazF2ZFc1MFEyOXRjRzl1Wlc1MElpd2liMjVWY0dSaGRHVkRiMjF3YjI1bGJuUWlMQ0p2YmxWdWJXOTFiblJEYjIxd2IyNWxiblFpTENKd2RYTm9JaXdpY0hWeVoyVlZibTF2ZFc1MFpXUkRiMjF3YjI1bGJuUnpJaXdpWDNCeVpYWmxiblJRZFhKbmFXNW5JaXdpWjJWMFEzVnljbVZ1ZEZOMFlXTnJRV1JrWlc1a2RXMGlMQ0owYjNCRmJHVnRaVzUwSWl3aWFXNW1ieUlzSW05M2JtVnlJaXdpWDI5M2JtVnlJaXdpWjJWMFRtRnRaU0lzSW1OMWNuSmxiblJQZDI1bGNpSXNJbU4xY25KbGJuUWlMQ0pmWkdWaWRXZEpSQ0lzSW1kbGRGTjBZV05yUVdSa1pXNWtkVzFDZVVsRUlpd2laMlYwVUdGeVpXNTBTVVFpTENKblpYUkRhR2xzWkVsRWN5SXNJbWRsZEZOdmRYSmpaU0lzSW1kbGRGUmxlSFFpTENKblpYUlZjR1JoZEdWRGIzVnVkQ0lzSW1kbGRGSmxaMmx6ZEdWeVpXUkpSSE1pTENKd2RYTm9UbTl1VTNSaGJtUmhjbVJYWVhKdWFXNW5VM1JoWTJzaUxDSnBjME55WldGMGFXNW5SV3hsYldWdWRDSXNJbU4xY25KbGJuUlRiM1Z5WTJVaUxDSmpiMjV6YjJ4bElpd2ljbVZoWTNSVGRHRmpheUlzSW5OMFlXTnJJaXdpY0c5d1RtOXVVM1JoYm1SaGNtUlhZWEp1YVc1blUzUmhZMnNpTENKeVpXRmpkRk4wWVdOclJXNWtJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJVMEVzWVVGRlFTeEpRVUZKUVN4bFFVRnBRa01zVVVGQlVTeDNRa0ZGZWtKRExHdENRVUZ2UWtRc1VVRkJVU3gxUWtGRk5VSkZMRlZCUVZsR0xGRkJRVkVzYzBKQlEzQkNSeXhSUVVGVlNDeFJRVUZSTEc5Q1FVVjBRaXhUUVVGVFNTeFRRVUZUUXl4SFFVVm9RaXhKUVVGSlF5eEZRVUZsUXl4VFFVRlRReXhWUVVGVlF5eFRRVU5zUTBNc1JVRkJhVUpETEU5QlFVOUlMRlZCUVZWRkxHVkJRMnhEUlN4RlFVRmhReXhQUVVGUExFbEJRVTFRTEVWQlJUZENVU3hMUVVGTFNpeEhRVVZLU3l4UlFVRlJMSE5DUVVGMVFpeFJRVVV2UWtFc1VVRkJVU3g1UkVGQk1FUXNVMEZCVnl4TFFVTXZSU3hKUVVORkxFbEJRVWxETEVWQlFWTldMRVZCUVdGUkxFdEJRVXRVTEVkQlF5OUNMRTlCUVU5UExFVkJRVmRMTEV0QlFVdEVMRWRCUTNaQ0xFMUJRVTlGTEVkQlExQXNUMEZCVHl4SFFVbFlMRWxCV1VsRExGRkJRMEZETEZGQlEwRkRMRmRCUTBGRExGZEJRMEZETEZGQlEwRkRMRmRCUTBGRExGZEJiRUpCUXl4clFrRkZhMElzYlVKQlFXWkRMRTFCUVUxRExFMUJSVVVzYlVKQlFWSkRMRXRCUVhOQ2VrSXNVMEZCVTNsQ0xFMUJSWEpDTEUxQlFXcENRU3hKUVVGSmNrSXNWMEZCYlVRc2JVSkJRWFpDY1VJc1NVRkJTWEpDTEZWQlFWVnpRaXhOUVVGMVFqRkNMRk5CUVZONVFpeEpRVUZKY2tJc1ZVRkJWWE5DTEU5QlJUZEZMRzFDUVVGU1F5eExRVUZ6UWpOQ0xGTkJRVk15UWl4TlFVVnlRaXhOUVVGcVFrRXNTVUZCU1haQ0xGZEJRVzFFTEcxQ1FVRjJRblZDTEVsQlFVbDJRaXhWUVVGVmMwSXNUVUZCZFVJeFFpeFRRVUZUTWtJc1NVRkJTWFpDTEZWQlFWVnpRaXhOUVZVMVJpeEhRVUZKU2l4clFrRkJiVUlzUTBGRGNrSXNTVUZCU1Uwc1VVRkJWU3hKUVVGSlNDeEpRVU5rU1N4VlFVRlpMRWxCUVVsR0xFbEJSWEJDV2l4UlFVRlZMRk5CUVZWbExFVkJRVWxETEVkQlEzUkNTQ3hSUVVGUlNTeEpRVUZKUml4RlFVRkpReXhKUVVWc1FtWXNVVUZCVlN4VFFVRlZZeXhIUVVOc1FpeFBRVUZQUml4UlFVRlJTeXhKUVVGSlNDeEpRVVZ5UW1Jc1YwRkJZU3hUUVVGVllTeEhRVU55UWtZc1VVRkJaMElzVDBGQlJVVXNTVUZGY0VKYUxGZEJRV0VzVjBGRFdDeFBRVUZQU3l4TlFVRk5ReXhMUVVGTFNTeFJRVUZSUml4VFFVYzFRbEFzVVVGQlZTeFRRVUZWVnl4SFFVTnNRa1FzVlVGQlZVc3NTVUZCU1Vvc1NVRkZhRUpXTEZkQlFXRXNVMEZCVlZVc1IwRkRja0pFTEZWQlFXdENMRTlCUVVWRExFbEJSWFJDVkN4WFFVRmhMRmRCUTFnc1QwRkJUMFVzVFVGQlRVTXNTMEZCUzBzc1ZVRkJWVWdzWVVGRmVrSXNRMEZEVEN4SlFVRkpVeXhWUVVGWkxFZEJRMXBETEZWQlFWa3NSMEZKV2tNc1lVRkJaU3hUUVVGVlVDeEhRVU16UWl4TlFVRlBMRWxCUVUxQkxFZEJSVmhSTEdGQlFXVXNVMEZCVlVNc1IwRkRNMElzVDBGQlQwTXNVMEZCVTBRc1JVRkJTVVVzVDBGQlR5eEhRVUZKTEV0QlIycERNVUlzVVVGQlZTeFRRVUZWWlN4RlFVRkpReXhIUVVOMFFpeEpRVUZKVVN4RlFVRk5SaXhoUVVGaFVDeEhRVU4yUWtzc1ZVRkJWVWtzUjBGQlQxSXNSMEZGYmtKbUxGRkJRVlVzVTBGQlZXTXNSMEZEYkVJc1NVRkJTVk1zUlVGQlRVWXNZVUZCWVZBc1IwRkRka0lzVDBGQlQwc3NWVUZCVlVrc1NVRkZia0owUWl4WFFVRmhMRk5CUVZWaExFZEJRM0pDTEVsQlFVbFRMRVZCUVUxR0xHRkJRV0ZRTEZWQlEyaENTeXhWUVVGVlNTeEpRVVZ1UW5KQ0xGZEJRV0VzVjBGRFdDeFBRVUZQV0N4UFFVRlBiVUlzUzBGQlMxTXNWMEZCVjA4c1NVRkJTVW9zWlVGSGNFTnVRaXhSUVVGVkxGTkJRVlZYTEVkQlEyeENMRWxCUVVsVExFVkJRVTFHTEdGQlFXRlFMRWRCUTNaQ1RTeFZRVUZWUnl4SlFVRlBMRWRCUlc1Q2JrSXNWMEZCWVN4VFFVRlZWU3hIUVVOeVFpeEpRVUZKVXl4RlFVRk5SaXhoUVVGaFVDeFZRVU5vUWswc1ZVRkJWVWNzU1VGRmJrSnNRaXhYUVVGaExGZEJRMWdzVDBGQlQyUXNUMEZCVDIxQ0xFdEJRVXRWTEZkQlFWZE5MRWxCUVVsS0xHVkJTWFJETEVsQlFVbExMR0ZCUVdVc1IwRkZia0lzVTBGQlUwTXNWVUZCVldRc1IwRkRha0lzU1VGQlNVTXNSVUZCVDJZc1VVRkJVV01zUjBGRGJrSXNSMEZCU1VNc1JVRkJUU3hEUVVOU0xFbEJRVWxqTEVWQlFWZGtMRVZCUVV0akxGTkJSWEJDTlVJc1YwRkJWMkVzUjBGRFdHVXNSVUZCVTBNc1VVRkJVVVlzV1VGSmNrSXNVMEZCVTBjc2RVSkJRWFZDUXl4RlFVRk5jRU1zUlVGQlVYRkRMRWRCUXpWRExFMUJRVThzWVVGQlpVUXNSMEZCVVN4WlFVRmpjRU1zUlVGQlV5eFJRVUZWUVN4RlFVRlBjME1zVTBGQlUzWkRMRkZCUVZFc1dVRkJZU3hKUVVGTkxFbEJRVTFETEVWQlFVOTFReXhYUVVGaExFbEJRVTFHTEVWQlFWa3NaMEpCUVd0Q1FTeEZRVUZaTEVsQlFVMHNTVUZITlV3c1UwRkJVMGNzWlVGQlpVTXNSMEZEZEVJc1QwRkJaU3hOUVVGWVFTeEZRVU5MTEZOQlEzRkNMR2xDUVVGYVFTeEhRVUV5UXl4cFFrRkJXa0VzUlVGRGVFTXNVVUZETUVJc2FVSkJRV3BDUVN4RlFVRlJReXhMUVVOcVFrUXNSVUZCVVVNc1MwRkZVa1FzUlVGQlVVTXNTMEZCUzBNc1lVRkJaVVlzUlVGQlVVTXNTMEZCUzA0c1RVRkJVU3hWUVVrMVJDeFRRVUZUVVN4WFFVRlhNVUlzUjBGRGJFSXNTVUZIU1cxQ0xFVkJTRUZFTEVWQlFVOVRMSFZDUVVGMVFrd3NaVUZCWlhSQ0xFZEJRemREZFVJc1JVRkJWVWtzZFVKQlFYVkNReXhYUVVGWE5VSXNSMEZETlVNMlFpeEZRVUZWUml4MVFrRkJkVUpITEZkQlFWYzVRaXhIUVUxb1JDeFBRVXBKTmtJc1NVRkRSbFlzUlVGQldWRXNkVUpCUVhWQ1RDeGxRVUZsVHl4SlFVVXpRaXhsUVVGNlFrVXNVVUZCVVVNc1NVRkJTVU1zVlVGQk5FSm9SU3hSUVVGUmMwUXNSVUZCVXl4dFJrRkJlVVoyUWl4SFFVTXpTV2xDTEhWQ1FVRjFRa01zUlVGQlRVc3NSMEZCVjBFc1JVRkJVVmNzVVVGQlUyWXNSMEZIYkVVc1NVRkJTVkVzZFVKQlFYbENMRU5CUXpOQ1VTeGpRVUZsTEZOQlFWVnVReXhGUVVGSmIwTXNSMEZETTBJc1NVRkJTVzVETEVWQlFVOW1MRkZCUVZGakxFZEJRMnhDUXl4SlFVRm5ReXhsUVVGNlFqaENMRkZCUVZGRExFbEJRVWxETEZOQlFUUkNha1VzVjBGQlZTeEZRVUZQTERKQ1FVRTJRa2dzWlVGQlpTeFJRVU0zUjI5RExFVkJRVXRqTEZOQlFWZHhRaXhGUVVWb1FpeEpRVUZMTEVsQlFVbERMRVZCUVVrc1JVRkJSMEVzUlVGQlNVUXNSVUZCWVVVc1QwRkJVVVFzU1VGQlN5eERRVU0xUXl4SlFVRkpSU3hGUVVGalNDeEZRVUZoUXl4SFFVTXpRa2NzUlVGQldYUkVMRkZCUVZGeFJDeEhRVU4yUWtNc1NVRkJjVU1zWlVGQmVrSlVMRkZCUVZGRExFbEJRVWxETEZOQlFUUkNha1VzVjBGQlZTeEZRVUZQTEdkSFFVRnJSMGdzWlVGQlpTeFJRVU12U2l4TlFVRjBRakpGTEVWQlFWVjZRaXhWUVVGcFJDeHBRa0ZCZEVKNVFpeEZRVUZWYWtJc1UwRkJOa01zVFVGQmNrSnBRaXhGUVVGVmFrSXNWVUZCTkVNc1pVRkJla0pSTEZGQlFWRkRMRWxCUVVsRExGTkJRVFJDYWtVc1YwRkJWU3hGUVVGUExEUkhRVUU0UjBnc1pVRkJaU3hSUVVNelVqSkZMRVZCUVZWRExGbEJRWEZETEdWQlFYcENWaXhSUVVGUlF5eEpRVUZKUXl4VFFVRTBRbXBGTEZkQlFWVXNSVUZCVHl4MVIwRkJlVWRJTEdWQlFXVXNUMEZET1Vzc1RVRkJkRUl5UlN4RlFVRlZSU3hYUVVOYVJpeEZRVUZWUlN4VFFVRlhNVU1zUjBGTGNrSjNReXhGUVVGVlJTeFhRVUZoTVVNc1NVRkJLMElzWlVGQmVrSXJRaXhSUVVGUlF5eEpRVUZKUXl4VFFVRTBRbXBGTEZkQlFWVXNSVUZCVHl3MFIwRkJOa2QxUlN4RlFVRmhReXhGUVVGVlJTeFRRVUZWTVVNc1IwRkJUVzVETEdWQlFXVXNUVUZCVHpCRkxFVkJRV0ZETEVWQlFWVkZMRk5CUVZVeFF5eE5RVWQyVXpKRExIVkNRVUYzUWl4VFFVRlZNME1zUlVGQlNYVkNMRVZCUVZOdFFpeEhRVk0zUTNwRUxGRkJRVkZsTEVWQlVrY3NRMEZEVkhWQ0xGRkJRVk5CTEVWQlExUnRRaXhUUVVGVlFTeEZRVU5XUlN4TFFVRk5MRXRCUTA0M1FpeFRRVUZWTEVkQlExWXdRaXhYUVVGWExFVkJRMWhKTEZsQlFXRXNTMEZKYWtKRExIZENRVUY1UWl4VFFVRlZPVU1zUlVGQlNYVkNMRWRCUTNKRExFbEJRVWwwUWl4RlFVRlBaaXhSUVVGUll5eEhRVU5rUXl4SFFVRlRRU3hGUVVGTGQwTXNXVUZMYmtKNFF5eEZRVUZMYzBJc1VVRkJWVUVzU1VGRmFrSjNRaXhwUWtGQmEwSXNVMEZCVlM5RExFZEJRekZDTEVsQlFVbERMRVZCUVU5bUxGRkJRVkZqTEVkQlEyeENReXhKUVVGblF5eGxRVUY2UWpoQ0xGRkJRVkZETEVsQlFVbERMRk5CUVRSQ2FrVXNWMEZCVlN4RlFVRlBMREpDUVVFMlFrZ3NaVUZCWlN4UlFVTTNSMjlETEVWQlFVdDNReXhYUVVGWkxFVkJRMk1zU1VGQmJFSjRReXhGUVVGTGVVTXNWVUZGYUVKeVJDeFJRVUZSVnl4SlFVZGFaMFFzYTBKQlFXMUNMRk5CUVZWb1JDeEhRVU16UWl4SlFVRkpReXhGUVVGUFppeFJRVUZSWXl4SFFVTmtReXhIUVVGVFFTeEZRVUZMZDBNc1YwRkxia0o0UXl4RlFVRkxORU1zWlVGRlVFa3NiVUpCUVc5Q0xGTkJRVlZxUkN4SFFVTTFRaXhKUVVGSlF5eEZRVUZQWml4UlFVRlJZeXhIUVVObVF5eEpRVTFHUVN4RlFVRkxkME1zVjBGQldTeEZRVU5qTEVsQlFXeENlRU1zUlVGQlMzbERMRlZCUldoQ2NFUXNWMEZCVjFVc1NVRkhabUVzWVVGQllYRkRMRXRCUVV0c1JDeEpRVVZ3UW0xRUxIbENRVUV3UWl4WFFVTjRRaXhKUVVGSmVFSXNkVUpCUVhWQ2VVSXNaMEpCUVROQ0xFTkJTMEVzU1VGQlN5eEpRVUZKWml4RlFVRkpMRVZCUVVkQkxFVkJRVWw0UWl4aFFVRmhlVUlzVDBGQlVVUXNTVUZCU3l4RFFVVTFRM1pDTEZWQlJGTkVMR0ZCUVdGM1FpeEpRVWQ0UW5oQ0xHRkJRV0Y1UWl4UFFVRlRMRWxCUlhoQ1J5eFZRVUZYTEZOQlFWVjZReXhIUVVOdVFpeEpRVUZKUXl4RlFVRlBaaXhSUVVGUll5eEhRVU51UWl4UlFVRlBReXhIUVVGUFFTeEZRVUZMZDBNc1YwRkZja0paTEhkQ1FVRjVRaXhUUVVGVlF5eEhRVU5xUXl4SlFVRkpReXhGUVVGUExFZEJRMWdzUjBGQlNVUXNSVUZCV1N4RFFVTmtMRWxCUVVsd1F5eEZRVUZQU1N4bFFVRmxaME1zUjBGRGRFSkZMRVZCUVZGR0xFVkJRVmRITEU5QlEzWkNSaXhIUVVGUmRFTXNkVUpCUVhWQ1F5eEZRVUZOYjBNc1JVRkJWM0JDTEZGQlFWTnpRaXhIUVVGVFFTeEZRVUZOUlN4WFFVY3hSU3hKUVVGSlF5eEZRVUZsTlVZc2EwSkJRV3RDTmtZc1VVRkRha00xUkN4RlFVRkxNa1FzUjBGQlowSkJMRVZCUVdGRkxGTkJSM1JETEU5QlJFRk9MRWRCUVZFMVFpeDFRa0ZCZFVKdFF5eHhRa0ZCY1VJNVJDeEpRVWQwUkRoRUxIRkNRVUZ6UWl4VFFVRlZPVVFzUjBGRk9VSXNTVUZFUVN4SlFVRkpkVVFzUlVGQlR5eEhRVU5LZGtRc1IwRkRUSFZFTEVkQlFWRTNRaXhYUVVGWE1VSXNSMEZEYmtKQkxFVkJRVXN5UWl4MVFrRkJkVUp2UXl4WlFVRlpMMFFzUjBGRk1VTXNUMEZCVDNWRUxFZEJSVlJUTEZsQlFXRXNVMEZCVldoRkxFZEJRM0pDTEVsQlFVbERMRVZCUVU5bUxGRkJRVkZqTEVkQlEyNUNMRTlCUVU5RExFVkJRVTlCTEVWQlFVdGpMRk5CUVZjc1NVRkZhRU5QTEdWQlFXZENMRk5CUVZWMFFpeEhRVU40UWl4SlFVRkpkVUlzUlVGQlZVa3NkVUpCUVhWQ1F5eFhRVUZYTlVJc1IwRkRhRVFzVDBGQlMzVkNMRVZCUjBWRUxHVkJRV1ZETEVkQlJtSXNUVUZKV0Vzc1YwRkJXU3hUUVVGVk5VSXNSMEZEY0VJc1NVRkJTVU1zUlVGQlQyWXNVVUZCVVdNc1IwRkRia0lzVDBGQlQwTXNSVUZCVDBFc1JVRkJTM05DTEZGQlFWVXNUVUZGTDBKUExGZEJRVmtzVTBGQlZUbENMRWRCUTNCQ0xFbEJRVWwxUWl4RlFVRlZTU3gxUWtGQmRVSkRMRmRCUVZjMVFpeEhRVU5vUkN4UFFVRkxkVUlzUjBGQldVRXNSVUZCVVd0RExFOUJSMnhDYkVNc1JVRkJVV3RETEU5QlFVOUpMRk5CUm1Jc1RVRkpXRVVzV1VGQllTeFRRVUZWTDBRc1IwRkRja0lzU1VGQlNVTXNSVUZCVDJZc1VVRkJVV01zUjBGRGJrSXNUMEZCVDBNc1JVRkJUMEVzUlVGQlMzbERMRk5CUVZjc1RVRkZhRU4xUWl4VlFVRlhMRk5CUVZWcVJTeEhRVU51UWl4SlFVRkpReXhGUVVGUFppeFJRVUZSWXl4SFFVTm1kVUlzUlVGQlZYUkNMRVZCUVU5QkxFVkJRVXR6UWl4UlFVRlZMRXRCUlhCRExFOUJSSGRDTEUxQlFWaEJMRVZCUVd0Q1FTeEZRVUZSVnl4UlFVRlZMRTFCUjI1RVowTXNVVUZCVXl4VFFVRlZiRVVzUjBGRGFrSXNTVUZCU1hWQ0xFVkJRVlZKTEhWQ1FVRjFRa01zVjBGQlZ6VkNMRWRCUTJoRUxFMUJRWFZDTEdsQ1FVRmFkVUlzUlVGRFJrRXNSVUZEY1VJc2FVSkJRVnBCTEVWQlExUXNSMEZCUzBFc1JVRkZUQ3hOUVVkWU5FTXNaVUZCWjBJc1UwRkJWVzVGTEVkQlEzaENMRWxCUVVsRExFVkJRVTltTEZGQlFWRmpMRWRCUTI1Q0xFOUJRVTlETEVWQlFVOUJMRVZCUVVzMFF5eFpRVUZqTEVkQlNXNURkRVFzVjBGQldVRXNWMEZEV2paRkxHbENRVUZyUW1oR0xGZEJSV3hDYVVZc05FSkJRVFpDTEZOQlFWVkRMRVZCUVcxQ1F5eEhRVU40UkN4SFFVRnJReXh0UWtGQmRrSkRMRkZCUVZGRExGZEJRVzVDTEVOQlNVRXNTVUZCU1VNc1JVRkJVU3hIUVVOU1ppeEZRVUZsTlVZc2EwSkJRV3RDTmtZc1VVRkRha00xUkN4RlFVRkxNa1FzUjBGQlowSkJMRVZCUVdGRkxGTkJSWFJETEVsQlUwVXNTVUZTU1ZNc1IwRkRSa2tzUlVGQlRYaENMRXRCUVVzc1EwRkRWR2hETEV0QlFVMXNRaXhGUVVGTE1rSXNkVUpCUVhWQ1RDeGxRVUZsZEVJc1IwRkJUU3hMUVVOMlJHOUNMRk5CUVZWdFJDeEZRVUZuUWtFc1JVRkJZMjVFTEZOQlFWY3NTMEZEYmtSRExGZEJRVmxyUkN4RlFVRm5Ra0VzUlVGQlkyeEVMRmRCUVdFc1QwRkpjRVJ5UWl4SFFVRkpMRU5CUTFRc1NVRkJTWFZDTEVWQlFWVkpMSFZDUVVGMVFrTXNWMEZCVnpWQ0xFZEJRelZETUVNc1JVRkJWMllzZFVKQlFYVkNiME1zV1VGQldTOUVMRWRCUXpsRE5rSXNSVUZCVlVZc2RVSkJRWFZDUnl4WFFVRlhPVUlzUjBGRE5VTnRRaXhGUVVGWlZTeEZRVUZWUml4MVFrRkJkVUpNTEdWQlFXVlBMRWRCUVZjc1MwRkRka1V2UXl4RlFVRlRlVU1zUjBGQlYwRXNSVUZCVVZjc1VVRkRhRU4zUXl4RlFVRk5lRUlzUzBGQlN5eERRVU5VYUVNc1MwRkJUVU1zUlVGRFRrTXNVMEZCVlhSRExFVkJRVk5CTEVWQlFVOXpReXhUUVVGWExFdEJRM0pEUXl4WFFVRlpka01zUlVGQlUwRXNSVUZCVDNWRExGZEJRV0VzVDBGRk0wTnlRaXhGUVVGTE1FTXNSMEZGVUN4TlFVRlBNVVFzU1VGTFZIZEdMRkZCUVZGRExGZEJRVmRETEV0QlJYSkNReXd5UWtGQk5FSXNWMEZEVnl4dFFrRkJNVUpJTEZGQlFWRkpMR1ZCUjI1Q1NpeFJRVUZSU1N4clFrRkpXa01zVDBGQlQwTXNVVUZCVlc1RUlpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDNKbFlXTjBMMnhwWWk5U1pXRmpkRU52YlhCdmJtVnVkRlJ5WldWSWIyOXJMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBSZWFjdEN1cnJlbnRPd25lcj17Y3VycmVudDpudWxsfTttb2R1bGUuZXhwb3J0cz1SZWFjdEN1cnJlbnRPd25lcjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSmxZV04wUTNWeWNtVnVkRTkzYm1WeUxtcHpJbDBzSW01aGJXVnpJanBiSWxKbFlXTjBRM1Z5Y21WdWRFOTNibVZ5SWl3aVkzVnljbVZ1ZENJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVZOQkxHRkJVVUVzU1VGQlNVRXNhMEpCUVc5Q0xFTkJTM1JDUXl4UlFVRlRMRTFCUjFoRExFOUJRVTlETEZGQlFWVklJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwzSmxZV04wTDJ4cFlpOVNaV0ZqZEVOMWNuSmxiblJQZDI1bGNpNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIFJlYWN0RWxlbWVudD1yZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIiksY3JlYXRlRE9NRmFjdG9yeT1SZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeTtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXt2YXIgUmVhY3RFbGVtZW50VmFsaWRhdG9yPXJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFZhbGlkYXRvclwiKTtjcmVhdGVET01GYWN0b3J5PVJlYWN0RWxlbWVudFZhbGlkYXRvci5jcmVhdGVGYWN0b3J5fXZhciBSZWFjdERPTUZhY3Rvcmllcz17YTpjcmVhdGVET01GYWN0b3J5KFwiYVwiKSxhYmJyOmNyZWF0ZURPTUZhY3RvcnkoXCJhYmJyXCIpLGFkZHJlc3M6Y3JlYXRlRE9NRmFjdG9yeShcImFkZHJlc3NcIiksYXJlYTpjcmVhdGVET01GYWN0b3J5KFwiYXJlYVwiKSxhcnRpY2xlOmNyZWF0ZURPTUZhY3RvcnkoXCJhcnRpY2xlXCIpLGFzaWRlOmNyZWF0ZURPTUZhY3RvcnkoXCJhc2lkZVwiKSxhdWRpbzpjcmVhdGVET01GYWN0b3J5KFwiYXVkaW9cIiksYjpjcmVhdGVET01GYWN0b3J5KFwiYlwiKSxiYXNlOmNyZWF0ZURPTUZhY3RvcnkoXCJiYXNlXCIpLGJkaTpjcmVhdGVET01GYWN0b3J5KFwiYmRpXCIpLGJkbzpjcmVhdGVET01GYWN0b3J5KFwiYmRvXCIpLGJpZzpjcmVhdGVET01GYWN0b3J5KFwiYmlnXCIpLGJsb2NrcXVvdGU6Y3JlYXRlRE9NRmFjdG9yeShcImJsb2NrcXVvdGVcIiksYm9keTpjcmVhdGVET01GYWN0b3J5KFwiYm9keVwiKSxicjpjcmVhdGVET01GYWN0b3J5KFwiYnJcIiksYnV0dG9uOmNyZWF0ZURPTUZhY3RvcnkoXCJidXR0b25cIiksY2FudmFzOmNyZWF0ZURPTUZhY3RvcnkoXCJjYW52YXNcIiksY2FwdGlvbjpjcmVhdGVET01GYWN0b3J5KFwiY2FwdGlvblwiKSxjaXRlOmNyZWF0ZURPTUZhY3RvcnkoXCJjaXRlXCIpLGNvZGU6Y3JlYXRlRE9NRmFjdG9yeShcImNvZGVcIiksY29sOmNyZWF0ZURPTUZhY3RvcnkoXCJjb2xcIiksY29sZ3JvdXA6Y3JlYXRlRE9NRmFjdG9yeShcImNvbGdyb3VwXCIpLGRhdGE6Y3JlYXRlRE9NRmFjdG9yeShcImRhdGFcIiksZGF0YWxpc3Q6Y3JlYXRlRE9NRmFjdG9yeShcImRhdGFsaXN0XCIpLGRkOmNyZWF0ZURPTUZhY3RvcnkoXCJkZFwiKSxkZWw6Y3JlYXRlRE9NRmFjdG9yeShcImRlbFwiKSxkZXRhaWxzOmNyZWF0ZURPTUZhY3RvcnkoXCJkZXRhaWxzXCIpLGRmbjpjcmVhdGVET01GYWN0b3J5KFwiZGZuXCIpLGRpYWxvZzpjcmVhdGVET01GYWN0b3J5KFwiZGlhbG9nXCIpLGRpdjpjcmVhdGVET01GYWN0b3J5KFwiZGl2XCIpLGRsOmNyZWF0ZURPTUZhY3RvcnkoXCJkbFwiKSxkdDpjcmVhdGVET01GYWN0b3J5KFwiZHRcIiksZW06Y3JlYXRlRE9NRmFjdG9yeShcImVtXCIpLGVtYmVkOmNyZWF0ZURPTUZhY3RvcnkoXCJlbWJlZFwiKSxmaWVsZHNldDpjcmVhdGVET01GYWN0b3J5KFwiZmllbGRzZXRcIiksZmlnY2FwdGlvbjpjcmVhdGVET01GYWN0b3J5KFwiZmlnY2FwdGlvblwiKSxmaWd1cmU6Y3JlYXRlRE9NRmFjdG9yeShcImZpZ3VyZVwiKSxmb290ZXI6Y3JlYXRlRE9NRmFjdG9yeShcImZvb3RlclwiKSxmb3JtOmNyZWF0ZURPTUZhY3RvcnkoXCJmb3JtXCIpLGgxOmNyZWF0ZURPTUZhY3RvcnkoXCJoMVwiKSxoMjpjcmVhdGVET01GYWN0b3J5KFwiaDJcIiksaDM6Y3JlYXRlRE9NRmFjdG9yeShcImgzXCIpLGg0OmNyZWF0ZURPTUZhY3RvcnkoXCJoNFwiKSxoNTpjcmVhdGVET01GYWN0b3J5KFwiaDVcIiksaDY6Y3JlYXRlRE9NRmFjdG9yeShcImg2XCIpLGhlYWQ6Y3JlYXRlRE9NRmFjdG9yeShcImhlYWRcIiksaGVhZGVyOmNyZWF0ZURPTUZhY3RvcnkoXCJoZWFkZXJcIiksaGdyb3VwOmNyZWF0ZURPTUZhY3RvcnkoXCJoZ3JvdXBcIiksaHI6Y3JlYXRlRE9NRmFjdG9yeShcImhyXCIpLGh0bWw6Y3JlYXRlRE9NRmFjdG9yeShcImh0bWxcIiksaTpjcmVhdGVET01GYWN0b3J5KFwiaVwiKSxpZnJhbWU6Y3JlYXRlRE9NRmFjdG9yeShcImlmcmFtZVwiKSxpbWc6Y3JlYXRlRE9NRmFjdG9yeShcImltZ1wiKSxpbnB1dDpjcmVhdGVET01GYWN0b3J5KFwiaW5wdXRcIiksaW5zOmNyZWF0ZURPTUZhY3RvcnkoXCJpbnNcIiksa2JkOmNyZWF0ZURPTUZhY3RvcnkoXCJrYmRcIiksa2V5Z2VuOmNyZWF0ZURPTUZhY3RvcnkoXCJrZXlnZW5cIiksbGFiZWw6Y3JlYXRlRE9NRmFjdG9yeShcImxhYmVsXCIpLGxlZ2VuZDpjcmVhdGVET01GYWN0b3J5KFwibGVnZW5kXCIpLGxpOmNyZWF0ZURPTUZhY3RvcnkoXCJsaVwiKSxsaW5rOmNyZWF0ZURPTUZhY3RvcnkoXCJsaW5rXCIpLG1haW46Y3JlYXRlRE9NRmFjdG9yeShcIm1haW5cIiksbWFwOmNyZWF0ZURPTUZhY3RvcnkoXCJtYXBcIiksbWFyazpjcmVhdGVET01GYWN0b3J5KFwibWFya1wiKSxtZW51OmNyZWF0ZURPTUZhY3RvcnkoXCJtZW51XCIpLG1lbnVpdGVtOmNyZWF0ZURPTUZhY3RvcnkoXCJtZW51aXRlbVwiKSxtZXRhOmNyZWF0ZURPTUZhY3RvcnkoXCJtZXRhXCIpLG1ldGVyOmNyZWF0ZURPTUZhY3RvcnkoXCJtZXRlclwiKSxuYXY6Y3JlYXRlRE9NRmFjdG9yeShcIm5hdlwiKSxub3NjcmlwdDpjcmVhdGVET01GYWN0b3J5KFwibm9zY3JpcHRcIiksb2JqZWN0OmNyZWF0ZURPTUZhY3RvcnkoXCJvYmplY3RcIiksb2w6Y3JlYXRlRE9NRmFjdG9yeShcIm9sXCIpLG9wdGdyb3VwOmNyZWF0ZURPTUZhY3RvcnkoXCJvcHRncm91cFwiKSxvcHRpb246Y3JlYXRlRE9NRmFjdG9yeShcIm9wdGlvblwiKSxvdXRwdXQ6Y3JlYXRlRE9NRmFjdG9yeShcIm91dHB1dFwiKSxwOmNyZWF0ZURPTUZhY3RvcnkoXCJwXCIpLHBhcmFtOmNyZWF0ZURPTUZhY3RvcnkoXCJwYXJhbVwiKSxwaWN0dXJlOmNyZWF0ZURPTUZhY3RvcnkoXCJwaWN0dXJlXCIpLHByZTpjcmVhdGVET01GYWN0b3J5KFwicHJlXCIpLHByb2dyZXNzOmNyZWF0ZURPTUZhY3RvcnkoXCJwcm9ncmVzc1wiKSxxOmNyZWF0ZURPTUZhY3RvcnkoXCJxXCIpLHJwOmNyZWF0ZURPTUZhY3RvcnkoXCJycFwiKSxydDpjcmVhdGVET01GYWN0b3J5KFwicnRcIikscnVieTpjcmVhdGVET01GYWN0b3J5KFwicnVieVwiKSxzOmNyZWF0ZURPTUZhY3RvcnkoXCJzXCIpLHNhbXA6Y3JlYXRlRE9NRmFjdG9yeShcInNhbXBcIiksc2NyaXB0OmNyZWF0ZURPTUZhY3RvcnkoXCJzY3JpcHRcIiksc2VjdGlvbjpjcmVhdGVET01GYWN0b3J5KFwic2VjdGlvblwiKSxzZWxlY3Q6Y3JlYXRlRE9NRmFjdG9yeShcInNlbGVjdFwiKSxzbWFsbDpjcmVhdGVET01GYWN0b3J5KFwic21hbGxcIiksc291cmNlOmNyZWF0ZURPTUZhY3RvcnkoXCJzb3VyY2VcIiksc3BhbjpjcmVhdGVET01GYWN0b3J5KFwic3BhblwiKSxzdHJvbmc6Y3JlYXRlRE9NRmFjdG9yeShcInN0cm9uZ1wiKSxzdHlsZTpjcmVhdGVET01GYWN0b3J5KFwic3R5bGVcIiksc3ViOmNyZWF0ZURPTUZhY3RvcnkoXCJzdWJcIiksc3VtbWFyeTpjcmVhdGVET01GYWN0b3J5KFwic3VtbWFyeVwiKSxzdXA6Y3JlYXRlRE9NRmFjdG9yeShcInN1cFwiKSx0YWJsZTpjcmVhdGVET01GYWN0b3J5KFwidGFibGVcIiksdGJvZHk6Y3JlYXRlRE9NRmFjdG9yeShcInRib2R5XCIpLHRkOmNyZWF0ZURPTUZhY3RvcnkoXCJ0ZFwiKSx0ZXh0YXJlYTpjcmVhdGVET01GYWN0b3J5KFwidGV4dGFyZWFcIiksdGZvb3Q6Y3JlYXRlRE9NRmFjdG9yeShcInRmb290XCIpLHRoOmNyZWF0ZURPTUZhY3RvcnkoXCJ0aFwiKSx0aGVhZDpjcmVhdGVET01GYWN0b3J5KFwidGhlYWRcIiksdGltZTpjcmVhdGVET01GYWN0b3J5KFwidGltZVwiKSx0aXRsZTpjcmVhdGVET01GYWN0b3J5KFwidGl0bGVcIiksdHI6Y3JlYXRlRE9NRmFjdG9yeShcInRyXCIpLHRyYWNrOmNyZWF0ZURPTUZhY3RvcnkoXCJ0cmFja1wiKSx1OmNyZWF0ZURPTUZhY3RvcnkoXCJ1XCIpLHVsOmNyZWF0ZURPTUZhY3RvcnkoXCJ1bFwiKSx2YXI6Y3JlYXRlRE9NRmFjdG9yeShcInZhclwiKSx2aWRlbzpjcmVhdGVET01GYWN0b3J5KFwidmlkZW9cIiksd2JyOmNyZWF0ZURPTUZhY3RvcnkoXCJ3YnJcIiksY2lyY2xlOmNyZWF0ZURPTUZhY3RvcnkoXCJjaXJjbGVcIiksY2xpcFBhdGg6Y3JlYXRlRE9NRmFjdG9yeShcImNsaXBQYXRoXCIpLGRlZnM6Y3JlYXRlRE9NRmFjdG9yeShcImRlZnNcIiksZWxsaXBzZTpjcmVhdGVET01GYWN0b3J5KFwiZWxsaXBzZVwiKSxnOmNyZWF0ZURPTUZhY3RvcnkoXCJnXCIpLGltYWdlOmNyZWF0ZURPTUZhY3RvcnkoXCJpbWFnZVwiKSxsaW5lOmNyZWF0ZURPTUZhY3RvcnkoXCJsaW5lXCIpLGxpbmVhckdyYWRpZW50OmNyZWF0ZURPTUZhY3RvcnkoXCJsaW5lYXJHcmFkaWVudFwiKSxtYXNrOmNyZWF0ZURPTUZhY3RvcnkoXCJtYXNrXCIpLHBhdGg6Y3JlYXRlRE9NRmFjdG9yeShcInBhdGhcIikscGF0dGVybjpjcmVhdGVET01GYWN0b3J5KFwicGF0dGVyblwiKSxwb2x5Z29uOmNyZWF0ZURPTUZhY3RvcnkoXCJwb2x5Z29uXCIpLHBvbHlsaW5lOmNyZWF0ZURPTUZhY3RvcnkoXCJwb2x5bGluZVwiKSxyYWRpYWxHcmFkaWVudDpjcmVhdGVET01GYWN0b3J5KFwicmFkaWFsR3JhZGllbnRcIikscmVjdDpjcmVhdGVET01GYWN0b3J5KFwicmVjdFwiKSxzdG9wOmNyZWF0ZURPTUZhY3RvcnkoXCJzdG9wXCIpLHN2ZzpjcmVhdGVET01GYWN0b3J5KFwic3ZnXCIpLHRleHQ6Y3JlYXRlRE9NRmFjdG9yeShcInRleHRcIiksdHNwYW46Y3JlYXRlRE9NRmFjdG9yeShcInRzcGFuXCIpfTttb2R1bGUuZXhwb3J0cz1SZWFjdERPTUZhY3RvcmllcztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSmxZV04wUkU5TlJtRmpkRzl5YVdWekxtcHpJbDBzSW01aGJXVnpJanBiSWxKbFlXTjBSV3hsYldWdWRDSXNJbkpsY1hWcGNtVWlMQ0pqY21WaGRHVkVUMDFHWVdOMGIzSjVJaXdpWTNKbFlYUmxSbUZqZEc5eWVTSXNJbkJ5YjJObGMzTWlMQ0psYm5ZaUxDSk9UMFJGWDBWT1ZpSXNJbEpsWVdOMFJXeGxiV1Z1ZEZaaGJHbGtZWFJ2Y2lJc0lsSmxZV04wUkU5TlJtRmpkRzl5YVdWeklpd2lZU0lzSW1GaVluSWlMQ0poWkdSeVpYTnpJaXdpWVhKbFlTSXNJbUZ5ZEdsamJHVWlMQ0poYzJsa1pTSXNJbUYxWkdsdklpd2lZaUlzSW1KaGMyVWlMQ0ppWkdraUxDSmlaRzhpTENKaWFXY2lMQ0ppYkc5amEzRjFiM1JsSWl3aVltOWtlU0lzSW1KeUlpd2lZblYwZEc5dUlpd2lZMkZ1ZG1Geklpd2lZMkZ3ZEdsdmJpSXNJbU5wZEdVaUxDSmpiMlJsSWl3aVkyOXNJaXdpWTI5c1ozSnZkWEFpTENKa1lYUmhJaXdpWkdGMFlXeHBjM1FpTENKa1pDSXNJbVJsYkNJc0ltUmxkR0ZwYkhNaUxDSmtabTRpTENKa2FXRnNiMmNpTENKa2FYWWlMQ0prYkNJc0ltUjBJaXdpWlcwaUxDSmxiV0psWkNJc0ltWnBaV3hrYzJWMElpd2labWxuWTJGd2RHbHZiaUlzSW1acFozVnlaU0lzSW1admIzUmxjaUlzSW1admNtMGlMQ0pvTVNJc0ltZ3lJaXdpYURNaUxDSm9OQ0lzSW1nMUlpd2lhRFlpTENKb1pXRmtJaXdpYUdWaFpHVnlJaXdpYUdkeWIzVndJaXdpYUhJaUxDSm9kRzFzSWl3aWFTSXNJbWxtY21GdFpTSXNJbWx0WnlJc0ltbHVjSFYwSWl3aWFXNXpJaXdpYTJKa0lpd2lhMlY1WjJWdUlpd2liR0ZpWld3aUxDSnNaV2RsYm1RaUxDSnNhU0lzSW14cGJtc2lMQ0p0WVdsdUlpd2liV0Z3SWl3aWJXRnlheUlzSW0xbGJuVWlMQ0p0Wlc1MWFYUmxiU0lzSW0xbGRHRWlMQ0p0WlhSbGNpSXNJbTVoZGlJc0ltNXZjMk55YVhCMElpd2liMkpxWldOMElpd2liMndpTENKdmNIUm5jbTkxY0NJc0ltOXdkR2x2YmlJc0ltOTFkSEIxZENJc0luQWlMQ0p3WVhKaGJTSXNJbkJwWTNSMWNtVWlMQ0p3Y21VaUxDSndjbTluY21WemN5SXNJbkVpTENKeWNDSXNJbkowSWl3aWNuVmllU0lzSW5NaUxDSnpZVzF3SWl3aWMyTnlhWEIwSWl3aWMyVmpkR2x2YmlJc0luTmxiR1ZqZENJc0luTnRZV3hzSWl3aWMyOTFjbU5sSWl3aWMzQmhiaUlzSW5OMGNtOXVaeUlzSW5OMGVXeGxJaXdpYzNWaUlpd2ljM1Z0YldGeWVTSXNJbk4xY0NJc0luUmhZbXhsSWl3aWRHSnZaSGtpTENKMFpDSXNJblJsZUhSaGNtVmhJaXdpZEdadmIzUWlMQ0owYUNJc0luUm9aV0ZrSWl3aWRHbHRaU0lzSW5ScGRHeGxJaXdpZEhJaUxDSjBjbUZqYXlJc0luVWlMQ0oxYkNJc0luWmhjaUlzSW5acFpHVnZJaXdpZDJKeUlpd2lZMmx5WTJ4bElpd2lZMnhwY0ZCaGRHZ2lMQ0prWldaeklpd2laV3hzYVhCelpTSXNJbWNpTENKcGJXRm5aU0lzSW14cGJtVWlMQ0pzYVc1bFlYSkhjbUZrYVdWdWRDSXNJbTFoYzJzaUxDSndZWFJvSWl3aWNHRjBkR1Z5YmlJc0luQnZiSGxuYjI0aUxDSndiMng1YkdsdVpTSXNJbkpoWkdsaGJFZHlZV1JwWlc1MElpd2ljbVZqZENJc0luTjBiM0FpTENKemRtY2lMQ0owWlhoMElpd2lkSE53WVc0aUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25SeklsMHNJbTFoY0hCcGJtZHpJam9pUVVGUlFTeGhRVVZCTEVsQlFVbEJMR0ZCUVdWRExGRkJRVkVzYTBKQlQzWkNReXhwUWtGQmJVSkdMR0ZCUVdGSExHTkJRM0JETEVkQlFUWkNMR1ZCUVhwQ1F5eFJRVUZSUXl4SlFVRkpReXhUUVVFeVFpeERRVU42UXl4SlFVRkpReXh6UWtGQmQwSk9MRkZCUVZFc01rSkJRM0JEUXl4cFFrRkJiVUpMTEhOQ1FVRnpRa29zWTBGUk0wTXNTVUZCU1Vzc2EwSkJRVzlDTEVOQlEzUkNReXhGUVVGSFVDeHBRa0ZCYVVJc1MwRkRjRUpSTEV0QlFVMVNMR2xDUVVGcFFpeFJRVU4yUWxNc1VVRkJVMVFzYVVKQlFXbENMRmRCUXpGQ1ZTeExRVUZOVml4cFFrRkJhVUlzVVVGRGRrSlhMRkZCUVZOWUxHbENRVUZwUWl4WFFVTXhRbGtzVFVGQlQxb3NhVUpCUVdsQ0xGTkJRM2hDWVN4TlFVRlBZaXhwUWtGQmFVSXNVMEZEZUVKakxFVkJRVWRrTEdsQ1FVRnBRaXhMUVVOd1FtVXNTMEZCVFdZc2FVSkJRV2xDTEZGQlEzWkNaMElzU1VGQlMyaENMR2xDUVVGcFFpeFBRVU4wUW1sQ0xFbEJRVXRxUWl4cFFrRkJhVUlzVDBGRGRFSnJRaXhKUVVGTGJFSXNhVUpCUVdsQ0xFOUJRM1JDYlVJc1YwRkJXVzVDTEdsQ1FVRnBRaXhqUVVNM1FtOUNMRXRCUVUxd1FpeHBRa0ZCYVVJc1VVRkRka0p4UWl4SFFVRkpja0lzYVVKQlFXbENMRTFCUTNKQ2MwSXNUMEZCVVhSQ0xHbENRVUZwUWl4VlFVTjZRblZDTEU5QlFWRjJRaXhwUWtGQmFVSXNWVUZEZWtKM1FpeFJRVUZUZUVJc2FVSkJRV2xDTEZkQlF6RkNlVUlzUzBGQlRYcENMR2xDUVVGcFFpeFJRVU4yUWpCQ0xFdEJRVTB4UWl4cFFrRkJhVUlzVVVGRGRrSXlRaXhKUVVGTE0wSXNhVUpCUVdsQ0xFOUJRM1JDTkVJc1UwRkJWVFZDTEdsQ1FVRnBRaXhaUVVNelFqWkNMRXRCUVUwM1FpeHBRa0ZCYVVJc1VVRkRka0k0UWl4VFFVRlZPVUlzYVVKQlFXbENMRmxCUXpOQ0swSXNSMEZCU1M5Q0xHbENRVUZwUWl4TlFVTnlRbWRETEVsQlFVdG9ReXhwUWtGQmFVSXNUMEZEZEVKcFF5eFJRVUZUYWtNc2FVSkJRV2xDTEZkQlF6RkNhME1zU1VGQlMyeERMR2xDUVVGcFFpeFBRVU4wUW0xRExFOUJRVkZ1UXl4cFFrRkJhVUlzVlVGRGVrSnZReXhKUVVGTGNFTXNhVUpCUVdsQ0xFOUJRM1JDY1VNc1IwRkJTWEpETEdsQ1FVRnBRaXhOUVVOeVFuTkRMRWRCUVVsMFF5eHBRa0ZCYVVJc1RVRkRja0oxUXl4SFFVRkpka01zYVVKQlFXbENMRTFCUTNKQ2QwTXNUVUZCVDNoRExHbENRVUZwUWl4VFFVTjRRbmxETEZOQlFWVjZReXhwUWtGQmFVSXNXVUZETTBJd1F5eFhRVUZaTVVNc2FVSkJRV2xDTEdOQlF6ZENNa01zVDBGQlVUTkRMR2xDUVVGcFFpeFZRVU42UWpSRExFOUJRVkUxUXl4cFFrRkJhVUlzVlVGRGVrSTJReXhMUVVGTk4wTXNhVUpCUVdsQ0xGRkJRM1pDT0VNc1IwRkJTVGxETEdsQ1FVRnBRaXhOUVVOeVFpdERMRWRCUVVrdlF5eHBRa0ZCYVVJc1RVRkRja0puUkN4SFFVRkphRVFzYVVKQlFXbENMRTFCUTNKQ2FVUXNSMEZCU1dwRUxHbENRVUZwUWl4TlFVTnlRbXRFTEVkQlFVbHNSQ3hwUWtGQmFVSXNUVUZEY2tKdFJDeEhRVUZKYmtRc2FVSkJRV2xDTEUxQlEzSkNiMFFzUzBGQlRYQkVMR2xDUVVGcFFpeFJRVU4yUW5GRUxFOUJRVkZ5UkN4cFFrRkJhVUlzVlVGRGVrSnpSQ3hQUVVGUmRFUXNhVUpCUVdsQ0xGVkJRM3BDZFVRc1IwRkJTWFpFTEdsQ1FVRnBRaXhOUVVOeVFuZEVMRXRCUVUxNFJDeHBRa0ZCYVVJc1VVRkRka0o1UkN4RlFVRkhla1FzYVVKQlFXbENMRXRCUTNCQ01FUXNUMEZCVVRGRUxHbENRVUZwUWl4VlFVTjZRakpFTEVsQlFVc3pSQ3hwUWtGQmFVSXNUMEZEZEVJMFJDeE5RVUZQTlVRc2FVSkJRV2xDTEZOQlEzaENOa1FzU1VGQlN6ZEVMR2xDUVVGcFFpeFBRVU4wUWpoRUxFbEJRVXM1UkN4cFFrRkJhVUlzVDBGRGRFSXJSQ3hQUVVGUkwwUXNhVUpCUVdsQ0xGVkJRM3BDWjBVc1RVRkJUMmhGTEdsQ1FVRnBRaXhUUVVONFFtbEZMRTlCUVZGcVJTeHBRa0ZCYVVJc1ZVRkRla0pyUlN4SFFVRkpiRVVzYVVKQlFXbENMRTFCUTNKQ2JVVXNTMEZCVFc1RkxHbENRVUZwUWl4UlFVTjJRbTlGTEV0QlFVMXdSU3hwUWtGQmFVSXNVVUZEZGtKeFJTeEpRVUZMY2tVc2FVSkJRV2xDTEU5QlEzUkNjMFVzUzBGQlRYUkZMR2xDUVVGcFFpeFJRVU4yUW5WRkxFdEJRVTEyUlN4cFFrRkJhVUlzVVVGRGRrSjNSU3hUUVVGVmVFVXNhVUpCUVdsQ0xGbEJRek5DZVVVc1MwRkJUWHBGTEdsQ1FVRnBRaXhSUVVOMlFqQkZMRTFCUVU4eFJTeHBRa0ZCYVVJc1UwRkRlRUl5UlN4SlFVRkxNMFVzYVVKQlFXbENMRTlCUTNSQ05FVXNVMEZCVlRWRkxHbENRVUZwUWl4WlFVTXpRalpGTEU5QlFWRTNSU3hwUWtGQmFVSXNWVUZEZWtJNFJTeEhRVUZKT1VVc2FVSkJRV2xDTEUxQlEzSkNLMFVzVTBGQlZTOUZMR2xDUVVGcFFpeFpRVU16UW1kR0xFOUJRVkZvUml4cFFrRkJhVUlzVlVGRGVrSnBSaXhQUVVGUmFrWXNhVUpCUVdsQ0xGVkJRM3BDYTBZc1JVRkJSMnhHTEdsQ1FVRnBRaXhMUVVOd1FtMUdMRTFCUVU5dVJpeHBRa0ZCYVVJc1UwRkRlRUp2Uml4UlFVRlRjRVlzYVVKQlFXbENMRmRCUXpGQ2NVWXNTVUZCUzNKR0xHbENRVUZwUWl4UFFVTjBRbk5HTEZOQlFWVjBSaXhwUWtGQmFVSXNXVUZETTBKMVJpeEZRVUZIZGtZc2FVSkJRV2xDTEV0QlEzQkNkMFlzUjBGQlNYaEdMR2xDUVVGcFFpeE5RVU55UW5sR0xFZEJRVWw2Uml4cFFrRkJhVUlzVFVGRGNrSXdSaXhMUVVGTk1VWXNhVUpCUVdsQ0xGRkJRM1pDTWtZc1JVRkJSek5HTEdsQ1FVRnBRaXhMUVVOd1FqUkdMRXRCUVUwMVJpeHBRa0ZCYVVJc1VVRkRka0kyUml4UFFVRlJOMFlzYVVKQlFXbENMRlZCUTNwQ09FWXNVVUZCVXpsR0xHbENRVUZwUWl4WFFVTXhRaXRHTEU5QlFWRXZSaXhwUWtGQmFVSXNWVUZEZWtKblJ5eE5RVUZQYUVjc2FVSkJRV2xDTEZOQlEzaENhVWNzVDBGQlVXcEhMR2xDUVVGcFFpeFZRVU42UW10SExFdEJRVTFzUnl4cFFrRkJhVUlzVVVGRGRrSnRSeXhQUVVGUmJrY3NhVUpCUVdsQ0xGVkJRM3BDYjBjc1RVRkJUM0JITEdsQ1FVRnBRaXhUUVVONFFuRkhMRWxCUVV0eVJ5eHBRa0ZCYVVJc1QwRkRkRUp6Unl4UlFVRlRkRWNzYVVKQlFXbENMRmRCUXpGQ2RVY3NTVUZCUzNaSExHbENRVUZwUWl4UFFVTjBRbmRITEUxQlFVOTRSeXhwUWtGQmFVSXNVMEZEZUVKNVJ5eE5RVUZQZWtjc2FVSkJRV2xDTEZOQlEzaENNRWNzUjBGQlNURkhMR2xDUVVGcFFpeE5RVU55UWpKSExGTkJRVlV6Unl4cFFrRkJhVUlzV1VGRE0wSTBSeXhOUVVGUE5VY3NhVUpCUVdsQ0xGTkJRM2hDTmtjc1IwRkJTVGRITEdsQ1FVRnBRaXhOUVVOeVFqaEhMRTFCUVU4NVJ5eHBRa0ZCYVVJc1UwRkRlRUlyUnl4TFFVRk5MMGNzYVVKQlFXbENMRkZCUTNaQ1owZ3NUVUZCVDJoSUxHbENRVUZwUWl4VFFVTjRRbWxJTEVkQlFVbHFTQ3hwUWtGQmFVSXNUVUZEY2tKclNDeE5RVUZQYkVnc2FVSkJRV2xDTEZOQlEzaENiVWdzUlVGQlIyNUlMR2xDUVVGcFFpeExRVU53UW05SUxFZEJRVWx3U0N4cFFrRkJhVUlzVFVGRGNrSnhTQ3hKUVVGUGNrZ3NhVUpCUVdsQ0xFOUJRM2hDYzBnc1RVRkJUM1JJTEdsQ1FVRnBRaXhUUVVONFFuVklMRWxCUVV0MlNDeHBRa0ZCYVVJc1QwRkhkRUozU0N4UFFVRlJlRWdzYVVKQlFXbENMRlZCUTNwQ2VVZ3NVMEZCVlhwSUxHbENRVUZwUWl4WlFVTXpRakJJTEV0QlFVMHhTQ3hwUWtGQmFVSXNVVUZEZGtJeVNDeFJRVUZUTTBnc2FVSkJRV2xDTEZkQlF6RkNORWdzUlVGQlJ6VklMR2xDUVVGcFFpeExRVU53UWpaSUxFMUJRVTgzU0N4cFFrRkJhVUlzVTBGRGVFSTRTQ3hMUVVGTk9VZ3NhVUpCUVdsQ0xGRkJRM1pDSzBnc1pVRkJaMEl2U0N4cFFrRkJhVUlzYTBKQlEycERaMGtzUzBGQlRXaEpMR2xDUVVGcFFpeFJRVU4yUW1sSkxFdEJRVTFxU1N4cFFrRkJhVUlzVVVGRGRrSnJTU3hSUVVGVGJFa3NhVUpCUVdsQ0xGZEJRekZDYlVrc1VVRkJVMjVKTEdsQ1FVRnBRaXhYUVVNeFFtOUpMRk5CUVZWd1NTeHBRa0ZCYVVJc1dVRkRNMEp4U1N4bFFVRm5RbkpKTEdsQ1FVRnBRaXhyUWtGRGFrTnpTU3hMUVVGTmRFa3NhVUpCUVdsQ0xGRkJRM1pDZFVrc1MwRkJUWFpKTEdsQ1FVRnBRaXhSUVVOMlFuZEpMRWxCUVV0NFNTeHBRa0ZCYVVJc1QwRkRkRUo1U1N4TFFVRk5la2tzYVVKQlFXbENMRkZCUTNaQ01Fa3NUVUZCVHpGSkxHbENRVUZwUWl4VlFVY3hRakpKTEU5QlFVOURMRkZCUVZWMFNTSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlVtVmhZM1JFVDAxR1lXTjBiM0pwWlhNdWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIHNwZWNpYWxQcm9wS2V5V2FybmluZ1Nob3duLHNwZWNpYWxQcm9wUmVmV2FybmluZ1Nob3duLF9hc3NpZ249cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksUmVhY3RDdXJyZW50T3duZXI9cmVxdWlyZShcIi4vUmVhY3RDdXJyZW50T3duZXJcIiksd2FybmluZz1yZXF1aXJlKFwiZmJqcy9saWIvd2FybmluZ1wiKSxjYW5EZWZpbmVQcm9wZXJ0eT1yZXF1aXJlKFwiLi9jYW5EZWZpbmVQcm9wZXJ0eVwiKSxoYXNPd25Qcm9wZXJ0eT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFJFQUNUX0VMRU1FTlRfVFlQRT1yZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRTeW1ib2xcIiksUkVTRVJWRURfUFJPUFM9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtmdW5jdGlvbiBoYXNWYWxpZFJlZihlKXtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZoYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJyZWZcIikpe3ZhciByPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSxcInJlZlwiKS5nZXQ7aWYociYmci5pc1JlYWN0V2FybmluZylyZXR1cm4hMX1yZXR1cm4gdm9pZCAwIT09ZS5yZWZ9ZnVuY3Rpb24gaGFzVmFsaWRLZXkoZSl7aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmaGFzT3duUHJvcGVydHkuY2FsbChlLFwia2V5XCIpKXt2YXIgcj1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsXCJrZXlcIikuZ2V0O2lmKHImJnIuaXNSZWFjdFdhcm5pbmcpcmV0dXJuITF9cmV0dXJuIHZvaWQgMCE9PWUua2V5fWZ1bmN0aW9uIGRlZmluZUtleVByb3BXYXJuaW5nR2V0dGVyKGUscil7dmFyIG49ZnVuY3Rpb24oKXtzcGVjaWFsUHJvcEtleVdhcm5pbmdTaG93bnx8KHNwZWNpYWxQcm9wS2V5V2FybmluZ1Nob3duPSEwLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcoITEsXCIlczogYGtleWAgaXMgbm90IGEgcHJvcC4gVHJ5aW5nIHRvIGFjY2VzcyBpdCB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBiZWluZyByZXR1cm5lZC4gSWYgeW91IG5lZWQgdG8gYWNjZXNzIHRoZSBzYW1lIHZhbHVlIHdpdGhpbiB0aGUgY2hpbGQgY29tcG9uZW50LCB5b3Ugc2hvdWxkIHBhc3MgaXQgYXMgYSBkaWZmZXJlbnQgcHJvcC4gKGh0dHBzOi8vZmIubWUvcmVhY3Qtc3BlY2lhbC1wcm9wcylcIixyKSl9O24uaXNSZWFjdFdhcm5pbmc9ITAsT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJrZXlcIix7Z2V0Om4sY29uZmlndXJhYmxlOiEwfSl9ZnVuY3Rpb24gZGVmaW5lUmVmUHJvcFdhcm5pbmdHZXR0ZXIoZSxyKXt2YXIgbj1mdW5jdGlvbigpe3NwZWNpYWxQcm9wUmVmV2FybmluZ1Nob3dufHwoc3BlY2lhbFByb3BSZWZXYXJuaW5nU2hvd249ITAsXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FybmluZyghMSxcIiVzOiBgcmVmYCBpcyBub3QgYSBwcm9wLiBUcnlpbmcgdG8gYWNjZXNzIGl0IHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGJlaW5nIHJldHVybmVkLiBJZiB5b3UgbmVlZCB0byBhY2Nlc3MgdGhlIHNhbWUgdmFsdWUgd2l0aGluIHRoZSBjaGlsZCBjb21wb25lbnQsIHlvdSBzaG91bGQgcGFzcyBpdCBhcyBhIGRpZmZlcmVudCBwcm9wLiAoaHR0cHM6Ly9mYi5tZS9yZWFjdC1zcGVjaWFsLXByb3BzKVwiLHIpKX07bi5pc1JlYWN0V2FybmluZz0hMCxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInJlZlwiLHtnZXQ6bixjb25maWd1cmFibGU6ITB9KX12YXIgUmVhY3RFbGVtZW50PWZ1bmN0aW9uKGUscixuLHQsbyxpLGEpe3ZhciBjPXskJHR5cGVvZjpSRUFDVF9FTEVNRU5UX1RZUEUsdHlwZTplLGtleTpyLHJlZjpuLHByb3BzOmEsX293bmVyOml9O3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJihjLl9zdG9yZT17fSxjYW5EZWZpbmVQcm9wZXJ0eT8oT2JqZWN0LmRlZmluZVByb3BlcnR5KGMuX3N0b3JlLFwidmFsaWRhdGVkXCIse2NvbmZpZ3VyYWJsZTohMSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLHZhbHVlOiExfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGMsXCJfc2VsZlwiLHtjb25maWd1cmFibGU6ITEsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMSx2YWx1ZTp0fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGMsXCJfc291cmNlXCIse2NvbmZpZ3VyYWJsZTohMSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiExLHZhbHVlOm99KSk6KGMuX3N0b3JlLnZhbGlkYXRlZD0hMSxjLl9zZWxmPXQsYy5fc291cmNlPW8pLE9iamVjdC5mcmVlemUmJihPYmplY3QuZnJlZXplKGMucHJvcHMpLE9iamVjdC5mcmVlemUoYykpKSxjfTtSZWFjdEVsZW1lbnQuY3JlYXRlRWxlbWVudD1mdW5jdGlvbihlLHIsbil7dmFyIHQsbz17fSxpPW51bGwsYT1udWxsLGM9bnVsbCxsPW51bGw7aWYobnVsbCE9cilmb3IodCBpbiBoYXNWYWxpZFJlZihyKSYmKGE9ci5yZWYpLGhhc1ZhbGlkS2V5KHIpJiYoaT1cIlwiK3Iua2V5KSxjPXZvaWQgMD09PXIuX19zZWxmP251bGw6ci5fX3NlbGYsbD12b2lkIDA9PT1yLl9fc291cmNlP251bGw6ci5fX3NvdXJjZSxyKWhhc093blByb3BlcnR5LmNhbGwocix0KSYmIVJFU0VSVkVEX1BST1BTLmhhc093blByb3BlcnR5KHQpJiYob1t0XT1yW3RdKTt2YXIgcz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PXMpby5jaGlsZHJlbj1uO2Vsc2UgaWYocz4xKXtmb3IodmFyIHA9QXJyYXkocyksZj0wO2Y8cztmKyspcFtmXT1hcmd1bWVudHNbZisyXTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZPYmplY3QuZnJlZXplJiZPYmplY3QuZnJlZXplKHApLG8uY2hpbGRyZW49cH1pZihlJiZlLmRlZmF1bHRQcm9wcyl7dmFyIHU9ZS5kZWZhdWx0UHJvcHM7Zm9yKHQgaW4gdSl2b2lkIDA9PT1vW3RdJiYob1t0XT11W3RdKX1pZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoaXx8YSkmJih2b2lkIDA9PT1vLiQkdHlwZW9mfHxvLiQkdHlwZW9mIT09UkVBQ1RfRUxFTUVOVF9UWVBFKSl7dmFyIHk9XCJmdW5jdGlvblwiPT10eXBlb2YgZT9lLmRpc3BsYXlOYW1lfHxlLm5hbWV8fFwiVW5rbm93blwiOmU7aSYmZGVmaW5lS2V5UHJvcFdhcm5pbmdHZXR0ZXIobyx5KSxhJiZkZWZpbmVSZWZQcm9wV2FybmluZ0dldHRlcihvLHkpfXJldHVybiBSZWFjdEVsZW1lbnQoZSxpLGEsYyxsLFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQsbyl9LFJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGUpe3ZhciByPVJlYWN0RWxlbWVudC5jcmVhdGVFbGVtZW50LmJpbmQobnVsbCxlKTtyZXR1cm4gci50eXBlPWUscn0sUmVhY3RFbGVtZW50LmNsb25lQW5kUmVwbGFjZUtleT1mdW5jdGlvbihlLHIpe3JldHVybiBSZWFjdEVsZW1lbnQoZS50eXBlLHIsZS5yZWYsZS5fc2VsZixlLl9zb3VyY2UsZS5fb3duZXIsZS5wcm9wcyl9LFJlYWN0RWxlbWVudC5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oZSxyLG4pe3ZhciB0LG8saT1fYXNzaWduKHt9LGUucHJvcHMpLGE9ZS5rZXksYz1lLnJlZixsPWUuX3NlbGYscz1lLl9zb3VyY2UscD1lLl9vd25lcjtpZihudWxsIT1yKWZvcih0IGluIGhhc1ZhbGlkUmVmKHIpJiYoYz1yLnJlZixwPVJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQpLGhhc1ZhbGlkS2V5KHIpJiYoYT1cIlwiK3Iua2V5KSxlLnR5cGUmJmUudHlwZS5kZWZhdWx0UHJvcHMmJihvPWUudHlwZS5kZWZhdWx0UHJvcHMpLHIpaGFzT3duUHJvcGVydHkuY2FsbChyLHQpJiYhUkVTRVJWRURfUFJPUFMuaGFzT3duUHJvcGVydHkodCkmJih2b2lkIDA9PT1yW3RdJiZ2b2lkIDAhPT1vP2lbdF09b1t0XTppW3RdPXJbdF0pO3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilpLmNoaWxkcmVuPW47ZWxzZSBpZihmPjEpe2Zvcih2YXIgdT1BcnJheShmKSx5PTA7eTxmO3krKyl1W3ldPWFyZ3VtZW50c1t5KzJdO2kuY2hpbGRyZW49dX1yZXR1cm4gUmVhY3RFbGVtZW50KGUudHlwZSxhLGMsbCxzLHAsaSl9LFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudD1mdW5jdGlvbihlKXtyZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgZSYmbnVsbCE9PWUmJmUuJCR0eXBlb2Y9PT1SRUFDVF9FTEVNRU5UX1RZUEV9LG1vZHVsZS5leHBvcnRzPVJlYWN0RWxlbWVudDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSmxZV04wUld4bGJXVnVkQzVxY3lKZExDSnVZVzFsY3lJNld5SnpjR1ZqYVdGc1VISnZjRXRsZVZkaGNtNXBibWRUYUc5M2JpSXNJbk53WldOcFlXeFFjbTl3VW1WbVYyRnlibWx1WjFOb2IzZHVJaXdpWDJGemMybG5iaUlzSW5KbGNYVnBjbVVpTENKU1pXRmpkRU4xY25KbGJuUlBkMjVsY2lJc0luZGhjbTVwYm1jaUxDSmpZVzVFWldacGJtVlFjbTl3WlhKMGVTSXNJbWhoYzA5M2JsQnliM0JsY25SNUlpd2lUMkpxWldOMElpd2ljSEp2ZEc5MGVYQmxJaXdpVWtWQlExUmZSVXhGVFVWT1ZGOVVXVkJGSWl3aVVrVlRSVkpXUlVSZlVGSlBVRk1pTENKclpYa2lMQ0p5WldZaUxDSmZYM05sYkdZaUxDSmZYM052ZFhKalpTSXNJbWhoYzFaaGJHbGtVbVZtSWl3aVkyOXVabWxuSWl3aWNISnZZMlZ6Y3lJc0ltVnVkaUlzSWs1UFJFVmZSVTVXSWl3aVkyRnNiQ0lzSW1kbGRIUmxjaUlzSW1kbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjaUlzSW1kbGRDSXNJbWx6VW1WaFkzUlhZWEp1YVc1bklpd2lkVzVrWldacGJtVmtJaXdpYUdGelZtRnNhV1JMWlhraUxDSmtaV1pwYm1WTFpYbFFjbTl3VjJGeWJtbHVaMGRsZEhSbGNpSXNJbkJ5YjNCeklpd2laR2x6Y0d4aGVVNWhiV1VpTENKM1lYSnVRV0p2ZFhSQlkyTmxjM05wYm1kTFpYa2lMQ0prWldacGJtVlFjbTl3WlhKMGVTSXNJbU52Ym1acFozVnlZV0pzWlNJc0ltUmxabWx1WlZKbFpsQnliM0JYWVhKdWFXNW5SMlYwZEdWeUlpd2lkMkZ5YmtGaWIzVjBRV05qWlhOemFXNW5VbVZtSWl3aVVtVmhZM1JGYkdWdFpXNTBJaXdpZEhsd1pTSXNJbk5sYkdZaUxDSnpiM1Z5WTJVaUxDSnZkMjVsY2lJc0ltVnNaVzFsYm5RaUxDSWtKSFI1Y0dWdlppSXNJbDl2ZDI1bGNpSXNJbDl6ZEc5eVpTSXNJbVZ1ZFcxbGNtRmliR1VpTENKM2NtbDBZV0pzWlNJc0luWmhiSFZsSWl3aWRtRnNhV1JoZEdWa0lpd2lYM05sYkdZaUxDSmZjMjkxY21ObElpd2labkpsWlhwbElpd2lZM0psWVhSbFJXeGxiV1Z1ZENJc0ltTm9hV3hrY21WdUlpd2ljSEp2Y0U1aGJXVWlMQ0pqYUdsc1pISmxia3hsYm1kMGFDSXNJbUZ5WjNWdFpXNTBjeUlzSW14bGJtZDBhQ0lzSW1Ob2FXeGtRWEp5WVhraUxDSkJjbkpoZVNJc0lta2lMQ0prWldaaGRXeDBVSEp2Y0hNaUxDSnVZVzFsSWl3aVkzVnljbVZ1ZENJc0ltTnlaV0YwWlVaaFkzUnZjbmtpTENKbVlXTjBiM0o1SWl3aVltbHVaQ0lzSW1Oc2IyNWxRVzVrVW1Wd2JHRmpaVXRsZVNJc0ltOXNaRVZzWlcxbGJuUWlMQ0p1WlhkTFpYa2lMQ0pqYkc5dVpVVnNaVzFsYm5RaUxDSnBjMVpoYkdsa1JXeGxiV1Z1ZENJc0ltOWlhbVZqZENJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVZGQkxHRkJSVUVzU1VGcFFrbEJMREpDUVVFMFFrTXNNa0pCYWtJMVFrTXNVVUZCVlVNc1VVRkJVU3hwUWtGRmJFSkRMR3RDUVVGdlFrUXNVVUZCVVN4MVFrRkZOVUpGTEZGQlFWVkdMRkZCUVZFc2IwSkJRMnhDUnl4clFrRkJiMEpJTEZGQlFWRXNkVUpCUXpWQ1NTeGxRVUZwUWtNc1QwRkJUME1zVlVGQlZVWXNaVUZGYkVOSExHMUNRVUZ4UWxBc1VVRkJVU3gzUWtGRk4wSlJMR1ZCUVdsQ0xFTkJRMjVDUXl4TFFVRkxMRVZCUTB4RExFdEJRVXNzUlVGRFRFTXNVVUZCVVN4RlFVTlNReXhWUVVGVkxFZEJTMW9zVTBGQlUwTXNXVUZCV1VNc1IwRkRia0lzUjBGQk5rSXNaVUZCZWtKRExGRkJRVkZETEVsQlFVbERMRlZCUTFaaUxHVkJRV1ZqTEV0QlFVdEtMRVZCUVZFc1QwRkJVU3hEUVVOMFF5eEpRVUZKU3l4RlFVRlRaQ3hQUVVGUFpTeDVRa0ZCZVVKT0xFVkJRVkVzVDBGQlQwOHNTVUZETlVRc1IwRkJTVVlzUjBGQlZVRXNSVUZCVDBjc1pVRkRia0lzVDBGQlR5eEZRVWxpTEZsQlFYTkNReXhKUVVGbVZDeEZRVUZQU2l4SlFVZG9RaXhUUVVGVFl5eFpRVUZaVml4SFFVTnVRaXhIUVVFMlFpeGxRVUY2UWtNc1VVRkJVVU1zU1VGQlNVTXNWVUZEVm1Jc1pVRkJaV01zUzBGQlMwb3NSVUZCVVN4UFFVRlJMRU5CUTNSRExFbEJRVWxMTEVWQlFWTmtMRTlCUVU5bExIbENRVUY1UWs0c1JVRkJVU3hQUVVGUFR5eEpRVU0xUkN4SFFVRkpSaXhIUVVGVlFTeEZRVUZQUnl4bFFVTnVRaXhQUVVGUExFVkJTV0lzV1VGQmMwSkRMRWxCUVdaVUxFVkJRVTlNTEVsQlIyaENMRk5CUVZOblFpd3lRa0ZCTWtKRExFVkJRVTlETEVkQlEzcERMRWxCUVVsRExFVkJRWGRDTEZkQlEzSkNMMElzTmtKQlEwaEJMRFJDUVVFMlFpeEZRVU5LTEdWQlFYcENhMElzVVVGQlVVTXNTVUZCU1VNc1ZVRkJORUptTEZOQlFWRXNSVUZCVHl4MVQwRkJkVkI1UWl4TFFVZHNWRU1zUlVGQmMwSk9MR2RDUVVGcFFpeEZRVU4yUTJwQ0xFOUJRVTkzUWl4bFFVRmxTQ3hGUVVGUExFMUJRVThzUTBGRGJFTk1MRWxCUVV0UExFVkJRMHhGTEdOQlFXTXNTVUZKYkVJc1UwRkJVME1zTWtKQlFUSkNUQ3hGUVVGUFF5eEhRVU42UXl4SlFVRkpTeXhGUVVGM1FpeFhRVU55UW14RExEWkNRVU5JUVN3MFFrRkJOa0lzUlVGRFNpeGxRVUY2UW1sQ0xGRkJRVkZETEVsQlFVbERMRlZCUVRSQ1ppeFRRVUZSTEVWQlFVOHNkVTlCUVhWUWVVSXNTMEZIYkZSTExFVkJRWE5DVml4blFrRkJhVUlzUlVGRGRrTnFRaXhQUVVGUGQwSXNaVUZCWlVnc1JVRkJUeXhOUVVGUExFTkJRMnhEVEN4SlFVRkxWeXhGUVVOTVJpeGpRVUZqTEVsQmQwSnNRaXhKUVVGSlJ5eGhRVUZsTEZOQlFWVkRMRVZCUVUxNlFpeEZRVUZMUXl4RlFVRkxlVUlzUlVGQlRVTXNSVUZCVVVNc1JVRkJUMWdzUjBGRGFFVXNTVUZCU1Zrc1JVRkJWU3hEUVVWYVF5eFRRVUZWYUVNc2JVSkJSMVl5UWl4TFFVRk5RU3hGUVVOT2VrSXNTVUZCUzBFc1JVRkRURU1zU1VGQlMwRXNSVUZEVEdkQ0xFMUJRVTlCTEVWQlIxQmpMRTlCUVZGSUxFZEJLME5XTEUxQk5VTTJRaXhsUVVGNlFuUkNMRkZCUVZGRExFbEJRVWxETEZkQlMyUnhRaXhGUVVGUlJ5eFBRVUZUTEVkQlRXSjBReXh0UWtGRFJrVXNUMEZCVDNkQ0xHVkJRV1ZUTEVWQlFWRkhMRTlCUVZFc1dVRkJZU3hEUVVOcVJGZ3NZMEZCWXl4RlFVTmtXU3haUVVGWkxFVkJRMXBETEZWQlFWVXNSVUZEVmtNc1QwRkJUeXhKUVVkVWRrTXNUMEZCVDNkQ0xHVkJRV1ZUTEVWQlFWTXNVVUZCVXl4RFFVTjBRMUlzWTBGQll5eEZRVU5rV1N4WlFVRlpMRVZCUTFwRExGVkJRVlVzUlVGRFZrTXNUVUZCVDFRc1NVRkpWRGxDTEU5QlFVOTNRaXhsUVVGbFV5eEZRVUZUTEZWQlFWY3NRMEZEZUVOU0xHTkJRV01zUlVGRFpGa3NXVUZCV1N4RlFVTmFReXhWUVVGVkxFVkJRMVpETEUxQlFVOVNMRTFCUjFSRkxFVkJRVkZITEU5QlFVOUpMRmRCUVZrc1JVRkRNMEpRTEVWQlFWRlJMRTFCUVZGWUxFVkJRMmhDUnl4RlFVRlJVeXhSUVVGVldDeEhRVVZvUWk5Q0xFOUJRVTh5UXl4VFFVTlVNME1zVDBGQlR6SkRMRTlCUVU5V0xFVkJRVkZhTEU5QlEzUkNja0lzVDBGQlR6SkRMRTlCUVU5V0xFdEJTVmhCTEVkQlQxUk1MR0ZCUVdGblFpeGpRVUZuUWl4VFFVRlZaaXhGUVVGTmNFSXNSVUZCVVc5RExFZEJRMjVFTEVsQlFVbERMRVZCUjBGNlFpeEZRVUZSTEVkQlJWSnFRaXhGUVVGTkxFdEJRMDVETEVWQlFVMHNTMEZEVG5sQ0xFVkJRVThzUzBGRFVFTXNSVUZCVXl4TFFVVmlMRWRCUVdNc1RVRkJWblJDTEVWQlYwWXNTVUZCUzNGRExFdEJWa1IwUXl4WlFVRlpReXhMUVVOa1NpeEZRVUZOU1N4RlFVRlBTaXhMUVVWWVl5eFpRVUZaVml4TFFVTmtUQ3hGUVVGTkxFZEJRVXRMTEVWQlFVOU1MRXRCUjNCQ01FSXNUMEZCZVVKYUxFbEJRV3hDVkN4RlFVRlBTQ3hQUVVGMVFpeExRVUZQUnl4RlFVRlBTQ3hQUVVOdVJIbENMRTlCUVRaQ1lpeEpRVUZ3UWxRc1JVRkJUMFlzVTBGQmVVSXNTMEZCVDBVc1JVRkJUMFlzVTBGRmRFTkZMRVZCUTFoV0xHVkJRV1ZqTEV0QlFVdEtMRVZCUVZGeFF5eExRVUZqTTBNc1pVRkJaVW9zWlVGQlpTdERMRXRCUXpGRmVrSXNSVUZCVFhsQ0xFZEJRVmx5UXl4RlFVRlBjVU1zU1VGUEwwSXNTVUZCU1VNc1JVRkJhVUpETEZWQlFWVkRMRTlCUVZNc1JVRkRlRU1zUjBGQmRVSXNTVUZCYmtKR0xFVkJRMFl4UWl4RlFVRk5kMElzVTBGQlYwRXNUMEZEV2l4SFFVRkpSU3hGUVVGcFFpeEZRVUZITEVOQlJUZENMRWxCUkVFc1NVRkJTVWNzUlVGQllVTXNUVUZCVFVvc1IwRkRaRXNzUlVGQlNTeEZRVUZIUVN4RlFVRkpUQ3hGUVVGblFrc3NTVUZEYkVOR0xFVkJRVmRGTEVkQlFVdEtMRlZCUVZWSkxFVkJRVWtzUjBGRlNDeGxRVUY2UWpGRExGRkJRVkZETEVsQlFVbERMRlZCUTFaYUxFOUJRVTh5UXl4UlFVTlVNME1zVDBGQlR6SkRMRTlCUVU5UExFZEJSMnhDTjBJc1JVRkJUWGRDTEZOQlFWZExMRVZCU1c1Q0xFZEJRVWx5UWl4SFFVRlJRU3hGUVVGTGQwSXNZVUZCWXl4RFFVTTNRaXhKUVVGSlFTeEZRVUZsZUVJc1JVRkJTM2RDTEdGQlEzaENMRWxCUVV0UUxFdEJRVmxQTEU5QlExTnVReXhKUVVGd1FrY3NSVUZCVFhsQ0xFdEJRMUo2UWl4RlFVRk5lVUlzUjBGQldVOHNSVUZCWVZBc1NVRkpja01zUjBGQk5rSXNaVUZCZWtKd1F5eFJRVUZSUXl4SlFVRkpReXhYUVVOV1VpeEhRVUZQUXl4VlFVTnhRaXhKUVVGdVFtZENMRVZCUVUxaExGVkJRVFJDWWl4RlFVRk5ZU3hYUVVGaGFFTXNiMEpCUVc5Q0xFTkJRMnhHTEVsQlFVbHZRaXhGUVVFNFFpeHRRa0ZCVkU4c1JVRkJjMEpCTEVWQlFVdFFMR0ZCUVdWUExFVkJRVXQ1UWl4TlFVRlJMRlZCUVZsNlFpeEZRVU40Um5wQ0xFZEJRMFpuUWl3eVFrRkJNa0pETEVWQlFVOURMRWRCUldoRGFrSXNSMEZEUm5GQ0xESkNRVUV5UWt3c1JVRkJUME1zUjBGTE1VTXNUMEZCVDAwc1lVRkJZVU1zUlVGQlRYcENMRVZCUVV0RExFVkJRVXQ1UWl4RlFVRk5ReXhGUVVGUmJrTXNhMEpCUVd0Q01rUXNVVUZCVTJ4RExFbEJUeTlGVHl4aFFVRmhORUlzWTBGQlowSXNVMEZCVlROQ0xFZEJRM0pETEVsQlFVazBRaXhGUVVGVk4wSXNZVUZCWVdkQ0xHTkJRV05qTEV0QlFVc3NTMEZCVFRkQ0xFZEJUM0JFTEU5QlJFRTBRaXhGUVVGUk5VSXNTMEZCVDBFc1JVRkRValJDTEVkQlIxUTNRaXhoUVVGaEswSXNiVUpCUVhGQ0xGTkJRVlZETEVWQlFWbERMRWRCUjNSRUxFOUJSbWxDYWtNc1lVRkJZV2RETEVWQlFWY3ZRaXhMUVVGTlowTXNSVUZCVVVRc1JVRkJWM1pFTEVsQlFVdDFSQ3hGUVVGWGJrSXNUVUZCVDIxQ0xFVkJRVmRzUWl4UlFVRlRhMElzUlVGQlYzcENMRTlCUVZGNVFpeEZRVUZYZGtNc1VVRlROMGxQTEdGQlFXRnJReXhoUVVGbExGTkJRVlUzUWl4RlFVRlRlRUlzUlVGQlVXOURMRWRCUTNKRUxFbEJRVWxETEVWQk5rSkZUeXhGUVRGQ1JtaERMRVZCUVZFelFpeFJRVUZSTEVkQlFVbDFReXhGUVVGUldpeFBRVWMxUW1wQ0xFVkJRVTAyUWl4RlFVRlJOMElzU1VGRFpFTXNSVUZCVFRSQ0xFVkJRVkUxUWl4SlFVVmtlVUlzUlVGQlQwY3NSVUZCVVZFc1RVRkpabFlzUlVGQlUwVXNSVUZCVVZNc1VVRkhha0pXTEVWQlFWRkRMRVZCUVZGRkxFOUJSWEJDTEVkQlFXTXNUVUZCVmpGQ0xFVkJaVVlzU1VGQlMzRkRMRXRCWkVSMFF5eFpRVUZaUXl4TFFVVmtTaXhGUVVGTlNTeEZRVUZQU2l4SlFVTmlNa0lzUlVGQlVYQkRMR3RDUVVGclFqSkVMRk5CUlhoQ2NFTXNXVUZCV1ZZc1MwRkRaRXdzUlVGQlRTeEhRVUZMU3l4RlFVRlBUQ3hMUVV0b1FqWkNMRVZCUVZGS0xFMUJRVkZKTEVWQlFWRktMRXRCUVV0M1FpeGxRVU12UWtFc1JVRkJaWEJDTEVWQlFWRktMRXRCUVV0M1FpeGpRVVZpTlVNc1JVRkRXRllzWlVGQlpXTXNTMEZCUzBvc1JVRkJVWEZETEV0QlFXTXpReXhsUVVGbFNpeGxRVUZsSzBNc1ZVRkRha1ExUWl4SlFVRnlRbFFzUlVGQlQzRkRMRk5CUVRSRE5VSXNTVUZCYWtKdFF5eEZRVVZ3UTJoRExFVkJRVTE1UWl4SFFVRlpUeXhGUVVGaFVDeEhRVVV2UW5wQ0xFVkJRVTE1UWl4SFFVRlpja01zUlVGQlQzRkRMRWxCVVdwRExFbEJRVWxETEVWQlFXbENReXhWUVVGVlF5eFBRVUZUTEVWQlEzaERMRWRCUVhWQ0xFbEJRVzVDUml4RlFVTkdNVUlzUlVGQlRYZENMRk5CUVZkQkxFOUJRMW9zUjBGQlNVVXNSVUZCYVVJc1JVRkJSeXhEUVVVM1FpeEpRVVJCTEVsQlFVbEhMRVZCUVdGRExFMUJRVTFLTEVkQlEyUkxMRVZCUVVrc1JVRkJSMEVzUlVGQlNVd3NSVUZCWjBKTExFbEJRMnhEUml4RlFVRlhSU3hIUVVGTFNpeFZRVUZWU1N4RlFVRkpMRWRCUldoREwwSXNSVUZCVFhkQ0xGTkJRVmRMTEVWQlIyNUNMRTlCUVU5MFFpeGhRVUZoU3l4RlFVRlJTaXhMUVVGTmVrSXNSVUZCUzBNc1JVRkJTM2xDTEVWQlFVMURMRVZCUVZGRExFVkJRVTlZTEVsQlZXNUZUeXhoUVVGaGJVTXNaVUZCYVVJc1UwRkJWVU1zUjBGRGRFTXNUVUZCZVVJc2FVSkJRVmhCTEVkQlFXdERMRTlCUVZoQkxFZEJRVzFDUVN4RlFVRlBPVUlzVjBGQllXaERMRzlDUVVjNVJTdEVMRTlCUVU5RExGRkJRVlYwUXlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2VW1WaFkzUkZiR1Z0Wlc1MExtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIFJFQUNUX0VMRU1FTlRfVFlQRT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3ImJlN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpfHw2MDEwMzttb2R1bGUuZXhwb3J0cz1SRUFDVF9FTEVNRU5UX1RZUEU7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbEpsWVdOMFJXeGxiV1Z1ZEZONWJXSnZiQzVxY3lKZExDSnVZVzFsY3lJNld5SlNSVUZEVkY5RlRFVk5SVTVVWDFSWlVFVWlMQ0pUZVcxaWIyd2lMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRlRRU3hoUVV0QkxFbEJRVWxCTEcxQ1FVRjFReXh0UWtGQldFTXNVVUZCZVVKQkxFOUJRVmtzUzBGQlMwRXNUMEZCV1N4SlFVRkZMR3RDUVVGdlFpeE5RVVUxUjBNc1QwRkJUME1zVVVGQlZVZ2lMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F2YkdsaUwxSmxZV04wUld4bGJXVnVkRk41YldKdmJDNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIFJlYWN0Q3VycmVudE93bmVyPXJlcXVpcmUoXCIuL1JlYWN0Q3VycmVudE93bmVyXCIpLFJlYWN0Q29tcG9uZW50VHJlZUhvb2s9cmVxdWlyZShcIi4vUmVhY3RDb21wb25lbnRUcmVlSG9va1wiKSxSZWFjdEVsZW1lbnQ9cmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpLGNoZWNrUmVhY3RUeXBlU3BlYz1yZXF1aXJlKFwiLi9jaGVja1JlYWN0VHlwZVNwZWNcIiksY2FuRGVmaW5lUHJvcGVydHk9cmVxdWlyZShcIi4vY2FuRGVmaW5lUHJvcGVydHlcIiksZ2V0SXRlcmF0b3JGbj1yZXF1aXJlKFwiLi9nZXRJdGVyYXRvckZuXCIpLHdhcm5pbmc9cmVxdWlyZShcImZianMvbGliL3dhcm5pbmdcIiksbG93UHJpb3JpdHlXYXJuaW5nPXJlcXVpcmUoXCIuL2xvd1ByaW9yaXR5V2FybmluZ1wiKTtmdW5jdGlvbiBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oKXtpZihSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50KXt2YXIgZT1SZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LmdldE5hbWUoKTtpZihlKXJldHVyblwiIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGBcIitlK1wiYC5cIn1yZXR1cm5cIlwifWZ1bmN0aW9uIGdldFNvdXJjZUluZm9FcnJvckFkZGVuZHVtKGUpe2lmKG51bGwhPWUmJnZvaWQgMCE9PWUuX19zb3VyY2Upe3ZhciByPWUuX19zb3VyY2U7cmV0dXJuXCIgQ2hlY2sgeW91ciBjb2RlIGF0IFwiK3IuZmlsZU5hbWUucmVwbGFjZSgvXi4qW1xcXFxcXC9dLyxcIlwiKStcIjpcIityLmxpbmVOdW1iZXIrXCIuXCJ9cmV0dXJuXCJcIn12YXIgb3duZXJIYXNLZXlVc2VXYXJuaW5nPXt9O2Z1bmN0aW9uIGdldEN1cnJlbnRDb21wb25lbnRFcnJvckluZm8oZSl7dmFyIHI9Z2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKCk7aWYoIXIpe3ZhciB0PVwic3RyaW5nXCI9PXR5cGVvZiBlP2U6ZS5kaXNwbGF5TmFtZXx8ZS5uYW1lO3QmJihyPVwiIENoZWNrIHRoZSB0b3AtbGV2ZWwgcmVuZGVyIGNhbGwgdXNpbmcgPFwiK3QrXCI+LlwiKX1yZXR1cm4gcn1mdW5jdGlvbiB2YWxpZGF0ZUV4cGxpY2l0S2V5KGUscil7aWYoZS5fc3RvcmUmJiFlLl9zdG9yZS52YWxpZGF0ZWQmJm51bGw9PWUua2V5KXtlLl9zdG9yZS52YWxpZGF0ZWQ9ITA7dmFyIHQ9b3duZXJIYXNLZXlVc2VXYXJuaW5nLnVuaXF1ZUtleXx8KG93bmVySGFzS2V5VXNlV2FybmluZy51bmlxdWVLZXk9e30pLG49Z2V0Q3VycmVudENvbXBvbmVudEVycm9ySW5mbyhyKTtpZighdFtuXSl7dFtuXT0hMDt2YXIgbz1cIlwiO2UmJmUuX293bmVyJiZlLl9vd25lciE9PVJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQmJihvPVwiIEl0IHdhcyBwYXNzZWQgYSBjaGlsZCBmcm9tIFwiK2UuX293bmVyLmdldE5hbWUoKStcIi5cIiksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FybmluZyghMSwnRWFjaCBjaGlsZCBpbiBhbiBhcnJheSBvciBpdGVyYXRvciBzaG91bGQgaGF2ZSBhIHVuaXF1ZSBcImtleVwiIHByb3AuJXMlcyBTZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC13YXJuaW5nLWtleXMgZm9yIG1vcmUgaW5mb3JtYXRpb24uJXMnLG4sbyxSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldEN1cnJlbnRTdGFja0FkZGVuZHVtKGUpKX19fWZ1bmN0aW9uIHZhbGlkYXRlQ2hpbGRLZXlzKGUscil7aWYoXCJvYmplY3RcIj09dHlwZW9mIGUpaWYoQXJyYXkuaXNBcnJheShlKSlmb3IodmFyIHQ9MDt0PGUubGVuZ3RoO3QrKyl7dmFyIG49ZVt0XTtSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQobikmJnZhbGlkYXRlRXhwbGljaXRLZXkobixyKX1lbHNlIGlmKFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChlKSllLl9zdG9yZSYmKGUuX3N0b3JlLnZhbGlkYXRlZD0hMCk7ZWxzZSBpZihlKXt2YXIgbz1nZXRJdGVyYXRvckZuKGUpO2lmKG8mJm8hPT1lLmVudHJpZXMpZm9yKHZhciBhLGk9by5jYWxsKGUpOyEoYT1pLm5leHQoKSkuZG9uZTspUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGEudmFsdWUpJiZ2YWxpZGF0ZUV4cGxpY2l0S2V5KGEudmFsdWUscil9fWZ1bmN0aW9uIHZhbGlkYXRlUHJvcFR5cGVzKGUpe3ZhciByPWUudHlwZTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiByKXt2YXIgdD1yLmRpc3BsYXlOYW1lfHxyLm5hbWU7ci5wcm9wVHlwZXMmJmNoZWNrUmVhY3RUeXBlU3BlYyhyLnByb3BUeXBlcyxlLnByb3BzLFwicHJvcFwiLHQsZSxudWxsKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiByLmdldERlZmF1bHRQcm9wcyYmXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FybmluZyhyLmdldERlZmF1bHRQcm9wcy5pc1JlYWN0Q2xhc3NBcHByb3ZlZCxcImdldERlZmF1bHRQcm9wcyBpcyBvbmx5IHVzZWQgb24gY2xhc3NpYyBSZWFjdC5jcmVhdGVDbGFzcyBkZWZpbml0aW9ucy4gVXNlIGEgc3RhdGljIHByb3BlcnR5IG5hbWVkIGBkZWZhdWx0UHJvcHNgIGluc3RlYWQuXCIpfX12YXIgUmVhY3RFbGVtZW50VmFsaWRhdG9yPXtjcmVhdGVFbGVtZW50OmZ1bmN0aW9uKGUscix0KXt2YXIgbj1cInN0cmluZ1wiPT10eXBlb2YgZXx8XCJmdW5jdGlvblwiPT10eXBlb2YgZTtpZighbiYmXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmXCJzdHJpbmdcIiE9dHlwZW9mIGUpe3ZhciBvPVwiXCI7KHZvaWQgMD09PWV8fFwib2JqZWN0XCI9PXR5cGVvZiBlJiZudWxsIT09ZSYmMD09PU9iamVjdC5rZXlzKGUpLmxlbmd0aCkmJihvKz1cIiBZb3UgbGlrZWx5IGZvcmdvdCB0byBleHBvcnQgeW91ciBjb21wb25lbnQgZnJvbSB0aGUgZmlsZSBpdCdzIGRlZmluZWQgaW4uXCIpO3ZhciBhPWdldFNvdXJjZUluZm9FcnJvckFkZGVuZHVtKHIpO28rPWF8fGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSgpLG8rPVJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0Q3VycmVudFN0YWNrQWRkZW5kdW0oKTt2YXIgaT1udWxsIT1yJiZ2b2lkIDAhPT1yLl9fc291cmNlP3IuX19zb3VyY2U6bnVsbDtSZWFjdENvbXBvbmVudFRyZWVIb29rLnB1c2hOb25TdGFuZGFyZFdhcm5pbmdTdGFjayghMCxpKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ3YXJuaW5nKCExLFwiUmVhY3QuY3JlYXRlRWxlbWVudDogdHlwZSBpcyBpbnZhbGlkIC0tIGV4cGVjdGVkIGEgc3RyaW5nIChmb3IgYnVpbHQtaW4gY29tcG9uZW50cykgb3IgYSBjbGFzcy9mdW5jdGlvbiAoZm9yIGNvbXBvc2l0ZSBjb21wb25lbnRzKSBidXQgZ290OiAlcy4lc1wiLG51bGw9PWU/ZTp0eXBlb2YgZSxvKSxSZWFjdENvbXBvbmVudFRyZWVIb29rLnBvcE5vblN0YW5kYXJkV2FybmluZ1N0YWNrKCl9dmFyIGM9UmVhY3RFbGVtZW50LmNyZWF0ZUVsZW1lbnQuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKG51bGw9PWMpcmV0dXJuIGM7aWYobilmb3IodmFyIGw9MjtsPGFyZ3VtZW50cy5sZW5ndGg7bCsrKXZhbGlkYXRlQ2hpbGRLZXlzKGFyZ3VtZW50c1tsXSxlKTtyZXR1cm4gdmFsaWRhdGVQcm9wVHlwZXMoYyksY30sY3JlYXRlRmFjdG9yeTpmdW5jdGlvbihlKXt2YXIgcj1SZWFjdEVsZW1lbnRWYWxpZGF0b3IuY3JlYXRlRWxlbWVudC5iaW5kKG51bGwsZSk7cmV0dXJuIHIudHlwZT1lLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmNhbkRlZmluZVByb3BlcnR5JiZPYmplY3QuZGVmaW5lUHJvcGVydHkocixcInR5cGVcIix7ZW51bWVyYWJsZTohMSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbG93UHJpb3JpdHlXYXJuaW5nKCExLFwiRmFjdG9yeS50eXBlIGlzIGRlcHJlY2F0ZWQuIEFjY2VzcyB0aGUgY2xhc3MgZGlyZWN0bHkgYmVmb3JlIHBhc3NpbmcgaXQgdG8gY3JlYXRlRmFjdG9yeS5cIiksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJ0eXBlXCIse3ZhbHVlOmV9KSxlfX0pLHJ9LGNsb25lRWxlbWVudDpmdW5jdGlvbihlLHIsdCl7Zm9yKHZhciBuPVJlYWN0RWxlbWVudC5jbG9uZUVsZW1lbnQuYXBwbHkodGhpcyxhcmd1bWVudHMpLG89MjtvPGFyZ3VtZW50cy5sZW5ndGg7bysrKXZhbGlkYXRlQ2hpbGRLZXlzKGFyZ3VtZW50c1tvXSxuLnR5cGUpO3JldHVybiB2YWxpZGF0ZVByb3BUeXBlcyhuKSxufX07bW9kdWxlLmV4cG9ydHM9UmVhY3RFbGVtZW50VmFsaWRhdG9yO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxKbFlXTjBSV3hsYldWdWRGWmhiR2xrWVhSdmNpNXFjeUpkTENKdVlXMWxjeUk2V3lKU1pXRmpkRU4xY25KbGJuUlBkMjVsY2lJc0luSmxjWFZwY21VaUxDSlNaV0ZqZEVOdmJYQnZibVZ1ZEZSeVpXVkliMjlySWl3aVVtVmhZM1JGYkdWdFpXNTBJaXdpWTJobFkydFNaV0ZqZEZSNWNHVlRjR1ZqSWl3aVkyRnVSR1ZtYVc1bFVISnZjR1Z5ZEhraUxDSm5aWFJKZEdWeVlYUnZja1p1SWl3aWQyRnlibWx1WnlJc0lteHZkMUJ5YVc5eWFYUjVWMkZ5Ym1sdVp5SXNJbWRsZEVSbFkyeGhjbUYwYVc5dVJYSnliM0pCWkdSbGJtUjFiU0lzSW1OMWNuSmxiblFpTENKdVlXMWxJaXdpWjJWMFRtRnRaU0lzSW1kbGRGTnZkWEpqWlVsdVptOUZjbkp2Y2tGa1pHVnVaSFZ0SWl3aVpXeGxiV1Z1ZEZCeWIzQnpJaXdpZFc1a1pXWnBibVZrSWl3aVgxOXpiM1Z5WTJVaUxDSnpiM1Z5WTJVaUxDSm1hV3hsVG1GdFpTSXNJbkpsY0d4aFkyVWlMQ0pzYVc1bFRuVnRZbVZ5SWl3aWIzZHVaWEpJWVhOTFpYbFZjMlZYWVhKdWFXNW5JaXdpWjJWMFEzVnljbVZ1ZEVOdmJYQnZibVZ1ZEVWeWNtOXlTVzVtYnlJc0luQmhjbVZ1ZEZSNWNHVWlMQ0pwYm1adklpd2ljR0Z5Wlc1MFRtRnRaU0lzSW1ScGMzQnNZWGxPWVcxbElpd2lkbUZzYVdSaGRHVkZlSEJzYVdOcGRFdGxlU0lzSW1Wc1pXMWxiblFpTENKZmMzUnZjbVVpTENKMllXeHBaR0YwWldRaUxDSnJaWGtpTENKdFpXMXZhWHBsY2lJc0luVnVhWEYxWlV0bGVTSXNJbU4xY25KbGJuUkRiMjF3YjI1bGJuUkZjbkp2Y2tsdVptOGlMQ0pqYUdsc1pFOTNibVZ5SWl3aVgyOTNibVZ5SWl3aWNISnZZMlZ6Y3lJc0ltVnVkaUlzSWs1UFJFVmZSVTVXSWl3aVoyVjBRM1Z5Y21WdWRGTjBZV05yUVdSa1pXNWtkVzBpTENKMllXeHBaR0YwWlVOb2FXeGtTMlY1Y3lJc0ltNXZaR1VpTENKQmNuSmhlU0lzSW1selFYSnlZWGtpTENKcElpd2liR1Z1WjNSb0lpd2lZMmhwYkdRaUxDSnBjMVpoYkdsa1JXeGxiV1Z1ZENJc0ltbDBaWEpoZEc5eVJtNGlMQ0psYm5SeWFXVnpJaXdpYzNSbGNDSXNJbWwwWlhKaGRHOXlJaXdpWTJGc2JDSXNJbTVsZUhRaUxDSmtiMjVsSWl3aWRtRnNkV1VpTENKMllXeHBaR0YwWlZCeWIzQlVlWEJsY3lJc0ltTnZiWEJ2Ym1WdWRFTnNZWE56SWl3aWRIbHdaU0lzSW5CeWIzQlVlWEJsY3lJc0luQnliM0J6SWl3aVoyVjBSR1ZtWVhWc2RGQnliM0J6SWl3aWFYTlNaV0ZqZEVOc1lYTnpRWEJ3Y205MlpXUWlMQ0pTWldGamRFVnNaVzFsYm5SV1lXeHBaR0YwYjNJaUxDSmpjbVZoZEdWRmJHVnRaVzUwSWl3aVkyaHBiR1J5Wlc0aUxDSjJZV3hwWkZSNWNHVWlMQ0pQWW1wbFkzUWlMQ0pyWlhseklpd2ljMjkxY21ObFNXNW1ieUlzSW1OMWNuSmxiblJUYjNWeVkyVWlMQ0p3ZFhOb1RtOXVVM1JoYm1SaGNtUlhZWEp1YVc1blUzUmhZMnNpTENKd2IzQk9iMjVUZEdGdVpHRnlaRmRoY201cGJtZFRkR0ZqYXlJc0ltRndjR3g1SWl3aWRHaHBjeUlzSW1GeVozVnRaVzUwY3lJc0ltTnlaV0YwWlVaaFkzUnZjbmtpTENKMllXeHBaR0YwWldSR1lXTjBiM0o1SWl3aVltbHVaQ0lzSW1SbFptbHVaVkJ5YjNCbGNuUjVJaXdpWlc1MWJXVnlZV0pzWlNJc0ltZGxkQ0lzSW1Oc2IyNWxSV3hsYldWdWRDSXNJbTVsZDBWc1pXMWxiblFpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZsUVN4aFFVVkJMRWxCUVVsQkxHdENRVUZ2UWtNc1VVRkJVU3gxUWtGRE5VSkRMSFZDUVVGNVFrUXNVVUZCVVN3MFFrRkRha05GTEdGQlFXVkdMRkZCUVZFc2EwSkJSWFpDUnl4dFFrRkJjVUpJTEZGQlFWRXNkMEpCUlRkQ1NTeHJRa0ZCYjBKS0xGRkJRVkVzZFVKQlF6VkNTeXhqUVVGblFrd3NVVUZCVVN4dFFrRkRlRUpOTEZGQlFWVk9MRkZCUVZFc2IwSkJRMnhDVHl4dFFrRkJjVUpRTEZGQlFWRXNkMEpCUldwRExGTkJRVk5STERoQ1FVTlFMRWRCUVVsVUxHdENRVUZyUWxVc1VVRkJVeXhEUVVNM1FpeEpRVUZKUXl4RlFVRlBXQ3hyUWtGQmEwSlZMRkZCUVZGRkxGVkJRM0pETEVkQlFVbEVMRVZCUTBZc1RVRkJUeXhuUTBGQmEwTkJMRVZCUVU4c1MwRkhjRVFzVFVGQlR5eEhRVWRVTEZOQlFWTkZMREpDUVVFeVFrTXNSMEZEYkVNc1IwRkJTVUVzVFVGQlFVRXNVVUZCYVVaRExFbEJRVEZDUkN4RlFVRmhSU3hUUVVGM1FpeERRVU01Uml4SlFVRkpReXhGUVVGVFNDeEZRVUZoUlN4VFFVY3hRaXhOUVVGUExIVkNRVVpSUXl4RlFVRlBReXhUUVVGVFF5eFJRVUZSTEZsQlFXRXNTVUZGVkN4SlFVUXhRa1lzUlVGQlQwY3NWMEZEYzBNc1NVRkZhRVVzVFVGQlR5eEhRVkZVTEVsQlFVbERMSE5DUVVGM1FpeEhRVVUxUWl4VFFVRlRReXcyUWtGQk5rSkRMRWRCUTNCRExFbEJRVWxETEVWQlFVOW1MRGhDUVVWWUxFbEJRVXRsTEVWQlFVMHNRMEZEVkN4SlFVRkpReXhGUVVGdFF5eHBRa0ZCWmtZc1JVRkJNRUpCTEVWQlFXRkJMRVZCUVZkSExHRkJRV1ZJTEVWQlFWZGFMRXRCUTJoSFl5eEpRVU5HUkN4RlFVRlBMREpEUVVFMlEwTXNSVUZCWVN4TlFVZHlSU3hQUVVGUFJDeEZRV05VTEZOQlFWTkhMRzlDUVVGdlFrTXNSVUZCVTB3c1IwRkRjRU1zUjBGQlMwc3NSVUZCVVVNc1UwRkJWVVFzUlVGQlVVTXNUMEZCVDBNc1YwRkJORUlzVFVGQlprWXNSVUZCVVVjc1NVRkJNMFFzUTBGSFFVZ3NSVUZCVVVNc1QwRkJUME1zVjBGQldTeEZRVVV6UWl4SlFVRkpSU3hGUVVGWFdDeHpRa0ZCYzBKWkxGbEJRV05hTEhOQ1FVRnpRbGtzVlVGQldTeEpRVVZxUmtNc1JVRkJORUphTERaQ1FVRTJRa01zUjBGRE4wUXNTVUZCU1ZNc1JVRkJVMFVzUjBGQllpeERRVWRCUml4RlFVRlRSU3hKUVVFMlFpeEZRVXQwUXl4SlFVRkpReXhGUVVGaExFZEJRMkpRTEVkQlFWZEJMRVZCUVZGUkxGRkJRVlZTTEVWQlFWRlJMRk5CUVZkd1F5eHJRa0ZCYTBKVkxGVkJSWEJGZVVJc1JVRkJZU3dyUWtGQmFVTlFMRVZCUVZGUkxFOUJRVTk0UWl4VlFVRlpMRXRCUjJ4RUxHVkJRWHBDZVVJc1VVRkJVVU1zU1VGQlNVTXNWVUZCTkVKb1F5eFRRVUZSTEVWQlFVOHNkVWxCUVRaSk1rSXNSVUZCTWtKRExFVkJRVmxxUXl4MVFrRkJkVUp6UXl4M1FrRkJkMEphTEUxQldUVlNMRk5CUVZOaExHdENRVUZyUWtNc1JVRkJUVzVDTEVkQlF5OUNMRWRCUVc5Q0xHbENRVUZVYlVJc1JVRkhXQ3hIUVVGSlF5eE5RVUZOUXl4UlFVRlJSaXhIUVVOb1FpeEpRVUZMTEVsQlFVbEhMRVZCUVVrc1JVRkJSMEVzUlVGQlNVZ3NSVUZCUzBrc1QwRkJVVVFzU1VGQlN5eERRVU53UXl4SlFVRkpSU3hGUVVGUlRDeEZRVUZMUnl4SFFVTmlNVU1zWVVGQllUWkRMR1ZCUVdWRUxFbEJRemxDY0VJc2IwSkJRVzlDYjBJc1JVRkJUM2hDTEZGQlJ6RkNMRWRCUVVsd1FpeGhRVUZoTmtNc1pVRkJaVTRzUjBGRmFrTkJMRVZCUVV0aUxGTkJRMUJoTEVWQlFVdGlMRTlCUVU5RExGZEJRVmtzVVVGRmNrSXNSMEZCU1Zrc1JVRkJUU3hEUVVObUxFbEJRVWxQTEVWQlFXRXpReXhqUVVGamIwTXNSMEZGTDBJc1IwRkJTVThzUjBGRFJVRXNTVUZCWlZBc1JVRkJTMUVzVVVGSGRFSXNTVUZHUVN4SlFVTkpReXhGUVVSQlF5eEZRVUZYU0N4RlFVRlhTU3hMUVVGTFdDeExRVVYwUWxNc1JVRkJUME1zUlVGQlUwVXNVVUZCVVVNc1RVRkRNMEp3UkN4aFFVRmhOa01zWlVGQlpVY3NSVUZCUzBzc1VVRkRia00zUWl4dlFrRkJiMEozUWl4RlFVRkxTeXhOUVVGUGFrTXNTVUZqTlVNc1UwRkJVMnRETEd0Q1FVRnJRamRDTEVkQlEzcENMRWxCUVVrNFFpeEZRVUZwUWpsQ0xFVkJRVkVyUWl4TFFVTTNRaXhIUVVFNFFpeHRRa0ZCYmtKRUxFVkJRVmdzUTBGSFFTeEpRVUZKTDBNc1JVRkJUeXRETEVWQlFXVm9ReXhoUVVGbFowTXNSVUZCWlM5RExFdEJRM0JFSzBNc1JVRkJaVVVzVjBGRGFrSjRSQ3h0UWtGQmJVSnpSQ3hGUVVGbFJTeFZRVUZYYUVNc1JVRkJVV2xETEUxQlFVOHNUMEZCVVd4RUxFVkJRVTFwUWl4RlFVRlRMRTFCUlhaRExHMUNRVUZ1UXpoQ0xFVkJRV1ZKTEdsQ1FVTkRMR1ZCUVhwQ2VrSXNVVUZCVVVNc1NVRkJTVU1zVlVGQk5FSm9ReXhSUVVGUmJVUXNSVUZCWlVrc1owSkJRV2RDUXl4eFFrRkJjMElzSzBoQlNYcEhMRWxCUVVsRExITkNRVUYzUWl4RFFVTXhRa01zWTBGQlpTeFRRVUZWVGl4RlFVRk5SU3hGUVVGUFN5eEhRVU53UXl4SlFVRkpReXhGUVVFMFFpeHBRa0ZCVkZJc1IwRkJjVU1zYlVKQlFWUkJMRVZCUjI1RUxFbEJRVXRSTEVkQlEybENMRzFDUVVGVVVpeEhRVUYxUXl4cFFrRkJWRUVzUlVGQmJVSXNRMEZETVVRc1NVRkJTVzVETEVWQlFVOHNVMEZEUlZRc1NVRkJWRFJETEVkQlFYTkRMR2xDUVVGVVFTeEhRVUU0UWl4UFFVRlVRU3hIUVVFNFF5eEpRVUUzUWxNc1QwRkJUME1zUzBGQlMxWXNSMEZCVFdJc1ZVRkRka1owUWl4SFFVRlJMRGhGUVVkV0xFbEJRVWs0UXl4RlFVRmhla1FzTWtKQlFUSkNaMFFzUjBGRk1VTnlReXhIUVVSRk9FTXNSMEZIVFRkRUxEaENRVWRXWlN4SFFVRlJkRUlzZFVKQlFYVkNjME1zTUVKQlJTOUNMRWxCUVVrclFpeEZRVUZuUWxZc1RVRkJRVUVzVVVGQk5FUTVReXhKUVVGdVFqaERMRVZCUVUwM1F5eFRRVUY1UWpaRExFVkJRVTAzUXl4VFFVRlhMRXRCUXpkSFpDeDFRa0ZCZFVKelJTdzJRa0ZCTkVJc1JVRkJUVVFzUjBGRGFFTXNaVUZCZWtKc1F5eFJRVUZSUXl4SlFVRkpReXhWUVVFMFFtaERMRk5CUVZFc1JVRkJUeXh2U2tGQmRVc3NUVUZCVW05RUxFVkJRV1ZCTEZOQlFXTkJMRVZCUVUxdVF5eEhRVU42VUhSQ0xIVkNRVUYxUW5WRkxEWkNRVWt6UWl4SlFVRkpOME1zUlVGQlZYcENMR0ZCUVdFNFJDeGpRVUZqVXl4TlFVRk5ReXhMUVVGTlF5eFhRVWx5UkN4SFFVRmxMRTFCUVZob1JDeEZRVU5HTEU5QlFVOUJMRVZCVVZRc1IwRkJTWFZETEVWQlEwWXNTVUZCU3l4SlFVRkpkRUlzUlVGQlNTeEZRVUZIUVN4RlFVRkpLMElzVlVGQlZUbENMRTlCUVZGRUxFbEJRM0JEU2l4clFrRkJhMEp0UXl4VlFVRlZMMElzUjBGQlNXTXNSMEZOY0VNc1QwRkdRVVlzYTBKQlFXdENOMElzUjBGRldFRXNSMEZIVkdsRUxHTkJRV1VzVTBGQlZXeENMRWRCUTNaQ0xFbEJRVWx0UWl4RlFVRnRRbVFzYzBKQlFYTkNReXhqUVVGall5eExRVUZMTEV0QlFVMXdRaXhIUVcxQ2RFVXNUMEZxUWtGdFFpeEZRVUZwUW01Q0xFdEJRVTlCTEVWQlJVc3NaVUZCZWtKMFFpeFJRVUZSUXl4SlFVRkpReXhWUVVOV2JFTXNiVUpCUTBZclJDeFBRVUZQV1N4bFFVRmxSaXhGUVVGclFpeFBRVUZSTEVOQlF6bERSeXhaUVVGWkxFVkJRMXBETEVsQlFVc3NWMEZMU0N4UFFVcEJNVVVzYjBKQlFXMUNMRVZCUVU4c05rWkJRekZDTkVRc1QwRkJUMWtzWlVGQlpVd3NTMEZCVFN4UFFVRlJMRU5CUTJ4RGJrSXNUVUZCVDBjc1NVRkZSa0VzUzBGTlVtMUNMRWRCUjFSTExHRkJRV01zVTBGQlZYWkVMRVZCUVZOcFF5eEZRVUZQU3l4SFFVVjBReXhKUVVSQkxFbEJRVWxyUWl4RlFVRmhha1lzWVVGQllXZEdMR0ZCUVdGVUxFMUJRVTFETEV0QlFVMURMRmRCUXpsREwwSXNSVUZCU1N4RlFVRkhRU3hGUVVGSkswSXNWVUZCVlRsQ0xFOUJRVkZFTEVsQlEzQkRTaXhyUWtGQmEwSnRReXhWUVVGVkwwSXNSMEZCU1hWRExFVkJRVmQ2UWl4TlFVYzNReXhQUVVSQlJpeHJRa0ZCYTBJeVFpeEhRVU5ZUVN4SlFVbFlReXhQUVVGUFF5eFJRVUZWZEVJaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Y21WaFkzUXZiR2xpTDFKbFlXTjBSV3hsYldWdWRGWmhiR2xrWVhSdmNpNXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIHdhcm5pbmc9cmVxdWlyZShcImZianMvbGliL3dhcm5pbmdcIik7ZnVuY3Rpb24gd2Fybk5vb3AoZSxuKXtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXt2YXIgbz1lLmNvbnN0cnVjdG9yO1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcoITEsXCIlcyguLi4pOiBDYW4gb25seSB1cGRhdGUgYSBtb3VudGVkIG9yIG1vdW50aW5nIGNvbXBvbmVudC4gVGhpcyB1c3VhbGx5IG1lYW5zIHlvdSBjYWxsZWQgJXMoKSBvbiBhbiB1bm1vdW50ZWQgY29tcG9uZW50LiBUaGlzIGlzIGEgbm8tb3AuIFBsZWFzZSBjaGVjayB0aGUgY29kZSBmb3IgdGhlICVzIGNvbXBvbmVudC5cIixuLG4sbyYmKG8uZGlzcGxheU5hbWV8fG8ubmFtZSl8fFwiUmVhY3RDbGFzc1wiKX19dmFyIFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlPXtpc01vdW50ZWQ6ZnVuY3Rpb24oZSl7cmV0dXJuITF9LGVucXVldWVDYWxsYmFjazpmdW5jdGlvbihlLG4pe30sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGUpe3dhcm5Ob29wKGUsXCJmb3JjZVVwZGF0ZVwiKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihlLG4pe3dhcm5Ob29wKGUsXCJyZXBsYWNlU3RhdGVcIil9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihlLG4pe3dhcm5Ob29wKGUsXCJzZXRTdGF0ZVwiKX19O21vZHVsZS5leHBvcnRzPVJlYWN0Tm9vcFVwZGF0ZVF1ZXVlO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxKbFlXTjBUbTl2Y0ZWd1pHRjBaVkYxWlhWbExtcHpJbDBzSW01aGJXVnpJanBiSW5kaGNtNXBibWNpTENKeVpYRjFhWEpsSWl3aWQyRnliazV2YjNBaUxDSndkV0pzYVdOSmJuTjBZVzVqWlNJc0ltTmhiR3hsY2s1aGJXVWlMQ0p3Y205alpYTnpJaXdpWlc1Mklpd2lUazlFUlY5RlRsWWlMQ0pqYjI1emRISjFZM1J2Y2lJc0ltUnBjM0JzWVhsT1lXMWxJaXdpYm1GdFpTSXNJbEpsWVdOMFRtOXZjRlZ3WkdGMFpWRjFaWFZsSWl3aWFYTk5iM1Z1ZEdWa0lpd2laVzV4ZFdWMVpVTmhiR3hpWVdOcklpd2lZMkZzYkdKaFkyc2lMQ0psYm5GMVpYVmxSbTl5WTJWVmNHUmhkR1VpTENKbGJuRjFaWFZsVW1Wd2JHRmpaVk4wWVhSbElpd2lZMjl0Y0d4bGRHVlRkR0YwWlNJc0ltVnVjWFZsZFdWVFpYUlRkR0YwWlNJc0luQmhjblJwWVd4VGRHRjBaU0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSkJRVkZCTEdGQlJVRXNTVUZCU1VFc1VVRkJWVU1zVVVGQlVTeHZRa0ZGZEVJc1UwRkJVME1zVTBGQlUwTXNSVUZCWjBKRExFZEJRMmhETEVkQlFUWkNMR1ZCUVhwQ1F5eFJRVUZSUXl4SlFVRkpReXhUUVVFeVFpeERRVU42UXl4SlFVRkpReXhGUVVGalRDeEZRVUZsU3l4WlFVTlNMR1ZCUVhwQ1NDeFJRVUZSUXl4SlFVRkpReXhWUVVFMFFsQXNVMEZCVVN4RlFVRlBMSFZNUVVGclRVa3NSVUZCV1VFc1JVRkJXVWtzU1VGQlowSkJMRVZCUVZsRExHRkJRV1ZFTEVWQlFWbEZMRTlCUVZNc1pVRlBjbFlzU1VGQlNVTXNjVUpCUVhWQ0xFTkJVWHBDUXl4VlFVRlhMRk5CUVZWVUxFZEJRMjVDTEU5QlFVOHNSMEZYVkZVc1owSkJRV2xDTEZOQlFWVldMRVZCUVdkQ1Z5eExRV1V6UTBNc2JVSkJRVzlDTEZOQlFWVmFMRWRCUXpWQ1JDeFRRVUZUUXl4RlFVRm5RaXhuUWtGak0wSmhMRzlDUVVGeFFpeFRRVUZWWWl4RlFVRm5RbU1zUjBGRE4wTm1MRk5CUVZORExFVkJRV2RDTEdsQ1FXRXpRbVVzWjBKQlFXbENMRk5CUVZWbUxFVkJRV2RDWjBJc1IwRkRla05xUWl4VFFVRlRReXhGUVVGblFpeGpRVWszUW1sQ0xFOUJRVTlETEZGQlFWVldJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwzSmxZV04wTDJ4cFlpOVNaV0ZqZEU1dmIzQlZjR1JoZEdWUmRXVjFaUzVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcz17fTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXM9e3Byb3A6XCJwcm9wXCIsY29udGV4dDpcImNvbnRleHRcIixjaGlsZENvbnRleHQ6XCJjaGlsZCBjb250ZXh0XCJ9KSxtb2R1bGUuZXhwb3J0cz1SZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsSmxZV04wVUhKdmNGUjVjR1ZNYjJOaGRHbHZiazVoYldWekxtcHpJbDBzSW01aGJXVnpJanBiSWxKbFlXTjBVSEp2Y0ZSNWNHVk1iMk5oZEdsdmJrNWhiV1Z6SWl3aWNISnZZMlZ6Y3lJc0ltVnVkaUlzSWs1UFJFVmZSVTVXSWl3aWNISnZjQ0lzSW1OdmJuUmxlSFFpTENKamFHbHNaRU52Ym5SbGVIUWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRlRRU3hoUVVWQkxFbEJRVWxCTERKQ1FVRTJRaXhIUVVWS0xHVkJRWHBDUXl4UlFVRlJReXhKUVVGSlF5eFhRVU5rU0N3eVFrRkJOa0lzUTBGRE0wSkpMRXRCUVUwc1QwRkRUa01zVVVGQlV5eFZRVU5VUXl4aFFVRmpMR3RDUVVsc1FrTXNUMEZCVDBNc1VVRkJWVklpTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdmJHbGlMMUpsWVdOMFVISnZjRlI1Y0dWTWIyTmhkR2x2Yms1aGJXVnpMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBfcmVxdWlyZT1yZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIiksaXNWYWxpZEVsZW1lbnQ9X3JlcXVpcmUuaXNWYWxpZEVsZW1lbnQsZmFjdG9yeT1yZXF1aXJlKFwicHJvcC10eXBlcy9mYWN0b3J5XCIpO21vZHVsZS5leHBvcnRzPWZhY3RvcnkoaXNWYWxpZEVsZW1lbnQpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxKbFlXTjBVSEp2Y0ZSNWNHVnpMbXB6SWwwc0ltNWhiV1Z6SWpwYklsOXlaWEYxYVhKbElpd2ljbVZ4ZFdseVpTSXNJbWx6Vm1Gc2FXUkZiR1Z0Wlc1MElpd2labUZqZEc5eWVTSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlYU3dpYldGd2NHbHVaM01pT2lKQlFWRkJMR0ZCUlVFc1NVRkJTVUVzVTBGQlYwTXNVVUZCVVN4clFrRkRia0pETEdWQlFXbENSaXhUUVVGVFJTeGxRVVV4UWtNc1VVRkJWVVlzVVVGQlVTeHpRa0ZGZEVKSExFOUJRVTlETEZGQlFWVkdMRkZCUVZGRUlpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDNKbFlXTjBMMnhwWWk5U1pXRmpkRkJ5YjNCVWVYQmxjeTVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBSZWFjdFByb3BUeXBlc1NlY3JldD1cIlNFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEXCI7bW9kdWxlLmV4cG9ydHM9UmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbEpsWVdOMFVISnZjRlI1Y0dWelUyVmpjbVYwTG1weklsMHNJbTVoYldWeklqcGJJbEpsWVdOMFVISnZjRlI1Y0dWelUyVmpjbVYwSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCVTBFc1lVRkZRU3hKUVVGSlFTeHhRa0ZCZFVJc0swTkJSVE5DUXl4UFFVRlBReXhSUVVGVlJpSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlVtVmhZM1JRY205d1ZIbHdaWE5UWldOeVpYUXVhbk1pZlE9PSIsIlwidXNlIHN0cmljdFwiO21vZHVsZS5leHBvcnRzPVwiMTUuNi4yXCI7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbEpsWVdOMFZtVnljMmx2Ymk1cWN5SmRMQ0p1WVcxbGN5STZXeUp0YjJSMWJHVWlMQ0psZUhCdmNuUnpJbDBzSW0xaGNIQnBibWR6SWpvaVFVRlJRU3hoUVVWQlFTeFBRVUZQUXl4UlFVRlZJaXdpWm1sc1pTSTZJaTlWYzJWeWN5OXlZV3QxYzJGcEwxZHZjbXN2WW05dmRITjBjbUZ3TFhOaGMzTXZaR1Z0Ynk5MFlYUmhiV2t2Ym05a1pWOXRiMlIxYkdWekwzSmxZV04wTDJ4cFlpOVNaV0ZqZEZabGNuTnBiMjR1YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgY2FuRGVmaW5lUHJvcGVydHk9ITE7aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVil0cnl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LFwieFwiLHtnZXQ6ZnVuY3Rpb24oKXt9fSksY2FuRGVmaW5lUHJvcGVydHk9ITB9Y2F0Y2goZSl7fW1vZHVsZS5leHBvcnRzPWNhbkRlZmluZVByb3BlcnR5O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1OaGJrUmxabWx1WlZCeWIzQmxjblI1TG1weklsMHNJbTVoYldWeklqcGJJbU5oYmtSbFptbHVaVkJ5YjNCbGNuUjVJaXdpY0hKdlkyVnpjeUlzSW1WdWRpSXNJazVQUkVWZlJVNVdJaXdpVDJKcVpXTjBJaXdpWkdWbWFXNWxVSEp2Y0dWeWRIa2lMQ0puWlhRaUxDSjRJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJVMEVzWVVGRlFTeEpRVUZKUVN4dFFrRkJiMElzUlVGRGVFSXNSMEZCTmtJc1pVRkJla0pETEZGQlFWRkRMRWxCUVVsRExGTkJRMlFzU1VGRlJVTXNUMEZCVDBNc1pVRkJaU3hIUVVGSkxFbEJRVXNzUTBGQlJVTXNTVUZCU3l4bFFVTjBRMDRzYlVKQlFXOUNMRVZCUTNCQ0xFMUJRVTlQTEVsQlMxaERMRTlCUVU5RExGRkJRVlZVSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdOMEwyeHBZaTlqWVc1RVpXWnBibVZRY205d1pYSjBlUzVxY3lKOSIsIlwidXNlIHN0cmljdFwiO3ZhciBSZWFjdENvbXBvbmVudFRyZWVIb29rLF9wcm9kSW52YXJpYW50PXJlcXVpcmUoXCIuL3JlYWN0UHJvZEludmFyaWFudFwiKSxSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcz1yZXF1aXJlKFwiLi9SZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1wiKSxSZWFjdFByb3BUeXBlc1NlY3JldD1yZXF1aXJlKFwiLi9SZWFjdFByb3BUeXBlc1NlY3JldFwiKSxpbnZhcmlhbnQ9cmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKSx3YXJuaW5nPXJlcXVpcmUoXCJmYmpzL2xpYi93YXJuaW5nXCIpO1widW5kZWZpbmVkXCIhPXR5cGVvZiBwcm9jZXNzJiZwcm9jZXNzLmVudiYmXCJ0ZXN0XCI9PT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKFJlYWN0Q29tcG9uZW50VHJlZUhvb2s9cmVxdWlyZShcIi4vUmVhY3RDb21wb25lbnRUcmVlSG9va1wiKSk7dmFyIGxvZ2dlZFR5cGVGYWlsdXJlcz17fTtmdW5jdGlvbiBjaGVja1JlYWN0VHlwZVNwZWMoZSxvLHIsdCxhLG4pe2Zvcih2YXIgYyBpbiBlKWlmKGUuaGFzT3duUHJvcGVydHkoYykpe3ZhciBzO3RyeXtcImZ1bmN0aW9uXCIhPXR5cGVvZiBlW2NdJiYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoITEsXCIlczogJXMgdHlwZSBgJXNgIGlzIGludmFsaWQ7IGl0IG11c3QgYmUgYSBmdW5jdGlvbiwgdXN1YWxseSBmcm9tIFJlYWN0LlByb3BUeXBlcy5cIix0fHxcIlJlYWN0IGNsYXNzXCIsUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbcl0sYyk6X3Byb2RJbnZhcmlhbnQoXCI4NFwiLHR8fFwiUmVhY3QgY2xhc3NcIixSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tyXSxjKSkscz1lW2NdKG8sYyx0LHIsbnVsbCxSZWFjdFByb3BUeXBlc1NlY3JldCl9Y2F0Y2goZSl7cz1lfWlmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5pbmcoIXN8fHMgaW5zdGFuY2VvZiBFcnJvcixcIiVzOiB0eXBlIHNwZWNpZmljYXRpb24gb2YgJXMgYCVzYCBpcyBpbnZhbGlkOyB0aGUgdHlwZSBjaGVja2VyIGZ1bmN0aW9uIG11c3QgcmV0dXJuIGBudWxsYCBvciBhbiBgRXJyb3JgIGJ1dCByZXR1cm5lZCBhICVzLiBZb3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIHBhc3MgYW4gYXJndW1lbnQgdG8gdGhlIHR5cGUgY2hlY2tlciBjcmVhdG9yIChhcnJheU9mLCBpbnN0YW5jZU9mLCBvYmplY3RPZiwgb25lT2YsIG9uZU9mVHlwZSwgYW5kIHNoYXBlIGFsbCByZXF1aXJlIGFuIGFyZ3VtZW50KS5cIix0fHxcIlJlYWN0IGNsYXNzXCIsUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbcl0sYyx0eXBlb2YgcykscyBpbnN0YW5jZW9mIEVycm9yJiYhKHMubWVzc2FnZSBpbiBsb2dnZWRUeXBlRmFpbHVyZXMpKXtsb2dnZWRUeXBlRmFpbHVyZXNbcy5tZXNzYWdlXT0hMDt2YXIgcD1cIlwiO1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJihSZWFjdENvbXBvbmVudFRyZWVIb29rfHwoUmVhY3RDb21wb25lbnRUcmVlSG9vaz1yZXF1aXJlKFwiLi9SZWFjdENvbXBvbmVudFRyZWVIb29rXCIpKSxudWxsIT09bj9wPVJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0U3RhY2tBZGRlbmR1bUJ5SUQobik6bnVsbCE9PWEmJihwPVJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0Q3VycmVudFN0YWNrQWRkZW5kdW0oYSkpKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ3YXJuaW5nKCExLFwiRmFpbGVkICVzIHR5cGU6ICVzJXNcIixyLHMubWVzc2FnZSxwKX19fW1vZHVsZS5leHBvcnRzPWNoZWNrUmVhY3RUeXBlU3BlYztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltTm9aV05yVW1WaFkzUlVlWEJsVTNCbFl5NXFjeUpkTENKdVlXMWxjeUk2V3lKU1pXRmpkRU52YlhCdmJtVnVkRlJ5WldWSWIyOXJJaXdpWDNCeWIyUkpiblpoY21saGJuUWlMQ0p5WlhGMWFYSmxJaXdpVW1WaFkzUlFjbTl3Vkhsd1pVeHZZMkYwYVc5dVRtRnRaWE1pTENKU1pXRmpkRkJ5YjNCVWVYQmxjMU5sWTNKbGRDSXNJbWx1ZG1GeWFXRnVkQ0lzSW5kaGNtNXBibWNpTENKd2NtOWpaWE56SWl3aVpXNTJJaXdpVGs5RVJWOUZUbFlpTENKc2IyZG5aV1JVZVhCbFJtRnBiSFZ5WlhNaUxDSmphR1ZqYTFKbFlXTjBWSGx3WlZOd1pXTWlMQ0owZVhCbFUzQmxZM01pTENKMllXeDFaWE1pTENKc2IyTmhkR2x2YmlJc0ltTnZiWEJ2Ym1WdWRFNWhiV1VpTENKbGJHVnRaVzUwSWl3aVpHVmlkV2RKUkNJc0luUjVjR1ZUY0dWalRtRnRaU0lzSW1oaGMwOTNibEJ5YjNCbGNuUjVJaXdpWlhKeWIzSWlMQ0psZUNJc0lrVnljbTl5SWl3aWJXVnpjMkZuWlNJc0ltTnZiWEJ2Ym1WdWRGTjBZV05yU1c1bWJ5SXNJbWRsZEZOMFlXTnJRV1JrWlc1a2RXMUNlVWxFSWl3aVoyVjBRM1Z5Y21WdWRGTjBZV05yUVdSa1pXNWtkVzBpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZSUVN4aFFVVkJMRWxCVVVsQkxIVkNRVkpCUXl4bFFVRnBRa01zVVVGQlVTeDNRa0ZGZWtKRExESkNRVUUyUWtRc1VVRkJVU3huUTBGRGNrTkZMSEZDUVVGMVFrWXNVVUZCVVN3d1FrRkZMMEpITEZWQlFWbElMRkZCUVZFc2MwSkJRM0JDU1N4UlFVRlZTaXhSUVVGUkxHOUNRVWxETEc5Q1FVRmFTeXhUUVVFeVFrRXNVVUZCVVVNc1MwRkJaME1zVTBGQmVrSkVMRkZCUVZGRExFbEJRVWxETEZkQlRTOUVWQ3gxUWtGQmVVSkZMRkZCUVZFc05rSkJSMjVETEVsQlFVbFJMRzFDUVVGeFFpeEhRV042UWl4VFFVRlRReXh0UWtGQmJVSkRMRVZCUVZkRExFVkJRVkZETEVWQlFWVkRMRVZCUVdWRExFVkJRVk5ETEVkQlF5OUZMRWxCUVVzc1NVRkJTVU1zUzBGQlowSk9MRVZCUTNaQ0xFZEJRVWxCTEVWQlFWVlBMR1ZCUVdWRUxFZEJRV1VzUTBGRE1VTXNTVUZCU1VVc1JVRkpTaXhKUVVkMVF5eHRRa0ZCTlVKU0xFVkJRVlZOTEV0QlFYbEVMR1ZCUVhwQ1dDeFJRVUZSUXl4SlFVRkpReXhUUVVFMFFrb3NWMEZCVlN4RlFVRlBMRzlHUVVGeFJsVXNSMEZCYVVJc1kwRkJaVm9zTWtKQlFUSkNWeXhIUVVGWFNTeEhRVUZuUW1wQ0xHVkJRV1VzUzBGQlRXTXNSMEZCYVVJc1kwRkJaVm9zTWtKQlFUSkNWeXhIUVVGWFNTeEpRVU5zV0VVc1JVRkJVVklzUlVGQlZVMHNSMEZCWTB3c1JVRkJVVXNzUlVGQlkwZ3NSVUZCWlVRc1JVRkJWU3hMUVVGTlZpeHpRa0ZEY2tZc1RVRkJUMmxDTEVkQlExQkVMRVZCUVZGRExFVkJSMVlzUjBGRWVVSXNaVUZCZWtKa0xGRkJRVkZETEVsQlFVbERMRlZCUVRSQ1NDeFRRVUZUWXl4SFFVRlRRU3hoUVVGcFFrVXNUVUZCVHl3eVVrRkJaMVJRTEVkQlFXbENMR05CUVdWYUxESkNRVUV5UWxjc1IwRkJWMGtzVTBGQmNVSkZMRWRCUTNwa1FTeGhRVUZwUWtVc1UwRkJWMFlzUlVGQlRVY3NWMEZCVjJJc2IwSkJRWEZDTEVOQlIzQkZRU3h0UWtGQmJVSlZMRVZCUVUxSExGVkJRVmNzUlVGRmNFTXNTVUZCU1VNc1JVRkJjVUlzUjBGRlNTeGxRVUY2UW1wQ0xGRkJRVkZETEVsQlFVbERMRmRCUTFSVUxIbENRVU5JUVN4MVFrRkJlVUpGTEZGQlFWRXNOa0pCUlc1Q0xFOUJRVnBsTEVWQlEwWlBMRVZCUVhGQ2VFSXNkVUpCUVhWQ2VVSXNjVUpCUVhGQ1VpeEhRVU0xUXl4UFFVRmFSQ3hKUVVOVVVTeEZRVUZ4UW5oQ0xIVkNRVUYxUWpCQ0xIZENRVUYzUWxZc1MwRkpMME1zWlVGQmVrSlVMRkZCUVZGRExFbEJRVWxETEZWQlFUUkNTQ3hUUVVGUkxFVkJRVThzZFVKQlFYZENVU3hGUVVGVlRTeEZRVUZOUnl4UlFVRlRReXhMUVUxb1NFY3NUMEZCVDBNc1VVRkJWV3BDSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdOMEwyeHBZaTlqYUdWamExSmxZV04wVkhsd1pWTndaV011YW5NaWZRPT0iLCJcInVzZSBzdHJpY3RcIjt2YXIgX3JlcXVpcmU9cmVxdWlyZShcIi4vUmVhY3RCYXNlQ2xhc3Nlc1wiKSxDb21wb25lbnQ9X3JlcXVpcmUuQ29tcG9uZW50LF9yZXF1aXJlMj1yZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIiksaXNWYWxpZEVsZW1lbnQ9X3JlcXVpcmUyLmlzVmFsaWRFbGVtZW50LFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlPXJlcXVpcmUoXCIuL1JlYWN0Tm9vcFVwZGF0ZVF1ZXVlXCIpLGZhY3Rvcnk9cmVxdWlyZShcImNyZWF0ZS1yZWFjdC1jbGFzcy9mYWN0b3J5XCIpO21vZHVsZS5leHBvcnRzPWZhY3RvcnkoQ29tcG9uZW50LGlzVmFsaWRFbGVtZW50LFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltTnlaV0YwWlVOc1lYTnpMbXB6SWwwc0ltNWhiV1Z6SWpwYklsOXlaWEYxYVhKbElpd2ljbVZ4ZFdseVpTSXNJa052YlhCdmJtVnVkQ0lzSWw5eVpYRjFhWEpsTWlJc0ltbHpWbUZzYVdSRmJHVnRaVzUwSWl3aVVtVmhZM1JPYjI5d1ZYQmtZWFJsVVhWbGRXVWlMQ0ptWVdOMGIzSjVJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJVVUVzWVVGRlFTeEpRVUZKUVN4VFFVRlhReXhSUVVGUkxITkNRVU51UWtNc1ZVRkJXVVlzVTBGQlUwVXNWVUZGY2tKRExGVkJRVmxHTEZGQlFWRXNhMEpCUTNCQ1J5eGxRVUZwUWtRc1ZVRkJWVU1zWlVGRk0wSkRMSEZDUVVGMVFrb3NVVUZCVVN3d1FrRkRMMEpMTEZGQlFWVk1MRkZCUVZFc09FSkJSWFJDVFN4UFFVRlBReXhSUVVGVlJpeFJRVUZSU2l4VlFVRlhSU3hsUVVGblFrTWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F2YkdsaUwyTnlaV0YwWlVOc1lYTnpMbXB6SW4wPSIsIlwidXNlIHN0cmljdFwiO3ZhciBJVEVSQVRPUl9TWU1CT0w9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3IsRkFVWF9JVEVSQVRPUl9TWU1CT0w9XCJAQGl0ZXJhdG9yXCI7ZnVuY3Rpb24gZ2V0SXRlcmF0b3JGbih0KXt2YXIgcj10JiYoSVRFUkFUT1JfU1lNQk9MJiZ0W0lURVJBVE9SX1NZTUJPTF18fHRbRkFVWF9JVEVSQVRPUl9TWU1CT0xdKTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiByKXJldHVybiByfW1vZHVsZS5leHBvcnRzPWdldEl0ZXJhdG9yRm47XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbWRsZEVsMFpYSmhkRzl5Um00dWFuTWlYU3dpYm1GdFpYTWlPbHNpU1ZSRlVrRlVUMUpmVTFsTlFrOU1JaXdpVTNsdFltOXNJaXdpYVhSbGNtRjBiM0lpTENKR1FWVllYMGxVUlZKQlZFOVNYMU5aVFVKUFRDSXNJbWRsZEVsMFpYSmhkRzl5Um00aUxDSnRZWGxpWlVsMFpYSmhZbXhsSWl3aWFYUmxjbUYwYjNKR2JpSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlYU3dpYldGd2NHbHVaM01pT2lKQlFWTkJMR0ZCU1VFc1NVRkJTVUVzWjBKQlFXOURMRzFDUVVGWVF5eFJRVUY1UWtFc1QwRkJUME1zVTBGRGVrUkRMSEZDUVVGMVFpeGhRV2RDTTBJc1UwRkJVME1zWTBGQlkwTXNSMEZEY2tJc1NVRkJTVU1zUlVGQllVUXNTVUZCYTBKTUxHbENRVUZ0UWtzc1JVRkJZMHdzYTBKQlFXOUNTeXhGUVVGalJpeDFRa0ZEZEVjc1IwRkJNRUlzYlVKQlFXWkhMRVZCUTFRc1QwRkJUMEVzUlVGSldFTXNUMEZCVDBNc1VVRkJWVW9pTENKbWFXeGxJam9pTDFWelpYSnpMM0poYTNWellXa3ZWMjl5YXk5aWIyOTBjM1J5WVhBdGMyRnpjeTlrWlcxdkwzUmhkR0Z0YVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWTNRdmJHbGlMMmRsZEVsMFpYSmhkRzl5Um00dWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIG5leHREZWJ1Z0lEPTE7ZnVuY3Rpb24gZ2V0TmV4dERlYnVnSUQoKXtyZXR1cm4gbmV4dERlYnVnSUQrK31tb2R1bGUuZXhwb3J0cz1nZXROZXh0RGVidWdJRDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltZGxkRTVsZUhSRVpXSjFaMGxFTG1weklsMHNJbTVoYldWeklqcGJJbTVsZUhSRVpXSjFaMGxFSWl3aVoyVjBUbVY0ZEVSbFluVm5TVVFpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZUUVN4aFFVVkJMRWxCUVVsQkxGbEJRV01zUlVGRmJFSXNVMEZCVTBNc2FVSkJRMUFzVDBGQlQwUXNZMEZIVkVVc1QwRkJUME1zVVVGQlZVWWlMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhhM1Z6WVdrdlYyOXlheTlpYjI5MGMzUnlZWEF0YzJGemN5OWtaVzF2TDNSaGRHRnRhUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhZM1F2YkdsaUwyZGxkRTVsZUhSRVpXSjFaMGxFTG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgbG93UHJpb3JpdHlXYXJuaW5nPWZ1bmN0aW9uKCl7fTtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXt2YXIgcHJpbnRXYXJuaW5nPWZ1bmN0aW9uKHIpe2Zvcih2YXIgbj1hcmd1bWVudHMubGVuZ3RoLG89QXJyYXkobj4xP24tMTowKSxpPTE7aTxuO2krKylvW2ktMV09YXJndW1lbnRzW2ldO3ZhciBhPTAsdD1cIldhcm5pbmc6IFwiK3IucmVwbGFjZSgvJXMvZyxmdW5jdGlvbigpe3JldHVybiBvW2ErK119KTtcInVuZGVmaW5lZFwiIT10eXBlb2YgY29uc29sZSYmY29uc29sZS53YXJuKHQpO3RyeXt0aHJvdyBuZXcgRXJyb3IodCl9Y2F0Y2gocil7fX07bG93UHJpb3JpdHlXYXJuaW5nPWZ1bmN0aW9uKHIsbil7aWYodm9pZCAwPT09bil0aHJvdyBuZXcgRXJyb3IoXCJgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyBtZXNzYWdlIGFyZ3VtZW50XCIpO2lmKCFyKXtmb3IodmFyIG89YXJndW1lbnRzLmxlbmd0aCxpPUFycmF5KG8+Mj9vLTI6MCksYT0yO2E8bzthKyspaVthLTJdPWFyZ3VtZW50c1thXTtwcmludFdhcm5pbmcuYXBwbHkodm9pZCAwLFtuXS5jb25jYXQoaSkpfX19bW9kdWxlLmV4cG9ydHM9bG93UHJpb3JpdHlXYXJuaW5nO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW14dmQxQnlhVzl5YVhSNVYyRnlibWx1Wnk1cWN5SmRMQ0p1WVcxbGN5STZXeUpzYjNkUWNtbHZjbWwwZVZkaGNtNXBibWNpTENKd2NtOWpaWE56SWl3aVpXNTJJaXdpVGs5RVJWOUZUbFlpTENKd2NtbHVkRmRoY201cGJtY2lMQ0ptYjNKdFlYUWlMQ0pmYkdWdUlpd2lZWEpuZFcxbGJuUnpJaXdpYkdWdVozUm9JaXdpWVhKbmN5SXNJa0Z5Y21GNUlpd2lYMnRsZVNJc0ltRnlaMGx1WkdWNElpd2liV1Z6YzJGblpTSXNJbkpsY0d4aFkyVWlMQ0pqYjI1emIyeGxJaXdpZDJGeWJpSXNJa1Z5Y205eUlpd2llQ0lzSW1OdmJtUnBkR2x2YmlJc0luVnVaR1ZtYVc1bFpDSXNJbDlzWlc0eUlpd2lYMnRsZVRJaUxDSmhjSEJzZVNJc0ltTnZibU5oZENJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVZGQkxHRkJaMEpCTEVsQlFVbEJMRzFDUVVGeFFpeGhRVVY2UWl4SFFVRTJRaXhsUVVGNlFrTXNVVUZCVVVNc1NVRkJTVU1zVTBGQk1rSXNRMEZEZWtNc1NVRkJTVU1zWVVGQlpTeFRRVUZWUXl4SFFVTXpRaXhKUVVGTExFbEJRVWxETEVWQlFVOURMRlZCUVZWRExFOUJRVkZETEVWQlFVOURMRTFCUVUxS0xFVkJRVThzUlVGQlNVRXNSVUZCVHl4RlFVRkpMRWRCUVVsTExFVkJRVThzUlVGQlIwRXNSVUZCVDB3c1JVRkJUVXNzU1VGRE9VWkdMRVZCUVV0RkxFVkJRVThzUjBGQlMwb3NWVUZCVlVrc1IwRkhOMElzU1VGQlNVTXNSVUZCVnl4RlFVTllReXhGUVVGVkxGbEJRV05TTEVWQlFVOVRMRkZCUVZFc1RVRkJUeXhYUVVOb1JDeFBRVUZQVEN4RlFVRkxSeXhQUVVWVExHOUNRVUZhUnl4VFFVTlVRU3hSUVVGUlF5eExRVUZMU0N4SFFVVm1MRWxCU1VVc1RVRkJUU3hKUVVGSlNTeE5RVUZOU2l4SFFVTm9RaXhOUVVGUFN5eE5RVWRZYkVJc2JVSkJRWEZDTEZOQlFWVnRRaXhGUVVGWFpDeEhRVU40UXl4UlFVRmxaU3hKUVVGWVppeEZRVU5HTEUxQlFVMHNTVUZCU1Zrc1RVRkJUU3cyUlVGRmJFSXNTVUZCUzBVc1JVRkJWeXhEUVVOa0xFbEJRVXNzU1VGQlNVVXNSVUZCVVdRc1ZVRkJWVU1zVDBGQlVVTXNSVUZCVDBNc1RVRkJUVmNzUlVGQlVTeEZRVUZKUVN4RlFVRlJMRVZCUVVrc1IwRkJTVU1zUlVGQlVTeEZRVUZIUVN4RlFVRlJSQ3hGUVVGUFF5eEpRVU53UjJJc1JVRkJTMkVzUlVGQlVTeEhRVUZMWml4VlFVRlZaU3hIUVVjNVFteENMR0ZCUVdGdFFpeFhRVUZOU0N4RlFVRlhMRU5CUVVObUxFZEJRVkZ0UWl4UFFVRlBaaXhOUVV0d1JHZENMRTlCUVU5RExGRkJRVlV4UWlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2Ykc5M1VISnBiM0pwZEhsWFlYSnVhVzVuTG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgX3Byb2RJbnZhcmlhbnQ9cmVxdWlyZShcIi4vcmVhY3RQcm9kSW52YXJpYW50XCIpLFJlYWN0RWxlbWVudD1yZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIiksaW52YXJpYW50PXJlcXVpcmUoXCJmYmpzL2xpYi9pbnZhcmlhbnRcIik7ZnVuY3Rpb24gb25seUNoaWxkKGUpe3JldHVybiBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoZSl8fChcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcIlJlYWN0LkNoaWxkcmVuLm9ubHkgZXhwZWN0ZWQgdG8gcmVjZWl2ZSBhIHNpbmdsZSBSZWFjdCBlbGVtZW50IGNoaWxkLlwiKTpfcHJvZEludmFyaWFudChcIjE0M1wiKSksZX1tb2R1bGUuZXhwb3J0cz1vbmx5Q2hpbGQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTl1YkhsRGFHbHNaQzVxY3lKZExDSnVZVzFsY3lJNld5SmZjSEp2WkVsdWRtRnlhV0Z1ZENJc0luSmxjWFZwY21VaUxDSlNaV0ZqZEVWc1pXMWxiblFpTENKcGJuWmhjbWxoYm5RaUxDSnZibXg1UTJocGJHUWlMQ0pqYUdsc1pISmxiaUlzSW1selZtRnNhV1JGYkdWdFpXNTBJaXdpY0hKdlkyVnpjeUlzSW1WdWRpSXNJazVQUkVWZlJVNVdJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJUMEVzWVVGRlFTeEpRVUZKUVN4bFFVRnBRa01zVVVGQlVTeDNRa0ZGZWtKRExHRkJRV1ZFTEZGQlFWRXNhMEpCUlhaQ1JTeFZRVUZaUml4UlFVRlJMSE5DUVdkQ2VFSXNVMEZCVTBjc1ZVRkJWVU1zUjBGRmFrSXNUMEZFUTBnc1lVRkJZVWtzWlVGQlpVUXNTMEZCY1VNc1pVRkJla0pGTEZGQlFWRkRMRWxCUVVsRExGTkJRVFJDVGl4WFFVRlZMRVZCUVU4c2VVVkJRVEpGU0N4bFFVRmxMRkZCUTNKTVN5eEZRVWRVU3l4UFFVRlBReXhSUVVGVlVDSXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdmIyNXNlVU5vYVd4a0xtcHpJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcmVhY3RQcm9kSW52YXJpYW50KHIpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLTEsbz1cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIityK1wiOyB2aXNpdCBodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIityLG49MDtuPGU7bisrKW8rPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW24rMV0pO28rPVwiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIjt2YXIgdD1uZXcgRXJyb3Iobyk7dGhyb3cgdC5uYW1lPVwiSW52YXJpYW50IFZpb2xhdGlvblwiLHQuZnJhbWVzVG9Qb3A9MSx0fW1vZHVsZS5leHBvcnRzPXJlYWN0UHJvZEludmFyaWFudDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluSmxZV04wVUhKdlpFbHVkbUZ5YVdGdWRDNXFjeUpkTENKdVlXMWxjeUk2V3lKeVpXRmpkRkJ5YjJSSmJuWmhjbWxoYm5RaUxDSmpiMlJsSWl3aVlYSm5RMjkxYm5RaUxDSmhjbWQxYldWdWRITWlMQ0pzWlc1bmRHZ2lMQ0p0WlhOellXZGxJaXdpWVhKblNXUjRJaXdpWlc1amIyUmxWVkpKUTI5dGNHOXVaVzUwSWl3aVpYSnliM0lpTENKRmNuSnZjaUlzSW01aGJXVWlMQ0ptY21GdFpYTlViMUJ2Y0NJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVZGQkxHRkJVMEVzVTBGQlUwRXNiVUpCUVcxQ1F5eEhRVXN4UWl4SlFVcEJMRWxCUVVsRExFVkJRVmRETEZWQlFWVkRMRTlCUVZNc1JVRkZPVUpETEVWQlFWVXNlVUpCUVRKQ1NpeEZRVUZQTERaRlFVRnZSa0VzUlVGRk0waExMRVZCUVZNc1JVRkJSMEVzUlVGQlUwb3NSVUZCVlVrc1NVRkRkRU5FTEVkQlFWY3NWMEZCWVVVc2JVSkJRVzFDU2l4VlFVRlZSeXhGUVVGVExFbEJSMmhGUkN4SFFVRlhMR2xJUVVWWUxFbEJRVWxITEVWQlFWRXNTVUZCU1VNc1RVRkJUVW9zUjBGSmRFSXNUVUZJUVVjc1JVRkJUVVVzUzBGQlR5eHpRa0ZEWWtZc1JVRkJUVWNzV1VGQll5eEZRVVZrU0N4RlFVZFNTU3hQUVVGUFF5eFJRVUZWWWlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2Y21WaFkzUlFjbTlrU1c1MllYSnBZVzUwTG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjt2YXIgX3Byb2RJbnZhcmlhbnQ9cmVxdWlyZShcIi4vcmVhY3RQcm9kSW52YXJpYW50XCIpLFJlYWN0Q3VycmVudE93bmVyPXJlcXVpcmUoXCIuL1JlYWN0Q3VycmVudE93bmVyXCIpLFJFQUNUX0VMRU1FTlRfVFlQRT1yZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRTeW1ib2xcIiksZ2V0SXRlcmF0b3JGbj1yZXF1aXJlKFwiLi9nZXRJdGVyYXRvckZuXCIpLGludmFyaWFudD1yZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpLEtleUVzY2FwZVV0aWxzPXJlcXVpcmUoXCIuL0tleUVzY2FwZVV0aWxzXCIpLHdhcm5pbmc9cmVxdWlyZShcImZianMvbGliL3dhcm5pbmdcIiksU0VQQVJBVE9SPVwiLlwiLFNVQlNFUEFSQVRPUj1cIjpcIixkaWRXYXJuQWJvdXRNYXBzPSExO2Z1bmN0aW9uIGdldENvbXBvbmVudEtleShlLHIpe3JldHVybiBlJiZcIm9iamVjdFwiPT10eXBlb2YgZSYmbnVsbCE9ZS5rZXk/S2V5RXNjYXBlVXRpbHMuZXNjYXBlKGUua2V5KTpyLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChlLHIsdCxuKXt2YXIgYSxvPXR5cGVvZiBlO2lmKFwidW5kZWZpbmVkXCIhPT1vJiZcImJvb2xlYW5cIiE9PW98fChlPW51bGwpLG51bGw9PT1lfHxcInN0cmluZ1wiPT09b3x8XCJudW1iZXJcIj09PW98fFwib2JqZWN0XCI9PT1vJiZlLiQkdHlwZW9mPT09UkVBQ1RfRUxFTUVOVF9UWVBFKXJldHVybiB0KG4sZSxcIlwiPT09cj9TRVBBUkFUT1IrZ2V0Q29tcG9uZW50S2V5KGUsMCk6ciksMTt2YXIgaT0wLGw9XCJcIj09PXI/U0VQQVJBVE9SOnIrU1VCU0VQQVJBVE9SO2lmKEFycmF5LmlzQXJyYXkoZSkpZm9yKHZhciBzPTA7czxlLmxlbmd0aDtzKyspaSs9dHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoYT1lW3NdLGwrZ2V0Q29tcG9uZW50S2V5KGEscyksdCxuKTtlbHNle3ZhciBjPWdldEl0ZXJhdG9yRm4oZSk7aWYoYyl7dmFyIHUsZD1jLmNhbGwoZSk7aWYoYyE9PWUuZW50cmllcylmb3IodmFyIHA9MDshKHU9ZC5uZXh0KCkpLmRvbmU7KWkrPXRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGE9dS52YWx1ZSxsK2dldENvbXBvbmVudEtleShhLHArKyksdCxuKTtlbHNle2lmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYpe3ZhciB2PVwiXCI7aWYoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCl7dmFyIGY9UmVhY3RDdXJyZW50T3duZXIuY3VycmVudC5nZXROYW1lKCk7ZiYmKHY9XCIgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYFwiK2YrXCJgLlwiKX1cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ3YXJuaW5nKGRpZFdhcm5BYm91dE1hcHMsXCJVc2luZyBNYXBzIGFzIGNoaWxkcmVuIGlzIG5vdCB5ZXQgZnVsbHkgc3VwcG9ydGVkLiBJdCBpcyBhbiBleHBlcmltZW50YWwgZmVhdHVyZSB0aGF0IG1pZ2h0IGJlIHJlbW92ZWQuIENvbnZlcnQgaXQgdG8gYSBzZXF1ZW5jZSAvIGl0ZXJhYmxlIG9mIGtleWVkIFJlYWN0RWxlbWVudHMgaW5zdGVhZC4lc1wiLHYpLGRpZFdhcm5BYm91dE1hcHM9ITB9Zm9yKDshKHU9ZC5uZXh0KCkpLmRvbmU7KXt2YXIgRT11LnZhbHVlO0UmJihpKz10cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChhPUVbMV0sbCtLZXlFc2NhcGVVdGlscy5lc2NhcGUoRVswXSkrU1VCU0VQQVJBVE9SK2dldENvbXBvbmVudEtleShhLDApLHQsbikpfX19ZWxzZSBpZihcIm9iamVjdFwiPT09byl7dmFyIHk9XCJcIjtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoeT1cIiBJZiB5b3UgbWVhbnQgdG8gcmVuZGVyIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiwgdXNlIGFuIGFycmF5IGluc3RlYWQgb3Igd3JhcCB0aGUgb2JqZWN0IHVzaW5nIGNyZWF0ZUZyYWdtZW50KG9iamVjdCkgZnJvbSB0aGUgUmVhY3QgYWRkLW9ucy5cIixlLl9pc1JlYWN0RWxlbWVudCYmKHk9XCIgSXQgbG9va3MgbGlrZSB5b3UncmUgdXNpbmcgYW4gZWxlbWVudCBjcmVhdGVkIGJ5IGEgZGlmZmVyZW50IHZlcnNpb24gb2YgUmVhY3QuIE1ha2Ugc3VyZSB0byB1c2Ugb25seSBvbmUgY29weSBvZiBSZWFjdC5cIiksUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCkpe3ZhciBiPVJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQuZ2V0TmFtZSgpO2ImJih5Kz1cIiBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgXCIrYitcImAuXCIpfXZhciBtPVN0cmluZyhlKTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcIk9iamVjdHMgYXJlIG5vdCB2YWxpZCBhcyBhIFJlYWN0IGNoaWxkIChmb3VuZDogJXMpLiVzXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PW0/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhlKS5qb2luKFwiLCBcIikrXCJ9XCI6bSx5KTpfcHJvZEludmFyaWFudChcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PW0/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhlKS5qb2luKFwiLCBcIikrXCJ9XCI6bSx5KX19cmV0dXJuIGl9ZnVuY3Rpb24gdHJhdmVyc2VBbGxDaGlsZHJlbihlLHIsdCl7cmV0dXJuIG51bGw9PWU/MDp0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChlLFwiXCIscix0KX1tb2R1bGUuZXhwb3J0cz10cmF2ZXJzZUFsbENoaWxkcmVuO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5SeVlYWmxjbk5sUVd4c1EyaHBiR1J5Wlc0dWFuTWlYU3dpYm1GdFpYTWlPbHNpWDNCeWIyUkpiblpoY21saGJuUWlMQ0p5WlhGMWFYSmxJaXdpVW1WaFkzUkRkWEp5Wlc1MFQzZHVaWElpTENKU1JVRkRWRjlGVEVWTlJVNVVYMVJaVUVVaUxDSm5aWFJKZEdWeVlYUnZja1p1SWl3aWFXNTJZWEpwWVc1MElpd2lTMlY1UlhOallYQmxWWFJwYkhNaUxDSjNZWEp1YVc1bklpd2lVMFZRUVZKQlZFOVNJaXdpVTFWQ1UwVlFRVkpCVkU5U0lpd2laR2xrVjJGeWJrRmliM1YwVFdGd2N5SXNJbWRsZEVOdmJYQnZibVZ1ZEV0bGVTSXNJbU52YlhCdmJtVnVkQ0lzSW1sdVpHVjRJaXdpYTJWNUlpd2laWE5qWVhCbElpd2lkRzlUZEhKcGJtY2lMQ0owY21GMlpYSnpaVUZzYkVOb2FXeGtjbVZ1U1cxd2JDSXNJbU5vYVd4a2NtVnVJaXdpYm1GdFpWTnZSbUZ5SWl3aVkyRnNiR0poWTJzaUxDSjBjbUYyWlhKelpVTnZiblJsZUhRaUxDSmphR2xzWkNJc0luUjVjR1VpTENJa0pIUjVjR1Z2WmlJc0luTjFZblJ5WldWRGIzVnVkQ0lzSW01bGVIUk9ZVzFsVUhKbFptbDRJaXdpUVhKeVlYa2lMQ0pwYzBGeWNtRjVJaXdpYVNJc0lteGxibWQwYUNJc0ltbDBaWEpoZEc5eVJtNGlMQ0p6ZEdWd0lpd2lhWFJsY21GMGIzSWlMQ0pqWVd4c0lpd2laVzUwY21sbGN5SXNJbWxwSWl3aWJtVjRkQ0lzSW1SdmJtVWlMQ0oyWVd4MVpTSXNJbkJ5YjJObGMzTWlMQ0psYm5ZaUxDSk9UMFJGWDBWT1ZpSXNJbTFoY0hOQmMwTm9hV3hrY21WdVFXUmtaVzVrZFcwaUxDSmpkWEp5Wlc1MElpd2liV0Z3YzBGelEyaHBiR1J5Wlc1UGQyNWxjazVoYldVaUxDSm5aWFJPWVcxbElpd2laVzUwY25raUxDSmhaR1JsYm1SMWJTSXNJbDlwYzFKbFlXTjBSV3hsYldWdWRDSXNJbTVoYldVaUxDSmphR2xzWkhKbGJsTjBjbWx1WnlJc0lsTjBjbWx1WnlJc0lrOWlhbVZqZENJc0ltdGxlWE1pTENKcWIybHVJaXdpZEhKaGRtVnljMlZCYkd4RGFHbHNaSEpsYmlJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVZGQkxHRkJSVUVzU1VGQlNVRXNaVUZCYVVKRExGRkJRVkVzZDBKQlJYcENReXhyUWtGQmIwSkVMRkZCUVZFc2RVSkJRelZDUlN4dFFrRkJjVUpHTEZGQlFWRXNkMEpCUlRkQ1J5eGpRVUZuUWtnc1VVRkJVU3h0UWtGRGVFSkpMRlZCUVZsS0xGRkJRVkVzYzBKQlEzQkNTeXhsUVVGcFFrd3NVVUZCVVN4dlFrRkRla0pOTEZGQlFWVk9MRkZCUVZFc2IwSkJSV3hDVHl4VlFVRlpMRWxCUTFwRExHRkJRV1VzU1VGaFprTXNhMEpCUVcxQ0xFVkJVM1pDTEZOQlFWTkRMR2RDUVVGblFrTXNSVUZCVjBNc1IwRkhiRU1zVDBGQlNVUXNSMEZCYTBNc2FVSkJRV1JCTEVkQlFUSkRMRTFCUVdwQ1FTeEZRVUZWUlN4SlFVVnVSRklzWlVGQlpWTXNUMEZCVDBnc1JVRkJWVVVzUzBGSGJFTkVMRVZCUVUxSExGTkJRVk1zU1VGWGVFSXNVMEZCVTBNc2QwSkJRWGRDUXl4RlFVRlZReXhGUVVGWFF5eEZRVUZWUXl4SFFVTTVSQ3hKUVd0Q1NVTXNSVUZzUWtGRExGTkJRV05NTEVWQlQyeENMRWRCVEdFc1kwRkJWRXNzUjBGQmFVTXNXVUZCVkVFc1NVRkZNVUpNTEVWQlFWY3NUVUZIU1N4UFFVRmlRU3hIUVVFNFFpeFhRVUZVU3l4SFFVRTRRaXhYUVVGVVFTeEhRVWR5UXl4WFFVRlVRU3hIUVVGeFFrd3NSVUZCVTAwc1YwRkJZWEpDTEcxQ1FVdDZReXhQUVVwQmFVSXNSVUZCVTBNc1JVRkJhVUpJTEVWQlIxb3NTMEZCWkVNc1JVRkJiVUpZTEZWQlFWbEhMR2RDUVVGblFrOHNSVUZCVlN4SFFVRkxReXhIUVVOMlJDeEZRVXRVTEVsQlFVbE5MRVZCUVdVc1JVRkRaa01zUlVGQkswSXNTMEZCWkZBc1JVRkJiVUpZTEZWQlFWbFhMRVZCUVZsV0xHRkJSV2hGTEVkQlFVbHJRaXhOUVVGTlF5eFJRVUZSVml4SFFVTm9RaXhKUVVGTExFbEJRVWxYTEVWQlFVa3NSVUZCUjBFc1JVRkJTVmdzUlVGQlUxa3NUMEZCVVVRc1NVRkhia05LTEVkQlFXZENVaXgzUWtGR2FFSkxMRVZCUVZGS0xFVkJRVk5YTEVkQlEwNUlMRVZCUVdsQ1ppeG5Ra0ZCWjBKWExFVkJRVTlQTEVkQlEwMVVMRVZCUVZWRExFOUJSV2hGTEVOQlEwd3NTVUZCU1ZVc1JVRkJZVE5DTEdOQlFXTmpMRWRCUXk5Q0xFZEJRVWxoTEVWQlFWa3NRMEZEWkN4SlFVTkpReXhGUVVSQlF5eEZRVUZYUml4RlFVRlhSeXhMUVVGTGFFSXNSMEZGTDBJc1IwRkJTV0VzU1VGQlpXSXNSVUZCVTJsQ0xGRkJSVEZDTEVsQlJFRXNTVUZCU1VNc1JVRkJTeXhKUVVOQlNpeEZRVUZQUXl4RlFVRlRTU3hSUVVGUlF5eE5RVWN2UW1Jc1IwRkJaMEpTTEhkQ1FVWm9Ra3NzUlVGQlVWVXNSVUZCUzA4c1RVRkRSbUlzUlVGQmFVSm1MR2RDUVVGblFsY3NSVUZCVDJNc1MwRkRUV2hDTEVWQlFWVkRMRTlCUldoRkxFTkJRMHdzUjBGQk5rSXNaVUZCZWtKdFFpeFJRVUZSUXl4SlFVRkpReXhUUVVFeVFpeERRVU42UXl4SlFVRkpReXhGUVVGNVFpeEhRVU0zUWl4SFFVRkpla01zYTBKQlFXdENNRU1zVVVGQlV5eERRVU0zUWl4SlFVRkpReXhGUVVFd1FqTkRMR3RDUVVGclFqQkRMRkZCUVZGRkxGVkJRM0JFUkN4SlFVTkdSaXhGUVVGNVFpeG5RMEZCYTBORkxFVkJRVEJDTEUxQlIyaEZMR1ZCUVhwQ1RDeFJRVUZSUXl4SlFVRkpReXhWUVVFMFFtNURMRkZCUVZGSExHbENRVUZyUWl4blRFRkJNa3hwUXl4SFFVTTNVR3BETEd0Q1FVRnRRaXhGUVVkeVFpeFBRVUZUYzBJc1JVRkJUME1zUlVGQlUwa3NVVUZCVVVNc1RVRkJUU3hEUVVOeVF5eEpRVUZKVXl4RlFVRlJaaXhGUVVGTFR5eE5RVU5pVVN4SlFVZEdkRUlzUjBGQlowSlNMSGRDUVVab1Frc3NSVUZCVVhsQ0xFVkJRVTBzUjBGRFNISkNMRVZCUVdsQ2NFSXNaVUZCWlZNc1QwRkJUMmRETEVWQlFVMHNTVUZCVFhSRExHRkJRV1ZGTEdkQ1FVRm5RbGNzUlVGQlR5eEhRVU16UTBZc1JVRkJWVU1zVjBGSmNFVXNSMEZCWVN4WFFVRlVSU3hGUVVGdFFpeERRVU0xUWl4SlFVRkplVUlzUlVGQlZ5eEhRVU5tTEVkQlFUWkNMR1ZCUVhwQ1VpeFJRVUZSUXl4SlFVRkpReXhYUVVOa1RTeEZRVUZYTEdsS1FVTlFPVUlzUlVGQlV5dENMR3RDUVVOWVJDeEZRVUZYTERSSVFVVlVPVU1zYTBKQlFXdENNRU1zVTBGQlV5eERRVU0zUWl4SlFVRkpUU3hGUVVGUGFFUXNhMEpCUVd0Q01FTXNVVUZCVVVVc1ZVRkRha05KTEVsQlEwWkdMRWRCUVZrc1owTkJRV3REUlN4RlFVRlBMRTFCU1RORUxFbEJRVWxETEVWQlFXbENReXhQUVVGUGJFTXNSMEZEVFN4bFFVRjZRbk5DTEZGQlFWRkRMRWxCUVVsRExGTkJRVFJDY2tNc1YwRkJWU3hGUVVGUExIZEVRVUUwUlN4dlFrRkJia0k0UXl4RlFVRjFReXh4UWtGQmRVSkZMRTlCUVU5RExFdEJRVXR3UXl4SFFVRlZjVU1zUzBGQlN5eE5RVUZSTEVsQlFVMUtMRVZCUVdkQ1NDeEhRVUZaYUVRc1pVRkJaU3hMUVVGNVFpeHZRa0ZCYmtKdFJDeEZRVUYxUXl4eFFrRkJkVUpGTEU5QlFVOURMRXRCUVV0d1F5eEhRVUZWY1VNc1MwRkJTeXhOUVVGUkxFbEJRVTFLTEVWQlFXZENTQ3hKUVVrNVdTeFBRVUZQZGtJc1JVRnRRbFFzVTBGQlV5dENMRzlDUVVGdlFuUkRMRVZCUVZWRkxFVkJRVlZETEVkQlF5OURMRTlCUVdkQ0xFMUJRVnBJTEVWQlEwc3NSVUZIUmtRc2QwSkJRWGRDUXl4RlFVRlZMRWRCUVVsRkxFVkJRVlZETEVkQlIzcEViME1zVDBGQlQwTXNVVUZCVlVZaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGEzVnpZV2t2VjI5eWF5OWliMjkwYzNSeVlYQXRjMkZ6Y3k5a1pXMXZMM1JoZEdGdGFTOXViMlJsWDIxdlpIVnNaWE12Y21WaFkzUXZiR2xpTDNSeVlYWmxjbk5sUVd4c1EyaHBiR1J5Wlc0dWFuTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7bW9kdWxlLmV4cG9ydHM9cmVxdWlyZShcIi4vbGliL1JlYWN0XCIpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5KbFlXTjBMbXB6SWwwc0ltNWhiV1Z6SWpwYkltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaUxDSnlaWEYxYVhKbElsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVVZCUVN4UFFVRlBReXhSUVVGVlF5eFJRVUZSSWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd0MWMyRnBMMWR2Y21zdlltOXZkSE4wY21Gd0xYTmhjM012WkdWdGJ5OTBZWFJoYldrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdOMEwzSmxZV04wTG1wekluMD0iLCJcInVzZSBzdHJpY3RcIjtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy5kZWZhdWx0PXVuY29udHJvbGxhYmxlO3ZhciBfcmVhY3Q9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpLF9pbnZhcmlhbnQ9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiaW52YXJpYW50XCIpKSxVdGlscz1faW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi91dGlsc1wiKSk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoZSl7aWYoZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO3ZhciB0PXt9O2lmKG51bGwhPWUpZm9yKHZhciBuIGluIGUpaWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsbikpe3ZhciBvPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSYmT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcj9PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsbik6e307by5nZXR8fG8uc2V0P09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LG4sbyk6dFtuXT1lW25dfXJldHVybiB0LmRlZmF1bHQ9ZSx0fWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fWZ1bmN0aW9uIF9leHRlbmRzKCl7cmV0dXJuKF9leHRlbmRzPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0xO3Q8YXJndW1lbnRzLmxlbmd0aDt0Kyspe3ZhciBuPWFyZ3VtZW50c1t0XTtmb3IodmFyIG8gaW4gbilPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobixvKSYmKGVbb109bltvXSl9cmV0dXJuIGV9KS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZnVuY3Rpb24gX2luaGVyaXRzTG9vc2UoZSx0KXtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQucHJvdG90eXBlKSxlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1lLGUuX19wcm90b19fPXR9ZnVuY3Rpb24gdW5jb250cm9sbGFibGUoZSx0LG4pe3ZvaWQgMD09PW4mJihuPVtdKTt2YXIgbz1lLmRpc3BsYXlOYW1lfHxlLm5hbWV8fFwiQ29tcG9uZW50XCIscj1VdGlscy5pc1JlYWN0Q29tcG9uZW50KGUpLGk9T2JqZWN0LmtleXModCksYT1pLm1hcChVdGlscy5kZWZhdWx0S2V5KTshciYmbi5sZW5ndGgmJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WPygwLF9pbnZhcmlhbnQuZGVmYXVsdCkoITEsXCJbdW5jb250cm9sbGFibGVdIHN0YXRlbGVzcyBmdW5jdGlvbiBjb21wb25lbnRzIGNhbm5vdCBwYXNzIHRocm91Z2ggbWV0aG9kcyBiZWNhdXNlIHRoZXkgaGF2ZSBubyBhc3NvY2lhdGVkIGluc3RhbmNlcy4gQ2hlY2sgY29tcG9uZW50OiBcIitvK1wiLCBhdHRlbXB0aW5nIHRvIHBhc3MgdGhyb3VnaCBtZXRob2RzOiBcIituLmpvaW4oXCIsIFwiKSk6aW52YXJpYW50KCExKSk7dmFyIGw9ZnVuY3Rpb24obil7ZnVuY3Rpb24gVW5jb250cm9sbGVkQ29tcG9uZW50KCl7Zm9yKHZhciBlLG89YXJndW1lbnRzLmxlbmd0aCxhPW5ldyBBcnJheShvKSxsPTA7bDxvO2wrKylhW2xdPWFyZ3VtZW50c1tsXTtyZXR1cm4oZT1uLmNhbGwuYXBwbHkobixbdGhpc10uY29uY2F0KGEpKXx8dGhpcykuaGFuZGxlcnM9T2JqZWN0LmNyZWF0ZShudWxsKSxpLmZvckVhY2goZnVuY3Rpb24obil7dmFyIG89dFtuXTtlLmhhbmRsZXJzW29dPWZ1bmN0aW9uIGhhbmRsZUNoYW5nZSh0KXtpZihlLnByb3BzW29dKXt2YXIgcjtlLl9ub3RpZnlpbmc9ITA7Zm9yKHZhciBpPWFyZ3VtZW50cy5sZW5ndGgsYT1uZXcgQXJyYXkoaT4xP2ktMTowKSxsPTE7bDxpO2wrKylhW2wtMV09YXJndW1lbnRzW2xdOyhyPWUucHJvcHMpW29dLmFwcGx5KHIsW3RdLmNvbmNhdChhKSksZS5fbm90aWZ5aW5nPSExfWUuX3ZhbHVlc1tuXT10LGUudW5tb3VudGVkfHxlLmZvcmNlVXBkYXRlKCl9fSksciYmKGUuYXR0YWNoUmVmPWZ1bmN0aW9uKHQpe2UuaW5uZXI9dH0pLGV9X2luaGVyaXRzTG9vc2UoVW5jb250cm9sbGVkQ29tcG9uZW50LG4pO3ZhciBvPVVuY29udHJvbGxlZENvbXBvbmVudC5wcm90b3R5cGU7cmV0dXJuIG8uc2hvdWxkQ29tcG9uZW50VXBkYXRlPWZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZSgpe3JldHVybiF0aGlzLl9ub3RpZnlpbmd9LG8uY29tcG9uZW50V2lsbE1vdW50PWZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpe3ZhciBlPXRoaXMsdD10aGlzLnByb3BzO3RoaXMuX3ZhbHVlcz1PYmplY3QuY3JlYXRlKG51bGwpLGkuZm9yRWFjaChmdW5jdGlvbihuKXtlLl92YWx1ZXNbbl09dFtVdGlscy5kZWZhdWx0S2V5KG4pXX0pfSxvLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM9ZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhlKXt2YXIgdD10aGlzLG49dGhpcy5wcm9wcztpLmZvckVhY2goZnVuY3Rpb24obyl7IVV0aWxzLmlzUHJvcChlLG8pJiZVdGlscy5pc1Byb3AobixvKSYmKHQuX3ZhbHVlc1tvXT1lW1V0aWxzLmRlZmF1bHRLZXkobyldKX0pfSxvLmNvbXBvbmVudFdpbGxVbm1vdW50PWZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCl7dGhpcy51bm1vdW50ZWQ9ITB9LG8uZ2V0Q29udHJvbGxlZEluc3RhbmNlPWZ1bmN0aW9uIGdldENvbnRyb2xsZWRJbnN0YW5jZSgpe3JldHVybiB0aGlzLmlubmVyfSxvLnJlbmRlcj1mdW5jdGlvbiByZW5kZXIoKXt2YXIgdD10aGlzLG49X2V4dGVuZHMoe30sdGhpcy5wcm9wcyk7YS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2RlbGV0ZSBuW2VdfSk7dmFyIG89e307cmV0dXJuIGkuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgbj10LnByb3BzW2VdO29bZV09dm9pZCAwIT09bj9uOnQuX3ZhbHVlc1tlXX0pLF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoZSxfZXh0ZW5kcyh7fSxuLG8sdGhpcy5oYW5kbGVycyx7cmVmOnRoaXMuYXR0YWNoUmVmfSkpfSxVbmNvbnRyb2xsZWRDb21wb25lbnR9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7cmV0dXJuIGwuZGlzcGxheU5hbWU9XCJVbmNvbnRyb2xsZWQoXCIrbytcIilcIixsLnByb3BUeXBlcz1VdGlscy51bmNvbnRyb2xsZWRQcm9wVHlwZXModCxvKSxuLmZvckVhY2goZnVuY3Rpb24oZSl7bC5wcm90b3R5cGVbZV09ZnVuY3Rpb24gJHByb3hpZWRNZXRob2QoKXt2YXIgdDtyZXR1cm4odD10aGlzLmlubmVyKVtlXS5hcHBseSh0LGFyZ3VtZW50cyl9fSksbC5Db250cm9sbGVkQ29tcG9uZW50PWUsbC5kZWZlckNvbnRyb2xUbz1mdW5jdGlvbihlLG4sbyl7cmV0dXJuIHZvaWQgMD09PW4mJihuPXt9KSx1bmNvbnRyb2xsYWJsZShlLF9leHRlbmRzKHt9LHQsbiksbyl9LGx9bW9kdWxlLmV4cG9ydHM9ZXhwb3J0cy5kZWZhdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1sdVpHVjRMbXB6SWwwc0ltNWhiV1Z6SWpwYkltVjRjRzl5ZEhNaUxDSmZYMlZ6VFc5a2RXeGxJaXdpWkdWbVlYVnNkQ0lzSW5WdVkyOXVkSEp2Ykd4aFlteGxJaXdpWDNKbFlXTjBJaXdpWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDSXNJbkpsY1hWcGNtVWlMQ0pmYVc1MllYSnBZVzUwSWl3aVZYUnBiSE1pTENKZmFXNTBaWEp2Y0ZKbGNYVnBjbVZYYVd4a1kyRnlaQ0lzSW05aWFpSXNJbTVsZDA5aWFpSXNJbXRsZVNJc0lrOWlhbVZqZENJc0luQnliM1J2ZEhsd1pTSXNJbWhoYzA5M2JsQnliM0JsY25SNUlpd2lZMkZzYkNJc0ltUmxjMk1pTENKa1pXWnBibVZRY205d1pYSjBlU0lzSW1kbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjaUlzSW1kbGRDSXNJbk5sZENJc0lsOWxlSFJsYm1Seklpd2lZWE56YVdkdUlpd2lkR0Z5WjJWMElpd2lhU0lzSW1GeVozVnRaVzUwY3lJc0lteGxibWQwYUNJc0luTnZkWEpqWlNJc0ltRndjR3g1SWl3aWRHaHBjeUlzSWw5cGJtaGxjbWwwYzB4dmIzTmxJaXdpYzNWaVEyeGhjM01pTENKemRYQmxja05zWVhOeklpd2lZM0psWVhSbElpd2lZMjl1YzNSeWRXTjBiM0lpTENKZlgzQnliM1J2WDE4aUxDSkRiMjF3YjI1bGJuUWlMQ0pqYjI1MGNtOXNiR1ZrVm1Gc2RXVnpJaXdpYldWMGFHOWtjeUlzSW1ScGMzQnNZWGxPWVcxbElpd2libUZ0WlNJc0ltbHpRMjl0Y0c5emFYUmxRMjl0Y0c5dVpXNTBJaXdpYVhOU1pXRmpkRU52YlhCdmJtVnVkQ0lzSW1OdmJuUnliMnhzWldSUWNtOXdjeUlzSW10bGVYTWlMQ0pRVWs5UVUxOVVUMTlQVFVsVUlpd2liV0Z3SWl3aVpHVm1ZWFZzZEV0bGVTSXNJbkJ5YjJObGMzTWlMQ0psYm5ZaUxDSk9UMFJGWDBWT1ZpSXNJbXB2YVc0aUxDSnBiblpoY21saGJuUWlMQ0pWYm1OdmJuUnliMnhzWldSRGIyMXdiMjVsYm5RaUxDSmZVbVZoWTNRa1EyOXRjRzl1Wlc1MElpd2lYM1JvYVhNaUxDSmZiR1Z1SWl3aVlYSm5jeUlzSWtGeWNtRjVJaXdpWDJ0bGVTSXNJbU52Ym1OaGRDSXNJbWhoYm1Sc1pYSnpJaXdpWm05eVJXRmphQ0lzSW5CeWIzQk9ZVzFsSWl3aWFHRnVaR3hsY2s1aGJXVWlMQ0pvWVc1a2JHVkRhR0Z1WjJVaUxDSjJZV3gxWlNJc0luQnliM0J6SWl3aVgzUm9hWE1rY0hKdmNITWlMQ0pmYm05MGFXWjVhVzVuSWl3aVgyeGxiaklpTENKZmEyVjVNaUlzSWw5MllXeDFaWE1pTENKMWJtMXZkVzUwWldRaUxDSm1iM0pqWlZWd1pHRjBaU0lzSW1GMGRHRmphRkpsWmlJc0luSmxaaUlzSW1sdWJtVnlJaXdpWDNCeWIzUnZJaXdpYzJodmRXeGtRMjl0Y0c5dVpXNTBWWEJrWVhSbElpd2lZMjl0Y0c5dVpXNTBWMmxzYkUxdmRXNTBJaXdpWDNSb2FYTXlJaXdpWTI5dGNHOXVaVzUwVjJsc2JGSmxZMlZwZG1WUWNtOXdjeUlzSW01bGVIUlFjbTl3Y3lJc0lsOTBhR2x6TXlJc0ltbHpVSEp2Y0NJc0ltTnZiWEJ2Ym1WdWRGZHBiR3hWYm0xdmRXNTBJaXdpWjJWMFEyOXVkSEp2Ykd4bFpFbHVjM1JoYm1ObElpd2ljbVZ1WkdWeUlpd2lYM1JvYVhNMElpd2ljSEp2Y0NJc0ltNWxkMUJ5YjNCeklpd2ljSEp2Y0ZaaGJIVmxJaXdpZFc1a1pXWnBibVZrSWl3aVkzSmxZWFJsUld4bGJXVnVkQ0lzSW5CeWIzQlVlWEJsY3lJc0luVnVZMjl1ZEhKdmJHeGxaRkJ5YjNCVWVYQmxjeUlzSW0xbGRHaHZaQ0lzSWlSd2NtOTRhV1ZrVFdWMGFHOWtJaXdpWDJsdWJtVnlJaXdpUTI5dWRISnZiR3hsWkVOdmJYQnZibVZ1ZENJc0ltUmxabVZ5UTI5dWRISnZiRlJ2SWl3aWJtVjNRMjl0Y0c5dVpXNTBJaXdpWVdSa2FYUnBiMjV6SWl3aWJtVjRkRTFsZEdodlpITWlMQ0p0YjJSMWJHVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR0ZCUlVGQkxGRkJRVkZETEZsQlFXRXNSVUZEY2tKRUxGRkJRVkZGTEZGQlFWVkRMR1ZCUld4Q0xFbEJRVWxETEU5QlFWTkRMSFZDUVVGMVFrTXNVVUZCVVN4VlFVVjRRME1zVjBGQllVWXNkVUpCUVhWQ1F5eFJRVUZSTEdOQlJUVkRSU3hOUVVGUlF5eDNRa0ZCZDBKSUxGRkJRVkVzV1VGRk5VTXNVMEZCVTBjc2QwSkJRWGRDUXl4SFFVRlBMRWRCUVVsQkxFZEJRVTlCTEVWQlFVbFVMRmRCUVdNc1QwRkJUMU1zUlVGQll5eEpRVUZKUXl4RlFVRlRMRWRCUVVrc1IwRkJWeXhOUVVGUVJDeEZRVUZsTEVsQlFVc3NTVUZCU1VVc1MwRkJUMFlzUlVGQlR5eEhRVUZKUnl4UFFVRlBReXhWUVVGVlF5eGxRVUZsUXl4TFFVRkxUaXhGUVVGTFJTeEhRVUZOTEVOQlFVVXNTVUZCU1Vzc1JVRkJUMG9zVDBGQlQwc3NaMEpCUVd0Q1RDeFBRVUZQVFN4NVFrRkJNa0pPTEU5QlFVOU5MSGxDUVVGNVFsUXNSVUZCUzBVc1IwRkJUeXhIUVVGUlN5eEZRVUZMUnl4TFFVRlBTQ3hGUVVGTFNTeEpRVUZQVWl4UFFVRlBTeXhsUVVGbFVDeEZRVUZSUXl4RlFVRkxTeXhIUVVGblFrNHNSVUZCVDBNc1IwRkJUMFlzUlVGQlNVVXNSMEZCYjBNc1QwRkJkRUpFTEVWQlFVOVVMRkZCUVZWUkxFVkJRVmxETEVWQlJUZGpMRk5CUVZOT0xIVkNRVUYxUWtzc1IwRkJUeXhQUVVGUFFTeEhRVUZQUVN4RlFVRkpWQ3hYUVVGaFV5eEZRVUZOTEVOQlFVVlNMRkZCUVZOUkxFZEJSWFpHTEZOQlFWTlpMRmRCUVRKUkxFOUJRVGxRUVN4VFFVRlhWQ3hQUVVGUFZTeFJRVUZWTEZOQlFWVkRMRWRCUVZVc1NVRkJTeXhKUVVGSlF5eEZRVUZKTEVWQlFVZEJMRVZCUVVsRExGVkJRVlZETEU5QlFWRkdMRWxCUVVzc1EwRkJSU3hKUVVGSlJ5eEZRVUZUUml4VlFVRlZSQ3hIUVVGSkxFbEJRVXNzU1VGQlNXSXNTMEZCVDJkQ0xFVkJRV05tTEU5QlFVOURMRlZCUVZWRExHVkJRV1ZETEV0QlFVdFpMRVZCUVZGb1FpeExRVUZSV1N4RlFVRlBXaXhIUVVGUFowSXNSVUZCVDJoQ0xFbEJRVmtzVDBGQlQxa3NTVUZCTWtKTExFMUJRVTFETEV0QlFVMUtMRmRCUldoVUxGTkJRVk5MTEdWQlFXVkRMRVZCUVZWRExFZEJRV05FTEVWQlFWTnNRaXhWUVVGWlJDeFBRVUZQY1VJc1QwRkJUMFFzUlVGQlYyNUNMRmRCUVZsclFpeEZRVUZUYkVJc1ZVRkJWWEZDTEZsQlFXTklMRVZCUVZWQkxFVkJRVk5KTEZWQlFWbElMRVZCUlRGTExGTkJRVk01UWl4bFFVRmxhME1zUlVGQlYwTXNSVUZCYTBKRExGRkJRMjVETEVsQlFWcEJMRWxCUTBaQkxFVkJRVlVzU1VGSFdpeEpRVUZKUXl4RlFVRmpTQ3hGUVVGVlJ5eGhRVUZsU0N4RlFVRlZTU3hOUVVGUkxGbEJRM3BFUXl4RlFVRjFRbXhETEUxQlFVMXRReXhwUWtGQmFVSk9MRWRCUXpsRFR5eEZRVUZyUWk5Q0xFOUJRVTluUXl4TFFVRkxVQ3hIUVVNNVFsRXNSVUZCWjBKR0xFVkJRV2RDUnl4SlFVRkpka01zVFVGQlRYZERMR0ZCUXpWRFRpeEhRVUY1UWtnc1JVRkJVVm9zVTBGQmJVTXNaVUZCZWtKelFpeFJRVUZSUXl4SlFVRkpReXhWUVVFMFFpeEZRVUZKTlVNc1YwRkJWMHdzVlVGQlV5eEZRVUZQTERCSlFVRnBTbk5ETEVWQlFXTXNlVU5CUVdkRVJDeEZRVUZSWVN4TFFVRkxMRTlCUVZORExGZEJRVlVzU1VGRmJsY3NTVUZCU1VNc1JVRkZTaXhUUVVGVlF5eEhRVWRTTEZOQlFWTkVMSGRDUVVkUUxFbEJSa0VzU1VGQlNVVXNSVUZGUzBNc1JVRkJUeTlDTEZWQlFWVkRMRTlCUVZFclFpeEZRVUZQTEVsQlFVbERMRTFCUVUxR0xFZEJRVTlITEVWQlFVOHNSVUZCUjBFc1JVRkJUMGdzUlVGQlRVY3NTVUZETDBWR0xFVkJRVXRGTEVkQlFWRnNReXhWUVVGVmEwTXNSMEZuUTNwQ0xFOUJOMEpCU2l4RlFVRlJSQ3hGUVVGcFFuWkRMRXRCUVV0aExFMUJRVTB3UWl4RlFVRnJRaXhEUVVGRGVrSXNUVUZCVFN0Q0xFOUJRVTlJTEV0QlFWVTFRaXhOUVVONFJXZERMRk5CUVZkcVJDeFBRVUZQY1VJc1QwRkJUeXhOUVVNdlFsVXNSVUZCWjBKdFFpeFJRVUZSTEZOQlFWVkRMRWRCUTJoRExFbEJRVWxETEVWQlFXTXpRaXhGUVVGcFFqQkNMRWRCY1VKdVExSXNSVUZCVFUwc1UwRkJVMGNzUjBGdVFra3NVMEZCVTBNc1lVRkJZVU1zUjBGRGRrTXNSMEZCU1Znc1JVRkJUVmtzVFVGQlRVZ3NSMEZCWXl4RFFVTTFRaXhKUVVGSlNTeEZRVVZLWWl4RlFVRk5ZeXhaUVVGaExFVkJSVzVDTEVsQlFVc3NTVUZCU1VNc1JVRkJVVGRETEZWQlFWVkRMRTlCUVZFclFpeEZRVUZQTEVsQlFVbERMRTFCUVUxWkxFVkJRVkVzUlVGQlNVRXNSVUZCVVN4RlFVRkpMRWRCUVVsRExFVkJRVkVzUlVGQlIwRXNSVUZCVVVRc1JVRkJUME1zU1VGRGVFZGtMRVZCUVV0akxFVkJRVkVzUjBGQlN6bERMRlZCUVZVNFF5eEpRVWMzUWtnc1JVRkJZMklzUlVGQlRWa3NUMEZCVDBnc1IwRkJZWEJETEUxQlFVMTNReXhGUVVGaExFTkJRVU5HTEVkQlFVOU9MRTlCUVU5SUxFbEJSVE5GUml4RlFVRk5ZeXhaUVVGaExFVkJSM0pDWkN4RlFVRk5hVUlzVVVGQlVWUXNSMEZCV1Vjc1JVRkRja0pZTEVWQlFVMXJRaXhYUVVGWGJFSXNSVUZCVFcxQ0xHbENRVXMxUW1wRExFbEJRWE5DWXl4RlFVRk5iMElzVlVGQldTeFRRVUZWUXl4SFFVTndSSEpDTEVWQlFVMXpRaXhOUVVGUlJDeEpRVVZVY2tJc1JVRjBRMVI2UWl4bFFVRmxkVUlzYzBKQlFYVkNReXhIUVhsRGRFTXNTVUZCU1hkQ0xFVkJRVk42UWl4elFrRkJjMEo0UXl4VlFUQkVia01zVDBGNFJFRnBSU3hGUVVGUFF5eHpRa0ZCZDBJc1UwRkJVMEVzZDBKQlJYUkRMRTlCUVZGc1JDeExRVUZMZDBNc1dVRkhabE1zUlVGQlQwVXNiVUpCUVhGQ0xGTkJRVk5CTEhGQ1FVTnVReXhKUVVGSlF5eEZRVUZUY0VRc1MwRkZWSE5ETEVWQlFWRjBReXhMUVVGTGMwTXNUVUZEYWtKMFF5eExRVUZMTWtNc1VVRkJWVFZFTEU5QlFVOXhRaXhQUVVGUExFMUJRemRDVlN4RlFVRm5RbTFDTEZGQlFWRXNVMEZCVlc1RUxFZEJRMmhEYzBVc1JVRkJUMVFzVVVGQlVUZEVMRWRCUVU5M1JDeEZRVUZOTlVRc1RVRkJUWGRETEZkQlFWZHdReXhQUVVscVJHMUZMRVZCUVU5SkxEQkNRVUUwUWl4VFFVRlRRU3d3UWtGQk1FSkRMRWRCUTNCRkxFbEJRVWxETEVWQlFWTjJSQ3hMUVVWVWMwTXNSVUZCVVhSRExFdEJRVXR6UXl4TlFVTnFRbmhDTEVWQlFXZENiVUlzVVVGQlVTeFRRVUZWYmtRc1NVRkxNMEpLTEUxQlFVMDRSU3hQUVVGUFJpeEZRVUZYZUVVc1NVRkJVVW9zVFVGQlRUaEZMRTlCUVU5c1FpeEZRVUZQZUVRc1MwRkRka1I1UlN4RlFVRlBXaXhSUVVGUk4wUXNSMEZCVDNkRkxFVkJRVlUxUlN4TlFVRk5kME1zVjBGQlYzQkRMRkZCUzNaRWJVVXNSVUZCVDFFc2NVSkJRWFZDTEZOQlFWTkJMSFZDUVVOeVEzcEVMRXRCUVVzMFF5eFhRVUZaTEVkQlIyNUNTeXhGUVVGUFV5eHpRa0ZCZDBJc1UwRkJVMEVzZDBKQlEzUkRMRTlCUVU4eFJDeExRVUZMWjBRc1QwRkhaRU1zUlVGQlQxVXNUMEZCVXl4VFFVRlRRU3hUUVVOMlFpeEpRVUZKUXl4RlFVRlROVVFzUzBGRlZITkRMRVZCUVZFNVF5eFRRVUZUTEVkQlFVbFJMRXRCUVV0elF5eFBRVVU1UW5SQ0xFVkJRV05wUWl4UlFVRlJMRk5CUVZVMFFpeFZRVU4yUW5aQ0xFVkJRVTExUWl4TFFVVm1MRWxCUVVsRExFVkJRVmNzUjBGTFppeFBRVXBCYUVRc1JVRkJaMEp0UWl4UlFVRlJMRk5CUVZWRExFZEJRMmhETEVsQlFVazJRaXhGUVVGWlNDeEZRVUZQZEVJc1RVRkJUVW9zUjBGRE4wSTBRaXhGUVVGVE5VSXNVVUZCTUVJNFFpeEpRVUZrUkN4RlFVRXdRa0VzUlVGQldVZ3NSVUZCVDJwQ0xGRkJRVkZVTEV0QlJYSkZOVVFzVDBGQlQwWXNVVUZCVVRaR0xHTkJRV014UkN4RlFVRlhaaXhUUVVGVExFZEJRVWs0UXl4RlFVRlBkMElzUlVGQlZUbEVMRXRCUVV0blF5eFRRVUZWTEVOQlF6RkdaU3hKUVVGTEwwTXNTMEZCU3poRExHTkJTVkIwUWl4elFrRndSMVFzUTBGeFIwVnNSQ3hQUVVGUFJpeFJRVUZSYlVNc1YwRjVRbXBDTEU5QmRrSkJhVUlzUlVGQmMwSmtMRmxCUVdNc1owSkJRV3RDUVN4RlFVRmpMRWxCUTNCRll5eEZRVUZ6UWpCRExGVkJRVmw0Uml4TlFVRk5lVVlzYzBKQlFYTkNNMFFzUlVGQmEwSkZMRWRCUTJoR1JDeEZRVUZSZDBJc1VVRkJVU3hUUVVGVmJVTXNSMEZEZUVJMVF5eEZRVUZ6UW5oRExGVkJRVlZ2Uml4SFFVRlZMRk5CUVZORExHbENRVU5xUkN4SlFVRkpReXhGUVVWS0xFOUJRVkZCTEVWQlFWTjBSU3hMUVVGTFowUXNUMEZCVDI5Q0xFZEJRVkZ5UlN4TlFVRk5kVVVzUlVGQlVURkZMR05CUjNaRU5FSXNSVUZCYzBJclF5eHZRa0ZCYzBKb1JTeEZRVTAxUTJsQ0xFVkJRWE5DWjBRc1pVRkJhVUlzVTBGQlZVTXNSVUZCWTBNc1JVRkJWME1zUjBGTGVFVXNXVUZLYTBJc1NVRkJaRVFzU1VGRFJrRXNSVUZCV1N4SlFVZFFja2NzWlVGQlpXOUhMRVZCUVdOcVJpeFRRVUZUTEVkQlFVbG5RaXhGUVVGclFtdEZMRWRCUVZsRExFbEJSekZGYmtRc1JVRkhWRzlFTEU5QlFVOHhSeXhSUVVGVlFTeFJRVUZwUWlJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21GcmRYTmhhUzlYYjNKckwySnZiM1J6ZEhKaGNDMXpZWE56TDJSbGJXOHZkR0YwWVcxcEwyNXZaR1ZmYlc5a2RXeGxjeTkxYm1OdmJuUnliMnhzWVdKc1pTOXBibVJsZUM1cWN5SjkiLCJcInVzZSBzdHJpY3RcIjtleHBvcnRzLl9fZXNNb2R1bGU9ITAsZXhwb3J0cy51bmNvbnRyb2xsZWRQcm9wVHlwZXM9dW5jb250cm9sbGVkUHJvcFR5cGVzLGV4cG9ydHMuaXNQcm9wPWlzUHJvcCxleHBvcnRzLmRlZmF1bHRLZXk9ZGVmYXVsdEtleSxleHBvcnRzLmlzUmVhY3RDb21wb25lbnQ9aXNSZWFjdENvbXBvbmVudDt2YXIgX2ludmFyaWFudD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJpbnZhcmlhbnRcIikpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fXZhciBub29wPWZ1bmN0aW9uIG5vb3AoKXt9O2Z1bmN0aW9uIHJlYWRPbmx5UHJvcFR5cGUoZSxvKXtyZXR1cm4gZnVuY3Rpb24ocix0KXtpZih2b2lkIDAhPT1yW3RdJiYhcltlXSlyZXR1cm4gbmV3IEVycm9yKFwiWW91IGhhdmUgcHJvdmlkZWQgYSBgXCIrdCtcImAgcHJvcCB0byBgXCIrbytcImAgd2l0aG91dCBhbiBgXCIrZStcImAgaGFuZGxlciBwcm9wLiBUaGlzIHdpbGwgcmVuZGVyIGEgcmVhZC1vbmx5IGZpZWxkLiBJZiB0aGUgZmllbGQgc2hvdWxkIGJlIG11dGFibGUgdXNlIGBcIitkZWZhdWx0S2V5KHQpK1wiYC4gT3RoZXJ3aXNlLCBzZXQgYFwiK2UrXCJgLlwiKX19ZnVuY3Rpb24gdW5jb250cm9sbGVkUHJvcFR5cGVzKGUsbyl7dmFyIHI9e307cmV0dXJuIE9iamVjdC5rZXlzKGUpLmZvckVhY2goZnVuY3Rpb24odCl7aWYocltkZWZhdWx0S2V5KHQpXT1ub29wLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYpe3ZhciBuPWVbdF07XCJzdHJpbmdcIj09dHlwZW9mIG4mJm4udHJpbSgpLmxlbmd0aHx8KFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/KDAsX2ludmFyaWFudC5kZWZhdWx0KSghMSxcIlVuY29udHJvbGxhYmxlIC0gWyVzXTogdGhlIHByb3AgYCVzYCBuZWVkcyBhIHZhbGlkIGhhbmRsZXIga2V5IG5hbWUgaW4gb3JkZXIgdG8gbWFrZSBpdCB1bmNvbnRyb2xsYWJsZVwiLG8sdCk6aW52YXJpYW50KCExKSksclt0XT1yZWFkT25seVByb3BUeXBlKG4sbyl9fSkscn1mdW5jdGlvbiBpc1Byb3AoZSxvKXtyZXR1cm4gdm9pZCAwIT09ZVtvXX1mdW5jdGlvbiBkZWZhdWx0S2V5KGUpe3JldHVyblwiZGVmYXVsdFwiK2UuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrZS5zdWJzdHIoMSl9ZnVuY3Rpb24gaXNSZWFjdENvbXBvbmVudChlKXtyZXR1cm4hIShlJiZlLnByb3RvdHlwZSYmZS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCl9XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJblYwYVd4ekxtcHpJbDBzSW01aGJXVnpJanBiSW1WNGNHOXlkSE1pTENKZlgyVnpUVzlrZFd4bElpd2lkVzVqYjI1MGNtOXNiR1ZrVUhKdmNGUjVjR1Z6SWl3aWFYTlFjbTl3SWl3aVpHVm1ZWFZzZEV0bGVTSXNJbWx6VW1WaFkzUkRiMjF3YjI1bGJuUWlMQ0pmYVc1MllYSnBZVzUwSWl3aVgybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ0lzSW5KbGNYVnBjbVVpTENKdlltb2lMQ0prWldaaGRXeDBJaXdpYm05dmNDSXNJbkpsWVdSUGJteDVVSEp2Y0ZSNWNHVWlMQ0pvWVc1a2JHVnlJaXdpYm1GdFpTSXNJbkJ5YjNCeklpd2ljSEp2Y0U1aGJXVWlMQ0oxYm1SbFptbHVaV1FpTENKRmNuSnZjaUlzSW1OdmJuUnliMnhzWldSV1lXeDFaWE1pTENKa2FYTndiR0Y1VG1GdFpTSXNJbkJ5YjNCVWVYQmxjeUlzSWs5aWFtVmpkQ0lzSW10bGVYTWlMQ0ptYjNKRllXTm9JaXdpY0hKdmNDSXNJbkJ5YjJObGMzTWlMQ0psYm5ZaUxDSk9UMFJGWDBWT1ZpSXNJblJ5YVcwaUxDSnNaVzVuZEdnaUxDSnBiblpoY21saGJuUWlMQ0pyWlhraUxDSmphR0Z5UVhRaUxDSjBiMVZ3Y0dWeVEyRnpaU0lzSW5OMVluTjBjaUlzSW1OdmJYQnZibVZ1ZENJc0luQnliM1J2ZEhsd1pTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNZVUZGUVVFc1VVRkJVVU1zV1VGQllTeEZRVU55UWtRc1VVRkJVVVVzYzBKQlFYZENRU3h6UWtGRGFFTkdMRkZCUVZGSExFOUJRVk5CTEU5QlEycENTQ3hSUVVGUlNTeFhRVUZoUVN4WFFVTnlRa29zVVVGQlVVc3NhVUpCUVcxQ1FTeHBRa0ZGTTBJc1NVRkJTVU1zVjBGQllVTXNkVUpCUVhWQ1F5eFJRVUZSTEdOQlJXaEVMRk5CUVZORUxIVkNRVUYxUWtVc1IwRkJUeXhQUVVGUFFTeEhRVUZQUVN4RlFVRkpVaXhYUVVGaFVTeEZRVUZOTEVOQlFVVkRMRkZCUVZORUxFZEJSWFpHTEVsQlFVbEZMRXRCUVU4c1UwRkJVMEVzVTBGRmNFSXNVMEZCVTBNc2FVSkJRV2xDUXl4RlFVRlRReXhIUVVOcVF5eFBRVUZQTEZOQlFWVkRMRVZCUVU5RExFZEJRM1JDTEZGQlFYZENReXhKUVVGd1FrWXNSVUZCVFVNc1MwRkRTRVFzUlVGQlRVWXNSMEZEVkN4UFFVRlBMRWxCUVVsTExFMUJRVTBzZDBKQlFUQkNSaXhGUVVGWExHTkJRV2RDUml4RlFVRlBMR2xDUVVGNVFrUXNSVUZCVlN3eVJrRkJiMGRVTEZkQlFWZFpMRWRCUVZrc2MwSkJRU3RDU0N4RlFVRlZMRTlCVFRWU0xGTkJRVk5ZTEhOQ1FVRnpRbWxDTEVWQlFXdENReXhIUVVNdlF5eEpRVUZKUXl4RlFVRlpMRWRCVjJoQ0xFOUJWa0ZETEU5QlFVOURMRXRCUVV0S0xFZEJRV3RDU3l4UlFVRlJMRk5CUVZWRExFZEJTVGxETEVkQlJrRktMRVZCUVZWcVFpeFhRVUZYY1VJc1NVRkJVMlFzUzBGRlJDeGxRVUY2UW1Vc1VVRkJVVU1zU1VGQlNVTXNVMEZCTWtJc1EwRkRla01zU1VGQlNXWXNSVUZCVlUwc1JVRkJhVUpOTEVkQlExWXNhVUpCUVZwYUxFZEJRWGRDUVN4RlFVRlJaMElzVDBGQlQwTXNVMEZCYlVNc1pVRkJla0pLTEZGQlFWRkRMRWxCUVVsRExGVkJRVFJDTEVWQlFVbDBRaXhYUVVGWFNTeFZRVUZUTEVWQlFVOHNlVWRCUVRCSFZTeEZRVUZoU3l4SFFVRlJUU3hYUVVGVkxFbEJRekZSVml4RlFVRlZTU3hIUVVGUllpeHBRa0ZCYVVKRExFVkJRVk5QTEUxQlIzcERReXhGUVVkVUxGTkJRVk5zUWl4UFFVRlBXU3hGUVVGUFZTeEhRVU55UWl4WlFVRjFRbElzU1VGQmFFSkdMRVZCUVUxVkxFZEJSMllzVTBGQlUzSkNMRmRCUVZjMFFpeEhRVU5zUWl4TlFVRlBMRlZCUVZsQkxFVkJRVWxETEU5QlFVOHNSMEZCUjBNc1kwRkJaMEpHTEVWQlFVbEhMRTlCUVU4c1IwRlpPVVFzVTBGQlV6bENMR2xDUVVGcFFpdENMRWRCUTNoQ0xGTkJRVlZCTEVkQlFXRkJMRVZCUVZWRExGZEJRV0ZFTEVWQlFWVkRMRlZCUVZWb1F5SXNJbVpwYkdVaU9pSXZWWE5sY25NdmNtRnJkWE5oYVM5WGIzSnJMMkp2YjNSemRISmhjQzF6WVhOekwyUmxiVzh2ZEdGMFlXMXBMMjV2WkdWZmJXOWtkV3hsY3k5MWJtTnZiblJ5YjJ4c1lXSnNaUzkxZEdsc2N5NXFjeUo5IiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIHdhcm5pbmc9ZnVuY3Rpb24oKXt9O1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJih3YXJuaW5nPWZ1bmN0aW9uKHIsbixlKXt2YXIgbz1hcmd1bWVudHMubGVuZ3RoO2U9bmV3IEFycmF5KG8+Mj9vLTI6MCk7Zm9yKHZhciB0PTI7dDxvO3QrKyllW3QtMl09YXJndW1lbnRzW3RdO2lmKHZvaWQgMD09PW4pdGhyb3cgbmV3IEVycm9yKFwiYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgbWVzc2FnZSBhcmd1bWVudFwiKTtpZihuLmxlbmd0aDwxMHx8L15bc1xcV10qJC8udGVzdChuKSl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgd2FybmluZyBmb3JtYXQgc2hvdWxkIGJlIGFibGUgdG8gdW5pcXVlbHkgaWRlbnRpZnkgdGhpcyB3YXJuaW5nLiBQbGVhc2UsIHVzZSBhIG1vcmUgZGVzY3JpcHRpdmUgZm9ybWF0IHRoYW46IFwiK24pO2lmKCFyKXt2YXIgaT0wLGE9XCJXYXJuaW5nOiBcIituLnJlcGxhY2UoLyVzL2csZnVuY3Rpb24oKXtyZXR1cm4gZVtpKytdfSk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGNvbnNvbGUmJmNvbnNvbGUuZXJyb3IoYSk7dHJ5e3Rocm93IG5ldyBFcnJvcihhKX1jYXRjaChyKXt9fX0pLG1vZHVsZS5leHBvcnRzPXdhcm5pbmc7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUp5YjNkelpYSXVhbk1pWFN3aWJtRnRaWE1pT2xzaWQyRnlibWx1WnlJc0luQnliMk5sYzNNaUxDSmxibllpTENKT1QwUkZYMFZPVmlJc0ltTnZibVJwZEdsdmJpSXNJbVp2Y20xaGRDSXNJbUZ5WjNNaUxDSnNaVzRpTENKaGNtZDFiV1Z1ZEhNaUxDSnNaVzVuZEdnaUxDSkJjbkpoZVNJc0ltdGxlU0lzSW5WdVpHVm1hVzVsWkNJc0lrVnljbTl5SWl3aWRHVnpkQ0lzSW1GeVowbHVaR1Y0SWl3aWJXVnpjMkZuWlNJc0luSmxjR3hoWTJVaUxDSmpiMjV6YjJ4bElpd2laWEp5YjNJaUxDSjRJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklrRkJVMEVzWVVGVFFTeEpRVUZKUVN4UlFVRlZMR0ZCUldVc1pVRkJla0pETEZGQlFWRkRMRWxCUVVsRExGZEJRMlJJTEZGQlFWVXNVMEZCVTBrc1JVRkJWME1zUlVGQlVVTXNSMEZEY0VNc1NVRkJTVU1zUlVGQlRVTXNWVUZCVlVNc1QwRkRjRUpJTEVWQlFVOHNTVUZCU1Vrc1RVRkJUVWdzUlVGQlRTeEZRVUZKUVN4RlFVRk5MRVZCUVVrc1IwRkRja01zU1VGQlN5eEpRVUZKU1N4RlFVRk5MRVZCUVVkQkxFVkJRVTFLTEVWQlFVdEpMRWxCUXpOQ1RDeEZRVUZMU3l4RlFVRk5MRWRCUVV0SUxGVkJRVlZITEVkQlJUVkNMRkZCUVdWRExFbEJRVmhRTEVWQlEwWXNUVUZCVFN4SlFVRkpVU3hOUVVOU0xEWkZRVXRLTEVkQlFVbFNMRVZCUVU5SkxFOUJRVk1zU1VGQlRTeFhRVUZoU3l4TFFVRkxWQ3hIUVVNeFF5eE5RVUZOTEVsQlFVbFJMRTFCUTFJc2IwaEJRekJFVWl4SFFVazVSQ3hKUVVGTFJDeEZRVUZYTEVOQlEyUXNTVUZCU1Zjc1JVRkJWeXhGUVVOWVF5eEZRVUZWTEZsQlExcFlMRVZCUVU5WkxGRkJRVkVzVFVGQlR5eFhRVU53UWl4UFFVRlBXQ3hGUVVGTFV5eFBRVVZQTEc5Q1FVRmFSeXhUUVVOVVFTeFJRVUZSUXl4TlFVRk5TQ3hIUVVWb1FpeEpRVWRGTEUxQlFVMHNTVUZCU1Vnc1RVRkJUVWNzUjBGRGFFSXNUVUZCVFVrc1VVRkxaRU1zVDBGQlQwTXNVVUZCVlhSQ0lpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXdDFjMkZwTDFkdmNtc3ZZbTl2ZEhOMGNtRndMWE5oYzNNdlpHVnRieTkwWVhSaGJXa3ZibTlrWlY5dGIyUjFiR1Z6TDNkaGNtNXBibWN2WW5KdmQzTmxjaTVxY3lKOSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQWxlcnRzICgpIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGgyPkFsZXJ0czwvaDI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT0nYWxlcnQgYWxlcnQtc3VjY2Vzcycgcm9sZT0nYWxlcnQnPlxuICAgICAgICA8YnV0dG9uIHR5cGU9J2J1dHRvbicgY2xhc3NOYW1lPSdjbG9zZScgZGF0YS1kaXNtaXNzPSdhbGVydCcgYXJpYS1sYWJlbD0nQ2xvc2UnPlxuICAgICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPSd0cnVlJz4mdGltZXM7PC9zcGFuPlxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgV2VsbCBkb25lIVxuICAgICAgICB7JyAnfVxuICAgICAgICA8YSBocmVmPSdqYXZhc2NyaXB0OjsnIGNsYXNzTmFtZT0nYWxlcnQtbGluayc+TGluazwvYT5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9J2FsZXJ0IGFsZXJ0LWluZm8nIHJvbGU9J2FsZXJ0Jz5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPSdidXR0b24nIGNsYXNzTmFtZT0nY2xvc2UnIGRhdGEtZGlzbWlzcz0nYWxlcnQnIGFyaWEtbGFiZWw9J0Nsb3NlJz5cbiAgICAgICAgICA8c3BhbiBhcmlhLWhpZGRlbj0ndHJ1ZSc+JnRpbWVzOzwvc3Bhbj5cbiAgICAgICAgPC9idXR0b24+XG4gICAgICAgIEhlYWRzIHVwIVxuICAgICAgICB7JyAnfVxuICAgICAgICA8YSBocmVmPSdqYXZhc2NyaXB0OjsnIGNsYXNzTmFtZT0nYWxlcnQtbGluayc+TGluazwvYT5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9J2FsZXJ0IGFsZXJ0LXdhcm5pbmcnIHJvbGU9J2FsZXJ0Jz5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPSdidXR0b24nIGNsYXNzTmFtZT0nY2xvc2UnIGRhdGEtZGlzbWlzcz0nYWxlcnQnIGFyaWEtbGFiZWw9J0Nsb3NlJz5cbiAgICAgICAgICA8c3BhbiBhcmlhLWhpZGRlbj0ndHJ1ZSc+JnRpbWVzOzwvc3Bhbj5cbiAgICAgICAgPC9idXR0b24+XG4gICAgICAgIFdhcm5pbmchXG4gICAgICAgIHsnICd9XG4gICAgICAgIDxhIGhyZWY9J2phdmFzY3JpcHQ6OycgY2xhc3NOYW1lPSdhbGVydC1saW5rJz5MaW5rPC9hPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT0nYWxlcnQgYWxlcnQtZGFuZ2VyJyByb2xlPSdhbGVydCc+XG4gICAgICAgIDxidXR0b24gdHlwZT0nYnV0dG9uJyBjbGFzc05hbWU9J2Nsb3NlJyBkYXRhLWRpc21pc3M9J2FsZXJ0JyBhcmlhLWxhYmVsPSdDbG9zZSc+XG4gICAgICAgICAgPHNwYW4gYXJpYS1oaWRkZW49J3RydWUnPiZ0aW1lczs8L3NwYW4+XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgICBPaCBzbmFwIVxuICAgICAgICB7JyAnfVxuICAgICAgICA8YSBocmVmPSdqYXZhc2NyaXB0OjsnIGNsYXNzTmFtZT0nYWxlcnQtbGluayc+TGluazwvYT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApXG59XG4iLCJpbXBvcnQgUmVhY3QsIHtDb21wb25lbnR9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFNhbmRib3ggZnJvbSAnLi9zYW5kYm94J1xuaW1wb3J0IE5hdmJhclNhbXBsZSBmcm9tICcuL25hdmJhci1zYW1wbGUnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwcCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5zdGF0ZSA9IHtoYXNoOiAnJ31cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignaGFzaGNoYW5nZScsIHRoaXMub25IYXNoQ2hhbmdlLmJpbmQodGhpcyksIGZhbHNlKVxuICAgIHRoaXMub25IYXNoQ2hhbmdlKClcbiAgfVxuXG4gIG9uSGFzaENoYW5nZSAoKSB7XG4gICAgbGV0IGNvbXBvbmVudCA9IGxvY2F0aW9uLmhhc2hcbiAgICBpZiAoY29tcG9uZW50Lmxlbmd0aCA+IDApIGNvbXBvbmVudCA9IGNvbXBvbmVudC5zdWJzdHJpbmcoMSlcbiAgICB0aGlzLnNldFN0YXRlKHtjb21wb25lbnR9KVxuICB9XG5cbiAgcmVuZGVyICgpIHtcbiAgICBjb25zdCB7Y29tcG9uZW50fSA9IHRoaXMuc3RhdGVcblxuICAgIGNvbnN0IGNvbXBvbmVudHMgPSBbXG4gICAgICAnYWxlcnRzJyxcbiAgICAgICdidXR0b25zJyxcbiAgICAgICdjYXJkcycsXG4gICAgICAnZHJvcGRvd25zJyxcbiAgICAgICdmb3JtcycsXG4gICAgICAnZ3JpZCcsXG4gICAgICAnbGFiZWxzJyxcbiAgICAgICdtb2RhbHMnLFxuICAgICAgJ25hdnMnLFxuICAgICAgJ3Rvb2x0aXBzJyxcbiAgICAgICd0eXBlJ1xuICAgIF1cblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICA8TmF2YmFyU2FtcGxlIC8+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb250YWluZXInIGlkPSdjb250Jz5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncm93Jz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb2wtbWQtMyc+XG4gICAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9J25hdiBuYXYtcGlsbHMgbmF2LXN0YWNrZWQnPlxuICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9e2NvbXBvbmVudCA9PT0gICcnID8gJ2FjdGl2ZScgOiAnJ30+XG4gICAgICAgICAgICAgICAgICA8YSBocmVmPScjJz5Ib21lPC9hPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgY29tcG9uZW50cy5tYXAoYyA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgPGxpIGtleT17Y30gY2xhc3NOYW1lPXtjID09PSBjb21wb25lbnQgPyAnYWN0aXZlJyA6ICcnfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9eycjJytjfT57Y2FwaXRhbGl6ZShjKX08L2E+XG4gICAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb2wtbWQtOSc+XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAhY29tcG9uZW50ICYmXG4gICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICA8aDE+XG4gICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Jy4vcHVibGljL2Fzc2V0cy9pbWcvc2tlbHRvbi5zdmcnIGFsdD0nbG9nbycgY2xhc3NOYW1lPSdsb2dvaW1nJyB3aWR0aD0nNTAnIC8+XG4gICAgICAgICAgICAgICAgICAgICAgSGVsbG8sIHRvdWNoIGRldmljZSBmcmllbmRseSBVSSBjb21wb25lbnRzXG4gICAgICAgICAgICAgICAgICAgIDwvaDE+XG4gICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICDnibnlvrQ8YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgYm9vdHN0cmFwIDPns7vjga7mtL7nlJ/jgarjga7jgadjc3MgY2xhc3PjgoRyZWFjdOOBr2Jvb3RzdHJhcOS6kuaPmzxiciAvPlxuICAgICAgICAgICAgICAgICAgICDjgqbjgqfjg5bjgYvjgonjga/pm6LjgozjgIHjg43jgqTjg4bjgqPjg5bjgqLjg5fjg6rjgavov5HjgYTli5XjgY3jgpLlrp/nj748YnIgLz5cbiAgICAgICAgICAgICAgICAgICAg5Y2Y44Gr44Os44K544Od44Oz44K344OW44Gq44Gg44GR44Gn44Gv44Gq44GEPGJyIC8+XG4gICAgICAgICAgICAgICAgICAgIOOCv+ODg+ODgeODh+ODkOOCpOOCueOBp+OAgeOAgeODjeOCpOODhuOCo+ODluOCouODl+ODqumiqOOBruWLleOBjeOCkuWun+ePvjxiciAvPlxuICAgICAgICAgICAgICAgICAgICDkuIDmlrnjgafjg53jgqTjg7Pjg4bjgqPjg7PjgrDjg4fjg5DjgqTjgrnjgafjgoLjgaHjgoPjgpPjgajli5XjgY88YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICA8aHIgLz5cbiAgICAgICAgICAgICAgICAgICAgdXJsOiB7d2luZG93LmxvY2F0aW9uLmhyZWZ9PGJyIC8+XG4gICAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgICAgICBXZWxjb21lIHRvIGRlc2lnbiBzeXN0ZW0uXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICA8U2FuZGJveCBjb21wb25lbnQ9e2NvbXBvbmVudH0gLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufVxuXG5mdW5jdGlvbiBjYXBpdGFsaXplKHN0cikge1xuICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBCdXR0b25zICgpIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGgyPkJ1dHRvbnM8L2gyPlxuXG4gICAgICA8aDQ+QnV0dG9uczwvaDQ+XG4gICAgICA8YnV0dG9uIGNsYXNzTmFtZT0nYnRuIGJ0bi1kZWZhdWx0Jz5EZWZhdWx0PC9idXR0b24+Jm5ic3A7XG4gICAgICA8YnV0dG9uIGNsYXNzTmFtZT0nYnRuIGJ0bi1wcmltYXJ5Jz5QcmltYXJ5PC9idXR0b24+Jm5ic3A7XG4gICAgICA8YnV0dG9uIGNsYXNzTmFtZT0nYnRuIGJ0bi1kYW5nZXInPkRhbmdlcjwvYnV0dG9uPiZuYnNwO1xuICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9J2J0biBidG4tZmxhdCc+RmxhdDwvYnV0dG9uPlxuXG4gICAgICA8YnIgLz5cbiAgICAgIDxiciAvPlxuICAgICAgPGg0PkxpbmsgQnV0dG9uPC9oND5cbiAgICAgIDxhIGhyZWY9J2phdmFzY3JpcHQ6OycgY2xhc3NOYW1lPSdidG4gYnRuLWRlZmF1bHQnPkRlZmF1bHQ8L2E+Jm5ic3A7XG4gICAgICA8YSBocmVmPSdqYXZhc2NyaXB0OjsnIGNsYXNzTmFtZT0nYnRuIGJ0bi1wcmltYXJ5Jz5QcmltYXJ5PC9hPiZuYnNwO1xuICAgICAgPGEgaHJlZj0namF2YXNjcmlwdDo7JyBjbGFzc05hbWU9J2J0biBidG4tZGFuZ2VyJz5EYW5nZXI8L2E+Jm5ic3A7XG4gICAgICA8YSBocmVmPSdqYXZhc2NyaXB0OjsnIGNsYXNzTmFtZT0nYnRuIGJ0bi1mbGF0Jz5GbGF0PC9hPlxuXG4gICAgICA8YnIgLz5cbiAgICAgIDxiciAvPlxuICAgICAgPGgzPlNpemVzPC9oMz5cbiAgICAgIDxwPlxuICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT0nYnRuIGJ0bi1wcmltYXJ5IGJ0bi1sZyc+TGFyZ2UgYnV0dG9uPC9idXR0b24+Jm5ic3A7XG4gICAgICAgIDxidXR0b24gY2xhc3NOYW1lPSdidG4gYnRuLWRlZmF1bHQgYnRuLWxnJz5MYXJnZSBidXR0b248L2J1dHRvbj5cbiAgICAgIDwvcD5cbiAgICAgIDxwPlxuICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT0nYnRuIGJ0bi1wcmltYXJ5Jz5EZWZhdWx0IGJ1dHRvbjwvYnV0dG9uPiZuYnNwO1xuICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT0nYnRuIGJ0bi1kZWZhdWx0Jz5EZWZhdWx0IGJ1dHRvbjwvYnV0dG9uPlxuICAgICAgPC9wPlxuICAgICAgPHA+XG4gICAgICAgIDxidXR0b24gY2xhc3NOYW1lPSdidG4gYnRuLXByaW1hcnkgYnRuLXNtJz5TbWFsbCBidXR0b248L2J1dHRvbj4mbmJzcDtcbiAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9J2J0biBidG4tZGVmYXVsdCBidG4tc20nPlNtYWxsIGJ1dHRvbjwvYnV0dG9uPlxuICAgICAgPC9wPlxuICAgICAgPHA+XG4gICAgICAgIDxidXR0b24gY2xhc3NOYW1lPSdidG4gYnRuLXByaW1hcnkgYnRuLXhzJz5FeHRyYSBzbWFsbCBidXR0b248L2J1dHRvbj4mbmJzcDtcbiAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9J2J0biBidG4tZGVmYXVsdCBidG4teHMnPkV4dHJhIHNtYWxsIGJ1dHRvbjwvYnV0dG9uPlxuICAgICAgPC9wPlxuXG4gICAgICA8YnIgLz5cbiAgICAgIDxoND5CbG9jayBsZXZlbCBidXR0b248L2g0PlxuICAgICAgPGEgaHJlZj0namF2YXNjcmlwdDo7JyBjbGFzc05hbWU9J2J0biBidG4tZGVmYXVsdCBidG4tbGcgYnRuLWJsb2NrJz5CbG9jayBsZXZlbCBidXR0b248L2E+Jm5ic3A7XG4gICAgICA8YSBocmVmPSdqYXZhc2NyaXB0OjsnIGNsYXNzTmFtZT0nYnRuIGJ0bi1wcmltYXJ5IGJ0bi1sZyBidG4tYmxvY2snPkJsb2NrIGxldmVsIGJ1dHRvbjwvYT4mbmJzcDtcblxuICAgICAgPGJyIC8+XG4gICAgICA8YnIgLz5cbiAgICAgIDxoMz5EaXNhYmxlZCBzdGF0ZTwvaDM+XG4gICAgICA8YnV0dG9uIGNsYXNzTmFtZT0nYnRuIGJ0bi1kZWZhdWx0JyBkaXNhYmxlZD5cbiAgICAgICAgRGVmYXVsdFxuICAgICAgPC9idXR0b24+XG4gICAgICAmbmJzcDtcbiAgICAgIDxidXR0b24gY2xhc3NOYW1lPSdidG4gYnRuLXByaW1hcnknIGRpc2FibGVkPlxuICAgICAgICBQcmltYXJ5XG4gICAgICA8L2J1dHRvbj5cbiAgICAgICZuYnNwO1xuICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9J2J0biBidG4tZGFuZ2VyJyBkaXNhYmxlZD5cbiAgICAgICAgRGFuZ2VyXG4gICAgICA8L2J1dHRvbj5cblxuICAgICAgPGJyIC8+XG4gICAgICA8YnIgLz5cbiAgICAgIDxoMz5CdXR0b24gZ3JvdXBzPC9oMz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdidG4tZ3JvdXAnIHJvbGU9J2dyb3VwJyBhcmlhLWxhYmVsPScuLi4nPlxuICAgICAgICA8YnV0dG9uIHR5cGU9J2J1dHRvbicgY2xhc3NOYW1lPSdidG4gYnRuLWRlZmF1bHQnPkxlZnQ8L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPSdidXR0b24nIGNsYXNzTmFtZT0nYnRuIGJ0bi1kZWZhdWx0Jz5NaWRkbGU8L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPSdidXR0b24nIGNsYXNzTmFtZT0nYnRuIGJ0bi1kZWZhdWx0Jz5SaWdodDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxoND5WZXJ0aWNhbDwvaDQ+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT0nYnRuLWdyb3VwLXZlcnRpY2FsJyByb2xlPSdncm91cCcgYXJpYS1sYWJlbD0nLi4uJz5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPSdidXR0b24nIGNsYXNzTmFtZT0nYnRuIGJ0bi1kZWZhdWx0Jz5PbmU8L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPSdidXR0b24nIGNsYXNzTmFtZT0nYnRuIGJ0bi1kZWZhdWx0Jz5Ud288L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPSdidXR0b24nIGNsYXNzTmFtZT0nYnRuIGJ0bi1kZWZhdWx0Jz5UaHJlZTwvYnV0dG9uPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nYnRuLWdyb3VwJyByb2xlPSdncm91cCcgYXJpYS1sYWJlbD0nLi4uJz5cbiAgICAgICAgICA8YnV0dG9uIHR5cGU9J2J1dHRvbicgY2xhc3NOYW1lPSdidG4gYnRuLWRlZmF1bHQgZHJvcGRvd24tdG9nZ2xlJyBkYXRhLXRvZ2dsZT0nZHJvcGRvd24nIGFyaWEtaGFzcG9wdXA9J3RydWUnIGFyaWEtZXhwYW5kZWQ9J2ZhbHNlJz5cbiAgICAgICAgICAgIERyb3Bkb3dueycgJ31cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0nY2FyZXQnPjwvc3Bhbj5cbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICA8dWwgY2xhc3NOYW1lPSdkcm9wZG93bi1tZW51Jz5cbiAgICAgICAgICAgIDxsaT48YSBocmVmPScjJz5Ecm9wZG93biBsaW5rPC9hPjwvbGk+XG4gICAgICAgICAgICA8bGk+PGEgaHJlZj0nIyc+RHJvcGRvd24gbGluazwvYT48L2xpPlxuICAgICAgICAgIDwvdWw+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8YnV0dG9uIHR5cGU9J2J1dHRvbicgY2xhc3NOYW1lPSdidG4gYnRuLWRlZmF1bHQnPkZvdXI8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8aDQ+VG9vbGJhcjwvaDQ+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT0nYnRuLXRvb2xiYXInIHJvbGU9J3Rvb2xiYXInIGFyaWEtbGFiZWw9Jy4uLic+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdidG4tZ3JvdXAnIHJvbGU9J2dyb3VwJyBhcmlhLWxhYmVsPScuLi4nPlxuICAgICAgICAgIDxidXR0b24gdHlwZT0nYnV0dG9uJyBjbGFzc05hbWU9J2J0biBidG4tZGVmYXVsdCc+MTwvYnV0dG9uPlxuICAgICAgICAgIDxidXR0b24gdHlwZT0nYnV0dG9uJyBjbGFzc05hbWU9J2J0biBidG4tZGVmYXVsdCc+MjwvYnV0dG9uPlxuICAgICAgICAgIDxidXR0b24gdHlwZT0nYnV0dG9uJyBjbGFzc05hbWU9J2J0biBidG4tZGVmYXVsdCc+MzwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2J0bi1ncm91cCcgcm9sZT0nZ3JvdXAnIGFyaWEtbGFiZWw9Jy4uLic+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2J0bi1ncm91cCcgcm9sZT0nZ3JvdXAnPlxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSdidXR0b24nIGNsYXNzTmFtZT0nYnRuIGJ0bi1kZWZhdWx0IGRyb3Bkb3duLXRvZ2dsZScgZGF0YS10b2dnbGU9J2Ryb3Bkb3duJyBhcmlhLWhhc3BvcHVwPSd0cnVlJyBhcmlhLWV4cGFuZGVkPSdmYWxzZSc+XG4gICAgICAgICAgICAgIERyb3Bkb3dueycgJ31cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSdjYXJldCc+PC9zcGFuPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8dWwgY2xhc3NOYW1lPSdkcm9wZG93bi1tZW51Jz5cbiAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9JyMnPkRyb3Bkb3duIGxpbms8L2E+PC9saT5cbiAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9JyMnPkRyb3Bkb3duIGxpbms8L2E+PC9saT5cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGJ1dHRvbiB0eXBlPSdidXR0b24nIGNsYXNzTmFtZT0nYnRuIGJ0bi1kZWZhdWx0Jz40PC9idXR0b24+XG4gICAgICAgICAgPGJ1dHRvbiB0eXBlPSdidXR0b24nIGNsYXNzTmFtZT0nYnRuIGJ0bi1kZWZhdWx0Jz41PC9idXR0b24+XG4gICAgICAgICAgPGJ1dHRvbiB0eXBlPSdidXR0b24nIGNsYXNzTmFtZT0nYnRuIGJ0bi1kZWZhdWx0Jz42PC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxoND5TbWFsbCBzaXplPC9oND5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdidG4tZ3JvdXAgYnRuLWdyb3VwLXNtJyByb2xlPSdncm91cCcgYXJpYS1sYWJlbD0nLi4uJz5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPSdidXR0b24nIGNsYXNzTmFtZT0nYnRuIGJ0bi1kZWZhdWx0Jz5MZWZ0PC9idXR0b24+XG4gICAgICAgIDxidXR0b24gdHlwZT0nYnV0dG9uJyBjbGFzc05hbWU9J2J0biBidG4tZGVmYXVsdCc+TWlkZGxlPC9idXR0b24+XG4gICAgICAgIDxidXR0b24gdHlwZT0nYnV0dG9uJyBjbGFzc05hbWU9J2J0biBidG4tZGVmYXVsdCc+UmlnaHQ8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8aDQ+SnVzdGlmaWVkPC9oND5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdidG4tZ3JvdXAgYnRuLWdyb3VwLWp1c3RpZmllZCcgcm9sZT0nZ3JvdXAnIGFyaWEtbGFiZWw9Jy4uLic+XG4gICAgICAgIDxidXR0b24gdHlwZT0nYnV0dG9uJyBjbGFzc05hbWU9J2J0biBidG4tZGVmYXVsdCc+TGVmdDwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIHR5cGU9J2J1dHRvbicgY2xhc3NOYW1lPSdidG4gYnRuLWRlZmF1bHQnPk1pZGRsZTwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIHR5cGU9J2J1dHRvbicgY2xhc3NOYW1lPSdidG4gYnRuLWRlZmF1bHQnPlJpZ2h0PC9idXR0b24+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdidG4tZ3JvdXAnIHJvbGU9J2dyb3VwJz5cbiAgICAgICAgICA8YnV0dG9uIHR5cGU9J2J1dHRvbicgY2xhc3NOYW1lPSdidG4gYnRuLWRlZmF1bHQgZHJvcGRvd24tdG9nZ2xlJyBkYXRhLXRvZ2dsZT0nZHJvcGRvd24nIGFyaWEtaGFzcG9wdXA9J3RydWUnIGFyaWEtZXhwYW5kZWQ9J2ZhbHNlJz5cbiAgICAgICAgICAgIERyb3Bkb3dueycgJ31cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0nY2FyZXQnPjwvc3Bhbj5cbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICA8dWwgY2xhc3NOYW1lPSdkcm9wZG93bi1tZW51Jz5cbiAgICAgICAgICAgIDxsaT48YSBocmVmPScjJz5Ecm9wZG93biBsaW5rPC9hPjwvbGk+XG4gICAgICAgICAgICA8bGk+PGEgaHJlZj0nIyc+RHJvcGRvd24gbGluazwvYT48L2xpPlxuICAgICAgICAgIDwvdWw+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIClcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ2FyZHMgKCkge1xuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8aDI+Q2FyZHM8L2gyPlxuICAgICAgPGEgaHJlZj0namF2YXNjcmlwdDo7JyBjbGFzc05hbWU9J2NhcmQnPlNhbXBsZSBDYXJkIExpbms8L2E+XG4gICAgPC9kaXY+XG4gIClcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRHJvcGRvd25zICgpIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGgyPkRyb3Bkb3duczwvaDI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT0nZHJvcGRvd24nPlxuICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT0nYnRuIGJ0bi1kZWZhdWx0IGRyb3Bkb3duLXRvZ2dsZScgdHlwZT0nYnV0dG9uJyBpZD0nZHJvcGRvd25NZW51MSdcbiAgICAgICAgICBkYXRhLXRvZ2dsZT0nZHJvcGRvd24nIGFyaWEtaGFzcG9wdXA9J3RydWUnIGFyaWEtZXhwYW5kZWQ9J2ZhbHNlJz5cbiAgICAgICAgICBEcm9wZG93biA8c3BhbiBjbGFzc05hbWU9J2NhcmV0JyAvPlxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPHVsIGNsYXNzTmFtZT0nZHJvcGRvd24tbWVudScgYXJpYS1sYWJlbGxlZGJ5PSdkcm9wZG93bk1lbnUxJz5cbiAgICAgICAgICA8bGk+PGEgaHJlZj0namF2YXNjcmlwdDo7Jz5BY3Rpb248L2E+PC9saT5cbiAgICAgICAgICA8bGk+PGEgaHJlZj0namF2YXNjcmlwdDo7Jz5Bbm90aGVyIGFjdGlvbjwvYT48L2xpPlxuICAgICAgICAgIDxsaT48YSBocmVmPSdqYXZhc2NyaXB0OjsnPlNvbWV0aGluZyBlbHNlIGhlcmU8L2E+PC9saT5cbiAgICAgICAgICA8bGkgcm9sZT0nc2VwYXJhdG9yJyBjbGFzc05hbWU9J2RpdmlkZXInIC8+XG4gICAgICAgICAgPGxpIGNsYXNzTmFtZT0nYWN0aXZlJz48YSBocmVmPSdqYXZhc2NyaXB0OjsnPkFjdGl2ZSBsaW5rPC9hPjwvbGk+XG4gICAgICAgICAgPGxpIGNsYXNzTmFtZT0nZGlzYWJsZWQnPjxhIGhyZWY9J2phdmFzY3JpcHQ6Oyc+RGlzYWJsZWQgbGluazwvYT48L2xpPlxuICAgICAgICA8L3VsPlxuICAgICAgPC9kaXY+XG4gICAgICA8aHIgLz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdkcm9wZG93bic+XG4gICAgICAgIDxidXR0b24gY2xhc3NOYW1lPSdidG4gYnRuLWZsYXQgZHJvcGRvd24tdG9nZ2xlJyB0eXBlPSdidXR0b24nIGlkPSdkcm9wZG93bk1lbnUyJ1xuICAgICAgICAgIHRhYkluZGV4PScwJ1xuICAgICAgICAgIGRhdGEtdG9nZ2xlPSdkcm9wZG93bicgYXJpYS1oYXNwb3B1cD0ndHJ1ZScgYXJpYS1leHBhbmRlZD0nZmFsc2UnPlxuICAgICAgICAgIERyb3Bkb3duIDxzcGFuIGNsYXNzTmFtZT0nY2FyZXQnIC8+XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8dWwgY2xhc3NOYW1lPSdkcm9wZG93bi1tZW51JyBhcmlhLWxhYmVsbGVkYnk9J2Ryb3Bkb3duTWVudTInPlxuICAgICAgICAgIDxsaT48YSBocmVmPSdqYXZhc2NyaXB0OjsnPkFjdGlvbjwvYT48L2xpPlxuICAgICAgICAgIDxsaT48YSBocmVmPSdqYXZhc2NyaXB0OjsnPkFub3RoZXIgYWN0aW9uPC9hPjwvbGk+XG4gICAgICAgICAgPGxpPjxhIGhyZWY9J2phdmFzY3JpcHQ6Oyc+U29tZXRoaW5nIGVsc2UgaGVyZTwvYT48L2xpPlxuICAgICAgICAgIDxsaSByb2xlPSdzZXBhcmF0b3InIGNsYXNzTmFtZT0nZGl2aWRlcicgLz5cbiAgICAgICAgICA8bGkgY2xhc3NOYW1lPSdhY3RpdmUnPjxhIGhyZWY9J2phdmFzY3JpcHQ6Oyc+QWN0aXZlIGxpbms8L2E+PC9saT5cbiAgICAgICAgICA8bGkgY2xhc3NOYW1lPSdkaXNhYmxlZCc+PGEgaHJlZj0namF2YXNjcmlwdDo7Jz5EaXNhYmxlZCBsaW5rPC9hPjwvbGk+XG4gICAgICAgIDwvdWw+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGJyIC8+XG4gICAgICA8YnIgLz5cblxuICAgICAgPGRpdiBjbGFzc05hbWU9J2J0bi1ncm91cCc+XG4gICAgICAgIDxidXR0b24gdHlwZT0nYnV0dG9uJyBjbGFzc05hbWU9J2J0biBidG4tZGFuZ2VyJz5BY3Rpb248L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPSdidXR0b24nIGNsYXNzTmFtZT0nYnRuIGJ0bi1kYW5nZXIgZHJvcGRvd24tdG9nZ2xlJyBkYXRhLXRvZ2dsZT0nZHJvcGRvd24nIGFyaWEtaGFzcG9wdXA9J3RydWUnIGFyaWEtZXhwYW5kZWQ9J2ZhbHNlJz5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J2NhcmV0Jz48L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSdzci1vbmx5Jz5Ub2dnbGUgRHJvcGRvd248L3NwYW4+XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8dWwgY2xhc3NOYW1lPSdkcm9wZG93bi1tZW51Jz5cbiAgICAgICAgICA8bGk+PGEgaHJlZj0nIyc+QWN0aW9uPC9hPjwvbGk+XG4gICAgICAgICAgPGxpPjxhIGhyZWY9JyMnPkFub3RoZXIgYWN0aW9uPC9hPjwvbGk+XG4gICAgICAgICAgPGxpPjxhIGhyZWY9JyMnPlNvbWV0aGluZyBlbHNlIGhlcmU8L2E+PC9saT5cbiAgICAgICAgICA8bGkgcm9sZT0nc2VwYXJhdG9yJyBjbGFzc05hbWU9J2RpdmlkZXInPjwvbGk+XG4gICAgICAgICAgPGxpPjxhIGhyZWY9JyMnPlNlcGFyYXRlZCBsaW5rPC9hPjwvbGk+XG4gICAgICAgIDwvdWw+XG4gICAgICA8L2Rpdj5cbiAgICAgIHsnICd9XG4gICAgICA8ZGl2IGNsYXNzTmFtZT0nYnRuLWdyb3VwIGRyb3B1cCc+XG4gICAgICAgIDxidXR0b24gdHlwZT0nYnV0dG9uJyBjbGFzc05hbWU9J2J0biBidG4tZGVmYXVsdCc+RHJvcHVwPC9idXR0b24+XG4gICAgICAgIDxidXR0b24gdHlwZT0nYnV0dG9uJyBjbGFzc05hbWU9J2J0biBidG4tZGVmYXVsdCBkcm9wZG93bi10b2dnbGUnIGRhdGEtdG9nZ2xlPSdkcm9wZG93bicgYXJpYS1oYXNwb3B1cD0ndHJ1ZScgYXJpYS1leHBhbmRlZD0nZmFsc2UnPlxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0nY2FyZXQnPjwvc3Bhbj5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J3NyLW9ubHknPlRvZ2dsZSBEcm9wZG93bjwvc3Bhbj5cbiAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDx1bCBjbGFzc05hbWU9J2Ryb3Bkb3duLW1lbnUnPlxuICAgICAgICAgIDxsaT48YSBocmVmPScjJz5BY3Rpb248L2E+PC9saT5cbiAgICAgICAgICA8bGk+PGEgaHJlZj0nIyc+QW5vdGhlciBhY3Rpb248L2E+PC9saT5cbiAgICAgICAgPC91bD5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApXG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEZvcm1zICgpIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGgyPkZvcm1zPC9oMj5cbiAgICAgIDxmb3JtPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZm9ybS1ncm91cCc+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2lucHV0LWdyb3VwJz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdpbnB1dC1ncm91cC1hZGRvbic+aHR0cHM6Ly9zY3JhcGJveC5pby88L2Rpdj5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSd0ZXh0JyBjbGFzc05hbWU9J2Zvcm0tY29udHJvbCcgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2Zvcm0tZ3JvdXAgaGFzLWVycm9yJz5cbiAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPSdjb250cm9sLWxhYmVsJyBodG1sRm9yPSdleGFtcGxlSW5wdXRFbWFpbDEnPkhhcyBlcnJvcjwvbGFiZWw+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2lucHV0LWdyb3VwJz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdpbnB1dC1ncm91cC1hZGRvbic+aHR0cHM6Ly9zY3JhcGJveC5pby88L2Rpdj5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSd0ZXh0JyBjbGFzc05hbWU9J2Zvcm0tY29udHJvbCcgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2Zvcm0tZ3JvdXAnPlxuICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9J2NvbnRyb2wtbGFiZWwnIGh0bWxGb3I9J2V4YW1wbGVJbnB1dEVtYWlsMSc+RW1haWwgYWRkcmVzczwvbGFiZWw+XG4gICAgICAgICAgPGlucHV0IHR5cGU9J2VtYWlsJyBjbGFzc05hbWU9J2Zvcm0tY29udHJvbCcgaWQ9J2V4YW1wbGVJbnB1dEVtYWlsMScgcGxhY2Vob2xkZXI9J0VtYWlsJyAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2Zvcm0tZ3JvdXAnPlxuICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9J2NvbnRyb2wtbGFiZWwnIGh0bWxGb3I9J2V4YW1wbGVJbnB1dFBhc3N3b3JkMSc+UGFzc3dvcmQ8L2xhYmVsPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPSdwYXNzd29yZCcgY2xhc3NOYW1lPSdmb3JtLWNvbnRyb2wnIGlkPSdleGFtcGxlSW5wdXRQYXNzd29yZDEnIHBsYWNlaG9sZGVyPSdQYXNzd29yZCcgLz5cbiAgICAgICAgICA8c3BhbiBpZD0naGVscEJsb2NrJyBjbGFzc05hbWU9J2hlbHAtYmxvY2snPkEgYmxvY2sgb2YgaGVscCB0ZXh0IHRoYXQgYnJlYWtzIG9udG8gYSBuZXcgbGluZSBhbmQgbWF5IGV4dGVuZCBiZXlvbmQgb25lIGxpbmUuPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2Zvcm0tZ3JvdXAnPlxuICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9J2NvbnRyb2wtbGFiZWwnIGh0bWxGb3I9J2V4YW1wbGVJbnB1dEVtYWlsMSc+U2VsZWN0PC9sYWJlbD5cbiAgICAgICAgICA8c2VsZWN0IGNsYXNzTmFtZT0nZm9ybS1jb250cm9sJz5cbiAgICAgICAgICAgIDxvcHRpb24+MTwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbj4yPC9vcHRpb24+XG4gICAgICAgICAgICA8b3B0aW9uPjM8L29wdGlvbj5cbiAgICAgICAgICAgIDxvcHRpb24+NDwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbj41PC9vcHRpb24+XG4gICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZm9ybS1ncm91cCc+XG4gICAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT0nY29udHJvbC1sYWJlbCcgaHRtbEZvcj0nZGlzYWJsZWRUZXh0SW5wdXQnPkRpc2FibGVkIGlucHV0PC9sYWJlbD5cbiAgICAgICAgICA8aW5wdXQgdHlwZT0ndGV4dCcgaWQ9J2Rpc2FibGVkVGV4dElucHV0JyBjbGFzc05hbWU9J2Zvcm0tY29udHJvbCcgcGxhY2Vob2xkZXI9J0Rpc2FibGVkIGlucHV0JyBkaXNhYmxlZCAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2Zvcm0tZ3JvdXAnPlxuICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9J2NvbnRyb2wtbGFiZWwnIGh0bWxGb3I9J2ZyZWV0ZXh0Jz5GcmVlIHRleHQ8L2xhYmVsPlxuICAgICAgICAgIDx0ZXh0YXJlYSBjbGFzc05hbWU9J2Zvcm0tY29udHJvbCcgaWQ9J2ZyZWV0ZXh0JyAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjaGVja2JveCc+XG4gICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9J2NoZWNrYm94JyAvPiBDaGVjayBtZSBvdXRcbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J3JhZGlvJz5cbiAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT0ncmFkaW8nIG5hbWU9J29wdGlvbnNSYWRpb3MnIGlkPSdvcHRpb25zUmFkaW9zMScgdmFsdWU9J29wdGlvbjEnIC8+XG4gICAgICAgICAgICBPcHRpb24gb25lIGlzIHRoaXMgYW5kIHRoYXQmbWRhc2g7YmUgc3VyZSB0byBpbmNsdWRlIHdoeSBpdCdzIGdyZWF0XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdyYWRpbyc+XG4gICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9J3JhZGlvJyBuYW1lPSdvcHRpb25zUmFkaW9zJyBpZD0nb3B0aW9uc1JhZGlvczInIHZhbHVlPSdvcHRpb24yJyAvPlxuICAgICAgICAgICAgT3B0aW9uIHR3byBjYW4gYmUgc29tZXRoaW5nIGVsc2UgYW5kIHNlbGVjdGluZyBpdCB3aWxsIGRlc2VsZWN0IG9wdGlvbiBvbmVcbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZm9ybS1ncm91cCc+XG4gICAgICAgICAgPGxhYmVsIGh0bWxGb3I9J3NsaWRlcic+UHJvY2VzcyBuaWNlIHNjb3JlIGZyb20gLTIwIHRvICsyMDwvbGFiZWw+XG4gICAgICAgICAgPGlucHV0IHR5cGU9J3JhbmdlJyBtaW49Jy0yMCcgbWF4PScyMCcgZGVmYXVsdFZhbHVlPScwJyAvPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZm9ybS1ncm91cCc+XG4gICAgICAgICAgPGxhYmVsIGh0bWxGb3I9J2ZpbGUnPlVwbG9hZCBmaWxlPC9sYWJlbD5cbiAgICAgICAgICA8aW5wdXQgdHlwZT0nZmlsZScgdGl0bGU9J0ZpbGUnIC8+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxidXR0b24gY2xhc3NOYW1lPSdidG4gYnRuLWRlZmF1bHQnPlN1Ym1pdDwvYnV0dG9uPlxuXG4gICAgICAgIDxoND5TaXplczwvaDQ+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdmb3JtLWdyb3VwJz5cbiAgICAgICAgICA8aW5wdXQgY2xhc3NOYW1lPSdmb3JtLWNvbnRyb2wgaW5wdXQtbGcnIHR5cGU9J3RleHQnIHBsYWNlaG9sZGVyPScuaW5wdXQtbGcnIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZm9ybS1ncm91cCc+XG4gICAgICAgICAgPGlucHV0IGNsYXNzTmFtZT0nZm9ybS1jb250cm9sJyB0eXBlPSd0ZXh0JyBwbGFjZWhvbGRlcj0nRGVmYXVsdCBpbnB1dCcgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdmb3JtLWdyb3VwJz5cbiAgICAgICAgICA8aW5wdXQgY2xhc3NOYW1lPSdmb3JtLWNvbnRyb2wgaW5wdXQtc20nIHR5cGU9J3RleHQnIHBsYWNlaG9sZGVyPScuaW5wdXQtc20nIC8+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxoND5QYW5lbHM8L2g0PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncGFuZWwgcGFuZWwtZGVmYXVsdCc+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3BhbmVsLWJvZHknPlxuICAgICAgICAgICAgQmFzaWMgcGFuZWwgZXhhbXBsZVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZm9ybT5cbiAgICA8L2Rpdj5cbiAgKVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBHcmlkICgpIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT0nZ3JpZCc+XG4gICAgICA8aDI+R3JpZDwvaDI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT0ncm93Jz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbC1tZC0xJz48ZGl2PjE8L2Rpdj48L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbC1tZC0xJz48ZGl2PjE8L2Rpdj48L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbC1tZC0xJz48ZGl2PjE8L2Rpdj48L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbC1tZC0xJz48ZGl2PjE8L2Rpdj48L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbC1tZC0xJz48ZGl2PjE8L2Rpdj48L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbC1tZC0xJz48ZGl2PjE8L2Rpdj48L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbC1tZC0xJz48ZGl2PjE8L2Rpdj48L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbC1tZC0xJz48ZGl2PjE8L2Rpdj48L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbC1tZC0xJz48ZGl2PjE8L2Rpdj48L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbC1tZC0xJz48ZGl2PjE8L2Rpdj48L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbC1tZC0xJz48ZGl2PjE8L2Rpdj48L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbC1tZC0xJz48ZGl2PjE8L2Rpdj48L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9J3Jvdyc+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb2wtbWQtMic+PGRpdj4yPC9kaXY+PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb2wtbWQtMic+PGRpdj4yPC9kaXY+PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb2wtbWQtMic+PGRpdj4yPC9kaXY+PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb2wtbWQtMic+PGRpdj4yPC9kaXY+PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb2wtbWQtMic+PGRpdj4yPC9kaXY+PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb2wtbWQtMic+PGRpdj4yPC9kaXY+PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdyb3cnPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29sLW1kLTMnPjxkaXY+MzwvZGl2PjwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29sLW1kLTMnPjxkaXY+MzwvZGl2PjwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29sLW1kLTMnPjxkaXY+MzwvZGl2PjwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29sLW1kLTMnPjxkaXY+MzwvZGl2PjwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT0ncm93Jz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbC1tZC00Jz48ZGl2PjQ8L2Rpdj48L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbC1tZC00Jz48ZGl2PjQ8L2Rpdj48L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbC1tZC00Jz48ZGl2PjQ8L2Rpdj48L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9J3Jvdyc+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb2wtbWQtNic+PGRpdj42PC9kaXY+PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb2wtbWQtNic+PGRpdj42PC9kaXY+PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdyb3cnPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29sLW1kLTUnPjxkaXY+NTwvZGl2PjwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29sLW1kLTUgY29sLW1kLW9mZnNldC0yJz48ZGl2PjUgb2Zmc2V0LTI8L2Rpdj48L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9J3Jvdyc+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb2wtbWQtOCBjb2wtbWQtb2Zmc2V0LTInPjxkaXY+OCBvZmZzZXQtMjwvZGl2PjwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIClcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTGFiZWxzICgpIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGgyPkxhYmVsczwvaDI+XG4gICAgICA8c3BhbiBjbGFzc05hbWU9J2xhYmVsIGxhYmVsLWRlZmF1bHQnPkRlZmF1bHQ8L3NwYW4+eycgJ31cbiAgICAgIDxhIGhyZWY9J2phdmFzY3JpcHQ6OycgY2xhc3NOYW1lPSdsYWJlbCBsYWJlbC1kZWZhdWx0Jz5MaW5rPC9hPnsnICd9XG4gICAgICA8c3BhbiBjbGFzc05hbWU9J2xhYmVsIGxhYmVsLXByaW1hcnknPlByaW1hcnk8L3NwYW4+eycgJ31cbiAgICAgIDxzcGFuIGNsYXNzTmFtZT0nbGFiZWwgbGFiZWwtc3VjY2Vzcyc+U3VjY2Vzczwvc3Bhbj57JyAnfVxuICAgICAgPHNwYW4gY2xhc3NOYW1lPSdsYWJlbCBsYWJlbC1pbmZvJz5JbmZvPC9zcGFuPnsnICd9XG4gICAgICA8c3BhbiBjbGFzc05hbWU9J2xhYmVsIGxhYmVsLXdhcm5pbmcnPldhcm5pbmc8L3NwYW4+eycgJ31cbiAgICAgIDxzcGFuIGNsYXNzTmFtZT0nbGFiZWwgbGFiZWwtZGFuZ2VyJz5EYW5nZXI8L3NwYW4+XG4gICAgPC9kaXY+XG4gIClcbn1cbiIsImltcG9ydCBSZWFjdCwge0NvbXBvbmVudH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgU2FtcGxlTW9kYWwgZnJvbSAnLi9zYW1wbGUtbW9kYWwnXG5cbi8vIFRvdWNoIERldmljZSBGcmllbmRseSBCdXR0b25cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vZGFscyBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5zdGF0ZSA9IHtzaG93TW9kYWw6IGZhbHNlfVxuICB9XG5cbiAgcmVuZGVyICgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPGgyPk1vZGFsczwvaDI+XG4gICAgICAgIDxTYW1wbGVNb2RhbCBzaG93PXt0aGlzLnN0YXRlLnNob3dNb2RhbH0gb25IaWRlPXsoKSA9PiB0aGlzLnNldFN0YXRlKHtzaG93TW9kYWw6IGZhbHNlfSl9IC8+XG4gICAgICAgIDxidXR0b24gY2xhc3NOYW1lPSdidG4gYnRuLWRlZmF1bHQnIG9uQ2xpY2s9eygpID0+IHRoaXMuc2V0U3RhdGUoe3Nob3dNb2RhbDogdHJ1ZX0pfT5cbiAgICAgICAgICBTaG93IE1vZGFsXG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE5hdmJhclNhbXBsZSAoKSB7XG4gIHJldHVybiAoXG4gICAgPG5hdiBjbGFzc05hbWU9J25hdmJhciBuYXZiYXItaW52ZXJzZSBuYXZiYXItZml4ZWQtdG9wJz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb250YWluZXItZmx1aWQnPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbmF2YmFyLWhlYWRlcic+XG4gICAgICAgICAgPGJ1dHRvbiB0eXBlPSdidXR0b24nIGNsYXNzTmFtZT0nbmF2YmFyLXRvZ2dsZSBjb2xsYXBzZWQnIGRhdGEtdG9nZ2xlPSdjb2xsYXBzZScgZGF0YS10YXJnZXQ9JyNicy1leGFtcGxlLW5hdmJhci1jb2xsYXBzZS0xJyBhcmlhLWV4cGFuZGVkPSdmYWxzZSc+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J3NyLW9ubHknPlRvZ2dsZSBuYXZpZ2F0aW9uPC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSdpY29uLWJhcicgLz5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0naWNvbi1iYXInIC8+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J2ljb24tYmFyJyAvPlxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDxhIGNsYXNzTmFtZT0nbmF2YmFyLWJyYW5kJyBocmVmPSdqYXZhc2NyaXB0OjsnPlRhdGFtaTwvYT5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbGxhcHNlIG5hdmJhci1jb2xsYXBzZScgaWQ9J2JzLWV4YW1wbGUtbmF2YmFyLWNvbGxhcHNlLTEnPlxuICAgICAgICAgIDx1bCBjbGFzc05hbWU9J25hdiBuYXZiYXItbmF2Jz5cbiAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9J2FjdGl2ZSc+PGEgaHJlZj0namF2YXNjcmlwdDo7Jz5MaW5rIDxzcGFuIGNsYXNzTmFtZT0nc3Itb25seSc+KGN1cnJlbnQpPC9zcGFuPjwvYT48L2xpPlxuICAgICAgICAgICAgPGxpPjxhIGhyZWY9J2phdmFzY3JpcHQ6Oyc+TGluazwvYT48L2xpPlxuICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT0nZHJvcGRvd24nPlxuICAgICAgICAgICAgICA8YSBocmVmPScjJyBjbGFzc05hbWU9J2Ryb3Bkb3duLXRvZ2dsZScgZGF0YS10b2dnbGU9J2Ryb3Bkb3duJyByb2xlPSdidXR0b24nIGFyaWEtaGFzcG9wdXA9J3RydWUnIGFyaWEtZXhwYW5kZWQ9J2ZhbHNlJz5Ecm9wZG93biA8c3BhbiBjbGFzc05hbWU9J2NhcmV0JyAvPjwvYT5cbiAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT0nZHJvcGRvd24tbWVudSc+XG4gICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9J2phdmFzY3JpcHQ6Oyc+QWN0aW9uPC9hPjwvbGk+XG4gICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9J2phdmFzY3JpcHQ6Oyc+QW5vdGhlciBhY3Rpb248L2E+PC9saT5cbiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0namF2YXNjcmlwdDo7Jz5Tb21ldGhpbmcgZWxzZSBoZXJlPC9hPjwvbGk+XG4gICAgICAgICAgICAgICAgPGxpIHJvbGU9J3NlcGFyYXRvcicgY2xhc3NOYW1lPSdkaXZpZGVyJyAvPlxuICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9J2FjdGl2ZSc+PGEgaHJlZj0namF2YXNjcmlwdDo7Jz5BY3RpdmUgbGluazwvYT48L2xpPlxuICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9J2Rpc2FibGVkJz48YSBocmVmPSdqYXZhc2NyaXB0OjsnPkRpc2FibGVkIGxpbms8L2E+PC9saT5cbiAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgPC91bD5cbiAgICAgICAgICA8Zm9ybSBjbGFzc05hbWU9J25hdmJhci1mb3JtIG5hdmJhci1sZWZ0Jz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdmb3JtLWdyb3VwJz5cbiAgICAgICAgICAgICAgPGlucHV0IHR5cGU9J3RleHQnIGNsYXNzTmFtZT0nZm9ybS1jb250cm9sJyBwbGFjZWhvbGRlcj0nU2VhcmNoJyAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9J3N1Ym1pdCcgY2xhc3NOYW1lPSdidG4gYnRuLWRlZmF1bHQnPlN1Ym1pdDwvYnV0dG9uPlxuICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICA8dWwgY2xhc3NOYW1lPSduYXYgbmF2YmFyLW5hdiBuYXZiYXItcmlnaHQnPlxuICAgICAgICAgICAgPGxpPjxhIGhyZWY9J2phdmFzY3JpcHQ6Oyc+TGluazwvYT48L2xpPlxuICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT0nZHJvcGRvd24nPlxuICAgICAgICAgICAgICA8YSBocmVmPScjJyBjbGFzc05hbWU9J2Ryb3Bkb3duLXRvZ2dsZScgZGF0YS10b2dnbGU9J2Ryb3Bkb3duJyByb2xlPSdidXR0b24nIGFyaWEtaGFzcG9wdXA9J3RydWUnIGFyaWEtZXhwYW5kZWQ9J2ZhbHNlJz5Ecm9wZG93biA8c3BhbiBjbGFzc05hbWU9J2NhcmV0JyAvPjwvYT5cbiAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT0nZHJvcGRvd24tbWVudSc+XG4gICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9J2phdmFzY3JpcHQ6Oyc+QWN0aW9uPC9hPjwvbGk+XG4gICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9J2phdmFzY3JpcHQ6Oyc+QW5vdGhlciBhY3Rpb248L2E+PC9saT5cbiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0namF2YXNjcmlwdDo7Jz5Tb21ldGhpbmcgZWxzZSBoZXJlPC9hPjwvbGk+XG4gICAgICAgICAgICAgICAgPGxpIHJvbGU9J3NlcGFyYXRvcicgY2xhc3NOYW1lPSdkaXZpZGVyJyAvPlxuICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9J2FjdGl2ZSc+PGEgaHJlZj0namF2YXNjcmlwdDo7Jz5BY3RpdmUgbGluazwvYT48L2xpPlxuICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9J2Rpc2FibGVkJz48YSBocmVmPSdqYXZhc2NyaXB0OjsnPkRpc2FibGVkIGxpbms8L2E+PC9saT5cbiAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgPC91bD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L25hdj5cblxuICApXG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE5hdnMgKCkge1xuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8aDI+TmF2czwvaDI+XG5cbiAgICAgIDxoND5UYWJzPC9oND5cbiAgICAgIDxkaXY+XG4gICAgICAgIDx1bCBjbGFzc05hbWU9J25hdiBuYXYtdGFicycgcm9sZT0ndGFibGlzdCc+XG4gICAgICAgICAgPGxpIHJvbGU9J3ByZXNlbnRhdGlvbicgY2xhc3NOYW1lPSdhY3RpdmUnPjxhIGhyZWY9JyNob21lJyBhcmlhLWNvbnRyb2xzPSdob21lJyByb2xlPSd0YWInIGRhdGEtdG9nZ2xlPSd0YWInPkhvbWU8L2E+PC9saT5cbiAgICAgICAgICA8bGkgcm9sZT0ncHJlc2VudGF0aW9uJz48YSBocmVmPScjcHJvZmlsZScgYXJpYS1jb250cm9scz0ncHJvZmlsZScgcm9sZT0ndGFiJyBkYXRhLXRvZ2dsZT0ndGFiJz5Qcm9maWxlPC9hPjwvbGk+XG4gICAgICAgIDwvdWw+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSd0YWItY29udGVudCc+XG4gICAgICAgICAgPGRpdiByb2xlPSd0YWJwYW5lbCcgY2xhc3NOYW1lPSd0YWItcGFuZSBhY3RpdmUnIGlkPSdob21lJz5cbiAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgdGhpcyBpcyBob21lLi4uXG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiByb2xlPSd0YWJwYW5lbCcgY2xhc3NOYW1lPSd0YWItcGFuZScgaWQ9J3Byb2ZpbGUnPlxuICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICB0aGlzIGlzIHByb2ZpbGUuLi5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGJyIC8+XG4gICAgICA8YnIgLz5cblxuICAgICAgPGg0PlBpbGxzPC9oND5cbiAgICAgIDx1bCBjbGFzc05hbWU9J25hdiBuYXYtcGlsbHMnPlxuICAgICAgICA8bGkgcm9sZT0ncHJlc2VudGF0aW9uJyBjbGFzc05hbWU9J2FjdGl2ZSc+PGEgaHJlZj0namF2YXNjcmlwdDo7Jz5Ib21lPC9hPjwvbGk+XG4gICAgICAgIDxsaSByb2xlPSdwcmVzZW50YXRpb24nPjxhIGhyZWY9J2phdmFzY3JpcHQ6Oyc+UHJvZmlsZTwvYT48L2xpPlxuICAgICAgICA8bGkgcm9sZT0ncHJlc2VudGF0aW9uJz48YSBocmVmPSdqYXZhc2NyaXB0OjsnPk1lc3NhZ2VzPC9hPjwvbGk+XG4gICAgICAgIDxsaSByb2xlPSdwcmVzZW50YXRpb24nIGNsYXNzTmFtZT0nZHJvcGRvd24nPlxuICAgICAgICAgIDxhIGNsYXNzTmFtZT0nZHJvcGRvd24tdG9nZ2xlJyBkYXRhLXRvZ2dsZT0nZHJvcGRvd24nIGhyZWY9JyMnIHJvbGU9J2J1dHRvbicgYXJpYS1oYXNwb3B1cD0ndHJ1ZScgYXJpYS1leHBhbmRlZD0nZmFsc2UnPlxuICAgICAgICAgICAgRHJvcGRvd24gPHNwYW4gY2xhc3NOYW1lPSdjYXJldCc+PC9zcGFuPlxuICAgICAgICAgIDwvYT5cbiAgICAgICAgICA8dWwgY2xhc3NOYW1lPSdkcm9wZG93bi1tZW51Jz5cbiAgICAgICAgICAgIDxsaT48YSBocmVmPSdqYXZhc2NyaXB0OjsnPkFjdGlvbjwvYT48L2xpPlxuICAgICAgICAgICAgPGxpPjxhIGhyZWY9J2phdmFzY3JpcHQ6Oyc+QW5vdGhlciBhY3Rpb248L2E+PC9saT5cbiAgICAgICAgICA8L3VsPlxuICAgICAgICA8L2xpPlxuICAgICAgPC91bD5cblxuICAgICAgPGJyIC8+XG4gICAgICA8YnIgLz5cblxuICAgICAgPGg0PlN0YWNrZWQgcGlsbHM8L2g0PlxuICAgICAgPHVsIGNsYXNzTmFtZT0nbmF2IG5hdi1waWxscyBuYXYtc3RhY2tlZCc+XG4gICAgICAgIDxsaSByb2xlPSdwcmVzZW50YXRpb24nIGNsYXNzTmFtZT0nYWN0aXZlJz48YSBocmVmPSdqYXZhc2NyaXB0OjsnPkhvbWU8L2E+PC9saT5cbiAgICAgICAgPGxpIHJvbGU9J3ByZXNlbnRhdGlvbicgY2xhc3NOYW1lPSdkaXNhYmxlZCc+PGEgaHJlZj0namF2YXNjcmlwdDo7Jz5Qcm9maWxlPC9hPjwvbGk+XG4gICAgICAgIDxsaSByb2xlPSdwcmVzZW50YXRpb24nPjxhIGhyZWY9J2phdmFzY3JpcHQ6Oyc+TWVzc2FnZXM8L2E+PC9saT5cbiAgICAgIDwvdWw+XG5cbiAgICAgIDxiciAvPlxuICAgICAgPGJyIC8+XG5cbiAgICAgIDxoND5KdXN0aWZpZWQ8L2g0PlxuICAgICAgPHVsIGNsYXNzTmFtZT0nbmF2IG5hdi10YWJzIG5hdi1qdXN0aWZpZWQnIHJvbGU9J3RhYmxpc3QnPlxuICAgICAgICA8bGkgcm9sZT0ncHJlc2VudGF0aW9uJyBjbGFzc05hbWU9J2FjdGl2ZSc+PGEgaHJlZj0nI2hvbWUnIGFyaWEtY29udHJvbHM9J2hvbWUnIHJvbGU9J3RhYicgZGF0YS10b2dnbGU9J3RhYic+SG9tZTwvYT48L2xpPlxuICAgICAgICA8bGkgcm9sZT0ncHJlc2VudGF0aW9uJz48YSBocmVmPScjcHJvZmlsZScgYXJpYS1jb250cm9scz0ncHJvZmlsZScgcm9sZT0ndGFiJyBkYXRhLXRvZ2dsZT0ndGFiJz5Qcm9maWxlPC9hPjwvbGk+XG4gICAgICAgIDxsaSByb2xlPSdwcmVzZW50YXRpb24nPjxhIGhyZWY9JyNtZXNzYWdlcycgYXJpYS1jb250cm9scz0ncHJvZmlsZScgcm9sZT0ndGFiJyBkYXRhLXRvZ2dsZT0ndGFiJz5NZXNzYWdlczwvYT48L2xpPlxuICAgICAgPC91bD5cbiAgICAgIDxiciAvPlxuICAgICAgPHVsIGNsYXNzTmFtZT0nbmF2IG5hdi1waWxscyBuYXYtanVzdGlmaWVkJz5cbiAgICAgICAgPGxpIHJvbGU9J3ByZXNlbnRhdGlvbicgY2xhc3NOYW1lPSdhY3RpdmUnPjxhIGhyZWY9J2phdmFzY3JpcHQ6Oyc+SG9tZTwvYT48L2xpPlxuICAgICAgICA8bGkgcm9sZT0ncHJlc2VudGF0aW9uJz48YSBocmVmPSdqYXZhc2NyaXB0OjsnPlByb2ZpbGU8L2E+PC9saT5cbiAgICAgICAgPGxpIHJvbGU9J3ByZXNlbnRhdGlvbic+PGEgaHJlZj0namF2YXNjcmlwdDo7Jz5NZXNzYWdlczwvYT48L2xpPlxuICAgICAgPC91bD5cblxuICAgIDwvZGl2PlxuICApXG59XG4iLCIvKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cblxuaW1wb3J0IFJlYWN0LCB7Q29tcG9uZW50fSBmcm9tICdyZWFjdCdcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCB7TW9kYWx9IGZyb20gJ3JlYWN0LWJvb3RzdHJhcCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2FtcGxlTW9kYWwgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgZ2V0IHByb3BUeXBlcyAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNob3c6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgICBvbkhpZGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9XG4gIH1cblxuICByZW5kZXIgKCkge1xuICAgIGNvbnN0IHtzaG93LCBvbkhpZGV9ID0gdGhpcy5wcm9wc1xuICAgIHJldHVybiAoXG4gICAgICA8TW9kYWwgc2hvdz17c2hvd30gb25IaWRlPXtvbkhpZGV9PlxuICAgICAgICA8TW9kYWwuSGVhZGVyIGNsb3NlQnV0dG9uPlxuICAgICAgICAgIDxNb2RhbC5UaXRsZT5IZWxsb3c8L01vZGFsLlRpdGxlPlxuICAgICAgICA8L01vZGFsLkhlYWRlcj5cbiAgICAgICAgPE1vZGFsLkJvZHk+XG4gICAgICAgICAgQTxiciAvPlxuICAgICAgICAgIEE8YnIgLz5cbiAgICAgICAgICBBPGJyIC8+XG4gICAgICAgICAgQTxiciAvPlxuICAgICAgICAgIEE8YnIgLz5cbiAgICAgICAgICBBPGJyIC8+XG4gICAgICAgICAgQTxiciAvPlxuICAgICAgICAgIEE8YnIgLz5cbiAgICAgICAgICBBPGJyIC8+XG4gICAgICAgICAgQTxiciAvPlxuICAgICAgICAgIEE8YnIgLz5cbiAgICAgICAgICBBPGJyIC8+XG4gICAgICAgICAgQTxiciAvPlxuICAgICAgICAgIEE8YnIgLz5cbiAgICAgICAgPC9Nb2RhbC5Cb2R5PlxuICAgICAgPC9Nb2RhbD5cbiAgICApXG4gIH1cbn1cbiIsIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG4vLyBjb25zdCBkZWJ1ZyA9IHJlcXVpcmUoJy4uL2xpYi9kZWJ1ZycpKF9fZmlsZW5hbWUpXG5cbmltcG9ydCBSZWFjdCwge0NvbXBvbmVudH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgQWxlcnRzIGZyb20gJy4vYWxlcnRzJ1xuaW1wb3J0IEJ1dHRvbnMgZnJvbSAnLi9idXR0b25zJ1xuaW1wb3J0IENhcmRzIGZyb20gJy4vY2FyZHMnXG5pbXBvcnQgRHJvcGRvd25zIGZyb20gJy4vZHJvcGRvd25zJ1xuaW1wb3J0IEZvcm1zIGZyb20gJy4vZm9ybXMnXG5pbXBvcnQgR3JpZCBmcm9tICcuL2dyaWQnXG5pbXBvcnQgTGFiZWxzIGZyb20gJy4vbGFiZWxzJ1xuaW1wb3J0IE1vZGFscyBmcm9tICcuL21vZGFscydcbmltcG9ydCBOYXZzIGZyb20gJy4vbmF2cydcbmltcG9ydCBUb29sdGlwcyBmcm9tICcuL3Rvb2x0aXBzJ1xuaW1wb3J0IFR5cGUgZnJvbSAnLi90eXBlJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTYW5kYm94ICh7Y29tcG9uZW50fSkge1xuICBzd2l0Y2ggKGNvbXBvbmVudCkge1xuICAgIGNhc2UgJ2FsZXJ0cyc6XG4gICAgICByZXR1cm4gPEFsZXJ0cyAvPlxuICAgIGNhc2UgJ2J1dHRvbnMnOlxuICAgICAgcmV0dXJuIDxCdXR0b25zIC8+XG4gICAgY2FzZSAnY2FyZHMnOlxuICAgICAgcmV0dXJuIDxDYXJkcyAvPlxuICAgIGNhc2UgJ2Ryb3Bkb3ducyc6XG4gICAgICByZXR1cm4gPERyb3Bkb3ducyAvPlxuICAgIGNhc2UgJ2Zvcm1zJzpcbiAgICAgIHJldHVybiA8Rm9ybXMgLz5cbiAgICBjYXNlICdncmlkJzpcbiAgICAgIHJldHVybiA8R3JpZCAvPlxuICAgIGNhc2UgJ2xhYmVscyc6XG4gICAgICByZXR1cm4gPExhYmVscyAvPlxuICAgIGNhc2UgJ21vZGFscyc6XG4gICAgICByZXR1cm4gPE1vZGFscyAvPlxuICAgIGNhc2UgJ25hdnMnOlxuICAgICAgcmV0dXJuIDxOYXZzIC8+XG4gICAgY2FzZSAndG9vbHRpcHMnOlxuICAgICAgcmV0dXJuIDxUb29sdGlwcyAvPlxuICAgIGNhc2UgJ3R5cGUnOlxuICAgICAgcmV0dXJuIDxUeXBlIC8+XG5cbiAgfVxuICByZXR1cm4gbnVsbFxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtUb29sdGlwLCBPdmVybGF5VHJpZ2dlcn0gZnJvbSAncmVhY3QtYm9vdHN0cmFwJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBUb29sdGlwcyAoKSB7XG4gIGNvbnN0IHRvb2x0aXAgPSAoXG4gICAgPFRvb2x0aXAgaWQ9J3Rvb2x0aXAnPkhlbGxvPC9Ub29sdGlwPlxuICApXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGgyPlRvb2x0aXBzPC9oMj5cbiAgICAgIDxPdmVybGF5VHJpZ2dlciBwbGFjZW1lbnQ9J3RvcCcgb3ZlcmxheT17dG9vbHRpcH0+XG4gICAgICAgIDxhIGhyZWY9J2phdmFzY3JpcHQ6Oyc+XG4gICAgICAgICAgSG92ZXIgbWVcbiAgICAgICAgPC9hPlxuICAgICAgPC9PdmVybGF5VHJpZ2dlcj5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFR5cGUgKCkge1xuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8aDE+aDEuIEJvb3RzdHJhcCBoZWFkaW5nPC9oMT5cbiAgICAgIDxoMj5oMi4gQm9vdHN0cmFwIGhlYWRpbmc8L2gyPlxuICAgICAgPGgzPmgzLiBCb290c3RyYXAgaGVhZGluZzwvaDM+XG4gICAgICA8aDQ+aDQuIEJvb3RzdHJhcCBoZWFkaW5nPC9oND5cbiAgICAgIDxwPk51bGxhbSBxdWlzIHJpc3VzIGVnZXQgdXJuYSBtb2xsaXMgb3JuYXJlIHZlbCBldSBsZW8uIEN1bSBzb2NpaXMgbmF0b3F1ZSBwZW5hdGlidXMgZXQgbWFnbmlzIGRpcyBwYXJ0dXJpZW50IG1vbnRlcywgbmFzY2V0dXIgcmlkaWN1bHVzIG11cy4gTnVsbGFtIGlkIGRvbG9yIGlkIG5pYmggdWx0cmljaWVzIHZlaGljdWxhLjwvcD5cbiAgICAgIDxwPkN1bSBzb2NpaXMgbmF0b3F1ZSBwZW5hdGlidXMgZXQgbWFnbmlzIGRpcyBwYXJ0dXJpZW50IG1vbnRlcywgbmFzY2V0dXIgcmlkaWN1bHVzIG11cy4gRG9uZWMgdWxsYW1jb3JwZXIgbnVsbGEgbm9uIG1ldHVzIGF1Y3RvciBmcmluZ2lsbGEuIER1aXMgbW9sbGlzLCBlc3Qgbm9uIGNvbW1vZG8gbHVjdHVzLCBuaXNpIGVyYXQgcG9ydHRpdG9yIGxpZ3VsYSwgZWdldCBsYWNpbmlhIG9kaW8gc2VtIG5lYyBlbGl0LiBEb25lYyB1bGxhbWNvcnBlciBudWxsYSBub24gbWV0dXMgYXVjdG9yIGZyaW5naWxsYS48L3A+XG4gICAgICA8cD5NYWVjZW5hcyBzZWQgZGlhbSBlZ2V0IHJpc3VzIHZhcml1cyBibGFuZGl0IHNpdCBhbWV0IG5vbiBtYWduYS4gRG9uZWMgaWQgZWxpdCBub24gbWkgcG9ydGEgZ3JhdmlkYSBhdCBlZ2V0IG1ldHVzLiBEdWlzIG1vbGxpcywgZXN0IG5vbiBjb21tb2RvIGx1Y3R1cywgbmlzaSBlcmF0IHBvcnR0aXRvciBsaWd1bGEsIGVnZXQgbGFjaW5pYSBvZGlvIHNlbSBuZWMgZWxpdC48L3A+XG4gICAgICA8ZGl2PlxuICAgICAgICA8cD48YSBocmVmPSdqYXZhc2NyaXB0OjsnPkhlcmUgaXMgYSB0ZXh0IGxpbms8L2E+PC9wPlxuICAgICAgICA8cD48YnV0dG9uIGNsYXNzTmFtZT0nYnRuIGJ0bi1saW5rJz5CdXR0b24gbGluazwvYnV0dG9uPjwvcD5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApXG59XG4iLCIvKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cblxuaW1wb3J0ICdiYWJlbC1wb2x5ZmlsbCdcbmlmIChsb2NhdGlvbi5wYXRobmFtZSAhPT0gJy9kZWZhdWx0Lmh0bWwnKSB7XG4gIHJlcXVpcmUoJ2ZvY3VzLXZpc2libGUnKVxufVxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtyZW5kZXJ9IGZyb20gJ3JlYWN0LWRvbSdcblxuaW1wb3J0IEFwcCBmcm9tICcuL2NvbXBvbmVudHMvYXBwJ1xuXG5jb25zdCBhcHBDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXBwLWNvbnRhaW5lcicpXG5pZiAoYXBwQ29udGFpbmVyKSB7XG4gIHJlbmRlcigoPEFwcCAvPiksIGFwcENvbnRhaW5lcilcbn1cbiJdfQ==
